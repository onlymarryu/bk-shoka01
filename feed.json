{
    "version": "https://jsonfeed.org/version/1",
    "title": "每天进步一点点，就是成功的开始",
    "subtitle": "",
    "icon": "https://eth168.top/images/favicon.ico",
    "description": "花非花，雾非雾",
    "home_page_url": "https://eth168.top",
    "items": [
        {
            "id": "https://eth168.top/study/httpTohttps/",
            "url": "https://eth168.top/study/httpTohttps/",
            "title": "配置https",
            "date_published": "2023-02-04T15:05:52.000Z",
            "content_html": "<p>前提：</p>\n<ol>\n<li>首先要有一个自己的域名，可以去阿里等平台购买</li>\n<li>要有一个阿里云或者腾讯云账号</li>\n</ol>\n<p>参考自：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDgxMzg3\">如何将域名 http 转换成 https？</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJ1c3RhdXRoLmNuL3NzbC1ndWlkZS82NTUuaHRtbA==\">Tomcat SSL 证书安装指南</span></li>\n</ul>\n<h1 id=\"前情提要\"><a class=\"anchor\" href=\"#前情提要\">#</a> 前情提要</h1>\n<blockquote>\n<p>http 和 https 区别？</p>\n</blockquote>\n<ol>\n<li>\n<p>HTTP 协议以 <strong> <code>明文方式发送内容，不提供任何方式的数据加密</code> </strong> 。HTTP 协议不适合传输一些敏感信息，比如：信用卡号、密码等支付信息。https 则是 <strong> <code>具有安全性的ssl加密传输协议</code> </strong>。</p>\n</li>\n<li>\n<p>http 和 https 使用的是完全不同的连接方式，用的 <strong> <code>端口也不一样</code> </strong> ，前者是 <code>80</code> ，后者是 <code>443</code> 。</p>\n</li>\n<li>\n<p><strong>https 协议需要到 ca 申请证书</strong>。</p>\n</li>\n<li>\n<p><strong>http 的连接很简单，是无状态的</strong>。</p>\n</li>\n<li>\n<p><strong>HTTPS 协议是由  <code>SSL+HTTP</code>  协议构建的可进行加密传输、身份认证的网络协议，要比 http 协议安全</strong>。</p>\n</li>\n</ol>\n<p>HTTPS 协议的主要作用可以分为两种：</p>\n<ul>\n<li>一种是建立一个信息安全通道，来保证数据传输的安全</li>\n<li>一种就是确认网站的真实性。</li>\n</ul>\n<p><strong>HTTPS 在 HTTP 的基础上加入了 SSL 协议，SSL 依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。</strong></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>分享一篇将自己的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9hY3QvcHJvL2RvbWFpbi1zYWxlcz9mcm9tPTEwNjgw\">域名</span>由 http 转换成 https 的文章，由 http 转 https 首先要有个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9wcm9kdWN0L2JhP2Zyb209MTA2ODA=\">备案</span>的域名和一个可用的服务器，然后在自己的服务器上安装 ssl 证书所对应的服务，先用 tomcat 的服务做演示。</p>\n<h1 id=\"在腾讯云找到ssl证书申请\"><a class=\"anchor\" href=\"#在腾讯云找到ssl证书申请\">#</a> 在腾讯云找到 ssl 证书申请</h1>\n<blockquote>\n<p>​\t\t这里以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb25zb2xlLmNsb3VkLnRlbmNlbnQuY29tL3NzbA==\">腾讯云</span>为例，<span class=\"exturl\" data-url=\"aHR0cHM6Ly95dW5kdW4uY29uc29sZS5hbGl5dW4uY29tLz9wPWNhcyMvY2VydEV4dGVuZC9mcmVl\">阿里云</span>也行。他们都是具有申请免费证书的。都是 20 个，但是只有一年有效期，过期得重新申请</p>\n</blockquote>\n<img data-src=\"/study/httpTohttps/r5ac462y3l.jpeg\" class=\"\" title=\"img\">\n<h2 id=\"进入滑到最低下-点击开始使用\"><a class=\"anchor\" href=\"#进入滑到最低下-点击开始使用\">#</a> 进入滑到最低下 点击开始使用</h2>\n<img data-src=\"/study/httpTohttps/7ybz3pq1fh.png\" class=\"\" title=\"img\">\n<h2 id=\"申请证书\"><a class=\"anchor\" href=\"#申请证书\">#</a> 申请证书</h2>\n<img data-src=\"/study/httpTohttps/cndlxb9hiq.jpeg\" class=\"\" title=\"img\">\n<h2 id=\"填写相关信息\"><a class=\"anchor\" href=\"#填写相关信息\">#</a> 填写相关信息</h2>\n<img data-src=\"/study/httpTohttps/29gk7s19dj.jpeg\" class=\"\" title=\"img\">\n<ul>\n<li>\n<p>通用名称 -- 你自己的域名</p>\n</li>\n<li>\n<p>申请邮箱 -- 用于验证的</p>\n</li>\n<li>\n<p>证书备注名 -- 自定义随便取个吧</p>\n</li>\n<li>\n<p>私钥密码 -- 可填可不填（我这已经填了）</p>\n</li>\n<li>\n<p>所属项目 -- 都是默认项目</p>\n</li>\n<li>\n<p>ps: 填完之后下一步，有三个选项</p>\n<ul>\n<li>如果你的域名已经绑定了服务器，就选择自动</li>\n<li>否则选择手动，最后一个基本不用管</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"下载证书\"><a class=\"anchor\" href=\"#下载证书\">#</a> 下载证书</h1>\n<p>我这已经审核通过然后下载下来</p>\n<img data-src=\"/study/httpTohttps/usdmiv6p0p.png\" class=\"\" title=\"img\">\n<p>下载下来就长这个样</p>\n<img data-src=\"/study/httpTohttps/4mrx67821u.jpeg\" class=\"\" title=\"img\">\n<p>里面的内容</p>\n<img data-src=\"/study/httpTohttps/mzv158q214.jpeg\" class=\"\" title=\"img\">\n<p>Tomcat 下的内容</p>\n<img data-src=\"/study/httpTohttps/o984rob9b5.jpeg\" class=\"\" title=\"img\">\n<p>SSL 准备工作已经完成接下来在服务器上搭个 tomcat 运行起来</p>\n<h1 id=\"搭建服务\"><a class=\"anchor\" href=\"#搭建服务\">#</a> 搭建服务</h1>\n<blockquote>\n<p>方式： <code>Tomcat</code></p>\n</blockquote>\n<p>搭建服务首先在自己的服务器上安装 jdk 和 tomcat 并让 tomcat 正常运行起来这边我已经搭建好了 然后将我们的域名绑定服务器使用域名能访问的 tomcat 首页即正常</p>\n<img data-src=\"/study/httpTohttps/iudcsosu15.jpeg\" class=\"\" title=\"img\">\n<p>此时我们用的还是 http 形式访问，前期工作准备好接下来进入主题</p>\n<h1 id=\"http转成https\"><a class=\"anchor\" href=\"#http转成https\">#</a> http 转成 https</h1>\n<h2 id=\"tomcat配置证书\"><a class=\"anchor\" href=\"#tomcat配置证书\">#</a> Tomcat 配置证书</h2>\n<p>将下载的 SSL 证书 tomcat 下的文件拷贝出来</p>\n<img data-src=\"/study/httpTohttps/wwmwha9fg9.jpeg\" class=\"\" title=\"img\">\n<p>放到服务器 tomcat 目录下的 conf 中</p>\n<img data-src=\"/study/httpTohttps/9foc24d6qe.jpeg\" class=\"\" title=\"img\">\n<p>再将 server.xml 拷出来做相应的修改如下： Server.xml：</p>\n<img data-src=\"/study/httpTohttps/owo7czdo4q.jpeg\" class=\"\" title=\"img\">\n<p>Ps： 配置同目录下的 server.xml 文件，注意域名是否填写正确，区分 com、cn</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 配置 SSl 证书 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Connector</span> <span class=\"token attr-name\">port</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>443<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">protocol</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HTTP/1.1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">SSLEnabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token attr-name\">maxThreads</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>150<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scheme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">secure</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token attr-name\">keystoreFile</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>conf/www.XXXXXXX.YYY.jks<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token attr-name\">keystorePass</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>密钥库密码文件中的密码<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token attr-name\">clientAuth</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">sslProtocol</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TLS<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">&lt;!--        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    配置文件参数 说明</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    clientAuth </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    如果设为 true，表示 Tomcat 要求所有的 SSL 客户出示安全证书，对 SSL 客户进行身份验证</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    keystoreFile </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    指定 keystore 文件的存放位置，可以指定绝对路径，也可以指定相对于 （Tomcat 安装目录）环境变量的相对路径。如果此项没有设定，默认情况下，Tomcat 将从当前操作系统用户的用户目录下读取名为 “.keystore” 的文件。</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tkeystorePass </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    密钥库密码，指定 keystore 的密码。（如果申请证书时有填写私钥密码，密钥库密码即私钥密码，否则填写密钥库密码文件中的密码）</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tsslProtocol </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    指定套接字（Socket）使用的加密 / 解密协议，默认值为 TLS</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    继续在 server.xml 进行配置：</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    我这里将默认端口改为了 80</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">&lt;!-- 将 8080 端口需改为 80--></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">&lt;!-- 配置 SSl 证书，步骤 3 将 8443 修改为 443，服务器端需要放开 443--></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Connector</span> <span class=\"token attr-name\">port</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>80<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">protocol</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HTTP/1.1<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>               <span class=\"token attr-name\">connectionTimeout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>20000<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>               <span class=\"token attr-name\">redirectPort</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>443<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p><strong>如果服务有端口安全组要记得方对应的安全组</strong>， 如：80 和 433 端口我这已经开放所有端口</p>\n<h2 id=\"nginx配置证书\"><a class=\"anchor\" href=\"#nginx配置证书\">#</a> Nginx 配置证书</h2>\n<p>参考：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5jaXR5eWNmL2FydGljbGUvZGV0YWlscy8xMjE2ODU2OTg=\">nginx 中 http 转 https 的几种方式</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2OTA4ODcyL2FydGljbGUvZGV0YWlscy8xMjcyODQ5NTU=\">Nginx 配置 ssl 证书详细步骤</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZGlnaXRhbG9jZWFuLmNvbS9jb21tdW5pdHkvdG9vbHMvbmdpbng/Z2xvYmFsLmFwcC5sYW5nPXpoQ04=\">Nginx-Config   Nginx 在线编辑</span></li>\n</ul>\n<ol>\n<li>进入到 nginx 目录，查看有没有 ** <code>http_ssl_module</code> ** 模块</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./nginx <span class=\"token parameter variable\">-V</span></pre></td></tr></table></figure><p>​\t<img data-src=\"/study/httpTohttps/08153632_6391940031dd075438.png\" class=\"\" title=\"Nginx配置ssl证书(https证书)_SSL\"></p>\n<ol start=\"2\">\n<li>如果没有，找到源码，输入以下命令进行安装 (<strong>如果有，跳转到第 6 步</strong>)</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># prefix 后面的路径是你安装 nginx 的路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./configure <span class=\"token parameter variable\">--prefix</span><span class=\"token operator\">=</span>/usr/local/nginx --with-http_ssl_module</pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p><code>configure </code> 执行完成后，输入 <strong> <code>make</code> </strong></p>\n<p><strong>注意</strong>：千万<strong>不要 <strong> <code>make install</code> </strong>，这样会覆盖原有的配置</strong></p>\n</li>\n<li>\n<p><code>make</code>  完成后，<strong>停止 nginx 服务</strong>，进入 <strong> <code>objs</code> </strong> 目录，将 **<mark>nginx 启动程序，拷贝到安装目录下，替换原有的启动程序</mark> **</p>\n</li>\n<li>\n<p>启动 nginx</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#查看是否安装成功</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./nginx <span class=\"token parameter variable\">-V</span></pre></td></tr></table></figure></li>\n<li>\n<p>新建一个目录 cert ，把申请下来的证书上传上去</p>\n</li>\n<li>\n<p>打开配置文件 nginx.conf, 加入以下配置</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 配置 ssl</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    server<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token comment\"># 设置 SSL 功能</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token comment\"># 监听的端口，nginx 1.15.0 及以上版本，使用 listen 443 ssl 代替，1.15.0 以下的使用 listen 443</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        listen <span class=\"token number\">443</span> ssl<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># test.com 修改为证书绑定的域名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        server_name test.com<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\"># ssl 证书地址</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># 指定 pem 文件所在路径，如果写相对路径，必须把该文件和 nginx.conf 文件放到一个目录下</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ssl_certificate cert/xxxx.pem<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        ssl_certificate /usr/local/nginx/cert/ssl.crt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">#指定私钥文件 key 所在路径，如果写相对路径，必须把该文件和 nginx.conf 文件放到一个目录下。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        ssl_certificate_key /usr/local/nginx/cert/ssl.key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\"># ssl 验证相关配置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\"># 缓存有效期</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        ssl_session_timeout 5m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># 配置协议，也叫安全链接可选的加密协议</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        ssl_protocols TLSv1 TLSv1.1 TLSv1.2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\"># 加密套件，加密算法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:<span class=\"token operator\">!</span>aNULL:<span class=\"token operator\">!</span>MD5:<span class=\"token operator\">!</span>RC4:<span class=\"token operator\">!</span>DHE<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\"># 使用服务器端的首选算法</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        ssl_prefer_server_ciphers on<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">#如果是静态文件，直接指向目录，如果是动态应用，用 proxy_pass 转发一下</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        location / <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                root /usr/local/service/ROOT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                index index.html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\"># 原来的转发</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\"># 监听 80 端口，并重定向到 443</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    server<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        listen <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        server_name test.com<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\"># 用地址重写规则</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        rewrite ^/<span class=\"token punctuation\">(</span>.*<span class=\"token punctuation\">)</span>$ https://test.com:443/<span class=\"token variable\">$1</span> permanent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>重启 nginx</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./nginx <span class=\"token parameter variable\">-s</span> reload</pre></td></tr></table></figure><p>如果重启的时候提示 rewrite 错误，说明你的 nginx 没有安装 rewrite 模块，很不幸，照着 2,3,4,5 步回去重新配一下 nginx</p>\n</li>\n<li>\n<p>提问</p>\n<ol>\n<li>\n<p>一个 SSL 证书只能对应一个端口吗 ？</p>\n<p>443 端口只是 SSL 证书的默认端口，SSL 证书也是支持其他非 443 自定义端口的。多个端口的 nginx 在同一个 ip 地址里面是可以使用同一个 ssl 证书的。</p>\n<p>换一下 端口号，剩下的步骤都是一样的（无需修改 conf 里面的端口号）。</p>\n<p>简单来说就是：<strong>我们现在这个 ip 转发的东西都是安全的证书在我们这里就行，和端口无关</strong></p>\n</li>\n<li>\n<p>服务器报警：启用了不安全的 TLS1.0 协议</p>\n<p>最近在使用过程中，进行安全漏扫的时候报了这个警告。</p>\n<p>TLS 1.0 是于 1996 年发布的老版协议，使用的是弱加密算法和系统。比如 SHA-1 和 MD5，这些算法和系统十分脆弱，存在重大安全，容易受到降级的严重影响。</p>\n<p><strong>修复方法：</strong><br />\n将 conf 文件中的 <code>ssl_protocols </code> 改为  TLSv1.2 TLSv1.3</p>\n<pre><code>ssl_protocols TLSv1.2 TLSv1.3;\n</code></pre>\n<p>若配置文件里面没有 ssl_protocols 则在开启了 ssl 的配置文件里面 添加上面那行代码</p>\n <img data-src=\"/study/httpTohttps/08153632_639194005353b12616.png\" class=\"\" title=\"Nginx配置ssl证书(https证书)_nginx_02\">\n<p>然后重启 nginx。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h1 id=\"接下来启动tomcat-大功告成\"><a class=\"anchor\" href=\"#接下来启动tomcat-大功告成\">#</a> 接下来启动 tomcat 大功告成</h1>\n<img data-src=\"/study/httpTohttps/gyun5wcjb2.jpeg\" class=\"\" title=\"img\">\n<p>Nginx 的就不在展示，效果类似</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "小实验",
                "小实验"
            ]
        },
        {
            "id": "https://eth168.top/study/eu.org/",
            "url": "https://eth168.top/study/eu.org/",
            "title": "获取免费域名",
            "date_published": "2023-01-27T16:00:00.000Z",
            "content_html": "<h1 id=\"一-注册账号\"><a class=\"anchor\" href=\"#一-注册账号\">#</a> 一、注册账号</h1>\n<p>首先进入注册页面注册一个网站的账号<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaWMuZXUub3JnL2FyZi9lbi9sb2dpbi8/bmV4dD0vYXJmL2VuLw==\"> https://nic.eu.org/arf/en/login/?next=/arf/en/</span></p>\n<p><strong>点击 Register 注册</strong></p>\n<img data-src=\"/study/eu.org/image.png\" class=\"\" title=\"image\">\n<p>注意：</p>\n<ol>\n<li>\n<p><strong>name</strong>：随便起例如：TongZi Long (注意<strong>中间必须有一个空格</strong>)</p>\n</li>\n<li>\n<p>E-main：一定要是你自己的，后面要收到邮件信息的</p>\n</li>\n<li>\n<p>Address：可以参考地址生成器生成地址</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWVpZ3VvZGl6aGkuY29tLw==\">https://www.meiguodizhi.com/</span></p>\n <img data-src=\"/study/eu.org/image-20230128162653642.png\" class=\"\" title=\"image-20230128162653642\">\n</li>\n<li>\n<p>Country：China</p>\n</li>\n<li>\n<p>Password：密码</p>\n</li>\n</ol>\n<h1 id=\"二-注册成功\"><a class=\"anchor\" href=\"#二-注册成功\">#</a> 二、注册成功</h1>\n<p>注册账号成功以后，邮箱会收到一份激活邮件，按要求激活即可<br />\n<img data-src=\"https://www.ywsj.cf/upload/2022/10/image-1664792704064.png\" alt=\"image-1664792704064\" /></p>\n<p>注意： <code>nic-hdl</code>  要保存好，这个相当于我们的 QQ 号，不然要重新申请账号，密码是上面申请账号的时候设定的</p>\n<h1 id=\"三-申请域名\"><a class=\"anchor\" href=\"#三-申请域名\">#</a> 三、申请域名</h1>\n<ol>\n<li>\n<p>登录成功以后新创建一个域名</p>\n <img data-src=\"/study/eu.org/image-1664791449105.png\" class=\"\" title=\"image-1664791449105\">\n</li>\n<li>\n<p>dns 地址可以填写这这个</p>\n<pre><code>edmund.dnspod.net\ndempsey.dnspod.net\n</code></pre>\n <img data-src=\"/study/eu.org/image-1664791717005.png\" class=\"\" title=\"image-1664791717005\">\n<p>注意：</p>\n<ol>\n<li>申请的域名必须是三级域名所以他的后缀必须为：<span class=\"exturl\" data-url=\"aHR0cDovL2V1Lm9yZw==\">eu.org</span></li>\n<li>IPV4/6 解析可写可不写（<strong>后期配置 DNS 的时候还要换</strong>）</li>\n</ol>\n</li>\n<li>\n<p>结果</p>\n <img data-src=\"/study/eu.org/image-1664791854050.png\" class=\"\" title=\"image-1664791854050\">\n<p>表示申请完成，等待审核即可，7-30 天</p>\n <img data-src=\"/study/eu.org/12.png\" class=\"\" width=\"12\">\n <img data-src=\"/study/eu.org/13.png\" class=\"\" width=\"13\">\n</li>\n</ol>\n<h1 id=\"四-绑定cloudflare\"><a class=\"anchor\" href=\"#四-绑定cloudflare\">#</a> 四、绑定 Cloudflare</h1>\n<h2 id=\"41注册cloudflare账号\"><a class=\"anchor\" href=\"#41注册cloudflare账号\">#</a> 4.1 注册 Cloudflare 账号</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vemgtY24v\">https://www.cloudflare.com/zh-cn/</span></p>\n<h2 id=\"42登录cloudflare账号\"><a class=\"anchor\" href=\"#42登录cloudflare账号\">#</a> 4.2 登录 Cloudflare 账号</h2>\n<ol>\n<li>\n<p>添加站点 - 填入自己要绑定的域名</p>\n <img data-src=\"/study/eu.org/image-1666595393624.png\" class=\"\" title=\"image-1666595393624\">\n<p>选择免费<br />\n<img data-src=\"https://www.ywsj.cf/upload/2022/10/image-1666597373535.png\" alt=\"image-1666597373535\" /></p>\n</li>\n<li>\n<p>添加 Cloudflare 名称服务器<br />\n<img data-src=\"https://www.ywsj.cf/upload/2022/10/image-1666597511561.png\" alt=\"image-1666597511561\" /></p>\n</li>\n<li>\n<p>在 eu.org 中 - 选择自己的域名 - Nameservers<br />\n<img data-src=\"https://www.ywsj.cf/upload/2022/10/image-1666597660513.png\" alt=\"image-1666597660513\" /></p>\n</li>\n<li>\n<p>将 Cloudflare 中的两个地址替换到这里<br />\n<img data-src=\"https://www.ywsj.cf/upload/2022/10/image-1666597900831.png\" alt=\"image-1666597900831\" /></p>\n</li>\n<li>\n<p>刚添加完是这样的<br />\n<img data-src=\"https://www.ywsj.cf/upload/2022/10/image-1666597965213.png\" alt=\"image-1666597965213\" /><br />\n<strong> 等待一段时间（不到一小时）</strong>  <code>要等，他不是立刻就好的</code> <br />\n即可收到绑定成功的邮件 - 变成了这样 - 有效</p>\n <img data-src=\"/study/eu.org/image-1666598100332.png\" class=\"\" title=\"image-1666598100332\">\n</li>\n</ol>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "小实验",
                "小实验"
            ]
        },
        {
            "id": "https://eth168.top/interview/MySQL/",
            "url": "https://eth168.top/interview/MySQL/",
            "title": "MySQL复习题",
            "date_published": "2023-01-24T04:43:45.719Z",
            "content_html": "<h1 id=\"数据库存储引擎有哪些\"><a class=\"anchor\" href=\"#数据库存储引擎有哪些\">#</a> 数据库存储引擎有哪些</h1>\n<p>Myisam、Innodb</p>\n<h1 id=\"myisam和innodb有什么区别\"><a class=\"anchor\" href=\"#myisam和innodb有什么区别\">#</a> Myisam 和 Innodb 有什么区别</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">区别</th>\n<th style=\"text-align:center\">MyISAM</th>\n<th style=\"text-align:center\">InnoDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据结构</td>\n<td style=\"text-align:center\">.frm 存储表定义 <br/>.MYD  存储数据文件<br/>.MYI  存储索引文件</td>\n<td style=\"text-align:center\">.frm 存储表定义<br/>.ibd 存储数据和索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">存储空间</td>\n<td style=\"text-align:center\">MyISAM<strong> 可被压缩，存储空间较小</strong><br/>支持三种存储：静态表 [默认]、动态表、压缩表</td>\n<td style=\"text-align:center\">InnoDB<strong> 需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引</strong>。InnoDB 所在的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间）<br/>InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">事务的支持</td>\n<td style=\"text-align:center\">MyISAM 强调的是性能，每次查询具有原子性，其执行速度比 Innodb 类型更快，<br/>但是<strong>不提供事务支持</strong>。</td>\n<td style=\"text-align:center\">InnoDB 除了<em><strong>提供事务支持</strong></em>和外部键等高级数据库功能。还具有事务提交（commit）、回滚（rollback）和崩溃修复能力（crach recovery capabilities）等这些事务安全（transaction-safe ACID compliant）型表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">锁的支持</td>\n<td style=\"text-align:center\">如果只是执行大量的查询，MyISAM 是更好的选择。MyISAM 在<strong>增删</strong>的时候需要<strong>锁定整个表格</strong>，效率会低一些</td>\n<td style=\"text-align:center\">innoDB 支持行级锁，<em><strong>删除插入</strong></em>的时候只需要<em><strong>锁定操作行</strong></em>就行。如果有大量的插入、修改删除操作，使用 InnoDB 性能能会更高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查询效率</td>\n<td style=\"text-align:center\"><strong>高</strong><br>支持全文索引</td>\n<td style=\"text-align:center\"><strong>低</strong><br/>不支持全文索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">外键的支持</td>\n<td style=\"text-align:center\">MyISAM<strong> 不支持外键</strong></td>\n<td style=\"text-align:center\">支持外键</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"如何选择数据库引擎\"><a class=\"anchor\" href=\"#如何选择数据库引擎\">#</a> 如何选择数据库引擎？</h1>\n<p>1、如果需要支持事务，选择 InnoDB，不需要事务则选择 MyISAM。</p>\n<p>2、如果大部分表操作都是查询，选择 MyISAM，有写又有读选 InnoDB。</p>\n<p>3、如果系统崩溃导致数据难以恢复，且成本高，不要选择 MyISAM。</p>\n<h1 id=\"三范式是什么\"><a class=\"anchor\" href=\"#三范式是什么\">#</a> 三范式是什么</h1>\n<p>第一范式：列不可再分</p>\n<p>第二范式：行可以唯一区分，主键约束</p>\n<p>第三范式：表的非主属性不能依赖与其他表的非主属性  外键约束</p>\n<p>简单来说，第一范式就是让属性原子化，不可再分；第二范式就是让数据具有主属性从而产生唯一标识（特别是为了标识有联合主键的情况）；第三范式就是表的非主属性不能依赖与其他表的非主属性，也可以说是表中的属性不能有依赖关系</p>\n<img data-src=\"/interview/MySQL/image-20220714214608165.png\" class=\"\" title=\"image-20220714214608165\">\n<h1 id=\"什么是事务有哪些特点\"><a class=\"anchor\" href=\"#什么是事务有哪些特点\">#</a> 什么是事务，有哪些特点</h1>\n<p>事务是用来维护数据库完整性的，具体体现就是多条 sql 语句，要么全部成功，要么全部失败。</p>\n<p>特点：<mark>ACID</mark></p>\n<p>A:（原子性 Atomicity）、C: 一致性（Consistency）、I：隔离性（Isolation）、D：持久性（Durability）</p>\n<p>1) 原子性<br />\n原子是自然界最小的颗粒，具有不可再分的特性</p>\n<ol start=\"2\">\n<li>\n<p>一致性<br />\n一致性是指事务执行的结果必须使数据库从一个一致性状态，变到另一个一致性状态。</p>\n</li>\n<li>\n<p>隔离性<br />\n隔离性是指各个事务的执行互不干扰</p>\n</li>\n</ol>\n<p>4) 持久性<br />\n持久性指事务一旦提交，对数据所做的任何改变，都要记录到永久存储器中</p>\n<h1 id=\"事务的隔离级别有哪些\"><a class=\"anchor\" href=\"#事务的隔离级别有哪些\">#</a> 事务的隔离级别有哪些</h1>\n<p>由低到高：</p>\n<img data-src=\"/interview/MySQL/image-20220714221905692.png\" class=\"\" title=\"image-20220714221905692\">\n<p><strong>READ UNCOMMITTED（读未提交）</strong></p>\n<p>​\t在这个隔离级别，所有事务都可以看到未提交事务的执行结果。在这种隔离级别上，可能会产生很多问题。所以这种隔离级别很少用于实际应用，而且它的性能也没有比其他性能好很多，而别的级别还有其他的优点。读取未提交数据，也被称为 “脏读”。</p>\n<p><strong>READ COMMITTED（读已提交）</strong></p>\n<p>​\t读已提交这种隔离级别是大多数数据库系统默认的隔离级别（但 mysql 默认的隔离级别却不是这种），满足了隔离的最早简单定义：一个事务开始时，只能看见已经提交事务所做的改变，一个事务从开始到提交前，所做的任何数据改变都是不可见的，除非已经提交。这种隔离级别也支持所谓的不可重复读。这意味着用户运行同一个语句两次，看到的结果是不同的。</p>\n<p><strong>REPEATABLE READ（可重复读）</strong></p>\n<p>​\tmysql 数据库默认的隔离级别。该级别解决了 READ UNCOMMITTED 导致的问题。它保证了同一事务的多个实例在并发读取事务时，会看到同样的数据行。不过这会导致另外一个问题 “幻读”。InnoDB 和 Falcon 存储引擎通过多版本并发控制解决了幻读问题。</p>\n<p><strong>SERIALIZABLE（可串行化）</strong></p>\n<p>​\t该隔离级别是最高的隔离级别。它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简而言之：SERIALIZABLE 是在每个读的数据行加锁，在这个级别上可能导致大量的超时和锁竞争现象，实际应用中很少使用这个级别，但如果用户的应用为了数据的稳定性，需要强制减少并发，也可以选择这种隔离级别。</p>\n<h1 id=\"并发事务带来哪些问题\"><a class=\"anchor\" href=\"#并发事务带来哪些问题\">#</a> 并发事务带来哪些问题？</h1>\n<p><strong>脏读（Dirty read）</strong></p>\n<p>​\t当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是 “脏数据”，依据 “脏数据” 所做的操作可能是不正确的。</p>\n <img data-src=\"/interview/MySQL/image-20220714222508260.png\" class=\"\" title=\"image-20220714222508260\">\n<p><strong>不可重复读（Unrepeatableread）</strong></p>\n<p>​\t指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>\n <img data-src=\"/interview/MySQL/image-20220714222512979.png\" class=\"\" title=\"image-20220714222512979\">\n<p><strong>幻读 （Phantom read）</strong></p>\n<p>幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n <img data-src=\"/interview/MySQL/image-20220714222518876.png\" class=\"\" title=\"image-20220714222518876\">\n<h1 id=\"不可重复度和幻读区别\"><a class=\"anchor\" href=\"#不可重复度和幻读区别\">#</a> 不可重复度和幻读区别？</h1>\n<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<p>解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>\n<h1 id=\"sql优化手段有哪些\"><a class=\"anchor\" href=\"#sql优化手段有哪些\">#</a> SQL 优化手段有哪些？</h1>\n<p>1、查询语句中不要使用 select *</p>\n<p>2、尽量减少子查询，使用关联查询（left join,right join,inner join）替代</p>\n<p>3、减少使用 IN 或者 NOT IN , 使用 exists，not exists 或者关联查询语句替代</p>\n<p>4、or 的查询尽量用 union 或者 union all 代替 (在确认没有重复数据或者不用剔除重复数据时，union all 会更好)</p>\n<p>5、应尽量避免在 where 子句中使用！= 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n<p>6、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： select id from t where num is null 可以在 num 上设置默认值 0，确保表中 num 列没有 null 值，然后这样查询： select id from t where num=0</p>\n<h1 id=\"undo-log日志详解\"><a class=\"anchor\" href=\"#undo-log日志详解\">#</a> undo log 日志详解</h1>\n<ol>\n<li>\n<p>什么是 undo log？<br />\n撤销日志，在数据库事务开始之前，MYSQL 会去记录更新前的数据到 undo log 文件中。如果事务回滚或者数据库崩溃时，可以利用 undo log 日志中记录的日志信息进行回退。同时也可以提供多版本并发控制下的读 (MVCC)。（具体的 MVCC 实现机制详解看这篇博客）</p>\n</li>\n<li>\n<p>undo log 生命周期<br />\n undo log 产生： 在事务开始之前生成<br />\n undo log 销毁： <strong>当事务提交之后，undo log 并不能立马被删除</strong>，而是放入待清理的链表，由 purge 线程判断是否由其他事务在使用 undo 段中表的上一个事务之前的版本信息，决定是否可以清理 undo log 的日志空间。<br />\n<strong>注意： undo log 也会生产 redo log，undo log 也要实现持久性保护。</strong></p>\n</li>\n<li>\n<p><strong>uodo log 日志的作用</strong><br />\n首先简单说一下<strong> undolog 和 redo log 的区别</strong><br />\n <code>undo log</code>  是逻辑日志，实现事务的原子性<br />\n  undo log 记录的是事务 [ <code>开始前</code> ] 的数据状态，记录的是更新之前的值<br />\n  undo log 实现事务的 <code>原子性</code>  (<strong>提供回滚</strong>)<br />\n <code>redo log</code>  是物理日志，实现事务的持久性<br />\n  redo log 记录的是事务 [ <code>完成后</code> ] 的数据状态，记录的是更新之后的值<br />\n  redo log 实现事务的 <code>持久性</code>  (<strong>保证数据的完整性</strong>)</p>\n</li>\n</ol>\n<img data-src=\"/interview/MySQL/bbd9b47cd66648cd99c3ce54090ba69e.png\" class=\"\" title=\"在这里插入图片描述\">\n<ol start=\"4\">\n<li>\n<p>undo log 版本链是什么？<br />\n在 undo log 日志里，每条数据除了自有的那些字段 (表 id、日志类型、数据页号等等)，其实还会有两个隐藏字段，一个是 trx_id，另一个是 roll_pointer。这个 trx_id 就是最近一次更新的事务 id，roll_pointer 是指向你更新这个事务之前生成的 undo log 数据。</p>\n<p>这里给大家举个例子：<br />\n假设有一个事务 A，插入了一个数据 A，此时的 undo log 数据结构如下：</p>\n <img data-src=\"/interview/MySQL/719f98466ea94f278dd2a4315368c622.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>因为事务 id 是 10，所以这条数据的 trx_id=10。因为是插入数据，所以没有下一个 undo log 数据，roll_pointer 是空的。接着，此时有一个事务 B 需要执行，事务 B 的 id=20，那么执行完之后就会新生成一条 undo log 日志数据，trx_id=20，roll_pointer 就会指向实际的回滚日志，也就是值 A 那条数据。结构如下图所示：</p>\n <img data-src=\"/interview/MySQL/bdbb19325c504296bb8dc40d9ee4bbe9.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>以此类推，在这个多个事务中，每个事务新生成的 undo log 日志数据的 roll_pointer 都会指向前一个 undo log 日志数据，一次行程 undo log 版本链。</p>\n</li>\n</ol>\n<h1 id=\"mvcc详解\"><a class=\"anchor\" href=\"#mvcc详解\">#</a> MVCC 详解</h1>\n<h2 id=\"1mvcc是什么\"><a class=\"anchor\" href=\"#1mvcc是什么\">#</a> 1.MVCC 是什么？</h2>\n<p>MVCC，全称 Multi-Version Concurrency Control，即<strong>多版本并发控制</strong>。MVCC 是一种并发控制的方法，一般在数据库管理系统中，<strong>实现对数据库的并发访问，在编程语言中实现事务内存</strong>。</p>\n<p>它主要是用来处理 mysql 在多线程操作缓存数据时出现的一系列并发问题。</p>\n<h2 id=\"2前置知识点\"><a class=\"anchor\" href=\"#2前置知识点\">#</a> 2. 前置知识点</h2>\n<p>1）什么是脏写、脏读、不可重复读、幻读？</p>\n<p>2）四种隔离级别</p>\n<p>3）undo log 版本链</p>\n<h2 id=\"3基于undo-log多版本链实现的readview机制\"><a class=\"anchor\" href=\"#3基于undo-log多版本链实现的readview机制\">#</a> 3. 基于 undo log 多版本链实现的 ReadView 机制</h2>\n<p>**ReadView (读视图)** 是 “ <code>快照读</code> ”SQL 执行时 MVCC 提取数据的快</p>\n<p><code>照读</code> 就是最普通的 <code>Select</code>  查询 SQL 语句</p>\n<p><code>当前读</code> 指代执行下列语句时进行数据读取的方式</p>\n<ul>\n<li>insert、Updata、Delete、SELECT ... for update 、Select ... lock in share mode</li>\n</ul>\n<p>数据结构：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 四个字段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m_ids<span class=\"token operator\">:</span> 当前活跃的事务编号集合</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>min_trx_id<span class=\"token operator\">:</span> 最小活跃事务编号</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>max_trx_id<span class=\"token operator\">:</span> 预分配事务编号，当前最大事务编号 <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>creator_trx_id<span class=\"token operator\">:</span> ReadView创建者的事务编号</pre></td></tr></table></figure><p>假设 mysql 里有个数据，很早之前就有事务插入了，事务 id 是 20，如下图所示：</p>\n<img data-src=\"/interview/MySQL/4b547c37ce38459d9820df53a4498280.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>此时，有两个事务并发过来执行，分别是事务 A — id=30，要读取这行数据。事务 B — id=35，要修改这行数据。此时事务 A 会做个判断，判断当前行的 trx_id 是否小于 ReadView 中的 min_trx_id。此时发现 30&gt;20, 所以可以得知在事务 A 开启之前，当前行的事务就已经提交了，因此 shiwuA 可以查到这条数据。如下图：</p>\n<img data-src=\"/interview/MySQL/309c8791d98f4006983cf2b28ce46fe7.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>接着事务 B 开始操作，他把初始值修改成了值 B，trx_id 设置为自己的事务 id，也就是 35，同事 roll_pointer 指向了之前生成的 undo log，然后事务 B 提交了。如下图：</p>\n<img data-src=\"/interview/MySQL/154a65588ce143bfadccc19d1c6b6bb5.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>这个时候，事务 A 再查询，就会发现一个问题，事务 A 就会发现 trx_id 变成了 35，那么 trx_id 大于 min_trx_id，同时小于 ReadView 里的 max_trx_id=36。说明这个事务可能是和自己差不多时间开始的，然后就会看下这个 trx_id 是否在 m_ids 中，在 m_ids 中发现了 35 的 id，那么就证明当前的数据是和自己同一时间并发启动的事务然后提交的，所以按道理这条数据不能让他看到，就把这条数据屏蔽掉，然后顺着 roll_pointer 找之前的 undo log 数据，然后就会找到 trx_id=20 的那条数据，小于 min_trx_id，说明这条数据是在事务 A 提交之前就完成的，符合查询条件，就把这条数据给暴露出去。</p>\n<img data-src=\"/interview/MySQL/7ceac4c1b97f4390b50f156d709186c3.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>通过 undo log 多版本链，加上 ReadView 进行判断的机制，就可以让你读取你应该读取哪个版本的值。</p>\n<h2 id=\"4readview机制是如何实现读已提交隔离级别rc隔离级别的\"><a class=\"anchor\" href=\"#4readview机制是如何实现读已提交隔离级别rc隔离级别的\">#</a> 4.ReadView 机制是如何实现读已提交隔离级别（RC 隔离级别）的？</h2>\n<p>首先了解下 RC 隔离级别：是指你事务在运行期间，只要别的事务修改数据并且提交了，你就可以读取到修改之后的数据。（这种情况还是会发生不可重复读和幻读）</p>\n<p>下面我就用画图的形式，来和大家一步一步的讲解实现过程：<br />\n首先假设有个数据，是事务 id=50 之前就插入进去的，现在活跃着两个事务，事务 A — id=60，事务 B  — id=70。如下图：</p>\n<img data-src=\"/interview/MySQL/6d4c34e71d1348dbba3ebc8e6a65d619.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>现在事务 B 将初始值修改成了值 B，此时 trx_id=70，同时会生成一个 undo log 数据。如下图：</p>\n<img data-src=\"/interview/MySQL/66075a6b707e4b96b041df56290b1168.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>此时事务 A 发起查询操作，然后生成一个 ReadView，m_ids=60、70，min_trx_id=60，max_trx_id=71，creator_trx_id=60。如下图：</p>\n<img data-src=\"/interview/MySQL/12cba3301e11446594396a6b906c14b9.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>此时事务 A 发现 trx_id=70，大于 min_trx_id，并且小于 max_trx_id，说明当前事务是和事务 A 同时提交的，但是又因为 trx_id=70，在 m_ids 里，说明当前事务还没有提交。那么根据读已提交隔离级别要求，事务未提交之前是不能查看修改值的，所以这里事务 A 看不到事务 B 的值 B，只能根据 roll_pointer 指向找到上一条 undo log 数据，在做判断，发现 trx_id=50，小于事务 A，说明已经提交完成，所以事务 A 查到的数据是初始值。<br />\n接着，这里我们再将事务 B 提交，那么提交之后，事务 A 再进行查询，此时会发现 m_ids 已经变成了 m_ids=60，那么说明事务 B 已经不再活跃 m_ids 数据中了，说明事务 B 已经提交了，因此事务 A 可以查看到事务 B 的值 B。</p>\n<p><em><strong>这里需要注意一点，读已提交隔离级别中，事务每次执行，都会重新生成一个 ReadView，因为只有这样才能获取到最新的事务 id 数据。</strong></em><br />\n以上就是基于 ReadView 实现的 RC 隔离级别的原理。</p>\n<h2 id=\"5-readview机制是如何实现可重复读隔离级别rr隔离级别的\"><a class=\"anchor\" href=\"#5-readview机制是如何实现可重复读隔离级别rr隔离级别的\">#</a> 5. ReadView 机制是如何实现可重复读隔离级别（RR 隔离级别）的？</h2>\n<p>我们已经了解了基于 ReadView 机制实现 RC 隔离级别的实现原理了，那么应该对 RR 隔离级别的实现原理也有一个大概猜想了，下面我们还是通过画图方式，来了解实现 RR 隔离级别的原理。</p>\n<p>这里注意：RR 隔离级别里，你这个事务 读取一条数据，无论读取多少次，都是一个值，ReadView 也一样，别的事务哪怕事务提交了，也不能看到修改后的值，这样就避免了不可重复读的问题。</p>\n<p>首先假设有个数据，是事务 id=50 之前就插入进去的，现在活跃着两个事务，事务 A — id=60，事务 B — id=70。如下图：</p>\n<img data-src=\"/interview/MySQL/6d4c34e71d1348dbba3ebc8e6a65d619.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>这个时候，事务 A 发起查询操作，这时候会生成一个 ReadView，这是 creator_trx_id=60，m_ids=60、71，min_trx_id=60，max_trx_id=71。如下图：</p>\n<img data-src=\"/interview/MySQL/7fdcbd3c3fd74b2a8b5f419a925b262b.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>这个时候当前数据的 trx_id=50，小于事务 A 的 60，证明当前事务早在事务 A 之前提交了，所以事务 A 可以看到初始值。<br />\n接着就是事务 B 开始执行修改操作，此时 trx_id=70，初始值改为值 B，同时生成一个 undo log，并且事务 B 提交了，也就是说此时事务 B 已经结束了。如下图：</p>\n<img data-src=\"/interview/MySQL/991752fc4da34cf08d9d430509a6e3cb.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>那么此时事务 A 再次进行查询操作，大家说 m_ids 的值是多少呢？答案是 m_ids=60,70。因为在 RR 隔离级别中，ReadView 一旦生成，就不会改变，这个时候，虽然事务 B 已经提交了，但是事务 A 中的 ReadView 里，还是会有 60、70 两个活跃事务 id。那么此时，事务 A 会判断 trx_id 是否大于 60，很明显 70&gt;60，然后再看 m_ids 中是否有 trx_id=70，是有的，所以这时候事务 A 还是认为事务 B 此时还是处于未提交状态，因此不会被允许查看事务 B 的值，他会根据 roll_pointer 找到上一条 undo log 数据，再次判断，50&lt;60, 满足条件，因此事务 A 查到的数据还是初始值。</p>\n<p>大家看到这里是不是就感觉到了一下子就避免了不可重复读的问题呢。<br />\n同理，当有个事务 C 插入一条数据，事务 id=80，然后提交，在事务 A 中查看到的 max_trx_id 还是 71，这里会判读 80&gt;71, 因此事务 A 会知道，当前事务 C 是在事务 A 发起之后才执行的，明显是不能查看他的数据的，因此这里也不会出现幻读的情况。这些都是依托 ReadView 机制实现的。</p>\n<p>到此，如何基于 ReadView 机制实现隔离级别，避免脏读、不可重复读和幻读的情况，这里就全部解释完毕了。</p>\n<h2 id=\"6总结\"><a class=\"anchor\" href=\"#6总结\">#</a> 6. 总结</h2>\n<p><strong>Mysql 实现 MVCC 机制，就是基于 <code>undo log多版本链表</code>  + <code>ReadView机制</code> 来实现的。默认的 RR 隔离级别，也是基于这套机制来实现的，处理避免脏读、不可重复读的问题，还能解决幻读的问题，因此我们一般都默认为 RR 隔离级别就好了。</strong></p>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xUMTFoa2EvYXJ0aWNsZS9kZXRhaWxzLzEyMjI2MDAzND9zcG09MTAwMS4yMDE0LjMwMDEuNTUwMg==\">https://blog.csdn.net/LT11hka/article/details/122260034?spm=1001.2014.3001.5502</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWhMNDExNDc5VC8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT1mMTYyZDVjMjU3NTVlMGQ2YjljYzM1OGI0ZjNlOGU0Zg==\">https://www.bilibili.com/video/BV1hL411479T/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f162d5c25755e0d6b9cc358b4f3e8e4f</span></p>\n</li>\n</ul>\n<h1 id=\"mysql常见的日志有哪些分别起到了什么作用\"><a class=\"anchor\" href=\"#mysql常见的日志有哪些分别起到了什么作用\">#</a> MySQL 常见的日志有哪些，分别起到了什么作用</h1>\n<ol>\n<li>bin log ：数据恢复、主从复制</li>\n</ol>\n<p>MySQL Server 层也有一个日志文件叫做 Binlog ，它可以被所有的存储引擎使用。</p>\n<p>bin log 以事件的形式记录了所有的 DDL 和 DML 语句（因为他记录的是操作而不是数据值），可以用做主从复制和数据恢复</p>\n<ol start=\"2\">\n<li>\n<p>relay log ：中介日志</p>\n</li>\n<li>\n<p>redo log</p>\n<p>记录修改后的值，属于物理日志</p>\n<p>redo log 的大小事固定的，前面的内容会被覆盖，所以不能用于数据回滚 / 数据恢复</p>\n<p>redo log 是 InnoDB 存储引擎实现的，并不是所有引擎都有</p>\n</li>\n<li>\n<p>undo log</p>\n<p>撤销日志，在数据库事务开始之前，MYSQL 会去记录更新前的数据到 undo log 文件中。如果事务回滚或者数据库崩溃时，可以利用 undo log 日志中记录的日志信息进行回退。同时也可以提供多版本并发控制下的读 (MVCC)</p>\n<p>具体查看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xUMTFoa2EvYXJ0aWNsZS9kZXRhaWxzLzEyNTg3MDk4MSVFNCVCQiU4MCVFNCVCOSU4OCVFNiU5OCVBRkJ1ZmZlcg==\">https://blog.csdn.net/LT11hka/article/details/125870981 什么是 Buffer</span> Pool</p>\n</li>\n</ol>\n<img data-src=\"/interview/MySQL/image-20220909103813728.png\" class=\"\" title=\"image-20220909103813728\">\n<h1 id=\"buffer-pool-内存淘汰策略\"><a class=\"anchor\" href=\"#buffer-pool-内存淘汰策略\">#</a> Buffer pool 内存淘汰策略</h1>\n<p>冷热分区的 LRU 策略</p>\n<p>冷热分区比：5:3</p>\n<p>数据一进来先进入到冷区的头部，默认在 1000ms 之后如果再次访问，就会将他放入到热区</p>\n<h1 id=\"什么是hash索引\"><a class=\"anchor\" href=\"#什么是hash索引\">#</a> 什么是 hash 索引</h1>\n<img data-src=\"/interview/MySQL/image-20220909104250912.png\" class=\"\" title=\"image-20220909104250912\">\n<p>不适合做范围查找，innodb 不支持 hash 索引</p>\n<h1 id=\"mysql为什么要用b数做索引\"><a class=\"anchor\" href=\"#mysql为什么要用b数做索引\">#</a> MySQL 为什么要用 B + 数做索引</h1>\n<ol>\n<li>B + 树能显著的减少 IO 次数，提高效率</li>\n<li>B + 树的查询效率更加稳定，因为所有的数据都放在了叶子上</li>\n<li>B + 树能提高范围查询的效率，因为叶子结点指向下一个叶子结点</li>\n</ol>\n<h1 id=\"数据库优化什么是数据库索引有哪些类型\"><a class=\"anchor\" href=\"#数据库优化什么是数据库索引有哪些类型\">#</a> 数据库优化，什么是数据库索引，有哪些类型</h1>\n<p><strong>1、按表列属性分类</strong><br />\n单列索引 (主键索引，唯一索引，普通索引) 和多列索引（组合索引），全文索引</p>\n<ul>\n<li>主键索引</li>\n<li>唯一索引：唯一索引是在一个或多个字段上创建的，但它强制保证每行记录的字段值唯一。</li>\n<li>普通索引：普通索引是最常用的索引，它是在一个或多个字段上创建的，可以加快数据库查询的速度。</li>\n<li>多列索引：组合索引是在多个字段上创建的，可以提高查询的效率。</li>\n<li>全文索引：全文索引是用于文本搜索的特殊索引，它可以提高文本搜索的效率。</li>\n</ul>\n<p><strong>2、按数据结构分类</strong></p>\n<ul>\n<li>1） B+tree 索引<br />\n b+tree 基于平衡二叉树的一种多路平衡查找树，所有记录都按照顺序存放在叶子节点中，各个叶子节点直接通过链表相连。与 b 树不同的是：非叶子节点只存储键值信息。所有叶子节点之间都有一个链指针。数据记录都存放在叶子节点中。</li>\n<li>2）hash 索引<br />\n基于 hash 表结构实现的索引，mysql 中只有 MEMORY/HEAP 和 NDB 存储引擎支持；InnoDB 引擎支持自适应 hash 索引，但是是数据库自身创建使用的，而不能进行人为定义。当二级索引被频繁的访问时，便会自动创建自适应哈希索引；通过 命令 SHOW ENGINE INNODB STATUS 可查看自适应 hash 索引的使用情况；通过 命令 SHOW VARIABLES LIKE ‘% ap% hash_index’ 查看是否打开自适应 hash 索引对比：<br />\n由于 hash 索引是比较其 hash 值，hash 索引只能进行等值查找而不能进行范围查找 hash 索引无法进行排序：原因同上不支持最左匹配原则，复合索引时合并一起计算 hash 值 hash 索引的检索效率很高可以一次定位，但是当发生大量 hash 碰撞的时候，链表变长，hash 索引效率上是不如 b+tree 的由于存在 hash 碰撞的问题，当需要获得总数时候，hash 索引在任何时候都不能避免表扫描</li>\n<li>3）T-tree 索引</li>\n<li>4）R-tree 索引</li>\n</ul>\n<p><strong>3、按存储结构分类</strong></p>\n<ul>\n<li><strong>1）聚簇索引 (聚集索引)</strong><br />\n InnoDB 的聚簇索引实际上是在同一个 BTree 结构中同时存储了<strong>索引和整行数据</strong>，通过该索引查询<strong>可以直接获取查询数据行</strong>。<br />\n聚簇索引不是一种单独的索引类型，而是一种数据的存储方式，聚簇索引的顺序，就是数据在硬盘上的物理顺序。<br />\n在<strong> mysql</strong> 通常聚簇索引是主键的同义词，<strong>每张表只包含一个聚簇索引</strong> (其他数据库不一定)。</li>\n<li><strong>2）非聚集索引 (辅助索引，次级索引，二级索引)</strong><br />\n 非聚集索引在 BTree 的叶子节点中保存了<strong>索引列和主键</strong>。如果查询列不在该索引内，只能查到其主键值，还<strong>需要回表操作查询聚簇索引进行查询</strong>。</li>\n<li><strong>聚簇索引的优点：</strong><br />\n<strong>可以把相关数据保存在一起</strong>，如：实现电子邮箱时，可以根据用户 ID 来聚集数据，这样只需要从磁盘读取少量的数据页就能获取某个用户全部邮件，如果没有使用聚集索引，则每封邮件都可能导致一次磁盘 IO。<br />\n<strong>数据访问更快，聚集索引将索引和数据保存在同一个 btree 中</strong>，因此从聚集索引中获取数据通常比在非聚集索引中查找要快。<br />\n使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</li>\n<li><strong>聚簇索引的缺点：</strong><br />\n聚簇数据最大限度地提高了 IO 密集型应用的性能，但如果数据全部放在内存中，则访问的顺序就没有那么重要了，聚集索引也没有什么优势了<br />\n插入速度严重依赖于插入顺序，按照主键的顺序插入是加载数据到 innodb 表中速度最快的方式，但如果不是按照主键顺序加载数据，那么在加载完成后最好使用 optimize table 命令重新组织一下表<br />\n更新聚集索引列的代价很高，因为会强制 innodb 将每个被更新的行移动到新的位置。<br />\n基于聚集索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能面临页分裂的问题，当行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，这就是一次页分裂操作，页分裂会导致表占用更多的磁盘空间。<br />\n聚集索引可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候。<br />\n二级索引可能比想象的更大，因为在二级索引的叶子节点包含了引用行的主键列。<br />\n二级索引访问需要两次索引查找，而不是一次。</li>\n</ul>\n<h1 id=\"索引的优缺点\"><a class=\"anchor\" href=\"#索引的优缺点\">#</a> 索引的优缺点</h1>\n<p>1、优点：创建索引可以大大提高系统的性能。<br />\n第一、通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。<br />\n第二、可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。<br />\n第三、可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。<br />\n第四、在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。<br />\n第五、通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。<br />\n也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？这种想法固然有其合理性，然而也有其片面性。虽然，索引有许多优点， 但是，为表中的每一个列都增加索引，是非常不明智的。</p>\n<p>2、缺点<br />\n第一、创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。<br />\n第二、索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间。如果要建立聚簇索引，那么需要的空间就会更大。<br />\n第三、当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p>\n<h1 id=\"谈一下你对数据库btree的理解\"><a class=\"anchor\" href=\"#谈一下你对数据库btree的理解\">#</a> 谈一下你对数据库 b+tree 的理解</h1>\n<p>Mysql 索引使用的是 B + 树，因为索引是用来加快查询的，而 B + 树通过对数据进行排序所以是可以提高查询速度的，然后通过一个节点中可以存储多个元素，从而可以使得 B + 树的高度不会太高</p>\n<p>在 Mysql 中一个 Innodb 页就是一个 B + 树节点，一个 Innodb 页默认 16kb，所以一般情况下一颗两层的 B + 树可以存 2000 万行左右的数据，然后通过利用 B + 树叶子节点存储了所有数据并且进行了排序，并且叶子节点之间有指针，可以很好的支持全表扫描，范围查找等 SQL 语句</p>\n<p>我们建议不要让 B + 树的层数超过三层，所以当数据了超过 2000W 行的时候就要进行分库分表。</p>\n<h1 id=\"聚集索引和非聚集索引的区别\"><a class=\"anchor\" href=\"#聚集索引和非聚集索引的区别\">#</a> 聚集索引和非聚集索引的区别</h1>\n<ol>\n<li>\n<p>聚集索引：聚集索引是指将索引键值作为表中数据物理存储的顺序，并且只能有一个聚集索引。</p>\n</li>\n<li>\n<p>非聚集索引：非聚集索引不影响表中数据的物理存储顺序，可以有多个非聚集索引，每个索引都包含一个指向表中行的指针。</p>\n</li>\n</ol>\n<h1 id=\"在日常工作中是如何进行数据库优化的\"><a class=\"anchor\" href=\"#在日常工作中是如何进行数据库优化的\">#</a> 在日常工作中是如何进行数据库优化的</h1>\n<ol>\n<li>\n<p>使用正确的索引：为数据库表添加正确的索引可以加快查询速度，提高性能。</p>\n</li>\n<li>\n<p>合理分配内存：为数据库分配合理的内存可以减少磁盘 I/O 操作，提高系统性能。</p>\n</li>\n<li>\n<p>分析查询语句：分析 SQL 查询语句，改写查询语句，可以减少查询时间，提高数据库性能。</p>\n</li>\n<li>\n<p>合理分区：合理分区数据库表可以提高查询性能，减少 I/O 操作，提高系统性能。</p>\n</li>\n<li>\n<p>数据库优化：使用数据库优化工具，如 MySQL 优化器，可以改善数据库性能。</p>\n</li>\n<li>\n<p>合理使用存储过程：使用存储过程可以减少查询次数，提高数据库性能。</p>\n</li>\n</ol>\n<h1 id=\"请列举几个索引失效的场景\"><a class=\"anchor\" href=\"#请列举几个索引失效的场景\">#</a> 请列举几个索引失效的场景</h1>\n<p>(1) like 以 % 开头，索引无效；当 like 前缀没有 %，后缀有 % 时，索引有效。</p>\n<p>(2) or 语句前后没有同时使用索引。当 or 左右查询字段只有一个是索引，该索引失效，只有当 or 左右查询字段均为索引时，才会生效</p>\n<p>(3) 组合索引，不是使用第一列索引，索引失效。</p>\n<p>(4) 数据类型出现隐式转化。如 varchar 不加单引号的话可能会自动转换为 int 型 (用 select 查询时)，使索引无效，产生全表扫描。</p>\n<p>(5) 在索引列上使用 IS NULL 或 IS NOT NULL 操作 (在 where 子句中对字段进行 null 值判断)</p>\n<p>(6) 在索引字段上使用 not，&lt;&gt;，!=。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： key&lt;&gt;0 改为 key&gt;0 or key&lt;0。</p>\n<p>(7) 对索引字段进行计算操作、字段上使用函数。</p>\n<p>(8) 当全表扫描速度比索引速度快时，mysql 会使用全表扫描，此时索引失效。</p>\n<p>索引失效分析工具：</p>\n<p>可以使用 explain 命令加在要分析的 sql 语句前面，在执行结果中查看 key 这一列的值，如果为 NULL，说明没有使用索引。</p>\n<h1 id=\"数据库锁的机制\"><a class=\"anchor\" href=\"#数据库锁的机制\">#</a> 数据库锁的机制</h1>\n<p>**InnoDB 支持行级锁 (row-level locking) 和表级锁，默认为行级锁（偏向于写）** 在 Mysql 中，行级锁并不是直接锁记录，而是锁索引。InnoDB 行锁是通过给索引项加锁实现的，而索引分为主键索引和非主键索引两种</p>\n<p>（1）命中索引才锁行，未命中索引默认锁整个索引，即锁表<br />\n（2）命中主键索引，直接锁主键索引对应的整行<br />\n（3）命中辅助索引，先锁命中的辅助索引，在锁该辅助索引所对应的主键索引</p>\n<p>在实际应用中，要特别注意 InnoDB 行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。<br />\n1、在不通过索引条件查询的时候，InnoDB 的效果就相当于表锁<br />\n 2、当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论 是使用主键索引、唯一索引或普通索引，InnoDB 都会使用行锁来对数据加锁。<br />\n3、由于 MySQL 的行锁是针对索引加的锁，不是针对记录加的锁，所以即便你的 sql 语句访问的是不同的记录行，但如果命中的是相同的被锁住的索引键，也还是会出现锁冲突的。<br />\n4、即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同 执行计划的代价来决定的，如果 MySQL 认为全表扫描效率更高，比如对一些很小的表，它 就不会使用索引，这种情况下 InnoDB 将锁住所有行，相当于表锁。因此，在分析锁冲突时，别忘了检查 SQL 的执行计划，以确认是否真正使用了索引</p>\n<p>innodb 的三种行锁算法，三种都是排他锁：<br />\n1、record lock：单个行记录上的锁<br />\n 2、gap lock：间隙锁，锁定一个范围，但不包括记录本身。GAP 锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况。<br />\n3、Next-key lock：等于 Record Lock 结合 Gap Lock，也就说 Next-Key Lock 既锁定记录本身也锁定一个范围，特别需要注意的是，InnoDB 存储引擎还会对辅助索引下一个键值加上 gap lock。对于行查询，innodb 采用的都是 Next-Key Lock，主要目的是解决幻读的问题，以满足相关隔离级别以及恢复和复制的需要。</p>\n<p>Innodb 自动使用间隙锁的条件：<br />\n（1）<strong>必须在 RR 级别下</strong><br />\n（2）<strong>检索条件必须有索引</strong>（没有索引的话，mysql 会全表扫描，那样会锁定整张表所有的记录，包括不存在的记录，此时其他事务不能修改不能删除不能添加）</p>\n<p>死锁现象：<br />\n死锁就是两个或多个事务在未结束的情况下，用排他锁互相锁死的一种特殊情况，下面有两种死锁情况（仅供参考）</p>\n<img data-src=\"/interview/MySQL/20210226170241867.png\" class=\"\" title=\"在这里插入图片描述\">\n<img data-src=\"/interview/MySQL/20210226170250512.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>2、死锁产生的本质原理<br />\n死锁的发生与否，并不在于事务中有多少条 SQL 语句，死锁的关键在于：两个 (或以上) 的 Session 加锁的顺序不一致。而使用本文上面提到的，分析 MySQL 每条 SQL 语句的加锁规则，分析出每条语句的加锁顺序，然后检查多个并发 SQL 间是否存在以相反的顺序加锁的情况，就可以分析出各种潜在的死锁情况，也可以分析出线上死锁发生的原因。</p>\n<p><strong>行锁优化建议：</strong><br />\n通过检查 InnoDB_row_lock 状态变量来分析系统上的行锁的争夺情况，在着手根据状态量来分析改善；<br />\nshow status like ‘innodb_row_lock%’;// 查看行锁的状态<br />\n尽可能让所有数据检索都通过索引来完成， 从而避免无索引行锁升级为表锁<br />\n合理设计索引，尽量缩小锁的范围<br />\n尽可能减少检索条件，避免间隙锁<br />\n尽量控制事务大小，减少锁定资源量和时间长度<br />\n尽可能低级别事务隔离</p>\n<p>悲观锁<br />\n ** 在关系数据库管理系统里，悲观并发控制（又名 “悲观锁”，Pessimistic Concurrency Control，缩写 “PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。** 如果一个事务执行的操作都某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。<br />\n悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。<br />\n优点：<br />\n悲观并发控制实际上是 “先取锁再访问” 的保守策略，为数据处理的安全提供了保证。</p>\n<p>缺点：<br />\n（a）在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；<br />\n（b） 在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数</p>\n<p>乐观锁<br />\n在关系数据库管理系统里，乐观并发控制（又名 “乐观锁”，Optimistic Concurrency Control，缩写 “OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。 相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p>\n<p>在数据库中，乐观锁的实现有两种方式<br />\n 1、使用版本号实现<br />\n每一行数据多一个字段 version，每次更新数据对应版本号 + 1，<br />\n原理：读出数据，将版本号一同读出，之后更新，版本号 + 1，提交数据版本号大于数据库当前版本号，则予以更新，否则认为是过期数据，重新读取数据</p>\n<p>2、使用时间戳实现<br />\n每一行数据多一个字段 time<br />\n 原理：读出数据，将时间戳一同读出，之后更新，提交数据时间戳等于数据库当前时间戳，则予以更新，否则认为是过期数据，重新读取数据</p>\n<p>优点与不足<br />\n乐观并发控制相信事务之间的数据竞争 (data race) 的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。</p>\n<p>如何选择<br />\n在乐观锁与悲观锁的选择上面，主要看下两者的区别以及适用场景就可以了：<br />\n1、乐观锁并未真正加锁，效率高。一旦锁的粒度掌握不好，更新失败的概率就会比较高，容易发生业务失败。<br />\n2、悲观锁依赖数据库锁，效率低。更新失败的概率比较低。随着互联网三高架构（高并发、高性能、高可用）的提出，悲观锁已经越来越少的被使用到生产环境中了，尤其是并发量比较大的业务场景。</p>\n<h1 id=\"在遇到死锁情况如何处理\"><a class=\"anchor\" href=\"#在遇到死锁情况如何处理\">#</a> 在遇到死锁情况如何处理</h1>\n<p>死锁的发生与否，并不在于事务中有多少条 SQL 语句，死锁的关键在于：两个 (或以上) 的 Session 加锁的顺序不一致。分析 MySQL 每条 SQL 语句的加锁规则，分析出每条语句的加锁顺序，然后检查多个并发 SQL 间是否存在以相反的顺序加锁的情况，就可以分析出各种潜在的死锁情况，也可以分析出线上死锁发生的原因。</p>\n<ol>\n<li>\n<p>使用数据库调试工具检查死锁，查看死锁发生的原因。</p>\n</li>\n<li>\n<p>尝试重新调整数据库的索引结构，减少数据库的查询和更新操作，以减少死锁的发生。</p>\n</li>\n<li>\n<p>将数据库的事务隔离级别调整为更低的级别，以减少死锁的发生。</p>\n</li>\n<li>\n<p>将数据库的事务超时时间设置得更短，以便及时中断发生死锁的事务。</p>\n</li>\n<li>\n<p>将死锁发生的数据表拆分成多个表，以减少数据表上的竞争。</p>\n</li>\n</ol>\n<h1 id=\"mysql和oracle的区别\"><a class=\"anchor\" href=\"#mysql和oracle的区别\">#</a> mysql 和 oracle 的区别</h1>\n<h1 id=\"数据库的根本特点\"><a class=\"anchor\" href=\"#数据库的根本特点\">#</a> 数据库的根本特点</h1>\n<p>1、数据结构化 数据库系统实现了整体数据的结构化，这是数据库的最主要的特征之一</p>\n<p>2、数据的共享性高，冗余度低，易扩充 因为数据是面向整体的，所以数据可以被多个用户、多个应用程序共享使用</p>\n<p>3、数据独立性高 数据独立性包括数据的物理独立性和逻辑独立性。</p>\n<p>4、数据由 DBMS 统一管理和控制 数据库的共享是并发的 (concurrency) 共享，即多个用户可以同时存取数据库中的数据，甚至可以同时存取数据库中的同一个数据；</p>\n<h1 id=\"数据库中数据共享是指\"><a class=\"anchor\" href=\"#数据库中数据共享是指\">#</a> 数据库中数据共享是指</h1>\n<p>多个应用、多种语言、多个用户共享数据</p>\n<h1 id=\"数据库中产生数据不一致\"><a class=\"anchor\" href=\"#数据库中产生数据不一致\">#</a> 数据库中产生数据不一致</h1>\n<p>1. 并发控制不当</p>\n<p>2. 数据冗余</p>\n<p>3. 各种故障，错误</p>\n<p>第一种往往是由于重复存放的数据未能进行一致性更新造成的</p>\n<p>第二种情况是由于多用户共享数据库，而更新操作未能保持同步进行引起的</p>\n<p>第三种是由于某种原因（硬件故障或软件故障等）而造成数据丢失或数据损坏等</p>\n<h1 id=\"运算\"><a class=\"anchor\" href=\"#运算\">#</a> 运算</h1>\n<img data-src=\"/interview/MySQL/c484ce59eba713b93d75a1381901dabe.png\" class=\"\" title=\"img\">\n<img data-src=\"/interview/MySQL/9606dddddf13fb7dafa3119aa768e7a4.png\" class=\"\" title=\"数据库之运算符详解_数据库_18\">\n<h2 id=\"运算优先级\"><a class=\"anchor\" href=\"#运算优先级\">#</a> 运算优先级</h2>\n<img data-src=\"/interview/MySQL/2b23723e1f54716522beeb85047554c2.png\" class=\"\" title=\"数据库之运算符详解_mysql_23\">\n<h1 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h1>\n<ol>\n<li>\n<p>MySQL 索引使用有哪些注意事项呢？</p>\n</li>\n<li>\n<p>MysQL 遇到过死锁问题吗，你是如何解决的？</p>\n</li>\n<li>\n<p>日常工作中你是怎么优化 SQL 的？</p>\n</li>\n<li>\n<p>说说分库与分表的设计</p>\n</li>\n<li>\n<p>InnoDB 与 MylSAM 的区别</p>\n</li>\n<li>\n<p>数据库索引的原理，为什么要用 B + 树，为什么不用二叉树？</p>\n</li>\n<li>\n<p>聚集索引与非聚集索引的区别</p>\n</li>\n<li>\n<p>limit 1000000 加载很慢的话，你是怎么解决的呢？</p>\n<p><strong>方案一</strong>：如果 id 是连续的，可以这样，返回上次查询的最大记录 (偏移量)，再往下 limit</p>\n<p>select id，name from employee where id&gt;1000000 limit 10.</p>\n<p><strong>方案二</strong>：在业务允许的情况下限制页数：</p>\n<p>建议跟业务讨论，有没有必要查这么后的分页啦。因为绝大多数用户都不会往后翻太多页。</p>\n<p><strong>方案三</strong>：order by + 索引（id 为索引）</p>\n<p>select id，name from employee order by id limit 1000000，10</p>\n<p><strong>方案四</strong>：利用延迟关联或者子查询优化超多分页场景。（先快速定位需要获取的 id 段，然后再关联）</p>\n<p>SELECT a.* FROM employee a, (select id from employee where 条件 LIMIT 1000000,10) b where <span class=\"exturl\" data-url=\"aHR0cDovL2EuaWQ9Yi5pZA==\">a.id=b.id</span></p>\n</li>\n<li>\n<p>如何选择合适的分布式主键方案呢？</p>\n</li>\n<li>\n<p>事务的隔离级别有哪些？MySQL 的默认隔离级别是什么？</p>\n</li>\n<li>\n<p>什么是幻读，脏读，不可重复读呢？</p>\n</li>\n<li>\n<p>在高并发情况下，如何做到安全的修改同一行数据？</p>\n</li>\n<li>\n<p>数据库的乐观锁和悲观锁。</p>\n</li>\n<li>\n<p>select for update 有什么含义，会锁表还是锁行还是其他。</p>\n<p>select 查询语句是不会加锁的，但是 select …for update<strong> 除了有查询的作用外，还会加锁呢，而且它是悲观锁，排他锁。</strong></p>\n<p>那么它加的是行锁还是表锁，这就要看是不是用了索引 / 主键。</p>\n<p><strong>没用索引 / 主键的话就是表锁，否则就是是行锁</strong>。</p>\n</li>\n<li>\n<p>MySQL 事务得四大特性以及实现原理</p>\n</li>\n<li>\n<p>如果某个表有近千万数据，CRUD 比较慢，如何优化</p>\n</li>\n<li>\n<p>如何写 sql 能够有效的使用到复合索引。</p>\n</li>\n<li>\n<p>mysql 中 in 和 exists 的区别。</p>\n<ul>\n<li>子查询使用 exists，会先进行主查询，将查询到的每行数据循环带入子查询校验是否存在，过滤出整体的返回数据；子查询使用 in，会先进行子查询获取结果集，然后主查询匹配子查询的结果集，返回数据</li>\n<li>外表内表相对大小情况不一样时，查询效率不一样：两表大小相当，in 和 exists 差别不大；内表大，用 exists 效率较高；内表小，用 in 效率较高。</li>\n<li>不管外表与内表的大小，not exists 的效率一般要高于 not in，跟子查询的索引访问类型有关。</li>\n</ul>\n<ol>\n<li>\n<p>IN 和 EXISTS 都可以用来检测一个值是否存在于一个子查询中，但它们之间有一些重要的区别：</p>\n</li>\n<li>\n<p>IN 操作符比较的是值，而 EXISTS 操作符比较的是整个子查询的结果。</p>\n</li>\n<li>\n<p>IN 操作符只能比较一列值，而 EXISTS 操作符可以比较多列值。</p>\n</li>\n<li>\n<p>IN 操作符不能使用带有 “NOT” 的条件，而 EXISTS 操作符可以使用带有 “NOT” 的条件。</p>\n</li>\n<li>\n<p>IN 操作符的效率比 EXISTS 操作符要低，因为它必须比较每一行，而 EXISTS 操作符只检查是否存在至少一行满足条件。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>数据库自增主键可能遇到什么问题。</p>\n</li>\n<li>\n<p>MVCC 熟悉吗，它的底层原理？</p>\n</li>\n<li>\n<p>数据库中间件了解过吗，sharding jdbc，mycat?</p>\n</li>\n<li>\n<p>MYSQL 的主从延迟，你怎么解决？</p>\n<p>配合 semi-sync 半同步复制；<br />\n一主多从，分摊从库压力；<br />\n强制走主库方案（强一致性）；<br />\nsleep 方案：主库更新后，读从库之前先 sleep 一下；<br />\n判断主备无延迟方案（例如判断 seconds_behind_master 参数是否已经等于 0、对比位点）；<br />\n并行复制 — 解决从库复制延迟的问题；<br />\n这里主要介绍我在项目中使用的几种方案，分别是半同步复制、实时性操作强制走主库、并行复制。</p>\n<p>参考资料：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81NTQ5NjcxOC9hcnRpY2xlL2RldGFpbHMvMTI2NzM5MTEx\">https://blog.csdn.net/weixin_55496718/article/details/126739111</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodWlnZTIwMTMvYXJ0aWNsZS9kZXRhaWxzLzEyODU1NzMyMA==\">https://blog.csdn.net/chuige2013/article/details/128557320</span></li>\n</ul>\n</li>\n<li>\n<p>说一下大表查询的优化方案</p>\n</li>\n<li>\n<p>什么是数据库连接池？为什么需要数据库连接池呢？</p>\n<p>数据库连接池（Database Connection Pooling）在程序初始化时创建一定数量的数据库连接对象并将其保存在一块内存区中，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个；释放空闲时间超过最大空闲时间的数据库连接以避免因为没有释放数据库连接而引起的数据库连接遗漏。</p>\n<p>​     即在程序初始化的时候创建一定数量的数据库连接，用完可以放回去，下一个在接着用，通过配置连接池的参数来控制连接池中的初始连接数、最小连接、最大连接、最大空闲时间这些参数保证访问数据库的数量在一定可控制的范围类，防止系统崩溃，使用户的体验好</p>\n<p><strong>为什么使用数据库连接池？（形象的说就是用了可以放回去给别人用，大家共享）</strong></p>\n<p>数据库连接是一种关键、有限且昂贵的资源，创建和释放数据库连接是一个很耗时的操作，频繁地进行这样的操作将占用大量的性能开销，进而导致网站的响应速度下降，严重的时候可能导致服务器崩溃；数据库连接池可以节省系统许多开销。</p>\n</li>\n<li>\n<p>一条 SQL 语句在 MySQL 中如何执行的？</p>\n<p>from、where、select、group by having 、order by 、limit</p>\n<p>可以将 SQL 语句执行分为两种种情况<br />\n<strong> 1、查询语句</strong></p>\n<blockquote>\n<p>select * from student where ssex=' 男 ' and classid=1;</p>\n</blockquote>\n<ul>\n<li>先去检查语句是否有权限，如果没有权限，就会返回错误信息，如果有权限，就会西安查缓存查询，如果这条 sql 语句为 key 在缓存中查询有结果，则返回。</li>\n<li>通过分析器进行词法分析，提取 sql 语句的关键元素。比如上面的语句是 select，提取关键字，表名 student，条件 ssex = 男，classid=1.</li>\n<li>然后去判断 sql 语句是否有语法错误，提取的关键字是否有错误。没有就执行下一步</li>\n<li>优化器确定优化方案：查询是男的学生；查询班级编号为 1 的学生</li>\n<li>优化器会根据自己的判断去选择一个自己认为最好的方案去执行</li>\n<li>进行权限验证</li>\n</ul>\n<p><strong>2、增删改</strong></p>\n<blockquote>\n<p>update student set ssex=' 女 ' where classid=1</p>\n</blockquote>\n<ul>\n<li>先去查询一般这个数据，如果有缓存的话也是会用到缓存</li>\n<li>然后拿到查询的语句，把性别改为女，然后去调用引擎 api 接口，写入修改的数据，存储引擎 innodb 把数据保存在内存中，写入日志中，告诉执行器执行</li>\n<li>执行器执行，提交事务</li>\n</ul>\n</li>\n<li>\n<p>innodb 引擎中的索引策略了解过吗</p>\n<p>InnoDB 引擎中的索引策略是一种索引优化技术，它通过分析表中的数据和索引结构，来调整索引结构，以最大程度地提高查询效率。它可以帮助数据库管理员改善查询性能，提高查询速度，减少索引大小，从而节省空间。InnoDB 引擎中的索引策略主要有以下几种：</p>\n<ol>\n<li>\n<p>选择最佳索引：这种索引策略会选择最佳的索引来满足查询的要求，以便最大限度地提高查询性能。</p>\n</li>\n<li>\n<p>索引合并：这种索引策略会将多个索引合并成一个索引，以减少索引大小，提高查询性能。</p>\n</li>\n<li>\n<p>索引重建：这种索引策略会定期重建表中的索引，以避免索引碎片，提高查询性能。</p>\n</li>\n<li>\n<p>索引优化：这种索引策略会根据查询的频率和数据的变化情况，调整索引的结构，以提高查询性能。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>一条 SQL 执行时间过长如何优化</p>\n</li>\n<li>\n<p>MYSQL 数据库服务器性能分析的方法命令有哪些？</p>\n</li>\n<li>\n<p>Blob 和 text 有什么区别？</p>\n<p>Blob 和 text 是两种不同的对象类型，用于表示二进制数据。</p>\n<p>Blob 是一种<strong>不可变的原始数据类型</strong>，可以表示任意大小的二进制数据，但是不能直接操作。它可以用于存储图像，视频，文档等文件类型。</p>\n<p>Text 是一种<strong>可变的原始数据类型</strong>，可以表示字符串，可以直接操作。它可以用于存储文本，网页，JSON 等文件类型。</p>\n</li>\n<li>\n<p>mysql 里记录货币用什么字段类型比较好？</p>\n<p>MySQL 中最常用的字段类型来记录货币是 DECIMAL（精度）或 NUMERIC（精度）类型。DECIMAL（精度）和 NUMERIC（精度）类型允许您指定小数点后的位数，以便更准确地表示货币值。</p>\n</li>\n<li>\n<p>Mysql 中有哪几种锁，列举一下？</p>\n</li>\n<li>\n<p>Hash 索引和 B + 树区别是什么？你在设计索引是怎么抉择的？</p>\n</li>\n<li>\n<p>mysql 的内连接、左连接、右连接有什么区别？</p>\n</li>\n<li>\n<p>说说 MySQL 的基础架构图</p>\n</li>\n<li>\n<p>什么是内连接、外连接、交叉连接、笛卡尔积呢？</p>\n</li>\n<li>\n<p>说一下数据库的三大范式</p>\n</li>\n<li>\n<p>Mysql 的 binlog 有几种录入格式？分别有什么区别？</p>\n<p>1、Row-based 格式：这种格式下，MySQL 会记录每一行的变更，比如更新前后的值，插入前后的值，删除前后的值等，可以详细描述每一次变更。</p>\n<p>2、Statement-based 格式：这种格式下，MySQL 只会记录 SQL 语句本身，不会记录每一行的变更，只能描述变更的范围，比如更新了几行，插入了几行，删除了几行等。</p>\n<p><strong>区别</strong>：</p>\n<p>Row-based 格式比 Statement-based 格式更加详细，但是会占用更多的空间，Statement-based 格式比 Row-based 格式占用的空间少，但是不能描述每一行的变更。</p>\n</li>\n<li>\n<p>InnoDB 引擎的 4 大特性，了解过吗</p>\n<p>1. 事务安全：InnoDB 引擎支持 ACID 事务，保证了事务的原子性、一致性、隔离性和持久性。</p>\n<p>2. 行级锁：InnoDB 引擎支持行级锁，可以实现多用户并发访问，提高系统的性能。</p>\n<p>3. 外键约束：InnoDB 引擎支持外键约束，可以防止数据的一致性和完整性。</p>\n<p>4. 崩溃恢复能力：InnoDB 引擎支持崩溃恢复能力，可以恢复在数据库崩溃时发生的数据损失。</p>\n</li>\n<li>\n<p>索引有哪些优缺点？索引有哪几种类型？</p>\n</li>\n<li>\n<p>创建索引有什么原则呢？</p>\n</li>\n<li>\n<p>创建索引的三种方式</p>\n</li>\n<li>\n<p>百万级别或以上的数据，你是如何删除的？</p>\n</li>\n<li>\n<p>什么是最左前缀原则？什么是最左匹配原则？</p>\n</li>\n<li>\n<p>B 树和 B + 树的区别，数据库为什么使用 B + 树而不是 B 树？</p>\n</li>\n<li>\n<p>覆盖索引、回表等这些，了解过吗？</p>\n<p>1、 覆盖索引： 查询列要被所建的索引覆盖，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。</p>\n<p>2、 回表：二级索引无法直接查询所有列的数据，所以通过二级索引查询到聚簇索引后，再查询到想要的数据，这种通过二级索引查询出来的过程，就叫做回表。</p>\n</li>\n<li>\n<p>非聚簇索引一定会回表查询吗？</p>\n</li>\n<li>\n<p>联合索引是什么？为什么需要注意联合索引中的顺序？</p>\n</li>\n<li>\n<p>数据库隔离级别与锁的关系</p>\n</li>\n<li>\n<p>聊聊 InnoDb 的锁，什么是死锁？怎么解决？</p>\n</li>\n<li>\n<p>count (1)、count (*) 与 count (列名) 的区别？</p>\n<p>1、count (*) 包含了所有的列，相当于行数，在统计结果的时候，不会忽略列值为空的情况；<br />\n2、count (1) 在统计结果的时候也不会忽略列值为空的情况（即某个列为空时，仍进行统计）；<br />\n3、count (列名) 在统计的时候会忽略列名为空（null）的情况（即某个列为空时，不统计）；</p>\n<p><strong>列名要是为主键的话，count (列名) 会比 count (1) 快，反之 count (1) 快；</strong></p>\n</li>\n<li>\n<p>什么是存储过程？有哪些优缺点？</p>\n</li>\n<li>\n<p>SQL 约束有哪几种呢？</p>\n<ol>\n<li>主键约束 (唯一约束 + 非空约束)</li>\n<li>外键约束</li>\n<li>唯一约束 (允许一行数据为空)</li>\n<li>默认值约束</li>\n<li>检查约束</li>\n<li>非空约束</li>\n</ol>\n</li>\n<li>\n<p>char 和 varchar 的区别</p>\n<p>|            | char                                    | varchar                                   |<br />\n| ---------- | --------------------------------------- | ----------------------------------------- |<br />\n| 长度       | 定长，长度固定                          | 不定长，长度可变                          |<br />\n| 填充       | &lt; 定长 ，用 <code>空格</code> 填充                   | 不填充                                    |<br />\n| 存储       | 长度固定，速度快，空间大<br/>空间换时间 | 长度不固定，速度慢，空间小<br/>时间换空间 |<br />\n| 最大字符量 | 255                                     | 65532                                     |</p>\n<p>总之，结合<strong>性能角度（char 更快）<strong>和</strong>节省磁盘空间角度（varchar 更小）</strong>，具体情况还需具体来设计数据库才是妥当的做法。</p>\n</li>\n<li>\n<p>mysql 中 int (20)、char (20)、varchar (20) 的区别</p>\n<p>int (20) 表示字段是 int 类型，显示长度是 20</p>\n<p>char (20) 表示字段是固定长度字符串，长度为 20</p>\n<p>varchar (20) 表示字段是可变长度字符串，长度为 20</p>\n</li>\n<li>\n<p>drop、delete 与 truncate 的区别</p>\n</li>\n<li>\n<p>UNION 与 UNION ALL 的区别？</p>\n</li>\n<li>\n<p>SQL 的生命周期？</p>\n<p>// 一条 SQL 由客户端发出后，经过连接和验证，发送到服务器，由服务器派发给线程处理<br />\n 1. 应用服务器与数据库服务器建立一个连接（tcp/ip 连接，GLP 协议）<br />\n2. 数据库进程拿到请求 sql<br />\n3. 解析并生成执行计划，执行（解析优化过程）<br />\n4. 读取数据到内存并进行逻辑处理<br />\n 5. 通过步骤一的连接，发送结果到客户端<br />\n 6. 关掉连接，释放资源</p>\n</li>\n<li>\n<p>一条 Sql 的执行顺序？</p>\n</li>\n<li>\n<p>关心过业务系统里面的 sql 耗时吗？统计过慢查询吗？对慢查询都怎么优化过？</p>\n</li>\n<li>\n<p>主键使用自增 ID 还是 UUID，为什么？mysql 自增主键用完了怎么办？</p>\n<blockquote>\n<p>最好是用<strong>自增主键</strong>，主要是以下两个原因：</p>\n</blockquote>\n<ol>\n<li>\n<p>如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。</p>\n</li>\n<li>\n<p>如果使用非自增主键 (如 uuid)，由于每次插入主键的值近似于随机，因此每次新记录都要被插到索引页的随机某个位置，此时 MySQL 为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成索引碎片，得到了不够紧凑的索引结构，后续不得不通过 OPTIMIZE TABLE 来重建表并优化填充页面。</p>\n</li>\n</ol>\n<p>不过，也不是所有的场景下都得使用自增主键，可能场景下，主键必须自己生成，不在乎那些性能的开销。那也没有问题。</p>\n<blockquote>\n<p>如果自增主键用完了，如何解决？</p>\n</blockquote>\n<p>MySQL 的主键策略：id 自增值达到上限以后，再申请下一个 id 时，仍然是最大值。</p>\n <img data-src=\"/interview/MySQL/ff995972a76484c6d2094a4e110f47db.png\" class=\"\" title=\"ff995972a76484c6d2094a4e110f47db.png\">\n<p>将 Int 类型改为 BigInt 类型，BigInt 的范围如下：</p>\n <img data-src=\"/interview/MySQL/f950e082bed6fc1679122061fe989682.png\" class=\"\" title=\"f950e082bed6fc1679122061fe989682.png\">\n<p>bigint 也不满足我的需要怎么办呢？</p>\n<p>可以使用雪花算法生成的 id 做主键，由于其也是大致递增的，对性能也不会产生影响，只需要由 bigint 改成更大范围的 decimal 就行。</p>\n</li>\n<li>\n<p>MySQL 数据库 cpu 飙升的话，要怎么处理呢？</p>\n</li>\n<li>\n<p>读写分离常见方案？</p>\n</li>\n<li>\n<p>MySQL 的复制原理以及流程</p>\n</li>\n<li>\n<p>Innodb 的事务实现原理？</p>\n</li>\n<li>\n<p>谈谈 MySQL 的 Explain</p>\n</li>\n<li>\n<p>Innodb 的事务与日志的实现方式</p>\n</li>\n<li>\n<p>你们数据库是否支持 emoji 表情存储，如果不支持，如何操作？</p>\n</li>\n<li>\n<p>一个 6 亿的表 a，一个 3 亿的表 b，通过外间 tid 关联，你如何最快的查询出满足条件的第 50000 到第 50200 中的这 200 条数据记录。</p>\n</li>\n<li>\n<p>Mysql 一条 SOL 加锁分析</p>\n</li>\n<li>\n<p>回表问题和覆盖索引</p>\n</li>\n<li>\n<p>MySQL 索引</p>\n</li>\n<li>\n<p>回表问题和覆盖索引</p>\n</li>\n<li>\n<p>双写一致性</p>\n</li>\n<li>\n<p>undo 、redo、binlog</p>\n</li>\n<li>\n<p>Hash 索引和 B + 树的区别是什么？</p>\n<ol>\n<li>B + 树可以进行范围查询，Hash 索引不能。</li>\n<li>B + 树支持联合索引的最左侧原则，Hash 索引不支持。B + 树支持 order by 排序，Hash 索引不支持。</li>\n<li>Hash 索引在等值查询上比 B + 树效率更高。</li>\n<li>B + 树使用 like 进行模糊查询的时候，like 后面（比如 % 开头) 的话可以起到优化的作用，Hash 索引根本无法进行模糊查询</li>\n</ol>\n<img data-src=\"MySQL/image-20230124130116883.png\" alt=\"image-20230124130116883\" style=\"zoom:150%;\" />\n<p>Mysql 逻辑架构图主要分三层:</p>\n<p>第一层负责连接处理，授权认证，安全等等</p>\n<p>第二层负责编译并优化 SQL</p>\n<p>第三层是存储引擎。</p>\n</li>\n</ol>\n<img data-src=\"MySQL/image-20230124125910848.png\" alt=\"image-20230124125910848\" style=\"zoom:150%;\" />\n<p>主从复制分了五个步骤进行</p>\n<ol>\n<li>\n<p>主库的更新事件 (update、insert、 delete) 被写到 binlog</p>\n</li>\n<li>\n<p>从库发起连接，连接到主库。</p>\n</li>\n<li>\n<p>此时主库创建一个 binlog dump thread，把 binlog 的内容发送到从库。</p>\n</li>\n<li>\n<p>从库启动之后，创建一个 I/O 线程，读取主库传过来的 binlog 内容并写入到 relay log</p>\n</li>\n<li>\n<p>还会创建一个 SQL 线程，从 relay log 里面读取内容，从 Exec_Master_Log_Pos 位置开始执行读取到的更新事件，将更新内容写入到 slave 的 db</p>\n</li>\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"未完成\"><a class=\"anchor\" href=\"#未完成\">#</a> 未完成</h2>\n<h1 id=\"未完成-2\"><a class=\"anchor\" href=\"#未完成-2\">#</a> —————————— 未完成</h1>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                ".面试题",
                "突击版 复习版"
            ]
        },
        {
            "id": "https://eth168.top/interview/JVM%E5%BF%AB%E9%80%9F%E7%AA%81%E5%87%BB%E7%89%88/",
            "url": "https://eth168.top/interview/JVM%E5%BF%AB%E9%80%9F%E7%AA%81%E5%87%BB%E7%89%88/",
            "title": "JVM突击版",
            "date_published": "2023-01-11T16:00:00.000Z",
            "content_html": "<h2 id=\"什么是jvm\"><a class=\"anchor\" href=\"#什么是jvm\">#</a> 什么是 JVM</h2>\n<p>JVM 是 java 代码运行的平台，他帮助我们的代码一次编译到处运行</p>\n<h2 id=\"类加载过程\"><a class=\"anchor\" href=\"#类加载过程\">#</a> 类加载过程</h2>\n<p>字节码 ——&gt; ClassLoader 类加载 ——&gt; Linking （ 格式检查、 静态成员变量附默认值、resolution [符号引用 ——&gt; 直接引用]）——&gt; init 初始化 ——&gt;  UIsing 对象使用  ——&gt;  GC 回收</p>\n<h2 id=\"双亲委派是什么\"><a class=\"anchor\" href=\"#双亲委派是什么\">#</a> 双亲委派是什么？</h2>\n<p>我们在加载一个类对象的时候，要经过类加载器。</p>\n<p>类加载器分为 4 种 ，分别为：自定义类加载器（ConsumerClassLoader）、系统类加载器（APP）【classpath】、扩展类加载器（ex）【找的是 JAVA_HOME/jre/lib】、启动类加载器（bootstrap）【找的是 JAVA_HOME/lib】</p>\n<p>我们加载的时候，一般都是从最下方的自定义加载器向上查找到启动类加载器，当然前提是有自定义类加载器，加载过程中会首先判断这个类加载器是否能存在这个类的缓存，存在就直接返回结果，不存在它就会向上委托，交由上层加载器加载，直至启动类加载器，如果这里也没有缓存，就要自己生成了，这时候启动类加载器就开始判断他是否可以生成，能生成就直接返回结果即可，不能生成就委托与下层加载器，直至生成，如果最后了都没找到可以生成这个类的类加载器就返回 <code>Class Not Found Exception</code></p>\n<h2 id=\"如何打破双亲委派\"><a class=\"anchor\" href=\"#如何打破双亲委派\">#</a> 如何打破双亲委派？</h2>\n<p>JDK1.2 之前，自定义 ClassLoader 都必须重写 loadClass ()</p>\n<p>ThreadContextClassLoader 可以实现基础类调用实现类代码，通过 thread.setContextClassLoader 指定</p>\n<p>简单来说就是用自定义的 ClassLoader 即可，但是大多是情况不建议打破</p>\n<h2 id=\"jvm的内存模型\"><a class=\"anchor\" href=\"#jvm的内存模型\">#</a> JVM 的内存模型</h2>\n<ol>\n<li>\n<p>PC 程序计数器：记录程序运行到哪里一步，只增不减</p>\n</li>\n<li>\n<p>JVM 栈：存储基本类型和引用地址</p>\n</li>\n<li>\n<p>本地方法栈（不关注）</p>\n</li>\n<li>\n<p>堆：存储所有的引用类型</p>\n</li>\n<li>\n<p>方法区：</p>\n<ul>\n<li>\n<p>在 jdk  &lt;=  1.7 ：永久区，永久代</p>\n<p>本质上，方法区和永久代并不等价，永久代的数据在 FUllGC 也会删除，他不会，所以会导致 OOM。</p>\n<p>大小启动的时候指定，不能变</p>\n</li>\n<li>\n<p>在 jdk  》  1.8 ：元数据区，元空间</p>\n<p>元空间不再虚拟机设置的内存当中，而是使用本地内存。在 FULLGC 也会删除。</p>\n<p>不设定的话，最大就是物理内存</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"jvm中那些是线程独享那些是共享的\"><a class=\"anchor\" href=\"#jvm中那些是线程独享那些是共享的\">#</a> JVM 中那些是线程独享，那些是共享的？</h2>\n<ol>\n<li>JVM 中 每个线程都有一个 PC、JVM stack 、NMS</li>\n<li>JVM 中 所有线程共享 ：堆内存，方法区</li>\n</ol>\n<h2 id=\"永久区和元空间的区别\"><a class=\"anchor\" href=\"#永久区和元空间的区别\">#</a> 永久区和元空间的区别</h2>\n<ol>\n<li>字符串常量池 ——&gt; 永久代有；元空间 没有，放在了堆内存中</li>\n<li>GC——&gt; 永久代不会被 FullGC  ; 会被 FUGC</li>\n<li>内存：永久代启动时设定，且不能改；元空间时代不设定最大就是物理内存</li>\n</ol>\n<h2 id=\"如何确定一个垃圾\"><a class=\"anchor\" href=\"#如何确定一个垃圾\">#</a> 如何确定一个垃圾</h2>\n<p>如果这个内存没有任何的引用，他就是一个垃圾</p>\n<ol start=\"9\">\n<li>确认垃圾的方式\n<ol>\n<li>根的可达性分析</li>\n<li>引用计数法</li>\n</ol>\n</li>\n</ol>\n<p>解释：</p>\n<ul>\n<li>\n<p>根的可达性分析，可选择作为根的：</p>\n<p>(1). <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTglOTklOUElRTYlOEIlOUYlRTYlOUMlQkEmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">虚拟机</span>栈（栈帧中的局部变量区，也叫做局部变量表）中引用的对象。</p>\n<p>(2). 方法区中的类静态属性引用的对象。</p>\n<p>(3). 方法区中常量引用的对象。</p>\n<p>(4). 本地方法栈中 JNI (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1OYXRpdmUmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">Native</span> 方法) 引用的对象。</p>\n<p><strong>基本思路</strong>：通过一系列名为”GC Roots” 的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链 (Reference Chain)，当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是不可用的</p>\n</li>\n<li>\n<p>引用计数法</p>\n<p>其实就是去看这个对象是否被引用没有被引用那就是垃圾，最简单的</p>\n</li>\n</ul>\n<h2 id=\"常见的垃圾回收算法\"><a class=\"anchor\" href=\"#常见的垃圾回收算法\">#</a> 常见的垃圾回收算法</h2>\n<ol>\n<li>标记清除</li>\n<li>标记复制算法</li>\n<li>标记整理</li>\n</ol>\n<p>具体解释：</p>\n<ul>\n<li>\n<p>标记清除</p>\n<p>标记清除简单来看就是两步，标记和清除，是垃圾就标记，然后清理掉，简单粗暴，但是有个问题就是导致我们的空间碎片化，位置不连续。</p>\n</li>\n<li>\n<p>标记复制算法</p>\n<p>同样两步，这个标记前将我们的空间分成两部分，将垃圾和非垃圾的标记出来，然后分别放入我们之前划分好的空间，这样就避免了空间碎片化的问题，但是有一个新问题，我们浪费了空间。</p>\n</li>\n<li>\n<p>标记整理、标记压缩</p>\n<p>步骤同复制算法一致，但是后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>\n<p>其实上述过程相对 &quot;复制算法&quot; 来讲，少了一个 &quot; 保留区，但是要多出一个临时空间，要保证被使用的对象要存活。老年代一般不这样做。</p>\n</li>\n</ul>\n<h2 id=\"jvm内存分代模型\"><a class=\"anchor\" href=\"#jvm内存分代模型\">#</a> JVM 内存分代模型</h2>\n<p>新生代（Eden + 2 survive ） \t； 老年代\t\t\t\t；永久区 / 元空间</p>\n<blockquote>\n<p>提示：在记忆的时候，我们可以联想诺亚方舟的故事，Eden (伊甸园) 是最初的世界，GC 是洪水，老年代是洪水过后的世界</p>\n</blockquote>\n<p>解释：</p>\n<ul>\n<li>\n<p>新生代</p>\n<ol>\n<li>一个 Eden 区，2 个 survive 区 {<strong>8:1:1</strong>}，存储的时候现在 Eden 区（<strong>如果对象过大，直接去老年代</strong>）</li>\n<li>经过 YGC 后活着的对象进入第 1 个 survive 区</li>\n<li>再次 YGC 后活着的对象进入第 2 个 survive 区</li>\n<li>进入老年代\n<ol>\n<li><strong>动态对象年龄判定</strong>\t如果 Survivor 区中相同年龄所有对象的大小总和大于 Survivor 区空间一半，年龄大于或者等于该年龄的对象在 MinorGC 时将复制到老年代</li>\n<li><strong>空间分配担保</strong>，当 YGC 时，如果存活对象过多，无法完全放入 Survivor 区，就会向老年代借用内存存放对象，已完成 YGC</li>\n<li><strong>长期存活的对象将进入到老年代</strong>（<em><strong>* 虚拟机设置值，默认阈值为 15*</strong></em>）</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<p>老年代</p>\n<p>在空间满了之后，会执行 FGC</p>\n</li>\n</ul>\n<p>注意：要尽量减少 FGC 次数</p>\n<h2 id=\"常见的垃圾回收器\"><a class=\"anchor\" href=\"#常见的垃圾回收器\">#</a> 常见的垃圾回收器</h2>\n<ol>\n<li>\n<p>串行回收器 (Serial/SerialOld)</p>\n<p>它是一种单线程收集器，不仅仅意味着它只会使用一个 CPU 或者一条收集线程去完成垃圾收集工作，更重要的是其在进行垃圾收集的时候需要暂停其他线程</p>\n</li>\n<li>\n<p>并行回收器 (Parallel/ParallelOld)</p>\n<p><strong>可以把这个收集器理解为 Serial 收集器的多线程版本。</strong></p>\n</li>\n<li>\n<p>并发回收器 (PN/CMS)</p>\n<p>采取的是 &quot;标记 - 清除算法&quot;，整个过程分为四步：</p>\n<p>(1) 初始标记 CMS initial mark\t\t\t\t\t标记 GC Roots 直接关联对象，不用 Tracing，速度很快</p>\n<p>(2) 并发标记 CMS concurrent mark\t\t   进行 GC Roots Tracing</p>\n<p>(3) 重新标记 CMS remark\t\t\t\t\t\t\t\t修改并发标记因用户程序变动的内容</p>\n<p>(4) 并发清除 CMS concurrent sweep \t\t\t清除不可达对象回收空间，同时有新垃圾产生，留着下次清理称为</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 浮动垃圾</p>\n<p>整个过程中，并发标记和并发编程，收集器线程可以与用户线程一起工作，所以总体来说，CMS 收集器的内存回收过程是与用户线程一起并发的执行。</p>\n</li>\n<li>\n<p>G1</p>\n<p>算法：三色标记 + SATB</p>\n</li>\n<li>\n<p>ZGC</p>\n<p>算法：ColoredPointers + LoadBarrier</p>\n</li>\n<li>\n<p>Shenandoah</p>\n<p>算法：ColoredPointers + WriteBarrier</p>\n</li>\n<li>\n<p>Eplison</p>\n</li>\n</ol>\n<h2 id=\"jvm内存分代模型是逻辑分代还是物理分代\"><a class=\"anchor\" href=\"#jvm内存分代模型是逻辑分代还是物理分代\">#</a> JVM 内存分代模型是逻辑分代还是物理分代</h2>\n<p>除 Epsilon 、ZGC 、Shenandoah 之外的 GC 都是使用逻辑分代模型</p>\n<p>G1 是逻辑分代，物理不分代</p>\n<p>除此之外不仅逻辑分代，而且物理分代</p>\n<h2 id=\"垃圾收集器跟内存大小的关系\"><a class=\"anchor\" href=\"#垃圾收集器跟内存大小的关系\">#</a> 垃圾收集器跟内存大小的关系</h2>\n<ol>\n<li>Serial 几十兆</li>\n<li>PS 上百兆 - 几个 G</li>\n<li>CMS - 20G</li>\n<li>G1 - 上百 G</li>\n<li>ZGC - 4T - 16T（JDK13）</li>\n</ol>\n<p>1.8 默认的垃圾回收：PS + ParallelOld</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "面试",
                "JVM",
                "面试"
            ]
        },
        {
            "id": "https://eth168.top/interview/JavaSE%E2%80%94%E9%9B%86%E5%90%88/",
            "url": "https://eth168.top/interview/JavaSE%E2%80%94%E9%9B%86%E5%90%88/",
            "title": "集合",
            "date_published": "2023-01-11T16:00:00.000Z",
            "content_html": "<p><strong>基础</strong></p>\n<h3 id=\"arraylist集合的add过程\"><a class=\"anchor\" href=\"#arraylist集合的add过程\">#</a> <strong>ArrayList 集合的 add 过程</strong></h3>\n<p><strong>1.7 和 1.8 的区别</strong></p>\n<p>在 1.7 的时候创建不传参直接初始化为 10,</p>\n<p>在 1.8 的时候，只是空参构造初始化为 {}，元素个数为 0，什么时候为 10 呢？——》在第一次 add 时候</p>\n<p>默认初始化一个数组长度 <strong>1.7：10</strong>    ；<strong>1.8：0（在第一次 add 时候变为 10）</strong>，最大长度为 Integer.MAX_VALUE=2147483647=(2^31)-1 ;</p>\n<p>当 <code>size</code> &gt;10 时，list 要变，也就是说数组要扩容，扩容为原来的 1.5 倍</p>\n<pre><code>    /**\n    * minCapacity =size+1\n    */\n    private void grow(int minCapacity) &#123;\n        // overflow-conscious code\n        int oldCapacity = elementData.length;\n        //新的数组长度\n        int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);\n        // 扩容后还小于 size+1\n        if (newCapacity - minCapacity &lt; 0)\n            newCapacity = minCapacity;\n        // 扩容后大于 Integer.MAX_VALUE - 8\n        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)\n            newCapacity = hugeCapacity(minCapacity);\n        // minCapacity is usually close to size, so this is a win:\n        elementData = Arrays.copyOf(elementData, newCapacity);\n    &#125;\n</code></pre>\n<p>当到达极端情况下此时 arr 为最大时 2^31-8</p>\n<pre><code>        int a = Integer.MAX_VALUE;\n        //MAX_ARRAY_SIZE(2^31-8)\n        int b = a - 8;\n        // newCapacity\n        int c = b + b &gt;&gt; 1;\n\n        //MAX_ARRAY_SIZE(2^31-8)\n        System.out.println(&quot;MAX_ARRAY_SIZE:&quot;+b);\n        // newCapacity\n        System.out.println(&quot;newCapacity:&quot;+c);\n        // newCapacity - minCapacity( size + 1 )\n        System.out.println(&quot;newCapacity - minCapacity:&quot;+(c-(b+1)));\n        // newCapacity - MAX_ARRAY_SIZE(2^31-8)\n        System.out.println(&quot;newCapacity - MAX_ARRAY_SIZE:&quot;+(c - (a-8)));\n</code></pre>\n<p>结果：</p>\n<pre><code>MAX_ARRAY_SIZE: 2147483639\nnewCapacity: -1073741838\newCapacity - minCapacity: 1073741818\nnewCapacity - MAX_ARRAY_SIZE: 1073741819\n</code></pre>\n<h3 id=\"18为什么改变成17的头插法成尾插法\"><a class=\"anchor\" href=\"#18为什么改变成17的头插法成尾插法\">#</a> <strong>1.8 为什么改变成 1.7 的头插法成尾插法？</strong></h3>\n<p>剖析：</p>\n<p>一个链表想要用<strong>尾插</strong>的形式插入数据，我们首先得知道他的<em> next</em> 是否为<em> null</em>,</p>\n<pre><code>class node&lt;T&gt;&#123;\n    T data;\n    node next;\n&#125;\n</code></pre>\n<p>一个链表想要用<strong>头插</strong>的形式插入数据，我们首先得知道他的<em> pre</em> 是否为<em> null</em>, 其次找到之后还要将新元素的<em> next</em> 指向原来的头结点</p>\n<pre><code>class node&lt;T&gt; &#123;\n    T data;\n    node pre;\n    node next;\n&#125;\n</code></pre>\n<p>*<strong> 总结：*</strong></p>\n<p>​\t从创建开始他的头插的结构体 &gt; 尾插的结构体，其次最主要的是<strong>头插容易形成环形结构</strong>，造成 CPU 的损耗，尾插法可以避免</p>\n<p>![image-20220709101908776](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220709101908776.png?lastModify=1673361991)</p>\n<h3 id=\"victor-和-arraylist区别\"><a class=\"anchor\" href=\"#victor-和-arraylist区别\">#</a> <strong>Victor 和 ArrayList 区别</strong></h3>\n<p>【1】底层 Object 数组，int 类型属性表示数组中有效长度：</p>\n<p>![image-20220629231051908](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220629231051908.png?lastModify=1673361991)</p>\n<p>【2】Vector v=new Vector (); 调用构造器：</p>\n<p>![image-20220629231123796](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220629231123796.png?lastModify=1673361991)</p>\n<p>【3】add 方法：</p>\n<p>![image-20220629231602106](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220629231602106.png?lastModify=1673361991)</p>\n<p>![image-20220629231137216](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220629231137216.png?lastModify=1673361991)</p>\n<p><strong>总结：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">Vector</th>\n<th style=\"text-align:center\">ArrayList</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">底层</td>\n<td style=\"text-align:center\">数组</td>\n<td style=\"text-align:center\">数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">初始化</td>\n<td style=\"text-align:center\">直接为长度为 10 的数组</td>\n<td style=\"text-align:center\">1.7：直接为长度为 10 的数组<br/>1.8 只初始化为 {} 元素个数为 0 的数组，在第一次 add 的时候扩大到 10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩容</td>\n<td style=\"text-align:center\">2 倍</td>\n<td style=\"text-align:center\">1.5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">安全性</td>\n<td style=\"text-align:center\">安全<br/>add 方法加了 synchronized</td>\n<td style=\"text-align:center\">不安全<br/></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">效率</td>\n<td style=\"text-align:center\">低</td>\n<td style=\"text-align:center\">高</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"iteratoriteratoriterable关系\"><a class=\"anchor\" href=\"#iteratoriteratoriterable关系\">#</a> <strong>iterator (),Iterator,Iterable 关系</strong></h3>\n<p>![image-20220629233802397](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220629233802397.png?lastModify=1673361991)</p>\n<p><strong>增强 for 循环  底层也是通过迭代器实现的：</strong></p>\n<p><strong>总结：</strong></p>\n<p><code>iterator()</code>  是 <code>Iterable</code>  接口 中的一个抽象方法， <code>ArrayList</code>  内部类 <code>Itr</code>  实现了 <code>Iterator</code>  接口， <code>iterator()</code>  是 Arraylist 内部的一个方法</p>\n<h3 id=\"listiterator迭代器\"><a class=\"anchor\" href=\"#listiterator迭代器\">#</a> <strong>ListIterator 迭代器</strong></h3>\n<p>迭代器不可以和 list 同时操作一个对象，可以用迭代器对象直接操作</p>\n<p>不仅有 <code>正向迭代</code> 还有 <code>逆向迭代</code></p>\n<pre><code> ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(&quot;aa&quot;);\n        list.add(&quot;bb&quot;);\n        list.add(&quot;cc&quot;);\n        list.add(&quot;dd&quot;);\n        list.add(&quot;ee&quot;);\n        //在&quot;cc&quot;之后添加一个字符串&quot;kk&quot;\n        ListIterator&lt;String&gt; it = list.listIterator();\nwhile(it.hasNext())&#123;\n            if(&quot;cc&quot;.equals(it.next()))&#123;\n                it.add(&quot;kk&quot;);\n            &#125;\n        &#125;\n</code></pre>\n<h3 id=\"linkedlist底层\"><a class=\"anchor\" href=\"#linkedlist底层\">#</a> <strong>LinkedList 底层</strong></h3>\n<p>​\t链表，双向链表</p>\n<p>输入和输出结构顺序一致</p>\n<h3 id=\"hashset底层是什么\"><a class=\"anchor\" href=\"#hashset底层是什么\">#</a> <strong>HashSet 底层是什么</strong></h3>\n<p><a href=\"#hashMap_base_code\">HashMap</a>，所有的值都存在了 <strong>key</strong> 中</p>\n<p>![image-20220630002635848](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220630002635848.png?lastModify=1673361991)</p>\n<p><strong>基本原理：</strong></p>\n<p>​\t在存放数据时，首先要对数据进行 <code>hash</code>  计算然后根据 hash 值存放到对应的数组地址上，地址重复时，再在该位置上引申上一个链表，在每个值插入之前我们都先要对存储过的值进行比较，用的是 <code>equals</code>  , 如果存在就不存了。</p>\n<p>引申</p>\n<p>1、要放入 HashSet 的元素 要具备  <code>Hash</code>  、 <code>equals</code>  两大方法且适合自己，即在自己的类要重写</p>\n<p>2、哈希表 = 数组 + 链表</p>\n<h3 id=\"linkedset底层\"><a class=\"anchor\" href=\"#linkedset底层\">#</a> <strong>LinkedSet 底层</strong></h3>\n<p>​\t哈希表 + 链表</p>\n<p>唯一，输出顺序和输入顺序一致</p>\n<h3 id=\"treeset底层\"><a class=\"anchor\" href=\"#treeset底层\">#</a> <strong>TreeSet 底层</strong></h3>\n<p>TreeMap 底层数据结构为 二叉树，</p>\n<p>他与输入结果 无序，输出结果，有序</p>\n<p>一般情况下，随意输入，但是存储的时候，会经过比较器（内部比较强 / 外部比较器 [多用]），经过计算将结果放到合适的位置上，输出的时候，利用中序遍历输出得到一个升序的结果。</p>\n<p>引申</p>\n<p><strong>1、外部比较器</strong></p>\n<p>要实现  <code>Comparator</code>  接口 ，重写  <code>camparr</code>  方法，自定义比较方式，<strong>多用</strong></p>\n<p>![image-20220630115643791](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220630115643791.png?lastModify=1673361991)</p>\n<p><strong>2、二叉树的遍历方式</strong></p>\n<p>​\t3 种：先序遍历、中序遍历、后序遍历</p>\n<p><strong>先、中、后说的是根节点</strong>，例如</p>\n<p>先：12 3 7 9</p>\n<p>中：3 7 9 12 16</p>\n<p>后：3 7 9 16 12</p>\n<p>![image-20220630115853278](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220630115853278.png?lastModify=1673361991)</p>\n<h3 id=\"hashmap底层\"><a class=\"anchor\" href=\"#hashmap底层\">#</a> <strong>HashMap 底层</strong></h3>\n<h4 id=\"17底层遵照-font-colorred-哈希表结构-font头插法\"><a class=\"anchor\" href=\"#17底层遵照-font-colorred-哈希表结构-font头插法\">#</a> <strong>1.7 底层遵照</strong> <em><em><em>*<font color=red >*</em>*<em> 哈希表结构 *</em> *</em></font>*</em>**<strong>(头插法)</strong></h4>\n<p>1.7 的源码</p>\n<pre><code>    //哈希表默认的数组长度\n    static final int DEFAULT_INITIAL_CAPACITY = 16;\n    // 最大长度\n    static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;\n        //定义了一个float类型的变量，以后作为：默认的装填因子，加载因子是表示Hsah表中元素的填满的程度\n        //太大容易引起哈西冲突，太小容易浪费  0.75是经过大量运算后得到的最好值\n        //这个值其实可以自己改，但是不建议改，因为这个0.75是大量运算得到的\n        static final float DEFAULT_LOAD_FACTOR = 0.75f;\n        transient Entry&lt;K,V&gt;[] table;//主数组,每个元素为Entry类型，1.8改名为Node内部一样\n        transient int size;\n        int threshold;//数组扩容的界限值,门槛值   16*0.75=12 \n        final float loadFactor;//用来接收装填因子的变量\n\n\n        \n        //【4】查看构造器：内部相当于：this(16,0.75f);调用了当前类中的带参构造器\n        public HashMap() &#123;\n        this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);\n    &#125;\n        //【5】本类中带参数构造器：--》作用给一些数值进行初始化的！\n        public HashMap(int initialCapacity, float loadFactor) &#123;\n        //【6】给capacity赋值，capacity的值一定是 大于你传进来的initialCapacity 的 最小的 2的倍数\n        int capacity = 1;\n        while (capacity &lt; initialCapacity)\n            capacity &lt;&lt;= 1;\n                //【7】给loadFactor赋值，将装填因子0.75赋值给loadFactor\n        this.loadFactor = loadFactor;\n                //【8】数组扩容的界限值,门槛值\n        threshold = (int)Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);\n                \n                //【9】给table数组赋值，初始化数组长度为16\n        table = new Entry[capacity];\n                   \n    &#125;\n        //【10】调用put方法：\n        public V put(K key, V value) &#123;\n                //【11】对空值的判断\n            if (key == null)\n                return putForNullKey(value);\n                    //【12】调用hash方法，获取哈希码\n            int hash = hash(key);\n                    //【14】得到key对应在数组中的位置\n            int i = indexFor(hash, table.length);\n                    //【16】如果你放入的元素，在主数组那个位置上没有值，e==null  那么下面这个循环不走\n                    //当在同一个位置上放入元素的时候\n            for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;\n                Object k;\n                            //哈希值一样  并且  equals相比一样   \n                            //(k = e.key) == key  如果是一个对象就不用比较equals了\n                if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;\n                    V oldValue = e.value;\n                    e.value = value;\n                    e.recordAccess(this);\n                    return oldValue;\n                &#125;\n            &#125;\n            modCount++;\n                    //【17】走addEntry添加这个节点的方法：\n            addEntry(hash, key, value, i);\n            return null;\n          &#125;\n        \n        //【13】hash方法返回这个key对应的哈希值，内部进行二次散列，为了尽量保证不同的key得到不同的哈希码！\n        final int hash(Object k) &#123;\n        int h = 0;\n        if (useAltHashing) &#123;\n            if (k instanceof String) &#123;\n                return sun.misc.Hashing.stringHash32((String) k);\n            &#125;\n            h = hashSeed;\n        &#125;\n                //k.hashCode()函数调用的是key键值类型自带的哈希函数，\n                //由于不同的对象其hashCode()有可能相同，所以需对hashCode()再次哈希，以降低相同率。\n        h ^= k.hashCode();\n        // This function ensures that hashCodes that differ only by\n        // constant multiples at each bit position have a bounded\n        // number of collisions (approximately 8 at default load factor).\n                /*\n                接下来的一串与运算和异或运算，称之为“扰动函数”，\n                扰动的核心思想在于使计算出来的值在保留原有相关特性的基础上，\n                增加其值的不确定性，从而降低冲突的概率。\n                不同的版本实现的方式不一样，但其根本思想是一致的。\n                往右移动的目的，就是为了将h的高位利用起来，减少哈西冲突\n                */\n        h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);\n        return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);\n    &#125;\n        //【15】返回int类型数组的坐标\n        static int indexFor(int h, int length) &#123;\n                //其实这个算法就是取模运算：h%length，取模效率不如位运算\n        return h &amp; (length-1);\n    &#125;\n        //【18】调用addEntry\n        void addEntry(int hash, K key, V value, int bucketIndex) &#123;\n                //【25】size的大小  大于 16*0.75=12的时候，比如你放入的是第13个，这第13个你打算放在没有元素的位置上的时候\n        if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;\n                        //【26】主数组扩容为2倍\n            resize(2 * table.length);\n                        //【30】重新调整当前元素的hash码\n            hash = (null != key) ? hash(key) : 0;\n                        //【31】重新计算元素位置\n            bucketIndex = indexFor(hash, table.length);\n        &#125;\n                //【19】将hash,key,value,bucketIndex位置  封装为一个Entry对象：\n        createEntry(hash, key, value, bucketIndex);\n    &#125;\n        //【20】\n        void createEntry(int hash, K key, V value, int bucketIndex) &#123;\n                //【21】获取bucketIndex位置上的元素给e\n        Entry&lt;K,V&gt; e = table[bucketIndex];\n                //【22】然后将hash, key, value封装为一个对象，然后将下一个元素的指向为e （链表的头插法）\n                //【23】将新的Entry放在table[bucketIndex]的位置上\n        table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);\n                //【24】集合中加入一个元素 size+1\n        size++;\n    &#125;\n    //【27】\n        void resize(int newCapacity) &#123;\n        Entry[] oldTable = table;\n        int oldCapacity = oldTable.length;\n        if (oldCapacity == MAXIMUM_CAPACITY) &#123;\n            threshold = Integer.MAX_VALUE;\n            return;\n        &#125;\n                //【28】创建长度为newCapacity的数组\n        Entry[] newTable = new Entry[newCapacity];\n        boolean oldAltHashing = useAltHashing;\n        useAltHashing |= sun.misc.VM.isBooted() &amp;&amp;\n                (newCapacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);\n        boolean rehash = oldAltHashing ^ useAltHashing;\n                //【28.5】转让方法：将老数组中的东西都重新放入新数组中\n        transfer(newTable, rehash);\n                //【29】老数组替换为新数组\n        table = newTable;\n                //【29.5】重新计算\n        threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n    &#125;\n        //【28.6】\n        void transfer(Entry[] newTable, boolean rehash) &#123;\n        int newCapacity = newTable.length;\n        for (Entry&lt;K,V&gt; e : table) &#123;\n            while(null != e) &#123;\n                Entry&lt;K,V&gt; next = e.next;\n                if (rehash) &#123;\n                    e.hash = null == e.key ? 0 : hash(e.key);\n                &#125;\n                                //【28.7】将哈希值，和新的数组容量传进去，重新计算key在新数组中的位置\n                int i = indexFor(e.hash, newCapacity);\n                                //【28.8】头插法\n                e.next = newTable[i];//获取链表上元素给e.next\n                newTable[i] = e;//然后将e放在i位置 \n                e = next;//e再指向下一个节点继续遍历\n            &#125;\n        &#125;\n    &#125;\n</code></pre>\n<p>1.7 的头插可能会产生什么问题，为什么？</p>\n<p>问题： 可能会产生环链</p>\n<p>解析：</p>\n<p>通过他的扩容过程中，正常状态下会，他原位置不会变化，只是因为他的结点插入方式为头插法导致我们在每一次的扩容过程之后都会导致我们的链表顺序要翻转一次，这就有一个问题，在单线程的情况下，这么设计是没有问题的，但是在多线程且没有锁的情况下可能会导致产生环。</p>\n<p><strong>扩容前</strong></p>\n<p>![image-20220819102531781](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220819102531781.png?lastModify=1673361991)</p>\n<p>正常 resize () 后</p>\n<p>![image-20220819102607885](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220819102607885.png?lastModify=1673361991)</p>\n<p>![image-20220819101051964](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220819101051964.png?lastModify=1673361991)</p>\n<p>简单解释一下：</p>\n<p>假设现在两个线程都已经进入到了 trasfer () 方法并且同时到达 rehash 的地方，线程 Thread 2 落后于 Thread 1</p>\n<p>这时候 Thread 1 已经扩容结束，但是在线程 Thread 2 中的 oldTable 并不是我们修改后的还是原来的，这就有问题了</p>\n<p>Thread1 结果</p>\n<p>![image-20220819110029605](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220819110029605.png?lastModify=1673361991)</p>\n<p>Thread2 结果</p>\n<p>![image-20220819113951593](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220819113951593.png?lastModify=1673361991)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Thread  1</th>\n<th style=\"text-align:center\">Thread  2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">进入 transfer</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">进入 transfer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e-&gt;3, next-&gt; 2</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">e-&gt;3, next-&gt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">开始 rehash ()</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">开始 rehash ()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩容</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩容结束 (Thread1 结果)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">扩容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">扩容结束 (Thread2 结果)</td>\n</tr>\n</tbody>\n</table>\n<p>总结：因为两个线程同时记录的了原链表最初的 结点 e 地址和 next 地址，在一个线程修改完成后顺序由 321 变成了 123，另一个线程再去修改 ，由于头插的缘故 最开始 3-&gt;2 在修改完成后的 2-&gt;3 之间就回形成环路</p>\n<h4 id=\"18底层遵照-font-colorred-哈希表结构-红黑树font尾插法\"><a class=\"anchor\" href=\"#18底层遵照-font-colorred-哈希表结构-红黑树font尾插法\">#</a> <strong>1.8 底层遵照</strong> <em><em><em>*<font color=red >*</em>*<em> 哈希表结构 + 红黑树 *</em>*</em></font>*</em>**<strong>（尾插法）</strong></h4>\n<pre><code>// HashMap&lt;String,Integer&gt; map = new HashMap&lt;&gt;(); --&gt;JDK 1.7开始类型推断，后面用钻石运算符即可。\npublic class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;      //【1】继承的AbstractMap中，已经实现了Map接口\n    implements Map&lt;K,V&gt;, Cloneable, Serializable &#123; //【2】又实现了这个接口，多余，但是集合的设计者觉得没有必要删除，就这么地了\n\n    //------------------属性部分：\n    final float loadFactor;//【3-2】用来接收装填因子的变量\n    /*\n        【3-3】\n        定义了一个float类型的变量，以后作为：默认的装填因子，加载因子是表示Hsah表中元素的填满的程度\n        太大容易引起哈西冲突，太小容易浪费  0.75是经过大量运算后得到的最好值\n        这个值其实可以自己改，但是不建议改，因为这个0.75是大量运算得到的\n    */\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    int threshold;//【6-3】数组扩容的界限值,门槛值\n    transient Node&lt;K,V&gt;[] table;//【7-5】底层主数组\n    //------------------构造器：\n    //【3】调用空构造器\n    public HashMap() &#123;\n        //【3-1】给装填因子loadFactor赋值\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    &#125;\n    \n    //【4】调用有参构造器：\n    public HashMap(int initialCapacity) &#123;\n        //【5】调用两个参数构造器\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    &#125;\n    //【6】\n    public HashMap(int initialCapacity, float loadFactor) &#123;\n        //【6-1】健壮性考虑，传入的数据过小不行，过大不行\n        if (initialCapacity &lt; 0)\n            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                               initialCapacity);\n        if (initialCapacity &gt; MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                               loadFactor);\n        //【6-2】给装填因子loadFactor赋值，赋值为0.75，这个值可以单独传入改变，但是不建议改变，一般都用默认的0.75\n        this.loadFactor = loadFactor;\n        //【6-3】给threshold赋值 \n        this.threshold = tableSizeFor(initialCapacity);\n    &#125;\n    //【6-4】返回的是大于initialCapacity的最接近的2的整数倍  ，比如initialCapacity传入10，这个方法返回16\n    static final int tableSizeFor(int cap) &#123;//（内部内容讲源码时候不用管，面试题中详讲）\n        int n = cap - 1;\n        n |= n &gt;&gt;&gt; 1;\n        n |= n &gt;&gt;&gt; 2;\n        n |= n &gt;&gt;&gt; 4;\n        n |= n &gt;&gt;&gt; 8;\n        n |= n &gt;&gt;&gt; 16;\n        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    &#125;\n    \n    //------------------方法：\n    //【7】调用put方法\n    public V put(K key, V value) &#123;\n        //【7-1】首先调用hash方法计算哈希值：\n        //【7-3】调用putVal方法传入五个参数：\n        return putVal(hash(key), key, value, false, true);\n    &#125;\n    //【7-2】计算hash值\n    static final int hash(Object key) &#123;\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n    &#125;\n    //【7-4】调用\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) &#123;\n        Node&lt;K,V&gt;[] tab;\n        Node&lt;K,V&gt; p; \n        int n, i;\n        //【7-6】将底层主数组table给tab，判断是否为null，第一次放数据一定是null\n        if ((tab = table) == null || (n = tab.length) == 0)\n            //【7-7】走入if分支：table是null，就对table进行扩容，走进resize方法\n            n = (tab = resize()).length;//【7-21】table的length为16 ，n为16\n        /*\n        【7-22】\n        i = (n - 1) &amp; hash 根据哈希值和n计算放入数组的位置\n        取出这个位置上的元素，看是否为空，如果是第一个元素，一定是null\n        */\n        if ((p = tab[i = (n - 1) &amp; hash]) == null)\n            //【7-23】在这个位置上将元素封装为Node对象，放入对应位置\n            tab[i] = newNode(hash, key, value, null);//封装Node节点new Node&lt;&gt;(hash, key, value, null);\n        else &#123;\n            Node&lt;K,V&gt; e; K k;\n            if (p.hash == hash &amp;&amp;\n                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);\n            else &#123;\n                for (int binCount = 0; ; ++binCount) &#123;\n                    if ((e = p.next) == null) &#123;\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount &gt;= TREEIFY_THRESHOLD - 1)  \n                            treeifyBin(tab, hash);\n                        break;\n                    &#125;\n                    if (e.hash == hash &amp;&amp;\n                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                        break;\n                    p = e;\n                &#125;\n            &#125;\n            if (e != null) &#123;  \n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            &#125;\n        &#125;\n        ++modCount;\n        //【7-25】size指的是放入集合的键值总数，size++操作，不大于threshold，resize方法不走\n        if (++size &gt; threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    &#125;\n    //【7-8】resize方法：---》假设最开始走的是HashMap的空构造器：\n    final Node&lt;K,V&gt;[] resize() &#123;\n        Node&lt;K,V&gt;[] oldTab = table;//【7-9】table 是null\n        int oldCap = (oldTab == null) ? 0 : oldTab.length; //【7-10】oldCap:0\n        int oldThr = threshold;//【7-11】threshold为16，oldThr：16\n        int newCap, newThr = 0;\n        if (oldCap &gt; 0) &#123;//【7-12】不走\n            if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            &#125;\n            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;\n                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr &lt;&lt; 1;\n        &#125;\n        else if (oldThr &gt; 0)  //【7-13】走\n            newCap = oldThr;//newCap=16\n        else &#123;               //【7-14】不走\n             \n            newCap = DEFAULT_INITIAL_CAPACITY;\n             \n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        &#125;\n        if (newThr == 0) &#123;//【7-15】走\n            float ft = (float)newCap * loadFactor;//【7-16】ft: 16*0.75=12\n            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE); //【7-17】newThr = 12\n        &#125;\n        //【7-18】threshold赋值为newThr为12， ---》所以走空构造器这里threshold赋值为12，走有参构造器里面threshold赋值为12？？？？\n        threshold = newThr;\n        @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)\n        //【7-19】创建Node数组，长度为newCap16\n            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];\n        //【7-20】table赋值为newTab\n        table = newTab;\n        if (oldTab != null) &#123;\n            for (int j = 0; j &lt; oldCap; ++j) &#123;\n                Node&lt;K,V&gt; e;\n                if ((e = oldTab[j]) != null) &#123;\n                    oldTab[j] = null;\n                    if (e.next == null)\n                        newTab[e.hash &amp; (newCap - 1)] = e;\n                    else if (e instanceof TreeNode)\n                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);\n                    else &#123; \n                        Node&lt;K,V&gt; loHead = null, loTail = null;\n                        Node&lt;K,V&gt; hiHead = null, hiTail = null;\n                        Node&lt;K,V&gt; next;\n                        do &#123;\n                            next = e.next;\n                            if ((e.hash &amp; oldCap) == 0) &#123;\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            &#125;\n                            else &#123;\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            &#125;\n                        &#125; while ((e = next) != null);\n                        if (loTail != null) &#123;\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        &#125;\n                        if (hiTail != null) &#123;\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return newTab;\n    &#125;\n&#125;\n</code></pre>\n<pre><code>public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; \n    implements Map&lt;K,V&gt;, Cloneable, Serializable &#123; \n    final float loadFactor;\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    int threshold;\n    transient Node&lt;K,V&gt;[] table;\n    public HashMap() &#123;\n        this.loadFactor = DEFAULT_LOAD_FACTOR; \n    &#125;\n    \n    public HashMap(int initialCapacity) &#123;\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    &#125;\n    public HashMap(int initialCapacity, float loadFactor) &#123;\n        if (initialCapacity &lt; 0)\n            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                               initialCapacity);\n        if (initialCapacity &gt; MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    &#125;\n    static final int tableSizeFor(int cap) &#123;\n        int n = cap - 1;\n        n |= n &gt;&gt;&gt; 1;\n        n |= n &gt;&gt;&gt; 2;\n        n |= n &gt;&gt;&gt; 4;\n        n |= n &gt;&gt;&gt; 8;\n        n |= n &gt;&gt;&gt; 16;\n        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    &#125;\n    \n    //【8-1】put方法\n    public V put(K key, V value) &#123;\n        //计算hash值\n        return putVal(hash(key), key, value, false, true);\n    &#125;\n\n    static final int hash(Object key) &#123;\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n    &#125;\n    //【8-2】调用putVal方法\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) &#123;\n        Node&lt;K,V&gt;[] tab;\n        Node&lt;K,V&gt; p; \n        int n, i;\n        \n        //【8-3】table不空了，不走if        \n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        //【8-4】tab[i]不null，不走if\n        if ((p = tab[i = (n - 1) &amp; hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else &#123;\n            Node&lt;K,V&gt; e; K k;\n            /*\n                【8-5】\n                判断p.hash == hash哈希值是否相等，即使hash相等也要做&amp;&amp;后续的判断，因为两个对象哈希值相等是有可能的\n                (k = p.key) == key   == 比较地址值，String的话一样，不是字符串地址也不一样，\n                Animal a1 = new Animal(19);     和   Animal a2 = new Animal(19); 地址一定不同，就需要用后面的equals进行比较\n            */\n            if (p.hash == hash &amp;&amp;\n                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))   //----》哈希值相等，出现哈西碰撞\n                //【8-6】将该数组位置的数据给e\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);\n            else &#123;\n                for (int binCount = 0; ; ++binCount) &#123;\n                    if ((e = p.next) == null) &#123;\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount &gt;= TREEIFY_THRESHOLD - 1)  \n                            treeifyBin(tab, hash);\n                        break;\n                    &#125;\n                    if (e.hash == hash &amp;&amp;\n                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                        break;\n                    p = e;\n                &#125;\n            &#125;\n            if (e != null) &#123;  \n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;//【8-7】新value替换老value\n                afterNodeAccess(e);\n                return oldValue;//【8-8】返回老value\n            &#125;\n        &#125;\n        ++modCount;\n\n        if (++size &gt; threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    &#125;\n\n    final Node&lt;K,V&gt;[] resize() &#123;\n        Node&lt;K,V&gt;[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length; \n        int oldThr = threshold;\n        int newCap, newThr = 0;\n        if (oldCap &gt; 0) &#123;\n            if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            &#125;\n            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;\n                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr &lt;&lt; 1;\n        &#125;\n        else if (oldThr &gt; 0) \n            newCap = oldThr;\n        else &#123;    \n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        &#125;\n        if (newThr == 0) &#123;\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        &#125;\n        threshold = newThr;\n        @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)\n            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];\n        table = newTab;\n        if (oldTab != null) &#123;\n            for (int j = 0; j &lt; oldCap; ++j) &#123;\n                Node&lt;K,V&gt; e;\n                if ((e = oldTab[j]) != null) &#123;\n                    oldTab[j] = null;\n                    if (e.next == null)\n                        newTab[e.hash &amp; (newCap - 1)] = e;\n                    else if (e instanceof TreeNode)\n                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);\n                    else &#123; \n                        Node&lt;K,V&gt; loHead = null, loTail = null;\n                        Node&lt;K,V&gt; hiHead = null, hiTail = null;\n                        Node&lt;K,V&gt; next;\n                        do &#123;\n                            next = e.next;\n                            if ((e.hash &amp; oldCap) == 0) &#123;\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            &#125;\n                            else &#123;\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            &#125;\n                        &#125; while ((e = next) != null);\n                        if (loTail != null) &#123;\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        &#125;\n                        if (hiTail != null) &#123;\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return newTab;\n    &#125;\n&#125;\n</code></pre>\n<pre><code>public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; \n    implements Map&lt;K,V&gt;, Cloneable, Serializable &#123; \n    final float loadFactor;\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    int threshold;\n    transient Node&lt;K,V&gt;[] table;\n    public HashMap() &#123;\n        this.loadFactor = DEFAULT_LOAD_FACTOR; \n    &#125;\n    \n    public HashMap(int initialCapacity) &#123;\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    &#125;\n    public HashMap(int initialCapacity, float loadFactor) &#123;\n        if (initialCapacity &lt; 0)\n            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                               initialCapacity);\n        if (initialCapacity &gt; MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    &#125;\n    static final int tableSizeFor(int cap) &#123;\n        int n = cap - 1;\n        n |= n &gt;&gt;&gt; 1;\n        n |= n &gt;&gt;&gt; 2;\n        n |= n &gt;&gt;&gt; 4;\n        n |= n &gt;&gt;&gt; 8;\n        n |= n &gt;&gt;&gt; 16;\n        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    &#125;\n    \n    //【9-1】put方法\n    public V put(K key, V value) &#123;\n        //计算hash值\n        return putVal(hash(key), key, value, false, true);\n    &#125;\n\n    static final int hash(Object key) &#123;\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n    &#125;\n    //【9-2】调用putVal方法\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) &#123;\n        Node&lt;K,V&gt;[] tab;\n        Node&lt;K,V&gt; p; \n        int n, i;\n        \n        //【9-3】table不空了，不走if        \n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        //【9-4】tab[i]不null，不走if\n        if ((p = tab[i = (n - 1) &amp; hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else &#123;\n            Node&lt;K,V&gt; e; K k;\n            /*\n                【9-5】\n                判断p.hash == hash哈希值是否相等，即使hash相等也要做&amp;&amp;后续的判断，因为两个对象哈希值相等是有可能的\n                此时“通话”和“重地”的哈希值一致，但是key不一致，if不走\n            */\n            if (p.hash == hash &amp;&amp;\n                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)//【9-6】p也不是红黑树，不走if\n                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);\n            else &#123;\n                //【9-7】走到这里，证明数组的这个位置是个链表了\n                for (int binCount = 0; ; ++binCount) &#123;//【9-8】无条件的死循环   binCount 链表上节点的个数\n                    //随着循环  p.next就是一路找链上元素\n                    //p.next要是没有元素，就要开始追加了呗\n                    if ((e = p.next) == null) &#123;//【9-10】一路next比较都没有key相同的数据\n                    \n                        p.next = newNode(hash, key, value, null);//【9-11】追加在链表尾部 ---》 前七后八\n                        //【9-12】如果节点个数大于8，进行树化：要从链表转为红黑树\n                        if (binCount &gt;= TREEIFY_THRESHOLD - 1)  \n                            treeifyBin(tab, hash);//【9-13】这里还涉及 剪枝 问题，树节点在6个以下，就又变成链表了\n                        break;\n                    &#125;\n                    //【9-9】比较过程中：如果比较链表某个key相同，就break结束了，不用继续走了\n                    if (e.hash == hash &amp;&amp;\n                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                        break;\n                    p = e;\n                &#125;\n            &#125;\n            if (e != null) &#123;  \n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;//【8-7】新value替换老value\n                afterNodeAccess(e);\n                return oldValue;//【8-8】返回老value\n            &#125;\n        &#125;\n        ++modCount;\n\n        if (++size &gt; threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    &#125;\n\n    final Node&lt;K,V&gt;[] resize() &#123;\n        Node&lt;K,V&gt;[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length; \n        int oldThr = threshold;\n        int newCap, newThr = 0;\n        if (oldCap &gt; 0) &#123;\n            if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            &#125;\n            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;\n                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr &lt;&lt; 1;\n        &#125;\n        else if (oldThr &gt; 0) \n            newCap = oldThr;\n        else &#123;    \n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        &#125;\n        if (newThr == 0) &#123;\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        &#125;\n        threshold = newThr;\n        @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)\n            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];\n        table = newTab;\n        if (oldTab != null) &#123;\n            for (int j = 0; j &lt; oldCap; ++j) &#123;\n                Node&lt;K,V&gt; e;\n                if ((e = oldTab[j]) != null) &#123;\n                    oldTab[j] = null;\n                    if (e.next == null)\n                        newTab[e.hash &amp; (newCap - 1)] = e;\n                    else if (e instanceof TreeNode)\n                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);\n                    else &#123; \n                        Node&lt;K,V&gt; loHead = null, loTail = null;\n                        Node&lt;K,V&gt; hiHead = null, hiTail = null;\n                        Node&lt;K,V&gt; next;\n                        do &#123;\n                            next = e.next;\n                            if ((e.hash &amp; oldCap) == 0) &#123;\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            &#125;\n                            else &#123;\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            &#125;\n                        &#125; while ((e = next) != null);\n                        if (loTail != null) &#123;\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        &#125;\n                        if (hiTail != null) &#123;\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return newTab;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<p>默认（创建时只是初始化负载因子，数组长度是在第一次 put 的时候初始化的）<strong>数组长度为 16</strong>，<strong>最大程度</strong>，<strong> 负载因子为 0.75</strong>，扩容时<strong>扩大 2 倍</strong>，最大不超过 (一旦到达最开始的域值就变大)</p>\n<p>1.8 相对于 1.7 只是改变了数据结构</p>\n<h3 id=\"hashmap为什么要使用红黑树\"><a class=\"anchor\" href=\"#hashmap为什么要使用红黑树\">#</a> <strong>Hashmap 为什么要使用红黑树？</strong></h3>\n<p>​\t在 jdk1.8 版本后，java 对 HashMap 做了改进，在<strong>链表长度大于 8</strong> 的时候，将后面的数据存在红黑树中，以加快检索速度</p>\n<p>​\t红黑树虽然本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为 O (log n)。加快检索速率。</p>\n<p>引申</p>\n<p>在<strong>链表长度小于 6</strong> 的时候，红黑树又会变回二叉树</p>\n<h3 id=\"主数组的长度为什么是\"><a class=\"anchor\" href=\"#主数组的长度为什么是\">#</a> <strong>主数组的长度为什么是</strong> ****\\**\\******<strong>？</strong></h3>\n<p><strong>原因 1：</strong></p>\n<p>因为这个 length 的长度，会影响 key 的位置：</p>\n<p>![image-20220630132734570](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220630132734570.png?lastModify=1673361991)</p>\n<p>实际上这个算法就是：  h% length   , 但是取模的话  效率太低，所以用位运算效率会很高。</p>\n<p><strong>原因 2：</strong></p>\n<p>如果不是 2 的整数倍，那么 哈西碰撞 哈西冲突的概率就高了很多</p>\n<h3 id=\"装填因子075的原因\"><a class=\"anchor\" href=\"#装填因子075的原因\">#</a> <strong>装填因子 0.75 的原因</strong></h3>\n<p><strong>如果装填因子是 1， 那么数组满了再扩容，可以做到  最大的空间利用率</strong>  但是这是一个理想状态，元素不可能完全的均匀分布，很可能就哈西碰撞产生链表了。产生链表的话 查询时间就长了。</p>\n<ul>\n<li><strong>空间好，时间不好</strong></li>\n</ul>\n<p><strong>如果是 0.5 的话，就浪费空间，但是可以做到到 0.5 就扩容 ，然后哈西碰撞就少，不产生链表的话，那么查询效率很高</strong></p>\n<ul>\n<li><strong>时间好，空间不好</strong></li>\n</ul>\n<p><strong>总结：</strong></p>\n<p>1 \t空间利用率高，但是容易造成<strong> hash 冲突</strong>，产生链表，降低查询效率；</p>\n<p>0.5   不易造成 Hash 冲突，但是空间利用率低；</p>\n<p>综上所述 JDK 官方折中处理取了一个中间值 0.75</p>\n<h3 id=\"hashmap-的时间复杂度\"><a class=\"anchor\" href=\"#hashmap-的时间复杂度\">#</a> <strong>HashMap 的时间复杂度</strong></h3>\n<p>在数组中结点没有产生链表的情况下 O (1)</p>\n<p>在产生链表但长度小于 8 的时候 O (n)</p>\n<p>链表长度大于等于 8 的时候 O (logn)</p>\n<h3 id=\"hashtable底层\"><a class=\"anchor\" href=\"#hashtable底层\">#</a> <strong>HashTable 底层</strong></h3>\n<p>底层遵照 哈希表结构</p>\n<h3 id=\"linkedmap底层\"><a class=\"anchor\" href=\"#linkedmap底层\">#</a> <strong>LinkedMap 底层</strong></h3>\n<p>底层遵照 哈希表 + 链表</p>\n<h3 id=\"hashmap和hashtable有什么区别\"><a class=\"anchor\" href=\"#hashmap和hashtable有什么区别\">#</a> <strong>HashMap 和 Hashtable 有什么区别？</strong></h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:center\">HashMap</th>\n<th style=\"text-align:center\">Hashtable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">存储</td>\n<td style=\"text-align:center\">允许 <code>Key</code>  为 null</td>\n<td style=\"text-align:center\">不允许 <code>Key</code>  为 null</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">线程安全</td>\n<td style=\"text-align:center\">线程不安全</td>\n<td style=\"text-align:center\">线程安全</td>\n</tr>\n</tbody>\n</table>\n<p><strong>推荐使用</strong>：</p>\n<p>​\t在<strong> Hashtable</strong> 的类注释可以看到，<strong>Hashtable</strong> 是保留类<strong>不建议使用</strong>，推荐在<strong>单线程环境</strong>下使<strong>用 HashMap 替代</strong>，如果需要<strong>多线程</strong>使用则<strong>用 ConcurrentHashMap 替代</strong>。</p>\n<h3 id=\"treemap底层\"><a class=\"anchor\" href=\"#treemap底层\">#</a> <strong>TreeMap 底层</strong></h3>\n<p>红黑树</p>\n<pre><code>public class TreeMap&lt;K,V&gt;&#123;\n        //重要属性：\n        //外部比较器：\n        private final Comparator&lt;? super K&gt; comparator;\n        //树的根节点：\n        private transient Entry&lt;K,V&gt; root = null;\n        //集合中元素的数量：\n        private transient int size = 0;\n        //空构造器:\n        public TreeMap() &#123;\n        comparator = null;//如果使用空构造器，那么底层就不使用外部比较器\n    &#125;\n        //有参构造器：\n        public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;\n        this.comparator = comparator;//如果使用有参构造器，那么就相当于指定了外部比较器\n    &#125;\n        \n        public V put(K key, V value) &#123;//k,V的类型在创建对象的时候确定了\n        //如果放入的是第一对元素，那么t的值为null\n        Entry&lt;K,V&gt; t = root;//在放入第二个节点的时候，root已经是根节点了\n                //如果放入的是第一个元素的话，走入这个if中：\n        if (t == null) &#123;\n                        //自己跟自己比\n            compare(key, key); // type (and possibly null) check\n                        //根节点确定为root\n            root = new Entry&lt;&gt;(key, value, null);\n                        //size值变为1\n            size = 1;\n            modCount++;\n            return null;\n        &#125;\n                \n        int cmp;\n        Entry&lt;K,V&gt; parent;\n        // split comparator and comparable paths\n                //将外部比较器赋给cpr:\n        Comparator&lt;? super K&gt; cpr = comparator;\n                //cpr不等于null，意味着你刚才创建对象的时候调用了有参构造器，指定了外部比较器\n        if (cpr != null) &#123;\n            do &#123;\n                parent = t;\n                cmp = cpr.compare(key, t.key);//将元素的key值做比较\n                                //cmp返回的值就是int类型的数据：\n                                //要是这个值《0 =0  》0\n                if (cmp &lt; 0)\n                    t = t.left;\n                else if (cmp &gt; 0)\n                    t = t.right;\n                else//cpm==0\n                                //如果key的值一样，那么新的value替换老的value  但是key不变 因为key是唯一的\n                    return t.setValue(value);\n            &#125; while (t != null);\n        &#125;\n                //cpr等于null，意味着你刚才创建对象的时候调用了空构造器，没有指定外部比较器，使用内部比较器\n        else &#123;\n            if (key == null)\n                throw new NullPointerException();\n            Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key;\n            do &#123;\n                parent = t;\n                cmp = k.compareTo(t.key);//将元素的key值做比较\n                if (cmp &lt; 0)\n                    t = t.left;\n                else if (cmp &gt; 0)\n                    t = t.right;\n                else\n                    return t.setValue(value);\n            &#125; while (t != null);\n        &#125;\n        Entry&lt;K,V&gt; e = new Entry&lt;&gt;(key, value, parent);\n        if (cmp &lt; 0)\n            parent.left = e;\n        else\n            parent.right = e;\n        fixAfterInsertion(e);\n        size++;//size加1 操作\n        modCount++;\n        return null;\n    &#125;\n        \n        \n&#125;\n static final class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;\n        K key;\n        V value;\n        Entry&lt;K,V&gt; left = null;\n        Entry&lt;K,V&gt; right = null;\n        Entry&lt;K,V&gt; parent;\n        boolean color = BLACK;\n &#125;\n\n</code></pre>\n<h3 id=\"collection-和-collections-区别\"><a class=\"anchor\" href=\"#collection-和-collections-区别\">#</a> <strong>Collection 和 Collections 区别</strong></h3>\n<p>Collection，提供了对集合对象进行基本操作的通用<strong>接口方法</strong>，所有集合都是它的子类，比如 List、Set 等。</p>\n<p>Collections，是一个<strong>工具类</strong>，它包含了很多静态方法，不能被实例化，比如排序方法： Collections. sort (list) 等。</p>\n<h3 id=\"arraysaslist方法之后的集合可以调用什么方法\"><a class=\"anchor\" href=\"#arraysaslist方法之后的集合可以调用什么方法\">#</a> <strong>Arrays.asList () 方法之后的集合可以调用什么方法</strong></h3>\n<p>​\t <code>size()</code>  只有 size 方法可用，通过查看源码我们知道，将传递过去的数组变成了一个 ArrayList 集合，但是不是 java.util.ArrayList 而是 java.util.Arrays.ArrayList , 也就是 Arrays 中的一个内部类，他的方法只定义了 <code>size</code> 、 <code>toArray</code> 、 <code>get</code> 、 <code>set</code>  和  <code>indexOf</code></p>\n<p>![image-20220628202337546](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220628202337546.png?lastModify=1673361991)</p>\n<p>![image-20220628202651719](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220628202651719.png?lastModify=1673361991)</p>\n<h3 id=\"map-set-list的区别\"><a class=\"anchor\" href=\"#map-set-list的区别\">#</a> <strong>Map、Set、List 的区别</strong></h3>\n<p>![image-20220629181141368](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/image-20220629181141368.png?lastModify=1673361991)</p>\n<p><strong>List</strong></p>\n<blockquote>\n<p>List 中存储的元素有序，指的是读出的顺序与存入的顺序是一致的。</p>\n</blockquote>\n<p>①可以允许重复的对象； ②可以插入多个 null 元素； ③是一个有序容器，保持了每个元素的插入顺序，输出的顺序就是插入的顺序； ④常用的实现类有 ArrayList、LinkedList 和 Vector；ArrayList 最为流行，它提供了使用索引的随意访问，而 LinkedList 则对于经常需要从 List 中添加或删除元素的场合更为合适。</p>\n<p><strong>Set</strong></p>\n<blockquote>\n<p>Set 存储的元素是无序的，这里的无序指的是存入的顺序与输出的顺序可能是不一致的。</p>\n</blockquote>\n<p>①不允许重复对象； ②无序容器，你无法保证每个元素的存储顺序，TreeSet 通过 Comparator 或者 Comparable 维护了一个排序顺序； ③只允许一个 null 元素； ④Set 接口最流行的几个实现类是 HashSet、LinkedHashSet 以及 TreeSet； 最流行的是<strong>基于 HashMap</strong> 实现的 HashSet； TreeSet 还实现了 SortedSet 接口，因此 TreeSet 是一个根据其 compare () 和 compareTo () 的定义进行排序的有序容器。</p>\n<p><strong>Map</strong></p>\n<blockquote>\n<p>Map 存储的元素是键值对（key-value），键和值都是无序的，即存入顺序与输出顺序可能都不一样。</p>\n</blockquote>\n<p>①Map 不是 Collection 的子接口或者实现类，Map 是一个接口； ②Map 的 每个 Entry 都持有两个对象，也就是一个键一个值，Map 可能会持有相同的值对象但键对象必须是唯一的； ③TreeMap 也通过 Comparator 或者 Comparable 维护了一个排序顺序； ④Map 里你可以拥有随意个 null 值，但最多只能有一个 null 键； ⑤Map 接口最流行的几个实现类是 HashMap、LinkedHashMap、Hashtable 和 TreeMap。（HashMap、TreeMap 最常用）</p>\n<h3 id=\"hashset与treeset-区别httpswwwcnblogscomwilliamjiep9099038html\"><a class=\"anchor\" href=\"#hashset与treeset-区别httpswwwcnblogscomwilliamjiep9099038html\">#</a> <em><em><em>*[*</em><a href=\"https://www.cnblogs.com/williamjie/p/9099038.html\">*<em>HashSet 与 TreeSet 区别 *</em></a>*</em>](*</em>*<em><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2lsbGlhbWppZS9wLzkwOTkwMzguaHRtbCo=\">https://www.cnblogs.com/williamjie/p/9099038.html*</span></em>*<em>)*</em>**</h3>\n<p><strong>HashSet</strong> HashSet 有以下特点</p>\n<ul>\n<li>不能保证元素的排列顺序，顺序有可能发生变化</li>\n<li>不是同步的</li>\n<li>集合元素可以是 null, 但只能放入一个 null</li>\n</ul>\n<p>​    当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode () 方法来得到该对象的 hashCode 值，然后根据 hashCode 值来决定该对象在 HashSet 中存储位置。 简单的说，HashSet 集合判断两个元素相等的标准是两个对象通过 equals 方法比较相等，并且两个对象的 hashCode () 方法返回值相等</p>\n<p>​    注意，如果要把一个对象放入 HashSet 中，重写该对象对应类的 equals 方法，也应该重写其 hashCode () 方法。其规则是如果两个对 象通过 equals 方法比较返回 true 时，其 hashCode 也应该相同。另外，对象中用作 equals 比较标准的属性，都应该用来计算 hashCode 的值。</p>\n<p><strong>TreeSet 类</strong> TreeSet 是 SortedSet 接口的唯一实现类，TreeSet 可以确保集合元素处于排序状态。TreeSet 支持两种排序方式，自然排序 和定制排序，其中自然排序为默认的排序方式。向 TreeSet 中加入的应该是同一个类的对象。 TreeSet 判断两个对象不相等的方式是两个对象通过 equals 方法返回 false，或者通过 CompareTo 方法比较没有返回 0 <strong>自然排序</strong> 自然排序使用要排序元素的 CompareTo（Object obj）方法来比较元素之间大小关系，然后将元素按照升序排列。 Java 提供了一个 Comparable 接口，该接口里定义了一个 compareTo (Object obj) 方法，该方法返回一个整数值，实现了该接口的对象就可以比较大小。 obj1.compareTo (obj2) 方法如果返回 0，则说明被比较的两个对象相等，如果返回一个正数，则表明 obj1 大于 obj2，如果是 负数，则表明 obj1 小于 obj2。 如果我们将两个对象的 equals 方法总是返回 true，则这两个对象的 compareTo 方法返回应该返回 0 <strong>定制排序</strong> 自然排序是根据集合元素的大小，以升序排列，如果要定制排序，应该使用 Comparator 接口，实现 int compare (T o1,T o2) 方法。</p>\n<p><strong>最重要：</strong></p>\n<p>1、TreeSet 是二差树实现的，Treeset 中的数据是自动排好序的，不允许放入 null 值。</p>\n<p>2、HashSet 是哈希表实现的，HashSet 中的数据是无序的，可以放入 null，但只能放入一个 null，两者中的值都不能重复，就如数据库中唯一约束。</p>\n<p>3、HashSet 要求放入的对象必须实现 HashCode () 方法，放入的对象，是以 hashcode 码作为标识的，而具有相同内容的 String 对象，hashcode 是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例 。</p>\n<p><strong>HashSet 与 TreeSet 的使用场景</strong></p>\n<p>HashSet：哈希表是通过使用称为散列法的机制来存储信息的，元素并没有以某种特定顺序来存放 TreeSet：提供一个使用树结构存储 Set 接口的实现 (红黑树算法)，对象以升序顺序存储，访问和遍历的时间很快。  使用场景：HashSet 是基于 Hash 算法实现的，其性能通常都优于 TreeSet。我们通常都应该使用 HashSet，在我们需要排序的功能时，我们才使用 TreeSet。</p>\n<p><strong>HashSet 与 TreeSet 的底层运行方式:</strong>  TreeSet 集合对象的加入过程：  TreeSet 的底层是通过二叉树来完成存储的，无序的集合  当我们将一个对象加入 treeset 中，treeset 会将第一个对象作为根对象，然后调用对象的 compareTo 方法拿第二个对象和第一个比较，当返回至 = 0 时，说明 2 个对象内容相等，treeset 就不把第二个对象加入集合。返回 &gt; 1 时，说明第二个对象大于第一个对象，将第二个对象放在右边，返回 - 1 时，则将第二个对象放在左边，依次类推</p>\n<p>HashSet 集合对象的加入过程：  hashset 底层是 hash 值的地址，它里面存的对象是无序的。  第一个对象进入集合时，hashset 会调用 object 类的 hashcode 根据对象在堆内存里的地址调用对象重写的 hashcode 计算出一个 hash 值，然后第一个对象就进入 hashset 集合中的任意一个位置。  第二个对象开始进入集合，hashset 先根据第二个对象在堆内存的地址调用对象的计算出一个 hash 值，如果第二个对象和第一个对象在堆内存里的地址是相同的，那么得到的 hash 值也是相同的，直接返回 true，hash 得到 true 后就不把第二个元素加入集合（这段是 hash 源码程序中的操作）。如果第二个对象和第一个对象在堆内存里地址是不同的，这时 hashset 类会先调用自己的方法遍历集合中的元素，当遍历到某个元素时，调用对象的 equals 方法，如果相等，返回 true，则说明这两个对象的内容是相同的，hashset 得到 true 后不会把第二个对象加入集合。</p>\n<h3 id=\"hashtabl-hashmap-treemap的区别\"><a class=\"anchor\" href=\"#hashtabl-hashmap-treemap的区别\">#</a> <strong>hashtabl、hashMap treeMap 的区别</strong></h3>\n<p><strong>实现方面</strong> HashMap 是继承自 AbstractMap 类，而 HashTable 是继承自 Dictionary 类。它们都同时实现了 map、Cloneable（可复制）、Serializable（可序列化）这三个接口。存储的内容是基于 key-value 的键值对映射，不能有重复的 key，而且一个 key 只能映射一个 value。HashSet 底层就是基于 HashMap 实现的。</p>\n<p><strong>为空方面</strong> Hashtable 的 key、value 都不能为 null；HashMap 的 key、value 可以为 null，不过只能有一个 key 为 null，但可以有多个 null 的 value；TreeMap 键、值都不能为 null。</p>\n<p><strong>排序方面</strong> Hashtable、HashMap 具有无序特性。TreeMap 是利用红黑树实现的（树中的每个节点的值都会大于或等于它的左子树中的所有节点的值，并且小于或等于它的右子树中的所有节点的值），实现了 SortMap 接口，能够对保存的记录根据键进行排序。所以一般需求排序的情况下首选 TreeMap，默认按键的升序排序（深度优先搜索），也可以自定义实现 Comparator 接口实现排序方式。</p>\n<p><strong>注：<strong>HashTable 是一个线程安全的类，它使用</strong> synchronized</strong> 来锁住整张<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1IYXNoJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==\"> Hash</span> 表来实现线程安全，即每次锁住整张表让线程独占，相当于所有线程进行读写时都去竞争一把锁，导致效率非常低下</p>\n<p>Hashtable 现在很少出现了，大家更多的会使用 <code>ConcurrentHashMap</code> ，引导面试官提问<strong> ConcurrentHashMap</strong>。</p>\n<h3 id=\"concurrenthashmap原理与实现\"><a class=\"anchor\" href=\"#concurrenthashmap原理与实现\">#</a> <strong>ConcurrentHashMap 原理与实现</strong></h3>\n<p>分析问题：原理与实现主要是锁的原理与实现！我们可以从 JDK1.7 开始聊起: JDK1.7 版本，ConcurrentHashMap 内部使用段 (Segment),ConcurrentLevel 有 16 个分段，这 16 个分段有独立的锁机制，每个独立的机制都是一张表，表的下面是链表，这样就可以支持并发的同时保证每张表的线程安全，大大的题高了效率。</p>\n<p>​\tJDK1.8 版本，ConcurrentHashMap 内部使用 sychronized + volatile + CAS 的实现降低锁的粒度，大家可以认为粒度就是 HashEntry (首节点)。</p>\n<p>让我们看看具体是如何实现的:</p>\n<ul>\n<li>插入、删除、扩容的时候都对数组中相应位置的元素加锁了，加锁用的是 synchronized.</li>\n<li>table 数组、Node 中的 val 和 next、以及一些控制字段都加了 volatile</li>\n<li>在更新一些关键变量的时候用到了 sun.misc.Unsafe 中的一些方法</li>\n</ul>\n<p>![204fe5e5d4314bf99acbaa07df844ef5~tplv-k3u1fbpfcp-watermark](file://D:/_Myself/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/img/204fe5e5d4314bf99acbaa07df844ef5tplv-k3u1fbpfcp-watermark.jpg?lastModify=1673361991)</p>\n<p><strong>反思 &amp; 扩展</strong> <strong>ConcurrentHashMap 有什么缺陷吗？</strong> ConcurrentHashMap 是设计为非阻塞的。在更新时会局部锁住某部分数据，但不会把整个表都锁住。同步读取操作则是完全非阻塞的。好处是在保证合理的同步前提下，效率很高。坏处是严格来说读取操作不能保证反映最近的更新。例如线程 A 调用 putAll 写入大量数据，期间线程 B 调用 get，则只能 get 到目前为止已经顺利插入的部分数据。</p>\n<p><strong>ConcurrentHashMap 在 JDK7 和 8 之间的区别</strong> JDK1.8 的实现降低锁的粒度，JDK1.7 版本锁的粒度是基于 Segment 的，包含多个 HashEntry，而 JDK1.8 锁的粒度就是 HashEntry (首节 点) JDK1.8 版本的数据结构变得更加简单，使得操作也更加清晰流畅，因为已经使用 synchronized 来进行同步，所以不需要分段锁的概念，也就不需要 Segment 这种数据结构了，由于粒度的降低，实现的复杂度也增加了 JDK1.8 使用红黑树来优化链表，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样形成一个最佳拍档</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "面试",
                "集合",
                "面试"
            ]
        },
        {
            "id": "https://eth168.top/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",
            "url": "https://eth168.top/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",
            "title": "常见问题",
            "date_published": "2023-01-11T16:00:00.000Z",
            "content_html": "<h3 id=\"创建java对象方式\"><a class=\"anchor\" href=\"#创建java对象方式\">#</a> 创建 JAVA 对象方式</h3>\n<p>一共 5 种</p>\n<p>1、new 申请空间，执行构造方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2、通过 Class 类中，newInstance () 方法，默认去找空参（不建议）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> cla <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>cla<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3、通过 Construction 类中的 newInstance () 找到对应构造方法去创建</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> cla <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Construction</span> construction <span class=\"token operator\">=</span> cla<span class=\"token punctuation\">.</span><span class=\"token function\">getConstruction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>construction<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4、通过 Object 类中的 Clone ()</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 要实现 Cloneable 重写</span></pre></td></tr></table></figure><p>5、通过对象的反序列化</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span> pp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"new一个对象的顺序内含代码块\"><a class=\"anchor\" href=\"#new一个对象的顺序内含代码块\">#</a> new 一个对象的顺序 (内含代码块)</h3>\n<ul>\n<li>假设一个类他的父类有<strong>静态代码块</strong>、<strong>代码块</strong>、<strong>构造器</strong>，自身也有<strong>静态代码块</strong>、<strong>代码块</strong>、构造器，以及<strong>方法内部的代码块</strong></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestFather</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span>  <span class=\"token keyword\">int</span> age <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是父类构造块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是父类静态构造块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestFather</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestFather</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 普通块限制了局部变量的作用范围</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是普通块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----000000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//System.out.println(num);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//if()&#123;&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//while()&#123;&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 构造块</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------这是构造块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 静态块</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----这是静态块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是空构造器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 这是一个 main 方法，是程序的入口：</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Test</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Test</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220803104041443.png\" class=\"\" title=\"image-20220803104041443\">\n<p><strong>总结：</strong></p>\n<blockquote>\n<p><em>顺序</em>：</p>\n<ul>\n<li>\n<p>static 变量或者方法</p>\n<p>父类静态构造块  -&gt;  静态构造块  -&gt;</p>\n</li>\n<li>\n<p>Test t = new Test()</p>\n<p>父类构造块  -&gt;  构造块  -&gt;  空参构造  -&gt;</p>\n</li>\n<li>\n<p>t.a();</p>\n<p>方法 A  -&gt;  方法中的构造块 -&gt;</p>\n</li>\n<li>\n<p>Test t2 = new Test()</p>\n<p>父类构造块  -&gt;  构造块  -&gt;  空参构造  -&gt;</p>\n</li>\n<li>\n<p>t2.a();</p>\n<p>方法 A  -&gt;  方法中的构造块</p>\n</li>\n</ul>\n</blockquote>\n<p>总的来说，</p>\n<ul>\n<li>父类方法在前</li>\n<li>静态在前且<strong>只加载一次</strong></li>\n<li><strong>构造块 》构造器 》 方法</strong></li>\n</ul>\n<p>新的总结：</p>\n<blockquote>\n<p>​\t从 JVM 的角度来说，再开始的时候先进性类的加载，(Loading [加载器获取] 》Linking [校验是否符合语法》附默认值》解析 ]  》initialization [初始化] ) ，在加载阶段我们就将我们的方法体放入了方法区中，初始化的时候就已经将我们的静态系列运行了，这也就是为什么 static 系列的东西只在程序过程中产生一次。</p>\n</blockquote>\n<h3 id=\"java有哪几种关键字作用区间是什么\"><a class=\"anchor\" href=\"#java有哪几种关键字作用区间是什么\">#</a> JAVA 有哪几种关键字，作用区间是什么</h3>\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/wps1.jpg\" class=\"\" title=\"img\">\n<p>private：只有类中的子类和方法可以使用</p>\n<p>default：只有和自己同一个包下的子类才能使用</p>\n<p>protected：只有自己和子类可以直接使用</p>\n<p>public：全部范围</p>\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220731132616681.png\" class=\"\" title=\"image-20220731132616681\">\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220731132623293.png\" class=\"\" title=\"image-20220731132623293\">\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220731132627634.png\" class=\"\" title=\"image-20220731132627634\">\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220731132632474.png\" class=\"\" title=\"image-20220731132632474\">\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220731132638079.png\" class=\"\" title=\"image-20220731132638079\">\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220731132644922.png\" class=\"\" title=\"image-20220731132644922\">\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220731132649522.png\" class=\"\" title=\"image-20220731132649522\">\n<h3 id=\"overload-和-override区别\"><a class=\"anchor\" href=\"#overload-和-override区别\">#</a> OverLoad 和 Override 区别</h3>\n<p>OverLoad：重载，指同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同 (即参数个数或类型不同)</p>\n<p>Override：重写，表示子类中的方法可以与父类中的某个方法的名称和参数完全相同</p>\n<p>注意：</p>\n<p>Override 注意事项:<br />\n1. 覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果<br />\n 2. 覆盖的方法的返回值必须和被覆盖的方法的返回一致<br />\n 3. 覆盖的方法所抛出的异常必须和被覆盖方法的所<mark>抛出的异常一致，或者是其子类</mark>；<br />\n4. 被覆盖的<mark>方法不能为 private</mark>，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</p>\n<p>Overload 注意事项:<br />\n1. 在使用重载时只能通过不同的参数样式。例如，不同的参数类型，不同的参数个数，不同的参数顺序（当然，同一方法内的几个参数类型必须不一样，例如可以是 fun (int,float)，但是不能为 fun (int,int)）；<br />\n2. 不能通过访问权限、返回类型、抛出的异常进行重载；<br />\n3. 方法的异常类型和数目不会对重载造成影响；<br />\n4. 对于继承来说 **，如果某一方法在父类中是访问权限是 priavte**，那么就不能在子类对其进行重载，如果定义的话，也只是定义了一个新方法，而不会达到重载的效果</p>\n<p><strong>总结：</strong></p>\n<blockquote>\n<p>重载：名字相同是前提，是否合理看参数，其他都没啥关系，父类一旦私有就玩完</p>\n<p>重写：继承实现是前提，子类起码大于父，犯的错误要更小，返回类型要一致</p>\n</blockquote>\n<h3 id=\"简述一下java面向对象的基本特征继承-封装与多态以及你自己的应用\"><a class=\"anchor\" href=\"#简述一下java面向对象的基本特征继承-封装与多态以及你自己的应用\">#</a> 简述一下 Java 面向对象的基本特征，继承、封装与多态，以及你自己的应用？</h3>\n<p>继承：就好比一个父亲多个孩子，并且孩子还完全继承父类的方法，private 修饰的方法也能继承，只\t\t  是因为封装的特性阻碍了直接调用，但是提供了间接调用的方式，可以间接调用。并且后面多态的条件</p>\n<p>封装：把对象的属性和操作（或服务）结合为一个<strong>独立的整体</strong>，并<strong>尽可能隐藏对象的内部实现细节</strong>。</p>\n<p>​\t\t  例如，内部属性只对外提供 get、set 方法，不能直接引用。</p>\n<p>多态：多态，故名思意，事物的多种形态。多态跟属性无关，多态指的是方法的多态。打破单继承。</p>\n<p>前提：</p>\n<ul>\n<li><strong>有继承性关系</strong></li>\n<li><strong>要有方法的重写</strong></li>\n<li><strong>必须是父类引用子类的对象</strong></li>\n</ul>\n<h3 id=\"this和super\"><a class=\"anchor\" href=\"#this和super\">#</a> this 和 super</h3>\n<p><strong>this</strong></p>\n<ol>\n<li>对象内部指代自身的引用</li>\n<li>解决成员变量和局部变量的同名问题</li>\n<li>可以调用成员变量，不能调用局部变量</li>\n<li>可以调用成员方法</li>\n<li>在普通方法中可以省略 this</li>\n<li>静态方法中不允许出现</li>\n</ol>\n<p><strong>super</strong></p>\n<ol>\n<li>代表当前对象的直接父类对象的引用</li>\n<li>可以调用父类中非 private 成员变量和方法</li>\n<li>super () 可以调用父类的构造器，只限于构造方法中使用，且必须是第一条</li>\n</ol>\n<h3 id=\"怎样声明一个类不会被继承什么场景下会用\"><a class=\"anchor\" href=\"#怎样声明一个类不会被继承什么场景下会用\">#</a> 怎样声明一个类不会被继承，什么场景下会用？</h3>\n<p><strong>final 修饰的类</strong>不能有子类 大部分都是出于<strong>安全</strong>考虑</p>\n<p>举例：String、Math</p>\n<h3 id=\"java是什么类型的语言\"><a class=\"anchor\" href=\"#java是什么类型的语言\">#</a> java 是什么类型的语言？</h3>\n<h4 id=\"面向对象语言\"><a class=\"anchor\" href=\"#面向对象语言\">#</a> 面向对象语言：</h4>\n<p>​\t解释之前我们得引入一个概念，<strong>面向过程</strong>，举一个例子，要把大象装进冰箱需要几步</p>\n<p>面向过程：</p>\n<ul>\n<li>打开冰箱，把大象放进去，关上冰箱。</li>\n</ul>\n<p>面向对象：</p>\n<ul>\n<li>打开冰箱（负责：人走到冰箱前面，打开了）</li>\n<li>存储（负责：大象先迈左腿，然后右腿，然后躺进去）</li>\n<li>关闭冰箱（然后关上冰箱门。）</li>\n</ul>\n<p>面向过程是：要先把事物分析成<strong>不同的步骤</strong>，然后根据步骤一步步的编程。</p>\n<p>面向对象是：创建负责某个部分的负责人也就是我们所说的 “对象”，在给对象赋值上相应的属性，进行方法形式的编程</p>\n<p><strong>两者相辅相成缺一不可。</strong></p>\n<p>1 解释型</p>\n<p>2 编译型</p>\n<h3 id=\"final-和-static-在java中的意义\"><a class=\"anchor\" href=\"#final-和-static-在java中的意义\">#</a> final 和 static 在 JAVA 中的意义？</h3>\n<p>1、static 特点</p>\n<blockquote>\n<p>（1）在类加载的时候一起加载入方法区中的静态域中<br />\n（2）先于对象存在<br />\n（3）访问方式： 对象名。属性名    类名。属性名（推荐）</p>\n</blockquote>\n<p>2、final 特点</p>\n<blockquote>\n<p>修饰一个变量，变量的值不可以改变，这个变量也变成了一个字符常量，约定俗称的规定：名字大写</p>\n<p>final 修饰方法，那么这个方法不可以被该类的子类重写：</p>\n<p>final 修饰类，代表没有子类，该类不可以被继承：</p>\n</blockquote>\n<p>3、项目使用场景</p>\n<p>static 修饰属性的应用场景：</p>\n<p>​\t某些特定的数据想要在内存中共享，只有一块 --》这个情况下，就可以用 static 修饰的属性</p>\n<p>final 修饰属性的应用场景：</p>\n<p>​\t（1）使用 Math 类的时候无需导包，直接使用即可：</p>\n<p>​\t（2）Math 类没有子类，不能被其他类继承了</p>\n<p>​\t（3）里面的属性全部被 final 修饰，方法也是被 final 修饰的，只是省略不写了</p>\n<p>​\t\t\t\t原因：子类没有必要进行重写。</p>\n<p>​\t（4）外界不可以创建对象：</p>\n<p>​\t（5）发现 Math 类中的所有的属性，方法都被 static 修饰</p>\n<p>​\t\t\t\t那么不用创建对象去调用，只能通过类名。属性名  类名。方法名 去调用</p>\n<h3 id=\"java-中的对象拷贝\"><a class=\"anchor\" href=\"#java-中的对象拷贝\">#</a> JAVA 中的对象拷贝？</h3>\n<h3 id=\"什么是接口\"><a class=\"anchor\" href=\"#什么是接口\">#</a> 什么是接口？</h3>\n<p>1、制定标准</p>\n<p>2、提供可扩展性</p>\n<p>3、面向接口编程</p>\n<h3 id=\"接口和抽象类的区别\"><a class=\"anchor\" href=\"#接口和抽象类的区别\">#</a> 接口和抽象类的区别：</h3>\n<p>​    <img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220803203534319.png\" class=\"\" title=\"image-20220803203534319\"></p>\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220803203540347.png\" class=\"\" title=\"image-20220803203540347\">\n<h3 id=\"什么是内部类\"><a class=\"anchor\" href=\"#什么是内部类\">#</a> 什么是内部类？</h3>\n<p>分类：4 种</p>\n<p>1、成员内部类</p>\n<p>2、静态内部类</p>\n<p>3、局部内部类</p>\n<p>4、匿名内部类</p>\n<h3 id=\"java中的基本数据类型\"><a class=\"anchor\" href=\"#java中的基本数据类型\">#</a> JAVA 中的基本数据类型</h3>\n<p>1、8 种数据类型</p>\n<p>2、所占字节长度，最大最小</p>\n<p>3、BigDecimal 对象</p>\n<h3 id=\"arraylist是用来干嘛的\"><a class=\"anchor\" href=\"#arraylist是用来干嘛的\">#</a> ArrayList 是用来干嘛的？</h3>\n<p>1、原理</p>\n<h3 id=\"try-catch-finally-return\"><a class=\"anchor\" href=\"#try-catch-finally-return\">#</a> Try、catch、finally、return</h3>\n<p>在 <code>try</code>  、 <code>catch</code>  、 <code>finally</code>  只有一个 return 有用，也就是说只有最后一个有用</p>\n<h4 id=\"一-try中带有return\"><a class=\"anchor\" href=\"#一-try中带有return\">#</a> 一、try 中带有 return</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>init:24</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>try:25</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>finally:26</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>最终返回：25</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>由此可见：try -》 finally -》return</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>​\t因为当 try 中带有 return 时，会先执行 return 前的代码，然后暂时保存需要 return 的信息，再执行 finally 中的代码，最后再通过 return 返回之前保存的信息。所以，这里方法返回的值是 try 中计算后的 25，而非 finally 中计算后的 26。</p>\n<p>再看一个例子</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 方式一：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>init:[]</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>try:1</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>catch:[2]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>finally:[2, 3]</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>最终返回：[2, 3]</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>看完这个例子，可能会发现问题，刚提到 return 时会临时保存需要返回的信息，不受 finally 中的影响，为什么这里会有变化？其实问题出在参数类型上，上一个例子用的是基本类型，这里用的引用类型。list 里存的不是变量本身，而是变量的地址，所以当 finally 通过地址改变了变量，还是会影响方法返回值的。</p>\n<h4 id=\"二-catch中带有return\"><a class=\"anchor\" href=\"#二-catch中带有return\">#</a> 二、catch 中带有 return</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 方式一：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>try:25</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>finally:26</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>最终返回：26</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>由此可见：try -》 finally</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"三-finally中带有return\"><a class=\"anchor\" href=\"#三-finally中带有return\">#</a> 三、finally 中带有 return</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span>i<span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>init:24</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>try:25</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>catch:26</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>finally:27</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>最终返回：27</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>由此可见 try ->catch -> finally</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>​\t当 finally 中有 return 的时候，try 中的 return 会失效，在执行完 finally 的 return 之后，就不会再执行 try 中的 return。这种写法，编译是可以编译通过的，但是编译器会给予警告，所以不推荐在 finally 中写 return，这会破坏程序的完整性，而且一旦 finally 里出现异常，会导致 catch 中的异常被覆盖。</p>\n<blockquote>\n<p>基本数据只看值，先返回啥就是啥，后期改动不影响</p>\n<p>引用数据返回只返他地址，后期改动有影响</p>\n<p>多个 return 只看近</p>\n</blockquote>\n<h4 id=\"四-总结\"><a class=\"anchor\" href=\"#四-总结\">#</a> 四、总结：</h4>\n<p>1、finally 中的代码总会被执行。</p>\n<p>2、当 try、catch 中有 return 时，也会执行 finally。return 的时候，要注意返回值的类型，是否受到 finally 中代码的影响。</p>\n<p>3、finally 中有 return 时，会直接在 finally 中退出，导致 try、catch 中的 return 失效。</p>\n<h3 id=\"基本类型的转化\"><a class=\"anchor\" href=\"#基本类型的转化\">#</a> 基本类型的转化</h3>\n<p>整型</p>\n<p><code>byte</code>   <code>short int  long</code>   对应字节 1、2 、4、8</p>\n<p>浮点</p>\n<p><code>float</code>   <code>double</code>              对应字节 4、8</p>\n<p>字符型</p>\n<p><code>char</code> \t\t\t\t\t\t\t\t 对应字节 1</p>\n<p>布尔</p>\n<p><code>boolean</code> \t\t\t\t\t      对应字节 看操作系统</p>\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220628104655888.png\" class=\"\" title=\"image-20220628104655888\">\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220628110544905.png\" class=\"\" title=\"image-20220628110544905\">\n<h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h4>\n<p>1、长字节的可以直接接收短字节数，短字节数要接收长字节数要强转，同字节数可相互转化，比如  <code>float</code>  和  <code>int</code> 。</p>\n<p>2、父与子的关系也可这样理解</p>\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220628105340365.png\" class=\"\" title=\"image-20220628105340365\">\n<h3 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/image-20220628105535662.png\" class=\"\" title=\"image-20220628105535662\">\n<p><strong>不需要去刻意的记优先级关系</strong><br />\n<strong>赋值 &lt; 三目 &lt; 逻辑 &lt; 关系 &lt; 算术 &lt; 单目</strong></p>\n<h3 id=\"取余\"><a class=\"anchor\" href=\"#取余\">#</a> 取余</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a1<span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a2<span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> a3<span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\t <span class=\"token comment\">// -1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> a4<span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><p>技巧：全部都当成正数算，<strong>最后的符号与被除数相同</strong></p>\n<h3 id=\"string-stringbuffer-stringbuilder区别与联系\"><a class=\"anchor\" href=\"#string-stringbuffer-stringbuilder区别与联系\">#</a> String、StringBuffer、StringBuilder 区别与联系</h3>\n<ol>\n<li>\n<p>String 类是不可变类，即一旦一个 String 对象被创建后，包含在这个对象中的字符序列是不可改变的，直至这个对象销毁。</p>\n</li>\n<li>\n<p>StringBuffer 类则代表一个字符序列可变的字符串，可以通过 append、insert、reverse、setChartAt、setLength 等方法改变其内容。一旦生成了最终的字符串，调用 toString 方法将其转变为 String</p>\n</li>\n<li>\n<p>JDK1.5 新增了一个 StringBuilder 类，与 StringBuffer 相似，构造方法和方法基本相同。不同是 StringBuffer 是线程安全的，而 StringBuilder 是线程不安全的，所以性能略高。通常情况下，创建一个内容可变的字符串，应该优先考虑使用 StringBuilder</p>\n<pre><code> StringBuilder:JDK1.5开始  效率高   线程不安全\n \n StringBuffer:JDK1.0开始   效率低    线程安全\n</code></pre>\n</li>\n</ol>\n<h3 id=\"jdk18中的stream有用过吗详述一下stream的并行操作原理stream并行的线程池是从哪里来的\"><a class=\"anchor\" href=\"#jdk18中的stream有用过吗详述一下stream的并行操作原理stream并行的线程池是从哪里来的\">#</a> Jdk1.8 中的 stream 有用过吗，详述一下 stream 的并行操作原理？stream 并行的线程池是从哪里来的？</h3>\n<p>​\t<strong>Stream</strong> 作为 Java8 的一大亮点，它与 java.io 包里的<strong> InputStream</strong> 和<strong> OutputStream</strong> 是完全不同的概念。它是对容器对象功能的增强，它专注于对容器对象进行各种非常便利、高效的聚合操作或者大批量数据操作。</p>\n<p>​\tStream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。同时，它<mark>提供串行和并行两种模式进行汇聚操作</mark>，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。所以说，Java8 中首次出现的 java.util.stream 是一个函数式语言 + 多核时代综合影响的产物。</p>\n<p>Stream 有如下三个操作步骤：</p>\n<p>一、创建 Stream：从一个数据源，如集合、数组中获取流。</p>\n<p>二、中间操作：一个操作的中间链，对数据源的数据进行操作。</p>\n<p>三、终止操作：一个终止操作，执行中间操作链，并产生结果。</p>\n<p>​\t当数据源中的数据上了流水线后，这个过程对数据进行的所有操作都称为 “中间操作”。中间操作仍然会返回一个流对象，因此多个中间操作可以串连起来形成一个流水线。比如 map (mapToInt, flatMap 等)、filter、distinct、sorted、peek、limit、skip、parallel、sequential、unordered。</p>\n<p>​\t当所有的中间操作完成后，若要将数据从流水线上拿下来，则需要执行终止操作。终止操作将返回一个执行结果，这就是你想要的数据。比如：forEach、forEachOrdered、toArray、reduce、collect、min、max、count、anyMatch、allMatch、noneMatch、findFirst、findAny、iterator。</p>\n<p>​\t多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何处理！而在终止操作时一次性全部处理，称作 “惰性求值”。</p>\n<p>​\tstream 并行原理：其实本质上就是在 ForkJoin 上进行了一层封装，将 Stream 不断尝试分解成更小的 split，然后使用 fork/join 框架分而治之，parallize 使用了默认的 ForkJoinPool.common 默认的一个静态线程池.</p>\n<h3 id=\"java-注解\"><a class=\"anchor\" href=\"#java-注解\">#</a> JAVA 注解</h3>\n<p>Annotation（注解）是 Java 提供的一种对元程序中元素关联信息和元数据（metadata）的途径和方法。Annatation (注解) 是一个接口，程序可以通过反射来获取指定程序中元素的 Annotation 对象，然后通过该 Annotation 对象来获取注解中的元数据信息。</p>\n<p>4 种标准元注解</p>\n<p>元注解的作用是负责注解其他注解。 Java5.0 定义了 4 个标准的 meta-annotation 类型，它们被用来提供对其它 annotation 类型作说明。</p>\n<p>@Target 修饰的对象范围</p>\n<p>@Target 说明了 Annotation 所修饰的对象范围： Annotation 可被用于 packages、types（类、接口、枚举、Annotation 类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch 参数）。在 Annotation 类型的声明中使用了 target 可更加明晰其修饰的目标</p>\n<p>@Retention 定义 被保留的时间长短</p>\n<p>Retention 定义了该 Annotation 被保留的时间长短：表示需要在什么级别保存注解信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效），取值（RetentionPoicy）由：</p>\n<p>n SOURCE: 在源文件中有效（即源文件保留）</p>\n<p>n CLASS: 在 class 文件中有效（即 class 保留）</p>\n<p>n RUNTIME: 在运行时有效（即运行时保留）</p>\n<p>@Documented 描述 **-javadoc**</p>\n<p>@ Documented 用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共 API，因此可以被例如 javadoc 此类的工具文档化。</p>\n<p>@Inherited 阐述了某个被标注的类型是被继承的</p>\n<p>@Inherited 元注解是一个标记注解，@Inherited 阐述了某个被标注的类型是被继承的。如果一个使用了 @Inherited 修饰的 annotation 类型被用于一个 class，则这个 annotation 将被用于该 class 的子类</p>\n<img data-src=\"/interview/JavaSE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/172227-213126.jpeg\" class=\"\" title=\"JAVA注解\">\n<h3 id=\"synchronizedmap-和-concurrenthashmap有什么区别\"><a class=\"anchor\" href=\"#synchronizedmap-和-concurrenthashmap有什么区别\">#</a> SynchronizedMap 和 ConcurrentHashMap 有什么区别</h3>\n<p>1、SynchronizedMap 对整个 map 同步</p>\n<p>2、ConcurrentHashMap 对 map 的桶加锁</p>\n<h3 id=\"yield-方法有什么用\"><a class=\"anchor\" href=\"#yield-方法有什么用\">#</a> yield 方法有什么用？</h3>\n<p>放弃当前线程资源，和其他线程再次同时竞争资源。</p>\n<h3 id=\"常用线程池\"><a class=\"anchor\" href=\"#常用线程池\">#</a> 常用线程池</h3>\n<p>1、newSingleThreadExceutor 单线程池 ，只有一个线程</p>\n<p>2、newFixedThreadPool  最大线程池，可以指定线程池大小</p>\n<p>3、newcachedThreadPool  缓存线程池，没有线程有任务就创建线程，有空余线程来任务直接用。</p>\n<p>4、newScheduledThreadPool 周期性线程池，定时任务</p>\n<h3 id=\"简述线程池的理解\"><a class=\"anchor\" href=\"#简述线程池的理解\">#</a> 简述线程池的理解</h3>\n<p>1、降低资源消耗</p>\n<p>​\t线程的创建和销毁，通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p>\n<p>2、调高响应速度</p>\n<p>​\t任务到了就直接可以上线程了，不用再 new。当任务到达时，任务可以不需要等到线程创建就能立即执行</p>\n<p>3、提高线程的可管理性</p>\n<p>​\t线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</p>\n<h3 id=\"进程和线程的区别\"><a class=\"anchor\" href=\"#进程和线程的区别\">#</a> 进程和线程的区别</h3>\n<p>1、进程是执行的程序，系统资源分配和调度的单位</p>\n<p>2、线程是进程的一个实体，线程之间共享地址空间和其他资源（所以通信，同步等操作线程更加容易）</p>\n<p>3、线程上下文切换快</p>\n<p>进程相当于公司，线程相当于公司员工，两个公司交流慢，内部员工交流快</p>\n<h3 id=\"死锁的必要条件\"><a class=\"anchor\" href=\"#死锁的必要条件\">#</a> 死锁的必要条件</h3>\n<p>1、一个资源每次只能被一个线程使用</p>\n<p>2、线程因请求资源而阻塞时，对获得的资源保持不放</p>\n<p>3、线程已获得的资源，在未使用完之前，不能强行剥夺</p>\n<p>4、若干线程之间形成头尾详解的线程资源需求，A 要 B，B 要 A</p>\n<h3 id=\"避免死锁\"><a class=\"anchor\" href=\"#避免死锁\">#</a> 避免死锁</h3>\n<p>1、线程只有获得到 A 锁和 B 锁才能对某资源进行操作</p>\n<p>2、获取锁的顺序是一定的</p>\n<h3 id=\"java线程池中队列常用类型有什么\"><a class=\"anchor\" href=\"#java线程池中队列常用类型有什么\">#</a> Java 线程池中队列常用类型有什么</h3>\n<p>1、ArrayBlockingQueue\t\t\t基于数组，有界长度大小的 FIFO 队列</p>\n<p>2、LinkedBlockingQueue\t\t 基于链表</p>\n<p>3、SynchronousQueue\t\t\t  不存储元素的阻塞队列</p>\n<p>4、PriorityBlockingQueue\t\t优先级队列，无限阻塞队列，基于最小二叉堆</p>\n<p>5、DelayQueue\t\t\t\t\t\t\t 只有当前指定的时间到了才可以拿到数据，没有大小限制，只有获取数据的</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t才阻塞，放的时候没限制</p>\n<h3 id=\"线程安全需要保证几个基本特征\"><a class=\"anchor\" href=\"#线程安全需要保证几个基本特征\">#</a> 线程安全需要保证几个基本特征</h3>\n<p>1、原子性</p>\n<p>2、可见性</p>\n<p>3、有序性（避免指令重排序）</p>\n<h3 id=\"cas原理\"><a class=\"anchor\" href=\"#cas原理\">#</a> CAS 原理</h3>\n<p>全称：CompareANdSwap，乐观锁，比较并交换，主要是通过处理器的指令来保证操作的原子性 。</p>\n<h3 id=\"cas的缺点\"><a class=\"anchor\" href=\"#cas的缺点\">#</a> CAS 的缺点</h3>\n<p>1、ABA 问题，就是在比较的时候，比较的和原来的内容恰好相同，但是不是同一个对象。 例如，现在有三个线程，2 个是将 10+5，还有 1 个是 15-5，现在其中一个 + 5 拿到资源开始操作，然后 - 5 线程在进行操作，对于原来的值虽然没有变化，但是进行了操作，在另外一个 + 5 进行原值比较的时候，会误认为没有改变，然后写入新值。他是基本数据类型的时候是没有问题的。但是要是对象的时候，这就有大问题了 ，我们这样就会让我们产生并发问题了。解决这类问题，最简单的办法就是加版本，在对比的时候，不仅仅对比值，还要比较版本。</p>\n<p>2、循环时间过长开销大</p>\n<p>3、只能保证一个共享变量的原子操作</p>\n<h3 id=\"线程池原理和核心参数\"><a class=\"anchor\" href=\"#线程池原理和核心参数\">#</a> 线程池原理和核心参数</h3>\n<p>1、核心线程数</p>\n<p>2、最大线程数</p>\n<p>3、活跃时间</p>\n<p>4、阻塞队列</p>\n<p>5、拒绝策略</p>\n<img data-src=\"../../../../../../面试/面试题/面试题_img/image-20220907155719800.png\" alt=\"image-20220907155719800\" style=\"zoom:150%;\" />\n<h3 id=\"线程池的拒绝策略有哪些\"><a class=\"anchor\" href=\"#线程池的拒绝策略有哪些\">#</a> 线程池的拒绝策略有哪些</h3>\n<p>1、AbortPolicy：直接丢弃，抛异常</p>\n<p>2、CallerRunsPolicy：调用者所在的线程处理任务</p>\n<p>3、DiscardOldestPolicy：丢弃最久的任务</p>\n<p>4、DiscardPolicy：直接丢弃任务，也不抛出异常</p>\n<h3 id=\"cyclibarrier和countdownlatch区别\"><a class=\"anchor\" href=\"#cyclibarrier和countdownlatch区别\">#</a> CycliBarrier 和 CountDownLatch 区别</h3>\n<p>CyclicBarrier 线程运行到某个点后停止运行，所有线程到达点，才重新运行</p>\n<p>CountDownLatch 线程运行到某个点，给某个数值 - 1，</p>\n<p>线程继续 CyclicBarrier 唤起一个</p>\n<p>CountDownLatch 可以唤起多个任务</p>\n<p>CyclicBarrier 可重用，CountDownLatch 不可重用</p>\n<h3 id=\"get和post请求区别\"><a class=\"anchor\" href=\"#get和post请求区别\">#</a> Get 和 Post 请求区别</h3>\n<p>1、get 用户信息获取，而其应该是安全的和幂等的</p>\n<p>2、POST 表示可能修改服务器上的资源的请求</p>\n<p>3、Get 请求的数据会附在 URL 之后</p>\n<p>4、Get 方式提交的数据取决于 URL 长度限制，理论上 POST 没有限制，可传较大量的数据</p>\n<p>5、POST 的安全性要比 Get 的安全性高</p>\n<h3 id=\"转发和重定向的区别\"><a class=\"anchor\" href=\"#转发和重定向的区别\">#</a> 转发和重定向的区别</h3>\n<p>1、转发是服务器行为，重定向是客户端行为</p>\n<p>2、重定向是两次请求，第一次是原来的 A，然后服务器让他请求 B，最后浏览器再请求 B。</p>\n<h3 id=\"jdbc\"><a class=\"anchor\" href=\"#jdbc\">#</a> JDBC</h3>\n<p>1. 引入 Jar 包，加载驱动。</p>\n<p>2. 建立连接 Connection, 创建执行对象 Statement。</p>\n<p>3. 执行语句。</p>\n<p>4. 处理结果 (查询)。</p>\n<p>5. 释放资源 (关闭连接对象)。</p>\n<h3 id=\"cookie是什么有什么用\"><a class=\"anchor\" href=\"#cookie是什么有什么用\">#</a> Cookie 是什么，有什么用？</h3>\n<p>1、cookie 就是保存在客户端的纯文本文件</p>\n<p>2、访问某些网页，并且对网页的一些设置进行修改，cookie 就能跟踪并记录到这些修改。</p>\n<p>3、网站服务器把少量数据存储到客户端的硬盘或内存</p>\n<h3 id=\"http请求状态码\"><a class=\"anchor\" href=\"#http请求状态码\">#</a> HTTP 请求状态码</h3>\n<p>10X\t\t请求一部分，正在请求另外一部分</p>\n<p>20X\t\t请求成功</p>\n<p>30X\t\t转发</p>\n<p>40X\t\t没有资源</p>\n<p>50X\t\t服务器内部错误</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "面试",
                "面试"
            ]
        },
        {
            "id": "https://eth168.top/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "https://eth168.top/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "面试题",
            "date_published": "2023-01-11T16:00:00.000Z",
            "content_html": "<h1 id=\"javase基础不含集合之后的内容\"><a class=\"anchor\" href=\"#javase基础不含集合之后的内容\">#</a> javaSE 基础 (不含集合之后的内容)</h1>\n<h3 id=\"创建java对象方式\"><a class=\"anchor\" href=\"#创建java对象方式\">#</a> 创建 JAVA 对象方式</h3>\n<p>一共 5 种</p>\n<p>1、new 申请空间，执行构造方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>2、通过 Class 类中，newInstance () 方法，默认去找空参（不建议）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> cla <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>cla<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3、通过 Construction 类中的 newInstance () 找到对应构造方法去创建</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Class</span> cla <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Construction</span> construction <span class=\"token operator\">=</span> cla<span class=\"token punctuation\">.</span><span class=\"token function\">getConstruction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>construction<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4、通过 Object 类中的 Clone ()</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 要实现 Cloneable 重写</span></pre></td></tr></table></figure><p>5、通过对象的反序列化</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ObjectInputStream</span> ois <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span> pp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span>ois<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"new一个对象的顺序内含代码块\"><a class=\"anchor\" href=\"#new一个对象的顺序内含代码块\">#</a> new 一个对象的顺序 (内含代码块)</h3>\n<ul>\n<li>假设一个类他的父类有<strong>静态代码块</strong>、<strong>代码块</strong>、<strong>构造器</strong>，自身也有<strong>静态代码块</strong>、<strong>代码块</strong>、构造器，以及<strong>方法内部的代码块</strong></li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestFather</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span>  <span class=\"token keyword\">int</span> age <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是父类构造块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是父类静态构造块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TestFather</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">TestFather</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> sa<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 普通块限制了局部变量的作用范围</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是普通块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----000000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//System.out.println(num);</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//if()&#123;&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//while()&#123;&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 构造块</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------这是构造块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 静态块</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">static</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----这是静态块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 构造器</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是空构造器\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 这是一个 main 方法，是程序的入口：</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token class-name\">Test</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token class-name\">Test</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220803104041443.png\" class=\"\" title=\"image-20220803104041443\">\n<p><strong>总结：</strong></p>\n<blockquote>\n<p><em>顺序</em>：</p>\n<ul>\n<li>\n<p>static 变量或者方法</p>\n<p>父类静态构造块  -&gt;  静态构造块  -&gt;</p>\n</li>\n<li>\n<p>Test t = new Test()</p>\n<p>父类构造块  -&gt;  构造块  -&gt;  空参构造  -&gt;</p>\n</li>\n<li>\n<p>t.a();</p>\n<p>方法 A  -&gt;  方法中的构造块 -&gt;</p>\n</li>\n<li>\n<p>Test t2 = new Test()</p>\n<p>父类构造块  -&gt;  构造块  -&gt;  空参构造  -&gt;</p>\n</li>\n<li>\n<p>t2.a();</p>\n<p>方法 A  -&gt;  方法中的构造块</p>\n</li>\n</ul>\n</blockquote>\n<p>总的来说，</p>\n<ul>\n<li>父类方法在前</li>\n<li>静态在前且<strong>只加载一次</strong></li>\n<li><strong>构造块 》构造器 》 方法</strong></li>\n</ul>\n<p>新的总结：</p>\n<blockquote>\n<p>​\t从 JVM 的角度来说，再开始的时候先进性类的加载，(Loading [加载器获取] 》Linking [校验是否符合语法》附默认值》解析 ]  》initialization [初始化] ) ，在加载阶段我们就将我们的方法体放入了方法区中，初始化的时候就已经将我们的静态系列运行了，这也就是为什么 static 系列的东西只在程序过程中产生一次。</p>\n</blockquote>\n<h3 id=\"java有哪几种关键字作用区间是什么\"><a class=\"anchor\" href=\"#java有哪几种关键字作用区间是什么\">#</a> JAVA 有哪几种关键字，作用区间是什么</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/wps1.jpg\" class=\"\" title=\"img\">\n<p>private：只有类中的子类和方法可以使用</p>\n<p>default：只有和自己同一个包下的子类才能使用</p>\n<p>protected：只有自己和子类可以直接使用</p>\n<p>public：全部范围</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220731132616681.png\" class=\"\" title=\"image-20220731132616681\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220731132623293.png\" class=\"\" title=\"image-20220731132623293\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220731132627634.png\" class=\"\" title=\"image-20220731132627634\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220731132632474.png\" class=\"\" title=\"image-20220731132632474\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220731132638079.png\" class=\"\" title=\"image-20220731132638079\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220731132644922.png\" class=\"\" title=\"image-20220731132644922\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220731132649522.png\" class=\"\" title=\"image-20220731132649522\">\n<h3 id=\"overload-和-override区别\"><a class=\"anchor\" href=\"#overload-和-override区别\">#</a> OverLoad 和 Override 区别</h3>\n<p>OverLoad：重载，指同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同 (即参数个数或类型不同)</p>\n<p>Override：重写，表示子类中的方法可以与父类中的某个方法的名称和参数完全相同</p>\n<p>注意：</p>\n<p>Override 注意事项:<br />\n1. 覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果<br />\n 2. 覆盖的方法的返回值必须和被覆盖的方法的返回一致<br />\n 3. 覆盖的方法所抛出的异常必须和被覆盖方法的所<mark>抛出的异常一致，或者是其子类</mark>；<br />\n4. 被覆盖的<mark>方法不能为 private</mark>，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</p>\n<p>Overload 注意事项:<br />\n1. 在使用重载时只能通过不同的参数样式。例如，不同的参数类型，不同的参数个数，不同的参数顺序（当然，同一方法内的几个参数类型必须不一样，例如可以是 fun (int,float)，但是不能为 fun (int,int)）；<br />\n2. 不能通过访问权限、返回类型、抛出的异常进行重载；<br />\n3. 方法的异常类型和数目不会对重载造成影响；<br />\n4. 对于继承来说 **，如果某一方法在父类中是访问权限是 priavte**，那么就不能在子类对其进行重载，如果定义的话，也只是定义了一个新方法，而不会达到重载的效果</p>\n<p><strong>总结：</strong></p>\n<blockquote>\n<p>重载：名字相同是前提，是否合理看参数，其他都没啥关系，父类一旦私有就玩完</p>\n<p>重写：继承实现是前提，子类起码大于父，犯的错误要更小，返回类型要一致</p>\n</blockquote>\n<h3 id=\"简述一下java面向对象的基本特征继承-封装与多态以及你自己的应用\"><a class=\"anchor\" href=\"#简述一下java面向对象的基本特征继承-封装与多态以及你自己的应用\">#</a> 简述一下 Java 面向对象的基本特征，继承、封装与多态，以及你自己的应用？</h3>\n<p>继承：就好比一个父亲多个孩子，并且孩子还完全继承父类的方法，private 修饰的方法也能继承，只\t\t  是因为封装的特性阻碍了直接调用，但是提供了间接调用的方式，可以间接调用。并且后面多态的条件</p>\n<p>封装：把对象的属性和操作（或服务）结合为一个<strong>独立的整体</strong>，并<strong>尽可能隐藏对象的内部实现细节</strong>。</p>\n<p>​\t\t  例如，内部属性只对外提供 get、set 方法，不能直接引用。</p>\n<p>多态：多态，故名思意，事物的多种形态。多态跟属性无关，多态指的是方法的多态。打破单继承。</p>\n<p>前提：</p>\n<ul>\n<li><strong>有继承性关系</strong></li>\n<li><strong>要有方法的重写</strong></li>\n<li><strong>必须是父类引用子类的对象</strong></li>\n</ul>\n<h3 id=\"this和super\"><a class=\"anchor\" href=\"#this和super\">#</a> this 和 super</h3>\n<p><strong>this</strong></p>\n<ol>\n<li>对象内部指代自身的引用</li>\n<li>解决成员变量和局部变量的同名问题</li>\n<li>可以调用成员变量，不能调用局部变量</li>\n<li>可以调用成员方法</li>\n<li>在普通方法中可以省略 this</li>\n<li>静态方法中不允许出现</li>\n</ol>\n<p><strong>super</strong></p>\n<ol>\n<li>代表当前对象的直接父类对象的引用</li>\n<li>可以调用父类中非 private 成员变量和方法</li>\n<li>super () 可以调用父类的构造器，只限于构造方法中使用，且必须是第一条</li>\n</ol>\n<h3 id=\"怎样声明一个类不会被继承什么场景下会用\"><a class=\"anchor\" href=\"#怎样声明一个类不会被继承什么场景下会用\">#</a> 怎样声明一个类不会被继承，什么场景下会用？</h3>\n<p><strong>final 修饰的类</strong>不能有子类 大部分都是出于<strong>安全</strong>考虑</p>\n<p>举例：String、Math</p>\n<h3 id=\"java是什么类型的语言\"><a class=\"anchor\" href=\"#java是什么类型的语言\">#</a> java 是什么类型的语言？</h3>\n<h4 id=\"面向对象语言\"><a class=\"anchor\" href=\"#面向对象语言\">#</a> 面向对象语言：</h4>\n<p>​\t解释之前我们得引入一个概念，<strong>面向过程</strong>，举一个例子，要把大象装进冰箱需要几步</p>\n<p>面向过程：</p>\n<ul>\n<li>打开冰箱，把大象放进去，关上冰箱。</li>\n</ul>\n<p>面向对象：</p>\n<ul>\n<li>打开冰箱（负责：人走到冰箱前面，打开了）</li>\n<li>存储（负责：大象先迈左腿，然后右腿，然后躺进去）</li>\n<li>关闭冰箱（然后关上冰箱门。）</li>\n</ul>\n<p>面向过程是：要先把事物分析成<strong>不同的步骤</strong>，然后根据步骤一步步的编程。</p>\n<p>面向对象是：创建负责某个部分的负责人也就是我们所说的 “对象”，在给对象赋值上相应的属性，进行方法形式的编程</p>\n<p><strong>两者相辅相成缺一不可。</strong></p>\n<p>1 解释型</p>\n<p>2 编译型</p>\n<h3 id=\"final-和-static-在java中的意义\"><a class=\"anchor\" href=\"#final-和-static-在java中的意义\">#</a> final 和 static 在 JAVA 中的意义？</h3>\n<p>1、static 特点</p>\n<blockquote>\n<p>（1）在类加载的时候一起加载入方法区中的静态域中<br />\n（2）先于对象存在<br />\n（3）访问方式： 对象名。属性名    类名。属性名（推荐）</p>\n</blockquote>\n<p>2、final 特点</p>\n<blockquote>\n<p>修饰一个变量，变量的值不可以改变，这个变量也变成了一个字符常量，约定俗称的规定：名字大写</p>\n<p>final 修饰方法，那么这个方法不可以被该类的子类重写：</p>\n<p>final 修饰类，代表没有子类，该类不可以被继承：</p>\n</blockquote>\n<p>3、项目使用场景</p>\n<p>static 修饰属性的应用场景：</p>\n<p>​\t某些特定的数据想要在内存中共享，只有一块 --》这个情况下，就可以用 static 修饰的属性</p>\n<p>final 修饰属性的应用场景：</p>\n<p>​\t（1）使用 Math 类的时候无需导包，直接使用即可：</p>\n<p>​\t（2）Math 类没有子类，不能被其他类继承了</p>\n<p>​\t（3）里面的属性全部被 final 修饰，方法也是被 final 修饰的，只是省略不写了</p>\n<p>​\t\t\t\t原因：子类没有必要进行重写。</p>\n<p>​\t（4）外界不可以创建对象：</p>\n<p>​\t（5）发现 Math 类中的所有的属性，方法都被 static 修饰</p>\n<p>​\t\t\t\t那么不用创建对象去调用，只能通过类名。属性名  类名。方法名 去调用</p>\n<h3 id=\"java-中的对象拷贝\"><a class=\"anchor\" href=\"#java-中的对象拷贝\">#</a> JAVA 中的对象拷贝？</h3>\n<h3 id=\"什么是接口\"><a class=\"anchor\" href=\"#什么是接口\">#</a> 什么是接口？</h3>\n<p>1、制定标准</p>\n<p>2、提供可扩展性</p>\n<p>3、面向接口编程</p>\n<h3 id=\"接口和抽象类的区别\"><a class=\"anchor\" href=\"#接口和抽象类的区别\">#</a> 接口和抽象类的区别：</h3>\n<p>​    <img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220803203534319.png\" class=\"\" title=\"image-20220803203534319\"></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220803203540347.png\" class=\"\" title=\"image-20220803203540347\">\n<h3 id=\"什么是内部类\"><a class=\"anchor\" href=\"#什么是内部类\">#</a> 什么是内部类？</h3>\n<p>分类：4 种</p>\n<p>1、成员内部类</p>\n<p>2、静态内部类</p>\n<p>3、局部内部类</p>\n<p>4、匿名内部类</p>\n<h3 id=\"java中的基本数据类型\"><a class=\"anchor\" href=\"#java中的基本数据类型\">#</a> JAVA 中的基本数据类型</h3>\n<p>1、8 种数据类型</p>\n<p>2、所占字节长度，最大最小</p>\n<p>3、BigDecimal 对象</p>\n<h3 id=\"arraylist是用来干嘛的\"><a class=\"anchor\" href=\"#arraylist是用来干嘛的\">#</a> ArrayList 是用来干嘛的？</h3>\n<p>1、原理</p>\n<h3 id=\"try-catch-finally-return\"><a class=\"anchor\" href=\"#try-catch-finally-return\">#</a> Try、catch、finally、return</h3>\n<p>在 <code>try</code>  、 <code>catch</code>  、 <code>finally</code>  只有一个 return 有用，也就是说只有最后一个有用</p>\n<h4 id=\"一-try中带有return\"><a class=\"anchor\" href=\"#一-try中带有return\">#</a> 一、try 中带有 return</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>init:24</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>try:25</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>finally:26</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>最终返回：25</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>由此可见：try -》 finally -》return</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>​\t因为当 try 中带有 return 时，会先执行 return 前的代码，然后暂时保存需要 return 的信息，再执行 finally 中的代码，最后再通过 return 返回之前保存的信息。所以，这里方法返回的值是 try 中计算后的 25，而非 finally 中计算后的 26。</p>\n<p>再看一个例子</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">List</span> <span class=\"token function\">t2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 方式一：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>init:[]</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>try:1</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>catch:[2]</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>finally:[2, 3]</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>最终返回：[2, 3]</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>看完这个例子，可能会发现问题，刚提到 return 时会临时保存需要返回的信息，不受 finally 中的影响，为什么这里会有变化？其实问题出在参数类型上，上一个例子用的是基本类型，这里用的引用类型。list 里存的不是变量本身，而是变量的地址，所以当 finally 通过地址改变了变量，还是会影响方法返回值的。</p>\n<h4 id=\"二-catch中带有return\"><a class=\"anchor\" href=\"#二-catch中带有return\">#</a> 二、catch 中带有 return</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 方式一：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>try:25</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>finally:26</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>最终返回：26</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>由此可见：try -》 finally</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>*/</span></pre></td></tr></table></figure><h4 id=\"三-finally中带有return\"><a class=\"anchor\" href=\"#三-finally中带有return\">#</a> 三、finally 中带有 return</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"try:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span>i<span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finally:\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>init:24</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>try:25</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>catch:26</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>finally:27</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>最终返回：27</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>由此可见 try ->catch -> finally</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>​\t当 finally 中有 return 的时候，try 中的 return 会失效，在执行完 finally 的 return 之后，就不会再执行 try 中的 return。这种写法，编译是可以编译通过的，但是编译器会给予警告，所以不推荐在 finally 中写 return，这会破坏程序的完整性，而且一旦 finally 里出现异常，会导致 catch 中的异常被覆盖。</p>\n<blockquote>\n<p>基本数据只看值，先返回啥就是啥，后期改动不影响</p>\n<p>引用数据返回只返他地址，后期改动有影响</p>\n<p>多个 return 只看近</p>\n</blockquote>\n<h4 id=\"四-总结\"><a class=\"anchor\" href=\"#四-总结\">#</a> 四、总结：</h4>\n<p>1、finally 中的代码总会被执行。</p>\n<p>2、当 try、catch 中有 return 时，也会执行 finally。return 的时候，要注意返回值的类型，是否受到 finally 中代码的影响。</p>\n<p>3、finally 中有 return 时，会直接在 finally 中退出，导致 try、catch 中的 return 失效。</p>\n<h3 id=\"基本类型的转化\"><a class=\"anchor\" href=\"#基本类型的转化\">#</a> 基本类型的转化</h3>\n<p>整型</p>\n<p><code>byte</code>   <code>short int  long</code>   对应字节 1、2 、4、8</p>\n<p>浮点</p>\n<p><code>float</code>   <code>double</code>              对应字节 4、8</p>\n<p>字符型</p>\n<p><code>char</code> \t\t\t\t\t\t\t\t 对应字节 1</p>\n<p>布尔</p>\n<p><code>boolean</code> \t\t\t\t\t      对应字节 看操作系统</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220628104655888.png\" class=\"\" title=\"image-20220628104655888\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220628110544905.png\" class=\"\" title=\"image-20220628110544905\">\n<h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h4>\n<p>1、长字节的可以直接接收短字节数，短字节数要接收长字节数要强转，同字节数可相互转化，比如  <code>float</code>  和  <code>int</code> 。</p>\n<p>2、父与子的关系也可这样理解</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220628105340365.png\" class=\"\" title=\"image-20220628105340365\">\n<h3 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220628105535662.png\" class=\"\" title=\"image-20220628105535662\">\n<p><strong>不需要去刻意的记优先级关系</strong><br />\n<strong>赋值 &lt; 三目 &lt; 逻辑 &lt; 关系 &lt; 算术 &lt; 单目</strong></p>\n<h3 id=\"取余\"><a class=\"anchor\" href=\"#取余\">#</a> 取余</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a1<span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> a2<span class=\"token operator\">=</span> <span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> a3<span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\t <span class=\"token comment\">// -1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> a4<span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token operator\">%</span> <span class=\"token operator\">-</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><p>技巧：全部都当成正数算，<strong>最后的符号与被除数相同</strong></p>\n<h3 id=\"string-stringbuffer-stringbuilder区别与联系\"><a class=\"anchor\" href=\"#string-stringbuffer-stringbuilder区别与联系\">#</a> String、StringBuffer、StringBuilder 区别与联系</h3>\n<ol>\n<li>\n<p>String 类是不可变类，即一旦一个 String 对象被创建后，包含在这个对象中的字符序列是不可改变的，直至这个对象销毁。</p>\n</li>\n<li>\n<p>StringBuffer 类则代表一个字符序列可变的字符串，可以通过 append、insert、reverse、setChartAt、setLength 等方法改变其内容。一旦生成了最终的字符串，调用 toString 方法将其转变为 String</p>\n</li>\n<li>\n<p>JDK1.5 新增了一个 StringBuilder 类，与 StringBuffer 相似，构造方法和方法基本相同。不同是 StringBuffer 是线程安全的，而 StringBuilder 是线程不安全的，所以性能略高。通常情况下，创建一个内容可变的字符串，应该优先考虑使用 StringBuilder</p>\n<pre><code> StringBuilder:JDK1.5开始  效率高   线程不安全\n \n StringBuffer:JDK1.0开始   效率低    线程安全\n</code></pre>\n</li>\n</ol>\n<h3 id=\"jdk18中的stream有用过吗详述一下stream的并行操作原理stream并行的线程池是从哪里来的\"><a class=\"anchor\" href=\"#jdk18中的stream有用过吗详述一下stream的并行操作原理stream并行的线程池是从哪里来的\">#</a> Jdk1.8 中的 stream 有用过吗，详述一下 stream 的并行操作原理？stream 并行的线程池是从哪里来的？</h3>\n<p>​\t<strong>Stream</strong> 作为 Java8 的一大亮点，它与 java.io 包里的<strong> InputStream</strong> 和<strong> OutputStream</strong> 是完全不同的概念。它是对容器对象功能的增强，它专注于对容器对象进行各种非常便利、高效的聚合操作或者大批量数据操作。</p>\n<p>​\tStream API 借助于同样新出现的 Lambda 表达式，极大的提高编程效率和程序可读性。同时，它<mark>提供串行和并行两种模式进行汇聚操作</mark>，并发模式能够充分利用多核处理器的优势，使用 fork/join 并行方式来拆分任务和加速处理过程。所以说，Java8 中首次出现的 java.util.stream 是一个函数式语言 + 多核时代综合影响的产物。</p>\n<p>Stream 有如下三个操作步骤：</p>\n<p>一、创建 Stream：从一个数据源，如集合、数组中获取流。</p>\n<p>二、中间操作：一个操作的中间链，对数据源的数据进行操作。</p>\n<p>三、终止操作：一个终止操作，执行中间操作链，并产生结果。</p>\n<p>​\t当数据源中的数据上了流水线后，这个过程对数据进行的所有操作都称为 “中间操作”。中间操作仍然会返回一个流对象，因此多个中间操作可以串连起来形成一个流水线。比如 map (mapToInt, flatMap 等)、filter、distinct、sorted、peek、limit、skip、parallel、sequential、unordered。</p>\n<p>​\t当所有的中间操作完成后，若要将数据从流水线上拿下来，则需要执行终止操作。终止操作将返回一个执行结果，这就是你想要的数据。比如：forEach、forEachOrdered、toArray、reduce、collect、min、max、count、anyMatch、allMatch、noneMatch、findFirst、findAny、iterator。</p>\n<p>​\t多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何处理！而在终止操作时一次性全部处理，称作 “惰性求值”。</p>\n<p>​\tstream 并行原理：其实本质上就是在 ForkJoin 上进行了一层封装，将 Stream 不断尝试分解成更小的 split，然后使用 fork/join 框架分而治之，parallize 使用了默认的 ForkJoinPool.common 默认的一个静态线程池.</p>\n<h3 id=\"java-注解\"><a class=\"anchor\" href=\"#java-注解\">#</a> JAVA 注解</h3>\n<p>Annotation（注解）是 Java 提供的一种对元程序中元素关联信息和元数据（metadata）的途径和方法。Annatation (注解) 是一个接口，程序可以通过反射来获取指定程序中元素的 Annotation 对象，然后通过该 Annotation 对象来获取注解中的元数据信息。</p>\n<p>4 种标准元注解</p>\n<p>元注解的作用是负责注解其他注解。 Java5.0 定义了 4 个标准的 meta-annotation 类型，它们被用来提供对其它 annotation 类型作说明。</p>\n<p>@Target 修饰的对象范围</p>\n<p>@Target 说明了 Annotation 所修饰的对象范围： Annotation 可被用于 packages、types（类、接口、枚举、Annotation 类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch 参数）。在 Annotation 类型的声明中使用了 target 可更加明晰其修饰的目标</p>\n<p>@Retention 定义 被保留的时间长短</p>\n<p>Retention 定义了该 Annotation 被保留的时间长短：表示需要在什么级别保存注解信息，用于描述注解的生命周期（即：被描述的注解在什么范围内有效），取值（RetentionPoicy）由：</p>\n<p>n SOURCE: 在源文件中有效（即源文件保留）</p>\n<p>n CLASS: 在 class 文件中有效（即 class 保留）</p>\n<p>n RUNTIME: 在运行时有效（即运行时保留）</p>\n<p>@Documented 描述 **-javadoc**</p>\n<p>@ Documented 用于描述其它类型的 annotation 应该被作为被标注的程序成员的公共 API，因此可以被例如 javadoc 此类的工具文档化。</p>\n<p>@Inherited 阐述了某个被标注的类型是被继承的</p>\n<p>@Inherited 元注解是一个标记注解，@Inherited 阐述了某个被标注的类型是被继承的。如果一个使用了 @Inherited 修饰的 annotation 类型被用于一个 class，则这个 annotation 将被用于该 class 的子类</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/172227-213126.jpeg\" class=\"\" title=\"JAVA注解\">\n<h3 id=\"synchronizedmap-和-concurrenthashmap有什么区别\"><a class=\"anchor\" href=\"#synchronizedmap-和-concurrenthashmap有什么区别\">#</a> SynchronizedMap 和 ConcurrentHashMap 有什么区别</h3>\n<p>1、SynchronizedMap 对整个 map 同步</p>\n<p>2、ConcurrentHashMap 对 map 的桶加锁</p>\n<h3 id=\"yield-方法有什么用\"><a class=\"anchor\" href=\"#yield-方法有什么用\">#</a> yield 方法有什么用？</h3>\n<p>放弃当前线程资源，和其他线程再次同时竞争资源。</p>\n<h3 id=\"常用线程池\"><a class=\"anchor\" href=\"#常用线程池\">#</a> 常用线程池</h3>\n<p>1、newSingleThreadExceutor 单线程池 ，只有一个线程</p>\n<p>2、newFixedThreadPool  最大线程池，可以指定线程池大小</p>\n<p>3、newcachedThreadPool  缓存线程池，没有线程有任务就创建线程，有空余线程来任务直接用。</p>\n<p>4、newScheduledThreadPool 周期性线程池，定时任务</p>\n<h3 id=\"简述线程池的理解\"><a class=\"anchor\" href=\"#简述线程池的理解\">#</a> 简述线程池的理解</h3>\n<p>1、降低资源消耗</p>\n<p>​\t线程的创建和销毁，通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p>\n<p>2、调高响应速度</p>\n<p>​\t任务到了就直接可以上线程了，不用再 new。当任务到达时，任务可以不需要等到线程创建就能立即执行</p>\n<p>3、提高线程的可管理性</p>\n<p>​\t线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</p>\n<h3 id=\"进程和线程的区别\"><a class=\"anchor\" href=\"#进程和线程的区别\">#</a> 进程和线程的区别</h3>\n<p>1、进程是执行的程序，系统资源分配和调度的单位</p>\n<p>2、线程是进程的一个实体，线程之间共享地址空间和其他资源（所以通信，同步等操作线程更加容易）</p>\n<p>3、线程上下文切换快</p>\n<p>进程相当于公司，线程相当于公司员工，两个公司交流慢，内部员工交流快</p>\n<h3 id=\"死锁的必要条件\"><a class=\"anchor\" href=\"#死锁的必要条件\">#</a> 死锁的必要条件</h3>\n<p>1、一个资源每次只能被一个线程使用</p>\n<p>2、线程因请求资源而阻塞时，对获得的资源保持不放</p>\n<p>3、线程已获得的资源，在未使用完之前，不能强行剥夺</p>\n<p>4、若干线程之间形成头尾详解的线程资源需求，A 要 B，B 要 A</p>\n<h3 id=\"避免死锁\"><a class=\"anchor\" href=\"#避免死锁\">#</a> 避免死锁</h3>\n<p>1、线程只有获得到 A 锁和 B 锁才能对某资源进行操作</p>\n<p>2、获取锁的顺序是一定的</p>\n<h3 id=\"java线程池中队列常用类型有什么\"><a class=\"anchor\" href=\"#java线程池中队列常用类型有什么\">#</a> Java 线程池中队列常用类型有什么</h3>\n<p>1、ArrayBlockingQueue\t\t\t基于数组，有界长度大小的 FIFO 队列</p>\n<p>2、LinkedBlockingQueue\t\t 基于链表</p>\n<p>3、SynchronousQueue\t\t\t  不存储元素的阻塞队列</p>\n<p>4、PriorityBlockingQueue\t\t优先级队列，无限阻塞队列，基于最小二叉堆</p>\n<p>5、DelayQueue\t\t\t\t\t\t\t 只有当前指定的时间到了才可以拿到数据，没有大小限制，只有获取数据的</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t才阻塞，放的时候没限制</p>\n<h3 id=\"线程安全需要保证几个基本特征\"><a class=\"anchor\" href=\"#线程安全需要保证几个基本特征\">#</a> 线程安全需要保证几个基本特征</h3>\n<p>1、原子性</p>\n<p>2、可见性</p>\n<p>3、有序性（避免指令重排序）</p>\n<h3 id=\"cas原理\"><a class=\"anchor\" href=\"#cas原理\">#</a> CAS 原理</h3>\n<p>全称：CompareANdSwap，乐观锁，比较并交换，主要是通过处理器的指令来保证操作的原子性 。</p>\n<h3 id=\"cas的缺点\"><a class=\"anchor\" href=\"#cas的缺点\">#</a> CAS 的缺点</h3>\n<p>1、ABA 问题，就是在比较的时候，比较的和原来的内容恰好相同，但是不是同一个对象。 例如，现在有三个线程，2 个是将 10+5，还有 1 个是 15-5，现在其中一个 + 5 拿到资源开始操作，然后 - 5 线程在进行操作，对于原来的值虽然没有变化，但是进行了操作，在另外一个 + 5 进行原值比较的时候，会误认为没有改变，然后写入新值。他是基本数据类型的时候是没有问题的。但是要是对象的时候，这就有大问题了 ，我们这样就会让我们产生并发问题了。解决这类问题，最简单的办法就是加版本，在对比的时候，不仅仅对比值，还要比较版本。</p>\n<p>2、循环时间过长开销大</p>\n<p>3、只能保证一个共享变量的原子操作</p>\n<h3 id=\"线程池原理和核心参数\"><a class=\"anchor\" href=\"#线程池原理和核心参数\">#</a> 线程池原理和核心参数</h3>\n<p>1、核心线程数</p>\n<p>2、最大线程数</p>\n<p>3、活跃时间</p>\n<p>4、阻塞队列</p>\n<p>5、拒绝策略</p>\n<img data-src=\"../../../../../../面试/面试题/面试题_img/image-20220907155719800.png\" alt=\"image-20220907155719800\" style=\"zoom:150%;\" />\n<h3 id=\"线程池的拒绝策略有哪些\"><a class=\"anchor\" href=\"#线程池的拒绝策略有哪些\">#</a> 线程池的拒绝策略有哪些</h3>\n<p>1、AbortPolicy：直接丢弃，抛异常</p>\n<p>2、CallerRunsPolicy：调用者所在的线程处理任务</p>\n<p>3、DiscardOldestPolicy：丢弃最久的任务</p>\n<p>4、DiscardPolicy：直接丢弃任务，也不抛出异常</p>\n<h3 id=\"cyclibarrier和countdownlatch区别\"><a class=\"anchor\" href=\"#cyclibarrier和countdownlatch区别\">#</a> CycliBarrier 和 CountDownLatch 区别</h3>\n<p>CyclicBarrier 线程运行到某个点后停止运行，所有线程到达点，才重新运行</p>\n<p>CountDownLatch 线程运行到某个点，给某个数值 - 1，</p>\n<p>线程继续 CyclicBarrier 唤起一个</p>\n<p>CountDownLatch 可以唤起多个任务</p>\n<p>CyclicBarrier 可重用，CountDownLatch 不可重用</p>\n<h3 id=\"get和post请求区别\"><a class=\"anchor\" href=\"#get和post请求区别\">#</a> Get 和 Post 请求区别</h3>\n<p>1、get 用户信息获取，而其应该是安全的和幂等的</p>\n<p>2、POST 表示可能修改服务器上的资源的请求</p>\n<p>3、Get 请求的数据会附在 URL 之后</p>\n<p>4、Get 方式提交的数据取决于 URL 长度限制，理论上 POST 没有限制，可传较大量的数据</p>\n<p>5、POST 的安全性要比 Get 的安全性高</p>\n<h3 id=\"转发和重定向的区别\"><a class=\"anchor\" href=\"#转发和重定向的区别\">#</a> 转发和重定向的区别</h3>\n<p>1、转发是服务器行为，重定向是客户端行为</p>\n<p>2、重定向是两次请求，第一次是原来的 A，然后服务器让他请求 B，最后浏览器再请求 B。</p>\n<h3 id=\"jdbc\"><a class=\"anchor\" href=\"#jdbc\">#</a> JDBC</h3>\n<p>1. 引入 Jar 包，加载驱动。</p>\n<p>2. 建立连接 Connection, 创建执行对象 Statement。</p>\n<p>3. 执行语句。</p>\n<p>4. 处理结果 (查询)。</p>\n<p>5. 释放资源 (关闭连接对象)。</p>\n<h3 id=\"cookie是什么有什么用\"><a class=\"anchor\" href=\"#cookie是什么有什么用\">#</a> Cookie 是什么，有什么用？</h3>\n<p>1、cookie 就是保存在客户端的纯文本文件</p>\n<p>2、访问某些网页，并且对网页的一些设置进行修改，cookie 就能跟踪并记录到这些修改。</p>\n<p>3、网站服务器把少量数据存储到客户端的硬盘或内存</p>\n<h3 id=\"http请求状态码\"><a class=\"anchor\" href=\"#http请求状态码\">#</a> HTTP 请求状态码</h3>\n<p>10X\t\t请求一部分，正在请求另外一部分</p>\n<p>20X\t\t请求成功</p>\n<p>30X\t\t转发</p>\n<p>40X\t\t没有资源</p>\n<p>50X\t\t服务器内部错误</p>\n<h3 id=\"未完成\"><a class=\"anchor\" href=\"#未完成\">#</a> —————————— 未完成</h3>\n<h1 id=\"集合\"><a class=\"anchor\" href=\"#集合\">#</a> 集合</h1>\n<h2 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h2>\n<h3 id=\"arraylist集合的add过程\"><a class=\"anchor\" href=\"#arraylist集合的add过程\">#</a> ArrayList 集合的 add 过程</h3>\n<p><font size=5 color=#00000 ><strong>1.7 和 1.8 的区别</strong></font></p>\n<p>在 1.7 的时候创建不传参直接初始化为 10,</p>\n<p>在 1.8 的时候，只是空参构造初始化为 {}，元素个数为 0，什么时候为 10 呢？——》在第一次 add 时候</p>\n<p>默认初始化一个数组长度 <strong>1.7：10</strong>    ；<strong>1.8：0（在第一次 add 时候变为 10）</strong>，最大长度为 Integer.MAX_VALUE=2147483647=<font color=#FF000 >(2^31)-1</font> ;</p>\n<p>当 <code>size</code> &gt;10 时，list 要变，也就是说数组要扩容，扩容为原来的<font color =\"red\" >1.5 倍</font></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t* minCapacity =size+1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> minCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// overflow-conscious code</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 新的数组长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> oldCapacity <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>oldCapacity <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 扩容后还小于 size+1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> minCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            newCapacity <span class=\"token operator\">=</span> minCapacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 扩容后大于 Integer.MAX_VALUE - 8</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">-</span> <span class=\"token constant\">MAX_ARRAY_SIZE</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            newCapacity <span class=\"token operator\">=</span> <span class=\"token function\">hugeCapacity</span><span class=\"token punctuation\">(</span>minCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// minCapacity is usually close to size, so this is a win:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        elementData <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当到达极端情况下此时 arr 为最大时 2^31-8</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">//MAX_ARRAY_SIZE(2^31-8)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// newCapacity</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> b <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//MAX_ARRAY_SIZE(2^31-8)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAX_ARRAY_SIZE:\"</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// newCapacity</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newCapacity:\"</span><span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// newCapacity - minCapacity( size + 1 )</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newCapacity - minCapacity:\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// newCapacity - MAX_ARRAY_SIZE(2^31-8)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newCapacity - MAX_ARRAY_SIZE:\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结果：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">MAX_ARRAY_SIZE</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2147483639</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">newCapacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">-1073741838</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">ewCapacity - minCapacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1073741818</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">newCapacity - MAX_ARRAY_SIZE</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1073741819</span></pre></td></tr></table></figure><h3 id=\"18为什么改变成17的头插法成尾插法\"><a class=\"anchor\" href=\"#18为什么改变成17的头插法成尾插法\">#</a> 1.8 为什么改变成 1.7 的头插法成尾插法？</h3>\n<p>剖析：</p>\n<p>一个链表想要用<strong>尾插</strong>的形式插入数据，我们首先得知道他的<em> next</em> 是否为<em> null</em>,</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> node<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    node next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一个链表想要用<strong>头插</strong>的形式插入数据，我们首先得知道他的<em> pre</em> 是否为<em> null</em>, 其次找到之后还要将新元素的<em> next</em> 指向原来的头结点</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> node<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    node pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    node next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><em><strong>总结：</strong></em></p>\n<p>​\t从创建开始他的头插的结构体 &gt; 尾插的结构体，其次最主要的是<strong>头插容易形成环形结构</strong>，造成 CPU 的损耗，尾插法可以避免</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220709101908776.png\" class=\"\" title=\"image-20220709101908776\">\n<h3 id=\"victor-和-arraylist区别\"><a class=\"anchor\" href=\"#victor-和-arraylist区别\">#</a> Victor 和 ArrayList 区别</h3>\n<p>【1】底层 Object 数组，int 类型属性表示数组中有效长度：</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220629231051908.png\" class=\"\" title=\"image-20220629231051908\">\n<p>【2】Vector v=new Vector (); 调用构造器：</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220629231123796.png\" class=\"\" title=\"image-20220629231123796\">\n<p>【3】add 方法：</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220629231602106.png\" class=\"\" title=\"image-20220629231602106\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220629231137216.png\" class=\"\" title=\"image-20220629231137216\">\n<p><strong>总结：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">Vector</th>\n<th style=\"text-align:center\">ArrayList</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">底层</td>\n<td style=\"text-align:center\">数组</td>\n<td style=\"text-align:center\">数组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">初始化</td>\n<td style=\"text-align:center\">直接为长度为 10 的数组</td>\n<td style=\"text-align:center\">1.7：直接为长度为 10 的数组<br/>1.8 只初始化为 {} 元素个数为 0 的数组，在第一次 add 的时候扩大到 10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩容</td>\n<td style=\"text-align:center\">2 倍</td>\n<td style=\"text-align:center\">1.5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">安全性</td>\n<td style=\"text-align:center\">安全<br/>add 方法加了 synchronized</td>\n<td style=\"text-align:center\">不安全<br/></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">效率</td>\n<td style=\"text-align:center\">低</td>\n<td style=\"text-align:center\">高</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"iteratoriteratoriterable关系\"><a class=\"anchor\" href=\"#iteratoriteratoriterable关系\">#</a> iterator (),Iterator,Iterable 关系</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220629233802397.png\" class=\"\" title=\"image-20220629233802397\">\n<p><strong>增强 for 循环  底层也是通过迭代器实现的：</strong></p>\n<p><strong>总结：</strong></p>\n<p><code>iterator()</code>  是 <code>Iterable</code>  接口 中的一个抽象方法， <code>ArrayList</code>  内部类 <code>Itr</code>  实现了 <code>Iterator</code>  接口， <code>iterator()</code>  是 Arraylist 内部的一个方法</p>\n<h3 id=\"listiterator迭代器\"><a class=\"anchor\" href=\"#listiterator迭代器\">#</a> ListIterator 迭代器</h3>\n<p>迭代器不可以和 list 同时操作一个对象，可以用迭代器对象直接操作</p>\n<p>不仅有 <code>正向迭代</code> 还有 <code>逆向迭代</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ee\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 在 \"cc\" 之后添加一个字符串 \"kk\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ListIterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> it <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">listIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                it<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"linkedlist底层\"><a class=\"anchor\" href=\"#linkedlist底层\">#</a> LinkedList 底层</h3>\n<p>​\t<font color=red >链表，双向链表</font></p>\n<p>输入和输出结构顺序一致</p>\n<h3 id=\"hashset底层是什么\"><a class=\"anchor\" href=\"#hashset底层是什么\">#</a> HashSet 底层是什么</h3>\n<p><a href=\"#hashMap_base_code\">HashMap</a>，所有的值都存在了 <strong>key</strong> 中</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220630002635848.png\" class=\"\" title=\"image-20220630002635848\">\n<p><strong>基本原理：</strong></p>\n<p>​\t在存放数据时，首先要对数据进行 <code>hash</code>  计算然后根据 hash 值存放到对应的数组地址上，地址重复时，再在该位置上引申上一个链表，在每个值插入之前我们都先要对存储过的值进行比较，用的是 <code>equals</code>  , 如果存在就不存了。</p>\n<p><font color=red >引申</font></p>\n<p>1、要放入 HashSet 的元素 要具备  <code>Hash</code>  、 <code>equals</code>  两大方法且适合自己，即在自己的类要重写</p>\n<p>2、哈希表 = 数组 + 链表</p>\n<h3 id=\"linkedset底层\"><a class=\"anchor\" href=\"#linkedset底层\">#</a> LinkedSet 底层</h3>\n<p>​\t<font color=red >哈希表 + 链表</font></p>\n<p>唯一，输出顺序和输入顺序一致</p>\n<h3 id=\"treeset底层\"><a class=\"anchor\" href=\"#treeset底层\">#</a> TreeSet 底层</h3>\n<p><font color=red > TreeMap</font> 底层数据结构为 <font color=red >二叉树</font> ,</p>\n<p>他与输入结果 无序，输出结果，有序</p>\n<p>一般情况下，随意输入，但是存储的时候，会经过比较器（内部比较强 / 外部比较器<font color=red >[多用]</font>），经过计算将结果放到合适的位置上，输出的时候，利用中序遍历输出得到一个<font color=red >升序的结果</font>。</p>\n<p><font color=red >引申</font></p>\n<p><strong>1、外部比较器</strong></p>\n<p>要实现  <code>Comparator</code>  接口 ，重写  <code>camparr</code>  方法，自定义比较方式，<strong>多用</strong></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220630115643791.png\" class=\"\" title=\"image-20220630115643791\">\n<p><strong>2、二叉树的遍历方式</strong></p>\n<p>​\t3 种：<font color =red >先序遍历、中序遍历、后序遍历</font></p>\n<p><strong>先、中、后说的是根节点</strong>，例如</p>\n<p>先：12 3 7 9</p>\n<p>中：3 7 9 12 16</p>\n<p>后：3 7 9 16 12</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220630115853278.png\" class=\"\" title=\"image-20220630115853278\">\n<div name=\"hashMap_base_code\" >\n<h3 id=\"hashmap底层\"><a class=\"anchor\" href=\"#hashmap底层\">#</a> HashMap 底层</h3>\n<h4 id=\"17底层遵照-font-colorred-哈希表结构-font头插法\"><a class=\"anchor\" href=\"#17底层遵照-font-colorred-哈希表结构-font头插法\">#</a> 1.7 底层遵照 <font color=red >哈希表结构 </font>(头插法)</h4>\n<p>1.7 的源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 哈希表默认的数组长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 最大长度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 定义了一个 float 类型的变量，以后作为：默认的装填因子，加载因子是表示 Hsah 表中元素的填满的程度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 太大容易引起哈西冲突，太小容易浪费  0.75 是经过大量运算后得到的最好值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 这个值其实可以自己改，但是不建议改，因为这个 0.75 是大量运算得到的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span><span class=\"token comment\">// 主数组，每个元素为 Entry 类型，1.8 改名为 Node 内部一样</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">;</span><span class=\"token comment\">// 数组扩容的界限值，门槛值   16*0.75=12 </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">;</span><span class=\"token comment\">// 用来接收装填因子的变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//【4】查看构造器：内部相当于：this (16,0.75f); 调用了当前类中的带参构造器</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">//【5】本类中带参数构造器：--》作用给一些数值进行初始化的！</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">//【6】给 capacity 赋值，capacity 的值一定是 大于你传进来的 initialCapacity 的 最小的 2 的倍数</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">&lt;</span> initialCapacity<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            capacity <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">//【7】给 loadFactor 赋值，将装填因子 0.75 赋值给 loadFactor</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">//【8】数组扩容的界限值，门槛值</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        threshold <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">,</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token comment\">//【9】给 table 数组赋值，初始化数组长度为 16</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        table <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span>capacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                   </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">//【10】调用 put 方法：</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token comment\">//【11】对空值的判断</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token function\">putForNullKey</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token comment\">//【12】调用 hash 方法，获取哈希码</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token comment\">//【14】得到 key 对应在数组中的位置</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">indexFor</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">//【16】如果你放入的元素，在主数组那个位置上没有值，e==null  那么下面这个循环不走</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    <span class=\"token comment\">// 当在同一个位置上放入元素的时候</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token class-name\">Object</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                            <span class=\"token comment\">// 哈希值一样  并且  equals 相比一样   </span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                            <span class=\"token comment\">//(k = e.key) == key  如果是一个对象就不用比较 equals 了</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">recordAccess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token comment\">//【17】走 addEntry 添加这个节点的方法：</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  \t\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token comment\">//【13】hash 方法返回这个 key 对应的哈希值，内部进行二次散列，为了尽量保证不同的 key 得到不同的哈希码！</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useAltHashing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span></span>Hashing</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringHash32</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            h <span class=\"token operator\">=</span> hashSeed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                <span class=\"token comment\">//k.hashCode () 函数调用的是 key 键值类型自带的哈希函数，</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token comment\">// 由于不同的对象其 hashCode () 有可能相同，所以需对 hashCode () 再次哈希，以降低相同率。</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        h <span class=\"token operator\">^=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// This function ensures that hashCodes that differ only by</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token comment\">// constant multiples at each bit position have a bounded</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// number of collisions (approximately 8 at default load factor).</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                接下来的一串与运算和异或运算，称之为 “扰动函数”，</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                扰动的核心思想在于使计算出来的值在保留原有相关特性的基础上，</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                增加其值的不确定性，从而降低冲突的概率。</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                不同的版本实现的方式不一样，但其根本思想是一致的。</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                往右移动的目的，就是为了将 h 的高位利用起来，减少哈西冲突</pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        h <span class=\"token operator\">^=</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token keyword\">return</span> h <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token comment\">//【15】返回 int 类型数组的坐标</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">indexFor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token comment\">// 其实这个算法就是取模运算：h% length，取模效率不如位运算</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">return</span> h <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token comment\">//【18】调用 addEntry</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bucketIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token comment\">//【25】size 的大小  大于 16*0.75=12 的时候，比如你放入的是第 13 个，这第 13 个你打算放在没有元素的位置上的时候</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> table<span class=\"token punctuation\">[</span>bucketIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                        <span class=\"token comment\">//【26】主数组扩容为 2 倍</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                        <span class=\"token comment\">//【30】重新调整当前元素的 hash 码</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                        <span class=\"token comment\">//【31】重新计算元素位置</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            bucketIndex <span class=\"token operator\">=</span> <span class=\"token function\">indexFor</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token comment\">//【19】将 hash,key,value,bucketIndex 位置  封装为一个 Entry 对象：</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token function\">createEntry</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> bucketIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token comment\">//【20】</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">createEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bucketIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token comment\">//【21】获取 bucketIndex 位置上的元素给 e</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>bucketIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token comment\">//【22】然后将 hash, key, value 封装为一个对象，然后将下一个元素的指向为 e （链表的头插法）</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                <span class=\"token comment\">//【23】将新的 Entry 放在 table [bucketIndex] 的位置上</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        table<span class=\"token punctuation\">[</span>bucketIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                <span class=\"token comment\">//【24】集合中加入一个元素 size+1</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">//【27】</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTable <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token keyword\">int</span> oldCapacity <span class=\"token operator\">=</span> oldTable<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCapacity <span class=\"token operator\">==</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            threshold <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>                <span class=\"token comment\">//【28】创建长度为 newCapacity 的数组</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span>newCapacity<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">boolean</span> oldAltHashing <span class=\"token operator\">=</span> useAltHashing<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        useAltHashing <span class=\"token operator\">|=</span> sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span><span class=\"token constant\">VM</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBooted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                <span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">>=</span> <span class=\"token class-name\">Holder</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALTERNATIVE_HASHING_THRESHOLD</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token keyword\">boolean</span> rehash <span class=\"token operator\">=</span> oldAltHashing <span class=\"token operator\">^</span> useAltHashing<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>                <span class=\"token comment\">//【28.5】转让方法：将老数组中的东西都重新放入新数组中</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>newTable<span class=\"token punctuation\">,</span> rehash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                <span class=\"token comment\">//【29】老数组替换为新数组</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        table <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token comment\">//【29.5】重新计算</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        threshold <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>newCapacity <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">,</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token comment\">//【28.6】</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">void</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> rehash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">int</span> newCapacity <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">:</span> table<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rehash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                    e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> e<span class=\"token punctuation\">.</span>key <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                                <span class=\"token comment\">//【28.7】将哈希值，和新的数组容量传进去，重新计算 key 在新数组中的位置</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">indexFor</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">,</span> newCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                                <span class=\"token comment\">//【28.8】头插法</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取链表上元素给 e.next</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                newTable<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span><span class=\"token comment\">// 然后将 e 放在 i 位置 </span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                e <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span><span class=\"token comment\">//e 再指向下一个节点继续遍历</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>1.7 的头插可能会产生什么问题，为什么？</p>\n<p>问题： 可能会产生环链</p>\n<p>解析：</p>\n<p>通过他的扩容过程中，正常状态下会，他原位置不会变化，只是因为他的结点插入方式为头插法导致我们在每一次的扩容过程之后都会导致我们的链表顺序要翻转一次，这就有一个问题，在单线程的情况下，这么设计是没有问题的，但是在多线程且没有锁的情况下可能会导致产生环。</p>\n<p><strong>扩容前</strong></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220819102531781.png\" class=\"\" title=\"image-20220819102531781\">\n<p>正常 resize () 后</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220819102607885.png\" class=\"\" title=\"image-20220819102607885\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220819101051964.png\" class=\"\" title=\"image-20220819101051964\">\n<p>简单解释一下：</p>\n<p>假设现在两个线程都已经进入到了 trasfer () 方法并且同时到达 rehash 的地方，线程 Thread 2 落后于 Thread 1</p>\n<p>这时候 Thread 1 已经扩容结束，但是在线程 Thread 2 中的 oldTable 并不是我们修改后的还是原来的，这就有问题了</p>\n<p>Thread1 结果</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220819110029605.png\" class=\"\" title=\"image-20220819110029605\">\n<p>Thread2 结果</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220819113951593.png\" class=\"\" title=\"image-20220819113951593\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Thread  1</th>\n<th style=\"text-align:center\">Thread  2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">进入 transfer</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">进入 transfer</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">e-&gt;3, next-&gt; 2</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">e-&gt;3, next-&gt; 2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">开始 rehash ()</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">开始 rehash ()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩容</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">扩容结束 (Thread1 结果)</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">扩容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">扩容结束 (Thread2 结果)</td>\n</tr>\n</tbody>\n</table>\n<p>总结：因为两个线程同时记录的了原链表最初的 结点 e 地址和 next 地址，在一个线程修改完成后顺序由 321 变成了 123，另一个线程再去修改 ，由于头插的缘故 最开始 3-&gt;2 在修改完成后的 2-&gt;3 之间就回形成环路</p>\n<h4 id=\"18底层遵照-font-colorred-哈希表结构-红黑树font尾插法\"><a class=\"anchor\" href=\"#18底层遵照-font-colorred-哈希表结构-红黑树font尾插法\">#</a> 1.8 底层遵照 <font color=red >哈希表结构 + 红黑树</font>（尾插法）</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// HashMap&lt;String,Integer> map = new HashMap&lt;>(); -->JDK 1.7 开始类型推断，后面用钻石运算符即可。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> \t\t<span class=\"token comment\">//【1】继承的 AbstractMap 中，已经实现了 Map 接口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//【2】又实现了这个接口，多余，但是集合的设计者觉得没有必要删除，就这么地了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">//------------------ 属性部分：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">;</span><span class=\"token comment\">//【3-2】用来接收装填因子的变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t【3-3】</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t定义了一个 float 类型的变量，以后作为：默认的装填因子，加载因子是表示 Hsah 表中元素的填满的程度</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        太大容易引起哈西冲突，太小容易浪费  0.75 是经过大量运算后得到的最好值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        这个值其实可以自己改，但是不建议改，因为这个 0.75 是大量运算得到的</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">;</span><span class=\"token comment\">//【6-3】数组扩容的界限值，门槛值</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">transient</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span><span class=\"token comment\">//【7-5】底层主数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token comment\">//------------------ 构造器：</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">//【3】调用空构造器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">//【3-1】给装填因子 loadFactor 赋值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// all other fields defaulted</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">//【4】调用有参构造器：</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">//【5】调用两个参数构造器</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token comment\">//【6】</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">//【6-1】健壮性考虑，传入的数据过小不行，过大不行</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal initial capacity: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                                               initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            initialCapacity <span class=\"token operator\">=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal load factor: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                                               loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token comment\">//【6-2】给装填因子 loadFactor 赋值，赋值为 0.75，这个值可以单独传入改变，但是不建议改变，一般都用默认的 0.75</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token comment\">//【6-3】给 threshold 赋值 </span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token comment\">//【6-4】返回的是大于 initialCapacity 的最接近的 2 的整数倍  ，比如 initialCapacity 传入 10，这个方法返回 16</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//（内部内容讲源码时候不用管，面试题中详讲）</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> cap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token comment\">//------------------ 方法：</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token comment\">//【7】调用 put 方法</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token comment\">//【7-1】首先调用 hash 方法计算哈希值：</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token comment\">//【7-3】调用 putVal 方法传入五个参数：</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t<span class=\"token comment\">//【7-2】计算 hash 值</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token comment\">//【7-4】调用</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token comment\">//【7-6】将底层主数组 table 给 tab，判断是否为 null，第一次放数据一定是 null</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t<span class=\"token comment\">//【7-7】走入 if 分支：table 是 null，就对 table 进行扩容，走进 resize 方法</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span class=\"token comment\">//【7-21】table 的 length 为 16 ，n 为 16</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t【7-22】</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\ti = (n - 1) &amp; hash 根据哈希值和 n 计算放入数组的位置</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t取出这个位置上的元素，看是否为空，如果是第一个元素，一定是 null</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t*/</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t\t\t<span class=\"token comment\">//【7-23】在这个位置上将元素封装为 Node 对象，放入对应位置</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 封装 Node 节点 new Node&lt;>(hash, key, value, null);</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                        p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                            <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                    p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>\t\t<span class=\"token comment\">//【7-25】size 指的是放入集合的键值总数，size++ 操作，不大于 threshold，resize 方法不走</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t<span class=\"token comment\">//【7-8】resize 方法：---》假设最开始走的是 HashMap 的空构造器：</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span><span class=\"token comment\">//【7-9】table 是 null</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token keyword\">int</span> oldCap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> oldTab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">//【7-10】oldCap:0</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>        <span class=\"token keyword\">int</span> oldThr <span class=\"token operator\">=</span> threshold<span class=\"token punctuation\">;</span><span class=\"token comment\">//【7-11】threshold 为 16，oldThr：16</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token keyword\">int</span> newCap<span class=\"token punctuation\">,</span> newThr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//【7-12】不走</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>                threshold <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                <span class=\"token keyword\">return</span> oldTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">=</span> oldCap <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>                     oldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                newThr <span class=\"token operator\">=</span> oldThr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldThr <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//【7-13】走</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            newCap <span class=\"token operator\">=</span> oldThr<span class=\"token punctuation\">;</span><span class=\"token comment\">//newCap=16</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>               <span class=\"token comment\">//【7-14】不走</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t\t\t </pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            newCap <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t\t\t </pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">*</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newThr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//【7-15】走</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token keyword\">float</span> ft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>newCap <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">;</span><span class=\"token comment\">//【7-16】ft: 16*0.75=12</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span> ft <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                      <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ft <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//【7-17】newThr = 12</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t<span class=\"token comment\">//【7-18】threshold 赋值为 newThr 为 12， ---》所以走空构造器这里 threshold 赋值为 12，走有参构造器里面 threshold 赋值为 12？？？？</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        threshold <span class=\"token operator\">=</span> newThr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>\t\t<span class=\"token comment\">//【7-19】创建 Node 数组，长度为 newCap16</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>newCap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>\t\t<span class=\"token comment\">//【7-20】table 赋值为 newTab</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>        table <span class=\"token operator\">=</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> oldCap<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                    oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                        newTab<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> newTab<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> oldCap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> loHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> loTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> hiHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> hiTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>                        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                            next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> oldCap<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                                    loHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>                                    loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>                                loTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>                            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>                                    hiHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>                                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>                                    hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>                                hiTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>                            loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>                            newTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>                            hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>                            newTab<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> oldCap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hiHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>        <span class=\"token keyword\">return</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">transient</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal initial capacity: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                               initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            initialCapacity <span class=\"token operator\">=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal load factor: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                               loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> cap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//【8-1】put 方法</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 计算 hash 值</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">//【8-2】调用 putVal 方法</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">//【8-3】table 不空了，不走 if\t\t</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">//【8-4】tab [i] 不 null，不走 if</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t【8-5】</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t判断 p.hash == hash 哈希值是否相等，即使 hash 相等也要做 & amp;&amp; 后续的判断，因为两个对象哈希值相等是有可能的</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\t(k = p.key) == key   == 比较地址值，String 的话一样，不是字符串地址也不一样，</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\tAnimal a1 = new Animal (19);\t\t和 \tAnimal a2 = new Animal (19);\t地址一定不同，就需要用后面的 equals 进行比较</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//----》哈希值相等，出现哈西碰撞</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//【8-6】将该数组位置的数据给 e</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                        p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                            <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                    p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><span class=\"token comment\">//【8-7】新 value 替换老 value</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span><span class=\"token comment\">//【8-8】返回老 value</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token keyword\">int</span> oldCap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> oldTab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token keyword\">int</span> oldThr <span class=\"token operator\">=</span> threshold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token keyword\">int</span> newCap<span class=\"token punctuation\">,</span> newThr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>                threshold <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token keyword\">return</span> oldTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">=</span> oldCap <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                     oldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                newThr <span class=\"token operator\">=</span> oldThr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldThr <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            newCap <span class=\"token operator\">=</span> oldThr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            newCap <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">*</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newThr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token keyword\">float</span> ft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>newCap <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span> ft <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                      <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ft <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>        threshold <span class=\"token operator\">=</span> newThr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>newCap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        table <span class=\"token operator\">=</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> oldCap<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>                <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                    oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                        newTab<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> newTab<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> oldCap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> loHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> loTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> hiHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> hiTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                            next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> oldCap<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                                    loHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                                    loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                                loTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                                    hiHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                                    hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                                hiTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                            loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                            newTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                            hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                            newTab<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> oldCap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hiHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token keyword\">return</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">transient</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal initial capacity: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                               initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            initialCapacity <span class=\"token operator\">=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">Float</span><span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal load factor: \"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                                               loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threshold <span class=\"token operator\">=</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span>initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tableSizeFor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> cap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        n <span class=\"token operator\">|=</span> n <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">:</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token comment\">//【9-1】put 方法</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token comment\">// 计算 hash 值</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">//【9-2】调用 putVal 方法</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">V</span> <span class=\"token function\">putVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                   <span class=\"token keyword\">boolean</span> evict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t<span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> p<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t<span class=\"token comment\">//【9-3】table 不空了，不走 if\t\t</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            n <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">//【9-4】tab [i] 不 null，不走 if</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span> <span class=\"token class-name\">K</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t\t<span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t\t\t【9-5】</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t\t\t判断 p.hash == hash 哈希值是否相等，即使 hash 相等也要做 & amp;&amp; 后续的判断，因为两个对象哈希值相等是有可能的</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t\t此时 “通话” 和 “重地” 的哈希值一致，但是 key 不一致，if 不走</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t*/</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//【9-6】p 也不是红黑树，不走 if</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putTreeVal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t\t<span class=\"token comment\">//【9-7】走到这里，证明数组的这个位置是个链表了</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> binCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>binCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//【9-8】无条件的死循环   binCount 链表上节点的个数</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// 随着循环  p.next 就是一路找链上元素</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//p.next 要是没有元素，就要开始追加了呗</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//【9-10】一路 next 比较都没有 key 相同的数据</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\t\t\t</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                        p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token function\">newNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//【9-11】追加在链表尾部 ---》 前七后八</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t\t\t\t\t<span class=\"token comment\">//【9-12】如果节点个数大于 8，进行树化：要从链表转为红黑树</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binCount <span class=\"token operator\">>=</span> <span class=\"token constant\">TREEIFY_THRESHOLD</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                            <span class=\"token function\">treeifyBin</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//【9-13】这里还涉及 剪枝 问题，树节点在 6 个以下，就又变成链表了</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">//【9-9】比较过程中：如果比较链表某个 key 相同，就 break 结束了，不用继续走了</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token class-name\">V</span> oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent <span class=\"token operator\">||</span> oldValue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                    e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><span class=\"token comment\">//【8-7】新 value 替换老 value</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                <span class=\"token function\">afterNodeAccess</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span><span class=\"token comment\">//【8-8】返回老 value</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>size <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token function\">afterNodeInsertion</span><span class=\"token punctuation\">(</span>evict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> oldTab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">int</span> oldCap <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> oldTab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"110\"></td><td><pre>        <span class=\"token keyword\">int</span> oldThr <span class=\"token operator\">=</span> threshold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token keyword\">int</span> newCap<span class=\"token punctuation\">,</span> newThr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                threshold <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>                <span class=\"token keyword\">return</span> oldTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">=</span> oldCap <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                     oldCap <span class=\"token operator\">>=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>                newThr <span class=\"token operator\">=</span> oldThr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldThr <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            newCap <span class=\"token operator\">=</span> oldThr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            newCap <span class=\"token operator\">=</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">*</span> <span class=\"token constant\">DEFAULT_INITIAL_CAPACITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newThr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token keyword\">float</span> ft <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>newCap <span class=\"token operator\">*</span> loadFactor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            newThr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">&amp;&amp;</span> ft <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token constant\">MAXIMUM_CAPACITY</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>                      <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>ft <span class=\"token operator\">:</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        threshold <span class=\"token operator\">=</span> newThr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> newTab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">[</span>newCap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>        table <span class=\"token operator\">=</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldTab <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> oldCap<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>                <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>                    oldTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>                        newTab<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>newCap <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>                        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> newTab<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> oldCap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>                    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"146\"></td><td><pre>                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> loHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> loTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> hiHead <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> hiTail <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>                        <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>                        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>                            next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">&amp;</span> oldCap<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>                                    loHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>                                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>                                    loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>                                loTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>                            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>                                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>                                    hiHead <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>                                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>                                    hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>                                hiTail <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>                            loTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>                            newTab<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> loHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hiTail <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>                            hiTail<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>                            newTab<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> oldCap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> hiHead<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>        <span class=\"token keyword\">return</span> newTab<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>总结：</strong></p>\n<p>默认（创建时只是初始化负载因子，数组长度是在第一次 put 的时候初始化的）<strong>数组长度为 16</strong>，<strong>最大程度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding=\"application/x-tex\">{2^{30}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span></span></strong>,<strong> 负载因子为 0.75</strong>，扩容时<strong>扩大 2 倍</strong>，最大不超过 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">{2^{31}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span>(一旦到达最开始的域值<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding=\"application/x-tex\">{2^{30}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span></span> 就变大)</p>\n<p>1.8 相对于 1.7 只是改变了数据结构</p>\n<h3 id=\"hashmap为什么要使用红黑树\"><a class=\"anchor\" href=\"#hashmap为什么要使用红黑树\">#</a> Hashmap 为什么要使用红黑树？</h3>\n<p>​\t在 jdk1.8 版本后，java 对 HashMap 做了改进，在<strong>链表长度大于 8</strong> 的时候，将后面的数据存在红黑树中，以加快检索速度</p>\n<p>​\t红黑树虽然本质上是一棵二叉查找树，但它在二叉查找树的基础上增加了着色和相关的性质使得红黑树相对平衡，从而保证了红黑树的查找、插入、删除的时间复杂度最坏为 O (log n)。加快检索速率。</p>\n<p><font color=red >引申</font></p>\n<p>在<strong>链表长度小于 6</strong> 的时候，红黑树又会变回二叉树</p>\n<h3 id=\"主数组的长度为什么是2n\"><a class=\"anchor\" href=\"#主数组的长度为什么是2n\">#</a> 主数组的长度为什么是<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span>？</h3>\n<p><strong>原因 1：</strong></p>\n<p>因为这个 length 的长度，会影响 key 的位置：</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220630132734570.png\" class=\"\" title=\"image-20220630132734570\">\n<p>实际上这个算法就是：  h% length   , 但是取模的话  效率太低，所以用位运算效率会很高。</p>\n<p><strong>原因 2：</strong></p>\n<p>如果不是 2 的整数倍，那么 哈西碰撞 哈西冲突的概率就高了很多</p>\n<h3 id=\"装填因子075的原因\"><a class=\"anchor\" href=\"#装填因子075的原因\">#</a> 装填因子 0.75 的原因</h3>\n<p><strong>如果装填因子是 1， 那么数组满了再扩容，可以做到  最大的空间利用率</strong><br />\n但是这是一个理想状态，元素不可能完全的均匀分布，很可能就哈西碰撞产生链表了。产生链表的话 查询时间就长了。</p>\n<ul>\n<li><strong>空间好，时间不好</strong></li>\n</ul>\n<p><strong>如果是 0.5 的话，就浪费空间，但是可以做到到 0.5 就扩容 ，然后哈西碰撞就少，不产生链表的话，那么查询效率很高</strong></p>\n<ul>\n<li><strong>时间好，空间不好</strong></li>\n</ul>\n<p><strong>总结：</strong></p>\n<p>1 \t空间利用率高，但是容易造成<strong> hash 冲突</strong>，产生链表，降低查询效率；</p>\n<p>0.5   不易造成 Hash 冲突，但是空间利用率低；</p>\n<p>综上所述 JDK 官方折中处理取了一个中间值 0.75</p>\n<h3 id=\"hashmap-的时间复杂度\"><a class=\"anchor\" href=\"#hashmap-的时间复杂度\">#</a> HashMap 的时间复杂度</h3>\n<p>在数组中结点没有产生链表的情况下 O (1)</p>\n<p>在产生链表但长度小于 8 的时候 O (n)</p>\n<p>链表长度大于等于 8 的时候 O (logn)</p>\n<h3 id=\"hashtable底层\"><a class=\"anchor\" href=\"#hashtable底层\">#</a> HashTable 底层</h3>\n<p>底层遵照 <font color=red >哈希表结构 </font></p>\n<h3 id=\"linkedmap底层\"><a class=\"anchor\" href=\"#linkedmap底层\">#</a> LinkedMap 底层</h3>\n<p>底层遵照 <font color=red >哈希表 + 链表</font></p>\n<h3 id=\"hashmap和hashtable有什么区别\"><a class=\"anchor\" href=\"#hashmap和hashtable有什么区别\">#</a> HashMap 和 Hashtable 有什么区别？</h3>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:center\">HashMap</th>\n<th style=\"text-align:center\">Hashtable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储</td>\n<td style=\"text-align:center\">允许 <code>Key</code>  为 null</td>\n<td style=\"text-align:center\">不允许 <code>Key</code>  为 null</td>\n</tr>\n<tr>\n<td>线程安全</td>\n<td style=\"text-align:center\">线程不安全</td>\n<td style=\"text-align:center\">线程安全</td>\n</tr>\n</tbody>\n</table>\n<p><strong>推荐使用</strong>：</p>\n<p>​\t在<strong> Hashtable</strong> 的类注释可以看到，<strong>Hashtable</strong> 是保留类<strong>不建议使用</strong>，推荐在<strong>单线程环境</strong>下使<strong>用 HashMap 替代</strong>，如果需要<strong>多线程</strong>使用则<strong>用 ConcurrentHashMap 替代</strong>。</p>\n<h3 id=\"treemap底层\"><a class=\"anchor\" href=\"#treemap底层\">#</a> TreeMap 底层</h3>\n<p><font color=red >红黑树</font></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 重要属性：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 外部比较器：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 树的根节点：</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 集合中元素的数量：</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 空构造器:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        comparator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用空构造器，那么底层就不使用外部比较器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 有参构造器：</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comparator <span class=\"token operator\">=</span> comparator<span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果使用有参构造器，那么就相当于指定了外部比较器</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//k,V 的类型在创建对象的时候确定了</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 如果放入的是第一对元素，那么 t 的值为 null</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span><span class=\"token comment\">// 在放入第二个节点的时候，root 已经是根节点了</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 如果放入的是第一个元素的话，走入这个 if 中：</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token comment\">// 自己跟自己比</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type (and possibly null) check</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token comment\">// 根节点确定为 root</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token comment\">//size 值变为 1</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            size <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> cmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// split comparator and comparable paths</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token comment\">// 将外部比较器赋给 cpr:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> cpr <span class=\"token operator\">=</span> comparator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token comment\">//cpr 不等于 null，意味着你刚才创建对象的时候调用了有参构造器，指定了外部比较器</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cpr <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                parent <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                cmp <span class=\"token operator\">=</span> cpr<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将元素的 key 值做比较</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                                <span class=\"token comment\">//cmp 返回的值就是 int 类型的数据：</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                                <span class=\"token comment\">// 要是这个值《0 =0  》0</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token comment\">//cpm==0</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                                <span class=\"token comment\">// 如果 key 的值一样，那么新的 value 替换老的 value  但是 key 不变 因为 key 是唯一的</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token comment\">//cpr 等于 null，意味着你刚才创建对象的时候调用了空构造器，没有指定外部比较器，使用内部比较器</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> k <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                parent <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                cmp <span class=\"token operator\">=</span> k<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 将元素的 key 值做比较</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cmp <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            parent<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token function\">fixAfterInsertion</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//size 加 1 操作</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> left <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> right <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token keyword\">boolean</span> color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"collection-和-collections-区别\"><a class=\"anchor\" href=\"#collection-和-collections-区别\">#</a> Collection 和 Collections 区别</h3>\n<p>Collection，提供了对集合对象进行基本操作的通用<strong>接口方法</strong>，所有集合都是它的子类，比如 List、Set 等。</p>\n<p>Collections，是一个<strong>工具类</strong>，它包含了很多静态方法，不能被实例化，比如排序方法： Collections. sort (list) 等。</p>\n<h3 id=\"arraysaslist方法之后的集合可以调用什么方法\"><a class=\"anchor\" href=\"#arraysaslist方法之后的集合可以调用什么方法\">#</a> Arrays.asList () 方法之后的集合可以调用什么方法</h3>\n<p>​\t <code>size()</code>  只有 size 方法可用，通过查看源码我们知道，将传递过去的数组变成了一个 ArrayList 集合，但是不是 java.util.ArrayList 而是 java.util.Arrays.ArrayList , 也就是 Arrays 中的一个内部类，他的方法只定义了 <code>size </code> 、 <code>toArray</code> 、 <code>get</code> 、 <code>set </code> 和  <code>indexOf</code></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220628202337546.png\" class=\"\" title=\"image-20220628202337546\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220628202651719.png\" class=\"\" title=\"image-20220628202651719\">\n<h3 id=\"map-set-list的区别\"><a class=\"anchor\" href=\"#map-set-list的区别\">#</a> Map、Set、List 的区别</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220629181141368.png\" class=\"\" title=\"image-20220629181141368\">\n<p><strong>List</strong></p>\n<blockquote>\n<p>List 中存储的元素有序，指的是读出的顺序与存入的顺序是一致的。</p>\n</blockquote>\n<p>①可以允许重复的对象；<br />\n②可以插入多个 null 元素；<br />\n③是一个有序容器，保持了每个元素的插入顺序，输出的顺序就是插入的顺序；<br />\n④常用的实现类有 ArrayList、LinkedList 和 Vector；ArrayList 最为流行，它提供了使用索引的随意访问，而 LinkedList 则对于经常需要从 List 中添加或删除元素的场合更为合适。</p>\n<p><strong>Set</strong></p>\n<blockquote>\n<p>Set 存储的元素是无序的，这里的无序指的是存入的顺序与输出的顺序可能是不一致的。</p>\n</blockquote>\n<p>①不允许重复对象；<br />\n②无序容器，你无法保证每个元素的存储顺序，TreeSet 通过 Comparator 或者 Comparable 维护了一个排序顺序；<br />\n③只允许一个 null 元素；<br />\n④Set 接口最流行的几个实现类是 HashSet、LinkedHashSet 以及 TreeSet；<br />\n最流行的是<strong>基于 HashMap</strong> 实现的 HashSet；<br />\nTreeSet 还实现了 SortedSet 接口，因此 TreeSet 是一个根据其 compare () 和 compareTo () 的定义进行排序的有序容器。</p>\n<p><strong>Map</strong></p>\n<blockquote>\n<p>Map 存储的元素是键值对（key-value），键和值都是无序的，即存入顺序与输出顺序可能都不一样。</p>\n</blockquote>\n<p>①Map 不是 Collection 的子接口或者实现类，Map 是一个接口；<br />\n②Map 的 每个 Entry 都持有两个对象，也就是一个键一个值，Map 可能会持有相同的值对象但键对象必须是唯一的；<br />\n③TreeMap 也通过 Comparator 或者 Comparable 维护了一个排序顺序；<br />\n④Map 里你可以拥有随意个 null 值，但最多只能有一个 null 键；<br />\n⑤Map 接口最流行的几个实现类是 HashMap、LinkedHashMap、Hashtable 和 TreeMap。（HashMap、TreeMap 最常用）</p>\n<h3 id=\"hashset与treeset-区别\"><a class=\"anchor\" href=\"#hashset与treeset-区别\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2lsbGlhbWppZS9wLzkwOTkwMzguaHRtbA==\">HashSet 与 TreeSet 区别</span></h3>\n<p><strong>HashSet</strong><br />\nHashSet 有以下特点</p>\n<ul>\n<li>不能保证元素的排列顺序，顺序有可能发生变化</li>\n<li>不是同步的</li>\n<li>集合元素可以是 null, 但只能放入一个 null</li>\n</ul>\n<p>​    当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode () 方法来得到该对象的 hashCode 值，然后根据 hashCode 值来决定该对象在 HashSet 中存储位置。<br />\n简单的说，HashSet 集合判断两个元素相等的标准是两个对象通过 equals 方法比较相等，并且两个对象的 hashCode () 方法返回值相等</p>\n<p>​    注意，如果要把一个对象放入 HashSet 中，重写该对象对应类的 equals 方法，也应该重写其 hashCode () 方法。其规则是如果两个对 象通过 equals 方法比较返回 true 时，其 hashCode 也应该相同。另外，对象中用作 equals 比较标准的属性，都应该用来计算 hashCode 的值。</p>\n<p><strong>TreeSet 类</strong><br />\n TreeSet 是 SortedSet 接口的唯一实现类，TreeSet 可以确保集合元素处于排序状态。TreeSet 支持两种排序方式，自然排序 和定制排序，其中自然排序为默认的排序方式。向 TreeSet 中加入的应该是同一个类的对象。<br />\nTreeSet 判断两个对象不相等的方式是两个对象通过 equals 方法返回 false，或者通过 CompareTo 方法比较没有返回 0<br />\n<strong> 自然排序</strong><br />\n自然排序使用要排序元素的 CompareTo（Object obj）方法来比较元素之间大小关系，然后将元素按照升序排列。<br />\nJava 提供了一个 Comparable 接口，该接口里定义了一个 compareTo (Object obj) 方法，该方法返回一个整数值，实现了该接口的对象就可以比较大小。<br />\nobj1.compareTo (obj2) 方法如果返回 0，则说明被比较的两个对象相等，如果返回一个正数，则表明 obj1 大于 obj2，如果是 负数，则表明 obj1 小于 obj2。<br />\n如果我们将两个对象的 equals 方法总是返回 true，则这两个对象的 compareTo 方法返回应该返回 0<br />\n<strong> 定制排序</strong><br />\n自然排序是根据集合元素的大小，以升序排列，如果要定制排序，应该使用 Comparator 接口，实现 int compare (T o1,T o2) 方法。</p>\n<p><strong>最重要：</strong></p>\n<p>1、TreeSet 是二差树实现的，Treeset 中的数据是自动排好序的，不允许放入 null 值。</p>\n<p>2、HashSet 是哈希表实现的，HashSet 中的数据是无序的，可以放入 null，但只能放入一个 null，两者中的值都不能重复，就如数据库中唯一约束。</p>\n<p>3、HashSet 要求放入的对象必须实现 HashCode () 方法，放入的对象，是以 hashcode 码作为标识的，而具有相同内容的 String 对象，hashcode 是一样，所以放入的内容不能重复。但是同一个类的对象可以放入不同的实例 。</p>\n<p><strong>HashSet 与 TreeSet 的使用场景</strong></p>\n<p>HashSet：哈希表是通过使用称为散列法的机制来存储信息的，元素并没有以某种特定顺序来存放 TreeSet：提供一个使用树结构存储 Set 接口的实现 (红黑树算法)，对象以升序顺序存储，访问和遍历的时间很快。<br />\n使用场景：HashSet 是基于 Hash 算法实现的，其性能通常都优于 TreeSet。我们通常都应该使用 HashSet，在我们需要排序的功能时，我们才使用 TreeSet。</p>\n<p><strong>HashSet 与 TreeSet 的底层运行方式:</strong><br />\nTreeSet 集合对象的加入过程：<br />\nTreeSet 的底层是通过二叉树来完成存储的，无序的集合<br />\n当我们将一个对象加入 treeset 中，treeset 会将第一个对象作为根对象，然后调用对象的 compareTo 方法拿第二个对象和第一个比较，当返回至 = 0 时，说明 2 个对象内容相等，treeset 就不把第二个对象加入集合。返回 &gt; 1 时，说明第二个对象大于第一个对象，将第二个对象放在右边，返回 - 1 时，则将第二个对象放在左边，依次类推</p>\n<p>HashSet 集合对象的加入过程：<br />\nhashset 底层是 hash 值的地址，它里面存的对象是无序的。<br />\n第一个对象进入集合时，hashset 会调用 object 类的 hashcode 根据对象在堆内存里的地址调用对象重写的 hashcode 计算出一个 hash 值，然后第一个对象就进入 hashset 集合中的任意一个位置。<br />\n第二个对象开始进入集合，hashset 先根据第二个对象在堆内存的地址调用对象的计算出一个 hash 值，如果第二个对象和第一个对象在堆内存里的地址是相同的，那么得到的 hash 值也是相同的，直接返回 true，hash 得到 true 后就不把第二个元素加入集合（这段是 hash 源码程序中的操作）。如果第二个对象和第一个对象在堆内存里地址是不同的，这时 hashset 类会先调用自己的方法遍历集合中的元素，当遍历到某个元素时，调用对象的 equals 方法，如果相等，返回 true，则说明这两个对象的内容是相同的，hashset 得到 true 后不会把第二个对象加入集合。</p>\n<h3 id=\"hashtabl-hashmap-treemap的区别\"><a class=\"anchor\" href=\"#hashtabl-hashmap-treemap的区别\">#</a> hashtabl、hashMap treeMap 的区别</h3>\n<p><strong>实现方面</strong><br />\n HashMap 是继承自 AbstractMap 类，而 HashTable 是继承自 Dictionary 类。它们都同时实现了 map、Cloneable（可复制）、Serializable（可序列化）这三个接口。存储的内容是基于 key-value 的键值对映射，不能有重复的 key，而且一个 key 只能映射一个 value。HashSet 底层就是基于 HashMap 实现的。</p>\n<p><strong>为空方面</strong><br />\n Hashtable 的 key、value 都不能为 null；HashMap 的 key、value 可以为 null，不过只能有一个 key 为 null，但可以有多个 null 的 value；TreeMap 键、值都不能为 null。</p>\n<p><strong>排序方面</strong><br />\n Hashtable、HashMap 具有无序特性。TreeMap 是利用红黑树实现的（树中的每个节点的值都会大于或等于它的左子树中的所有节点的值，并且小于或等于它的右子树中的所有节点的值），实现了 SortMap 接口，能够对保存的记录根据键进行排序。所以一般需求排序的情况下首选 TreeMap，默认按键的升序排序（深度优先搜索），也可以自定义实现 Comparator 接口实现排序方式。</p>\n<p><strong>注：<strong>HashTable 是一个线程安全的类，它使用</strong> synchronized</strong> 来锁住整张<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1IYXNoJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==\"> Hash</span> 表来实现线程安全，即每次锁住整张表让线程独占，相当于所有线程进行读写时都去竞争一把锁，导致效率非常低下</p>\n<p>Hashtable 现在很少出现了，大家更多的会使用 <code>ConcurrentHashMap</code> ，引导面试官提问<strong> ConcurrentHashMap</strong>。</p>\n<h3 id=\"concurrenthashmap原理与实现\"><a class=\"anchor\" href=\"#concurrenthashmap原理与实现\">#</a> ConcurrentHashMap 原理与实现</h3>\n<p>分析问题：原理与实现主要是锁的原理与实现！我们可以从 JDK1.7 开始聊起:<br />\nJDK1.7 版本，ConcurrentHashMap 内部使用段 (Segment),ConcurrentLevel 有 16 个分段，这 16 个分段有独立的锁机制，每个独立的机制都是一张表，表的下面是链表，这样就可以支持并发的同时保证每张表的线程安全，大大的题高了效率。</p>\n<p>​\tJDK1.8 版本，ConcurrentHashMap 内部使用 sychronized + volatile + CAS 的实现降低锁的粒度，大家可以认为粒度就是 HashEntry (首节点)。</p>\n<p>让我们看看具体是如何实现的:</p>\n<ul>\n<li>\n<p>插入、删除、扩容的时候都对数组中相应位置的元素加锁了，加锁用的是 synchronized.</p>\n</li>\n<li>\n<p>table 数组、Node 中的 val 和 next、以及一些控制字段都加了 volatile</p>\n</li>\n<li>\n<p>在更新一些关键变量的时候用到了 sun.misc.Unsafe 中的一些方法</p>\n</li>\n</ul>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/204fe5e5d4314bf99acbaa07df844ef5tplv-k3u1fbpfcp-watermark.jpg\" class=\"\" title=\"204fe5e5d4314bf99acbaa07df844ef5~tplv-k3u1fbpfcp-watermark\">\n<p><strong>反思 &amp; 扩展</strong><br />\n<strong> ConcurrentHashMap 有什么缺陷吗？</strong><br />\nConcurrentHashMap 是设计为非阻塞的。在更新时会局部锁住某部分数据，但不会把整个表都锁住。同步读取操作则是完全非阻塞的。好处是在保证合理的同步前提下，效率很高。坏处是严格来说读取操作不能保证反映最近的更新。例如线程 A 调用 putAll 写入大量数据，期间线程 B 调用 get，则只能 get 到目前为止已经顺利插入的部分数据。</p>\n<p><strong>ConcurrentHashMap 在 JDK7 和 8 之间的区别</strong><br />\n JDK1.8 的实现降低锁的粒度，JDK1.7 版本锁的粒度是基于 Segment 的，包含多个 HashEntry，而 JDK1.8 锁的粒度就是<br />\n HashEntry (首节<br />\n点)<br />\n JDK1.8 版本的数据结构变得更加简单，使得操作也更加清晰流畅，因为已经使用 synchronized 来进行同步，所以不需要分段锁的概念，也就不需要 Segment 这种数据结构了，由于粒度的降低，实现的复杂度也增加了<br />\n JDK1.8 使用红黑树来优化链表，基于长度很长的链表的遍历是一个很漫长的过程，而红黑树的遍历效率是很快的，代替一定阈值的链表，这样形成一个最佳拍档</p>\n<h3 id=\"未完成-2\"><a class=\"anchor\" href=\"#未完成-2\">#</a> —————————— 未完成</h3>\n<h1 id=\"泛型\"><a class=\"anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<p>什么是泛型（Generic）：<br />\n泛型就相当于标签，一般我们在使用的时候基本上往集合中存入的都是相同类型的数据 --》便于管理，所以现在什么引用数据类型都可以存入集合，不方便！</p>\n<h3 id=\"泛型上-下限\"><a class=\"anchor\" href=\"#泛型上-下限\">#</a> 泛型上、下限</h3>\n<p><strong>上限</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//        list = object;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        list<span class=\"token operator\">=</span>student<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>所有直接承接类必须为 extends 的类的子类 / 同等级类，？是爹</p>\n<p><strong>下限</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        list <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list <span class=\"token operator\">=</span> person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//list=student;</span></pre></td></tr></table></figure><p>所有直接承接类必须为 super 的类的父类 / 同等级类，？是子</p>\n<p><strong>总结</strong></p>\n<p>看上下限，就看 关键字是否为 super，super 下限（<strong>只有子类才用 super</strong>)，否则为上限</p>\n<h3 id=\"java中的自增ii是线程安全的吗如何实现线程安全的自增\"><a class=\"anchor\" href=\"#java中的自增ii是线程安全的吗如何实现线程安全的自增\">#</a> Java 中的自增（i++/++i）是线程安全的吗，如何实现线程安全的自增？</h3>\n<p><strong>不安全</strong>，<strong>加锁，或者用原子类</strong></p>\n<p>增加 synchronized 进行线程同步</p>\n<p>使用 lock、unlock 处理 Reetrantent 锁进行锁定</p>\n<p><font color=red >引申</font></p>\n<p>++ 操作破坏了原子性，使之线程不安全，JVM 为此类操作特意提供了一些同步类</p>\n<p>原子类例如：<strong>AtomicInteger</strong></p>\n<h1 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<h3 id=\"wait-和-sleep-的区别\"><a class=\"anchor\" href=\"#wait-和-sleep-的区别\">#</a> wait 和 sleep 的区别</h3>\n<p>wait 进入阻塞状态，但是释放了锁</p>\n<p>sleep 进入阻塞状态，但是没有释放锁</p>\n<h3 id=\"wait和notify要放在synchronize中\"><a class=\"anchor\" href=\"#wait和notify要放在synchronize中\">#</a> wait 和 notify 要放在 synchronize 中</h3>\n<p>其实这样设计的原因<strong>就是为了防止多线程并发运行时，程序的执行混乱问题</strong>。不然在有可能会出现在 wait 没有执行结束的情况下，notify 已经执行完毕，这样会导致我们一直处于休眠状态。</p>\n<h3 id=\"线程状态\"><a class=\"anchor\" href=\"#线程状态\">#</a> 线程状态</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/2020052615440291.png\" alt=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200526103703738.png\" /></p>\n<p>1、 <code>NEW</code> ：初始状态，线程被构建，但是还没有调用 start 方法；</p>\n<p>2、 <code>RUNNABLED</code> ：运行状态，JAVA 线程把操作系统中的就绪和运行两种状态统一称为 “运行中” ；</p>\n<p>3、 <code>BLOCKED</code> ：阻塞状态，表示线程进入等待状态，也就是线程因为某种原因放弃了 CPU 使用权，阻塞也分为几种情况 ：</p>\n<ul>\n<li>\n<p>等待阻塞：运行的线程执行了 Thread.sleep 、wait ()、 join () 等方法 JVM 会把当前线程设置为等待状态，当 sleep 结束、join 线程终止或者线程被唤醒后，该线程从等待状态进入到阻塞状态，重新抢占锁后进行线程恢复；</p>\n</li>\n<li>\n<p>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被其他线程锁占用了，那么 jvm 会把当前的线程放入到锁池中 ；</p>\n</li>\n<li>\n<p>其他阻塞：发出了 I/O 请求时，JVM 会把当前线程设置为阻塞状态，当 I/O 处理完毕则线程恢复；</p>\n</li>\n</ul>\n<p>4、 <code>WAITING</code> ：等待状态，没有超时时间，要被其他线程或者有其它的中断操作；</p>\n<p>执行 wait ()、join ()、LockSupport.park ()；</p>\n<p>5、 <code>TIME_WAITING</code> ：超时等待状态，超时以后自动返回；</p>\n<p>执行 Thread.sleep (long)、wait (long)、join (long)、LockSupport.park (long)、LockSupport.parkNanos (long)、LockSupport.parkUntil (long)</p>\n<p>6、 <code>TERMINATED</code> ：终止状态，表示当前线程执行完毕 。</p>\n<h3 id=\"线程死亡dead\"><a class=\"anchor\" href=\"#线程死亡dead\">#</a> 线程死亡（DEAD）</h3>\n<p>正常结束</p>\n<p>1、run () 或 call () 方法执行完成，线程正常结束。</p>\n<p>异常结束</p>\n<p>2.、线程抛出一个未捕获的 Exception 或 Error。</p>\n<p>调用 stop</p>\n<p>3、 直接调用该线程的 stop () 方法来结束该线程 — 该方法通常容易导致死锁，不推荐使用。</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220731131902865.png\" class=\"\" title=\"image-20220731131902865\">\n<h2 id=\"终止线程-4-种方式\"><a class=\"anchor\" href=\"#终止线程-4-种方式\">#</a> 终止线程 4 种方式</h2>\n<h3 id=\"正常运行结束\"><a class=\"anchor\" href=\"#正常运行结束\">#</a> 正常运行结束</h3>\n<p>程序运行结束，线程自动结束。</p>\n<h3 id=\"使用退出标志退出线程\"><a class=\"anchor\" href=\"#使用退出标志退出线程\">#</a> 使用退出标志退出线程</h3>\n<p>一般 run () 方法执行完，线程就会正常结束，然而，常常有些线程是伺服线程。它们需要长时间的</p>\n<p>运行，只有在外部某些条件满足的情况下，才能关闭这些线程。使用一个变量来控制循环，例如：</p>\n<p>最直接的方法就是设一个 boolean 类型的标志，并通过设置这个标志为 true 或 false 来控制 while 循环是否退出，代码示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafe</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> exit <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>exit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//do something</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>定义了一个退出标志 exit，当 exit 为 true 时，while 循环退出，exit 的默认值为 false. 在定义 exit 时，使用了一个 Java 关键字 volatile，这个关键字的目的是使 exit 同步，也就是说在同一时刻只能由一个线程来修改 exit 的值。</p>\n<h3 id=\"interrupt-方法结束线程\"><a class=\"anchor\" href=\"#interrupt-方法结束线程\">#</a> Interrupt 方法结束线程</h3>\n<p>使用 interrupt () 方法来中断线程有两种情况：</p>\n<p>1、线程处于阻塞状态：如使用了 sleep, 同步锁的 wait,socket 中的 receive,accept 等方法时，会使线程处于阻塞状态。当调用线程的 interrupt () 方法时，会抛出 InterruptException 异常。阻塞中的那个方法抛出这个异常，通过代码捕获该异常，然后 break 跳出循环状态，从而让我们有机会结束这个线程的执行。通常很多人认为只要调用 interrupt 方法线程就会结束，实际上是错的， 一定要先捕获 InterruptedException 异常之后通过 break 来跳出循环，才能正常结束 run 方法。</p>\n<p>2、线程未处于阻塞状态：使用 isInterrupted () 判断线程的中断标志来退出循环。当使用 interrupt () 方法时，中断标志就会置 true，和使用自定义的标志来控制循环是一样的道理。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafe</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 非阻塞过程中通过判断中断标志来退出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">51000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻塞过程捕获中断异常来退出</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 捕获到异常之后，执行 break 跳出循环</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"stop-方法终止线程线程不安全\"><a class=\"anchor\" href=\"#stop-方法终止线程线程不安全\">#</a> stop 方法终止线程（线程不安全）</h3>\n<p>程序中可以直接使用 thread.stop () 来强行终止线程，但是 stop 方法是很危险的，就象突然关闭计算机电源，而不是按正常程序关机一样，可能会产生不可预料的结果，不安全主要是：thread.stop () 调用之后，创建子线程的线程就会抛出 ThreadDeatherror 的错误，并且会释放子线程所持有的所有锁。一般任何进行加锁的代码块，都是为了保护数据的一致性，如果在调用 thread.stop () 后导致了该线程所持有的所有锁的突然释放 (不可控制)，那么被保护数据就有可能呈现不一致性，其他线程在使用这些被破坏的数据时，有可能导致一些很奇怪的应用程序错误。因此，并不推荐使用 stop 方法来终止线程。</p>\n<h3 id=\"未完成-3\"><a class=\"anchor\" href=\"#未完成-3\">#</a> —————————— 未完成</h3>\n<h1 id=\"线程池\"><a class=\"anchor\" href=\"#线程池\">#</a> 线程池</h1>\n<h3 id=\"线程工厂的目的\"><a class=\"anchor\" href=\"#线程工厂的目的\">#</a> 线程工厂的目的</h3>\n<p>当我们们构建核心线程和最大线程，可以通过线程工厂指定线程名字和其他信息，方便我们后期查错。</p>\n<h3 id=\"线程池的核心属性\"><a class=\"anchor\" href=\"#线程池的核心属性\">#</a> 线程池的核心属性</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 本质就是一个 int 类型的数值，前三位标识线程池的状态，后二十九位标识线程的数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicInteger</span> ctl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token function\">ctlOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RUNNING</span>，<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 本质就是 29, 为了方便对 ctL 做位运算使用的常量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">COUNT_BITS</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIZE</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 计算出线程池的线程最大容量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 线程池正常运行！\t\t111 ——> -1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">RUNNING</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 线程地被 shutdown, 继续执行完剩下的任务！\t\t\t\t000 ——> 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">SHUTDOwN</span> <span class=\"token operator\">-</span> <span class=\"token number\">0</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 线程池被 shutdownNow，线程池停止，并且所有任务中断\t 001 ——> 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STOP</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//shutdown 或者 shutdownNow 之后，任务都被处理完之后，到这个过渡状态\t010 ——> 2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">TIDYING</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 线程池停止\t\t\t 011 ——> 3</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">TERMINATED</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"线程池核心的-execute-流程\"><a class=\"anchor\" href=\"#线程池核心的-execute-流程\">#</a> 线程池核心的 execute 流程</h3>\n<p>线程池有两种执行 submit 和  execute ，但是其实都是在源码中 submit 的返回值是 Future 内部都是执行了 execute () 方法，所以我们着重看 execute 就行，submit 相当于他的加强</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> ftask <span class=\"token operator\">=</span> <span class=\"token function\">newTaskFor</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>ftask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> ftask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> ftask <span class=\"token operator\">=</span> <span class=\"token function\">newTaskFor</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>ftask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> ftask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>execute 源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 拿到线程信息，高 3 位线程状态，其余 29 位 线程大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 基于 workerCountOf () 获取正在工作的线程数，判断是否小于核心线程数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 创建核心线程，并执行任务  ，传入 true 表示当前为核心线程</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 如果获取线核心线程失败，重新获取 ctl</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 获取线程池状态，是否运行；如果线程池正在运行，就将任务追加到阻塞队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> recheck <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 尝试创建最大线程数，如果成功返回 true，失败了就进行拒绝策略</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程池增加工作线程的操作\"><a class=\"anchor\" href=\"#线程池增加工作线程的操作\">#</a> 线程池增加工作线程的操作</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> firstTask<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> core<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 给 for 循环追加标记</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    retry<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 获取线程 ctl</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取当前线程状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 如果 rs >= SHUTDOWN，说明线程池执行了 shutdown 方法或者 shutdownNow</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">>=</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// 线程池听了</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>               firstTask <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// 任务为 null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               <span class=\"token operator\">!</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 工作队列为空</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 获取当前工作线程个数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">int</span> wc <span class=\"token operator\">=</span> <span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 如果工作线程大于容量 或者 （ 工作线程 》核心线程 | 工作线程 》最大线程 ）</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wc <span class=\"token operator\">>=</span> <span class=\"token constant\">CAPACITY</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                wc <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>core <span class=\"token operator\">?</span> corePoolSize <span class=\"token operator\">:</span> maximumPoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 基于 CAS 的方式将工作线程数 + 1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndIncrementWorkerCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">break</span> retry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 如果没有成功的 CAS，就要判断是否重新执行外部循环</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 如果线程池状态改变，从外侧改变</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 如果线程池状态没变，从内侧改变</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> rs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">continue</span> retry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 声明了两个标识</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">boolean</span> workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">boolean</span> workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 真正的工作线程就是 Worker</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token class-name\">Worker</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 构建 Worker, 并将任务注入</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>firstTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 获取线程池的全局锁</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> mainLock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 上锁的为因为，shutdown 或者 shutdownNow 的时候，也需要获取锁资源</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 获取线程池状态</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t   <span class=\"token comment\">// 判断线程池状态 &lt; SHUTDOWN ，也就是 RUNNING 状态</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">&lt;</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">&amp;&amp;</span> firstTask <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 线程池为 SHUTDOWN 同时任务为 null</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token comment\">// 如果线程干活了。直接抛出异常</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalThreadStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token comment\">// 将工作线程追加到 Workers (一个 HashSet) 存储</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    workers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token comment\">// 获取这个 hashSet 长度</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> workers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    <span class=\"token comment\">// 如果现在的工作线程数 > 历史最大线程数，直接替换掉 largestPoolSize</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> largestPoolSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        largestPoolSize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token comment\">// 将工作线程设置为 true，表示添加成功</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token comment\">// 最后释放锁</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 如果工作线程添加成功，启动工作线程</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workerAdded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token comment\">// 设置启动工作线程为 True</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 如果工作线程启动失败</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> workerStarted<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 补救操作</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token function\">addWorkerFailed</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span> workerStarted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程池的work类\"><a class=\"anchor\" href=\"#线程池的work类\">#</a> 线程池的 Work 类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolExecutor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractExecutorService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//***</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span> <span class=\"token comment\">// 属于线程池的一个内部类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span>  <span class=\"token comment\">// 继承了 Runnable 也就是相对于 worker 也是一个任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">6138294804551838833L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Runnable</span> firstTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">long</span> completedTasks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> firstTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstTask <span class=\"token operator\">=</span> firstTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token function\">getThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 当调用 worker 内部线程的 start () 方法时，实际是在调用 worker 类中的 run () 方法，实际执行的是 runWorker ()</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">runWorker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程池的-runworker-方法\"><a class=\"anchor\" href=\"#线程池的-runworker-方法\">#</a> 线程池的 runWorker () 方法</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runWorker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Worker</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 获取当前线程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Thread</span> wt <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 获取 Worker 中的具体任务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Runnable</span> task <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>firstTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将 worker 中的 task 置为 null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    w<span class=\"token punctuation\">.</span>firstTask <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 将有参构造中的标记 (setState (-1)) 撤销，代表当前线程可以被打断</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// allow interrupts</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 标记，</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">boolean</span> completedAbruptly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 如果 worker 中的 task 有任务，直接执行当前任务，否则去队列中获取任务</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">=</span> <span class=\"token function\">getTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 当前要执行，添加标记，shutdown 也不能打断</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            w<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>           <span class=\"token comment\">// 判断当前线程池装，以及线程状态，判断是否需要被打断</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">runStateAtLeast</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STOP</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                 <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                  <span class=\"token function\">runStateAtLeast</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STOP</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token operator\">!</span>wt<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                wt<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 执行任务的开始</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 在执行任务之前做的事，前置增强</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token function\">beforeExecute</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">Throwable</span> thrown <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 执行任务</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    thrown <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Error</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    thrown <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    thrown <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                     <span class=\"token comment\">// 在执行任务之前做的事，后置增强</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token function\">afterExecute</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> thrown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">// 任务处理结束</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                task <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 标记当前 worker 处理的任务数 + 1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                w<span class=\"token punctuation\">.</span>completedTasks<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                w<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        completedAbruptly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">processWorkerExit</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> completedAbruptly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"1-单核cpu设定多线程是否有意义\"><a class=\"anchor\" href=\"#1-单核cpu设定多线程是否有意义\">#</a> 1、单核 CPU 设定多线程是否有意义？</h3>\n<h3 id=\"2-线程数是不是越多越好\"><a class=\"anchor\" href=\"#2-线程数是不是越多越好\">#</a> 2、线程数是不是越多越好？</h3>\n<p>​\t并不是，这牵扯到线程调用问题举个反例，盖一个房子需要 100H，我 100 人工作一小时就可以完成？显然不可以。甚至会降低效率，浪费资源</p>\n<h3 id=\"3-线程数设置多少最合适\"><a class=\"anchor\" href=\"#3-线程数设置多少最合适\">#</a> 3、线程数设置多少最合适？</h3>\n<ul>\n<li><strong>压测</strong>（就是不停尝试，找到最合适的）， 一般情况下，为了安全不可能全部占用，我们留出一部分空间我们一般取 80%，</li>\n</ul>\n<p>1️⃣64 核 CPU 我们全部使用，其他的程序就无法启动，显然不正常</p>\n<ul>\n<li><strong>通过公式计算</strong></li>\n</ul>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220708174914435.png\" class=\"\" title=\"image-20220708174914435\">\n<p>⭕️ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>32</mn><mo>∗</mo><mn>8</mn><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0.2</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>30.72</mn></mrow><annotation encoding=\"application/x-tex\">32*8*(1+0.2)=30.72</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span></span></span></span>​</p>\n<h3 id=\"如何优雅的结束一个线程\"><a class=\"anchor\" href=\"#如何优雅的结束一个线程\">#</a> 如何优雅的结束一个线程？</h3>\n<p>1️⃣ stop () 方法，但是不建议，容易产生数据不一致情况\t\t【<strong>已废</strong>】</p>\n<p>2️⃣ suspend ()、resume () 方法，暂停，继续方法，暂停的时候不会释放锁，容易产生死锁【<strong>已废</strong>】</p>\n<p>3️⃣ vlatile ()，时间无法控制</p>\n<ul>\n<li>\n<p>不适合某些场景（比如还没有同步的时候，线程做了阻塞操作，没有办法循环回去）</p>\n</li>\n<li>\n<p>打断时间也不是特别精确，比如一个阻塞容器，容量为 5 的时候结束生产者，<br />\n但是，由于 volatile 同步线程标志位的时间控制不是很精确，有可能生产者还继续生产一段儿时间</p>\n</li>\n</ul>\n<p>4️⃣ interrupt () and isInterrupted（比较优雅）</p>\n<h3 id=\"程序真的会一行一行的运行吗\"><a class=\"anchor\" href=\"#程序真的会一行一行的运行吗\">#</a> 程序真的会一行一行的运行吗？</h3>\n<p>​\t不一定，在没有相互依赖的语句，可能为了效率后面的语句会同时运行，运行完成的时间比前一个跟快。</p>\n<h3 id=\"this对象溢出问题\"><a class=\"anchor\" href=\"#this对象溢出问题\">#</a> this 对象溢出问题？</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> num <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Test</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最终结果可能是什么？</p>\n<p>1️⃣、8</p>\n<p>2️⃣、0</p>\n<p>为什么是 0 呢，因为在我们初始化的时候有可能会导致我们创建的这个线程直接去读取未被初始化的 Num，所以解决方案</p>\n<ul>\n<li>可以在构造器中 new 但是不要启动，启动单另写一个方法启动</li>\n</ul>\n<h3 id=\"线程池的好处\"><a class=\"anchor\" href=\"#线程池的好处\">#</a> 线程池的好处</h3>\n<p>1、降低资源消耗</p>\n<p>​\t线程的创建和销毁，通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p>\n<p>2、调高响应速度</p>\n<p>​\t任务到了就直接可以上线程了，不用再 new。当任务到达时，任务可以不需要等到线程创建就能立即执行</p>\n<p>3、提高线程的可管理性</p>\n<p>​\t线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</p>\n<h3 id=\"未完成-4\"><a class=\"anchor\" href=\"#未完成-4\">#</a> ———————— 未完成</h3>\n<h1 id=\"jvm\"><a class=\"anchor\" href=\"#jvm\">#</a> JVM</h1>\n<h3 id=\"基础内容\"><a class=\"anchor\" href=\"#基础内容\">#</a> 基础内容</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220821204809060.png\" class=\"\" title=\"image-20220821204809060\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907231623467.png\" class=\"\" title=\"image-20220907231623467\">\n<p>1、方法区</p>\n<p>线程共享，方法区是逻辑上堆的一部分，虚拟机有一个在所有 Java 虚拟机线程之间共享的方法区。</p>\n<p>运行时常量池、字段和方法数据，以及方法和构造函数的代码，包括类和实例初始化和接口初始化中使用的特殊方法。</p>\n<p>如果方法区域中的内存无法满足分配请求，Java 虚拟机将抛出一个 OutOfMemoryError</p>\n<p>2、堆（虚拟机中最大的一块）</p>\n<p>线程共享</p>\n<p>堆是为所有类实例和数组分配内存的运行时数据区域。</p>\n<p>内存不足 OutOfMemoryError</p>\n<p>3、java 虚拟机栈\t\t\t\t执行 java 方法\t\t\t\t\t\t\t\t线程私有\t\t深度不够时，Stack OverflowError</p>\n<p>4、本地方法栈\t\t\t\t\t执行本地方法（C++）</p>\n<p>5、程序计数器\t\t\t\t\t记录程序执行到的位置\t\t\t线程私有\t\t深度不够时，Stack OverflowError</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907232658406.png\" class=\"\" title=\"image-20220907232658406\">\n<p>栈帧代表一个方法的运行，他的结构如图所示：</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907233019604.png\" class=\"\" title=\"image-20220907233019604\">\n<p><mark>还少一个附加信息</mark></p>\n<p><strong>附加信息：栈帧的高度  +  虚拟机版本信息</strong></p>\n<p><strong>栈帧信息：附加信息  +  动态链接  + 方法的返回地址</strong></p>\n<p><strong>局部变量表：方法中定义的局部变量以及方法的参数都会存放在这张表中，单纯的存储单元</strong></p>\n<p><strong>操作数栈：以压栈以及出栈的方式存储操作数</strong></p>\n<p>int a = 1;</p>\n<p>int b = 1;</p>\n<p>int c = a + b;</p>\n<p>将 a，b 从表中拿出来，然后将 c 返回到表中</p>\n<p><strong>方法的返回地址：当你一个方法执行的时候，只有两种方法可以退出</strong></p>\n<ul>\n<li>遇到方法的返回字节码指令</li>\n<li>出现异常，有异常处理，则交给异常处理器，没有就抛出异常</li>\n</ul>\n<p><strong>动态链接：动态链接将这些符号方法引用转换为具体的方法引用，简单来说，符号引用转变为直接引用</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果调用 a () 最终执行的是 c ()</span></pre></td></tr></table></figure><p><strong>但是这里有个问题，符号引用转变为直接引用，我们在类加载的时候已经做过了，为什么又要来一次？</strong></p>\n<blockquote>\n<p>这是因为我们 java 的多态，我们在刚开始的时候并不知道，具体的实现方法，要在我们运行的过程中，<br />\n才能知道，我们运用的是哪一个，所以我们这个时候会再来一次 “符号的引用转变为直接引用”</p>\n</blockquote>\n<h3 id=\"类加载机制\"><a class=\"anchor\" href=\"#类加载机制\">#</a> 类加载机制</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907201636552.png\" class=\"\" title=\"image-20220907201636552\">\n<p>类加载机制其实就是虚拟机把 Class 文件加载到内存并对数据进行校验，转换解析和初始化，形成可以虚拟机直接使用的 Java 类型，即 java.lang.Class</p>\n<p>1、装载</p>\n<p>Class 文件 ——&gt; 二进制字节流 ——&gt; 类加载器</p>\n<p>1）通过一个类的全限定名获取这个类的二进制字节流</p>\n<p>2）将这个字节流所代表的静态存储结构转换成为方法区的运行时数据结构</p>\n<p>3）在 Java 堆中生成一个代表这个类的 Java.lang.Class 对象，作为我们方法区得数据访问入口</p>\n<p>2、链接</p>\n<p>1）验证，保证我们类加载的正确性</p>\n<ul>\n<li>文件格式的验证（这一步其实在我们我们装载的时候进行）</li>\n<li>元数据验证</li>\n<li>字节码验证</li>\n<li>符号引用验证</li>\n</ul>\n<p>2）准备</p>\n<p>为<mark>类的静态变量分配内存</mark>，并将其初始化为当前类型的<mark>默认值</mark></p>\n<p>3）解析</p>\n<p>解析是从运行时常量池中的符号引用动态确定具体指的过程。</p>\n<p>把类中的符号引用转换成直接引用</p>\n<p>3、初始化</p>\n<p>执行到 Clinit 方法，为静态变量赋值，初始化静态代码块，初始化当前类的父类。</p>\n<h3 id=\"类加载器\"><a class=\"anchor\" href=\"#类加载器\">#</a> 类加载器</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907203357976.png\" class=\"\" title=\"image-20220907203357976\">\n<p>启动类加载器、扩展类加载器、系统加载器、自定义加载器</p>\n<h3 id=\"双亲委派机制\"><a class=\"anchor\" href=\"#双亲委派机制\">#</a> 双亲委派机制</h3>\n<p>原名叫：父类委托机制</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907182221718.png\" class=\"\" title=\"image-20220907182221718\">\n<h3 id=\"打破双亲委派机制\"><a class=\"anchor\" href=\"#打破双亲委派机制\">#</a> 打破双亲委派机制</h3>\n<p>1. 复写\t\t重写 classloader</p>\n<p>2.SPI\t\t\tService Provider Interface      服务提供接口</p>\n<p>可插拔设计，可以随时替换实现</p>\n<p>3.OSGI \t\t热部署，热更新</p>\n<h3 id=\"对象的创建过程\"><a class=\"anchor\" href=\"#对象的创建过程\">#</a> 对象的创建过程</h3>\n<p>1、对象类的加载 ——&gt; ClassLoader</p>\n<p>​\tload</p>\n<p>​\tlink (verification [检验是否符合标准],preparation [对对象附默认值],resolution [做解析])</p>\n<p>​\tinitializing (类的初始化) -&gt; 静态变量附默认值，并执行静态语句块</p>\n<p>2、申请对象内存</p>\n<p>3、成员变量附默认值</p>\n<p>4、调用构造方法</p>\n<p>​\t成员变量顺序附初始值</p>\n<p>​\t执行构造方法语句</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/20210714084921294.png\" class=\"\" title=\"img\">\n<h3 id=\"为什么要把堆和栈区分出来呢栈中不是也可以存储数据吗\"><a class=\"anchor\" href=\"#为什么要把堆和栈区分出来呢栈中不是也可以存储数据吗\">#</a> 为什么要把堆和栈区分出来呢？栈中不是也可以存储数据吗？</h3>\n<p><strong>栈是运行时的单位，而堆是存储的单位。</strong></p>\n<p>栈解决程序的运行问题，即程序如何执行，或者说如何处理数据；堆解决的是数据存储的问题，即数据怎么放、放在哪儿。</p>\n<p>在 Java 中一个线程就会相应有一个线程栈与之对应，这点很容易理解，因为不同的线程执行逻辑有所不同，因此需要一个独立的线程栈。而堆则是所有线程共享的。栈因为是运行单位，因此里面存储的信息都是跟当前线程（或程序）相关信息的。包括局部变量、程序运行状态、方法返回值等等；而堆只负责存储对象信息。</p>\n<p>1、从软件设计的角度看，栈代表了处理逻辑，而堆代表了数据。这样分开，使得处理逻辑更为清晰。分而治之的思想。这种隔离、模块化的思想在软件设计的方方面面都有体现。</p>\n<p>2、 堆与栈的分离，使得堆中的内容可以被多个栈共享（也可以理解为多个线程访问同一个对象）。这种共享的收益是很多的。一方面这种共享提供了一种有效的数据交互方式 (如：共享内存)，另一方面，堆中的共享常量和缓存可以被所有栈访问，节省了空间。</p>\n<p>3、栈因为运行时的需要，比如保存系统运行的上下文，需要进行地址段的划分。由于栈只能向上增长，因此就会限制住栈存储内容的能力。而堆不同，堆中的对象是可以根据需要动态增长的，因此栈和堆的拆分，使得动态增长成为可能，相应栈中只需记录堆中的一个地址即可。</p>\n<p>4、 面向对象就是堆和栈的完美结合。其实，面向对象方式的程序与以前结构化的程序在执行上没有任何区别。但是，面向对象的引入，使得对待问题的思考方式发生了改变，而更接近于自然方式的思考。当我们把对象拆开，你会发现，对象的属性其实就是数据，存放在堆中；而对象的行为（方法），就是运行逻辑，放在栈中。我们在编写对象的时候，其实即编写了数据结构，也编写的处理数据的逻辑。不得不承认，面向对象的设计，确实很美。</p>\n<h3 id=\"为什么不把基本类型放堆中呢\"><a class=\"anchor\" href=\"#为什么不把基本类型放堆中呢\">#</a> 为什么不把基本类型放堆中呢？</h3>\n<p>因为其占用的空间一般是 1~8 个字节 —— 需要空间比较少，而且因为是基本类型，所以不会出现动态增长的情况 —— 长度固定，因此栈中存储就够了，如果把他存在堆中是没有什么意义的。可以这么说，基本类型和对象的引用都是存放在栈中，而且都是几个字节的一个数，因此在程序运行时，他们的处理方式是统一的。但是基本类型、对象引用和对象本身就有所区别了，因为一个是栈中的数据一个是堆中的数据。最常见的一个问题就是，Java 中参数传递时的问题。</p>\n<h3 id=\"堆中存什么栈中存什么\"><a class=\"anchor\" href=\"#堆中存什么栈中存什么\">#</a> 堆中存什么？栈中存什么？</h3>\n<p>堆中存的是对象。栈中存的是基本数据类型和堆中对象的引用。一个对象的大小是不可估计的，或者说是可以动态变化的，但是在栈中，一个对象只对应了一个 4btye 的引用（堆栈分离的好处：）。</p>\n<h3 id=\"java中的参数传递时传值呢还是传引用\"><a class=\"anchor\" href=\"#java中的参数传递时传值呢还是传引用\">#</a> Java 中的参数传递时传值呢？还是传引用？</h3>\n<p>参数是基本数据类型  -》按值传递</p>\n<p>参数是引用类型  —— 》 按引用传递</p>\n<p>注意 String 是个坑 ，他是值传递但是引用数据类型</p>\n<h3 id=\"为什么需要jvm\"><a class=\"anchor\" href=\"#为什么需要jvm\">#</a> 为什么需要 JVM</h3>\n<p>1、JVM 可以帮助我们屏蔽底层的操作系统，一次编译，到处运行。</p>\n<p>2、JVM 可以运行 Class 文件</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907171924496.png\" class=\"\" title=\"image-20220907171924496\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907171933089.png\" class=\"\" title=\"image-20220907171933089\">\n<h3 id=\"jdkjrejvm的关系\"><a class=\"anchor\" href=\"#jdkjrejvm的关系\">#</a> JDK，JRE，JVM 的关系</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907171654044.png\" class=\"\" title=\"image-20220907171654044\">\n<h3 id=\"我们的编译器到底干了什么\"><a class=\"anchor\" href=\"#我们的编译器到底干了什么\">#</a> 我们的编译器到底干了什么</h3>\n<p>仅仅是将我们的 .java 文件转换成了 .class 文件  ，实际上就是文件格式化的转换，对等信息转换</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907175840054.png\" class=\"\" title=\"image-20220907175840054\">\n<h3 id=\"对象被判定为不可达对象之后就死了吗\"><a class=\"anchor\" href=\"#对象被判定为不可达对象之后就死了吗\">#</a> 对象被判定为不可达对象之后就死了吗？</h3>\n<img data-src=\"../../../../../../面试/面试题/面试题_img/image-20220907183347727.png\" alt=\"image-20220907183347727\" style=\"zoom:150%;\" />\n<p>finalize () 只能调用一次</p>\n<p>根：GC_Root</p>\n<h3 id=\"java堆进行分代处理\"><a class=\"anchor\" href=\"#java堆进行分代处理\">#</a> Java 堆进行分代处理</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907171502725.png\" class=\"\" title=\"image-20220907171502725\">\n<h3 id=\"为什么edens0s1是811\"><a class=\"anchor\" href=\"#为什么edens0s1是811\">#</a> 为什么 Eden：S0：S1 是 8:1:1</h3>\n<p>98% 的对象都是朝生夕死，在一块业务用一下，就等着死亡，比如我们 new Radom () 用完就结束了。</p>\n<p>eden 区越小越容易发送 young 区 GC，消耗性能</p>\n<h3 id=\"老年代的担保机制\"><a class=\"anchor\" href=\"#老年代的担保机制\">#</a> 老年代的担保机制</h3>\n<p>Eden 区有一个域值，如果对象超过 Eden 区的域值，他就直接进入到了 Old 区，年轻代扛不住。</p>\n<h3 id=\"如何确定一个对象是垃圾\"><a class=\"anchor\" href=\"#如何确定一个对象是垃圾\">#</a> 如何确定一个对象是垃圾</h3>\n<ul>\n<li>引用计数法</li>\n</ul>\n<p>​    <strong>对于某个对象而言，只要应用程序中持有该对象的引用，就说明该对象不是垃圾，如果一个对象没有任何指针对其引用，它就是垃圾。</strong></p>\n<p><mark>弊端：如果 AB 相互持有引用，导致永远不能被回收。</mark> （很少用了）</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907231345316.png\" class=\"\" title=\"image-20220907231345316\">\n<p>循环使用，导致我们永远不能被回收。循环引用，内存泄漏，最终导致内存占用越来越多，导致内存溢出</p>\n<ul>\n<li>可达性分析 / 跟搜索算法</li>\n</ul>\n<p>通过 GC_Root 的对象 (<mark>活跃的引用，不是对象</mark>)，开始向下搜找，看某个对象是否可达</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907200320553.png\" class=\"\" title=\"image-20220907200320553\">\n<p>能够作为 GC_Root：</p>\n<p>​\t类加载器、Thread、虚拟机栈的本地变量表、static 成员、常量引用、本地方法栈的变量等。</p>\n<blockquote>\n<p>虚拟机栈（栈帧中的本地变量表) 中引用的对象。方法区中类静态属性引用的对象。<br />\n方法区中常量引用的对象。<br />\n本地方法核中 NI（即一般说的 Native 方法）引用的对象</p>\n</blockquote>\n<h3 id=\"垃圾收集器分类\"><a class=\"anchor\" href=\"#垃圾收集器分类\">#</a> 垃圾收集器分类</h3>\n<ul>\n<li>串行收集器 -&gt;Serial 和 Serial Old</li>\n</ul>\n<p><strong>只能有一个垃圾回收线程执行，用户线程暂停。</strong></p>\n<blockquote>\n<p>适用于内存比较小的嵌入式设备。</p>\n</blockquote>\n<ul>\n<li>并行收集器 [吞吐量优先]-&gt;Parallel Scanvenge、Parallel Old</li>\n</ul>\n<p><strong>多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</strong></p>\n<blockquote>\n<p>适用于科学计算、后台处理等若交互场景。</p>\n</blockquote>\n<ul>\n<li>并发收集器 [停顿时间优先]-&gt;CMS、G1</li>\n</ul>\n<p><strong>用户线程和垃圾收集线程同时执行 (但并不一定是并行的，可能是交替执行的)，垃圾收集线程在执行的时候不会停顿用户线程的运行。</strong></p>\n<blockquote>\n<p>适用于相对时间有要求的场景，比知 web。</p>\n</blockquote>\n<h3 id=\"吞吐量和停顿时间\"><a class=\"anchor\" href=\"#吞吐量和停顿时间\">#</a> 吞吐量和停顿时间</h3>\n<ul>\n<li>\n<p>停顿时间 -&gt; 垃圾收集器进行垃圾回收终端应用执行响应的时间</p>\n</li>\n<li>\n<p>吞吐量 -&gt; 运行用户代码时间 /(运行用户代码时间 + 垃圾收集时间)</p>\n</li>\n</ul>\n<blockquote>\n<p>停顿时间越短就越适合需要和用户交互的程序，良好的响应速度能提升用户体验；</p>\n<p>高吞吐量则可以高效地利用 cPu 时间，尽快完成程序的运算任务，主要适洽在后台运算而不需要太多交互的任务。</p>\n</blockquote>\n<p>小结：这两个指标也是评价垃圾回收器好处的标准。</p>\n<h3 id=\"垃圾收集算法\"><a class=\"anchor\" href=\"#垃圾收集算法\">#</a> 垃圾收集算法</h3>\n<blockquote>\n<p>已经能够确定一个对象为垃圾之后，接下来要考虑的就是回收，怎么回收呢？得要有对应的算法，下面介绍常见的垃圾回收算法。</p>\n</blockquote>\n<h3 id=\"标记-清除mark-sweep\"><a class=\"anchor\" href=\"#标记-清除mark-sweep\">#</a> 标记 - 清除 (Mark-Sweep)</h3>\n<ul>\n<li>\n<p>标记<br />\n<strong>找出内存中需要回收的对象，并且把它们标记出来</strong></p>\n<p>此时堆中所有的对象都会被扫描一遍，从而才能确定需要回收的对象，比较耗时</p>\n  <img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907180008076.png\" class=\"\" title=\"image-20220907180008076\">\n</li>\n<li>\n<p>清除</p>\n<p>清除掉被标记需要回收的对象，释放出对应的内存空间</p>\n  <img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907180045044.png\" class=\"\" title=\"image-20220907180045044\">\n</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<blockquote>\n<p>​\t标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>\n<p>(1) 标记和清除两个过程都比较耗时，效率不高</p>\n<p>(2) 会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>\n</blockquote>\n<h3 id=\"标记-复制算法mark-copying\"><a class=\"anchor\" href=\"#标记-复制算法mark-copying\">#</a> 标记 - 复制算法 (Mark-Copying)</h3>\n<p>将内存划分为两块相等的区域，每次只使用其中一块，如下图所示:</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907180404320.png\" class=\"\" title=\"image-20220907180404320\">\n<p>当其中一块内存使用完了，就将还存活的对象复制到另外一块上面，然后把已经使用过的内存空间一次清除掉。</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907180425740.png\" class=\"\" title=\"image-20220907180425740\">\n<p><strong>缺点：空间利用率低</strong></p>\n<h3 id=\"标记-整理mark-compact\"><a class=\"anchor\" href=\"#标记-整理mark-compact\">#</a> 标记 - 整理 (Mark-Compact)</h3>\n<blockquote>\n<p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费 50% 的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都有 100% 存活的极端情况，所以老年代一般不能直接选用这种算法。</p>\n</blockquote>\n<p><strong>标记过程仍然与 &quot;标记 - 清除&quot; 算法一样，但是后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</strong></p>\n<p>其实上述过程相对 &quot;复制算法&quot; 来讲，少了一个 &quot; 保留区</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907180607386.png\" class=\"\" title=\"image-20220907180607386\">\n<p>让所有存活的对象都向一端移动，清除掉边界以外的内存</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907180726882.png\" class=\"\" title=\"image-20220907180726882\">\n<h3 id=\"分代收集算法\"><a class=\"anchor\" href=\"#分代收集算法\">#</a> 分代收集算法</h3>\n<p>既然上面介绍了 3 种垃圾收集算法，那么在堆内存中到底用哪一个呢？</p>\n<p>Young 区：复制算法 (对象在被分配之后，可能生命周期比较短，young 区复制效率比较高)</p>\n<p>Old\t  区：标记清除或者标记整理 (Old 区对象存活时间比较长，复制来复制去没有必要，不如做个标记然后清除)</p>\n<h3 id=\"zgc\"><a class=\"anchor\" href=\"#zgc\">#</a> ZGC</h3>\n<p>官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZ2N0dW5pbmcvei1nYXJiYWdlLWNvbGxlY3RvcjEuaHRtbCNHVUlELUE1QTQyNjkxLTA5NUUtNDdCQS1CNkRDLUZCNEU1RkFBNDNETw==\">https://docs.oracle.com/en/java/javase/11/gctuning/z-garbage-collector1.html#GUID-A5A42691-095E-47BA-B6DC-FB4E5FAA43DO</span></p>\n<p>​\tJDK11 新引入的 ZGC 收集器，不管是物理上还是逻辑上，ZGC 中已经不存在新老年代的概念了会分为一个个 page，当进行 GC 操作时会对 page 进行压缩，因此没有碎片问题，只能在 64 位的 linux 上使用，目前用得还比较少。</p>\n<p><strong>(1）可以达到 10ms 以内的停顿时间要求</strong><br />\n<strong> (2) 支持 TB 级别的内存</strong><br />\n<strong> (3）堆内存变大后停顿时间还是在 10ms 以内</strong></p>\n<h3 id=\"垃圾收集器\"><a class=\"anchor\" href=\"#垃圾收集器\">#</a> 垃圾收集器</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907200720387.png\" class=\"\" title=\"image-20220907200720387\">\n<h3 id=\"serial系列\"><a class=\"anchor\" href=\"#serial系列\">#</a> Serial 系列</h3>\n<p>​\t<strong>Serial 收集器是最基本、发展历史最悠久的收集器，曾经（在 JDK1.3.1 之前) 是虚拟机新生代收集的唯一选择。</strong></p>\n<p>​\t<strong>它是一种单线程收集器，不仅仅意味着它只会使用一个 CPU 或者一条收集线程去完成垃圾收集工作，更重要的是其在进行垃圾收集的时候需要暂停其他线程。</strong></p>\n<blockquote>\n<p>优点：简单高效，拥有很高的单线程收集效率缺点：收集过程需要暂停所有线程</p>\n<p><strong>算法：复制算法</strong></p>\n<p>应用：client 模式下的默认新生代收集器</p>\n<p>适用范围：新生代</p>\n</blockquote>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907175127639.png\" class=\"\" title=\"image-20220907175127639\">\n<ul>\n<li>\n<p>serial Old</p>\n<p>Serial Old 收集器是 Serial 收集器的老年代版本，也是一个单线程收集器，不同的是采用 **&quot; 标记 - 整理算法”**，运行过程和 Serial 收集器一样。</p>\n  <img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907174807758.png\" class=\"\" title=\"image-20220907174807758\">\n</li>\n</ul>\n<h3 id=\"parallel系列垃圾收集器\"><a class=\"anchor\" href=\"#parallel系列垃圾收集器\">#</a> Parallel 系列垃圾收集器</h3>\n<ul>\n<li>\n<p>ParNew<br />\n<strong> 可以把这个收集器理解为 Serial 收集器的多线程版本。</strong></p>\n<blockquote>\n<p>重点：关注停顿时间</p>\n<p>优点：在多 CPU 时，比 Serial 效率高。</p>\n<p>缺点：收集过程暂停所有应用程序线程，单 cPU 时比 Serial 效率差。算法：复制算法</p>\n<p>应用：运行在 Server 模式下的虚拟机中首选的新生代收集器</p>\n<p>适用范围：新生代</p>\n</blockquote>\n  <img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907174604135.png\" class=\"\" title=\"image-20220907174604135\">\n</li>\n<li>\n<p>Parallel Scavenge<br />\n<strong>Parallel Scavenge 收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器，看上去和 ParNew 一样，但是 Parallel Scanvenge 更关注系统的吞吐量。</strong></p>\n</li>\n</ul>\n<blockquote>\n<p>吞吐量 = 运行用户代码的时间 /(运行用户代码的时间 + 垃圾收集时间)</p>\n<p>比如虚拟机总共运行了 100 分钟，垃圾收集时间用了 1 分钟，吞吐量 =(100-1)/100=99%。</p>\n<p>若吞吐量越大，意味着垃圾收集的时间越短，则用户代码可以充分利用 CPU 资源，尽快完成程序的运算任务。</p>\n</blockquote>\n<p>-XX:MaxGCPauseMillis\t\t\t控制最大的垃圾收集停顿时间，<br />\n-XX:GCRatio\t\t\t\t\t\t\t\t直接设置吞吐量的大小。</p>\n<ul>\n<li>\n<p>Parallel Old</p>\n<p><strong>Parallel Old 收集器是 Parallel Scavenge 收集器的老年代版本，使用多线程和标记 - 整理算法进行垃圾回收，也是更加关注系统的吞吐量</strong></p>\n</li>\n</ul>\n<h3 id=\"cms垃圾收集器\"><a class=\"anchor\" href=\"#cms垃圾收集器\">#</a> CMS 垃圾收集器</h3>\n<p>采取的是 &quot;标记 - 清除算法&quot;，整个过程分为四步：</p>\n<p>(1) 初始标记 CMS initial mark\t\t\t\t\t标记 GC Roots 直接关联对象，不用 Tracing，速度很快</p>\n<p>(2) 并发标记 CMS concurrent mark\t\t   进行 GC Roots Tracing</p>\n<p>(3) 重新标记 CMS remark\t\t\t\t\t\t\t\t修改并发标记因用户程序变动的内容</p>\n<p>(4) 并发清除 CMS concurrent sweep \t\t\t清除不可达对象回收空间，同时有新垃圾产生，留着下次清理称为</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 浮动垃圾</p>\n<p>整个过程中，并发标记和并发编程，收集器线程可以与用户线程一起工作，所以总体来说，CMS 收集器的内存回收过程是与用户线程一起并发的执行。</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907164245323.png\" class=\"\" title=\"image-20220907164245323\">\n<p>优点：并发收集、低停顿</p>\n<p>缺点：产生大量的空间碎片并发阶段会降低吞吐量</p>\n<h3 id=\"g1-调优策略\"><a class=\"anchor\" href=\"#g1-调优策略\">#</a> G1 调优策略</h3>\n<p><strong>(1）不要手动设置新生代和老年代的大小，只要设置整个堆的大小</strong><br />\n why: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9ncy5vcmFjbGUuY29tL3Bvb25hbS9pbmNyZWFzZWQtaGVhcC11c2FnZS13aXRoLWcxLWdj\">https://blogs.oracle.com/poonam/increased-heap-usage-with-g1-gc</span></p>\n<blockquote>\n<p>G1 收集器在运行过程中，会自己调整新生代和老年代的大小<br />\n其实是通过 adapt 代的大小来调整对象晋升的速度和年龄，从而达到为收集器设置的暂停时间目标如果手动设置了大小就意味着放弃了 G1 的自动调优</p>\n</blockquote>\n<p><strong>(2) 不断调优暂停时间目标</strong></p>\n<blockquote>\n<p>一般情况下这个值设置到 100ms 或者 20oms 都是可以的 (不同情况下会不一样)，但如果设置成 5oms 就不太合理。暂停时间设置的太短，就会导致出现 G1 跟不上垃圾产生的速度。最终退化成 Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态。暂停时间只是一个目标，并不能总是得到满足。</p>\n</blockquote>\n<p><strong>(3) 使用 - XX:ConcGCThreads=n 来增加标记线程的数量</strong></p>\n<blockquote>\n<p>IHOP 如果阀值设置过高，可能会遇到转移失败的风险，比如对象进行转移时空间不足。如果阀值设置过低，就会使标记周期运行过于频繁，并且有可能混合收集期回收不到空间。<br />\nIHOP 值如果设置合理，但是在并发周期时间过长时，可以尝试增加并发线程数，调高 ConcGCThreads。</p>\n</blockquote>\n<p><strong>(4) MixedGC 调优</strong></p>\n<blockquote>\n<p>-XX:InitiatingHeapOccupancyPercent</p>\n<p>-XX:G1MixedGCLiveThresholdPercent</p>\n<p>-XX:G1MixedGcCountTarger</p>\n<p>-XX:G10ldCSetRegionThresholdPercent</p>\n</blockquote>\n<p><strong>(5) 当增加堆内存大小</strong></p>\n<p><strong>(6) 不正常的 Full GC</strong></p>\n<blockquote>\n<p>有时候会发现系统刚刚启动的时候，就会发生一次 Full GC，但是老年代空间比较充足，一般是由 Metaspace 区域引起的。可以通过 MetaspaceSize 适当增加其大家，比如 256M。</p>\n</blockquote>\n<h3 id=\"g1垃圾收集器\"><a class=\"anchor\" href=\"#g1垃圾收集器\">#</a> G1 垃圾收集器</h3>\n<p>官网:<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL3ZtL2djdHVuaW5nTGcxX2djLmh0bWwjZ2FyYmFnZV9maXJzdF9nYXJiYWdlX2NvbGxlY3Rpb24=\">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuningLg1_gc.html#garbage_first_garbage_collection</span></p>\n<p><strong>使用 G1 收集器时，Java 堆的内存布局与就与其他收集器有很大差别，它将整个 Java 堆划分为多个大小相等的独立区域 (Region)，虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分 Region (不需要连续) 的集合。</strong></p>\n<p>每个 Region 大小都是一样的，可以是 1M 到 32M 之间的数值，但是必须保证是 2 的 n 次幂</p>\n<p>如果对象太大，一个 Region 放不下 [超过 Region 大小的 50%]，那么就会直接放到 Humongous 中</p>\n<p>设置 Region 大小: -XX:G1HeapRegionSize= <N> M</p>\n<p>所谓 Garbage-Frist，其实就是优先回收垃圾最多的 Region 区域</p>\n<blockquote>\n<p>(1) 分代收集（仍然保留了分代的概念)</p>\n<p>(2）空间整合（整体上属于 “标记 - 整理” 算法，不会导致空间碎片)</p>\n<p>(3）可预测的停顿（比 CNs 更先进的地方在于能让使用者明确指定一个长度为 w 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒)</p>\n</blockquote>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907165802632.png\" class=\"\" title=\"image-20220907165802632\">\n<p><strong>工作过程可以分为如下几步</strong><br />\n初始标记 0KIaitial Marking)\t\t\t\t\t\t\t\t\t标记以下 GC Roots 能够关联的对象，并且修改 TAS 的值，需要</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 暂停用户线程</p>\n<p>并发标记（Concurrent Marking)\t\t\t\t \t\t 从 GC Roots 进行可达性分析，找出存活的对象，与用户线程并</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 发执行</p>\n<p>最终标记 Final Marking)\t\t\t\t\t\t\t\t\t\t\t修正在并发标记阶段因为用户程序的并发执行导致变动的数</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  据，需暂停用户线程</p>\n<p>筛选回收 (Live Data Counting and Evacuation)   对各个 Region 的回收价值和成本进行排序，根据用户所期望</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t的 cc 停顿时间制定回收计划</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907170046446.png\" class=\"\" title=\"image-20220907170046446\">\n<h3 id=\"生产环境中如何选择合适的垃圾收集器\"><a class=\"anchor\" href=\"#生产环境中如何选择合适的垃圾收集器\">#</a> 生产环境中，如何选择合适的垃圾收集器</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vbGphdmFzZS84L2RvY3MvdGVjaG5vdGVzL2d1aWRlcy92bS9nY3R1bmluZy9jb2xsZWN0b3JzLmh0bWwjc3RocmVmMjg=\">https://docs.oracle.com/ljavase/8/docs/technotes/guides/vm/gctuning/collectors.html#sthref28</span></p>\n<ul>\n<li>优先调整堆的大小让服务器自己来选择</li>\n<li>如果内存小于 100M，使用串行收集器</li>\n<li>如果是单核，并且没有停顿时间要求，使用串行或 JVM 自己选</li>\n<li>如果允许停顿时间超过 1 秒，选择并行或 JVM 自己选</li>\n<li>如果响应时间最重要，并且不能超过 1 秒，使用并发收集器</li>\n</ul>\n<h3 id=\"如何判断是否使用g1垃圾收集器\"><a class=\"anchor\" href=\"#如何判断是否使用g1垃圾收集器\">#</a> 如何判断是否使用 G1 垃圾收集器</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL3ZtL0cxLmh0bWwjdXNlX2Nhc2Vz\">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/G1.html#use_cases</span></p>\n<p><strong>JDK 7 开始使用，JDK 8 非常成熟，JDK9 默认的垃圾收集器，适用于新老生代。</strong></p>\n<p><strong>是否使用 G1 收集器？</strong></p>\n<p>(1) 50% 以上的堆被存活对象占用</p>\n<p>(2) 对象分配和晋升的速度变化非常大</p>\n<p>(3) 垃圾回收时间比较长</p>\n<h3 id=\"什么时候才会进行垃圾回收\"><a class=\"anchor\" href=\"#什么时候才会进行垃圾回收\">#</a> 什么时候才会进行垃圾回收</h3>\n<blockquote>\n<p>GC 是由 JVM 自动完成的，根据 JVM 系统环境而定，所以时机是不确定的。<br />\n当然，我们可以手动进行垃圾回收，比如调用 System.gc () 方法通知 JVM 进行一次垃圾回收，但是具体什么时刻运行也无法控制。也就是说 System.gc () 只是通知要回收，什么时候回收由 VM 决定。<strong>但是不建议手动调用该方法，因为 GC 消耗的资源比较大。</strong></p>\n</blockquote>\n<p>(1) 当 Eden 区或者 s 区不够用</p>\n<p>(2) 老年代空间不够用</p>\n<p>(3) 方法区空间不够用</p>\n<p>(4) System.gc ()\t\t\t\t// 通知    \t\t\t时机也不确定   \t执行的 Full GC</p>\n<h3 id=\"jvm-常用命令\"><a class=\"anchor\" href=\"#jvm-常用命令\">#</a> JVM 常用命令</h3>\n<ul>\n<li>\n<p>jps</p>\n<p><strong>查看 java 进程</strong></p>\n<blockquote>\n<p>The jps command lists the instrumented Java HotSpot VWls on the target system. The command is limited toreporting information on JVMs for which it has the access permissions.</p>\n</blockquote>\n</li>\n<li>\n<p>jinfo</p>\n<p><strong>(1) 实时查看和调整 JVM 配置参数</strong></p>\n<blockquote>\n<p>The jinfo command prints Java configuration information for a specified Java process or core file or aremote debug server. The configuration information includes Java system properties and Java VirtualMachine (VM)command-line flags.</p>\n</blockquote>\n<p><strong>(2) 查看用法</strong></p>\n<pre><code>jinfo  -flag  name  PID\t\t\t查看某个java进程的name属性的值\n\njinfo  -flag  MaxHeapSize  PID\njinfo  -flag  UseG1GC  PID\n</code></pre>\n<p><strong>(3) 修改</strong></p>\n<p>参数只有被标记为 manageable 的 flags 可以被实时修改</p>\n<pre><code>jinfo -flag [+-]PID\njinfo -flag  &lt;name&gt;=&lt;value&gt; PID\n</code></pre>\n<p><strong>(4）查看曾经赋过值的一些参数</strong></p>\n<pre><code>jinfo -flags PID\n</code></pre>\n</li>\n<li>\n<p>jstat<br />\n<strong> (1）查看虚拟机性能统计信息</strong></p>\n<blockquote>\n<p>The jstat command displays performance statistics for an instrumented Java HotSpot VwW. The target wW isidentified by its virtual machine identifier, or vmid option.</p>\n</blockquote>\n<p><strong>(2) 查看类装载信息</strong></p>\n<p>jstat   -class   PID  1000  10\t\t\t\t查看某个 java 进程的类装载信息，每 1000 毫秒输出一次，共输出 10 次</p>\n<p><strong>(3) 查看垃圾收集信息</strong></p>\n<p>jstat   -gc   PID   1000   10</p>\n</li>\n<li>\n<p>jstack<br />\n<strong> (1) 查看线程堆栈信息</strong></p>\n<blockquote>\n<p>The jstack command prints Java stack traces of ]ava threads for a specified Java process,core file,orremote debug server.</p>\n</blockquote>\n<p><strong>(2) 用法</strong></p>\n<p>jstack   \tPID</p>\n</li>\n<li>\n<p>jmap</p>\n<p>(1) 生成堆转储快照</p>\n<blockquote>\n<p>The jmap command prints shared object memory maps or heap memory details of a specified process,corefile, or remote debug server.</p>\n</blockquote>\n<p>(2) 打印出堆内存相关信息</p>\n<p>jmap\t -heap\t PID</p>\n<p>jinfo \t-flag\t UsePSAdaptiveSurvivorSizePolicy\t 35352</p>\n<p>-XX: SurvivorRatio=8</p>\n</li>\n</ul>\n<h3 id=\"jvm性能优化指南\"><a class=\"anchor\" href=\"#jvm性能优化指南\">#</a> JVM 性能优化指南</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220907173816272.png\" class=\"\" title=\"image-20220907173816272\">\n<h3 id=\"未完成-5\"><a class=\"anchor\" href=\"#未完成-5\">#</a> —————————— 未完成</h3>\n<h1 id=\"数据库\"><a class=\"anchor\" href=\"#数据库\">#</a> 数据库</h1>\n<h3 id=\"数据库存储引擎有哪些\"><a class=\"anchor\" href=\"#数据库存储引擎有哪些\">#</a> 数据库存储引擎有哪些</h3>\n<p>Myisam、Innodb</p>\n<h3 id=\"myisam和innodb有什么区别\"><a class=\"anchor\" href=\"#myisam和innodb有什么区别\">#</a> Myisam 和 Innodb 有什么区别</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">区别</th>\n<th style=\"text-align:center\">MyISAM</th>\n<th style=\"text-align:center\">InnoDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据结构</td>\n<td style=\"text-align:center\">.frm 存储表定义 <br/>.MYD  存储数据文件<br/>.MYI  存储索引文件</td>\n<td style=\"text-align:center\">.frm 存储表定义<br/>.ibd 存储数据和索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">存储空间</td>\n<td style=\"text-align:center\">MyISAM<strong> 可被压缩，存储空间较小</strong><br/>支持三种存储：静态表 [默认]、动态表、压缩表</td>\n<td style=\"text-align:center\">InnoDB<em><strong> 需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引</strong></em>。InnoDB 所在的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间）<br/>InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">事务的支持</td>\n<td style=\"text-align:center\">MyISAM 强调的是性能，每次查询具有原子性，其执行速度比 Innodb 类型更快，<br/>但是<strong>不提供事务支持</strong>。</td>\n<td style=\"text-align:center\">InnoDB 除了<em><strong>提供事务支持</strong></em>和外部键等高级数据库功能。还具有事务提交（commit）、回滚（rollback）和崩溃修复能力（crach recovery capabilities）等这些事务安全（transaction-safe ACID compliant）型表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">锁的支持</td>\n<td style=\"text-align:center\">如果只是执行大量的查询，MyISAM 是更好的选择。MyISAM 在<strong>增删</strong>的时候需要<strong>锁定整个表格</strong>，效率会低一些</td>\n<td style=\"text-align:center\">innoDB 支持行级锁，<em><strong>删除插入</strong></em>的时候只需要<em><strong>锁定操作行</strong></em>就行。如果有大量的插入、修改删除操作，使用 InnoDB 性能能会更高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查询效率</td>\n<td style=\"text-align:center\"><strong>高</strong><br>支持全文索引</td>\n<td style=\"text-align:center\"><em><strong>低</strong></em><br/>不支持全文索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">外键的支持</td>\n<td style=\"text-align:center\">MyISAM<strong> 不支持外键</strong></td>\n<td style=\"text-align:center\"><em>支持外键</em></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"如何选择数据库引擎\"><a class=\"anchor\" href=\"#如何选择数据库引擎\">#</a> 如何选择数据库引擎？</h3>\n<p>1、如果需要支持事务，选择 InnoDB，不需要事务则选择 MyISAM。</p>\n<p>2、如果大部分表操作都是查询，选择 MyISAM，有写又有读选 InnoDB。</p>\n<p>3、如果系统崩溃导致数据难以恢复，且成本高，不要选择 MyISAM。</p>\n<h3 id=\"三范式是什么\"><a class=\"anchor\" href=\"#三范式是什么\">#</a> 三范式是什么</h3>\n<p>第一范式：列不可再分</p>\n<p>第二范式：行可以唯一区分，主键约束</p>\n<p>第三范式：表的非主属性不能依赖与其他表的非主属性  外键约束</p>\n<p>简单来说，第一范式就是让属性原子化，不可再分；第二范式就是让数据具有主属性从而产生唯一标识（特别是为了标识有联合主键的情况）；第三范式就是表的非主属性不能依赖与其他表的非主属性，也可以说是表中的属性不能有依赖关系</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220714214608165.png\" class=\"\" title=\"image-20220714214608165\">\n<h3 id=\"什么是事务有哪些特点\"><a class=\"anchor\" href=\"#什么是事务有哪些特点\">#</a> 什么是事务，有哪些特点</h3>\n<p>事务是用来维护数据库完整性的，具体体现就是多条 sql 语句，要么全部成功，要么全部失败。</p>\n<p>特点：<mark>ACID</mark></p>\n<p>A:（原子性 Atomicity）、C: 一致性（Consistency）、I：隔离性（Isolation）、D：持久性（Durability）</p>\n<p>1) 原子性<br />\n原子是自然界最小的颗粒，具有不可再分的特性</p>\n<ol start=\"2\">\n<li>\n<p>一致性<br />\n一致性是指事务执行的结果必须使数据库从一个一致性状态，变到另一个一致性状态。</p>\n</li>\n<li>\n<p>隔离性<br />\n隔离性是指各个事务的执行互不干扰</p>\n</li>\n</ol>\n<p>4) 持久性<br />\n持久性指事务一旦提交，对数据所做的任何改变，都要记录到永久存储器中</p>\n<h3 id=\"事务的隔离级别有哪些\"><a class=\"anchor\" href=\"#事务的隔离级别有哪些\">#</a> 事务的隔离级别有哪些</h3>\n<p>由低到高：</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220714221905692.png\" class=\"\" title=\"image-20220714221905692\">\n<p><strong>READ UNCOMMITTED（读未提交）</strong></p>\n<p>​\t在这个隔离级别，所有事务都可以看到未提交事务的执行结果。在这种隔离级别上，可能会产生很多问题。所以这种隔离级别很少用于实际应用，而且它的性能也没有比其他性能好很多，而别的级别还有其他的优点。读取未提交数据，也被称为 “脏读”。</p>\n<p><strong>READ COMMITTED（读已提交）</strong></p>\n<p>​\t读已提交这种隔离级别是大多数数据库系统默认的隔离级别（但 mysql 默认的隔离级别却不是这种），满足了隔离的最早简单定义：一个事务开始时，只能看见已经提交事务所做的改变，一个事务从开始到提交前，所做的任何数据改变都是不可见的，除非已经提交。这种隔离级别也支持所谓的不可重复读。这意味着用户运行同一个语句两次，看到的结果是不同的。</p>\n<p><strong>REPEATABLE READ（可重复读）</strong></p>\n<p>​\tmysql 数据库默认的隔离级别。该级别解决了 READ UNCOMMITTED 导致的问题。它保证了同一事务的多个实例在并发读取事务时，会看到同样的数据行。不过这会导致另外一个问题 “幻读”。InnoDB 和 Falcon 存储引擎通过多版本并发控制解决了幻读问题。</p>\n<p><strong>SERIALIZABLE（可串行化）</strong></p>\n<p>​\t该隔离级别是最高的隔离级别。它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简而言之：SERIALIZABLE 是在每个读的数据行加锁，在这个级别上可能导致大量的超时和锁竞争现象，实际应用中很少使用这个级别，但如果用户的应用为了数据的稳定性，需要强制减少并发，也可以选择这种隔离级别。</p>\n<h3 id=\"并发事务带来哪些问题\"><a class=\"anchor\" href=\"#并发事务带来哪些问题\">#</a> 并发事务带来哪些问题？</h3>\n<p><strong>脏读（Dirty read）</strong></p>\n<p>​\t当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是 “脏数据”，依据 “脏数据” 所做的操作可能是不正确的。</p>\n <img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220714222508260.png\" class=\"\" title=\"image-20220714222508260\">\n<p><strong>不可重复读（Unrepeatableread）</strong></p>\n<p>​\t指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>\n <img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220714222512979.png\" class=\"\" title=\"image-20220714222512979\">\n<p><strong>幻读 （Phantom read）</strong></p>\n<p>幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n <img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220714222518876.png\" class=\"\" title=\"image-20220714222518876\">\n<h3 id=\"不可重复度和幻读区别\"><a class=\"anchor\" href=\"#不可重复度和幻读区别\">#</a> 不可重复度和幻读区别？</h3>\n<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<p>解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>\n<h3 id=\"sql优化手段有哪些\"><a class=\"anchor\" href=\"#sql优化手段有哪些\">#</a> SQL 优化手段有哪些？</h3>\n<p>1、查询语句中不要使用 select *</p>\n<p>2、尽量减少子查询，使用关联查询（left join,right join,inner join）替代</p>\n<p>3、减少使用 IN 或者 NOT IN , 使用 exists，not exists 或者关联查询语句替代</p>\n<p>4、or 的查询尽量用 union 或者 union all 代替 (在确认没有重复数据或者不用剔除重复数据时，union all 会更好)</p>\n<p>5、应尽量避免在 where 子句中使用！= 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n<p>6、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： select id from t where num is null 可以在 num 上设置默认值 0，确保表中 num 列没有 null 值，然后这样查询： select id from t where num=0</p>\n<h3 id=\"mysql常见的日志有哪些分别起到了什么作用\"><a class=\"anchor\" href=\"#mysql常见的日志有哪些分别起到了什么作用\">#</a> MySQL 常见的日志有哪些，分别起到了什么作用</h3>\n<ol>\n<li>bin log ：数据恢复、主从复制</li>\n</ol>\n<p>MySQL Server 层也有一个日志文件叫做 Binlog ，它可以被所有的存储引擎使用。</p>\n<p>bin log 以事件的形式记录了所有的 DDL 和 DML 语句（因为他记录的是操作而不是数据值），可以用做主从复制和数据恢复</p>\n<ol start=\"2\">\n<li>\n<p>relay log ：中介日志</p>\n</li>\n<li>\n<p>redo log</p>\n<p>记录修改后的值，属于物理日志</p>\n<p>redo log 的大小事固定的，前面的内容会被覆盖，所以不能用于数据回滚 / 数据恢复</p>\n<p>redo log 是 InnoDB 存储引擎实现的，并不是所有引擎都有</p>\n</li>\n</ol>\n<h3 id=\"什么是buffer-pool\"><a class=\"anchor\" href=\"#什么是buffer-pool\">#</a> 什么是 Buffer Pool</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220909103813728.png\" class=\"\" title=\"image-20220909103813728\">\n<h3 id=\"buffer-pool-内存淘汰策略\"><a class=\"anchor\" href=\"#buffer-pool-内存淘汰策略\">#</a> Buffer pool 内存淘汰策略</h3>\n<p>冷热分区的 LRU 策略</p>\n<p>冷热分区比：5:3</p>\n<p>数据一进来先进入到冷区的头部，默认在 1000ms 之后如果再次访问，就会将他放入到热区</p>\n<h3 id=\"什么是hash索引\"><a class=\"anchor\" href=\"#什么是hash索引\">#</a> 什么是 hash 索引</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220909104250912.png\" class=\"\" title=\"image-20220909104250912\">\n<p>不适合做范围查找，innodb 不支持 hash 索引</p>\n<h3 id=\"mysql为什么要用b数做索引\"><a class=\"anchor\" href=\"#mysql为什么要用b数做索引\">#</a> MySQL 为什么要用 B + 数做索引</h3>\n<ol>\n<li>B + 树能显著的减少 IO 次数，提高效率</li>\n<li>B + 树的查询效率更加稳定，因为所有的数据都放在了叶子上</li>\n<li>B + 树能提高范围查询的效率，因为叶子结点指向下一个叶子结点</li>\n</ol>\n<h3 id=\"数据库优化什么是数据库索引有哪些类型\"><a class=\"anchor\" href=\"#数据库优化什么是数据库索引有哪些类型\">#</a> 数据库优化，什么是数据库索引，有哪些类型</h3>\n<h3 id=\"谈一下你对数据库btree的理解\"><a class=\"anchor\" href=\"#谈一下你对数据库btree的理解\">#</a> 谈一下你对数据库 b+tree 的理解</h3>\n<h3 id=\"聚集索引和非聚集索引的区别\"><a class=\"anchor\" href=\"#聚集索引和非聚集索引的区别\">#</a> 聚集索引和非聚集索引的区别</h3>\n<h3 id=\"在日常工作中是如何进行数据库优化的\"><a class=\"anchor\" href=\"#在日常工作中是如何进行数据库优化的\">#</a> 在日常工作中是如何进行数据库优化的</h3>\n<h3 id=\"请列举几个索引失效的场景\"><a class=\"anchor\" href=\"#请列举几个索引失效的场景\">#</a> 请列举几个索引失效的场景</h3>\n<h3 id=\"数据库锁的机制\"><a class=\"anchor\" href=\"#数据库锁的机制\">#</a> 数据库锁的机制</h3>\n<h3 id=\"在遇到死锁情况如何处理\"><a class=\"anchor\" href=\"#在遇到死锁情况如何处理\">#</a> 在遇到死锁情况如何处理</h3>\n<h3 id=\"mysql和oracle的区别\"><a class=\"anchor\" href=\"#mysql和oracle的区别\">#</a> mysql 和 oracle 的区别</h3>\n<h3 id=\"数据库的根本特点\"><a class=\"anchor\" href=\"#数据库的根本特点\">#</a> 数据库的根本特点</h3>\n<p>1、数据结构化 数据库系统实现了整体数据的结构化，这是数据库的最主要的特征之一</p>\n<p>2、数据的共享性高，冗余度低，易扩充 因为数据是面向整体的，所以数据可以被多个用户、多个应用程序共享使用</p>\n<p>3、数据独立性高 数据独立性包括数据的物理独立性和逻辑独立性。</p>\n<p>4、数据由 DBMS 统一管理和控制 数据库的共享是并发的 (concurrency) 共享，即多个用户可以同时存取数据库中的数据，甚至可以同时存取数据库中的同一个数据；</p>\n<h3 id=\"数据库中数据共享是指\"><a class=\"anchor\" href=\"#数据库中数据共享是指\">#</a> 数据库中数据共享是指</h3>\n<p>多个应用、多种语言、多个用户共享数据</p>\n<h3 id=\"数据库中产生数据不一致\"><a class=\"anchor\" href=\"#数据库中产生数据不一致\">#</a> 数据库中产生数据不一致</h3>\n<p>1. 并发控制不当</p>\n<p>2. 数据冗余</p>\n<p>3. 各种故障，错误</p>\n<p>第一种往往是由于重复存放的数据未能进行一致性更新造成的</p>\n<p>第二种情况是由于多用户共享数据库，而更新操作未能保持同步进行引起的</p>\n<p>第三种是由于某种原因（硬件故障或软件故障等）而造成数据丢失或数据损坏等</p>\n<h3 id=\"运算\"><a class=\"anchor\" href=\"#运算\">#</a> 运算</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/c484ce59eba713b93d75a1381901dabe.png\" class=\"\" title=\"img\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/9606dddddf13fb7dafa3119aa768e7a4.png\" class=\"\" title=\"数据库之运算符详解_数据库_18\">\n<h4 id=\"运算优先级\"><a class=\"anchor\" href=\"#运算优先级\">#</a> 运算优先级</h4>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/2b23723e1f54716522beeb85047554c2.png\" class=\"\" title=\"数据库之运算符详解_mysql_23\">\n<h3 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h3>\n<ol>\n<li>undo 、redo、binlog</li>\n<li>双写一致性</li>\n<li>mysql 的索引</li>\n<li>回表问题和覆盖索引</li>\n<li>MVCC 以及原理</li>\n<li>分库分表</li>\n<li></li>\n</ol>\n<h3 id=\"未完成-6\"><a class=\"anchor\" href=\"#未完成-6\">#</a> —————————— 未完成</h3>\n<h1 id=\"javaee\"><a class=\"anchor\" href=\"#javaee\">#</a> JavaEE</h1>\n<p>Tomcat 有哪几种 connector 运行模式</p>\n<p>Tomcat 有几种部署方式</p>\n<p>简述 Servlet 的生命周期</p>\n<p>JSP 和 Servlet 的区别是什么</p>\n<p>四大作用域有哪些</p>\n<p>9 大内置对象有哪些</p>\n<p>get 请求和 post 请求的区别</p>\n<p>forward 和 redirect 的区别</p>\n<p>tomcat 容器是如何创建 Servlet 类实例，用到了什么原理</p>\n<p>什么是 Cookie，Session</p>\n<p>Cookie 和 Session 的区别是啥</p>\n<p>cookie 禁用了 Session 是否可用</p>\n<p>Servlet 是否线程安全，如何保证线程安全</p>\n<h3 id=\"未完成-7\"><a class=\"anchor\" href=\"#未完成-7\">#</a> —————————— 未完成</h3>\n<h2 id=\"servlet\"><a class=\"anchor\" href=\"#servlet\">#</a> Servlet</h2>\n<h3 id=\"servlet中-forward-和-redirct-的区别\"><a class=\"anchor\" href=\"#servlet中-forward-和-redirct-的区别\">#</a> Servlet 中 forward () 和 redirct () 的区别？</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">forward</th>\n<th style=\"text-align:center\">redirct</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">浏览器地址栏</td>\n<td style=\"text-align:center\">请求转发是一种服务器的行为，不会变化</td>\n<td style=\"text-align:center\">重定向是一种浏览器行为，会发生变化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">请求的参数</td>\n<td style=\"text-align:center\">可以从源组件传递到目标组件<br/>始终都是一个 request 和 response</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">请求对象和响应对象</td>\n<td style=\"text-align:center\">没有重新创建，而是传递给了目标组件</td>\n<td style=\"text-align:center\">再次产生，请求中的参数是不会携带<br/>也可以携带一点简单信息，通过 url 的拼接，如：**?name=zhangsan</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">页面跳转</td>\n<td style=\"text-align:center\">可以<br/>能帮助我们访问 WEB-INF 中的资源</td>\n<td style=\"text-align:center\">可以<br/>不能帮助我们访问 WEB-INF 中的资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">范围</td>\n<td style=\"text-align:center\">只能转发给当前项目的内部资源</td>\n<td style=\"text-align:center\">可以定向到外部资源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"servlet的生命周期\"><a class=\"anchor\" href=\"#servlet的生命周期\">#</a> Servlet 的生命周期</h3>\n<p>阶段           次数        时机</p>\n<p>创建          1 次          第一次请求</p>\n<p>初始化       1 次          实例化之后</p>\n<p>执行服务    多次        每次请求</p>\n<p>销毁           1 次         停止服务</p>\n<h3 id=\"未完成-8\"><a class=\"anchor\" href=\"#未完成-8\">#</a> —————————— 未完成</h3>\n<h1 id=\"mybatis\"><a class=\"anchor\" href=\"#mybatis\">#</a> MyBatis</h1>\n<h3 id=\"什么是mybatis\"><a class=\"anchor\" href=\"#什么是mybatis\">#</a> 什么是 Mybatis</h3>\n<p>Mybatis 是一个半 ORM 框架（对象关系映射）——》Hibernate 全 ORM 框架 ——》都是基于 JDBC 封装的框架</p>\n<p>简化持久层开发</p>\n<p>我们只需要专注于 SQL 语句，不用再去理会获取驱动；连接</p>\n<p>为什么说是半自动，因为需要手动编写 sql 来完成</p>\n<p>使用 Hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的</p>\n<h3 id=\"mybatis优点\"><a class=\"anchor\" href=\"#mybatis优点\">#</a> Mybatis 优点</h3>\n<ol>\n<li>基于 SQL 语句的编程，相对来说更加灵活</li>\n<li>和 JDBC 相比，减少了 50% 的代码量</li>\n<li>可以很好地和各种数据库兼容</li>\n<li>能够和 Spring 很好地兼容</li>\n<li>提供了非常灵活的标签，动态 SQL 语句</li>\n</ol>\n<h3 id=\"mybatis的缺点\"><a class=\"anchor\" href=\"#mybatis的缺点\">#</a> Mybatis 的缺点</h3>\n<ol>\n<li>SQL 语句的编写工作量大。</li>\n<li>SQL 语句要和具体的数据库依赖很大，导致数据库的移植性很差，不能随意的切换数据库</li>\n</ol>\n<h3 id=\"和-的区别\"><a class=\"anchor\" href=\"#和-的区别\">#</a> $ 和 # 的区别</h3>\n<p>#{} 是预编译处理，在 Mybatis 出阿里的时候，会替换为？，然后调用 PreparedSatement 的 set () 方法对？赋值</p>\n<p>${} Mybatis 处理的时候直接替换，会有 SQL 注入的风险</p>\n<h3 id=\"属性名和字段名不一致\"><a class=\"anchor\" href=\"#属性名和字段名不一致\">#</a> 属性名和字段名不一致</h3>\n<ol>\n<li>查询的 SQL 语句我们可以通过别名处理</li>\n<li>通过 resultMap 来设置字段和属性的映射关系</li>\n</ol>\n<h3 id=\"如何获取自动生成的主键\"><a class=\"anchor\" href=\"#如何获取自动生成的主键\">#</a> 如何获取自动生成的主键</h3>\n<p>在使用 insert 标签时候，设置 2 个属性，</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>insert</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">useGeneratedKeys</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">keyProperty</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>insert</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"mybatis使用了那些设计模式\"><a class=\"anchor\" href=\"#mybatis使用了那些设计模式\">#</a> Mybatis 使用了那些设计模式</h3>\n<ol>\n<li>缓存模块：装饰器模式</li>\n<li>日志模块：适配器模式，代理模式</li>\n<li>SqlSessionFactory：工厂模式</li>\n<li>Mapper 接口：代理模式</li>\n<li>SQLSessionFactoryBuilder ：建造者模式</li>\n<li>......</li>\n</ol>\n<h3 id=\"mybatis映射文件中处理curd操作的标签以外还有那些标签\"><a class=\"anchor\" href=\"#mybatis映射文件中处理curd操作的标签以外还有那些标签\">#</a> Mybatis 映射文件中处理 CURD 操作的标签以外还有那些标签</h3>\n<p>sql 标签：SQL 代码片段</p>\n<p>cache：缓存</p>\n<p>cache-ref</p>\n<p>resultMap：结果集映射</p>\n<p>全局配置文件中有哪些标签</p>\n<p>peoperties</p>\n<p>settings</p>\n<p>typeHandler</p>\n<p>interceprots</p>\n<p>elements</p>\n<p>mappers</p>\n<p>...</p>\n<h3 id=\"mybatis的分页\"><a class=\"anchor\" href=\"#mybatis的分页\">#</a> Mybatis 的分页</h3>\n<p>分页：逻辑分页；物理分页</p>\n<p>逻辑分页：不是真正的分页，RowBounds 来分页</p>\n<p>物理分页：我们都是通过拦截器来实现的分页</p>\n<h3 id=\"mybatis都有哪些executor执行器它们之间的区别是什么\"><a class=\"anchor\" href=\"#mybatis都有哪些executor执行器它们之间的区别是什么\">#</a> Mybatis 都有哪些 Executor 执行器？它们之间的区别是什么？</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/b9baa56b1d94fa4a9c913430deef968d.png\" class=\"\" title=\"img\">\n<p>Mybatis 有三种基本的 Executor 执行器，<mark>SimpleExecutor</mark>、<mark>ReuseExecutor</mark>、 <mark>BatchExecutor。</mark></p>\n<p>SimpleExecutor:</p>\n<blockquote>\n<p>SQL 的基本处理，当执行增删改查时，该类获取数据库连接，创建 PrepareStatement 或者 Statement 对象，执行<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1TUUwlRTglQUYlQUQlRTUlOEYlQTUmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\"> SQL 语句</span>，最后将数据库返回结果转化为设定的对象</p>\n</blockquote>\n<p>ReuseExecutor：</p>\n<blockquote>\n<p>​\t执行 update 或 select，以 sql 作为 key 查找 Statement 对象 (在 statementMap 对象中找)，存在就使 用，不存在就创建，用完后，不关闭 Statement 对象，而是放置于 Map&lt;String, Statement &gt; 内，供下一次使用。简言之，就是重复使用 Statement 对象。</p>\n</blockquote>\n<p>BatchExecutor：</p>\n<blockquote>\n<p>​\t执行 update（没有 select，mybatis 认为 delete 和 insert 都是 update，JDBC 批处理不支持 select），将所有 sql 都添 加到批处理中（addBatch ()），等待统一执行（executeBatch ()），它缓存了多个 Statement 对象，每个 Statement 对象都是 addBatch () 完毕后，等待逐一执行 executeBatch () 批处理。与 JDBC 批处理相同。</p>\n</blockquote>\n<p>作用范围：Executor 的这些特点，都严格限制在 SqlSession 生命周期范围内。</p>\n<h3 id=\"mybatis中mapper接口一致性问题\"><a class=\"anchor\" href=\"#mybatis中mapper接口一致性问题\">#</a> Mybatis 中 Mapper 接口一致性问题</h3>\n<ol>\n<li>Mapper 接口名要和 Mapper.xml 的文件名一致</li>\n<li>Mapper 接口的方法名要和 mapper.xml 中存在相同的唯一 id</li>\n<li>Mapper 接口的返回类型要和 mapper.xml 中定义的 sql 标签的返回类型一致</li>\n<li>mapper.xml 的 namespace 要和 Mapper 接口的全路径名一致</li>\n</ol>\n<h3 id=\"介绍一下mybatis的工作原理\"><a class=\"anchor\" href=\"#介绍一下mybatis的工作原理\">#</a> 介绍一下 Mybatis 的工作原理</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/MyBatis%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86-1661130135150.png\" class=\"\" title=\"MyBatis工作原理\">\n<ol>\n<li>Mybatis 启动加载</li>\n</ol>\n<p>SqlSessionFactory：会完成全局配置文件和映射文件的加载解析操作，然后回把相关的信息保存到 Configuration 对象中，创建的 SqlSessionFactory 对象的实现是 DeafaultSsqlSession 对象。</p>\n<p>SqlSession： 通过 SqlSessionFactory 获取 SqlSeesion 对象，创建的具体的是烈士 DefaultSqlSession</p>\n<ol start=\"2\">\n<li>Mybatis 如何处理请求</li>\n</ol>\n<p>SqlSession 中给提供了处理请求的方法 select update delete save 方法</p>\n<p>调用对应的 executor 处理，如果有配置缓存处理 -》先走二级缓存，然后再走一级缓存，如果缓存中都没有查询到对应的数据，才会走数据库操作，交给 StatementHandler 来处理，通过 ParamenterHandler 处理 SQL 中的占位符，通过 ResultSetHandler 处理结果集的映射。</p>\n<h3 id=\"mybatis的缓存设计\"><a class=\"anchor\" href=\"#mybatis的缓存设计\">#</a> Mybatis 的缓存设计</h3>\n<ol>\n<li>在 Mybatis 中有一个单独的缓存模块 ——》用到了装饰器模式</li>\n<li>缓存的使用 ，cache 标签 ，<cache/></li>\n<li>MyBatis 中支持的缓存分类\n<ol>\n<li>一级缓存：基于会话</li>\n<li>二级缓存：基于会话</li>\n<li>三级缓存：分布式</li>\n</ol>\n</li>\n</ol>\n<p>在 Mybatis 中的缓存执行顺序：二级缓存 ——》一级缓存 ——》数据库查询</p>\n<h3 id=\"mybatis三级缓存\"><a class=\"anchor\" href=\"#mybatis三级缓存\">#</a> mybatis 三级缓存</h3>\n<p>一级缓存：内存上的缓存，<strong>存储在 SQLSession</strong> 中，在<strong> Commit 和增删改的时候自动清空缓存</strong>。<strong>默认开启</strong>。实体类<strong>不需要</strong>实现<strong>序列化</strong>接口</p>\n<p>二级缓存：以 <strong>namespace 为标记的缓存</strong>，可以是<strong>由一个 SqlSessionFactory 创建的 SqlSession 之间共享缓存数据</strong>。默认并不开启。要求实体类<strong>必须实现序列化</strong>接口</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220715163809809.png\" class=\"\" title=\"image-20220715163809809\">\n<p>三方缓存：我们系统为了提高系统并发和性能，一般对系统进行分布式部署（集群部署方式）不适用分布缓存， 缓存的数据在各个服务单独存储，不方便系统开发。所以要使用分布式缓存对缓存数据进行集中管理</p>\n<h3 id=\"defaultsqlsession是线程安全的吗\"><a class=\"anchor\" href=\"#defaultsqlsession是线程安全的吗\">#</a> DefaultSqlSession 是线程安全的吗</h3>\n<p>他是线程不安全的，我们在工作中都不会单独的使用 DefaultSqlSession，而是整合 Spring 框架来使用。</p>\n<p>那 Spring 是如何解决这个数据安全问题的？</p>\n<p>线程不安全的原因是多个线程操作同一个对象，而这个对象被定义为一个成员变量，解决的方案就是吧这个成员变量作为一个局部变量，让多个线程不能同时操作就可以了</p>\n<p>创建了一个 SqiSessionTemplate 模板对象，定义了数据库操作的相关的方法，本质上是通过代理对象获取了 DefaultSqlSession 对象来执行，而且把 DefaultSqlSession 对象声明在了局部变量中，从而解决了线程不安全的问题。</p>\n<h1 id=\"spring\"><a class=\"anchor\" href=\"#spring\">#</a> Spring</h1>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220822092829878.png\" class=\"\" title=\"image-20220822092829878\">\n<h3 id=\"什么是spring\"><a class=\"anchor\" href=\"#什么是spring\">#</a> 什么是 Spring</h3>\n<p>Spring 是个 java 企业级应用的开源开发框架。Spring 主要用来开发 Java 应用，但是有些<mark>扩展</mark>是针对构建 J2EE 平台的 web 应用。Spring 框架目标是简化 Java 企业级应用开发，并通过 POJO 为基础的编程模型促进良好的编程习惯。</p>\n<p>框架 ——》容器 ——》生态</p>\n<h3 id=\"项目中为什么使用spring框架\"><a class=\"anchor\" href=\"#项目中为什么使用spring框架\">#</a> 项目中为什么使用 Spring 框架？</h3>\n<p>这么问的话，就直接说 Spring 框架的好处就可以了。比如说 Spring 有以下特点:</p>\n<p><strong>轻量</strong>： Spring 是轻量的，基本的版本大约 2MB。</p>\n<p><strong>控制反转</strong>：Spring 通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。</p>\n<p><strong>面向切面的编程 (AOP)</strong>：Spring 支持面向切面的编程，并且把应用业务逻辑和系统服务分开。</p>\n<p><strong>容器</strong>：Spring 包含并管理应用中对象的生命周期和配置。</p>\n<p><strong>MVC 框架</strong>： Spring 的 WEB 框架是个精心设计的框架，是 Web 框架的一个很好的替代品。</p>\n<p><strong>事务管理</strong>：Spring 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务 (JTA)。</p>\n<p><strong>异常处理</strong>： Spring 提供方便的 API 把具体技术相关的异常 (比如由 JDBC，Hibernate or JDO 抛出的）转化为一致的 unchecked 异常。</p>\n<h3 id=\"autowired-和resource的区别\"><a class=\"anchor\" href=\"#autowired-和resource的区别\">#</a> Autowired 和 Resource 的区别</h3>\n<p>Resource 和 @Autowired 都是做 bean 的注入时使用，其实 @Resource 并不是 Spring 的注解，它的包是 javax.annotation.Resource，需要导入，但是 Spring 支持该注解的注入。</p>\n<p>1、共同点<br />\n两者都可以写在字段和 setter 方法上。两者如果都写在字段上，那么就不需要再写 setter 方法。</p>\n<p>2、不同点</p>\n<p>(1)@Autowired</p>\n<p>@Autowired 为 Spring 提供的注解，需要导入包 org.springframework.beans.factory.annotation.Autowired; 只按照 byType 注入。</p>\n<p>@Autowired 注解是按照类型 (byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许 null 值，可以设置它的 required 属性为 false。</p>\n<p>如果我们想使用按照名称 (byName) 来装配，可以结合 @Qualifier 注解一起使用。</p>\n<p>(2)@Resource</p>\n<p>@Resource 默认按照 ByName 自动注入，由 J2EE 提供，需要导入包 javax.annotation.Resource。</p>\n<p>@Resource 有两个重要的属性: name 和 type，而 Spring 将 @Resource 注解的 name 属性解析为 bean 的名字，而 type 属性则解析为 bean 的类型。所以，如果使用 name 属性，则使用 byName 的自动注入策略，而使用 type 属性时则使用 byType 自动注入策略。如果既不制定 name 也不制定 type 属性，这时将通过反射机制使用 byName 自动注入策略。</p>\n<p>注：最好是将 @Resource 放在 setter 方法上，因为这样更符合面向对象的思想，通过 set、get 去操作属性，而不是直接去操作属性。<br />\n@Resource 装配顺序:</p>\n<ol>\n<li>如果同时指定了 name 和 type，则从 Spring 上下文中找到唯一匹配的 bean 进行装配，找不到则抛出异常。</li>\n<li>如果指定了 name，则从上下文中查找名称 (id）匹配的 bean 进行装配，找不到则抛出异常。</li>\n<li>如果指定了 type，则从上下文中找到类似匹配的唯一 bean 进行装配，找不到或是找到多个，都会抛出异常。</li>\n<li>④如果既没有指定 name，又没有指定 type，则自动按照 byName 方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</li>\n</ol>\n<p>@Resource 的作用相当于 @Autowired，只不过 @Autowired 按照 byType 自动注入。</p>\n<h3 id=\"依赖注入的方式有哪几种\"><a class=\"anchor\" href=\"#依赖注入的方式有哪几种\">#</a> 依赖注入的方式有哪几种</h3>\n<p>一、构造器注入</p>\n<p>将被依赖对象通过构造函数的参数注入给依赖对象，并且在初始化对象的时候注入。</p>\n<p>优点：对象初始化完成后便可获得可使用的对象。<br />\n缺点：当需要注入的对象很多时，构造器参数列表将会很长；不够灵活。若有多种注入方式，每种方式只需注入指定几个依赖，那么就需要提供多个重载的构造函数，麻烦。</p>\n<p>二、setter 方法注入</p>\n<p>IOC Service Provider 通过调用成员变量提供的 setter 函数将被依赖对象注入给依赖类。</p>\n<p>优点：灵活，可以选择性地注入需要的对象。<br />\n缺点：依赖对象初始化完成后由于尚未注入被依赖对象，因此还不能使用。</p>\n<p>三、接口注入</p>\n<p>依赖类必须要实现指定的接口，然后实现该接口中的一个函数，该函数就是用于依赖注入。该函数的参数就是要注入的对象。</p>\n<p>优点：接口注入中，接口的名字、函数的名字都不重要，只要保证函数的参数是要注入的对象类型即可。</p>\n<p>缺点：侵入性太强，不建议使用</p>\n<p>PS: 什么是侵入行？如果类 A 要使用别人提供的一个功能，若为了使用这功能，需要在自己的类中增加额外的代码，这就是侵入性。</p>\n<h3 id=\"说一下你对spring核心模块的理解\"><a class=\"anchor\" href=\"#说一下你对spring核心模块的理解\">#</a> 说一下你对 spring 核心模块的理解</h3>\n<p>Spring 是一个轻量级的 loC 和 AOP 容器框架。是为 Java 应用程序提供基础性服务的一套框架，目的是用天简化企业应用程序的开发，它使得开发者只需要关心业务需求。常见的配置方式有三种：基于 XML 的配置、基于注解的配置、基于 Java 的配置。</p>\n<p>主要由以下几个模块组成：入口</p>\n<p>Spring Core: 核心类库，提供 IOC 服务；</p>\n<p>Spring Context: 提供框架式的 Bean 访问方式，以及企业级功能 (JNDI、定时任务等);Spring AOP: AOP 服务；</p>\n<p>Spring DAO: 对 JDBC 的抽象，简化了数据访问异常的处理；Spring ORM: 对现有的 ORM 框架的支持；</p>\n<p>Spring Web: 提供了基本的面向 Web 的综合特性，例如多方文件上传；</p>\n<p>Spring MVC: 提供面向 Web 应用的 Model-View-Controller 实现。</p>\n<h3 id=\"说说你对spring的ioc是怎么理解的\"><a class=\"anchor\" href=\"#说说你对spring的ioc是怎么理解的\">#</a> 说说你对 Spring 的 IOC 是怎么理解的？</h3>\n<p>(1) IOC 就是控制反转，是指创建对象的控制权的转移。以前创建对象的主动权和时机是由自己把控的，而现<br />\n在这种权力转移到 Spring 容器中，并由容器根据配置文件去创建实例和管理各个实例之间的依赖关系。对象与对象之间松散耦合，也利于功能的复用。DI 依赖注入，和控制反转是同一个概念的不同角度的描述，即应用程序在运行时依赖 loC 容器来动态注入对象需要的外部资源。</p>\n<p>(2) 最直观的表达就是，IOC 让对象的创建不用去 new 了，可以由 spring 自动生产，使用 java 的反射机制，根据配置文件在运行时动态的去创建对象以及管理对象，并调用对象的方法的。</p>\n<p>(3) Spring 的 IOC 有三种注入方式：构造器注入、setter 方法注入、根据注解注入。</p>\n<p><mark>IOC 让相互协作的组件保持松散的耦合，而 AOP 编程允许你把遍布于应用各层的功能分离出来形成可重用的功能组件</mark></p>\n<blockquote></blockquote>\n<h3 id=\"string的aop实现\"><a class=\"anchor\" href=\"#string的aop实现\">#</a> String 的 AOP 实现</h3>\n<p>​\t面向切面编程（AOP [Aspect Oriented Programming]）和面向对象编程（OOP）类似，也是一种编程模式。AOP 是通过<strong>预编译</strong>方式和<strong>运行期间动态代理</strong>实现程序功能和统一维护的一种技术。Spring AOP 是基于 AOP 编程模式的一个框架，它的使用有效减少了系统间的重复代码，达到了模块间的松耦合目的。</p>\n<p>​\tAOP 切面编程一般 ** 可以帮助我们在不修改现有代码的情况下，对程序的功能进行拓展，** 往往用于实现 <strong>日志处理</strong>，<strong> 权限控制</strong>，<strong>性能检测</strong>，<strong> 事务控制</strong>等，便于减少系统的重复代码，降低模块间的耦合度，有利于未来的可扩展性和可维护性</p>\n<p>​\tAOP 实现的原理就是<strong>动态代理</strong>，在<strong>有接口</strong>的情况下，<strong> 使用 JDK 动态代理</strong>，在<strong>没有接口</strong>的情况下<strong>使用 cglib 动态代理</strong>。</p>\n<p><strong>AOP 中的术语辨析</strong></p>\n<p><strong>1 连接点 Joint point:</strong><br />\n 类里面那些<font color=#FF0000><strong>可以被增强的方法</strong></font>, 这些方法称之为连接点<br />\n表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point</p>\n<p><strong>2 切入点 Pointcut:</strong><br />\n<font color=#FF0000><strong>实际被增强的方法</strong></font>, 称之为切入点<br />\n表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方</p>\n<p><strong>3 通知 Advice:</strong><br />\n 实际增强的逻辑部分称为通知 (<font color=#FF0000><strong>增加的功能</strong></font>)<br />\n Advice 定义了在 Pointcut 里面定义的程序点具体要做的操作，它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。<br />\n通知类型: 1 前置通知 2 后置通知 3 环绕通知 4 异常通知 5 最终通知</p>\n<p><strong>4 目标对象 Target：<font color=#FF0000>被增强功能的对象 (被代理的对象</font>)</strong><br />\n 织入 Advice 的目标对象</p>\n<p><strong>5 切面 Aspect： <font color=#FF0000>表现为功能相关的一些 advice 方法放在一起声明成的一个 Java 类</font></strong><br />\nAspect 声明类似于 Java 中的类声明，在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</p>\n<p><strong>6 织入 Weaving：</strong><br />\n<strong><font color=#FF0000>创建代理对象并实现功能增强的声明并运行过程</font></strong><br />\n将 Aspect 和其他对象连接起来，并创建 Adviced object 的过程</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220629184111567.png\" class=\"\" title=\"image-20220629184111567\">\n<p>当然也可以使用 AspectJ,SpringAOP 中已经集成了 AspectJ,AspectJ 应该算得上是 Java 生态系统中最完整的 AOP 框架了。使用 AOP 之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样可以大大简化代码量。我们需要增加新功能也方便，提高了系统的扩展性。日志功能、事务管理和权限管理等场景都用到了 AOP。</p>\n<h4 id=\"如何实现\"><a class=\"anchor\" href=\"#如何实现\">#</a> 如何实现？？？</h4>\n<ul>\n<li>静态 AOP 实现， AOP 框架在编译阶段对程序源代码进行修改，生成了静态的 AOP 代理类（生成的 *.class 文件已经被改掉了，需要使用特定的编译器），比如 AspectJ。</li>\n<li>动态 AOP 实现， AOP 框架在运行阶段对动态生成代理对象（在内存中以 JDK 动态代理，或 CGlib 动态地生成 AOP 代理类），如 SpringAOP。</li>\n</ul>\n<p><strong>1）JDK 的实现方式：</strong></p>\n<p>JDK 动态代理是通过 JDK 中的 java.lang.reflect.Proxy 类实现的。<br />\nproxy 结合 invocationHandler 。前提条件：被代理类需要实现某一个接口<br />\n原理：<br />\n前置知识（java 文件在编译器编译为 class 字节码，运行时加载对应类到方法区）<br />\n（1）运行期，根据被代理类，生成代理类的字节码，将被代理类包装到代理类中<br />\n（2）被代理类方法执行前后，插入统一处理逻辑<br />\n（3）使用的时候：使用代理类，不再使用被代理类（代理类中已经包裹了被代理类）</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/20210616175256885.png\" class=\"\" title=\"img\">\n<p><strong>2) CGLIB 的实现方式：</strong><br />\nCGLIB（Code Generation Library）是一个高性能开源的代码生成包，它被许多 AOP 框架所使用，其底层是通过使用一个小而快的字节码处理框架 ASM（Java 字节码操控框架）转换字节码并生成新的类。因此 CGLIB 要依赖于 ASM 的包，解压 Spring 的核心包 spring-core-3.2.2.RELEASE.jar。</p>\n<p>MethodInterceptor 完成方法执行前后的业务逻辑插入，再通过 ASM 字节码技术，生成代理类的字节码。<br />\n前置条件（被代理类不需要实现接口，但不能为 final 修饰）</p>\n<p><strong>Spring 框架代理时：会根据是否实现接口来决定使用哪一种动态代理。</strong></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/20210616180920375.png\" class=\"\" title=\"在这里插入图片描述\">\n<h3 id=\"spring-aop和aspectj-aop有什么区别\"><a class=\"anchor\" href=\"#spring-aop和aspectj-aop有什么区别\">#</a> Spring AOP 和 AspectJ AOP 有什么区别？</h3>\n<p>SpringAOP 是属于运行时增强，而 AspectlJ 是编译时增强。SpringAOP 基于代理 (Proxying)，而 AspectJ 基于字节码操作（BytecodeManipulation) 。</p>\n<p>SpringAOP 已经集成了 AspectJ，AspectJ 应该算得上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于<br />\n SpringAOP 功能更加强大，但是 SpringAOP 相对来说更简单。</p>\n<p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ，它比 SpringAOP 快很多。</p>\n<p><strong>在 SpringAOP 中，关注点和横切关注的区别是什么？</strong></p>\n<p>关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。</p>\n<p>那什么是连接点呢？连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个 AOP 切面，它实际上是个应用程序执行 SpringAOP 的位置。</p>\n<p>切入点是什么？切入点是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。</p>\n<p><strong>什么是通知呢？有哪些类型呢？</strong></p>\n<p>通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过 SpringAOP 框架触发的代码段。</p>\n<p>Spring 切面可以应用五种类型的通知:</p>\n<ul>\n<li>before: 前置通知，在一个方法执行前被调用。</li>\n<li>after: 在方法执行之后调用的通知，无论方法执行是否成功。</li>\n<li>after-returning: 仅当方法成功完成后执行的通知。</li>\n<li>after-throwing: 在方法抛出异常退出时执行的通知。</li>\n<li>around: 在方法执行之前和之后调用的通知。</li>\n</ul>\n<h3 id=\"静态代理和动态代理\"><a class=\"anchor\" href=\"#静态代理和动态代理\">#</a> 静态代理和动态代理</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vam95OTkvcC8xMDg2NTM5MS5odG1s\">https://www.cnblogs.com/joy99/p/10865391.html</span></p>\n<blockquote>\n<p>a</p>\n<p>a</p>\n<p>a</p>\n<p>a</p>\n</blockquote>\n<h3 id=\"string和springboot和springmvc的区别\"><a class=\"anchor\" href=\"#string和springboot和springmvc的区别\">#</a> String 和 Springboot 和 SpringMVC 的区别</h3>\n<h4 id=\"一-概念\"><a class=\"anchor\" href=\"#一-概念\">#</a> 一、概念</h4>\n<p><strong>1、Spring</strong></p>\n<p>Spring 是一个开源容器框架，可以接管 web 层，业务层，dao 层，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlOEMlODElRTQlQjklODUlRTUlQjElODImYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">持久层</span>的组件，并且可以配置各种 bean, 和维护 bean 与 bean 之间的关系。其核心就是控制反转 (IOC), 和面向切面 (AOP), 简单的说就是一个分层的轻量级开源框架。</p>\n<p><strong>2、SpringMVC</strong></p>\n<p>Spring <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1NVkMmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">MVC</span> 属于 SpringFrameWork 的后续产品，已经融合在 Spring Web Flow 里面。SpringMVC 是一种 web 层 mvc 框架，用于替代 servlet（处理 | 响应请求，获取表单参数，表单校验等。SpringMVC 是一个 MVC 的开源框架，SpringMVC=struts2+spring，springMVC 就相当于是 Struts2 加上 Spring 的整合。</p>\n<p><strong>3、SpringBoot</strong></p>\n<p>Springboot 是一个微服务框架，延续了 spring 框架的核心思想<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1JT0MmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\"> IOC</span> 和 AOP，简化了应用的开发和部署。Spring Boot 是为了简化 Spring 应用的创建、运行、调试、部署等而出现的，使用它可以做到专注于 Spring 应用的开发，而无需过多关注 XML 的配置。提供了一堆依赖打包，并已经按照使用习惯解决了依赖问题 —&gt; 习惯大于约定。</p>\n<h4 id=\"二-原理和结构\"><a class=\"anchor\" href=\"#二-原理和结构\">#</a> 二、原理和结构</h4>\n<p><strong>1、Spring 的原理和组成</strong></p>\n<p>Spring 为简化我们的开发工作，封装了一系列的开箱即用的组件功能模块，包括：Spring JDBC 、Spring MVC 、Spring Security、 Spring <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1BT1AmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">AOP</span> 、Spring ORM 、Spring Test 等。<strong>如下图：</strong></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/20200920135709418.jpg\" class=\"\" title=\"在这里插入图片描述\">\n<p><strong>简化的理解图：</strong></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/20200920135841872.jpg\" class=\"\" title=\"在这里插入图片描述\">\n<p><strong>2、SpringMVC 的原理和组成</strong></p>\n<p>从上图中可以看出：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1TcHJpbmdNVkMmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">SpringMVC</span> 是属于 SpringWeb 里面的一个功能模块（SpringWebMVC）。专门用来开发 SpringWeb 项目的一种 MVC 模式的技术框架实现。<br />\n<strong>其原理如下：</strong></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220810110921395.png\" class=\"\" title=\"image-20220810110921395\">\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/20200920140021102.jpg\" class=\"\" title=\"在这里插入图片描述\">\n<p>MVC：Model（模型）、VIew（视图）、Controller（控制器）；我们从开始接触并学习 javaWeb 开发就知道 MVC 这一种架构，如早起的 Sturts1、Sturts2 等。</p>\n<p><strong>3、SpringBoot 的原理和特性</strong></p>\n<p>Spring Boot 基本上是 Spring 框架的扩展，它消除了设置 Spring 应用程序所需的 XML 配置，为更快，更高效的开发生态系统铺平了道路。</p>\n<p>Spring Boot 中的一些特点：</p>\n<ol>\n<li>创建独立的 spring 应用。</li>\n<li>嵌入 Tomcat, JettyUndertow 而且不需要部署他们。</li>\n<li>提供的 “starters” poms 来简化 Maven 配置。</li>\n<li>尽可能自动配置 spring 应用。</li>\n<li>提供生产指标，健壮检查和外部化配置。</li>\n<li>绝对没有代码生成和 XML 配置要求。</li>\n</ol>\n<p><strong>组成和结构如下图：</strong></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/20200920140139882.jpg\" class=\"\" title=\"在这里插入图片描述\">\n<p>从图中可以看出 SpringBoot 是包含了 Spring 的核心（IOC）和（AOP）；以及封装了一些扩展，如 Stater：</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/20200920140302700.jpg\" class=\"\" title=\"在这里插入图片描述\">\n<h4 id=\"三-区别与总结\"><a class=\"anchor\" href=\"#三-区别与总结\">#</a> 三、区别与总结</h4>\n<p><strong>1. 简单理解为：Spring 包含了 SpringMVC，而 SpringBoot 又包含了 Spring 或者说是在 Spring 的基础上做得一个扩展。</strong></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/20200920140600599.jpg\" class=\"\" title=\"在这里插入图片描述\">\n<p><strong>2、关系大概就是这样：</strong></p>\n<p>spring mvc &lt; spring &lt; springboot</p>\n<p><strong>3、Spring Boot 对比 Spring 的一些优点包括：</strong></p>\n<ol>\n<li>提供嵌入式容器支持</li>\n<li>使用命令 java -jar 独立运行 jar</li>\n<li>在外部容器中部署时，可以选择排除依赖关系以避免潜在的 jar 冲突</li>\n<li>部署时灵活指定配置文件的选项</li>\n<li>用于集成测试的随机端口生成</li>\n</ol>\n<p><strong>4、结论</strong></p>\n<p>Spring Boot 只是 Spring 本身的扩展，使开发，测试和部署更加方便。</p>\n<h3 id=\"spring中事务是如何回滚\"><a class=\"anchor\" href=\"#spring中事务是如何回滚\">#</a> Spring 中事务是如何回滚</h3>\n<p>在 Service 层的方法上加上 <code>@Transactional</code>  注解，在发生错误时，方法会抛出运行时异常，随即 Spring 会自动回滚事务。</p>\n<p>Spring 实现事务回滚的流程如下：</p>\n<p>1、通过 cglib，将方法上加了 @Transactional 注解的类创建生成代理对象</p>\n<p>2、Controller 在调用 Service 方法时，由于 Service 是代理对象，便会进入到 DynamicAdvisedInterceptor 类的 intercept 方法中</p>\n<p>源码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token annotation punctuation\">@Nullable</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">intercept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> proxy<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Method</span> method<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodProxy</span> methodProxy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token class-name\">Object</span> oldProxy <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">boolean</span> setProxyContext <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token class-name\">Object</span> target <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token class-name\">TargetSource</span> targetSource <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advised<span class=\"token punctuation\">.</span><span class=\"token function\">getTargetSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advised<span class=\"token punctuation\">.</span>exposeProxy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// Make invocation available if necessary.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t\toldProxy <span class=\"token operator\">=</span> <span class=\"token class-name\">AopContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentProxy</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\tsetProxyContext <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// Get as late as possible to minimize the time we \"own\" the target, in case it comes from a pool...</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\ttarget <span class=\"token operator\">=</span> targetSource<span class=\"token punctuation\">.</span><span class=\"token function\">getTarget</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> targetClass <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> chain <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advised<span class=\"token punctuation\">.</span><span class=\"token function\">getInterceptorsAndDynamicInterceptionAdvice</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> targetClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">Object</span> retVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// Check whether we only have one InvokerInterceptor: that is,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// no real advice, but just reflective invocation of the target.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chain<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPublic</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// We can skip creating a MethodInvocation: just invoke the target directly.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// Note that the final invoker must be an InvokerInterceptor, so we know</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// it does nothing but a reflective operation on the target, and no hot</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// swapping or fancy proxying.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> argsToUse <span class=\"token operator\">=</span> <span class=\"token class-name\">AopProxyUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">adaptArgumentsIfNecessary</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t\tretVal <span class=\"token operator\">=</span> methodProxy<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> argsToUse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// We need to create a method invocation...</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t\tretVal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CglibMethodInvocation</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> targetClass<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">,</span> methodProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\tretVal <span class=\"token operator\">=</span> <span class=\"token function\">processReturnType</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> method<span class=\"token punctuation\">,</span> retVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> retVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>target <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>targetSource<span class=\"token punctuation\">.</span><span class=\"token function\">isStatic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t\t\ttargetSource<span class=\"token punctuation\">.</span><span class=\"token function\">releaseTarget</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setProxyContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t\t\t<span class=\"token comment\">// Restore old proxy.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t\t\t<span class=\"token class-name\">AopContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">setCurrentProxy</span><span class=\"token punctuation\">(</span>oldProxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这段代码注意这一行，chain 里只有一个对象，即 TransactionInterceptor，下面会用到这个对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> chain <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>advised<span class=\"token punctuation\">.</span><span class=\"token function\">getInterceptorsAndDynamicInterceptionAdvice</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">,</span> targetClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3、继续一层层方法进入，我们就会来到 TransactionInterceptor 的 invoke 方法，先获取被代理的对象类 targetClass，随后进入核心类 TransactionAspectSupport 的 invokeWithinTransaction 方法中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodInvocation</span> invocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token comment\">// Work out the target class: may be &#123;@code null&#125;.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token comment\">// The TransactionAttributeSource should be passed the target class</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// as well as the method, which may be from an interface.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> targetClass <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>invocation<span class=\"token punctuation\">.</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token class-name\">AopUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTargetClass</span><span class=\"token punctuation\">(</span>invocation<span class=\"token punctuation\">.</span><span class=\"token function\">getThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// Adapt to TransactionAspectSupport's invokeWithinTransaction...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">invokeWithinTransaction</span><span class=\"token punctuation\">(</span>invocation<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> targetClass<span class=\"token punctuation\">,</span> invocation<span class=\"token operator\">::</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4、TransactionAspectSupport 的 invokeWithinTransaction 方法中，实现回滚的就是这几行，try catch 包住要执行的事务方法，如果发生报错，就在 catch 中回滚事务</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span> retVal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// This is an around advice: Invoke the next interceptor in the chain.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// This will normally result in a target object being invoked.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\tretVal <span class=\"token operator\">=</span> invocation<span class=\"token punctuation\">.</span><span class=\"token function\">proceedWithInvocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// target invocation exception</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token function\">completeTransactionAfterThrowing</span><span class=\"token punctuation\">(</span>txInfo<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE0MTUwNjE1LzIzNTQwMTM=\">https://blog.51cto.com/u_14150615/2354013</span></p>\n<p>1. 代码中事务控制的 3 种方式<br />\n编程式事务：就是直接在代码里手动开启事务，手动提交，手动回滚。优点就是可以灵活控制，缺点就是太麻烦了，太多重复的代码了。</p>\n<p>声明式事务：就是使用 SpringAop 配置事务，这种方式大大的简化了编码。需要注意的是切入点表达式一定要写正确。</p>\n<p>注解事务：直接在 Service 层的方法上面加上 @Transactional 注解，个人比较喜欢用这种方式。</p>\n<h3 id=\"spring如何处理多线程的bean\"><a class=\"anchor\" href=\"#spring如何处理多线程的bean\">#</a> Spring 如何处理多线程的 Bean</h3>\n<p>在一般情况下，只有无状态的 Bean 才可以在多线程环境下共享，在 Spring 中，绝大部分 Bean 都可以声明为 singleton 作用域，因为 Spring 对一些 Bean 中非线程安全状态采用 ThreadLocal 进行处理，解决线程安全问题。</p>\n<p>ThreadLocal 和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。同步机制采用了 “时间换空间” 的方式，仅提供一份变量，不同的线程在访问前需要获取锁，没获得锁的线程则需要排队。而 ThreadLocal 采用了 “空间换时间” 的方式。</p>\n<p>ThreadLocal 会为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。因为每一个线程都拥有自己的变量副本，从而也就没有必要对该变量进行同步了。ThreadLocal 提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进 ThreadLocal。</p>\n<h1 id=\"springboot\"><a class=\"anchor\" href=\"#springboot\">#</a> SpringBoot</h1>\n<h3 id=\"什么是springboot\"><a class=\"anchor\" href=\"#什么是springboot\">#</a> 什么是 SpringBoot</h3>\n<p>SpringBoot 是基于 Spring 创建一个上层应用框架，14 年发布 1.0。会比以前的那种 SSM 基于配置的方式效率要高很多。.... 自己在想一些优点</p>\n<h3 id=\"springboot有哪些优点\"><a class=\"anchor\" href=\"#springboot有哪些优点\">#</a> SpringBoot 有哪些优点</h3>\n<ol>\n<li>\n<p>独立运行</p>\n</li>\n<li>\n<p>简化配置，预定由于配置的理念</p>\n</li>\n<li>\n<p>自动配置</p>\n</li>\n<li>\n<p>无代码生和 XML 配置</p>\n</li>\n<li>\n<p>Acuator 应用监控（微服务情况下）</p>\n</li>\n</ol>\n<h3 id=\"springboot中的核心注解\"><a class=\"anchor\" href=\"#springboot中的核心注解\">#</a> SpringBoot 中的核心注解</h3>\n<ol>\n<li>@SpringBootApplication，他是一个组合注解</li>\n</ol>\n<p>@ComponentScan ：默认情况下会扫描当前包及其子包下面所有被 @Component 注解修饰的 Java 类</p>\n<p>@SpringBootConfiguration：组合了 @Configuration 这个注解，也就是说明被 SpringBootApplication 所标识的 Java 类就是一个 Java 配置类</p>\n<p>@EnableAutoConfiguration：打开自动装配的功能 --》META-INF/spring.factories 文件中加载需要自动注入的 Java 类</p>\n<h3 id=\"介绍一下springboot的自动装配原理\"><a class=\"anchor\" href=\"#介绍一下springboot的自动装配原理\">#</a> 介绍一下 SpringBoot 的自动装配原理</h3>\n<p>在启动 SpringBoot 项目的 main 方法的头部有一个 @SpringBootApplication 注解，在这个注解中组合了一个 EnableAutoConfiguration 注解，这个注解的作用就是打开自动装配，而在这个注解中又包含了一个 @lmport 注解，在这个注解中引入了一个实现了 lmportSelector 接口的类型，在对应的 selectImports 方法中会读取<br />\n META/INF 目录下的 splring.factories 文件中需要被自动装配的所有的配置类，然后通过 META-INF 下面的 spring-autoconfigure-metadata.properties 文件做条件过滤。最后返回的就是需要自动装配的相关的对象。</p>\n<h3 id=\"谈一下-starter-的理解\"><a class=\"anchor\" href=\"#谈一下-starter-的理解\">#</a> 谈一下 Starter 的理解</h3>\n<p>starter 的作用是在 META-INF 目录下提供了一个 spring.factories 文件，在该文件中我们添加了一个需要注入到 Spring 容器中的对应的配置类</p>\n<p>第三方框架要整合到 SpringBoot 项目中，也就是需要吧第三方框架的核心组件注入到 Spring 容器中，提供的方式是 spring.factories 文件</p>\n<p>starter 也可以理解为一个启动器</p>\n<p>starter 命名规范：</p>\n<p>官方：spring-boot-starter-xxx</p>\n<p>非官方：xxx-spring-boot-starter</p>\n<h3 id=\"springboot需要单独的web容器吗\"><a class=\"anchor\" href=\"#springboot需要单独的web容器吗\">#</a> SpringBoot 需要单独的 web 容器吗</h3>\n<p>可以不需要，也可以要</p>\n<h3 id=\"springboot的启动方式\"><a class=\"anchor\" href=\"#springboot的启动方式\">#</a> Springboot 的启动方式</h3>\n<ol>\n<li>直接通过 main 运行</li>\n<li>打成 jar 包，通过 java 命令运行，或者打成 war 包，放到 web 容器中启动</li>\n<li>使用 Maven 插件来运行</li>\n</ol>\n<h3 id=\"springboot如何解决跨域问题\"><a class=\"anchor\" href=\"#springboot如何解决跨域问题\">#</a> SpringBoot 如何解决跨域问题</h3>\n<ol>\n<li>通过 JSONP 类解决跨域问题，但是只支持 Get 方式请求</li>\n<li>通过 WebMVCConfigurer 重写里面的 addCorsMappings 方法添加对应的运行跨域的请求</li>\n<li>注解 @Cors</li>\n</ol>\n<h3 id=\"springboot项目中如何使用log4j\"><a class=\"anchor\" href=\"#springboot项目中如何使用log4j\">#</a> SpringBoot 项目中如何使用 Log4j</h3>\n<p>在 SpringBoot 项目中默认提供了日志框架 Logback，所以我们如果需要引入 log4j 的话，必须先排查 Logback 的依赖，然后再添加 log4j 的依赖，然后在 src/main/resouces 目录下创建 log4j.properties 文件，然后就可以进行日志的相关的配置。|</p>\n<p>注：这也要看版本  ，2.3.7 他就直接内置 log4j</p>\n<h3 id=\"bootstrapyml文件作用\"><a class=\"anchor\" href=\"#bootstrapyml文件作用\">#</a> bootstrap.yml 文件作用</h3>\n<p>SpringBoot 中默认支持的属性文件有卜面 4 种</p>\n<p>application.properties application.xml<br />\napplication.yml aplication.yaml</p>\n<p>那么为什么还有一类 bootstrap.yml bootstrap.properties 文件</p>\n<p>bootstrap.yml 在 SpringBoot 中默认是不支持的，需要在 SpringCloud 环境下才支持，<mark>作用是在 SpringBoot 项目启动之前启动的一个父容器，该父容器可以在 SpringBoot 容器启动之前完成一些加载初始化的操作</mark>。比如加载配置中心中的信息。</p>\n<h3 id=\"谈谈你的actuator理解\"><a class=\"anchor\" href=\"#谈谈你的actuator理解\">#</a> 谈谈你的 Actuator 理解</h3>\n<p>Actuator 是 SpringBoot 中提供的四大神器之一，在单体架构中用到的是非常少的，但是在分布式微服务架构下就给非常有用了</p>\n<ol>\n<li>如果有服务出现了故障，定位服务</li>\n<li>对这个系统的性能作出监控</li>\n<li>统一日志管理</li>\n</ol>\n<h1 id=\"springcloud\"><a class=\"anchor\" href=\"#springcloud\">#</a> SpringCloud</h1>\n<h3 id=\"1什么是springcloud\"><a class=\"anchor\" href=\"#1什么是springcloud\">#</a> 1. 什么是 SpringCloud</h3>\n<p>Spring cloud 流应用程序启动器是基于 Spring Boot 的 Spring 集成应用程序，提供与外部系统的集成。Spring cloud Task，一个生命周期短暂的微服务框架，用于快速构建执行有限数据处理的应用程序。</p>\n<h3 id=\"2什么是微服务\"><a class=\"anchor\" href=\"#2什么是微服务\">#</a> 2. 什么是微服务</h3>\n<p>微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分为一组小的服务，每个服务运行在其独立的自己的进程中，服务之间相互协调、互相配合，为用户提供最终价值。服务之间采用轻量级的通信机制互相沟通（通常是基于 HTTP 的 RESTful API), 每个服务都围绕着具体的业务进行构建，并且能够被独立的构建在生产环境、类生产环境等。另外，应避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p>\n<h3 id=\"注册中心的核心概念\"><a class=\"anchor\" href=\"#注册中心的核心概念\">#</a> 注册中心的核心概念？</h3>\n<p>采用微服务以后，软件微服务组件各自独立，但最终还要组合为一个整体作为一个软件系统服务于最终客户，这时软件组件之间也需要彼此通讯，彼此调用方法。微服务架构内部发起通讯调用方法的一方成为 “<strong>服务消费者</strong>”，<strong>提供远程方法调用的服务器称为 “服务提供者”，往往为了提高系统性能</strong>，<strong>会提供多个服务器作为服务提供</strong>，为了帮助服务消费者快速的发现服务提供者，在微服务框架中都会引入注册中心。</p>\n<p><strong>注册中心实现了服务提供和服务消费的快速撮合功能</strong>。</p>\n<h3 id=\"为何使用注册中心呢\"><a class=\"anchor\" href=\"#为何使用注册中心呢\">#</a> 为何使用注册中心呢？</h3>\n<p>我们以入住酒店的前台为例子，稍微加以解释。先设想一个没有服务前台的酒店，客人入住需要自己寻找合适居住的房间，客人不知道每个房间的情况，无法确定那个房间是打扫干净可以入住，客人只能逐个房间寻找，如果遇到已经居住房客的房间一定很尴尬，显然这是不正常的情况。正常的情况是酒店会安排服务台，酒店打扫干净可以入住的房间会登记注册到服务台，这样客人来住店，只需要在前台就可以查找到可以入住的房间，这样就无需等待快速的入住。显然，服务器提供发注册和发现机制可以让房客快速找到合适的房间，快速解决入住问题。<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220908174714109.png\" class=\"\" title=\"image-20220908174714109\"></p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220908174941263.png\" class=\"\" title=\"image-20220908174941263\">\n<h1 id=\"分布式事务\"><a class=\"anchor\" href=\"#分布式事务\">#</a> 分布式事务</h1>\n<h3 id=\"常见的负载均衡算法\"><a class=\"anchor\" href=\"#常见的负载均衡算法\">#</a> 常见的负载均衡算法</h3>\n<p>轮询，加权轮询，随机，最小链接，原地址散列</p>\n<h3 id=\"分布式id有哪些生成方案\"><a class=\"anchor\" href=\"#分布式id有哪些生成方案\">#</a> 分布式 ID 有哪些生成方案</h3>\n<p>有 2 个问题：什么时候用？解决办法</p>\n<ul>\n<li>什么时候用分布式 ID</li>\n</ul>\n<p>唯一性。通过分布式 ID 确认业务</p>\n<ul>\n<li>解决方案</li>\n</ul>\n<p>UUID：本地生成，调用简单，没有高可用的风险，但是长度有点长，造成存储的冗余</p>\n<p>数据库自增 ID：</p>\n<p>提前批量生产</p>\n<p>雪花算法</p>\n<h3 id=\"幂等\"><a class=\"anchor\" href=\"#幂等\">#</a> 幂等</h3>\n<h1 id=\"分布式锁\"><a class=\"anchor\" href=\"#分布式锁\">#</a> 分布式锁</h1>\n<p><mark>set 命令格式</mark>：SET key value [EX seconds] [PX milliseconds] [NX|XX]</p>\n<ul>\n<li><code>EX seconds</code>  − 设置指定的到期时间 (以秒为单位)。</li>\n<li><code>PX milliseconds</code>  - 设置指定的到期时间 (以毫秒为单位)。</li>\n<li><code>NX</code>  - 仅在键不存在时设置键。</li>\n<li><code>XX</code>  - 只有在键已存在时才设置。</li>\n</ul>\n<p>== 使用这个：==SetNX （set if not exits）key  value ex 100</p>\n<h3 id=\"未完成-9\"><a class=\"anchor\" href=\"#未完成-9\">#</a> —————————— 未完成</h3>\n<h1 id=\"redis\"><a class=\"anchor\" href=\"#redis\">#</a> Redis</h1>\n<h3 id=\"数据结构\"><a class=\"anchor\" href=\"#数据结构\">#</a> 数据结构</h3>\n<h4 id=\"1-string-key-value-类型\"><a class=\"anchor\" href=\"#1-string-key-value-类型\">#</a> 1、string (key-value 类型)</h4>\n<p>相比于 C 的原生字符串，Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据，并且获取字符串长度复杂度为 O (1)（C 字符串为 O (N)）, 除此之外，Redis 的 SDS API 是安全的，不会造成缓冲区溢出。</p>\n<ol>\n<li><strong>常用命令:</strong>  <code>set,get,strlen,exists,dect,incr,setex</code>  等等。</li>\n<li><strong>应用场景</strong> ：一般常用在需要计数的场景，比如用户的访问次数、热点文章的点赞转发数量等等。</li>\n</ol>\n<p><strong>普通字符串的基本操作：</strong></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> key value <span class=\"token comment\">#设置 key-value 类型的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key <span class=\"token comment\"># 根据 key 获得对应的 value</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"value\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> exists key  <span class=\"token comment\"># 判断某个 key 是否存在</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> strlen key <span class=\"token comment\"># 返回 key 所储存的字符串值的长度。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> del key <span class=\"token comment\"># 删除某个 key 对应的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get key</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>批量设置</strong> :</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> mset key1 value1 key2 value2 <span class=\"token comment\"># 批量设置 key-value 类型的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> mget key1 key2 <span class=\"token comment\"># 批量获取多个 key 对应的 value</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr></table></figure><p><strong>计数器（字符串的内容为整数的时候可以使用）：</strong></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> <span class=\"token builtin class-name\">set</span> number <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> incr number <span class=\"token comment\"># 将 key 中储存的数字值增一</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get number</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"2\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> decr number <span class=\"token comment\"># 将 key 中储存的数字值减一</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> get number</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token string\">\"1\"</span></pre></td></tr></table></figure><p><strong>过期</strong>：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> expire key  <span class=\"token number\">60</span> <span class=\"token comment\"># 数据在 60s 后过期</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> setex key <span class=\"token number\">60</span> value <span class=\"token comment\"># 数据在 60s 后过期 (setex:[set] + [ex] pire)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> ttl key <span class=\"token comment\"># 查看数据还有多久过期</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span></pre></td></tr></table></figure><h4 id=\"2-list\"><a class=\"anchor\" href=\"#2-list\">#</a> 2、list</h4>\n<p>​\t特点是易于数据元素的插入和删除并且且可以灵活调整链表长度，但是链表的随机访问困难。 <strong>双向链表</strong>，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销）</p>\n<ol>\n<li><strong>常用命令:</strong>  <code>rpush,lpop,lpush,rpop,lrange、llen</code>  等。</li>\n<li><strong>应用场景:</strong> 发布与订阅或者说消息队列、慢查询。</li>\n</ol>\n<p><strong>通过  <code>rpush/lpop</code>  实现队列：</strong></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush myList value1 <span class=\"token comment\"># 向 list 的头部（右边）添加元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush myList value2 value3 <span class=\"token comment\"># 向 list 的头部（最右边）添加多个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lpop myList <span class=\"token comment\"># 将 list 的尾部 (最左边) 元素取出</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange myList <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 查看对应下标的 list 列表， 0 为 start,1 为 end</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange myList <span class=\"token number\">0</span> <span class=\"token parameter variable\">-1</span> <span class=\"token comment\"># 查看列表中的所有元素，-1 表示倒数第一</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr></table></figure><p><strong>通过  <code>rpush/rpop</code>  实现栈：</strong></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush myList2 value1 value2 value3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpop myList2 <span class=\"token comment\"># 将 list 的头部 (最右边) 元素取出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"value3\"</span></pre></td></tr></table></figure><p><strong>通过  <code>lrange</code>  查看对应下标范围的列表元素：</strong></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> rpush myList value1 value2 value3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange myList <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 查看对应下标的 list 列表， 0 为 start,1 为 end</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> lrange myList <span class=\"token number\">0</span> <span class=\"token parameter variable\">-1</span> <span class=\"token comment\"># 查看列表中的所有元素，-1 表示倒数第一</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr></table></figure><p>通过  <code>lrange</code>  命令，你可以基于 list 实现分页查询，性能非常高！</p>\n<p><strong>通过  <code>llen</code>  查看链表长度：</strong></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> llen myList</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr></table></figure><h4 id=\"3-hash\"><a class=\"anchor\" href=\"#3-hash\">#</a> 3、hash</h4>\n<p>​\thash 类似于 JDK1.8 前的 HashMap，内部实现也差不多 (数组 + 链表)。不过，Redis 的 hash 做了更多优化。另外，hash 是一个 string 类型的 field 和 value 的映射表，<strong>特别适合用于存储对象，后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值</strong>。 比如我们可以 hash 数据结构来存储用户信息，商品信息等等。</p>\n<ol>\n<li><strong>常用命令：</strong>  <code>hset,hmset,hexists,hget,hgetall,hkeys,hvals</code>  等。</li>\n<li><strong>应用场景:</strong> 系统中对象数据的存储。</li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hset userInfoKey name <span class=\"token string\">\"guide\"</span> description <span class=\"token string\">\"dev\"</span> age <span class=\"token string\">\"24\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hexists userInfoKey name <span class=\"token comment\"># 查看 key 对应的 value 中指定的字段是否存在。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hget userInfoKey name <span class=\"token comment\"># 获取存储在哈希表中指定字段的值。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token string\">\"guide\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hget userInfoKey age</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">\"24\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hgetall userInfoKey <span class=\"token comment\"># 获取在哈希表中指定 key 的所有字段和值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"guide\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"description\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"dev\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"24\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hkeys userInfoKey <span class=\"token comment\"># 获取 key 列表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"name\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"description\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hvals userInfoKey <span class=\"token comment\"># 获取 value 列表</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"guide\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"dev\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"24\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hset userInfoKey name <span class=\"token string\">\"GuideGeGe\"</span> <span class=\"token comment\"># 修改某个字段对应的值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> hget userInfoKey name</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token string\">\"GuideGeGe\"</span></pre></td></tr></table></figure><h4 id=\"4-set\"><a class=\"anchor\" href=\"#4-set\">#</a> 4、set</h4>\n<pre><code>set 类似于 Java 中的 HashSet 。Redis 中的 set 类型是一种**无序集合**，集合中的元素没有先后顺序。当你需要存储一个列表数据，又**不希望出现重复数据**时，set 是一个很好的选择，并且 **set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的**。可以基于 set 轻易实现交集、并集、差集的操作。比如：你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。\n</code></pre>\n<ol>\n<li><strong>常用命令：</strong>  <code>sadd,spop,smembers,sismember,scard,sinterstore,sunion</code>  等。</li>\n<li><strong>应用场景:</strong> 需要存放的数据不能重复以及需要获取多个数据源交集和并集等场景</li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd mySet value1 value2 <span class=\"token comment\"># 添加元素进去</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd mySet value1 <span class=\"token comment\"># 不允许有重复元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> smembers mySet <span class=\"token comment\"># 查看 set 中所有的元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> scard mySet <span class=\"token comment\"># 查看 set 的长度</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sismember mySet value1 <span class=\"token comment\"># 检查某个元素是否存在 set 中，只能接收单个元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sadd mySet2 value2 value3</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> sinterstore mySet3 mySet mySet2 <span class=\"token comment\"># 获取 mySet 和 mySet2 的交集并存放在 mySet3 中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> smembers mySet3</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr></table></figure><h4 id=\"5-sorted-set也叫zset\"><a class=\"anchor\" href=\"#5-sorted-set也叫zset\">#</a> 5、sorted set (也叫 zset)</h4>\n<p>​\t和 set 相比，sorted set 增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列，还可以通过 score 的范围来获取元素的列表。有点像是 Java 中 HashMap 和 TreeSet 的结合体。</p>\n<ol>\n<li><strong>常用命令：</strong>  <code>zadd,zcard,zscore,zrange,zrevrange,zrem</code>  等。</li>\n<li><strong>应用场景：</strong> 需要对数据根据某个权重进行排序的场景。比如在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维度的消息排行榜）等信息。</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTQ1NzEzL2FydGljbGUvZGV0YWlscy8xMDU0Mzk2ODg=\">https://blog.csdn.net/qq_38545713/article/details/105439688</span></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd myZset <span class=\"token number\">3.0</span> value1 <span class=\"token comment\"># 添加元素到 sorted set 中 3.0 为权重</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zadd myZset <span class=\"token number\">2.0</span> value2 <span class=\"token number\">1.0</span> value3 <span class=\"token comment\"># 一次添加多个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zcard myZset <span class=\"token comment\"># 查看 sorted set 中的元素数量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span>integer<span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zscore myZset value1 <span class=\"token comment\"># 查看某个 value 的权重</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token string\">\"3\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrange  myZset <span class=\"token number\">0</span> <span class=\"token parameter variable\">-1</span> <span class=\"token comment\"># 顺序输出某个范围区间的元素，0 -1 表示输出所有元素</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrange  myZset <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 顺序输出某个范围区间的元素，0 为 start  1 为 stop</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value3\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:637<span class=\"token operator\"><span class=\"token file-descriptor important\">9</span>></span> zrevrange  myZset <span class=\"token number\">0</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 逆序输出某个范围区间的元素，0 为 start  1 为 stop</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value1\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"value2\"</span></pre></td></tr></table></figure><h3 id=\"redis-是多线程还是单线程\"><a class=\"anchor\" href=\"#redis-是多线程还是单线程\">#</a> redis 是多线程还是单线程</h3>\n<p>​\t通常说的 Redis 是单线程，主要是指 Redis 对外提供键值存储服务的主要流程，即网络 IO 和键值对读写是由⼀个线程来完成的。除此外 Redis 的其他功能，比如持久化、 异步删除、集群数据同步等，是由额外的线程执⾏的。在这一点上 Node 也是一样的，一般提到 Node 也是单线程的，但其实 Node 只有一个主线程是单线程，其他异步任务则由其他线程完成。这样做的原因是防止有同步代码阻塞，导致主线程被占用后影响后续的程序代码执行。</p>\n<p>​\t因此，严格地说 Redis 并不是单线程。但是我们⼀般把 Redis 称为单线程高性能，这样显得 Redis 更强一些。</p>\n<p>​\t这里需要注意一个问题，我们所说的 Redis 的单线程，不是指 Redis 程序真的只会有一个线程。这里所说的单线程，指的是 Redis 处理客户端发来的数据操作请求（增删改查），只会使用一个线程去执行。但是实际上，Redis 在执行其他操作的时候，可能会开启多个进程或线程，比如说持久化。Redis 执行 BGSAVE 指令，进行快照持久化时，就会 fork 出一个子进程，然后子进程去创建快照，完成持久化操作。</p>\n<h3 id=\"为什么redis使用单线程\"><a class=\"anchor\" href=\"#为什么redis使用单线程\">#</a> <strong>为什么 Redis 使用单线程？</strong></h3>\n<p>​\t官方解释如下：因为 Redis 是基于内存的操作，CPU 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存的大小或者网络带宽。既然单线程容易实现，而且 CPU 不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p>\n<p>​\t上面的解释不是很好理解，我就简单说一说我自己的理解吧。我们知道，Redis 将数据存放在内存当中，这也就意味着，Redis 在操作数据时，不需要进行磁盘 I/O。磁盘 I/O 是一个比较耗时的操作，所以对于需要进行磁盘 I/O 的程序，我们可以使用多线程，在某个线程进行 I/O 时，CPU 切换到当前程序的其他线程执行，以此减少 CPU 的等待时间。而 Redis 直接操作内存中的数据，所以使用多线程并不能有效提升效率，相反，使用多线程反倒会因为需要进行线程的切换而降低效率。</p>\n<p>​\t除此之外，使用多线程的话，多个线程间进行同步，保证线程的安全，也是需要开销的。尤其是 Redis 的数据结构都是一些实现较为简单的集合结构，若使用多线程，将会频繁地发生线程冲突，线程的竞争频率较高，反倒会拖慢 Redis 的响应速度。</p>\n<p>​\t综上所述，Redis 为了保持简单和高效，自然而然地就使用了单线程。</p>\n<h3 id=\"redis如何提高cpu使用率\"><a class=\"anchor\" href=\"#redis如何提高cpu使用率\">#</a> <strong>Redis 如何提高 CPU 使用率</strong></h3>\n<p>​\t前面也提过，现在的 CPU 一般都有多个核心，每个核心可以单独执行。Redis 处理客户端请求使用单线程，那么自然而然，无法将 CPU 的所有核心都占用，也就造成了资源的浪费。而解决的方式也比较简单，我们可以在同一个服务器上开启多个 Redis 程序，每个 Redis 程序使用不同的端口，相互独立，以此提高 CPU 的使用率。而这多个 Redis 程序可以配置成主从节点，共同为一个程序服务，也可以相互独立，服务于多个程序。</p>\n<h3 id=\"未完成-10\"><a class=\"anchor\" href=\"#未完成-10\">#</a> 未完成</h3>\n<h1 id=\"设计模式\"><a class=\"anchor\" href=\"#设计模式\">#</a> 设计模式</h1>\n<h3 id=\"说一说程序的设计原则和设计模式\"><a class=\"anchor\" href=\"#说一说程序的设计原则和设计模式\">#</a> 说一说程序的设计原则和设计模式</h3>\n<h4 id=\"设计原则\"><a class=\"anchor\" href=\"#设计原则\">#</a> 设计原则</h4>\n<p>程序设计的要遵循的一些理论，也可以理解为程序设计的一种要求和目标，是面向对象程序设计的基石，也是面向对象程序设计的质量保障和依据</p>\n<h3 id=\"11单一职责原则\"><a class=\"anchor\" href=\"#11单一职责原则\">#</a> 1.1 单一职责原则</h3>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/wps2.jpg\" class=\"\" title=\"img\"> \n<p><strong>解释</strong>:</p>\n<p>单一职责 SRP--Single Responsibility Principle</p>\n<p>应该有且仅有一个原因引起类的变更</p>\n<p>1<mark> 系统中的每个类都应该只有一个职</mark>责，而所有类所关注的就是自身之职责的完成</p>\n<p>2 职责是指为” 变化的原因”</p>\n<p>3 如果能想到多个原因去改变一个类，这个类就是多个职责</p>\n<p>4 并不是单一功能原则，并不是每个类只能有一个方法，而是单一” 变化的愿意” 原则</p>\n<p>5 如果一个类有多个职责，这些职责就耦合在了一起，当一个职责发生变化时，可能会影响其他职责</p>\n<p>6 多个职责耦合在一起，会影响服用性 (可能只需要服用该类的某一个功能，但是该职责和其他职责耦合在一起，很难分离出来)</p>\n<p>其实就是我们常说的高内聚低耦合原则，. 单一职责原则是最简单也非常难实现的原则</p>\n<p><strong>好处</strong></p>\n<p>将功能分类，模块划分明确，修改一个模块不会造成其他模块的修改，降低模块之间的耦合度</p>\n<p><strong>举例</strong>:</p>\n<p>​\tMVC 模式下，无论是 Controller 层还是 service 亦或是 DAO 层，针对每个表格都有独立的实现类，不要掺杂在一起，以免因为任何一个操作的变化都引起类的修改</p>\n<p><strong>图解</strong>:</p>\n<p>饭店老板 既当厨师，又当服务员，这不合适</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/wps3.jpg\" class=\"\" title=\"img\"> \n<h3 id=\"12开闭原则\"><a class=\"anchor\" href=\"#12开闭原则\">#</a> 1.2 开闭原则</h3>\n<p><strong>解释</strong></p>\n<p>开闭原则 OCP--- Open Closed Principle</p>\n<p>软件实体应该<mark>对功能的拓展开放，对修改关闭的原则</mark>，因为需求有变化，要求我们设计程序时必须为程序功能的新增留好接口，在新增功能时，不要修改原有代码，而是新增代码。让程序实现对拓展开放，对修改关闭测设计要求</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/wps4.jpg\" class=\"\" title=\"img\"> \n<p>薛定谔的猫理论，用户需求不确定理论</p>\n<p>1 实现开闭原则的关键是抽象</p>\n<p>2 定义一个抽象层，之规定功能而不提供实现，实现通过定义具体的类来完成</p>\n<p>3 当需求变化时，不通过修改抽象层来完成，而是通过定义抽象层的新实现完成</p>\n<p>4 通过抽象类及接口，规定了具体的类的特征作为抽象层，相对稳定，不需要修改，从而满足对修改关闭，从抽象类到处的具体类可以作为改变系统的行为，从而满足对扩展开放</p>\n<p><strong>好处</strong></p>\n<p>1 通过扩展已有软件系统，可以提供新的行为，以满足对软件新的需求，提高了软件系统的适应性和灵活性</p>\n<p>2 已有的软件模块，特别是重要的抽象层模块不能再修改，提高了软件系统的一定的稳定性和延续性</p>\n<p>3 这样的设计同时也满足了可复用性和可维护性</p>\n<p><strong>举例</strong></p>\n<p>​\tMVC 模式下，每一层都有接口，是和其他层对接的规范，新增功能时，我们可以选择新增 Controller 层和 service 层和 mapper 层代码 不用去修改原有代码</p>\n<p><strong>图解</strong></p>\n<p>每一个层次的要求都要留好接口，作为规范，增加功能就相当于多了一个实现类去实现接口，而不是在先有代码上修改，工厂方法模式</p>\n<h3 id=\"13里氏代换原则\"><a class=\"anchor\" href=\"#13里氏代换原则\">#</a> 1.3 里氏代换原则</h3>\n<p><strong>解释</strong></p>\n<p>里氏代换原则 LSP------ Liskov Substitution Principle</p>\n<p>所有引用的基类的地方必须能够透明的使用其子类的对象</p>\n<p>凡是父类出现的地方，其子类就可以出现，而且调用子类还不能产生多于父类的错误和异常，调用者根本就不要需要知道是子类还是父类对象。但是反过来就不行，子类出现的地方父类未必就能使用</p>\n<p>1<mark> 子类必须完全实现了父类的方法，具备父类完全的功能</mark></p>\n<p>2 子类可以有自己的特征</p>\n<p>3 覆盖和实现父类方法时，输入的参数可以被放大，但是不能被缩小</p>\n<p>4 覆盖和实现父类方法时，输出的结果可以被缩小，但是不能被放大</p>\n<p>5 覆盖和实现父类方法时，产生的异常可以被缩小，但是不能被放大</p>\n<p><strong>好处</strong>:</p>\n<p>为我们如何实现良好的继承和使用多态提供了依据，也是实现开闭原则的重要保证</p>\n<p><strong>举例</strong>:</p>\n<p>白马 马也</p>\n<p>乘白马 乘马也</p>\n<p>黑马 马也</p>\n<p>乘黑马 乘马也</p>\n<p>乘的是马  什么颜色的马都是马</p>\n<p>马 是父类  各种颜色的马是子类  要求的是父类，所有的子类对象都可以使用</p>\n<p>娣 美人也  爱娣 非爱美人也</p>\n<p>美人 父类  娣 子类  要求是子类的地方，父类不一定能够出现</p>\n<p>父类作为方法参数和返回值，可以让参数更灵活</p>\n<p>张三能开车</p>\n<p>张三就能开奥迪</p>\n<p>张三就能开奔驰</p>\n<p>张三就能开宝马</p>\n<p><strong>图解</strong>:</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/wps5.jpg\" class=\"\" title=\"img\"> \n<h3 id=\"14依赖倒置原则\"><a class=\"anchor\" href=\"#14依赖倒置原则\">#</a> 1.4 依赖倒置原则</h3>\n<p><strong>解释</strong></p>\n<p>依赖倒置 DIP--Dependence Inversion Principle</p>\n<p><mark>高层模块不应该依赖底层模块，两者都应该依赖抽象 (简单来说就是面向接口编程)</mark>, 抽象不应该依赖细节，细节应该依赖抽象</p>\n<p>抽象：即是抽象类或者接口，两者是不能够实例化的</p>\n<p>细节：即是具体的嫌累，实现接口或者继承抽象类的类</p>\n<p>依赖正置就是类之间的依赖是实实在在的实现类之间的依赖，也就是面向实现编程</p>\n<p>依赖倒置就是通过抽象 (抽象类或者接口), 使各个模块之间实现彼此独立，不相互应影响</p>\n<p>依赖倒置有三种方式实现</p>\n<p>1 构造函数传递依赖对象</p>\n<p>2setter 方法实现</p>\n<p>3 接口声明实现依赖对象 () 匿名内部类</p>\n<p>依赖倒置原则要求</p>\n<p>1 每个类尽量都有接口和抽象类，或者抽象类和接口都有</p>\n<p>2 变量的表面类型应是接口和抽象类</p>\n<p>3 任何类都不应该从具体派生 (尽量避免继承，做二次开发时，无法获得高层代码时除外)</p>\n<p>4 尽量不要覆盖基类已经实现好的方法 (尽量不要重写父类方法)</p>\n<p><strong>好处</strong>:</p>\n<p>采用依赖倒置原则可以降低模块之间的耦合性，提高系统的稳定性，减少并行开发的风险，提高代码的可读性和可维护性</p>\n<p><strong>举例</strong>:</p>\n<p>一个类组合另一个类作为属性时，应尽量选择抽象类或者是接口，尽量避免直接组合实现类</p>\n<p>电脑里的零件坏了，如硬盘，内存，CPU 等，那么直接更换对应的配件，只要插槽一样就能互换，维护比较方便。插槽就是接口，具体的硬件就是实现类。留好接口可以随时换零件，如果零件直接焊死在电脑上，坏了就没有办法更换了</p>\n<p><strong>图解</strong>:</p>\n<p>抽象的 Driver 接口和抽象的 Car 接口 实现司机开车功能</p>\n<h3 id=\"15接口隔离原则\"><a class=\"anchor\" href=\"#15接口隔离原则\">#</a> 1.5 接口隔离原则</h3>\n<p><strong>解释</strong></p>\n<p>接口隔离原则 ISP Interface Segregation Principle</p>\n<p>客户端不应该强行依赖他不需要的接口，类之间的依赖关系应该建立在最小的接口上，建立单一接口，不要建立庞大臃肿的接口，应该尽量细化接口，<mark> 接口的方法尽量少</mark>，也就是说要为各个类建立专门的接口，而不要试图去建立一个庞大的接口供所有的依赖它的类去调用</p>\n<p>接口隔离原则使用的一些规范</p>\n<p>1 接口尽量小，尽量细致</p>\n<p>2 接口尽量高内聚，尽量和其他接口撇清关系</p>\n<p>3 定制服务，为调用者提供且之提供他需要的方法</p>\n<p>4 接口设计有限度，根据业务及经验，仔细四高筹划，适度隔离接口</p>\n<p>单一职责和接口隔离辨析</p>\n<p>1 单一职责原则侧重职责，接口隔离侧重对接口的依赖的隔离</p>\n<p>2 单一职责原则侧重约束类，其次是接口，针对程序中实现的细节</p>\n<p>3 接口隔离原则侧重约束接口，主要针对抽象需求，针对程序的整体框架的构建</p>\n<p><strong>好处</strong>:</p>\n<p>防止庞大，臃肿的接口，避免接口污染，提高程序设计要求的细致划分性，降低大面积维护成本。一旦出现接口污染，会造成实现类中存在大量的不相关不需要去重写的方法</p>\n<p><strong>举例</strong>:</p>\n<p>演员和角色以及整部戏的关系</p>\n<p><strong>图解</strong>:</p>\n<p>不满足接口隔离原则的情况</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/wps6.jpg\" class=\"\" title=\"img\"> \n<p>满足接口隔离原则的情况</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/wps7.jpg\" class=\"\" title=\"img\">\n<h3 id=\"16迪米特法则\"><a class=\"anchor\" href=\"#16迪米特法则\">#</a> 1.6 迪米特法则</h3>\n<p><mark>最小知道原则</mark></p>\n<p><strong>解释</strong></p>\n<p>迪米特法则 LOD--Law of Demeter</p>\n<p>只与你只直接的朋友通信，不要和不相关的人产生大量通信，如果两个类不必彼此通信，那么两个类就不应到发生直接的相互作用，如果其中的一个类需要调用另一个类的方法的话，可以通过第三者转发这个调用</p>\n<p>迪米特法则的初衷是在于降低类之间的耦合。但是迪米特法则有可能造成一个后果就是程序中存在大量的中介类，这些中介类完全就是为了传递类间的相互调用关系，一定程度上增加了系统的复杂度</p>\n<p><strong>好处</strong>:</p>\n<p>降低了类和类之间的耦合</p>\n<p><strong>举例</strong>:</p>\n<p>找中介卖房子，不用我们自己直接接触大量的买房人员</p>\n<p><strong>图解</strong>:</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/wps8.jpg\" class=\"\" title=\"img\"> \n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/wps9.jpg\" class=\"\" title=\"img\"> \n<h3 id=\"具体的设计模式\"><a class=\"anchor\" href=\"#具体的设计模式\">#</a> 具体的设计模式</h3>\n<ul>\n<li>\n<p>创建型模式</p>\n</li>\n<li>\n<p>结构性模式</p>\n</li>\n<li>\n<p>行为型模式</p>\n</li>\n</ul>\n<h3 id=\"谈谈你对单列模式的理解\"><a class=\"anchor\" href=\"#谈谈你对单列模式的理解\">#</a> 谈谈你对单列模式的理解</h3>\n<ol>\n<li>\n<p>单例模式的核心：要保证一个了只有一个对象在当前容器中，而且需要保证提供一个实例全局访问方法</p>\n</li>\n<li>\n<p>实现单例的方式：饿汉式，懒汉式，枚举（官方推荐）</p>\n</li>\n</ol>\n<h3 id=\"谈谈你对简单工厂模式理解\"><a class=\"anchor\" href=\"#谈谈你对简单工厂模式理解\">#</a> 谈谈你对简单工厂模式理解</h3>\n<p>简单工厂又称为：静态工厂</p>\n<h3 id=\"谈谈你对简单工厂模式的理解\"><a class=\"anchor\" href=\"#谈谈你对简单工厂模式的理解\">#</a> 谈谈你对简单工厂模式的理解</h3>\n<h3 id=\"谈谈你对工厂方法模式的理解\"><a class=\"anchor\" href=\"#谈谈你对工厂方法模式的理解\">#</a> 谈谈你对工厂方法模式的理解</h3>\n<h3 id=\"谈谈你对代理模式的理解\"><a class=\"anchor\" href=\"#谈谈你对代理模式的理解\">#</a> 谈谈你对代理模式的理解</h3>\n<h3 id=\"谈谈你对模板模式的理解\"><a class=\"anchor\" href=\"#谈谈你对模板模式的理解\">#</a> 谈谈你对模板模式的理解</h3>\n<h3 id=\"谈谈你对观察者模式的理解\"><a class=\"anchor\" href=\"#谈谈你对观察者模式的理解\">#</a> 谈谈你对观察者模式的理解</h3>\n<h3 id=\"谈谈你对装饰器模式的理解\"><a class=\"anchor\" href=\"#谈谈你对装饰器模式的理解\">#</a> 谈谈你对装饰器模式的理解</h3>\n<h3 id=\"谈谈你对策略模式的理解\"><a class=\"anchor\" href=\"#谈谈你对策略模式的理解\">#</a> 谈谈你对策略模式的理解</h3>\n<h3 id=\"谈谈你对适配器模式的理解\"><a class=\"anchor\" href=\"#谈谈你对适配器模式的理解\">#</a> 谈谈你对适配器模式的理解</h3>\n<h3 id=\"未完成-11\"><a class=\"anchor\" href=\"#未完成-11\">#</a> 未完成</h3>\n<h1 id=\"计算机网络\"><a class=\"anchor\" href=\"#计算机网络\">#</a> 计算机网络</h1>\n<h3 id=\"子网掩码的应用\"><a class=\"anchor\" href=\"#子网掩码的应用\">#</a> 子网掩码的应用</h3>\n<p>假如有两台计算机的 IP 地址分别为：192.168.1.100 和 192.168.2.101，假如使用一根网线直接连接这两台计算机。并且希望这两台计算机能够相互进行网络通信，该怎么办？</p>\n<p>答案：将两台计算的的子网掩码设置为：255.255.0.0</p>\n<h3 id=\"简述-tcp-和udp-的区别\"><a class=\"anchor\" href=\"#简述-tcp-和udp-的区别\">#</a> 简述 TCP 和 UDP 的区别</h3>\n<img data-src=\"../../../../../../面试/面试题/面试题_img/image-20220909160022359.png\" alt=\"image-20220909160022359\" style=\"zoom:150%;\" />\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220927153953885.png\" class=\"\" title=\"image-20220927153953885\">\n<p>除了上图所展示的区别外，使用 TCP 传输协议时，一旦建立好 TCP 连接后，系统需要实时的维护该连接，所以 TCP 所消耗的系统资源比 UDP 要多。</p>\n<p>另外因为 TCP 的可靠性传输机制导致 TCP 传输数据时比 UDP 要慢的多。</p>\n<h3 id=\"三次挥手\"><a class=\"anchor\" href=\"#三次挥手\">#</a> 三次挥手</h3>\n<p>由客户端的某个进程主动发起 TCP 连接建立，最初两端的 TCP 进程都处于关闭状态</p>\n<p>TCP 服务器被动等待客户进程的 TCP 请求，所以 TCP 服务器进入监听状态</p>\n<p>TCP 客户进程向 TCP 服务器进程发送 TCP 建接请求报文段，并且进入同步已发送状态</p>\n<p>TCP 连接请求报文段首部中的同步位 SYN 被设置为 1，表明这是一个 TCP 连接请求报文段，32 位序列号字段 seq 被设置了一个初始值 x，作为 TCP 客户进程所选择的初始序号。</p>\n<p>TCP 服务器进程接收到 TCP 连接请求报文段后，如果同意建立连接，则向 TCP 客户进程发送 TCP 连接请求确认报文段，并且进入同步已接收状态，该报文段首部中的同步位 SYN 和确认位 ACK 都设置为 1，表明这是一个</p>\n<p>TCP 连接请求确认报文段。序号字段 seq 被设置了一个初始值 y，作为 TCP 服务器进进程选择的初始序号，确认号字段 ack 的值被设置成 x+1，表明接收到了 TCP 客户进程序号为 x 的报文。</p>\n<p>TCP 客户进程收到 TCP 连接请求确认报文段后，还要向 TCP 服务器进程发送一个普通的 TCP 确认报文段，并且进入连接已建立状态，报文段首部中的<strong>确认位 ACK 设置为 1</strong>，表明这是一个普通的 TCP 确认报文段。序列号字段<strong> seq 设置为 x+1</strong>，确认号字段<strong> ack 的值被设置成 y+1</strong>，表明接收到了 TCP 服务进程序号为 y 的报文，TCP 服务器进程收到该确认报文段后也进入<strong>连接已建立状态</strong>。</p>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220909161710369.png\" class=\"\" title=\"image-20220909161710369\">\n<h3 id=\"四次挥手\"><a class=\"anchor\" href=\"#四次挥手\">#</a> 四次挥手</h3>\n<p>四次挥手过程：TCP 通过四次挥手来释放连接，数据通信结束后，TCP 双方都可以释放连接</p>\n<ul>\n<li>假设由客户进程主动关闭 TCP 连接</li>\n<li><strong>客户进程发送连接释放报文段</strong>，并且进入<strong>终止等待 1 状态</strong>，该报文段中的首部终止位 FIN 设置位 1，ACK 设置为 1，表明这是一个连接释放报文段，同时也对之前接收打报文段进行确认，seq=u 表示 TCP 客户进程之前已发送过的数据的最后一个字节的序号 + 1，ack=v 表示客户进程之前已收到的数据的最后一个字节的序号 + 1</li>\n<li>服务器进程接收到 TCP 连接释放报文段后，会<strong>发送一个普通的 TCP 确认报文段并且进入关闭等待状态</strong>，此时 TCP 客户进程到服务器进程这个方向的连接就释放了，这时的 TCP 连接属于半关闭状态，也就是 TCP 客户进程已经没有数据要发送了，但是 TCP 服务器进程如果还有数据需要发送，客户进程则还需要接收，这个状态可能会持续一段时间，直到 TCP 服务器进程将数据发送完毕。</li>\n<li><strong>TCP 客户</strong>进程收到 TCP 确认报文段后就进入<strong>终止等待 2 状态</strong>，等待 TCP 服务器进程发出的 TCP 连接释放报文段。</li>\n<li>当 TCP 服务器进程的没有数据要发送了后，释放连接（被动关闭)，<strong>TCP 服务器进程发送 TCP 连接释放报文段并进入最后确认状态</strong>。FIN=1，ACK=1 表明这是一个连接释放报文段，seq=w, ack=u+1 同时也对之前收到的报文段进行确认。思考：为什么 seq=w，而不是 seq=v+1 呢？</li>\n<li>TCP 客户进程收到 TCP 连接释放报文段后，必须针对该报文段发送普通的 TCP 确认报文段，之后进入时间等待状态</li>\n<li>TCP 服务器进程收到该报文段后就进入关闭状态</li>\n<li>而 TCP 客户进程还需要经过<strong> 2MSL</strong> 后才能进入关闭状态。MSL (Maximum Segment Lifetime) 意思是最<strong>长报文段寿命，RFC793 建议为 2 分钟。</strong></li>\n</ul>\n<img data-src=\"/interview/%E9%9D%A2%E8%AF%95%E9%A2%98/image-20220909162429440.png\" class=\"\" title=\"image-20220909162429440\">\n<h1 id=\"未完成-12\"><a class=\"anchor\" href=\"#未完成-12\">#</a> ———————————— 未完成</h1>\n<p>mavencatch  只有一种数据结构 String</p>\n<p>String 的 AOP 实现</p>\n<p>String 和 Springboot 和 SpringMVC 的区别</p>\n<p>Spring 中事务是如何回滚</p>\n<p>mybatis 三级缓存</p>\n<p>线程的状态</p>\n<p>主键 he 唯一索引的区别</p>\n<p>索引的数据结构</p>\n<p>最左原则，联合索引</p>\n<p>mysql 数据隔离级别</p>\n<p>乐观锁和悲观锁</p>\n<p>redis 实现分布式锁</p>\n<p>分布式锁</p>\n<p>redis 中 key 的删除</p>\n<p>缓存击穿、缓存雪崩、缓存穿透</p>\n<p>ereak 和 zookeeper 的区别</p>\n<p>fix 远程 api 调用</p>\n<p>jvm</p>\n<h1 id=\"字体配色\"><a class=\"anchor\" href=\"#字体配色\">#</a> 字体配色</h1>\n<p><font color =\"red\" >     \t红色</p>\n<div style=\"background-color: #ffd700\" >\n    底色为橙色\n</div>\n<p>什么是存储过程，他的作用是啥</p>\n<p>载荷因子为什么是 0.75</p>\n<p>什么是缓存击穿、缓存穿透、缓存雪崩？</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "面试",
                "面试"
            ]
        },
        {
            "id": "https://eth168.top/interview/JavaSE%E2%80%94%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "url": "https://eth168.top/interview/JavaSE%E2%80%94%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "title": "多线程",
            "date_published": "2023-01-04T16:00:00.000Z",
            "content_html": "<h1 id=\"多线程\"><a class=\"anchor\" href=\"#多线程\">#</a> 多线程</h1>\n<h3 id=\"wait-和-sleep-的区别\"><a class=\"anchor\" href=\"#wait-和-sleep-的区别\">#</a> wait 和 sleep 的区别</h3>\n<p>wait 进入阻塞状态，但是释放了锁</p>\n<p>sleep 进入阻塞状态，但是没有释放锁</p>\n<h3 id=\"wait和notify要放在synchronize中\"><a class=\"anchor\" href=\"#wait和notify要放在synchronize中\">#</a> wait 和 notify 要放在 synchronize 中</h3>\n<p>其实这样设计的原因<strong>就是为了防止多线程并发运行时，程序的执行混乱问题</strong>。不然在有可能会出现在 wait 没有执行结束的情况下，notify 已经执行完毕，这样会导致我们一直处于休眠状态。</p>\n<h3 id=\"线程状态\"><a class=\"anchor\" href=\"#线程状态\">#</a> 线程状态</h3>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/2020052615440291.png\" alt=\"C:\\Users\\Administrator\\AppData\\Roaming\\Typora\\typora-user-images\\image-20200526103703738.png\" /></p>\n<p>1、 <code>NEW</code> ：初始状态，线程被构建，但是还没有调用 start 方法；</p>\n<p>2、 <code>RUNNABLED</code> ：运行状态，JAVA 线程把操作系统中的就绪和运行两种状态统一称为 “运行中” ；</p>\n<p>3、 <code>BLOCKED</code> ：阻塞状态，表示线程进入等待状态，也就是线程因为某种原因放弃了 CPU 使用权，阻塞也分为几种情况 ：</p>\n<ul>\n<li>\n<p>等待阻塞：运行的线程执行了 Thread.sleep 、wait ()、 join () 等方法 JVM 会把当前线程设置为等待状态，当 sleep 结束、join 线程终止或者线程被唤醒后，该线程从等待状态进入到阻塞状态，重新抢占锁后进行线程恢复；</p>\n</li>\n<li>\n<p>同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被其他线程锁占用了，那么 jvm 会把当前的线程放入到锁池中 ；</p>\n</li>\n<li>\n<p>其他阻塞：发出了 I/O 请求时，JVM 会把当前线程设置为阻塞状态，当 I/O 处理完毕则线程恢复；</p>\n</li>\n</ul>\n<p>4、 <code>WAITING</code> ：等待状态，没有超时时间，要被其他线程或者有其它的中断操作；</p>\n<p>执行 wait ()、join ()、LockSupport.park ()；</p>\n<p>5、 <code>TIME_WAITING</code> ：超时等待状态，超时以后自动返回；</p>\n<p>执行 Thread.sleep (long)、wait (long)、join (long)、LockSupport.park (long)、LockSupport.parkNanos (long)、LockSupport.parkUntil (long)</p>\n<p>6、 <code>TERMINATED</code> ：终止状态，表示当前线程执行完毕 。</p>\n<h3 id=\"线程死亡dead\"><a class=\"anchor\" href=\"#线程死亡dead\">#</a> 线程死亡（DEAD）</h3>\n<p>正常结束</p>\n<p>1、run () 或 call () 方法执行完成，线程正常结束。</p>\n<p>异常结束</p>\n<p>2.、线程抛出一个未捕获的 Exception 或 Error。</p>\n<p>调用 stop</p>\n<p>3、 直接调用该线程的 stop () 方法来结束该线程 — 该方法通常容易导致死锁，不推荐使用。</p>\n<img data-src=\"/interview/JavaSE%E2%80%94%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220731131902865.png\" class=\"\" title=\"image-20220731131902865\">\n<h3 id=\"终止线程-4-种方式\"><a class=\"anchor\" href=\"#终止线程-4-种方式\">#</a> 终止线程 4 种方式</h3>\n<ol>\n<li>正常运行结束</li>\n</ol>\n<p>程序运行结束，线程自动结束。</p>\n<ol start=\"2\">\n<li>\n<p>使用退出标志退出线程</p>\n<p>一般 run () 方法执行完，线程就会正常结束，然而，常常有些线程是伺服线程。它们需要长时间的</p>\n<p>运行，只有在外部某些条件满足的情况下，才能关闭这些线程。使用一个变量来控制循环，例如：</p>\n<p>最直接的方法就是设一个 boolean 类型的标志，并通过设置这个标志为 true 或 false 来控制 while 循环是否退出，代码示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafe</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> exit <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>exit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//do something</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>定义了一个退出标志 exit，当 exit 为 true 时，while 循环退出，exit 的默认值为 false. 在定义 exit 时，使用了一个 Java 关键字 volatile，这个关键字的目的是使 exit 同步，也就是说在同一时刻只能由一个线程来修改 exit 的值。</p>\n</li>\n<li>\n<p>Interrupt 方法结束线程</p>\n<p>使用 interrupt () 方法来中断线程有两种情况：</p>\n<p>1、线程处于阻塞状态：如使用了 sleep, 同步锁的 wait,socket 中的 receive,accept 等方法时，会使线程处于阻塞状态。当调用线程的 interrupt () 方法时，会抛出 InterruptException 异常。阻塞中的那个方法抛出这个异常，通过代码捕获该异常，然后 break 跳出循环状态，从而让我们有机会结束这个线程的执行。通常很多人认为只要调用 interrupt 方法线程就会结束，实际上是错的， 一定要先捕获 InterruptedException 异常之后通过 break 来跳出循环，才能正常结束 run 方法。</p>\n<p>2、线程未处于阻塞状态：使用 isInterrupted () 判断线程的中断标志来退出循环。当使用 interrupt () 方法时，中断标志就会置 true，和使用自定义的标志来控制循环是一样的道理。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadSafe</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 非阻塞过程中通过判断中断标志来退出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">51000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻塞过程捕获中断异常来退出</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 捕获到异常之后，执行 break 跳出循环</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>\n<p>stop 方法终止线程（线程不安全）</p>\n<p>程序中可以直接使用 thread.stop () 来强行终止线程，但是 stop 方法是很危险的，就象突然关闭计算机电源，而不是按正常程序关机一样，可能会产生不可预料的结果，不安全主要是：thread.stop () 调用之后，创建子线程的线程就会抛出 ThreadDeatherror 的错误，并且会释放子线程所持有的所有锁。一般任何进行加锁的代码块，都是为了保护数据的一致性，如果在调用 thread.stop () 后导致了该线程所持有的所有锁的突然释放 (不可控制)，那么被保护数据就有可能呈现不一致性，其他线程在使用这些被破坏的数据时，有可能导致一些很奇怪的应用程序错误。因此，并不推荐使用 stop 方法来终止线程。</p>\n</li>\n</ol>\n<h3 id=\"未完成\"><a class=\"anchor\" href=\"#未完成\">#</a> —————————— 未完成</h3>\n<h1 id=\"线程池\"><a class=\"anchor\" href=\"#线程池\">#</a> 线程池</h1>\n<h3 id=\"线程工厂的目的\"><a class=\"anchor\" href=\"#线程工厂的目的\">#</a> 线程工厂的目的</h3>\n<p>当我们们构建核心线程和最大线程，可以通过线程工厂指定线程名字和其他信息，方便我们后期查错。</p>\n<h3 id=\"线程池的核心属性\"><a class=\"anchor\" href=\"#线程池的核心属性\">#</a> 线程池的核心属性</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 本质就是一个 int 类型的数值，前三位标识线程池的状态，后二十九位标识线程的数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicInteger</span> ctl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token function\">ctlOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RUNNING</span>，<span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 本质就是 29, 为了方便对 ctL 做位运算使用的常量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">COUNT_BITS</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIZE</span> <span class=\"token operator\">-</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 计算出线程池的线程最大容量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 线程池正常运行！\t\t111 ——> -1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">RUNNING</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 线程地被 shutdown, 继续执行完剩下的任务！\t\t\t\t000 ——> 0</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">SHUTDOwN</span> <span class=\"token operator\">-</span> <span class=\"token number\">0</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 线程池被 shutdownNow，线程池停止，并且所有任务中断\t 001 ——> 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">STOP</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//shutdown 或者 shutdownNow 之后，任务都被处理完之后，到这个过渡状态\t010 ——> 2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">TIDYING</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 线程池停止\t\t\t 011 ——> 3</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">TERMINATED</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token constant\">COUNT_BITS</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"线程池核心的-execute-流程\"><a class=\"anchor\" href=\"#线程池核心的-execute-流程\">#</a> 线程池核心的 execute 流程</h3>\n<p>线程池有两种执行 submit 和  execute ，但是其实都是在源码中 submit 的返回值是 Future 内部都是执行了 execute () 方法，所以我们着重看 execute 就行，submit 相当于他的加强</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> ftask <span class=\"token operator\">=</span> <span class=\"token function\">newTaskFor</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>ftask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> ftask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> ftask <span class=\"token operator\">=</span> <span class=\"token function\">newTaskFor</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>ftask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> ftask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>execute 源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 拿到线程信息，高 3 位线程状态，其余 29 位 线程大小</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 基于 workerCountOf () 获取正在工作的线程数，判断是否小于核心线程数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 创建核心线程，并执行任务  ，传入 true 表示当前为核心线程</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 如果获取线核心线程失败，重新获取 ctl</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 获取线程池状态，是否运行；如果线程池正在运行，就将任务追加到阻塞队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> recheck <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 尝试创建最大线程数，如果成功返回 true，失败了就进行拒绝策略</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程池增加工作线程的操作\"><a class=\"anchor\" href=\"#线程池增加工作线程的操作\">#</a> 线程池增加工作线程的操作</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> firstTask<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> core<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 给 for 循环追加标记</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    retry<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 获取线程 ctl</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 获取当前线程状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 如果 rs >= SHUTDOWN，说明线程池执行了 shutdown 方法或者 shutdownNow</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">>=</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token operator\">!</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// 线程池听了</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>               firstTask <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\">// 任务为 null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>               <span class=\"token operator\">!</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 工作队列为空</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 获取当前工作线程个数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">int</span> wc <span class=\"token operator\">=</span> <span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 如果工作线程大于容量 或者 （ 工作线程 》核心线程 | 工作线程 》最大线程 ）</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>wc <span class=\"token operator\">>=</span> <span class=\"token constant\">CAPACITY</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                wc <span class=\"token operator\">>=</span> <span class=\"token punctuation\">(</span>core <span class=\"token operator\">?</span> corePoolSize <span class=\"token operator\">:</span> maximumPoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 基于 CAS 的方式将工作线程数 + 1</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndIncrementWorkerCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">break</span> retry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 如果没有成功的 CAS，就要判断是否重新执行外部循环</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 如果线程池状态改变，从外侧改变</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 如果线程池状态没变，从内侧改变</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> rs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">continue</span> retry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 声明了两个标识</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">boolean</span> workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">boolean</span> workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token comment\">// 真正的工作线程就是 Worker</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token class-name\">Worker</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 构建 Worker, 并将任务注入</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span>firstTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 获取线程池的全局锁</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> mainLock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mainLock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 上锁的为因为，shutdown 或者 shutdownNow 的时候，也需要获取锁资源</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 获取线程池状态</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token keyword\">int</span> rs <span class=\"token operator\">=</span> <span class=\"token function\">runStateOf</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t   <span class=\"token comment\">// 判断线程池状态 &lt; SHUTDOWN ，也就是 RUNNING 状态</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">&lt;</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                    <span class=\"token punctuation\">(</span>rs <span class=\"token operator\">==</span> <span class=\"token constant\">SHUTDOWN</span> <span class=\"token operator\">&amp;&amp;</span> firstTask <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 线程池为 SHUTDOWN 同时任务为 null</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                    <span class=\"token comment\">// 如果线程干活了。直接抛出异常</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalThreadStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token comment\">// 将工作线程追加到 Workers (一个 HashSet) 存储</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                    workers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                    <span class=\"token comment\">// 获取这个 hashSet 长度</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> workers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                    <span class=\"token comment\">// 如果现在的工作线程数 > 历史最大线程数，直接替换掉 largestPoolSize</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> largestPoolSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        largestPoolSize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                    <span class=\"token comment\">// 将工作线程设置为 true，表示添加成功</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                    workerAdded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token comment\">// 最后释放锁</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                mainLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 如果工作线程添加成功，启动工作线程</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workerAdded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                <span class=\"token comment\">// 设置启动工作线程为 True</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                workerStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">// 如果工作线程启动失败</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> workerStarted<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token comment\">// 补救操作</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token function\">addWorkerFailed</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token keyword\">return</span> workerStarted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程池的work类\"><a class=\"anchor\" href=\"#线程池的work类\">#</a> 线程池的 Work 类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPoolExecutor</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractExecutorService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//***</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Worker</span> <span class=\"token comment\">// 属于线程池的一个内部类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span>  <span class=\"token comment\">// 继承了 Runnable 也就是相对于 worker 也是一个任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">6138294804551838833L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Runnable</span> firstTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">long</span> completedTasks<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> firstTask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstTask <span class=\"token operator\">=</span> firstTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token function\">getThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token comment\">// 当调用 worker 内部线程的 start () 方法时，实际是在调用 worker 类中的 run () 方法，实际执行的是 runWorker ()</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">runWorker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"线程池的-runworker-方法\"><a class=\"anchor\" href=\"#线程池的-runworker-方法\">#</a> 线程池的 runWorker () 方法</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">runWorker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Worker</span> w<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 获取当前线程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Thread</span> wt <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 获取 Worker 中的具体任务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Runnable</span> task <span class=\"token operator\">=</span> w<span class=\"token punctuation\">.</span>firstTask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将 worker 中的 task 置为 null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    w<span class=\"token punctuation\">.</span>firstTask <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 将有参构造中的标记 (setState (-1)) 撤销，代表当前线程可以被打断</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// allow interrupts</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 标记，</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">boolean</span> completedAbruptly <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 如果 worker 中的 task 有任务，直接执行当前任务，否则去队列中获取任务</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">=</span> <span class=\"token function\">getTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 当前要执行，添加标记，shutdown 也不能打断</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            w<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>           <span class=\"token comment\">// 判断当前线程池装，以及线程状态，判断是否需要被打断</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">runStateAtLeast</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STOP</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                 <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                  <span class=\"token function\">runStateAtLeast</span><span class=\"token punctuation\">(</span>ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STOP</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token operator\">!</span>wt<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                wt<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 执行任务的开始</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 在执行任务之前做的事，前置增强</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token function\">beforeExecute</span><span class=\"token punctuation\">(</span>wt<span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">Throwable</span> thrown <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 执行任务</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuntimeException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    thrown <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Error</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    thrown <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    thrown <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                     <span class=\"token comment\">// 在执行任务之前做的事，后置增强</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token function\">afterExecute</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> thrown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">// 任务处理结束</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                task <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 标记当前 worker 处理的任务数 + 1</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                w<span class=\"token punctuation\">.</span>completedTasks<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                w<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        completedAbruptly <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token function\">processWorkerExit</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> completedAbruptly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"1-单核cpu设定多线程是否有意义\"><a class=\"anchor\" href=\"#1-单核cpu设定多线程是否有意义\">#</a> 1、单核 CPU 设定多线程是否有意义？</h3>\n<h3 id=\"2-线程数是不是越多越好\"><a class=\"anchor\" href=\"#2-线程数是不是越多越好\">#</a> 2、线程数是不是越多越好？</h3>\n<p>​\t并不是，这牵扯到线程调用问题举个反例，盖一个房子需要 100H，我 100 人工作一小时就可以完成？显然不可以。甚至会降低效率，浪费资源</p>\n<h3 id=\"3-线程数设置多少最合适\"><a class=\"anchor\" href=\"#3-线程数设置多少最合适\">#</a> 3、线程数设置多少最合适？</h3>\n<ul>\n<li><strong>压测</strong>（就是不停尝试，找到最合适的）， 一般情况下，为了安全不可能全部占用，我们留出一部分空间我们一般取 80%，</li>\n</ul>\n<p>1️⃣64 核 CPU 我们全部使用，其他的程序就无法启动，显然不正常</p>\n<ul>\n<li><strong>通过公式计算</strong></li>\n</ul>\n<img data-src=\"/interview/JavaSE%E2%80%94%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220708174914435.png\" class=\"\" title=\"image-20220708174914435\">\n<p>⭕️ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>32</mn><mo>∗</mo><mn>8</mn><mo>∗</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mn>0.2</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mn>30.72</mn></mrow><annotation encoding=\"application/x-tex\">32*8*(1+0.2)=30.72</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span></span></span></span>​</p>\n<h3 id=\"如何优雅的结束一个线程\"><a class=\"anchor\" href=\"#如何优雅的结束一个线程\">#</a> 如何优雅的结束一个线程？</h3>\n<p>1️⃣ stop () 方法，但是不建议，容易产生数据不一致情况\t\t【<strong>已废</strong>】</p>\n<p>2️⃣ suspend ()、resume () 方法，暂停，继续方法，暂停的时候不会释放锁，容易产生死锁【<strong>已废</strong>】</p>\n<p>3️⃣ vlatile ()，时间无法控制</p>\n<ul>\n<li>\n<p>不适合某些场景（比如还没有同步的时候，线程做了阻塞操作，没有办法循环回去）</p>\n</li>\n<li>\n<p>打断时间也不是特别精确，比如一个阻塞容器，容量为 5 的时候结束生产者，<br />\n但是，由于 volatile 同步线程标志位的时间控制不是很精确，有可能生产者还继续生产一段儿时间</p>\n</li>\n</ul>\n<p>4️⃣ interrupt () and isInterrupted（比较优雅）</p>\n<h3 id=\"程序真的会一行一行的运行吗\"><a class=\"anchor\" href=\"#程序真的会一行一行的运行吗\">#</a> 程序真的会一行一行的运行吗？</h3>\n<p>​\t不一定，在没有相互依赖的语句，可能为了效率后面的语句会同时运行，运行完成的时间比前一个跟快。</p>\n<h3 id=\"this对象溢出问题\"><a class=\"anchor\" href=\"#this对象溢出问题\">#</a> this 对象溢出问题？</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Integer</span> num <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Test</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最终结果可能是什么？</p>\n<p>1️⃣、8</p>\n<p>2️⃣、0</p>\n<p>为什么是 0 呢，因为在我们初始化的时候有可能会导致我们创建的这个线程直接去读取未被初始化的 Num，所以解决方案</p>\n<ul>\n<li>可以在构造器中 new 但是不要启动，启动单另写一个方法启动</li>\n</ul>\n<h3 id=\"线程池的好处\"><a class=\"anchor\" href=\"#线程池的好处\">#</a> 线程池的好处</h3>\n<p>1、降低资源消耗</p>\n<p>​\t线程的创建和销毁，通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p>\n<p>2、调高响应速度</p>\n<p>​\t任务到了就直接可以上线程了，不用再 new。当任务到达时，任务可以不需要等到线程创建就能立即执行</p>\n<p>3、提高线程的可管理性</p>\n<p>​\t线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "面试",
                "多线程",
                "面试"
            ]
        },
        {
            "id": "https://eth168.top/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/",
            "url": "https://eth168.top/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/",
            "title": "1.初识",
            "date_published": "2023-01-02T15:59:59.000Z",
            "content_html": "<h1 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h1>\n<ul>\n<li>能够知道如何创建小程序项目</li>\n<li>能够清楚小程序项目的基本组成结构</li>\n<li>能够知道小程序页面由几部分组成</li>\n<li>能够知道小程序中常见的组件如何使用</li>\n<li>能够知道小程序如何进行协同开发和发布</li>\n</ul>\n<h1 id=\"目录结构介绍\"><a class=\"anchor\" href=\"#目录结构介绍\">#</a> 目录结构介绍</h1>\n<ol>\n<li>pages 用来存放所有小程序的页面</li>\n<li>utils 用来存放工具性质的模块（例如：格式化时间的自定义模块)</li>\n<li>app.js 小程序项目的入口文件</li>\n<li>app.json 小程序项目的全局配置文件</li>\n<li>app.wxSS 小程序项目的全局样式文件</li>\n<li>project.config.json 项目的配置文件</li>\n<li>sitemap.json 用来配置小程序及其页面是否允许被微信索引</li>\n</ol>\n<h1 id=\"小程序页面组成部分\"><a class=\"anchor\" href=\"#小程序页面组成部分\">#</a> 小程序页面组成部分</h1>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108001203996.png\" class=\"\">\n<p><img data-src=\"image-20221108001203996.png\" alt=\"\" /></p>\n<h1 id=\"json配置文件\"><a class=\"anchor\" href=\"#json配置文件\">#</a> JSON 配置文件</h1>\n<p><code>JSON</code> <strong> 是一种数据格式</strong>，在实际开发中，JSON 总是以<strong>配置文件</strong>的形式出现。小程序项目中也不例外：通过不同的.json 配置文件，可以对小程序项目进行不同级别的配置。<br />\n小程序项目中有 4 种 json 配置文件，分别是:</p>\n<ol>\n<li>项目根目录中的 <code> app.json</code>  配置文件</li>\n<li>项目根目录中的  <code>project.config.json</code>  配置文件</li>\n<li>项目根目录中的 <code>sitemap.json</code>  配置文件</li>\n<li><strong>每个页面文件夹中的  <code>.json</code>  配置文件</strong></li>\n</ol>\n<h2 id=\"appjson\"><a class=\"anchor\" href=\"#appjson\">#</a> app.json</h2>\n<p>app.json 是当前小程序的<strong>全局配置</strong>，包括了小程序的所有<strong>页面路径、窗口外观、界面表现、底部 tab</strong> 等。Demo 项目里边的 app.json 配置内容如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108001652685.png\" class=\"\">\n<p>简单了解下这 4 个配置项的作用:</p>\n<p><code>pages</code> ：用来记录当前小程序所有页面的路径</p>\n<p><code>window</code> ：全局定义小程序所有页面的背景色、文字颜色等</p>\n<p><code>style</code> ：全局定义小程序组件所使用的样式版本</p>\n<p><code>sitemapLocation</code> ：用来指明 sitemap.json 的位置</p>\n<h2 id=\"projectconfigjson\"><a class=\"anchor\" href=\"#projectconfigjson\">#</a> project.config.json</h2>\n<p>project.config.json 是项目配置文件，用来记录我们 <code>对小程序开发工具所做的个性化配置</code> ，例如:</p>\n<ul>\n<li>\n<p><code>setting </code> 中保存了 <code>编译相关的配置</code></p>\n</li>\n<li>\n<p><code>projectname</code>  中保存的是 <code>项目名称</code></p>\n</li>\n<li>\n<p><code>appid </code> 中保存的是 <code>小程序的账号ID</code></p>\n</li>\n</ul>\n<h2 id=\"sitemapjson文件\"><a class=\"anchor\" href=\"#sitemapjson文件\">#</a> sitemap.json 文件</h2>\n<p>​\t\t微信现已开放小程序内搜索，效果类似于 PC 网页的 SEO。sitemap.json 文件用来配置小程序页面是否允许微信索引。</p>\n<p>​\t\t当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中。</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108002401045.png\" class=\"\">\n<p>​\t\t注意：  <code>sitemap</code>  的索引提示是默认开启的，如需要关闭 sitemap 的索引提示，可在小程序项目配置文件 <code>project.config.json</code>  的  <code>setting</code>  中配置字段 <code>checkSiteMap</code>  为 <code>false</code></p>\n<h2 id=\"页面的json配置文件\"><a class=\"anchor\" href=\"#页面的json配置文件\">#</a> 页面的.json 配置文件</h2>\n<p>​\t\t小程序中的每一个页面，可以使用.json 文件来<strong>对本页面的窗口外观进行配置，页面中的配置项会覆盖 app.json 的 window 中相同的配置项</strong>。</p>\n<p><mark>页面配置项   &gt;    全局配置</mark></p>\n<h2 id=\"新建小程序页面\"><a class=\"anchor\" href=\"#新建小程序页面\">#</a> 新建小程序页面</h2>\n<p>​\t\t只需要在 app.json -&gt; pages 中新增页面的存放路径，小程序开发者工具即可帮我们自动创建对应的页面文件</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108002821620.png\" class=\"\">\n<h2 id=\"修改项目首页\"><a class=\"anchor\" href=\"#修改项目首页\">#</a> 修改项目首页</h2>\n<p>​\t\t只需要调整  <code>app.json</code>  -&gt;   <code>pages</code>  数组中页面路径的前后顺序，即可修改项目的首页。小程序会把排在第一位的页面，当作项目首页进行渲染，如图所示:</p>\n<h1 id=\"wxml模板\"><a class=\"anchor\" href=\"#wxml模板\">#</a> WXML 模板</h1>\n<p>​\t\tWXML (WeiXin Markup Language) 是小程序框架设计的一套 <code>标签语言，用来构建小程序页面的结构</code> ，其作用类似于网页开发中的 HTML。</p>\n<p><strong>WXML 和 HTML 的区别</strong></p>\n<ol>\n<li><strong>标签名称不同</strong>\n<ul>\n<li>HTML ( div, span, img, a)</li>\n<li>WXML ( view, text, image, navigator)</li>\n</ul>\n</li>\n<li><strong>属性节点不同</strong>\n<ul>\n<li>&lt;a href=&quot;#&quot;&gt; 超链接</a></li>\n<li>&lt;navigator url=&quot; /pages/home/home&quot;&gt;</navigator></li>\n</ul>\n</li>\n<li><strong>提供了类似于 Vue 中的模板语法</strong>\n<ul>\n<li>数据绑定</li>\n<li>列表渲染</li>\n<li>条件渲染</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"wxss\"><a class=\"anchor\" href=\"#wxss\">#</a> WXSS</h1>\n<p>​\t\tWXSS (Weixin Style Sheets) 是一套样式语言，用于描述 WXML 的组件样式，类似于网页开发中的 CSS,</p>\n<blockquote>\n<p>WXSS 和 CSS 的区别</p>\n</blockquote>\n<ol>\n<li><strong>新增了 rpx 尺寸单位</strong>\n<ul>\n<li>cSS 中需要手动进行像素单位换算，例如 rem</li>\n<li>WXSS 在底层支持新的尺寸单位 rpx，在不同大小的屏幕上小程序会自动进行换算</li>\n</ul>\n</li>\n<li><strong>提供了全局的样式和局部样式</strong>\n<ul>\n<li>项目根目录中的 app.wxSs 会作用于所有小程序页面</li>\n<li>局部页面的.wxss 样式仅对当前页面生效</li>\n</ul>\n</li>\n<li><strong>WXSS 仅支持部分 CSS 选择器</strong>\n<ul>\n<li>.class 和 #id</li>\n<li>element</li>\n<li>并集选择器、后代选择器</li>\n<li>::after 和 ::before 等伪类选择器</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"js交互\"><a class=\"anchor\" href=\"#js交互\">#</a> JS 交互</h1>\n<p>​\t\t一个项目仅仅提供界面展示是不够的，在小程序中，我们通过.js 文件来处理用户的操作。例如：响应用户的点击、获取用户的位置等等。</p>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<p>小程序中的 JS 文件分为三大类，分别是:</p>\n<ol>\n<li>app.js<br />\n 是<strong>整个小程序项目的入口文件</strong>，通过调用<strong> App () 函数</strong>来启动整个小程序</li>\n<li>页面的.js 文件<br />\n是<strong>页面的入口文件</strong>，通过调用<strong> Page () 函数</strong>来创建并运行页面</li>\n<li>普通的.js 文件<br />\n是<strong>普通的功能模块文件</strong>，用来封装<strong>公共的函数或属性</strong>供页面使用</li>\n</ol>\n<h1 id=\"小程序的宿主环境\"><a class=\"anchor\" href=\"#小程序的宿主环境\">#</a> 小程序的宿主环境</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p>​\t\t <code>宿主环境</code>  ( host environment）指的是<mark>程序运行所必须的依赖环境</mark>。</p>\n<p>例如:<br />\nAndroid 系统和 iOS 系统是两个不同的宿主环境。安卓版的微信 App 是不能在 iOS 环境下运行的所以，Android 是安卓软件的宿主环境，<mark>脱离了宿主环境的软件是没有任何意义的</mark>！</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108222035966.png\" class=\"\">\n<h2 id=\"小程序的宿主环境-2\"><a class=\"anchor\" href=\"#小程序的宿主环境-2\">#</a> 小程序的宿主环境</h2>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108222233593.png\" class=\"\" title=\"image-20221108222233593\">)\n<h2 id=\"小程序宿主环境包含的内容\"><a class=\"anchor\" href=\"#小程序宿主环境包含的内容\">#</a> 小程序宿主环境包含的内容</h2>\n<ol>\n<li>通信模型</li>\n<li>运行机制</li>\n<li>组件</li>\n<li>API</li>\n</ol>\n<h3 id=\"通信模型\"><a class=\"anchor\" href=\"#通信模型\">#</a> 通信模型</h3>\n<h4 id=\"通信主体\"><a class=\"anchor\" href=\"#通信主体\">#</a> 通信主体</h4>\n<p>小程序中通信的主体是 <code>渲染层</code> 和 <code>逻辑层</code> ，其中</p>\n<ol>\n<li>WXML 模板和 WXSS 样式工作在渲染层</li>\n<li>JS 脚本工作在逻辑层</li>\n</ol>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108222513830.png\" class=\"\">\n<h4 id=\"通信模型-2\"><a class=\"anchor\" href=\"#通信模型-2\">#</a> 通信模型</h4>\n<p>小程序中的通信模型分为两部分</p>\n<p>① <code>渲染层</code> 和 <code>逻辑层</code> 之间的通信</p>\n<ul>\n<li>由微信客户端进行转发</li>\n</ul>\n<p>② <code>逻辑层</code> 和 <code>第三方服务器</code> 之间的通信・</p>\n<ul>\n<li>由微信客户端进行转发</li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108222720231.png\" class=\"\">\n<h3 id=\"运行机制\"><a class=\"anchor\" href=\"#运行机制\">#</a> 运行机制</h3>\n<h4 id=\"小程序启动过程\"><a class=\"anchor\" href=\"#小程序启动过程\">#</a> 小程序启动过程</h4>\n<ol>\n<li>把小程序的代码包下载到本地解析</li>\n<li>app.json 全局配置文件</li>\n<li>执行 app.js 小程序入口文件， <code>调用App()创建小程序实例</code></li>\n<li>渲染小程序首页</li>\n<li>小程序启动完成</li>\n</ol>\n<h4 id=\"页面渲染的过程\"><a class=\"anchor\" href=\"#页面渲染的过程\">#</a> 页面渲染的过程</h4>\n<ol>\n<li>加载解析页面的.json 配置文件</li>\n<li>加载页面的.wxml 模板和.wxSS 样式</li>\n<li>执行页面的.js 文件， <code>调用Page()创建页面实例</code></li>\n<li>页面渲染完成</li>\n</ol>\n<h3 id=\"组件\"><a class=\"anchor\" href=\"#组件\">#</a> 组件</h3>\n<p><code>小程序中的组件也是由宿主环境提供的</code> ，开发者可以基于组件快速搭建出漂亮的页面结构。官方把小程序的组件分为了 9 大类，分别是︰</p>\n<ol>\n<li><strong>视图容器</strong></li>\n<li><strong>基础内容</strong></li>\n<li><strong>表单组件</strong></li>\n<li><strong>导航组件</strong></li>\n<li>媒体组件</li>\n<li>map 地图组件</li>\n<li>canvas 画布组件</li>\n<li>开放能力</li>\n<li>无障碍访问</li>\n</ol>\n<h4 id=\"常见的视图容器组件\"><a class=\"anchor\" href=\"#常见的视图容器组件\">#</a> 常见的视图容器组件</h4>\n<ol>\n<li><strong>view</strong></li>\n</ol>\n<ul>\n<li>普通视图区域</li>\n<li>类似于 HTML 中的 div，是一个块级元素常用来实现页面的布局效果</li>\n</ul>\n<ol start=\"2\">\n<li><strong>scroll-view</strong></li>\n</ol>\n<ul>\n<li>可滚动的视图区域</li>\n<li>常用来实现滚动列表效果</li>\n</ul>\n<ol start=\"3\">\n<li><strong>swiper 和 swiper-item</strong></li>\n</ol>\n<ul>\n<li>轮播图容器组件和轮播图 item 组件</li>\n</ul>\n<h5 id=\"view组件的基本使用\"><a class=\"anchor\" href=\"#view组件的基本使用\">#</a> View 组件的基本使用</h5>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108223904772.png\" class=\"\">\n<p>将  <code>view</code>  当成  <code>div</code>  使用即可</p>\n<h5 id=\"scroll-view基本使用\"><a class=\"anchor\" href=\"#scroll-view基本使用\">#</a> scroll-view 基本使用</h5>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108223947013.png\" class=\"\">\n<p>纵向滚动：要加一个强制性的高度</p>\n<p>横向滚动：要加一个强制性的宽度</p>\n<h5 id=\"swiper和swiper-item的基本使用\"><a class=\"anchor\" href=\"#swiper和swiper-item的基本使用\">#</a> swiper 和 swiper-item 的基本使用</h5>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108224904657.png\" class=\"\">\n<h5 id=\"swiper常用属性\"><a class=\"anchor\" href=\"#swiper常用属性\">#</a> swiper 常用属性</h5>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108225235849.png\" class=\"\">\n<h4 id=\"常见的文本内容组件\"><a class=\"anchor\" href=\"#常见的文本内容组件\">#</a> 常见的文本内容组件</h4>\n<ol>\n<li>text\n<ul>\n<li>文本组件</li>\n<li>类似于 HTML 中的 span 标签，是一个行内元素</li>\n</ul>\n</li>\n<li>rich-text\n<ul>\n<li>富文本组件</li>\n<li>支持把 HTML 字符串渲染为 WXML 结构</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"text基本使用\"><a class=\"anchor\" href=\"#text基本使用\">#</a> text 基本使用</h5>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108225736356.png\" class=\"\">\n<h5 id=\"rich-text基本使用\"><a class=\"anchor\" href=\"#rich-text基本使用\">#</a> rich-text 基本使用</h5>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108225802321.png\" class=\"\">\n<h4 id=\"其他组件\"><a class=\"anchor\" href=\"#其他组件\">#</a> 其他组件</h4>\n<ol>\n<li><strong>button</strong>\n<ul>\n<li>按钮组件</li>\n<li>功能比 HTML 中的 button 按钮丰富</li>\n<li>通过 open-type 属性可以调用微信提供的各种功能（客服、转发、获取用户授权、获取用户信息等)</li>\n</ul>\n</li>\n<li><strong>image</strong>\n<ul>\n<li>图片组件</li>\n<li>image 组件默认宽度约 300px、高度约 240px</li>\n</ul>\n</li>\n<li><strong>navigator (后面课程会专门讲解)</strong>\n<ul>\n<li>页面导航组件</li>\n<li>类似于 HTML 中的 a 链接</li>\n</ul>\n</li>\n</ol>\n<h5 id=\"button基本使用\"><a class=\"anchor\" href=\"#button基本使用\">#</a> button 基本使用</h5>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108230122087.png\" class=\"\">\n<h5 id=\"image组件基本使用\"><a class=\"anchor\" href=\"#image组件基本使用\">#</a> image 组件基本使用</h5>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108230231356.png\" class=\"\">\n<p>属性：</p>\n<ol>\n<li><code>mode</code>  属性：</li>\n</ol>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108230314244.png\" class=\"\">\n<h3 id=\"api\"><a class=\"anchor\" href=\"#api\">#</a> API</h3>\n<p>​\t\t<mark>小程序中的 API 是由宿主环境提供的</mark>，通过这些丰富的小程序 API，开发者可以方便的调用微信提供的能力，例如：获取用户信息、本地存储、支付功能等。</p>\n<p>他主要分为 3 大类：</p>\n<ol>\n<li><strong>事件监听 API</strong>\n<ul>\n<li>特点：以 <code>on</code>  开头，用来 <code>监听某些事件的触发</code></li>\n<li>举例: wx. <code>onWindowResize</code>  (function callback) 监听窗口尺寸变化的事件</li>\n</ul>\n</li>\n<li><strong>同步 API</strong>\n<ul>\n<li>特点 1∶以  <code>Sync </code> 结尾的 API 都是同步 API</li>\n<li>特点 2: 同步 API 的执行结果，可以通过函数返回值直接获取，如果执行出错会抛出异常</li>\n<li>举例: wx. <code>setStorageSync</code>  ('key', 'value') 向本地存储中写入内容</li>\n</ul>\n</li>\n<li><strong>异步 API</strong>\n<ul>\n<li>特点：类似于 jQuery 中的 <code>$.ajax(options)</code>  函数，需要通过 success、fail、complete 接收调用的结果</li>\n<li>举例: wx. <code>request</code>  () 发起网络数据请求，通过 success 回调函数接收数据</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"小程序的协同工作\"><a class=\"anchor\" href=\"#小程序的协同工作\">#</a> 小程序的协同工作</h1>\n<p>​\t\t在中大型的公司里，人员的分工非常仔细：同一个小程序项目，一般会有不同岗位、不同角色的员工同时参与设计与开发。<br />\n​\t\t此时出于管理需要，我们迫切需要对<mark>不同岗位、不同角色的员工的权限进行边界的划分</mark>，使他们能够高效的进行协同工作。</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108230906914.png\" class=\"\">\n<p><strong>开发流程</strong></p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108230923177.png\" class=\"\">\n<h2 id=\"小程序成员管理\"><a class=\"anchor\" href=\"#小程序成员管理\">#</a> 小程序成员管理</h2>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108231121052.png\" class=\"\">\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108231154210.png\" class=\"\">\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108231231484.png\" class=\"\">\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108231244035.png\" class=\"\">\n<h2 id=\"小程序的版本控制\"><a class=\"anchor\" href=\"#小程序的版本控制\">#</a> 小程序的版本控制</h2>\n<h3 id=\"软件开发过程中的不同版本\"><a class=\"anchor\" href=\"#软件开发过程中的不同版本\">#</a> 软件开发过程中的不同版本</h3>\n<p>在软件开发过程中，根据时间节点的不同，会产出不同的软件版本，例如:</p>\n<ol>\n<li>\n<p>开发者编写代码的同时，对项目代码进行自测（<strong>开发版本</strong>)</p>\n</li>\n<li>\n<p>直到程序达到一个稳定可体验的状态时，开发者把体验版本给到产品经理和测试人员进行<strong>体验测试</strong></p>\n</li>\n<li>\n<p>最后修复完程序的 Bug 后，<strong>发布正式版</strong>供外部用户使用</p>\n</li>\n</ol>\n<h3 id=\"小程序版本\"><a class=\"anchor\" href=\"#小程序版本\">#</a> 小程序版本</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108231610248.png\" class=\"\">\n<h2 id=\"小程序协同和发布上线\"><a class=\"anchor\" href=\"#小程序协同和发布上线\">#</a> 小程序协同和发布上线</h2>\n<p>主要有三大步：上传代码、提交审核、发布</p>\n<h3 id=\"上传代码\"><a class=\"anchor\" href=\"#上传代码\">#</a> 上传代码</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108231719411.png\" class=\"\">\n<p>在后台查看上传之后的版本</p>\n<p><code>登录小程序管理后台</code> →&gt; <code>管理</code> →&gt; <code>版本管理</code>  -&gt; <code>开发版本</code> ，即可查看刚才提交上传的版本了:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108231820929.png\" class=\"\">\n<h3 id=\"提交审核\"><a class=\"anchor\" href=\"#提交审核\">#</a> 提交审核</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108231852784.png\" class=\"\">\n<h3 id=\"发布\"><a class=\"anchor\" href=\"#发布\">#</a> 发布</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108231912913.png\" class=\"\">\n<h3 id=\"基于小程序码进行推广\"><a class=\"anchor\" href=\"#基于小程序码进行推广\">#</a> 基于小程序码进行推广</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108232024036.png\" class=\"\">\n<h3 id=\"运营数据\"><a class=\"anchor\" href=\"#运营数据\">#</a> 运营数据</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20221108232214298.png\" class=\"\">\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/1.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%9D%E8%AF%86/image-20230106221856205.png\" class=\"\">\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "小程序开发",
                "小程序开发"
            ]
        },
        {
            "id": "https://eth168.top/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/",
            "url": "https://eth168.top/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/",
            "title": "2.模板与配置",
            "date_published": "2023-01-02T15:59:58.000Z",
            "content_html": "<h1 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h1>\n<ul>\n<li>能够使用 WXML 模板语法渲染页面结构</li>\n<li>能够使用 wXSS 样式美化页面结构</li>\n<li>能够使用 app.json 对小程序进行全局性配置</li>\n<li>能够使用 page.json 对小程序页面进行个性化配置</li>\n<li>能够知道如何发起网络数据请求</li>\n</ul>\n<h1 id=\"wxml模板语法\"><a class=\"anchor\" href=\"#wxml模板语法\">#</a> WXML 模板语法</h1>\n<h2 id=\"数据绑定\"><a class=\"anchor\" href=\"#数据绑定\">#</a> 数据绑定</h2>\n<p><strong>数据绑定的基本原则</strong></p>\n<ol>\n<li>在 data 中定义数据</li>\n<li>在 WXML 中使用数据</li>\n</ol>\n<p>在页面对应的.js 文件中，把数据定义到 data 对象中即可:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110222249644.png\" class=\"\">\n<h3 id=\"mustache语法的格式\"><a class=\"anchor\" href=\"#mustache语法的格式\">#</a> Mustache 语法的格式</h3>\n<p>把 data 中的数据绑定到页面中渲染，使用 Mustache 语法（<strong>双大括号</strong>）将变量包起来即可。语法格式为︰</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>view<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>view<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"mustache语法的应用场景\"><a class=\"anchor\" href=\"#mustache语法的应用场景\">#</a> Mustache 语法的应用场景</h3>\n<p>Mustache 语法的主要应用场景如下:</p>\n<ul>\n<li>绑定内容</li>\n<li>绑定属性</li>\n<li>运算（三元运算、算术运算等)</li>\n</ul>\n<p><strong>动态绑定内容：</strong></p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110222627764.png\" class=\"\">\n<p><strong>动态绑定属性：</strong></p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110222649102.png\" class=\"\">\n<p><strong>运算：</strong></p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110222858304.png\" class=\"\">\n<p><strong>算数运算：</strong></p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110222926768.png\" class=\"\">\n<h2 id=\"事件绑定\"><a class=\"anchor\" href=\"#事件绑定\">#</a> 事件绑定</h2>\n<p>​\t\t事件是 <code>渲染层到逻辑层的通讯方式</code> 。通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理。</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110223105067.png\" class=\"\">\n<h3 id=\"常见事件\"><a class=\"anchor\" href=\"#常见事件\">#</a> 常见事件</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110223204015.png\" class=\"\">\n<h3 id=\"事件对象的属性列表\"><a class=\"anchor\" href=\"#事件对象的属性列表\">#</a> 事件对象的属性列表</h3>\n<p>当事件回调触发的时候，会收到一个事件对象 event，它的详细属性如下表所示:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110223359703.png\" class=\"\">\n<h3 id=\"target和currenttarget的区别\"><a class=\"anchor\" href=\"#target和currenttarget的区别\">#</a> target 和 currentTarget 的区别</h3>\n<p><code>target</code>  是 <code>触发该事件的源头组件</code> ，而 <code>currentTarget</code>  则是 <code>当前事件所绑定的组件</code> 。举例如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110223453218.png\" class=\"\">\n<p>点击内部的按钮时，点击事件以 <code>冒泡</code> 的方式向外扩散，也会触发外层 view 的 tap 事件处理函数。此时，对于外层的 view 来说:</p>\n<ul>\n<li>\n<p>e.target 指向的是触发事件的源头组件，因此<strong> e.target 是内部的按钮组件</strong></p>\n</li>\n<li>\n<p>e.currentTarget 指向的是当前正在触发事件的那个组件，因此<strong> e.currentTarget 是当前的 view 组件</strong></p>\n</li>\n</ul>\n<h3 id=\"bindtap语法格式\"><a class=\"anchor\" href=\"#bindtap语法格式\">#</a> bindtap 语法格式</h3>\n<p>在小程序中，不存在 HTML 中的 onclick 鼠标点击事件，而是通过 <code>tap事件</code> 来响应用户的触摸行为。</p>\n<ol>\n<li>通过 <code>bindtap</code> ，可以为组件绑定 tap 触摸事件，语法如下:</li>\n</ol>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110223739160.png\" class=\"\">\n<ol>\n<li>在页面的.js 文件中定义对应的事件处理函数，事件参数通过形参 <code>event</code>  (一般<strong>简写成 e</strong>) 来接收；</li>\n</ol>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110223802363.png\" class=\"\">\n<h3 id=\"在事件处理函数中为data中的数据赋值\"><a class=\"anchor\" href=\"#在事件处理函数中为data中的数据赋值\">#</a> 在事件处理函数中为 data 中的数据赋值</h3>\n<p>通过调用 <code>this.setData(dataObject)</code>  方法，可以给页面 data 中的数据重新赋值，示例如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110224020101.png\" class=\"\">\n<h3 id=\"事件传参\"><a class=\"anchor\" href=\"#事件传参\">#</a> 事件传参</h3>\n<p>​\t\t小程序中的事件传参比较特殊，<strong>不能在绑定事件的同时为事件处理函数传递参数</strong>。例如，下面的代码将不能正常工作:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110224257001.png\" class=\"\">\n<p>​\t\t因为小程序会把 bindtap 的属性值，统一当作事件名称来处理，相当于要调用一个名称为 <code> btnHandler(123)</code>  的事件处理函数。</p>\n<p>​\t可以为组件提供 <code>data-\\*</code>  自定义属性传参，其中 <code>*代表的是参数的名字</code> ，示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110224351872.png\" class=\"\">\n<p>最终:</p>\n<ul>\n<li><code>info </code> 会被解析为 <code>参数的名字</code></li>\n<li>数值 <code>2</code>  会被解析为 <code>参数的值</code></li>\n</ul>\n<p>在事件处理函数中，通过 <code>event.target.dataset.参数名</code> 即可获取到 <code>具体参数的值</code> ，示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110224537344.png\" class=\"\">\n<h3 id=\"bindinput的语法格式\"><a class=\"anchor\" href=\"#bindinput的语法格式\">#</a> bindinput 的语法格式</h3>\n<p>​\t\t在小程序中，通过 <code>input</code>  事件来响应文本框的输入事件，语法格式如下：通过 bindinput，可以为文本框绑定输入事件:</p>\n<ol>\n<li>通过 bindinput, 可以为文本框绑定输入事件:</li>\n</ol>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110224918614.png\" class=\"\">\n<ol start=\"2\">\n<li>在页面的.js 文件中定义事件处理函数:</li>\n</ol>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110224927140.png\" class=\"\">\n<h3 id=\"实现文本框和data之间的数据同步\"><a class=\"anchor\" href=\"#实现文本框和data之间的数据同步\">#</a> 实现文本框和 data 之间的数据同步</h3>\n<p>实现步骤:</p>\n<h4 id=\"1-定义数据\"><a class=\"anchor\" href=\"#1-定义数据\">#</a> 1、定义数据</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110225224164.png\" class=\"\">\n<h4 id=\"2-渲染结构\"><a class=\"anchor\" href=\"#2-渲染结构\">#</a> 2、渲染结构</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110225235249.png\" class=\"\">\n<h4 id=\"3-美化样式\"><a class=\"anchor\" href=\"#3-美化样式\">#</a> 3、美化样式</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110225242770.png\" class=\"\">\n<h4 id=\"4-绑定input事件处理函数\"><a class=\"anchor\" href=\"#4-绑定input事件处理函数\">#</a> 4、绑定 input 事件处理函数</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20221110225251204.png\" class=\"\">\n<h2 id=\"条件渲染\"><a class=\"anchor\" href=\"#条件渲染\">#</a> 条件渲染</h2>\n<h3 id=\"wxif\"><a class=\"anchor\" href=\"#wxif\">#</a> wx:if</h3>\n<p>在下程序中，使用  <code>wx:if=&quot;&#123;&#123;condition&#125;&#125;&quot;</code>  来判断是否需要渲染改代码块</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106160638849.png\" class=\"\">\n<p>也可以用  <code>wx:elif</code>  和  <code>wx:else</code>  来添加 else 判断：</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106160644586.png\" class=\"\">\n<h3 id=\"结合block\"><a class=\"anchor\" href=\"#结合block\">#</a> 结合 block</h3>\n<p>如果要<mark>一次性控制多个组件的展示与隐藏</mark>，可以使用一个 &lt;block&gt;&lt;/block &gt; 标签将多个组件包装起来，并在 &lt; block &gt; 标签上使用  <code>wx:if </code>  控制属性，示例如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106161302691.png\" class=\"\">\n<p><strong>注意</strong>: &lt;block&gt;<strong> 并不是一个组件</strong>，<mark>它只是一个包裹性质的容器</mark>，<strong>不会在页面中做任何渲染</strong>。</p>\n<h3 id=\"hidden\"><a class=\"anchor\" href=\"#hidden\">#</a> hidden</h3>\n<p>​\t隐藏，在小程序中，直接使用 <code>hidden=&quot;&#123;[ condition &#125;&#125;&quot;</code>  也能控制元素的显示与隐藏:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106161511935.png\" class=\"\">\n<h3 id=\"wxif-和-hidden-对比\"><a class=\"anchor\" href=\"#wxif-和-hidden-对比\">#</a> wx:if 和 hidden 对比</h3>\n<ol>\n<li>\n<p>运行方式不同</p>\n<ul>\n<li>wx:if 以 ==<strong> 动态创建和移除元素</strong> == 的方式，控制元素的展示与隐藏</li>\n<li>hidden 以 ==<strong> 切换样式</strong> == 的方式（(display: none/block;)，控制元素的显示与隐藏</li>\n</ul>\n</li>\n<li>\n<p>使用建议</p>\n<ul>\n<li><strong><mark>频繁切换</mark><strong>时，建议使用</strong> hidden</strong></li>\n<li>**<mark> 控制条件复杂</mark> ** 时，建议使用 wx:if 搭配 wx:elif、wx:else 进行展示与隐藏的切换</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"列表渲染\"><a class=\"anchor\" href=\"#列表渲染\">#</a> 列表渲染</h2>\n<h3 id=\"wxfor\"><a class=\"anchor\" href=\"#wxfor\">#</a> wx:for</h3>\n<p>通过 wx:for 可以根据指定的数组，循环渲染重复的组件结构，语法示例如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106162055506.png\" class=\"\">\n<p>默认情况下，当前循环项的 <code>索引</code> 用 <code>index</code>  表示；当前 <code>循环项</code> 用 <code>item</code>  表示。</p>\n<h3 id=\"手动指定索引和当前项的变量名\"><a class=\"anchor\" href=\"#手动指定索引和当前项的变量名\">#</a> 手动指定索引和当前项的变量名</h3>\n<ul>\n<li>使用<strong> wx:for-index</strong> 可以指定<strong>当前循环项</strong>的 <code>索引的变量名</code></li>\n<li>使用<strong> wx:for-item</strong> 可以指定<strong>当前项</strong>的 <code>变量名</code></li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106162316890.png\" class=\"\">\n<h3 id=\"wxkey的使用\"><a class=\"anchor\" href=\"#wxkey的使用\">#</a> wx:key 的使用</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106162409924.png\" class=\"\">\n<p><strong>注意</strong> ：相当于添加指定索引，比如 id</p>\n<h1 id=\"wxss-模板样式\"><a class=\"anchor\" href=\"#wxss-模板样式\">#</a> WXSS 模板样式</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<ol>\n<li>什么是 WXSS<br />\nwxss (Weixin Style Sheets) 是一套样式语言，用于美化 WXML 的组件样式，类似于网页开发中的 CSS。</li>\n<li>WXSS 和 CSS 的关系<br />\n WXSS 具有 CSS 大部分特性，同时，WXSS 还对 CSS 进行了扩充以及修改，以适应微信小程序的开发。与 CSS 相比，WXSS 扩展的特性有:\n<ul>\n<li><code>rpx</code>  尺寸单位</li>\n<li><code>@import</code>  样式导入</li>\n</ul>\n</li>\n</ol>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106162858439.png\" class=\"\">\n<h2 id=\"rpx\"><a class=\"anchor\" href=\"#rpx\">#</a> rpx</h2>\n<p>rpx ( responsive pixel）是微信小程序独有的，用来 <code>解决屏适配的尺寸单位</code> 。</p>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>rpx 的实现原理非常简单：鉴于不同设备屏幕的大小不同，为了实现屏幕的自动适配，rpx 把<strong>所有设备</strong>的屏幕， <code>在宽度上等分为750份</code> （即: <code>当前屏幕的总宽度为750rpx</code> ) 。</p>\n<ul>\n<li>\n<p>在 <code>较小</code> 的设备上， <code>1rpx所代表的宽度较小</code></p>\n</li>\n<li>\n<p>在 <code>较大</code> 的设备上， <code>1rpx所代表的宽度较大</code></p>\n</li>\n</ul>\n<p>看人下菜</p>\n<p>小程序在不同设备上运行的时候，会自动把 rpx 的样式单位换算成对应的像素单位来渲染，从而实现屏幕适配。</p>\n<h3 id=\"rpx-和-px-之间的单位换算\"><a class=\"anchor\" href=\"#rpx-和-px-之间的单位换算\">#</a> rpx 和 px 之间的单位换算</h3>\n<p>在 iPhone6 上，屏幕宽度为<strong> 375px</strong>，共有<strong> 750 个物理像素</strong>，等分为<strong> 750rpx</strong>。则:</p>\n<p><strong>750rpx = 375px = 750 物理像素</strong><br />\n<strong> 1rpx = 0.5px =1 物理像素</strong></p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106163522783.png\" class=\"\">\n<p><strong>官方建议</strong>：开发微信小程序时，设计师可以用<strong> iPhone6</strong> 作为视觉稿的标准。(<strong>iPhone 换算结果是整数</strong>)</p>\n<h2 id=\"样式导入\"><a class=\"anchor\" href=\"#样式导入\">#</a> 样式导入</h2>\n<p>使用 WXSS 提供的 @import 语法，可以导入外联的样式表。</p>\n<h3 id=\"import的语法格式\"><a class=\"anchor\" href=\"#import的语法格式\">#</a> @import 的语法格式</h3>\n<p>@import 后跟需要导入的外联样式表的相对路径，用；表示语句结束。示例如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106163813113.png\" class=\"\">\n<h2 id=\"全局样式和局部样式\"><a class=\"anchor\" href=\"#全局样式和局部样式\">#</a> 全局样式和局部样式</h2>\n<p>全局样式在 app.wxss</p>\n<p>局部样式在自己最近的 xxxx.wxss</p>\n<p>样式的优先级：<strong>就近原则 ，其次看权重</strong></p>\n<h1 id=\"全局配置\"><a class=\"anchor\" href=\"#全局配置\">#</a> 全局配置</h1>\n<p>小程序根目录下的 <code>app.json</code>  文件是小程序的 <code>全局配置文件</code> 。常用的配置项如下:</p>\n<ol>\n<li>\n<p><code>pages</code></p>\n<p>记录当前小程序所有页面的存放路径</p>\n</li>\n<li>\n<p><code>window</code> <br />\n 全局设置小程序窗口的外观</p>\n</li>\n<li>\n<p><code>tabBar</code> <br />\n 设置小程序底部的 tabBar 效果</p>\n</li>\n<li>\n<p><code>style</code> <br />\n 是否启用新版的组件样式</p>\n</li>\n</ol>\n<h2 id=\"小程序窗口的组成部分\"><a class=\"anchor\" href=\"#小程序窗口的组成部分\">#</a> 小程序窗口的组成部分</h2>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106211106274.png\" class=\"\">\n<h2 id=\"windows\"><a class=\"anchor\" href=\"#windows\">#</a> Windows</h2>\n<h3 id=\"了解-window-结点常用的配置项\"><a class=\"anchor\" href=\"#了解-window-结点常用的配置项\">#</a> 了解 Window 结点常用的配置项</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106211358190.png\" class=\"\">\n<h3 id=\"设置导航栏的标题\"><a class=\"anchor\" href=\"#设置导航栏的标题\">#</a> 设置导航栏的标题</h3>\n<p>设置步骤：  <code>app.json</code>  -&gt;  <code>window</code>  -&gt;`` navigationBarTitleTex`</p>\n<p>需求：把导航条上的标题，从默认的 “WeChat” 修改为 “黑马程序员”，效果如图所示:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106211500700.png\" class=\"\">\n<h3 id=\"设置导航栏的背景色\"><a class=\"anchor\" href=\"#设置导航栏的背景色\">#</a> 设置导航栏的背景色</h3>\n<p>设置步骤：  <code>app.json</code>  -&gt;  <code>window </code> -&gt;  <code>navigationBarBackgroundColor</code></p>\n<p>需求：把导航栏标题的背景色，从默认的  <code>#fff</code>  修改为  <code>#2b4b6b </code>  (<strong>仅支持 HEX 格式</strong>)，</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106211849775.png\" class=\"\">\n<h3 id=\"设置导航栏的标题颜色\"><a class=\"anchor\" href=\"#设置导航栏的标题颜色\">#</a> 设置导航栏的标题颜色</h3>\n<p>设置步骤：  <code>app.json</code>  -&gt;  <code>window </code> -&gt;  <code>navigationBarTextStyle</code></p>\n<p>需求：把导航条上的标题，从默认的  <code>black</code>  修改为 <code>white</code> ，效果如图所示:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106212015148.png\" class=\"\">\n<h3 id=\"全局开启下拉刷新\"><a class=\"anchor\" href=\"#全局开启下拉刷新\">#</a> 全局开启下拉刷新</h3>\n<p>概念：下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而 <code>重新加载页面数据</code> 的行为。</p>\n<p>设置步骤： <code> app.json</code>  -&gt;  <code>window </code> -&gt; 把 <code>enablePullDownRefresh </code> 的值设置为 <code>true</code>  。</p>\n<p>** 注意:** 在 app.json 中启用下拉刷新功能，<strong>会作用于每个小程序页面</strong>！</p>\n<h3 id=\"设置下拉刷新时窗口的背景色\"><a class=\"anchor\" href=\"#设置下拉刷新时窗口的背景色\">#</a> 设置下拉刷新时窗口的背景色</h3>\n<p>当全局开启下拉刷新功能之后，默认的窗口背景为白色。如果自定义下拉刷新窗口背景色，设置步骤为： <code>app.json </code> -&gt;  <code>window </code> -&gt; 为 <code>backgroundColor</code> <strong> 指定 16 进制的颜色值，例如：#efefef</strong>。效果如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106212549507.png\" class=\"\">\n<h3 id=\"设置下拉刷新是-loading-样式\"><a class=\"anchor\" href=\"#设置下拉刷新是-loading-样式\">#</a> 设置下拉刷新是 loading 样式</h3>\n<p>当全局开启下拉刷新功能之后，默认窗口的 loading 样式为白色，如果要更改 loading 样式的效果。</p>\n<p>设置步骤为： <code>app.json</code>  -&gt;  <code>window </code> -&gt; 为 <code>backgroundTextStyle</code>  指定 <code>dark</code>  值。效果如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106212648844.png\" class=\"\">\n<h3 id=\"设置上拉触底的距离\"><a class=\"anchor\" href=\"#设置上拉触底的距离\">#</a> 设置上拉触底的距离</h3>\n<p>概念: <code>上拉触底</code> 是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而 <code>加载更多数据</code> 的行为。</p>\n<p>设置步骤: <code>app.json</code> -&gt;  <code>window </code> -&gt; 为 <code>onReachBottomDistance</code>  设置新的数值</p>\n<p><strong>注意</strong>：<strong>默认距离为 <code>50px</code> </strong>，如果没有特殊需求，建议使用默认值即可。</p>\n<h2 id=\"tabbar\"><a class=\"anchor\" href=\"#tabbar\">#</a> tabBar</h2>\n<p>tabBar 是移动端应用常见的页面效果，用于 <code>实现多页面的快速切换</code> 。小程序中通常将其分为:</p>\n<ul>\n<li>底部 tabBar</li>\n<li>顶部 tabBar</li>\n</ul>\n<p>注意:</p>\n<ul>\n<li>tabBar 中只能配置 <code>最少2个、最多5个</code>  tab 页签</li>\n<li>当渲染 <code>顶部 tabBar</code>  时， <code>不显示icon</code> ，只显示文本</li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106213121718.png\" class=\"\">\n<h3 id=\"tabbar的6个组成部分\"><a class=\"anchor\" href=\"#tabbar的6个组成部分\">#</a> tabBar 的 6 个组成部分</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106213304615.png\" class=\"\">\n<h3 id=\"tabbar结点的配置项\"><a class=\"anchor\" href=\"#tabbar结点的配置项\">#</a> tabBar 结点的配置项</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106213340704.png\" class=\"\">\n<h3 id=\"每个tab想的配置选项\"><a class=\"anchor\" href=\"#每个tab想的配置选项\">#</a> 每个 tab 想的配置选项</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106213436128.png\" class=\"\">\n<h3 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h3>\n<ol>\n<li>\n<p>需求描述</p>\n<p>根据资料中提供的小图标、在小程序中配置如图所示的 tabBar 效果:</p>\n <img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106213849741.png\" class=\"\" title=\"image-20230106213849741\">\n</li>\n<li>\n<p>实现步骤</p>\n<p>1️⃣拷贝图标资源</p>\n<p>2️⃣新建 3 个对应的 tab 页面</p>\n<p>3️⃣配置 tabBar 选项</p>\n</li>\n<li>\n<p>步骤一</p>\n<p>1️⃣把资料目录中的 <code>images</code>  文件夹，<strong>拷贝到小程序项目根目录中</strong><br />\n2️⃣将需要用到的小图标分为 3 组，每组两个，其中:</p>\n<ul>\n<li>图片名称中 <code>包含-active</code>  的是 <code>选中之后的图标</code></li>\n<li>图片名称中 <code>不包含-active</code>  的是 <code>默认图标</code></li>\n</ul>\n <img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106214108350.png\" class=\"\" title=\"image-20230106214108350\">\n</li>\n<li>\n<p>步骤二</p>\n<p>通过 app.json 文件的 pages 节点，快速新建 3 个对应的 tab 页面，示例代码如下:</p>\n <img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106214317544.png\" class=\"\" title=\"image-20230106214317544\">\n<p>其中， <code>home</code>  是首页， <code>message</code>  是消息页面， <code>contact</code>  是联系我们页面。</p>\n<p><strong>注意：</strong> tabBar 页面都要要放在 <code>pages</code>  最前面。</p>\n</li>\n<li>\n<p>步骤三</p>\n<p>打开 <code>app.json</code>  配置文件，和 pages、window 平级，新增 <code>tabBar</code>  节点，tabBar 节点中，新增 <code>list</code>  数组，这个数组中存放的，是每个 tab 项的配置对象在 list 数组中， <code>新增每一个tab项的配置对象</code> 。对象中包含的属性如下:</p>\n<ul>\n<li><code>pagePath </code> 指定当前 tab 对应的页面路径【<strong> <code>必填</code> </strong>】</li>\n<li><code>text </code> 指定当前 tab 上按钮的文字【<strong> <code>必填</code> </strong>】</li>\n<li><code>iconPath </code> 指定当前 tab 未选中时候的图片路径【可选】</li>\n<li><code>selectedlconPath </code> 指定当前 tab 被选中后高亮的图片路径【可选】</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"页面配置\"><a class=\"anchor\" href=\"#页面配置\">#</a> 页面配置</h1>\n<p>小程序中，每个页面都有自己的.json 配置文件，用来对<strong>当前页面</strong>的窗口外观、页面效果等进行配置。</p>\n<h2 id=\"页面配置和全局配置的关系\"><a class=\"anchor\" href=\"#页面配置和全局配置的关系\">#</a> 页面配置和全局配置的关系</h2>\n<p>小程序中， <code>app.json</code>  中的 <code>window</code>  节点，可以全局配置小程序中每个页面的窗口表现。</p>\n<p>如果<strong>某些小程序页面想要拥有特殊的窗口表现</strong>，此时，“ <code>页面级别的.json配置文件</code> ” 就可以实现这种需求。</p>\n<p><strong>注意</strong>：当页面配置与全局配置冲突时，根据<strong>就近原则</strong>，最终的效果以页面配置为准。</p>\n<h2 id=\"页面常见配置项\"><a class=\"anchor\" href=\"#页面常见配置项\">#</a> 页面常见配置项</h2>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106215123194.png\" class=\"\">\n<h1 id=\"网络数据请求\"><a class=\"anchor\" href=\"#网络数据请求\">#</a> 网络数据请求</h1>\n<h2 id=\"小程序中网络数据请求的限制\"><a class=\"anchor\" href=\"#小程序中网络数据请求的限制\">#</a> 小程序中网络数据请求的限制</h2>\n<p>出于 <code>安全性</code> 方面的考虑，小程序官方对 <code>数据接口的请求</code> 做出了如下两个限制:</p>\n<ol>\n<li>只能请求 <code>HTTPS</code>  类型的接口</li>\n<li>必须将 <code>接口的域名</code> <strong>添加到</strong> <code>信任列表</code> 中</li>\n</ol>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106215454061.png\" class=\"\">\n<h2 id=\"配置-request合法域名\"><a class=\"anchor\" href=\"#配置-request合法域名\">#</a> 配置 request 合法域名</h2>\n<p>需求描述：假设在自己的微信小程序中，希望请求 https://www.escook.cn/ 域名下的接口</p>\n<p>配置步骤： <code>登录微信小程序管理后台</code>  -&gt; <code>开发</code> → <code>开发设置</code> →&gt; <code>服务器域名</code>  -&gt; <code>修改request合法域名</code></p>\n<p>注意事项:</p>\n<ol>\n<li>域名只支持 https 协议</li>\n<li>域名不能使用 IP 地址或 localhost</li>\n<li>域名必须经过 ICP 备案</li>\n<li>服务器域名一个月内最多可申请 5 次修改</li>\n</ol>\n<h2 id=\"发起get请求\"><a class=\"anchor\" href=\"#发起get请求\">#</a> 发起 Get 请求</h2>\n<p>调用微信小程序提供的  <code>wx.request()</code>  方法，可以发起 GET 数据请求，示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106215934436.png\" class=\"\">\n<h2 id=\"发起post请求\"><a class=\"anchor\" href=\"#发起post请求\">#</a> 发起 Post 请求</h2>\n<p>调用微信小程序提供的  <code>wx.request()</code>  方法，可以发起 GET 数据请求，示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106220058952.png\" class=\"\">\n<h2 id=\"在页面刚加载时请求数据\"><a class=\"anchor\" href=\"#在页面刚加载时请求数据\">#</a> 在页面刚加载时请求数据</h2>\n<p>在很多情况下，我们需要在<strong>页面刚加载的时候，自动请求一些初始化的数据</strong>。此时需要在页面的 <code>onLoad</code> <strong> 事件</strong>中调用获取数据的函数，示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106220223452.png\" class=\"\">\n<h2 id=\"跳过reques合法域名校验\"><a class=\"anchor\" href=\"#跳过reques合法域名校验\">#</a> 跳过 reques 合法域名校验</h2>\n<p>如果后端程序员<strong>仅仅提供了 http 协议的接口、暂时没有提供 https 协议的接口</strong>。<br />\n此时为了不耽误开发的进度，我们可以在微信开发者工具中，临时开启「 <code>开发环境不校验请求域名、TLS版本及 HTTPS证书</code> 」选项，跳过 request 合法域名的校验。</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106220341208.png\" class=\"\">\n<p><strong>注意：</strong> 仅在开发时候使用，在正式发布的时候，微信的要求是必须 https，所以要关了。</p>\n<h2 id=\"关于跨域和ajax的说明\"><a class=\"anchor\" href=\"#关于跨域和ajax的说明\">#</a> 关于跨域和 Ajax 的说明</h2>\n<p>跨域问题<strong>只存在于</strong> <code>基于浏览器的Web开发中</code> 。由于<strong>小程序的宿主环境</strong>不是浏览器，而是<strong>微信客户端</strong>，所以 <code>小程序中不存在跨域的问题</code> 。</p>\n<p>Ajax 技术的核心是依赖于浏览器中的 XMLHttpRequest 这个对象，由于 <code>小程序的宿主环境是微信客户端</code> ，所以小程序中<strong>不能叫做</strong> “发起 Ajax 请求”，而是叫做 “ <code>发起网络数据请求</code> ”。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/2.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/image-20230106221534701.png\" class=\"\">\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "小程序开发",
                "小程序开发"
            ]
        },
        {
            "id": "https://eth168.top/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/",
            "url": "https://eth168.top/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/",
            "title": "3.视图与逻辑",
            "date_published": "2023-01-02T15:59:57.000Z",
            "content_html": "<h1 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h1>\n<ul>\n<li>能够知道如何实现页面之间的导航跳转</li>\n<li>能够知道如何实现下拉刷新效果</li>\n<li>能够知道如何实现上拉加载更多效果</li>\n<li>能够知道小程序中常上的望带周期函数</li>\n</ul>\n<h1 id=\"页面导航\"><a class=\"anchor\" href=\"#页面导航\">#</a> 页面导航</h1>\n<p>页面导航指的是 <code>页面之间的相互跳转</code> 。例如，浏览器中实现页面导航的方式有如下两种:</p>\n<ul>\n<li>&lt;a&gt; 链接</li>\n<li>location.href</li>\n</ul>\n<h2 id=\"小程序中实现页面导航的两种方式\"><a class=\"anchor\" href=\"#小程序中实现页面导航的两种方式\">#</a> 小程序中实现页面导航的两种方式</h2>\n<ul>\n<li><code>声明式导航</code>\n<ol>\n<li>在页面上声明一个 &lt;navigator&gt; 导航组件</li>\n<li>通过点击 &lt;navigator&gt; 组件实现页面跳转</li>\n</ol>\n</li>\n<li><code>编程式导航</code> <br />\n调用小程序的导航 APl，实现页面的跳转</li>\n</ul>\n<h2 id=\"声明式导航\"><a class=\"anchor\" href=\"#声明式导航\">#</a> 声明式导航</h2>\n<h3 id=\"导航到tabbar页面\"><a class=\"anchor\" href=\"#导航到tabbar页面\">#</a> 导航到 tabBar 页面</h3>\n<p><code>tabBar页面</code> 指的是被配置为 tabBar 的页面。<br />\n** 注意：** 在使用 &lt;navigator&gt; 组件跳转到指定的 tabBar 页面时，需要指定 <code>url</code>  属性和 <code>open-type</code>  属性，其中:</p>\n<ul>\n<li>url 表示要跳转的 <code>页面的地址</code> ，必须以  <code>/</code>  开头</li>\n<li>open-type 表示 <code>跳转的方式</code> ，必须为 <code>switchTab</code></li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107182923189.png\" class=\"\">\n<h3 id=\"导航到非tabbar页面\"><a class=\"anchor\" href=\"#导航到非tabbar页面\">#</a> 导航到非 tabBar 页面</h3>\n<p><code>非tabBar页面</code> 指的是没有被配置为 tabBar 的页面。<br />\n在使用 &lt;navigator&gt; 组件跳转到普通的非 tabBar 页面时，则需要指定 <code>url</code>  属性和 <code>open-type</code>  属性，其中</p>\n<ul>\n<li>url 表示要跳转的 <code>页面的地址</code> ，必须以 <code>/</code>  开头</li>\n<li>open-type 表示 <code>跳转的方式</code> ，必须为 <code>navigate</code></li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107183244459.png\" class=\"\">\n<p><strong>注意：</strong> 导航到非 tabBar 页面，open-type 可以省略</p>\n<h3 id=\"后退导航\"><a class=\"anchor\" href=\"#后退导航\">#</a> 后退导航</h3>\n<p>如果要后退到上一页面或多级页面，则需要指定 <code>open-type</code>  属性和 <code>delta</code>  属性，其中:</p>\n<ul>\n<li><code>open-type</code>  的值必须是 <code>navigateBack</code> ，表示要进行后退导航</li>\n<li><code>delta</code>  的值必须是 <code>数字</code> ，表示要后退的层级</li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107183442373.png\" class=\"\">\n<p><strong>注意:<strong> 为了简便，如果</strong>只是后退到上一页面</strong>，则<strong>可以省略 delta 属性</strong>，因为其默认值就是 1。</p>\n<h2 id=\"导航传参\"><a class=\"anchor\" href=\"#导航传参\">#</a> 导航传参</h2>\n<h3 id=\"声明式导航传参\"><a class=\"anchor\" href=\"#声明式导航传参\">#</a> 声明式导航传参</h3>\n<p>navigator 组件的 url 属性用来指定将要跳转到的页面的路径。同时， <code>路径的后面还可以携带参数</code> :</p>\n<ul>\n<li><code>参数</code> 与 <code>路径</code> 之间使用  <code>?</code>  分隔</li>\n<li><code>参数键</code> 与 <code>参数值</code> 用  <code>=</code>  相连</li>\n<li><code>不同参数</code> 用  <code>&amp;</code>  分隔</li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107183804518.png\" class=\"\">\n<h3 id=\"编程式导航传参\"><a class=\"anchor\" href=\"#编程式导航传参\">#</a> 编程式导航传参</h3>\n<p>调用 <code>wx.navigateTo</code>  (Object object) 方法跳转页面时，也可以携带参数，代码示例如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107183952496.png\" class=\"\">\n<h3 id=\"在onload中接收导航参数\"><a class=\"anchor\" href=\"#在onload中接收导航参数\">#</a> 在 onLoad 中接收导航参数</h3>\n<p>通过 <code>声明式导航传参</code> 或 <code>编程式导航传参</code> 所携带的参数，可以直接在 <code>onLoad</code>  事件中直接获取到</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107184245142.png\" class=\"\">\n<h1 id=\"页面事件\"><a class=\"anchor\" href=\"#页面事件\">#</a> 页面事件</h1>\n<h2 id=\"下拉刷新\"><a class=\"anchor\" href=\"#下拉刷新\">#</a> 下拉刷新</h2>\n<p>下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而<strong>重新加载页面数据</strong>的行为。</p>\n<h3 id=\"开启下拉刷新\"><a class=\"anchor\" href=\"#开启下拉刷新\">#</a> 开启下拉刷新</h3>\n<p>启用下拉刷新有两种方式:</p>\n<ul>\n<li>\n<p><strong>全局开启下拉刷新</strong><br />\n在 app.json 的 window 节点中，将 <code>enablePullDownRefresh </code> 设置为 <code>true</code></p>\n</li>\n<li>\n<p><strong>局部开启下拉刷新</strong><br />\n在页面的.json 配置文件中，将 <code>enablePullDownRefresh </code> 设置为 <code>true</code></p>\n</li>\n</ul>\n<p>在实际开发中，<strong>推荐使用第 2 种方式</strong>，为需要的页面<strong>单独开启下拉刷新</strong>的效果。</p>\n<h3 id=\"配置下拉刷新窗口的样式\"><a class=\"anchor\" href=\"#配置下拉刷新窗口的样式\">#</a> 配置下拉刷新窗口的样式</h3>\n<p>在全局或页面的.json 配置文件中，通过 <code>backgroundColor</code>  和  <code>backgroundTextStyle</code>  来配置下拉刷新窗口的样式，其中:</p>\n<ul>\n<li>\n<p><code>backgroundColor </code> 用来配置下拉刷新 <code>窗口的背景颜色</code> ，<strong>仅支持 16 进制的颜色值</strong></p>\n</li>\n<li>\n<p><code>backgroundTextStyle </code> 用来配置下拉刷新 <code>loading 的样式</code> ，<strong>仅支持 dark 和 light</strong></p>\n</li>\n</ul>\n<h3 id=\"监听页面的下拉刷新事件\"><a class=\"anchor\" href=\"#监听页面的下拉刷新事件\">#</a> 监听页面的下拉刷新事件</h3>\n<p>在页面的.js 文件中，通过 <code>onPullDownRefresh()</code>  函数即可监听当前页面的下拉刷新事件。</p>\n<h3 id=\"停止下拉刷新效果\"><a class=\"anchor\" href=\"#停止下拉刷新效果\">#</a> 停止下拉刷新效果</h3>\n<p>当处理完下拉刷新后，下拉刷新的 loading 效果会一直显示，<strong>不会主动消失</strong>，所以需要手动隐 loading 效果。此时，调用 <code>wx.stopPullDownRefresh()</code>  可以停止当前页面的下拉刷新。示例</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107185210778.png\" class=\"\">\n<h2 id=\"上拉触底\"><a class=\"anchor\" href=\"#上拉触底\">#</a> 上拉触底</h2>\n<p><strong>上拉触底</strong>是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而<strong>加载更多数据</strong>的行为</p>\n<p>主要是为了替代<strong>数据的分页</strong>。</p>\n<h3 id=\"监听页面的上拉触底事件\"><a class=\"anchor\" href=\"#监听页面的上拉触底事件\">#</a> 监听页面的上拉触底事件</h3>\n<p>在页面的.js 文件中，通过 <code>onReachBottom()</code>  函数即可监听当前页面的上拉触底事件。示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107185616623.png\" class=\"\">\n<h3 id=\"配置上拉触底距离\"><a class=\"anchor\" href=\"#配置上拉触底距离\">#</a> 配置上拉触底距离</h3>\n<p>上拉触底距离指的是 <code>触发上拉触底事件时，滚动条距离页面底部的距离</code> 。</p>\n<p>可以在全局或页面的.json 配置文件中，通过 <code>onReachBottomDistance</code>  属性来配置上拉触底的距离。</p>\n<p>小程序默认的触底距离是<strong> 50px</strong>，在实际开发中，可以根据自己的需求修改这个默认值。</p>\n<h3 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h3>\n<h4 id=\"效果\"><a class=\"anchor\" href=\"#效果\">#</a> 效果</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107185852143.png\" class=\"\">\n<h4 id=\"案例的实现步骤\"><a class=\"anchor\" href=\"#案例的实现步骤\">#</a> 案例的实现步骤</h4>\n<ol>\n<li>定义获取随机颜色的方法</li>\n<li>在页面加载时获取初始数据</li>\n<li>渲染 UI 结构并美化页面效果</li>\n<li><strong>在上拉触底时调用获取随机颜色的方法</strong></li>\n<li><strong>添加 loading 提示效果</strong></li>\n<li><strong>对上拉触底进行节流处理</strong></li>\n</ol>\n<h4 id=\"步骤一\"><a class=\"anchor\" href=\"#步骤一\">#</a> 步骤一</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107190032519.png\" class=\"\">\n<h4 id=\"步骤二\"><a class=\"anchor\" href=\"#步骤二\">#</a> 步骤二</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107190342353.png\" class=\"\">\n<h4 id=\"步骤三\"><a class=\"anchor\" href=\"#步骤三\">#</a> 步骤三</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107190428840.png\" class=\"\">\n<h4 id=\"步骤四\"><a class=\"anchor\" href=\"#步骤四\">#</a> 步骤四</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107190537993.png\" class=\"\">\n<h4 id=\"步骤五\"><a class=\"anchor\" href=\"#步骤五\">#</a> 步骤五</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107190645025.png\" class=\"\">\n<h4 id=\"步骤六\"><a class=\"anchor\" href=\"#步骤六\">#</a> 步骤六</h4>\n<ol>\n<li><strong>在 data 中定义 isloading 节流阀</strong>\n<ul>\n<li>false 表示当前没有进行任何数据请求</li>\n<li>true 表示当前正在进行数据请求</li>\n</ul>\n</li>\n<li><strong>在 getColors () 芳法中修改 isloading 节流阀的值</strong>\n<ul>\n<li>在刚调用 getColors 时将节流阀设置 true</li>\n<li>在网络请求的 complete 回调函数中，将节流阀重置为 false</li>\n</ul>\n</li>\n<li><strong>在 onReachBottom 中判断节流阀的值，从而对数据请求进行节流控制</strong>\n<ul>\n<li>如果节流阀的值为 true，则阻止当前请求</li>\n<li>如果节流阀的值为 false，则发起数据请求</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"扩展-自定义编译模式\"><a class=\"anchor\" href=\"#扩展-自定义编译模式\">#</a> 扩展 - 自定义编译模式</h2>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107191314286.png\" class=\"\">\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107191227696.png\" class=\"\">\n<h1 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h1>\n<p>生命周期 (Life Cycle) 是指一个对象从 <code>创建</code> → <code>运行</code>  -&gt; <code>销毁</code> 的整个阶段，<strong>强调的是一个时间段</strong>。例如:</p>\n<ul>\n<li>张三<strong>出生</strong>，表示这个人 <code>生命周期的开始</code></li>\n<li>张三<strong>离世</strong>，表示这个人 <code>生命周期的结束</code></li>\n</ul>\n<h2 id=\"生命周期的分类\"><a class=\"anchor\" href=\"#生命周期的分类\">#</a> 生命周期的分类</h2>\n<p>在小程序中，生命周期分为两类，分别是:</p>\n<ul>\n<li>\n<p><strong>应用生命周期</strong><br />\n特指小程序从启动 -&gt; 运行 -&gt; 销毁的过程</p>\n</li>\n<li>\n<p><strong>页面生命周期</strong><br />\n特指小程序中，每个页面的加载 -&gt; 渲染 -&gt; 销毁的过程</p>\n</li>\n</ul>\n<p>其中， <code>页面</code> 的生命周期 <code>范围较小</code> ， <code>应用程序</code> 的生命周期 <code>范围较大</code> ，如图所示:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107191721624.png\" class=\"\">\n<h2 id=\"生命周期函数\"><a class=\"anchor\" href=\"#生命周期函数\">#</a> 生命周期函数</h2>\n<p><strong>生命周期函数</strong>：是由小程序框架提供的 <code>内置函数</code> ，会伴随着生命周期， <code>自动按次序执行</code> 。</p>\n<p><strong>生命周期函数的作用</strong>：允许程序员 <code>在特定的时间点，执行某些特定的操作</code> 。例如，页面刚加载的时候，可以在 onLoad 生命周期函数中初始化页面的数据。</p>\n<p><strong>注意</strong>：生命周期强调的是 <code>时间段，生命周期函数</code> 强调的是 <code>时间点</code> 。</p>\n<h2 id=\"生命周期函数的分类\"><a class=\"anchor\" href=\"#生命周期函数的分类\">#</a> 生命周期函数的分类</h2>\n<p>小程序中的生命周期函数分为两类，分别是:</p>\n<ul>\n<li>\n<p><strong>应用的生命周期函数</strong><br />\n特指小程序从启动 -→运行 -&gt; 销毁期间依次调用的那些函数</p>\n</li>\n<li>\n<p><strong>页面的生命周期函数</strong></p>\n<p>特指小程序中，每个页面从加载 -&gt; 渲染 -&gt; 销毁期间依次调用的那些函数</p>\n</li>\n</ul>\n<h3 id=\"应用的生命周期函数\"><a class=\"anchor\" href=\"#应用的生命周期函数\">#</a> 应用的生命周期函数</h3>\n<p>小程序的<strong>应用生命周期函</strong>数需要在<strong> app.js</strong> 中进行声明，示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107192230518.png\" class=\"\">\n<h3 id=\"页面的生命周期函数\"><a class=\"anchor\" href=\"#页面的生命周期函数\">#</a> 页面的生命周期函数</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107192619130.png\" class=\"\">\n<h1 id=\"wxs脚本\"><a class=\"anchor\" href=\"#wxs脚本\">#</a> WXS 脚本</h1>\n<p>WXS (Weixin Script) 是小程序独有的一套脚本语言，结合 WXML，可以构建出页面的结构。</p>\n<p><strong>wxs 的应用场景</strong></p>\n<p><code>wxml中无法调用在页面的.js 中定义的函数</code> ，但是，wxml 中可以调用 wxs 中定义的函数。因此，小程序中 wxs 的<strong>典型应用场景就是 “ <code>过滤器</code> ”</strong>。</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107192841193.png\" class=\"\">\n<h2 id=\"内嵌wxs脚本\"><a class=\"anchor\" href=\"#内嵌wxs脚本\">#</a> 内嵌 WXS 脚本</h2>\n<p>wxs 代码可以编写在 wxml 文件中的 &lt;wxS&gt; 标签内，就像 Javascript 代码可以编写在 html 文件中的<script>标签内一样。<br />\nwxml 文件中的每个 &lt;WXS&gt;&lt;/WXS &gt; 标签， <code>必须提供 module属性</code> ，用来指定 <code>当前wxs 的模块名</code> 称，方便在 wxml 中访问模块中的成员:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107193006353.png\" class=\"\">\n<h2 id=\"定义外联的wxs脚本\"><a class=\"anchor\" href=\"#定义外联的wxs脚本\">#</a> 定义外联的 WXS 脚本</h2>\n<p>wxs 代码还可以编写在 <code>以.wxs为后缀名的文件内</code> ，就像 javascript 代码可以编写在以.js 为后缀名的文件中 — 样。示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107214516332.png\" class=\"\">\n<p>在 wxml 中引入外联的 wxs 脚本时，<strong>必须</strong>为 &lt;wxs&gt; 标签添加<strong> module</strong> 和<strong> src</strong> 属性，其中:</p>\n<ul>\n<li><code>module</code>  用来指定<strong>模块的名称</strong></li>\n<li><code>src</code>  用来指定要引入的脚本的路径，且<strong>必须</strong>是<strong>相对路径</strong></li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107214648933.png\" class=\"\">\n<h2 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h2>\n<ol>\n<li>\n<p>为了降低 wxs (Weixin Script) 的学习成本，wxs 语言在设计时借大量鉴了 JavaScript 的语法。但是本质上，wxs 和 JavaScript 是完全不同的两种语言！</p>\n</li>\n<li>\n<p>不能作为组件的事件回调</p>\n <img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/3.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/image-20230107214920520.png\" class=\"\" title=\"image-20230107214920520\">\n</li>\n<li>\n<p>隔离性</p>\n<ul>\n<li>\n<p>wxS 不能调用 js 中定义的函数</p>\n</li>\n<li>\n<p>wxS 不能调用小程序提供的 API</p>\n</li>\n</ul>\n</li>\n<li>\n<p>性能好</p>\n<p>在 iOS 设备上，小程序内的 wXS 会比 JavaScript 代码快 2~20 倍</p>\n<p>在 android 设备上，二者的运行效率无差异</p>\n</li>\n</ol>\n<h1 id=\"案例本地生活列表页面\"><a class=\"anchor\" href=\"#案例本地生活列表页面\">#</a> 案例–本地生活（列表页面)</h1>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "小程序开发",
                "小程序开发"
            ]
        },
        {
            "id": "https://eth168.top/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/",
            "url": "https://eth168.top/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/",
            "title": "4.基础加强",
            "date_published": "2023-01-02T15:59:56.000Z",
            "content_html": "<h1 id=\"目标\"><a class=\"anchor\" href=\"#目标\">#</a> 目标</h1>\n<ul>\n<li>能够知道如何自定义小程序组件</li>\n<li>能够知道小程序组件中 behaviors 的作用</li>\n<li>能够知道如何安装和配置 vant-weapp 组件库</li>\n<li>能够知道如何使用 MobX 实现全局数据共享</li>\n<li>能够知道如何对小程序的 API 进行 Promise 化</li>\n</ul>\n<h1 id=\"自定义组件\"><a class=\"anchor\" href=\"#自定义组件\">#</a> 自定义组件</h1>\n<h2 id=\"组件的创建与引用\"><a class=\"anchor\" href=\"#组件的创建与引用\">#</a> 组件的创建与引用</h2>\n<h3 id=\"创建组件\"><a class=\"anchor\" href=\"#创建组件\">#</a> 创建组件</h3>\n<ol>\n<li>在项目的根目录中，鼠标右键，创建<strong> components</strong> -&gt; <strong>test</strong> 文件夹</li>\n<li>在新建的 components -&gt; test 文件夹上，鼠标右键，点击 “<strong>新建 Component</strong>&quot;</li>\n<li>键入组件的名称之后回车，会自动生成组件对应的 4 个文件，后缀名分别为.js，.json，.wxml 和.wxs5</li>\n</ol>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108215534200.png\" class=\"\">\n<h3 id=\"引用组件\"><a class=\"anchor\" href=\"#引用组件\">#</a> 引用组件</h3>\n<p>组件的引用方式分为 “<strong>局部引用</strong>” 和 “<strong>全局引用</strong>”，顾名思义:</p>\n<ul>\n<li>局部引用：组件只能在当前被引用的页面内使用</li>\n<li>全局引用：组件可以在每个小程序页面中使用</li>\n</ul>\n<h4 id=\"局部引用组件\"><a class=\"anchor\" href=\"#局部引用组件\">#</a> 局部引用组件</h4>\n<p>在页面的.json 配置文件中引用组件的方式，叫做 “局部引用”。示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108220014041.png\" class=\"\">\n<h4 id=\"全局引用组件\"><a class=\"anchor\" href=\"#全局引用组件\">#</a> 全局引用组件</h4>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108220033905.png\" class=\"\">\n<h3 id=\"组件和页面的区别\"><a class=\"anchor\" href=\"#组件和页面的区别\">#</a> 组件和页面的区别</h3>\n<p>从表面来看，组件和页面都是由.js、.json、.wxml 和.wxss 这四个文件组成的。但是，组件和页面的.js 与.json 文件有明显的不同:</p>\n<ul>\n<li>组件的.json 文件中需要声明 &quot;<strong>component</strong>&quot;: <strong>true</strong> 属性</li>\n<li>组件的.js 文件中调用的是 **Component ()** 函数</li>\n<li>组件的事件处理函数需要定义到 <strong>methods</strong> 节点中</li>\n</ul>\n<h2 id=\"样式\"><a class=\"anchor\" href=\"#样式\">#</a> 样式</h2>\n<h3 id=\"组件的样式隔离\"><a class=\"anchor\" href=\"#组件的样式隔离\">#</a> 组件的样式隔离</h3>\n<p>默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的 UI 结构，如图所示:</p>\n<ul>\n<li>组件 A 的样式<strong>不会影响</strong>组件 C 的样式</li>\n<li>组件 A 的样式<strong>不会影响</strong>小程序页面的</li>\n<li>样式小程序页面的样式<strong>不会影响</strong>组件 A 和 C 的样式</li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108220344454.png\" class=\"\">\n<h3 id=\"样式隔离注意点\"><a class=\"anchor\" href=\"#样式隔离注意点\">#</a> 样式隔离注意点</h3>\n<ul>\n<li>app.wxss 中的全局样式对组件无效</li>\n<li>只有 class 选择器会有样式隔离效果，id 选择器、属性选择器、标签选择器不受样式隔离的影响</li>\n</ul>\n<p><strong>建议</strong>：在<strong>组件</strong>和<strong>引用组件的页面</strong>中建议使用 class 选择器，<strong>不要使用 id、属性、标签选择器</strong>！</p>\n<h3 id=\"修改组件的样式隔离选项\"><a class=\"anchor\" href=\"#修改组件的样式隔离选项\">#</a> 修改组件的样式隔离选项</h3>\n<p>默认情况下，自定义组件的<strong>样式隔离特性</strong>能够<strong>防止组件内外样式互相干扰的问题</strong>。但有时，我们希望在外界能够控制组件内部的样式，此时，可以通过<strong> stylelsolation</strong> 修改组件的样式隔离选项，用法如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108220840711.png\" class=\"\">\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108220928650.png\" class=\"\">\n<h2 id=\"数据-方法和属性\"><a class=\"anchor\" href=\"#数据-方法和属性\">#</a> 数据、方法和属性</h2>\n<h3 id=\"data数据\"><a class=\"anchor\" href=\"#data数据\">#</a> data 数据</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108221002498.png\" class=\"\">\n<h3 id=\"methods方法\"><a class=\"anchor\" href=\"#methods方法\">#</a> methods 方法</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108221100249.png\" class=\"\">\n<h3 id=\"properties属性\"><a class=\"anchor\" href=\"#properties属性\">#</a> properties 属性</h3>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108221155090.png\" class=\"\">\n<h3 id=\"data和properties的区别\"><a class=\"anchor\" href=\"#data和properties的区别\">#</a> data 和 properties 的区别</h3>\n<p>在小程序的组件中，properties 属性和 data 数据的用法相同，它们都是<strong>可读可写</strong>的，只不过:</p>\n<ul>\n<li>data 更倾向于<strong>存储组件的私有数据</strong></li>\n<li>properties 更倾向于<strong>存储外界传递到组件中的数据</strong></li>\n</ul>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108221445289.png\" class=\"\">\n<h3 id=\"使用setdata修改properties的值\"><a class=\"anchor\" href=\"#使用setdata修改properties的值\">#</a> 使用 setData 修改 properties 的值</h3>\n<p>由于<strong> data 数据</strong>和 <strong>properties 属性</strong>在本质上没有任何区别，因此 properties 属性的值也可以用于页面渲染，或使用 setData 为 properties 中的属性重新赋值，示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108223810961.png\" class=\"\">\n<h1 id=\"使用npm\"><a class=\"anchor\" href=\"#使用npm\">#</a> 使用 npm</h1>\n<p>目前，小程序中已经支持使用 npm 安装第三方包，从而来提高小程序的开发效率。但是，在小程序中使用 npm 包有如下 3 个限制:</p>\n<ul>\n<li>不支持依赖于 Node.js 内置库的包</li>\n<li>不支持依赖于浏览器内置对象的包</li>\n<li>不支持依赖于 C++ 插件的包</li>\n</ul>\n<h2 id=\"vant-weapp\"><a class=\"anchor\" href=\"#vant-weapp\">#</a> Vant WeAPP</h2>\n<p>Vant weapp 是有赞前端团队开源的一套<strong>小程序 UI 组件库</strong>，助力开发者快速搭建小程序应用。它所使用的是<strong> MIT 开源许可协议</strong>，对商业使用比较友好。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V6YW4uZ2l0aHViLmlvL3ZhbnQtd2VhcHAvIy9ob21l\">https://youzan.github.io/vant-weapp/#/home</span></p>\n<h3 id=\"安装组件库\"><a class=\"anchor\" href=\"#安装组件库\">#</a> 安装组件库</h3>\n<p>在小程序项目中，安装 Vant 组件库主要分为如下 3 步:</p>\n<ol>\n<li>\n<p>通过 npm 安装（建议指定版本为 **@1.3.3**)</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#初始化包管理配置 --- 出现 package.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> init <span class=\"token parameter variable\">-y</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 通过 npm 安装</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> i @vant/weapp@1.3.3 <span class=\"token parameter variable\">-S</span> <span class=\"token parameter variable\">--production</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 通过 yarn 安装</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> @vant/weapp <span class=\"token parameter variable\">--production</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 安装 0.x 版本</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">npm</span> i vant-weapp <span class=\"token parameter variable\">-S</span> <span class=\"token parameter variable\">--production</span></pre></td></tr></table></figure></li>\n<li>\n<p>构建 npm 包</p>\n</li>\n<li>\n<p>修改 app.json</p>\n</li>\n</ol>\n<h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h3>\n<p>安装完 Vant 组件库之后，可以在  <code>app.json</code>  的 <code>usingComponents</code>  节点中引入需要的组件，即可在 wxml 中直接使用组件。示例代码如下:</p>\n<img data-src=\"/Web-anteriore/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/4.%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/image-20230108215228076.png\" class=\"\">\n<h1 id=\"全局数据共享\"><a class=\"anchor\" href=\"#全局数据共享\">#</a> 全局数据共享</h1>\n<h1 id=\"分包\"><a class=\"anchor\" href=\"#分包\">#</a> 分包</h1>\n<h1 id=\"案例-自定义tabbar\"><a class=\"anchor\" href=\"#案例-自定义tabbar\">#</a> 案例 - 自定义 tabBar</h1>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "小程序开发",
                "小程序开发"
            ]
        },
        {
            "id": "https://eth168.top/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/",
            "url": "https://eth168.top/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/",
            "title": "JVM复习版",
            "date_published": "2023-01-01T16:00:00.000Z",
            "content_html": "<h1 id=\"jvm\"><a class=\"anchor\" href=\"#jvm\">#</a> JVM</h1>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220821204809060.png\" class=\"\" title=\"image-20220821204809060\">\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907231623467.png\" class=\"\" title=\"image-20220907231623467\">\n<p>1、方法区</p>\n<p>线程共享，方法区是逻辑上堆的一部分，虚拟机有一个在所有 Java 虚拟机线程之间共享的方法区。</p>\n<p>运行时常量池、字段和方法数据，以及方法和构造函数的代码，包括类和实例初始化和接口初始化中使用的特殊方法。</p>\n<p>如果方法区域中的内存无法满足分配请求，Java 虚拟机将抛出一个 OutOfMemoryError</p>\n<p>2、堆（虚拟机中最大的一块）</p>\n<p>线程共享</p>\n<p>堆是为所有类实例和数组分配内存的运行时数据区域。</p>\n<p>内存不足 OutOfMemoryError</p>\n<p>3、java 虚拟机栈\t\t\t\t执行 java 方法\t\t\t\t\t\t\t\t线程私有\t\t深度不够时，Stack OverflowError</p>\n<p>4、本地方法栈\t\t\t\t\t执行本地方法（C++）</p>\n<p>5、程序计数器\t\t\t\t\t记录程序执行到的位置\t\t\t线程私有\t\t深度不够时，Stack OverflowError</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907232658406.png\" class=\"\" title=\"image-20220907232658406\">\n<p>栈帧代表一个方法的运行，他的结构如图所示：</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907233019604.png\" class=\"\" title=\"image-20220907233019604\">\n<p><mark>还少一个附加信息</mark></p>\n<p><strong>附加信息：栈帧的高度  +  虚拟机版本信息</strong></p>\n<p><strong>栈帧信息：附加信息  +  动态链接  + 方法的返回地址</strong></p>\n<p><strong>局部变量表：方法中定义的局部变量以及方法的参数都会存放在这张表中，单纯的存储单元</strong></p>\n<p><strong>操作数栈：以压栈以及出栈的方式存储操作数</strong></p>\n<p>int a = 1;</p>\n<p>int b = 1;</p>\n<p>int c = a + b;</p>\n<p>将 a，b 从表中拿出来，然后将 c 返回到表中</p>\n<p><strong>方法的返回地址：当你一个方法执行的时候，只有两种方法可以退出</strong></p>\n<ul>\n<li>遇到方法的返回字节码指令</li>\n<li>出现异常，有异常处理，则交给异常处理器，没有就抛出异常</li>\n</ul>\n<p><strong>动态链接：动态链接将这些符号方法引用转换为具体的方法引用，简单来说，符号引用转变为直接引用</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果调用 a () 最终执行的是 c ()</span></pre></td></tr></table></figure><p><strong>但是这里有个问题，符号引用转变为直接引用，我们在类加载的时候已经做过了，为什么又要来一次？</strong></p>\n<blockquote>\n<p>这是因为我们 java 的多态，我们在刚开始的时候并不知道，具体的实现方法，要在我们运行的过程中，<br />\n才能知道，我们运用的是哪一个，所以我们这个时候会再来一次 “符号的引用转变为直接引用”</p>\n</blockquote>\n<h3 id=\"类加载机制\"><a class=\"anchor\" href=\"#类加载机制\">#</a> 类加载机制</h3>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907201636552.png\" class=\"\" title=\"image-20220907201636552\">\n<p>类加载机制其实就是虚拟机把 Class 文件加载到内存并对数据进行校验，转换解析和初始化，形成可以虚拟机直接使用的 Java 类型，即 java.lang.Class</p>\n<p>1、装载</p>\n<p>Class 文件 ——&gt; 二进制字节流 ——&gt; 类加载器</p>\n<p>1）通过一个类的全限定名获取这个类的二进制字节流</p>\n<p>2）将这个字节流所代表的静态存储结构转换成为方法区的运行时数据结构</p>\n<p>3）在 Java 堆中生成一个代表这个类的 Java.lang.Class 对象，作为我们方法区得数据访问入口</p>\n<p>2、链接</p>\n<p>1）验证，保证我们类加载的正确性</p>\n<ul>\n<li>文件格式的验证（这一步其实在我们我们装载的时候进行）</li>\n<li>元数据验证</li>\n<li>字节码验证</li>\n<li>符号引用验证</li>\n</ul>\n<p>2）准备</p>\n<p>为<mark>类的静态变量分配内存</mark>，并将其初始化为当前类型的<mark>默认值</mark></p>\n<p>3）解析</p>\n<p>解析是从运行时常量池中的符号引用动态确定具体指的过程。</p>\n<p>把类中的符号引用转换成直接引用</p>\n<p>3、初始化</p>\n<p>执行到 Clinit 方法，为静态变量赋值，初始化静态代码块，初始化当前类的父类。</p>\n<h3 id=\"类加载器\"><a class=\"anchor\" href=\"#类加载器\">#</a> 类加载器</h3>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907203357976.png\" class=\"\" title=\"image-20220907203357976\">\n<p>启动类加载器、扩展类加载器、系统加载器、自定义加载器</p>\n<h3 id=\"双亲委派机制\"><a class=\"anchor\" href=\"#双亲委派机制\">#</a> 双亲委派机制</h3>\n<p>原名叫：父类委托机制</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907182221718.png\" class=\"\" title=\"image-20220907182221718\">\n<h3 id=\"打破双亲委派机制\"><a class=\"anchor\" href=\"#打破双亲委派机制\">#</a> 打破双亲委派机制</h3>\n<p>1. 复写\t\t重写 classloader</p>\n<p>2.SPI\t\t\tService Provider Interface      服务提供接口</p>\n<p>可插拔设计，可以随时替换实现</p>\n<p>3.OSGI \t\t热部署，热更新</p>\n<h3 id=\"对象的创建过程\"><a class=\"anchor\" href=\"#对象的创建过程\">#</a> 对象的创建过程</h3>\n<p>1、对象类的加载 ——&gt; ClassLoader</p>\n<p>​\tload</p>\n<p>​\tlink (verification [检验是否符合标准],preparation [对对象附默认值],resolution [做解析])</p>\n<p>​\tinitializing (类的初始化) -&gt; 静态变量附默认值，并执行静态语句块</p>\n<p>2、申请对象内存</p>\n<p>3、成员变量附默认值</p>\n<p>4、调用构造方法</p>\n<p>​\t成员变量顺序附初始值</p>\n<p>​\t执行构造方法语句</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/20210714084921294.png\" class=\"\" title=\"img\">\n<h3 id=\"为什么要把堆和栈区分出来呢栈中不是也可以存储数据吗\"><a class=\"anchor\" href=\"#为什么要把堆和栈区分出来呢栈中不是也可以存储数据吗\">#</a> 为什么要把堆和栈区分出来呢？栈中不是也可以存储数据吗？</h3>\n<p><strong>栈是运行时的单位，而堆是存储的单位。</strong></p>\n<p>栈解决程序的运行问题，即程序如何执行，或者说如何处理数据；堆解决的是数据存储的问题，即数据怎么放、放在哪儿。</p>\n<p>在 Java 中一个线程就会相应有一个线程栈与之对应，这点很容易理解，因为不同的线程执行逻辑有所不同，因此需要一个独立的线程栈。而堆则是所有线程共享的。栈因为是运行单位，因此里面存储的信息都是跟当前线程（或程序）相关信息的。包括局部变量、程序运行状态、方法返回值等等；而堆只负责存储对象信息。</p>\n<p>1、从软件设计的角度看，栈代表了处理逻辑，而堆代表了数据。这样分开，使得处理逻辑更为清晰。分而治之的思想。这种隔离、模块化的思想在软件设计的方方面面都有体现。</p>\n<p>2、 堆与栈的分离，使得堆中的内容可以被多个栈共享（也可以理解为多个线程访问同一个对象）。这种共享的收益是很多的。一方面这种共享提供了一种有效的数据交互方式 (如：共享内存)，另一方面，堆中的共享常量和缓存可以被所有栈访问，节省了空间。</p>\n<p>3、栈因为运行时的需要，比如保存系统运行的上下文，需要进行地址段的划分。由于栈只能向上增长，因此就会限制住栈存储内容的能力。而堆不同，堆中的对象是可以根据需要动态增长的，因此栈和堆的拆分，使得动态增长成为可能，相应栈中只需记录堆中的一个地址即可。</p>\n<p>4、 面向对象就是堆和栈的完美结合。其实，面向对象方式的程序与以前结构化的程序在执行上没有任何区别。但是，面向对象的引入，使得对待问题的思考方式发生了改变，而更接近于自然方式的思考。当我们把对象拆开，你会发现，对象的属性其实就是数据，存放在堆中；而对象的行为（方法），就是运行逻辑，放在栈中。我们在编写对象的时候，其实即编写了数据结构，也编写的处理数据的逻辑。不得不承认，面向对象的设计，确实很美。</p>\n<h3 id=\"为什么不把基本类型放堆中呢\"><a class=\"anchor\" href=\"#为什么不把基本类型放堆中呢\">#</a> 为什么不把基本类型放堆中呢？</h3>\n<p>因为其占用的空间一般是 1~8 个字节 —— 需要空间比较少，而且因为是基本类型，所以不会出现动态增长的情况 —— 长度固定，因此栈中存储就够了，如果把他存在堆中是没有什么意义的。可以这么说，基本类型和对象的引用都是存放在栈中，而且都是几个字节的一个数，因此在程序运行时，他们的处理方式是统一的。但是基本类型、对象引用和对象本身就有所区别了，因为一个是栈中的数据一个是堆中的数据。最常见的一个问题就是，Java 中参数传递时的问题。</p>\n<h3 id=\"堆中存什么栈中存什么\"><a class=\"anchor\" href=\"#堆中存什么栈中存什么\">#</a> 堆中存什么？栈中存什么？</h3>\n<p>堆中存的是对象。栈中存的是基本数据类型和堆中对象的引用。一个对象的大小是不可估计的，或者说是可以动态变化的，但是在栈中，一个对象只对应了一个 4btye 的引用（堆栈分离的好处：）。</p>\n<h3 id=\"java中的参数传递时传值呢还是传引用\"><a class=\"anchor\" href=\"#java中的参数传递时传值呢还是传引用\">#</a> Java 中的参数传递时传值呢？还是传引用？</h3>\n<p>参数是基本数据类型  -》按值传递</p>\n<p>参数是引用类型  —— 》 按引用传递</p>\n<p>注意 String 是个坑 ，他是值传递但是引用数据类型</p>\n<h3 id=\"为什么需要jvm\"><a class=\"anchor\" href=\"#为什么需要jvm\">#</a> 为什么需要 JVM</h3>\n<p>1、JVM 可以帮助我们屏蔽底层的操作系统，一次编译，到处运行。</p>\n<p>2、JVM 可以运行 Class 文件</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907171924496.png\" class=\"\" title=\"image-20220907171924496\">\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907171933089.png\" class=\"\" title=\"image-20220907171933089\">\n<h3 id=\"jdkjrejvm的关系\"><a class=\"anchor\" href=\"#jdkjrejvm的关系\">#</a> JDK，JRE，JVM 的关系</h3>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907171654044.png\" class=\"\" title=\"image-20220907171654044\">\n<h3 id=\"我们的编译器到底干了什么\"><a class=\"anchor\" href=\"#我们的编译器到底干了什么\">#</a> 我们的编译器到底干了什么</h3>\n<p>仅仅是将我们的 .java 文件转换成了 .class 文件  ，实际上就是文件格式化的转换，对等信息转换</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907175840054.png\" class=\"\" title=\"image-20220907175840054\">\n<h3 id=\"对象被判定为不可达对象之后就死了吗\"><a class=\"anchor\" href=\"#对象被判定为不可达对象之后就死了吗\">#</a> 对象被判定为不可达对象之后就死了吗？</h3>\n<img data-src=\"../../../../../../面试/面试题/面试题_img/image-20220907183347727.png\" alt=\"image-20220907183347727\" style=\"zoom:150%;\" />\n<p>finalize () 只能调用一次</p>\n<p>根：GC_Root</p>\n<h3 id=\"java堆进行分代处理\"><a class=\"anchor\" href=\"#java堆进行分代处理\">#</a> Java 堆进行分代处理</h3>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907171502725.png\" class=\"\" title=\"image-20220907171502725\">\n<h3 id=\"为什么edens0s1是811\"><a class=\"anchor\" href=\"#为什么edens0s1是811\">#</a> 为什么 Eden：S0：S1 是 8:1:1</h3>\n<p>98% 的对象都是朝生夕死，在一块业务用一下，就等着死亡，比如我们 new Radom () 用完就结束了。</p>\n<p>eden 区越小越容易发送 young 区 GC，消耗性能</p>\n<h3 id=\"老年代的担保机制\"><a class=\"anchor\" href=\"#老年代的担保机制\">#</a> 老年代的担保机制</h3>\n<p>Eden 区有一个域值，如果对象超过 Eden 区的域值，他就直接进入到了 Old 区，年轻代扛不住。</p>\n<h3 id=\"如何确定一个对象是垃圾\"><a class=\"anchor\" href=\"#如何确定一个对象是垃圾\">#</a> 如何确定一个对象是垃圾</h3>\n<ul>\n<li>引用计数法</li>\n</ul>\n<p>​    <strong>对于某个对象而言，只要应用程序中持有该对象的引用，就说明该对象不是垃圾，如果一个对象没有任何指针对其引用，它就是垃圾。</strong></p>\n<p><mark>弊端：如果 AB 相互持有引用，导致永远不能被回收。</mark> （很少用了）</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907231345316.png\" class=\"\" title=\"image-20220907231345316\">\n<p>循环使用，导致我们永远不能被回收。循环引用，内存泄漏，最终导致内存占用越来越多，导致内存溢出</p>\n<ul>\n<li>可达性分析 / 跟搜索算法</li>\n</ul>\n<p>通过 GC_Root 的对象 (<mark>活跃的引用，不是对象</mark>)，开始向下搜找，看某个对象是否可达</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907200320553.png\" class=\"\" title=\"image-20220907200320553\">\n<p>能够作为 GC_Root：</p>\n<p>​\t类加载器、Thread、虚拟机栈的本地变量表、static 成员、常量引用、本地方法栈的变量等。</p>\n<blockquote>\n<p>虚拟机栈（栈帧中的本地变量表) 中引用的对象。方法区中类静态属性引用的对象。<br />\n方法区中常量引用的对象。<br />\n本地方法核中 NI（即一般说的 Native 方法）引用的对象</p>\n</blockquote>\n<h3 id=\"垃圾收集器分类\"><a class=\"anchor\" href=\"#垃圾收集器分类\">#</a> 垃圾收集器分类</h3>\n<ul>\n<li>串行收集器 -&gt;Serial 和 Serial Old</li>\n</ul>\n<p><strong>只能有一个垃圾回收线程执行，用户线程暂停。</strong></p>\n<blockquote>\n<p>适用于内存比较小的嵌入式设备。</p>\n</blockquote>\n<ul>\n<li>并行收集器 [吞吐量优先]-&gt;Parallel Scanvenge、Parallel Old</li>\n</ul>\n<p><strong>多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</strong></p>\n<blockquote>\n<p>适用于科学计算、后台处理等若交互场景。</p>\n</blockquote>\n<ul>\n<li>并发收集器 [停顿时间优先]-&gt;CMS、G1</li>\n</ul>\n<p><strong>用户线程和垃圾收集线程同时执行 (但并不一定是并行的，可能是交替执行的)，垃圾收集线程在执行的时候不会停顿用户线程的运行。</strong></p>\n<blockquote>\n<p>适用于相对时间有要求的场景，比知 web。</p>\n</blockquote>\n<h3 id=\"吞吐量和停顿时间\"><a class=\"anchor\" href=\"#吞吐量和停顿时间\">#</a> 吞吐量和停顿时间</h3>\n<ul>\n<li>\n<p>停顿时间 -&gt; 垃圾收集器进行垃圾回收终端应用执行响应的时间</p>\n</li>\n<li>\n<p>吞吐量 -&gt; 运行用户代码时间 /(运行用户代码时间 + 垃圾收集时间)</p>\n</li>\n</ul>\n<blockquote>\n<p>停顿时间越短就越适合需要和用户交互的程序，良好的响应速度能提升用户体验；</p>\n<p>高吞吐量则可以高效地利用 cPu 时间，尽快完成程序的运算任务，主要适洽在后台运算而不需要太多交互的任务。</p>\n</blockquote>\n<p>小结：这两个指标也是评价垃圾回收器好处的标准。</p>\n<h3 id=\"垃圾收集算法\"><a class=\"anchor\" href=\"#垃圾收集算法\">#</a> 垃圾收集算法</h3>\n<blockquote>\n<p>已经能够确定一个对象为垃圾之后，接下来要考虑的就是回收，怎么回收呢？得要有对应的算法，下面介绍常见的垃圾回收算法。</p>\n</blockquote>\n<h3 id=\"标记-清除mark-sweep\"><a class=\"anchor\" href=\"#标记-清除mark-sweep\">#</a> 标记 - 清除 (Mark-Sweep)</h3>\n<ul>\n<li>\n<p>标记<br />\n<strong>找出内存中需要回收的对象，并且把它们标记出来</strong></p>\n<p>此时堆中所有的对象都会被扫描一遍，从而才能确定需要回收的对象，比较耗时</p>\n  <img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907180008076.png\" class=\"\" title=\"image-20220907180008076\">\n</li>\n<li>\n<p>清除</p>\n<p>清除掉被标记需要回收的对象，释放出对应的内存空间</p>\n  <img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907180045044.png\" class=\"\" title=\"image-20220907180045044\">\n</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<blockquote>\n<p>​\t标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>\n<p>(1) 标记和清除两个过程都比较耗时，效率不高</p>\n<p>(2) 会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>\n</blockquote>\n<h3 id=\"标记-复制算法mark-copying\"><a class=\"anchor\" href=\"#标记-复制算法mark-copying\">#</a> 标记 - 复制算法 (Mark-Copying)</h3>\n<p>将内存划分为两块相等的区域，每次只使用其中一块，如下图所示:</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907180404320.png\" class=\"\" title=\"image-20220907180404320\">\n<p>当其中一块内存使用完了，就将还存活的对象复制到另外一块上面，然后把已经使用过的内存空间一次清除掉。</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907180425740.png\" class=\"\" title=\"image-20220907180425740\">\n<p><strong>缺点：空间利用率低</strong></p>\n<h3 id=\"标记-整理mark-compact\"><a class=\"anchor\" href=\"#标记-整理mark-compact\">#</a> 标记 - 整理 (Mark-Compact)</h3>\n<blockquote>\n<p>复制收集算法在对象存活率较高时就要进行较多的复制操作，效率将会变低。更关键的是，如果不想浪费 50% 的空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都有 100% 存活的极端情况，所以老年代一般不能直接选用这种算法。</p>\n</blockquote>\n<p><strong>标记过程仍然与 &quot;标记 - 清除&quot; 算法一样，但是后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</strong></p>\n<p>其实上述过程相对 &quot;复制算法&quot; 来讲，少了一个 &quot; 保留区</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907180607386.png\" class=\"\" title=\"image-20220907180607386\">\n<p>让所有存活的对象都向一端移动，清除掉边界以外的内存</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907180726882.png\" class=\"\" title=\"image-20220907180726882\">\n<h3 id=\"分代收集算法\"><a class=\"anchor\" href=\"#分代收集算法\">#</a> 分代收集算法</h3>\n<p>既然上面介绍了 3 种垃圾收集算法，那么在堆内存中到底用哪一个呢？</p>\n<p>Young 区：复制算法 (对象在被分配之后，可能生命周期比较短，young 区复制效率比较高)</p>\n<p>Old\t  区：标记清除或者标记整理 (Old 区对象存活时间比较长，复制来复制去没有必要，不如做个标记然后清除)</p>\n<h3 id=\"zgc\"><a class=\"anchor\" href=\"#zgc\">#</a> ZGC</h3>\n<p>官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vZW4vamF2YS9qYXZhc2UvMTEvZ2N0dW5pbmcvei1nYXJiYWdlLWNvbGxlY3RvcjEuaHRtbCNHVUlELUE1QTQyNjkxLTA5NUUtNDdCQS1CNkRDLUZCNEU1RkFBNDNETw==\">https://docs.oracle.com/en/java/javase/11/gctuning/z-garbage-collector1.html#GUID-A5A42691-095E-47BA-B6DC-FB4E5FAA43DO</span></p>\n<p>​\tJDK11 新引入的 ZGC 收集器，不管是物理上还是逻辑上，ZGC 中已经不存在新老年代的概念了会分为一个个 page，当进行 GC 操作时会对 page 进行压缩，因此没有碎片问题，只能在 64 位的 linux 上使用，目前用得还比较少。</p>\n<p><strong>(1）可以达到 10ms 以内的停顿时间要求</strong><br />\n<strong> (2) 支持 TB 级别的内存</strong><br />\n<strong> (3）堆内存变大后停顿时间还是在 10ms 以内</strong></p>\n<h3 id=\"垃圾收集器\"><a class=\"anchor\" href=\"#垃圾收集器\">#</a> 垃圾收集器</h3>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907200720387.png\" class=\"\" title=\"image-20220907200720387\">\n<h3 id=\"serial系列\"><a class=\"anchor\" href=\"#serial系列\">#</a> Serial 系列</h3>\n<p>​\t<strong>Serial 收集器是最基本、发展历史最悠久的收集器，曾经（在 JDK1.3.1 之前) 是虚拟机新生代收集的唯一选择。</strong></p>\n<p>​\t<strong>它是一种单线程收集器，不仅仅意味着它只会使用一个 CPU 或者一条收集线程去完成垃圾收集工作，更重要的是其在进行垃圾收集的时候需要暂停其他线程。</strong></p>\n<blockquote>\n<p>优点：简单高效，拥有很高的单线程收集效率缺点：收集过程需要暂停所有线程</p>\n<p><strong>算法：复制算法</strong></p>\n<p>应用：client 模式下的默认新生代收集器</p>\n<p>适用范围：新生代</p>\n</blockquote>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907175127639.png\" class=\"\" title=\"image-20220907175127639\">\n<ul>\n<li>\n<p>serial Old</p>\n<p>Serial Old 收集器是 Serial 收集器的老年代版本，也是一个单线程收集器，不同的是采用 **&quot; 标记 - 整理算法”**，运行过程和 Serial 收集器一样。</p>\n  <img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907174807758.png\" class=\"\" title=\"image-20220907174807758\">\n</li>\n</ul>\n<h3 id=\"parallel系列垃圾收集器\"><a class=\"anchor\" href=\"#parallel系列垃圾收集器\">#</a> Parallel 系列垃圾收集器</h3>\n<ul>\n<li>\n<p>ParNew<br />\n<strong> 可以把这个收集器理解为 Serial 收集器的多线程版本。</strong></p>\n<blockquote>\n<p>重点：关注停顿时间</p>\n<p>优点：在多 CPU 时，比 Serial 效率高。</p>\n<p>缺点：收集过程暂停所有应用程序线程，单 cPU 时比 Serial 效率差。算法：复制算法</p>\n<p>应用：运行在 Server 模式下的虚拟机中首选的新生代收集器</p>\n<p>适用范围：新生代</p>\n</blockquote>\n  <img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907174604135.png\" class=\"\" title=\"image-20220907174604135\">\n</li>\n<li>\n<p>Parallel Scavenge<br />\n<strong>Parallel Scavenge 收集器是一个新生代收集器，它也是使用复制算法的收集器，又是并行的多线程收集器，看上去和 ParNew 一样，但是 Parallel Scanvenge 更关注系统的吞吐量。</strong></p>\n</li>\n</ul>\n<blockquote>\n<p>吞吐量 = 运行用户代码的时间 /(运行用户代码的时间 + 垃圾收集时间)</p>\n<p>比如虚拟机总共运行了 100 分钟，垃圾收集时间用了 1 分钟，吞吐量 =(100-1)/100=99%。</p>\n<p>若吞吐量越大，意味着垃圾收集的时间越短，则用户代码可以充分利用 CPU 资源，尽快完成程序的运算任务。</p>\n</blockquote>\n<p>-XX:MaxGCPauseMillis\t\t\t控制最大的垃圾收集停顿时间，<br />\n-XX:GCRatio\t\t\t\t\t\t\t\t直接设置吞吐量的大小。</p>\n<ul>\n<li>\n<p>Parallel Old</p>\n<p><strong>Parallel Old 收集器是 Parallel Scavenge 收集器的老年代版本，使用多线程和标记 - 整理算法进行垃圾回收，也是更加关注系统的吞吐量</strong></p>\n</li>\n</ul>\n<h3 id=\"cms垃圾收集器\"><a class=\"anchor\" href=\"#cms垃圾收集器\">#</a> CMS 垃圾收集器</h3>\n<p>采取的是 &quot;标记 - 清除算法&quot;，整个过程分为四步：</p>\n<p>(1) 初始标记 CMS initial mark\t\t\t\t\t标记 GC Roots 直接关联对象，不用 Tracing，速度很快</p>\n<p>(2) 并发标记 CMS concurrent mark\t\t   进行 GC Roots Tracing</p>\n<p>(3) 重新标记 CMS remark\t\t\t\t\t\t\t\t修改并发标记因用户程序变动的内容</p>\n<p>(4) 并发清除 CMS concurrent sweep \t\t\t清除不可达对象回收空间，同时有新垃圾产生，留着下次清理称为</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 浮动垃圾</p>\n<p>整个过程中，并发标记和并发编程，收集器线程可以与用户线程一起工作，所以总体来说，CMS 收集器的内存回收过程是与用户线程一起并发的执行。</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907164245323.png\" class=\"\" title=\"image-20220907164245323\">\n<p>优点：并发收集、低停顿</p>\n<p>缺点：产生大量的空间碎片并发阶段会降低吞吐量</p>\n<h3 id=\"g1-调优策略\"><a class=\"anchor\" href=\"#g1-调优策略\">#</a> G1 调优策略</h3>\n<p><strong>(1）不要手动设置新生代和老年代的大小，只要设置整个堆的大小</strong><br />\n why: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9ncy5vcmFjbGUuY29tL3Bvb25hbS9pbmNyZWFzZWQtaGVhcC11c2FnZS13aXRoLWcxLWdj\">https://blogs.oracle.com/poonam/increased-heap-usage-with-g1-gc</span></p>\n<blockquote>\n<p>G1 收集器在运行过程中，会自己调整新生代和老年代的大小<br />\n其实是通过 adapt 代的大小来调整对象晋升的速度和年龄，从而达到为收集器设置的暂停时间目标如果手动设置了大小就意味着放弃了 G1 的自动调优</p>\n</blockquote>\n<p><strong>(2) 不断调优暂停时间目标</strong></p>\n<blockquote>\n<p>一般情况下这个值设置到 100ms 或者 20oms 都是可以的 (不同情况下会不一样)，但如果设置成 5oms 就不太合理。暂停时间设置的太短，就会导致出现 G1 跟不上垃圾产生的速度。最终退化成 Full GC。所以对这个参数的调优是一个持续的过程，逐步调整到最佳状态。暂停时间只是一个目标，并不能总是得到满足。</p>\n</blockquote>\n<p><strong>(3) 使用 - XX:ConcGCThreads=n 来增加标记线程的数量</strong></p>\n<blockquote>\n<p>IHOP 如果阀值设置过高，可能会遇到转移失败的风险，比如对象进行转移时空间不足。如果阀值设置过低，就会使标记周期运行过于频繁，并且有可能混合收集期回收不到空间。<br />\nIHOP 值如果设置合理，但是在并发周期时间过长时，可以尝试增加并发线程数，调高 ConcGCThreads。</p>\n</blockquote>\n<p><strong>(4) MixedGC 调优</strong></p>\n<blockquote>\n<p>-XX:InitiatingHeapOccupancyPercent</p>\n<p>-XX:G1MixedGCLiveThresholdPercent</p>\n<p>-XX:G1MixedGcCountTarger</p>\n<p>-XX:G10ldCSetRegionThresholdPercent</p>\n</blockquote>\n<p><strong>(5) 当增加堆内存大小</strong></p>\n<p><strong>(6) 不正常的 Full GC</strong></p>\n<blockquote>\n<p>有时候会发现系统刚刚启动的时候，就会发生一次 Full GC，但是老年代空间比较充足，一般是由 Metaspace 区域引起的。可以通过 MetaspaceSize 适当增加其大家，比如 256M。</p>\n</blockquote>\n<h3 id=\"g1垃圾收集器\"><a class=\"anchor\" href=\"#g1垃圾收集器\">#</a> G1 垃圾收集器</h3>\n<p>官网:<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL3ZtL2djdHVuaW5nTGcxX2djLmh0bWwjZ2FyYmFnZV9maXJzdF9nYXJiYWdlX2NvbGxlY3Rpb24=\">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuningLg1_gc.html#garbage_first_garbage_collection</span></p>\n<p><strong>使用 G1 收集器时，Java 堆的内存布局与就与其他收集器有很大差别，它将整个 Java 堆划分为多个大小相等的独立区域 (Region)，虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分 Region (不需要连续) 的集合。</strong></p>\n<p>每个 Region 大小都是一样的，可以是 1M 到 32M 之间的数值，但是必须保证是 2 的 n 次幂</p>\n<p>如果对象太大，一个 Region 放不下 [超过 Region 大小的 50%]，那么就会直接放到 Humongous 中</p>\n<p>设置 Region 大小: -XX:G1HeapRegionSize= <N> M</p>\n<p>所谓 Garbage-Frist，其实就是优先回收垃圾最多的 Region 区域</p>\n<blockquote>\n<p>(1) 分代收集（仍然保留了分代的概念)</p>\n<p>(2）空间整合（整体上属于 “标记 - 整理” 算法，不会导致空间碎片)</p>\n<p>(3）可预测的停顿（比 CNs 更先进的地方在于能让使用者明确指定一个长度为 w 毫秒的时间片段内，消耗在垃圾收集上的时间不得超过 N 毫秒)</p>\n</blockquote>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907165802632.png\" class=\"\" title=\"image-20220907165802632\">\n<p><strong>工作过程可以分为如下几步</strong><br />\n初始标记 0KIaitial Marking)\t\t\t\t\t\t\t\t\t标记以下 GC Roots 能够关联的对象，并且修改 TAS 的值，需要</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 暂停用户线程</p>\n<p>并发标记（Concurrent Marking)\t\t\t\t \t\t 从 GC Roots 进行可达性分析，找出存活的对象，与用户线程并</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t 发执行</p>\n<p>最终标记 Final Marking)\t\t\t\t\t\t\t\t\t\t\t修正在并发标记阶段因为用户程序的并发执行导致变动的数</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  据，需暂停用户线程</p>\n<p>筛选回收 (Live Data Counting and Evacuation)   对各个 Region 的回收价值和成本进行排序，根据用户所期望</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t的 cc 停顿时间制定回收计划</p>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907170046446.png\" class=\"\" title=\"image-20220907170046446\">\n<h3 id=\"生产环境中如何选择合适的垃圾收集器\"><a class=\"anchor\" href=\"#生产环境中如何选择合适的垃圾收集器\">#</a> 生产环境中，如何选择合适的垃圾收集器</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vbGphdmFzZS84L2RvY3MvdGVjaG5vdGVzL2d1aWRlcy92bS9nY3R1bmluZy9jb2xsZWN0b3JzLmh0bWwjc3RocmVmMjg=\">https://docs.oracle.com/ljavase/8/docs/technotes/guides/vm/gctuning/collectors.html#sthref28</span></p>\n<ul>\n<li>优先调整堆的大小让服务器自己来选择</li>\n<li>如果内存小于 100M，使用串行收集器</li>\n<li>如果是单核，并且没有停顿时间要求，使用串行或 JVM 自己选</li>\n<li>如果允许停顿时间超过 1 秒，选择并行或 JVM 自己选</li>\n<li>如果响应时间最重要，并且不能超过 1 秒，使用并发收集器</li>\n</ul>\n<h3 id=\"如何判断是否使用g1垃圾收集器\"><a class=\"anchor\" href=\"#如何判断是否使用g1垃圾收集器\">#</a> 如何判断是否使用 G1 垃圾收集器</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy90ZWNobm90ZXMvZ3VpZGVzL3ZtL0cxLmh0bWwjdXNlX2Nhc2Vz\">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/G1.html#use_cases</span></p>\n<p><strong>JDK 7 开始使用，JDK 8 非常成熟，JDK9 默认的垃圾收集器，适用于新老生代。</strong></p>\n<p><strong>是否使用 G1 收集器？</strong></p>\n<p>(1) 50% 以上的堆被存活对象占用</p>\n<p>(2) 对象分配和晋升的速度变化非常大</p>\n<p>(3) 垃圾回收时间比较长</p>\n<h3 id=\"什么时候才会进行垃圾回收\"><a class=\"anchor\" href=\"#什么时候才会进行垃圾回收\">#</a> 什么时候才会进行垃圾回收</h3>\n<blockquote>\n<p>GC 是由 JVM 自动完成的，根据 JVM 系统环境而定，所以时机是不确定的。<br />\n当然，我们可以手动进行垃圾回收，比如调用 System.gc () 方法通知 JVM 进行一次垃圾回收，但是具体什么时刻运行也无法控制。也就是说 System.gc () 只是通知要回收，什么时候回收由 VM 决定。<strong>但是不建议手动调用该方法，因为 GC 消耗的资源比较大。</strong></p>\n</blockquote>\n<p>(1) 当 Eden 区或者 s 区不够用</p>\n<p>(2) 老年代空间不够用</p>\n<p>(3) 方法区空间不够用</p>\n<p>(4) System.gc ()\t\t\t\t// 通知    \t\t\t时机也不确定   \t执行的 Full GC</p>\n<h3 id=\"jvm-常用命令\"><a class=\"anchor\" href=\"#jvm-常用命令\">#</a> JVM 常用命令</h3>\n<ul>\n<li>\n<p>jps</p>\n<p><strong>查看 java 进程</strong></p>\n<blockquote>\n<p>The jps command lists the instrumented Java HotSpot VWls on the target system. The command is limited toreporting information on JVMs for which it has the access permissions.</p>\n</blockquote>\n</li>\n<li>\n<p>jinfo</p>\n<p><strong>(1) 实时查看和调整 JVM 配置参数</strong></p>\n<blockquote>\n<p>The jinfo command prints Java configuration information for a specified Java process or core file or aremote debug server. The configuration information includes Java system properties and Java VirtualMachine (VM)command-line flags.</p>\n</blockquote>\n<p><strong>(2) 查看用法</strong></p>\n<pre><code>jinfo  -flag  name  PID\t\t\t查看某个java进程的name属性的值\n\njinfo  -flag  MaxHeapSize  PID\njinfo  -flag  UseG1GC  PID\n</code></pre>\n<p><strong>(3) 修改</strong></p>\n<p>参数只有被标记为 manageable 的 flags 可以被实时修改</p>\n<pre><code>jinfo -flag [+-]PID\njinfo -flag  &lt;name&gt;=&lt;value&gt; PID\n</code></pre>\n<p><strong>(4）查看曾经赋过值的一些参数</strong></p>\n<pre><code>jinfo -flags PID\n</code></pre>\n</li>\n<li>\n<p>jstat<br />\n<strong> (1）查看虚拟机性能统计信息</strong></p>\n<blockquote>\n<p>The jstat command displays performance statistics for an instrumented Java HotSpot VwW. The target wW isidentified by its virtual machine identifier, or vmid option.</p>\n</blockquote>\n<p><strong>(2) 查看类装载信息</strong></p>\n<p>jstat   -class   PID  1000  10\t\t\t\t查看某个 java 进程的类装载信息，每 1000 毫秒输出一次，共输出 10 次</p>\n<p><strong>(3) 查看垃圾收集信息</strong></p>\n<p>jstat   -gc   PID   1000   10</p>\n</li>\n<li>\n<p>jstack<br />\n<strong> (1) 查看线程堆栈信息</strong></p>\n<blockquote>\n<p>The jstack command prints Java stack traces of ]ava threads for a specified Java process,core file,orremote debug server.</p>\n</blockquote>\n<p><strong>(2) 用法</strong></p>\n<p>jstack   \tPID</p>\n</li>\n<li>\n<p>jmap</p>\n<p>(1) 生成堆转储快照</p>\n<blockquote>\n<p>The jmap command prints shared object memory maps or heap memory details of a specified process,corefile, or remote debug server.</p>\n</blockquote>\n<p>(2) 打印出堆内存相关信息</p>\n<p>jmap\t -heap\t PID</p>\n<p>jinfo \t-flag\t UsePSAdaptiveSurvivorSizePolicy\t 35352</p>\n<p>-XX: SurvivorRatio=8</p>\n</li>\n</ul>\n<h3 id=\"jvm性能优化指南\"><a class=\"anchor\" href=\"#jvm性能优化指南\">#</a> JVM 性能优化指南</h3>\n<img data-src=\"/interview/JVM%E5%A4%8D%E4%B9%A0%E7%89%88/image-20220907173816272.png\" class=\"\" title=\"image-20220907173816272\">\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "面试",
                "JVM",
                "面试"
            ]
        },
        {
            "id": "https://eth168.top/tools/Zookeeper-tool/",
            "url": "https://eth168.top/tools/Zookeeper-tool/",
            "title": "Zookeeper",
            "date_published": "2022-10-31T15:06:22.718Z",
            "content_html": "<h3 id=\"zookeeper-linux安装\"><a class=\"anchor\" href=\"#zookeeper-linux安装\">#</a> Zookeeper-linux 安装</h3>\n<h4 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> ——1</h4>\n<h5 id=\"1-zookeeper简介\"><a class=\"anchor\" href=\"#1-zookeeper简介\">#</a> 1     Zookeeper 简介</h5>\n<p>​\tzookeeper 分布式管理软件。常用它做注册中心（依赖 zookeeper 的发布 / 订阅功能）、配置文件中心、分布式锁配置、集群管理等。</p>\n<p>​\tzookeeper 一共就有两个版本。主要使用的是 java 语言写的。</p>\n<h5 id=\"2-安装\"><a class=\"anchor\" href=\"#2-安装\">#</a> 2     安装</h5>\n<h6 id=\"21-上传压缩文件\"><a class=\"anchor\" href=\"#21-上传压缩文件\">#</a> 2.1   上传压缩文件</h6>\n<p>​\t上传到 /usr/local/tmp 中</p>\n<h5 id=\"22-解压\"><a class=\"anchor\" href=\"#22-解压\">#</a> 2.2   解压</h5>\n<pre><code> tar zxf apache-zookeeper-3.5.5-bin.tar.gz\n cp -r apache-zookeeper-3.5.5-bin ../zookeeper\n</code></pre>\n<h5 id=\"23-新建data目录\"><a class=\"anchor\" href=\"#23-新建data目录\">#</a> 2.3   新建 data 目录</h5>\n<p>进入到 zookeeper 中</p>\n<pre><code> cd /usr/local/zookeeper\n mkdir data\n</code></pre>\n<h5 id=\"24-修改配置文件\"><a class=\"anchor\" href=\"#24-修改配置文件\">#</a> 2.4   修改配置文件</h5>\n<p>进入 conf 中</p>\n<pre><code> cd conf\n cp zoo_sample.cfg zoo.cfg\n vim zoo.cfg\n</code></pre>\n<p>修改 dataDir 为 data 文件夹路径</p>\n<pre><code>dataDir=/usr/local/zookeeper/data\n</code></pre>\n<h5 id=\"25-启动zookeeper\"><a class=\"anchor\" href=\"#25-启动zookeeper\">#</a> 2.5   启动 zookeeper</h5>\n<p>进入 bin 文件夹</p>\n<pre><code> cd /usr/local/zookeeper/bin\n ./zkServer.sh start\n</code></pre>\n<p>通过 status 查看启动状态。稍微有个等待时间</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkServer.sh status</pre></td></tr></table></figure><h4 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> ——2</h4>\n<p><strong>资料：</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2luZ2tvby9wLzg3MzI0NDguaHRtbA==\">https://www.cnblogs.com/kingkoo/p/8732448.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2ODA4NzQ2NjY/ZnJvbT1zZWFyY2gmYW1wO3NlaWQ9MTYyOTE0NTAyNTIxMTk5OTEwNCZhbXA7c3BtX2lkX2Zyb209MzMzLjMzNy4wLjA=\">https://www.bilibili.com/video/av80874666?from=search&amp;seid=1629145025211999104&amp;spm_id_from=333.337.0.0</span></p>\n<h5 id=\"1-zookeeper简介-2\"><a class=\"anchor\" href=\"#1-zookeeper简介-2\">#</a> 1     Zookeeper 简介</h5>\n<p>​\tzookeeper 分布式管理软件。常用它做注册中心（依赖 zookeeper 的发布 / 订阅功能）、配置文件中心、分布式锁配置、集群管理等。</p>\n<p>​\tzookeeper 一共就有两个版本。主要使用的是 java 语言写的。</p>\n<h5 id=\"2-安装-2\"><a class=\"anchor\" href=\"#2-安装-2\">#</a> 2     安装</h5>\n<h6 id=\"21-拉取镜像\"><a class=\"anchor\" href=\"#21-拉取镜像\">#</a> 2.1   拉取镜像</h6>\n<ul>\n<li>\n<p>自定义 zookeeper 目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /root/zookeeper</pre></td></tr></table></figure></li>\n</ul>\n<p>#mkdir /root/zookeeper/data #原因参照上面 - 在 docker 中 data 其实也不用在宿主机行自己生成 (目前如此)</p>\n<p>仓库官网查看版本或者用命令直接查</p>\n<pre><code>docker search zookeeper\n</code></pre>\n<p>拉取特定版本（3.5）</p>\n<pre><code>docker pull zookeeper:3.5\n\n```\n</code></pre>\n<h6 id=\"22-创建并启动容器\"><a class=\"anchor\" href=\"#22-创建并启动容器\">#</a> 2.2 创建并启动容器</h6>\n<p>​\t<strong>注：就目前而且 好像直接在 docker 中使用 zookeeper 不需要过多的配置，直接用命令创建吧，下面的解释先不看，具体原因后面补充</strong></p>\n<p>命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> zookeeper <span class=\"token parameter variable\">-v</span> /root/zookeeper/data:/data <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2181</span>:2181 <span class=\"token parameter variable\">--restart</span> always zookeeper:3.5</pre></td></tr></table></figure><ul>\n<li><code>--restart always</code> ：始终重启</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWdlb3ZiL3AvMTUzMjg3OTYuaHRtbA==\">https://www.cnblogs.com/ageovb/p/15328796.html</span></li>\n</ul>\n<p><strong>解释</strong></p>\n<ul>\n<li>\n<p>1、这里为啥只挂载了 data 目录 --》因为当我们 没有直接的安装压缩包时，我们的就没有配置文件，所以我们直接生成，容器中就回自动生成 conf 文件，其中就有我们需要的 一系列配置文件，我们第一次创建的时候就可以如此，我们在进<strong>行配置文件的修改完成</strong>后，要将所有配置文件放到我们  bash 目录中的 conf 文件中去。</p>\n</li>\n<li>\n<p>2、第一次进入容器</p>\n<ul>\n<li>\n<p>在 bash 目录下进入 bin 目录然后输入开启客户端命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkCli.sh</pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>3、第二次进入容器</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zookeeper /bin/bash  <span class=\"token parameter variable\">-p</span>    端口号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zookeeper zkCli.sh</pre></td></tr></table></figure></li>\n</ul>\n<p><em><em>只看到这就可</em>，容器创建成功就可以直接用了，还没有出现问题。有待补充</em> *</p>\n<h6 id=\"23-修改配置文件\"><a class=\"anchor\" href=\"#23-修改配置文件\">#</a> 2.3   修改配置文件</h6>\n<ul>\n<li>配置文件来源\n<ul>\n<li>1、可以去我们的资料中直接解压出<strong> conf</strong> 目录粘贴到我们的 zookeeper 目录中去</li>\n<li>2、可以直接进行第 3 步，完事之后直接会在容器中生成。找到 conf 文件，修改其中的 zoo.cfg 文件，</li>\n</ul>\n</li>\n</ul>\n<p>进入容器后，找到 conf 中的 **zoo.cfg 文件，接下来就是修改 <strong>dataDir</strong> 路径为容器中的 data 文件目录。</p>\n<p>前提是要下载 vim ，因为容器中没有，命令是：</p>\n<pre><code>apt-get update\n\napt-get install -y vim\n\ncd conf\n### 没有zoo.cfg 就先拷贝 zoo_sample.cfg 两个其实是一个文件，内容相同\n###cp zoo_sample.cfg zoo.cfg\nvim zoo.cfg\n</code></pre>\n<p>修改 dataDir 为 data 文件夹路径</p>\n<pre><code>dataDir=/usr/local/zookeeper/data\n</code></pre>\n<h3 id=\"zookeeper集群搭建\"><a class=\"anchor\" href=\"#zookeeper集群搭建\">#</a> Zookeeper 集群搭建</h3>\n<h4 id=\"1-2\"><a class=\"anchor\" href=\"#1-2\">#</a> ——1</h4>\n<p>1. 上传压缩包到 /usr/local/tmp 下 并解压。</p>\n<p>2. 在 /usr/local 下新建文件夹 zookeeper</p>\n<pre><code>### mkdir /usr/local/zookeeper\n</code></pre>\n<p>3. 把解压的所有文件复制到 zookeeper 下， 并命名为 zk1</p>\n<pre><code>### cp -r /usr/local/temp/zookeeper-3.4.8 /usr/local/zookeeper/zk1\n</code></pre>\n<p>4. 在 zk1 下新建文件夹 data</p>\n<p>5. 在 data 下新建文件 myid, 里面写上 1</p>\n<pre><code>### vim myid\n</code></pre>\n<p>6. 进入到 zk1/conf 下 把 zoo_sample.cfg 复制一份叫做 zoo.cfg</p>\n<p>7. 编辑 zoo.cfg 内容，设置 dataDIR 为 data 文件夹， 并在文件最下面添加下面内容</p>\n<pre><code>server.1=192.168.93.10:2688:3888\nserver.2=192.168.93.10:2689:3889\nserver.3=192.168.93.10:2690:3890\n</code></pre>\n<p>7.1 server.1 中的 1 是 myid 的内容</p>\n<p>7.2 2688 2689 2690 是 zookeeper 内部端口</p>\n<p>7.3 3888 3889 3890 是 leader 端口</p>\n<p>8. 把 zk1 复制两份，分部叫做 zk2  zk3  并修改 myid 的值为 2，3 修改 zoo.cfg 中 dataDIR 和 clientPort</p>\n<p>9. 启动三个 zookeeper</p>\n<pre><code>### ./zkServer.sh start\n</code></pre>\n<p>10. 查看状态</p>\n<pre><code>### ./zkServer.sh status\n</code></pre>\n<h4 id=\"2-2\"><a class=\"anchor\" href=\"#2-2\">#</a> ——2</h4>\n<p><strong>1、准备</strong> docker-compose.yml<strong> 文件</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>version: <span class=\"token string\">'2'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>services:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  zoo1:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    image: zookeeper:3.5</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    container_name: zoo1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      - <span class=\"token string\">\"2182:2181\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      ZOO_SERVERS: <span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2688:3888 <span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>zoo2:2689:3888 <span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>zoo3:2690:3888</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  zoo2:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    image: zookeeper:3.5</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    container_name: zoo2</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      - <span class=\"token string\">\"2183:2181\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      ZOO_SERVERS: <span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>zoo1:2688:3888 <span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2689:3888 <span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>zoo3:2690:3888</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  zoo3:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    image: zookeeper:3.5</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    container_name: zoo3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      - <span class=\"token string\">\"2184:2181\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      ZOO_SERVERS: <span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>zoo1:2688:3888 <span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>zoo2:2689:3888 <span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2690:3888</pre></td></tr></table></figure><p><strong>2、创建镜像</strong></p>\n<ul>\n<li>要在创建的 docker-compose.yml 文件中使用命令</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><p><strong>3、进入容器</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zoo1 /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">### 查看 zoo1 的状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./zkServer.sh status</pre></td></tr></table></figure><ul>\n<li>如果出现，以下情况：</li>\n</ul>\n<pre><code>ZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nClient port not found in static config file. Looking in dynamic config file.\ngrep: : No such file or directory\nClient port not found in the server configs\nClient port not found. Looking for secureClientPort in the static config.\nUnable to find either secure or unsecure client port in any configs. Terminating.\n</code></pre>\n<p>​\t通过阅读我们知道他在 conf 中的 zoo.cfg 文件中缺少 **clientPort ** 我们只需要自行添加即可</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">### 修改之前我们先装一下 vim</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">vim</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">### 修改 zoo.fcg 文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">vim</span> /conf/zoo.fcg</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">clientPort</span><span class=\"token operator\">=</span><span class=\"token number\">2181</span></pre></td></tr></table></figure><ul>\n<li>\n<p>完事之后<strong>重启</strong> zoo1</p>\n  <img data-src=\"/tools/Zookeeper-tool/1645780920291.png\" class=\"\" width=\"1645780920291\">\n<p>成功！！</p>\n</li>\n</ul>\n<h6 id=\"4-查看所有zookeeper的状态\"><a class=\"anchor\" href=\"#4-查看所有zookeeper的状态\">#</a> 4、查看所有 zookeeper 的状态</h6>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zoo3 <span class=\"token function\">bash</span> ./bin/zkServer.sh status</pre></td></tr></table></figure><h6 id=\"5-进去客户端\"><a class=\"anchor\" href=\"#5-进去客户端\">#</a> 5、进去客户端</h6>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zoo3 zkCli.sh</pre></td></tr></table></figure>\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "工具软件安装"
            ]
        },
        {
            "id": "https://eth168.top/tools/XShell-tool/",
            "url": "https://eth168.top/tools/XShell-tool/",
            "title": "XShell",
            "date_published": "2022-10-31T15:06:22.715Z",
            "content_html": "<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<h2 id=\"配色\"><a class=\"anchor\" href=\"#配色\">#</a> 配色</h2>\n<blockquote>\n<p>所有资源都在网盘和仓库里面</p>\n</blockquote>\n<h4 id=\"zk1\"><a class=\"anchor\" href=\"#zk1\">#</a> zk1</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801173236598.png\" class=\"\">\n<h4 id=\"solarized-dark\"><a class=\"anchor\" href=\"#solarized-dark\">#</a> Solarized Dark</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801173040826.png\" class=\"\">\n<h4 id=\"solarizeddarkmodify\"><a class=\"anchor\" href=\"#solarizeddarkmodify\">#</a> SolarizedDarkModify</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801173129171.png\" class=\"\">\n<h4 id=\"isayme\"><a class=\"anchor\" href=\"#isayme\">#</a> isayme</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801172922893.png\" class=\"\">\n<h4 id=\"ubuntu\"><a class=\"anchor\" href=\"#ubuntu\">#</a> ubuntu</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801173207482.png\" class=\"\">\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "工具软件安装",
                "Terminal"
            ]
        },
        {
            "id": "https://eth168.top/tools/Tomcat-tool/",
            "url": "https://eth168.top/tools/Tomcat-tool/",
            "title": "Tomcat",
            "date_published": "2022-10-31T15:06:22.710Z",
            "content_html": "<h3 id=\"tomcat安装\"><a class=\"anchor\" href=\"#tomcat安装\">#</a> Tomcat 安装</h3>\n<p>下载</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL3RvbWNhdC5hcGFjaGUub3JnLw==\">http://tomcat.apache.org/</span></p>\n<img data-src=\"/tools/Tomcat-tool/1646193444708.png\" class=\"\">\n<h4 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h4>\n<p>tomcat 由 apache 开源组织使用 java 开发的一款 web 容器，在使用之前需要安装 JDK 及配置 JAVA_HOME.Tomcat 是绿色软解，<strong>解压就可使用</strong>。如果之前已经安装了其他 tomcat 并且还配置了 CATALINA_HOME 不要忘记修改 CATALINA_HOME 指向我们现在使用的这个 tomcat</p>\n<h4 id=\"tomcat启动\"><a class=\"anchor\" href=\"#tomcat启动\">#</a> Tomcat 启动</h4>\n<p>运行 startup.bat 文件。</p>\n<p>一定要配置 JAVA_HOME   C:\\Program Files\\Java\\jdk1.8.0_161<br />\n 部分电脑需要配置 CATALINA_HOME   D:/<em><strong>/</strong></em>/apache-tomcat-9.0.41<br />\n 记住一个习惯：以后我们装任何一个软件路径都应该避免中文，空格和特殊符号，可以使用_</p>\n<h4 id=\"tomcat关闭\"><a class=\"anchor\" href=\"#tomcat关闭\">#</a> Tomcat 关闭</h4>\n<p>运行 shutdown.bat 文件或者直接关闭掉启动窗口。</p>\n<h4 id=\"访问tomcat\"><a class=\"anchor\" href=\"#访问tomcat\">#</a> 访问 Tomcat</h4>\n<p>访问 Tomcat 的 URL 格式：<span class=\"exturl\" data-url=\"aHR0cDovL2lw\">http://ip</span>:port</p>\n<p>访问本机 Tomcat 的 URL 格式：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgw\">http://localhost:8080</span></p>\n<h3 id=\"tomcat安装-2\"><a class=\"anchor\" href=\"#tomcat安装-2\">#</a> Tomcat 安装</h3>\n<h4 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> ——1</h4>\n<h5 id=\"1-下载linux对应版本的tomcat\"><a class=\"anchor\" href=\"#1-下载linux对应版本的tomcat\">#</a> 1、下载 Linux 对应版本的 Tomcat</h5>\n<p>​\t  下载压缩文件     apache-tomcat-7.0.68.tar.gz</p>\n<h5 id=\"2-解压压缩文件\"><a class=\"anchor\" href=\"#2-解压压缩文件\">#</a> 2、解压压缩文件</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#tar -xvf   apache-tomcat-7.0.68.tar.gz -C /usr/local/  #解压到的路径</span></pre></td></tr></table></figure><h5 id=\"3-配置环境变量\"><a class=\"anchor\" href=\"#3-配置环境变量\">#</a> 3、配置环境变量</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span>  /etc/profile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">### 自己定义为位置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">CATALINA_BASE</span><span class=\"token operator\">=</span>/usr/local/apache-tomcat-7.0.68</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$CATALINA_BASE</span>/bin:<span class=\"token environment constant\">$PATH</span></pre></td></tr></table></figure><h5 id=\"4-使用环境变量生效\"><a class=\"anchor\" href=\"#4-使用环境变量生效\">#</a> 4、使用环境变量生效</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></table></figure><h5 id=\"5-启动tomcat服务\"><a class=\"anchor\" href=\"#5-启动tomcat服务\">#</a> 5、启动 Tomcat 服务</h5>\n<ul>\n<li>注：要是远程访问你关注防火墙问题</li>\n</ul>\n<p>启动 Tomcat 服务：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./startup.sh</pre></td></tr></table></figure><p>启动 Tomcat 并输出启动日志 :</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./startup.sh <span class=\"token operator\">&amp;</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-f</span>  <span class=\"token punctuation\">..</span>/logs/catalina.out</pre></td></tr></table></figure>\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "工具软件安装"
            ]
        },
        {
            "id": "https://eth168.top/tools/Solr-tool/",
            "url": "https://eth168.top/tools/Solr-tool/",
            "title": "Solr",
            "date_published": "2022-10-31T15:06:22.705Z",
            "content_html": "<h2 id=\"solr安装\"><a class=\"anchor\" href=\"#solr安装\">#</a> Solr 安装</h2>\n<h3 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> ——1</h3>\n<p>​\tSolr 是使用 Java 编写，所以必选先安装 JDK。</p>\n<h4 id=\"1上传并解压\"><a class=\"anchor\" href=\"#1上传并解压\">#</a> 1. 上传并解压</h4>\n<p>​\t上传压缩包 solr-7.7.2.tgz 到 /usr/local/tmp 中。</p>\n<p>​\t解压</p>\n<pre><code> cd /usr/local/tmp\n tar zxf solr-7.7.2.tgz -C /usr/local/tmp\n</code></pre>\n<h4 id=\"2复制到usrlocal中\"><a class=\"anchor\" href=\"#2复制到usrlocal中\">#</a> 2. 复制到 /usr/local 中</h4>\n<pre><code> cp -r solr-7.7.2 ../solr\n</code></pre>\n<h4 id=\"3修改启动参数\"><a class=\"anchor\" href=\"#3修改启动参数\">#</a> 3. 修改启动参数</h4>\n<p>​\t修改启动参数，否则启动时报警告。提示设置 SOLR_ULIMIT_CHECKS=false</p>\n<pre><code> cd /usr/local/solr/bin\n vim solr.in.sh\n</code></pre>\n<img data-src=\"/tools/Solr-tool/solr-02.jpg\" class=\"\">\n<h4 id=\"4启动solr\"><a class=\"anchor\" href=\"#4启动solr\">#</a> 4. 启动 Solr</h4>\n<p>​\tSolr 内嵌 Jetty，直接启动即可。监听 8983 端口。</p>\n<p>​\tsolr 默认不推荐 root 账户启动，如果是 root 账户启动需要添加 - force 参数。</p>\n<pre><code>## ./solr start -force\n</code></pre>\n<h4 id=\"5-可视化管理界面\"><a class=\"anchor\" href=\"#5-可视化管理界面\">#</a> 5、可视化管理界面</h4>\n<p>​\t在关闭防火墙的前提下，可以在 windows 的浏览器中访问 Solr。</p>\n<p>​\t输入: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguOTMuMTA6ODk4Mw==\">http://192.168.93.10:8983</span> 就可以访问 Solr 的可视化管理界面。</p>\n<p>​\t左侧有 5 个菜单。分别是：</p>\n<p>​\t（1）Dashboard：面板显示 Solr 的总体信息。</p>\n<p>​\t（2）Logging：日志</p>\n<p>​\t（3）Core Admin：Solr 的核心。类似于数据的 Database</p>\n<p>​\t（4）Java Perperties：所有 Java 相关属性。</p>\n<p>​\t（5）Thread Dump：线程相关信息。</p>\n<p>​\t（6）如果有 Core，将显示在此处。</p>\n<img data-src=\"/tools/Solr-tool/solr-03.JPG\" class=\"\">\n<h4 id=\"6-新建核心\"><a class=\"anchor\" href=\"#6-新建核心\">#</a> 6、新建核心</h4>\n<p>​\tSolr 安装完成后默认是没有核心的。需要手动配置。</p>\n<p>​\t需要在 solr/server/solr 下新建文件夹，并给定配置文件，否则无法建立。</p>\n<img data-src=\"/tools/Solr-tool/solr-04.JPG\" class=\"\">\n<h5 id=\"61新建目录\"><a class=\"anchor\" href=\"#61新建目录\">#</a> 6.1. 新建目录</h5>\n<p>​\t在 /usr/local/solr/server/solr 中新建自定义名称目录。此处示例名称为 testcore。</p>\n<pre><code> cd /usr/local/solr/server/solr\n mkdir testcore\n</code></pre>\n<h5 id=\"62复制配置文件\"><a class=\"anchor\" href=\"#62复制配置文件\">#</a> 6.2. 复制配置文件</h5>\n<p>​\t在 configsets 里面包含了_default 和 sample_techproducts_configs。里面都是配置文件示例。_default 属于默认配置，较纯净。sample_techproducts_configs 是带有了一些配置示例。</p>\n<pre><code>## cp -r configsets/_default/conf/ testcore/\n</code></pre>\n<h5 id=\"63填写core信息\"><a class=\"anchor\" href=\"#63填写core信息\">#</a> 6.3. 填写 Core 信息</h5>\n<p>​\t在可视化管理界面中 Core Admin 中编写信息后点击 Add Core 后，短暂延迟后 testcore 就会创建成功。schema 处不用更改。</p>\n<img data-src=\"/tools/Solr-tool/solr-05.JPG\" class=\"\">\n<h6 id=\"64出现testcore\"><a class=\"anchor\" href=\"#64出现testcore\">#</a> 6.4. 出现 testcore</h6>\n<p>​\t在客户端管理界面中，选择新建的 Core 后，就可以按照自己项目的需求进行操作了。</p>\n<img data-src=\"/tools/Solr-tool/solr-06.jpg\" class=\"\">\n<h4 id=\"7-分词analysis\"><a class=\"anchor\" href=\"#7-分词analysis\">#</a> 7、分词 Analysis</h4>\n<p>​\t在 Solr 可视化管理界面中，Core 的管理菜单项中都会有 Analysis。表示根据 Scheme.xml (managed-schema) 中配置要求进行解析。</p>\n<p>​\t对英文解析就比较简单了，只要按照空格把英文语句拆分成英文单词即可。</p>\n<img data-src=\"/tools/Solr-tool/solr-07.jpg\" class=\"\">\n<p>​\t但是如果条件是中文时，把一句话按照字进行拆分就不是很合理了。正确的方式是按照合理的词组进行拆分。<img data-src=\"/tools/Solr-tool/solr-08.jpg\" class=\"\"></p>\n<h6 id=\"71配置步骤\"><a class=\"anchor\" href=\"#71配置步骤\">#</a> 7.1. 配置步骤</h6>\n<p>​\t上传 ik-analyzer.jar 到 webapps 中。</p>\n<p>​\t去 https://search.maven.org/search?q=com.github.magese 下载对应版本的 ik-analyzer。可以在资料中直接获取。</p>\n<h6 id=\"711上传jar到指定目录\"><a class=\"anchor\" href=\"#711上传jar到指定目录\">#</a> 7.1.1 上传 jar 到指定目录</h6>\n<p>​\t上传 ik-analyzer-7.7.0.jar 到</p>\n<p>​\t/usr/local/solr/server/solr-webapp/webapp/WEB-INF/lib 目录中</p>\n<h6 id=\"712修改配置文件\"><a class=\"anchor\" href=\"#712修改配置文件\">#</a> 7.1.2 修改配置文件</h6>\n<p>​\t修改 /usr/local/solr/server/solr/testcore/conf/managed-schema</p>\n<pre><code>## vim /usr/local/solr/server/solr/testcore/conf/managed-schema\n</code></pre>\n<p>​\t添加下面内容。</p>\n<p>​\t排版：Esc 退出编辑状态下：gg=G</p>\n<pre><code>&lt;field name=&quot;myfield&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;\n    &lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;\n            &lt;analyzer type=&quot;index&quot;&gt;\n                    &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot; useSmart=&quot;false&quot; conf=&quot;ik.conf&quot;/&gt;\n                    &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;\n            &lt;/analyzer&gt;\n            &lt;analyzer type=&quot;query&quot;&gt;\n                    &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot; useSmart=&quot;true&quot; conf=&quot;ik.conf&quot;/&gt;\n                    &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;\n            &lt;/analyzer&gt;\n    &lt;/fieldType&gt;\n</code></pre>\n<h6 id=\"713重启\"><a class=\"anchor\" href=\"#713重启\">#</a> 7.1.3 重启</h6>\n<pre><code>## cd /usr/local/solr/bin\n## ./solr stop -all\n## ./solr start -force\n</code></pre>\n<h6 id=\"714验证\"><a class=\"anchor\" href=\"#714验证\">#</a> 7.1.4 验证</h6>\n<p>​\t可以在可视化管理界面中找到 myfield 属性进行验证。</p>\n<img data-src=\"/tools/Solr-tool/solr-09.jpg\" class=\"\">\n<h6 id=\"72managed-schema配置说明\"><a class=\"anchor\" href=\"#72managed-schema配置说明\">#</a> 7.2.managed-schema 配置说明</h6>\n<h6 id=\"721-fieldtype\"><a class=\"anchor\" href=\"#721-fieldtype\">#</a> 7.2.1&lt; fieldType/&gt;</h6>\n<p>​\t表示定义一个属性类型。在 Solr 中属性类型都是自定义的。在上面配置中 name=”text_ik” 为自定义类型。当某个属性取值为 text_ik 时 IK Analyzer 才能生效。</p>\n<h6 id=\"722-field\"><a class=\"anchor\" href=\"#722-field\">#</a> 7.2.2&lt; field/&gt;</h6>\n<p>​\t表示向 Document 中添加一个属性。</p>\n<p>​\t常用属性：</p>\n<p>​\t\tname: 属性名</p>\n<p>​\t\ttype: 属性类型。所有类型都是 solr 使用<fieldType>配置的</p>\n<p>​\t\tindexed: 是否建立索引</p>\n<p>​\t\tstored: solr 是否把该属性值响应给搜索用户。</p>\n<p>​\t\trequired：该属性是否是必须的。默认 id 是必须的。</p>\n<p>​\t\tmultiValued：如果为 true，表示该属性为复合属性，此属性中包含了多个其他的属性。常用在多个列作为搜索条件时，把这些列定义定义成一个新的复合属性，通过搜索一个复合属性就可以实现搜索多个列。当设置为 true 时与 &lt;copyField source=&quot;&quot;dest=&quot;&quot;/&gt; 结合使用</p>\n<h6 id=\"723-uniquekey\"><a class=\"anchor\" href=\"#723-uniquekey\">#</a> 7.2.3&lt; uniqueKey&gt;</h6>\n<p>​\t唯一主键，Solr 中默认定义 id 属性为唯一主键。ID 的值是不允许重复的。</p>\n<h6 id=\"724-dynamicfield\"><a class=\"anchor\" href=\"#724-dynamicfield\">#</a> 7.2.4&lt; dynamicField&gt;</h6>\n<p>​\t名称中允许 * 进行通配。代表满足特定名称要求的一组属性。</p>\n<pre><code>msb_java    \n</code></pre>\n<p>​\tmsb_bigdata</p>\n<p>​\tmsb_UI</p>\n<p>​        msb_*</p>\n<h4 id=\"8-dataimport\"><a class=\"anchor\" href=\"#8-dataimport\">#</a> 8、Dataimport</h4>\n<p>​\t可以使用 Solr 自带的 Dataimport 功能把数据库中数据快速导入到 solr 中.</p>\n<p>​\t<strong>必须保证 managed-schema 和数据库中表的列对应。，添加配置</strong></p>\n<h6 id=\"81修改配置文件\"><a class=\"anchor\" href=\"#81修改配置文件\">#</a> 8.1. 修改配置文件</h6>\n<p>​\t修改 solrconfig.xml，添加下面内容</p>\n<pre><code> &lt;!-- 配置数据导入的处理器 --&gt;\n  &lt;requestHandler name=&quot;/dataimport&quot; class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&gt;\n    &lt;lst name=&quot;defaults&quot;&gt;\n\t  &lt;!--  加载data-config.xml  --&gt;\n      &lt;str name=&quot;config&quot;&gt;data-config.xml&lt;/str&gt;\n     &lt;/lst&gt;\n  &lt;/requestHandler&gt;\n</code></pre>\n<h6 id=\"82新建data-configxml\"><a class=\"anchor\" href=\"#82新建data-configxml\">#</a> 8.2. 新建 data-config.xml</h6>\n<p>​\t和 solrconfig.xml 同一目录下新建 data-config.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;dataConfig&gt;\n        &lt;dataSource type=&quot;JdbcDataSource&quot;   \n                driver=&quot;com.mysql.jdbc.Driver&quot;   \n                url=&quot;jdbc:mysql://192.168.1.135:3306/mytest&quot;   \n                user=&quot;root&quot;   \n                password=&quot;root&quot;/&gt;\n        &lt;document&gt;\n            &lt;entity name=&quot;product&quot; query=&quot;SELECT id,name,price from t_product&quot;&gt;\n                &lt;!-- \n                 实现数据库的列和索引库的字段的映射\n                 column 指定数据库的列表\n                 name  指定索引库的字段名字，必须和schema.xml中定义的一样\n                 --&gt;\n                 &lt;field column=&quot;id&quot; name=&quot;id&quot;/&gt;\n                 &lt;field column=&quot;name&quot; name=&quot;name&quot;/&gt;\n\t\t\t\t &lt;field column=&quot;price&quot; name=&quot;price&quot;/&gt;\n            &lt;/entity&gt;\n         &lt;/document&gt;\n&lt;/dataConfig&gt;\n</code></pre>\n<h6 id=\"83添加jar\"><a class=\"anchor\" href=\"#83添加jar\">#</a> 8.3. 添加 jar</h6>\n<p>​\t向 solr-webapp 中添加<strong>三个 jar</strong>。在<strong> dist 中两个还有一个数据库驱动。（自己去 maven-repository 里面找一个 mysql-connector-java ）</strong></p>\n<img data-src=\"/tools/Solr-tool/solr-10.jpg\" class=\"\">\n<h6 id=\"84操作\"><a class=\"anchor\" href=\"#84操作\">#</a> 8.4. 操作</h6>\n<p>​\t重启 solr 后，在可视化管理页面中进行数据导入。</p>\n<p>​\t注意：</p>\n<p>​\t点击导入按钮后，要记得点击刷新按钮。</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "工具软件安装"
            ]
        },
        {
            "id": "https://eth168.top/tools/redis-tool/",
            "url": "https://eth168.top/tools/redis-tool/",
            "title": "redis",
            "date_published": "2022-10-31T15:06:22.703Z",
            "content_html": "<h3 id=\"redis安装\"><a class=\"anchor\" href=\"#redis安装\">#</a> redis 安装</h3>\n<h4 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> ——1</h4>\n<h5 id=\"1安装依赖c语言依赖\"><a class=\"anchor\" href=\"#1安装依赖c语言依赖\">#</a> 1. 安装依赖 C 语言依赖</h5>\n<p>​\tredis 使用 C 语言编写，所以需要安装 C 语言库</p>\n<pre><code> yum install -y gcc-c++ automake autoconf libtool make tcl \n</code></pre>\n<p>​</p>\n<h5 id=\"2上传并解压\"><a class=\"anchor\" href=\"#2上传并解压\">#</a> 2. 上传并解压</h5>\n<p>​\t把 redis-5.0.5.tar.gz 上传到 /usr/local/tmp 中，解压文件</p>\n<pre><code> cd /usr/local/tmp\n\n tar zxf redis-5.0.5.tar.gz\n</code></pre>\n<h5 id=\"3编译并安装\"><a class=\"anchor\" href=\"#3编译并安装\">#</a> 3. 编译并安装</h5>\n<p>​\t进入解压文件夹</p>\n<pre><code>  cd /usr/local/tmp/redis-5.0.5/\n</code></pre>\n<p>​\t编译</p>\n<pre><code> make\n</code></pre>\n<p>​\t安装</p>\n<pre><code> make install PREFIX=/usr/local/redis\n</code></pre>\n<h5 id=\"4开启守护进程\"><a class=\"anchor\" href=\"#4开启守护进程\">#</a> 4. 开启守护进程</h5>\n<p>​\t复制 cd /usr/local/tmp/redis-5.0.5 / 中 redis.conf 配置文件</p>\n<pre><code> cp redis.conf /usr/local/redis/bin/\n</code></pre>\n<p><strong>修改配置文件</strong></p>\n<pre><code> cd /usr/local/redis/bin/\n\n vim redis.conf\n</code></pre>\n<p>​\t把 daemonize 的值由 no 修改为 yes</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/Redis-01.jpg\" alt=\"\" /></p>\n<h5 id=\"5修改外部访问\"><a class=\"anchor\" href=\"#5修改外部访问\">#</a> 5. 修改外部访问</h5>\n<p>​\t在 redis5 中需要修改配置文件 redis.conf 允许外部访问。需要修改两处。</p>\n<p>​\t注释掉下面</p>\n<p>​\tbind 127.0.0.1</p>\n<pre><code> bind 127.0.0.1\n</code></pre>\n<p>​\tprotected-mode yes 改成 no</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/Redis-02.jpg\" alt=\"\" /></p>\n<h5 id=\"6启动并测试\"><a class=\"anchor\" href=\"#6启动并测试\">#</a> 6. 启动并测试</h5>\n<p>​\t启动 redis</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./redis-server redis.conf</pre></td></tr></table></figure><p>​\t重启 redis</p>\n<pre><code>./redis-cli shutdown\n./redis-server redis.conf\n</code></pre>\n<p>​\t启动客户端工具</p>\n<p>​\t在 redis5 中客户端工具对命令会有提供功能。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./redis-cli</pre></td></tr></table></figure><h4 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> ——2</h4>\n<h5 id=\"1-拉取镜像文件\"><a class=\"anchor\" href=\"#1-拉取镜像文件\">#</a> 1、拉取镜像文件</h5>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull redis<span class=\"token punctuation\">[</span>:<span class=\"token punctuation\">(</span>版本号<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h5 id=\"2-去gitee库中下载redis配置文件docker不自带配置文件也可不进行此步骤\"><a class=\"anchor\" href=\"#2-去gitee库中下载redis配置文件docker不自带配置文件也可不进行此步骤\">#</a> 2、去 gitee 库中下载 redis 配置文件（docker 不自带配置文件）【也可不进行此步骤】</h5>\n<p><strong>建议看完，先别操作，再看三，看完三之后再决定如何操作</strong></p>\n<p>然后按照文章内容进行，忽略下载。</p>\n<p>文章地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yMDMyNzQuaHRt\">https://www.jb51.net/article/203274.htm</span></p>\n<p>、</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/1645177895314.png\" alt=\"1645177895314\" /></p>\n<p><strong>docker 镜像中没有 redis.conf 文件，要自己配置</strong></p>\n<pre><code class=\"language-undefined\">git pull --rebase https://gitee.com/zjj3366/mydemo.git master\n</code></pre>\n<h5 id=\"3-创建一个redis-服务容器\"><a class=\"anchor\" href=\"#3-创建一个redis-服务容器\">#</a> 3、创建一个 redis 服务容器</h5>\n<p><strong>第二步进行了的</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span>:6379 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">--name</span> myredis  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-v</span> /usr/local/docker/redis.conf:/etc/redis/redis.conf   <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-v</span> /usr/local/docker/data:/data  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-d</span> redis:5.0 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>redis-server  /etc/redis/redis.conf  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">--appendonly</span> <span class=\"token function\">yes</span></pre></td></tr></table></figure><p><strong>第二步没有进行的</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span>:6379  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">--name</span> myredis  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-v</span> /root/myredis/data:/data <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-v</span> /root/myredis/conf/redis.conf:/etc/redis/redis.conf  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-d</span> redis:5.0  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>redis-server /etc/redis/redis.conf  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">--appendonly</span> <span class=\"token function\">yes</span></pre></td></tr></table></figure><p><strong>区别：</strong></p>\n<p>​\t其实也没有什么区别，只是映射的文件不同，也可以将第二步的文件直接创建到第二种创建服务容器的配置文件地址中去，这样也可使用第二个创建方式。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/1645177877202.png\" alt=\"1645177877202\" /></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/1645177918077.png\" alt=\"1645177918077\" /></p>\n<h2 id=\"快速启动\"><a class=\"anchor\" href=\"#快速启动\">#</a> 快速启动</h2>\n<p><strong>注意：</strong></p>\n<p>​\t配置文件一定要手动创建在特定目录</p>\n<p>​\t配置文件在上面，或者去 github 上面找，直接搜索 redis，然后切换分支找对应版本，然后找 conf 即可。</p>\n<h3 id=\"单机模式\"><a class=\"anchor\" href=\"#单机模式\">#</a> 单机模式</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3N0YW5kYWxvbmUuc2g=\">standalone.sh</span>\t单机模式启动，容器名称：redis，\t\t端口：6379</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span>:6379 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">--name</span> redis  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-v</span> /root/redis/conf/redis.conf:/etc/redis/redis.conf   <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-v</span> /root/redis/data:/data  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-d</span> redis:6.2 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>redis-server  /etc/redis/redis.conf <span class=\"token parameter variable\">--appendonly</span> <span class=\"token function\">yes</span></pre></td></tr></table></figure><h3 id=\"集群模式\"><a class=\"anchor\" href=\"#集群模式\">#</a> 集群模式</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIuc2g=\">cluster.sh</span>\t\t集群模式启动，容器名称：node (1..x)\t端口：600 (1..x)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#for i in (1..3) </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">getopts</span> <span class=\"token string\">\":s:m:d:\"</span> opt<span class=\"token punctuation\">;</span><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">case</span> <span class=\"token variable\">$opt</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        m<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># echo \"参数 a 的值 $OPTARG\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"创建的集群数量为：<span class=\"token variable\">$OPTARG</span>\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token assign-left variable\">j</span><span class=\"token operator\">=</span><span class=\"token variable\">$OPTARG</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token assign-left variable\">default_redis_cluster</span><span class=\"token operator\">=</span>j</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>$j<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">600</span><span class=\"token variable\">$i</span>:6379 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token parameter variable\">--name</span> <span class=\"token function\">node</span><span class=\"token variable\">$i</span>  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token parameter variable\">-v</span> /root/redis/conf/redis.conf:/etc/redis/redis.conf   <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token parameter variable\">-v</span> /root/redis/data:/data  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token parameter variable\">-d</span> redis:6.2 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tredis-server  /etc/redis/redis.conf <span class=\"token parameter variable\">--appendonly</span> <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token builtin class-name\">unset</span> j</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">#echo \"参数 b 的值 $OPTARG\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tehco <span class=\"token string\">\"修改redis中的一写配置：<span class=\"token variable\">$OPTARG</span>\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>$default_redis_cluster<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> <span class=\"token function\">node</span><span class=\"token variable\">$i</span> redis <span class=\"token parameter variable\">-s</span> <span class=\"token variable\">$OPTARG</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\td<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"redis集群搭建，默认3台设备\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token assign-left variable\">j</span><span class=\"token operator\">=</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token assign-left variable\">default_redis_cluster</span><span class=\"token operator\">=</span>j</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>$default_redis_cluster<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">600</span><span class=\"token variable\">$i</span>:6379 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token parameter variable\">--name</span> <span class=\"token function\">node</span><span class=\"token variable\">$i</span>  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token parameter variable\">-v</span> /root/redis/conf/redis.conf:/etc/redis/redis.conf   <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token parameter variable\">-v</span> /root/redis/data:/data  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token parameter variable\">-d</span> redis:6.2 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tredis-server  /etc/redis/redis.conf <span class=\"token parameter variable\">--appendonly</span> <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token builtin class-name\">unset</span> j</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        ?<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"无效参数！\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">esac</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure>\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "工具软件安装"
            ]
        },
        {
            "id": "https://eth168.top/tools/RabbitMQ-tool/",
            "url": "https://eth168.top/tools/RabbitMQ-tool/",
            "title": "RabbitMQ",
            "date_published": "2022-10-31T15:06:22.701Z",
            "content_html": "<h3 id=\"rabbitmq安装\"><a class=\"anchor\" href=\"#rabbitmq安装\">#</a> RabbitMQ<strong> 安装</strong></h3>\n<h4 id=\"1-上传并解压\"><a class=\"anchor\" href=\"#1-上传并解压\">#</a> 1 <strong>上传并解压</strong></h4>\n<p>​\t上传 rabbitmq-server-generic-unix-3.7.18.tar.xz 到 /usr/loca/tmp 中</p>\n<pre><code>  cd /usr/local/tmp\n  \n  tar xf rabbitmq-server-generic-unix-3.7.18.tar.xz -C /usr/local/tmp\n</code></pre>\n<h4 id=\"2-复制到local下\"><a class=\"anchor\" href=\"#2-复制到local下\">#</a> 2 <strong>复制到 local 下</strong></h4>\n<p>​\t复制解压文件到 /usr/local 下，命名为 rabbitmq</p>\n<pre><code>  cp -r rabbitmq_server-3.7.18 /usr/local/rabbitmq\n</code></pre>\n<h4 id=\"3-配置环境变量\"><a class=\"anchor\" href=\"#3-配置环境变量\">#</a> 3 <strong>配置环境变量</strong></h4>\n<pre><code>  vim /etc/profile\n</code></pre>\n<p>​\t在文件中添加</p>\n<pre><code>export PATH=$PATH:/usr/local/rabbitmq/sbin\n</code></pre>\n<p>​\t解析文件</p>\n<pre><code> source /etc/profile\n</code></pre>\n<h4 id=\"4-开启web管理插件\"><a class=\"anchor\" href=\"#4-开启web管理插件\">#</a> 4 <strong>开启 web 管理插件</strong></h4>\n<p>​\t进入 rabbitmq/sbin 目录</p>\n<pre><code> cd /usr/local/rabbitmq/sbin\n</code></pre>\n<pre><code>查看插件列表\n</code></pre>\n<pre><code>  ./rabbitmq-plugins list\n</code></pre>\n<pre><code>生效管理插件\n</code></pre>\n<pre><code>  ./rabbitmq-plugins enable rabbitmq_management\n</code></pre>\n<h4 id=\"5-后台运行\"><a class=\"anchor\" href=\"#5-后台运行\">#</a> 5 <strong>后台运行</strong></h4>\n<p>​\t启动 rabbitmq。</p>\n<pre><code>  ./rabbitmq-server -detached\n</code></pre>\n<p>​\t停止命令，如果无法停止，使用 kill -9 进程号进行关闭</p>\n<pre><code> ./rabbitmqctl stop_app\n</code></pre>\n<h4 id=\"6-查看web管理界面\"><a class=\"anchor\" href=\"#6-查看web管理界面\">#</a> 6 <strong>查看 web 管理界面</strong></h4>\n<p>​\t默认可以在安装 rabbitmq 的电脑上通过用户名：guest 密码 guest 进行访问 web 管理界面</p>\n<p>​\t端口号：15672（放行端口，或关闭防火墙）</p>\n<p>​\t在虚拟机浏览器中输入：</p>\n<p>​\t<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDoxNTY3Mg==\">http://localhost:15672</span></p>\n<h3 id=\"rabbitmq账户管理\"><a class=\"anchor\" href=\"#rabbitmq账户管理\">#</a> * RabbitMq 账户管理</h3>\n<h4 id=\"1-创建账户\"><a class=\"anchor\" href=\"#1-创建账户\">#</a> 1 <strong>创建账户</strong></h4>\n<p>​\t语法：./rabbitmqctl add_user username password</p>\n<pre><code> cd /usr/local/rabbitmq/sbin\n \n ./rabbitmqctl add_user mashibing mashibing\n</code></pre>\n<h4 id=\"2-给用户授予管理员角色\"><a class=\"anchor\" href=\"#2-给用户授予管理员角色\">#</a> 2 <strong>给用户授予管理员角色</strong></h4>\n<p>​\t其中 smallming 为新建用户的用户名</p>\n<pre><code> ./rabbitmqctl set_user_tags mashibing administrator\n</code></pre>\n<h4 id=\"3-给用户授权\"><a class=\"anchor\" href=\"#3-给用户授权\">#</a> 3 <strong>给用户授权</strong></h4>\n<p>​\t“/” 表示虚拟机</p>\n<p>​\tmashibing 表示用户名</p>\n<p>​\t&quot;.<em>&quot; &quot;.</em>&quot;&quot;.*&quot; 表示完整权限</p>\n<pre><code> ./rabbitmqctl set_permissions -p &quot;/&quot; mashibing &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n</code></pre>\n<h4 id=\"4-登录\"><a class=\"anchor\" href=\"#4-登录\">#</a> 4 <strong>登录</strong></h4>\n<p>​\t使用新建账户和密码在 windows 中访问 rabbitmq 并登录</p>\n<p>​\t在浏览器地址栏输入：</p>\n<p>​\t<span class=\"exturl\" data-url=\"aHR0cDovL2lwOjE1NjcyLw==\">http://ip:15672/</span></p>\n<pre><code>用户名：mashibing\n</code></pre>\n<p>​\t密码：mashibing</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "工具软件安装"
            ]
        },
        {
            "id": "https://eth168.top/tools/python-tool/",
            "url": "https://eth168.top/tools/python-tool/",
            "title": "python",
            "date_published": "2022-10-31T15:06:22.698Z",
            "content_html": "<h3 id=\"python升级\"><a class=\"anchor\" href=\"#python升级\">#</a> Python 升级</h3>\n<p>国内镜像：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ucG1taXJyb3IuY29tL2JpbmFyeS5odG1s\">https://registry.npmmirror.com/binary.html</span></p>\n<h4 id=\"一-查看当前python版本\"><a class=\"anchor\" href=\"#一-查看当前python版本\">#</a> 一、<strong>查看当前 python 版本</strong></h4>\n<pre><code>#[root@ansible ~]# python -V\nPython 2.7.5\n</code></pre>\n<h4 id=\"二-下载新的python包并安装\"><a class=\"anchor\" href=\"#二-下载新的python包并安装\">#</a> 二、<strong>下载新的 python 包并安装</strong></h4>\n<p>​\t进入 python 官网（<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZw==\">https://www.python.org</span>），选择需要的版本。此处我选择当前最新版本 Python3.6.1</p>\n<pre><code>yum install gcc gcc-c++ -y\n\nwget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz\n\ntar xvf Python-3.7.3.tar.xz \n\ncd Python-3.7.3/\n\n ./configure\n \nmake\n\nmake install\n</code></pre>\n<h4 id=\"三-验证\"><a class=\"anchor\" href=\"#三-验证\">#</a> 三、<strong>验证</strong></h4>\n<pre><code>#python -V     #一个是旧版本，一个是新版本\nPython 2.7.5\n### python3 -V\nPython 3.7.3\n</code></pre>\n<h4 id=\"四-设置3x为默认版本\"><a class=\"anchor\" href=\"#四-设置3x为默认版本\">#</a> 四、<strong>设置 3.X 为默认版本</strong></h4>\n<p>​\t查看 Python 的路径，在 /usr/bin 下面。可以看到 python 链接的是 python 2.7，所以，执行 python 就相当于执行 python 2.7。</p>\n<pre><code>#[root@ansible ~]# ls -al /usr/bin | grep python\n-rwxr-xr-x.   1 root root       11232 Dec  2  2016 abrt-action-analyze-python\nlrwxrwxrwx.   1 root root           7 May 26  2017 python -&gt; python2\nlrwxrwxrwx.   1 root root           9 May 26  2017 python2 -&gt; python2.7\n-rwxr-xr-x.   1 root root        7136 Nov  6  2016 python2.7\n</code></pre>\n<p>将原来 python 的软链接重命名：</p>\n<pre><code>  mv /usr/bin/python /usr/bin/python.bak\n</code></pre>\n<p>将 python 链接至 python3：</p>\n<pre><code>  ln -s /usr/local/bin/python3 /usr/bin/python\n</code></pre>\n<h4 id=\"五-配置yum\"><a class=\"anchor\" href=\"#五-配置yum\">#</a> 五、<strong>配置 yum</strong></h4>\n<p>​\t升级 Python 之后，由于将默认的 python 指向了 python3，yum 不能正常使用，需要编辑 yum 的配置文件，此时：</p>\n<pre><code>#[root@ansible-admin Python-3.7.3]# yum list\n  File &quot;/usr/bin/yum&quot;, line 30\n    except KeyboardInterrupt, e:\n\nSyntaxError: invalid syntax\n</code></pre>\n<p>​\t修改 /usr/bin/yum 和 /usr/libexec/urlgrabber-ext-down，将 #!/usr/bin/python 改为 #!/usr/bin/python2.7，保存退出即可。</p>\n<blockquote>\n<p>vim /usr/bin/yum</p>\n<p>vim /usr/libexec/urlgrabber-ext-down</p>\n</blockquote>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "工具软件安装"
            ]
        }
    ]
}