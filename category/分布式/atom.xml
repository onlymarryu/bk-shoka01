<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>记录“美食”每刻 • Posts by &#34;分布式&#34; category</title>
    <link href="http://example.com" />
    <updated>2022-10-06T16:00:00.000Z</updated>
    <category term="分布式" />
    <category term="Dubbo" />
    <category term="FastDFS" />
    <category term="RPC" />
    <category term="中间件" />
    <category term="RabbitMQ" />
    <category term="Solr" />
    <category term="快速搜索" />
    <category term="JavaSE" />
    <category term="-JavaSE" />
    <category term="框架" />
    <category term="ORM" />
    <category term="Spring" />
    <category term="SpringBoot" />
    <category term="SpringMVC" />
    <category term="博客" />
    <category term="环境搭建" />
    <category term="SpringSecurity" />
    <category term="Redis基础" />
    <category term="NoSQL数据库" />
    <entry>
        <id>http://example.com/2022/10/07/Distribution/Dubbo/</id>
        <title>Dubbo</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Distribution/Dubbo/"/>
        <content type="html">&lt;h1 id=&#34;Dubbo&#34;&gt;&lt;a href=&#34;#Dubbo&#34; class=&#34;headerlink&#34; title=&#34;Dubbo&#34;&gt;&lt;/a&gt;Dubbo&lt;/h1&gt;&lt;h3 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;主要内容&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Dubbo简介&lt;/li&gt;
&lt;li&gt;Dubbo架构讲解&lt;/li&gt;
&lt;li&gt;Dubbo支持的协议&lt;/li&gt;
&lt;li&gt;Dubbo支持的注册中心&lt;/li&gt;
&lt;li&gt;第一个Dubbo的Provider&lt;/li&gt;
&lt;li&gt;Admin管理界面搭建&lt;/li&gt;
&lt;li&gt;成Dubbo的Consumer&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;完整Dubbo项目演示&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;学习目标&#34;&gt;&lt;a href=&#34;#学习目标&#34; class=&#34;headerlink&#34; title=&#34;学习目标&#34;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Dubbo简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dubbo架构讲解&lt;/td&gt;
&lt;td&gt;精通&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dubbo支持的协议&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dubbo支持的注册中心&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第一个Dubbo的Provider&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Admin管理界面搭建&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;完成Dubbo的Consumer&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;负载均衡&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;完整Dubbo项目演示&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;一、Dubbo简介&#34;&gt;&lt;a href=&#34;#一、Dubbo简介&#34; class=&#34;headerlink&#34; title=&#34;一、Dubbo简介&#34;&gt;&lt;/a&gt;一、Dubbo简介&lt;/h3&gt;&lt;h4 id=&#34;1-官方说明&#34;&gt;&lt;a href=&#34;#1-官方说明&#34; class=&#34;headerlink&#34; title=&#34;1,官方说明&#34;&gt;&lt;/a&gt;1,官方说明&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Dubbo/Dubbo-1.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	Apache Dubbo 是一个高可用的，基于Java的开源RPC框架。&lt;/p&gt;
&lt;p&gt;​	Dubbo框架不仅仅是具备RPC访问功能，还包含服务治理功能。&lt;/p&gt;
&lt;h4 id=&#34;2-发展历史&#34;&gt;&lt;a href=&#34;#2-发展历史&#34; class=&#34;headerlink&#34; title=&#34;2.发展历史&#34;&gt;&lt;/a&gt;2.发展历史&lt;/h4&gt;&lt;p&gt;​	Dubbo是最开始是阿里巴巴内部使用的RPC框架。&lt;/p&gt;
&lt;p&gt;​	2011年对外提供。&lt;/p&gt;
&lt;p&gt;​	2012年停止更新。&lt;/p&gt;
&lt;p&gt;​	2017年开始继续更新。&lt;/p&gt;
&lt;p&gt;​	2019年捐献给Apache，由Apache维护2.7以上版本。&lt;/p&gt;
&lt;h4 id=&#34;3-Dubbo架构讲解&#34;&gt;&lt;a href=&#34;#3-Dubbo架构讲解&#34; class=&#34;headerlink&#34; title=&#34;3.Dubbo架构讲解&#34;&gt;&lt;/a&gt;3.Dubbo架构讲解&lt;/h4&gt;&lt;h5 id=&#34;3-1架构图&#34;&gt;&lt;a href=&#34;#3-1架构图&#34; class=&#34;headerlink&#34; title=&#34;3.1架构图&#34;&gt;&lt;/a&gt;3.1架构图&lt;/h5&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Dubbo/Dubbo-2.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;3-2架构说明&#34;&gt;&lt;a href=&#34;#3-2架构说明&#34; class=&#34;headerlink&#34; title=&#34;3.2架构说明&#34;&gt;&lt;/a&gt;3.2架构说明&lt;/h4&gt;&lt;h5 id=&#34;3-2-1虚线&#34;&gt;&lt;a href=&#34;#3-2-1虚线&#34; class=&#34;headerlink&#34; title=&#34;3.2.1虚线&#34;&gt;&lt;/a&gt;3.2.1虚线&lt;/h5&gt;&lt;p&gt;​	虚线表示异步，实线表示同步。异步不阻塞线程性能高，同步阻塞线程必须等待响应结果才能继续执行，相对性能低。&lt;/p&gt;
&lt;h5 id=&#34;3-2-2Provider&#34;&gt;&lt;a href=&#34;#3-2-2Provider&#34; class=&#34;headerlink&#34; title=&#34;3.2.2Provider&#34;&gt;&lt;/a&gt;3.2.2Provider&lt;/h5&gt;&lt;p&gt;​	提供者。编写持久层和事务代码。&lt;/p&gt;
&lt;h5 id=&#34;3-2-3Container&#34;&gt;&lt;a href=&#34;#3-2-3Container&#34; class=&#34;headerlink&#34; title=&#34;3.2.3Container&#34;&gt;&lt;/a&gt;3.2.3Container&lt;/h5&gt;&lt;p&gt;​	容器（Spring容器），Dubbo完全基于Spring实现的。&lt;/p&gt;
&lt;h5 id=&#34;3-2-4Registry&#34;&gt;&lt;a href=&#34;#3-2-4Registry&#34; class=&#34;headerlink&#34; title=&#34;3.2.4Registry&#34;&gt;&lt;/a&gt;3.2.4Registry&lt;/h5&gt;&lt;p&gt;​	注册中心。放置所有Provider对外提供的信息。包含Provider的IP，访问端口，访问遵守的协议，对外提供的接口，接口中有哪些方法等相关信息。&lt;/p&gt;
&lt;h5 id=&#34;3-2-5Consumer&#34;&gt;&lt;a href=&#34;#3-2-5Consumer&#34; class=&#34;headerlink&#34; title=&#34;3.2.5Consumer&#34;&gt;&lt;/a&gt;3.2.5Consumer&lt;/h5&gt;&lt;p&gt;​	消费者（RPC调用者，SOA调用服务的项目）开发中也是一个项目，编写service和controller（还可以报页面等）。调用XXXXServiceImpl中的方法。&lt;/p&gt;
&lt;h5 id=&#34;3-2-6Monitor&#34;&gt;&lt;a href=&#34;#3-2-6Monitor&#34; class=&#34;headerlink&#34; title=&#34;3.2.6Monitor&#34;&gt;&lt;/a&gt;3.2.6Monitor&lt;/h5&gt;&lt;p&gt;​	监控中心。监控Provider的压力情况等。每隔2分钟Consumer和Provider会把调用次数发送给Monitor，由Monitor进行统计。&lt;/p&gt;
&lt;h4 id=&#34;4-执行流程&#34;&gt;&lt;a href=&#34;#4-执行流程&#34; class=&#34;headerlink&#34; title=&#34;4.执行流程&#34;&gt;&lt;/a&gt;4.执行流程&lt;/h4&gt;&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;start：启动Spring容器时会把Provider启动。 &lt;/li&gt;
&lt;li&gt;register：把Provider相关信息注册到Registry里&lt;/li&gt;
&lt;li&gt;subscribe：Consumer从Registry中订阅Provider的信息&lt;/li&gt;
&lt;li&gt;notify：通知给Consumer&lt;/li&gt;
&lt;li&gt;invoke：Consumer根据Registry通知的信息进行调用Provider中方法。&lt;/li&gt;
&lt;li&gt;count:Consumer和Provider把调用次数信息异步发送给Monitor进行统计。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二、Dubbo支持的协议&#34;&gt;&lt;a href=&#34;#二、Dubbo支持的协议&#34; class=&#34;headerlink&#34; title=&#34;二、Dubbo支持的协议&#34;&gt;&lt;/a&gt;二、Dubbo支持的协议&lt;/h3&gt;&lt;h4 id=&#34;1-Dubbo协议-官方推荐协议&#34;&gt;&lt;a href=&#34;#1-Dubbo协议-官方推荐协议&#34; class=&#34;headerlink&#34; title=&#34;1.Dubbo协议(官方推荐协议)&#34;&gt;&lt;/a&gt;1.Dubbo协议(官方推荐协议)&lt;/h4&gt;&lt;p&gt;​	优点：&lt;/p&gt;
&lt;p&gt;​		采用NIO复用单一长连接，并使用线程池并发处理请求，减少握手和加大并发效率，性能较好（推荐使用）&lt;/p&gt;
&lt;p&gt;​	缺点：&lt;/p&gt;
&lt;p&gt;​		大文件上传时,可能出现问题(不使用Dubbo文件上传)&lt;/p&gt;
&lt;h4 id=&#34;2-RMI-Remote-Method-Invocation-协议&#34;&gt;&lt;a href=&#34;#2-RMI-Remote-Method-Invocation-协议&#34; class=&#34;headerlink&#34; title=&#34;2.RMI(Remote Method Invocation)协议&#34;&gt;&lt;/a&gt;2.RMI(Remote Method Invocation)协议&lt;/h4&gt;&lt;p&gt;​	优点:&lt;/p&gt;
&lt;p&gt;​		JDK自带的能力。&lt;/p&gt;
&lt;p&gt;​	缺点:&lt;/p&gt;
&lt;p&gt;​		偶尔连接失败.&lt;/p&gt;
&lt;h4 id=&#34;3-Hessian协议&#34;&gt;&lt;a href=&#34;#3-Hessian协议&#34; class=&#34;headerlink&#34; title=&#34;3.Hessian协议&#34;&gt;&lt;/a&gt;3.Hessian协议&lt;/h4&gt;&lt;p&gt;​	优点:&lt;/p&gt;
&lt;p&gt;​		可与原生Hessian互操作，基于HTTP协议&lt;/p&gt;
&lt;p&gt;​	缺点:&lt;/p&gt;
&lt;p&gt;​		需hessian.jar支持，http短连接的开销大&lt;/p&gt;
&lt;h3 id=&#34;三、Dubbo支持的注册中心&#34;&gt;&lt;a href=&#34;#三、Dubbo支持的注册中心&#34; class=&#34;headerlink&#34; title=&#34;三、Dubbo支持的注册中心&#34;&gt;&lt;/a&gt;三、Dubbo支持的注册中心&lt;/h3&gt;&lt;h4 id=&#34;1-Zookeeper-官方推荐&#34;&gt;&lt;a href=&#34;#1-Zookeeper-官方推荐&#34; class=&#34;headerlink&#34; title=&#34;1.Zookeeper(官方推荐)&#34;&gt;&lt;/a&gt;1.Zookeeper(官方推荐)&lt;/h4&gt;&lt;p&gt;​	1) 优点:&lt;/p&gt;
&lt;p&gt;​		支持分布式.很多周边产品.&lt;/p&gt;
&lt;p&gt;​	2) 缺点: &lt;/p&gt;
&lt;p&gt;​		受限于Zookeeper软件的稳定性.Zookeeper专门分布式辅助软件,稳定较优&lt;/p&gt;
&lt;h4 id=&#34;2-Multicast&#34;&gt;&lt;a href=&#34;#2-Multicast&#34; class=&#34;headerlink&#34; title=&#34;2.Multicast&#34;&gt;&lt;/a&gt;2.Multicast&lt;/h4&gt;&lt;p&gt;​	1) 优点:&lt;/p&gt;
&lt;p&gt;​		去中心化,不需要单独安装软件.&lt;/p&gt;
&lt;p&gt;​	2) 缺点:&lt;/p&gt;
&lt;p&gt;​		2.2.1 Provider和Consumer和Registry不能跨机房(路由)&lt;/p&gt;
&lt;h4 id=&#34;3-Redis&#34;&gt;&lt;a href=&#34;#3-Redis&#34; class=&#34;headerlink&#34; title=&#34;3.Redis&#34;&gt;&lt;/a&gt;3.Redis&lt;/h4&gt;&lt;p&gt;​	1) 优点:&lt;/p&gt;
&lt;p&gt;​		支持集群,性能高&lt;/p&gt;
&lt;p&gt;​	2) 缺点:&lt;/p&gt;
&lt;p&gt;​		要求服务器时间同步.否则可能出现集群失败问题.&lt;/p&gt;
&lt;h4 id=&#34;4-Simple&#34;&gt;&lt;a href=&#34;#4-Simple&#34; class=&#34;headerlink&#34; title=&#34;4.Simple&#34;&gt;&lt;/a&gt;4.Simple&lt;/h4&gt;&lt;p&gt;​	1) 优点: &lt;/p&gt;
&lt;p&gt;​		标准RPC服务.没有兼容问题&lt;/p&gt;
&lt;p&gt;​	2) 缺点: &lt;/p&gt;
&lt;p&gt;​		不支持集群.&lt;/p&gt;
&lt;h3 id=&#34;四、第一个Dubbo的Provider&#34;&gt;&lt;a href=&#34;#四、第一个Dubbo的Provider&#34; class=&#34;headerlink&#34; title=&#34;四、第一个Dubbo的Provider&#34;&gt;&lt;/a&gt;四、第一个Dubbo的Provider&lt;/h3&gt;&lt;p&gt;​	新建父项目Parent1。最终结构如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Dubbo/Dubbo-3.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	编写pom.xml继承SpringBoot父项目。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/parent&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-新建api项目&#34;&gt;&lt;a href=&#34;#1-新建api项目&#34; class=&#34;headerlink&#34; title=&#34;1.新建api项目&#34;&gt;&lt;/a&gt;1.新建api项目&lt;/h4&gt;&lt;h5 id=&#34;1-1创建接口&#34;&gt;&lt;a href=&#34;#1-1创建接口&#34; class=&#34;headerlink&#34; title=&#34;1.1创建接口&#34;&gt;&lt;/a&gt;1.1创建接口&lt;/h5&gt;&lt;p&gt;​	创建com.msb.&lt;strong&gt;dubbo&lt;/strong&gt;.service.Demo&lt;strong&gt;Dubbo&lt;/strong&gt;Service接口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface DemoDubboService &amp;#123;
    String demo();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-新建provider项目&#34;&gt;&lt;a href=&#34;#2-新建provider项目&#34; class=&#34;headerlink&#34; title=&#34;2.新建provider项目&#34;&gt;&lt;/a&gt;2.新建provider项目&lt;/h4&gt;&lt;h5 id=&#34;2-1编写pom-xml&#34;&gt;&lt;a href=&#34;#2-1编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;2.1编写pom.xml&#34;&gt;&lt;/a&gt;2.1编写pom.xml&lt;/h5&gt;&lt;p&gt;​	注意：不需要依赖web，如果依赖spring-boot-start-web还需要考虑端口问题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.7.3&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-2编写配置文件&#34;&gt;&lt;a href=&#34;#2-2编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.2编写配置文件&#34;&gt;&lt;/a&gt;2.2编写配置文件&lt;/h5&gt;&lt;p&gt;​	新建application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-provider
  registry:
    address: zookeeper://192.168.32.128:2181
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-3新建实现类&#34;&gt;&lt;a href=&#34;#2-3新建实现类&#34; class=&#34;headerlink&#34; title=&#34;2.3新建实现类&#34;&gt;&lt;/a&gt;2.3新建实现类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.dubbo.service.impl.DemoDubboServiceImpl&lt;/p&gt;
&lt;p&gt;​	注意：注解是apache的注解。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import com.msb.dubbo.service.DemoDubboService;
import org.apache.dubbo.config.annotation.Service;

@Service
public class DemoDubboServiceImpl implements DemoDubboService &amp;#123;
    @Override
    public String demo() &amp;#123;
        System.out.println(&amp;quot;demo方法&amp;quot;);
        return &amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-4新建启动类&#34;&gt;&lt;a href=&#34;#2-4新建启动类&#34; class=&#34;headerlink&#34; title=&#34;2.4新建启动类&#34;&gt;&lt;/a&gt;2.4新建启动类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.ProviderApplication。&lt;/p&gt;
&lt;p&gt;​	必须要有@EnableDubbo注解，否则Dubbo不生效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDubbo
public class ProviderApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(ProviderApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;五、完成Dubbo的Consumer&#34;&gt;&lt;a href=&#34;#五、完成Dubbo的Consumer&#34; class=&#34;headerlink&#34; title=&#34;五、完成Dubbo的Consumer&#34;&gt;&lt;/a&gt;五、完成Dubbo的Consumer&lt;/h3&gt;&lt;p&gt;​	创建consumer项目&lt;/p&gt;
&lt;h4 id=&#34;1-编写pom-xml&#34;&gt;&lt;a href=&#34;#1-编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;1.编写pom.xml&#34;&gt;&lt;/a&gt;1.编写pom.xml&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.7.3&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-新建配置文件&#34;&gt;&lt;a href=&#34;#2-新建配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.新建配置文件&#34;&gt;&lt;/a&gt;2.新建配置文件&lt;/h4&gt;&lt;p&gt;​	新建application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-consumer
  registry:
    address: zookeeper://192.168.32.128:2181
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-新建service及实现类&#34;&gt;&lt;a href=&#34;#3-新建service及实现类&#34; class=&#34;headerlink&#34; title=&#34;3.新建service及实现类&#34;&gt;&lt;/a&gt;3.新建service及实现类&lt;/h4&gt;&lt;p&gt;​	新建com.msb.service.DemoService&lt;/p&gt;
&lt;p&gt;​	新建com.msb.service.impl.DemoServiceImpl&lt;/p&gt;
&lt;p&gt;​	调用服务使用@Reference注解，不要倒错包了，有两个。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface DemoService &amp;#123;
    String consumerDemo();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;import com.msb.dubbo.service.DemoDubboService;
import com.msb.service.DemoService;
import org.apache.dubbo.config.annotation.Reference;
import org.springframework.stereotype.Service;

@Service
public class DemoServiceImpl implements DemoService &amp;#123;

    @Reference
    private DemoDubboService demoDubboService;

    @Override
    public String consumerDemo() &amp;#123;
        return demoDubboService.demo();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-新建控制器&#34;&gt;&lt;a href=&#34;#4-新建控制器&#34; class=&#34;headerlink&#34; title=&#34;4.新建控制器&#34;&gt;&lt;/a&gt;4.新建控制器&lt;/h4&gt;&lt;p&gt;​	新建控制器com.msb.controller.DemoController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Controller
public class DemoController &amp;#123;
    @Autowired
    private DemoService demoService;

    @RequestMapping(&amp;quot;/demo&amp;quot;)
    @ResponseBody
    public String demo()&amp;#123;
        return demoService.consumerDemo();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-新建启动器&#34;&gt;&lt;a href=&#34;#5-新建启动器&#34; class=&#34;headerlink&#34; title=&#34;5.新建启动器&#34;&gt;&lt;/a&gt;5.新建启动器&lt;/h4&gt;&lt;p&gt;​	新建com.msb.ConsumerApplication&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDubbo
public class ConsumerApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(ConsumerApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;六、Admin管理界面搭建&#34;&gt;&lt;a href=&#34;#六、Admin管理界面搭建&#34; class=&#34;headerlink&#34; title=&#34;六、Admin管理界面搭建&#34;&gt;&lt;/a&gt;六、Admin管理界面搭建&lt;/h3&gt;&lt;p&gt;​	资料中把dubbo-admin-0.2.0.jar\BOOT-INF\classes 中application.properties里面注册中心的ip设置正确&lt;/p&gt;
&lt;p&gt;​	使用java -jar dubbo-admin-0.2.0.jar运行即可。&lt;/p&gt;
&lt;p&gt;​	注意：占用8080端口，不要冲突了。&lt;/p&gt;
&lt;h3 id=&#34;七、负载均衡&#34;&gt;&lt;a href=&#34;#七、负载均衡&#34; class=&#34;headerlink&#34; title=&#34;七、负载均衡&#34;&gt;&lt;/a&gt;七、负载均衡&lt;/h3&gt;&lt;p&gt;​	集群：一个内容，部署多次，形成的整体称为集群。集群中每个个体应该部署到不同的服务器上。&lt;/p&gt;
&lt;p&gt;​	伪集群：集群中内容部署到同一台服务器上，通过不同端口区分不同个体。&lt;/p&gt;
&lt;p&gt;​	负载均衡是在集群前提下，当访问整个集群时，集群中每个节点被访问次数或频率的规则。&lt;/p&gt;
&lt;p&gt;​	Dubbo 内置了四个负载均衡策略。默认为Random&lt;/p&gt;
&lt;h4 id=&#34;1-内置策略&#34;&gt;&lt;a href=&#34;#1-内置策略&#34; class=&#34;headerlink&#34; title=&#34;1.内置策略&#34;&gt;&lt;/a&gt;1.内置策略&lt;/h4&gt;&lt;h5 id=&#34;1-1Random&#34;&gt;&lt;a href=&#34;#1-1Random&#34; class=&#34;headerlink&#34; title=&#34;1.1Random&#34;&gt;&lt;/a&gt;1.1Random&lt;/h5&gt;&lt;p&gt;​	随机。随机访问集群中节点。访问概率和权重有关。&lt;/p&gt;
&lt;h5 id=&#34;1-2RoundRobin&#34;&gt;&lt;a href=&#34;#1-2RoundRobin&#34; class=&#34;headerlink&#34; title=&#34;1.2RoundRobin&#34;&gt;&lt;/a&gt;1.2RoundRobin&lt;/h5&gt;&lt;p&gt;​	轮询。访问频率和权重有关。&lt;/p&gt;
&lt;p&gt;​	权重（weight）：占有比例。集群中每个项目部署的服务器的性能可能是不同，性能好的服务器权重应该高一些。&lt;/p&gt;
&lt;h5 id=&#34;1-3LeastActive&#34;&gt;&lt;a href=&#34;#1-3LeastActive&#34; class=&#34;headerlink&#34; title=&#34;1.3LeastActive&#34;&gt;&lt;/a&gt;1.3LeastActive&lt;/h5&gt;&lt;p&gt;​	活跃数相同的随机，不同的活跃数高的放前面。&lt;/p&gt;
&lt;h5 id=&#34;1-4ConsistentHash&#34;&gt;&lt;a href=&#34;#1-4ConsistentHash&#34; class=&#34;headerlink&#34; title=&#34;1.4ConsistentHash&#34;&gt;&lt;/a&gt;1.4ConsistentHash&lt;/h5&gt;&lt;p&gt;​	一致性Hash。相同参数请求总是发到一个提供者。&lt;/p&gt;
&lt;h4 id=&#34;2-Provider集群&#34;&gt;&lt;a href=&#34;#2-Provider集群&#34; class=&#34;headerlink&#34; title=&#34;2.Provider集群&#34;&gt;&lt;/a&gt;2.Provider集群&lt;/h4&gt;&lt;p&gt;​	新建四个启动类。&lt;/p&gt;
&lt;p&gt;​	每次启动启动类修改配置文件dubbo.protocal.port&lt;/p&gt;
&lt;h4 id=&#34;3-设置负载均衡&#34;&gt;&lt;a href=&#34;#3-设置负载均衡&#34; class=&#34;headerlink&#34; title=&#34;3.设置负载均衡&#34;&gt;&lt;/a&gt;3.设置负载均衡&lt;/h4&gt;&lt;h5 id=&#34;3-1-Reference&#34;&gt;&lt;a href=&#34;#3-1-Reference&#34; class=&#34;headerlink&#34; title=&#34;3.1@Reference&#34;&gt;&lt;/a&gt;3.1@Reference&lt;/h5&gt;&lt;p&gt;​	调用的服务采用的负载均衡&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Reference(loadbalance = &amp;quot;roundrobin&amp;quot;)
private DemoDubboService demoDubboService;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-2-Service&#34;&gt;&lt;a href=&#34;#3-2-Service&#34; class=&#34;headerlink&#34; title=&#34;3.2 @Service&#34;&gt;&lt;/a&gt;3.2 @Service&lt;/h5&gt;&lt;p&gt;​	当前服务采用的负载均衡算法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Service(loadbalance = &amp;quot;random&amp;quot;)
public class DemoDubboServiceImpl implements DemoDubboService &amp;#123;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	设置权重&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Service(weight = 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-3配置文件&#34;&gt;&lt;a href=&#34;#3-3配置文件&#34; class=&#34;headerlink&#34; title=&#34;3.3配置文件&#34;&gt;&lt;/a&gt;3.3配置文件&lt;/h5&gt;&lt;p&gt;​			全局设置所有provider和consumer的负载均衡效果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-provider
  registry:
    address: zookeeper://192.168.32.128:2181
  protocol:
    port: 20884
  provider:
    loadbalance: random
  consumer:
    loadbalance: random
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;八、完整Dubbo项目演示&#34;&gt;&lt;a href=&#34;#八、完整Dubbo项目演示&#34; class=&#34;headerlink&#34; title=&#34;八、完整Dubbo项目演示&#34;&gt;&lt;/a&gt;八、完整Dubbo项目演示&lt;/h3&gt;&lt;h4 id=&#34;1-原型&#34;&gt;&lt;a href=&#34;#1-原型&#34; class=&#34;headerlink&#34; title=&#34;1.原型&#34;&gt;&lt;/a&gt;1.原型&lt;/h4&gt;&lt;h5 id=&#34;1-1部门显示&#34;&gt;&lt;a href=&#34;#1-1部门显示&#34; class=&#34;headerlink&#34; title=&#34;1.1部门显示&#34;&gt;&lt;/a&gt;1.1部门显示&lt;/h5&gt;&lt;p&gt;​	显示全部部门信息&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Dubbo/Dubbo-4.png&#34; class=&#34;&#34;&gt;




&lt;h5 id=&#34;1-2员工新增&#34;&gt;&lt;a href=&#34;#1-2员工新增&#34; class=&#34;headerlink&#34; title=&#34;1.2员工新增&#34;&gt;&lt;/a&gt;1.2员工新增&lt;/h5&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Dubbo/Dubbo-5.png&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;1-3查看部门员工&#34;&gt;&lt;a href=&#34;#1-3查看部门员工&#34; class=&#34;headerlink&#34; title=&#34;1.3查看部门员工&#34;&gt;&lt;/a&gt;1.3查看部门员工&lt;/h5&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Dubbo/Dubbo-6.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-按照分布式架构进行设计项目&#34;&gt;&lt;a href=&#34;#2-按照分布式架构进行设计项目&#34; class=&#34;headerlink&#34; title=&#34;2.按照分布式架构进行设计项目&#34;&gt;&lt;/a&gt;2.按照分布式架构进行设计项目&lt;/h4&gt;&lt;p&gt;​		设定员工管理和部门管理不在同一个模块中，需要有一个员工管理项目和一个部门管理项目。&lt;/p&gt;
&lt;p&gt;​	为了方便，不去每个项目使用一个窗口，而是使用聚合项目。      &lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Dubbo/Dubbo-7.png&#34; class=&#34;&#34;&gt;








&lt;h4 id=&#34;3-创建数据库表&#34;&gt;&lt;a href=&#34;#3-创建数据库表&#34; class=&#34;headerlink&#34; title=&#34;3.创建数据库表&#34;&gt;&lt;/a&gt;3.创建数据库表&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;create table dept(
id int(11) primary key auto_increment,
name varchar(20)
);

insert into dept values(default,&amp;#39;开发部&amp;#39;);
insert into dept values(default,&amp;#39;产品部&amp;#39;);

create table emp(
id int(11) primary key auto_increment,
name varchar(20),
photo varchar(200),
did int(11),
CONSTRAINT fk_emp_dept FOREIGN key (did) REFERENCES dept(id)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-创建父项目&#34;&gt;&lt;a href=&#34;#4-创建父项目&#34; class=&#34;headerlink&#34; title=&#34;4.创建父项目&#34;&gt;&lt;/a&gt;4.创建父项目&lt;/h4&gt;&lt;p&gt;​	创建项目parent。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Dubbo/Dubbo-8.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;编写pom.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/parent&amp;gt;
&amp;lt;dependencyManagement&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.7.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.1.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
         &amp;lt;dependency&amp;gt;
             &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
             &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
             &amp;lt;version&amp;gt;1.18.12&amp;lt;/version&amp;gt;
             &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
         &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-创建pojo项目&#34;&gt;&lt;a href=&#34;#5-创建pojo项目&#34; class=&#34;headerlink&#34; title=&#34;5.创建pojo项目&#34;&gt;&lt;/a&gt;5.创建pojo项目&lt;/h4&gt;&lt;h4 id=&#34;6-创建mapper项目&#34;&gt;&lt;a href=&#34;#6-创建mapper项目&#34; class=&#34;headerlink&#34; title=&#34;6.创建mapper项目&#34;&gt;&lt;/a&gt;6.创建mapper项目&lt;/h4&gt;&lt;h5 id=&#34;6-1编写pom-xml&#34;&gt;&lt;a href=&#34;#6-1编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;6.1编写pom.xml&#34;&gt;&lt;/a&gt;6.1编写pom.xml&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;pojo&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-2新建配置文件&#34;&gt;&lt;a href=&#34;#6-2新建配置文件&#34; class=&#34;headerlink&#34; title=&#34;6.2新建配置文件&#34;&gt;&lt;/a&gt;6.2新建配置文件&lt;/h5&gt;&lt;p&gt;​	新建application-mybatis.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/maven
    username: root
    password: root

mybatis:
  mapper-locations: classpath:mybatis/*.xml
  type-aliases-package: com.msb.pojo
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-新建api项目&#34;&gt;&lt;a href=&#34;#7-新建api项目&#34; class=&#34;headerlink&#34; title=&#34;7.新建api项目&#34;&gt;&lt;/a&gt;7.新建api项目&lt;/h4&gt;&lt;h5 id=&#34;7-1编写pom-xml&#34;&gt;&lt;a href=&#34;#7-1编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;7.1编写pom.xml&#34;&gt;&lt;/a&gt;7.1编写pom.xml&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;pojo&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.bjsxt&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-新建provider&#34;&gt;&lt;a href=&#34;#8-新建provider&#34; class=&#34;headerlink&#34; title=&#34;8.新建provider&#34;&gt;&lt;/a&gt;8.新建provider&lt;/h4&gt;&lt;h5 id=&#34;8-1编写pom-xml&#34;&gt;&lt;a href=&#34;#8-1编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;8.1编写pom.xml&#34;&gt;&lt;/a&gt;8.1编写pom.xml&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;mapper&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8-2新建配置文件&#34;&gt;&lt;a href=&#34;#8-2新建配置文件&#34; class=&#34;headerlink&#34; title=&#34;8.2新建配置文件&#34;&gt;&lt;/a&gt;8.2新建配置文件&lt;/h5&gt;&lt;p&gt;​	新建application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-provider
  registry:
    address: zookeeper://192.168.52.128:2181

# 加载其他配置文件,加载其他application-*.yml文件，多个名称之间使用逗号分隔
spring:
  profiles:
    active: mybatis
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8-3新建启动类&#34;&gt;&lt;a href=&#34;#8-3新建启动类&#34; class=&#34;headerlink&#34; title=&#34;8.3新建启动类&#34;&gt;&lt;/a&gt;8.3新建启动类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.ProviderApplication&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDubbo
@MapperScan(&amp;quot;com.msb.mapper&amp;quot;)
public class ProviderApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(ProviderApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;9-完成Dept查询功能&#34;&gt;&lt;a href=&#34;#9-完成Dept查询功能&#34; class=&#34;headerlink&#34; title=&#34;9.完成Dept查询功能&#34;&gt;&lt;/a&gt;9.完成Dept查询功能&lt;/h4&gt;&lt;h5 id=&#34;9-1在api中新建接口&#34;&gt;&lt;a href=&#34;#9-1在api中新建接口&#34; class=&#34;headerlink&#34; title=&#34;9.1在api中新建接口&#34;&gt;&lt;/a&gt;9.1在api中新建接口&lt;/h5&gt;&lt;p&gt;​	com.msb.dubbo.service.DeptDubboService&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface DeptDubboService &amp;#123;
    List&amp;lt;Dept&amp;gt; selectAll();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;9-2在provider中新建实现类&#34;&gt;&lt;a href=&#34;#9-2在provider中新建实现类&#34; class=&#34;headerlink&#34; title=&#34;9.2在provider中新建实现类&#34;&gt;&lt;/a&gt;9.2在provider中新建实现类&lt;/h5&gt;&lt;p&gt;​	com.msb.dubbo.service.impl.DeptDubboServiceImpl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Service
public class DeptDubboServiceImpl implements DeptDubboService &amp;#123;
    @Autowired
    private DeptMapper deptMapper;
    @Override
    public List&amp;lt;Dept&amp;gt; selectAll() &amp;#123;
        return deptMapper.selectByExample(null);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;9-3新建项目dept&#34;&gt;&lt;a href=&#34;#9-3新建项目dept&#34; class=&#34;headerlink&#34; title=&#34;9.3新建项目dept&#34;&gt;&lt;/a&gt;9.3新建项目dept&lt;/h5&gt;&lt;h6 id=&#34;9-3-1添加依赖&#34;&gt;&lt;a href=&#34;#9-3-1添加依赖&#34; class=&#34;headerlink&#34; title=&#34;9.3.1添加依赖&#34;&gt;&lt;/a&gt;9.3.1添加依赖&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9-3-2编写配置文件&#34;&gt;&lt;a href=&#34;#9-3-2编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;9.3.2编写配置文件&#34;&gt;&lt;/a&gt;9.3.2编写配置文件&lt;/h6&gt;&lt;p&gt;​	新建application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-dept-consumer
  registry:
    address: zookeeper://192.168.52.128:2181
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9-3-3新建启动类&#34;&gt;&lt;a href=&#34;#9-3-3新建启动类&#34; class=&#34;headerlink&#34; title=&#34;9.3.3新建启动类&#34;&gt;&lt;/a&gt;9.3.3新建启动类&lt;/h6&gt;&lt;p&gt;​	com.msb.DeptApplication&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDubbo
public class DeptApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(DeptApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9-3-4新建接口及实现类&#34;&gt;&lt;a href=&#34;#9-3-4新建接口及实现类&#34; class=&#34;headerlink&#34; title=&#34;9.3.4新建接口及实现类&#34;&gt;&lt;/a&gt;9.3.4新建接口及实现类&lt;/h6&gt;&lt;p&gt;​	接口：com.msb.service.DeptService&lt;/p&gt;
&lt;p&gt;​	实现类：com.msb.service.impl.DeptServiceImpl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface DeptService &amp;#123;
    List&amp;lt;Dept&amp;gt; showAll();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;@Service
public class DeptServiceImpl implements DeptService &amp;#123;
    @Reference
    private DeptDubboService deptDubboService;
    @Override
    public List&amp;lt;Dept&amp;gt; showAll() &amp;#123;
        return deptDubboService.selectAll();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9-3-5新建控制器&#34;&gt;&lt;a href=&#34;#9-3-5新建控制器&#34; class=&#34;headerlink&#34; title=&#34;9.3.5新建控制器&#34;&gt;&lt;/a&gt;9.3.5新建控制器&lt;/h6&gt;&lt;p&gt;​	com.msb.controller.DeptController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Controller
public class DeptController &amp;#123;

    @Autowired
    private DeptService deptService;

    @GetMapping(&amp;quot;/dept&amp;quot;)
    public String shwoDept(Model model)&amp;#123;
        model.addAttribute(&amp;quot;list&amp;quot;,deptService.showAll());
        return &amp;quot;dept&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;9-3-6-新建页面&#34;&gt;&lt;a href=&#34;#9-3-6-新建页面&#34; class=&#34;headerlink&#34; title=&#34;9.3.6  新建页面&#34;&gt;&lt;/a&gt;9.3.6  新建页面&lt;/h5&gt;&lt;p&gt;​	在resources &amp;#x2F;templates新建dept.html&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot; xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;table border=&amp;quot;1&amp;quot; width=&amp;quot;500&amp;quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;编号&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;部门名称&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;查看&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr th:each=&amp;quot;dept : $&amp;#123;list&amp;#125;&amp;quot;&amp;gt;
            &amp;lt;td th:text=&amp;quot;$&amp;#123;dept.id&amp;#125;&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td th:text=&amp;quot;$&amp;#123;dept.name&amp;#125;&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt; &amp;lt;a th:href=&amp;quot;@&amp;#123;/showEmp(did=$&amp;#123;dept.id&amp;#125;)&amp;#125;&amp;quot;&amp;gt;查看&amp;lt;/a&amp;gt; &amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;             
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt;</content>
        <category term="分布式" />
        <category term="Dubbo" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/Distribution/FastDFS/</id>
        <title>FastDFS</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Distribution/FastDFS/"/>
        <content type="html">&lt;h1 id=&#34;分布式文件存储系统FastDFS&#34;&gt;&lt;a href=&#34;#分布式文件存储系统FastDFS&#34; class=&#34;headerlink&#34; title=&#34;分布式文件存储系统FastDFS&#34;&gt;&lt;/a&gt;分布式文件存储系统FastDFS&lt;/h1&gt;&lt;h1 id=&#34;一、分布式文件存储&#34;&gt;&lt;a href=&#34;#一、分布式文件存储&#34; class=&#34;headerlink&#34; title=&#34;一、分布式文件存储&#34;&gt;&lt;/a&gt;一、分布式文件存储&lt;/h1&gt;&lt;h2 id=&#34;1-分布式文件存储的由来&#34;&gt;&lt;a href=&#34;#1-分布式文件存储的由来&#34; class=&#34;headerlink&#34; title=&#34;1.分布式文件存储的由来&#34;&gt;&lt;/a&gt;1.分布式文件存储的由来&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;在我们的项目中有很多需要存储的内容出现，比如图片，视频，文件等等，在早期的时候用户量不大，产生的文件也不是很多，这时我们可以把文件和服务程序放在一个服务器中。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/66d2beee9a4e47c08aa9552530a9c996.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;后面随着文件越来越多，服务器的资源会被文件资源大量占据，从而影响到服务器的稳定，这时我们可以单独的把文件服务器拆出来。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/8097b0f16465452b9f9b460e2149aa0d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;拆解出来后，文件服务的使用不会影响到我们的系统服务的稳定，但是当用户量越来越大，存储的文件就会越来越多，这时如果还是单台的文件服务，比如100T的文件，这时是存储不下去的，这时就产生了我们将的分布式文件存储，&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/fff16a09675d40ac926d42be9385d461.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;也就是我们解决如何将这100T的文件分散的存储到各个节点上，然后当我们需要读取文件的时候又能非常快的帮我们把文件找到。这个就是分布式文件系统帮我们解决的问题了。&lt;/p&gt;
&lt;h2 id=&#34;2-常见的分布式存储框架&#34;&gt;&lt;a href=&#34;#2-常见的分布式存储框架&#34; class=&#34;headerlink&#34; title=&#34;2.常见的分布式存储框架&#34;&gt;&lt;/a&gt;2.常见的分布式存储框架&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;接下来我们看看在国内常用的分布式存储的框架选择有哪些&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分布式框架&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;FastDFS&lt;/td&gt;
&lt;td&gt;我们介绍的主角，国产&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HDFS&lt;/td&gt;
&lt;td&gt;Hadoop组件中分布式存储框架&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MinIO&lt;/td&gt;
&lt;td&gt;MinIO是在Apache下的产品，最适合存储非结构化的数据，&lt;br /&gt;比如照片，视频，日志文件，备份和容器等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云对象存储&lt;/td&gt;
&lt;td&gt;当然我们还可以花费一点费用来使用其他厂商提供的对象存储服务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;好了就介绍这么几个，其他的我们也用不到了。&lt;/p&gt;
&lt;h1 id=&#34;二、FastDFS介绍&#34;&gt;&lt;a href=&#34;#二、FastDFS介绍&#34; class=&#34;headerlink&#34; title=&#34;二、FastDFS介绍&#34;&gt;&lt;/a&gt;二、FastDFS介绍&lt;/h1&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;FastDFS是余庆国人开发的一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。&lt;/p&gt;
&lt;p&gt;FastDFS的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FastDFS是一个轻量级的开源分布式文件系统&lt;/li&gt;
&lt;li&gt;FastDFS主要解决了大容量的文件存储和高并发访问的问题，文件存取时实现了负载均衡&lt;/li&gt;
&lt;li&gt;FastDFS实现了软件方式的RAID，可以使用廉价的IDE硬盘进行存储&lt;/li&gt;
&lt;li&gt;支持存储服务器在线扩容&lt;/li&gt;
&lt;li&gt;支持相同内容的文件只保存一份，节约磁盘空间&lt;/li&gt;
&lt;li&gt;FastDFS只能通过Client API访问，不支持POSIX访问方式&lt;/li&gt;
&lt;li&gt;FastDFS特别适合大中型网站使用，用来存储资源文件（如：图片、文档、音频、视频等等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;架构图：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/92362218a5024b7c9e9141b754756b79.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;相关术语讲解：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名词&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Tracker Server&lt;/td&gt;
&lt;td&gt;跟踪服务器，主要做调度工作，在访问上起负载均衡的作用。&lt;br /&gt;记录storage server的状态，是连接Client和Storage server的枢纽&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Storage Server&lt;/td&gt;
&lt;td&gt;存储服务器，文件和meta data都保存到存储服务器上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;group&lt;/td&gt;
&lt;td&gt;组，也可称为卷。同组内服务器上的文件是完全相同的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件标识&lt;/td&gt;
&lt;td&gt;包括两部分：组名和文件名（包含路径）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;meta-data&lt;/td&gt;
&lt;td&gt;文件相关属性，键值对（Key Value Pair）方式，如：width&amp;#x3D;1024,heigth&amp;#x3D;768&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;架构解读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有两个角色，tracker server和storage server，不需要存储文件索引信息。&lt;/li&gt;
&lt;li&gt;所有服务器都是对等的，不存在Master-Slave关系。&lt;/li&gt;
&lt;li&gt;存储服务器采用分组方式，同组内存储服务器上的文件完全相同（RAID 1）。&lt;/li&gt;
&lt;li&gt;不同组的storage server之间不会相互通信。&lt;/li&gt;
&lt;li&gt;由storage server主动向tracker server报告状态信息，tracker server之间不会相互通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;三、FastDFS安装&#34;&gt;&lt;a href=&#34;#三、FastDFS安装&#34; class=&#34;headerlink&#34; title=&#34;三、FastDFS安装&#34;&gt;&lt;/a&gt;三、FastDFS安装&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/b60ca697c06d4425b7cd228b98dc3d19.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;FastDFS的安装我们还是通过Docker来安装实现吧，直接在Linux上还装还是比较繁琐的，但就学习而言Docker安装还是非常高效的。Docker环境请自行安装哦，不清楚的可以看看我的Docker专题的内容。&lt;a href=&#34;Docker%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99&#34; title=&#34;Docker学习资料&#34;&gt;https://blog.csdn.net/qq_38526573&amp;#x2F;category_9619681.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-拉取镜像文件&#34;&gt;&lt;a href=&#34;#1-拉取镜像文件&#34; class=&#34;headerlink&#34; title=&#34;1.拉取镜像文件&#34;&gt;&lt;/a&gt;1.拉取镜像文件&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先我们可以通过 &lt;code&gt;docker search fastdfs&lt;/code&gt; 来查询下有哪些镜像文件。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/5a06a59eb24d4f9e847a4badeef871ac.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;我们看到搜索到的镜像还是蛮多的，这里我们使用 &lt;code&gt;delron/fastdfs&lt;/code&gt; 你也可以尝试使用其他的镜像来安装，你也可以制作自己的镜像来给别人使用哦，只是不同的镜像在使用的时候配置会有一些不一样，有些镜像没有提供Nginx的相关配置，使用的时候会繁琐一点。接下来通过 &lt;code&gt;docker pull delron/fastdfs&lt;/code&gt;命令把镜像拉取下来。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull delron/fastdfs
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/5e5b85b3dc9a432abf615b27868fc7bf.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;2-构建Tracker服务&#34;&gt;&lt;a href=&#34;#2-构建Tracker服务&#34; class=&#34;headerlink&#34; title=&#34;2.构建Tracker服务&#34;&gt;&lt;/a&gt;2.构建Tracker服务&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先我们需要通过Docker命令来创建Tracker服务。命令为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name tracker --network=host -v /mydata/fastdfs/tracker:/var/fdfs delron/fastdfs tracker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;tracker服务默认的端口为22122，-v 实现了容器和本地目录的挂载操作。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/694d42632bf6410a806df9aa43e836c0.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;3-构建Storage服务&#34;&gt;&lt;a href=&#34;#3-构建Storage服务&#34; class=&#34;headerlink&#34; title=&#34;3.构建Storage服务&#34;&gt;&lt;/a&gt;3.构建Storage服务&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;接下来创建Storage服务，具体的执行命令如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name storage --network=host  -e TRACKER_SERVER=192.168.1.195:22122 -v /mydata/fastdfs/storage:/var/fdfs -e GROUP_NAME=group1 delron/fastdfs storage
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;在执行上面命令的时候要注意对应的修改下，其中TRACKER_SERVER中的ip要修改为你的Tracker服务所在的服务IP地址。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/dc2bdf85d0f24fe18a32efbe4caa2d27.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;默认情况下在Storage服务中是帮我们安装了Nginx服务的，相关的端口为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;th&gt;默认端口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;tracker&lt;/td&gt;
&lt;td&gt;22122&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;storage&lt;/td&gt;
&lt;td&gt;23000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nginx&lt;/td&gt;
&lt;td&gt;8888&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;当然如果你发现这些相关的端口被占用了，或者想要对应的修改端口信息也可以的。要修改你可以先进入容器中查看下相关的配置文件信息。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/da5cc21445e840baa85580ba420db94d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后查看storage.conf文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/63862499980b408195291de047048566.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;这个是storage监听的Nginx的端口8888，如果要修改那么我们还需要修改Nginx中的服务配置，这块的配置在 &lt;code&gt;/usr/local/nginx/conf&lt;/code&gt;目录下&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/f866c08177be4fd48bfd9a582ec78779.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;查看下文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/dc7c5888363a400b9308f3ba64cca9ac.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;所以要修改端口号的话，这两个位置都得修改了。当然本文我们就使用默认的端口号来使用了。&lt;/p&gt;
&lt;h2 id=&#34;4-测试图片上传&#34;&gt;&lt;a href=&#34;#4-测试图片上传&#34; class=&#34;headerlink&#34; title=&#34;4.测试图片上传&#34;&gt;&lt;/a&gt;4.测试图片上传&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;好了，安装我们已经完成了，那么到底是否可以使用呢？我们来测试下。首先在虚拟机的&amp;#x2F;mydata&amp;#x2F;fastdfs&amp;#x2F;storage下保存一张图片。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/ff2ea2626bb34acd810fbb8d9438129a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后我们再进入到storage容器中。并且进入到 &lt;code&gt;/var/fdfs&lt;/code&gt;目录下,可以看到我们挂载的文件了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/cb8a96fb9bb644328880ca70378a7fc2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后执行如下命令即可完成图片的上传操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;/usr/bin/fdfs_upload_file /etc/fdfs/client.conf 1.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/0fd0e82898bb45178eca4eef9a412745.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;通过上面的提示我们看到文件上传成功了，而且返回了文件在storage中存储的信息。这时我们就可以通过这个信息来拼接访问的地址在浏览器中访问了：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguNTYuMTAwOjg4ODgvZ3JvdXAxL00wMC8wMC8wMC93S2c0WkdIY0tMU0FYaWJhQUFlek11VXJsUzgyMzUuanBn&#34;&gt;http://192.168.56.100:8888/group1/M00/00/00/wKg4ZGHcKLSAXibaAAezMuUrlS8235.jpg&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/b34e823e956f410297bfd1218ebc0231.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;好了到这儿FastDFS的服务安装成功了。&lt;/p&gt;
&lt;h1 id=&#34;四、客户端操作&#34;&gt;&lt;a href=&#34;#四、客户端操作&#34; class=&#34;headerlink&#34; title=&#34;四、客户端操作&#34;&gt;&lt;/a&gt;四、客户端操作&lt;/h1&gt;&lt;h2 id=&#34;1-Fastdfs-java-client&#34;&gt;&lt;a href=&#34;#1-Fastdfs-java-client&#34; class=&#34;headerlink&#34; title=&#34;1.Fastdfs-java-client&#34;&gt;&lt;/a&gt;1.Fastdfs-java-client&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先我们来看下如何实现FastDFS中提供的JavaAPI来直接实现对应的文件上传和下载操作。&lt;/p&gt;
&lt;h3 id=&#34;1-1-文件上传&#34;&gt;&lt;a href=&#34;#1-1-文件上传&#34; class=&#34;headerlink&#34; title=&#34;1.1 文件上传&#34;&gt;&lt;/a&gt;1.1 文件上传&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;先来看下文件上传的流程&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/c1da19dbbe994f55b20371ba0806d694.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;上传流程的文字梳理为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端访问Tracker&lt;/li&gt;
&lt;li&gt;Tracker 返回Storage的ip和端口&lt;/li&gt;
&lt;li&gt;客户端直接访问Storage，把文件内容和元数据发送过去。&lt;/li&gt;
&lt;li&gt;Storage返回文件存储id。包含了组名和文件名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先创建一个普通的maven项目，然后引入对应的依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;cn.bestwu&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;fastdfs-client-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.27&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.4&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后编写FastDFS的配置文件，内容如下：注意ip修改为你自己对应的ip即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;connect_timeout = 10
network_timeout = 30
charset = UTF-8
http.tracker_http_port = 8080
tracker_server = 192.168.56.100:22122
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/3c54c7b41f2a4ac2b420b65beafd10d2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后导入对应的工具类，在工具类中完成了StorageClient的实例化，并提供了相关的上传和下载的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.bobo.fastdfs.config;

import org.apache.commons.lang3.StringUtils;
import org.csource.common.NameValuePair;
import org.csource.fastdfs.*;

import java.io.*;

public class FastDFSClient &amp;#123;
    private static final String CONF_FILENAME = Thread.currentThread().getContextClassLoader().getResource(&amp;quot;&amp;quot;).getPath() + &amp;quot;fdfs_client.conf&amp;quot;;

    private static StorageClient storageClient = null;

    /**
     * 只加载一次.
     */
    static &amp;#123;
        try &amp;#123;
            ClientGlobal.init(CONF_FILENAME);
            TrackerClient trackerClient = new TrackerClient(ClientGlobal.g_tracker_group);
            TrackerServer trackerServer = trackerClient.getConnection();
            StorageServer storageServer = trackerClient.getStoreStorage(trackerServer);
            storageClient = new StorageClient(trackerServer, storageServer);
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;

    /**
     *
     * @param inputStream
     *    上传的文件输入流
     * @param fileName
     *    上传的文件原始名
     * @return
     */
    public static String[] uploadFile(InputStream inputStream, String fileName) &amp;#123;
        try &amp;#123;
            // 文件的元数据
            NameValuePair[] meta_list = new NameValuePair[2];
            // 第一组元数据，文件的原始名称
            meta_list[0] = new NameValuePair(&amp;quot;file name&amp;quot;, fileName);
            // 第二组元数据
            meta_list[1] = new NameValuePair(&amp;quot;file length&amp;quot;, inputStream.available()+&amp;quot;&amp;quot;);
            // 准备字节数组
            byte[] file_buff = null;
            if (inputStream != null) &amp;#123;
                // 查看文件的长度
                int len = inputStream.available();
                // 创建对应长度的字节数组
                file_buff = new byte[len];
                // 将输入流中的字节内容，读到字节数组中。
                inputStream.read(file_buff);
            &amp;#125;
            // 上传文件。参数含义：要上传的文件的内容（使用字节数组传递），上传的文件的类型（扩展名），元数据
            String[] fileids = storageClient.upload_file(file_buff, getFileExt(fileName), meta_list);
            return fileids;
        &amp;#125; catch (Exception ex) &amp;#123;
            ex.printStackTrace();
            return null;
        &amp;#125;
    &amp;#125;

    /**
     *
     * @param file
     *            文件
     * @param fileName
     *            文件名
     * @return 返回Null则为失败
     */
    public static String[] uploadFile(File file, String fileName) &amp;#123;
        FileInputStream fis = null;
        try &amp;#123;
            NameValuePair[] meta_list = null; // new NameValuePair[0];
            fis = new FileInputStream(file);
            byte[] file_buff = null;
            if (fis != null) &amp;#123;
                int len = fis.available();
                file_buff = new byte[len];
                fis.read(file_buff);
            &amp;#125;

            String[] fileids = storageClient.upload_file(file_buff, getFileExt(fileName), meta_list);
            return fileids;
        &amp;#125; catch (Exception ex) &amp;#123;
            return null;
        &amp;#125;finally&amp;#123;
            if (fis != null)&amp;#123;
                try &amp;#123;
                    fis.close();
                &amp;#125; catch (IOException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;

    /**
     * 根据组名和远程文件名来删除一个文件
     *
     * @param groupName
     *            例如 &amp;quot;group1&amp;quot; 如果不指定该值，默认为group1
     * @param remoteFileName
     *            例如&amp;quot;M00/00/00/wKgxgk5HbLvfP86RAAAAChd9X1Y736.jpg&amp;quot;
     * @return 0为成功，非0为失败，具体为错误代码
     */
    public static int deleteFile(String groupName, String remoteFileName) &amp;#123;
        try &amp;#123;
            int result = storageClient.delete_file(groupName == null ? &amp;quot;group1&amp;quot; : groupName, remoteFileName);
            return result;
        &amp;#125; catch (Exception ex) &amp;#123;
            return 0;
        &amp;#125;
    &amp;#125;

    /**
     * 修改一个已经存在的文件
     *
     * @param oldGroupName
     *            旧的组名
     * @param oldFileName
     *            旧的文件名
     * @param file
     *            新文件
     * @param fileName
     *            新文件名
     * @return 返回空则为失败
     */
    public static String[] modifyFile(String oldGroupName, String oldFileName, File file, String fileName) &amp;#123;
        String[] fileids = null;
        try &amp;#123;
            // 先上传
            fileids = uploadFile(file, fileName);
            if (fileids == null) &amp;#123;
                return null;
            &amp;#125;
            // 再删除
            int delResult = deleteFile(oldGroupName, oldFileName);
            if (delResult != 0) &amp;#123;
                return null;
            &amp;#125;
        &amp;#125; catch (Exception ex) &amp;#123;
            return null;
        &amp;#125;
        return fileids;
    &amp;#125;

    /**
     * 文件下载
     *
     * @param groupName 卷名
     * @param remoteFileName 文件名
     * @return 返回一个流
     */
    public static InputStream downloadFile(String groupName, String remoteFileName) &amp;#123;
        try &amp;#123;
            byte[] bytes = storageClient.download_file(groupName, remoteFileName);
            InputStream inputStream = new ByteArrayInputStream(bytes);
            return inputStream;
        &amp;#125; catch (Exception ex) &amp;#123;
            return null;
        &amp;#125;
    &amp;#125;

    public static NameValuePair[] getMetaDate(String groupName, String remoteFileName)&amp;#123;
        try&amp;#123;
            NameValuePair[] nvp = storageClient.get_metadata(groupName, remoteFileName);
            return nvp;
        &amp;#125;catch(Exception ex)&amp;#123;
            ex.printStackTrace();
            return null;
        &amp;#125;
    &amp;#125;

    /**
     * 获取文件后缀名（不带点）.
     *
     * @return 如：&amp;quot;jpg&amp;quot; or &amp;quot;&amp;quot;.
     */
    private static String getFileExt(String fileName) &amp;#123;
        if (StringUtils.isBlank(fileName) || !fileName.contains(&amp;quot;.&amp;quot;)) &amp;#123;
            return &amp;quot;&amp;quot;;
        &amp;#125; else &amp;#123;
            return fileName.substring(fileName.lastIndexOf(&amp;quot;.&amp;quot;) + 1); // 不带最后的点
        &amp;#125;
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后我们就可以来测试上传的操作了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            File file = new File(&amp;quot;D:/2.jpg&amp;quot;);
            InputStream is = new FileInputStream(file);
            String fileName = UUID.randomUUID().toString()+&amp;quot;.jpg&amp;quot;;
            String[] result = FastDFSClient.uploadFile(is, fileName);
            System.out.println(Arrays.toString(result));
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/6d7d9ff0b42e4e1daae06e47dab3793f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;访问即可：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguNTYuMTAwOjg4ODgvZ3JvdXAxL00wMC8wMC8wMC93S2c0WkdIY1VFNkFaQTJVQUFXOGRJWDVwNTAzNzQuanBn&#34;&gt;http://192.168.56.100:8888/group1/M00/00/00/wKg4ZGHcUE6AZA2UAAW8dIX5p50374.jpg&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;返回后的字符串的结构说明&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/5cec7e1344324b8dbd8050715d40b32f.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;1-2-文件下载&#34;&gt;&lt;a href=&#34;#1-2-文件下载&#34; class=&#34;headerlink&#34; title=&#34;1.2 文件下载&#34;&gt;&lt;/a&gt;1.2 文件下载&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;文件下载的流程，如下&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/04cba11544044479996f178ed8e41768.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;文件下载的流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;client询问tracker需要下载的文件的storage，参数为文件的标识(group加文件名)。&lt;/li&gt;
&lt;li&gt;tracker根据客户端的参数返回一台可用的storage。&lt;/li&gt;
&lt;li&gt;client根据返回的storage直接完成对应的文件的下载。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;有了上面的基础，文件下载就非常简单了，我们只需要根据前面上传的文件的group和文件的存储路径就可以通过StorageClient中提供的downloadFile方法把对应的文件下载下来了，具体的代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    /**
     * 文件下载
     */
    public static void downloadFile()&amp;#123;
        try &amp;#123;
            InputStream is = FastDFSClient
                    .downloadFile(&amp;quot;group1&amp;quot;, &amp;quot;M00/00/00/wKg4ZGHcUE6AZA2UAAW8dIX5p50374.jpg&amp;quot;);
            OutputStream os = new FileOutputStream(new File(&amp;quot;D:/12.jpg&amp;quot;));
            int index = 0 ;
            while((index = is.read())!=-1)&amp;#123;
                os.write(index);
            &amp;#125;
            os.flush();
            os.close();
            is.close();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：StorageClient是线程不安全的。那么我们的解决方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对文件的操作的每个方法我们做同步处理&lt;/li&gt;
&lt;li&gt;每次操作文件的时候我们都获取一个新的StorageClient对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种方式效率肯定是最低的，第二种方式每次都要建立新的连接效率同样的会受到影响，这时最好的方式其实是把StorageClient交给我们自定义的连接池来管理&lt;/p&gt;
&lt;h2 id=&#34;2-SpringBoot整合&#34;&gt;&lt;a href=&#34;#2-SpringBoot整合&#34; class=&#34;headerlink&#34; title=&#34;2.SpringBoot整合&#34;&gt;&lt;/a&gt;2.SpringBoot整合&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;我们在实际工作中基本都是和SpringBoot整合在一起来使用的，那么我们就来看看FastDFS是如何在SpringBoot项目中来使用的。首先创建一个普通的SpringBoot项目，然后导入fastdfs-spring-boot-starter这个依赖。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.luhuiguo&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;fastdfs-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.2.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;既然是一个starter，那么必然会在spring.factories文件中提供对应的自动配置类。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/807e18ab743d4dcea0128bfc9f967a22.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;可以看到给我们提供的配置类为FdfsAutoConfiguration进入后可以看到帮我们注入了很多的核心对象。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/74a13becccb94ff8841c542cf0b9ce98.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后可以看到系统提供的配置信息，前缀为 &lt;code&gt;fdfs&lt;/code&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/ef9e211d1145444c8b8348d2e73a6a76.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后我们就可以在application.properties中配置FastDFS的配置信息了。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/aa2dde964afc4909a7214239a269b65b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;配置完成后我们就可以测试文件的上传下载操作了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootTest
class FastDfsSpringBootApplicationTests &amp;#123;

    @Autowired
    public FastFileStorageClient storageClient;


    @Test
    void contextLoads() throws Exception&amp;#123;
        File file = new File(&amp;quot;d:\\2.jpg&amp;quot;);
        StorePath path = storageClient.uploadFile(null,new FileInputStream(file),file.length(),file.getName());
        System.out.println(path.getFullPath());
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文件操作成功&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/FastDFS/781603ff01b4486c8775ee45639420f4.png&#34; class=&#34;&#34;&gt;


&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt;</content>
        <category term="分布式" />
        <category term="FastDFS" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/Distribution/RPC/</id>
        <title>RPC</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Distribution/RPC/"/>
        <content type="html">&lt;h1 id=&#34;【RPC】&#34;&gt;&lt;a href=&#34;#【RPC】&#34; class=&#34;headerlink&#34; title=&#34;【RPC】&#34;&gt;&lt;/a&gt;【RPC】&lt;/h1&gt;&lt;h2 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;项目结构变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RPC简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RMI实现RPC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HttpClient实现RPC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zookeeper安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zookeeper客户端常用命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;向Zookeeper中注册内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从Zookeeper中发现内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;手写RPC框架&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学习目标&#34;&gt;&lt;a href=&#34;#学习目标&#34; class=&#34;headerlink&#34; title=&#34;学习目标&#34;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;项目架构变化&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RPC简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RMI实现RPC&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HttpClient实现RPC&lt;/td&gt;
&lt;td&gt;了解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zookeeper安装&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zookeeper客户端常用命令&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;向Zookeeper中注册内容&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;从zookeeper中发现内容&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;手写RPC框架&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;一、今天学什么？为什么讲？&#34;&gt;&lt;a href=&#34;#一、今天学什么？为什么讲？&#34; class=&#34;headerlink&#34; title=&#34;一、今天学什么？为什么讲？&#34;&gt;&lt;/a&gt;一、今天学什么？为什么讲？&lt;/h3&gt;&lt;p&gt;​	 现在学习RPC。后期学习的Dubbo是一个RPC框架，学习好现在的内容，学习Dubbo将会变得容易一些。&lt;/p&gt;
&lt;h3 id=&#34;二、项目架构变化&#34;&gt;&lt;a href=&#34;#二、项目架构变化&#34; class=&#34;headerlink&#34; title=&#34;二、项目架构变化&#34;&gt;&lt;/a&gt;二、项目架构变化&lt;/h3&gt;&lt;h4 id=&#34;1-单体架构&#34;&gt;&lt;a href=&#34;#1-单体架构&#34; class=&#34;headerlink&#34; title=&#34;1     单体架构&#34;&gt;&lt;/a&gt;1     单体架构&lt;/h4&gt;&lt;h5 id=&#34;1-1-架构图&#34;&gt;&lt;a href=&#34;#1-1-架构图&#34; class=&#34;headerlink&#34; title=&#34;1.1   架构图&#34;&gt;&lt;/a&gt;1.1   架构图&lt;/h5&gt;&lt;p&gt;​	单体架构就是一个项目里面包含这个项目中全部代码。一个应用搞定全部功能。&lt;/p&gt;
&lt;p&gt;​	DNS 服务器可以是单映射，也可以配置多个映射。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/RPC/rpc-01.png&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;1-2-软件代码结构&#34;&gt;&lt;a href=&#34;#1-2-软件代码结构&#34; class=&#34;headerlink&#34; title=&#34;1.2   软件代码结构&#34;&gt;&lt;/a&gt;1.2   软件代码结构&lt;/h5&gt;&lt;p&gt;​	在单体架构项目中，团队都是通过包(package)进行区分每个模块。&lt;/p&gt;
&lt;p&gt;​	总体包结构：com.msb.*.分层包。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;项目名：
  -- com
    --msb
      -- common
        -- utils
      --user
        -- controller
        -- service
        -- mapper
      -- sys
        -- controller
        -- service
        -- mapper
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-3-优缺点&#34;&gt;&lt;a href=&#34;#1-3-优缺点&#34; class=&#34;headerlink&#34; title=&#34;1.3   优缺点&#34;&gt;&lt;/a&gt;1.3   优缺点&lt;/h4&gt;&lt;h5 id=&#34;1-3-1-优点&#34;&gt;&lt;a href=&#34;#1-3-1-优点&#34; class=&#34;headerlink&#34; title=&#34;1.3.1    优点&#34;&gt;&lt;/a&gt;1.3.1    优点&lt;/h5&gt;&lt;p&gt;​	部署简单&lt;/p&gt;
&lt;p&gt;​	维护方便&lt;/p&gt;
&lt;p&gt;​	成本低&lt;/p&gt;
&lt;h5 id=&#34;1-3-2-缺点&#34;&gt;&lt;a href=&#34;#1-3-2-缺点&#34; class=&#34;headerlink&#34; title=&#34;1.3.2    缺点&#34;&gt;&lt;/a&gt;1.3.2    缺点&lt;/h5&gt;&lt;p&gt;​	当项目规模大、用户访问频率高、并发量大、数据量大时，会大大降低程序执行效率，甚至出现服务器宕机等情况。&lt;/p&gt;
&lt;h4 id=&#34;1-4-适用项目&#34;&gt;&lt;a href=&#34;#1-4-适用项目&#34; class=&#34;headerlink&#34; title=&#34;1.4   适用项目&#34;&gt;&lt;/a&gt;1.4   适用项目&lt;/h4&gt;&lt;p&gt;传统管理项目，小型互联网项目。&lt;/p&gt;
&lt;h4 id=&#34;2-分布式架构&#34;&gt;&lt;a href=&#34;#2-分布式架构&#34; class=&#34;headerlink&#34; title=&#34;2     分布式架构&#34;&gt;&lt;/a&gt;2     分布式架构&lt;/h4&gt;&lt;h5 id=&#34;2-1-架构图（简易版）&#34;&gt;&lt;a href=&#34;#2-1-架构图（简易版）&#34; class=&#34;headerlink&#34; title=&#34;2.1   架构图（简易版）&#34;&gt;&lt;/a&gt;2.1   架构图（简易版）&lt;/h5&gt;&lt;p&gt;​	分布式架构会把一个项目按照特定要求（多按照模块或功能）拆分成多个项目，每个项目分别部署到不同的服务器上。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/RPC/rpc-02.png&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;2-2-软件代码结构&#34;&gt;&lt;a href=&#34;#2-2-软件代码结构&#34; class=&#34;headerlink&#34; title=&#34;2.2   软件代码结构&#34;&gt;&lt;/a&gt;2.2   软件代码结构&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;项目1：
  --com.msb.xxx
    -- controller
    -- service
    -- mapper
项目2
  --com.msb.mmm
    -- controller
    -- service
    -- mapper
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-3-优缺点&#34;&gt;&lt;a href=&#34;#2-3-优缺点&#34; class=&#34;headerlink&#34; title=&#34;2.3   优缺点&#34;&gt;&lt;/a&gt;2.3   优缺点&lt;/h4&gt;&lt;h5 id=&#34;2-3-1-优点&#34;&gt;&lt;a href=&#34;#2-3-1-优点&#34; class=&#34;headerlink&#34; title=&#34;2.3.1    优点&#34;&gt;&lt;/a&gt;2.3.1    优点&lt;/h5&gt;&lt;p&gt;​	增大了系统可用性。减少单点故障，导致整个应用不可用。&lt;/p&gt;
&lt;p&gt;​	增加重用性。因为模块化，所以重用性更高。&lt;/p&gt;
&lt;p&gt;​	增加可扩展性。有新的模块增加新的项目即可。&lt;/p&gt;
&lt;p&gt;​	增加每个模块的负载能力。因为每个模块都是一个项目，所以每个模块的负载能力更强。&lt;/p&gt;
&lt;h5 id=&#34;2-3-2-缺点&#34;&gt;&lt;a href=&#34;#2-3-2-缺点&#34; class=&#34;headerlink&#34; title=&#34;2.3.2    缺点&#34;&gt;&lt;/a&gt;2.3.2    缺点&lt;/h5&gt;&lt;p&gt;​	成本更高。&lt;/p&gt;
&lt;p&gt;​	架构更加复杂。&lt;/p&gt;
&lt;p&gt;​	整体响应之间变长，一些业务需要多项目通信后给出结果。&lt;/p&gt;
&lt;p&gt;​	吞吐量更大。吞吐量&amp;#x3D; 请求数&amp;#x2F;秒。&lt;/p&gt;
&lt;h4 id=&#34;2-4-待解决问题&#34;&gt;&lt;a href=&#34;#2-4-待解决问题&#34; class=&#34;headerlink&#34; title=&#34;2.4   待解决问题&#34;&gt;&lt;/a&gt;2.4   待解决问题&lt;/h4&gt;&lt;p&gt;​	分布式架构中各个模块如何进行通信？&lt;/p&gt;
&lt;p&gt;​	可以使用Http协议，也可以使用RPC协议通信，也可以使用其他的通信方式。我们本阶段使用的是RPC协议，因为它比HTTP更适合项目内部通信。&lt;/p&gt;
&lt;h3 id=&#34;三、RPC简介&#34;&gt;&lt;a href=&#34;#三、RPC简介&#34; class=&#34;headerlink&#34; title=&#34;三、RPC简介&#34;&gt;&lt;/a&gt;三、RPC简介&lt;/h3&gt;&lt;h4 id=&#34;1-RFC&#34;&gt;&lt;a href=&#34;#1-RFC&#34; class=&#34;headerlink&#34; title=&#34;1     RFC&#34;&gt;&lt;/a&gt;1     RFC&lt;/h4&gt;&lt;p&gt;​	RFC(Request For Comments) 是由互联网工程任务组(IETF)发布的文件集。文件集中每个文件都有自己唯一编号，例如：rfc1831。目前RFC文件由互联网协会(Internet Society，ISOC)赞助发型。&lt;/p&gt;
&lt;p&gt;​	RPC就收集到了rfc 1831中。可以通过下面网址查看：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvcmZjMTgzMS8=&#34;&gt;https://datatracker.ietf.org/doc/rfc1831/&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-RPC&#34;&gt;&lt;a href=&#34;#2-RPC&#34; class=&#34;headerlink&#34; title=&#34;2     RPC&#34;&gt;&lt;/a&gt;2     RPC&lt;/h4&gt;&lt;p&gt;​	RPC在rfc 1831中收录 ，RPC（Remote Procedure Call） 远程过程调用协议&lt;/p&gt;
&lt;p&gt;​	RPC协议规定允许互联网中一台主机程序调用另一台主机程序，而程序员无需对这个交互过程进行编程。在RPC协议中强调当A程序调用B程序中功能或方法时，A是不知道B中方法具体实现的。&lt;/p&gt;
&lt;p&gt;​	RPC是上层协议，底层可以基于TCP协议，也可以基于HTTP协议。一般我们说RPC都是基于RPC的具体实现，如：Dubbo框架。从广义上讲只要是满足网络中进行通讯调用都统称为RPC，甚至HTTP协议都可以说是RPC的具体实现，但是具体分析看来RPC协议要比HTTP协议更加高效，基于RPC的框架功能更多。&lt;/p&gt;
&lt;p&gt;​	RPC协议是基于分布式架构而出现的，所以RPC在分布式项目中有着得天独厚的优势。&lt;/p&gt;
&lt;h4 id=&#34;3-RPC和HTTP对比&#34;&gt;&lt;a href=&#34;#3-RPC和HTTP对比&#34; class=&#34;headerlink&#34; title=&#34;3     RPC和HTTP对比&#34;&gt;&lt;/a&gt;3     RPC和HTTP对比&lt;/h4&gt;&lt;h5 id=&#34;3-1-具体实现&#34;&gt;&lt;a href=&#34;#3-1-具体实现&#34; class=&#34;headerlink&#34; title=&#34;3.1   具体实现&#34;&gt;&lt;/a&gt;3.1   具体实现&lt;/h5&gt;&lt;p&gt;​	RPC：可以基于TCP协议，也可以基于HTTP协议。&lt;/p&gt;
&lt;p&gt;​	HTTP：基于HTTP协议&lt;/p&gt;
&lt;h5 id=&#34;3-2-效率&#34;&gt;&lt;a href=&#34;#3-2-效率&#34; class=&#34;headerlink&#34; title=&#34;3.2   效率&#34;&gt;&lt;/a&gt;3.2   效率&lt;/h5&gt;&lt;p&gt;​	RPC：自定义具体实现可以减少很多无用的报文内容，使得报文体积更小。&lt;/p&gt;
&lt;p&gt;​	HTTP：如果是HTTP 1.1 报文中很多内容都是无用的。如果是HTTP2.0以后和RPC相差不大，比RPC少的可能就是一些服务治理等功能。&lt;/p&gt;
&lt;h5 id=&#34;3-3-连接方式&#34;&gt;&lt;a href=&#34;#3-3-连接方式&#34; class=&#34;headerlink&#34; title=&#34;3.3   连接方式&#34;&gt;&lt;/a&gt;3.3   连接方式&lt;/h5&gt;&lt;p&gt;​	RPC：长连接支持。&lt;/p&gt;
&lt;p&gt;​	HTTP：每次连接都是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbmV2ZXJtb3Jld2FuZy9wLzg5MDY4MzMuaHRtbA==&#34;&gt;三次握手四次挥手&lt;/span&gt;。&lt;/p&gt;
&lt;h5 id=&#34;3-4-性能&#34;&gt;&lt;a href=&#34;#3-4-性能&#34; class=&#34;headerlink&#34; title=&#34;3.4   性能&#34;&gt;&lt;/a&gt;3.4   性能&lt;/h5&gt;&lt;p&gt;​	RPC可以基于很多序列化方式。如：thrift&lt;/p&gt;
&lt;p&gt;​	HTTP 主要是通过JSON，序列化和反序列效率更低。&lt;/p&gt;
&lt;h5 id=&#34;3-5-注册中心&#34;&gt;&lt;a href=&#34;#3-5-注册中心&#34; class=&#34;headerlink&#34; title=&#34;3.5   注册中心&#34;&gt;&lt;/a&gt;3.5   注册中心&lt;/h5&gt;&lt;p&gt;​	RPC ：一般RPC框架都带有注册中心。&lt;/p&gt;
&lt;p&gt;​	HTTP：都是直连。&lt;/p&gt;
&lt;h5 id=&#34;3-6-负载均衡&#34;&gt;&lt;a href=&#34;#3-6-负载均衡&#34; class=&#34;headerlink&#34; title=&#34;3.6   负载均衡&#34;&gt;&lt;/a&gt;3.6   负载均衡&lt;/h5&gt;&lt;p&gt;​	RPC：绝大多数RPC框架都带有负载均衡测量。&lt;/p&gt;
&lt;p&gt;​	HTTP：一般都需要借助第三方工具。如：nginx&lt;/p&gt;
&lt;h5 id=&#34;3-7-综合结论&#34;&gt;&lt;a href=&#34;#3-7-综合结论&#34; class=&#34;headerlink&#34; title=&#34;3.7   综合结论&#34;&gt;&lt;/a&gt;3.7   综合结论&lt;/h5&gt;&lt;p&gt;​	RPC框架一般都带有丰富的服务治理等功能，更适合企业内部接口调用。而HTTP更适合多平台之间相互调用。&lt;/p&gt;
&lt;h3 id=&#34;四、HttpClient实现RPC&#34;&gt;&lt;a href=&#34;#四、HttpClient实现RPC&#34; class=&#34;headerlink&#34; title=&#34;四、HttpClient实现RPC&#34;&gt;&lt;/a&gt;四、HttpClient实现RPC&lt;/h3&gt;&lt;h4 id=&#34;1-HttpClient简介&#34;&gt;&lt;a href=&#34;#1-HttpClient简介&#34; class=&#34;headerlink&#34; title=&#34;1     HttpClient简介&#34;&gt;&lt;/a&gt;1     HttpClient简介&lt;/h4&gt;&lt;p&gt;​	在JDK中java.net包下提供了用户HTTP访问的基本功能，但是它缺少灵活性或许多应用所需要的功能。&lt;/p&gt;
&lt;p&gt;​	HttpClient起初是Apache Jakarta Common 的子项目。用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本。2007年成为顶级项目。&lt;/p&gt;
&lt;p&gt;​	通俗解释：HttpClient可以实现使用Java代码完成标准HTTP请求及响应。&lt;/p&gt;
&lt;h4 id=&#34;2-代码实现&#34;&gt;&lt;a href=&#34;#2-代码实现&#34; class=&#34;headerlink&#34; title=&#34;2     代码实现&#34;&gt;&lt;/a&gt;2     代码实现&lt;/h4&gt;&lt;h5 id=&#34;2-1-服务端&#34;&gt;&lt;a href=&#34;#2-1-服务端&#34; class=&#34;headerlink&#34; title=&#34;2.1   服务端&#34;&gt;&lt;/a&gt;2.1   服务端&lt;/h5&gt;&lt;p&gt;​	新建项目HttpClientServer&lt;/p&gt;
&lt;h5 id=&#34;2-1-1-新建控制器&#34;&gt;&lt;a href=&#34;#2-1-1-新建控制器&#34; class=&#34;headerlink&#34; title=&#34;2.1.1    新建控制器&#34;&gt;&lt;/a&gt;2.1.1    新建控制器&lt;/h5&gt;&lt;p&gt;com.msb.controller.DemoController&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class DemoController &amp;#123;
    @RequestMapping(&amp;quot;/demo&amp;quot;)
    @ResponseBody
    public String demo(String param)&amp;#123;
        return &amp;quot;demo&amp;quot;+param;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-1-2-新建启动器&#34;&gt;&lt;a href=&#34;#2-1-2-新建启动器&#34; class=&#34;headerlink&#34; title=&#34;2.1.2    新建启动器&#34;&gt;&lt;/a&gt;2.1.2    新建启动器&lt;/h5&gt;&lt;p&gt;​	新建启动器&lt;/p&gt;
&lt;p&gt;com.msb.HttpClientServerApplication&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
public class HttpClientServerApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
    SpringApplication.run(HttpClientServerApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-2-客户端&#34;&gt;&lt;a href=&#34;#2-2-客户端&#34; class=&#34;headerlink&#34; title=&#34;2.2   客户端&#34;&gt;&lt;/a&gt;2.2   客户端&lt;/h4&gt;&lt;p&gt;​	新建HttpClientDemo项目&lt;/p&gt;
&lt;h5 id=&#34;2-2-1-添加依赖&#34;&gt;&lt;a href=&#34;#2-2-1-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;2.2.1    添加依赖&#34;&gt;&lt;/a&gt;2.2.1    添加依赖&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.5.10&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-2-2-新建类&#34;&gt;&lt;a href=&#34;#2-2-2-新建类&#34; class=&#34;headerlink&#34; title=&#34;2.2.2    新建类&#34;&gt;&lt;/a&gt;2.2.2    新建类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.HttpClientDemo，编写主方法。&lt;/p&gt;
&lt;h6 id=&#34;2-2-2-1-使用GET方法访问&#34;&gt;&lt;a href=&#34;#2-2-2-1-使用GET方法访问&#34; class=&#34;headerlink&#34; title=&#34;2.2.2.1 使用GET方法访问&#34;&gt;&lt;/a&gt;2.2.2.1 使用GET方法访问&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
    try &amp;#123;
        //创建http工具（理解成:浏览器） 发起请求，解析响应
        CloseableHttpClient httpClient = HttpClients.createDefault();
        //请求路径
        URIBuilder uriBuilder = new URIBuilder(&amp;quot;http://localhost:8080/demo&amp;quot;);
        uriBuilder.addParameter(&amp;quot;param&amp;quot;, &amp;quot;get123&amp;quot;);
        //创建HttpGet请求对象
        HttpGet get = new HttpGet(uriBuilder.build());
        //创建响应对象
        CloseableHttpResponse response = httpClient.execute(get);
        //由于响应体是字符串，因此把HttpEntity类型转换为字符串类型，并设置字符编码
        String result = EntityUtils.toString(response.getEntity(), &amp;quot;utf-8&amp;quot;);
        //输出结果
        System.out.println(result);
        //释放资源
        response.close();
        httpClient.close();
    &amp;#125; catch (URISyntaxException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (IOException e) &amp;#123;
        e.printStackTrace();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;2-2-2-2-使用POST方式访问&#34;&gt;&lt;a href=&#34;#2-2-2-2-使用POST方式访问&#34; class=&#34;headerlink&#34; title=&#34;2.2.2.2 使用POST方式访问&#34;&gt;&lt;/a&gt;2.2.2.2 使用POST方式访问&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class HttpClientDemo &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            //创建http工具（理解成:浏览器） 发起请求，解析响应
            CloseableHttpClient httpClient = HttpClients.createDefault();
            //创建HttpPOST请求对象
            HttpPost post = new HttpPost(&amp;quot;http://localhost:8080/demo&amp;quot;);
            //所有请求参数
            List&amp;lt;NameValuePair&amp;gt; params = new ArrayList&amp;lt;&amp;gt;();
            params.add(new BasicNameValuePair(&amp;quot;param&amp;quot;,&amp;quot;123&amp;quot;));
            //创建HttpEntity接口的文本实现类的对象，放入参数并设置编码
            HttpEntity httpEntity = new UrlEncodedFormEntity(params,&amp;quot;utf-8&amp;quot;);
            //放入到HttpPost对象中
            post.setEntity(httpEntity);            
            //创建响应对象
            CloseableHttpResponse response = httpClient.execute(post);
            //由于响应体是字符串，因此把HttpEntity类型转换为字符串类型
            String result = EntityUtils.toString(response.getEntity());
            //输出结果
            System.out.println(result);
            //释放资源
            response.close();
            httpClient.close();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-Jackson用法&#34;&gt;&lt;a href=&#34;#3-Jackson用法&#34; class=&#34;headerlink&#34; title=&#34;3. Jackson用法&#34;&gt;&lt;/a&gt;3. Jackson用法&lt;/h4&gt;&lt;h5 id=&#34;3-1-把对象转换为json字符串&#34;&gt;&lt;a href=&#34;#3-1-把对象转换为json字符串&#34; class=&#34;headerlink&#34; title=&#34;3.1   把对象转换为json字符串&#34;&gt;&lt;/a&gt;3.1   把对象转换为json字符串&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;ObjectMapper objectMapper = new ObjectMapper();
People peo = new People();
objectMapper.writeValueAsString(peo);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-2-把json字符串转换为对象&#34;&gt;&lt;a href=&#34;#3-2-把json字符串转换为对象&#34; class=&#34;headerlink&#34; title=&#34;3.2   把json字符串转换为对象&#34;&gt;&lt;/a&gt;3.2   把json字符串转换为对象&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;ObjectMapper objectMapper = new ObjectMapper();
People peo = objectMapper.readValue(content, People.class);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-3-把json字符串转换为List集合&#34;&gt;&lt;a href=&#34;#3-3-把json字符串转换为List集合&#34; class=&#34;headerlink&#34; title=&#34;3.3   把json字符串转换为List集合&#34;&gt;&lt;/a&gt;3.3   把json字符串转换为List集合&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;ObjectMapper objectMapper = new ObjectMapper();
JavaType javaType = objectMapper.getTypeFactory().constructParametricType(List.class, People.class);
List&amp;lt;People&amp;gt; list = objectMapper.readValue(content, javaType);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-HttpClient请求包含JSON&#34;&gt;&lt;a href=&#34;#4-HttpClient请求包含JSON&#34; class=&#34;headerlink&#34; title=&#34;4     HttpClient请求包含JSON&#34;&gt;&lt;/a&gt;4     HttpClient请求包含JSON&lt;/h4&gt;&lt;h5 id=&#34;4-1-java代码实现&#34;&gt;&lt;a href=&#34;#4-1-java代码实现&#34; class=&#34;headerlink&#34; title=&#34;4.1   java代码实现&#34;&gt;&lt;/a&gt;4.1   java代码实现&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class HttpClientDemo &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            CloseableHttpClient httpClient = HttpClients.createDefault();
            HttpPost post = new HttpPost(&amp;quot;http://localhost:8080/demo&amp;quot;);
            HttpEntity httpEntity= null;
            String json = &amp;quot;&amp;#123;&amp;#125;&amp;quot;;
            StringEntity entity = new StringEntity(json, ContentType.APPLICATION_JSON);
            post.setEntity(entity);
            CloseableHttpResponse response = httpClient.execute(post);
            String result = EntityUtils.toString(response.getEntity());
            System.out.println(result);
            response.close();
            httpClient.close();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;

 @Test
    public void testInputSteam()&amp;#123;
        try &amp;#123;

            CloseableHttpClient httpClient = HttpClients.createDefault();

            URIBuilder uriBuilder = new URIBuilder(&amp;quot;http://localhost:8080/demo4&amp;quot;);

            HttpPost httpPost = new HttpPost(uriBuilder.build());
            //创建集合
            List&amp;lt;User&amp;gt; users = new ArrayList&amp;lt;&amp;gt;();
            users.add(new User(2,&amp;quot;李四&amp;quot;));
            users.add(new User(1,&amp;quot;张三&amp;quot;));
            //将集合对象转化成JSON字符串
            ObjectMapper objectMapper = new ObjectMapper();
            String UserJson = objectMapper.writeValueAsString(users);
            System.out.println(UserJson);
            StringEntity stringEntity = new StringEntity(UserJson, 		  ContentType.APPLICATION_JSON);
            //设置请求体
            httpPost.setEntity(stringEntity);
            CloseableHttpResponse response= httpClient.execute(httpPost);
            String result = EntityUtils.toString(response.getEntity());
            System.out.println(result);

            response.close();
            httpClient.close();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-控制器接口参数&#34;&gt;&lt;a href=&#34;#5-控制器接口参数&#34; class=&#34;headerlink&#34; title=&#34;5     控制器接口参数&#34;&gt;&lt;/a&gt;5     控制器接口参数&lt;/h4&gt;&lt;p&gt;​	@RequestBody把请求体中流数据转换为指定的对象。多用在请求参数是json数据且请求的Content-Type&amp;#x3D;”application&amp;#x2F;json”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;/demo4&amp;quot;)
@ResponseBody
public String demo4(@RequestBody List&amp;lt;People&amp;gt; list) &amp;#123;
    System.out.println(list);
    return list.toString();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-Ajax发送json参数写法&#34;&gt;&lt;a href=&#34;#6-Ajax发送json参数写法&#34; class=&#34;headerlink&#34; title=&#34;6   Ajax发送json参数写法&#34;&gt;&lt;/a&gt;6   Ajax发送json参数写法&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;var json = &amp;#39;[&amp;#123;&amp;quot;id&amp;quot;:123,&amp;quot;name&amp;quot;:&amp;quot;msb&amp;quot;&amp;#125;,&amp;#123;&amp;quot;id&amp;quot;:123,&amp;quot;name&amp;quot;:&amp;quot;mashibing&amp;quot;&amp;#125;]&amp;#39;;
 $.ajax(&amp;#123;
     url:&amp;#39;/demo5&amp;#39;,
     type:&amp;#39;post&amp;#39;,
     success:function(data)&amp;#123;
         alert(data);
         for(var i = 0 ;i&amp;lt;data.length;i++)&amp;#123;

             alert(data[i].id +&amp;quot;  &amp;quot;+data[i].name);
         &amp;#125;
     &amp;#125;,
     contentType:&amp;#39;application/json&amp;#39;,//请求体中内容类型
     dataType:&amp;#39;json&amp;#39;,//响应内容类型。
     data:json
 &amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-跨域&#34;&gt;&lt;a href=&#34;#7-跨域&#34; class=&#34;headerlink&#34; title=&#34;7     跨域&#34;&gt;&lt;/a&gt;7     跨域&lt;/h4&gt;&lt;p&gt;​	跨域：协议、ip、端口中只要有一个不同就是跨域请求。&lt;/p&gt;
&lt;p&gt;​	同源策略：浏览器默认只允许ajax访问同源(协议、ip、端口都相同)内容。&lt;/p&gt;
&lt;p&gt;​	解决同源策略：&lt;/p&gt;
&lt;p&gt;​	在控制器接口上添加@CrossOrigin。表示允许跨域。本质在响应头中添加Access-Control-Allow-Origin: *&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;var json = &amp;#39;[&amp;#123;&amp;quot;id&amp;quot;:123,&amp;quot;name&amp;quot;:&amp;quot;msb&amp;quot;&amp;#125;,&amp;#123;&amp;quot;id&amp;quot;:456,&amp;quot;name&amp;quot;:&amp;quot;mashibing&amp;quot;&amp;#125;]&amp;#39;;
 $.ajax(&amp;#123;
     url:&amp;#39;/demo5&amp;#39;,
     type:&amp;#39;post&amp;#39;,
     success:function(data)&amp;#123;
         alert(data);
         for(var i = 0 ;i&amp;lt;data.length;i++)&amp;#123;

             alert(data[i].id +&amp;quot;  &amp;quot;+data[i].name);
         &amp;#125;
     &amp;#125;,
     contentType:&amp;#39;application/json&amp;#39;,//请求体中内容类型
     dataType:&amp;#39;json&amp;#39;,//响应内容类型。
     data:json
 &amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;五、RMI实现RPC&#34;&gt;&lt;a href=&#34;#五、RMI实现RPC&#34; class=&#34;headerlink&#34; title=&#34;五、RMI实现RPC&#34;&gt;&lt;/a&gt;五、RMI实现RPC&lt;/h3&gt;&lt;h4 id=&#34;1-RMI简-介&#34;&gt;&lt;a href=&#34;#1-RMI简-介&#34; class=&#34;headerlink&#34; title=&#34;1     RMI简 介&#34;&gt;&lt;/a&gt;1     RMI简 介&lt;/h4&gt;&lt;p&gt;​	RMI(Remote Method Invocation) 远程方法调用。&lt;/p&gt;
&lt;p&gt;​	RMI是从JDK1.2推出的功能，它可以实现在一个Java应用中可以像调用本地方法一样调用另一个服务器中Java应用（JVM）中的内容。&lt;/p&gt;
&lt;p&gt;​	RMI 是Java语言的远程调用，无法实现跨语言。&lt;/p&gt;
&lt;h4 id=&#34;2-执行流程&#34;&gt;&lt;a href=&#34;#2-执行流程&#34; class=&#34;headerlink&#34; title=&#34;2     执行流程&#34;&gt;&lt;/a&gt;2     执行流程&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RPC/rpc-03.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	Registry(注册表)是放置所有服务器对象的命名空间。 每次服务端创建一个对象时，它都会使用bind()或rebind()方法注册该对象。 这些是使用称为绑定名称的唯一名称注册的。 &lt;/p&gt;
&lt;p&gt;​	要调用远程对象，客户端需要该对象的引用。即通过服务端绑定的名称从注册表中获取对象(lookup()方法)。&lt;/p&gt;
&lt;h4 id=&#34;3-API介绍&#34;&gt;&lt;a href=&#34;#3-API介绍&#34; class=&#34;headerlink&#34; title=&#34;3     API介绍&#34;&gt;&lt;/a&gt;3     API介绍&lt;/h4&gt;&lt;h5 id=&#34;3-1-Remote&#34;&gt;&lt;a href=&#34;#3-1-Remote&#34; class=&#34;headerlink&#34; title=&#34;3.1   Remote&#34;&gt;&lt;/a&gt;3.1   Remote&lt;/h5&gt;&lt;p&gt;​	java.rmi.Remote 定义了此接口为远程调用接口。如果接口被外部调用，需要继承此接口。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface Remote&amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-2-RemoteException&#34;&gt;&lt;a href=&#34;#3-2-RemoteException&#34; class=&#34;headerlink&#34; title=&#34;3.2   RemoteException&#34;&gt;&lt;/a&gt;3.2   RemoteException&lt;/h4&gt;&lt;p&gt;​	java.rmi.RemoteException&lt;/p&gt;
&lt;p&gt;​	继承了Remote接口的接口中，如果方法是允许被远程调用的，需要抛出此异常。&lt;/p&gt;
&lt;h4 id=&#34;3-3-UnicastRemoteObject&#34;&gt;&lt;a href=&#34;#3-3-UnicastRemoteObject&#34; class=&#34;headerlink&#34; title=&#34;3.3   UnicastRemoteObject&#34;&gt;&lt;/a&gt;3.3   UnicastRemoteObject&lt;/h4&gt;&lt;p&gt;​	java.rmi.server.UnicastRemoteObject&lt;/p&gt;
&lt;p&gt;​	此类实现了Remote接口和Serializable接口。&lt;/p&gt;
&lt;p&gt;​	自定义接口实现类除了实现自定义接口还需要继承此类。&lt;/p&gt;
&lt;h4 id=&#34;3-4-LocateRegistry&#34;&gt;&lt;a href=&#34;#3-4-LocateRegistry&#34; class=&#34;headerlink&#34; title=&#34;3.4   LocateRegistry&#34;&gt;&lt;/a&gt;3.4   LocateRegistry&lt;/h4&gt;&lt;p&gt;​	java.rmi.registry.LocateRegistry&lt;/p&gt;
&lt;p&gt;​	可以通过LocateRegistry在本机上创建Registry，通过特定的端口就可以访问这个Registry。&lt;/p&gt;
&lt;h4 id=&#34;3-5-Naming&#34;&gt;&lt;a href=&#34;#3-5-Naming&#34; class=&#34;headerlink&#34; title=&#34;3.5   Naming&#34;&gt;&lt;/a&gt;3.5   Naming&lt;/h4&gt;&lt;p&gt;​	java.rmi.Naming&lt;/p&gt;
&lt;p&gt;​	Naming定义了发布内容可访问RMI名称。也是通过Naming获取到指定的远程方法。&lt;/p&gt;
&lt;h4 id=&#34;4-代码实现&#34;&gt;&lt;a href=&#34;#4-代码实现&#34; class=&#34;headerlink&#34; title=&#34;4     代码实现&#34;&gt;&lt;/a&gt;4     代码实现&lt;/h4&gt;&lt;h5 id=&#34;4-1-服务端创建&#34;&gt;&lt;a href=&#34;#4-1-服务端创建&#34; class=&#34;headerlink&#34; title=&#34;4.1   服务端创建&#34;&gt;&lt;/a&gt;4.1   服务端创建&lt;/h5&gt;&lt;p&gt;​	创建RmiServer项目&lt;/p&gt;
&lt;h5 id=&#34;4-1-1-编写接口&#34;&gt;&lt;a href=&#34;#4-1-1-编写接口&#34; class=&#34;headerlink&#34; title=&#34;4.1.1    编写接口&#34;&gt;&lt;/a&gt;4.1.1    编写接口&lt;/h5&gt;&lt;p&gt;​	com.msb.service.DemoService 编写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface DemoService extends Remote &amp;#123;
    String demo(String demo) throws RemoteException;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-1-2-编写实现类&#34;&gt;&lt;a href=&#34;#4-1-2-编写实现类&#34; class=&#34;headerlink&#34; title=&#34;4.1.2    编写实现类&#34;&gt;&lt;/a&gt;4.1.2    编写实现类&lt;/h5&gt;&lt;p&gt;​	com.msb.service.impl.DemoServiceImpl 编写。&lt;/p&gt;
&lt;p&gt;​	注意：构造方法是public的。默认生成protected&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoServiceImpl extends UnicastRemoteObject implements DemoService &amp;#123;
    public DemoServiceImpl() throws RemoteException &amp;#123;
    &amp;#125;
    @Override
    public String demo(String demo) throws RemoteException &amp;#123;
        return demo+&amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-1-3-编写主方法&#34;&gt;&lt;a href=&#34;#4-1-3-编写主方法&#34; class=&#34;headerlink&#34; title=&#34;4.1.3    编写主方法&#34;&gt;&lt;/a&gt;4.1.3    编写主方法&lt;/h5&gt;&lt;p&gt;​	编写com.msb.DemoServer类，生成主方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoServiceImpl extends UnicastRemoteObject implements DemoService &amp;#123;
    public DemoServiceImpl() throws RemoteException &amp;#123;
    &amp;#125;
    @Override
    public String demo(String demo) throws RemoteException &amp;#123;
        return demo+&amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoStart &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            //1创建接口实现类
            RmiDemo rmiDemo = new RmiDemoImpl();
            //2创建注册表
            LocateRegistry.createRegistry(8099);
            //3绑定服务
            Naming.bind(&amp;quot;rmi://localhost:8099/rmiDemo&amp;quot;,rmiDemo);

            System.out.println(&amp;quot;服务器启动！&amp;quot;);
        &amp;#125; catch (RemoteException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (AlreadyBoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (MalformedURLException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-1-4-运行项目&#34;&gt;&lt;a href=&#34;#4-1-4-运行项目&#34; class=&#34;headerlink&#34; title=&#34;4.1.4    运行项目&#34;&gt;&lt;/a&gt;4.1.4    运行项目&lt;/h5&gt;&lt;p&gt;​	运行后项目，项目一直处于启动状态，表示可以远程访问此项目中的远程方法。&lt;/p&gt;
&lt;h4 id=&#34;4-2-创建客户端代码&#34;&gt;&lt;a href=&#34;#4-2-创建客户端代码&#34; class=&#34;headerlink&#34; title=&#34;4.2   创建客户端代码&#34;&gt;&lt;/a&gt;4.2   创建客户端代码&lt;/h4&gt;&lt;p&gt;​	创建项目RmiClient&lt;/p&gt;
&lt;h5 id=&#34;4-2-1-复制服务端接口&#34;&gt;&lt;a href=&#34;#4-2-1-复制服务端接口&#34; class=&#34;headerlink&#34; title=&#34;4.2.1    复制服务端接口&#34;&gt;&lt;/a&gt;4.2.1    复制服务端接口&lt;/h5&gt;&lt;p&gt;​	把服务端com.msb.service.DemoService粘贴到项目中&lt;/p&gt;
&lt;h5 id=&#34;4-2-2-创建主方法类&#34;&gt;&lt;a href=&#34;#4-2-2-创建主方法类&#34; class=&#34;headerlink&#34; title=&#34;4.2.2    创建主方法类&#34;&gt;&lt;/a&gt;4.2.2    创建主方法类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.DemoClient&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoServiceImpl extends UnicastRemoteObject implements DemoService &amp;#123;
    public DemoServiceImpl() throws RemoteException &amp;#123;
    &amp;#125;
    @Override
    public String demo(String demo) throws RemoteException &amp;#123;
        return demo+&amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;六、Zookeeper安装&#34;&gt;&lt;a href=&#34;#六、Zookeeper安装&#34; class=&#34;headerlink&#34; title=&#34;六、Zookeeper安装&#34;&gt;&lt;/a&gt;六、Zookeeper安装&lt;/h3&gt;&lt;h4 id=&#34;1-Zookeeper简介&#34;&gt;&lt;a href=&#34;#1-Zookeeper简介&#34; class=&#34;headerlink&#34; title=&#34;1     Zookeeper简介&#34;&gt;&lt;/a&gt;1     Zookeeper简介&lt;/h4&gt;&lt;p&gt;​	zookeeper分布式管理软件。常用它做注册中心（依赖zookeeper的发布&amp;#x2F;订阅功能）、配置文件中心、分布式锁配置、集群管理等。&lt;/p&gt;
&lt;p&gt;​	zookeeper一共就有两个版本。主要使用的是java语言写的。&lt;/p&gt;
&lt;h4 id=&#34;2-安装&#34;&gt;&lt;a href=&#34;#2-安装&#34; class=&#34;headerlink&#34; title=&#34;2     安装&#34;&gt;&lt;/a&gt;2     安装&lt;/h4&gt;&lt;h5 id=&#34;2-1-上传压缩文件&#34;&gt;&lt;a href=&#34;#2-1-上传压缩文件&#34; class=&#34;headerlink&#34; title=&#34;2.1   上传压缩文件&#34;&gt;&lt;/a&gt;2.1   上传压缩文件&lt;/h5&gt;&lt;p&gt;​	上传到 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中&lt;/p&gt;
&lt;h4 id=&#34;2-2-解压&#34;&gt;&lt;a href=&#34;#2-2-解压&#34; class=&#34;headerlink&#34; title=&#34;2.2   解压&#34;&gt;&lt;/a&gt;2.2   解压&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;tar zxf apache-zookeeper-3.5.5-bin.tar.gz
cp -r apache-zookeeper-3.5.5-bin ../zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-3-新建data目录&#34;&gt;&lt;a href=&#34;#2-3-新建data目录&#34; class=&#34;headerlink&#34; title=&#34;2.3   新建data目录&#34;&gt;&lt;/a&gt;2.3   新建data目录&lt;/h4&gt;&lt;p&gt;进入到zookeeper中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;cd /usr/local/zookeeper
mkdir data
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-4-修改配置文件&#34;&gt;&lt;a href=&#34;#2-4-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.4   修改配置文件&#34;&gt;&lt;/a&gt;2.4   修改配置文件&lt;/h4&gt;&lt;p&gt;进入conf中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;cd conf
cp zoo_sample.cfg zoo.cfg
vim zoo.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改dataDir为data文件夹路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;dataDir=/usr/local/zookeeper/data
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-5-启动zookeeper&#34;&gt;&lt;a href=&#34;#2-5-启动zookeeper&#34; class=&#34;headerlink&#34; title=&#34;2.5   启动zookeeper&#34;&gt;&lt;/a&gt;2.5   启动zookeeper&lt;/h4&gt;&lt;p&gt;进入bin文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;cd /usr/local/zookeeper/bin
./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过status查看启动状态。稍微有个等待时间&lt;/p&gt;
&lt;p&gt;# .&amp;#x2F;zkServer.sh status&lt;/p&gt;
&lt;h3 id=&#34;六、Zookeeper安装-Docker&#34;&gt;&lt;a href=&#34;#六、Zookeeper安装-Docker&#34; class=&#34;headerlink&#34; title=&#34;六、Zookeeper安装(Docker)&#34;&gt;&lt;/a&gt;六、Zookeeper安装(Docker)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;资料：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2luZ2tvby9wLzg3MzI0NDguaHRtbA==&#34;&gt;https://www.cnblogs.com/kingkoo/p/8732448.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2ODA4NzQ2NjY/ZnJvbT1zZWFyY2gmYW1wO3NlaWQ9MTYyOTE0NTAyNTIxMTk5OTEwNCZhbXA7c3BtX2lkX2Zyb209MzMzLjMzNy4wLjA=&#34;&gt;https://www.bilibili.com/video/av80874666?from=search&amp;amp;seid=1629145025211999104&amp;amp;spm_id_from=333.337.0.0&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-Zookeeper简介-1&#34;&gt;&lt;a href=&#34;#1-Zookeeper简介-1&#34; class=&#34;headerlink&#34; title=&#34;1     Zookeeper简介&#34;&gt;&lt;/a&gt;1     Zookeeper简介&lt;/h4&gt;&lt;p&gt;​	zookeeper分布式管理软件。常用它做注册中心（依赖zookeeper的发布&amp;#x2F;订阅功能）、配置文件中心、分布式锁配置、集群管理等。&lt;/p&gt;
&lt;p&gt;​	zookeeper一共就有两个版本。主要使用的是java语言写的。&lt;/p&gt;
&lt;h4 id=&#34;2-安装-1&#34;&gt;&lt;a href=&#34;#2-安装-1&#34; class=&#34;headerlink&#34; title=&#34;2     安装&#34;&gt;&lt;/a&gt;2     安装&lt;/h4&gt;&lt;h5 id=&#34;2-1-拉取镜像&#34;&gt;&lt;a href=&#34;#2-1-拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;2.1   拉取镜像&#34;&gt;&lt;/a&gt;2.1   拉取镜像&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自定义zookeeper目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir /root/zookeeper

mkdir /root/zookeeper/data #原因参照上面 -在docker中data其实也不用在宿主机行自己生成(目前如此)

#仓库官网查看版本或者用命令直接查
docker search zookeeper

#拉取特定版本（3.5）
docker pull zookeeper:3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-2-创建并启动容器&#34;&gt;&lt;a href=&#34;#2-2-创建并启动容器&#34; class=&#34;headerlink&#34; title=&#34;2.2 创建并启动容器&#34;&gt;&lt;/a&gt;2.2 创建并启动容器&lt;/h4&gt;&lt;p&gt;​	&lt;strong&gt;注：就目前而且 好像直接在docker中使用 zookeeper 不需要过多的配置，直接用命令创建吧，下面的解释先不看，具体原因后面补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name zookeeper -v /root/zookeeper/data:/data -p 2181:2181 --restart always zookeeper:3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--restart always&lt;/code&gt;：始终重启&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWdlb3ZiL3AvMTUzMjg3OTYuaHRtbA==&#34;&gt;https://www.cnblogs.com/ageovb/p/15328796.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、这里为啥只挂载了 data 目录–》因为当我们 没有直接的安装压缩包时，我们的就没有配置文件，所以我们直接生成，容器中就回自动生成conf文件，其中就有我们需要的 一系列配置文件，我们第一次创建的时候就可以如此，我们在进&lt;strong&gt;行配置文件的修改完成&lt;/strong&gt;后，要将所有配置文件放到我们  bash 目录中的 conf 文件中去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、第一次进入容器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在bash目录下进入bin 目录然后输入开启客户端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、第二次进入容器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zookeeper /bin/bash  -p    端口号
或
docker exec -it zookeeper zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;只看到这就可*，容器创建成功就可以直接用了，还没有出现问题。有待补充&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-3-修改配置文件&#34;&gt;&lt;a href=&#34;#2-3-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.3   修改配置文件&#34;&gt;&lt;/a&gt;2.3   修改配置文件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;配置文件来源&lt;ul&gt;
&lt;li&gt;1、可以去我们的资料中直接解压出&lt;strong&gt;conf&lt;/strong&gt;目录粘贴到我们的 zookeeper 目录中去&lt;/li&gt;
&lt;li&gt;2、可以直接进行第 3 步，完事之后直接会在容器中生成。找到conf文件，修改其中的 zoo.cfg文件，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入容器后，找到conf中的 **zoo.cfg文件，接下来就是修改 &lt;strong&gt;dataDir&lt;/strong&gt; 路径为容器中的 data文件目录。&lt;/p&gt;
&lt;p&gt;前提是要下载 vim ，因为容器中没有，命令是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;apt-get update

apt-get install -y vim

cd conf
# 没有zoo.cfg 就先拷贝 zoo_sample.cfg 两个其实是一个文件，内容相同
#cp zoo_sample.cfg zoo.cfg
vim zoo.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改dataDir为data文件夹路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;dataDir=/usr/local/zookeeper/data
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;注：docker集群搭建在solr笔记中&#34;&gt;&lt;a href=&#34;#注：docker集群搭建在solr笔记中&#34; class=&#34;headerlink&#34; title=&#34;注：docker集群搭建在solr笔记中&#34;&gt;&lt;/a&gt;注：docker集群搭建在solr笔记中&lt;/h3&gt;&lt;h3 id=&#34;七、Zookeeper客户端常用命令&#34;&gt;&lt;a href=&#34;#七、Zookeeper客户端常用命令&#34; class=&#34;headerlink&#34; title=&#34;七、Zookeeper客户端常用命令&#34;&gt;&lt;/a&gt;七、Zookeeper客户端常用命令&lt;/h3&gt;&lt;p&gt;​	进入到.&amp;#x2F;zkCli.sh命令行工具后，可以使用下面常用命令&lt;/p&gt;
&lt;h4 id=&#34;1-ls&#34;&gt;&lt;a href=&#34;#1-ls&#34; class=&#34;headerlink&#34; title=&#34;1    ls&#34;&gt;&lt;/a&gt;1    ls&lt;/h4&gt;&lt;p&gt;​	ls [-s][-R] &amp;#x2F;path&lt;/p&gt;
&lt;p&gt;​	-s 详细信息，替代老版的ls2&lt;/p&gt;
&lt;p&gt;​	-R 当前目录和子目录中内容都罗列出来&lt;/p&gt;
&lt;p&gt;​	例如：ls -R &amp;#x2F; 显示根目录下所有内容&lt;/p&gt;
&lt;h4 id=&#34;2-create&#34;&gt;&lt;a href=&#34;#2-create&#34; class=&#34;headerlink&#34; title=&#34;2     create&#34;&gt;&lt;/a&gt;2     create&lt;/h4&gt;&lt;p&gt;​	create &amp;#x2F;path [data]&lt;/p&gt;
&lt;p&gt;​	[data] 包含内容&lt;/p&gt;
&lt;p&gt;​	创建指定路径信息&lt;/p&gt;
&lt;p&gt;​	例如：create &amp;#x2F;demo 创建&amp;#x2F;demo&lt;/p&gt;
&lt;h4 id=&#34;3-get&#34;&gt;&lt;a href=&#34;#3-get&#34; class=&#34;headerlink&#34; title=&#34;3     get&#34;&gt;&lt;/a&gt;3     get&lt;/h4&gt;&lt;p&gt;​	get [-s] &amp;#x2F;path&lt;/p&gt;
&lt;p&gt;​	[-s] 详细信息&lt;/p&gt;
&lt;p&gt;​	查看指定路径下内容。&lt;/p&gt;
&lt;p&gt;​	例如： get -s &amp;#x2F;demo&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/RPC/rpc-04.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	null:存放的数据&lt;/p&gt;
&lt;p&gt;​	cZxid:创建时zxid(znode每次改变时递增的事务id)&lt;/p&gt;
&lt;p&gt;​	ctime:创建时间戳&lt;/p&gt;
&lt;p&gt;​	mZxid:最近一次更新的zxid&lt;/p&gt;
&lt;p&gt;​	mtime:最近一次更新的时间戳&lt;/p&gt;
&lt;p&gt;​	pZxid:子节点的zxid&lt;/p&gt;
&lt;p&gt;​	cversion:子节点更新次数&lt;/p&gt;
&lt;p&gt;​	dataversion:节点数据更新次数&lt;/p&gt;
&lt;p&gt;​	aclVersion:节点ACL(授权信息)的更新次数&lt;/p&gt;
&lt;p&gt;​	ephemeralOwner:如果该节点为ephemeral节点(临时，生命周期与session一样), ephemeralOwner值表示与该节点绑定的session id. 如果该节点不是ephemeral节点, ephemeralOwner值为0.&lt;/p&gt;
&lt;p&gt;​	dataLength:节点数据字节数&lt;/p&gt;
&lt;p&gt;​	numChildren:子节点数量&lt;/p&gt;
&lt;h4 id=&#34;4-set&#34;&gt;&lt;a href=&#34;#4-set&#34; class=&#34;headerlink&#34; title=&#34;4     set&#34;&gt;&lt;/a&gt;4     set&lt;/h4&gt;&lt;p&gt;​	set &amp;#x2F;path data&lt;/p&gt;
&lt;p&gt;​	设置节点内容&lt;/p&gt;
&lt;h4 id=&#34;5-delete&#34;&gt;&lt;a href=&#34;#5-delete&#34; class=&#34;headerlink&#34; title=&#34;5     delete&#34;&gt;&lt;/a&gt;5     delete&lt;/h4&gt;&lt;p&gt;​	delete &amp;#x2F;path&lt;/p&gt;
&lt;p&gt;​	删除节点&lt;/p&gt;
&lt;h3 id=&#34;八、向Zookeeper中注册内容&#34;&gt;&lt;a href=&#34;#八、向Zookeeper中注册内容&#34; class=&#34;headerlink&#34; title=&#34;八、向Zookeeper中注册内容&#34;&gt;&lt;/a&gt;八、向Zookeeper中注册内容&lt;/h3&gt;&lt;p&gt;​	新建项目ZookeeperClient&lt;/p&gt;
&lt;h4 id=&#34;1-创建-x2F-demo&#34;&gt;&lt;a href=&#34;#1-创建-x2F-demo&#34; class=&#34;headerlink&#34; title=&#34;1     创建&amp;#x2F;demo&#34;&gt;&lt;/a&gt;1     创建&amp;#x2F;demo&lt;/h4&gt;&lt;p&gt;​	使用zookeeper的客户端命令工具创建&amp;#x2F;demo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;./zkCli.sh
create /demos
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-添加依赖&#34;&gt;&lt;a href=&#34;#2-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;2     添加依赖&#34;&gt;&lt;/a&gt;2     添加依赖&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.zookeeper&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;zookeeper&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.5.5&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-编写代码&#34;&gt;&lt;a href=&#34;#3-编写代码&#34; class=&#34;headerlink&#34; title=&#34;3     编写代码&#34;&gt;&lt;/a&gt;3     编写代码&lt;/h4&gt;&lt;p&gt;​	创建类com.msb.MyApp。&lt;/p&gt;
&lt;p&gt;​	ZooDefs.Ids.OPEN_ACL_UNSAFE 表示权限。&lt;/p&gt;
&lt;p&gt;​	CreateMode.PERSISTENT_SEQUENTIAL 永久存储，文件内容编号递增。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class SendContent &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            /**
             * 创建ZooKeeper对象
             * param1: zookeeper_IP+端口号
             * param2: 访问超时设置---时间设置长一点
             * param3: 通过观察者模式发出访问回复，当连接成功后，编写成功信息
             */
            ZooKeeper zooKeeper = new ZooKeeper(
                    &amp;quot;192.168.88.128:2181&amp;quot;,
                    1000000,
                    new Watcher() &amp;#123;
                        @Override
                        public void process(WatchedEvent watchedEvent) &amp;#123;
                            System.out.println(&amp;quot;获取链接&amp;quot;);
                        &amp;#125;
                    &amp;#125;
            );

            /**
             * 发送内容  向zookeeper服务器中
             * param1: 发送的文件
             * param2: 发送的内容(要转变成Bytes[])
             * param3: 权限
             * param4: 内容的模式
             */
            String result = zooKeeper.create(
                    &amp;quot;/demos/rmi_address&amp;quot;,
                    &amp;quot;rmi:localhost:8080/demoService&amp;quot;.getBytes(),
                    ZooDefs.Ids.OPEN_ACL_UNSAFE,
                    CreateMode.PERSISTENT_SEQUENTIAL
            );

            System.out.println(&amp;quot;result  -&amp;gt; &amp;quot;+result);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (KeeperException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-查看上传数据&#34;&gt;&lt;a href=&#34;#4-查看上传数据&#34; class=&#34;headerlink&#34; title=&#34;4     查看上传数据&#34;&gt;&lt;/a&gt;4     查看上传数据&lt;/h4&gt;&lt;p&gt;​	ls -R &amp;#x2F;            :查看列表&lt;/p&gt;
&lt;p&gt;​	get  &amp;#x2F;demo&amp;#x2F;nn0000000002     :查看内容&lt;/p&gt;
&lt;h3 id=&#34;九、-从zookeeper中发现内容&#34;&gt;&lt;a href=&#34;#九、-从zookeeper中发现内容&#34; class=&#34;headerlink&#34; title=&#34;九、    从zookeeper中发现内容&#34;&gt;&lt;/a&gt;九、    从zookeeper中发现内容&lt;/h3&gt;&lt;p&gt;​	在原有项目中新建一个类，类中编写主方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
    try &amp;#123;
        ZooKeeper zookeeper = new ZooKeeper(&amp;quot;192.168.32.128:2181&amp;quot;, 10000, new Watcher() &amp;#123;
            @Override
            public void process(WatchedEvent watchedEvent) &amp;#123;
                System.out.println(&amp;quot;获取连接&amp;quot;);
            &amp;#125;
        &amp;#125;);
        //获取列表
        List&amp;lt;String&amp;gt; list = zookeeper.getChildren(&amp;quot;/demo&amp;quot;, false);
        for (String child : list) &amp;#123;
            byte[] result = zookeeper.getData(&amp;quot;/demo/&amp;quot; + child, false, null);
            System.out.println(new String(result));
        &amp;#125;
    &amp;#125; catch (IOException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (KeeperException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (InterruptedException e) &amp;#123;
        e.printStackTrace();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十、手写RPC框架&#34;&gt;&lt;a href=&#34;#十、手写RPC框架&#34; class=&#34;headerlink&#34; title=&#34;十、手写RPC框架&#34;&gt;&lt;/a&gt;十、手写RPC框架&lt;/h3&gt;&lt;p&gt;​	使用Zookeeper作为注册中心，RMI作为连接技术，手写RPC框架。&lt;/p&gt;
&lt;h4 id=&#34;1-创建项目ParentDemo&#34;&gt;&lt;a href=&#34;#1-创建项目ParentDemo&#34; class=&#34;headerlink&#34; title=&#34;1     创建项目ParentDemo&#34;&gt;&lt;/a&gt;1     创建项目ParentDemo&lt;/h4&gt;&lt;p&gt;​	创建父项目ParentDemo。&lt;/p&gt;
&lt;p&gt;​	包含3个聚合子项目。&lt;/p&gt;
&lt;p&gt;​	pojo: service中需要的实体类&lt;/p&gt;
&lt;p&gt;​	service：包含被serviceimpl和consumer依赖的接口。&lt;/p&gt;
&lt;p&gt;​	serviceimpl:provider提供的服务内容&lt;/p&gt;
&lt;p&gt;​	consumer：消费者，调用服务内容。&lt;/p&gt;
&lt;h4 id=&#34;2-在父项目中添加依赖&#34;&gt;&lt;a href=&#34;#2-在父项目中添加依赖&#34; class=&#34;headerlink&#34; title=&#34;2     在父项目中添加依赖&#34;&gt;&lt;/a&gt;2     在父项目中添加依赖&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
    try &amp;#123;
        ZooKeeper zookeeper = new ZooKeeper(&amp;quot;192.168.32.128:2181&amp;quot;, 10000, new Watcher() &amp;#123;
            @Override
            public void process(WatchedEvent watchedEvent) &amp;#123;
                System.out.println(&amp;quot;获取连接&amp;quot;);
            &amp;#125;
        &amp;#125;);
        //获取列表
        List&amp;lt;String&amp;gt; list = zookeeper.getChildren(&amp;quot;/demo&amp;quot;, false);
        for (String child : list) &amp;#123;
            byte[] result = zookeeper.getData(&amp;quot;/demo/&amp;quot; + child, false, null);
            System.out.println(new String(result));
        &amp;#125;
    &amp;#125; catch (IOException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (KeeperException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (InterruptedException e) &amp;#123;
        e.printStackTrace();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-创建service项目&#34;&gt;&lt;a href=&#34;#3-创建service项目&#34; class=&#34;headerlink&#34; title=&#34;3     创建service项目&#34;&gt;&lt;/a&gt;3     创建service项目&lt;/h4&gt;&lt;h4 id=&#34;4-创建DemoService接口&#34;&gt;&lt;a href=&#34;#4-创建DemoService接口&#34; class=&#34;headerlink&#34; title=&#34;4     创建DemoService接口&#34;&gt;&lt;/a&gt;4     创建DemoService接口&lt;/h4&gt;&lt;p&gt;​	创建com.msb.DemoService&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface DemoService extends Remote &amp;#123;
    String demo(String param) throws RemoteException;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-创建serviceimpl项目&#34;&gt;&lt;a href=&#34;#5-创建serviceimpl项目&#34; class=&#34;headerlink&#34; title=&#34;5     创建serviceimpl项目&#34;&gt;&lt;/a&gt;5     创建serviceimpl项目&lt;/h4&gt;&lt;p&gt;​	此项目编写接口具体实现，RMI服务发布和把信息发送到Zookeeper中。&lt;/p&gt;
&lt;p&gt;​	项目结构如下：&lt;/p&gt;
&lt;p&gt;​	在pom.xml中添加对service项目的依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;service&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-创建DemoServiceImpl&#34;&gt;&lt;a href=&#34;#6-创建DemoServiceImpl&#34; class=&#34;headerlink&#34; title=&#34;6     创建DemoServiceImpl&#34;&gt;&lt;/a&gt;6     创建DemoServiceImpl&lt;/h4&gt;&lt;p&gt;​	创建com.bjsxt.service.impl.DemoServiceImpl&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoServiceImpl extends UnicastRemoteObject implements DemoService &amp;#123;
    public DemoServiceImpl() throws RemoteException &amp;#123;
    &amp;#125;

    @Override
    public String demo(String param) throws RemoteException&amp;#123;
        return param+&amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-创建RmiRun&#34;&gt;&lt;a href=&#34;#7-创建RmiRun&#34; class=&#34;headerlink&#34; title=&#34;7     创建RmiRun&#34;&gt;&lt;/a&gt;7     创建RmiRun&lt;/h4&gt;&lt;p&gt;​	创建com.msb.RmiRun。实现RMI服务的发布和Zookeeper消息的发布。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class RmiRun &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            DemoService demoService = new DemoServiceImpl();
            LocateRegistry.createRegistry(8888);
            String url = &amp;quot;rmi://localhost:8888/demoService&amp;quot;;
            Naming.bind(url,demoService);
            ZooKeeper zookeeper = new ZooKeeper(&amp;quot;192.168.32.128:2181&amp;quot;, 10000, new Watcher() &amp;#123;
                @Override
                public void process(WatchedEvent watchedEvent) &amp;#123;
                    System.out.println(&amp;quot;获取连接&amp;quot;);
                &amp;#125;
            &amp;#125;);
            String content = zookeeper.create(&amp;quot;/demo/demoService&amp;quot;,url.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
            System.out.println(&amp;quot;服务发布成功。。。。&amp;quot;);
        &amp;#125; catch (AlreadyBoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (KeeperException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-创建Consumer项目&#34;&gt;&lt;a href=&#34;#8-创建Consumer项目&#34; class=&#34;headerlink&#34; title=&#34;8     创建Consumer项目&#34;&gt;&lt;/a&gt;8     创建Consumer项目&lt;/h4&gt;&lt;p&gt;​	新建consumer项目，此项目需要从zookeeper中获取rmi信息，并调用rmi服务&lt;/p&gt;
&lt;p&gt;​	在pom.xml中添加对service项目的依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;service&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;9-创建接口和实现类&#34;&gt;&lt;a href=&#34;#9-创建接口和实现类&#34; class=&#34;headerlink&#34; title=&#34;9     创建接口和实现类&#34;&gt;&lt;/a&gt;9     创建接口和实现类&lt;/h4&gt;&lt;p&gt;​	创建com.msb.service.ConsumerService接口&lt;/p&gt;
&lt;p&gt;​	创建com.msb.service.impl.ConsumerServiceImpl实现类 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface ConsumerService &amp;#123;
    String consumerService(String param);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Service
public class ConsumerServiceImpl implements ConsumerService &amp;#123;
    @Override
    public String consumerService(String param) &amp;#123;
        try &amp;#123;
            ZooKeeper zookeeper = new ZooKeeper(&amp;quot;192.168.32.128:2181&amp;quot;, 10000, new Watcher() &amp;#123;
                @Override
                public void process(WatchedEvent watchedEvent) &amp;#123;
                    System.out.println(&amp;quot;获取连接&amp;quot;);
                &amp;#125;
            &amp;#125;);
            byte[] urlByte = zookeeper.getData(&amp;quot;/demo/demoService&amp;quot;, false, null);
            DemoService demoService =(DemoService) Naming.lookup(new String(urlByte));
            String result = demoService.demo(param);
            System.out.println(result);
            return result;
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (KeeperException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (NotBoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        return null;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;10-创建控制器&#34;&gt;&lt;a href=&#34;#10-创建控制器&#34; class=&#34;headerlink&#34; title=&#34;10  创建控制器&#34;&gt;&lt;/a&gt;10  创建控制器&lt;/h4&gt;&lt;p&gt;​	创建com.msb.controller.DemoController控制器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class DemoController &amp;#123;

    @Autowired
    private ConsumerService consumerService;

    @RequestMapping(&amp;quot;/demo&amp;quot;)
    @ResponseBody
    public String demo(String param)&amp;#123;
        return consumerService.consumerService(param);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;11-创建启动器&#34;&gt;&lt;a href=&#34;#11-创建启动器&#34; class=&#34;headerlink&#34; title=&#34;11  创建启动器&#34;&gt;&lt;/a&gt;11  创建启动器&lt;/h4&gt;&lt;p&gt;​	创建com.msb.ConsumerApplication&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
public class ConsumerApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(ConsumerApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;12-测试&#34;&gt;&lt;a href=&#34;#12-测试&#34; class=&#34;headerlink&#34; title=&#34;12  测试&#34;&gt;&lt;/a&gt;12  测试&lt;/h4&gt;&lt;p&gt;​	在浏览器输入：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlbW8/cGFyYW09ZGVtbw==&#34;&gt;http://localhost:8080/demo?param=demo&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;​	观察结果是否是：demo123&lt;/p&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt;</content>
        <category term="分布式" />
        <category term="RPC" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/Distribution/RabbitMQ/</id>
        <title>RabbitMQ</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Distribution/RabbitMQ/"/>
        <content type="html">&lt;h2 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;&lt;strong&gt;主要内容&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AMQP简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RabbitMQ简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RabbitMQ原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Erlang安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装RabbitMQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RabbitMQ账户管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交换器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学习目标&#34;&gt;&lt;a href=&#34;#学习目标&#34; class=&#34;headerlink&#34; title=&#34;学习目标&#34;&gt;&lt;/a&gt;&lt;strong&gt;学习目标&lt;/strong&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;AMQP简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbmitMQ简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbitMQ原理&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Erlang安装&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安装RabbitMQ&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbitMQ账户管理&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换器&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;一、-AMQP简介&#34;&gt;&lt;a href=&#34;#一、-AMQP简介&#34; class=&#34;headerlink&#34; title=&#34;一、 AMQP简介&#34;&gt;&lt;/a&gt;一、 &lt;strong&gt;AMQP简介&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-AMQP是什么&#34;&gt;&lt;a href=&#34;#1-AMQP是什么&#34; class=&#34;headerlink&#34; title=&#34;1 AMQP是什么?&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;AMQP是什么?&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	AMQP(Advanced Message Queuing Protocol,高级消息队列协议)是进程之间传递异步消息的网络协议。&lt;/p&gt;
&lt;h3 id=&#34;2-AMQP工作过程&#34;&gt;&lt;a href=&#34;#2-AMQP工作过程&#34; class=&#34;headerlink&#34; title=&#34;2 AMQP工作过程&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;AMQP工作过程&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	发布者(Publisher)发布消息(Message),经过交换机(Exchange)，交换机根据路由规则将收到消息分发给交换机绑定的队列(Queue)，最后AMQP代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-01.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;3-队列&#34;&gt;&lt;a href=&#34;#3-队列&#34; class=&#34;headerlink&#34; title=&#34;3 队列&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;队列&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	队列是数据结构中概念。数据存储在一个队列中，数据是有顺序的，先进的先出，后进后出。其中一侧负责进数据，另一侧负责出数据。&lt;/p&gt;
&lt;p&gt;MQ（消息队列）很多功能都是基于此队列结构实现的!&lt;/p&gt;
&lt;h3 id=&#34;二、-RabbitMQ简介&#34;&gt;&lt;a href=&#34;#二、-RabbitMQ简介&#34; class=&#34;headerlink&#34; title=&#34;二、 RabbitMQ简介&#34;&gt;&lt;/a&gt;二、 &lt;strong&gt;RabbitMQ简介&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-RabbitMQ介绍&#34;&gt;&lt;a href=&#34;#1-RabbitMQ介绍&#34; class=&#34;headerlink&#34; title=&#34;1 RabbitMQ介绍&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;RabbitMQ介绍&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	RabbitMQ是由Erlang语言编写的基于AMQP的消息中间件。而消息中间件作为分布式系统重要组件之一，可以解决应用耦合，异步消息，流量削峰等问题。&lt;/p&gt;
&lt;h5 id=&#34;1-1-解决应用耦合&#34;&gt;&lt;a href=&#34;#1-1-解决应用耦合&#34; class=&#34;headerlink&#34; title=&#34;1.1 解决应用耦合&#34;&gt;&lt;/a&gt;1.1 &lt;strong&gt;解决应用耦合&lt;/strong&gt;&lt;/h5&gt;&lt;h6 id=&#34;1-1-1-不使用MQ时&#34;&gt;&lt;a href=&#34;#1-1-1-不使用MQ时&#34; class=&#34;headerlink&#34; title=&#34;1.1.1 不使用MQ时&#34;&gt;&lt;/a&gt;1.1.1 &lt;strong&gt;不使用MQ时&lt;/strong&gt;&lt;/h6&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-03.jpg&#34; class=&#34;&#34;&gt;


&lt;h6 id=&#34;1-1-2-使用MQ解决耦合&#34;&gt;&lt;a href=&#34;#1-1-2-使用MQ解决耦合&#34; class=&#34;headerlink&#34; title=&#34;1.1.2 使用MQ解决耦合&#34;&gt;&lt;/a&gt;1.1.2 &lt;strong&gt;使用MQ解决耦合&lt;/strong&gt;&lt;/h6&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-04.jpg&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-RabbitMQ适用场景&#34;&gt;&lt;a href=&#34;#2-RabbitMQ适用场景&#34; class=&#34;headerlink&#34; title=&#34;2 RabbitMQ适用场景&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;RabbitMQ适用场景&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	排队算法 : 使用消息队列特性&lt;/p&gt;
&lt;p&gt;​	秒杀活动 : 使用消息队列特性&lt;/p&gt;
&lt;p&gt;​	消息分发 : 使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	异步处理 : 使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	数据同步 : 使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	处理耗时任务 : 使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	流量销峰&lt;/p&gt;
&lt;h3 id=&#34;三、-RabbitMQ原理&#34;&gt;&lt;a href=&#34;#三、-RabbitMQ原理&#34; class=&#34;headerlink&#34; title=&#34;三、 RabbitMQ原理&#34;&gt;&lt;/a&gt;三、 &lt;strong&gt;RabbitMQ原理&lt;/strong&gt;&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-05.jpg&#34; class=&#34;&#34;&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1.Message&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;消息。消息是不具名的，它由消息头消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括：routing-key(路由键)、priority(相对于其他消息的优先权)、delivery-mode(指出消息可能持久性存储)等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;.&lt;strong&gt;Publisher&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息的生产者。也是一个向交换器发布消息的客户端应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;.&lt;strong&gt;Consumer&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息的消费者。表示一个从消息队列中取得消息的客户端应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4.Exchange&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换器。用来接收生产者发送的消息并将这些消息路由给服务器中的队列。三种常用的交换器类型1. direct(发布与订阅 完全匹配)2. fanout(广播)3. topic(主题，规则匹配)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5.Binding&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;绑定。用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;6.Queue&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息队列。用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者链接到这个队列将其取走。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;7.Routing-key&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路由键。RabbitMQ决定消息该投递到哪个队列的规则。（也可以理解为队列的名称，路由键是key，队列是value）队列通过路由键绑定到交换器。消息发送到MQ服务器时，消息将拥有一个路由键，即便是空的，RabbitMQ也会将其和绑定使用的路由键进行匹配。如果相匹配，消息将会投递到该队列。如果不匹配，消息将会进入黑洞。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;8.Connection&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;链接。指rabbit服务器和服务建立的TCP链接。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;9.Channel&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信道。1，Channel中文叫做信道，是TCP里面的虚拟链接。例如：电缆相当于TCP，信道是一个独立光纤束，一条TCP连接上创建多条信道是没有问题的。2，TCP一旦打开，就会创建AMQP信道。3，无论是发布消息、接收消息、订阅队列，这些动作都是通过信道完成的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;10.Virtual Host&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;虚拟主机。表示一批交换器，消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在链接时指定，RabbitMQ默认的vhost是**&amp;#x2F;**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;11.Borker&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表示消息队列服务器实体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;12.交换器和队列的关系&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换器是通过路由键和队列绑定在一起的，如果消息拥有的路由键跟队列和交换器的路由键匹配，那么消息就会被路由到该绑定的队列中。     也就是说，消息到队列的过程中，消息首先会经过交换器，接下来交换器在通过路由键匹配分发消息到具体的队列中。     路由键可以理解为匹配的规则。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;13.RabbitMQ为什么需要信道？为什么不是TCP直接通信？&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1. TCP的创建和销毁开销特别大。创建需要3次握手，销毁需要4次分手。2. 如果不用信道，那应用程序就会以TCP链接Rabbit，高峰时每秒成千上万条链接会造成资源巨大的浪费，而且操作系统每秒处理TCP链接数也是有限制的，必定造成性能瓶颈。3. 信道的原理是一条线程一条通道，多条线程多条通道同用一条TCP链接。一条TCP链接可以容纳无限的信道，即使每秒成千上万的请求也不会成为性能的瓶颈。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;四、-Erlang安装&#34;&gt;&lt;a href=&#34;#四、-Erlang安装&#34; class=&#34;headerlink&#34; title=&#34;四、 Erlang安装&#34;&gt;&lt;/a&gt;四、 &lt;strong&gt;Erlang安装&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	RabbitMQ是使用Erlang语言编写的，所以需要先配置Erlang&lt;/p&gt;
&lt;h4 id=&#34;1-修改主机名&#34;&gt;&lt;a href=&#34;#1-修改主机名&#34; class=&#34;headerlink&#34; title=&#34;1 修改主机名&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;修改主机名&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	RabbitMQ是通过主机名进行访问的，必须指定能访问的主机名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  vim /etc/sysconfig/network
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-06.jpg&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code&gt;  vim /etc/hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	新添加了一行，前面为服务器ip，空格后面添加计算机主机名&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-07.jpg&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-安装依赖&#34;&gt;&lt;a href=&#34;#2-安装依赖&#34; class=&#34;headerlink&#34; title=&#34;2 安装依赖&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;安装依赖&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC unixODBC-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-上传并解压&#34;&gt;&lt;a href=&#34;#3-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;3 上传并解压&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	上传otp_src_22.0.tar.gz到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp目录中，进入目录并解压。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 解压时注意，此压缩包不具有gzip属性，解压参数没有z，只有xf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  tar xf otp_src_22.0.tar.gz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-配置参数&#34;&gt;&lt;a href=&#34;#4-配置参数&#34; class=&#34;headerlink&#34; title=&#34;4 配置参数&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;配置参数&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	先新建&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;erlang文件夹，作为安装文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  mkdir -p /usr/local/erlang
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 进入文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd otp_src_22.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 配置参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-编译并安装&#34;&gt;&lt;a href=&#34;#5-编译并安装&#34; class=&#34;headerlink&#34; title=&#34;5 编译并安装&#34;&gt;&lt;/a&gt;5 &lt;strong&gt;编译并安装&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	编译 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-修改环境变量&#34;&gt;&lt;a href=&#34;#6-修改环境变量&#34; class=&#34;headerlink&#34; title=&#34;6 修改环境变量&#34;&gt;&lt;/a&gt;6 &lt;strong&gt;修改环境变量&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	修改&amp;#x2F;etc&amp;#x2F;profile文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 在文件中添加下面代码 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/erlang/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	运行文件，让修改内容生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-查看配置是否成功&#34;&gt;&lt;a href=&#34;#7-查看配置是否成功&#34; class=&#34;headerlink&#34; title=&#34;7 查看配置是否成功&#34;&gt;&lt;/a&gt;7 &lt;strong&gt;查看配置是否成功&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  erl -version
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-08.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;五、-安装RabbitMQ&#34;&gt;&lt;a href=&#34;#五、-安装RabbitMQ&#34; class=&#34;headerlink&#34; title=&#34;五、 安装RabbitMQ&#34;&gt;&lt;/a&gt;五、 &lt;strong&gt;安装RabbitMQ&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-上传并解压&#34;&gt;&lt;a href=&#34;#1-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;1 上传并解压&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	上传rabbitmq-server-generic-unix-3.7.18.tar.xz到&amp;#x2F;usr&amp;#x2F;loca&amp;#x2F;tmp中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  tar xf rabbitmq-server-generic-unix-3.7.18.tar.xz
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制到local下&#34;&gt;&lt;a href=&#34;#2-复制到local下&#34; class=&#34;headerlink&#34; title=&#34;2 复制到local下&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;复制到local下&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	复制解压文件到&amp;#x2F;usr&amp;#x2F;local下，命名为rabbitmq&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cp -r rabbitmq_server-3.7.18 /usr/local/rabbitmq
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-配置环境变量&#34;&gt;&lt;a href=&#34;#3-配置环境变量&#34; class=&#34;headerlink&#34; title=&#34;3 配置环境变量&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;配置环境变量&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	在文件中添加 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	解析文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-开启web管理插件&#34;&gt;&lt;a href=&#34;#4-开启web管理插件&#34; class=&#34;headerlink&#34; title=&#34;4 开启web管理插件&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;开启web管理插件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	进入rabbitmq&amp;#x2F;sbin目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 查看插件列表
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmq-plugins list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 生效管理插件
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmq-plugins enable rabbitmq_management
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-后台运行&#34;&gt;&lt;a href=&#34;#5-后台运行&#34; class=&#34;headerlink&#34; title=&#34;5 后台运行&#34;&gt;&lt;/a&gt;5 &lt;strong&gt;后台运行&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	启动rabbitmq。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmq-server -detached
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	停止命令，如果无法停止，使用kill -9 进程号进行关闭&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmqctl stop_app
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-查看web管理界面&#34;&gt;&lt;a href=&#34;#6-查看web管理界面&#34; class=&#34;headerlink&#34; title=&#34;6 查看web管理界面&#34;&gt;&lt;/a&gt;6 &lt;strong&gt;查看web管理界面&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	默认可以在安装rabbitmq的电脑上通过用户名：guest密码guest进行访问web管理界面&lt;/p&gt;
&lt;p&gt;​	端口号：15672（放行端口，或关闭防火墙）&lt;/p&gt;
&lt;p&gt;​	在虚拟机浏览器中输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDoxNTY3Mi8=&#34;&gt;http://localhost:15672&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;六、-RabbitMq账户管理&#34;&gt;&lt;a href=&#34;#六、-RabbitMq账户管理&#34; class=&#34;headerlink&#34; title=&#34;六、 RabbitMq账户管理&#34;&gt;&lt;/a&gt;六、 &lt;strong&gt;RabbitMq账户管理&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-创建账户&#34;&gt;&lt;a href=&#34;#1-创建账户&#34; class=&#34;headerlink&#34; title=&#34;1 创建账户&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;创建账户&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	语法：.&amp;#x2F;rabbitmqctl add_user username password&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/rabbitmq/sbin
# ./rabbitmqctl add_user mashibing mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-给用户授予管理员角色&#34;&gt;&lt;a href=&#34;#2-给用户授予管理员角色&#34; class=&#34;headerlink&#34; title=&#34;2 给用户授予管理员角色&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;给用户授予管理员角色&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	其中smallming为新建用户的用户名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmqctl set_user_tags mashibing administrator
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-给用户授权&#34;&gt;&lt;a href=&#34;#3-给用户授权&#34; class=&#34;headerlink&#34; title=&#34;3 给用户授权&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;给用户授权&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	“&amp;#x2F;” 表示虚拟机&lt;/p&gt;
&lt;p&gt;​	mashibing 表示用户名&lt;/p&gt;
&lt;p&gt;​	“.&lt;em&gt;“ “.&lt;/em&gt;“ “.*” 表示完整权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmqctl set_permissions -p &amp;quot;/&amp;quot; mashibing &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-登录&#34;&gt;&lt;a href=&#34;#4-登录&#34; class=&#34;headerlink&#34; title=&#34;4 登录&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;登录&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	使用新建账户和密码在windows中访问rabbitmq并登录 &lt;/p&gt;
&lt;p&gt;​	在浏览器地址栏输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOjE1NjcyLw==&#34;&gt;http://ip:15672/&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 用户名：mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	密码：mashibing&lt;/p&gt;
&lt;h3 id=&#34;七、-交换器（交换机）&#34;&gt;&lt;a href=&#34;#七、-交换器（交换机）&#34; class=&#34;headerlink&#34; title=&#34;七、 交换器（交换机）&#34;&gt;&lt;/a&gt;七、 &lt;strong&gt;交换器（交换机）&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	交换器负责接收客户端传递过来的消息，并转发到对应的队列中。在RabbitMQ中支持四种交换器&lt;/p&gt;
&lt;p&gt;​	1.Direct Exchange：直连交换器（默认）&lt;/p&gt;
&lt;p&gt;​	2.Fanout Exchange：扇形交换器&lt;/p&gt;
&lt;p&gt;​	3.Topic Exchange：主题交换器&lt;/p&gt;
&lt;p&gt;​	4.Header Exchange：首部交换器。&lt;/p&gt;
&lt;p&gt;​	在RabbitMq的Web管理界面中Exchanges选项卡就可以看见这四个交换器。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-09.jpg&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;1-direct交换器&#34;&gt;&lt;a href=&#34;#1-direct交换器&#34; class=&#34;headerlink&#34; title=&#34;1 direct交换器&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;direct交换器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	direct交换器是RabbitMQ默认交换器。默认会进行公平调度。所有接受者依次从消息队列中获取值。Publisher给哪个队列发消息，就一定是给哪个队列发送消息。对交换器绑定的其他队列没有任何影响。&lt;/p&gt;
&lt;p&gt;​	（代码演示）一个队列需要绑定多个消费者&lt;/p&gt;
&lt;p&gt;​	需要使用注解&amp;#x2F;API：&lt;/p&gt;
&lt;p&gt;​	org.springframework.amqp.core.Queue:队列&lt;/p&gt;
&lt;p&gt;​	AmqpTemplate：操作RabbitMQ的接口。负责发送或接收消息&lt;/p&gt;
&lt;p&gt;​	@RabbitListener(queues &amp;#x3D; “”) 注解某个方法为接收消息方法&lt;/p&gt;
&lt;h4 id=&#34;1-1-代码实现&#34;&gt;&lt;a href=&#34;#1-1-代码实现&#34; class=&#34;headerlink&#34; title=&#34;1.1 代码实现&#34;&gt;&lt;/a&gt;1.1 &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;1-1-1-新建项目Publisher&#34;&gt;&lt;a href=&#34;#1-1-1-新建项目Publisher&#34; class=&#34;headerlink&#34; title=&#34;1.1.1 新建项目Publisher&#34;&gt;&lt;/a&gt;1.1.1 &lt;strong&gt;新建项目Publisher&lt;/strong&gt;&lt;/h5&gt;&lt;h6 id=&#34;1-1-1-1-添加依赖&#34;&gt;&lt;a href=&#34;#1-1-1-1-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.1 添加依赖&#34;&gt;&lt;/a&gt;1.1.1.1 &lt;strong&gt;添加依赖&lt;/strong&gt;&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.2.2.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/parent&amp;gt;

&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-amqp&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1-1-1-2-编写配置文件&#34;&gt;&lt;a href=&#34;#1-1-1-2-编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.2 编写配置文件&#34;&gt;&lt;/a&gt;1.1.1.2 &lt;strong&gt;编写配置文件&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	新建application.yml.&lt;/p&gt;
&lt;p&gt;​	host:默认值localhost&lt;/p&gt;
&lt;p&gt;​	username默认值：guest&lt;/p&gt;
&lt;p&gt;​	password默认值：guest	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring:
  rabbitmq:
    host: 192.168.1.195
    username: mashibing
    password: mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1-1-1-3-编写配置类&#34;&gt;&lt;a href=&#34;#1-1-1-3-编写配置类&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.3 编写配置类&#34;&gt;&lt;/a&gt;1.1.1.3 &lt;strong&gt;编写配置类&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;新建com.config.RabbitmqConfig&lt;/p&gt;
&lt;p&gt;​	队列的创建只有没有这个队列的时候需要编写。以后没有这个queue()方法也可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Configuration
public class RabbitmqConfig &amp;#123;
    @Bean
    protected Queue queue()&amp;#123;
        Queue queue = new Queue(&amp;quot;myqueue&amp;quot;);
        return queue;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1-1-1-4-编写启动类&#34;&gt;&lt;a href=&#34;#1-1-1-4-编写启动类&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.4 编写启动类&#34;&gt;&lt;/a&gt;1.1.1.4 &lt;strong&gt;编写启动类&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h6 id=&#34;1-1-1-5-编写测试类&#34;&gt;&lt;a href=&#34;#1-1-1-5-编写测试类&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.5 编写测试类&#34;&gt;&lt;/a&gt;1.1.1.5 &lt;strong&gt;编写测试类&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;SpringBoot整合Spring-AMQP后包含内置对象AmqpTemplate&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootTest(classes = PublisherApplication.class)
@RunWith(SpringJUnit4ClassRunner.class)
public class MyTest &amp;#123;
    @Autowired
    private AmqpTemplate amqpTemplate;

    @Test
    public void test()&amp;#123;
        amqpTemplate.convertAndSend(&amp;quot;myqueue&amp;quot;,&amp;quot;这是内容1&amp;quot;);
        System.out.println(&amp;quot;发送成功&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-1-2-创建Consumer&#34;&gt;&lt;a href=&#34;#1-1-2-创建Consumer&#34; class=&#34;headerlink&#34; title=&#34;1.1.2 创建Consumer&#34;&gt;&lt;/a&gt;1.1.2 &lt;strong&gt;创建Consumer&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	新建项目consumer&lt;/p&gt;
&lt;h6 id=&#34;1-1-2-1-添加依赖&#34;&gt;&lt;a href=&#34;#1-1-2-1-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;1.1.2.1 添加依赖&#34;&gt;&lt;/a&gt;1.1.2.1 &lt;strong&gt;添加依赖&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	和Publisher一样&lt;/p&gt;
&lt;h6 id=&#34;1-1-2-2-编写配置文件&#34;&gt;&lt;a href=&#34;#1-1-2-2-编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;1.1.2.2 编写配置文件&#34;&gt;&lt;/a&gt;1.1.2.2 &lt;strong&gt;编写配置文件&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	和Publisher一样&lt;/p&gt;
&lt;h6 id=&#34;1-1-2-3-编写监听器方法&#34;&gt;&lt;a href=&#34;#1-1-2-3-编写监听器方法&#34; class=&#34;headerlink&#34; title=&#34;1.1.2.3 编写监听器方法&#34;&gt;&lt;/a&gt;1.1.2.3 &lt;strong&gt;编写监听器方法&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	注意：&lt;/p&gt;
&lt;p&gt;​	类上要有@Componet，项目启动时此类生效。&lt;/p&gt;
&lt;p&gt;​	@RabbitListener 监听指定队列。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Component
public class DemoReceive &amp;#123;

    @RabbitListener(queues = &amp;quot;myqueue&amp;quot;)
    public void demo(String msg)&amp;#123;
        System.out.println(&amp;quot;获取到的消息1111：&amp;quot;+msg);
    &amp;#125;

    @RabbitListener(queues = &amp;quot;myqueue&amp;quot;)
    public void demo2(String msg)&amp;#123;
        System.out.println(&amp;quot;获取到的消息2222：&amp;quot;+msg);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1-1-2-4-新建启动类&#34;&gt;&lt;a href=&#34;#1-1-2-4-新建启动类&#34; class=&#34;headerlink&#34; title=&#34;1.1.2.4 新建启动类&#34;&gt;&lt;/a&gt;1.1.2.4 &lt;strong&gt;新建启动类&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	略。启动后此项目一直处于运行状态。属于长连接。&lt;/p&gt;
&lt;h4 id=&#34;2-fanout交换器&#34;&gt;&lt;a href=&#34;#2-fanout交换器&#34; class=&#34;headerlink&#34; title=&#34;2 fanout交换器&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;fanout交换器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	扇形交换器，实际上做的事情就是广播，fanout会把消息发送给所有的绑定在当前交换器上的队列。且每个队列消息中第一个Consumer能收到消息。&lt;/p&gt;
&lt;p&gt;​	（代码演示）一个交换器需要绑定多个队列&lt;/p&gt;
&lt;p&gt;​	需要使用注解&amp;#x2F;API：&lt;/p&gt;
&lt;p&gt;​	FanoutExchange：fanout交换器&lt;/p&gt;
&lt;p&gt;​	Binding：绑定交换器和队列&lt;/p&gt;
&lt;p&gt;​	BindingBuilder：Binding的构建器&lt;/p&gt;
&lt;p&gt;​	amq.fanout:内置fanout交换器名称&lt;/p&gt;
&lt;h4 id=&#34;2-1-代码&#34;&gt;&lt;a href=&#34;#2-1-代码&#34; class=&#34;headerlink&#34; title=&#34;2.1 代码&#34;&gt;&lt;/a&gt;2.1 &lt;strong&gt;代码&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;2-1-1-Publisher&#34;&gt;&lt;a href=&#34;#2-1-1-Publisher&#34; class=&#34;headerlink&#34; title=&#34;2.1.1 Publisher&#34;&gt;&lt;/a&gt;2.1.1 &lt;strong&gt;Publisher&lt;/strong&gt;&lt;/h5&gt;&lt;h6 id=&#34;2-1-1-1-修改配置类&#34;&gt;&lt;a href=&#34;#2-1-1-1-修改配置类&#34; class=&#34;headerlink&#34; title=&#34;2.1.1.1 修改配置类&#34;&gt;&lt;/a&gt;2.1.1.1 &lt;strong&gt;修改配置类&lt;/strong&gt;&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;@Bean
protected Queue fanoutQuque1()&amp;#123;
    return new Queue(&amp;quot;fanout1&amp;quot;);
&amp;#125;

@Bean
protected Queue fanoutQuque2()&amp;#123;
    return new Queue(&amp;quot;fanout2&amp;quot;);
&amp;#125;

@Bean
protected FanoutExchange fanoutExchange()&amp;#123;
    return new FanoutExchange(&amp;quot;amq.fanout&amp;quot;);
&amp;#125;

@Bean
protected Binding fanoutBinding(Queue fanoutQuque1,FanoutExchange fanoutExchange)&amp;#123;
    return BindingBuilder.bind(fanoutQuque1).to(fanoutExchange);
&amp;#125;

@Bean
protected Binding fanoutBinding2(Queue fanoutQuque2,FanoutExchange fanoutExchange)&amp;#123;
    return BindingBuilder.bind(fanoutQuque2).to(fanoutExchange);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-1-2-编写发送方法&#34;&gt;&lt;a href=&#34;#2-1-2-编写发送方法&#34; class=&#34;headerlink&#34; title=&#34;2.1.2 编写发送方法****&#34;&gt;&lt;/a&gt;2.1.2 &lt;strong&gt;编写发送方法&lt;/strong&gt;****&lt;/h5&gt;&lt;p&gt;​	第二个参数routingKey对于fanout没有意义的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Test
public void test2()&amp;#123;
    amqpTemplate.convertAndSend(&amp;quot;amq.fanout&amp;quot;,&amp;quot;asdfadsf&amp;quot;,&amp;quot;fanout msg&amp;quot;);
    System.out.println(&amp;quot;发送成功&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-1-3-Consumer&#34;&gt;&lt;a href=&#34;#2-1-3-Consumer&#34; class=&#34;headerlink&#34; title=&#34;2.1.3 Consumer&#34;&gt;&lt;/a&gt;2.1.3 &lt;strong&gt;Consumer&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	Consumer代码和Direct完全相同。一个队列给一个监听方法即可。&lt;/p&gt;
&lt;h4 id=&#34;3-topic交换器&#34;&gt;&lt;a href=&#34;#3-topic交换器&#34; class=&#34;headerlink&#34; title=&#34;3 topic交换器&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;topic交换器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	允许在路由键（RoutingKey）中出现匹配规则。&lt;/p&gt;
&lt;p&gt;​	路由键的写法和包写法相同。com.msb.xxxx.xxx格式。&lt;/p&gt;
&lt;p&gt;​	在绑定时可以带有下面特殊符号，中间可以出现:&lt;/p&gt;
&lt;p&gt;​	* : 代表一个单词（两个.之间内容）&lt;/p&gt;
&lt;p&gt;​	# : 0个或多个字符&lt;/p&gt;
&lt;p&gt;​	接收方依然是公平调度，同一个队列中内容轮换获取值。&lt;/p&gt;
&lt;p&gt;​	需要使用注解&amp;#x2F;API：&lt;/p&gt;
&lt;p&gt;​	TopicExchange：Topic交换器&lt;/p&gt;
&lt;p&gt;​	amq.topic:内置topic交换器名称&lt;/p&gt;
&lt;h4 id=&#34;3-1-代码&#34;&gt;&lt;a href=&#34;#3-1-代码&#34; class=&#34;headerlink&#34; title=&#34;3.1 代码&#34;&gt;&lt;/a&gt;3.1 &lt;strong&gt;代码&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;3-1-1-Publisher&#34;&gt;&lt;a href=&#34;#3-1-1-Publisher&#34; class=&#34;headerlink&#34; title=&#34;3.1.1 Publisher&#34;&gt;&lt;/a&gt;3.1.1 &lt;strong&gt;Publisher&lt;/strong&gt;&lt;/h5&gt;&lt;h6 id=&#34;3-1-1-1-配置类。&#34;&gt;&lt;a href=&#34;#3-1-1-1-配置类。&#34; class=&#34;headerlink&#34; title=&#34;3.1.1.1 配置类。&#34;&gt;&lt;/a&gt;3.1.1.1 &lt;strong&gt;配置类。&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	之所以建立两个队列目的是为了演示使用Topic完成Fanout效果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Bean
protected Queue topicQueue() &amp;#123;
    return new Queue(&amp;quot;topic1&amp;quot;);
&amp;#125;

@Bean
protected Queue topicQueue2() &amp;#123;
    return new Queue(&amp;quot;topic2&amp;quot;);
&amp;#125;

@Bean
protected TopicExchange topicExchange() &amp;#123;
    return new TopicExchange(&amp;quot;amq.topic&amp;quot;);
&amp;#125;

@Bean
protected Binding topicBinding(Queue topicQueue, TopicExchange topicExchange) &amp;#123;
    return BindingBuilder.bind(topicQueue).to(topicExchange).with(&amp;quot;com.a&amp;quot;);
&amp;#125;

@Bean
protected Binding topicBinding2(Queue topicQueue2, TopicExchange topicExchange) &amp;#123;
    return BindingBuilder.bind(topicQueue2).to(topicExchange).with(&amp;quot;com.#&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;3-1-1-2-发送消息&#34;&gt;&lt;a href=&#34;#3-1-1-2-发送消息&#34; class=&#34;headerlink&#34; title=&#34;3.1.1.2 发送消息&#34;&gt;&lt;/a&gt;3.1.1.2 &lt;strong&gt;发送消息&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	第二个参数为路由键，匹配配置类中绑定时的路由规则。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Test
public void test3()&amp;#123;
    amqpTemplate.convertAndSend(&amp;quot;amq.topic&amp;quot;,&amp;quot;com.bjsxt.a.b&amp;quot;,&amp;quot;topic msg&amp;quot;);
    System.out.println(&amp;quot;发送成功&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 3.1.2 &lt;strong&gt;Consumer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	Consumer代码与以前一样，注意队列名称topic1,topic2不要写路由键名称。( queues取值)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@RabbitListener(queues = &amp;quot;topic2&amp;quot;)
public void demo10(String msg)&amp;#123;
    System.out.println(&amp;quot;topic2-2:&amp;quot;+msg);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;八、-传递对象类型参数&#34;&gt;&lt;a href=&#34;#八、-传递对象类型参数&#34; class=&#34;headerlink&#34; title=&#34;八、 传递对象类型参数&#34;&gt;&lt;/a&gt;八、 &lt;strong&gt;传递对象类型参数&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	如果消息是对象类型，此对象的类型必须进行序列化，且需要给定序列化值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class People implements Serializable 
&amp;#123;
    public static final long serialVersionUID=1L;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt;</content>
        <category term="分布式" />
        <category term="中间件" />
        <category term="RabbitMQ" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/Distribution/Solr/</id>
        <title>Solr</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Distribution/Solr/"/>
        <content type="html">&lt;h1 id=&#34;Solr&#34;&gt;&lt;a href=&#34;#Solr&#34; class=&#34;headerlink&#34; title=&#34;Solr&#34;&gt;&lt;/a&gt;Solr&lt;/h1&gt;&lt;h3 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;主要内容&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Solr简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solr搜索原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solr单机版安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可视化管理界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建核心&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dataimport&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用SolrJ操作Solr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Data for Apache Solr&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;SolrCloud&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;学习目标&#34;&gt;&lt;a href=&#34;#学习目标&#34; class=&#34;headerlink&#34; title=&#34;学习目标&#34;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Solr简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solr搜索原理&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solr单机版安装&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可视化管理界面&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新建核心&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分词&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dataimport&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用SolrJ操作Solr&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SolrCloud&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Data for Apache Solr&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;一、Solr简介&#34;&gt;&lt;a href=&#34;#一、Solr简介&#34; class=&#34;headerlink&#34; title=&#34;一、Solr简介&#34;&gt;&lt;/a&gt;一、Solr简介&lt;/h3&gt;&lt;h4 id=&#34;1-为什么使用Solr&#34;&gt;&lt;a href=&#34;#1-为什么使用Solr&#34; class=&#34;headerlink&#34; title=&#34;1.为什么使用Solr&#34;&gt;&lt;/a&gt;1.为什么使用Solr&lt;/h4&gt;&lt;p&gt;​	在海量数据下，对MySQL或Oracle进行模糊查询或条件查询的效率是很低的。而搜索功能在绝大多数项目中都是必须的，如何提升搜索效率是很多互联网项目必须要考虑的问题。&lt;/p&gt;
&lt;p&gt;​	既然使用关系型数据库进行搜索效率比较低，最直接的解决方案就是使用专用搜索工具进行搜索，从而提升搜索效率。&lt;/p&gt;
&lt;h4 id=&#34;2-常见搜索解决方案&#34;&gt;&lt;a href=&#34;#2-常见搜索解决方案&#34; class=&#34;headerlink&#34; title=&#34;2.常见搜索解决方案&#34;&gt;&lt;/a&gt;2.常见搜索解决方案&lt;/h4&gt;&lt;p&gt;​	基于Apache Lucene（全文检索工具库）实现搜索。但是Lucene的使用对于绝大多数的程序员都是“噩梦级”的。&lt;/p&gt;
&lt;p&gt;​	基于谷歌API实现搜索。&lt;/p&gt;
&lt;p&gt;​	基于百度API实现搜索。&lt;/p&gt;
&lt;h4 id=&#34;3-Solr简介&#34;&gt;&lt;a href=&#34;#3-Solr简介&#34; class=&#34;headerlink&#34; title=&#34;3.Solr简介&#34;&gt;&lt;/a&gt;3.Solr简介&lt;/h4&gt;&lt;p&gt;​	Solr是基于Apache Lucene构建的用于搜索和分析的开源解决方案。可提供可扩展索引、搜索功能、高亮显示和文字解析功能。&lt;/p&gt;
&lt;p&gt;​	Solr本质就是一个Java web 项目，且内嵌了Jetty服务器，所以安装起来非常方便。客户端操作Solr的过程和平时我们所写项目一样，就是请求Solr中控制器，处理完数据后把结果响应给客户端。&lt;/p&gt;
&lt;h4 id=&#34;4-正向索引和反向索引&#34;&gt;&lt;a href=&#34;#4-正向索引和反向索引&#34; class=&#34;headerlink&#34; title=&#34;4.正向索引和反向索引&#34;&gt;&lt;/a&gt;4.正向索引和反向索引&lt;/h4&gt;&lt;p&gt;​	只要讨论搜索就不得不提的两个概念：正向索引（forward index）和反向索引(inverted index)。&lt;/p&gt;
&lt;p&gt;​	正向索引：从文档内容到词组的过程。每次搜索的实收需要搜索所有文档，每个文档比较搜索条件和词组。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文档&lt;/th&gt;
&lt;th&gt;词组&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;I am a chinese&lt;/td&gt;
&lt;td&gt;I,am,a,chinese&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;​	反向索引：是正向索引的逆向。建立词组和文档的映射关系。通过找到词组就能找到文档内容。（和新华字典找字很像）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;词组&lt;/th&gt;
&lt;th&gt;文档&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;I,am,a,chinese&lt;/td&gt;
&lt;td&gt;I am a chinese&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;二、Solr搜索原理&#34;&gt;&lt;a href=&#34;#二、Solr搜索原理&#34; class=&#34;headerlink&#34; title=&#34;二、Solr搜索原理&#34;&gt;&lt;/a&gt;二、Solr搜索原理&lt;/h3&gt;&lt;h4 id=&#34;1-搜索原理&#34;&gt;&lt;a href=&#34;#1-搜索原理&#34; class=&#34;headerlink&#34; title=&#34;1.搜索原理&#34;&gt;&lt;/a&gt;1.搜索原理&lt;/h4&gt;&lt;p&gt;​	Solr能够提升检索效率的主要原因就是分词和索引（反向索引，通过）。&lt;/p&gt;
&lt;p&gt;​	分词：会对搜索条件&amp;#x2F;存储内容进行分词，分成日常所使用的词语。&lt;/p&gt;
&lt;p&gt;​	索引：存储在Solr中内容会按照程序员的要求来是否建立索引。如果要求建立索引会把存储内容中关键字（分词）建立索引。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-01.JPG&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;2-Solr中数据存储说明&#34;&gt;&lt;a href=&#34;#2-Solr中数据存储说明&#34; class=&#34;headerlink&#34; title=&#34;2.Solr中数据存储说明&#34;&gt;&lt;/a&gt;2.Solr中数据存储说明&lt;/h4&gt;&lt;p&gt;​	Solr为了给内容建立索引，所以Solr就必须具备数据存储能力。所有需要被搜索的内容都需要存储在Solr中，在开发中需要把数据库中数据添加到Solr中进行初始化，每次修改数据库中数据还需要同步Solr中的数据。&lt;/p&gt;
&lt;p&gt;​	Solr中数据存储是存储在Document对象中，对象中可以包含的属性和属性类型都定义在scheme.xml中。如果需要自定义属性或自定义属性类型都需要修改scheme.xml配置文件。从Solr5开始schema.xml更改名称为managed-scheme(没有扩展名)&lt;/p&gt;
&lt;h3 id=&#34;三、Solr单机版安装&#34;&gt;&lt;a href=&#34;#三、Solr单机版安装&#34; class=&#34;headerlink&#34; title=&#34;三、Solr单机版安装&#34;&gt;&lt;/a&gt;三、Solr单机版安装&lt;/h3&gt;&lt;p&gt;​	Solr是使用Java编写，所以必选先安装JDK。&lt;/p&gt;
&lt;h4 id=&#34;1-上传并解压&#34;&gt;&lt;a href=&#34;#1-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;1.上传并解压&#34;&gt;&lt;/a&gt;1.上传并解压&lt;/h4&gt;&lt;p&gt;​	上传压缩包solr-7.7.2.tgz到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中。&lt;/p&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/tmp
# tar zxf solr-7.7.2.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制到-x2F-usr-x2F-local中&#34;&gt;&lt;a href=&#34;#2-复制到-x2F-usr-x2F-local中&#34; class=&#34;headerlink&#34; title=&#34;2.复制到&amp;#x2F;usr&amp;#x2F;local中&#34;&gt;&lt;/a&gt;2.复制到&amp;#x2F;usr&amp;#x2F;local中&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# cp -r solr-7.7.2 ../solr
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-修改启动参数&#34;&gt;&lt;a href=&#34;#3-修改启动参数&#34; class=&#34;headerlink&#34; title=&#34;3.修改启动参数&#34;&gt;&lt;/a&gt;3.修改启动参数&lt;/h4&gt;&lt;p&gt;​	修改启动参数，否则启动时报警告。提示设置SOLR_ULIMIT_CHECKS&amp;#x3D;false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/bin
# vim solr.in.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-02.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;4-启动Solr&#34;&gt;&lt;a href=&#34;#4-启动Solr&#34; class=&#34;headerlink&#34; title=&#34;4.启动Solr&#34;&gt;&lt;/a&gt;4.启动Solr&lt;/h4&gt;&lt;p&gt;​	Solr内嵌Jetty，直接启动即可。监听8983端口。&lt;/p&gt;
&lt;p&gt;​	solr默认不推荐root账户启动，如果是root账户启动需要添加-force参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;四、可视化管理界面&#34;&gt;&lt;a href=&#34;#四、可视化管理界面&#34; class=&#34;headerlink&#34; title=&#34;四、可视化管理界面&#34;&gt;&lt;/a&gt;四、可视化管理界面&lt;/h3&gt;&lt;p&gt;​	在关闭防火墙的前提下，可以在windows的浏览器中访问Solr。&lt;/p&gt;
&lt;p&gt;​	输入: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguOTMuMTA6ODk4My8=&#34;&gt;http://192.168.93.10:8983&lt;/span&gt; 就可以访问Solr的可视化管理界面。&lt;/p&gt;
&lt;p&gt;​	左侧有5个菜单。分别是：&lt;/p&gt;
&lt;p&gt;​	（1）Dashboard：面板显示Solr的总体信息。&lt;/p&gt;
&lt;p&gt;​	（2）Logging：日志&lt;/p&gt;
&lt;p&gt;​	（3）Core Admin：Solr的核心。类似于数据的Database&lt;/p&gt;
&lt;p&gt;​	（4）Java Perperties：所有Java相关属性。&lt;/p&gt;
&lt;p&gt;​	（5）Thread Dump：线程相关信息。&lt;/p&gt;
&lt;p&gt;​	（6）如果有Core，将显示在此处。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-03.JPG&#34; class=&#34;&#34;&gt;

&lt;h3 id=&#34;五、新建核心&#34;&gt;&lt;a href=&#34;#五、新建核心&#34; class=&#34;headerlink&#34; title=&#34;五、新建核心&#34;&gt;&lt;/a&gt;五、新建核心&lt;/h3&gt;&lt;p&gt;​	Solr安装完成后默认是没有核心的。需要手动配置。&lt;/p&gt;
&lt;p&gt;​	需要在solr&amp;#x2F;server&amp;#x2F;solr下新建文件夹，并给定配置文件，否则无法建立。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-04.JPG&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;1-新建目录&#34;&gt;&lt;a href=&#34;#1-新建目录&#34; class=&#34;headerlink&#34; title=&#34;1.新建目录&#34;&gt;&lt;/a&gt;1.新建目录&lt;/h4&gt;&lt;p&gt;​	在&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr中新建自定义名称目录。此处示例名称为testcore。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/server/solr
# mkdir testcore
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制配置文件&#34;&gt;&lt;a href=&#34;#2-复制配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.复制配置文件&#34;&gt;&lt;/a&gt;2.复制配置文件&lt;/h4&gt;&lt;p&gt;​	在configsets里面包含了_default和sample_techproducts_configs。里面都是配置文件示例。_default属于默认配置，较纯净。sample_techproducts_configs是带有了一些配置示例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp -r configsets/_default/conf/ testcore/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-填写Core信息&#34;&gt;&lt;a href=&#34;#3-填写Core信息&#34; class=&#34;headerlink&#34; title=&#34;3.填写Core信息&#34;&gt;&lt;/a&gt;3.填写Core信息&lt;/h4&gt;&lt;p&gt;​	在可视化管理界面中Core Admin中编写信息后点击Add Core后，短暂延迟后testcore就会创建成功。schema处不用更改。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-05.JPG&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;4-出现testcore&#34;&gt;&lt;a href=&#34;#4-出现testcore&#34; class=&#34;headerlink&#34; title=&#34;4.出现testcore&#34;&gt;&lt;/a&gt;4.出现testcore&lt;/h4&gt;&lt;p&gt;​	在客户端管理界面中，选择新建的Core后，就可以按照自己项目的需求进行操作了。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-06.jpg&#34; class=&#34;&#34;&gt;

&lt;h3 id=&#34;六、分词Analysis&#34;&gt;&lt;a href=&#34;#六、分词Analysis&#34; class=&#34;headerlink&#34; title=&#34;六、分词Analysis&#34;&gt;&lt;/a&gt;六、分词Analysis&lt;/h3&gt;&lt;p&gt;​	在Solr可视化管理界面中，Core的管理菜单项中都会有Analysis。表示根据Scheme.xml(managed-schema)中配置要求进行解析。&lt;/p&gt;
&lt;p&gt;​	对英文解析就比较简单了，只要按照空格把英文语句拆分成英文单词即可。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-07.jpg&#34; class=&#34;&#34;&gt;

&lt;p&gt;​	但是如果条件是中文时，把一句话按照字进行拆分就不是很合理了。正确的方式是按照合理的词组进行拆分。&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-08.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-配置步骤&#34;&gt;&lt;a href=&#34;#1-配置步骤&#34; class=&#34;headerlink&#34; title=&#34;1.配置步骤&#34;&gt;&lt;/a&gt;1.配置步骤&lt;/h4&gt;&lt;p&gt;​	上传ik-analyzer.jar到webapps中。&lt;/p&gt;
&lt;p&gt;​	去&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWFyY2gubWF2ZW4ub3JnL3NlYXJjaD9xPWNvbS5naXRodWIubWFnZXNlJUU0JUI4JThCJUU4JUJEJUJEJUU1JUFGJUI5JUU1JUJBJTk0JUU3JTg5JTg4JUU2JTlDJUFDJUU3JTlBJTg0aWstYW5hbHl6ZXIlRTMlODAlODIlRTUlOEYlQUYlRTQlQkIlQTUlRTUlOUMlQTglRTglQjUlODQlRTYlOTYlOTklRTQlQjglQUQlRTclOUIlQjQlRTYlOEUlQTUlRTglOEUlQjclRTUlOEYlOTYlRTMlODAlODI=&#34;&gt;https://search.maven.org/search?q=com.github.magese下载对应版本的ik-analyzer。可以在资料中直接获取。&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;1-1上传jar到指定目录&#34;&gt;&lt;a href=&#34;#1-1上传jar到指定目录&#34; class=&#34;headerlink&#34; title=&#34;1.1上传jar到指定目录&#34;&gt;&lt;/a&gt;1.1上传jar到指定目录&lt;/h5&gt;&lt;p&gt;​	上传ik-analyzer-7.7.0.jar到&lt;/p&gt;
&lt;p&gt;​	&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr-webapp&amp;#x2F;webapp&amp;#x2F;WEB-INF&amp;#x2F;lib目录中&lt;/p&gt;
&lt;h5 id=&#34;1-2修改配置文件&#34;&gt;&lt;a href=&#34;#1-2修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;1.2修改配置文件&#34;&gt;&lt;/a&gt;1.2修改配置文件&lt;/h5&gt;&lt;p&gt;​	修改&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr&amp;#x2F;testcore&amp;#x2F;conf&amp;#x2F;managed-schema&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;vim /usr/local/solr/server/solr/testcore/conf/managed-schema
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	添加下面内容。&lt;/p&gt;
&lt;p&gt;​	排版：Esc 退出编辑状态下：gg&amp;#x3D;G&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;field name=&amp;quot;myfield&amp;quot; type=&amp;quot;text_ik&amp;quot; indexed=&amp;quot;true&amp;quot; stored=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;fieldType name=&amp;quot;text_ik&amp;quot; class=&amp;quot;solr.TextField&amp;quot;&amp;gt;
            &amp;lt;analyzer type=&amp;quot;index&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;false&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
            &amp;lt;analyzer type=&amp;quot;query&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;true&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
    &amp;lt;/fieldType&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-3重启&#34;&gt;&lt;a href=&#34;#1-3重启&#34; class=&#34;headerlink&#34; title=&#34;1.3重启&#34;&gt;&lt;/a&gt;1.3重启&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/bin
# ./solr stop -all
# ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-4验证&#34;&gt;&lt;a href=&#34;#1-4验证&#34; class=&#34;headerlink&#34; title=&#34;1.4验证&#34;&gt;&lt;/a&gt;1.4验证&lt;/h5&gt;&lt;p&gt;​	可以在可视化管理界面中找到myfield属性进行验证。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-09.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;2-managed-schema配置说明&#34;&gt;&lt;a href=&#34;#2-managed-schema配置说明&#34; class=&#34;headerlink&#34; title=&#34;2.managed-schema配置说明&#34;&gt;&lt;/a&gt;2.managed-schema配置说明&lt;/h4&gt;&lt;h5 id=&#34;2-1-lt-fieldType-x2F-gt&#34;&gt;&lt;a href=&#34;#2-1-lt-fieldType-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&lt;/h5&gt;&lt;p&gt;​	表示定义一个属性类型。在Solr中属性类型都是自定义的。在上面配置中name&amp;#x3D;”text_ik”为自定义类型。当某个属性取值为text_ik时IK Analyzer才能生效。&lt;/p&gt;
&lt;h5 id=&#34;2-2-lt-field-x2F-gt&#34;&gt;&lt;a href=&#34;#2-2-lt-field-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;2.2&amp;lt; field&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;2.2&amp;lt; field&amp;#x2F;&amp;gt;&lt;/h5&gt;&lt;p&gt;​	表示向Document中添加一个属性。&lt;/p&gt;
&lt;p&gt;​	常用属性：&lt;/p&gt;
&lt;p&gt;​		name: 属性名&lt;/p&gt;
&lt;p&gt;​		type:属性类型。所有类型都是solr使用&lt;fieldType&gt;配置的&lt;/p&gt;
&lt;p&gt;​		indexed: 是否建立索引&lt;/p&gt;
&lt;p&gt;​		stored: solr是否把该属性值响应给搜索用户。&lt;/p&gt;
&lt;p&gt;​		required：该属性是否是必须的。默认id是必须的。&lt;/p&gt;
&lt;p&gt;​		multiValued：如果为true，表示该属性为复合属性，此属性中包含了多个其他的属性。常用在多个列作为搜索条件时，把这些列定义定义成一个新的复合属性，通过搜索一个复合属性就可以实现搜索多个列。当设置为true时与&amp;lt; copyField source&amp;#x3D;”” dest&amp;#x3D;””&amp;#x2F;&amp;gt;结合使用&lt;/p&gt;
&lt;h5 id=&#34;2-3-lt-uniqueKey-gt&#34;&gt;&lt;a href=&#34;#2-3-lt-uniqueKey-gt&#34; class=&#34;headerlink&#34; title=&#34;2.3&amp;lt; uniqueKey&amp;gt;&#34;&gt;&lt;/a&gt;2.3&amp;lt; uniqueKey&amp;gt;&lt;/h5&gt;&lt;p&gt;​	唯一主键，Solr中默认定义id属性为唯一主键。ID的值是不允许重复的。&lt;/p&gt;
&lt;h5 id=&#34;2-4-lt-dynamicField-gt&#34;&gt;&lt;a href=&#34;#2-4-lt-dynamicField-gt&#34; class=&#34;headerlink&#34; title=&#34;2.4&amp;lt; dynamicField&amp;gt;&#34;&gt;&lt;/a&gt;2.4&amp;lt; dynamicField&amp;gt;&lt;/h5&gt;&lt;p&gt;​	名称中允许*进行通配。代表满足特定名称要求的一组属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; msb_java    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	msb_bigdata&lt;/p&gt;
&lt;p&gt;​	msb_UI&lt;/p&gt;
&lt;p&gt;​        msb_*&lt;/p&gt;
&lt;h3 id=&#34;七、Dataimport&#34;&gt;&lt;a href=&#34;#七、Dataimport&#34; class=&#34;headerlink&#34; title=&#34;七、Dataimport&#34;&gt;&lt;/a&gt;七、Dataimport&lt;/h3&gt;&lt;p&gt;​	可以使用Solr自带的Dataimport功能把数据库中数据快速导入到solr中.&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;必须保证managed-schema和数据库中表的列对应。，添加配置&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-修改配置文件&#34;&gt;&lt;a href=&#34;#1-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;1.修改配置文件&#34;&gt;&lt;/a&gt;1.修改配置文件&lt;/h4&gt;&lt;p&gt;​	修改solrconfig.xml，添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;!-- 配置数据导入的处理器 --&amp;gt;
  &amp;lt;requestHandler name=&amp;quot;/dataimport&amp;quot; class=&amp;quot;org.apache.solr.handler.dataimport.DataImportHandler&amp;quot;&amp;gt;
    &amp;lt;lst name=&amp;quot;defaults&amp;quot;&amp;gt;
      &amp;lt;!--  加载data-config.xml  --&amp;gt;
      &amp;lt;str name=&amp;quot;config&amp;quot;&amp;gt;data-config.xml&amp;lt;/str&amp;gt;
     &amp;lt;/lst&amp;gt;
  &amp;lt;/requestHandler&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-新建data-config-xml&#34;&gt;&lt;a href=&#34;#2-新建data-config-xml&#34; class=&#34;headerlink&#34; title=&#34;2.新建data-config.xml&#34;&gt;&lt;/a&gt;2.新建data-config.xml&lt;/h4&gt;&lt;p&gt;​	和solrconfig.xml同一目录下新建data-config.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;dataConfig&amp;gt;
        &amp;lt;dataSource type=&amp;quot;JdbcDataSource&amp;quot;   
                driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot;   
                url=&amp;quot;jdbc:mysql://192.168.1.135:3306/mytest&amp;quot;   
                user=&amp;quot;root&amp;quot;   
                password=&amp;quot;root&amp;quot;/&amp;gt;
        &amp;lt;document&amp;gt;
            &amp;lt;entity name=&amp;quot;product&amp;quot; query=&amp;quot;SELECT id,name,price from t_product&amp;quot;&amp;gt;
                &amp;lt;!-- 
                 实现数据库的列和索引库的字段的映射
                 column 指定数据库的列表
                 name  指定索引库的字段名字，必须和schema.xml中定义的一样
                 --&amp;gt;
                 &amp;lt;field column=&amp;quot;id&amp;quot; name=&amp;quot;id&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;price&amp;quot; name=&amp;quot;price&amp;quot;/&amp;gt;
            &amp;lt;/entity&amp;gt;
         &amp;lt;/document&amp;gt;
&amp;lt;/dataConfig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-添加jar&#34;&gt;&lt;a href=&#34;#3-添加jar&#34; class=&#34;headerlink&#34; title=&#34;3.添加jar&#34;&gt;&lt;/a&gt;3.添加jar&lt;/h4&gt;&lt;p&gt;​	向solr-webapp中添加三个jar。在dist中两个还有一个数据库驱动。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-10.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;4-操作&#34;&gt;&lt;a href=&#34;#4-操作&#34; class=&#34;headerlink&#34; title=&#34;4.操作&#34;&gt;&lt;/a&gt;4.操作&lt;/h4&gt;&lt;p&gt;​	重启solr后，在可视化管理页面中进行数据导入。&lt;/p&gt;
&lt;p&gt;​	注意：&lt;/p&gt;
&lt;p&gt;​	点击导入按钮后，要记得点击刷新按钮。&lt;/p&gt;
&lt;h3 id=&#34;八、菜单项目Documents使用办法&#34;&gt;&lt;a href=&#34;#八、菜单项目Documents使用办法&#34; class=&#34;headerlink&#34; title=&#34;八、菜单项目Documents使用办法&#34;&gt;&lt;/a&gt;八、菜单项目Documents使用办法&lt;/h3&gt;&lt;p&gt;​	以XML格式举例&lt;/p&gt;
&lt;h4 id=&#34;1-新增-x2F-修改&#34;&gt;&lt;a href=&#34;#1-新增-x2F-修改&#34; class=&#34;headerlink&#34; title=&#34;1.新增&amp;#x2F;修改&#34;&gt;&lt;/a&gt;1.新增&amp;#x2F;修改&lt;/h4&gt;&lt;p&gt;​	当id不存在时新增，当id存在修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;doc&amp;gt;
&amp;lt;field name=&amp;quot;id&amp;quot;&amp;gt;8&amp;lt;/field&amp;gt;
&amp;lt;field name=&amp;quot;name&amp;quot;&amp;gt;明天更大卖&amp;lt;/field&amp;gt;
&amp;lt;field name=&amp;quot;price&amp;quot;&amp;gt;98&amp;lt;/field&amp;gt;
&amp;lt;/doc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-删除&#34;&gt;&lt;a href=&#34;#2-删除&#34; class=&#34;headerlink&#34; title=&#34;2.删除&#34;&gt;&lt;/a&gt;2.删除&lt;/h4&gt;&lt;h5 id=&#34;2-1根据主键删除&#34;&gt;&lt;a href=&#34;#2-1根据主键删除&#34; class=&#34;headerlink&#34; title=&#34;2.1根据主键删除&#34;&gt;&lt;/a&gt;2.1根据主键删除&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;delete&amp;gt;
    &amp;lt;id&amp;gt;8&amp;lt;/id&amp;gt;
&amp;lt;/delete&amp;gt;
&amp;lt;commit/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-2根据条件删除&#34;&gt;&lt;a href=&#34;#2-2根据条件删除&#34; class=&#34;headerlink&#34; title=&#34;2.2根据条件删除&#34;&gt;&lt;/a&gt;2.2根据条件删除&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;delete&amp;gt;
    &amp;lt;query&amp;gt;*:*&amp;lt;/query&amp;gt;
&amp;lt;/delete&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-solr可视化界面使用（QUERY）&#34;&gt;&lt;a href=&#34;#3-solr可视化界面使用（QUERY）&#34; class=&#34;headerlink&#34; title=&#34;3.solr可视化界面使用（QUERY）&#34;&gt;&lt;/a&gt;3.solr可视化界面使用（QUERY）&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645693120964.png&#34; alt=&#34;1645693120964&#34;&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;q：&lt;/strong&gt;query，等于。格式  ——&amp;gt; parameter&amp;#x2F;columns : value	&lt;strong&gt;具有分词时，相当于模糊查询–like&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;fq：&lt;/strong&gt;【在 q 的情况下再加条件】（要有分词功能）注意这里的keyword是用来检索的字段，他包含name、address、gender、expert_skill，这几个属性，所以我搜索“海”能够查询出来有海字的记录。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;sort：&lt;/strong&gt;排序 。 parameter&amp;#x2F;columns    desc逆序&amp;#x2F;asc&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;start,rows：&lt;/strong&gt;从查询结果的start开始，显示到rows结束【下标】&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;fl：&lt;/strong&gt;想显示的属性。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;df：&lt;/strong&gt;不想显示的属性。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;wt：&lt;/strong&gt;返回值类型&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;hl：&lt;/strong&gt;高亮&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    *  hl.fl						 value
    *  hl.simple.pre        &amp;lt;font color=&amp;#39;red&amp;#39;&amp;gt;
    *  hl.simple.post     &amp;lt;/font&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;h3 id=&#34;九、使用SolrJ操作Solr&#34;&gt;&lt;a href=&#34;#九、使用SolrJ操作Solr&#34; class=&#34;headerlink&#34; title=&#34;九、使用SolrJ操作Solr&#34;&gt;&lt;/a&gt;九、使用SolrJ操作Solr&lt;/h3&gt;&lt;p&gt;​	SolrJ是Solr提供的Java客户端API。通过SolrJ可以实现Java程序对Solr中数据的操作。&lt;/p&gt;
&lt;p&gt;​	大前提：添加SolrJ依赖。依赖版本和Solr版本严格对应&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.solr&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;solr-solrj&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;7.7.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-新增-x2F-修改实现&#34;&gt;&lt;a href=&#34;#1-新增-x2F-修改实现&#34; class=&#34;headerlink&#34; title=&#34;1.新增&amp;#x2F;修改实现&#34;&gt;&lt;/a&gt;1.新增&amp;#x2F;修改实现&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;String url = &amp;quot;http://192.168.93.10:8983/solr/testcore&amp;quot;;
HttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();
SolrInputDocument inputDocument = new SolrInputDocument();
inputDocument.addField(&amp;quot;id&amp;quot;,&amp;quot;3&amp;quot;);
inputDocument.addField(&amp;quot;myfield&amp;quot;,&amp;quot;myfield3&amp;quot;);
solrClient.add(inputDocument);
solrClient.commit();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;使用solrj进行索引的添加&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每个索引的添加必须要ID&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;添加key值要和schema.xml文件内的field域保持一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加数据后一定要提交数据，不然是不存在数据的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接Solr的对象需要连接到项目名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个document是一组Json数据对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-删除实现&#34;&gt;&lt;a href=&#34;#2-删除实现&#34; class=&#34;headerlink&#34; title=&#34;2.删除实现&#34;&gt;&lt;/a&gt;2.删除实现&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;String url = &amp;quot;http://192.168.93.10:8983/solr/testcore&amp;quot;;
HttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();
solrClient.deleteById(&amp;quot;3&amp;quot;);
solrClient.commit();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;删除支持两种删除方式&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1.根据ID&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;2.执行查询删除&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询删除的格式：查询的域:值&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-查询实现&#34;&gt;&lt;a href=&#34;#3-查询实现&#34; class=&#34;headerlink&#34; title=&#34;3.查询实现&#34;&gt;&lt;/a&gt;3.查询实现&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public void testQuery()&amp;#123;
    try &amp;#123;
        String url = &amp;quot;http://192.168.93.10:8983/solr/testcore&amp;quot;;
        HttpSolrClient solrClient = new HttpSolrClient.Builder(url).build();

        //封装了所有查询条件
        SolrQuery params = new SolrQuery();
        params.setQuery(&amp;quot;name:丰富的&amp;quot;);
        //排序
        params.setSort(&amp;quot;price&amp;quot;, SolrQuery.ORDER.desc);
        //分页
        params.setStart(0);
 params.setRows(1);
        //高亮
        params.setHighlight(true);
        params.addHighlightField(&amp;quot;name&amp;quot;);
        params.setHighlightSimplePre(&amp;quot;&amp;lt;span&amp;gt;&amp;quot;);
        params.setHighlightSimplePost(&amp;quot;&amp;lt;/span&amp;gt;&amp;quot;);

        QueryResponse response = solrClient.query(params);
        SolrDocumentList list = response.getResults();
        System.out.println(&amp;quot;总条数：&amp;quot;+list.getNumFound());

        //高亮数据
        Map&amp;lt;String, Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&amp;gt; highlighting = response.getHighlighting();

        for(SolrDocument doc :list)&amp;#123;
            System.out.println(doc.get(&amp;quot;id&amp;quot;));
            Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; map = highlighting.get(doc.get(&amp;quot;id&amp;quot;));
            List&amp;lt;String&amp;gt; HLList = map.get(&amp;quot;name&amp;quot;);
            if(HLList!=null&amp;amp;&amp;amp;HLList.size()&amp;gt;0)&amp;#123;//显示高亮数据
                System.out.println(HLList.get(0));
            &amp;#125;else&amp;#123;
                System.out.println(doc.get(&amp;quot;name&amp;quot;));
            &amp;#125;
            System.out.println(doc.get(&amp;quot;price&amp;quot;));
            System.out.println(&amp;quot;===================&amp;quot;);
        &amp;#125;
        solrClient.close();
    &amp;#125; catch (SolrServerException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (IOException e) &amp;#123;
        e.printStackTrace();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用到的对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.SolrQuery查询对象&lt;ul&gt;
&lt;li&gt;1.setQuery()：设置查询的关键字&lt;br&gt;  2.set（）:设置查询的域&lt;br&gt;  3.setStart():设置开始&lt;br&gt;  4.setRows（）：设置结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2.QueryResponse：响应结果集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.getNumFound():返回查询到的数量&lt;br&gt;  2.getResults（）；返回封装的list集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.SolrDocumentList：结果集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.get():获取指定域的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;十、Spring-Data-for-Apache-Solr&#34;&gt;&lt;a href=&#34;#十、Spring-Data-for-Apache-Solr&#34; class=&#34;headerlink&#34; title=&#34;十、Spring Data for Apache Solr&#34;&gt;&lt;/a&gt;十、Spring Data for Apache Solr&lt;/h3&gt;&lt;h4 id=&#34;1-Spring-Data简介&#34;&gt;&lt;a href=&#34;#1-Spring-Data简介&#34; class=&#34;headerlink&#34; title=&#34;1.Spring Data简介&#34;&gt;&lt;/a&gt;1.Spring Data简介&lt;/h4&gt;&lt;p&gt;​	Spring Data 是Spring的顶级项目。里面包含了N多个二级子项目，每个子项目对应一种技术或工具。其目的为了让数据访问更加简单，更加方便的和Spring进行整合。&lt;/p&gt;
&lt;p&gt;​	Spring Data 项目如果单独使用是还需要配置XML配置文件的，当和Spring Boot整合后使用起来非常方便。spring-boot-starter-data-xx就是对应的启动器。&lt;/p&gt;
&lt;h4 id=&#34;2-实现步骤&#34;&gt;&lt;a href=&#34;#2-实现步骤&#34; class=&#34;headerlink&#34; title=&#34;2.实现步骤&#34;&gt;&lt;/a&gt;2.实现步骤&lt;/h4&gt;&lt;h5 id=&#34;2-1添加依赖&#34;&gt;&lt;a href=&#34;#2-1添加依赖&#34; class=&#34;headerlink&#34; title=&#34;2.1添加依赖&#34;&gt;&lt;/a&gt;2.1添加依赖&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-solr&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-2编写配置文件&#34;&gt;&lt;a href=&#34;#2-2编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.2编写配置文件&#34;&gt;&lt;/a&gt;2.2编写配置文件&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;spring:
  data:
    solr:
      host: http://192.168.9.132:8080/solr
      # zk-host: 192.168.9.132:2181,192.168.9.132:2182,192.168.9.132:2183
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-3编写测试类&#34;&gt;&lt;a href=&#34;#2-3编写测试类&#34; class=&#34;headerlink&#34; title=&#34;2.3编写测试类&#34;&gt;&lt;/a&gt;2.3编写测试类&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = MyApplication.class)
public class MyTest &amp;#123;
    @Autowired
    private SolrTemplate solrTemplate;

    public void testInsert()&amp;#123;
        SolrInputDocument doc = new SolrInputDocument();
        doc.setField(&amp;quot;id&amp;quot;,&amp;quot;002&amp;quot;);
        doc.setField(&amp;quot;item_title&amp;quot;,&amp;quot;这是一个手机3&amp;quot;);
        UpdateResponse ur = solrTemplate.saveBean(&amp;quot;collection1&amp;quot;, doc);
        if(ur.getStatus()==0)&amp;#123;
            System.out.println(&amp;quot;成功&amp;quot;);
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;失败&amp;quot;);
        &amp;#125;
        solrTemplate.commit(&amp;quot;collection1&amp;quot;);
    &amp;#125;

    public void testDelete()&amp;#123;
        UpdateResponse ur = solrTemplate.deleteByIds(&amp;quot;collection1&amp;quot;, &amp;quot;change.me&amp;quot;);
        if(ur.getStatus()==0)&amp;#123;
            System.out.println(&amp;quot;成功&amp;quot;);
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;失败&amp;quot;);
        &amp;#125;
        solrTemplate.commit(&amp;quot;collection1&amp;quot;);
    &amp;#125;


    public void query()&amp;#123;
        SimpleQuery query = new SimpleQuery();
        Criteria c = new Criteria(&amp;quot;item_keywords&amp;quot;);
        c.is(&amp;quot;手机&amp;quot;);
        query.addCriteria(c);
        query.setOffset(1L);
        query.setRows(1);
        ScoredPage&amp;lt;DemoPojo&amp;gt; sp = solrTemplate.queryForPage(&amp;quot;collection1&amp;quot;, query, DemoPojo.class);
        System.out.println(sp.getContent());
    &amp;#125;

    @Test
    public void queryHL()&amp;#123;

        List&amp;lt;DemoPojo&amp;gt; listResult = new ArrayList&amp;lt;&amp;gt;();
        SimpleHighlightQuery query = new SimpleHighlightQuery();
        //设置查询条件
        Criteria c = new Criteria(&amp;quot;item_keywords&amp;quot;);
        c.is(&amp;quot;手机&amp;quot;);
        query.addCriteria(c);
        //分页
        query.setOffset(0L);
        query.setRows(10);
        //排序
        Sort sort = new Sort(Sort.Direction.DESC,&amp;quot;id&amp;quot;);
        query.addSort(sort);
        //高亮设置
        HighlightOptions hlo = new HighlightOptions();
        hlo.addField(&amp;quot;item_title item_sell_point&amp;quot;);
        hlo.setSimplePrefix(&amp;quot;&amp;lt;span style=&amp;#39;color:red;&amp;#39;&amp;gt;&amp;quot;);
        hlo.setSimplePostfix(&amp;quot;&amp;lt;/span&amp;gt;&amp;quot;);
        query.setHighlightOptions(hlo);
        HighlightPage&amp;lt;DemoPojo&amp;gt; hl = solrTemplate.queryForHighlightPage(&amp;quot;collection1&amp;quot;, query, DemoPojo.class);
//        System.out.println(hl.getContent());
        List&amp;lt;HighlightEntry&amp;lt;DemoPojo&amp;gt;&amp;gt; highlighted = hl.getHighlighted();
        for(HighlightEntry&amp;lt;DemoPojo&amp;gt; hle : highlighted)&amp;#123;
            List&amp;lt;HighlightEntry.Highlight&amp;gt; list = hle.getHighlights();
            DemoPojo dp = hle.getEntity();
            for (HighlightEntry.Highlight h : list)&amp;#123;//一个对象里面可能多个属性是高亮属性
                if(h.getField().getName().equals(&amp;quot;item_title&amp;quot;))&amp;#123;
                    dp.setItem_title( h.getSnipplets().get(0));
                &amp;#125;
            &amp;#125;
            listResult.add(dp);
        &amp;#125;
        System.out.println(listResult);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十一-使用zookeepr管理solr集群&#34;&gt;&lt;a href=&#34;#十一-使用zookeepr管理solr集群&#34; class=&#34;headerlink&#34; title=&#34;十一. 使用zookeepr管理solr集群&#34;&gt;&lt;/a&gt;十一. 使用zookeepr管理solr集群&lt;/h3&gt;&lt;p&gt;1.上传压缩包到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp 下 并解压。&lt;/p&gt;
&lt;p&gt;2.在 &amp;#x2F;usr&amp;#x2F;local下新建文件夹 zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /usr/local/zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.把解压的所有文件复制到zookeeper下， 并命名为zk1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp -r /usr/local/temp/zookeeper-3.4.8 /usr/local/zookeeper/zk1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.在zk1下新建文件夹 data&lt;/p&gt;
&lt;p&gt;5.在data下新建文件 myid, 里面写上 1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim myid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6.进入到zk1&amp;#x2F;conf 下 把 zoo_sample.cfg 复制一份叫做 zoo.cfg&lt;/p&gt;
&lt;p&gt;7.编辑 zoo.cfg 内容，设置 dataDIR为 data文件夹， 并在文件最下面添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server.1=192.168.93.10:2688:3888
server.2=192.168.93.10:2689:3889
server.3=192.168.93.10:2690:3890
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 7.1 server.1中的1是myid的内容&lt;/p&gt;
&lt;p&gt; 7.2 2688 2689 2690 是 zookeeper内部端口&lt;/p&gt;
&lt;p&gt; 7.3 3888 3889 3890 是 leader端口&lt;/p&gt;
&lt;p&gt;8.把zk1复制两份，分部叫做 zk2  zk3  并修改 myid 的值为 2，3 修改zoo.cfg中 dataDIR和clientPort&lt;/p&gt;
&lt;p&gt;9.启动三个zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;10.查看状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十一-使用zookeepr管理solr集群-Dokcer&#34;&gt;&lt;a href=&#34;#十一-使用zookeepr管理solr集群-Dokcer&#34; class=&#34;headerlink&#34; title=&#34;十一. 使用zookeepr管理solr集群(Dokcer )&#34;&gt;&lt;/a&gt;十一. 使用zookeepr管理solr集群(Dokcer )&lt;/h3&gt;&lt;h4 id=&#34;1、准备docker-compose-yml文件&#34;&gt;&lt;a href=&#34;#1、准备docker-compose-yml文件&#34; class=&#34;headerlink&#34; title=&#34;1、准备docker-compose.yml文件&#34;&gt;&lt;/a&gt;&lt;strong&gt;1、准备&lt;/strong&gt;docker-compose.yml&lt;strong&gt;文件&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;version: &amp;#39;2&amp;#39;
services:
  zoo1:
    image: zookeeper:3.5
    restart: always
    container_name: zoo1
    ports:
      - &amp;quot;2181:2181&amp;quot;
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2688:3888 server.2=zoo2:2689:3888 server.3=zoo3:2690:3888

  zoo2:
    image: zookeeper:3.5
    restart: always
    container_name: zoo2
    ports:
      - &amp;quot;2182:2181&amp;quot;
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2688:3888 server.2=0.0.0.0:2689:3888 server.3=zoo3:2690:3888

  zoo3:
    image: zookeeper:3.5
    restart: always
    container_name: zoo3
    ports:
      - &amp;quot;2183:2181&amp;quot;
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2688:3888 server.2=zoo2:2689:3888 server.3=0.0.0.0:2690:3888

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、创建镜像&#34;&gt;&lt;a href=&#34;#2、创建镜像&#34; class=&#34;headerlink&#34; title=&#34;2、创建镜像&#34;&gt;&lt;/a&gt;&lt;strong&gt;2、创建镜像&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;要在创建的docker-compose.yml文件中使用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、进入容器&#34;&gt;&lt;a href=&#34;#3、进入容器&#34; class=&#34;headerlink&#34; title=&#34;3、进入容器&#34;&gt;&lt;/a&gt;&lt;strong&gt;3、进入容器&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo1 /bin/bash

#查看zoo1 的状态
cd bin
./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;如果出现，以下情况：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ZooKeeper JMX enabled by default
Using config: /conf/zoo.cfg
Client port not found in static config file. Looking in dynamic config file.
grep: : No such file or directory
Client port not found in the server configs
Client port not found. Looking for secureClientPort in the static config.
Unable to find either secure or unsecure client port in any configs. Terminating.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	通过阅读我们知道他在conf中的zoo.cfg文件中缺少 **clientPort **我们只需要自行添加即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#修改之前我们先装一下 vim
apt-get update

apt-get install -y vim 

#修改zoo.fcg文件
vim /conf/zoo.fcg

clientPort=2181
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;完事之后&lt;strong&gt;重启&lt;/strong&gt;zoo1&lt;/p&gt;
&lt;p&gt;  &lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645780920291.png&#34; alt=&#34;1645780920291&#34;&gt;&lt;/p&gt;
&lt;p&gt;  成功！！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4、查看所有zookeeper的状态&#34;&gt;&lt;a href=&#34;#4、查看所有zookeeper的状态&#34; class=&#34;headerlink&#34; title=&#34;4、查看所有zookeeper的状态&#34;&gt;&lt;/a&gt;4、查看所有zookeeper的状态&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo3 bash ./bin/zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、进去客户端&#34;&gt;&lt;a href=&#34;#5、进去客户端&#34; class=&#34;headerlink&#34; title=&#34;5、进去客户端&#34;&gt;&lt;/a&gt;5、进去客户端&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo3 zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十二、SolrCloud&#34;&gt;&lt;a href=&#34;#十二、SolrCloud&#34; class=&#34;headerlink&#34; title=&#34;十二、SolrCloud&#34;&gt;&lt;/a&gt;十二、SolrCloud&lt;/h3&gt;&lt;p&gt;​	Solr可以搭建具备容错能力和高可用的Solr集群。集群中集群配置、自动负载均衡和查询故障转移、			Zookeeper集群实现集群协调管理，这些全部功能统称为SolrCloud。&lt;/p&gt;
&lt;p&gt;​	SolrCloud是基于Zookeeper进行管理的。在Solr中已经内置了Zookeeper相关内容，当执行集群创建命令会自动创建Zookeeper相关内容。这个使用的是Zookeeper的集群管理功能实现的。&lt;/p&gt;
&lt;h4 id=&#34;1-搭建&#34;&gt;&lt;a href=&#34;#1-搭建&#34; class=&#34;headerlink&#34; title=&#34;1.搭建&#34;&gt;&lt;/a&gt;1.搭建&lt;/h4&gt;&lt;h5 id=&#34;1-1创建&#34;&gt;&lt;a href=&#34;#1-1创建&#34; class=&#34;headerlink&#34; title=&#34;1.1创建&#34;&gt;&lt;/a&gt;1.1创建&lt;/h5&gt;&lt;p&gt;​	SolrCloud已经包含在了Solr中，可以直接启动Solr集群。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./solr -e cloud -noprompt -force
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	此命令等同于# .&amp;#x2F;solr -e cloud -force全部参数为默认值。&lt;/p&gt;
&lt;p&gt;​	运行成功后会在example文件夹多出cloud文件夹。&lt;/p&gt;
&lt;h5 id=&#34;1-2停止&#34;&gt;&lt;a href=&#34;#1-2停止&#34; class=&#34;headerlink&#34; title=&#34;1.2停止&#34;&gt;&lt;/a&gt;1.2停止&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; ./solr stop -all
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-3重新运行&#34;&gt;&lt;a href=&#34;#1-3重新运行&#34; class=&#34;headerlink&#34; title=&#34;1.3重新运行&#34;&gt;&lt;/a&gt;1.3重新运行&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; ./solr start -c -p 8983 -s ../example/cloud/node1/solr/ -force
 ./solr start -c -p 7574 -z localhost:9983 -s ../example/cloud/node2/solr/ -force
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt;</content>
        <category term="分布式" />
        <category term="中间件" />
        <category term="Solr" />
        <category term="快速搜索" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
</feed>
