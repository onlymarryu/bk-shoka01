{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"分布式\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Distribution/Dubbo/",
            "url": "http://example.com/2022/10/07/Distribution/Dubbo/",
            "title": "Dubbo",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"dubbo\"><a class=\"anchor\" href=\"#dubbo\">#</a> Dubbo</h1>\n<h3 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> 主要内容</h3>\n<ol>\n<li>Dubbo 简介</li>\n<li>Dubbo 架构讲解</li>\n<li>Dubbo 支持的协议</li>\n<li>Dubbo 支持的注册中心</li>\n<li>第一个 Dubbo 的 Provider</li>\n<li>Admin 管理界面搭建</li>\n<li>成 Dubbo 的 Consumer</li>\n<li>负载均衡</li>\n<li>完整 Dubbo 项目演示</li>\n</ol>\n<h3 id=\"学习目标\"><a class=\"anchor\" href=\"#学习目标\">#</a> 学习目标</h3>\n<table>\n<thead>\n<tr>\n<th>知识点</th>\n<th>要求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Dubbo 简介</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Dubbo 架构讲解</td>\n<td>精通</td>\n</tr>\n<tr>\n<td>Dubbo 支持的协议</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Dubbo 支持的注册中心</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>第一个 Dubbo 的 Provider</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Admin 管理界面搭建</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>完成 Dubbo 的 Consumer</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>负载均衡</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>完整 Dubbo 项目演示</td>\n<td>掌握</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一-dubbo简介\"><a class=\"anchor\" href=\"#一-dubbo简介\">#</a> 一、Dubbo 简介</h3>\n<h4 id=\"1官方说明\"><a class=\"anchor\" href=\"#1官方说明\">#</a> 1, 官方说明</h4>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-1.png\" class=\"\"></p>\n<p>​\tApache Dubbo 是一个高可用的，基于 Java 的开源 RPC 框架。</p>\n<p>​\tDubbo 框架不仅仅是具备 RPC 访问功能，还包含服务治理功能。</p>\n<h4 id=\"2发展历史\"><a class=\"anchor\" href=\"#2发展历史\">#</a> 2. 发展历史</h4>\n<p>​\tDubbo 是最开始是阿里巴巴内部使用的 RPC 框架。</p>\n<p>​\t2011 年对外提供。</p>\n<p>​\t2012 年停止更新。</p>\n<p>​\t2017 年开始继续更新。</p>\n<p>​\t2019 年捐献给 Apache，由 Apache 维护 2.7 以上版本。</p>\n<h4 id=\"3dubbo架构讲解\"><a class=\"anchor\" href=\"#3dubbo架构讲解\">#</a> 3.Dubbo 架构讲解</h4>\n<h5 id=\"31架构图\"><a class=\"anchor\" href=\"#31架构图\">#</a> 3.1 架构图</h5>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-2.png\" class=\"\"></p>\n<h4 id=\"32架构说明\"><a class=\"anchor\" href=\"#32架构说明\">#</a> 3.2 架构说明</h4>\n<h5 id=\"321虚线\"><a class=\"anchor\" href=\"#321虚线\">#</a> 3.2.1 虚线</h5>\n<p>​\t虚线表示异步，实线表示同步。异步不阻塞线程性能高，同步阻塞线程必须等待响应结果才能继续执行，相对性能低。</p>\n<h5 id=\"322provider\"><a class=\"anchor\" href=\"#322provider\">#</a> 3.2.2Provider</h5>\n<p>​\t提供者。编写持久层和事务代码。</p>\n<h5 id=\"323container\"><a class=\"anchor\" href=\"#323container\">#</a> 3.2.3Container</h5>\n<p>​\t容器（Spring 容器），Dubbo 完全基于 Spring 实现的。</p>\n<h5 id=\"324registry\"><a class=\"anchor\" href=\"#324registry\">#</a> 3.2.4Registry</h5>\n<p>​\t注册中心。放置所有 Provider 对外提供的信息。包含 Provider 的 IP，访问端口，访问遵守的协议，对外提供的接口，接口中有哪些方法等相关信息。</p>\n<h5 id=\"325consumer\"><a class=\"anchor\" href=\"#325consumer\">#</a> 3.2.5Consumer</h5>\n<p>​\t消费者（RPC 调用者，SOA 调用服务的项目）开发中也是一个项目，编写 service 和 controller（还可以报页面等）。调用 XXXXServiceImpl 中的方法。</p>\n<h5 id=\"326monitor\"><a class=\"anchor\" href=\"#326monitor\">#</a> 3.2.6Monitor</h5>\n<p>​\t监控中心。监控 Provider 的压力情况等。每隔 2 分钟 Consumer 和 Provider 会把调用次数发送给 Monitor，由 Monitor 进行统计。</p>\n<h4 id=\"4执行流程\"><a class=\"anchor\" href=\"#4执行流程\">#</a> 4. 执行流程</h4>\n<ol start=\"0\">\n<li>start：启动 Spring 容器时会把 Provider 启动。</li>\n<li>register：把 Provider 相关信息注册到 Registry 里</li>\n<li>subscribe：Consumer 从 Registry 中订阅 Provider 的信息</li>\n<li>notify：通知给 Consumer</li>\n<li>invoke：Consumer 根据 Registry 通知的信息进行调用 Provider 中方法。</li>\n<li>count:Consumer 和 Provider 把调用次数信息异步发送给 Monitor 进行统计。</li>\n</ol>\n<h3 id=\"二-dubbo支持的协议\"><a class=\"anchor\" href=\"#二-dubbo支持的协议\">#</a> 二、Dubbo 支持的协议</h3>\n<h4 id=\"1dubbo协议官方推荐协议\"><a class=\"anchor\" href=\"#1dubbo协议官方推荐协议\">#</a> 1.Dubbo 协议 (官方推荐协议)</h4>\n<p>​\t优点：</p>\n<p>​\t\t采用 NIO 复用单一长连接，并使用线程池并发处理请求，减少握手和加大并发效率，性能较好（推荐使用）</p>\n<p>​\t缺点：</p>\n<p>​\t\t大文件上传时，可能出现问题 (不使用 Dubbo 文件上传)</p>\n<h4 id=\"2rmiremote-method-invocation协议\"><a class=\"anchor\" href=\"#2rmiremote-method-invocation协议\">#</a> 2.RMI (Remote Method Invocation) 协议</h4>\n<p>​\t优点:</p>\n<p>​\t\tJDK 自带的能力。</p>\n<p>​\t缺点:</p>\n<p>​\t\t偶尔连接失败.</p>\n<h4 id=\"3hessian协议\"><a class=\"anchor\" href=\"#3hessian协议\">#</a> 3.Hessian 协议</h4>\n<p>​\t优点:</p>\n<p>​\t\t可与原生 Hessian 互操作，基于 HTTP 协议</p>\n<p>​\t缺点:</p>\n<p>​\t\t需 hessian.jar 支持，http 短连接的开销大</p>\n<h3 id=\"三-dubbo支持的注册中心\"><a class=\"anchor\" href=\"#三-dubbo支持的注册中心\">#</a> 三、Dubbo 支持的注册中心</h3>\n<h4 id=\"1zookeeper官方推荐\"><a class=\"anchor\" href=\"#1zookeeper官方推荐\">#</a> 1.Zookeeper (官方推荐)</h4>\n<p>​\t1) 优点:</p>\n<p>​\t\t支持分布式。很多周边产品.</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t受限于 Zookeeper 软件的稳定性.Zookeeper 专门分布式辅助软件，稳定较优</p>\n<h4 id=\"2multicast\"><a class=\"anchor\" href=\"#2multicast\">#</a> 2.Multicast</h4>\n<p>​\t1) 优点:</p>\n<p>​\t\t去中心化，不需要单独安装软件.</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t2.2.1 Provider 和 Consumer 和 Registry 不能跨机房 (路由)</p>\n<h4 id=\"3redis\"><a class=\"anchor\" href=\"#3redis\">#</a> 3.Redis</h4>\n<p>​\t1) 优点:</p>\n<p>​\t\t支持集群，性能高</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t要求服务器时间同步。否则可能出现集群失败问题.</p>\n<h4 id=\"4simple\"><a class=\"anchor\" href=\"#4simple\">#</a> 4.Simple</h4>\n<p>​\t1) 优点:</p>\n<p>​\t\t标准 RPC 服务。没有兼容问题</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t不支持集群.</p>\n<h3 id=\"四-第一个dubbo的provider\"><a class=\"anchor\" href=\"#四-第一个dubbo的provider\">#</a> 四、第一个 Dubbo 的 Provider</h3>\n<p>​\t新建父项目 Parent1。最终结构如下：</p>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-3.png\" class=\"\"></p>\n<p>​\t编写 pom.xml 继承 SpringBoot 父项目。</p>\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n&lt;/parent&gt; \n</code></pre>\n<h4 id=\"1新建api项目\"><a class=\"anchor\" href=\"#1新建api项目\">#</a> 1. 新建 api 项目</h4>\n<h5 id=\"11创建接口\"><a class=\"anchor\" href=\"#11创建接口\">#</a> 1.1 创建接口</h5>\n<p>​\t创建 com.msb.<strong>dubbo</strong>.service.Demo<strong>Dubbo</strong>Service 接口</p>\n<pre><code>public interface DemoDubboService &#123;\n    String demo();\n&#125;\n</code></pre>\n<h4 id=\"2新建provider项目\"><a class=\"anchor\" href=\"#2新建provider项目\">#</a> 2. 新建 provider 项目</h4>\n<h5 id=\"21编写pomxml\"><a class=\"anchor\" href=\"#21编写pomxml\">#</a> 2.1 编写 pom.xml</h5>\n<p>​\t注意：不需要依赖 web，如果依赖 spring-boot-start-web 还需要考虑端口问题。</p>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.7.3&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;   \n</code></pre>\n<h5 id=\"22编写配置文件\"><a class=\"anchor\" href=\"#22编写配置文件\">#</a> 2.2 编写配置文件</h5>\n<p>​\t新建 application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-provider\n  registry:\n    address: zookeeper://192.168.32.128:2181\n</code></pre>\n<h5 id=\"23新建实现类\"><a class=\"anchor\" href=\"#23新建实现类\">#</a> 2.3 新建实现类</h5>\n<p>​\t新建 com.msb.dubbo.service.impl.DemoDubboServiceImpl</p>\n<p>​\t注意：注解是 apache 的注解。</p>\n<pre><code>import com.msb.dubbo.service.DemoDubboService;\nimport org.apache.dubbo.config.annotation.Service;\n\n@Service\npublic class DemoDubboServiceImpl implements DemoDubboService &#123;\n    @Override\n    public String demo() &#123;\n        System.out.println(&quot;demo方法&quot;);\n        return &quot;123&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"24新建启动类\"><a class=\"anchor\" href=\"#24新建启动类\">#</a> 2.4 新建启动类</h5>\n<p>​\t新建 com.msb.ProviderApplication。</p>\n<p>​\t必须要有 @EnableDubbo 注解，否则 Dubbo 不生效。</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\npublic class ProviderApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ProviderApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"五-完成dubbo的consumer\"><a class=\"anchor\" href=\"#五-完成dubbo的consumer\">#</a> 五、完成 Dubbo 的 Consumer</h3>\n<p>​\t创建 consumer 项目</p>\n<h4 id=\"1编写pomxml\"><a class=\"anchor\" href=\"#1编写pomxml\">#</a> 1. 编写 pom.xml</h4>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.7.3&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;   \n</code></pre>\n<h4 id=\"2新建配置文件\"><a class=\"anchor\" href=\"#2新建配置文件\">#</a> 2. 新建配置文件</h4>\n<p>​\t新建 application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-consumer\n  registry:\n    address: zookeeper://192.168.32.128:2181\n</code></pre>\n<h4 id=\"3新建service及实现类\"><a class=\"anchor\" href=\"#3新建service及实现类\">#</a> 3. 新建 service 及实现类</h4>\n<p>​\t新建 com.msb.service.DemoService</p>\n<p>​\t新建 com.msb.service.impl.DemoServiceImpl</p>\n<p>​\t调用服务使用 @Reference 注解，不要倒错包了，有两个。</p>\n<pre><code>public interface DemoService &#123;\n    String consumerDemo();\n&#125;\n</code></pre>\n<pre><code>import com.msb.dubbo.service.DemoDubboService;\nimport com.msb.service.DemoService;\nimport org.apache.dubbo.config.annotation.Reference;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DemoServiceImpl implements DemoService &#123;\n\n    @Reference\n    private DemoDubboService demoDubboService;\n\n    @Override\n    public String consumerDemo() &#123;\n        return demoDubboService.demo();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"4新建控制器\"><a class=\"anchor\" href=\"#4新建控制器\">#</a> 4. 新建控制器</h4>\n<p>​\t新建控制器 com.msb.controller.DemoController</p>\n<pre><code>@Controller\npublic class DemoController &#123;\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(&quot;/demo&quot;)\n    @ResponseBody\n    public String demo()&#123;\n        return demoService.consumerDemo();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"5新建启动器\"><a class=\"anchor\" href=\"#5新建启动器\">#</a> 5. 新建启动器</h4>\n<p>​\t新建 com.msb.ConsumerApplication</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\npublic class ConsumerApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ConsumerApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"六-admin管理界面搭建\"><a class=\"anchor\" href=\"#六-admin管理界面搭建\">#</a> 六、Admin 管理界面搭建</h3>\n<p>​\t资料中把 dubbo-admin-0.2.0.jar\\BOOT-INF\\classes 中 application.properties 里面注册中心的 ip 设置正确</p>\n<p>​\t使用 java -jar dubbo-admin-0.2.0.jar 运行即可。</p>\n<p>​\t注意：占用 8080 端口，不要冲突了。</p>\n<h3 id=\"七-负载均衡\"><a class=\"anchor\" href=\"#七-负载均衡\">#</a> 七、负载均衡</h3>\n<p>​\t集群：一个内容，部署多次，形成的整体称为集群。集群中每个个体应该部署到不同的服务器上。</p>\n<p>​\t伪集群：集群中内容部署到同一台服务器上，通过不同端口区分不同个体。</p>\n<p>​\t负载均衡是在集群前提下，当访问整个集群时，集群中每个节点被访问次数或频率的规则。</p>\n<p>​\tDubbo 内置了四个负载均衡策略。默认为 Random</p>\n<h4 id=\"1内置策略\"><a class=\"anchor\" href=\"#1内置策略\">#</a> 1. 内置策略</h4>\n<h5 id=\"11random\"><a class=\"anchor\" href=\"#11random\">#</a> 1.1Random</h5>\n<p>​\t随机。随机访问集群中节点。访问概率和权重有关。</p>\n<h5 id=\"12roundrobin\"><a class=\"anchor\" href=\"#12roundrobin\">#</a> 1.2RoundRobin</h5>\n<p>​\t轮询。访问频率和权重有关。</p>\n<p>​\t权重（weight）：占有比例。集群中每个项目部署的服务器的性能可能是不同，性能好的服务器权重应该高一些。</p>\n<h5 id=\"13leastactive\"><a class=\"anchor\" href=\"#13leastactive\">#</a> 1.3LeastActive</h5>\n<p>​\t活跃数相同的随机，不同的活跃数高的放前面。</p>\n<h5 id=\"14consistenthash\"><a class=\"anchor\" href=\"#14consistenthash\">#</a> 1.4ConsistentHash</h5>\n<p>​\t一致性 Hash。相同参数请求总是发到一个提供者。</p>\n<h4 id=\"2provider集群\"><a class=\"anchor\" href=\"#2provider集群\">#</a> 2.Provider 集群</h4>\n<p>​\t新建四个启动类。</p>\n<p>​\t每次启动启动类修改配置文件 dubbo.protocal.port</p>\n<h4 id=\"3设置负载均衡\"><a class=\"anchor\" href=\"#3设置负载均衡\">#</a> 3. 设置负载均衡</h4>\n<h5 id=\"31reference\"><a class=\"anchor\" href=\"#31reference\">#</a> 3.1@Reference</h5>\n<p>​\t调用的服务采用的负载均衡</p>\n<pre><code>@Reference(loadbalance = &quot;roundrobin&quot;)\nprivate DemoDubboService demoDubboService;\n</code></pre>\n<h5 id=\"32-service\"><a class=\"anchor\" href=\"#32-service\">#</a> 3.2 @Service</h5>\n<p>​\t当前服务采用的负载均衡算法</p>\n<pre><code>@Service(loadbalance = &quot;random&quot;)\npublic class DemoDubboServiceImpl implements DemoDubboService &#123;\n</code></pre>\n<p>​\t设置权重</p>\n<pre><code>@Service(weight = 4)\n</code></pre>\n<h5 id=\"33配置文件\"><a class=\"anchor\" href=\"#33配置文件\">#</a> 3.3 配置文件</h5>\n<p>​\t\t\t全局设置所有 provider 和 consumer 的负载均衡效果。</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-provider\n  registry:\n    address: zookeeper://192.168.32.128:2181\n  protocol:\n    port: 20884\n  provider:\n    loadbalance: random\n  consumer:\n    loadbalance: random\n</code></pre>\n<h3 id=\"八-完整dubbo项目演示\"><a class=\"anchor\" href=\"#八-完整dubbo项目演示\">#</a> 八、完整 Dubbo 项目演示</h3>\n<h4 id=\"1原型\"><a class=\"anchor\" href=\"#1原型\">#</a> 1. 原型</h4>\n<h5 id=\"11部门显示\"><a class=\"anchor\" href=\"#11部门显示\">#</a> 1.1 部门显示</h5>\n<p>​\t显示全部部门信息</p>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-4.png\" class=\"\"></p>\n<h5 id=\"12员工新增\"><a class=\"anchor\" href=\"#12员工新增\">#</a> 1.2 员工新增</h5>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-5.png\" class=\"\"></p>\n<h5 id=\"13查看部门员工\"><a class=\"anchor\" href=\"#13查看部门员工\">#</a> 1.3 查看部门员工</h5>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-6.png\" class=\"\"></p>\n<h4 id=\"2按照分布式架构进行设计项目\"><a class=\"anchor\" href=\"#2按照分布式架构进行设计项目\">#</a> 2. 按照分布式架构进行设计项目</h4>\n<p>​\t\t设定员工管理和部门管理不在同一个模块中，需要有一个员工管理项目和一个部门管理项目。</p>\n<p>​\t为了方便，不去每个项目使用一个窗口，而是使用聚合项目。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-7.png\" class=\"\"></p>\n<h4 id=\"3创建数据库表\"><a class=\"anchor\" href=\"#3创建数据库表\">#</a> 3. 创建数据库表</h4>\n<pre><code>create table dept(\nid int(11) primary key auto_increment,\nname varchar(20)\n);\n\ninsert into dept values(default,'开发部');\ninsert into dept values(default,'产品部');\n\ncreate table emp(\nid int(11) primary key auto_increment,\nname varchar(20),\nphoto varchar(200),\ndid int(11),\nCONSTRAINT fk_emp_dept FOREIGN key (did) REFERENCES dept(id)\n);\n</code></pre>\n<h4 id=\"4创建父项目\"><a class=\"anchor\" href=\"#4创建父项目\">#</a> 4. 创建父项目</h4>\n<p>​\t创建项目 parent。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-8.png\" class=\"\"></p>\n<p>编写 pom.xml</p>\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n&lt;/parent&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n            &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.7.3&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n            &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n            &lt;version&gt;4.2.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n            &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n            &lt;version&gt;4.2.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.6&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-io&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n            &lt;version&gt;2.6&lt;/version&gt;\n        &lt;/dependency&gt;\n         &lt;dependency&gt;\n             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n             &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n             &lt;version&gt;1.18.12&lt;/version&gt;\n             &lt;scope&gt;provided&lt;/scope&gt;\n         &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre>\n<h4 id=\"5创建pojo项目\"><a class=\"anchor\" href=\"#5创建pojo项目\">#</a> 5. 创建 pojo 项目</h4>\n<h4 id=\"6创建mapper项目\"><a class=\"anchor\" href=\"#6创建mapper项目\">#</a> 6. 创建 mapper 项目</h4>\n<h5 id=\"61编写pomxml\"><a class=\"anchor\" href=\"#61编写pomxml\">#</a> 6.1 编写 pom.xml</h5>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;pojo&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;mysql&lt;/groupId&gt;\n        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;    \n</code></pre>\n<h5 id=\"62新建配置文件\"><a class=\"anchor\" href=\"#62新建配置文件\">#</a> 6.2 新建配置文件</h5>\n<p>​\t新建 application-mybatis.yml</p>\n<pre><code>spring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/maven\n    username: root\n    password: root\n\nmybatis:\n  mapper-locations: classpath:mybatis/*.xml\n  type-aliases-package: com.msb.pojo\n</code></pre>\n<h4 id=\"7新建api项目\"><a class=\"anchor\" href=\"#7新建api项目\">#</a> 7. 新建 api 项目</h4>\n<h5 id=\"71编写pomxml\"><a class=\"anchor\" href=\"#71编写pomxml\">#</a> 7.1 编写 pom.xml</h5>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;pojo&lt;/artifactId&gt;\n        &lt;groupId&gt;com.bjsxt&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;    \n</code></pre>\n<h4 id=\"8新建provider\"><a class=\"anchor\" href=\"#8新建provider\">#</a> 8. 新建 provider</h4>\n<h5 id=\"81编写pomxml\"><a class=\"anchor\" href=\"#81编写pomxml\">#</a> 8.1 编写 pom.xml</h5>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;mapper&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<h5 id=\"82新建配置文件\"><a class=\"anchor\" href=\"#82新建配置文件\">#</a> 8.2 新建配置文件</h5>\n<p>​\t新建 application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-provider\n  registry:\n    address: zookeeper://192.168.52.128:2181\n\n# 加载其他配置文件,加载其他application-*.yml文件，多个名称之间使用逗号分隔\nspring:\n  profiles:\n    active: mybatis\n</code></pre>\n<h5 id=\"83新建启动类\"><a class=\"anchor\" href=\"#83新建启动类\">#</a> 8.3 新建启动类</h5>\n<p>​\t新建 com.msb.ProviderApplication</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\n@MapperScan(&quot;com.msb.mapper&quot;)\npublic class ProviderApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ProviderApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"9完成dept查询功能\"><a class=\"anchor\" href=\"#9完成dept查询功能\">#</a> 9. 完成 Dept 查询功能</h4>\n<h5 id=\"91在api中新建接口\"><a class=\"anchor\" href=\"#91在api中新建接口\">#</a> 9.1 在 api 中新建接口</h5>\n<p>​\tcom.msb.dubbo.service.DeptDubboService</p>\n<pre><code>public interface DeptDubboService &#123;\n    List&lt;Dept&gt; selectAll();\n&#125;\n</code></pre>\n<h5 id=\"92在provider中新建实现类\"><a class=\"anchor\" href=\"#92在provider中新建实现类\">#</a> 9.2 在 provider 中新建实现类</h5>\n<p>​\tcom.msb.dubbo.service.impl.DeptDubboServiceImpl</p>\n<pre><code>@Service\npublic class DeptDubboServiceImpl implements DeptDubboService &#123;\n    @Autowired\n    private DeptMapper deptMapper;\n    @Override\n    public List&lt;Dept&gt; selectAll() &#123;\n        return deptMapper.selectByExample(null);\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"93新建项目dept\"><a class=\"anchor\" href=\"#93新建项目dept\">#</a> 9.3 新建项目 dept</h5>\n<h6 id=\"931添加依赖\"><a class=\"anchor\" href=\"#931添加依赖\">#</a> 9.3.1 添加依赖</h6>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;   \n</code></pre>\n<h6 id=\"932编写配置文件\"><a class=\"anchor\" href=\"#932编写配置文件\">#</a> 9.3.2 编写配置文件</h6>\n<p>​\t新建 application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-dept-consumer\n  registry:\n    address: zookeeper://192.168.52.128:2181\n</code></pre>\n<h6 id=\"933新建启动类\"><a class=\"anchor\" href=\"#933新建启动类\">#</a> 9.3.3 新建启动类</h6>\n<p>​\tcom.msb.DeptApplication</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\npublic class DeptApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(DeptApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h6 id=\"934新建接口及实现类\"><a class=\"anchor\" href=\"#934新建接口及实现类\">#</a> 9.3.4 新建接口及实现类</h6>\n<p>​\t接口：com.msb.service.DeptService</p>\n<p>​\t实现类：com.msb.service.impl.DeptServiceImpl</p>\n<pre><code>public interface DeptService &#123;\n    List&lt;Dept&gt; showAll();\n&#125;\n</code></pre>\n<pre><code>@Service\npublic class DeptServiceImpl implements DeptService &#123;\n    @Reference\n    private DeptDubboService deptDubboService;\n    @Override\n    public List&lt;Dept&gt; showAll() &#123;\n        return deptDubboService.selectAll();\n    &#125;\n&#125;\n</code></pre>\n<h6 id=\"935新建控制器\"><a class=\"anchor\" href=\"#935新建控制器\">#</a> 9.3.5 新建控制器</h6>\n<p>​\tcom.msb.controller.DeptController</p>\n<pre><code>@Controller\npublic class DeptController &#123;\n\n    @Autowired\n    private DeptService deptService;\n\n    @GetMapping(&quot;/dept&quot;)\n    public String shwoDept(Model model)&#123;\n        model.addAttribute(&quot;list&quot;,deptService.showAll());\n        return &quot;dept&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"936-新建页面\"><a class=\"anchor\" href=\"#936-新建页面\">#</a> 9.3.6  新建页面</h5>\n<p>​\t在 resources /templates 新建 dept.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table border=&quot;1&quot; width=&quot;500&quot;&gt;\n        &lt;tr&gt;\n            &lt;th&gt;编号&lt;/th&gt;\n            &lt;th&gt;部门名称&lt;/th&gt;\n            &lt;th&gt;查看&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr th:each=&quot;dept : $&#123;list&#125;&quot;&gt;\n            &lt;td th:text=&quot;$&#123;dept.id&#125;&quot;&gt;&lt;/td&gt;\n            &lt;td th:text=&quot;$&#123;dept.name&#125;&quot;&gt;&lt;/td&gt;\n            &lt;td&gt; &lt;a th:href=&quot;@&#123;/showEmp(did=$&#123;dept.id&#125;)&#125;&quot;&gt;查看&lt;/a&gt; &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;             \n</code></pre>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "分布式",
                "Dubbo"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Distribution/FastDFS/",
            "url": "http://example.com/2022/10/07/Distribution/FastDFS/",
            "title": "FastDFS",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"分布式文件存储系统fastdfs\"><a class=\"anchor\" href=\"#分布式文件存储系统fastdfs\">#</a> 分布式文件存储系统 FastDFS</h1>\n<h1 id=\"一-分布式文件存储\"><a class=\"anchor\" href=\"#一-分布式文件存储\">#</a> 一、分布式文件存储</h1>\n<h2 id=\"1分布式文件存储的由来\"><a class=\"anchor\" href=\"#1分布式文件存储的由来\">#</a> 1. 分布式文件存储的由来</h2>\n<p>  在我们的项目中有很多需要存储的内容出现，比如图片，视频，文件等等，在早期的时候用户量不大，产生的文件也不是很多，这时我们可以把文件和服务程序放在一个服务器中。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/66d2beee9a4e47c08aa9552530a9c996.png\" class=\"\"></p>\n<p>  后面随着文件越来越多，服务器的资源会被文件资源大量占据，从而影响到服务器的稳定，这时我们可以单独的把文件服务器拆出来。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/8097b0f16465452b9f9b460e2149aa0d.png\" class=\"\"></p>\n<p>  拆解出来后，文件服务的使用不会影响到我们的系统服务的稳定，但是当用户量越来越大，存储的文件就会越来越多，这时如果还是单台的文件服务，比如 100T 的文件，这时是存储不下去的，这时就产生了我们将的分布式文件存储，</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/fff16a09675d40ac926d42be9385d461.png\" class=\"\"></p>\n<p>  也就是我们解决如何将这 100T 的文件分散的存储到各个节点上，然后当我们需要读取文件的时候又能非常快的帮我们把文件找到。这个就是分布式文件系统帮我们解决的问题了。</p>\n<h2 id=\"2常见的分布式存储框架\"><a class=\"anchor\" href=\"#2常见的分布式存储框架\">#</a> 2. 常见的分布式存储框架</h2>\n<p>  接下来我们看看在国内常用的分布式存储的框架选择有哪些</p>\n<table>\n<thead>\n<tr>\n<th>分布式框架</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FastDFS</td>\n<td>我们介绍的主角，国产</td>\n</tr>\n<tr>\n<td>HDFS</td>\n<td>Hadoop 组件中分布式存储框架</td>\n</tr>\n<tr>\n<td>MinIO</td>\n<td>MinIO 是在 Apache 下的产品，最适合存储非结构化的数据，&lt;br /&gt; 比如照片，视频，日志文件，备份和容器等。</td>\n</tr>\n<tr>\n<td>阿里云对象存储</td>\n<td>当然我们还可以花费一点费用来使用其他厂商提供的对象存储服务</td>\n</tr>\n</tbody>\n</table>\n<p>  好了就介绍这么几个，其他的我们也用不到了。</p>\n<h1 id=\"二-fastdfs介绍\"><a class=\"anchor\" href=\"#二-fastdfs介绍\">#</a> 二、FastDFS 介绍</h1>\n<p>  FastDFS 是余庆国人开发的一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p>\n<p>  FastDFS 为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用 FastDFS 很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>\n<p>FastDFS 的特点：</p>\n<ul>\n<li>FastDFS 是一个轻量级的开源分布式文件系统</li>\n<li>FastDFS 主要解决了大容量的文件存储和高并发访问的问题，文件存取时实现了负载均衡</li>\n<li>FastDFS 实现了软件方式的 RAID，可以使用廉价的 IDE 硬盘进行存储</li>\n<li>支持存储服务器在线扩容</li>\n<li>支持相同内容的文件只保存一份，节约磁盘空间</li>\n<li>FastDFS 只能通过 Client API 访问，不支持 POSIX 访问方式</li>\n<li>FastDFS 特别适合大中型网站使用，用来存储资源文件（如：图片、文档、音频、视频等等）</li>\n</ul>\n<p>架构图：</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/92362218a5024b7c9e9141b754756b79.png\" class=\"\"></p>\n<p>相关术语讲解：</p>\n<table>\n<thead>\n<tr>\n<th>名词</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tracker Server</td>\n<td>跟踪服务器，主要做调度工作，在访问上起负载均衡的作用。&lt;br /&gt; 记录 storage server 的状态，是连接 Client 和 Storage server 的枢纽</td>\n</tr>\n<tr>\n<td>Storage Server</td>\n<td>存储服务器，文件和 meta data 都保存到存储服务器上</td>\n</tr>\n<tr>\n<td>group</td>\n<td>组，也可称为卷。同组内服务器上的文件是完全相同的</td>\n</tr>\n<tr>\n<td>文件标识</td>\n<td>包括两部分：组名和文件名（包含路径）</td>\n</tr>\n<tr>\n<td>meta-data</td>\n<td>文件相关属性，键值对（Key Value Pair）方式，如：width=1024,heigth=768</td>\n</tr>\n</tbody>\n</table>\n<p>架构解读：</p>\n<ul>\n<li>只有两个角色，tracker server 和 storage server，不需要存储文件索引信息。</li>\n<li>所有服务器都是对等的，不存在 Master-Slave 关系。</li>\n<li>存储服务器采用分组方式，同组内存储服务器上的文件完全相同（RAID 1）。</li>\n<li>不同组的 storage server 之间不会相互通信。</li>\n<li>由 storage server 主动向 tracker server 报告状态信息，tracker server 之间不会相互通信。</li>\n</ul>\n<h1 id=\"三-fastdfs安装\"><a class=\"anchor\" href=\"#三-fastdfs安装\">#</a> 三、FastDFS 安装</h1>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/b60ca697c06d4425b7cd228b98dc3d19.png\" class=\"\"></p>\n<p>  FastDFS 的安装我们还是通过 Docker 来安装实现吧，直接在 Linux 上还装还是比较繁琐的，但就学习而言 Docker 安装还是非常高效的。Docker 环境请自行安装哦，不清楚的可以看看我的 Docker 专题的内容。<a href=\"Docker%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99\" title=\"Docker学习资料\">https://blog.csdn.net/qq_38526573/category_9619681.html</a></p>\n<h2 id=\"1拉取镜像文件\"><a class=\"anchor\" href=\"#1拉取镜像文件\">#</a> 1. 拉取镜像文件</h2>\n<p>  首先我们可以通过  <code>docker search fastdfs</code>  来查询下有哪些镜像文件。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/5a06a59eb24d4f9e847a4badeef871ac.png\" class=\"\"></p>\n<p>  我们看到搜索到的镜像还是蛮多的，这里我们使用  <code>delron/fastdfs</code>  你也可以尝试使用其他的镜像来安装，你也可以制作自己的镜像来给别人使用哦，只是不同的镜像在使用的时候配置会有一些不一样，有些镜像没有提供 Nginx 的相关配置，使用的时候会繁琐一点。接下来通过  <code>docker pull delron/fastdfs</code>  命令把镜像拉取下来。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull delron/fastdfs</pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/Distribution/FastDFS/5e5b85b3dc9a432abf615b27868fc7bf.png\" class=\"\"></p>\n<h2 id=\"2构建tracker服务\"><a class=\"anchor\" href=\"#2构建tracker服务\">#</a> 2. 构建 Tracker 服务</h2>\n<p>  首先我们需要通过 Docker 命令来创建 Tracker 服务。命令为</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> tracker <span class=\"token parameter variable\">--network</span><span class=\"token operator\">=</span>host <span class=\"token parameter variable\">-v</span> /mydata/fastdfs/tracker:/var/fdfs delron/fastdfs tracker</pre></td></tr></table></figure><p>  tracker 服务默认的端口为 22122，-v 实现了容器和本地目录的挂载操作。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/694d42632bf6410a806df9aa43e836c0.png\" class=\"\"></p>\n<h2 id=\"3构建storage服务\"><a class=\"anchor\" href=\"#3构建storage服务\">#</a> 3. 构建 Storage 服务</h2>\n<p>  接下来创建 Storage 服务，具体的执行命令如下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> storage <span class=\"token parameter variable\">--network</span><span class=\"token operator\">=</span>host  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TRACKER_SERVER</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.1.195:22122 <span class=\"token parameter variable\">-v</span> /mydata/fastdfs/storage:/var/fdfs <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">GROUP_NAME</span><span class=\"token operator\">=</span>group1 delron/fastdfs storage</pre></td></tr></table></figure><p>  在执行上面命令的时候要注意对应的修改下，其中 TRACKER_SERVER 中的 ip 要修改为你的 Tracker 服务所在的服务 IP 地址。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/dc2bdf85d0f24fe18a32efbe4caa2d27.png\" class=\"\"></p>\n<p>  默认情况下在 Storage 服务中是帮我们安装了 Nginx 服务的，相关的端口为</p>\n<table>\n<thead>\n<tr>\n<th>服务</th>\n<th>默认端口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tracker</td>\n<td>22122</td>\n</tr>\n<tr>\n<td>storage</td>\n<td>23000</td>\n</tr>\n<tr>\n<td>Nginx</td>\n<td>8888</td>\n</tr>\n</tbody>\n</table>\n<p>  当然如果你发现这些相关的端口被占用了，或者想要对应的修改端口信息也可以的。要修改你可以先进入容器中查看下相关的配置文件信息。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/da5cc21445e840baa85580ba420db94d.png\" class=\"\"></p>\n<p>  然后查看 storage.conf 文件</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/63862499980b408195291de047048566.png\" class=\"\"></p>\n<p>  这个是 storage 监听的 Nginx 的端口 8888，如果要修改那么我们还需要修改 Nginx 中的服务配置，这块的配置在  <code>/usr/local/nginx/conf</code>  目录下</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/f866c08177be4fd48bfd9a582ec78779.png\" class=\"\"></p>\n<p>  查看下文件</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/dc7c5888363a400b9308f3ba64cca9ac.png\" class=\"\"></p>\n<p>所以要修改端口号的话，这两个位置都得修改了。当然本文我们就使用默认的端口号来使用了。</p>\n<h2 id=\"4测试图片上传\"><a class=\"anchor\" href=\"#4测试图片上传\">#</a> 4. 测试图片上传</h2>\n<p>  好了，安装我们已经完成了，那么到底是否可以使用呢？我们来测试下。首先在虚拟机的 /mydata/fastdfs/storage 下保存一张图片。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/ff2ea2626bb34acd810fbb8d9438129a.png\" class=\"\"></p>\n<p>  然后我们再进入到 storage 容器中。并且进入到  <code>/var/fdfs</code>  目录下，可以看到我们挂载的文件了</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/cb8a96fb9bb644328880ca70378a7fc2.png\" class=\"\"></p>\n<p>  然后执行如下命令即可完成图片的上传操作</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/usr/bin/fdfs_upload_file /etc/fdfs/client.conf <span class=\"token number\">1</span>.jpg</pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/Distribution/FastDFS/0fd0e82898bb45178eca4eef9a412745.png\" class=\"\"></p>\n<p>  通过上面的提示我们看到文件上传成功了，而且返回了文件在 storage 中存储的信息。这时我们就可以通过这个信息来拼接访问的地址在浏览器中访问了：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguNTYuMTAwOjg4ODgvZ3JvdXAxL00wMC8wMC8wMC93S2c0WkdIY0tMU0FYaWJhQUFlek11VXJsUzgyMzUuanBn\">http://192.168.56.100:8888/group1/M00/00/00/wKg4ZGHcKLSAXibaAAezMuUrlS8235.jpg</span></p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/b34e823e956f410297bfd1218ebc0231.png\" class=\"\"></p>\n<p>  好了到这儿 FastDFS 的服务安装成功了。</p>\n<h1 id=\"四-客户端操作\"><a class=\"anchor\" href=\"#四-客户端操作\">#</a> 四、客户端操作</h1>\n<h2 id=\"1fastdfs-java-client\"><a class=\"anchor\" href=\"#1fastdfs-java-client\">#</a> 1.Fastdfs-java-client</h2>\n<p>  首先我们来看下如何实现 FastDFS 中提供的 JavaAPI 来直接实现对应的文件上传和下载操作。</p>\n<h3 id=\"11-文件上传\"><a class=\"anchor\" href=\"#11-文件上传\">#</a> 1.1 文件上传</h3>\n<p>  先来看下文件上传的流程</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/c1da19dbbe994f55b20371ba0806d694.png\" class=\"\"></p>\n<p>  上传流程的文字梳理为：</p>\n<ol>\n<li>客户端访问 Tracker</li>\n<li>Tracker 返回 Storage 的 ip 和端口</li>\n<li>客户端直接访问 Storage，把文件内容和元数据发送过去。</li>\n<li>Storage 返回文件存储 id。包含了组名和文件名</li>\n</ol>\n<p>  首先创建一个普通的 maven 项目，然后引入对应的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>cn.bestwu<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastdfs-client-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.27<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.commons<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>commons-lang3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>  然后编写 FastDFS 的配置文件，内容如下：注意 ip 修改为你自己对应的 ip 即可</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>connect_timeout = 10</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>network_timeout = 30</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>charset = UTF-8</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>http.tracker_http_port = 8080</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tracker_server = 192.168.56.100:22122</pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/Distribution/FastDFS/3c54c7b41f2a4ac2b420b65beafd10d2.png\" class=\"\"></p>\n<p>  然后导入对应的工具类，在工具类中完成了 StorageClient 的实例化，并提供了相关的上传和下载的方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>bobo<span class=\"token punctuation\">.</span>fastdfs<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>commons<span class=\"token punctuation\">.</span>lang3<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StringUtils</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>csource<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NameValuePair</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>csource<span class=\"token punctuation\">.</span>fastdfs<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FastDFSClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">CONF_FILENAME</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContextClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"fdfs_client.conf\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">StorageClient</span> storageClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * 只加载一次.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">ClientGlobal</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CONF_FILENAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">TrackerClient</span> trackerClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TrackerClient</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClientGlobal</span><span class=\"token punctuation\">.</span>g_tracker_group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">TrackerServer</span> trackerServer <span class=\"token operator\">=</span> trackerClient<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">StorageServer</span> storageServer <span class=\"token operator\">=</span> trackerClient<span class=\"token punctuation\">.</span><span class=\"token function\">getStoreStorage</span><span class=\"token punctuation\">(</span>trackerServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            storageClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StorageClient</span><span class=\"token punctuation\">(</span>trackerServer<span class=\"token punctuation\">,</span> storageServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * @param inputStream</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     *    上传的文件输入流</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @param fileName</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     *    上传的文件原始名</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> inputStream<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 文件的元数据</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> meta_list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 第一组元数据，文件的原始名称</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            meta_list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file name\"</span><span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 第二组元数据</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            meta_list<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file length\"</span><span class=\"token punctuation\">,</span> inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token comment\">// 准备字节数组</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> file_buff <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputStream <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token comment\">// 查看文件的长度</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token comment\">// 创建对应长度的字节数组</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                file_buff <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token comment\">// 将输入流中的字节内容，读到字节数组中。</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                inputStream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>file_buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token comment\">// 上传文件。参数含义：要上传的文件的内容（使用字节数组传递），上传的文件的类型（扩展名），元数据</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fileids <span class=\"token operator\">=</span> storageClient<span class=\"token punctuation\">.</span><span class=\"token function\">upload_file</span><span class=\"token punctuation\">(</span>file_buff<span class=\"token punctuation\">,</span> <span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> meta_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">return</span> fileids<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     * @param file</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     *            文件</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     * @param fileName</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     *            文件名</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     * @return 返回 Null 则为失败</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> fis <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> meta_list <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new NameValuePair[0];</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> file_buff <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> fis<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                file_buff <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                fis<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>file_buff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fileids <span class=\"token operator\">=</span> storageClient<span class=\"token punctuation\">.</span><span class=\"token function\">upload_file</span><span class=\"token punctuation\">(</span>file_buff<span class=\"token punctuation\">,</span> <span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> meta_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token keyword\">return</span> fileids<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fis <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    fis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>     * 根据组名和远程文件名来删除一个文件</pre></td></tr><tr><td data-num=\"101\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>     * @param groupName</pre></td></tr><tr><td data-num=\"103\"></td><td><pre>     *            例如 \"group1\" 如果不指定该值，默认为 group1</pre></td></tr><tr><td data-num=\"104\"></td><td><pre>     * @param remoteFileName</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>     *            例如 \"M00/00/00/wKgxgk5HbLvfP86RAAAAChd9X1Y736.jpg\"</pre></td></tr><tr><td data-num=\"106\"></td><td><pre>     * @return 0 为成功，非 0 为失败，具体为错误代码</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">deleteFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> groupName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> remoteFileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> storageClient<span class=\"token punctuation\">.</span><span class=\"token function\">delete_file</span><span class=\"token punctuation\">(</span>groupName <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"group1\"</span> <span class=\"token operator\">:</span> groupName<span class=\"token punctuation\">,</span> remoteFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"118\"></td><td><pre>     * 修改一个已经存在的文件</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"120\"></td><td><pre>     * @param oldGroupName</pre></td></tr><tr><td data-num=\"121\"></td><td><pre>     *            旧的组名</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>     * @param oldFileName</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>     *            旧的文件名</pre></td></tr><tr><td data-num=\"124\"></td><td><pre>     * @param file</pre></td></tr><tr><td data-num=\"125\"></td><td><pre>     *            新文件</pre></td></tr><tr><td data-num=\"126\"></td><td><pre>     * @param fileName</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>     *            新文件名</pre></td></tr><tr><td data-num=\"128\"></td><td><pre>     * @return 返回空则为失败</pre></td></tr><tr><td data-num=\"129\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">modifyFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> oldGroupName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> oldFileName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">File</span> file<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fileids <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token comment\">// 先上传</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>            fileids <span class=\"token operator\">=</span> <span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fileids <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token comment\">// 再删除</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token keyword\">int</span> delResult <span class=\"token operator\">=</span> <span class=\"token function\">deleteFile</span><span class=\"token punctuation\">(</span>oldGroupName<span class=\"token punctuation\">,</span> oldFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delResult <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>        <span class=\"token keyword\">return</span> fileids<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>     * 文件下载</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>     * @param groupName 卷名</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>     * @param remoteFileName 文件名</pre></td></tr><tr><td data-num=\"154\"></td><td><pre>     * @return 返回一个流</pre></td></tr><tr><td data-num=\"155\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">InputStream</span> <span class=\"token function\">downloadFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> groupName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> remoteFileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> storageClient<span class=\"token punctuation\">.</span><span class=\"token function\">download_file</span><span class=\"token punctuation\">(</span>groupName<span class=\"token punctuation\">,</span> remoteFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> inputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            <span class=\"token keyword\">return</span> inputStream<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getMetaDate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> groupName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> remoteFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nvp <span class=\"token operator\">=</span> storageClient<span class=\"token punctuation\">.</span><span class=\"token function\">get_metadata</span><span class=\"token punctuation\">(</span>groupName<span class=\"token punctuation\">,</span> remoteFileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token keyword\">return</span> nvp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"177\"></td><td><pre>     * 获取文件后缀名（不带点）.</pre></td></tr><tr><td data-num=\"178\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"179\"></td><td><pre>     * @return 如：\"jpg\" or \"\".</pre></td></tr><tr><td data-num=\"180\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> fileName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isBlank</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>fileName<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>            <span class=\"token keyword\">return</span> fileName<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不带最后的点</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre></pre></td></tr><tr><td data-num=\"189\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>  然后我们就可以来测试上传的操作了。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/2.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">String</span> fileName <span class=\"token operator\">=</span> <span class=\"token constant\">UUID</span><span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\".jpg\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">FastDFSClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span> fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/Distribution/FastDFS/6d7d9ff0b42e4e1daae06e47dab3793f.png\" class=\"\"></p>\n<p>访问即可：<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguNTYuMTAwOjg4ODgvZ3JvdXAxL00wMC8wMC8wMC93S2c0WkdIY1VFNkFaQTJVQUFXOGRJWDVwNTAzNzQuanBn\">http://192.168.56.100:8888/group1/M00/00/00/wKg4ZGHcUE6AZA2UAAW8dIX5p50374.jpg</span></p>\n<p>  返回后的字符串的结构说明</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/5cec7e1344324b8dbd8050715d40b32f.png\" class=\"\"></p>\n<h3 id=\"12-文件下载\"><a class=\"anchor\" href=\"#12-文件下载\">#</a> 1.2 文件下载</h3>\n<p>  文件下载的流程，如下</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/04cba11544044479996f178ed8e41768.png\" class=\"\"></p>\n<p>  文件下载的流程为：</p>\n<ol>\n<li>client 询问 tracker 需要下载的文件的 storage，参数为文件的标识 (group 加文件名)。</li>\n<li>tracker 根据客户端的参数返回一台可用的 storage。</li>\n<li>client 根据返回的 storage 直接完成对应的文件的下载。</li>\n</ol>\n<p>  有了上面的基础，文件下载就非常简单了，我们只需要根据前面上传的文件的 group 和文件的存储路径就可以通过 StorageClient 中提供的 downloadFile 方法把对应的文件下载下来了，具体的代码如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 文件下载</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">downloadFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">InputStream</span> is <span class=\"token operator\">=</span> <span class=\"token class-name\">FastDFSClient</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">downloadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"M00/00/00/wKg4ZGHcUE6AZA2UAAW8dIX5p50374.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">OutputStream</span> os <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:/12.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                os<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            os<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            os<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            is<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：StorageClient 是线程不安全的。那么我们的解决方案</p>\n<ol>\n<li>对文件的操作的每个方法我们做同步处理</li>\n<li>每次操作文件的时候我们都获取一个新的 StorageClient 对象</li>\n</ol>\n<p>第一种方式效率肯定是最低的，第二种方式每次都要建立新的连接效率同样的会受到影响，这时最好的方式其实是把 StorageClient 交给我们自定义的连接池来管理</p>\n<h2 id=\"2springboot整合\"><a class=\"anchor\" href=\"#2springboot整合\">#</a> 2.SpringBoot 整合</h2>\n<p>  我们在实际工作中基本都是和 SpringBoot 整合在一起来使用的，那么我们就来看看 FastDFS 是如何在 SpringBoot 项目中来使用的。首先创建一个普通的 SpringBoot 项目，然后导入 fastdfs-spring-boot-starter 这个依赖。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>test<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.luhuiguo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastdfs-spring-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>0.2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>  既然是一个 starter，那么必然会在 spring.factories 文件中提供对应的自动配置类。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/807e18ab743d4dcea0128bfc9f967a22.png\" class=\"\"></p>\n<p>  可以看到给我们提供的配置类为 FdfsAutoConfiguration 进入后可以看到帮我们注入了很多的核心对象。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/74a13becccb94ff8841c542cf0b9ce98.png\" class=\"\"></p>\n<p>  然后可以看到系统提供的配置信息，前缀为  <code>fdfs</code></p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/ef9e211d1145444c8b8348d2e73a6a76.png\" class=\"\"></p>\n<p>  然后我们就可以在 application.properties 中配置 FastDFS 的配置信息了。</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/aa2dde964afc4909a7214239a269b65b.png\" class=\"\"></p>\n<p>  配置完成后我们就可以测试文件的上传下载操作了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootTest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FastDfsSpringBootApplicationTests</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FastFileStorageClient</span> storageClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">contextLoads</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"d:\\\\2.jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">StorePath</span> path <span class=\"token operator\">=</span> storageClient<span class=\"token punctuation\">.</span><span class=\"token function\">uploadFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">getFullPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>文件操作成功</p>\n<p><img data-src=\"/2022/10/07/Distribution/FastDFS/781603ff01b4486c8775ee45639420f4.png\" class=\"\"></p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "分布式",
                "FastDFS"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Distribution/RPC/",
            "url": "http://example.com/2022/10/07/Distribution/RPC/",
            "title": "RPC",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"rpc\"><a class=\"anchor\" href=\"#rpc\">#</a> 【RPC】</h1>\n<h2 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> 主要内容</h2>\n<ol>\n<li>\n<p>项目结构变化</p>\n</li>\n<li>\n<p>RPC 简介</p>\n</li>\n<li>\n<p>RMI 实现 RPC</p>\n</li>\n<li>\n<p>HttpClient 实现 RPC</p>\n</li>\n<li>\n<p>Zookeeper 安装</p>\n</li>\n<li>\n<p>Zookeeper 客户端常用命令</p>\n</li>\n<li>\n<p>向 Zookeeper 中注册内容</p>\n</li>\n<li>\n<p>从 Zookeeper 中发现内容</p>\n</li>\n<li>\n<p>手写 RPC 框架</p>\n</li>\n</ol>\n<h2 id=\"学习目标\"><a class=\"anchor\" href=\"#学习目标\">#</a> 学习目标</h2>\n<table>\n<thead>\n<tr>\n<th>知识点</th>\n<th>要求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>项目架构变化</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>RPC 简介</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>RMI 实现 RPC</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>HttpClient 实现 RPC</td>\n<td>了解</td>\n</tr>\n<tr>\n<td>Zookeeper 安装</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Zookeeper 客户端常用命令</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>向 Zookeeper 中注册内容</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>从 zookeeper 中发现内容</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>手写 RPC 框架</td>\n<td>掌握</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一-今天学什么为什么讲\"><a class=\"anchor\" href=\"#一-今天学什么为什么讲\">#</a> 一、今天学什么？为什么讲？</h3>\n<p>​\t 现在学习 RPC。后期学习的 Dubbo 是一个 RPC 框架，学习好现在的内容，学习 Dubbo 将会变得容易一些。</p>\n<h3 id=\"二-项目架构变化\"><a class=\"anchor\" href=\"#二-项目架构变化\">#</a> 二、项目架构变化</h3>\n<h4 id=\"1-单体架构\"><a class=\"anchor\" href=\"#1-单体架构\">#</a> 1     单体架构</h4>\n<h5 id=\"11-架构图\"><a class=\"anchor\" href=\"#11-架构图\">#</a> 1.1   架构图</h5>\n<p>​\t单体架构就是一个项目里面包含这个项目中全部代码。一个应用搞定全部功能。</p>\n<p>​\tDNS 服务器可以是单映射，也可以配置多个映射。</p>\n<p><img data-src=\"/2022/10/07/Distribution/RPC/rpc-01.png\" class=\"\"></p>\n<h5 id=\"12-软件代码结构\"><a class=\"anchor\" href=\"#12-软件代码结构\">#</a> 1.2   软件代码结构</h5>\n<p>​\t在单体架构项目中，团队都是通过包 (package) 进行区分每个模块。</p>\n<p>​\t总体包结构：com.msb.*. 分层包。</p>\n<pre><code>项目名：\n  -- com\n    --msb\n      -- common\n        -- utils\n      --user\n        -- controller\n        -- service\n        -- mapper\n      -- sys\n        -- controller\n        -- service\n        -- mapper\n</code></pre>\n<h4 id=\"13-优缺点\"><a class=\"anchor\" href=\"#13-优缺点\">#</a> 1.3   优缺点</h4>\n<h5 id=\"131-优点\"><a class=\"anchor\" href=\"#131-优点\">#</a> 1.3.1    优点</h5>\n<p>​\t部署简单</p>\n<p>​\t维护方便</p>\n<p>​\t成本低</p>\n<h5 id=\"132-缺点\"><a class=\"anchor\" href=\"#132-缺点\">#</a> 1.3.2    缺点</h5>\n<p>​\t当项目规模大、用户访问频率高、并发量大、数据量大时，会大大降低程序执行效率，甚至出现服务器宕机等情况。</p>\n<h4 id=\"14-适用项目\"><a class=\"anchor\" href=\"#14-适用项目\">#</a> 1.4   适用项目</h4>\n<p>传统管理项目，小型互联网项目。</p>\n<h4 id=\"2-分布式架构\"><a class=\"anchor\" href=\"#2-分布式架构\">#</a> 2     分布式架构</h4>\n<h5 id=\"21-架构图简易版\"><a class=\"anchor\" href=\"#21-架构图简易版\">#</a> 2.1   架构图（简易版）</h5>\n<p>​\t分布式架构会把一个项目按照特定要求（多按照模块或功能）拆分成多个项目，每个项目分别部署到不同的服务器上。</p>\n<p><img data-src=\"/2022/10/07/Distribution/RPC/rpc-02.png\" class=\"\"></p>\n<h5 id=\"22-软件代码结构\"><a class=\"anchor\" href=\"#22-软件代码结构\">#</a> 2.2   软件代码结构</h5>\n<pre><code>项目1：\n  --com.msb.xxx\n    -- controller\n    -- service\n    -- mapper\n项目2\n  --com.msb.mmm\n    -- controller\n    -- service\n    -- mapper\n</code></pre>\n<h4 id=\"23-优缺点\"><a class=\"anchor\" href=\"#23-优缺点\">#</a> 2.3   优缺点</h4>\n<h5 id=\"231-优点\"><a class=\"anchor\" href=\"#231-优点\">#</a> 2.3.1    优点</h5>\n<p>​\t增大了系统可用性。减少单点故障，导致整个应用不可用。</p>\n<p>​\t增加重用性。因为模块化，所以重用性更高。</p>\n<p>​\t增加可扩展性。有新的模块增加新的项目即可。</p>\n<p>​\t增加每个模块的负载能力。因为每个模块都是一个项目，所以每个模块的负载能力更强。</p>\n<h5 id=\"232-缺点\"><a class=\"anchor\" href=\"#232-缺点\">#</a> 2.3.2    缺点</h5>\n<p>​\t成本更高。</p>\n<p>​\t架构更加复杂。</p>\n<p>​\t整体响应之间变长，一些业务需要多项目通信后给出结果。</p>\n<p>​\t吞吐量更大。吞吐量 = 请求数 / 秒。</p>\n<h4 id=\"24-待解决问题\"><a class=\"anchor\" href=\"#24-待解决问题\">#</a> 2.4   待解决问题</h4>\n<p>​\t分布式架构中各个模块如何进行通信？</p>\n<p>​\t可以使用 Http 协议，也可以使用 RPC 协议通信，也可以使用其他的通信方式。我们本阶段使用的是 RPC 协议，因为它比 HTTP 更适合项目内部通信。</p>\n<h3 id=\"三-rpc简介\"><a class=\"anchor\" href=\"#三-rpc简介\">#</a> 三、RPC 简介</h3>\n<h4 id=\"1-rfc\"><a class=\"anchor\" href=\"#1-rfc\">#</a> 1     RFC</h4>\n<p>​\tRFC (Request For Comments) 是由互联网工程任务组 (IETF) 发布的文件集。文件集中每个文件都有自己唯一编号，例如：rfc1831。目前 RFC 文件由互联网协会 (Internet Society，ISOC) 赞助发型。</p>\n<p>​\tRPC 就收集到了 rfc 1831 中。可以通过下面网址查看：</p>\n<p>​\t<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvcmZjMTgzMS8=\">https://datatracker.ietf.org/doc/rfc1831/</span></p>\n<h4 id=\"2-rpc\"><a class=\"anchor\" href=\"#2-rpc\">#</a> 2     RPC</h4>\n<p>​\tRPC 在 rfc 1831 中收录 ，RPC（Remote Procedure Call） 远程过程调用协议</p>\n<p>​\tRPC 协议规定允许互联网中一台主机程序调用另一台主机程序，而程序员无需对这个交互过程进行编程。在 RPC 协议中强调当 A 程序调用 B 程序中功能或方法时，A 是不知道 B 中方法具体实现的。</p>\n<p>​\tRPC 是上层协议，底层可以基于 TCP 协议，也可以基于 HTTP 协议。一般我们说 RPC 都是基于 RPC 的具体实现，如：Dubbo 框架。从广义上讲只要是满足网络中进行通讯调用都统称为 RPC，甚至 HTTP 协议都可以说是 RPC 的具体实现，但是具体分析看来 RPC 协议要比 HTTP 协议更加高效，基于 RPC 的框架功能更多。</p>\n<p>​\tRPC 协议是基于分布式架构而出现的，所以 RPC 在分布式项目中有着得天独厚的优势。</p>\n<h4 id=\"3-rpc和http对比\"><a class=\"anchor\" href=\"#3-rpc和http对比\">#</a> 3     RPC 和 HTTP 对比</h4>\n<h5 id=\"31-具体实现\"><a class=\"anchor\" href=\"#31-具体实现\">#</a> 3.1   具体实现</h5>\n<p>​\tRPC：可以基于 TCP 协议，也可以基于 HTTP 协议。</p>\n<p>​\tHTTP：基于 HTTP 协议</p>\n<h5 id=\"32-效率\"><a class=\"anchor\" href=\"#32-效率\">#</a> 3.2   效率</h5>\n<p>​\tRPC：自定义具体实现可以减少很多无用的报文内容，使得报文体积更小。</p>\n<p>​\tHTTP：如果是 HTTP 1.1 报文中很多内容都是无用的。如果是 HTTP2.0 以后和 RPC 相差不大，比 RPC 少的可能就是一些服务治理等功能。</p>\n<h5 id=\"33-连接方式\"><a class=\"anchor\" href=\"#33-连接方式\">#</a> 3.3   连接方式</h5>\n<p>​\tRPC：长连接支持。</p>\n<p>​\tHTTP：每次连接都是<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbmV2ZXJtb3Jld2FuZy9wLzg5MDY4MzMuaHRtbA==\">三次握手四次挥手</span>。</p>\n<h5 id=\"34-性能\"><a class=\"anchor\" href=\"#34-性能\">#</a> 3.4   性能</h5>\n<p>​\tRPC 可以基于很多序列化方式。如：thrift</p>\n<p>​\tHTTP 主要是通过 JSON，序列化和反序列效率更低。</p>\n<h5 id=\"35-注册中心\"><a class=\"anchor\" href=\"#35-注册中心\">#</a> 3.5   注册中心</h5>\n<p>​\tRPC ：一般 RPC 框架都带有注册中心。</p>\n<p>​\tHTTP：都是直连。</p>\n<h5 id=\"36-负载均衡\"><a class=\"anchor\" href=\"#36-负载均衡\">#</a> 3.6   负载均衡</h5>\n<p>​\tRPC：绝大多数 RPC 框架都带有负载均衡测量。</p>\n<p>​\tHTTP：一般都需要借助第三方工具。如：nginx</p>\n<h5 id=\"37-综合结论\"><a class=\"anchor\" href=\"#37-综合结论\">#</a> 3.7   综合结论</h5>\n<p>​\tRPC 框架一般都带有丰富的服务治理等功能，更适合企业内部接口调用。而 HTTP 更适合多平台之间相互调用。</p>\n<h3 id=\"四-httpclient实现rpc\"><a class=\"anchor\" href=\"#四-httpclient实现rpc\">#</a> 四、HttpClient 实现 RPC</h3>\n<h4 id=\"1-httpclient简介\"><a class=\"anchor\" href=\"#1-httpclient简介\">#</a> 1     HttpClient 简介</h4>\n<p>​\t在 JDK 中 java.net 包下提供了用户 HTTP 访问的基本功能，但是它缺少灵活性或许多应用所需要的功能。</p>\n<p>​\tHttpClient 起初是 Apache Jakarta Common 的子项目。用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本。2007 年成为顶级项目。</p>\n<p>​\t通俗解释：HttpClient 可以实现使用 Java 代码完成标准 HTTP 请求及响应。</p>\n<h4 id=\"2-代码实现\"><a class=\"anchor\" href=\"#2-代码实现\">#</a> 2     代码实现</h4>\n<h5 id=\"21-服务端\"><a class=\"anchor\" href=\"#21-服务端\">#</a> 2.1   服务端</h5>\n<p>​\t新建项目 HttpClientServer</p>\n<h5 id=\"211-新建控制器\"><a class=\"anchor\" href=\"#211-新建控制器\">#</a> 2.1.1    新建控制器</h5>\n<p>com.msb.controller.DemoController</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"demo\"</span><span class=\"token operator\">+</span>param<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"212-新建启动器\"><a class=\"anchor\" href=\"#212-新建启动器\">#</a> 2.1.2    新建启动器</h5>\n<p>​\t新建启动器</p>\n<p>com.msb.HttpClientServerApplication</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpClientServerApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpClientServerApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"22-客户端\"><a class=\"anchor\" href=\"#22-客户端\">#</a> 2.2   客户端</h4>\n<p>​\t新建 HttpClientDemo 项目</p>\n<h5 id=\"221-添加依赖\"><a class=\"anchor\" href=\"#221-添加依赖\">#</a> 2.2.1    添加依赖</h5>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.httpcomponents<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>httpclient<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.5.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h5 id=\"222-新建类\"><a class=\"anchor\" href=\"#222-新建类\">#</a> 2.2.2    新建类</h5>\n<p>​\t新建 com.msb.HttpClientDemo，编写主方法。</p>\n<h6 id=\"2221-使用get方法访问\"><a class=\"anchor\" href=\"#2221-使用get方法访问\">#</a> 2.2.2.1 使用 GET 方法访问</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t<span class=\"token comment\">// 创建 http 工具（理解成：浏览器） 发起请求，解析响应</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">CloseableHttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClients</span><span class=\"token punctuation\">.</span><span class=\"token function\">createDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 请求路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">URIBuilder</span> uriBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URIBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        uriBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">addParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"get123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 创建 HttpGet 请求对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">HttpGet</span> get <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpGet</span><span class=\"token punctuation\">(</span>uriBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 创建响应对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">CloseableHttpResponse</span> response <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 由于响应体是字符串，因此把 HttpEntity 类型转换为字符串类型，并设置字符编码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 输出结果</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">URISyntaxException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"2222-使用post方式访问\"><a class=\"anchor\" href=\"#2222-使用post方式访问\">#</a> 2.2.2.2 使用 POST 方式访问</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpClientDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        \t<span class=\"token comment\">// 创建 http 工具（理解成：浏览器） 发起请求，解析响应</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">CloseableHttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClients</span><span class=\"token punctuation\">.</span><span class=\"token function\">createDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 创建 HttpPOST 请求对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">HttpPost</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 所有请求参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">NameValuePair</span><span class=\"token punctuation\">></span></span> params <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            params<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BasicNameValuePair</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"param\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 创建 HttpEntity 接口的文本实现类的对象，放入参数并设置编码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">HttpEntity</span> httpEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlEncodedFormEntity</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 放入到 HttpPost 对象中</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            post<span class=\"token punctuation\">.</span><span class=\"token function\">setEntity</span><span class=\"token punctuation\">(</span>httpEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 创建响应对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">CloseableHttpResponse</span> response <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 由于响应体是字符串，因此把 HttpEntity 类型转换为字符串类型</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 输出结果</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 释放资源</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3-jackson用法\"><a class=\"anchor\" href=\"#3-jackson用法\">#</a> 3. Jackson 用法</h4>\n<h5 id=\"31-把对象转换为json字符串\"><a class=\"anchor\" href=\"#31-把对象转换为json字符串\">#</a> 3.1   把对象转换为 json 字符串</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">People</span> peo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>peo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"32-把json字符串转换为对象\"><a class=\"anchor\" href=\"#32-把json字符串转换为对象\">#</a> 3.2   把 json 字符串转换为对象</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">People</span> peo <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"33-把json字符串转换为list集合\"><a class=\"anchor\" href=\"#33-把json字符串转换为list集合\">#</a> 3.3   把 json 字符串转换为 List 集合</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">JavaType</span> javaType <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">getTypeFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">constructParametricType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">People</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> javaType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"4-httpclient请求包含json\"><a class=\"anchor\" href=\"#4-httpclient请求包含json\">#</a> 4     HttpClient 请求包含 JSON</h4>\n<h5 id=\"41-java代码实现\"><a class=\"anchor\" href=\"#41-java代码实现\">#</a> 4.1   java 代码实现</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HttpClientDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">CloseableHttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClients</span><span class=\"token punctuation\">.</span><span class=\"token function\">createDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">HttpPost</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpPost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">HttpEntity</span> httpEntity<span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"&#123;&#125;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">StringEntity</span> entity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringEntity</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            post<span class=\"token punctuation\">.</span><span class=\"token function\">setEntity</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">CloseableHttpResponse</span> response <span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> <span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testInputSteam</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">CloseableHttpClient</span> httpClient <span class=\"token operator\">=</span> <span class=\"token class-name\">HttpClients</span><span class=\"token punctuation\">.</span><span class=\"token function\">createDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">URIBuilder</span> uriBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URIBuilder</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:8080/demo4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token class-name\">HttpPost</span> httpPost <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpPost</span><span class=\"token punctuation\">(</span>uriBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 创建集合</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            users<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            users<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 将集合对象转化成 JSON 字符串</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">String</span> <span class=\"token class-name\">UserJson</span> <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserJson</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">StringEntity</span> stringEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringEntity</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserJson</span><span class=\"token punctuation\">,</span> \t\t  <span class=\"token class-name\">ContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">APPLICATION_JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 设置请求体</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            httpPost<span class=\"token punctuation\">.</span><span class=\"token function\">setEntity</span><span class=\"token punctuation\">(</span>stringEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">CloseableHttpResponse</span> response<span class=\"token operator\">=</span> httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>httpPost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token class-name\">EntityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            response<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            httpClient<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"5-控制器接口参数\"><a class=\"anchor\" href=\"#5-控制器接口参数\">#</a> 5     控制器接口参数</h4>\n<p>​\t@RequestBody 把请求体中流数据转换为指定的对象。多用在请求参数是 json 数据且请求的 Content-Type=”application/json”</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demo4</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">People</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"6-ajax发送json参数写法\"><a class=\"anchor\" href=\"#6-ajax发送json参数写法\">#</a> 6   Ajax 发送 json 参数写法</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var json = '[&#123;\"id\":123,\"name\":\"msb\"&#125;,&#123;\"id\":123,\"name\":\"mashibing\"&#125;]';</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> $.ajax(&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     url:'/demo5',</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     type:'post',</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     success:function(data)&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         alert(data);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         for(var i = 0 ;i&lt;data.length;i++)&#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             alert(data[i].id +\"  \"+data[i].name);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         &#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     &#125;,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     contentType:'application/json',//请求体中内容类型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     dataType:'json',//响应内容类型。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     data:json</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> &#125;);</pre></td></tr></table></figure><h4 id=\"7-跨域\"><a class=\"anchor\" href=\"#7-跨域\">#</a> 7     跨域</h4>\n<p>​\t跨域：协议、ip、端口中只要有一个不同就是跨域请求。</p>\n<p>​\t同源策略：浏览器默认只允许 ajax 访问同源 (协议、ip、端口都相同) 内容。</p>\n<p>​\t解决同源策略：</p>\n<p>​\t在控制器接口上添加 @CrossOrigin。表示允许跨域。本质在响应头中添加 Access-Control-Allow-Origin: *</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>var json = '[&#123;\"id\":123,\"name\":\"msb\"&#125;,&#123;\"id\":456,\"name\":\"mashibing\"&#125;]';</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> $.ajax(&#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     url:'/demo5',</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     type:'post',</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     success:function(data)&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         alert(data);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         for(var i = 0 ;i&lt;data.length;i++)&#123;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             alert(data[i].id +\"  \"+data[i].name);</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         &#125;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     &#125;,</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     contentType:'application/json',//请求体中内容类型</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     dataType:'json',//响应内容类型。</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     data:json</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> &#125;);</pre></td></tr></table></figure><h3 id=\"五-rmi实现rpc\"><a class=\"anchor\" href=\"#五-rmi实现rpc\">#</a> 五、RMI 实现 RPC</h3>\n<h4 id=\"1-rmi简-介\"><a class=\"anchor\" href=\"#1-rmi简-介\">#</a> 1     RMI 简 介</h4>\n<p>​\tRMI (Remote Method Invocation) 远程方法调用。</p>\n<p>​\tRMI 是从 JDK1.2 推出的功能，它可以实现在一个 Java 应用中可以像调用本地方法一样调用另一个服务器中 Java 应用（JVM）中的内容。</p>\n<p>​\tRMI 是 Java 语言的远程调用，无法实现跨语言。</p>\n<h4 id=\"2-执行流程\"><a class=\"anchor\" href=\"#2-执行流程\">#</a> 2     执行流程</h4>\n<p><img data-src=\"/2022/10/07/Distribution/RPC/rpc-03.png\" class=\"\"></p>\n<p>​\tRegistry (注册表) 是放置所有服务器对象的命名空间。 每次服务端创建一个对象时，它都会使用 bind () 或 rebind () 方法注册该对象。 这些是使用称为绑定名称的唯一名称注册的。</p>\n<p>​\t要调用远程对象，客户端需要该对象的引用。即通过服务端绑定的名称从注册表中获取对象 (lookup () 方法)。</p>\n<h4 id=\"3-api介绍\"><a class=\"anchor\" href=\"#3-api介绍\">#</a> 3     API 介绍</h4>\n<h5 id=\"31-remote\"><a class=\"anchor\" href=\"#31-remote\">#</a> 3.1   Remote</h5>\n<p>​\tjava.rmi.Remote 定义了此接口为远程调用接口。如果接口被外部调用，需要继承此接口。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Remote</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"32-remoteexception\"><a class=\"anchor\" href=\"#32-remoteexception\">#</a> 3.2   RemoteException</h4>\n<p>​\tjava.rmi.RemoteException</p>\n<p>​\t继承了 Remote 接口的接口中，如果方法是允许被远程调用的，需要抛出此异常。</p>\n<h4 id=\"33-unicastremoteobject\"><a class=\"anchor\" href=\"#33-unicastremoteobject\">#</a> 3.3   UnicastRemoteObject</h4>\n<p>​\tjava.rmi.server.UnicastRemoteObject</p>\n<p>​\t此类实现了 Remote 接口和 Serializable 接口。</p>\n<p>​\t自定义接口实现类除了实现自定义接口还需要继承此类。</p>\n<h4 id=\"34-locateregistry\"><a class=\"anchor\" href=\"#34-locateregistry\">#</a> 3.4   LocateRegistry</h4>\n<p>​\tjava.rmi.registry.LocateRegistry</p>\n<p>​\t可以通过 LocateRegistry 在本机上创建 Registry，通过特定的端口就可以访问这个 Registry。</p>\n<h4 id=\"35-naming\"><a class=\"anchor\" href=\"#35-naming\">#</a> 3.5   Naming</h4>\n<p>​\tjava.rmi.Naming</p>\n<p>​\tNaming 定义了发布内容可访问 RMI 名称。也是通过 Naming 获取到指定的远程方法。</p>\n<h4 id=\"4-代码实现\"><a class=\"anchor\" href=\"#4-代码实现\">#</a> 4     代码实现</h4>\n<h5 id=\"41-服务端创建\"><a class=\"anchor\" href=\"#41-服务端创建\">#</a> 4.1   服务端创建</h5>\n<p>​\t创建 RmiServer 项目</p>\n<h5 id=\"411-编写接口\"><a class=\"anchor\" href=\"#411-编写接口\">#</a> 4.1.1    编写接口</h5>\n<p>​\tcom.msb.service.DemoService 编写</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DemoService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Remote</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> demo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"412-编写实现类\"><a class=\"anchor\" href=\"#412-编写实现类\">#</a> 4.1.2    编写实现类</h5>\n<p>​\tcom.msb.service.impl.DemoServiceImpl 编写。</p>\n<p>​\t注意：构造方法是 public 的。默认生成 protected</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UnicastRemoteObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DemoService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DemoServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> demo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> demo<span class=\"token operator\">+</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"413-编写主方法\"><a class=\"anchor\" href=\"#413-编写主方法\">#</a> 4.1.3    编写主方法</h5>\n<p>​\t编写 com.msb.DemoServer 类，生成主方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UnicastRemoteObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DemoService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DemoServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> demo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> demo<span class=\"token operator\">+</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoStart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">//1 创建接口实现类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">RmiDemo</span> rmiDemo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RmiDemoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">//2 创建注册表</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">LocateRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">createRegistry</span><span class=\"token punctuation\">(</span><span class=\"token number\">8099</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">//3 绑定服务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">Naming</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rmi://localhost:8099/rmiDemo\"</span><span class=\"token punctuation\">,</span>rmiDemo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器启动！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RemoteException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AlreadyBoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"414-运行项目\"><a class=\"anchor\" href=\"#414-运行项目\">#</a> 4.1.4    运行项目</h5>\n<p>​\t运行后项目，项目一直处于启动状态，表示可以远程访问此项目中的远程方法。</p>\n<h4 id=\"42-创建客户端代码\"><a class=\"anchor\" href=\"#42-创建客户端代码\">#</a> 4.2   创建客户端代码</h4>\n<p>​\t创建项目 RmiClient</p>\n<h5 id=\"421-复制服务端接口\"><a class=\"anchor\" href=\"#421-复制服务端接口\">#</a> 4.2.1    复制服务端接口</h5>\n<p>​\t把服务端 com.msb.service.DemoService 粘贴到项目中</p>\n<h5 id=\"422-创建主方法类\"><a class=\"anchor\" href=\"#422-创建主方法类\">#</a> 4.2.2    创建主方法类</h5>\n<p>​\t新建 com.msb.DemoClient</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UnicastRemoteObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DemoService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DemoServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> demo<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> demo<span class=\"token operator\">+</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"六-zookeeper安装\"><a class=\"anchor\" href=\"#六-zookeeper安装\">#</a> 六、Zookeeper 安装</h3>\n<h4 id=\"1-zookeeper简介\"><a class=\"anchor\" href=\"#1-zookeeper简介\">#</a> 1     Zookeeper 简介</h4>\n<p>​\tzookeeper 分布式管理软件。常用它做注册中心（依赖 zookeeper 的发布 / 订阅功能）、配置文件中心、分布式锁配置、集群管理等。</p>\n<p>​\tzookeeper 一共就有两个版本。主要使用的是 java 语言写的。</p>\n<h4 id=\"2-安装\"><a class=\"anchor\" href=\"#2-安装\">#</a> 2     安装</h4>\n<h5 id=\"21-上传压缩文件\"><a class=\"anchor\" href=\"#21-上传压缩文件\">#</a> 2.1   上传压缩文件</h5>\n<p>​\t上传到 /usr/local/tmp 中</p>\n<h4 id=\"22-解压\"><a class=\"anchor\" href=\"#22-解压\">#</a> 2.2   解压</h4>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> zxf apache-zookeeper-3.5.5-bin.tar.gz</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span> apache-zookeeper-3.5.5-bin <span class=\"token punctuation\">..</span>/zookeeper</pre></td></tr></table></figure><h4 id=\"23-新建data目录\"><a class=\"anchor\" href=\"#23-新建data目录\">#</a> 2.3   新建 data 目录</h4>\n<p>进入到 zookeeper 中</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/zookeeper</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">mkdir</span> data</pre></td></tr></table></figure><h4 id=\"24-修改配置文件\"><a class=\"anchor\" href=\"#24-修改配置文件\">#</a> 2.4   修改配置文件</h4>\n<p>进入 conf 中</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cp</span> zoo_sample.cfg zoo.cfg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">vim</span> zoo.cfg</pre></td></tr></table></figure><p>修改 dataDir 为 data 文件夹路径</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">dataDir</span><span class=\"token operator\">=</span>/usr/local/zookeeper/data</pre></td></tr></table></figure><h4 id=\"25-启动zookeeper\"><a class=\"anchor\" href=\"#25-启动zookeeper\">#</a> 2.5   启动 zookeeper</h4>\n<p>进入 bin 文件夹</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr/local/zookeeper/bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./zkServer.sh start</pre></td></tr></table></figure><p>通过 status 查看启动状态。稍微有个等待时间</p>\n<p># ./zkServer.sh status</p>\n<h3 id=\"六-zookeeper安装docker\"><a class=\"anchor\" href=\"#六-zookeeper安装docker\">#</a> 六、Zookeeper 安装 (Docker)</h3>\n<p><strong>资料：</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2luZ2tvby9wLzg3MzI0NDguaHRtbA==\">https://www.cnblogs.com/kingkoo/p/8732448.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2ODA4NzQ2NjY/ZnJvbT1zZWFyY2gmYW1wO3NlaWQ9MTYyOTE0NTAyNTIxMTk5OTEwNCZhbXA7c3BtX2lkX2Zyb209MzMzLjMzNy4wLjA=\">https://www.bilibili.com/video/av80874666?from=search&amp;seid=1629145025211999104&amp;spm_id_from=333.337.0.0</span></p>\n<h4 id=\"1-zookeeper简介-2\"><a class=\"anchor\" href=\"#1-zookeeper简介-2\">#</a> 1     Zookeeper 简介</h4>\n<p>​\tzookeeper 分布式管理软件。常用它做注册中心（依赖 zookeeper 的发布 / 订阅功能）、配置文件中心、分布式锁配置、集群管理等。</p>\n<p>​\tzookeeper 一共就有两个版本。主要使用的是 java 语言写的。</p>\n<h4 id=\"2-安装-2\"><a class=\"anchor\" href=\"#2-安装-2\">#</a> 2     安装</h4>\n<h5 id=\"21-拉取镜像\"><a class=\"anchor\" href=\"#21-拉取镜像\">#</a> 2.1   拉取镜像</h5>\n<ul>\n<li>\n<p>自定义 zookeeper 目录</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> /root/zookeeper</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mkdir</span> /root/zookeeper/data <span class=\"token comment\">#原因参照上面 - 在 docker 中 data 其实也不用在宿主机行自己生成 (目前如此)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#仓库官网查看版本或者用命令直接查</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">docker</span> search zookeeper</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#拉取特定版本（3.5）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">docker</span> pull zookeeper:3.5</pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"22-创建并启动容器\"><a class=\"anchor\" href=\"#22-创建并启动容器\">#</a> 2.2 创建并启动容器</h4>\n<p>​\t<strong>注：就目前而且 好像直接在 docker 中使用 zookeeper 不需要过多的配置，直接用命令创建吧，下面的解释先不看，具体原因后面补充</strong></p>\n<p>命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> zookeeper <span class=\"token parameter variable\">-v</span> /root/zookeeper/data:/data <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2181</span>:2181 <span class=\"token parameter variable\">--restart</span> always zookeeper:3.5</pre></td></tr></table></figure><ul>\n<li><code>--restart always</code> ：始终重启</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWdlb3ZiL3AvMTUzMjg3OTYuaHRtbA==\">https://www.cnblogs.com/ageovb/p/15328796.html</span></li>\n</ul>\n<p><strong>解释</strong></p>\n<ul>\n<li>\n<p>1、这里为啥只挂载了 data 目录 --》因为当我们 没有直接的安装压缩包时，我们的就没有配置文件，所以我们直接生成，容器中就回自动生成 conf 文件，其中就有我们需要的 一系列配置文件，我们第一次创建的时候就可以如此，我们在进<strong>行配置文件的修改完成</strong>后，要将所有配置文件放到我们  bash 目录中的 conf 文件中去。</p>\n</li>\n<li>\n<p>2、第一次进入容器</p>\n<ul>\n<li>\n<p>在 bash 目录下进入 bin 目录然后输入开启客户端命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkCli.sh</pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>3、第二次进入容器</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zookeeper /bin/bash  <span class=\"token parameter variable\">-p</span>    端口号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zookeeper zkCli.sh</pre></td></tr></table></figure></li>\n</ul>\n<p><em><em>只看到这就可</em>，容器创建成功就可以直接用了，还没有出现问题。有待补充</em> *</p>\n<h4 id=\"23-修改配置文件\"><a class=\"anchor\" href=\"#23-修改配置文件\">#</a> 2.3   修改配置文件</h4>\n<ul>\n<li>配置文件来源\n<ul>\n<li>1、可以去我们的资料中直接解压出<strong> conf</strong> 目录粘贴到我们的 zookeeper 目录中去</li>\n<li>2、可以直接进行第 3 步，完事之后直接会在容器中生成。找到 conf 文件，修改其中的 zoo.cfg 文件，</li>\n</ul>\n</li>\n</ul>\n<p>进入容器后，找到 conf 中的 **zoo.cfg 文件，接下来就是修改 <strong>dataDir</strong> 路径为容器中的 data 文件目录。</p>\n<p>前提是要下载 vim ，因为容器中没有，命令是：</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">vim</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">cd</span> conf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 没有 zoo.cfg 就先拷贝 zoo_sample.cfg 两个其实是一个文件，内容相同</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#cp zoo_sample.cfg zoo.cfg</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">vim</span> zoo.cfg</pre></td></tr></table></figure><p>修改 dataDir 为 data 文件夹路径</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">dataDir</span><span class=\"token operator\">=</span>/usr/local/zookeeper/data</pre></td></tr></table></figure><h3 id=\"注docker集群搭建在solr笔记中\"><a class=\"anchor\" href=\"#注docker集群搭建在solr笔记中\">#</a> 注：docker 集群搭建在 solr 笔记中</h3>\n<h3 id=\"七-zookeeper客户端常用命令\"><a class=\"anchor\" href=\"#七-zookeeper客户端常用命令\">#</a> 七、Zookeeper 客户端常用命令</h3>\n<p>​\t进入到./zkCli.sh 命令行工具后，可以使用下面常用命令</p>\n<h4 id=\"1-ls\"><a class=\"anchor\" href=\"#1-ls\">#</a> 1    ls</h4>\n<p>​\tls [-s][-R] /path</p>\n<p>​\t-s 详细信息，替代老版的 ls2</p>\n<p>​\t-R 当前目录和子目录中内容都罗列出来</p>\n<p>​\t例如：ls -R / 显示根目录下所有内容</p>\n<h4 id=\"2-create\"><a class=\"anchor\" href=\"#2-create\">#</a> 2     create</h4>\n<p>​\tcreate /path [data]</p>\n<p>​\t[data] 包含内容</p>\n<p>​\t创建指定路径信息</p>\n<p>​\t例如：create /demo 创建 /demo</p>\n<h4 id=\"3-get\"><a class=\"anchor\" href=\"#3-get\">#</a> 3     get</h4>\n<p>​\tget [-s] /path</p>\n<p>​\t[-s] 详细信息</p>\n<p>​\t查看指定路径下内容。</p>\n<p>​\t例如： get -s /demo</p>\n<p><img data-src=\"/2022/10/07/Distribution/RPC/rpc-04.png\" class=\"\"></p>\n<p>​\tnull: 存放的数据</p>\n<p>​\tcZxid: 创建时 zxid (znode 每次改变时递增的事务 id)</p>\n<p>​\tctime: 创建时间戳</p>\n<p>​\tmZxid: 最近一次更新的 zxid</p>\n<p>​\tmtime: 最近一次更新的时间戳</p>\n<p>​\tpZxid: 子节点的 zxid</p>\n<p>​\tcversion: 子节点更新次数</p>\n<p>​\tdataversion: 节点数据更新次数</p>\n<p>​\taclVersion: 节点 ACL (授权信息) 的更新次数</p>\n<p>​\tephemeralOwner: 如果该节点为 ephemeral 节点 (临时，生命周期与 session 一样), ephemeralOwner 值表示与该节点绑定的 session id. 如果该节点不是 ephemeral 节点，ephemeralOwner 值为 0.</p>\n<p>​\tdataLength: 节点数据字节数</p>\n<p>​\tnumChildren: 子节点数量</p>\n<h4 id=\"4-set\"><a class=\"anchor\" href=\"#4-set\">#</a> 4     set</h4>\n<p>​\tset /path data</p>\n<p>​\t设置节点内容</p>\n<h4 id=\"5-delete\"><a class=\"anchor\" href=\"#5-delete\">#</a> 5     delete</h4>\n<p>​\tdelete /path</p>\n<p>​\t删除节点</p>\n<h3 id=\"八-向zookeeper中注册内容\"><a class=\"anchor\" href=\"#八-向zookeeper中注册内容\">#</a> 八、向 Zookeeper 中注册内容</h3>\n<p>​\t新建项目 ZookeeperClient</p>\n<h4 id=\"1-创建demo\"><a class=\"anchor\" href=\"#1-创建demo\">#</a> 1     创建 /demo</h4>\n<p>​\t使用 zookeeper 的客户端命令工具创建 /demo</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./zkCli.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>create /demos</pre></td></tr></table></figure><h4 id=\"2-添加依赖\"><a class=\"anchor\" href=\"#2-添加依赖\">#</a> 2     添加依赖</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.zookeeper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>zookeeper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.5.5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"3-编写代码\"><a class=\"anchor\" href=\"#3-编写代码\">#</a> 3     编写代码</h4>\n<p>​\t创建类 com.msb.MyApp。</p>\n<p>​\tZooDefs.Ids.OPEN_ACL_UNSAFE 表示权限。</p>\n<p>​\tCreateMode.PERSISTENT_SEQUENTIAL 永久存储，文件内容编号递增。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SendContent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>             * 创建 ZooKeeper 对象</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>             * param1: zookeeper_IP + 端口号</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>             * param2: 访问超时设置 --- 时间设置长一点</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>             * param3: 通过观察者模式发出访问回复，当连接成功后，编写成功信息</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">ZooKeeper</span> zooKeeper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token string\">\"192.168.88.128:2181\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> watchedEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取链接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>             * 发送内容  向 zookeeper 服务器中</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>             * param1: 发送的文件</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>             * param2: 发送的内容 (要转变成 Bytes [])</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>             * param3: 权限</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>             * param4: 内容的模式</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> zooKeeper<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token string\">\"/demos/rmi_address\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token string\">\"rmi:localhost:8080/demoService\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">ZooDefs<span class=\"token punctuation\">.</span>Ids</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN_ACL_UNSAFE</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT_SEQUENTIAL</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result  -> \"</span><span class=\"token operator\">+</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeeperException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"4-查看上传数据\"><a class=\"anchor\" href=\"#4-查看上传数据\">#</a> 4     查看上传数据</h4>\n<p>​\tls -R /            : 查看列表</p>\n<p>​\tget  /demo/nn0000000002     : 查看内容</p>\n<h3 id=\"九-从zookeeper中发现内容\"><a class=\"anchor\" href=\"#九-从zookeeper中发现内容\">#</a> 九、    从 zookeeper 中发现内容</h3>\n<p>​\t在原有项目中新建一个类，类中编写主方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ZooKeeper</span> zookeeper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.32.128:2181\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> watchedEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 获取列表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> zookeeper<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> child <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> zookeeper<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo/\"</span> <span class=\"token operator\">+</span> child<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeeperException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"十-手写rpc框架\"><a class=\"anchor\" href=\"#十-手写rpc框架\">#</a> 十、手写 RPC 框架</h3>\n<p>​\t使用 Zookeeper 作为注册中心，RMI 作为连接技术，手写 RPC 框架。</p>\n<h4 id=\"1-创建项目parentdemo\"><a class=\"anchor\" href=\"#1-创建项目parentdemo\">#</a> 1     创建项目 ParentDemo</h4>\n<p>​\t创建父项目 ParentDemo。</p>\n<p>​\t包含 3 个聚合子项目。</p>\n<p>​\tpojo: service 中需要的实体类</p>\n<p>​\tservice：包含被 serviceimpl 和 consumer 依赖的接口。</p>\n<p>​\tserviceimpl:provider 提供的服务内容</p>\n<p>​\tconsumer：消费者，调用服务内容。</p>\n<h4 id=\"2-在父项目中添加依赖\"><a class=\"anchor\" href=\"#2-在父项目中添加依赖\">#</a> 2     在父项目中添加依赖</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ZooKeeper</span> zookeeper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.32.128:2181\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> watchedEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 获取列表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> zookeeper<span class=\"token punctuation\">.</span><span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> child <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> zookeeper<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo/\"</span> <span class=\"token operator\">+</span> child<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeeperException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"3-创建service项目\"><a class=\"anchor\" href=\"#3-创建service项目\">#</a> 3     创建 service 项目</h4>\n<h4 id=\"4-创建demoservice接口\"><a class=\"anchor\" href=\"#4-创建demoservice接口\">#</a> 4     创建 DemoService 接口</h4>\n<p>​\t创建 com.msb.DemoService</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DemoService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Remote</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> param<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"5-创建serviceimpl项目\"><a class=\"anchor\" href=\"#5-创建serviceimpl项目\">#</a> 5     创建 serviceimpl 项目</h4>\n<p>​\t此项目编写接口具体实现，RMI 服务发布和把信息发送到 Zookeeper 中。</p>\n<p>​\t项目结构如下：</p>\n<p>​\t在 pom.xml 中添加对 service 项目的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>service<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.msb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"6-创建demoserviceimpl\"><a class=\"anchor\" href=\"#6-创建demoserviceimpl\">#</a> 6     创建 DemoServiceImpl</h4>\n<p>​\t创建 com.bjsxt.service.impl.DemoServiceImpl</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoServiceImpl</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UnicastRemoteObject</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DemoService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DemoServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> param<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">RemoteException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> param<span class=\"token operator\">+</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"7-创建rmirun\"><a class=\"anchor\" href=\"#7-创建rmirun\">#</a> 7     创建 RmiRun</h4>\n<p>​\t创建 com.msb.RmiRun。实现 RMI 服务的发布和 Zookeeper 消息的发布。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RmiRun</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">DemoService</span> demoService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DemoServiceImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">LocateRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">createRegistry</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"rmi://localhost:8888/demoService\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">Naming</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>demoService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">ZooKeeper</span> zookeeper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.32.128:2181\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> watchedEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">String</span> content <span class=\"token operator\">=</span> zookeeper<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo/demoService\"</span><span class=\"token punctuation\">,</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ZooDefs<span class=\"token punctuation\">.</span>Ids</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN_ACL_UNSAFE</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">CreateMode</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PERSISTENT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务发布成功。。。。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AlreadyBoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeeperException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"8-创建consumer项目\"><a class=\"anchor\" href=\"#8-创建consumer项目\">#</a> 8     创建 Consumer 项目</h4>\n<p>​\t新建 consumer 项目，此项目需要从 zookeeper 中获取 rmi 信息，并调用 rmi 服务</p>\n<p>​\t在 pom.xml 中添加对 service 项目的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>service<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.msb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"9-创建接口和实现类\"><a class=\"anchor\" href=\"#9-创建接口和实现类\">#</a> 9     创建接口和实现类</h4>\n<p>​\t创建 com.msb.service.ConsumerService 接口</p>\n<p>​\t创建 com.msb.service.impl.ConsumerServiceImpl 实现类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ConsumerService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> <span class=\"token function\">consumerService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConsumerService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">consumerService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> param<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">ZooKeeper</span> zookeeper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZooKeeper</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.32.128:2181\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Watcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WatchedEvent</span> watchedEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> urlByte <span class=\"token operator\">=</span> zookeeper<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo/demoService\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">DemoService</span> demoService <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoService</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Naming</span><span class=\"token punctuation\">.</span><span class=\"token function\">lookup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>urlByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> demoService<span class=\"token punctuation\">.</span><span class=\"token function\">demo</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">KeeperException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NotBoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"10-创建控制器\"><a class=\"anchor\" href=\"#10-创建控制器\">#</a> 10  创建控制器</h4>\n<p>​\t创建 com.msb.controller.DemoController 控制器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ConsumerService</span> consumerService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> consumerService<span class=\"token punctuation\">.</span><span class=\"token function\">consumerService</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"11-创建启动器\"><a class=\"anchor\" href=\"#11-创建启动器\">#</a> 11  创建启动器</h4>\n<p>​\t创建 com.msb.ConsumerApplication</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConsumerApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"12-测试\"><a class=\"anchor\" href=\"#12-测试\">#</a> 12  测试</h4>\n<p>​\t在浏览器输入：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlbW8/cGFyYW09ZGVtbw==\">http://localhost:8080/demo?param=demo</span></p>\n<p>​\t观察结果是否是：demo123</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "分布式",
                "RPC"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Distribution/RabbitMQ/",
            "url": "http://example.com/2022/10/07/Distribution/RabbitMQ/",
            "title": "RabbitMQ",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h2 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> <strong>主要内容</strong></h2>\n<ol>\n<li>\n<p>AMQP 简介</p>\n</li>\n<li>\n<p>RabbitMQ 简介</p>\n</li>\n<li>\n<p>RabbitMQ 原理</p>\n</li>\n<li>\n<p>Erlang 安装</p>\n</li>\n<li>\n<p>安装 RabbitMQ</p>\n</li>\n<li>\n<p>RabbitMQ 账户管理</p>\n</li>\n<li>\n<p>交换器</p>\n</li>\n</ol>\n<h2 id=\"学习目标\"><a class=\"anchor\" href=\"#学习目标\">#</a> <strong>学习目标</strong></h2>\n<table>\n<thead>\n<tr>\n<th>知识点</th>\n<th>要求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AMQP 简介</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>RabbmitMQ 简介</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>RabbitMQ 原理</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Erlang 安装</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>安装 RabbitMQ</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>RabbitMQ 账户管理</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>交换器</td>\n<td>掌握</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一-amqp简介\"><a class=\"anchor\" href=\"#一-amqp简介\">#</a> 一、 <strong>AMQP 简介</strong></h3>\n<h4 id=\"1-amqp是什么\"><a class=\"anchor\" href=\"#1-amqp是什么\">#</a> 1 <strong>AMQP 是什么？</strong></h4>\n<p>​\tAMQP (Advanced Message Queuing Protocol, 高级消息队列协议) 是进程之间传递异步消息的网络协议。</p>\n<h3 id=\"2-amqp工作过程\"><a class=\"anchor\" href=\"#2-amqp工作过程\">#</a> 2 <strong>AMQP 工作过程</strong></h3>\n<p>​\t发布者 (Publisher) 发布消息 (Message), 经过交换机 (Exchange)，交换机根据路由规则将收到消息分发给交换机绑定的队列 (Queue)，最后 AMQP 代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。</p>\n<p><img data-src=\"/2022/10/07/Distribution/RabbitMQ/RabbitMQ-01.jpg\" class=\"\"></p>\n<h3 id=\"3-队列\"><a class=\"anchor\" href=\"#3-队列\">#</a> 3 <strong>队列</strong></h3>\n<p>​\t队列是数据结构中概念。数据存储在一个队列中，数据是有顺序的，先进的先出，后进后出。其中一侧负责进数据，另一侧负责出数据。</p>\n<p>MQ（消息队列）很多功能都是基于此队列结构实现的！</p>\n<h3 id=\"二-rabbitmq简介\"><a class=\"anchor\" href=\"#二-rabbitmq简介\">#</a> 二、 <strong>RabbitMQ 简介</strong></h3>\n<h4 id=\"1-rabbitmq介绍\"><a class=\"anchor\" href=\"#1-rabbitmq介绍\">#</a> 1 <strong>RabbitMQ 介绍</strong></h4>\n<p>​\tRabbitMQ 是由 Erlang 语言编写的基于 AMQP 的消息中间件。而消息中间件作为分布式系统重要组件之一，可以解决应用耦合，异步消息，流量削峰等问题。</p>\n<h5 id=\"11-解决应用耦合\"><a class=\"anchor\" href=\"#11-解决应用耦合\">#</a> 1.1 <strong>解决应用耦合</strong></h5>\n<h6 id=\"111-不使用mq时\"><a class=\"anchor\" href=\"#111-不使用mq时\">#</a> 1.1.1 <strong>不使用 MQ 时</strong></h6>\n<p><img data-src=\"/2022/10/07/Distribution/RabbitMQ/RabbitMQ-03.jpg\" class=\"\"></p>\n<h6 id=\"112-使用mq解决耦合\"><a class=\"anchor\" href=\"#112-使用mq解决耦合\">#</a> 1.1.2 <strong>使用 MQ 解决耦合</strong></h6>\n<p><img data-src=\"/2022/10/07/Distribution/RabbitMQ/RabbitMQ-04.jpg\" class=\"\"></p>\n<h4 id=\"2-rabbitmq适用场景\"><a class=\"anchor\" href=\"#2-rabbitmq适用场景\">#</a> 2 <strong>RabbitMQ 适用场景</strong></h4>\n<p>​\t排队算法：使用消息队列特性</p>\n<p>​\t秒杀活动：使用消息队列特性</p>\n<p>​\t消息分发：使用消息异步特性</p>\n<p>​\t异步处理：使用消息异步特性</p>\n<p>​\t数据同步：使用消息异步特性</p>\n<p>​\t处理耗时任务：使用消息异步特性</p>\n<p>​\t流量销峰</p>\n<h3 id=\"三-rabbitmq原理\"><a class=\"anchor\" href=\"#三-rabbitmq原理\">#</a> 三、 <strong>RabbitMQ 原理</strong></h3>\n<p><img data-src=\"/2022/10/07/Distribution/RabbitMQ/RabbitMQ-05.jpg\" class=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>1.Message</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>消息。消息是不具名的，它由消息头消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括：routing-key (路由键)、priority (相对于其他消息的优先权)、delivery-mode (指出消息可能持久性存储) 等。</td>\n</tr>\n<tr>\n<td><strong>2</strong>.<strong>Publisher</strong></td>\n</tr>\n<tr>\n<td>消息的生产者。也是一个向交换器发布消息的客户端应用程序。</td>\n</tr>\n<tr>\n<td><strong>3</strong>.<strong>Consumer</strong></td>\n</tr>\n<tr>\n<td>消息的消费者。表示一个从消息队列中取得消息的客户端应用程序。</td>\n</tr>\n<tr>\n<td><strong>4.Exchange</strong></td>\n</tr>\n<tr>\n<td>交换器。用来接收生产者发送的消息并将这些消息路由给服务器中的队列。三种常用的交换器类型 1. direct (发布与订阅 完全匹配) 2. fanout (广播) 3. topic (主题，规则匹配)</td>\n</tr>\n<tr>\n<td><strong>5.Binding</strong></td>\n</tr>\n<tr>\n<td>绑定。用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。</td>\n</tr>\n<tr>\n<td><strong>6.Queue</strong></td>\n</tr>\n<tr>\n<td>消息队列。用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者链接到这个队列将其取走。</td>\n</tr>\n<tr>\n<td><strong>7.Routing-key</strong></td>\n</tr>\n<tr>\n<td>路由键。RabbitMQ 决定消息该投递到哪个队列的规则。（也可以理解为队列的名称，路由键是 key，队列是 value）队列通过路由键绑定到交换器。消息发送到 MQ 服务器时，消息将拥有一个路由键，即便是空的，RabbitMQ 也会将其和绑定使用的路由键进行匹配。如果相匹配，消息将会投递到该队列。如果不匹配，消息将会进入黑洞。</td>\n</tr>\n<tr>\n<td><strong>8.Connection</strong></td>\n</tr>\n<tr>\n<td>链接。指 rabbit 服务器和服务建立的 TCP 链接。</td>\n</tr>\n<tr>\n<td><strong>9.Channel</strong></td>\n</tr>\n<tr>\n<td>信道。1，Channel 中文叫做信道，是 TCP 里面的虚拟链接。例如：电缆相当于 TCP，信道是一个独立光纤束，一条 TCP 连接上创建多条信道是没有问题的。2，TCP 一旦打开，就会创建 AMQP 信道。3，无论是发布消息、接收消息、订阅队列，这些动作都是通过信道完成的。</td>\n</tr>\n<tr>\n<td><strong>10.Virtual Host</strong></td>\n</tr>\n<tr>\n<td>虚拟主机。表示一批交换器，消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在链接时指定，RabbitMQ 默认的 vhost 是 **/**</td>\n</tr>\n<tr>\n<td><strong>11.Borker</strong></td>\n</tr>\n<tr>\n<td>表示消息队列服务器实体。</td>\n</tr>\n<tr>\n<td><strong>12. 交换器和队列的关系</strong></td>\n</tr>\n<tr>\n<td>交换器是通过路由键和队列绑定在一起的，如果消息拥有的路由键跟队列和交换器的路由键匹配，那么消息就会被路由到该绑定的队列中。     也就是说，消息到队列的过程中，消息首先会经过交换器，接下来交换器在通过路由键匹配分发消息到具体的队列中。     路由键可以理解为匹配的规则。</td>\n</tr>\n<tr>\n<td><strong>13.RabbitMQ 为什么需要信道？为什么不是 TCP 直接通信？</strong></td>\n</tr>\n<tr>\n<td>1. TCP 的创建和销毁开销特别大。创建需要 3 次握手，销毁需要 4 次分手。2. 如果不用信道，那应用程序就会以 TCP 链接 Rabbit，高峰时每秒成千上万条链接会造成资源巨大的浪费，而且操作系统每秒处理 TCP 链接数也是有限制的，必定造成性能瓶颈。3. 信道的原理是一条线程一条通道，多条线程多条通道同用一条 TCP 链接。一条 TCP 链接可以容纳无限的信道，即使每秒成千上万的请求也不会成为性能的瓶颈。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"四-erlang安装\"><a class=\"anchor\" href=\"#四-erlang安装\">#</a> 四、 <strong>Erlang 安装</strong></h3>\n<p>​\tRabbitMQ 是使用 Erlang 语言编写的，所以需要先配置 Erlang</p>\n<h4 id=\"1-修改主机名\"><a class=\"anchor\" href=\"#1-修改主机名\">#</a> 1 <strong>修改主机名</strong></h4>\n<p>​\tRabbitMQ 是通过主机名进行访问的，必须指定能访问的主机名。</p>\n<pre><code>  vim /etc/sysconfig/network\n</code></pre>\n<p><img data-src=\"/2022/10/07/Distribution/RabbitMQ/RabbitMQ-06.jpg\" class=\"\"></p>\n<pre><code>  vim /etc/hosts\n</code></pre>\n<p>​\t新添加了一行，前面为服务器 ip，空格后面添加计算机主机名</p>\n<p><img data-src=\"/2022/10/07/Distribution/RabbitMQ/RabbitMQ-07.jpg\" class=\"\"></p>\n<h4 id=\"2-安装依赖\"><a class=\"anchor\" href=\"#2-安装依赖\">#</a> 2 <strong>安装依赖</strong></h4>\n<pre><code>  yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC unixODBC-devel\n</code></pre>\n<h4 id=\"3-上传并解压\"><a class=\"anchor\" href=\"#3-上传并解压\">#</a> 3 <strong>上传并解压</strong></h4>\n<p>​\t上传 otp_src_22.0.tar.gz 到 /usr/local/tmp 目录中，进入目录并解压。</p>\n<pre><code>解压时注意，此压缩包不具有gzip属性，解压参数没有z，只有xf\n</code></pre>\n<pre><code>  cd /usr/local/tmp\n  tar xf otp_src_22.0.tar.gz -C /usr/local/tmp\n</code></pre>\n<h4 id=\"4-配置参数\"><a class=\"anchor\" href=\"#4-配置参数\">#</a> 4 <strong>配置参数</strong></h4>\n<p>​\t先新建 /usr/local/erlang 文件夹，作为安装文件夹</p>\n<pre><code>  mkdir -p /usr/local/erlang\n</code></pre>\n<p>​\t 进入文件夹</p>\n<pre><code>  cd otp_src_22.0\n</code></pre>\n<p>​\t 配置参数</p>\n<pre><code>  ./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac\n</code></pre>\n<h4 id=\"5-编译并安装\"><a class=\"anchor\" href=\"#5-编译并安装\">#</a> 5 <strong>编译并安装</strong></h4>\n<p>​\t编译</p>\n<pre><code>  make\n</code></pre>\n<p>​\t 安装</p>\n<pre><code>  make install\n</code></pre>\n<h4 id=\"6-修改环境变量\"><a class=\"anchor\" href=\"#6-修改环境变量\">#</a> 6 <strong>修改环境变量</strong></h4>\n<p>​\t修改 /etc/profile 文件</p>\n<pre><code> vim /etc/profile\n</code></pre>\n<p>​\t 在文件中添加下面代码</p>\n<pre><code>export PATH=$PATH:/usr/local/erlang/bin\n</code></pre>\n<p>​\t运行文件，让修改内容生效</p>\n<pre><code>  source /etc/profile\n</code></pre>\n<h4 id=\"7-查看配置是否成功\"><a class=\"anchor\" href=\"#7-查看配置是否成功\">#</a> 7 <strong>查看配置是否成功</strong></h4>\n<pre><code>  erl -version\n</code></pre>\n<p><img data-src=\"/2022/10/07/Distribution/RabbitMQ/RabbitMQ-08.jpg\" class=\"\"></p>\n<h3 id=\"五-安装rabbitmq\"><a class=\"anchor\" href=\"#五-安装rabbitmq\">#</a> 五、 <strong>安装 RabbitMQ</strong></h3>\n<h4 id=\"1-上传并解压\"><a class=\"anchor\" href=\"#1-上传并解压\">#</a> 1 <strong>上传并解压</strong></h4>\n<p>​\t上传 rabbitmq-server-generic-unix-3.7.18.tar.xz 到 /usr/loca/tmp 中</p>\n<pre><code>  cd /usr/local/tmp\n  tar xf rabbitmq-server-generic-unix-3.7.18.tar.xz\n</code></pre>\n<h4 id=\"2-复制到local下\"><a class=\"anchor\" href=\"#2-复制到local下\">#</a> 2 <strong>复制到 local 下</strong></h4>\n<p>​\t复制解压文件到 /usr/local 下，命名为 rabbitmq</p>\n<pre><code>  cp -r rabbitmq_server-3.7.18 /usr/local/rabbitmq\n</code></pre>\n<h4 id=\"3-配置环境变量\"><a class=\"anchor\" href=\"#3-配置环境变量\">#</a> 3 <strong>配置环境变量</strong></h4>\n<pre><code>  vim /etc/profile\n</code></pre>\n<p>​\t在文件中添加</p>\n<pre><code>export PATH=$PATH:/usr/local/rabbitmq/sbin\n</code></pre>\n<p>​\t解析文件</p>\n<pre><code># source /etc/profile\n</code></pre>\n<h4 id=\"4-开启web管理插件\"><a class=\"anchor\" href=\"#4-开启web管理插件\">#</a> 4 <strong>开启 web 管理插件</strong></h4>\n<p>​\t进入 rabbitmq/sbin 目录</p>\n<pre><code># cd /usr/local/rabbitmq/sbin\n</code></pre>\n<pre><code>查看插件列表\n</code></pre>\n<pre><code># ./rabbitmq-plugins list\n</code></pre>\n<pre><code>生效管理插件\n</code></pre>\n<pre><code># ./rabbitmq-plugins enable rabbitmq_management\n</code></pre>\n<h4 id=\"5-后台运行\"><a class=\"anchor\" href=\"#5-后台运行\">#</a> 5 <strong>后台运行</strong></h4>\n<p>​\t启动 rabbitmq。</p>\n<pre><code># ./rabbitmq-server -detached\n</code></pre>\n<p>​\t停止命令，如果无法停止，使用 kill -9 进程号进行关闭</p>\n<pre><code># ./rabbitmqctl stop_app\n</code></pre>\n<h4 id=\"6-查看web管理界面\"><a class=\"anchor\" href=\"#6-查看web管理界面\">#</a> 6 <strong>查看 web 管理界面</strong></h4>\n<p>​\t默认可以在安装 rabbitmq 的电脑上通过用户名：guest 密码 guest 进行访问 web 管理界面</p>\n<p>​\t端口号：15672（放行端口，或关闭防火墙）</p>\n<p>​\t在虚拟机浏览器中输入：</p>\n<p>​\t<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDoxNTY3Mg==\">http://localhost:15672</span></p>\n<h3 id=\"六-rabbitmq账户管理\"><a class=\"anchor\" href=\"#六-rabbitmq账户管理\">#</a> 六、 <strong>RabbitMq 账户管理</strong></h3>\n<h4 id=\"1-创建账户\"><a class=\"anchor\" href=\"#1-创建账户\">#</a> 1 <strong>创建账户</strong></h4>\n<p>​\t语法：./rabbitmqctl add_user username password</p>\n<pre><code># cd /usr/local/rabbitmq/sbin\n# ./rabbitmqctl add_user mashibing mashibing\n</code></pre>\n<h4 id=\"2-给用户授予管理员角色\"><a class=\"anchor\" href=\"#2-给用户授予管理员角色\">#</a> 2 <strong>给用户授予管理员角色</strong></h4>\n<p>​\t其中 smallming 为新建用户的用户名</p>\n<pre><code># ./rabbitmqctl set_user_tags mashibing administrator\n</code></pre>\n<h4 id=\"3-给用户授权\"><a class=\"anchor\" href=\"#3-给用户授权\">#</a> 3 <strong>给用户授权</strong></h4>\n<p>​\t“/” 表示虚拟机</p>\n<p>​\tmashibing 表示用户名</p>\n<p>​\t&quot;.<em>&quot; &quot;.</em>&quot;&quot;.*&quot; 表示完整权限</p>\n<pre><code># ./rabbitmqctl set_permissions -p &quot;/&quot; mashibing &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;\n</code></pre>\n<h4 id=\"4-登录\"><a class=\"anchor\" href=\"#4-登录\">#</a> 4 <strong>登录</strong></h4>\n<p>​\t使用新建账户和密码在 windows 中访问 rabbitmq 并登录</p>\n<p>​\t在浏览器地址栏输入：</p>\n<p>​\t<span class=\"exturl\" data-url=\"aHR0cDovL2lwOjE1NjcyLw==\">http://ip:15672/</span></p>\n<pre><code>用户名：mashibing\n</code></pre>\n<p>​\t密码：mashibing</p>\n<h3 id=\"七-交换器交换机\"><a class=\"anchor\" href=\"#七-交换器交换机\">#</a> 七、 <strong>交换器（交换机）</strong></h3>\n<p>​\t交换器负责接收客户端传递过来的消息，并转发到对应的队列中。在 RabbitMQ 中支持四种交换器</p>\n<p>​\t1.Direct Exchange：直连交换器（默认）</p>\n<p>​\t2.Fanout Exchange：扇形交换器</p>\n<p>​\t3.Topic Exchange：主题交换器</p>\n<p>​\t4.Header Exchange：首部交换器。</p>\n<p>​\t在 RabbitMq 的 Web 管理界面中 Exchanges 选项卡就可以看见这四个交换器。</p>\n<p><img data-src=\"/2022/10/07/Distribution/RabbitMQ/RabbitMQ-09.jpg\" class=\"\"></p>\n<h4 id=\"1-direct交换器\"><a class=\"anchor\" href=\"#1-direct交换器\">#</a> 1 <strong>direct 交换器</strong></h4>\n<p>​\tdirect 交换器是 RabbitMQ 默认交换器。默认会进行公平调度。所有接受者依次从消息队列中获取值。Publisher 给哪个队列发消息，就一定是给哪个队列发送消息。对交换器绑定的其他队列没有任何影响。</p>\n<p>​\t（代码演示）一个队列需要绑定多个消费者</p>\n<p>​\t需要使用注解 / API：</p>\n<p>​\torg.springframework.amqp.core.Queue: 队列</p>\n<p>​\tAmqpTemplate：操作 RabbitMQ 的接口。负责发送或接收消息</p>\n<p>​\t@RabbitListener (queues = &quot;&quot;) 注解某个方法为接收消息方法</p>\n<h4 id=\"11-代码实现\"><a class=\"anchor\" href=\"#11-代码实现\">#</a> 1.1 <strong>代码实现</strong></h4>\n<h5 id=\"111-新建项目publisher\"><a class=\"anchor\" href=\"#111-新建项目publisher\">#</a> 1.1.1 <strong>新建项目 Publisher</strong></h5>\n<h6 id=\"1111-添加依赖\"><a class=\"anchor\" href=\"#1111-添加依赖\">#</a> 1.1.1.1 <strong>添加依赖</strong></h6>\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;\n&lt;/parent&gt;\n\n&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<h6 id=\"1112-编写配置文件\"><a class=\"anchor\" href=\"#1112-编写配置文件\">#</a> 1.1.1.2 <strong>编写配置文件</strong></h6>\n<p>​\t新建 application.yml.</p>\n<p>​\thost: 默认值 localhost</p>\n<p>​\tusername 默认值：guest</p>\n<p>​\tpassword 默认值：guest</p>\n<pre><code>spring:\n  rabbitmq:\n    host: 192.168.1.195\n    username: mashibing\n    password: mashibing\n</code></pre>\n<h6 id=\"1113-编写配置类\"><a class=\"anchor\" href=\"#1113-编写配置类\">#</a> 1.1.1.3 <strong>编写配置类</strong></h6>\n<p>新建 com.config.RabbitmqConfig</p>\n<p>​\t队列的创建只有没有这个队列的时候需要编写。以后没有这个 queue () 方法也可以。</p>\n<pre><code>@Configuration\npublic class RabbitmqConfig &#123;\n    @Bean\n    protected Queue queue()&#123;\n        Queue queue = new Queue(&quot;myqueue&quot;);\n        return queue;\n    &#125;\n&#125;\n</code></pre>\n<h6 id=\"1114-编写启动类\"><a class=\"anchor\" href=\"#1114-编写启动类\">#</a> 1.1.1.4 <strong>编写启动类</strong></h6>\n<p>略</p>\n<h6 id=\"1115-编写测试类\"><a class=\"anchor\" href=\"#1115-编写测试类\">#</a> 1.1.1.5 <strong>编写测试类</strong></h6>\n<p>SpringBoot 整合 Spring-AMQP 后包含内置对象 AmqpTemplate</p>\n<pre><code>@SpringBootTest(classes = PublisherApplication.class)\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class MyTest &#123;\n    @Autowired\n    private AmqpTemplate amqpTemplate;\n\n    @Test\n    public void test()&#123;\n        amqpTemplate.convertAndSend(&quot;myqueue&quot;,&quot;这是内容1&quot;);\n        System.out.println(&quot;发送成功&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"112-创建consumer\"><a class=\"anchor\" href=\"#112-创建consumer\">#</a> 1.1.2 <strong>创建 Consumer</strong></h5>\n<p>​\t新建项目 consumer</p>\n<h6 id=\"1121-添加依赖\"><a class=\"anchor\" href=\"#1121-添加依赖\">#</a> 1.1.2.1 <strong>添加依赖</strong></h6>\n<p>​\t和 Publisher 一样</p>\n<h6 id=\"1122-编写配置文件\"><a class=\"anchor\" href=\"#1122-编写配置文件\">#</a> 1.1.2.2 <strong>编写配置文件</strong></h6>\n<p>​\t和 Publisher 一样</p>\n<h6 id=\"1123-编写监听器方法\"><a class=\"anchor\" href=\"#1123-编写监听器方法\">#</a> 1.1.2.3 <strong>编写监听器方法</strong></h6>\n<p>​\t注意：</p>\n<p>​\t类上要有 @Componet，项目启动时此类生效。</p>\n<p>​\t@RabbitListener 监听指定队列。</p>\n<pre><code>@Component\npublic class DemoReceive &#123;\n\n    @RabbitListener(queues = &quot;myqueue&quot;)\n    public void demo(String msg)&#123;\n        System.out.println(&quot;获取到的消息1111：&quot;+msg);\n    &#125;\n\n    @RabbitListener(queues = &quot;myqueue&quot;)\n    public void demo2(String msg)&#123;\n        System.out.println(&quot;获取到的消息2222：&quot;+msg);\n    &#125;\n&#125;\n</code></pre>\n<h6 id=\"1124-新建启动类\"><a class=\"anchor\" href=\"#1124-新建启动类\">#</a> 1.1.2.4 <strong>新建启动类</strong></h6>\n<p>​\t略。启动后此项目一直处于运行状态。属于长连接。</p>\n<h4 id=\"2-fanout交换器\"><a class=\"anchor\" href=\"#2-fanout交换器\">#</a> 2 <strong>fanout 交换器</strong></h4>\n<p>​\t扇形交换器，实际上做的事情就是广播，fanout 会把消息发送给所有的绑定在当前交换器上的队列。且每个队列消息中第一个 Consumer 能收到消息。</p>\n<p>​\t（代码演示）一个交换器需要绑定多个队列</p>\n<p>​\t需要使用注解 / API：</p>\n<p>​\tFanoutExchange：fanout 交换器</p>\n<p>​\tBinding：绑定交换器和队列</p>\n<p>​\tBindingBuilder：Binding 的构建器</p>\n<p>​\tamq.fanout: 内置 fanout 交换器名称</p>\n<h4 id=\"21-代码\"><a class=\"anchor\" href=\"#21-代码\">#</a> 2.1 <strong>代码</strong></h4>\n<h5 id=\"211-publisher\"><a class=\"anchor\" href=\"#211-publisher\">#</a> 2.1.1 <strong>Publisher</strong></h5>\n<h6 id=\"2111-修改配置类\"><a class=\"anchor\" href=\"#2111-修改配置类\">#</a> 2.1.1.1 <strong>修改配置类</strong></h6>\n<pre><code>@Bean\nprotected Queue fanoutQuque1()&#123;\n    return new Queue(&quot;fanout1&quot;);\n&#125;\n\n@Bean\nprotected Queue fanoutQuque2()&#123;\n    return new Queue(&quot;fanout2&quot;);\n&#125;\n\n@Bean\nprotected FanoutExchange fanoutExchange()&#123;\n    return new FanoutExchange(&quot;amq.fanout&quot;);\n&#125;\n\n@Bean\nprotected Binding fanoutBinding(Queue fanoutQuque1,FanoutExchange fanoutExchange)&#123;\n    return BindingBuilder.bind(fanoutQuque1).to(fanoutExchange);\n&#125;\n\n@Bean\nprotected Binding fanoutBinding2(Queue fanoutQuque2,FanoutExchange fanoutExchange)&#123;\n    return BindingBuilder.bind(fanoutQuque2).to(fanoutExchange);\n&#125;\n</code></pre>\n<h5 id=\"212-编写发送方法\"><a class=\"anchor\" href=\"#212-编写发送方法\">#</a> 2.1.2 <strong>编写发送方法</strong> ****</h5>\n<p>​\t第二个参数 routingKey 对于 fanout 没有意义的</p>\n<pre><code>@Test\npublic void test2()&#123;\n    amqpTemplate.convertAndSend(&quot;amq.fanout&quot;,&quot;asdfadsf&quot;,&quot;fanout msg&quot;);\n    System.out.println(&quot;发送成功&quot;);\n&#125;\n</code></pre>\n<h5 id=\"213-consumer\"><a class=\"anchor\" href=\"#213-consumer\">#</a> 2.1.3 <strong>Consumer</strong></h5>\n<p>​\tConsumer 代码和 Direct 完全相同。一个队列给一个监听方法即可。</p>\n<h4 id=\"3-topic交换器\"><a class=\"anchor\" href=\"#3-topic交换器\">#</a> 3 <strong>topic 交换器</strong></h4>\n<p>​\t允许在路由键（RoutingKey）中出现匹配规则。</p>\n<p>​\t路由键的写法和包写法相同。com.msb.xxxx.xxx 格式。</p>\n<p>​\t在绑定时可以带有下面特殊符号，中间可以出现:</p>\n<p>​\t* : 代表一个单词（两个。之间内容）</p>\n<p>​\t# : 0 个或多个字符</p>\n<p>​\t接收方依然是公平调度，同一个队列中内容轮换获取值。</p>\n<p>​\t需要使用注解 / API：</p>\n<p>​\tTopicExchange：Topic 交换器</p>\n<p>​\tamq.topic: 内置 topic 交换器名称</p>\n<h4 id=\"31-代码\"><a class=\"anchor\" href=\"#31-代码\">#</a> 3.1 <strong>代码</strong></h4>\n<h5 id=\"311-publisher\"><a class=\"anchor\" href=\"#311-publisher\">#</a> 3.1.1 <strong>Publisher</strong></h5>\n<h6 id=\"3111-配置类\"><a class=\"anchor\" href=\"#3111-配置类\">#</a> 3.1.1.1 <strong>配置类。</strong></h6>\n<p>​\t之所以建立两个队列目的是为了演示使用 Topic 完成 Fanout 效果。</p>\n<pre><code>@Bean\nprotected Queue topicQueue() &#123;\n    return new Queue(&quot;topic1&quot;);\n&#125;\n\n@Bean\nprotected Queue topicQueue2() &#123;\n    return new Queue(&quot;topic2&quot;);\n&#125;\n\n@Bean\nprotected TopicExchange topicExchange() &#123;\n    return new TopicExchange(&quot;amq.topic&quot;);\n&#125;\n\n@Bean\nprotected Binding topicBinding(Queue topicQueue, TopicExchange topicExchange) &#123;\n    return BindingBuilder.bind(topicQueue).to(topicExchange).with(&quot;com.a&quot;);\n&#125;\n\n@Bean\nprotected Binding topicBinding2(Queue topicQueue2, TopicExchange topicExchange) &#123;\n    return BindingBuilder.bind(topicQueue2).to(topicExchange).with(&quot;com.#&quot;);\n&#125;\n</code></pre>\n<h6 id=\"3112-发送消息\"><a class=\"anchor\" href=\"#3112-发送消息\">#</a> 3.1.1.2 <strong>发送消息</strong></h6>\n<p>​\t第二个参数为路由键，匹配配置类中绑定时的路由规则。</p>\n<pre><code>@Test\npublic void test3()&#123;\n    amqpTemplate.convertAndSend(&quot;amq.topic&quot;,&quot;com.bjsxt.a.b&quot;,&quot;topic msg&quot;);\n    System.out.println(&quot;发送成功&quot;);\n&#125;\n</code></pre>\n<p>3.1.2 <strong>Consumer</strong></p>\n<p>​\tConsumer 代码与以前一样，注意队列名称 topic1,topic2 不要写路由键名称。(queues 取值)</p>\n<pre><code>@RabbitListener(queues = &quot;topic2&quot;)\npublic void demo10(String msg)&#123;\n    System.out.println(&quot;topic2-2:&quot;+msg);\n&#125;\n</code></pre>\n<h3 id=\"八-传递对象类型参数\"><a class=\"anchor\" href=\"#八-传递对象类型参数\">#</a> 八、 <strong>传递对象类型参数</strong></h3>\n<p>​\t如果消息是对象类型，此对象的类型必须进行序列化，且需要给定序列化值</p>\n<pre><code>public class People implements Serializable \n&#123;\n    public static final long serialVersionUID=1L;\n&#125;\n</code></pre>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "分布式",
                "中间件",
                "RabbitMQ"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Distribution/Solr/",
            "url": "http://example.com/2022/10/07/Distribution/Solr/",
            "title": "Solr",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"solr\"><a class=\"anchor\" href=\"#solr\">#</a> Solr</h1>\n<h3 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> 主要内容</h3>\n<ol>\n<li>\n<p>Solr 简介</p>\n</li>\n<li>\n<p>Solr 搜索原理</p>\n</li>\n<li>\n<p>Solr 单机版安装</p>\n</li>\n<li>\n<p>可视化管理界面</p>\n</li>\n<li>\n<p>新建核心</p>\n</li>\n<li>\n<p>分词</p>\n</li>\n<li>\n<p>Dataimport</p>\n</li>\n<li>\n<p>使用 SolrJ 操作 Solr</p>\n</li>\n<li>\n<p>Spring Data for Apache Solr</p>\n<ol start=\"10\">\n<li>SolrCloud</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"学习目标\"><a class=\"anchor\" href=\"#学习目标\">#</a> 学习目标</h3>\n<table>\n<thead>\n<tr>\n<th>知识点</th>\n<th>要求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Solr 简介</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Solr 搜索原理</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Solr 单机版安装</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>可视化管理界面</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>新建核心</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>分词</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Dataimport</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>使用 SolrJ 操作 Solr</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>SolrCloud</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Spring Data for Apache Solr</td>\n<td>掌握</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一-solr简介\"><a class=\"anchor\" href=\"#一-solr简介\">#</a> 一、Solr 简介</h3>\n<h4 id=\"1为什么使用solr\"><a class=\"anchor\" href=\"#1为什么使用solr\">#</a> 1. 为什么使用 Solr</h4>\n<p>​\t在海量数据下，对 MySQL 或 Oracle 进行模糊查询或条件查询的效率是很低的。而搜索功能在绝大多数项目中都是必须的，如何提升搜索效率是很多互联网项目必须要考虑的问题。</p>\n<p>​\t既然使用关系型数据库进行搜索效率比较低，最直接的解决方案就是使用专用搜索工具进行搜索，从而提升搜索效率。</p>\n<h4 id=\"2常见搜索解决方案\"><a class=\"anchor\" href=\"#2常见搜索解决方案\">#</a> 2. 常见搜索解决方案</h4>\n<p>​\t基于 Apache Lucene（全文检索工具库）实现搜索。但是 Lucene 的使用对于绝大多数的程序员都是 “噩梦级” 的。</p>\n<p>​\t基于谷歌 API 实现搜索。</p>\n<p>​\t基于百度 API 实现搜索。</p>\n<h4 id=\"3solr简介\"><a class=\"anchor\" href=\"#3solr简介\">#</a> 3.Solr 简介</h4>\n<p>​\tSolr 是基于 Apache Lucene 构建的用于搜索和分析的开源解决方案。可提供可扩展索引、搜索功能、高亮显示和文字解析功能。</p>\n<p>​\tSolr 本质就是一个 Java web 项目，且内嵌了 Jetty 服务器，所以安装起来非常方便。客户端操作 Solr 的过程和平时我们所写项目一样，就是请求 Solr 中控制器，处理完数据后把结果响应给客户端。</p>\n<h4 id=\"4正向索引和反向索引\"><a class=\"anchor\" href=\"#4正向索引和反向索引\">#</a> 4. 正向索引和反向索引</h4>\n<p>​\t只要讨论搜索就不得不提的两个概念：正向索引（forward index）和反向索引 (inverted index)。</p>\n<p>​\t正向索引：从文档内容到词组的过程。每次搜索的实收需要搜索所有文档，每个文档比较搜索条件和词组。</p>\n<table>\n<thead>\n<tr>\n<th>文档</th>\n<th>词组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I am a chinese</td>\n<td>I,am,a,chinese</td>\n</tr>\n</tbody>\n</table>\n<p>​\t反向索引：是正向索引的逆向。建立词组和文档的映射关系。通过找到词组就能找到文档内容。（和新华字典找字很像）</p>\n<table>\n<thead>\n<tr>\n<th>词组</th>\n<th>文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I,am,a,chinese</td>\n<td>I am a chinese</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"二-solr搜索原理\"><a class=\"anchor\" href=\"#二-solr搜索原理\">#</a> 二、Solr 搜索原理</h3>\n<h4 id=\"1搜索原理\"><a class=\"anchor\" href=\"#1搜索原理\">#</a> 1. 搜索原理</h4>\n<p>​\tSolr 能够提升检索效率的主要原因就是分词和索引（反向索引，通过）。</p>\n<p>​\t分词：会对搜索条件 / 存储内容进行分词，分成日常所使用的词语。</p>\n<p>​\t索引：存储在 Solr 中内容会按照程序员的要求来是否建立索引。如果要求建立索引会把存储内容中关键字（分词）建立索引。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-01.JPG\" class=\"\"></p>\n<h4 id=\"2solr中数据存储说明\"><a class=\"anchor\" href=\"#2solr中数据存储说明\">#</a> 2.Solr 中数据存储说明</h4>\n<p>​\tSolr 为了给内容建立索引，所以 Solr 就必须具备数据存储能力。所有需要被搜索的内容都需要存储在 Solr 中，在开发中需要把数据库中数据添加到 Solr 中进行初始化，每次修改数据库中数据还需要同步 Solr 中的数据。</p>\n<p>​\tSolr 中数据存储是存储在 Document 对象中，对象中可以包含的属性和属性类型都定义在 scheme.xml 中。如果需要自定义属性或自定义属性类型都需要修改 scheme.xml 配置文件。从 Solr5 开始 schema.xml 更改名称为 managed-scheme (没有扩展名)</p>\n<h3 id=\"三-solr单机版安装\"><a class=\"anchor\" href=\"#三-solr单机版安装\">#</a> 三、Solr 单机版安装</h3>\n<p>​\tSolr 是使用 Java 编写，所以必选先安装 JDK。</p>\n<h4 id=\"1上传并解压\"><a class=\"anchor\" href=\"#1上传并解压\">#</a> 1. 上传并解压</h4>\n<p>​\t上传压缩包 solr-7.7.2.tgz 到 /usr/local/tmp 中。</p>\n<p>解压</p>\n<pre><code># cd /usr/local/tmp\n# tar zxf solr-7.7.2.tgz\n</code></pre>\n<h4 id=\"2复制到usrlocal中\"><a class=\"anchor\" href=\"#2复制到usrlocal中\">#</a> 2. 复制到 /usr/local 中</h4>\n<pre><code># cp -r solr-7.7.2 ../solr\n</code></pre>\n<h4 id=\"3修改启动参数\"><a class=\"anchor\" href=\"#3修改启动参数\">#</a> 3. 修改启动参数</h4>\n<p>​\t修改启动参数，否则启动时报警告。提示设置 SOLR_ULIMIT_CHECKS=false</p>\n<pre><code># cd /usr/local/solr/bin\n# vim solr.in.sh\n</code></pre>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-02.jpg\" class=\"\"></p>\n<h4 id=\"4启动solr\"><a class=\"anchor\" href=\"#4启动solr\">#</a> 4. 启动 Solr</h4>\n<p>​\tSolr 内嵌 Jetty，直接启动即可。监听 8983 端口。</p>\n<p>​\tsolr 默认不推荐 root 账户启动，如果是 root 账户启动需要添加 - force 参数。</p>\n<pre><code># ./solr start -force\n</code></pre>\n<h3 id=\"四-可视化管理界面\"><a class=\"anchor\" href=\"#四-可视化管理界面\">#</a> 四、可视化管理界面</h3>\n<p>​\t在关闭防火墙的前提下，可以在 windows 的浏览器中访问 Solr。</p>\n<p>​\t输入: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguOTMuMTA6ODk4Mw==\">http://192.168.93.10:8983</span> 就可以访问 Solr 的可视化管理界面。</p>\n<p>​\t左侧有 5 个菜单。分别是：</p>\n<p>​\t（1）Dashboard：面板显示 Solr 的总体信息。</p>\n<p>​\t（2）Logging：日志</p>\n<p>​\t（3）Core Admin：Solr 的核心。类似于数据的 Database</p>\n<p>​\t（4）Java Perperties：所有 Java 相关属性。</p>\n<p>​\t（5）Thread Dump：线程相关信息。</p>\n<p>​\t（6）如果有 Core，将显示在此处。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-03.JPG\" class=\"\"></p>\n<h3 id=\"五-新建核心\"><a class=\"anchor\" href=\"#五-新建核心\">#</a> 五、新建核心</h3>\n<p>​\tSolr 安装完成后默认是没有核心的。需要手动配置。</p>\n<p>​\t需要在 solr/server/solr 下新建文件夹，并给定配置文件，否则无法建立。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-04.JPG\" class=\"\"></p>\n<h4 id=\"1新建目录\"><a class=\"anchor\" href=\"#1新建目录\">#</a> 1. 新建目录</h4>\n<p>​\t在 /usr/local/solr/server/solr 中新建自定义名称目录。此处示例名称为 testcore。</p>\n<pre><code># cd /usr/local/solr/server/solr\n# mkdir testcore\n</code></pre>\n<h4 id=\"2复制配置文件\"><a class=\"anchor\" href=\"#2复制配置文件\">#</a> 2. 复制配置文件</h4>\n<p>​\t在 configsets 里面包含了_default 和 sample_techproducts_configs。里面都是配置文件示例。_default 属于默认配置，较纯净。sample_techproducts_configs 是带有了一些配置示例。</p>\n<pre><code># cp -r configsets/_default/conf/ testcore/\n</code></pre>\n<h4 id=\"3填写core信息\"><a class=\"anchor\" href=\"#3填写core信息\">#</a> 3. 填写 Core 信息</h4>\n<p>​\t在可视化管理界面中 Core Admin 中编写信息后点击 Add Core 后，短暂延迟后 testcore 就会创建成功。schema 处不用更改。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-05.JPG\" class=\"\"></p>\n<h4 id=\"4出现testcore\"><a class=\"anchor\" href=\"#4出现testcore\">#</a> 4. 出现 testcore</h4>\n<p>​\t在客户端管理界面中，选择新建的 Core 后，就可以按照自己项目的需求进行操作了。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-06.jpg\" class=\"\"></p>\n<h3 id=\"六-分词analysis\"><a class=\"anchor\" href=\"#六-分词analysis\">#</a> 六、分词 Analysis</h3>\n<p>​\t在 Solr 可视化管理界面中，Core 的管理菜单项中都会有 Analysis。表示根据 Scheme.xml (managed-schema) 中配置要求进行解析。</p>\n<p>​\t对英文解析就比较简单了，只要按照空格把英文语句拆分成英文单词即可。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-07.jpg\" class=\"\"></p>\n<p>​\t但是如果条件是中文时，把一句话按照字进行拆分就不是很合理了。正确的方式是按照合理的词组进行拆分。<img data-src=\"/2022/10/07/Distribution/Solr/solr-08.jpg\" class=\"\"></p>\n<h4 id=\"1配置步骤\"><a class=\"anchor\" href=\"#1配置步骤\">#</a> 1. 配置步骤</h4>\n<p>​\t上传 ik-analyzer.jar 到 webapps 中。</p>\n<p>​\t去 https://search.maven.org/search?q=com.github.magese 下载对应版本的 ik-analyzer。可以在资料中直接获取。</p>\n<h5 id=\"11上传jar到指定目录\"><a class=\"anchor\" href=\"#11上传jar到指定目录\">#</a> 1.1 上传 jar 到指定目录</h5>\n<p>​\t上传 ik-analyzer-7.7.0.jar 到</p>\n<p>​\t/usr/local/solr/server/solr-webapp/webapp/WEB-INF/lib 目录中</p>\n<h5 id=\"12修改配置文件\"><a class=\"anchor\" href=\"#12修改配置文件\">#</a> 1.2 修改配置文件</h5>\n<p>​\t修改 /usr/local/solr/server/solr/testcore/conf/managed-schema</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /usr/local/solr/server/solr/testcore/conf/managed-schema</pre></td></tr></table></figure><p>​\t添加下面内容。</p>\n<p>​\t排版：Esc 退出编辑状态下：gg=G</p>\n<pre><code>&lt;field name=&quot;myfield&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;\n    &lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;\n            &lt;analyzer type=&quot;index&quot;&gt;\n                    &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot; useSmart=&quot;false&quot; conf=&quot;ik.conf&quot;/&gt;\n                    &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;\n            &lt;/analyzer&gt;\n            &lt;analyzer type=&quot;query&quot;&gt;\n                    &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot; useSmart=&quot;true&quot; conf=&quot;ik.conf&quot;/&gt;\n                    &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;\n            &lt;/analyzer&gt;\n    &lt;/fieldType&gt;\n</code></pre>\n<h5 id=\"13重启\"><a class=\"anchor\" href=\"#13重启\">#</a> 1.3 重启</h5>\n<pre><code># cd /usr/local/solr/bin\n# ./solr stop -all\n# ./solr start -force\n</code></pre>\n<h5 id=\"14验证\"><a class=\"anchor\" href=\"#14验证\">#</a> 1.4 验证</h5>\n<p>​\t可以在可视化管理界面中找到 myfield 属性进行验证。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-09.jpg\" class=\"\"></p>\n<h4 id=\"2managed-schema配置说明\"><a class=\"anchor\" href=\"#2managed-schema配置说明\">#</a> 2.managed-schema 配置说明</h4>\n<h5 id=\"21-fieldtype\"><a class=\"anchor\" href=\"#21-fieldtype\">#</a> 2.1&lt; fieldType/&gt;</h5>\n<p>​\t表示定义一个属性类型。在 Solr 中属性类型都是自定义的。在上面配置中 name=”text_ik” 为自定义类型。当某个属性取值为 text_ik 时 IK Analyzer 才能生效。</p>\n<h5 id=\"22-field\"><a class=\"anchor\" href=\"#22-field\">#</a> 2.2&lt; field/&gt;</h5>\n<p>​\t表示向 Document 中添加一个属性。</p>\n<p>​\t常用属性：</p>\n<p>​\t\tname: 属性名</p>\n<p>​\t\ttype: 属性类型。所有类型都是 solr 使用 &lt;fieldType&gt; 配置的</p>\n<p>​\t\tindexed: 是否建立索引</p>\n<p>​\t\tstored: solr 是否把该属性值响应给搜索用户。</p>\n<p>​\t\trequired：该属性是否是必须的。默认 id 是必须的。</p>\n<p>​\t\tmultiValued：如果为 true，表示该属性为复合属性，此属性中包含了多个其他的属性。常用在多个列作为搜索条件时，把这些列定义定义成一个新的复合属性，通过搜索一个复合属性就可以实现搜索多个列。当设置为 true 时与 &lt;copyField source=&quot;&quot;dest=&quot;&quot;/&gt; 结合使用</p>\n<h5 id=\"23-uniquekey\"><a class=\"anchor\" href=\"#23-uniquekey\">#</a> 2.3&lt; uniqueKey&gt;</h5>\n<p>​\t唯一主键，Solr 中默认定义 id 属性为唯一主键。ID 的值是不允许重复的。</p>\n<h5 id=\"24-dynamicfield\"><a class=\"anchor\" href=\"#24-dynamicfield\">#</a> 2.4&lt; dynamicField&gt;</h5>\n<p>​\t名称中允许 * 进行通配。代表满足特定名称要求的一组属性。</p>\n<pre><code>msb_java    \n</code></pre>\n<p>​\tmsb_bigdata</p>\n<p>​\tmsb_UI</p>\n<p>​        msb_*</p>\n<h3 id=\"七-dataimport\"><a class=\"anchor\" href=\"#七-dataimport\">#</a> 七、Dataimport</h3>\n<p>​\t可以使用 Solr 自带的 Dataimport 功能把数据库中数据快速导入到 solr 中.</p>\n<p>​\t<strong>必须保证 managed-schema 和数据库中表的列对应。，添加配置</strong></p>\n<h4 id=\"1修改配置文件\"><a class=\"anchor\" href=\"#1修改配置文件\">#</a> 1. 修改配置文件</h4>\n<p>​\t修改 solrconfig.xml，添加下面内容</p>\n<pre><code> &lt;!-- 配置数据导入的处理器 --&gt;\n  &lt;requestHandler name=&quot;/dataimport&quot; class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&gt;\n    &lt;lst name=&quot;defaults&quot;&gt;\n\t  &lt;!--  加载data-config.xml  --&gt;\n      &lt;str name=&quot;config&quot;&gt;data-config.xml&lt;/str&gt;\n     &lt;/lst&gt;\n  &lt;/requestHandler&gt;\n</code></pre>\n<h4 id=\"2新建data-configxml\"><a class=\"anchor\" href=\"#2新建data-configxml\">#</a> 2. 新建 data-config.xml</h4>\n<p>​\t和 solrconfig.xml 同一目录下新建 data-config.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;dataConfig&gt;\n        &lt;dataSource type=&quot;JdbcDataSource&quot;   \n                driver=&quot;com.mysql.jdbc.Driver&quot;   \n                url=&quot;jdbc:mysql://192.168.1.135:3306/mytest&quot;   \n                user=&quot;root&quot;   \n                password=&quot;root&quot;/&gt;\n        &lt;document&gt;\n            &lt;entity name=&quot;product&quot; query=&quot;SELECT id,name,price from t_product&quot;&gt;\n                &lt;!-- \n                 实现数据库的列和索引库的字段的映射\n                 column 指定数据库的列表\n                 name  指定索引库的字段名字，必须和schema.xml中定义的一样\n                 --&gt;\n                 &lt;field column=&quot;id&quot; name=&quot;id&quot;/&gt;\n                 &lt;field column=&quot;name&quot; name=&quot;name&quot;/&gt;\n\t\t\t\t &lt;field column=&quot;price&quot; name=&quot;price&quot;/&gt;\n            &lt;/entity&gt;\n         &lt;/document&gt;\n&lt;/dataConfig&gt;\n</code></pre>\n<h4 id=\"3添加jar\"><a class=\"anchor\" href=\"#3添加jar\">#</a> 3. 添加 jar</h4>\n<p>​\t向 solr-webapp 中添加三个 jar。在 dist 中两个还有一个数据库驱动。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-10.jpg\" class=\"\"></p>\n<h4 id=\"4操作\"><a class=\"anchor\" href=\"#4操作\">#</a> 4. 操作</h4>\n<p>​\t重启 solr 后，在可视化管理页面中进行数据导入。</p>\n<p>​\t注意：</p>\n<p>​\t点击导入按钮后，要记得点击刷新按钮。</p>\n<h3 id=\"八-菜单项目documents使用办法\"><a class=\"anchor\" href=\"#八-菜单项目documents使用办法\">#</a> 八、菜单项目 Documents 使用办法</h3>\n<p>​\t以 XML 格式举例</p>\n<h4 id=\"1新增修改\"><a class=\"anchor\" href=\"#1新增修改\">#</a> 1. 新增 / 修改</h4>\n<p>​\t当 id 不存在时新增，当 id 存在修改。</p>\n<pre><code>&lt;doc&gt;\n&lt;field name=&quot;id&quot;&gt;8&lt;/field&gt;\n&lt;field name=&quot;name&quot;&gt;明天更大卖&lt;/field&gt;\n&lt;field name=&quot;price&quot;&gt;98&lt;/field&gt;\n&lt;/doc&gt;\n</code></pre>\n<h4 id=\"2删除\"><a class=\"anchor\" href=\"#2删除\">#</a> 2. 删除</h4>\n<h5 id=\"21根据主键删除\"><a class=\"anchor\" href=\"#21根据主键删除\">#</a> 2.1 根据主键删除</h5>\n<pre><code>&lt;delete&gt;\n\t&lt;id&gt;8&lt;/id&gt;\n&lt;/delete&gt;\n&lt;commit/&gt;\n</code></pre>\n<h5 id=\"22根据条件删除\"><a class=\"anchor\" href=\"#22根据条件删除\">#</a> 2.2 根据条件删除</h5>\n<pre><code>&lt;delete&gt;\n\t&lt;query&gt;*:*&lt;/query&gt;\n&lt;/delete&gt;\n</code></pre>\n<h4 id=\"3solr可视化界面使用query\"><a class=\"anchor\" href=\"#3solr可视化界面使用query\">#</a> 3.solr 可视化界面使用（QUERY）</h4>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645693120964.png\" alt=\"1645693120964\" /></p>\n<p>参数：</p>\n<p>​\t**q：**query，等于。格式  ——&gt; parameter/columns : value\t<strong>具有分词时，相当于模糊查询 --like</strong></p>\n<p>​\t<strong>fq：</strong>【在 q 的情况下再加条件】（要有分词功能）注意这里的 keyword 是用来检索的字段，他包含 name、address、gender、expert_skill，这几个属性，所以我搜索 “海” 能够查询出来有海字的记录。</p>\n<p>​\t**sort：** 排序 。 parameter/columns    desc 逆序 /asc</p>\n<p>​\t**start,rows：** 从查询结果的 start 开始，显示到 rows 结束【下标】</p>\n<p>​\t**fl：** 想显示的属性。</p>\n<p>​\t**df：** 不想显示的属性。</p>\n<p>​\t**wt：** 返回值类型</p>\n<p>​\t**hl：** 高亮</p>\n<pre><code>\t*  hl.fl\t\t\t\t\t\t value\n\t*  hl.simple.pre        &lt;font color='red'&gt;\n\t*  hl.simple.post     &lt;/font&gt;\n</code></pre>\n<p>​</p>\n<h3 id=\"九-使用solrj操作solr\"><a class=\"anchor\" href=\"#九-使用solrj操作solr\">#</a> 九、使用 SolrJ 操作 Solr</h3>\n<p>​\tSolrJ 是 Solr 提供的 Java 客户端 API。通过 SolrJ 可以实现 Java 程序对 Solr 中数据的操作。</p>\n<p>​\t大前提：添加 SolrJ 依赖。依赖版本和 Solr 版本严格对应</p>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.solr&lt;/groupId&gt;\n        \t&lt;artifactId&gt;solr-solrj&lt;/artifactId&gt;\n        &lt;version&gt;7.7.2&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<h4 id=\"1新增修改实现\"><a class=\"anchor\" href=\"#1新增修改实现\">#</a> 1. 新增 / 修改实现</h4>\n<pre><code>String url = &quot;http://192.168.93.10:8983/solr/testcore&quot;;\nHttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();\nSolrInputDocument inputDocument = new SolrInputDocument();\ninputDocument.addField(&quot;id&quot;,&quot;3&quot;);\ninputDocument.addField(&quot;myfield&quot;,&quot;myfield3&quot;);\nsolrClient.add(inputDocument);\nsolrClient.commit();\n</code></pre>\n<ul>\n<li>使用 solrj 进行索引的添加\n<ul>\n<li>\n<ul>\n<li><strong>每个索引的添加必须要 ID</strong>\n<ul>\n<li><strong>添加 key 值要和 schema.xml 文件内的 field 域保持一致</strong></li>\n<li><strong>添加数据后一定要提交数据，不然是不存在数据的</strong></li>\n<li><strong>连接 Solr 的对象需要连接到项目名</strong></li>\n<li><strong>每个 document 是一组 Json 数据对象</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2删除实现\"><a class=\"anchor\" href=\"#2删除实现\">#</a> 2. 删除实现</h4>\n<pre><code>String url = &quot;http://192.168.93.10:8983/solr/testcore&quot;;\nHttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();\nsolrClient.deleteById(&quot;3&quot;);\nsolrClient.commit();\n</code></pre>\n<ul>\n<li><strong>删除</strong></li>\n<li>删除支持两种删除方式\n<ul>\n<li>\n<ul>\n<li><strong>1. 根据 ID</strong>\n<ul>\n<li>2. 执行查询删除\n<ul>\n<li>\n<ul>\n<li><strong>查询删除的格式：查询的域：值</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3查询实现\"><a class=\"anchor\" href=\"#3查询实现\">#</a> 3. 查询实现</h4>\n<pre><code>public void testQuery()&#123;\n    try &#123;\n        String url = &quot;http://192.168.93.10:8983/solr/testcore&quot;;\n        HttpSolrClient solrClient = new HttpSolrClient.Builder(url).build();\n\n        //封装了所有查询条件\n        SolrQuery params = new SolrQuery();\n        params.setQuery(&quot;name:丰富的&quot;);\n        //排序\n        params.setSort(&quot;price&quot;, SolrQuery.ORDER.desc);\n        //分页\n        params.setStart(0);\n params.setRows(1);\n        //高亮\n        params.setHighlight(true);\n        params.addHighlightField(&quot;name&quot;);\n        params.setHighlightSimplePre(&quot;&lt;span&gt;&quot;);\n        params.setHighlightSimplePost(&quot;&lt;/span&gt;&quot;);\n\n        QueryResponse response = solrClient.query(params);\n        SolrDocumentList list = response.getResults();\n        System.out.println(&quot;总条数：&quot;+list.getNumFound());\n\n        //高亮数据\n        Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = response.getHighlighting();\n\n        for(SolrDocument doc :list)&#123;\n            System.out.println(doc.get(&quot;id&quot;));\n            Map&lt;String, List&lt;String&gt;&gt; map = highlighting.get(doc.get(&quot;id&quot;));\n            List&lt;String&gt; HLList = map.get(&quot;name&quot;);\n            if(HLList!=null&amp;&amp;HLList.size()&gt;0)&#123;//显示高亮数据\n                System.out.println(HLList.get(0));\n            &#125;else&#123;\n                System.out.println(doc.get(&quot;name&quot;));\n            &#125;\n            System.out.println(doc.get(&quot;price&quot;));\n            System.out.println(&quot;===================&quot;);\n        &#125;\n        solrClient.close();\n    &#125; catch (SolrServerException e) &#123;\n        e.printStackTrace();\n    &#125; catch (IOException e) &#123;\n        e.printStackTrace();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>使用到的对象</strong></p>\n<ul>\n<li>1.SolrQuery 查询对象\n<ul>\n<li>1.setQuery ()：设置查询的关键字<br />\n 2.set（）: 设置查询的域<br />\n 3.setStart (): 设置开始<br />\n 4.setRows（）：设置结束</li>\n</ul>\n</li>\n</ul>\n<hr />\n<ul>\n<li>\n<p>2.QueryResponse：响应结果集</p>\n<ul>\n<li>1.getNumFound (): 返回查询到的数量<br />\n 2.getResults（）；返回封装的 list 集合</li>\n</ul>\n</li>\n<li>\n<p>3.SolrDocumentList：结果集合</p>\n<ul>\n<li>1.get (): 获取指定域的值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十-spring-data-for-apache-solr\"><a class=\"anchor\" href=\"#十-spring-data-for-apache-solr\">#</a> 十、Spring Data for Apache Solr</h3>\n<h4 id=\"1spring-data简介\"><a class=\"anchor\" href=\"#1spring-data简介\">#</a> 1.Spring Data 简介</h4>\n<p>​\tSpring Data 是 Spring 的顶级项目。里面包含了 N 多个二级子项目，每个子项目对应一种技术或工具。其目的为了让数据访问更加简单，更加方便的和 Spring 进行整合。</p>\n<p>​\tSpring Data 项目如果单独使用是还需要配置 XML 配置文件的，当和 Spring Boot 整合后使用起来非常方便。spring-boot-starter-data-xx 就是对应的启动器。</p>\n<h4 id=\"2实现步骤\"><a class=\"anchor\" href=\"#2实现步骤\">#</a> 2. 实现步骤</h4>\n<h5 id=\"21添加依赖\"><a class=\"anchor\" href=\"#21添加依赖\">#</a> 2.1 添加依赖</h5>\n<pre><code> &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-solr&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre>\n<h5 id=\"22编写配置文件\"><a class=\"anchor\" href=\"#22编写配置文件\">#</a> 2.2 编写配置文件</h5>\n<pre><code>spring:\n  data:\n    solr:\n      host: http://192.168.9.132:8080/solr\n      # zk-host: 192.168.9.132:2181,192.168.9.132:2182,192.168.9.132:2183\n</code></pre>\n<h5 id=\"23编写测试类\"><a class=\"anchor\" href=\"#23编写测试类\">#</a> 2.3 编写测试类</h5>\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(classes = MyApplication.class)\npublic class MyTest &#123;\n    @Autowired\n    private SolrTemplate solrTemplate;\n\n    public void testInsert()&#123;\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(&quot;id&quot;,&quot;002&quot;);\n        doc.setField(&quot;item_title&quot;,&quot;这是一个手机3&quot;);\n        UpdateResponse ur = solrTemplate.saveBean(&quot;collection1&quot;, doc);\n        if(ur.getStatus()==0)&#123;\n            System.out.println(&quot;成功&quot;);\n        &#125;else&#123;\n            System.out.println(&quot;失败&quot;);\n        &#125;\n        solrTemplate.commit(&quot;collection1&quot;);\n    &#125;\n\n    public void testDelete()&#123;\n        UpdateResponse ur = solrTemplate.deleteByIds(&quot;collection1&quot;, &quot;change.me&quot;);\n        if(ur.getStatus()==0)&#123;\n            System.out.println(&quot;成功&quot;);\n        &#125;else&#123;\n            System.out.println(&quot;失败&quot;);\n        &#125;\n        solrTemplate.commit(&quot;collection1&quot;);\n    &#125;\n\n\n    public void query()&#123;\n        SimpleQuery query = new SimpleQuery();\n        Criteria c = new Criteria(&quot;item_keywords&quot;);\n        c.is(&quot;手机&quot;);\n        query.addCriteria(c);\n        query.setOffset(1L);\n        query.setRows(1);\n        ScoredPage&lt;DemoPojo&gt; sp = solrTemplate.queryForPage(&quot;collection1&quot;, query, DemoPojo.class);\n        System.out.println(sp.getContent());\n    &#125;\n\n    @Test\n    public void queryHL()&#123;\n\n        List&lt;DemoPojo&gt; listResult = new ArrayList&lt;&gt;();\n        SimpleHighlightQuery query = new SimpleHighlightQuery();\n        //设置查询条件\n        Criteria c = new Criteria(&quot;item_keywords&quot;);\n        c.is(&quot;手机&quot;);\n        query.addCriteria(c);\n        //分页\n        query.setOffset(0L);\n        query.setRows(10);\n        //排序\n        Sort sort = new Sort(Sort.Direction.DESC,&quot;id&quot;);\n        query.addSort(sort);\n        //高亮设置\n        HighlightOptions hlo = new HighlightOptions();\n        hlo.addField(&quot;item_title item_sell_point&quot;);\n        hlo.setSimplePrefix(&quot;&lt;span style='color:red;'&gt;&quot;);\n        hlo.setSimplePostfix(&quot;&lt;/span&gt;&quot;);\n        query.setHighlightOptions(hlo);\n        HighlightPage&lt;DemoPojo&gt; hl = solrTemplate.queryForHighlightPage(&quot;collection1&quot;, query, DemoPojo.class);\n//        System.out.println(hl.getContent());\n        List&lt;HighlightEntry&lt;DemoPojo&gt;&gt; highlighted = hl.getHighlighted();\n        for(HighlightEntry&lt;DemoPojo&gt; hle : highlighted)&#123;\n            List&lt;HighlightEntry.Highlight&gt; list = hle.getHighlights();\n            DemoPojo dp = hle.getEntity();\n            for (HighlightEntry.Highlight h : list)&#123;//一个对象里面可能多个属性是高亮属性\n                if(h.getField().getName().equals(&quot;item_title&quot;))&#123;\n                    dp.setItem_title( h.getSnipplets().get(0));\n                &#125;\n            &#125;\n            listResult.add(dp);\n        &#125;\n        System.out.println(listResult);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"十一-使用zookeepr管理solr集群\"><a class=\"anchor\" href=\"#十一-使用zookeepr管理solr集群\">#</a> 十一。使用 zookeepr 管理 solr 集群</h3>\n<p>1. 上传压缩包到 /usr/local/tmp 下 并解压。</p>\n<p>2. 在 /usr/local 下新建文件夹 zookeeper</p>\n<pre><code># mkdir /usr/local/zookeeper\n</code></pre>\n<p>3. 把解压的所有文件复制到 zookeeper 下， 并命名为 zk1</p>\n<pre><code># cp -r /usr/local/temp/zookeeper-3.4.8 /usr/local/zookeeper/zk1\n</code></pre>\n<p>4. 在 zk1 下新建文件夹 data</p>\n<p>5. 在 data 下新建文件 myid, 里面写上 1</p>\n<pre><code># vim myid\n</code></pre>\n<p>6. 进入到 zk1/conf 下 把 zoo_sample.cfg 复制一份叫做 zoo.cfg</p>\n<p>7. 编辑 zoo.cfg 内容，设置 dataDIR 为 data 文件夹， 并在文件最下面添加下面内容</p>\n<pre><code>server.1=192.168.93.10:2688:3888\nserver.2=192.168.93.10:2689:3889\nserver.3=192.168.93.10:2690:3890\n</code></pre>\n<p>7.1 server.1 中的 1 是 myid 的内容</p>\n<p>7.2 2688 2689 2690 是 zookeeper 内部端口</p>\n<p>7.3 3888 3889 3890 是 leader 端口</p>\n<p>8. 把 zk1 复制两份，分部叫做 zk2  zk3  并修改 myid 的值为 2，3 修改 zoo.cfg 中 dataDIR 和 clientPort</p>\n<p>9. 启动三个 zookeeper</p>\n<pre><code># ./zkServer.sh start\n</code></pre>\n<p>10. 查看状态</p>\n<pre><code># ./zkServer.sh status\n</code></pre>\n<h3 id=\"十一-使用zookeepr管理solr集群dokcer\"><a class=\"anchor\" href=\"#十一-使用zookeepr管理solr集群dokcer\">#</a> 十一。使用 zookeepr 管理 solr 集群 (Dokcer)</h3>\n<h4 id=\"1-准备docker-composeyml文件\"><a class=\"anchor\" href=\"#1-准备docker-composeyml文件\">#</a> <strong>1、准备</strong> docker-compose.yml<strong> 文件</strong></h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>version: <span class=\"token string\">'2'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>services:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  zoo1:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    image: zookeeper:3.5</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    container_name: zoo1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      - <span class=\"token string\">\"2181:2181\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      ZOO_SERVERS: <span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2688:3888 <span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>zoo2:2689:3888 <span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>zoo3:2690:3888</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  zoo2:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    image: zookeeper:3.5</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    container_name: zoo2</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      - <span class=\"token string\">\"2182:2181\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      ZOO_SERVERS: <span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>zoo1:2688:3888 <span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2689:3888 <span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>zoo3:2690:3888</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  zoo3:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    image: zookeeper:3.5</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    container_name: zoo3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      - <span class=\"token string\">\"2183:2181\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      ZOO_SERVERS: <span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>zoo1:2688:3888 <span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>zoo2:2689:3888 <span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2690:3888</pre></td></tr></table></figure><h4 id=\"2-创建镜像\"><a class=\"anchor\" href=\"#2-创建镜像\">#</a> <strong>2、创建镜像</strong></h4>\n<ul>\n<li>要在创建的 docker-compose.yml 文件中使用命令</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><h4 id=\"3-进入容器\"><a class=\"anchor\" href=\"#3-进入容器\">#</a> <strong>3、进入容器</strong></h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zoo1 /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#查看 zoo1 的状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./zkServer.sh status</pre></td></tr></table></figure><ul>\n<li>如果出现，以下情况：</li>\n</ul>\n<pre><code>ZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nClient port not found in static config file. Looking in dynamic config file.\ngrep: : No such file or directory\nClient port not found in the server configs\nClient port not found. Looking for secureClientPort in the static config.\nUnable to find either secure or unsecure client port in any configs. Terminating.\n</code></pre>\n<p>​\t通过阅读我们知道他在 conf 中的 zoo.cfg 文件中缺少 **clientPort ** 我们只需要自行添加即可</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#修改之前我们先装一下 vim</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">vim</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#修改 zoo.fcg 文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">vim</span> /conf/zoo.fcg</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">clientPort</span><span class=\"token operator\">=</span><span class=\"token number\">2181</span></pre></td></tr></table></figure><ul>\n<li>\n<p>完事之后<strong>重启</strong> zoo1</p>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645780920291.png\" alt=\"1645780920291\" /></p>\n<p>成功！！</p>\n</li>\n</ul>\n<h4 id=\"4-查看所有zookeeper的状态\"><a class=\"anchor\" href=\"#4-查看所有zookeeper的状态\">#</a> 4、查看所有 zookeeper 的状态</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zoo3 <span class=\"token function\">bash</span> ./bin/zkServer.sh status</pre></td></tr></table></figure><h4 id=\"5-进去客户端\"><a class=\"anchor\" href=\"#5-进去客户端\">#</a> 5、进去客户端</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zoo3 zkCli.sh</pre></td></tr></table></figure><h3 id=\"十二-solrcloud\"><a class=\"anchor\" href=\"#十二-solrcloud\">#</a> 十二、SolrCloud</h3>\n<p>​\tSolr 可以搭建具备容错能力和高可用的 Solr 集群。集群中集群配置、自动负载均衡和查询故障转移、\t\t\tZookeeper 集群实现集群协调管理，这些全部功能统称为 SolrCloud。</p>\n<p>​\tSolrCloud 是基于 Zookeeper 进行管理的。在 Solr 中已经内置了 Zookeeper 相关内容，当执行集群创建命令会自动创建 Zookeeper 相关内容。这个使用的是 Zookeeper 的集群管理功能实现的。</p>\n<h4 id=\"1搭建\"><a class=\"anchor\" href=\"#1搭建\">#</a> 1. 搭建</h4>\n<h5 id=\"11创建\"><a class=\"anchor\" href=\"#11创建\">#</a> 1.1 创建</h5>\n<p>​\tSolrCloud 已经包含在了 Solr 中，可以直接启动 Solr 集群。</p>\n<pre><code> ./solr -e cloud -noprompt -force\n</code></pre>\n<p>​\t此命令等同于# ./solr -e cloud -force 全部参数为默认值。</p>\n<p>​\t运行成功后会在 example 文件夹多出 cloud 文件夹。</p>\n<h5 id=\"12停止\"><a class=\"anchor\" href=\"#12停止\">#</a> 1.2 停止</h5>\n<pre><code> ./solr stop -all\n</code></pre>\n<h5 id=\"13重新运行\"><a class=\"anchor\" href=\"#13重新运行\">#</a> 1.3 重新运行</h5>\n<pre><code> ./solr start -c -p 8983 -s ../example/cloud/node1/solr/ -force\n ./solr start -c -p 7574 -z localhost:9983 -s ../example/cloud/node2/solr/ -force\n</code></pre>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "分布式",
                "中间件",
                "Solr",
                "快速搜索"
            ]
        }
    ]
}