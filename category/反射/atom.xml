<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>雾都博客 • Posts by &#34;反射&#34; category</title>
    <link href="http://example.com" />
    <updated>2022-10-06T16:00:00.000Z</updated>
    <category term="博客" />
    <category term="环境搭建" />
    <category term="分布式" />
    <category term="FastDFS" />
    <category term="Dubbo" />
    <category term="MySQL" />
    <category term="数据库基础" />
    <category term="数据库基本知识" />
    <category term="数据库" />
    <category term="框架" />
    <category term="ORM" />
    <category term="中间件" />
    <category term="RabbitMQ" />
    <category term="Redis基础" />
    <category term="NoSQL数据库" />
    <category term="RPC" />
    <category term="Spring" />
    <category term="SpringBoot" />
    <category term="Solr" />
    <category term="快速搜索" />
    <category term="SpringMVC" />
    <category term="JavaSE" />
    <category term="SpringSecurity" />
    <category term="-JavaSE" />
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/</id>
        <title>第16章_反射</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/"/>
        <content type="html">&lt;h1 id=&#34;通过案例体会反射的好处&#34;&gt;&lt;a href=&#34;#通过案例体会反射的好处&#34; class=&#34;headerlink&#34; title=&#34;通过案例体会反射的好处&#34;&gt;&lt;/a&gt;通过案例体会反射的好处&lt;/h1&gt;&lt;p&gt;案例：美团外卖 —&amp;gt;付款 —》要么用微信支付 要么用支付宝支付&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//接口的制定方：美团外卖
public interface Mtwm &amp;#123;
    //在线支付功能：
    void payOnline();
&amp;#125;

public class WeChat implements Mtwm&amp;#123;
    @Override
    public void payOnline() &amp;#123;
        //具体实现微信支付的功能：
        System.out.println(&amp;quot;我已经点了外卖，正在使用微信支付&amp;quot;);
    &amp;#125;
&amp;#125;
public class AliPay implements Mtwm &amp;#123;
    @Override
    public void payOnline() &amp;#123;
        //具体的支付宝支付：
        System.out.println(&amp;quot;我已经点了外卖，我正在使用支付宝进行支付&amp;quot;);
    &amp;#125;
&amp;#125;
public class BankCard implements Mtwm&amp;#123;
    @Override
    public void payOnline() &amp;#123;
        System.out.println(&amp;quot;我已经定了外卖，我正在用招商银行信用卡支付&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; public class Test &amp;#123;
 public static void main(String[] args) &amp;#123;
 //定义一个字符串，用来模拟前台的支付方式：
 String str = &amp;quot;微信&amp;quot;;
 if(&amp;quot;微信&amp;quot;.equals(str))&amp;#123;//str.equals(&amp;quot;微信&amp;quot;)---？避免空指针异常
 //微信支付：
 //new WeChat().payOnline();
 pay(new WeChat());
 &amp;#125;

 if(&amp;quot;支付宝&amp;quot;.equals(str))&amp;#123;
 //支付宝支付：
 //new AliPay().payOnline();
 pay(new AliPay());
 &amp;#125;

 if(&amp;quot;招商银行&amp;quot;.equals(str))&amp;#123;
 pay(new BankCard());
 &amp;#125;
 &amp;#125;
 //微信支付
 public static void pay(WeChat wc)&amp;#123;
 wc.payOnline();
 &amp;#125;
 //支付宝支付
 public static void pay(AliPay ap)&amp;#123;
 ap.payOnline();
 &amp;#125;

 //招商银行支付
 public static void pay(BankCard bc)&amp;#123;
 bc.payOnline();
 &amp;#125;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了提高代码的扩展性—》面向对象特性：多态：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    public static void main(String[] args) &amp;#123;
        //定义一个字符串，用来模拟前台的支付方式：
        String str = &amp;quot;微信&amp;quot;;
        if(&amp;quot;微信&amp;quot;.equals(str))&amp;#123;//str.equals(&amp;quot;微信&amp;quot;)---？避免空指针异常
            //微信支付：
            pay(new WeChat());
        &amp;#125;

        if(&amp;quot;支付宝&amp;quot;.equals(str))&amp;#123;
            //支付宝支付：
            pay(new AliPay());
        &amp;#125;

        if(&amp;quot;招商银行&amp;quot;.equals(str))&amp;#123;
            pay(new BankCard());
        &amp;#125;
    &amp;#125;
    //方法形参是接口，具体传入的是接口的实现类的对象---》多态的一种形式
    public static void pay(Mtwm m)&amp;#123;
        m.payOnline();
    &amp;#125;
&amp;#125;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多态确实可以提高代码的扩展性，但是：扩展性没有达到最好。&lt;/p&gt;
&lt;p&gt;怎么没有达到最好：上面的分支，还是需要手动的删除或者添加。&lt;/p&gt;
&lt;p&gt;解决办法：反射机制&lt;/p&gt;
&lt;p&gt;利用反射实现上述功能：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    public static void main(String[] args) throws Exception &amp;#123;
        //定义一个字符串，用来模拟前台的支付方式：
        String str = &amp;quot;com.zhaoss.test01.AliPay&amp;quot;; //字符串：实际上：就是微信类的全限定路径

        //下面的代码就是利用反射：
        Class cls = Class.forName(str);//cls--\&amp;gt;Class类具体的对象--》AliPay字节码信息
        Object o = cls.newInstance();
        Method method = cls.getMethod(&amp;quot;payOnline&amp;quot;);
        method.invoke(o);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;通过概念再体会反射&#34;&gt;&lt;a href=&#34;#通过概念再体会反射&#34; class=&#34;headerlink&#34; title=&#34;通过概念再体会反射&#34;&gt;&lt;/a&gt;通过概念再体会反射&lt;/h1&gt;&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，&lt;/p&gt;
&lt;p&gt;都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。&lt;/p&gt;
&lt;p&gt;在编译后产生字节码文件的时候，类加载器子系统通过二进制字节流，负责从文件系统加载class文件。&lt;/p&gt;
&lt;p&gt;在执行程序（java.exe）时候，将字节码文件读入JVM中—&amp;gt;这个过程叫做类的加载。然后在内存中对应创建一个java.lang.Class对象–&amp;gt;这个对象会被放入字节码信息中,这个Class对象,就对应加载那个字节码信息,这个对象将被作为程序访问方法区中的这个类的各种数据的外部接口。&lt;/p&gt;
&lt;p&gt;所以：我们可以通过这个对象看到类的结构，这个对象就好像是一面镜子，透过镜子看到类的各种信息，我们形象的称之为反射&lt;/p&gt;
&lt;p&gt;这种“看透”class的能力（the ability of the program to examine itself）被称为introspection（内省、内观、反省）。Reflection和introspection是常被并提的两个术语。&lt;/p&gt;
&lt;p&gt;说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。&lt;/p&gt;
&lt;p&gt;如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。&lt;/p&gt;
&lt;p&gt;补充:&lt;/p&gt;
&lt;p&gt;动态语膏vs静态语言&lt;/p&gt;
&lt;p&gt;1、动态语言&lt;/p&gt;
&lt;p&gt;是一类在运行时可以改变其结构的语言:例如新的函数、对象、甚至代码可以&lt;/p&gt;
&lt;p&gt;被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运&lt;/p&gt;
&lt;p&gt;行时代码可以根据某些条件改变自身结构。&lt;/p&gt;
&lt;p&gt;主要动态语言: Object-C、 C#、JavaScript、 PHP、 Python、 Erlang 。&lt;/p&gt;
&lt;p&gt;2、静态语言&lt;/p&gt;
&lt;p&gt;与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、&lt;/p&gt;
&lt;p&gt;C++。&lt;/p&gt;
&lt;p&gt;所以Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动&lt;/p&gt;
&lt;p&gt;态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。&lt;/p&gt;
&lt;p&gt;Java的动态性让编程的时候更加灵活!&lt;/p&gt;
&lt;p&gt;Class类的理解&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/6d8b0c266d2a65f30295f32185c3256c.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;提供丰富的类&#34;&gt;&lt;a href=&#34;#提供丰富的类&#34; class=&#34;headerlink&#34; title=&#34;提供丰富的类&#34;&gt;&lt;/a&gt;提供丰富的类&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//作为一个父类
public class Person &amp;#123;
    //属性
    private int age;
    public String name;

    //方法
    private void eat()&amp;#123;
        System.out.println(&amp;quot;Person---eat&amp;quot;);
    &amp;#125;
    public void sleep()&amp;#123;
        System.out.println(&amp;quot;Person---sleep&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//Student作为子类
public class Student extends Person &amp;#123;
    //属性：
    private int sno;//学号
    double height;//身高
    protected double weight;//体重
    public double score;//成绩

    //方法：
    public String showInfo()&amp;#123;
        return &amp;quot;我是一名三好学生&amp;quot;;
    &amp;#125;
    private void work()&amp;#123;
        System.out.println(&amp;quot;我以后会找工作--》成为码农 程序员 程序猿 程序媛&amp;quot;);
    &amp;#125;

    //构造器
    public Student()&amp;#123;
        System.out.println(&amp;quot;空参构造器&amp;quot;);
    &amp;#125;
    private Student(int sno)&amp;#123;
        this.sno = sno;
    &amp;#125;
    Student(int sno,double weight)&amp;#123;
        this.sno = sno;
        this.weight = weight;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;获取字节码信息的四种形式&#34;&gt;&lt;a href=&#34;#获取字节码信息的四种形式&#34; class=&#34;headerlink&#34; title=&#34;获取字节码信息的四种形式&#34;&gt;&lt;/a&gt;获取字节码信息的四种形式&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public class Test &amp;#123;
    public static void main(String[] args) throws ClassNotFoundException &amp;#123;
        //案例：以Person的字节码信息为案例
        //方式1：通过getClass()方法获取
        Person p = new Person();
        Class c1 = p.getClass();
        System.out.println(c1);

        //方式2：通过内置class属性：
        Class c2 = Person.class;
        System.out.println(c2);

        System.out.println(c1==c2);

        //注意：方式1和方式2 不常用

        //方式3：--》用的最多：调用Class类提供的静态方法forName
        Class c3 = Class.forName(&amp;quot;com.zhaoss.test02.Person&amp;quot;);
        //方式4：利用类的加载器(了解技能点)
        ClassLoader loader = Test.class.getClassLoader();
        Class c4 = loader.loadClass(&amp;quot;com.zhaoss.test02.Person&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;可以作为Class类的实例的种类&#34;&gt;&lt;a href=&#34;#可以作为Class类的实例的种类&#34; class=&#34;headerlink&#34; title=&#34;可以作为Class类的实例的种类&#34;&gt;&lt;/a&gt;可以作为Class类的实例的种类&lt;/h1&gt;&lt;p&gt;Class类的具体的实例：&lt;/p&gt;
&lt;p&gt;（1）类：外部类，内部类&lt;/p&gt;
&lt;p&gt;（2）接口&lt;/p&gt;
&lt;p&gt;（3）注解&lt;/p&gt;
&lt;p&gt;（4）数组&lt;/p&gt;
&lt;p&gt;（5）基本数据类型&lt;/p&gt;
&lt;p&gt;（6）void&lt;/p&gt;
&lt;p&gt;验证：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;

public class Demo &amp;#123;
    public static void main(String[] args) &amp;#123;
        /\*
            Class类的具体的实例：
            （1）类：外部类，内部类
            （2）接口
            （3）注解
            （4）数组
            （5）基本数据类型
            （6）void
            \*/
            Class c1 = Person.class;
        Class c2 = Comparable.class;
        Class c3 = Override.class;

        int[] arr1 = &amp;#123;1,2,3&amp;#125;;
        Class c4 = arr1.getClass();
        int[] arr2 = &amp;#123;5,6,7&amp;#125;;
        Class c5 = arr2.getClass();
        System.out.println(c4==c5);//结果：true .同一个维度，同一个元素类型,得到的字节码就是同一个

        Class c6 = int.class;
        Class c7 = void.class;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;获取运行时类的完整结构&#34;&gt;&lt;a href=&#34;#获取运行时类的完整结构&#34; class=&#34;headerlink&#34; title=&#34;获取运行时类的完整结构&#34;&gt;&lt;/a&gt;获取运行时类的完整结构&lt;/h1&gt;&lt;h2 id=&#34;补充完善上面提供的丰富的类&#34;&gt;&lt;a href=&#34;#补充完善上面提供的丰富的类&#34; class=&#34;headerlink&#34; title=&#34;补充完善上面提供的丰富的类&#34;&gt;&lt;/a&gt;补充完善上面提供的丰富的类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;作为一个父类&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person implements Serializable &amp;#123;
    //属性
    private int age;
    public String name;

    //方法
    private void eat()&amp;#123;
        System.out.println(&amp;quot;Person---eat&amp;quot;);
    &amp;#125;
    public void sleep()&amp;#123;
        System.out.println(&amp;quot;Person---sleep&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//Student作为子类
@MyAnnotation(value=&amp;quot;hello&amp;quot;)
public class Student extends Person implements MyInterface&amp;#123;
    //属性：
    private int sno;//学号
    double height;//身高
    protected double weight;//体重
    public double score;//成绩

    //方法：
    @MyAnnotation(value=&amp;quot;himethod&amp;quot;)
    public String showInfo()&amp;#123;
        return &amp;quot;我是一名三好学生&amp;quot;;
    &amp;#125;
    public String showInfo(int a,int b)&amp;#123;
        return &amp;quot;重载方法====我是一名三好学生&amp;quot;;
    &amp;#125;
    private void work()&amp;#123;
        System.out.println(&amp;quot;我以后会找工作--》成为码农 程序员 程序猿 程序媛&amp;quot;);
    &amp;#125;
    void happy()&amp;#123;
        System.out.println(&amp;quot;做人最重要的就是开心每一天&amp;quot;);
    &amp;#125;
    protected int getSno()&amp;#123;
        return sno;
    &amp;#125;

    //构造器
    public Student()&amp;#123;
        System.out.println(&amp;quot;空参构造器&amp;quot;);
    &amp;#125;
    private Student(int sno)&amp;#123;
        this.sno = sno;
    &amp;#125;
    Student(int sno,double weight)&amp;#123;
        this.sno = sno;
        this.weight = weight;
    &amp;#125;
    protected Student(int sno,double height,double weight)&amp;#123;
        this.sno = sno;
    &amp;#125;

    @Override
    @MyAnnotation(value=&amp;quot;hellomyMethod&amp;quot;)
    public void myMethod() &amp;#123;
        System.out.println(&amp;quot;我重写了myMethod方法。。&amp;quot;);
    &amp;#125;

    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
            &amp;quot;sno=&amp;quot; + sno +
            &amp;quot;, height=&amp;quot; + height +
            &amp;quot;, weight=&amp;quot; + weight +
            &amp;quot;, score=&amp;quot; + score +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/\*
    @Target:定义当前注解能够修饰程序中的哪些元素
        @Retention:定义注解的声明周期
            \*/
@Target(&amp;#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&amp;#125;)
            @Retention(RetentionPolicy.RUNTIME)
            public @interface MyAnnotation &amp;#123;
            String value();//属性
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; public interface MyInterface &amp;#123;//自定义的接口
 //随便定义一个抽象方法：
 void myMethod();
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取构造器和创建对象&#34;&gt;&lt;a href=&#34;#获取构造器和创建对象&#34; class=&#34;headerlink&#34; title=&#34;获取构造器和创建对象&#34;&gt;&lt;/a&gt;获取构造器和创建对象&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &amp;#123;
        //获取字节码信息：
        Class cls = Student.class;

        //通过字节码信息可以获取构造器：
        //getConstructors只能获取当前运行时类的被public修饰的构造器
        Constructor[] c1 = cls.getConstructors();
        for(Constructor c:c1)&amp;#123;
            System.out.println(c);
        &amp;#125;

        System.out.println(&amp;quot;-------------------&amp;quot;);
        //getDeclaredConstructors:获取运行时类的全部修饰符的构造器
        Constructor[] c2 = cls.getDeclaredConstructors();
        for(Constructor c:c2)&amp;#123;
            System.out.println(c);
        &amp;#125;
        System.out.println(&amp;quot;-------------------&amp;quot;);
        //获取指定的构造器：
        //得到空构造器
        Constructor con1 = cls.getConstructor();
        System.out.println(con1);

        //得到两个参数的有参构造器：
        Constructor con2 = cls.getConstructor(double.class, double.class);
        System.out.println(con2);

        //得到一个参数的有参构造器：并且是private修饰的
        Constructor con3 = cls.getDeclaredConstructor(int.class);
        System.out.println(con3);

        //有了构造器以后我就可以创建对象：
        Object o1 = con1.newInstance();
        System.out.println(o1);

        Object o2 = con2.newInstance(180.5, 170.6);
        System.out.println(o2);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取属性和对属性进行赋值&#34;&gt;&lt;a href=&#34;#获取属性和对属性进行赋值&#34; class=&#34;headerlink&#34; title=&#34;获取属性和对属性进行赋值&#34;&gt;&lt;/a&gt;获取属性和对属性进行赋值&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InstantiationException &amp;#123;
        //获取运行时类的字节码信息：
        Class cls = Student.class;
        //获取属性：
        //getFields：获取运行时类和父类中被public修饰的属性
        Field[] fields = cls.getFields();
        for(Field f:fields)&amp;#123;
            System.out.println(f);
        &amp;#125;
        System.out.println(&amp;quot;---------------------&amp;quot;);
        //getDeclaredFields：获取运行时类中的所有属性
        Field[] declaredFields = cls.getDeclaredFields();
        for(Field f:declaredFields)&amp;#123;
            System.out.println(f);
        &amp;#125;
        System.out.println(&amp;quot;---------------------&amp;quot;);
        //获取指定的属性：
        Field score = cls.getField(&amp;quot;score&amp;quot;);
        System.out.println(score);
        Field sno = cls.getDeclaredField(&amp;quot;sno&amp;quot;);
        System.out.println(sno);

        System.out.println(&amp;quot;---------------------&amp;quot;);
        //属性的具体结构：
        //获取修饰符
        /\*int modifiers = sno.getModifiers();
        System.out.println(modifiers);
        System.out.println(Modifier.toString(modifiers));\*/
            System.out.println(Modifier.toString(sno.getModifiers()));
        //获取属性的数据类型：
        Class clazz = sno.getType();
        System.out.println(clazz.getName());

        //获取属性的名字：
        String name = sno.getName();
        System.out.println(name);
        System.out.println(&amp;quot;-------------------------------&amp;quot;);
        //给属性赋值：(给属性设置值，必须要有对象)
        Field sco = cls.getField(&amp;quot;score&amp;quot;);
        Object obj = cls.newInstance();
        sco.set(obj,98);//给obj这个对象的score属性设置具体的值，这个值为98
        System.out.println(obj);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取方法和调用方法&#34;&gt;&lt;a href=&#34;#获取方法和调用方法&#34; class=&#34;headerlink&#34; title=&#34;获取方法和调用方法&#34;&gt;&lt;/a&gt;获取方法和调用方法&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &amp;#123;
        //获取字节码信息：
        Class cls = Student.class;
        //获取方法：
        //getMethods:获取运行时类的方法还有所有父类中的方法（被public修饰）
        Method[] methods = cls.getMethods();
        for(Method m:methods)&amp;#123;
            System.out.println(m);
        &amp;#125;
        System.out.println(&amp;quot;-----------------------&amp;quot;);
        //getDeclaredMethods:获取运行时类中的所有方法：
        Method[] declaredMethods = cls.getDeclaredMethods();
        for(Method m:declaredMethods)&amp;#123;
            System.out.println(m);
        &amp;#125;
        System.out.println(&amp;quot;-----------------------&amp;quot;);
        //获取指定的方法：
        Method showInfo1 = cls.getMethod(&amp;quot;showInfo&amp;quot;);
        System.out.println(showInfo1);
        Method showInfo2 = cls.getMethod(&amp;quot;showInfo&amp;quot;, int.class, int.class);
        System.out.println(showInfo2);
        Method work = cls.getDeclaredMethod(&amp;quot;work&amp;quot;,int.class);
        System.out.println(work);
        System.out.println(&amp;quot;-----------------------&amp;quot;);
        //获取方法的具体结构：
        /\*
            @注解
            修饰符 返回值类型 方法名(参数列表) throws XXXXX&amp;#123;&amp;#125;
        \*/
            //名字：
            System.out.println(work.getName());
        //修饰符：
        int modifiers = work.getModifiers();
        System.out.println(Modifier.toString(modifiers));
        //返回值：
        System.out.println(work.getReturnType());
        //参数列表：
        Class[] parameterTypes = work.getParameterTypes();
        for(Class c:parameterTypes)&amp;#123;
            System.out.println(c);
        &amp;#125;

        //获取注解：
        Method myMethod = cls.getMethod(&amp;quot;myMethod&amp;quot;);
        Annotation[] annotations = myMethod.getAnnotations();
        for(Annotation a:annotations)&amp;#123;
            System.out.println(a);
        &amp;#125;

        //获取异常：
        Class[] exceptionTypes = myMethod.getExceptionTypes();
        for(Class c:exceptionTypes)&amp;#123;
            System.out.println(c);
        &amp;#125;


        //调用方法：
        Object o = cls.newInstance();
        myMethod.invoke(o);//调用o对象的mymethod方法

        System.out.println(showInfo2.invoke(o,12,45));;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取类的接口，所在包，注解&#34;&gt;&lt;a href=&#34;#获取类的接口，所在包，注解&#34; class=&#34;headerlink&#34; title=&#34;获取类的接口，所在包，注解&#34;&gt;&lt;/a&gt;获取类的接口，所在包，注解&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;

public class Test04 &amp;#123;
    public static void main(String[] args) &amp;#123;
        //获取字节码信息：
        Class cls = Student.class;
        //获取运行时类的接口：
        Class[] interfaces = cls.getInterfaces();
        for(Class c:interfaces)&amp;#123;
            System.out.println(c);
        &amp;#125;

        //得到父类的接口：
        //先得到父类的字节码信息：
        Class superclass = cls.getSuperclass();

        //得到接口：
        Class[] interfaces1 = superclass.getInterfaces();
        for(Class c:interfaces1)&amp;#123;
            System.out.println(c);
        &amp;#125;

        //获取运行时类所在的包：
        Package aPackage = cls.getPackage();
        System.out.println(aPackage);
        System.out.println(aPackage.getName());

        //获取运行类的注解：
        Annotation[] annotations = cls.getAnnotations();
        for(Annotation a:annotations)&amp;#123;
            System.out.println(a);
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;关于反射的面试题&#34;&gt;&lt;a href=&#34;#关于反射的面试题&#34; class=&#34;headerlink&#34; title=&#34;关于反射的面试题&#34;&gt;&lt;/a&gt;关于反射的面试题&lt;/h2&gt;&lt;p&gt;【1】问题1：创建Person的对象，以后用new Person()创建,还是用反射创建？&lt;/p&gt;
&lt;p&gt;【2】问题2：反射是否破坏了面向对象的封装性？&lt;/p&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
</feed>
