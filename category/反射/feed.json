{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"反射\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/",
            "title": "第16章_反射",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"通过案例体会反射的好处\"><a href=\"#通过案例体会反射的好处\" class=\"headerlink\" title=\"通过案例体会反射的好处\"></a>通过案例体会反射的好处</h1><p>案例：美团外卖 —&gt;付款 —》要么用微信支付 要么用支付宝支付</p>\n<pre><code class=\"java\">//接口的制定方：美团外卖\npublic interface Mtwm &#123;\n    //在线支付功能：\n    void payOnline();\n&#125;\n\npublic class WeChat implements Mtwm&#123;\n    @Override\n    public void payOnline() &#123;\n        //具体实现微信支付的功能：\n        System.out.println(&quot;我已经点了外卖，正在使用微信支付&quot;);\n    &#125;\n&#125;\npublic class AliPay implements Mtwm &#123;\n    @Override\n    public void payOnline() &#123;\n        //具体的支付宝支付：\n        System.out.println(&quot;我已经点了外卖，我正在使用支付宝进行支付&quot;);\n    &#125;\n&#125;\npublic class BankCard implements Mtwm&#123;\n    @Override\n    public void payOnline() &#123;\n        System.out.println(&quot;我已经定了外卖，我正在用招商银行信用卡支付&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\"> public class Test &#123;\n public static void main(String[] args) &#123;\n //定义一个字符串，用来模拟前台的支付方式：\n String str = &quot;微信&quot;;\n if(&quot;微信&quot;.equals(str))&#123;//str.equals(&quot;微信&quot;)---？避免空指针异常\n //微信支付：\n //new WeChat().payOnline();\n pay(new WeChat());\n &#125;\n\n if(&quot;支付宝&quot;.equals(str))&#123;\n //支付宝支付：\n //new AliPay().payOnline();\n pay(new AliPay());\n &#125;\n\n if(&quot;招商银行&quot;.equals(str))&#123;\n pay(new BankCard());\n &#125;\n &#125;\n //微信支付\n public static void pay(WeChat wc)&#123;\n wc.payOnline();\n &#125;\n //支付宝支付\n public static void pay(AliPay ap)&#123;\n ap.payOnline();\n &#125;\n\n //招商银行支付\n public static void pay(BankCard bc)&#123;\n bc.payOnline();\n &#125;\n &#125;\n</code></pre>\n<p>为了提高代码的扩展性—》面向对象特性：多态：</p>\n<pre><code class=\"java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        //定义一个字符串，用来模拟前台的支付方式：\n        String str = &quot;微信&quot;;\n        if(&quot;微信&quot;.equals(str))&#123;//str.equals(&quot;微信&quot;)---？避免空指针异常\n            //微信支付：\n            pay(new WeChat());\n        &#125;\n\n        if(&quot;支付宝&quot;.equals(str))&#123;\n            //支付宝支付：\n            pay(new AliPay());\n        &#125;\n\n        if(&quot;招商银行&quot;.equals(str))&#123;\n            pay(new BankCard());\n        &#125;\n    &#125;\n    //方法形参是接口，具体传入的是接口的实现类的对象---》多态的一种形式\n    public static void pay(Mtwm m)&#123;\n        m.payOnline();\n    &#125;\n&#125;\n\n\n</code></pre>\n<p>多态确实可以提高代码的扩展性，但是：扩展性没有达到最好。</p>\n<p>怎么没有达到最好：上面的分支，还是需要手动的删除或者添加。</p>\n<p>解决办法：反射机制</p>\n<p>利用反射实现上述功能：</p>\n<pre><code class=\"java\">public class Demo &#123;\n    public static void main(String[] args) throws Exception &#123;\n        //定义一个字符串，用来模拟前台的支付方式：\n        String str = &quot;com.zhaoss.test01.AliPay&quot;; //字符串：实际上：就是微信类的全限定路径\n\n        //下面的代码就是利用反射：\n        Class cls = Class.forName(str);//cls--\\&gt;Class类具体的对象--》AliPay字节码信息\n        Object o = cls.newInstance();\n        Method method = cls.getMethod(&quot;payOnline&quot;);\n        method.invoke(o);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"通过概念再体会反射\"><a href=\"#通过概念再体会反射\" class=\"headerlink\" title=\"通过概念再体会反射\"></a>通过概念再体会反射</h1><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，</p>\n<p>都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>\n<p>在编译后产生字节码文件的时候，类加载器子系统通过二进制字节流，负责从文件系统加载class文件。</p>\n<p>在执行程序（java.exe）时候，将字节码文件读入JVM中—&gt;这个过程叫做类的加载。然后在内存中对应创建一个java.lang.Class对象–&gt;这个对象会被放入字节码信息中,这个Class对象,就对应加载那个字节码信息,这个对象将被作为程序访问方法区中的这个类的各种数据的外部接口。</p>\n<p>所以：我们可以通过这个对象看到类的结构，这个对象就好像是一面镜子，透过镜子看到类的各种信息，我们形象的称之为反射</p>\n<p>这种“看透”class的能力（the ability of the program to examine itself）被称为introspection（内省、内观、反省）。Reflection和introspection是常被并提的两个术语。</p>\n<p>说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。</p>\n<p>如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。</p>\n<p>补充:</p>\n<p>动态语膏vs静态语言</p>\n<p>1、动态语言</p>\n<p>是一类在运行时可以改变其结构的语言:例如新的函数、对象、甚至代码可以</p>\n<p>被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运</p>\n<p>行时代码可以根据某些条件改变自身结构。</p>\n<p>主要动态语言: Object-C、 C#、JavaScript、 PHP、 Python、 Erlang 。</p>\n<p>2、静态语言</p>\n<p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、</p>\n<p>C++。</p>\n<p>所以Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动</p>\n<p>态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。</p>\n<p>Java的动态性让编程的时候更加灵活!</p>\n<p>Class类的理解</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/6d8b0c266d2a65f30295f32185c3256c.png\" class=\"\">\n\n\n<h1 id=\"提供丰富的类\"><a href=\"#提供丰富的类\" class=\"headerlink\" title=\"提供丰富的类\"></a>提供丰富的类</h1><pre><code class=\"java\">//作为一个父类\npublic class Person &#123;\n    //属性\n    private int age;\n    public String name;\n\n    //方法\n    private void eat()&#123;\n        System.out.println(&quot;Person---eat&quot;);\n    &#125;\n    public void sleep()&#123;\n        System.out.println(&quot;Person---sleep&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">//Student作为子类\npublic class Student extends Person &#123;\n    //属性：\n    private int sno;//学号\n    double height;//身高\n    protected double weight;//体重\n    public double score;//成绩\n\n    //方法：\n    public String showInfo()&#123;\n        return &quot;我是一名三好学生&quot;;\n    &#125;\n    private void work()&#123;\n        System.out.println(&quot;我以后会找工作--》成为码农 程序员 程序猿 程序媛&quot;);\n    &#125;\n\n    //构造器\n    public Student()&#123;\n        System.out.println(&quot;空参构造器&quot;);\n    &#125;\n    private Student(int sno)&#123;\n        this.sno = sno;\n    &#125;\n    Student(int sno,double weight)&#123;\n        this.sno = sno;\n        this.weight = weight;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"获取字节码信息的四种形式\"><a href=\"#获取字节码信息的四种形式\" class=\"headerlink\" title=\"获取字节码信息的四种形式\"></a>获取字节码信息的四种形式</h1><pre><code class=\"java\">\npublic class Test &#123;\n    public static void main(String[] args) throws ClassNotFoundException &#123;\n        //案例：以Person的字节码信息为案例\n        //方式1：通过getClass()方法获取\n        Person p = new Person();\n        Class c1 = p.getClass();\n        System.out.println(c1);\n\n        //方式2：通过内置class属性：\n        Class c2 = Person.class;\n        System.out.println(c2);\n\n        System.out.println(c1==c2);\n\n        //注意：方式1和方式2 不常用\n\n        //方式3：--》用的最多：调用Class类提供的静态方法forName\n        Class c3 = Class.forName(&quot;com.zhaoss.test02.Person&quot;);\n        //方式4：利用类的加载器(了解技能点)\n        ClassLoader loader = Test.class.getClassLoader();\n        Class c4 = loader.loadClass(&quot;com.zhaoss.test02.Person&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"可以作为Class类的实例的种类\"><a href=\"#可以作为Class类的实例的种类\" class=\"headerlink\" title=\"可以作为Class类的实例的种类\"></a>可以作为Class类的实例的种类</h1><p>Class类的具体的实例：</p>\n<p>（1）类：外部类，内部类</p>\n<p>（2）接口</p>\n<p>（3）注解</p>\n<p>（4）数组</p>\n<p>（5）基本数据类型</p>\n<p>（6）void</p>\n<p>验证：</p>\n<pre><code class=\"java\">\n\npublic class Demo &#123;\n    public static void main(String[] args) &#123;\n        /\\*\n            Class类的具体的实例：\n            （1）类：外部类，内部类\n            （2）接口\n            （3）注解\n            （4）数组\n            （5）基本数据类型\n            （6）void\n            \\*/\n            Class c1 = Person.class;\n        Class c2 = Comparable.class;\n        Class c3 = Override.class;\n\n        int[] arr1 = &#123;1,2,3&#125;;\n        Class c4 = arr1.getClass();\n        int[] arr2 = &#123;5,6,7&#125;;\n        Class c5 = arr2.getClass();\n        System.out.println(c4==c5);//结果：true .同一个维度，同一个元素类型,得到的字节码就是同一个\n\n        Class c6 = int.class;\n        Class c7 = void.class;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"获取运行时类的完整结构\"><a href=\"#获取运行时类的完整结构\" class=\"headerlink\" title=\"获取运行时类的完整结构\"></a>获取运行时类的完整结构</h1><h2 id=\"补充完善上面提供的丰富的类\"><a href=\"#补充完善上面提供的丰富的类\" class=\"headerlink\" title=\"补充完善上面提供的丰富的类\"></a>补充完善上面提供的丰富的类</h2><ol>\n<li>&#x2F;&#x2F;作为一个父类</li>\n</ol>\n<pre><code class=\"java\">public class Person implements Serializable &#123;\n    //属性\n    private int age;\n    public String name;\n\n    //方法\n    private void eat()&#123;\n        System.out.println(&quot;Person---eat&quot;);\n    &#125;\n    public void sleep()&#123;\n        System.out.println(&quot;Person---sleep&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">//Student作为子类\n@MyAnnotation(value=&quot;hello&quot;)\npublic class Student extends Person implements MyInterface&#123;\n    //属性：\n    private int sno;//学号\n    double height;//身高\n    protected double weight;//体重\n    public double score;//成绩\n\n    //方法：\n    @MyAnnotation(value=&quot;himethod&quot;)\n    public String showInfo()&#123;\n        return &quot;我是一名三好学生&quot;;\n    &#125;\n    public String showInfo(int a,int b)&#123;\n        return &quot;重载方法====我是一名三好学生&quot;;\n    &#125;\n    private void work()&#123;\n        System.out.println(&quot;我以后会找工作--》成为码农 程序员 程序猿 程序媛&quot;);\n    &#125;\n    void happy()&#123;\n        System.out.println(&quot;做人最重要的就是开心每一天&quot;);\n    &#125;\n    protected int getSno()&#123;\n        return sno;\n    &#125;\n\n    //构造器\n    public Student()&#123;\n        System.out.println(&quot;空参构造器&quot;);\n    &#125;\n    private Student(int sno)&#123;\n        this.sno = sno;\n    &#125;\n    Student(int sno,double weight)&#123;\n        this.sno = sno;\n        this.weight = weight;\n    &#125;\n    protected Student(int sno,double height,double weight)&#123;\n        this.sno = sno;\n    &#125;\n\n    @Override\n    @MyAnnotation(value=&quot;hellomyMethod&quot;)\n    public void myMethod() &#123;\n        System.out.println(&quot;我重写了myMethod方法。。&quot;);\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n            &quot;sno=&quot; + sno +\n            &quot;, height=&quot; + height +\n            &quot;, weight=&quot; + weight +\n            &quot;, score=&quot; + score +\n            &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">/\\*\n    @Target:定义当前注解能够修饰程序中的哪些元素\n        @Retention:定义注解的声明周期\n            \\*/\n@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)\n            @Retention(RetentionPolicy.RUNTIME)\n            public @interface MyAnnotation &#123;\n            String value();//属性\n        &#125;\n</code></pre>\n<pre><code class=\"java\"> public interface MyInterface &#123;//自定义的接口\n //随便定义一个抽象方法：\n void myMethod();\n &#125;\n</code></pre>\n<h2 id=\"获取构造器和创建对象\"><a href=\"#获取构造器和创建对象\" class=\"headerlink\" title=\"获取构造器和创建对象\"></a>获取构造器和创建对象</h2><pre><code class=\"java\">public class Test01 &#123;\n    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;\n        //获取字节码信息：\n        Class cls = Student.class;\n\n        //通过字节码信息可以获取构造器：\n        //getConstructors只能获取当前运行时类的被public修饰的构造器\n        Constructor[] c1 = cls.getConstructors();\n        for(Constructor c:c1)&#123;\n            System.out.println(c);\n        &#125;\n\n        System.out.println(&quot;-------------------&quot;);\n        //getDeclaredConstructors:获取运行时类的全部修饰符的构造器\n        Constructor[] c2 = cls.getDeclaredConstructors();\n        for(Constructor c:c2)&#123;\n            System.out.println(c);\n        &#125;\n        System.out.println(&quot;-------------------&quot;);\n        //获取指定的构造器：\n        //得到空构造器\n        Constructor con1 = cls.getConstructor();\n        System.out.println(con1);\n\n        //得到两个参数的有参构造器：\n        Constructor con2 = cls.getConstructor(double.class, double.class);\n        System.out.println(con2);\n\n        //得到一个参数的有参构造器：并且是private修饰的\n        Constructor con3 = cls.getDeclaredConstructor(int.class);\n        System.out.println(con3);\n\n        //有了构造器以后我就可以创建对象：\n        Object o1 = con1.newInstance();\n        System.out.println(o1);\n\n        Object o2 = con2.newInstance(180.5, 170.6);\n        System.out.println(o2);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"获取属性和对属性进行赋值\"><a href=\"#获取属性和对属性进行赋值\" class=\"headerlink\" title=\"获取属性和对属性进行赋值\"></a>获取属性和对属性进行赋值</h2><pre><code class=\"java\">public class Test02 &#123;\n    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InstantiationException &#123;\n        //获取运行时类的字节码信息：\n        Class cls = Student.class;\n        //获取属性：\n        //getFields：获取运行时类和父类中被public修饰的属性\n        Field[] fields = cls.getFields();\n        for(Field f:fields)&#123;\n            System.out.println(f);\n        &#125;\n        System.out.println(&quot;---------------------&quot;);\n        //getDeclaredFields：获取运行时类中的所有属性\n        Field[] declaredFields = cls.getDeclaredFields();\n        for(Field f:declaredFields)&#123;\n            System.out.println(f);\n        &#125;\n        System.out.println(&quot;---------------------&quot;);\n        //获取指定的属性：\n        Field score = cls.getField(&quot;score&quot;);\n        System.out.println(score);\n        Field sno = cls.getDeclaredField(&quot;sno&quot;);\n        System.out.println(sno);\n\n        System.out.println(&quot;---------------------&quot;);\n        //属性的具体结构：\n        //获取修饰符\n        /\\*int modifiers = sno.getModifiers();\n        System.out.println(modifiers);\n        System.out.println(Modifier.toString(modifiers));\\*/\n            System.out.println(Modifier.toString(sno.getModifiers()));\n        //获取属性的数据类型：\n        Class clazz = sno.getType();\n        System.out.println(clazz.getName());\n\n        //获取属性的名字：\n        String name = sno.getName();\n        System.out.println(name);\n        System.out.println(&quot;-------------------------------&quot;);\n        //给属性赋值：(给属性设置值，必须要有对象)\n        Field sco = cls.getField(&quot;score&quot;);\n        Object obj = cls.newInstance();\n        sco.set(obj,98);//给obj这个对象的score属性设置具体的值，这个值为98\n        System.out.println(obj);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"获取方法和调用方法\"><a href=\"#获取方法和调用方法\" class=\"headerlink\" title=\"获取方法和调用方法\"></a>获取方法和调用方法</h2><pre><code class=\"java\">public class Test03 &#123;\n    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;\n        //获取字节码信息：\n        Class cls = Student.class;\n        //获取方法：\n        //getMethods:获取运行时类的方法还有所有父类中的方法（被public修饰）\n        Method[] methods = cls.getMethods();\n        for(Method m:methods)&#123;\n            System.out.println(m);\n        &#125;\n        System.out.println(&quot;-----------------------&quot;);\n        //getDeclaredMethods:获取运行时类中的所有方法：\n        Method[] declaredMethods = cls.getDeclaredMethods();\n        for(Method m:declaredMethods)&#123;\n            System.out.println(m);\n        &#125;\n        System.out.println(&quot;-----------------------&quot;);\n        //获取指定的方法：\n        Method showInfo1 = cls.getMethod(&quot;showInfo&quot;);\n        System.out.println(showInfo1);\n        Method showInfo2 = cls.getMethod(&quot;showInfo&quot;, int.class, int.class);\n        System.out.println(showInfo2);\n        Method work = cls.getDeclaredMethod(&quot;work&quot;,int.class);\n        System.out.println(work);\n        System.out.println(&quot;-----------------------&quot;);\n        //获取方法的具体结构：\n        /\\*\n            @注解\n            修饰符 返回值类型 方法名(参数列表) throws XXXXX&#123;&#125;\n        \\*/\n            //名字：\n            System.out.println(work.getName());\n        //修饰符：\n        int modifiers = work.getModifiers();\n        System.out.println(Modifier.toString(modifiers));\n        //返回值：\n        System.out.println(work.getReturnType());\n        //参数列表：\n        Class[] parameterTypes = work.getParameterTypes();\n        for(Class c:parameterTypes)&#123;\n            System.out.println(c);\n        &#125;\n\n        //获取注解：\n        Method myMethod = cls.getMethod(&quot;myMethod&quot;);\n        Annotation[] annotations = myMethod.getAnnotations();\n        for(Annotation a:annotations)&#123;\n            System.out.println(a);\n        &#125;\n\n        //获取异常：\n        Class[] exceptionTypes = myMethod.getExceptionTypes();\n        for(Class c:exceptionTypes)&#123;\n            System.out.println(c);\n        &#125;\n\n\n        //调用方法：\n        Object o = cls.newInstance();\n        myMethod.invoke(o);//调用o对象的mymethod方法\n\n        System.out.println(showInfo2.invoke(o,12,45));;\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"获取类的接口，所在包，注解\"><a href=\"#获取类的接口，所在包，注解\" class=\"headerlink\" title=\"获取类的接口，所在包，注解\"></a>获取类的接口，所在包，注解</h2><pre><code class=\"java\">\n\npublic class Test04 &#123;\n    public static void main(String[] args) &#123;\n        //获取字节码信息：\n        Class cls = Student.class;\n        //获取运行时类的接口：\n        Class[] interfaces = cls.getInterfaces();\n        for(Class c:interfaces)&#123;\n            System.out.println(c);\n        &#125;\n\n        //得到父类的接口：\n        //先得到父类的字节码信息：\n        Class superclass = cls.getSuperclass();\n\n        //得到接口：\n        Class[] interfaces1 = superclass.getInterfaces();\n        for(Class c:interfaces1)&#123;\n            System.out.println(c);\n        &#125;\n\n        //获取运行时类所在的包：\n        Package aPackage = cls.getPackage();\n        System.out.println(aPackage);\n        System.out.println(aPackage.getName());\n\n        //获取运行类的注解：\n        Annotation[] annotations = cls.getAnnotations();\n        for(Annotation a:annotations)&#123;\n            System.out.println(a);\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"关于反射的面试题\"><a href=\"#关于反射的面试题\" class=\"headerlink\" title=\"关于反射的面试题\"></a>关于反射的面试题</h2><p>【1】问题1：创建Person的对象，以后用new Person()创建,还是用反射创建？</p>\n<p>【2】问题2：反射是否破坏了面向对象的封装性？</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}