{
    "version": "https://jsonfeed.org/version/1",
    "title": "雾都博客 • All posts by \"数据库\" category",
    "description": "记录美食每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/14/MySQL_Create/",
            "url": "http://example.com/2022/10/14/MySQL_Create/",
            "title": "MySQL基础",
            "date_published": "2022-10-14T09:50:50.743Z",
            "content_html": "<h1 id=\"mysql安装\"><a class=\"anchor\" href=\"#mysql安装\">#</a> MySQL 安装</h1>\n<h2 id=\"1-卸载原来的版本\"><a class=\"anchor\" href=\"#1-卸载原来的版本\">#</a> 1、卸载原来的版本</h2>\n<h3 id=\"1-查看mysql的安装情况\"><a class=\"anchor\" href=\"#1-查看mysql的安装情况\">#</a> 1、查看 mysql 的安装情况</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> mysql</pre></td></tr></table></figure><p><img data-src=\"/2022/10/14/MySQL_Create/1570605325400.png\" class=\"\" width=\"1570605325400\"></p>\n<h3 id=\"2-删除上图安装的软件\"><a class=\"anchor\" href=\"#2-删除上图安装的软件\">#</a> 2、删除上图安装的软件</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ev</span> <span class=\"token parameter variable\">--nodeps</span> mysql57-community-release-el5-7.noarch</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ev</span> <span class=\"token parameter variable\">--nodeps</span> mysql-community-server-5.7.18-1.el5.x86_64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ev</span> <span class=\"token parameter variable\">--nodeps</span> mysql-community-client-5.7.18-1.el5.x86_64</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ev</span> <span class=\"token parameter variable\">--nodeps</span> mysql-community-libs-5.7.18-1.el5.x86_64</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ev</span> <span class=\"token parameter variable\">--nodeps</span> mysql-community-common-5.7.18-1.el5.x86_64</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ev</span> <span class=\"token parameter variable\">--nodeps</span> mysql-5.7.18-1.el5.x86_64</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ev</span> <span class=\"token parameter variable\">--nodeps</span> mysql-community-libs-compat-5.7.18-1.el5.x86_64</pre></td></tr></table></figure><h3 id=\"3-都删除成功之后查找相关的mysql的文件\"><a class=\"anchor\" href=\"#3-都删除成功之后查找相关的mysql的文件\">#</a> 3、都删除成功之后，查找相关的 mysql 的文件</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> mysql</pre></td></tr></table></figure><p><img data-src=\"/2022/10/14/MySQL_Create/1570605553095.png\" class=\"\" width=\"1570605553095\"></p>\n<h3 id=\"4-删除全部文件\"><a class=\"anchor\" href=\"#4-删除全部文件\">#</a> 4、删除全部文件</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /etc/selinux/targeted/active/modules/100/mysql</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /root/mysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /root/mysql/data/mysql</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /var/lib/mysql</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /var/lib/mysql/mysql</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> /usr/share/mysql</pre></td></tr></table></figure><h3 id=\"5-再次执行命令\"><a class=\"anchor\" href=\"#5-再次执行命令\">#</a> 5、再次执行命令</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> mysql</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#如果没有显式则表示卸载完成</span></pre></td></tr></table></figure><h2 id=\"2-删除mariadb-libs不可省略\"><a class=\"anchor\" href=\"#2-删除mariadb-libs不可省略\">#</a> 2、删除 mariadb-libs (不可省略)</h2>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 检查 mariadb-libs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mariadb</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 卸载 mariadb-libs</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>yum remove <span class=\"token parameter variable\">-y</span> mariadb-libs</pre></td></tr></table></figure><h2 id=\"3-安装mysql\"><a class=\"anchor\" href=\"#3-安装mysql\">#</a> 3、安装 MySQL</h2>\n<h3 id=\"1输入\"><a class=\"anchor\" href=\"#1输入\">#</a> 1，输入</h3>\n<p>wegt <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2dldC9teXNxbCVFNyU4OSU4OCVFNiU5QyVBQyVFNSU4RiVCNy1jb21tdW5pdHktcmVsZWFzZS1lbCVFNSVBNCVBNyVFNyU4OSU4OCVFNiU5QyVBQy0lRTUlQjAlOEYlRTclODklODglRTYlOUMlQUMubm9hcmNoLnJwbQ==\">https://dev.mysql.com/get/mysql 版本号 - community-release-el 大版本 - 小版本.noarch.rpm</span></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://dev.mysql.com/get/mysql57-community-release-el5-7.noarch.rpm</pre></td></tr></table></figure><h3 id=\"2-安装数据源\"><a class=\"anchor\" href=\"#2-安装数据源\">#</a> 2、安装数据源</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> mysql57-community-release-el5-7.noarch.rpm</pre></td></tr></table></figure><h3 id=\"3-查看mysql源是否安装成功\"><a class=\"anchor\" href=\"#3-查看mysql源是否安装成功\">#</a> 3、查看 mysql 源是否安装成功</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum repolist enabled <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">\"mysql.*-community.*\"</span></pre></td></tr></table></figure><h3 id=\"4-安装数据库\"><a class=\"anchor\" href=\"#4-安装数据库\">#</a> 4、安装数据库</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span>  mysql-community-server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 如果过期可以在运行安装程序之前导入密钥</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">--import</span> https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</pre></td></tr></table></figure><h3 id=\"5-启动mysql\"><a class=\"anchor\" href=\"#5-启动mysql\">#</a> 5、启动 mysql</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># centos7</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl restart mysqld</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl status mysqld</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># centos6</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">service</span> mysqld start</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">service</span> mysqld status</pre></td></tr></table></figure><h3 id=\"6-显示mysql的随机密码\"><a class=\"anchor\" href=\"#6-显示mysql的随机密码\">#</a> 6、显示 mysql 的随机密码</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">grep</span> <span class=\"token string\">'temporary password'</span> /var/log/mysqld.log</pre></td></tr></table></figure><p><img data-src=\"/2022/10/14/MySQL_Create/image-20220827193405451.png\" class=\"\" title=\"image-20220827193405451\"></p>\n<h3 id=\"7-登录并修改mysql密码\"><a class=\"anchor\" href=\"#7-登录并修改mysql密码\">#</a> 7、登录并修改 mysql 密码</h3>\n<p>登录：mysql -u root -p     然后输入上面生成的密码</p>\n<p><strong><em>修改自定义密码，设置自己想要的密码</em></strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- ALTER USER 'root'@'localhost' IDENTIFIED BY ' 密码 ';</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">USER</span> <span class=\"token string\">'root'</span><span class=\"token variable\">@'localhost'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong><em>失败了的话就修改策略，将策略降低一下就可以了</em></strong></p>\n<p>查看密码策略：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%validate_password%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>修改密码策略</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 修改密码长度：（长度）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> validate_password<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> validate_password_length<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 修改密码等级：（等级）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> validate_password<span class=\"token punctuation\">.</span>policy<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> validate_password_policy<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"4-其他配置\"><a class=\"anchor\" href=\"#4-其他配置\">#</a> 4、其他配置</h2>\n<h3 id=\"1开机自启\"><a class=\"anchor\" href=\"#1开机自启\">#</a> 1. 开机自启</h3>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开机启动</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl <span class=\"token builtin class-name\">enable</span> mysql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 关闭自动启动</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl disable mysqld</pre></td></tr></table></figure><h3 id=\"2远程连接\"><a class=\"anchor\" href=\"#2远程连接\">#</a> 2. 远程连接</h3>\n<h4 id=\"方法一-创建一个用户-支持远程连接\"><a class=\"anchor\" href=\"#方法一-创建一个用户-支持远程连接\">#</a> 方法一、创建一个用户 支持远程连接</h4>\n<p>①登录 ：mysql -u root -p</p>\n<p>②创建用户： create user 'aaa'@'%' identified by '123456';</p>\n<p>③授权所有权限给 user 这个新用户 ：grant all on <em>.</em> to 'aaa'@'%';</p>\n<p>④退出 mysql：quit;</p>\n<h4 id=\"方法二-设置root用户支持远程连接\"><a class=\"anchor\" href=\"#方法二-设置root用户支持远程连接\">#</a> 方法二、设置 root 用户支持远程连接</h4>\n<p>①登录：mysql -u root -p （ 注：系统提示输入数据库 root 用户的密码，输入完成后即进入 mysql 控制台，这个命令的第一个 mysql 是执行命令，第二个 mysql 是系统数据名称，不一样的。）</p>\n<p>②设置权限：</p>\n<p>赋予权限格式： grant 权限 on 数据库对象 to 用户 @IP (或者相应正则)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 新建用户规则或者直接修改 root 用户的规则 ，2 选一</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">use</span> mysql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 这里表示赋予该用户所有数据库所有表（*.* 表示所有表），% 表示所有 IP 地址。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">ALL</span> <span class=\"token keyword\">PRIVILEGES</span> <span class=\"token keyword\">ON</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">TO</span> <span class=\"token string\">'root'</span><span class=\"token variable\">@'%'</span> IDENTIFIED <span class=\"token keyword\">BY</span> <span class=\"token string\">'123456'</span> <span class=\"token keyword\">WITH</span> <span class=\"token keyword\">GRANT</span> <span class=\"token keyword\">OPTION</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 使 root 能再任何 host 访问</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">update</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">set</span> host <span class=\"token operator\">=</span> <span class=\"token string\">'%'</span> <span class=\"token keyword\">where</span> <span class=\"token keyword\">user</span> <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 刷新</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>FLUSH <span class=\"token keyword\">PRIVILEGES</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>③查看：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">use</span> mysql<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> HOST<span class=\"token punctuation\">,</span><span class=\"token keyword\">USER</span> <span class=\"token keyword\">FROM</span> <span class=\"token keyword\">USER</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/14/MySQL_Create/920952e9041b4af1a8a49eb64e0f4430.jpeg\" class=\"\" title=\"img\"></p>\n<p>④退出 mysql：quit;</p>\n<h2 id=\"其他安装方式\"><a class=\"anchor\" href=\"#其他安装方式\">#</a> 其他安装方式</h2>\n<h3 id=\"docker\"><a class=\"anchor\" href=\"#docker\">#</a> docker</h3>\n<h4 id=\"1-查询镜像\"><a class=\"anchor\" href=\"#1-查询镜像\">#</a> 1、查询镜像</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> search mysql</pre></td></tr></table></figure><h4 id=\"2-拉取镜像\"><a class=\"anchor\" href=\"#2-拉取镜像\">#</a> 2、拉取镜像</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull mysql:5.7</pre></td></tr></table></figure><h4 id=\"3-构建容器\"><a class=\"anchor\" href=\"#3-构建容器\">#</a> 3、构建容器</h4>\n<p>先自己创建配置文件基础模板（<strong>要是后期要修改配置文件必须加入 模板中的两个元素，不然容器启动会出错</strong>）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /root/mysql/conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">vim</span>  /root/mysql/conf/my.cnf</pre></td></tr></table></figure><p><strong>模板内容：</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">!</span>includedir /etc/mysql/conf.d/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span>includedir /etc/mysql/mysql.conf.d/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>mysql<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>default-character-set<span class=\"token operator\">=</span>utf8mb4</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">character_set_server</span><span class=\"token operator\">=</span>utf8mb4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">init_connect</span><span class=\"token operator\">=</span><span class=\"token string\">'SET NAMES utf8'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>lower_case_table_names <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p><strong>构建容器</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">3306</span>:3306 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-v</span> /root/mysql/data:/var/lib/mysql <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-v</span> /root/mysql/logs:/logs <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-v</span> /root/mysql/conf/my.cnf:/etc/mysql/my.cnf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>root <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">--name</span> mysql <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token parameter variable\">--hostname</span> node1 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token parameter variable\">--restart</span><span class=\"token operator\">=</span>always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token parameter variable\">-d</span> mysql:5.7</pre></td></tr></table></figure><p><strong>注</strong>：出错时将本地映射文件检查一下，要是不需要配置，只需映射直接删掉就可，以后再改配置文件</p>\n<h4 id=\"4-进入容器\"><a class=\"anchor\" href=\"#4-进入容器\">#</a> 4、进入容器</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> mysql /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或者</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> mysql mysql <span class=\"token parameter variable\">-uroot</span> <span class=\"token parameter variable\">-p</span></pre></td></tr></table></figure><h3 id=\"docker-compose\"><a class=\"anchor\" href=\"#docker-compose\">#</a> docker-compose</h3>\n<blockquote>\n<p>前提安装了 docker-compose</p>\n</blockquote>\n<h4 id=\"配置-docker-comoseyml-文件\"><a class=\"anchor\" href=\"#配置-docker-comoseyml-文件\">#</a> 配置  docker-comose.yml 文件</h4>\n<p>5.7：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.0\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">mysql8</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>5.7.32</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> my_db57</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> ./db<span class=\"token punctuation\">:</span>/var/lib/mysql</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">-</span> ./conf/my.cnf<span class=\"token punctuation\">:</span>/etc/my.cnf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\"># 数据库初始化脚本，当 Mysql 容器首次启动时，会在 /docker-entrypoint-initdb.d 目录下扫描 .sh，.sql，.sql.gz 类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库；</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">-</span> ./init/<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">-</span> MYSQL_ROOT_PASSWORD=123456</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\"># 指定初始化 sql 文件的数据库，简单来书就是新建一个数据库</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">-</span> MYSQL_DATABASE=my_db</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">-</span> TZ=Asia/Shanghai</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">-</span> 3311<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span></pre></td></tr></table></figure><p>8.0</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.0\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">mysql8</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mysql<span class=\"token punctuation\">:</span>8.0.25</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> my_db8</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> ./db<span class=\"token punctuation\">:</span>/var/lib/mysql</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">-</span> ./conf/my.cnf<span class=\"token punctuation\">:</span>/etc/my.cnf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\"># 数据库初始化脚本，当 Mysql 容器首次启动时，会在 /docker-entrypoint-initdb.d 目录下扫描 .sh，.sql，.sql.gz 类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库；</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">-</span> ./init/<span class=\"token punctuation\">:</span>/docker<span class=\"token punctuation\">-</span>entrypoint<span class=\"token punctuation\">-</span>initdb.d/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">-</span> MYSQL_ROOT_PASSWORD=123456</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token comment\"># 指定初始化 sql 文件的数据库，简单来书就是新建一个数据库</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">-</span> MYSQL_DATABASE=my_db</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">-</span> TZ=Asia/Shanghai</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">-</span> 3301<span class=\"token punctuation\">:</span><span class=\"token number\">3306</span></pre></td></tr></table></figure><h4 id=\"配置文件-mycnf\"><a class=\"anchor\" href=\"#配置文件-mycnf\">#</a> 配置文件 my.cnf</h4>\n<p>5.7：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>mysql<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 设置 mysql 客户端默认字符集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>default-character-set<span class=\"token operator\">=</span>utf8mb4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">datadir</span><span class=\"token operator\">=</span>/var/lib/mysql</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">socket</span><span class=\"token operator\">=</span>/var/lib/mysql/mysql.sock</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>symbolic-links<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>log-error<span class=\"token operator\">=</span>/var/log/mysqld.log</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>pid-file<span class=\"token operator\">=</span>/var/run/mysqld/mysqld.pid</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 服务端使用的字符集默认为 8 比特编码的 latin1 字符集</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>character-set-server<span class=\"token operator\">=</span>utf8mb4</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 创建新表时将使用的默认存储引擎</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>default-storage-engine<span class=\"token operator\">=</span>INNODB</pre></td></tr></table></figure><p>8.0：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>mysql<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 设置 mysql 客户端默认字符集</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>default-character-set<span class=\"token operator\">=</span>utf8mb4</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 允许最大连接数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">max_connections</span><span class=\"token operator\">=</span><span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 服务端使用的字符集默认为 8 比特编码的 latin1 字符集</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>character-set-server<span class=\"token operator\">=</span>utf8mb4</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 创建新表时将使用的默认存储引擎</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>default-storage-engine<span class=\"token operator\">=</span>INNODB</pre></td></tr></table></figure><h4 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h4>\n<p>1、Can't create/write to file '/var/run/mysqld/mysqld.pid</p>\n<p>去配置文件中找到 errorlog 的地址，查看错误日志</p>\n<p><img data-src=\"/2022/10/14/MySQL_Create/20190602012200812.png\" class=\"\" title=\"img\"></p>\n<p>错误原因为：/var/run/mysqld/ 目录的拥有者为 root，mysql 不能在其中创建文件</p>\n<p>使用如下命令修改目录使用者</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 先查看目录是否存在</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-ld</span> /var/run/mysqld/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 权限</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">chown</span> mysql.mysql /var/run/mysqld/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 修改后重启 mysql 服务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/etc/init.d/mysqld start</pre></td></tr></table></figure>",
            "tags": [
                "MySQL",
                "数据库基础",
                "数据库基本知识"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/MySQL_Super/",
            "url": "http://example.com/2022/10/07/MySQL_Super/",
            "title": "MySQL高级部分",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"mysql性能调优\"><a class=\"anchor\" href=\"#mysql性能调优\">#</a> MySQL 性能调优</h1>\n<blockquote>\n<p>环境：CentOS7.5\t\t\t\t\t Version：MySQL57.39</p>\n</blockquote>\n<h1 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> 主要内容</h1>\n<p><a href=\"#MySQL%E7%9A%84%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D\">1、MySQL 的架构介绍</a></p>\n<p><a href=\"#%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90\">2、索引优化分析</a></p>\n<p><a href=\"#%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96%E5%88%86%E6%9E%90\">3、查询截取分析</a></p>\n<p><a href=\"#MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6\">4、MySQL 的锁机制</a></p>\n<p>&lt;div name=MySQL 的架构介绍&gt;</p>\n<h1 id=\"mysql文件目录结构\"><a class=\"anchor\" href=\"#mysql文件目录结构\">#</a> MySQL 文件目录结构</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">路径</th>\n<th style=\"text-align:left\">解释</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">/var/lib/mysql/</td>\n<td style=\"text-align:left\">mysql 数据库文件的存放路径</td>\n<td style=\"text-align:left\">/var/lib/mysql/atguidgu.cloud.pid</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/usr/share/mysql</td>\n<td style=\"text-align:left\">配置文件目录</td>\n<td style=\"text-align:left\">mysql.server 命令及配置及文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/usr/bin/</td>\n<td style=\"text-align:left\">相关命令目录</td>\n<td style=\"text-align:left\">mysqladmin 、mysqldump 等相关命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/ect/init.d/mysql</td>\n<td style=\"text-align:left\">启停相关脚本</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"主要配置文件\"><a class=\"anchor\" href=\"#主要配置文件\">#</a> 主要配置文件</h1>\n<p>1、二进制日志 log-bin ：主从复制</p>\n<p>2、错误日志 log-error ：默认是关闭的，记录严重的警告和错误信息，每次启动和关闭的详细信息等</p>\n<p>3、查询日志 log ：默认关闭，记录查询的 SQL 语句，如果开启就会降低 mysql 的整体性能</p>\n<p>4、数据文件 :</p>\n<ul>\n<li>\n<p>系统</p>\n<ul>\n<li>Windows：本地安装的目录下 /data  目录下可以挑选很多库</li>\n<li>Windows：本地安装的目录下 /data  目录下可以挑选很多库</li>\n</ul>\n</li>\n<li>\n<p>frm 文件： 存放表结构</p>\n</li>\n<li>\n<p>myd 文件：存放表数据</p>\n</li>\n<li>\n<p>myi 文件： 存放表索引</p>\n</li>\n</ul>\n<h1 id=\"逻辑架构\"><a class=\"anchor\" href=\"#逻辑架构\">#</a> 逻辑架构</h1>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220816182921842-1660960902142.png\" class=\"\"></p>\n<h2 id=\"1连接层\"><a class=\"anchor\" href=\"#1连接层\">#</a> 1. 连接层</h2>\n<p>​\t最上层是一些客户端和连接服务，包含本地 sock 通信和大多数基于客户端 / 服务端工具实现的类似于 tcplip 的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于 SSL 的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>\n<h2 id=\"2服务层\"><a class=\"anchor\" href=\"#2服务层\">#</a> ⒉服务层</h2>\n<p>​\t第二层架构主要完成大多少的核心服务功能，如 SQL 接口，并完成缓存的查询，SQL 的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是 select 语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p>\n<h2 id=\"3引擎层\"><a class=\"anchor\" href=\"#3引擎层\">#</a> 3. 引擎层</h2>\n<p>​\t存储引擎层，存储引擎真正的负责了 MySQL 中数据的存储和提取，服务器通过 API 与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。后面介绍 MylSAM 和 InnoDB</p>\n<p>常用的存储引擎：MyISAM、InnoDB (最常用)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">对比项</th>\n<th style=\"text-align:center\">MylSAM</th>\n<th style=\"text-align:center\">InnoDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">主外键</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">事务</td>\n<td style=\"text-align:center\">不馳</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">行表锁</td>\n<td style=\"text-align:center\">表锁，即使操作一条记录也会锁住整 个表，不适合高并发的操作</td>\n<td style=\"text-align:center\">行锁，操作时只锁某一行，不对其它 行有影响， 适合高并发的操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">緩存</td>\n<td style=\"text-align:center\">只緩存索引，不缓存真实数据</td>\n<td style=\"text-align:center\">不仅缓存索引还要缓存真实数据，对 内存要求较高，而且内存大小对性能 有决定性的影响</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">表空间</td>\n<td style=\"text-align:center\">小</td>\n<td style=\"text-align:center\">大</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">关注点</td>\n<td style=\"text-align:center\">性能</td>\n<td style=\"text-align:center\">事务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">默认安装</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4存储层\"><a class=\"anchor\" href=\"#4存储层\">#</a> 4. 存储层</h2>\n<p>​\t数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</p>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220816181915861-1660960902143.png\" class=\"\"></p>\n<h2 id=\"连接器\"><a class=\"anchor\" href=\"#连接器\">#</a> 连接器</h2>\n<p>▪  连接器负责跟客户端建立连接，获取权限、维持和管理连接<br />\n– 用户名密码验证<br />\n– 查询权限信息，分配对应的权限<br />\n– 可以使用 show processlist 查看现在的连接<br />\n– 如果太长时间没有动静，  就会自动断开，通过 wait_timeout 控制，默认 8 小时<br />\n▪  连接可以分为两类：<br />\n– 长连接：推荐使用，但是要周期性的断开长连接</p>\n<p>– 短链接：</p>\n<h2 id=\"查询缓存\"><a class=\"anchor\" href=\"#查询缓存\">#</a> 查询缓存</h2>\n<p>▪  当执行查询语句的时候，会先去查询缓存中查看结果，之前执行 过的 sql 语句及其结果可能以 key-value 的形式存储在缓存中，如 果能找到则直接返回，如果找不到，就继续执行后续的阶段。<br />\n<mark>▪  但是，不推荐使用查询缓存：</mark><br />\n– 1、查询缓存的失效比较频繁，只要表更新，缓存就会清空</p>\n<p>– 2、缓存对应新更新的数据命中率比较低</p>\n<h2 id=\"分析器\"><a class=\"anchor\" href=\"#分析器\">#</a> 分析器</h2>\n<p>▪  词法分析：  Mysql 需要把输入的字符串进行识别每个部分代表什 么意思<br />\n– 把字符串 T 识别成 表名 T<br />\n– 把字符串 ID 识别成 列 ID<br />\n▪  语法分析：</p>\n<p>▪  根据语法规则判断这个 sql 语句是否满足 mysql 的语法，如果不符 合就会报错 “You have an error in your SQL synta”</p>\n<h2 id=\"优化器\"><a class=\"anchor\" href=\"#优化器\">#</a> 优化器</h2>\n<p>▪  在具体执行 SQL 语句之前，要先经过优化器的处理<br />\n– 当表中有多个索引的时候，决定用哪个索引<br />\n– 当 sql 语句需要做多表关联的时候，  决定表的连接顺序<br />\n– 等等<br />\n▪ 不同的执行方式对 SQL 语句的执行效率影响很大<br />\n– RBO: 基于规则的优化</p>\n<p>– CBO: 基于成本的优化</p>\n<h1 id=\"sql性能下降原因\"><a class=\"anchor\" href=\"#sql性能下降原因\">#</a> SQL 性能下降原因</h1>\n<ol>\n<li>查询语句写的烂</li>\n<li>索引失效</li>\n<li>关联查询太多 join</li>\n<li>服务器调优及各个参数设置（缓冲、线程数）</li>\n<li>..........etc</li>\n</ol>\n<h1 id=\"sql语句机读过程\"><a class=\"anchor\" href=\"#sql语句机读过程\">#</a> SQL 语句机读过程</h1>\n<p>人工：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>SELECT_list<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>left_table<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>join_type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">Join</span> <span class=\"token operator\">&lt;</span>right_table<span class=\"token operator\">></span> <span class=\"token keyword\">on</span> <span class=\"token operator\">&lt;</span>join_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">WHERE</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>WHERE_Condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>group_by_list<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">HAVING</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>having_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>order_by_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">LIMIT</span> <span class=\"token operator\">&lt;</span>limit_num<span class=\"token operator\">></span></pre></td></tr></table></figure><p>机器：</p>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220816200725202-1660960902143.png\" class=\"\"></p>\n<p>注意第一步是 from --&gt; on --&gt; join --&gt;where --&gt;group by --&gt;having --&gt;select --&gt;order by --&gt;limit</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">left</span> <span class=\"token keyword\">table</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \t   <span class=\"token keyword\">on</span> <span class=\"token operator\">&lt;</span>on_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>join_type<span class=\"token operator\">></span> <span class=\"token keyword\">join</span> <span class=\"token operator\">&lt;</span>join_table<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">where</span> <span class=\"token operator\">&lt;</span>where_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> <span class=\"token operator\">&lt;</span>group_by_list<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>等聚合函数<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">having</span> <span class=\"token operator\">&lt;</span>having_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token operator\">&lt;</span>select_list<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">distinct</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token operator\">&lt;</span>order_by_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">limit</span> <span class=\"token operator\">&lt;</span>limit_number<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"on和where的区别\"><a class=\"anchor\" href=\"#on和where的区别\">#</a> on 和 where 的区别？</h2>\n<p>​\t简单地说，当有外关联表时，on 主要是针对外关联表进行筛选，主表保留，当没有关联表时，二者作用相同。</p>\n<p>例如在左外连时，首先执行 on，筛选掉外连表中不符合 on 表达式的数据，而 where 的筛选是对主表的筛选。</p>\n<h1 id=\"mysql执行顺序理解\"><a class=\"anchor\" href=\"#mysql执行顺序理解\">#</a> MySql 执行顺序理解</h1>\n<p>第一步：加载 from 子句的前两个表计算笛卡尔积，生成虚拟表 vt1；</p>\n<p>第二步：筛选关联表符合 on 表达式的数据，保留主表，生成虚拟表 vt2；</p>\n<p>第三步：如果使用的是外连接，执行 on 的时候，会将主表中不符合 on 条件的数据也加载进来，做为外部行</p>\n<p>第四步：如果 from 子句中的表数量大于 2，则重复第一步到第三步，直至所有的表都加载完毕，更新 vt3；</p>\n<p>第五步：执行 where 表达式，筛选掉不符合条件的数据生成 vt4；</p>\n<p>第六步：执行 group by 子句。group by 子句执行过后，会对子句组合成唯一值并且对每个唯一值只包含一行，生成 vt5,。一旦执行 group by，后面的所有步骤只能得到 vt5 中的列（group by 的子句包含的列）和聚合函数。</p>\n<p>第七步：执行聚合函数，生成 vt6；</p>\n<p>第八步：执行 having 表达式，筛选 vt6 中的数据。having 是唯一一个在分组后的条件筛选，生成 vt7;</p>\n<p>第九步：从 vt7 中筛选列，生成 vt8；</p>\n<p>第十步：执行 distinct，对 vt8 去重，生成 vt9。其实执行过 group by 后就没必要再去执行 distinct，因为分组后，每组只会有一条数据，并且每条数据都不相同。</p>\n<p>第十一步：对 vt9 进行排序，此处返回的不是一个虚拟表，而是一个游标，记录了数据的排序顺序，此处可以使用别名；</p>\n<p>第十二步：执行 limit 语句，将结果返回给客户端</p>\n<p>&lt;div name = 索引优化分析&gt;</p>\n<h1 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h1>\n<p>​\tMySQL 官方对索引的定义为：索引 (Index）是帮助 MySQL 高效获取数据的数据结构。可以得到索引的本质:<mark> 索引是数据结构</mark>。</p>\n<p>&lt;font color=red&gt; 可以简单理解为 “排好序的快速查找数据结构”&lt;/font&gt;</p>\n<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上</p>\n<p>我们平常所说的<mark>索引，如果没有特别指明，都是指 B 树 (多路搜索树，并不一定是二叉的) 结构组织的索引</mark>。其中聚集索引，次要索引，复合索引，前缀索引，唯一索引默认都是使用 B + 树索引，统称索引。当然，除了 B + 树这种类型的索引之外还有哈稀索引 (hash，index) 等。</p>\n<p>简单来说<mark>最大的作用</mark>就是 <mark>排序</mark> 和 <mark>查询</mark></p>\n<h2 id=\"目的\"><a class=\"anchor\" href=\"#目的\">#</a> 目的</h2>\n<p>提高查询效率，可以类比字典，<br />\n如果要查 “mysql” 这个单询，我们肯定需要定位到 m 字母，然后从下往下找到 y 字母，再找到剩下的 sql。<br />\n如果没有索引，那么你可能需要 a----z，如果我想找到 Java 开头的单词呢？或者 Oracle 开头的单词呢？<br />\n 是不是觉得如果没有索引，这个事情根本无法完成？</p>\n<h2 id=\"详解\"><a class=\"anchor\" href=\"#详解\">#</a> 详解</h2>\n<p>​\t在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</p>\n<p>下图就是一种可能的索引方式示例:</p>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220816211711261-1660960902143.png\" class=\"\"></p>\n<p>​\t\t\t\t左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址</p>\n<p>​\t为了加快 Col2 的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到相应数据，从而快速的检索出符合条件的记录.</p>\n<h2 id=\"优劣\"><a class=\"anchor\" href=\"#优劣\">#</a> 优劣</h2>\n<p>优势：</p>\n<p>​\t类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的 IO 成本</p>\n<p>​\t 通过索引列对数据进行排序，降低数据排序的成本，降低了 CPU 的消耗</p>\n<p>劣势：</p>\n<p>​\t1、实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间</p>\n<p>​\t2、虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 INSERT、UPDATE 和 DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，<br />\n都会调整因为更新所带来的键值变化后的索引信息<br />\n​\t3、索引只是提高效率的一个因素，如果你的 MySQL 有大数据量的表，就需要花时间研究建立最优秀的索引</p>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<ul>\n<li>单值索引：即一个索引只包含单个列，一个表可以有多个单列索引</li>\n<li>唯一索引：索引列的值必须唯一，但允许有空值</li>\n<li>复合索引：即一个索引包含多个列</li>\n</ul>\n<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<ul>\n<li>\n<p>创建：</p>\n<ul>\n<li>CREATE\t [UNIQUE ]INDEX  \tindexName   \tON   \tmytable(columnname(length));</li>\n<li>CREATE\t [UNIQUE ]INDEX      indexName   \tON   \tmytable(columnname(length));</li>\n</ul>\n</li>\n<li>\n<p>删除</p>\n<ul>\n<li>DROP \tINDEX \t[indexName] \tON \tmytable;</li>\n</ul>\n</li>\n<li>\n<p>查看</p>\n<ul>\n<li>SHOW \t\tINDEX \t\tFROM \t\ttable_name\\G</li>\n</ul>\n</li>\n<li>\n<p>使用 ALTER 命令</p>\n</li>\n</ul>\n<h2 id=\"mysql索引结构\"><a class=\"anchor\" href=\"#mysql索引结构\">#</a> MySQL 索引结构</h2>\n<ul>\n<li>\n<p>BTree 索引</p>\n</li>\n<li>\n<p>Hash 索引</p>\n</li>\n<li>\n<p>Full-Text 全文索引</p>\n</li>\n<li>\n<p>R-Tree 索引</p>\n</li>\n</ul>\n<h2 id=\"哪些情况下需要创建索引\"><a class=\"anchor\" href=\"#哪些情况下需要创建索引\">#</a> 哪些情况下需要创建索引</h2>\n<ol>\n<li>\n<p>主键自动建立唯一索引</p>\n</li>\n<li>\n<p>频繁作为查询条件的字段应该创建索引</p>\n</li>\n<li>\n<p>查询中与其它表关联的字段，外键关系建立索引</p>\n</li>\n<li>\n<p>频繁更新的字段不适合创建索引 or 因为每次更新不单单是更新了记录还会更新索引</p>\n</li>\n<li>\n<p>Where 条件里用不到的字段不创建索引</p>\n</li>\n<li>\n<p>单键 / 组合索引的选择问题，who?(在高并发下倾向创建组合索引)</p>\n</li>\n<li>\n<p>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</p>\n</li>\n<li>\n<p>查询中统计或者分组字段</p>\n</li>\n</ol>\n<h2 id=\"哪些情况不建索引\"><a class=\"anchor\" href=\"#哪些情况不建索引\">#</a> 哪些情况不建索引</h2>\n<ol>\n<li>\n<p>表记录太少</p>\n</li>\n<li>\n<p>经常增删改的表</p>\n<p>Why: 提高了查询速度，同时却会降低更新表的速度，如对表进行 INSERT、UPDATE 和 DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件</p>\n</li>\n<li>\n<p>数据重复且分布平均的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</p>\n</li>\n</ol>\n<h1 id=\"性能分析\"><a class=\"anchor\" href=\"#性能分析\">#</a> 性能分析</h1>\n<h2 id=\"mysql-query-optimizer\"><a class=\"anchor\" href=\"#mysql-query-optimizer\">#</a> MySql Query Optimizer</h2>\n<ol>\n<li>\n<p>Mysql 中有专门负责优化 SELECT 语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的 Query 提供他认为最优的执行计划（他认为最优的数据检索方式，但不见得是 DBA 认为是最优的，这部分最耗费时间)</p>\n</li>\n<li>\n<p>当客户端向 MySQL 请求一条 Query，命令解析器模块完成请求分类，区别出是 SELECT 并转发给 MySQLQuery Optimizer 时，MySQL Query Optimizer 首先会对整条 Query 进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对 Query 中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析 Query 中的 Hint 信息 (如果有），看显示 Hint 信息是否可以完全确定该 Query 的执行计划。如果没有 Hint 或 Hint 信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据 Query 进行写相应的计算分析，然后再得出最后的执行计划。</p>\n</li>\n</ol>\n<h2 id=\"mysql常见瓶颈\"><a class=\"anchor\" href=\"#mysql常见瓶颈\">#</a> MysQL 常见瓶颈</h2>\n<p>CPU:CPU 在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候</p>\n<p>IO: 磁盘 I/O 瓶颈发生在装入数据远大于内存容量的时候</p>\n<p>服务器硬件的性能瓶颈: top,free, iostat 和 vmstat 来查看系统的性能状态</p>\n<h2 id=\"explain\"><a class=\"anchor\" href=\"#explain\">#</a> Explain</h2>\n<h3 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h3>\n<p>​\t查看执行计划</p>\n<p>​\t使用 EXPLAIN 关键字可以模拟优化器执行 sQL 查询语句，从而知道 MySQL 是如何处理你的 SQL 语句的。分析你的查询语句或是表结构的性能瓶颈</p>\n<h3 id=\"作用范围\"><a class=\"anchor\" href=\"#作用范围\">#</a> 作用范围</h3>\n<ol>\n<li>\n<p>表的读取顺序   __ id__</p>\n</li>\n<li>\n<p>数据读取操作的操作类型哪些索引可以使用  <strong>possible key</strong></p>\n</li>\n<li>\n<p>哪些索引被实际使用表之间的引用  <strong>key</strong></p>\n</li>\n<li>\n<p>每张表有多少行被优化器查询    <strong>rows</strong></p>\n</li>\n<li>\n<p>表之间的引用 <strong>table</strong></p>\n</li>\n<li>\n<p>每张表有多少行被优化     <strong>rows</strong></p>\n</li>\n</ol>\n<h3 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h3>\n<p>explain + SQL 语句</p>\n<h3 id=\"执行计划包含的信息\"><a class=\"anchor\" href=\"#执行计划包含的信息\">#</a> 执行计划包含的信息</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2V4cGxhaW4tb3V0cHV0Lmh0bWwjZXhwbGFpbl9zZWxlY3RfdHlwZQ==\">MySQL ：： MySQL 5.7 参考手册 ：： 8.8.2 EXPLAIN 输出格式</span></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">列</th>\n<th style=\"text-align:center\">JSON 名称</th>\n<th style=\"text-align:center\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">select_id</td>\n<td style=\"text-align:center\">标识符 SELECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#select_type\">select type</a></td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">类型 SELECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">table_name</td>\n<td style=\"text-align:center\">输出行的表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">partitions</td>\n<td style=\"text-align:center\">partitions</td>\n<td style=\"text-align:center\">匹配的分区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2V4cGxhaW4tb3V0cHV0Lmh0bWwjZXhwbGFpbi1qb2luLXR5cGVz\">type</span></td>\n<td style=\"text-align:center\">access_type</td>\n<td style=\"text-align:center\">联接頰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">possible keys</td>\n<td style=\"text-align:center\">possible_keys</td>\n<td style=\"text-align:center\">可供选择的可能索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key</td>\n<td style=\"text-align:center\">key</td>\n<td style=\"text-align:center\">实际选择的索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key 丄 en</td>\n<td style=\"text-align:center\">key_length</td>\n<td style=\"text-align:center\">所选密钥的长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ref</td>\n<td style=\"text-align:center\">ref</td>\n<td style=\"text-align:center\">与索引相比的列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rows</td>\n<td style=\"text-align:center\">rows</td>\n<td style=\"text-align:center\">要检查的行的估计值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">filtered</td>\n<td style=\"text-align:center\">filtered</td>\n<td style=\"text-align:center\">符合某条件的记录数百分比。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Extra</td>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">附加信息</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字段解释\"><a class=\"anchor\" href=\"#字段解释\">#</a> 字段解释</h3>\n<h4 id=\"id\"><a class=\"anchor\" href=\"#id\">#</a> id</h4>\n<p>id 相同，执行顺序由上至下</p>\n<p>id 不同，如果是子查询，id 的序号会递增，id 值越大优先级越高，越先被执行</p>\n<p>null 为结果集的整合</p>\n<p>总结：</p>\n<ul>\n<li>id 如果相同，可以认为是一组，从上往下顺序执行；</li>\n<li>id 值越大，优先级越高，越先执行</li>\n</ul>\n<h4 id=\"select_type\"><a class=\"anchor\" href=\"#select_type\">#</a> select_type</h4>\n<p><a href=\"#select_type\">见下方附录</a></p>\n<h4 id=\"type\"><a class=\"anchor\" href=\"#type\">#</a> type</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">性能</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">system</td>\n<td style=\"text-align:center\">1</td>\n<td><mark>表只有一行记录</mark> (等于系统表), 这是 const 类型的特例，平时不会出现，可忽略</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">const</td>\n<td style=\"text-align:center\">2</td>\n<td>表示该表最多有一个匹配行通过索引一次就找到了，const 用于比较 primary key 或者 &lt;br/&gt;unique 索引。因为只匹配一行数据，所以很快如将主键置于 where 列表中 &lt; br/&gt;MySQL 就能将该查询转换为一个常量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eq_ref</td>\n<td style=\"text-align:center\">3</td>\n<td><mark>唯一性索引</mark>扫描，对于<mark>每个索引键，表中只有一条记录与之匹配</mark>。常见于主键或唯一索引扫描</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ref</td>\n<td style=\"text-align:center\">4</td>\n<td><mark>非唯一性索引</mark>扫描，<mark>返回匹配某个单独值的所有行</mark>.&lt;br/&gt; 本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而， &lt;br/&gt; 它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">range</td>\n<td style=\"text-align:center\">5</td>\n<td><mark>只检索给定范围的行，使用一个索引来选择行</mark>。key 列显示使用了哪个索引，&lt;br/&gt; 一般就是在你的 where 语句中出现了 between、&lt;、&gt;、in 等的查询  &lt;br/&gt; 这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，&lt;br/&gt; 而结束语另一点，不用扫描全部索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">6</td>\n<td>联接类型与 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_all\"> <code>ALL</code> </a> 相同，只是扫描了索引树。这以两种方式发生： <code>index</code>  &lt;br/&gt;Full Index Scan，index 与 ALL 区别为 index 类型只遍历索引树。这通常比 ALL 快，&lt;br/&gt; 因为索引文件通常比数据文件小。(也就是说虽然 all 和 Index 都是读全表，&lt;br/&gt; 但 index 是从索引中读取的，而 all 是从硬盘中读的)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">all</td>\n<td style=\"text-align:center\">7</td>\n<td>将遍历全表以找到匹配的行</td>\n</tr>\n</tbody>\n</table>\n<p>&lt;font color=red&gt; 一般来说，得保证查询至少要达到 range 级别，最好能达到 ref &lt;/font&gt;</p>\n<h4 id=\"possible_key\"><a class=\"anchor\" href=\"#possible_key\">#</a> possible_key</h4>\n<p>显示可能应用在这张表中的索引，一个或多个</p>\n<p>查询涉及到的字段上若存在索引，则该索引将被列出，&lt;font color=red&gt; 但不一定被查询实际使用 &lt;/font&gt;。</p>\n<h4 id=\"key\"><a class=\"anchor\" href=\"#key\">#</a> key</h4>\n<p><mark>实际使用的索引。如果为 NULL，则没有使用索引</mark></p>\n<p>查询中若使用了覆盖索引，则该索引仅出现在 key 列表中</p>\n<p>&lt;font color=red&gt; 引申：&lt;/font&gt;</p>\n<p>覆盖索引：简单来说就是你查询到的字段数目和你建立索引所对应字段相同且数量相同</p>\n<h4 id=\"key_len\"><a class=\"anchor\" href=\"#key_len\">#</a> key_len</h4>\n<p>​\t表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，<mark>长度越短越好</mark><br />\n​\tkey_len 显示的值为索刳字段的最大可能长度，&lt;font color=red&gt; 并非实际使用长度 &lt;/font&gt;，即 key_len 是根据表定义计算而得，不是通过表内检索出的</p>\n<h4 id=\"ref\"><a class=\"anchor\" href=\"#ref\">#</a> ref</h4>\n<p>​\t显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值</p>\n<h4 id=\"rows\"><a class=\"anchor\" href=\"#rows\">#</a> rows</h4>\n<p>​\t根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数</p>\n<h4 id=\"extra\"><a class=\"anchor\" href=\"#extra\">#</a> extra</h4>\n<p>包含不适合在其他列中显示但十分重要的额外信息</p>\n<ul>\n<li>\n<p>Using filesort (&lt;font color=red&gt; 索引本来就是排序和查找，这种等于只用了一半，而且排序本身就比较耗时 &lt;/font&gt;)</p>\n<p>说明 mysq | 会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。</p>\n<p>MySQL 中无法利用索引完成的排序操作称为 “文件排序 &quot;</p>\n</li>\n<li>\n<p>Using temporay (&lt;font color=red&gt; 严重影响性能 &lt;/font&gt;)</p>\n<p>使了用临时表保存中间结果，MySQL 在对查询结果排序时使用临时表。</p>\n<p>常见于排序 orderby 和分组查询 groupby。</p>\n</li>\n<li>\n<p>Using  index</p>\n<p>表示相应的 select 操作中使用了覆盖索引 (Covering Index)，避免访问了表的数据行，效率不错！如果同时出现</p>\n<p>using where，表明索引被用来执行索引键值的查找；</p>\n<p>如果没有同时出现 using where，表明索引用来读取数据而非执行查找动作。</p>\n<p><strong><mark>覆盖索引 (Covering Index)</mark></strong></p>\n<p>理解方式：就是 select 的数据列只用从索引中就能够取得，不必读取数据行，MySQL 可 以利用索引返回 select 列表中的字段，而不必根据索引再次读取数据文件，换句话说查询列要被所建的索引覆盖。</p>\n<p><mark><strong>注意:</strong></mark><br />\n 如果要使用覆盖索引，一 - 定 要注意 select 列表中只取出需要的列，不可   <strong><mark>Select   *</mark></strong><br />\n 因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。</p>\n</li>\n</ul>\n<h1 id=\"索引优化\"><a class=\"anchor\" href=\"#索引优化\">#</a> 索引优化</h1>\n<h2 id=\"单表优化\"><a class=\"anchor\" href=\"#单表优化\">#</a> 单表优化</h2>\n<p>准备</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> article <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">auto_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>author_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>category_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>views <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>comments <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>title <span class=\"token keyword\">VARBINARY</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>content <span class=\"token keyword\">TEXT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> article <span class=\"token punctuation\">(</span> author_id <span class=\"token punctuation\">,</span>category_id <span class=\"token punctuation\">,</span>views <span class=\"token punctuation\">,</span>comments <span class=\"token punctuation\">,</span>title<span class=\"token punctuation\">,</span>content <span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- ----------------------------------------------</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">-- 01</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>author_id</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">from</span> article </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">where</span> category_id <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> comments <span class=\"token operator\">></span><span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> views <span class=\"token keyword\">desc</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">limit</span> <span class=\"token number\">1</span>\\G</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">-- 01-1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> idx_id_article_ccv <span class=\"token keyword\">on</span> article<span class=\"token punctuation\">(</span>category_id<span class=\"token punctuation\">,</span>comments<span class=\"token punctuation\">,</span>views<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> idx_id_article_ccv <span class=\"token keyword\">on</span> article<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> idx_id_article_cv <span class=\"token keyword\">on</span> article<span class=\"token punctuation\">(</span>category_id<span class=\"token punctuation\">,</span>views<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> idx_id_article_cv <span class=\"token keyword\">on</span> article<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">-- 查看之后发现因为 > 1 的原因导致我们索引失效 我们直接放弃这个字段从三个改为两个字段的索引，性能更优</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>author_id <span class=\"token keyword\">from</span> article <span class=\"token keyword\">where</span> category_id <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> comments <span class=\"token operator\">></span><span class=\"token number\">1</span>  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> views <span class=\"token keyword\">desc</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>author_id <span class=\"token keyword\">from</span> article <span class=\"token keyword\">where</span> category_id <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> comments <span class=\"token operator\">=</span><span class=\"token number\">1</span>  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> views <span class=\"token keyword\">desc</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"双表优化\"><a class=\"anchor\" href=\"#双表优化\">#</a> 双表优化</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>class<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token identifier\"><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span></span><span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>book<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token identifier\"><span class=\"token punctuation\">`</span>bookid<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token identifier\"><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span></span>  <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>bookid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">-- ----------------------------------------------</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> class<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">-- type=all</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> class<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> idx_card <span class=\"token keyword\">on</span>  book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> idx_card <span class=\"token keyword\">on</span>  class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> idx_card <span class=\"token keyword\">on</span>  book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> idx_card <span class=\"token keyword\">on</span>  class<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span>  book <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> class <span class=\"token keyword\">on</span> class<span class=\"token punctuation\">.</span>card<span class=\"token operator\">=</span>book<span class=\"token punctuation\">.</span>card<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span>  class <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> book <span class=\"token keyword\">on</span> class<span class=\"token punctuation\">.</span>card<span class=\"token operator\">=</span>book<span class=\"token punctuation\">.</span>card<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>左连接</strong></p>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220818221306990-1660960902143.png\" class=\"\"></p>\n<p>结果显示，在没有用索引的状况下我们的索引类型均为 ALL。</p>\n<p>因为是<mark>左连接</mark>的缘故我们的<mark>左表是根据右表搜索行</mark>的，<mark>左边一定都有</mark>，所以<mark>右边是我们的关键点</mark>，一定需要建立索引。</p>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220818221831192-1660960902143.png\" class=\"\"></p>\n<p>可以看到第二行的 type 变为了 ref，rows 也变成了优化比较明显。这是由左连接特性决定的。LEFT  JOIN 条件用于确定如何从右表搜索行。所以右边是我们的关键点，- 定需要建立索引。</p>\n<p><strong>同理可证右连接</strong><br />\n因为 RIGHTJOIN 条件用于确定如何从左表搜索行，右边一定都有，所以左边是我们的关键点，一定需要建立索引。</p>\n<h2 id=\"三表优化\"><a class=\"anchor\" href=\"#三表优化\">#</a> 三表优化</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> phone<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tphoneid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcard <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>phoneid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">INNODB</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">-- --------===============================================</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> class <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> X <span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> phone <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> Y <span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> X <span class=\"token keyword\">on</span> class<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> Y <span class=\"token keyword\">on</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> class <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> book <span class=\"token keyword\">on</span> class<span class=\"token punctuation\">.</span>card <span class=\"token operator\">=</span> book<span class=\"token punctuation\">.</span>card <span class=\"token keyword\">join</span> phone <span class=\"token keyword\">on</span> book<span class=\"token punctuation\">.</span>card <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">.</span>card<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> class<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>初始结果</p>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220818222159241-1660960902143.png\" class=\"\"></p>\n<p>优化后</p>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220818222905733-1660960902143.png\" class=\"\"></p>\n<p>后 2 行的 type 都是 ref 且总 rows 优化很好效果不错。</p>\n<p>因此索引最好设置在需要经常查询的字段中</p>\n<p>解释：不论是 class 还是 phone 都是需要 book.card 来确定而且在第二个 join 中还需要全部扫描 book 所以尽管他是一个与 class 的左连接，理论上要给 book 建立一个索引，但是因为 phone 的关系我们倒不如给 phone 和 class 做索引，减少可以减少的，book 反正要全表无所谓。</p>\n<p>总结就是<mark>小结果集推动大结果集</mark>就可以起到优化作用</p>\n<h2 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> [结论]</h2>\n<p>Join 语句的优化</p>\n<p>尽可能减少 Join 语句中的 NestedL oop 的循环总次数；“永远用小结果集驱动大的结果集”。</p>\n<p>优先优化 Nested L oop 的内层循环；</p>\n<p>保证 Join 语句中被驱动表上 Join 条件 字段已经被索引；</p>\n<p>当无法保证被驱动表的 Join 条件字段被索引且内存资源充足的前提下，不要太吝惜 JoinBuffer 的设置；</p>\n<h1 id=\"索引失效\"><a class=\"anchor\" href=\"#索引失效\">#</a> 索引失效</h1>\n<ol>\n<li>全值匹配我最爱</li>\n</ol>\n<blockquote>\n<p>​\t每个索引字段都存在</p>\n</blockquote>\n<ol start=\"2\">\n<li>最佳左前缀法则 (<mark>where 条件</mark>)</li>\n</ol>\n<blockquote>\n<p>​\t如果索引了多列 (<mark>3 个及以上</mark>)，要遵守最左前缀法则。指的是查询<mark>从索引的最左前列开始</mark>并且<mark>不跳过索引中的列</mark>。<br />\n​\t简单来说就是<mark>每个字段的带头大哥不能丢，中间兄弟不能断</mark></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> tbl_user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> tbl_user<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>age <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tsex <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">check</span><span class=\"token punctuation\">(</span> sex <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>email <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 添加测试数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span>  tbl_user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> tbl_user<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'aa11aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa22aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'456@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa33aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'789@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'aa11aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa22aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'456@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa33aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'789@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 走索引且 key_len 越来越长</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa11aa'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa11aa'</span> <span class=\"token operator\">and</span> age <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa11aa'</span> <span class=\"token operator\">and</span> age <span class=\"token operator\">=</span> <span class=\"token number\">11</span> <span class=\"token operator\">and</span> sex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">-- 走索引</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa11aa'</span>  <span class=\"token operator\">and</span> sex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">-- 不走索引带头大哥没了</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> age <span class=\"token operator\">=</span> <span class=\"token number\">11</span> <span class=\"token operator\">and</span> sex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<ol start=\"3\">\n<li>\n<p>不在索引列上做任何操作 (计算、函数 (自动 or 手动) 类型转换)，会导致索引失效而转向全表扫描</p>\n</li>\n<li>\n<p>存储引擎 <mark>不能使用索引中范围条件</mark> &lt;font color=red&gt; 右边的列 &lt;/font&gt; (<mark>自己是最后一个</mark>)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 范围条件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> tbl_user <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> idx_tbl_user_age_sex_email <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 全部走了索引</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age <span class=\"token keyword\">from</span> tbl_user <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age<span class=\"token punctuation\">,</span>sex <span class=\"token keyword\">from</span> tbl_user <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>email <span class=\"token keyword\">from</span> tbl_user <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 部分走了索引</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> sex <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age<span class=\"token punctuation\">,</span>sex <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> sex <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>email <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> sex <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><mark>尽量使用覆盖索引</mark> (只访问索引的查询 (索引列和查询列一致))， 减少 select  *</p>\n</li>\n<li>\n<p>mysql 在<mark>使用不等于 (!= 或者 &lt;&gt; )<mark> 的时候</mark>无法使用索引</mark>会导致<mark>全表扫描团</mark></p>\n</li>\n<li>\n<p>is null ,is not null 也无法使用索引</p>\n</li>\n<li>\n<p>like<mark> 以通配符开头 (</mark>'%abc...)mysq|<mark> 索引失效</mark>会变成全表扫描的操作。(<mark>放右边可以</mark>)</p>\n<p><strong>问题：解决 like'% 字符串 %' 时索引不被使用的方法？？</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 建立索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> tbl_user <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> idx_tbl_user_name_age <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 测试</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 走索引</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> name <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 走索引</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> name<span class=\"token punctuation\">,</span>age <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 不走索引</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>email <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>email <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><mark>字符串不加单引号索引失效</mark></p>\n</li>\n<li>\n<p>少用 or，用它来连接时会索引失效</p>\n</li>\n</ol>\n<h2 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- indexc1234</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> test03 <span class=\"token keyword\">where</span> c1<span class=\"token operator\">=</span><span class=\"token string\">'a1'</span> <span class=\"token operator\">and</span> c2<span class=\"token operator\">=</span><span class=\"token string\">'a2'</span> <span class=\"token operator\">and</span> c5<span class=\"token operator\">=</span><span class=\"token string\">'a5'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> c3<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> test03 <span class=\"token keyword\">where</span> c1<span class=\"token operator\">=</span><span class=\"token string\">'a1'</span> <span class=\"token operator\">and</span> c5<span class=\"token operator\">=</span><span class=\"token string\">'a5'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> c3<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><em><strong>这两种 SQL 的区别在哪？</strong></em></p>\n<blockquote>\n<p>都走了索引，但是在第 2 条 SQL 会产生文件的内排序，为什么呢？这是因为本来应该是自动的顺序排列，即 c1,c2,c3..... 默认，但是我们写了 order by 所以产生了内排。但是同样第 1 条 SQL 为什么没有呢？因为我们在 where 条件中使用了他让他固定成了一个常量 constant ，即 c3 虽然一直在动，但是 c2 已经固定没有了排序的过程所以不会产生内排的步骤</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> t1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t1<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tc1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tc2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tc3 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tc4 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tc5 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t1<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">,</span>c3<span class=\"token punctuation\">,</span>c4<span class=\"token punctuation\">,</span>c5<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> t1 <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> idx_c1234 <span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">,</span>c3<span class=\"token punctuation\">,</span>c4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> c1 <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> c4 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> c3<span class=\"token punctuation\">,</span>c2 <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> c1 <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> c4 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> c3<span class=\"token punctuation\">,</span>c2 <span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<p>结果：</p>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220818213253106-1660960902143.png\" class=\"\"></p>\n<p><em><strong>同理论证 gourp by</strong></em></p>\n<ul>\n<li>分组之前比排序，可能会产生临时表的产生</li>\n</ul>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220818213434892-1660960902143.png\" class=\"\"></p>\n<h2 id=\"建议\"><a class=\"anchor\" href=\"#建议\">#</a> 建议</h2>\n<ul>\n<li>\n<p>对于单键索引，尽量选择针对当前 query 过滤性更好的索引</p>\n</li>\n<li>\n<p>在选择组合索引的时候，当前 Query 中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</p>\n</li>\n<li>\n<p>在选择组合索引的时候，尽量选择可以能够包含当前 query 中的 where 字句中更多字段的索引</p>\n</li>\n<li>\n<p>尽可能通过分析统计信息和调整 query 的写法来达到选择合适索引的目的</p>\n</li>\n</ul>\n<h2 id=\"口诀\"><a class=\"anchor\" href=\"#口诀\">#</a> 口诀</h2>\n<p>全值匹配我最爱\t，最左前缀要遵守；</p>\n<p>帶头大哥不能死\t，中间兄弟不能断；</p>\n<p>索引列上少计算\t，范围之后全失效；</p>\n<p>LIKE 百分写最右\t，覆盖索引不写星；</p>\n<p>不等空值还有 or     ，索引失效要少用；</p>\n<p>VAR 的引号不可丢，SQL 高级也不难！</p>\n<p>&lt;div name = 查询截取分析&gt;</p>\n<h1 id=\"查询截取分析\"><a class=\"anchor\" href=\"#查询截取分析\">#</a> 查询截取分析</h1>\n<h2 id=\"内容\"><a class=\"anchor\" href=\"#内容\">#</a> 内容：</h2>\n<p>​\t查询优化</p>\n<p>​\t慢查询日志</p>\n<p>​\t批量数据脚本</p>\n<p>​\tshow profile</p>\n<p>​\t全局查询日志</p>\n<h2 id=\"工作一般流程分析过程\"><a class=\"anchor\" href=\"#工作一般流程分析过程\">#</a> 工作一般流程 (分析过程)</h2>\n<ol>\n<li>观察，至少跑 1 天，看看生产的慢 SQL 情况。</li>\n<li>开启慢查询日志，设置阙值，比如超过 5 秒钟的就是慢 SQL，并将它抓取出来。</li>\n<li>explain + 慢 SQL 分析</li>\n<li>show profile</li>\n<li>运维经理 or DBA，进行 SQL 数据库服务器的参数调优。。</li>\n</ol>\n<p><mark>总结</mark></p>\n<ol>\n<li>\n<p>慢查询的开启并捕获</p>\n</li>\n<li>\n<p>explain + 慢 SQL 分析</p>\n</li>\n<li>\n<p>show profile 查询 SQL 在 Mysql 服务器里面的执行细节和生命周期情况</p>\n</li>\n<li>\n<p>SQL 数据库服务器的参数调优。</p>\n</li>\n</ol>\n<h2 id=\"查询优化\"><a class=\"anchor\" href=\"#查询优化\">#</a> 查询优化</h2>\n<h3 id=\"永远小表驱动大表即小的数据集驱动大的数据集\"><a class=\"anchor\" href=\"#永远小表驱动大表即小的数据集驱动大的数据集\">#</a> 永远小表驱动大表，即小的数据集驱动大的数据集</h3>\n<p>小表驱动大表，类似嵌套循环 Nested Loop</p>\n<h4 id=\"case-1\"><a class=\"anchor\" href=\"#case-1\">#</a> Case 1：</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>两个简单的 for 循环，但是在 SQL 中我们就应该选择 第一个循环而不是第二个</p>\n<ul>\n<li>小的循环在外层，表连接需要 5 次</li>\n<li>大的循环在外层，表连接需要 1000 次，浪费数据库资源</li>\n</ul>\n<p><strong>总结:</strong> 小表驱动大表的主要目的是通过减少表连接创建的次数，加快查询速度.</p>\n<h4 id=\"case-2\"><a class=\"anchor\" href=\"#case-2\">#</a> Case 2</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> A <span class=\"token keyword\">where</span>  id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> B<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 等价于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> A <span class=\"token keyword\">where</span> A<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span>（B<span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tA<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>B<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>当 B 表的数据集小于 A 表的数据集时，用 in 优于 exists。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> A <span class=\"token keyword\">where</span> <span class=\"token keyword\">exists</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token keyword\">from</span> B <span class=\"token keyword\">where</span> B<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 等价于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span><span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> A</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> B <span class=\"token keyword\">where</span> B<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span>（A<span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tA<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>B<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>当 A 表的数据集小于 B 表的数据集时，用 exists 优于 in。</p>\n<p>注意：A 表与 B 表的 ID 字段应建立索引。</p>\n<ul>\n<li>EXISTS</li>\n</ul>\n<blockquote>\n<p>语法：SELECT .….. FROM table WHERE EXISTS (subquery)</p>\n</blockquote>\n<p>​\t该语法可以理解为。<mark>将主查询的数据，放到子查询中做条件验证，根据验证结果（TRUE 或 FALSE) 来决定主查询的数据结果是否得以保留</mark>。</p>\n<ul>\n<li>提示\n<ol>\n<li><mark>EXSTS (stbuey) 只返回 TRUE 或 FALSE，因此子查询中的 SELECT * 也可以是 SELECT  1 或是 SELECT ‘X’。官方说法是：实际执行时会忽略 SELECT 清单，因此没有区别</mark></li>\n<li>EXSTS 子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比，如果担忧效率问题，可进行实际检验以确定是否有效率问题。</li>\n<li>EXISTS 子查询往往也可以用条件表达式、其他子查询或者 JOIN 来替代，<mark>何种最优需要具体问题具体分析</mark></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"为排序使用索引ordeby优化\"><a class=\"anchor\" href=\"#为排序使用索引ordeby优化\">#</a> 为排序使用索引 OrdeBy 优化</h3>\n<p>MySQL 支持<mark>二种方式的排序</mark>，<mark>FileSort</mark> 和<mark> Index</mark>，<mark>Index 效率高。</mark></p>\n<p>它指 MySQL 扫描索引本身完成排序。FileSort 方式效率较低。</p>\n<p>&lt;font color=red&gt;ORDER BY 满足两情况，会使用 Index 方式排序：&lt;/font&gt;</p>\n<ul>\n<li>\n<p>ORDER BY 语句使用索引最左前列</p>\n</li>\n<li>\n<p>使用 where 字句与 Order By 字句条件列组合满足<mark>索引最左前列</mark></p>\n</li>\n</ul>\n<p>建议：</p>\n<p>​\t尽量使用 Index 方式排序，避免使用 FileSort 方式排序尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀</p>\n<p>&lt;font color=red&gt; 如果不在索引列上，filesort 有两种算法：mysql 就要启动双路排序和单路排序 &lt;/font&gt;</p>\n<p><mark><em>双路排序</em></mark></p>\n<blockquote>\n<p>MySQL 4.1 之前是使用双路排序，字面意思就是两次扫描磁盘，最终得到数据，<br />\n读取行指针和 orderby 列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出</p>\n<p>从磁盘取排序字段，在 buffer 进行排序，再从磁盘取其他字段。</p>\n<p>取一批数据， 要对磁盘进行了两次扫描，众所周知，I\\O 是很耗时的，所以在 mysql4.1 之后，出现了第二种改进的算法，就是单路排序</p>\n</blockquote>\n<p><mark><em>单路排序</em></mark></p>\n<blockquote>\n<p>从磁盘读取查询需要的所有列，按照 order by 列在 buffer 对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机 IO 变成了顺序 I0, 但是它会使用更多的空间，因为它把每一行都保存在内存中了。</p>\n</blockquote>\n<p>结论：</p>\n<p>​\t<strong>由于单路是后出的，总体而言好过双路！</strong></p>\n<p>引申出来的问题：</p>\n<blockquote>\n<p>​\t在 sort_buffer 中，方法 B 比方法 A 要多占用很多空间，因为方法 B 是把所有字段都取出，所以有可能取出的数据的总大小超出了 sort_buffer 的容量，导致每次只能取 sort_buffer 容量大小的数据，进行排序（创建 tmp 文件，多路合并〉，排完再取取 sort_buffer 容量大小，再排…… 从而多次 I/O。本来想省一次 I/O 操作，反而导致了大量的 I/O 操作，反而得不偿失。</p>\n</blockquote>\n<p>优化策略</p>\n<ul>\n<li>增大 sort_buffer_size 参数的设置</li>\n<li>增大 max_length_for_sort_data 参数的设置</li>\n</ul>\n<p>&lt;font color=red&gt; 提高 Order By 的速度 &lt;/font&gt;</p>\n<ol>\n<li>\n<p>Order by 时 select 是一个大忌只 Query 需要的字段，这点非常重要。在这里的影响是:</p>\n<ol>\n<li>当 Query 的字段共小总和小于 max_length_for_sort_data 而且排序字段不是 TEXTIBLOB 类型时，会用改进后的算法 —— 单路排序，否则用老算法 —— 多路排序。</li>\n<li>两种算法的数据都有可能超出 sort_buffer 的容量，超出之后，会创建 tmp 文件进行合并排序，导致多次 IO，但是用单路排序算法的风险会更大一些，所以要提高 sort_buffer_size.</li>\n</ol>\n</li>\n<li>\n<p>尝试提高 sort_buffer_size<br />\n 不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的</p>\n</li>\n<li>\n<p>尝试提高 max_length_for_sort_data<br />\n 提高这个参数，会增加用改进算法的概率。但是如果设的太高，数据总容量超出 sort_buffer_size 的概率就增大，明显症状是高的磁盘 I/O 活动和低的处理器使用率.</p>\n</li>\n</ol>\n<h3 id=\"group-by\"><a class=\"anchor\" href=\"#group-by\">#</a> Group By</h3>\n<p>group by 实质是<mark>先排序</mark>后进行<mark>分组</mark>，<mark>遵照索引建的最佳左前缀</mark></p>\n<p>当无法使用索引列，增大 max_length_for_sort_data 参数的设置 + 增大 sort_buffer_size 参数的设置</p>\n<p>where 高于 having，能写在 where 限定的条件就不要去 having 限定了。</p>\n<p>其余均和 Order by 相同</p>\n<h2 id=\"慢查询日志\"><a class=\"anchor\" href=\"#慢查询日志\">#</a> 慢查询日志</h2>\n<ul>\n<li>\n<p>MySQL 的慢查询日志是 MySQL 提供的一种日志记录，它用来记录在 MySQL 中响应时间超过阀值的语句，具体指运行时间超过 long_query_time 值的 SQL，则会被记录到慢查询日志中。</p>\n</li>\n<li>\n<p>具体指运行时间超过 long_query_time 值的 SQL，则会被记录到慢查询日志中。long_query_time 的默认值为 10，意思是运行 10 秒以上的语句。</p>\n</li>\n<li>\n<p>由他来查看哪些 SQL 超出了我们的最大忍耐时间值，比如一条 sql 执行超过 5 秒钟，我们就算慢 SQL，希望能收集超过 5 秒的 sql，结合之前 explain 进行全面分析。</p>\n</li>\n</ul>\n<h3 id=\"操作说明\"><a class=\"anchor\" href=\"#操作说明\">#</a> 操作说明</h3>\n<p>&lt;font color=red&gt; 默认情况下，MySQL 数据库没有开启慢查询日志 &lt;/font&gt;，需要我们手动来设置这个参数。</p>\n<p>&lt;font color=red&gt; 当然，如果不是调优需要的话，一般不建议启动该参数 &lt;/font&gt;，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件</p>\n<h3 id=\"查看是否开启及开启\"><a class=\"anchor\" href=\"#查看是否开启及开启\">#</a> 查看是否开启及开启</h3>\n<p>默认：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%slow_query_log%'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- OFF 关闭</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819170427373-1660960902143.png\" class=\"\"></p>\n<p>开启</p>\n<p>开启了慢查询日志只对当前数据库生效，如果 MySQL 重启后则会失效。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> slow_query_log<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果要永久生效，就必须修改配置文件 my.cnf（其它系统变量也是如此)</p>\n<p>修改 my.cnf 文件，[mysqld] 下增加或修改参数<br />\n slow_query_log 和 slow_query_log_file 后，然后重启 MySQL 服务器。也即将如下两行配置进 my.cnf 文件</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slow_query_log <span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">slow_query_log_file</span><span class=\"token operator\">=</span>/var/lib/mysqlslow-slow.log</pre></td></tr></table></figure><p>关于慢查询的参数 slow_query_log_file，它指定慢查询日志文件的存放路径，&lt;font color=red&gt; 系统默认会给一个缺省的文件 host_name-slow.log&lt;/font&gt;(如果没有指定参数 slow_query_log_file 的话)</p>\n<h3 id=\"那么开启了慢查询日志后什么样的sql才会记录到慢查询日志里面呢\"><a class=\"anchor\" href=\"#那么开启了慢查询日志后什么样的sql才会记录到慢查询日志里面呢\">#</a> 那么开启了慢查询日志后，什么样的 SQL 才会记录到慢查询日志里面呢？</h3>\n<p>这个是由参数 long_query_time 控制，默认情况下 long_query_time 的值为 10 秒，命令:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHoW</span> VARIABLES <span class=\"token operator\">LIKE</span> 'long_query_time<span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819171026557-1660960902143.png\" class=\"\"></p>\n<p>可以使用命令修改，也可以在 my.cnf 参数里面修改。</p>\n<p>假如运行时间正好等于 long_query_time 的情况，并不会被记录下来。也就是说，在 mysql 源码里是 &lt;font color=red&gt; 判断大于 long_query_time，而非大于等于 &lt;/font&gt;。</p>\n<h3 id=\"case\"><a class=\"anchor\" href=\"#case\">#</a> Case</h3>\n<ol>\n<li>查看当前多少秒算慢</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'long_query_time%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>设置慢的阙值时间</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> long_query_time<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819171344450-1660960902143.png\" class=\"\"></p>\n<ol start=\"3\">\n<li>为什么设置后看不出变化？</li>\n</ol>\n<p>需要<mark>重新连接或新开一个会话</mark>才能看到修改值</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHow</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'long _query_time%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">global</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'long_query_time'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>记录慢 SQL 并后续分析 R</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> sleep<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">-- 睡 4s</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 查看日志</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819171955968-1660960902143.png\" class=\"\"></p>\n<ol start=\"5\">\n<li>查询当前系统中有多少条慢查询记录冒 R</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">global</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'%Slow_queries%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819172043683-1660960902143.png\" class=\"\"></p>\n<h3 id=\"配置版\"><a class=\"anchor\" href=\"#配置版\">#</a> 配置版</h3>\n<p>【mysqld】下配置:</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开启查询日志</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">slow_query_log</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 日志地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">slow_query_log_file</span><span class=\"token operator\">=</span>/var/lib/mysql/atguigu-slow.log</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 最大的查询时间，超过就算是慢查询</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">long_query_time</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 日志输出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">log_output</span><span class=\"token operator\">=</span>FILE</pre></td></tr></table></figure><h3 id=\"日志分析工具mysqldumpslow\"><a class=\"anchor\" href=\"#日志分析工具mysqldumpslow\">#</a> 日志分析工具 —mysqldumpslow</h3>\n<p>​\t在生产环境中，如果要手工分析日志，查找、分析 SQL，显然是个体力活，MySQL 提供了日志分析工具 mysqldumpslow</p>\n<p>查看 mysqldumpslow 的帮助信息</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">--help</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常用参数</th>\n<th style=\"text-align:center\">注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:center\">是表示按照何种方式排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:center\">访问次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:center\">锁定时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:center\">返回记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">t</td>\n<td style=\"text-align:center\">查询时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">al</td>\n<td style=\"text-align:center\">平均锁定时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ar</td>\n<td style=\"text-align:center\">平均返回记录数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">at</td>\n<td style=\"text-align:center\">平均查询时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">t</td>\n<td style=\"text-align:center\">即为返回前面多少条的数据；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">g</td>\n<td style=\"text-align:center\">后边搭配一个正则匹配模式，大小写不敏感的；</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>得到返回记录集最多的10个SQL</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">-s</span> r <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> /var/lib/mysql/atguigu-slow.log</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>得到访问次数最多的10个SQL</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">-s</span> c <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> /var/lib/mysql/atguigu-slow.log</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>得到按照时间排序的前10条里面含有左连接的查询语句</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">-s</span> t <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> <span class=\"token parameter variable\">-g</span> <span class=\"token string\">\"left join\"</span>lar/lib/mysql/atguigu-slow.log</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>另外建议在使用这些命令时结合<span class=\"token operator\">|</span>和more使用，否则有可能出现爆屏情况</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">-s</span> r <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> /ar/lib/mysql/atguigu-slow.log <span class=\"token operator\">|</span> <span class=\"token function\">more</span></pre></td></tr></table></figure><h2 id=\"批量数据脚本\"><a class=\"anchor\" href=\"#批量数据脚本\">#</a> 批量数据脚本</h2>\n<p>1. 建表 (dept,emp)</p>\n<p>2. 设置参数 log_bin_trust_function_creatorst</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建函数，假如报错：This function has none of DETERMINISTIC</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 由于开启过慢查询日志，因为我们开启了 bin-log, 我们就必须为我们的 function 指定一个参数。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'log_bin_trust_function_creators'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> log_bin_trust_function_creators<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 这样添加了参数以后，如果 mysqld 重启，上述参数又会消失，永久方法:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>I</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>windows下my<span class=\"token punctuation\">.</span>ini<span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span>加上log_bin_trust_function_creators<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>linux下letc<span class=\"token operator\">/</span>my<span class=\"token punctuation\">.</span>cnf 下my<span class=\"token punctuation\">.</span>cnf<span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span>加上log_bin_trust_function_creators<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p>3. 创建函数，保证每条数据都不同</p>\n<p>随机产生字符串</p>\n<p>随机产生部门编号</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> $$</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> rand_string<span class=\"token punctuation\">(</span>n lNT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span>）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> chars_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'abcdefghijlklmnoparstuvwxyABCDEFJHIJKLMNOPQRSTUWWXYZ'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> return_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">WHILE</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token keyword\">DO</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">SET</span> return_str <span class=\"token operator\">=</span>CONCAT<span class=\"token punctuation\">(</span>return_str<span class=\"token punctuation\">,</span>SUBSTRING<span class=\"token punctuation\">(</span>chars_str<span class=\"token punctuation\">,</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span>i<span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">RETURN</span> return_str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>$$</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>DFLIMITER <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                               </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">delimiter</span> $$</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">CREATE</span> FUNCTLON rand_num<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">RETURN</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">END</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">delimiter</span> $$</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>DFLIMITER <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4. 创建存储过程</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>创建往emp表中插入数据的存储过程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> $$</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_emp<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> <span class=\"token keyword\">START</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">IN</span> max_num <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">#set autocomnit = 0 把 autocommit 设置成 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">REPEAT</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">SET</span> i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTo</span> emp<span class=\"token punctuation\">(</span>empno，ename <span class=\"token punctuation\">,</span> job <span class=\"token punctuation\">,</span>mgr <span class=\"token punctuation\">,</span>hiredate <span class=\"token punctuation\">,</span>sal <span class=\"token punctuation\">,</span>comm <span class=\"token punctuation\">,</span>deptno <span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>SEAR<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sAESLsy'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0001</span><span class=\"token punctuation\">,</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    UNTIL i <span class=\"token operator\">=</span> max_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">END</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>$$</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>DFLIMITER <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>创建往dept表中插入数据的存储过程</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>DFLIMITER $$</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_dept<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> <span class=\"token keyword\">START</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">IN</span> max_num lNT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> i lNT <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">REPEAT</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    SETi<span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token punctuation\">(</span>deptno <span class=\"token punctuation\">,</span>dname<span class=\"token punctuation\">,</span>loc <span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">START</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    UNTIL i <span class=\"token operator\">=</span> max_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">END</span> $$</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>DFLIMITER <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>5. 调用存储过程</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">call</span> insert_emp<span class=\"token punctuation\">(</span><span class=\"token number\">10001</span><span class=\"token punctuation\">,</span><span class=\"token number\">50000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">call</span> inser_dept<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"show-profile\"><a class=\"anchor\" href=\"#show-profile\">#</a> Show profile</h2>\n<p>是什么：是 mysql 提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于 SQL 的调优的测量</p>\n<p>官网: <span class=\"exturl\" data-url=\"aHR0cDovL2Rldi5teXNxbC5jb20vZG9jL3JlZm1hbi81LjUvZW4vc2hvdy1wcm9maWxlLmh0bWw=\">http://dev.mysql.com/doc/refman/5.5/en/show-profile.html</span></p>\n<p>默认情况下，参数处于关闭状态，并保存最近 15 次的运行结果</p>\n<p>分析步骤</p>\n<p>1. 是否支持，看看当前的 mysql 版本是否支持</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'profiling'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 默认是关闭，使用前需要开启</span></pre></td></tr></table></figure><p>2. 开启功能，默认是关闭，使用前需要开启</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span> profiling<span class=\"token operator\">=</span><span class=\"token keyword\">on</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'profiling'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3. 运行 SQL</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">join</span> dept d <span class=\"token keyword\">on</span> e<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> id<span class=\"token operator\">%</span><span class=\"token number\">10</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> id<span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4. 查看结果，show profiles;</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> profiles<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819180736190-1660960902143.png\" class=\"\"></p>\n<p>5. 诊断 SQL，</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> profile cpu<span class=\"token punctuation\">,</span>block io <span class=\"token keyword\">for</span> query <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">-- 最后数字是上一步前面的 SQL 的 Id;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常用参数</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ALL</td>\n<td>显示所有的开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BLOCK IO</td>\n<td>显示块 IO 相关开销</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CONTEXT SWITCHES</td>\n<td>上下文切换相关开销</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CPU</td>\n<td>显示 CPU 相关开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IPC</td>\n<td>显示发送和接收相关开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MEMORY</td>\n<td>显示内存相关开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PAGE FAULTS</td>\n<td>显示页面错误相关开销信息 |</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SOURCE</td>\n<td>显示和 Source_function，Source_file，Source_line 相关的开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SWAPS</td>\n<td>显示交换次数相关开销的信息</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819182050124-1660960902143.png\" class=\"\"></p>\n<p>6. 日常开发需要注意的结论</p>\n<ul>\n<li>\n<p>converting HEAP to MyISAM     查询结果太大，内存都不够用了往磁盘上搬了。</p>\n</li>\n<li>\n<p>Creating tmp table       创建临时表</p>\n<ul>\n<li>拷贝数据到临时表</li>\n<li>用完再删除</li>\n</ul>\n</li>\n<li>\n<p>Copying to tmp table on disk      把内存中临时表复制到磁盘，危险！！!</p>\n</li>\n<li>\n<p>locked    (死锁)</p>\n</li>\n</ul>\n<h2 id=\"全局查询日志\"><a class=\"anchor\" href=\"#全局查询日志\">#</a> 全局查询日志</h2>\n<p>&lt;font color=red&gt;<strong> 永远不要在生产环境开启这个功能</strong>。&lt;/font&gt;</p>\n<p>配置启用</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#在 mysql 的 my.cnf 中，设置如下:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#开启</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">general_log</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#记录日志文件的路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">general_log_file</span><span class=\"token operator\">=</span>/path/logfile</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#输出格式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">log_output</span><span class=\"token operator\">=</span>FILE</pre></td></tr></table></figure><p>编码启用</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> general_log<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> log_output<span class=\"token operator\">=</span><span class=\"token string\">'TABLE'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 此后，你所编写的 sql 语句，将会记录到 mysql 库里的 general_log 表，可以用下面的命令查看</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span>general_lpg<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>&lt;div name=MySQL 的锁机制&gt;</p>\n<h1 id=\"mysql锁机制\"><a class=\"anchor\" href=\"#mysql锁机制\">#</a> MySQL 锁机制</h1>\n<p>概述：锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源〈如 CPU、RAM、V/O 等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。[</p>\n<p>打个比方，我们到淘宝上买一件商品，商品只有一件库存，这个时候如果还有另一个人买，那么如何解决是你买到还是另一个人买到的问题？</p>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819183900802-1660960902143.png\" class=\"\"></p>\n<p>这里肯定要用到事务，我们先从库存表中取出物品数量，然后插入订单，付款后插入付款表信息，然后更新商品数量。在这个过程中，使用锁可以对有限的资源进行保护，解决隔离和并发的矛盾。</p>\n<h2 id=\"锁的分类\"><a class=\"anchor\" href=\"#锁的分类\">#</a> 锁的分类</h2>\n<ul>\n<li>\n<p>从对数据操作的粒度分</p>\n<ul>\n<li>表锁 (偏读，解决幻读 (一个事务中对数据添加、删除，并且多次查询，每次结果不都相同))</li>\n<li>行锁 (偏写，解决重复读 (一个事务中对一条数据多次修改，并且多次查询，每次结果不都相同))</li>\n</ul>\n</li>\n<li>\n<p>从对数据操作的类型（读 \\ 写) 分</p>\n<ul>\n<li><mark>读锁 (共享锁)</mark>：针对同一份数据，多个读操作可以同时进行而不会互相影响。</li>\n<li><mark>写锁 (排它锁)</mark>：当前写操作没有完成前，它会阻断其他写锁和读锁。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"读锁案例介绍\"><a class=\"anchor\" href=\"#读锁案例介绍\">#</a> 读锁 (案例介绍)</h2>\n<p>准备：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> mylock<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">engine</span> myisam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mylock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>book<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>bookid<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>bookid<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_card<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">9</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 手动添加表锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 语法：lock table Table_1_Name  read/write,Table_2_name read/write,..;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">lock</span> <span class=\"token keyword\">table</span> mylock <span class=\"token keyword\">read</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 查看锁</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 释放锁</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">unlock</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mylock<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 读锁没有释放之前这个回话只能读取这个读锁表，其他回话可以查询或者更新未锁定的表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 其他回话插入或者更新表的时候会进入阻塞状态，直至锁的释放</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">update</span> mylock <span class=\"token keyword\">set</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa'</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"写锁案例介绍\"><a class=\"anchor\" href=\"#写锁案例介绍\">#</a> 写锁 (案例介绍)</h2>\n<p>Session 1 (产生锁)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">lock</span> <span class=\"token keyword\">table</span> mylock <span class=\"token keyword\">write</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mylock<span class=\"token punctuation\">;</span> <span class=\"token comment\">--ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">update</span> mylock <span class=\"token keyword\">set</span> name <span class=\"token operator\">=</span><span class=\"token string\">'aa'</span> <span class=\"token keyword\">where</span>  id <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- ok</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'uplock tables' at line 1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">unlock</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Session 2</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mylock<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- block 阻塞住了，直至锁的释放才看到了</span></pre></td></tr></table></figure><h2 id=\"读写结论\"><a class=\"anchor\" href=\"#读写结论\">#</a> 读写结论</h2>\n<p>MyISAM 在执行查询语句〈SELECT) 前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。</p>\n<p>MySQL 的表级锁有两种模式:</p>\n<p>​\t表共享读锁 (Table Read Lock)</p>\n<p>​\t表独享读锁 (Table Write Lock)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">lock_type</th>\n<th style=\"text-align:center\">是否共享</th>\n<th style=\"text-align:center\">读锁</th>\n<th style=\"text-align:center\">写锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">读锁</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">写锁</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<p><mark>结论:</mark></p>\n<p>结合上表，所以对 MyISAM 表进行操作，会有以下情况:</p>\n<p>1、对 MyISAM 表的读操作〈加读锁)，不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。</p>\n<p>2、对 MyISAM 表的写操作（加写锁)，会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。</p>\n<p>&lt;font color=red&gt;<strong> 简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞</strong>。&lt;/font&gt;</p>\n<h2 id=\"表锁案例介绍\"><a class=\"anchor\" href=\"#表锁案例介绍\">#</a> 表锁 (案例介绍)</h2>\n<p>【如何分析表锁定】<br />\n可以通过检查 table_locks_waited 和 table_locks_immedlate 状态变量来分析系统上的表锁定:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'table%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819205444832-1660960902143.png\" class=\"\"></p>\n<p>这里有两个状态变量记录 MySQL 内部表级锁定的情况，两个变量说明如下:</p>\n<p>&lt;font color=blue&gt;T<strong>able_locks_immediate: 产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加 1</strong>&lt;/font&gt;</p>\n<p>&lt;font color=blue&gt;<strong>Table_locks_waited: 出现表级锁定争用而发生等待的次数 (不能立即获取锁的次数，每等待一次锁值加 1),</strong><br />\n<strong> 此值高则说明存在着较严重的表级锁争用情况；</strong>&lt;/font&gt;</p>\n<p>&lt;font color=red&gt;<strong> 此外，&lt;u&gt;<em><strong>Myisam</strong></em>&lt;/u&gt; 的读写锁调度是写优先，这也是 &lt; u&gt;<em><strong>myisam</strong></em>&lt;/u&gt; 不适合做写为主表的引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞</strong> &lt;/font&gt;</p>\n<h2 id=\"行锁案例介绍\"><a class=\"anchor\" href=\"#行锁案例介绍\">#</a> 行锁 (案例介绍)</h2>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<blockquote>\n<p>​\t偏向 InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p>\n<p>​\tInnoDB 与 MyISAM 的最大不同有两点:</p>\n<p>​\t一、是支持事务（TRANSACTION);</p>\n<p>​\t二、是采用了行级锁</p>\n</blockquote>\n<h3 id=\"事务知识复习\"><a class=\"anchor\" href=\"#事务知识复习\">#</a> 事务知识复习</h3>\n<h4 id=\"四大特性\"><a class=\"anchor\" href=\"#四大特性\">#</a> 四大特性</h4>\n<p>事务是由一组 SQL 语句组成的逻辑处理单元，事务具有以下 4 个属性，通常简称为事务的 ACID 属性。</p>\n<ul>\n<li>\n<p>&lt;font color=red&gt; 原子性（Atomicity)&lt;/font&gt;﹔事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。</p>\n</li>\n<li>\n<p>&lt;font color=red&gt; 一致性（Consistent)&lt;/font&gt;: 在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性；事务结束时，所有的内部数据结构（如 B 树索引或双向链表）也都必须是正确的。</p>\n</li>\n<li>\n<p>&lt;font color=red&gt; 隔离性（lsolation)&lt;/font&gt;: 数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。</p>\n</li>\n<li>\n<p>&lt;font color=red&gt; 持久性（Durable)&lt;/font&gt;: 事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。</p>\n</li>\n</ul>\n<h4 id=\"并发带来的问题\"><a class=\"anchor\" href=\"#并发带来的问题\">#</a> 并发带来的问题</h4>\n<p>更新丢失 (Lost Update)</p>\n<blockquote>\n<p>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题――最后的更新覆盖了由其他事务所做的更新。<br />\n例如，两个程序员修改同一 java 文件。每程序员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改。<br />\n如果在一个程序员完成并提交事务之前，另一个程序员不能访问同一文件，则可避免此问题。</p>\n</blockquote>\n<p>脏读 (Dirty Reads)</p>\n<blockquote>\n<p>简单来说就是 读了未提交的，此时事务级别在最低，改善方法就是提高级别即可</p>\n</blockquote>\n<p>不可重复读 (Non-Repeatable Reads)</p>\n<blockquote>\n<p>简单来说就是在一个事务中多次读取某些数据，数据的条数没有变，但是数据却变了。</p>\n<p>重在修改</p>\n</blockquote>\n<p>幻读 (Phantom Reads)</p>\n<blockquote>\n<p>简单来说就是在一个事务中多次读取某些数据，数据的条数变了</p>\n<p>重在添加、删除</p>\n</blockquote>\n<h4 id=\"事务的隔离级别\"><a class=\"anchor\" href=\"#事务的隔离级别\">#</a> 事务的隔离级别</h4>\n<p><img data-src=\"/2022/10/07/MySQL_Super/image-20220819211429410-1660960902143.png\" class=\"\"></p>\n<h4 id=\"面试题-2\"><a class=\"anchor\" href=\"#面试题-2\">#</a> 面试题</h4>\n<p>不可重复读和幻读的区别？如何解决？</p>\n<blockquote>\n<p>​\t他们都是在一个事务中对某些数据进行多次读取，但是不可重复读的问题重在多次读取的数据不都一致；幻读重在多次读取确得到不一样数据量的数据</p>\n<p>解决办法：</p>\n<p>​\t重复读加行数</p>\n<p>​\t幻读加表锁</p>\n</blockquote>\n<h3 id=\"案例分析\"><a class=\"anchor\" href=\"#案例分析\">#</a> 案例分析</h3>\n<p>准备</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> test_innodb_lock <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">engine</span><span class=\"token operator\">=</span><span class=\"token keyword\">innodb</span><span class=\"token punctuation\">;</span>I</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">'6000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token string\">'7000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'80O0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">'9000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> test_innodb_a_ind  <span class=\"token keyword\">on</span> test_innodb_lock<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> test_innodb_b_ind  <span class=\"token keyword\">on</span> test_innodb_lock<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">-- 打开两个会话 并且都关闭自动提交</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">set</span> autocommit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"行锁演示\"><a class=\"anchor\" href=\"#行锁演示\">#</a> 行锁演示</h4>\n<p>&lt;table  border=&quot;1px solid red;&quot; &gt;<br />\n&lt;tr &gt;<br />\n&lt;th&gt;Session 1&lt;/th&gt;<br />\n&lt;th&gt;Session 2&lt;/th&gt;<br />\n&lt;th&gt;explain  &lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th style=&quot;text-align:center; &quot; colspan='3'&gt;case 1&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzM1MzcyMTIucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819233537212.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 关闭 Session 1 的自动提交<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzA5Mzc4NzIucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819230937872.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;p&gt;<br />\n 关闭 Session 2 的自动提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 目的是：模拟高并发的情况下事务的处理情况，就好比一个 SQL 在修改但是没又被提交<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 在 Innodb 引擎作用下默认行锁，可以自动锁住我们当行数据保证数据的准确性<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot; style=&quot;text-align:center;&quot;  &gt;case 2&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzQ1MjE2MzAucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819234521630.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 修改 a=4 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzM4MDc5NzkucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819233807979.png</span> &quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 无法查询到原有数据<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p&gt;<br />\n&lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot;  style=&quot;text-align:center;&quot; &gt;case 3&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzQ4MjQ0NTkucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819234824459.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 提交事务<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzQ4MDM3NDIucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819234803742.png</span> &quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 提交事务 ()<br />\n&lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;&gt;<br />\nSession 2 这里也可以当做是清除之前数据库累计事务<br />\n &lt;/p&gt;<br />\n&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 如果不提交，我们的 Session 2 还是原来的数据<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot; style=&quot;text-align:center;&quot; &gt;case 4&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzUyMDU4NzEucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235205871.png</span> &quot;/&gt;<br />\n&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 修改 a=4 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzUxMzI3MTYucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235132716.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 修改 a=9 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 两个 Session 操作不同的数据，互补影响，充分的体现了行锁的作用<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot; style=&quot;text-align:center;&quot; &gt;case 5&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MjAwOTM1NTIzMDMucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820093552303.png</span> &quot;/&gt;<br />\n&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 修改 a=1 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MjAwOTM2MTQ2NTMucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820093614653.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 修改 a=1 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 两个 Session 操作相同的数据，互相影响<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession2 在 Session1 没有提交之前，直接处于阻塞状态<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot; style=&quot;text-align:center;&quot; &gt;case 5&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzUyMDU4NzEucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235205871.png</span> &quot;/&gt;<br />\n&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 修改 a=4 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MTkyMzUxMzI3MTYucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235132716.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 修改 a=9 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 两个 Session 操作不同的数据，互补影响，充分的体现了行锁的作用<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/table&gt;</p>\n<h4 id=\"索引失效导致行锁变成表锁\"><a class=\"anchor\" href=\"#索引失效导致行锁变成表锁\">#</a> 索引失效导致行锁变成表锁</h4>\n<p>&lt;table  border=&quot;1px solid red;&quot; &gt;<br />\n&lt;tr &gt;<br />\n&lt;th&gt;Session 1&lt;/th&gt;<br />\n&lt;th&gt;Session 2&lt;/th&gt;<br />\n&lt;th&gt;explain  &lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MjAwMDA3MjQ0MTgucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000724418.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MjAwMDA4MTY5MjYucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000816926.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 我们在最开始准备阶段，就创建了关于 a ,b 的索引 (单索引)<br />\n&lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 我们之前说过，在 where 上不要进行隐式转换，这样会导致索引失效<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 从这个例子中我们左边进行了隐式操作，导致索引失效，第二个 Session<br />\n&lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 直接进入到了阻塞状态，&lt;a font=&quot;color:'red'&quot;&gt; 表明了我们的索引失效让行锁变成了表锁 &lt;/a&gt;<br />\n&lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MjAwMDA4MDEwNzUucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000801075.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vempqMzM2Ni96amozMzY2L3Jhdy9tYXN0ZXIvZG9jcy9pbWdzL0RhdGFCYXNlX015c3FsU3VwZXIvaW1hZ2UtMjAyMjA4MjAwMDA4Mzc3NzUucG5n\">https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000837775.png</span>&quot;/&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 上面的例子中直至 Session 1 回话结束，这时候释放了锁<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 我们的 Session 2 才接受到了锁，进入了表<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 这个例子充分的表明了，我们在操作中一定要注意索引失效的问题<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 他有可能会导致我们效率更低<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/table&gt;</p>\n<h4 id=\"间隙锁的危害\"><a class=\"anchor\" href=\"#间隙锁的危害\">#</a> 间隙锁的危害</h4>\n<p>【概念】</p>\n<p>​\t当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB 会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并木存在的记录，叫做 “间隙（GAP)”，</p>\n<p>InnoDB 也会对这个 “间隙” 加锁，这种锁机制就是所谓的间隙锁（Next-Key 锁）。</p>\n<p>【危害】<br />\n因为 Query 执行过程中通过过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，<br />\n而造成在锁定的时候无<br />\n法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- session 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">update</span> t1 <span class=\"token keyword\">set</span> b<span class=\"token operator\">=</span><span class=\"token string\">'12312'</span> <span class=\"token keyword\">where</span> a<span class=\"token operator\">></span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> a<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- session 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t1 <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'asda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/MySQL_Super/image-20220820001444127-1660960902143.png\" class=\"\"></p>\n<p>明显的看到在 Session 1 执行结束之后，执行 Session 2 即使他们操作的不是同一行也会因为间隙锁的缘故锁定这一行，即使不存在也是如此，直到 commit 之后 Session 2 才反应</p>\n<h4 id=\"如何锁定一行\"><a class=\"anchor\" href=\"#如何锁定一行\">#</a> 如何锁定一行</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>select xoo.... for update 锁定某一行后，其它的操作会械阻塞，直到锁定行的会话提交 commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">begin</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> test_innodb_lock <span class=\"token keyword\">where</span> a <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">commit</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"案例结论\"><a class=\"anchor\" href=\"#案例结论\">#</a> 案例结论</h3>\n<p>​\tInnodb 存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于 MyISAM 的表级锁定的。当系统并发量较高的时候，Innodb 的整体性能和 MyIlSAM 相比就会有比较明显的优势了。</p>\n<p>​\t但是，Innodb 的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让 Innodb 的整体性能表现不仅不能比 MyISAM 高，甚至可能会更差。(索引失效行锁变表锁)</p>\n<h3 id=\"如何分析行锁定\"><a class=\"anchor\" href=\"#如何分析行锁定\">#</a> 如何分析行锁定</h3>\n<p>通过检查 InnoDB_row_lock 状态变量来分析系统上的行锁的争夺情况</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'innodb_row_lock%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/MySQL_Super/image-20220820002244586-1660960902143.png\" class=\"\"></p>\n<p>对各个状态量的说明如下:</p>\n<p>Innodb_row_lock_current_waits：当前正在等待锁定的数量；</p>\n<p>Innodb_row_lock_time：队系统启动到现在锁定总时间长度；</p>\n<p>Innodb_row_lock_time_avg：每次等待所花平均时间；</p>\n<p>Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；</p>\n<p>Innodb_row_lock_waits：系统启动后到现在总共等待的次数；</p>\n<p>对于这 5 个状态变量，比较重要的主要是</p>\n<p>&lt;font color=red&gt;Innodb_row_lock_time_avg（等待平均时长）&lt;/font&gt;，</p>\n<p>&lt;font color=red&gt;Innodb_row_lock_waits（等待总次数)&lt;/font&gt; ，</p>\n<p>&lt;font color=red&gt;lnnodb_row_lock_time（等待总时长）这三项 &lt;/font&gt;。</p>\n<p>尤其是当等踌次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待<br />\n然后根据分析结果着手指定优化计划。</p>\n<h3 id=\"优化意见\"><a class=\"anchor\" href=\"#优化意见\">#</a> 优化意见</h3>\n<ol>\n<li>\n<p>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。</p>\n</li>\n<li>\n<p>合理设计索引，尽量缩小锁的范围</p>\n</li>\n<li>\n<p>尽可能较少检索条件，避免间隙锁</p>\n</li>\n<li>\n<p>尽量控制事务大小，减少锁定资源量和时间长度</p>\n</li>\n<li>\n<p>尽可能低级别事务隔离</p>\n</li>\n</ol>\n<h2 id=\"页锁案例介绍\"><a class=\"anchor\" href=\"#页锁案例介绍\">#</a> 页锁 (案例介绍)</h2>\n<p>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>\n<h1 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h1>\n<p>&lt;div name=select_type&gt;<br />\n&lt;a style=&quot;color:red; &quot; &gt;Select_Type&lt;/a&gt;<br />\n&lt;/div&gt;</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">select_type 价值</th>\n<th style=\"text-align:center\">JSON 名称</th>\n<th style=\"text-align:center\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">SIMPLE</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">简单选择（不使用 UNION 或子查询）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PRIMARY</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">多层子查询中最外层选择</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UNION</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">联盟中的第二个或稍后的 SELECT 语句 &lt;br/&gt; 若第二个 SELECT 出现在 UNION 之后，则被标记为 UNION;&lt;br/&gt; 若 UNION 包含在 FROM 子句的子查询中，外层 SELECT 将被标记为：DERIVED</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DEPENDENT UNION</td>\n<td style=\"text-align:center\">dependent(true)</td>\n<td style=\"text-align:center\">UNION 中的第二个或更高版本的 SELECT 语句，依赖于外部查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UNION RESULT</td>\n<td style=\"text-align:center\">union_result</td>\n<td style=\"text-align:center\">从 UNION 表获取结果的 SELECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SUBQUERY</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">子查询中的第一个 SELECT&lt;br/&gt; 在 SELECT 或 WHERE 列表中包含了子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DEPENDENT SUBQUERY</td>\n<td style=\"text-align:center\">dependent(true)</td>\n<td style=\"text-align:center\">子查询中的第一个 SELECT, 依赖于外部查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DERIVED</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">派生表 &lt;br/&gt; 在 FROM 列表中包含的子查询被标记为 DERIVED (衍生) MySQL 会递归执行这些子查询，把结果放在临时表里。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MATERIALIZED</td>\n<td style=\"text-align:center\">material!zed_from_subquery</td>\n<td style=\"text-align:center\">实例化子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UNCACHEABLE SU3QUERY</td>\n<td style=\"text-align:center\">cacheable(false)</td>\n<td style=\"text-align:center\">无法缓存其结果并且必须为外部查询的每一行重新计算其结果的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UNCACHEABLE UNION</td>\n<td style=\"text-align:center\">cacheable(false)</td>\n<td style=\"text-align:center\">在属于不可缓存子查询的 UNION 中的第二个或更高版本选择（请参见 UNCACHEABLE SUBQUERY）</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "MySQL",
                "数据库"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Redis/",
            "url": "http://example.com/2022/10/07/Redis/",
            "title": "Redis基础",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"redis\"><a class=\"anchor\" href=\"#redis\">#</a> Redis</h1>\n<h3 id=\"一redis简介\"><a class=\"anchor\" href=\"#一redis简介\">#</a> 一.Redis 简介</h3>\n<h4 id=\"1nosql简介\"><a class=\"anchor\" href=\"#1nosql简介\">#</a> 1.NoSQL 简介</h4>\n<p>​\t目前市场主流数据存储都是使用关系型数据库。每次操作关系型数据库时都是 I/O 操作，I/O 操作是主要影响程序执行性能原因之一，连接数据库关闭数据库都是消耗性能的过程。尽量减少对数据库的操作，能够明显的提升程序运行效率。</p>\n<p>​\t针对上面的问题，市场上就出现了各种 NoSQL (Not Only SQL, 不仅仅可以使用关系型数据库) 数据库，它们的宣传口号：不是什么样的场景都必须使用关系型数据库，一些特定的场景使用 NoSQL 数据库更好。</p>\n<p>常见 NoSQL 数据库：</p>\n<p>​\tmemcached ：键值对，内存型数据库，所有数据都在内存中。</p>\n<p>​\tRedis: 和 Memcached 类似，还具备持久化能力。</p>\n<p>​\tHBase：以列作为存储。</p>\n<p>​\tMongoDB：以 Document 做存储。</p>\n<h4 id=\"2redis简介\"><a class=\"anchor\" href=\"#2redis简介\">#</a> 2.<strong>Redis 简介</strong></h4>\n<p>​\tRedis 是以 Key-Value 形式进行存储的 NoSQL 数据库。</p>\n<p>​\tRedis 是使用 C 语言进行编写的。</p>\n<p>​\t平时操作的数据都在内存中，效率特高，读的效率 110000/s，写 81000/s，所以多把 Redis 当做缓存工具使用。</p>\n<p>​\tRedis 以 solt（槽）作为数据存储单元，每个槽中可以存储 N 多个键值对。Redis 中固定具有 16384。理论上可以实现一个槽是一个 Redis。每个向 Redis 存储数据的 key 都会进行 crc16 算法得出一个值后对 16384 取余就是这个 key 存放的 solt 位置。</p>\n<p>​\t同时通过 Redis Sentinel 提供高可用，通过 Redis Cluster 提供自动分区。</p>\n<h3 id=\"二-redis单机版安装\"><a class=\"anchor\" href=\"#二-redis单机版安装\">#</a> 二. Redis 单机版安装</h3>\n<p>​\t1. 安装依赖 C 语言依赖</p>\n<p>​\tredis 使用 C 语言编写，所以需要安装 C 语言库</p>\n<pre><code># yum install -y gcc-c++ automake autoconf libtool make tcl \n</code></pre>\n<p>​</p>\n<p>​\t2. 上传并解压</p>\n<p>​\t把 redis-5.0.5.tar.gz 上传到 /usr/local/tmp 中</p>\n<p>​\t解压文件</p>\n<pre><code># cd /usr/local/tmp\n\n# tar zxf redis-5.0.5.tar.gz\n</code></pre>\n<p>​\t3. 编译并安装</p>\n<p>​\t进入解压文件夹</p>\n<pre><code># cd /usr/local/tmp/redis-5.0.5/\n</code></pre>\n<p>​\t编译</p>\n<pre><code># make\n</code></pre>\n<p>​\t安装</p>\n<pre><code># make install PREFIX=/usr/local/redis\n</code></pre>\n<p>​\t4. 开启守护进程</p>\n<p>​\t复制 cd /usr/local/tmp/redis-5.0.5 / 中 redis.conf 配置文件</p>\n<pre><code># cp redis.conf /usr/local/redis/bin/\n</code></pre>\n<p>​\t修改配置文件</p>\n<pre><code># cd /usr/local/redis/bin/\n\n# vim redis.conf\n</code></pre>\n<p>​\t把 daemonize 的值由 no 修改为 yes</p>\n<p><img data-src=\"/2022/10/07/Redis/Redis-01.jpg\" class=\"\"></p>\n<p>​\t5. 修改外部访问</p>\n<p>​\t在 redis5 中需要修改配置文件 redis.conf 允许外部访问。需要修改两处。</p>\n<p>​\t注释掉下面</p>\n<p>​\tbind 127.0.0.1</p>\n<pre><code>#bind 127.0.0.1\n</code></pre>\n<p>​\tprotected-mode yes 改成 no</p>\n<p><img data-src=\"/2022/10/07/Redis/Redis-02.jpg\" class=\"\"></p>\n<p>​\t6. 启动并测试</p>\n<p>​\t启动 redis</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./redis-server redis.conf</pre></td></tr></table></figure><p>​\t重启 redis</p>\n<pre><code>./redis-cli shutdown\n./redis-server redis.conf\n</code></pre>\n<p>​\t启动客户端工具</p>\n<p>​\t在 redis5 中客户端工具对命令会有提供功能。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./redis-cli</pre></td></tr></table></figure><h3 id=\"二-docker安装redis\"><a class=\"anchor\" href=\"#二-docker安装redis\">#</a> 二.、docker 安装 Redis</h3>\n<p>1、拉取镜像文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull redis<span class=\"token punctuation\">[</span>:<span class=\"token punctuation\">(</span>版本号<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>2、去 gitee 库中下载 redis 配置文件（docker 不自带配置文件）【也可不进行此步骤】</p>\n<p><strong>建议看完，先别操作，再看三，看完三之后再决定如何操作</strong></p>\n<p>然后按照文章内容进行，忽略下载。</p>\n<p>文章地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yMDMyNzQuaHRt\">https://www.jb51.net/article/203274.htm</span></p>\n<p>、</p>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645177895314.png\" alt=\"1645177895314\" /></p>\n<p>3、创建一个 redis 服务容器</p>\n<p><strong>第二步进行了的</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span>:6379 <span class=\"token parameter variable\">--name</span> myredis <span class=\"token parameter variable\">-v</span> /usr/local/docker/redis.conf:/etc/redis/redis.conf <span class=\"token parameter variable\">-v</span> /usr/local/docker/data:/data <span class=\"token parameter variable\">-d</span> redis redis-server /etc/redis/redis.conf <span class=\"token parameter variable\">--appendonly</span> <span class=\"token function\">yes</span></pre></td></tr></table></figure><p><strong>第二步没有进行的</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span>:6379 <span class=\"token parameter variable\">--name</span> myredis <span class=\"token parameter variable\">-v</span> /root/myredis/data:/data <span class=\"token parameter variable\">-v</span> /root/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf <span class=\"token parameter variable\">-d</span> redis redis-server /usr/local/etc/redis/redis.conf <span class=\"token parameter variable\">--appendonly</span> <span class=\"token function\">yes</span></pre></td></tr></table></figure><p><strong>区别：</strong></p>\n<p>​\t其实也没有什么区别，只是映射的文件不同，也可以将第二步的文件直接创建到第二种创建服务容器的配置文件地址中去，这样也可使用第二个创建方式。</p>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645177877202.png\" alt=\"1645177877202\" /></p>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645177918077.png\" alt=\"1645177918077\" /></p>\n<h3 id=\"三redis常用的五大类型\"><a class=\"anchor\" href=\"#三redis常用的五大类型\">#</a> 三.Redis 常用的五大类型</h3>\n<p>​\t Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储，它还支持数据的备份，即 master-slave 模式的数据备份，同样 Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</p>\n<p>​        Redis 支持的五大数据类型包括 String（字符串  用法： 键  值），Hash（哈希 类似 Java 中的 map  用法： 键  键值对），List（列表  用法：键 集合 不可以重复），Set（集合 用法：键 集合 可以重复），Zset（sorted set 有序集合    用法： 键  值 值）</p>\n<h4 id=\"string字符串\"><a class=\"anchor\" href=\"#string字符串\">#</a> String（字符串）</h4>\n<p>​\tstring 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象。string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p>\n<p>应用场景：</p>\n<p>​\tString 是最常用的一种数据类型，普通的 key/value 存储都可以归为此类，value 其实不仅是 String，</p>\n<p>也可以是数字：比如想知道什么时候封锁一个 IP 地址 (访问超过几次)。</p>\n<h4 id=\"hash哈希\"><a class=\"anchor\" href=\"#hash哈希\">#</a> Hash（哈希）</h4>\n<p>​\tRedis hash 是一个键值 (key=&gt;value) 对集合。</p>\n<p>​\tRedis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\n<p>​\t使用场景：存储、读取、修改用户属性</p>\n<p>​\t我们简单举个实例来描述下 Hash 的应用场景，比如我们要存储一个用户信息对象数据，包含以下信息：    用户 ID，为查找的 key，</p>\n<p>​    \t存储的 value 用户对象包含姓名 name，年龄 age，生日 birthday 等信息，  如果用普通的 key/value 结构来存储，主要有以下 2 种存储方式：</p>\n<p>​    \t第一种方式将用户 ID 作为查找 key, 把其他信息封装成一个对象以序列化的方式存储，</p>\n<p>​           如：set u001 &quot;李三，18,20010101&quot;</p>\n<p>​     \t这种方式的缺点是，增加了序列化 / 反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入 CAS 等复杂问题。</p>\n<p>​     \t第二种方法是这个用户信息对象有多少成员就存成多少个 key-value 对儿，用用户 ID + 对应属性的名称作为唯一标识来取得对应属性的值，</p>\n<p>​       \t如：mset user:001:name &quot;李三&quot;user:001:age18 user:001:birthday &quot;20010101&quot;  虽然省去了序列化开销和并发问题，但是用户 ID 为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。</p>\n<p>​    \t那么 Redis 提供的 Hash 很好的解决了这个问题。</p>\n<h4 id=\"list列表\"><a class=\"anchor\" href=\"#list列表\">#</a> List（列表）</h4>\n<p>​\tRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p>应用场景：</p>\n<pre><code> Redis list的应用场景非常多，也是Redis最重要的数据结构之一。  \n</code></pre>\n<p>​    \t我们可以轻松地实现最新消息排行等功能。</p>\n<pre><code> Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。  \n</code></pre>\n<h4 id=\"set集合\"><a class=\"anchor\" href=\"#set集合\">#</a> Set（集合）</h4>\n<p>​\tRedis 的 Set 是 string 类型的无序集合。</p>\n<p>​\t使用场景：1. 共同好友、二度好友</p>\n<p>​\t\t\t   2. 利用唯一性，可以统计访问网站的所有独立 IP</p>\n<pre><code> Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。  \n\n 比如在微博应用中，每个人的好友存在一个集合（set）中，这样求两个人的共同好友的操作，可能就只需要用求交集命令即可。  \n</code></pre>\n<p>​    \tRedis 还为集合提供了求交集、并集、差集等操作，可以非常方便的实</p>\n<pre><code>实现方式：  \n</code></pre>\n<p>​    \tset 的内部实现是一个 value 永远为 null 的 HashMap，实际就是通过计算 hash 的方式来快速排重的，这也是 set 能提供判断一个成员是否在集合内的原因。</p>\n<h4 id=\"zsetsorted-set有序集合\"><a class=\"anchor\" href=\"#zsetsorted-set有序集合\">#</a> zset (sorted set：有序集合)</h4>\n<pre><code>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。\n</code></pre>\n<p>使用场景：1. 带有权重的元素，比如一个游戏的用户得分排行榜</p>\n<p>​\t\t   2. 比较复杂的数据结构，一般用到的场景不算太多</p>\n<h3 id=\"四-redis常用命令\"><a class=\"anchor\" href=\"#四-redis常用命令\">#</a> 四. Redis 常用命令</h3>\n<p>Redis 命令相关手册有很多，下面为其中比较好用的两个</p>\n<p>1.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVkaXMubmV0LmNuL29yZGVyLw==\">https://www.redis.net.cn/order/</span></p>\n<p>2.<span class=\"exturl\" data-url=\"aHR0cDovL2RvYy5yZWRpc2ZhbnMuY29tL3RleHQtaW4=\">http://doc.redisfans.com/text-in</span></p>\n<h4 id=\"1-key操作\"><a class=\"anchor\" href=\"#1-key操作\">#</a> 1. Key 操作</h4>\n<h5 id=\"11-exists\"><a class=\"anchor\" href=\"#11-exists\">#</a> 1.1  exists</h5>\n<p>​\t判断 key 是否存在。</p>\n<p>​\t语法：exists key 名称</p>\n<p>​\t返回值：存在返回数字，不存在返回 0</p>\n<h5 id=\"12-expire\"><a class=\"anchor\" href=\"#12-expire\">#</a> 1.2 expire</h5>\n<p>​\t设置 key 的过期时间，单位秒</p>\n<p>​\t语法：expire key 秒数</p>\n<p>​\t返回值：成功返回 1，失败返回 0</p>\n<h5 id=\"13-ttl\"><a class=\"anchor\" href=\"#13-ttl\">#</a> 1.3 ttl</h5>\n<p>​\t查看 key 的剩余过期时间</p>\n<p>​\t语法：ttl key</p>\n<p>​\t返回值：返回剩余时间，如果不过期返回 - 1</p>\n<h5 id=\"14-del\"><a class=\"anchor\" href=\"#14-del\">#</a> 1.4 del</h5>\n<p>​\t根据 key 删除键值对。</p>\n<p>​\t语法：del key</p>\n<p>​\t返回值：被删除 key 的数量</p>\n<h4 id=\"2-字符串值string\"><a class=\"anchor\" href=\"#2-字符串值string\">#</a> 2. <strong>字符串值 (String)</strong></h4>\n<h5 id=\"21-set\"><a class=\"anchor\" href=\"#21-set\">#</a> 2.1 <strong>set</strong></h5>\n<p>​\t设置指定 key 的值</p>\n<p>​\t语法：set key value</p>\n<p>​\t返回值：成功 OK</p>\n<h5 id=\"22-get\"><a class=\"anchor\" href=\"#22-get\">#</a> 2.2 <strong>get</strong></h5>\n<p>​\t获取指定 key 的值</p>\n<p>​\t语法：get key</p>\n<p>​\t返回值：key 的值。不存在返回 nil</p>\n<h5 id=\"23-setnx\"><a class=\"anchor\" href=\"#23-setnx\">#</a> 2.3 <strong>setnx</strong></h5>\n<p>​\t当且仅当 key 不存在时才新增。</p>\n<p>​\t语法：setnx key value</p>\n<p>​\t返回值：不存在时返回 1，存在返回 0</p>\n<h5 id=\"24-setex\"><a class=\"anchor\" href=\"#24-setex\">#</a> 2.4 <strong>setex</strong></h5>\n<p>​\t设置 key 的存活时间，无论是否存在指定 key 都能新增，如果存在 key 覆盖旧值。同时必须指定过期时间。</p>\n<p>​\t语法：setex key seconds value</p>\n<p>​\t返回值：OK</p>\n<h4 id=\"3哈希表hash\"><a class=\"anchor\" href=\"#3哈希表hash\">#</a> 3.<strong> 哈希表 (Hash)</strong></h4>\n<p>​\tHash 类型的值中包含多组 field value。</p>\n<p><img data-src=\"/2022/10/07/Redis/Redis-03.jpg\" class=\"\"></p>\n<h5 id=\"31-hset\"><a class=\"anchor\" href=\"#31-hset\">#</a> 3.1 <strong>hset</strong></h5>\n<p>​\t给 key 中 field 设置值。</p>\n<p>​\t语法：hset key field value</p>\n<p>​\t返回值：成功 1，失败 0</p>\n<h5 id=\"32-hget\"><a class=\"anchor\" href=\"#32-hget\">#</a> 3.2 <strong>hget</strong></h5>\n<p>​\t获取 key 中某个 field 的值</p>\n<p>​\t语法：hget key field</p>\n<p>​\t返回值：返回 field 的内容</p>\n<h5 id=\"33-hmset\"><a class=\"anchor\" href=\"#33-hmset\">#</a> 3.3 <strong>hmset</strong></h5>\n<p>​\t给 key 中多个 filed 设置值</p>\n<p>​\t语法：hmset key field value field value</p>\n<p>​\t返回值：成功 OK</p>\n<h5 id=\"34-hmget\"><a class=\"anchor\" href=\"#34-hmget\">#</a> 3.4 <strong>hmget</strong></h5>\n<p>​\t一次获取 key 中多个 field 的值</p>\n<p>​\t语法：hmget key field field</p>\n<p>​\t返回值：value 列表</p>\n<h5 id=\"35-hvals\"><a class=\"anchor\" href=\"#35-hvals\">#</a> 3.5 <strong>hvals</strong></h5>\n<p>​\t获取 key 中所有 field 的值</p>\n<p>​\t语法：hvals key</p>\n<p>​\t返回值：value 列表</p>\n<h5 id=\"36-hgetall\"><a class=\"anchor\" href=\"#36-hgetall\">#</a> 3.6 <strong>hgetall</strong></h5>\n<p>​\t获取所有 field 和 value</p>\n<p>​\t语法：hgetall key</p>\n<p>​\t返回值：field 和 value 交替显示列表</p>\n<h5 id=\"37-hdel\"><a class=\"anchor\" href=\"#37-hdel\">#</a> 3.7 <strong>hdel</strong></h5>\n<p>​\t删除 key 中任意个 field</p>\n<p>​\t语法：hdel key field field</p>\n<p>​\t返回值：成功删除 field 的数量</p>\n<h4 id=\"4-列表list\"><a class=\"anchor\" href=\"#4-列表list\">#</a> 4. <strong>列表（List）</strong></h4>\n<h5 id=\"41-rpush\"><a class=\"anchor\" href=\"#41-rpush\">#</a> 4.1 <strong>Rpush</strong></h5>\n<p>​\t向列表末尾中插入一个或多个值</p>\n<p>​\t语法；rpush key value value</p>\n<p>​\t返回值：列表长度</p>\n<h5 id=\"42-lrange\"><a class=\"anchor\" href=\"#42-lrange\">#</a> 4.2 <strong>lrange</strong></h5>\n<p>​\t返回列表中指定区间内的值。可以使用 - 1 代表列表末尾</p>\n<p>​\t语法：lrange list 0 -1</p>\n<p>​\t返回值：查询到的值</p>\n<h5 id=\"43-lpush\"><a class=\"anchor\" href=\"#43-lpush\">#</a> 4.3 <strong>lpush</strong></h5>\n<p>​\t将一个或多个值插入到列表前面</p>\n<p>​\t语法：lpush key value value</p>\n<p>​\t返回值：列表长度</p>\n<h5 id=\"44-llen\"><a class=\"anchor\" href=\"#44-llen\">#</a> 4.4 <strong>llen</strong></h5>\n<p>​\t获取列表长度</p>\n<p>​\t语法：llen key</p>\n<p>​\t返回值：列表长度</p>\n<h5 id=\"45-lrem\"><a class=\"anchor\" href=\"#45-lrem\">#</a> 4.5 <strong>lrem</strong></h5>\n<p>​\t删除列表中元素。count 为正数表示从左往右删除的数量。负数从右往左删除的数量。</p>\n<p>​\t语法：lrem key count value</p>\n<p>​\t返回值：删除数量。</p>\n<h4 id=\"5-集合set\"><a class=\"anchor\" href=\"#5-集合set\">#</a> 5 <strong>集合 (Set)</strong></h4>\n<p>​\tset 和 java 中集合一样。</p>\n<h5 id=\"51-sadd\"><a class=\"anchor\" href=\"#51-sadd\">#</a> 5.1 <strong>sadd</strong></h5>\n<p>​\t向集合中添加内容。不允许重复。</p>\n<p>​\t语法：sadd key value value value</p>\n<p>​\t返回值：集合长度</p>\n<h5 id=\"52-scard\"><a class=\"anchor\" href=\"#52-scard\">#</a> 5.2 <strong>scard</strong></h5>\n<p>​\t返回集合元素数量</p>\n<p>​\t语法：scard key</p>\n<p>​\t返回值：集合长度</p>\n<h5 id=\"53-smembers\"><a class=\"anchor\" href=\"#53-smembers\">#</a> 5.3 **smembers **</h5>\n<p>​\t查看集合中元素内容</p>\n<p>​\t语法：smembers key</p>\n<p>​\t返回值：集合中元素</p>\n<h4 id=\"6-有序集合sorted-set\"><a class=\"anchor\" href=\"#6-有序集合sorted-set\">#</a> 6 .<strong> 有序集合（Sorted Set）</strong></h4>\n<p>​\t有序集合中每个 value 都有一个分数（score），根据分数进行排序。</p>\n<h5 id=\"61-zadd\"><a class=\"anchor\" href=\"#61-zadd\">#</a> 6.1 <strong>zadd</strong></h5>\n<p>​\t向有序集合中添加数据</p>\n<p>​\t语法：zadd key score value score value</p>\n<p>​\t返回值：长度</p>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645195960858.png\" alt=\"1645195960858\" /></p>\n<h5 id=\"62-zrange\"><a class=\"anchor\" href=\"#62-zrange\">#</a> 6.2 <strong>zrange</strong></h5>\n<p>​\t返回区间内容想・，withscores 表示带有分数</p>\n<p>​\t语法：zrange key 区间 [withscores]</p>\n<p>​\t返回值：值列表</p>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645195940696.png\" alt=\"1645195940696\" /></p>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645195926902.png\" alt=\"1645195926902\" /></p>\n<h3 id=\"五-redis持久化策略\"><a class=\"anchor\" href=\"#五-redis持久化策略\">#</a> 五、 <strong>Redis 持久化策略</strong></h3>\n<p>​\tRedis 不仅仅是一个内存型数据库，还具备持久化能力。</p>\n<h4 id=\"1-rdb\"><a class=\"anchor\" href=\"#1-rdb\">#</a> 1. <strong>RDB</strong></h4>\n<p>​\trdb 模式是默认模式，可以在指定的时间间隔内生成数据快照（snapshot），默认保存到 dump.rdb 文件中。当 redis 重启后会自动加载 dump.rdb 文件中内容到内存中。</p>\n<p>​\t用户可以使用 SAVE（同步）或 BGSAVE（异步）手动保存数据。</p>\n<p>​\t可以设置服务器配置的 save 选项，让服务器每隔一段时间自动执行一次 BGSAVE 命令，可以通过 save 选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行 BGSAVE 命令。<br />\n　　\t例如：<br />\n　　\tsave 900 1<br />\n　　\tsave 300 10<br />\n　　\tsave 60 10000<br />\n　　那么只要满足以下三个条件中的任意一个，BGSAVE 命令就会被执行<br />\n　　服务器在 900 秒之内，对数据库进行了至少 1 次修改<br />\n　　服务器在 300 秒之内，对数据库进行了至少 10 次修改<br />\n　　服务器在 60 秒之内，对数据库进行了至少 10000 次修改</p>\n<h5 id=\"11-优点\"><a class=\"anchor\" href=\"#11-优点\">#</a> 1.1 <strong>优点</strong></h5>\n<p>​\trdb 文件是一个紧凑文件，直接使用 rdb 文件就可以还原数据。</p>\n<p>​\t数据保存会由一个子进程进行保存，不影响父进程。</p>\n<p>​\t恢复数据的效率要高于 aof</p>\n<h5 id=\"12-缺点\"><a class=\"anchor\" href=\"#12-缺点\">#</a> 1.2 <strong>缺点</strong></h5>\n<p>​\t每次保存点之间导致 redis 不可意料的关闭，可能会丢失数据。</p>\n<p>​\t由于每次保存数据都需要 fork () 子进程，在数据量比较大时可能会比较耗费性能。</p>\n<h4 id=\"2-aof\"><a class=\"anchor\" href=\"#2-aof\">#</a> 2 <strong>AOF</strong></h4>\n<p>​\tAOF 默认是关闭的，需要在配置文件中开启 AOF。Redis 支持 AOF 和 RDB 同时生效，如果同时存在，AOF 优先级高于 RDB（Redis 重新启动时会使用 AOF 进行数据恢复）</p>\n<p>​\t监听执行的命令，如果发现执行了修改数据的操作，同时直接同步到数据库文件中。</p>\n<h5 id=\"21-优点\"><a class=\"anchor\" href=\"#21-优点\">#</a> 2.1 <strong>优点</strong></h5>\n<p>​\t相对 RDB 数据更加安全。</p>\n<h5 id=\"22-缺点\"><a class=\"anchor\" href=\"#22-缺点\">#</a> 2.2 <strong>缺点</strong></h5>\n<p>​\t相同数据集 AOF 要大于 RDB。</p>\n<p>​\t相对 RDB 可能会慢一些。</p>\n<h5 id=\"23-开启办法\"><a class=\"anchor\" href=\"#23-开启办法\">#</a> 2.3 <strong>开启办法</strong></h5>\n<p>​\t修改 redis.conf 中</p>\n<pre><code># 默认no\nappendonly yes\n# aof文件名\nappendfilename &quot;appendonly.aof&quot;\n</code></pre>\n<h3 id=\"六-redis主从复制\"><a class=\"anchor\" href=\"#六-redis主从复制\">#</a> 六. <strong>Redis 主从复制</strong></h3>\n<p>​\tRedis 支持集群功能。为了保证单一节点可用性，redis 支持主从复制功能。每个节点有 N 个复制品（replica），其中一个复制品是主（master），另外 N-1 个复制品是从（Slave），也就是说 Redis 支持一主多从。</p>\n<p>​\t一个主可有多个从，而一个从又可以看成主，它还可以有多个从。</p>\n<p><img data-src=\"/2022/10/07/Redis/Redis-04.jpg\" class=\"\"></p>\n<h4 id=\"1-主从优点\"><a class=\"anchor\" href=\"#1-主从优点\">#</a> 1. <strong>主从优点</strong></h4>\n<p>​\t增加单一节点的健壮性，从而提升整个集群的稳定性。（Redis 中当超过 1/2 节点不可用时，整个集群不可用）</p>\n<p>​\t从节点可以对主节点数据备份，提升容灾能力。</p>\n<p>​\t读写分离。在 redis 主从中，主节点一般用作写（具备读的能力），从节点只能读，利用这个特性实现读写分离，写用主，读用从。</p>\n<h5 id=\"11-一主多从搭建\"><a class=\"anchor\" href=\"#11-一主多从搭建\">#</a> 1.1 <strong>一主多从搭建</strong></h5>\n<p>​\t在已经搭建的单机版 redis 基础上进行操作。</p>\n<p>​\t并且关闭 redis 单机版</p>\n<pre><code>./redis-cli shutdown\n</code></pre>\n<h5 id=\"12-新建目录\"><a class=\"anchor\" href=\"#12-新建目录\">#</a> 1.2 <strong>新建目录</strong></h5>\n<pre><code># mkdir /usr/local/replica\n</code></pre>\n<h5 id=\"13-复制目录\"><a class=\"anchor\" href=\"#13-复制目录\">#</a> 1.3 <strong>复制目录</strong></h5>\n<p>​\t把之前安装的 redis 单机版中 bin 目录复制三份，分别叫做：master、slave1、slave2</p>\n<pre><code># cp -r /usr/local/redis/bin /usr/local/replica/master\n# cp -r /usr/local/redis/bin /usr/local/replica/slave1\n# cp -r /usr/local/redis/bin /usr/local/replica/slave2\n</code></pre>\n<h5 id=\"14-修改从的配置文件\"><a class=\"anchor\" href=\"#14-修改从的配置文件\">#</a> 1.4 <strong>修改从的配置文件</strong></h5>\n<p>​\t修改 2 个从的 redis.conf，指定主节点 ip 和端口。并修改自身端口号防止和其他 redis 冲突。</p>\n<pre><code># vim /usr/local/replica/slave1/redis.conf\n</code></pre>\n<p>​\t指定主节点 ip 和端口</p>\n<pre><code>replicaof 192.168.93.10 6379\n</code></pre>\n<p>​\t修改自己端口</p>\n<pre><code>port 6380\n</code></pre>\n<pre><code># vim /usr/local/replica/slave2/redis.conf\n</code></pre>\n<p>​\t指定主节点 ip 和端口</p>\n<pre><code>replicaof 192.168.93.10 6379\n</code></pre>\n<p>​\t修改自己端口</p>\n<pre><code>port 6381\n</code></pre>\n<h5 id=\"15-启动三个redis实例\"><a class=\"anchor\" href=\"#15-启动三个redis实例\">#</a> 1.5 <strong>启动三个 redis 实例</strong></h5>\n<p>​\t注意：一定要关闭单机的 redis，否则端口冲突。</p>\n<pre><code># cd /usr/local/replica\n# vim startup.sh\n</code></pre>\n<p>​\t在文件中添加下面内容</p>\n<pre><code>cd /usr/local/replica/master/\n./redis-server redis.conf\n  cd /usr/local/replica/slave1\n./redis-server redis.conf\n  cd /usr/local/replica/slave2\n./redis-server redis.conf\n</code></pre>\n<pre><code>赋予权限\n</code></pre>\n<pre><code># chmod a+x startup.sh\n</code></pre>\n<p>​\t开启</p>\n<pre><code># ./startup.sh\n</code></pre>\n<h5 id=\"16-查看启动状态\"><a class=\"anchor\" href=\"#16-查看启动状态\">#</a> 1.6 <strong>查看启动状态</strong></h5>\n<pre><code># ps aux|grep redis\n</code></pre>\n<p><img data-src=\"/2022/10/07/Redis/Redis-05.jpg\" class=\"\"></p>\n<h5 id=\"17-测试\"><a class=\"anchor\" href=\"#17-测试\">#</a> 1.7 <strong>测试</strong> *</h5>\n<pre><code># cd /usr/local/replica/master/\n# ./redis-cli \n</code></pre>\n<p><img data-src=\"/2022/10/07/Redis/Redis-06.jpg\" class=\"\"></p>\n<p>​\t在客户端命令行模式下，添加一条数据：</p>\n<p><img data-src=\"/2022/10/07/Redis/Redis-07.jpg\" class=\"\"></p>\n<p>​\t进去 slave 查看数据是否同步。</p>\n<pre><code># cd /usr/local/replica/slave1\n# ./redis-cli -p 6380\n</code></pre>\n<p><img data-src=\"/2022/10/07/Redis/Redis-08.jpg\" class=\"\"></p>\n<h4 id=\"2-docker下操作\"><a class=\"anchor\" href=\"#2-docker下操作\">#</a> 2、docker 下操作</h4>\n<p>​\t可以自定义<strong> redis.conf</strong> 文件只写要修改的，不改的就别写，这里主要是要书写<strong>新的端口号</strong>以及<strong>父节点</strong>的<strong> ip 和端口</strong></p>\n<p>** 注意：** 所有修改必须在容器外，容器内修改无效，在退出重启的那一刻就已经还原了</p>\n<p>我们通常使用  CP 来修改</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span>  <span class=\"token function\">cp</span>  本机文件路径   容器id: 容器内文件路径</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#所有路径是所在文件夹路径，并不是文件的路径，简单来说就是写到文件夹所在路径即可，不需要指定特定文件</span></pre></td></tr></table></figure><h5 id=\"1-修改端口号\"><a class=\"anchor\" href=\"#1-修改端口号\">#</a> 1、修改端口号</h5>\n<p>同上</p>\n<h5 id=\"2-指定父节点\"><a class=\"anchor\" href=\"#2-指定父节点\">#</a> 2、指定父节点</h5>\n<p>同上</p>\n<h5 id=\"3-重启\"><a class=\"anchor\" href=\"#3-重启\">#</a> 3、重启</h5>\n<p><strong>（如果在启动前修改不需要，这里是指已经启动了的容器，在修改之后的操作）</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> restart 容器id</pre></td></tr></table></figure><h5 id=\"4-测试并查看\"><a class=\"anchor\" href=\"#4-测试并查看\">#</a> 4、测试并查看</h5>\n<p>・同上</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>role</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>或者</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>info replication</pre></td></tr></table></figure><h3 id=\"七-哨兵sentinel\"><a class=\"anchor\" href=\"#七-哨兵sentinel\">#</a> 七.  <strong>哨兵（Sentinel）</strong></h3>\n<p>​\t在 redis 主从默认是只有主具备写的能力，而从只能读。如果主宕机，整个节点不具备写能力。但是如果这是让一个从变成主，整个节点就可以继续工作。即使之前的主恢复过来也当做这个节点的从即可。</p>\n<p>​\tRedis 的哨兵就是帮助监控整个节点的，当节点主宕机等情况下，帮助重新选取主。</p>\n<p>​\tRedis 中哨兵支持单哨兵和多哨兵。单哨兵是只要这个哨兵发现 master 宕机了，就直接选取另一个 master。而多哨兵是根据我们设定，达到一定数量哨兵认为 master 宕机后才会进行重新选取主。我们以多哨兵演示。</p>\n<h4 id=\"1-没有哨兵下主从效果\"><a class=\"anchor\" href=\"#1-没有哨兵下主从效果\">#</a> 1. <strong>没有哨兵下主从效果</strong></h4>\n<p>​\t只要杀掉主，整个节点无法在写数据，从身份不会变化，主的信息还是以前的信息。</p>\n<p><img data-src=\"/2022/10/07/Redis/Redis-09.jpg\" class=\"\"></p>\n<h4 id=\"2搭建多哨兵\"><a class=\"anchor\" href=\"#2搭建多哨兵\">#</a> 2.<strong> 搭建多哨兵</strong></h4>\n<p>​\t前提：安装了单机的 redis</p>\n<h5 id=\"21-新建目录\"><a class=\"anchor\" href=\"#21-新建目录\">#</a> 2.1 <strong>新建目录</strong></h5>\n<pre><code># mkdir /usr/local/sentinel\n</code></pre>\n<h5 id=\"22-复制redis\"><a class=\"anchor\" href=\"#22-复制redis\">#</a> 2.2 <strong>复制 redis</strong></h5>\n<pre><code># cp -r /usr/local/redis/bin/* /usr/local/sentinel\n</code></pre>\n<h5 id=\"23-复制配置文件\"><a class=\"anchor\" href=\"#23-复制配置文件\">#</a> 2.3 <strong>复制配置文件</strong></h5>\n<p>​\t从 redis 解压目录中复制 sentinel 配置文件</p>\n<pre><code># cd /usr/local/tmp/redis-5.0.5/\n# cp sentinel.conf /usr/local/sentinel/\n</code></pre>\n<h5 id=\"24-修改配置文件\"><a class=\"anchor\" href=\"#24-修改配置文件\">#</a> 2.4 <strong>修改配置文件</strong></h5>\n<pre><code># cd /usr/local/sentinel\n# vim sentinel.conf\n\nport 26379\ndaemonize yes\n#这个提示里面的/var/log/redis/redis.log日志文件指的是容器中的文件，千万别理解为宿主机中的路径，如果你在宿主机创建此文件并授权，最后结果也是一样的，理解这一点很重要。\nlogfile “/usr/local/sentinel/26379.log”\n\nsentinel monitor mymaster 192.168.93.10 6379 2\n</code></pre>\n<p>​\t复制 sentinel.conf，命名为 sentinel-26380.conf</p>\n<pre><code># cp sentinel.conf sentinel-26380.conf\n# vim sentinel-26380.conf\n\nport 26380\ndaemonize yes\nlogfile “/usr/local/sentinel/26380.log”\nsentinel monitor mymaster 192.168.93.10 6379 2\n</code></pre>\n<p>复制 sentinel.conf，命名为 sentinel-26381.conf</p>\n<pre><code># cp sentinel.conf sentinel-26381.conf\n# vim sentinel-26381.conf\n\nport 26381\ndaemonize yes\nlogfile “/usr/local/sentinel/26381.log”\nsentinel monitor mymaster 192.168.93.10 6379 2\n</code></pre>\n<h5 id=\"25-启动主从\"><a class=\"anchor\" href=\"#25-启动主从\">#</a> 2.5 <strong>启动主从</strong></h5>\n<p>​\t如果已经启动状态，忽略下面命令。如果启动部分，全部 kill 后重新启动。</p>\n<p>​\t使用 kill 杀死全部 redis</p>\n<pre><code># ps aux|grep redis\n# kill -9 进程号\n</code></pre>\n<p>​\t启动 redis 主从</p>\n<pre><code># cd /usr/local/replica\n# ./startup.sh\n</code></pre>\n<h5 id=\"26-启动三个哨兵\"><a class=\"anchor\" href=\"#26-启动三个哨兵\">#</a> 2.6 <strong>启动三个哨兵</strong></h5>\n<pre><code># cd /usr/local/sentinel\n# ./redis-sentinel sentinel.conf\n# ./redis-sentinel sentinel-26380.conf\n# ./redis-sentinel sentinel-26381.conf\n</code></pre>\n<h5 id=\"27-查看日志\"><a class=\"anchor\" href=\"#27-查看日志\">#</a> 2.7 <strong>查看日志</strong></h5>\n<pre><code># cat 26379.log\n</code></pre>\n<h5 id=\"28-测试宕机\"><a class=\"anchor\" href=\"#28-测试宕机\">#</a> 2.8 <strong>测试宕机</strong></h5>\n<p>​\t查看 redis 进程号</p>\n<pre><code># ps aux|grep redis\n</code></pre>\n<p>​\t杀死主进程号</p>\n<pre><code># kill -9 进程号\n</code></pre>\n<p>​\t查看日志，短暂延迟后会发现，出现新的主。</p>\n<pre><code># cat 26379.log\n</code></pre>\n<h3 id=\"八-集群cluster-nt-have-doc\"><a class=\"anchor\" href=\"#八-集群cluster-nt-have-doc\">#</a> 八。集群 (Cluster)--nt have doc</h3>\n<p>​\t前提：已经安装好 redis 单机版。</p>\n<p>​\t当集群中超过或等于 1/2 节点不可用时，整个集群不可用。为了搭建稳定集群，都采用奇数节点。</p>\n<h4 id=\"1-复制redis配置文件\"><a class=\"anchor\" href=\"#1-复制redis配置文件\">#</a> 1 .<strong> 复制 redis 配置文件</strong></h4>\n<p>​\t从 /usr/local/redis/bin 下把 redis.conf 复制到当前目录中，命名为 redis-7001.conf</p>\n<pre><code># cp /usr/local/redis/bin/redis.conf /usr/local/redis/bin/redis-7001.conf\n</code></pre>\n<h4 id=\"2-修改redis-7001conf\"><a class=\"anchor\" href=\"#2-修改redis-7001conf\">#</a> 2. <strong>修改 redis-7001.conf</strong></h4>\n<pre><code># cd /usr/local/redis/bin\n# vim redis-7001.conf\n</code></pre>\n<p>​\t需要修改如下</p>\n<pre><code>port 7001\ncluster-enabled yes\ncluster-config-file nodes-7001.conf\ncluster-node-timeout 15000\n# appendonly yes 如果开启aof默认，需要修改为yes。如果使用rdb，此处不需要修改\ndaemonize yes\nprotected-mode no\npidfile /var/run/redis_7001.pid\n</code></pre>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<h4 id=\"3-复制配置文件并修改内容\"><a class=\"anchor\" href=\"#3-复制配置文件并修改内容\">#</a> 3 .<strong> 复制配置文件，并修改内容</strong></h4>\n<p>​\t把 redis-7001.conf 复制 5 份，分别叫做 redis-7002.conf、redis-7003.conf、redis-7004.conf、redis-7005.conf、redis-7006.conf</p>\n<pre><code># cp redis-7001.conf redis-7002.conf\n# cp redis-7001.conf redis-7003.conf\n# cp redis-7001.conf redis-7004.conf\n# cp redis-7001.conf redis-7005.conf\n# cp redis-7001.conf redis-7006.conf\n</code></pre>\n<pre><code>新复制的5个配置文件都需要需改三处。\n</code></pre>\n<p>​\t例如 nodes-7002.conf 中需要把所有 7001 都换成 7002。</p>\n<p>​\t可以使用 :% s/7001/7002/g 进行全局修改。</p>\n<pre><code>port 7002\ncluster-config-file nodes-7002.conf\npidfile /var/run/redis_7002.pid\n</code></pre>\n<h4 id=\"4-启动6个redis\"><a class=\"anchor\" href=\"#4-启动6个redis\">#</a> 4 .<strong> 启动 6 个 redis</strong></h4>\n<p>​\t可以使用 redis-server 结合 6 个配置文件进行启动 6 个实例。</p>\n<p>​\t执行之前一定要先删除 dump.rdb</p>\n<pre><code># rm -f dump.rdb\n# vim startup.sh\n\n./redis-server redis-7001.conf\n./redis-server redis-7002.conf\n./redis-server redis-7003.conf\n./redis-server redis-7004.conf\n./redis-server redis-7005.conf\n./redis-server redis-7006.conf\n\n\n# chmod a+x startup.sh\n# ./startup.sh\n</code></pre>\n<h4 id=\"5-查看启动状态\"><a class=\"anchor\" href=\"#5-查看启动状态\">#</a> 5. <strong>查看启动状态</strong></h4>\n<p><img data-src=\"/2022/10/07/Redis/Redis-10.jpg\" class=\"\"></p>\n<h4 id=\"6-建立集群\"><a class=\"anchor\" href=\"#6-建立集群\">#</a> 6. <strong>建立集群</strong></h4>\n<p>​\t在 redis3 的时候需要借助 ruby 脚本实现集群。在 redis5 中可以使用自带的 redis-cli 实现集群功能，比 redis3 的时候更加方便了。</p>\n<p>​\t建议配置静态 ip，ip 改变集群失效</p>\n<pre><code>./redis-cli --cluster create 192.168.93.10:7001 192.168.93.10:7002 192.168.93.10:7003 192.168.93.10:7004 192.168.93.10:7005 192.168.93.10:7006 --cluster-replicas 1\n</code></pre>\n<h4 id=\"7-测试\"><a class=\"anchor\" href=\"#7-测试\">#</a> 7. <strong>测试</strong></h4>\n<p>​\t集群测试时，千万不要忘记最后一个 - c 参数。</p>\n<pre><code># ./redis-cli -p 7001 -c\n# set age 18\n</code></pre>\n<h4 id=\"8-编写关闭脚本\"><a class=\"anchor\" href=\"#8-编写关闭脚本\">#</a> 8 .<strong> 编写关闭脚本</strong></h4>\n<pre><code># vim stop.sh\n# chmod a+x stop.sh\n\n./redis-cli -p 7001 shutdown\n./redis-cli -p 7002 shutdown\n./redis-cli -p 7003 shutdown\n./redis-cli -p 7004 shutdown\n./redis-cli -p 7005 shutdown\n./redis-cli -p 7006 shutdown\n</code></pre>\n<h3 id=\"八-集群cluster-pathdocker\"><a class=\"anchor\" href=\"#八-集群cluster-pathdocker\">#</a> 八。集群 (Cluster)-PATH:docker</h3>\n<p>​\t<strong>注：<strong>1. 如果是配置修改之前</strong>已经创建过的集群时</strong>，要先进行第七步操作。</p>\n<p>​\t\t\t2. 要是想重启集群可以省略第一步，但是得<strong>先删除已经创建的容器</strong>，重新进行 2、3（合并也行）</p>\n<h4 id=\"0-创建网络\"><a class=\"anchor\" href=\"#0-创建网络\">#</a> 0、创建网络</h4>\n<p>** 目的：** 让宿主机可以访问到自身</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> network create net-redis <span class=\"token parameter variable\">--subnet</span> <span class=\"token number\">172.38</span>.0.0/16</pre></td></tr></table></figure><p>补充：关于虚拟机的三种网路连接方式区别</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlmZW5nbWlhb3podWFuL2FydGljbGUvZGV0YWlscy83OTg4NzY5Mj9zcG09MTAwMS4yMTAxLjMwMDEuNjY2MS4xJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnRfdDAubm9uZS10YXNrLWJsb2ctMg==\">http://blog.csdn.net/bifengmiaozhuan/article/details/79887692?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2</span><sub>default</sub>CTRLIST<sub>Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2</sub>default<sub>CTRLIST</sub>Rate-1.pc_relevant_default&amp;utm_relevant_index=1</p>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645532994890.png\" alt=\"1645532994890\" /></p>\n<h4 id=\"1-创建并修改配置文件\"><a class=\"anchor\" href=\"#1-创建并修改配置文件\">#</a> 1、创建并修改配置文件</h4>\n<p><strong>注：</strong></p>\n<pre><code>In certain deployments, Redis Cluster nodes address discovery fails, because addresses are NAT-ted or because ports are forwarded (the typical case is Docker and other containers).\n\n在某些部署中，Redis群集节点地址发现失败，因为地址是NAT，或者端口是转发的（典型情况是Docker和其他容器）。\n\nIn order to make Redis Cluster working in such environments, a static configuration where each node knows its public address is needed. The following two options are used for this scope, and are:\n\n为了让Redis集群在这样的环境中工作，需要一种静态配置，其中每个节点都知道自己的公共地址。以下两个选项用于此范围，分别是：\n\ncluster-announce-ip\n\ncluster-announce-port\n---------------------------------------------------------------------------------------\n你的docker内网是172，你宿主的IP是192网段\n\n根据redis的配置文件中的解释\n\n要在你的配置文件上加上上面的2个配置\n</code></pre>\n<p>** 方法一：** 参考上面的方法一样行。</p>\n<p>** 方法二：** 使用脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#cat &lt;&lt;EOF EOF 在这里没有特殊的含义，你可以使用 FOE 或 000 等；</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#表示以 cat &lt;&lt;EOF 开始输入以 EOF 结束结束输入</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#cat > 创建文件，并把标准输入输出到后面的 filename 文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># * cluster-announce-ip\t\t\t\t\t192.168.1.195\t#* 群集 ip</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># * cluster-announce-port\t\t\t\t700$&#123;port&#125;\t\t#* 群集总线端口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># * cluster-announce-bus-port#* 群集 ip    1700$&#123;port&#125;\t   #* 群集公布端口</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 集群 ip 是固定 + 10000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 可以使用 :  % s/7001/7002/g     进行全局修改。 --- 将全局的 7001 修改成 7002</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">port</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">seq</span> <span class=\"token number\">1</span> <span class=\"token number\">6</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">\\</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">mkdir</span>  <span class=\"token parameter variable\">-p</span>  /root/myredis/conf700<span class=\"token variable\">$&#123;port&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">touch</span>  /root/myredis/conf700<span class=\"token variable\">$&#123;port&#125;</span>/redis.conf</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">TTT<span class=\"token bash punctuation\"> <span class=\"token operator\">></span> /root/myredis/conf700<span class=\"token variable\">$&#123;port&#125;</span>/redis.conf port <span class=\"token number\">6379</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>bind 0.0.0.0</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>port 700<span class=\"token variable\">$&#123;port&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>cluster-enabled yes</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>cluster-config-file nodes-700<span class=\"token variable\">$&#123;port&#125;</span>.conf</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>cluster-node-timeout 15000</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>protected-mode no</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>pidfile /var/run/redis_ 700<span class=\"token variable\">$&#123;port&#125;</span>.pid</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>cluster-announce-ip  192.168.1.195 </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>cluster-announce-port  700$&#123;port) </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>cluster-announce-bus-port 1700$&#123;port) </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>appendonly yes </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>TTT</span> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h4 id=\"2-创建容器\"><a class=\"anchor\" href=\"#2-创建容器\">#</a> 2、创建容器</h4>\n<p>** 方法一：** 手动创建容器，并启动</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">7001</span>:7001   <span class=\"token parameter variable\">-p</span> <span class=\"token number\">17001</span>:17001  <span class=\"token parameter variable\">--name</span> redis7001  <span class=\"token parameter variable\">-v</span> /root/myredis/conf7001/redis.conf:/etc/redis/redis.conf <span class=\"token parameter variable\">-v</span> /root/myredis/data7001:/data <span class=\"token parameter variable\">-d</span> redis redis-server /etc/redis/redis.conf <span class=\"token parameter variable\">--appendonly</span> <span class=\"token function\">yes</span></pre></td></tr></table></figure><p>​\t7002 ~~~7006 同上，自行修改参数</p>\n<p>** 方法二：** 脚本一键启动，效果同上</p>\n<p>​\t<strong>注意：</strong></p>\n<ul>\n<li>其中要指定两个端口号 **-p 1700<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi>p</mi><mi>o</mi><mi>r</mi><mi>t</mi></mrow><mo>:</mo><mn>1700</mn></mrow><annotation encoding=\"application/x-tex\">{port}:1700</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> {port}** 不要忘记，否则会在创建几群的时候出现  **Waiting for the cluster to join   ** 。【具体原因，我还没查出来，后面补充】</li>\n<li>在 docker 创建集群容器的时候，<strong>一定要</strong> 指定  ip</li>\n</ul>\n<p><strong>补充：</strong></p>\n<ul>\n<li>那肯定是你端口没有开启，不要质疑，这里的端口不是 7000-7005，而是 17000-17005，因为 redis 设置集群的端口号是”redis 端口 + 10000“，这个非常重要。并且 7001:7006 也是必须打开的。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">port</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">seq</span> <span class=\"token number\">1</span> <span class=\"token number\">6</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">700</span><span class=\"token variable\">$&#123;port&#125;</span>:700<span class=\"token variable\">$&#123;port&#125;</span>   <span class=\"token parameter variable\">-p</span> <span class=\"token number\">1700</span><span class=\"token variable\">$&#123;port&#125;</span>:1700<span class=\"token variable\">$&#123;port&#125;</span>  <span class=\"token parameter variable\">--name</span> redis700<span class=\"token variable\">$&#123;port&#125;</span>  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-v</span> /root/redis/redis700<span class=\"token variable\">$&#123;port&#125;</span>.conf:/etc/redis/redis.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-v</span> /root/redis/data700<span class=\"token variable\">$&#123;port&#125;</span>:/data <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--ip</span> <span class=\"token number\">192.168</span>.1.195 redis redis-server /etc/redis/redis.conf </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h4 id=\"3-进入容器\"><a class=\"anchor\" href=\"#3-进入容器\">#</a> 3、进入容器</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> redis7001 /bin/bash</pre></td></tr></table></figure><h4 id=\"4-创建集群\"><a class=\"anchor\" href=\"#4-创建集群\">#</a> 4、创建集群</h4>\n<p>​\t** 注：** 有一步操作，要自行进行确认，一定要输入 <strong>yes</strong> 而不是 <strong>y</strong> 或者其他之类的，除了 yes 一律视为 <strong>no</strong> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis-cli <span class=\"token parameter variable\">--cluster</span> create <span class=\"token number\">192.168</span>.1.195:7001 <span class=\"token number\">192.168</span>.1.195:7002 <span class=\"token number\">192.168</span>.1.195:7003 <span class=\"token number\">192.168</span>.1.195:7004 <span class=\"token number\">192.168</span>.1.195:7005 <span class=\"token number\">192.168</span>.1.195:7006 --cluster-replicas <span class=\"token number\">1</span></pre></td></tr></table></figure><h4 id=\"5-测试\"><a class=\"anchor\" href=\"#5-测试\">#</a> 5、测试</h4>\n<p>​\t集群测试时，千万不要忘记最后一个 - c 参数。</p>\n<pre><code class=\"language-shel\">redis-cli -p 7001 -c\n</code></pre>\n<h4 id=\"6-关闭集群\"><a class=\"anchor\" href=\"#6-关闭集群\">#</a> 6、关闭集群</h4>\n<p><strong>方法一：</strong></p>\n<p>​\t自行手动一个一个停止，并且删除容器</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> stop redis7001 <span class=\"token comment\">#7002 ~~~7006</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> redis7001</pre></td></tr></table></figure><p><strong>方法二：</strong></p>\n<p>​\t脚本程序，一劳永逸</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">port</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">seq</span> <span class=\"token number\">1</span> <span class=\"token number\">6</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> stop redis700<span class=\"token variable\">$&#123;port&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> redis700<span class=\"token variable\">$&#123;port&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h4 id=\"7-清空集群文件\"><a class=\"anchor\" href=\"#7-清空集群文件\">#</a> 7、清空集群文件</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">port</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">seq</span> <span class=\"token number\">1</span> <span class=\"token number\">6</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>  <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">rm</span>  <span class=\"token parameter variable\">-rf</span>  ./data700<span class=\"token variable\">$&#123;port&#125;</span>/* </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h3 id=\"九-jedis\"><a class=\"anchor\" href=\"#九-jedis\">#</a> 九. <strong>Jedis</strong></h3>\n<p>​\tRedis 给 Java 语言提供了客户端 API，称之为 Jedis。</p>\n<p>​\tJedis API 和 Redis 命令几乎是一样的。</p>\n<p>​\t例如：Redis 对 String 值新增时 set 命令，Jedis 中也是 set 方法。所以本课程中没有重点把所有方法进行演示，重要演示 Jedis 如何使用。</p>\n<p>​\tJedis API 特别简单，基本上都是创建对象调用方法即可。</p>\n<h4 id=\"1-单机版\"><a class=\"anchor\" href=\"#1-单机版\">#</a> 1. <strong>单机版</strong></h4>\n<pre><code>public void testStandalone()&#123;\n    Jedis jedis = new Jedis(&quot;192.168.93.10&quot;,6379);\n    jedis.set(&quot;name&quot;,&quot;msb-standalone&quot;);\n    String value = jedis.get(&quot;name&quot;);\n    System.out.println(value);\n&#125;\n</code></pre>\n<h4 id=\"2-带有连接池\"><a class=\"anchor\" href=\"#2-带有连接池\">#</a> 2. <strong>带有连接池</strong></h4>\n<pre><code>public void testPool()&#123;\n    JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\n    jedisPoolConfig.setMaxTotal(20);\n    jedisPoolConfig.setMaxIdle(5);\n    jedisPoolConfig.setMinIdle(3);\n    JedisPool jedisPool = new JedisPool(jedisPoolConfig,&quot;192.168.93.10&quot;,6379);\n    Jedis jedis = jedisPool.getResource();\n    jedis.set(&quot;name&quot;,&quot;msb-pool&quot;);\n    String value = jedis.get(&quot;name&quot;);\n    System.out.println(value);\n&#125;\n</code></pre>\n<h4 id=\"3-集群\"><a class=\"anchor\" href=\"#3-集群\">#</a> 3. <strong>集群</strong></h4>\n<pre><code>public void testCluster()&#123;\n    Set&lt;HostAndPort&gt; set = new HashSet&lt;&gt;();\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7001));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7002));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7003));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7004));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7005));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7006));\n    JedisCluster jedisCluster = new JedisCluster(set);\n    jedisCluster.set(&quot;name&quot;,&quot;bjmsb&quot;);\n    String value = jedisCluster.get(&quot;name&quot;);\n    System.out.println(value);\n&#125;\n</code></pre>\n<h3 id=\"十-使用springboot整合springdataredis操作redis\"><a class=\"anchor\" href=\"#十-使用springboot整合springdataredis操作redis\">#</a> 十. <strong>使用 SpringBoot 整合 SpringDataRedis 操作 redis</strong></h3>\n<p>​\tSpring Data 是 Spring 公司的顶级项目，里面包含了 N 多个二级子项目，这些子项目都是相对独立的项目。每个子项目是对不同 API 的封装。</p>\n<p>​\t所有 Spring Boot 整合 Spring Data xxxx 的启动器都叫做 spring-boot-starter-data-xxxx</p>\n<p>​\tSpring Data 好处很方便操作对象类型。</p>\n<p>​\t把 Redis 不同值得类型放到一个 opsForXXX 方法中。</p>\n<p>​\t\topsForValue : String 值</p>\n<p>​\t\topsForList : 列表 List</p>\n<p>​\t\topsForHash: 哈希表 Hash</p>\n<p>​\t\topsForZSet: 有序集合 Sorted Set</p>\n<p>​\t\topsForSet : 集合</p>\n<h4 id=\"1-添加依赖\"><a class=\"anchor\" href=\"#1-添加依赖\">#</a> 1. <strong>添加依赖</strong></h4>\n<pre><code> \t&lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;\n    &lt;/parent&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n            &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.47&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n            &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.20&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;redis.clients&lt;/groupId&gt;\n            &lt;artifactId&gt;jedis&lt;/artifactId&gt;\n            &lt;version&gt;3.3.0&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre>\n<h4 id=\"2-配置配置文件\"><a class=\"anchor\" href=\"#2-配置配置文件\">#</a> 2. <strong>配置配置文件</strong></h4>\n<p><strong>注：</strong></p>\n<ul>\n<li>\n<p>spring.redis.host=localhost 默认值</p>\n</li>\n<li>\n<p>spring.redis.port=6379 端口号默认值</p>\n</li>\n</ul>\n<pre><code>mybatis:\n  mapper-locations: classpath:mybatis/*\n  type-aliases-package: com.msb.pojo\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/mydb\n    username: root\n    password: root\n    driver-class-name: com.mysql.jdbc.Driver\n  redis:\n    host: 192.168.1.195\n    cluster:\n      nodes: 192.168.1.195:7001,192.168.1.195:7002,192.168.1.195:7003,192.168.1.195:7004,192.168.1.195:7005,192.168.1.195:7006\n</code></pre>\n<h4 id=\"3编写配置类可直接复制\"><a class=\"anchor\" href=\"#3编写配置类可直接复制\">#</a> 3.<strong> 编写配置类</strong>（可直接复制）</h4>\n<pre><code>@Configuration\npublic class RedisConfig &#123;\n    @Bean\n    public RedisTemplate&lt;String,Object&gt; redisTemplate(RedisConnectionFactory \t\t  factory)&#123;\n        RedisTemplate&lt;String,Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class));\n        return redisTemplate;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"4-编写代码\"><a class=\"anchor\" href=\"#4-编写代码\">#</a> 4. <strong>编写代码</strong></h4>\n<h5 id=\"41-编写对象新增\"><a class=\"anchor\" href=\"#41-编写对象新增\">#</a> 4.1 <strong>编写对象新增</strong></h5>\n<pre><code>@Autowired\nprivate RedisTemplate&lt;String, Object&gt; redisTemplate;\n\n@Test\npublic void testString() &#123;\n    People peo = new People(1, &quot;张三&quot;);\n    redisTemplate.opsForValue().set(&quot;peo1&quot;, peo);\n&#125;\n</code></pre>\n<h5 id=\"42-编写对象获取\"><a class=\"anchor\" href=\"#42-编写对象获取\">#</a> 4.2 <strong>编写对象获取</strong></h5>\n<p>此处必须编写值序列化器。不指定时返回类型为 LinkedHashMap</p>\n<pre><code>@Test\npublic void testGetString() &#123;\n    redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;People&gt;(People.class));\n    People peo = (People) redisTemplate.opsForValue().get(&quot;peo1&quot;);\n    System.out.println(peo);\n&#125;\n</code></pre>\n<h5 id=\"43-编写list\"><a class=\"anchor\" href=\"#43-编写list\">#</a> 4.3 <strong>编写 List</strong></h5>\n<pre><code>@Test\npublic void testList() &#123;\n    List&lt;People&gt; list = new ArrayList&lt;&gt;();\n    list.add(new People(1, &quot;张三&quot;));\n    list.add(new People(2, &quot;李四&quot;));\n    redisTemplate.opsForValue().set(&quot;list2&quot;, list);\n&#125;\n</code></pre>\n<h5 id=\"44-编写list取值\"><a class=\"anchor\" href=\"#44-编写list取值\">#</a> 4.4 <strong>编写 List 取值</strong></h5>\n<pre><code>@Test\npublic void testGetList()&#123;\n    redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;List&gt;(List.class));\n    List&lt;People&gt; list2 = (List&lt;People&gt;) redisTemplate.opsForValue().get(&quot;list2&quot;);\n    System.out.println(list2);\n&#125;\n</code></pre>\n<h3 id=\"十一-使用redis效果\"><a class=\"anchor\" href=\"#十一-使用redis效果\">#</a> 十一. <strong>使用 Redis 效果</strong></h3>\n<p>​\t使用缓存流程</p>\n<p>​\t1. 先判断缓存中是否存在。如果存在直接从缓存中取出数据。不执行 2，3 步骤</p>\n<p>​\t2. 如果不存在，从 mysql 中获取数据</p>\n<p>​\t3. 获取数据后，把数据缓存到 redis 中</p>\n<p><img data-src=\"/2022/10/07/Redis/Redis-11.jpg\" class=\"\"></p>\n",
            "tags": [
                "分布式",
                "中间件",
                "Redis基础",
                "NoSQL数据库"
            ]
        }
    ]
}