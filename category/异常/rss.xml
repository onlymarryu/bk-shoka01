<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>记录“美食”每刻 • Posts by &#34;异常&#34; category</title>
        <link>http://example.com</link>
        <description>记录“美食”每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>博客</category>
        <category>环境搭建</category>
        <category>分布式</category>
        <category>Dubbo</category>
        <category>FastDFS</category>
        <category>MySQL</category>
        <category>数据库基础</category>
        <category>数据库基本知识</category>
        <category>数据库</category>
        <category>框架</category>
        <category>ORM</category>
        <category>RPC</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>SpringMVC</category>
        <category>SpringSecurity</category>
        <category>JavaSE</category>
        <category>-JavaSE</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/</guid>
            <title>第9章_异常</title>
            <link>http://example.com/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/</link>
            <category>JavaSE</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;习题的引入&#34;&gt;&lt;a href=&#34;#习题的引入&#34; class=&#34;headerlink&#34; title=&#34;习题的引入&#34;&gt;&lt;/a&gt;习题的引入&lt;/h1&gt;&lt;p&gt;【1】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
        int num1 = sc.nextInt();
        System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
        int num2 = sc.nextInt();
        System.out.println(&amp;quot;商：&amp;quot;+num1/num2);

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/56f8af6619f13a967fd59a493803ae88.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;测试过程发现问题：&lt;/p&gt;
&lt;p&gt;录入的数据应为int类型，但是录入非int类型数据的时候，出异常：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/70fd21c0b8969ead54a12fe1afc5c8f6.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;除数为0的时候：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/6ac232ad5d4a32bdd682ee7df14a2a2a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;异常：Exception：在程序的运行过程中，发生了不正常的现象，阻止了程序的运行，我们称之为发生异常。&lt;/p&gt;
&lt;h1 id=&#34;通过if-else解决异常&#34;&gt;&lt;a href=&#34;#通过if-else解决异常&#34; class=&#34;headerlink&#34; title=&#34;通过if-else解决异常&#34;&gt;&lt;/a&gt;通过if-else解决异常&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
        if(sc.hasNextInt())&amp;#123;
            int num1 = sc.nextInt();
            System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
            if(sc.hasNextInt())&amp;#123;
                int num2 = sc.nextInt();
                if(num2 == 0)&amp;#123;
                    System.out.println(&amp;quot;对不起，除数不能为0&amp;quot;);
                &amp;#125;else&amp;#123;
                    System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
                &amp;#125;
            &amp;#125;else&amp;#123;
                System.out.println(&amp;quot;对不起，你录入的不是int类型的数据！&amp;quot;);
            &amp;#125;
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;对不起，你录入的不是int类型的数据！&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用if-else堵漏洞的缺点：&lt;/p&gt;
&lt;p&gt;（1）代码臃肿，业务代码和处理异常的代码混在一起。&lt;/p&gt;
&lt;p&gt;（2）可读性差&lt;/p&gt;
&lt;p&gt;（3）程序员需要花费大量的经历来维护这个漏洞&lt;/p&gt;
&lt;p&gt;（4）程序员很难堵住所有的漏洞。&lt;/p&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&#34;try-catch&#34;&gt;&lt;a href=&#34;#try-catch&#34; class=&#34;headerlink&#34; title=&#34;try-catch&#34;&gt;&lt;/a&gt;try-catch&lt;/h1&gt;&lt;p&gt;【1】基于if-else处理异常缺点太多，所以java中专门出了一个异常处理机制：&lt;/p&gt;
&lt;p&gt;“异常三连” try-catch-finally&lt;/p&gt;
&lt;p&gt;【2】异常出现了以后怎么看：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/bb3e30a8d6384f5a856b898d56f6aae4.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】捕获异常： try-catch&lt;/p&gt;
&lt;p&gt;对应代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test2 &amp;#123;
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        try&amp;#123;
            Scanner sc = new Scanner(System.in);
            System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
            int num1 = sc.nextInt();
            System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
            int num2 = sc.nextInt();
            System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
        &amp;#125;catch(Exception ex)&amp;#123;
            System.out.println(&amp;quot;对不起，程序出现异常！&amp;quot;);
        &amp;#125;

        System.out.println(&amp;quot;----谢谢你使用计算器111&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器222&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器333&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器444&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器555&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器666&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;把可能出现异常的代码放入try代码块中，然后将异常封装为对象，被catch后面的()中的那个异常对象接收，接收以后：执行catch后面的{}里面的代码，然后try-catch后面的代码，该怎么执行就怎么执行。&lt;/p&gt;
&lt;p&gt;详细说一下：&lt;/p&gt;
&lt;p&gt;（1）try中没有异常，catch中代码不执行。&lt;/p&gt;
&lt;p&gt;（2）try中有异常，catch进行捕获：&lt;/p&gt;
&lt;p&gt;如果catch中异常类型和你出的异常类型匹配的话：走catch中的代码–》进行捕获&lt;/p&gt;
&lt;p&gt;如果catch中异常类型和你出的异常类型不匹配的话：不走catch中的代码–》没有捕获成功，程序相当于遇到异常了，中断了，后续代码不执行&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;（1）try中如果出现异常，然后用catch捕获成功的话，那么try中后续的代码是不会执行的。&lt;/p&gt;
&lt;p&gt;（2）如果catch捕获异常成功，那么try-catch后面的代码该执行还是执行没有影响。&lt;/p&gt;
&lt;h1 id=&#34;catch中如何处理异常&#34;&gt;&lt;a href=&#34;#catch中如何处理异常&#34; class=&#34;headerlink&#34; title=&#34;catch中如何处理异常&#34;&gt;&lt;/a&gt;catch中如何处理异常&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test3 &amp;#123;
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        try&amp;#123;
            Scanner sc = new Scanner(System.in);
            System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
            int num1 = sc.nextInt();
            System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
            int num2 = sc.nextInt();
            System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
        &amp;#125;catch(Exception ex)&amp;#123;
            //第一种处理：什么都不写，什么都不做

            //第二种处理：输出自定义异常信息
            //System.out.println(&amp;quot;对不起，你的代码有问题！&amp;quot;);

            //第三种处理：打印异常信息：
            /\*(1)调用toString方法，显示异常的类名（全限定路径）\*/
                /\*System.out.println(ex);
            System.out.println(ex.toString());\*/
                /\*(2)显示异常描述信息对应的字符串，如果没有就显示null
                System.out.println(ex.getMessage());\*/
                /\*(3)显示异常的堆栈信息：将异常信息捕获以后，在控制台将异常的效果给我们展示出来，方便我们查看异常\*/
                /\* ex.printStackTrace();\*/

                //第四种处理：抛出异常：
                throw ex;
        &amp;#125;

        System.out.println(&amp;quot;----谢谢你使用计算器111&amp;quot;);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;try-catch-finally&#34;&gt;&lt;a href=&#34;#try-catch-finally&#34; class=&#34;headerlink&#34; title=&#34;try-catch-finally&#34;&gt;&lt;/a&gt;try-catch-finally&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】在什么情况下，try-catch后面的代码不执行？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）throw抛出异常的情况&lt;/p&gt;
&lt;p&gt;（2）catch中没有正常的进行异常捕获&lt;/p&gt;
&lt;p&gt;（3）在try中遇到return&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】怎么样才可以将 try-catch后面的代码 必须执行？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要将必须执行的代码放入finally中，那么这个代码无论如何一定执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】return和finally执行顺序？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先执行finally最后执行return&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4】什么代码会放在finally中呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关闭数据库资源，关闭IO流资源，关闭socket资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【5】有一句话代码很厉害，它可以让finally中代码不执行!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;ZmlsZTovLy9EOlzkuIvovb1cU3lzdGVtLmV4aXQoMCk7XOe7iOatouW9k+WJjeeahOiZmuaLn+acuuaJp+ihjA==&#34;&gt;System.exit(0);&amp;#x2F;&amp;#x2F;终止当前的虚拟机执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;

public class Test3 &amp;#123;
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        try&amp;#123;
            Scanner sc = new Scanner(System.in);
            System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
            int num1 = sc.nextInt();
            System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
            int num2 = sc.nextInt();
            System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
            System.exit(0);//终止当前的虚拟机执行
            return;
        &amp;#125;catch(ArithmeticException ex)&amp;#123;
            //throw ex;
        &amp;#125;finally &amp;#123;
            System.out.println(&amp;quot;----谢谢你使用计算器111&amp;quot;);
        &amp;#125;


    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;多重catch&#34;&gt;&lt;a href=&#34;#多重catch&#34; class=&#34;headerlink&#34; title=&#34;多重catch&#34;&gt;&lt;/a&gt;多重catch&lt;/h1&gt;&lt;p&gt;【1】try中出现异常以后，将异常类型跟catch后面的类型依次比较，按照代码的顺序进行比对，执行第一个与异常类型匹配的catch语句&lt;/p&gt;
&lt;p&gt;【2】一旦执行其中一条catch语句之后，后面的catch语句就会被忽略了！&lt;/p&gt;
&lt;p&gt;【3】在安排catch语句的顺序的时候，一般会将特殊异常放在前面（并列），一般化的异常放在后面。&lt;/p&gt;
&lt;p&gt;先写子类异常，再写父类异常。&lt;/p&gt;
&lt;p&gt;【4】在JDK1.7以后，异常新处理方式：可以并列用|符号连接：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/fed2c319de1a9a8d184482f4c55ef6e4.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.InputMismatchException;
import java.util.Scanner;

public class Test4 &amp;#123;
    public static void main(String[] args) &amp;#123;
        Integer
            //实现一个功能：键盘录入两个数，求商：
            try&amp;#123;
                Scanner sc = new Scanner(System.in);
                System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
                int num1 = sc.nextInt();
                System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
                int num2 = sc.nextInt();
                System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
            &amp;#125;catch(ArithmeticException ex)&amp;#123;
                System.out.println(&amp;quot;对不起，除数不可以为0&amp;quot;);
            &amp;#125;catch(InputMismatchException ex)&amp;#123;
                System.out.println(&amp;quot;对不起，你录入的数据不是int类型的数据&amp;quot;);
            &amp;#125;catch(Exception ex)&amp;#123;
                System.out.println(&amp;quot;对不起，你的程序出现异常&amp;quot;);
            &amp;#125;finally &amp;#123;
                System.out.println(&amp;quot;----谢谢你使用计算器111&amp;quot;);
            &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;异常的分类&#34;&gt;&lt;a href=&#34;#异常的分类&#34; class=&#34;headerlink&#34; title=&#34;异常的分类&#34;&gt;&lt;/a&gt;异常的分类&lt;/h1&gt;&lt;p&gt;【1】层次结构：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/49c007ec5d133e1d0e68827b9cf4b03e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;注意：程序中语法错误，逻辑错误 都不属于上面的Error，Exception&lt;/p&gt;
&lt;p&gt;【2】运行时异常：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test5 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //运行时异常：
        int[] arr = &amp;#123;1,2,3&amp;#125;;
        System.out.println(arr.length);
        /\*int[] arr2 = null;
        System.out.println(arr2.length);\*/
            System.out.println(arr[10]);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】检查异常：&lt;/p&gt;
&lt;p&gt;处理方式1：try-catch嵌套try-catch&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test6 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //检查异常：
        try &amp;#123;
            try &amp;#123;
                Class.forName(&amp;quot;com.msb.test01.Test&amp;quot;).newInstance();
            &amp;#125; catch (InstantiationException e) &amp;#123;
                e.printStackTrace();
            &amp;#125; catch (IllegalAccessException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125; catch (ClassNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;处理方式2：多重catch&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test6 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //检查异常：
        try &amp;#123;
            Class.forName(&amp;quot;com.msb.test01.Test&amp;quot;).newInstance();
        &amp;#125; catch (ClassNotFoundException \| InstantiationException \| IllegalAccessException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;处理方式3：throws&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test6 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException &amp;#123;
        //检查异常：
        Class.forName(&amp;quot;com.msb.test01.Test&amp;quot;).newInstance();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;throw和throws的区别&#34;&gt;&lt;a href=&#34;#throw和throws的区别&#34; class=&#34;headerlink&#34; title=&#34;throw和throws的区别&#34;&gt;&lt;/a&gt;throw和throws的区别&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;

public class Test7 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws Exception &amp;#123;
        //实现一个功能：两个数相除，当除数为0的时候，程序出现异常。
        /\*try &amp;#123;
            devide();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;\*/
            devide();
    &amp;#125;
    public static void devide() throws Exception &amp;#123;
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
        int num1 = sc.nextInt();
        System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
        int num2 = sc.nextInt();
        if(num2 == 0 )&amp;#123;//除数为0 ，制造异常。
            //制造运行时异常：
            /\*throw new RuntimeException();\*/
                //制造检查异常：
                /\*try &amp;#123;
                    throw new Exception();
                &amp;#125; catch (Exception e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;\*/
                    throw new Exception();
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;throw和throws的区别：&lt;/p&gt;
&lt;p&gt;（1）位置不同：&lt;/p&gt;
&lt;p&gt;throw：方法内部&lt;/p&gt;
&lt;p&gt;throws: 方法的签名处，方法的声明处&lt;/p&gt;
&lt;p&gt;（2）内容不同：&lt;/p&gt;
&lt;p&gt;throw+异常对象（检查异常，运行时异常）&lt;/p&gt;
&lt;p&gt;throws+异常的类型（可以多个类型，用，拼接）&lt;/p&gt;
&lt;p&gt;（3）作用不同：&lt;/p&gt;
&lt;p&gt;throw：异常出现的源头，制造异常。&lt;/p&gt;
&lt;p&gt;throws:在方法的声明处，告诉方法的调用者，这个方法中可能会出现我声明的这些异常。然后调用者对这个异常进行处理：&lt;/p&gt;
&lt;p&gt;要么自己处理要么再继续向外抛出异常&lt;/p&gt;
&lt;h2 id=&#34;练习：&#34;&gt;&lt;a href=&#34;#练习：&#34; class=&#34;headerlink&#34; title=&#34;练习：&#34;&gt;&lt;/a&gt;练习：&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public class Student &amp;#123;
    private String name;
    private int age;
    private String sex;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public String getSex() &amp;#123;
        return sex;
    &amp;#125;

    public void setSex(String sex) throws Exception &amp;#123;
        if(sex.equals(&amp;quot;男&amp;quot;)\|\|sex.equals(&amp;quot;女&amp;quot;))&amp;#123;
            this.sex = sex;
        &amp;#125;else&amp;#123;//非男非女
            //解决办法1：
            /\*this.sex = &amp;quot;男&amp;quot;;\*/
                //解决办法2：给个友好型提示，但是打印结果为默认的null效果
                /\*System.out.println(&amp;quot;对不起，你的性别错误了&amp;quot;);\*/
                //解决办法3：
                //制造运行时异常：
                /\*throw new RuntimeException(&amp;quot;性别不对！&amp;quot;);\*/
                //制造检查异常
                /\*try &amp;#123;
                    throw new Exception();
                &amp;#125; catch (Exception e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;\*/
                    throw new Exception();
        &amp;#125;
    &amp;#125;

    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
            &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;quot;, age=&amp;quot; + age +
            &amp;quot;, sex=&amp;#39;&amp;quot; + sex + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;

    public Student() &amp;#123;
    &amp;#125;

    public Student(String name, int age, String sex) &amp;#123;
        this.name = name;
        this.age = age;
        //this.sex = sex;
        try &amp;#123;
            this.setSex(sex);
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;



public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Student的对象：
        /\*Student s = new Student();
        s.setName(&amp;quot;菲菲&amp;quot;);
        s.setAge(19);
        try &amp;#123;
            s.setSex(&amp;quot;asdfasdfasdf&amp;quot;);
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        System.out.println(s);\*/

            Student s2 = new Student(&amp;quot;娜娜&amp;quot;,21,&amp;quot;asdfasdfasdf&amp;quot;);
        System.out.println(s2);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;重载和重写的异常&#34;&gt;&lt;a href=&#34;#重载和重写的异常&#34; class=&#34;headerlink&#34; title=&#34;重载和重写的异常&#34;&gt;&lt;/a&gt;重载和重写的异常&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/cf74eead97b51814e21b234c60586c9a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【1】重载：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    public void a() throws Exception&amp;#123;

    &amp;#125;
    public void a(int age) throws ArithmeticException&amp;#123;

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】重写：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/0ee7a011f038160bdfaa00237577e0c1.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/3243038ec840d0d3cc6dc909e039f3df.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;子类 &amp;lt;&amp;#x3D; 父类&lt;/p&gt;
&lt;h1 id=&#34;自定义异常&#34;&gt;&lt;a href=&#34;#自定义异常&#34; class=&#34;headerlink&#34; title=&#34;自定义异常&#34;&gt;&lt;/a&gt;自定义异常&lt;/h1&gt;&lt;p&gt;自定义的异常可以继承：运行时异常&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyException extends RuntimeException &amp;#123;

    static final long serialVersionUID = -70348971907L;

    public MyException()&amp;#123;

    &amp;#125;
    public MyException(String msg)&amp;#123;
        super(msg);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以继承检查异常：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyException extends Exception &amp;#123;

    static final long serialVersionUID = -70348971907L;

    public MyException()&amp;#123;

    &amp;#125;
    public MyException(String msg)&amp;#123;
        super(msg);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果继承的是运行时异常，那么在使用的时候无需额外处理&lt;/p&gt;
&lt;p&gt;如果继承的是检查异常，那么使用的时候需要try-catch捕获或者throws向上抛&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
