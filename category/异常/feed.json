{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"异常\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/",
            "title": "第9章_异常",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"习题的引入\"><a href=\"#习题的引入\" class=\"headerlink\" title=\"习题的引入\"></a>习题的引入</h1><p>【1】代码：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入第一个数：&quot;);\n        int num1 = sc.nextInt();\n        System.out.println(&quot;请录入第二个数：&quot;);\n        int num2 = sc.nextInt();\n        System.out.println(&quot;商：&quot;+num1/num2);\n\n    &#125;\n&#125;\n</code></pre>\n<p>运行结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/56f8af6619f13a967fd59a493803ae88.png\" class=\"\">\n\n\n<p>测试过程发现问题：</p>\n<p>录入的数据应为int类型，但是录入非int类型数据的时候，出异常：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/70fd21c0b8969ead54a12fe1afc5c8f6.png\" class=\"\">\n\n\n<p>除数为0的时候：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/6ac232ad5d4a32bdd682ee7df14a2a2a.png\" class=\"\">\n\n\n<p>异常：Exception：在程序的运行过程中，发生了不正常的现象，阻止了程序的运行，我们称之为发生异常。</p>\n<h1 id=\"通过if-else解决异常\"><a href=\"#通过if-else解决异常\" class=\"headerlink\" title=\"通过if-else解决异常\"></a>通过if-else解决异常</h1><pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入第一个数：&quot;);\n        if(sc.hasNextInt())&#123;\n            int num1 = sc.nextInt();\n            System.out.println(&quot;请录入第二个数：&quot;);\n            if(sc.hasNextInt())&#123;\n                int num2 = sc.nextInt();\n                if(num2 == 0)&#123;\n                    System.out.println(&quot;对不起，除数不能为0&quot;);\n                &#125;else&#123;\n                    System.out.println(&quot;商：&quot;+num1/num2);\n                &#125;\n            &#125;else&#123;\n                System.out.println(&quot;对不起，你录入的不是int类型的数据！&quot;);\n            &#125;\n        &#125;else&#123;\n            System.out.println(&quot;对不起，你录入的不是int类型的数据！&quot;);\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>用if-else堵漏洞的缺点：</p>\n<p>（1）代码臃肿，业务代码和处理异常的代码混在一起。</p>\n<p>（2）可读性差</p>\n<p>（3）程序员需要花费大量的经历来维护这个漏洞</p>\n<p>（4）程序员很难堵住所有的漏洞。</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"try-catch\"><a href=\"#try-catch\" class=\"headerlink\" title=\"try-catch\"></a>try-catch</h1><p>【1】基于if-else处理异常缺点太多，所以java中专门出了一个异常处理机制：</p>\n<p>“异常三连” try-catch-finally</p>\n<p>【2】异常出现了以后怎么看：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/bb3e30a8d6384f5a856b898d56f6aae4.png\" class=\"\">\n\n\n<p>【3】捕获异常： try-catch</p>\n<p>对应代码：</p>\n<pre><code class=\"java\">public class Test2 &#123;\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        try&#123;\n            Scanner sc = new Scanner(System.in);\n            System.out.println(&quot;请录入第一个数：&quot;);\n            int num1 = sc.nextInt();\n            System.out.println(&quot;请录入第二个数：&quot;);\n            int num2 = sc.nextInt();\n            System.out.println(&quot;商：&quot;+num1/num2);\n        &#125;catch(Exception ex)&#123;\n            System.out.println(&quot;对不起，程序出现异常！&quot;);\n        &#125;\n\n        System.out.println(&quot;----谢谢你使用计算器111&quot;);\n        System.out.println(&quot;----谢谢你使用计算器222&quot;);\n        System.out.println(&quot;----谢谢你使用计算器333&quot;);\n        System.out.println(&quot;----谢谢你使用计算器444&quot;);\n        System.out.println(&quot;----谢谢你使用计算器555&quot;);\n        System.out.println(&quot;----谢谢你使用计算器666&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>原理：</p>\n<p>把可能出现异常的代码放入try代码块中，然后将异常封装为对象，被catch后面的()中的那个异常对象接收，接收以后：执行catch后面的{}里面的代码，然后try-catch后面的代码，该怎么执行就怎么执行。</p>\n<p>详细说一下：</p>\n<p>（1）try中没有异常，catch中代码不执行。</p>\n<p>（2）try中有异常，catch进行捕获：</p>\n<p>如果catch中异常类型和你出的异常类型匹配的话：走catch中的代码–》进行捕获</p>\n<p>如果catch中异常类型和你出的异常类型不匹配的话：不走catch中的代码–》没有捕获成功，程序相当于遇到异常了，中断了，后续代码不执行</p>\n<p>注意：</p>\n<p>（1）try中如果出现异常，然后用catch捕获成功的话，那么try中后续的代码是不会执行的。</p>\n<p>（2）如果catch捕获异常成功，那么try-catch后面的代码该执行还是执行没有影响。</p>\n<h1 id=\"catch中如何处理异常\"><a href=\"#catch中如何处理异常\" class=\"headerlink\" title=\"catch中如何处理异常\"></a>catch中如何处理异常</h1><pre><code class=\"java\">public class Test3 &#123;\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        try&#123;\n            Scanner sc = new Scanner(System.in);\n            System.out.println(&quot;请录入第一个数：&quot;);\n            int num1 = sc.nextInt();\n            System.out.println(&quot;请录入第二个数：&quot;);\n            int num2 = sc.nextInt();\n            System.out.println(&quot;商：&quot;+num1/num2);\n        &#125;catch(Exception ex)&#123;\n            //第一种处理：什么都不写，什么都不做\n\n            //第二种处理：输出自定义异常信息\n            //System.out.println(&quot;对不起，你的代码有问题！&quot;);\n\n            //第三种处理：打印异常信息：\n            /\\*(1)调用toString方法，显示异常的类名（全限定路径）\\*/\n                /\\*System.out.println(ex);\n            System.out.println(ex.toString());\\*/\n                /\\*(2)显示异常描述信息对应的字符串，如果没有就显示null\n                System.out.println(ex.getMessage());\\*/\n                /\\*(3)显示异常的堆栈信息：将异常信息捕获以后，在控制台将异常的效果给我们展示出来，方便我们查看异常\\*/\n                /\\* ex.printStackTrace();\\*/\n\n                //第四种处理：抛出异常：\n                throw ex;\n        &#125;\n\n        System.out.println(&quot;----谢谢你使用计算器111&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" class=\"headerlink\" title=\"try-catch-finally\"></a>try-catch-finally</h1><p><strong>【1】在什么情况下，try-catch后面的代码不执行？</strong></p>\n<p>（1）throw抛出异常的情况</p>\n<p>（2）catch中没有正常的进行异常捕获</p>\n<p>（3）在try中遇到return</p>\n<p><strong>【2】怎么样才可以将 try-catch后面的代码 必须执行？</strong></p>\n<p>只要将必须执行的代码放入finally中，那么这个代码无论如何一定执行。</p>\n<p><strong>【3】return和finally执行顺序？</strong></p>\n<p>先执行finally最后执行return</p>\n<p><strong>【4】什么代码会放在finally中呢？</strong></p>\n<p>关闭数据库资源，关闭IO流资源，关闭socket资源。</p>\n<p><strong>【5】有一句话代码很厉害，它可以让finally中代码不执行!</strong></p>\n<p><span class=\"exturl\" data-url=\"ZmlsZTovLy9EOlzkuIvovb1cU3lzdGVtLmV4aXQoMCk7XOe7iOatouW9k+WJjeeahOiZmuaLn+acuuaJp+ihjA==\">System.exit(0);&#x2F;&#x2F;终止当前的虚拟机执行</span></p>\n<p>代码：</p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class Test3 &#123;\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        try&#123;\n            Scanner sc = new Scanner(System.in);\n            System.out.println(&quot;请录入第一个数：&quot;);\n            int num1 = sc.nextInt();\n            System.out.println(&quot;请录入第二个数：&quot;);\n            int num2 = sc.nextInt();\n            System.out.println(&quot;商：&quot;+num1/num2);\n            System.exit(0);//终止当前的虚拟机执行\n            return;\n        &#125;catch(ArithmeticException ex)&#123;\n            //throw ex;\n        &#125;finally &#123;\n            System.out.println(&quot;----谢谢你使用计算器111&quot;);\n        &#125;\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"多重catch\"><a href=\"#多重catch\" class=\"headerlink\" title=\"多重catch\"></a>多重catch</h1><p>【1】try中出现异常以后，将异常类型跟catch后面的类型依次比较，按照代码的顺序进行比对，执行第一个与异常类型匹配的catch语句</p>\n<p>【2】一旦执行其中一条catch语句之后，后面的catch语句就会被忽略了！</p>\n<p>【3】在安排catch语句的顺序的时候，一般会将特殊异常放在前面（并列），一般化的异常放在后面。</p>\n<p>先写子类异常，再写父类异常。</p>\n<p>【4】在JDK1.7以后，异常新处理方式：可以并列用|符号连接：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/fed2c319de1a9a8d184482f4c55ef6e4.png\" class=\"\">\n\n\n<pre><code class=\"java\">import java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Test4 &#123;\n    public static void main(String[] args) &#123;\n        Integer\n            //实现一个功能：键盘录入两个数，求商：\n            try&#123;\n                Scanner sc = new Scanner(System.in);\n                System.out.println(&quot;请录入第一个数：&quot;);\n                int num1 = sc.nextInt();\n                System.out.println(&quot;请录入第二个数：&quot;);\n                int num2 = sc.nextInt();\n                System.out.println(&quot;商：&quot;+num1/num2);\n            &#125;catch(ArithmeticException ex)&#123;\n                System.out.println(&quot;对不起，除数不可以为0&quot;);\n            &#125;catch(InputMismatchException ex)&#123;\n                System.out.println(&quot;对不起，你录入的数据不是int类型的数据&quot;);\n            &#125;catch(Exception ex)&#123;\n                System.out.println(&quot;对不起，你的程序出现异常&quot;);\n            &#125;finally &#123;\n                System.out.println(&quot;----谢谢你使用计算器111&quot;);\n            &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"异常的分类\"><a href=\"#异常的分类\" class=\"headerlink\" title=\"异常的分类\"></a>异常的分类</h1><p>【1】层次结构：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/49c007ec5d133e1d0e68827b9cf4b03e.png\" class=\"\">\n\n\n<p>注意：程序中语法错误，逻辑错误 都不属于上面的Error，Exception</p>\n<p>【2】运行时异常：</p>\n<pre><code class=\"java\">public class Test5 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //运行时异常：\n        int[] arr = &#123;1,2,3&#125;;\n        System.out.println(arr.length);\n        /\\*int[] arr2 = null;\n        System.out.println(arr2.length);\\*/\n            System.out.println(arr[10]);\n    &#125;\n&#125;\n</code></pre>\n<p>【3】检查异常：</p>\n<p>处理方式1：try-catch嵌套try-catch</p>\n<pre><code class=\"java\">public class Test6 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //检查异常：\n        try &#123;\n            try &#123;\n                Class.forName(&quot;com.msb.test01.Test&quot;).newInstance();\n            &#125; catch (InstantiationException e) &#123;\n                e.printStackTrace();\n            &#125; catch (IllegalAccessException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125; catch (ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>处理方式2：多重catch</p>\n<pre><code class=\"java\">public class Test6 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //检查异常：\n        try &#123;\n            Class.forName(&quot;com.msb.test01.Test&quot;).newInstance();\n        &#125; catch (ClassNotFoundException \\| InstantiationException \\| IllegalAccessException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>处理方式3：throws</p>\n<pre><code class=\"java\">public class Test6 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException &#123;\n        //检查异常：\n        Class.forName(&quot;com.msb.test01.Test&quot;).newInstance();\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"throw和throws的区别\"><a href=\"#throw和throws的区别\" class=\"headerlink\" title=\"throw和throws的区别\"></a>throw和throws的区别</h1><pre><code class=\"java\">import java.util.Scanner;\n\npublic class Test7 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws Exception &#123;\n        //实现一个功能：两个数相除，当除数为0的时候，程序出现异常。\n        /\\*try &#123;\n            devide();\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\\*/\n            devide();\n    &#125;\n    public static void devide() throws Exception &#123;\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入第一个数：&quot;);\n        int num1 = sc.nextInt();\n        System.out.println(&quot;请录入第二个数：&quot;);\n        int num2 = sc.nextInt();\n        if(num2 == 0 )&#123;//除数为0 ，制造异常。\n            //制造运行时异常：\n            /\\*throw new RuntimeException();\\*/\n                //制造检查异常：\n                /\\*try &#123;\n                    throw new Exception();\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\\*/\n                    throw new Exception();\n        &#125;else&#123;\n            System.out.println(&quot;商：&quot;+num1/num2);\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>总结：</p>\n<p>throw和throws的区别：</p>\n<p>（1）位置不同：</p>\n<p>throw：方法内部</p>\n<p>throws: 方法的签名处，方法的声明处</p>\n<p>（2）内容不同：</p>\n<p>throw+异常对象（检查异常，运行时异常）</p>\n<p>throws+异常的类型（可以多个类型，用，拼接）</p>\n<p>（3）作用不同：</p>\n<p>throw：异常出现的源头，制造异常。</p>\n<p>throws:在方法的声明处，告诉方法的调用者，这个方法中可能会出现我声明的这些异常。然后调用者对这个异常进行处理：</p>\n<p>要么自己处理要么再继续向外抛出异常</p>\n<h2 id=\"练习：\"><a href=\"#练习：\" class=\"headerlink\" title=\"练习：\"></a>练习：</h2><pre><code class=\"java\">\npublic class Student &#123;\n    private String name;\n    private int age;\n    private String sex;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public String getSex() &#123;\n        return sex;\n    &#125;\n\n    public void setSex(String sex) throws Exception &#123;\n        if(sex.equals(&quot;男&quot;)\\|\\|sex.equals(&quot;女&quot;))&#123;\n            this.sex = sex;\n        &#125;else&#123;//非男非女\n            //解决办法1：\n            /\\*this.sex = &quot;男&quot;;\\*/\n                //解决办法2：给个友好型提示，但是打印结果为默认的null效果\n                /\\*System.out.println(&quot;对不起，你的性别错误了&quot;);\\*/\n                //解决办法3：\n                //制造运行时异常：\n                /\\*throw new RuntimeException(&quot;性别不对！&quot;);\\*/\n                //制造检查异常\n                /\\*try &#123;\n                    throw new Exception();\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\\*/\n                    throw new Exception();\n        &#125;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n            &quot;name=&#39;&quot; + name + &#39;\\\\&#39;&#39; +\n            &quot;, age=&quot; + age +\n            &quot;, sex=&#39;&quot; + sex + &#39;\\\\&#39;&#39; +\n            &#39;&#125;&#39;;\n    &#125;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(String name, int age, String sex) &#123;\n        this.name = name;\n        this.age = age;\n        //this.sex = sex;\n        try &#123;\n            this.setSex(sex);\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;\n\n\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Student的对象：\n        /\\*Student s = new Student();\n        s.setName(&quot;菲菲&quot;);\n        s.setAge(19);\n        try &#123;\n            s.setSex(&quot;asdfasdfasdf&quot;);\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\n        System.out.println(s);\\*/\n\n            Student s2 = new Student(&quot;娜娜&quot;,21,&quot;asdfasdfasdf&quot;);\n        System.out.println(s2);\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"重载和重写的异常\"><a href=\"#重载和重写的异常\" class=\"headerlink\" title=\"重载和重写的异常\"></a>重载和重写的异常</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/cf74eead97b51814e21b234c60586c9a.png\" class=\"\">\n\n\n<p>【1】重载：</p>\n<pre><code class=\"java\">public class Demo &#123;\n    public void a() throws Exception&#123;\n\n    &#125;\n    public void a(int age) throws ArithmeticException&#123;\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>【2】重写：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/0ee7a011f038160bdfaa00237577e0c1.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/3243038ec840d0d3cc6dc909e039f3df.png\" class=\"\">\n\n\n<p>子类 &lt;&#x3D; 父类</p>\n<h1 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h1><p>自定义的异常可以继承：运行时异常</p>\n<pre><code class=\"java\">public class MyException extends RuntimeException &#123;\n\n    static final long serialVersionUID = -70348971907L;\n\n    public MyException()&#123;\n\n    &#125;\n    public MyException(String msg)&#123;\n        super(msg);\n    &#125;\n&#125;\n</code></pre>\n<p>也可以继承检查异常：</p>\n<pre><code class=\"java\">public class MyException extends Exception &#123;\n\n    static final long serialVersionUID = -70348971907L;\n\n    public MyException()&#123;\n\n    &#125;\n    public MyException(String msg)&#123;\n        super(msg);\n    &#125;\n&#125;\n\n</code></pre>\n<p>如果继承的是运行时异常，那么在使用的时候无需额外处理</p>\n<p>如果继承的是检查异常，那么使用的时候需要try-catch捕获或者throws向上抛</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}