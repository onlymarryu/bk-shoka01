<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>雾都博客 • Posts by &#34;流程控制&#34; category</title>
        <link>http://example.com</link>
        <description>记录美食每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>博客</category>
        <category>环境搭建</category>
        <category>分布式</category>
        <category>FastDFS</category>
        <category>Dubbo</category>
        <category>MySQL</category>
        <category>数据库基础</category>
        <category>数据库基本知识</category>
        <category>数据库</category>
        <category>框架</category>
        <category>ORM</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <category>RPC</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>SpringMVC</category>
        <category>JavaSE</category>
        <category>SpringSecurity</category>
        <category>-JavaSE</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
            <title>第4章_流程控制</title>
            <link>http://example.com/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
            <category>-JavaSE</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;第4章-流程控制&#34;&gt;&lt;a href=&#34;#第4章-流程控制&#34; class=&#34;headerlink&#34; title=&#34;第4章_流程控制&#34;&gt;&lt;/a&gt;第4章_流程控制&lt;/h1&gt;&lt;h1 id=&#34;引入&#34;&gt;&lt;a href=&#34;#引入&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;【1】流程控制的作用：&lt;/p&gt;
&lt;p&gt;流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。&lt;/p&gt;
&lt;p&gt;【2】控制语句的分类：&lt;/p&gt;
&lt;p&gt;控制语句分为三类：顺序、选择和循环。&lt;/p&gt;
&lt;p&gt;“顺序结构”代表“先执行a，再执行b”的逻辑。&lt;/p&gt;
&lt;p&gt;“条件判断结构”代表“如果…，则…”的逻辑。&lt;/p&gt;
&lt;p&gt;“循环结构”代表“如果…，则再继续…”的逻辑。&lt;/p&gt;
&lt;p&gt;三种流程控制语句就能表示所有的事情！不信，你可以试试拆分你遇到的各种事情。这三种基本逻辑结构是相互支撑的，它们共同构成了算法的基本结构，无论怎样复杂的逻辑结构，都可以通过它们来表达。所以任何一种高级语言都具备上述两种结构。&lt;/p&gt;
&lt;p&gt;本章是大家真正进入编程界的“门票”。&lt;/p&gt;
&lt;p&gt;【3】流程控制的流程：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0be7aaf463c4b8bcab05594f71875ce8.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;分支结构-选择结构&#34;&gt;&lt;a href=&#34;#分支结构-选择结构&#34; class=&#34;headerlink&#34; title=&#34;分支结构(选择结构)&#34;&gt;&lt;/a&gt;分支结构(选择结构)&lt;/h1&gt;&lt;h1 id=&#34;if&#34;&gt;&lt;a href=&#34;#if&#34; class=&#34;headerlink&#34; title=&#34;if&#34;&gt;&lt;/a&gt;if&lt;/h1&gt;&lt;h3 id=&#34;单分支&#34;&gt;&lt;a href=&#34;#单分支&#34; class=&#34;headerlink&#34; title=&#34;单分支&#34;&gt;&lt;/a&gt;单分支&lt;/h3&gt;&lt;p&gt;【1】语法结构:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;if(布尔表达式){   语句块  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;if语句对布尔表达式进行一次判定，若判定为真，则执行{}中的语句块，否则跳过该语句块。流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0931341f710ef8def2eeccb5d15e57c6.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestIf01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品
        //1.给出三个数：
        int num1 = 6;
        int num2 = 2;
        int num3 = 3;
        //2.求和
        int sum = 0;
        sum += num1;
        sum += num2;
        sum += num3;
        System.out.println(&amp;quot;和为：&amp;quot;+sum);

        //3.根据和判断奖品：
        //如果和大于等于14，那么就是一等奖
        if(sum\&amp;gt;=14)&amp;#123;
            System.out.println(&amp;quot;一等奖&amp;quot;);
            System.out.println(&amp;quot;恭喜你很幸运，中了一等奖&amp;quot;);
        &amp;#125;

        if(sum\&amp;gt;=10&amp;amp;&amp;amp;sum\&amp;lt;14)&amp;#123;
            System.out.println(&amp;quot;二等奖&amp;quot;);
        &amp;#125;

        if(sum\&amp;gt;=6&amp;amp;&amp;amp;sum\&amp;lt;10)&amp;#123;
            System.out.println(&amp;quot;三等奖&amp;quot;);
        &amp;#125;

        if(sum\&amp;lt;6)&amp;#123;
            System.out.println(&amp;quot;四等奖&amp;quot;);
        &amp;#125;

        /\*
            if-单分支：
                （1）结构：
                if(条件表达式，这个表达式的结果是布尔值：要么是false，要么是true)&amp;#123;
                    //如果上面()中的表达式返回结果是true，那么执行&amp;#123;&amp;#125;中代码
                    //如果上面()中的表达式返回结果是false ，那么不执行&amp;#123;&amp;#125;中代码
                    //PS:&amp;#123;&amp;#125;中的代码是否执行，取决于()中表达式的返回结果
                &amp;#125;
        （2）上面的代码中，我用四个单分支拼凑出四个选择，每个选择是独立的，依次判断执行的
            （3）if后面的()中的条件，要按照自己需求尽量完善
            （4）&amp;#123;&amp;#125;可以省略不写,但是一旦省略，这个if就只负责后面的一句话，所以我们不建议初学者省略
            \*/
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;多分支&#34;&gt;&lt;a href=&#34;#多分支&#34; class=&#34;headerlink&#34; title=&#34;多分支&#34;&gt;&lt;/a&gt;多分支&lt;/h3&gt;&lt;p&gt;【1】语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;if(布尔表达式1) {   语句块1;  } else if(布尔表达式2) {   语句块2;  }……  else if(布尔表达式n){   语句块n;  } else {   语句块n+1;  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;当布尔表达式1为真时，执行语句块1；否则，判断布尔表达式2，当布尔表达式2为真时，执行语句块2；否则，继续判断布尔表达式3······；如果1~n个布尔表达式均判定为假时，则执行语句块n+1，也就是else部分。流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/c88bacdaa34dd27e9d243e5982d3ed6f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】数轴分析：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/7dd5d0a3ce4defddad8b915dbd61c4fd.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestIf02&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品
        //1.给出三个数：
        int num1 = 6;
        int num2 = 4;
        int num3 = 2;
        //2.求和
        int sum = 0;
        sum += num1;
        sum += num2;
        sum += num3;
        System.out.println(&amp;quot;和为：&amp;quot;+sum);

        //3.根据和判断奖品：
        /\*
            利用一个多分支
            【1】结构：
            if()&amp;#123;

            &amp;#125;else if()&amp;#123;

            &amp;#125;else if()&amp;#123;

            &amp;#125;...
                else&amp;#123;

                &amp;#125;
        【2】else:隐藏了一个条件，跟上面分支条件表达式相反的功能 (详见数轴分析)
            【3】多分支：好处：只要满足一个 分支以后，后面的分支就不需要判断了 --》效率高
            【4】我们写代码的时候，尽量保证else的存在--》else分支相当于“兜底”“备胎”的作用，别的分支都不走，就会走这个分支了
            \*/
            if(sum\&amp;gt;=14)&amp;#123;
                System.out.println(&amp;quot;一等奖&amp;quot;);
            &amp;#125;else if(sum\&amp;gt;=10)&amp;#123;//隐藏了sum\&amp;lt;14
                System.out.println(&amp;quot;二等奖&amp;quot;);
            &amp;#125;else if(sum\&amp;gt;=6)&amp;#123;//隐藏了sum\&amp;lt;10
                System.out.println(&amp;quot;三等奖&amp;quot;);
            &amp;#125;else&amp;#123;//隐藏了sum\&amp;lt;6
                System.out.println(&amp;quot;四等奖&amp;quot;);
            &amp;#125;



    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;双分支&#34;&gt;&lt;a href=&#34;#双分支&#34; class=&#34;headerlink&#34; title=&#34;双分支&#34;&gt;&lt;/a&gt;双分支&lt;/h3&gt;&lt;p&gt;【1】语法结构:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;if(布尔表达式){  语句块1  }else{   语句块2  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;当布尔表达式为真时，执行语句块1，否则，执行语句块2。也就是else部分。流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/27925a9f266f6f323822dfd891938abf.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;随机数&#34;&gt;&lt;a href=&#34;#随机数&#34; class=&#34;headerlink&#34; title=&#34;随机数&#34;&gt;&lt;/a&gt;随机数&lt;/h3&gt;&lt;p&gt;随机数：这个数在生成之前我们不确定这个数是多少，不可知&lt;/p&gt;
&lt;p&gt;在java中依靠一个类：Math类帮助我们生成，这个类中有一个方法专门用来生成随机数：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/dc25d09059fb76e3d1c8468c2bc3b071.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;Math.random() ——-&amp;gt; [0.0,1.0)&lt;/p&gt;
&lt;p&gt;Math.random()*6 —–&amp;gt;[0.0,6.0)&lt;/p&gt;
&lt;p&gt;(int)(Math.random()*6) —–&amp;gt;[0,5]&lt;/p&gt;
&lt;p&gt;(int)(Math.random()*6) +1 —–&amp;gt;[1,6]&lt;/p&gt;
&lt;p&gt;应用到程序中：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int num1 = (int)(Math.random()\*6) +1;
int num2 = (int)(Math.random()\*6) +1;
int num3 = (int)(Math.random()\*6) +1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;练习：&lt;/p&gt;
&lt;p&gt;[32,98] - [0,66]+32 - (int)(Math.random()*67) + 32&lt;/p&gt;
&lt;h3 id=&#34;分支的嵌套使用&#34;&gt;&lt;a href=&#34;#分支的嵌套使用&#34; class=&#34;headerlink&#34; title=&#34;分支的嵌套使用&#34;&gt;&lt;/a&gt;分支的嵌套使用&lt;/h3&gt;&lt;p&gt;分支结构练习1&lt;/p&gt;
&lt;p&gt;练习：&lt;/p&gt;
&lt;p&gt;会员购物时，不同积分享受的折扣不同，规则如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/83f88cbff6a2d8323bd5195d7274fb6e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;计算会员购物时获得的折扣，效果如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/84cd71a572646a9eb1d109050b80331c.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;本题主要考的是 程序的优化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestIf04&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1.给出积分：
        Scanner sc = new Scanner(System.in);
        System.out.print(&amp;quot;请输入会员积分：&amp;quot;);

        //先判断键盘录入的数据是不是int类型的
        if(sc.hasNextInt()==true)&amp;#123;//是int类型数据：
            //将这个int类型的数据接收：
            int score = sc.nextInt();
            //判断这个积分是否是正数：
            if(score\&amp;gt;=0)&amp;#123;
                String discount = &amp;quot;&amp;quot;;
                //2.根据积分判断折扣：
                if(score\&amp;gt;=8000)&amp;#123;
                    discount = &amp;quot;0.6&amp;quot;;
                &amp;#125;else if(score\&amp;gt;=4000)&amp;#123;
                    discount = &amp;quot;0.7&amp;quot;;
                &amp;#125;else if(score\&amp;gt;=2000)&amp;#123;
                    discount = &amp;quot;0.8&amp;quot;;
                &amp;#125;else&amp;#123;
                    discount = &amp;quot;0.9&amp;quot;;
                &amp;#125;
                System.out.println(&amp;quot;该会员享受的折扣为：&amp;quot;+discount);

            &amp;#125;else&amp;#123;//score\&amp;lt;0
                System.out.println(&amp;quot;对不起，你录入的积分是负数！不符合需求！&amp;quot;);
            &amp;#125;
        &amp;#125;else&amp;#123;//不是int类型的数据
            System.out.println(&amp;quot;你录入的积分不是整数！&amp;quot;);
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分支结构练习2&lt;/p&gt;
&lt;p&gt;练习：&lt;/p&gt;
&lt;p&gt;小朋友搬桌子：&lt;/p&gt;
&lt;p&gt;年龄大于7岁，可以搬桌子；&lt;/p&gt;
&lt;p&gt;如果年龄大于5岁，性别是男，可以搬桌子；&lt;/p&gt;
&lt;p&gt;否则不可以搬动桌子，提示：你还太小了&lt;/p&gt;
&lt;p&gt;本题主要考的是：逻辑&lt;/p&gt;
&lt;p&gt;方式1：性别用0或者1接收：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestIf05&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1.录入小朋友的年龄：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入小朋友的年龄：&amp;quot;);
        int age = sc.nextInt();

        //2.根据年龄判断：
        if(age\&amp;gt;=7)&amp;#123;
            System.out.println(&amp;quot;yes&amp;quot;);
        &amp;#125;else if(age\&amp;gt;=5)&amp;#123;
            //录入小朋友的性别；
            System.out.println(&amp;quot;请录入小朋友的性别：男：1 女 ：0&amp;quot;);
            int sex = sc.nextInt();
            if(sex==1)&amp;#123;//男生
                System.out.println(&amp;quot;yes&amp;quot;);
            &amp;#125;else&amp;#123;//女孩
                System.out.println(&amp;quot;no&amp;quot;);
            &amp;#125;
        &amp;#125;else&amp;#123;//age\&amp;lt;5
            System.out.println(&amp;quot;no&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方式2：性别用男或者女接收：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestIf06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1.录入小朋友的年龄：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入小朋友的年龄：&amp;quot;);
        int age = sc.nextInt();

        //2.根据年龄判断：
        if(age\&amp;gt;=7)&amp;#123;
            System.out.println(&amp;quot;yes&amp;quot;);
        &amp;#125;else if(age\&amp;gt;=5)&amp;#123;
            //录入小朋友的性别；
            System.out.println(&amp;quot;请录入小朋友的性别：&amp;quot;);
            String str = sc.next();
            char sex = str.charAt(0);
            if(sex==&amp;#39;男&amp;#39;)&amp;#123;
                System.out.println(&amp;quot;yes&amp;quot;);
            &amp;#125;else&amp;#123;
                System.out.println(&amp;quot;no&amp;quot;);
            &amp;#125;
        &amp;#125;else&amp;#123;//age\&amp;lt;5
            System.out.println(&amp;quot;no&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;switch&#34;&gt;&lt;a href=&#34;#switch&#34; class=&#34;headerlink&#34; title=&#34;switch&#34;&gt;&lt;/a&gt;switch&lt;/h2&gt;&lt;p&gt;【1】switch多分支结构(多值情况)&lt;/p&gt;
&lt;p&gt;语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;switch (表达式) {   case 值1:   语句序列1;   [break];   case 值2:   语句序列2;   [break];   … … … … …   [default:默认语句;]  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;switch语句会根据表达式的值从相匹配的case标签处开始执行，一直执行到break语句处或者是switch语句的末尾。如果表达式的值与任一case值不匹配，则进入default语句（如果存在default语句的情况）。根据表达式值的不同可以执行许多不同的操作。switch语句中case标签在JDK1.5之前必须是整数（long类型除外）或者枚举，不能是字符串，在JDK1.7之后允许使用字符串(String)。大家要注意，当布尔表达式是等值判断的情况，可以使用if-else if-else多分支结构或者switch结构，如果布尔表达式区间判断的情况，则只能使用if-else if-else多分支结构。switch多分支结构的流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2f1d12c7b2e144d52b36c7aace3d6024.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】练习&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestSwitch&amp;#123;
    public static void main(String[] args)&amp;#123;
        /\*
            实现一个功能：
            根据给出的学生分数，判断学生的等级：
            \&amp;gt;=90 -----A
            \&amp;gt;=80 -----B
            \&amp;gt;=70 -----C
            \&amp;gt;=60 -----D
            \&amp;lt;60 -----E

            用if分支：
            if(score\&amp;gt;=90)&amp;#123;

            &amp;#125;else if(score\&amp;gt;=80)&amp;#123;

            &amp;#125;
        \*/
            //1.给出学生的成绩：
            int score = 167;
        //2.根据成绩判断学生的等级：
        switch(score/10)&amp;#123;
            case 10 :
            case 9 : System.out.println(&amp;quot;A级&amp;quot;);break;
            case 8 : System.out.println(&amp;quot;B级&amp;quot;);break;
            case 7 : System.out.println(&amp;quot;C级&amp;quot;);break;
            case 6 : System.out.println(&amp;quot;D级&amp;quot;);break;
            default:System.out.println(&amp;quot;成绩错误&amp;quot;);break;
            case 5 :
            case 4 :
            case 3 :
            case 2 :
            case 1 :
            case 0 : System.out.println(&amp;quot;E级&amp;quot;);break;

        &amp;#125;
        /\*
            【1】语法结构：
            switch()&amp;#123;
                case \* :
                case \* :
                    .......
            &amp;#125;
        【2】switch后面是一个()，()中表达式返回的结果是一个等值，这个等值的类型可以为：
            int,byte,short,char,String,枚举类型
            【3】这个()中的等值会依次跟case后面的值进行比较，如果匹配成功，就执行:后面的代码
            【4】为了防止代码的“穿透”效果：在每个分支后面加上一个关键词break，遇到break这个分支就结束了
            【5】类似else的“兜底”“备胎”的分支：default分支
            【6】default分支可以写在任意的位置上，但是如果没有在最后一行，后面必须加上break关键字，
            如果在最后一行的话，break可以省略
            【7】相邻分支逻辑是一样的，那么就可以只保留最后一个分支，上面的都可以省去不写了
            【8】switch分支和if分支区别：
            表达式是等值判断的话--》if ，switch都可以
            如果表达式是区间判断的情况---》if最好
            【9】switch应用场合：就是等值判断，等值的情况比较少的情况下
            \*/
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;循环结构&#34;&gt;&lt;a href=&#34;#循环结构&#34; class=&#34;headerlink&#34; title=&#34;循环结构&#34;&gt;&lt;/a&gt;循环结构&lt;/h1&gt;&lt;h2 id=&#34;while&#34;&gt;&lt;a href=&#34;#while&#34; class=&#34;headerlink&#34; title=&#34;while&#34;&gt;&lt;/a&gt;while&lt;/h2&gt;&lt;p&gt;【1】语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;while (布尔表达式) {   循环体;  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;在循环刚开始时，会计算一次“布尔表达式”的值，若条件为真，执行循环体。而对于后来每一次额外的循环，都会在开始前重新计算一次。&lt;/p&gt;
&lt;p&gt;语句中应有使循环趋向于结束的语句，否则会出现无限循环–––”死”循环。&lt;/p&gt;
&lt;p&gt;while循环结构流程图如图所示:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/d9a799db990ed9073c404c284874e3c7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】练习：1+2+3+4+5&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestWhile&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：1+2+3+4+5
        //1.定义变量：
        int num1 = 1;
        int num2 = 2;
        int num3 = 3;
        int num4 = 4;
        int num5 = 5;
        //2.定义一个求和变量，用来接收和：
        int sum = 0;
        sum += num1;
        sum += num2;
        sum += num3;
        sum += num4;
        sum += num5;

        //3.输出和
        System.out.println(sum);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码缺点：变量的定义个数太多了&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestWhile&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：1+2+3+4+5
        //1.定义变量：
        int num = 1;
        //2.定义一个求和变量，用来接收和：
        int sum = 0;
        sum += num;
        num++;
        sum += num;
        num++;
        sum += num;
        num++;
        sum += num;
        num++;
        sum += num;
        num++;

        //3.输出和
        System.out.println(sum);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码缺点：重复写的代码太多了&lt;/p&gt;
&lt;p&gt;解决：—》引入java中循环结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestWhile&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：1+2+3+4+5
        //1.定义变量：
        int num = 1;**[1]条件初始化**
            //2.定义一个求和变量，用来接收和：
            int sum = 0;
        while(num\&amp;lt;=5)&amp;#123;**[2]条件判断**
            sum += num;**[3]循环体**
                num++;**[4]迭代**
                      &amp;#125;
        //3.输出和
        System.out.println(sum);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;【1】循环作用：将部分代码重复执行。&lt;/p&gt;
&lt;p&gt;循环只是提高了程序员编写代码的效率，但是底层执行的时候依然是重复执行。&lt;/p&gt;
&lt;p&gt;【2】循环四要素：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/ca11475c2f0a778cad36886cf66366a1.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;初始化谁，就判断谁，判断谁，就迭代谁&lt;/p&gt;
&lt;p&gt;执行过程：[1][2][3][4] [2][3][4] [2][3][4]。。。。&lt;/p&gt;
&lt;p&gt;【3】循环的执行过程：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2ff230667c913bd5e87743476c334561.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】验证循环的执行过程：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/a5f3022962bd6c9af4a1e9a1e9da5f56.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;练习&#34;&gt;&lt;a href=&#34;#练习&#34; class=&#34;headerlink&#34; title=&#34;练习&#34;&gt;&lt;/a&gt;练习&lt;/h3&gt;&lt;p&gt;【1】1+2+3+4+5+。。。。+100&lt;/p&gt;
&lt;p&gt;【2】2+4+6+8+。。。。+998+1000&lt;/p&gt;
&lt;p&gt;【3】5+10+15+20+。。。+100&lt;/p&gt;
&lt;p&gt;【4】99+97+95+。。5+3+1&lt;/p&gt;
&lt;p&gt;【5】1*3*5*7*9*11*13&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestWhile02&amp;#123;
    public static void main(String[] args)&amp;#123;
        /\*
            【1】1+2+3+4+5+。。。。+100
            int i = 1;
        int sum = 0;
        while(i\&amp;lt;=100)&amp;#123;
            sum += i;
            i++;
        &amp;#125;
        System.out.println(sum);
        【2】2+4+6+8+。。。。+998+1000
            int i = 2;
        int sum = 0;
        while(i\&amp;lt;=1000)&amp;#123;
            sum += i;
            i = i+2;
        &amp;#125;
        System.out.println(sum);
        【3】5+10+15+20+。。。+100
            int i = 5;
        int sum = 0;
        while(i\&amp;lt;=100)&amp;#123;
            sum += i;
            i = i+5;
        &amp;#125;
        System.out.println(sum);

        【4】99+97+95+。。5+3+1
            int i = 99;
        int sum = 0;
        while(i\&amp;gt;=1)&amp;#123;
            sum += i;
            i = i-2;
        &amp;#125;
        System.out.println(sum);
        【5】1\*3\*5\*7\*9\*11\*13

            \*/
            int i = 1;
        int result = 1;
        while(i\&amp;lt;=13)&amp;#123;
            result \*= i;
            i = i+2;
        &amp;#125;
        System.out.println(result);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;do-while&#34;&gt;&lt;a href=&#34;#do-while&#34; class=&#34;headerlink&#34; title=&#34;do-while&#34;&gt;&lt;/a&gt;do-while&lt;/h2&gt;&lt;p&gt;【1】语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;do {   循环体;   } while(布尔表达式) ;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;do-while循环结构会先执行循环体，然后再判断布尔表达式的值，若条件为真，执行循环体，当条件为假时结束循环。do-while循环的循环体至少执行一次。do-while循环结构流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0a5138cc1b27bf3150998a807c0084ff.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestDoWhile&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1+2+3+4+...100
        //while方式:
        /\*
            int i = 101;
        int sum = 0;
        while(i\&amp;lt;=100)&amp;#123;
            sum += i;
            i++;
        &amp;#125;
        System.out.println(i);//101
        System.out.println(sum);//0
        \*/
            //do-while方式：

            int i = 101;
        int sum = 0;
        do&amp;#123;
            sum += i;
            i++;
        &amp;#125;while(i\&amp;lt;=100);//一定要注意写这个分号，否则编译出错
        System.out.println(i);//102
        System.out.println(sum);//101
        /\*
            【1】while和do-while的区别:
        while:先判断，再执行
            do-while:先执行，再判断---》至少被执行一次，从第二次开始才进行判断
                【2】什么场合使用do-while:

        while(考试是否通过)&amp;#123;
            考试；
        &amp;#125;
        \---》不合适
            do&amp;#123;
                考试；
            &amp;#125;while(考试是否通过);
        \---》合适
            \*/

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;for&#34;&gt;&lt;a href=&#34;#for&#34; class=&#34;headerlink&#34; title=&#34;for&#34;&gt;&lt;/a&gt;for&lt;/h2&gt;&lt;p&gt;【1】语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;for (初始表达式; 布尔表达式; 迭代因子) {   循环体;  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。for循环在第一次反复之前要进行初始化，即执行初始表达式；随后，对布尔表达式进行判定，若判定结果为true，则执行循环体，否则，终止循环；最后在每一次反复的时候，进行某种形式的“步进”，即执行迭代因子。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化部分设置循环变量的初值&lt;/li&gt;
&lt;li&gt;条件判断部分为任意布尔表达式&lt;/li&gt;
&lt;li&gt;迭代因子控制循环变量的增减&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;for循环在执行条件判定后，先执行的循环体部分，再执行步进。&lt;/p&gt;
&lt;p&gt;for循环结构的流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/e65934410d1164966962fc0ec10b942f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1+2+3+..+100
        //while:
        /\*int i = 1;
        int sum = 0;
        while(i\&amp;lt;=100)&amp;#123;
            sum += i;
            i++;
        &amp;#125;
        System.out.println(sum);
        \*/

            //for:
            int sum = 0;
        int i;
        for(i = 1;i\&amp;lt;=100;i++)&amp;#123;
            sum += i;
        &amp;#125;
        System.out.println(sum);
        System.out.println(i);

        /\*
            【1】for的结构：
            for(条件初始化;条件判断;迭代)&amp;#123;
                循环体；
            &amp;#125;

        【2】i的作用域：作用范围：离变量最近&amp;#123;&amp;#125; ---\&amp;gt;可以自己去控制
            【3】for循环格式特别灵活：格式虽然很灵活，但是我们自己写代码的时候不建议灵活着写。
            for(;;)&amp;#123;&amp;#125; --\&amp;gt;死循环

                int i = 1;
        for(;i\&amp;lt;=100;)&amp;#123;
            sum += i;
            i++;
        &amp;#125;

        【4】死循环：
            for(;;)&amp;#123;&amp;#125;

        while(true)&amp;#123;&amp;#125;

        do&amp;#123;

        &amp;#125;while(true);

        【5】循环分为两大类：
            第一类：当型 while()&amp;#123;&amp;#125; for(;;)&amp;#123;&amp;#125;
        第二类：直到型 do&amp;#123;&amp;#125;while();

        【6】以后常用：for循环
            【7】do-while,while,for循环谁的效率高？ 一样高
                \*/
                &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;关键字&#34;&gt;&lt;a href=&#34;#关键字&#34; class=&#34;headerlink&#34; title=&#34;关键字&#34;&gt;&lt;/a&gt;关键字&lt;/h2&gt;&lt;p&gt;在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。&lt;/p&gt;
&lt;p&gt;continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。&lt;/p&gt;
&lt;p&gt;return的作用,结束当前所在方法的执行.&lt;/p&gt;
&lt;h3 id=&#34;break&#34;&gt;&lt;a href=&#34;#break&#34; class=&#34;headerlink&#34; title=&#34;break&#34;&gt;&lt;/a&gt;break&lt;/h3&gt;&lt;p&gt;【1】通过练习感受break的作用：作用：停止循环：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor02&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：求1-100的和，当和第一次超过300的时候，停止程序
        int sum = 0;
        for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
            sum += i;
            if(sum\&amp;gt;300)&amp;#123;//当和第一次超过300的时候
                //停止循环
                break;//停止循环
            &amp;#125;
            System.out.println(sum);
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】加深理解：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor03&amp;#123;
    public static void main(String[] args)&amp;#123;
        //break的作用：停止最近的循环
        /\*
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                System.out.println(i);
                if(i==36)&amp;#123;
                    break;//1-36
                &amp;#125;
            &amp;#125;
        \*/
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                System.out.println(i);
                while(i==36)&amp;#123;
                    break; //1-100 ---》break停止的是while循环，而不是外面的for循环
                &amp;#125;
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】break带标签的使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor04&amp;#123;
    public static void main(String[] args)&amp;#123;
        outer: ----》定义标签结束的位置
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                System.out.println(i);
                while(i==36)&amp;#123;
                    break outer; ----》根据标签来结束循环
                &amp;#125;
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多层循环也可以使用标签，按照自己的需求去设定即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/edd6160d15c42695164e614a174da464.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;continue&#34;&gt;&lt;a href=&#34;#continue&#34; class=&#34;headerlink&#34; title=&#34;continue&#34;&gt;&lt;/a&gt;continue&lt;/h3&gt;&lt;p&gt;【1】通过案例感受continue的作用：结束本次循环，继续下一次循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor05&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：输出1-100中被6整除的数：
        //方式1：
        /\*
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                if(i%6==0)&amp;#123;//被6整除
                    System.out.println(i);
                &amp;#125;
            &amp;#125;
        \*/

            //方式2：
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                if(i%6!=0)&amp;#123;//不被6整除
                    continue;//停止本次循环，继续下一次循环
                &amp;#125;
                System.out.println(i);
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】加深理解：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //continue:结束本次离它近的循环，继续下一次循环
        /\*
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                if(i==36)&amp;#123;
                    continue;//1-100中间没有36
                &amp;#125;
                System.out.println(i);
            &amp;#125;
        \*/

            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                while(i==36)&amp;#123;
                    System.out.println(&amp;quot;------&amp;quot;);
                    continue; //1-35+死循环
                &amp;#125;
                System.out.println(i);
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】continue带标签的使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor07&amp;#123;
    public static void main(String[] args)&amp;#123;

        outer:
        for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
            while(i==36)&amp;#123;
                continue outer; //1-100没有36
            &amp;#125;
            System.out.println(i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/fc2cc84a39aeaca59d8b618b6a71a46c.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;return&#34;&gt;&lt;a href=&#34;#return&#34; class=&#34;headerlink&#34; title=&#34;return&#34;&gt;&lt;/a&gt;return&lt;/h3&gt;&lt;p&gt;return的作用：跟循环无关，就是程序中遇到return那么return所在的那个方法就停止执行了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor08&amp;#123;
    public static void main(String[] args)&amp;#123;
        //return:遇到return结束当前正在执行的方法
        for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
            while(i==36)&amp;#123;
                return;
            &amp;#125;
            System.out.println(i);
        &amp;#125;

        System.out.println(&amp;quot;-----&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;循环练习&#34;&gt;&lt;a href=&#34;#循环练习&#34; class=&#34;headerlink&#34; title=&#34;循环练习&#34;&gt;&lt;/a&gt;循环练习&lt;/h2&gt;&lt;p&gt;【1】练习1：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor09&amp;#123;
    public static void main(String[] args)&amp;#123;
        /\* 输出1-100中被5整除的数,每行输出6个\*/
            //引入一个计数器：
            int count = 0;//初始值为0
        for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
            if(i%5==0)&amp;#123;//被5整除的数
                System.out.print(i+&amp;quot;\\t&amp;quot;);
                count++;//每在控制台输出一个数，count就加1操作
                if(count%6==0)&amp;#123;
                    System.out.println();//换行
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】练习2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestFor10&amp;#123;
    public static void main(String[] args)&amp;#123;
        /\*
            实现一个功能：
            【1】请录入10个整数，当输入的数是666的时候，退出程序。
            【2】判断其中录入正数的个数并输出。
            【3】判断系统的退出状态：是正常退出还是被迫退出。
            \*/
            //引入一个计数器：
            int count = 0;
        //引入一个布尔类型的变量：
        boolean flag = true; //---》理解为一个“开关”，默认情况下开关是开着的
        Scanner sc = new Scanner(System.in);
        for(int i=1;i\&amp;lt;=10;i++)&amp;#123;//i:循环次数
            System.out.println(&amp;quot;请录入第&amp;quot;+i+&amp;quot;个数：&amp;quot;);
            int num = sc.nextInt();
            if(num\&amp;gt;0)&amp;#123;//录入的正数
                count++;
            &amp;#125;
            if(num==666)&amp;#123;
                flag = false;//当遇到666的时候，“开关”被关上了
                //退出循环：
                break;
            &amp;#125;

        &amp;#125;

        System.out.println(&amp;quot;你录入的正数的个数为：&amp;quot;+count);


        if(flag)&amp;#123;//flag==true
            System.out.println(&amp;quot;正常退出！&amp;quot;);
        &amp;#125;else&amp;#123;//flag==false
            System.out.println(&amp;quot;被迫退出！&amp;quot;);
        &amp;#125;



    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;循环的嵌套使用&#34;&gt;&lt;a href=&#34;#循环的嵌套使用&#34; class=&#34;headerlink&#34; title=&#34;循环的嵌套使用&#34;&gt;&lt;/a&gt;循环的嵌套使用&lt;/h2&gt;&lt;h3 id=&#34;双重循环&#34;&gt;&lt;a href=&#34;#双重循环&#34; class=&#34;headerlink&#34; title=&#34;双重循环&#34;&gt;&lt;/a&gt;双重循环&lt;/h3&gt;&lt;p&gt;乘法口诀&lt;/p&gt;
&lt;p&gt;乘法口诀：&lt;/p&gt;
&lt;p&gt;1*1&amp;#x3D;1&lt;/p&gt;
&lt;p&gt;1*2&amp;#x3D;2 2*2&amp;#x3D;4&lt;/p&gt;
&lt;p&gt;1*3&amp;#x3D;3 2*3&amp;#x3D;6 3*3&amp;#x3D;9&lt;/p&gt;
&lt;p&gt;1*4&amp;#x3D;4 2*4&amp;#x3D;8 3*4&amp;#x3D;12 4*4&amp;#x3D;16&lt;/p&gt;
&lt;p&gt;1*5&amp;#x3D;5 2*5&amp;#x3D;10 3*5&amp;#x3D;15 4*5&amp;#x3D;20 5*5&amp;#x3D;25&lt;/p&gt;
&lt;p&gt;1*6&amp;#x3D;6 2*6&amp;#x3D;12 3*6&amp;#x3D;18 4*6&amp;#x3D;24 5*6&amp;#x3D;30 6*6&amp;#x3D;36&lt;/p&gt;
&lt;p&gt;1*7&amp;#x3D;7 2*7&amp;#x3D;14 3*7&amp;#x3D;21 4*7&amp;#x3D;28 5*7&amp;#x3D;35 6*7&amp;#x3D;42 7*7&amp;#x3D;49&lt;/p&gt;
&lt;p&gt;1*8&amp;#x3D;8 2*8&amp;#x3D;16 3*8&amp;#x3D;24 4*8&amp;#x3D;32 5*8&amp;#x3D;40 6*8&amp;#x3D;48 7*8&amp;#x3D;56 8*8&amp;#x3D;64&lt;/p&gt;
&lt;p&gt;1*9&amp;#x3D;9 2*9&amp;#x3D;18 3*9&amp;#x3D;27 4*9&amp;#x3D;36 5*9&amp;#x3D;45 6*9&amp;#x3D;54 7*9&amp;#x3D;63 8*9&amp;#x3D;72 9*9&amp;#x3D;81&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor11&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1\*6=6 2\*6=12 3\*6=18 4\*6=24 5\*6=30 6\*6=36
        /\*
            System.out.print(&amp;quot;1\*6=6&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;2\*6=12&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;3\*6=18&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;4\*6=24&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;5\*6=30&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;6\*6=36&amp;quot;+&amp;quot;\\t&amp;quot;);

        for(int i=1;i\&amp;lt;=6;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*6=&amp;quot;+i\*6+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();

        //1\*7=7 2\*7=14 3\*7=21 4\*7=28 5\*7=35 6\*7=42 7\*7=49
        for(int i=1;i\&amp;lt;=7;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*7=&amp;quot;+i\*7+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();

        //1\*8=8 2\*8=16 3\*8=24 4\*8=32 5\*8=40 6\*8=48 7\*8=56 8\*8=64
        for(int i=1;i\&amp;lt;=8;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*8=&amp;quot;+i\*8+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();
        \*/

            for(int j=1;j\&amp;lt;=9;j++)&amp;#123;
                for(int i=1;i\&amp;lt;=j;i++)&amp;#123;
                    System.out.print(i+&amp;quot;\*&amp;quot;+j+&amp;quot;=&amp;quot;+i\*j+&amp;quot;\\t&amp;quot;);
                &amp;#125;
                //换行
                System.out.println();
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1*9&amp;#x3D;9 2*9&amp;#x3D;18 3*9&amp;#x3D;27 4*9&amp;#x3D;36 5*9&amp;#x3D;45 6*9&amp;#x3D;54 7*9&amp;#x3D;63 8*9&amp;#x3D;72 9*9&amp;#x3D;81&lt;/p&gt;
&lt;p&gt;1*8&amp;#x3D;8 2*8&amp;#x3D;16 3*8&amp;#x3D;24 4*8&amp;#x3D;32 5*8&amp;#x3D;40 6*8&amp;#x3D;48 7*8&amp;#x3D;56 8*8&amp;#x3D;64&lt;/p&gt;
&lt;p&gt;1*7&amp;#x3D;7 2*7&amp;#x3D;14 3*7&amp;#x3D;21 4*7&amp;#x3D;28 5*7&amp;#x3D;35 6*7&amp;#x3D;42 7*7&amp;#x3D;49&lt;/p&gt;
&lt;p&gt;1*6&amp;#x3D;6 2*6&amp;#x3D;12 3*6&amp;#x3D;18 4*6&amp;#x3D;24 5*6&amp;#x3D;30 6*6&amp;#x3D;36&lt;/p&gt;
&lt;p&gt;1*5&amp;#x3D;5 2*5&amp;#x3D;10 3*5&amp;#x3D;15 4*5&amp;#x3D;20 5*5&amp;#x3D;25&lt;/p&gt;
&lt;p&gt;1*4&amp;#x3D;4 2*4&amp;#x3D;8 3*4&amp;#x3D;12 4*4&amp;#x3D;16&lt;/p&gt;
&lt;p&gt;1*3&amp;#x3D;3 2*3&amp;#x3D;6 3*3&amp;#x3D;9&lt;/p&gt;
&lt;p&gt;1*2&amp;#x3D;2 2*2&amp;#x3D;4&lt;/p&gt;
&lt;p&gt;1*1&amp;#x3D;1&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor12&amp;#123;
    public static void main(String[] args)&amp;#123;

        /\*
            //1\*8=8 2\*8=16 3\*8=24 4\*8=32 5\*8=40 6\*8=48 7\*8=56 8\*8=64
            for(int i=1;i\&amp;lt;=8;i++)&amp;#123;
                System.out.print(i+&amp;quot;\*8=&amp;quot;+i\*8+&amp;quot;\\t&amp;quot;);
            &amp;#125;
        //换行
        System.out.println();


        //1\*7=7 2\*7=14 3\*7=21 4\*7=28 5\*7=35 6\*7=42 7\*7=49
        for(int i=1;i\&amp;lt;=7;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*7=&amp;quot;+i\*7+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();

        //1\*6=6 2\*6=12 3\*6=18 4\*6=24 5\*6=30 6\*6=36
        for(int i=1;i\&amp;lt;=6;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*6=&amp;quot;+i\*6+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();




        \*/

            for(int j=9;j\&amp;gt;=1;j--)&amp;#123;
                for(int i=1;i\&amp;lt;=j;i++)&amp;#123;
                    System.out.print(i+&amp;quot;\*&amp;quot;+j+&amp;quot;=&amp;quot;+i\*j+&amp;quot;\\t&amp;quot;);
                &amp;#125;
                //换行
                System.out.println();
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打印各种形状&lt;/p&gt;
&lt;p&gt;【1】长方形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/34a4f4344ea5d5ffd88f932d98827359.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;for(int j=1;j\&amp;lt;=4;j++)&amp;#123;//j:控制行数
    //\*\*\*\*\*\*\*\*\*
    for(int i=1;i\&amp;lt;=9;i++)&amp;#123;//i:控制\*的个数
        System.out.print(&amp;quot;\*&amp;quot;);
    &amp;#125;
    //换行：
    System.out.println();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】距离前面有一定空隙的长方形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/53f97abfc48cab59034a76006c1c1c71.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;5;i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;9;i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【3】平行四边形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/67d40798af8ec1921f09d49c09d0137c.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(9-j);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;9;i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【4】三角形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/49555021efb328437055bea6119ae9f2.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(9-j);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(2*j-1);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【5】菱形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/d798118edc1454a1bb0e83bb70d60758.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;上面三角形：&lt;/li&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(9-j);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(2*j-1);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;下面三角形：&lt;/li&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;3;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(j+5);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(7-2*j);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【6】空心菱形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/7df2cd3380e772f02c2dcbcc4d6a3438.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;上面三角形：&lt;/li&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(9-j);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(2*j-1);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;if(i&amp;#x3D;&amp;#x3D;1||i&amp;#x3D;&amp;#x3D;(2*j-1)){&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}else{&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;下面三角形：&lt;/li&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;3;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(j+5);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(7-2*j);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;if(i&amp;#x3D;&amp;#x3D;1||i&amp;#x3D;&amp;#x3D;(7-2*j)){&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}else{&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;扩展：菱形打印方式2&lt;/p&gt;
&lt;p&gt;【1】实心菱形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/745dd4be231e5197141fa4721b372fa9.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor14&amp;#123;
    public static void main(String[] args)&amp;#123;
        //先打印出一个正方形，然后某些位置上打印\* 某些位置上打印空格：
        int size = 17;
        int startNum = size/2+1;//起始列号
        int endNum = size/2+1;//结束列号
        //引入一个布尔类型的变量---》理解为“开关”
        boolean flag = true;
        for(int j=1;j\&amp;lt;=size;j++)&amp;#123;
            //\*\*\*\*\*
            for(int i=1;i\&amp;lt;=size;i++)&amp;#123;
                if(i\&amp;gt;=startNum&amp;amp;&amp;amp;i\&amp;lt;=endNum)&amp;#123;
                    System.out.print(&amp;quot;\*&amp;quot;);
                &amp;#125;else&amp;#123;
                    System.out.print(&amp;quot; &amp;quot;);
                &amp;#125;
            &amp;#125;
            //换行
            System.out.println();
            if(endNum==size)&amp;#123;
                flag = false;
            &amp;#125;

            if(flag)&amp;#123;//flag是true相当于在菱形的上半侧 flag是false相当于在菱形的下半侧
                startNum--;
                endNum++;
            &amp;#125;else&amp;#123;
                startNum++;
                endNum--;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】空心菱形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/8938fc30a4da55ff90c902646c105355.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor14&amp;#123;
    public static void main(String[] args)&amp;#123;
        //先打印出一个正方形，然后某些位置上打印\* 某些位置上打印空格：
        int size = 17;
        int startNum = size/2+1;//起始列号
        int endNum = size/2+1;//结束列号
        //引入一个布尔类型的变量---》理解为“开关”
        boolean flag = true;
        for(int j=1;j\&amp;lt;=size;j++)&amp;#123;
            //\*\*\*\*\*
            for(int i=1;i\&amp;lt;=size;i++)&amp;#123;
                if(i==startNum\|\|i==endNum)&amp;#123;
                    System.out.print(&amp;quot;\*&amp;quot;);
                &amp;#125;else&amp;#123;
                    System.out.print(&amp;quot; &amp;quot;);
                &amp;#125;
            &amp;#125;
            //换行
            System.out.println();
            if(endNum==size)&amp;#123;
                flag = false;
            &amp;#125;

            if(flag)&amp;#123;//flag是true相当于在菱形的上半侧 flag是false相当于在菱形的下半侧
                startNum--;
                endNum++;
            &amp;#125;else&amp;#123;
                startNum++;
                endNum--;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;三重循环&#34;&gt;&lt;a href=&#34;#三重循环&#34; class=&#34;headerlink&#34; title=&#34;三重循环&#34;&gt;&lt;/a&gt;三重循环&lt;/h3&gt;&lt;p&gt;百钱买百鸡&lt;/p&gt;
&lt;p&gt;【1】二重循环可以帮我们解决：二元一次方程组的问题：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public   class   TestFor15 &amp;#123;
    public   static   void   main (String[] args)&amp;#123;
        for ( int  a=1;a\&amp;lt;=5;a++)&amp;#123;
            for ( int  b=3;b\&amp;lt;=6;b++)&amp;#123;
                if (a+b==7)&amp;#123;
                    System. out .println(a+&amp;quot;----&amp;quot;+b);
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】三重循环可以帮我们解决：三元一次方程组的问题：&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
