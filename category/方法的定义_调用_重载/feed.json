{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"方法的定义_调用_重载\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/",
            "title": "第5章_方法的定义_调用_重载",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"方法的定义和调用\"><a href=\"#方法的定义和调用\" class=\"headerlink\" title=\"方法的定义和调用\"></a>方法的定义和调用</h1><p>【1】什么是方法？</p>\n<p>方法(method)就是一段用来完成特定功能的代码片段，类似于其它语言的函数(function)。</p>\n<p>方法用于定义该类或该类的实例的行为特征和功能实现。 方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。</p>\n<p>【2】方法声明格式：</p>\n<table>\n<thead>\n<tr>\n<th>[修饰符1 修饰符2 …] 返回值类型 方法名(形式参数列表){   Java语句；… … …  }</th>\n</tr>\n</thead>\n</table>\n<p>【3】方法的调用方式：</p>\n<table>\n<thead>\n<tr>\n<th>对象名.方法名(实参列表)</th>\n</tr>\n</thead>\n</table>\n<p>【4】方法的详细说明</p>\n<ul>\n<li>形式参数：在方法声明时用于接收外界传入的数据。</li>\n<li>实参：调用方法时实际传给方法的数据。</li>\n<li>返回值：方法在执行完毕后返还给调用它的环境的数据。</li>\n<li>返回值类型：事先约定的返回值的数据类型，如无返回值，必须显示指定为为void。</li>\n</ul>\n<p>【5】代码：</p>\n<pre><code class=\"java\">public class TestMethod01&#123;\n\n    //方法的定义：（写方法）\n    public static int add(int num1,int num2)&#123;\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        return sum;//将返回值返回到方法的调用处\n    &#125;\n\n    public static void main(String[] args)&#123;\n        //10+20:\n        //方法的调用：（用方法）\n        int num = add(10,20);\n        System.out.println(num);\n        /\\*\n            int num1 = 10;\n        int num2 = 20;\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        System.out.println(sum);\n        \\*/\n            //30+90:\n            int sum = add(30,90);\n        System.out.println(sum);\n        /\\*\n            int num3 = 30;\n        int num4 = 90;\n        int sum1 = 0 ;\n        sum1 += num3;\n        sum1 += num4;\n        System.out.println(sum1);\n        \\*/\n            //50+48:\n            System.out.println(add(50,48));\n\n    &#125;\n\n\n&#125;\n</code></pre>\n<p>【6】总结：</p>\n<p>1.方法是：对特定的功能进行提取，形成一个代码片段，这个代码片段就是我们所说的方法</p>\n<p>2.方法和方法是并列的关系，所以我们定义的方法不能写到main方法中</p>\n<p>3.方法的定义–》格式：</p>\n<p>修饰符 方法返回值类型 方法名(形参列表){</p>\n<p>方法体;</p>\n<p>return 方法返回值;</p>\n<p>}</p>\n<p>4.方法的作用：提高代码的复用性</p>\n<p>5.总结方法定义的格式：</p>\n<ol>\n<li><p>修饰符: 暂时使用public static —&gt;面向对象一章讲解</p>\n</li>\n<li><p>方法返回值类型 : 方法的返回值对应的数据类型</p>\n</li>\n</ol>\n<p>数据类型： 可以是基本数据类型（byte,short,int,long,float,double,char,boolean） 也可以是引用数据类型</p>\n<ol start=\"3\">\n<li><p>方法名 :见名知意，首字母小写，其余遵循驼峰命名， eg: addNum ,一般尽量使用英文来命名</p>\n</li>\n<li><p>形参列表 :方法定义的时候需要的形式参数 ： int num1, int num2 –&gt;相当于告诉方法的调用者：需要传入几个参数，需要传入的参数的类型</p>\n</li>\n</ol>\n<p>实际参数：方法调用的时候传入的具体的参数： 10,20 –&gt;根据形式参数的需要传入的</p>\n<p>5)方法体：具体的业务逻辑代码</p>\n<ol start=\"6\">\n<li>return 方法返回值;</li>\n</ol>\n<p>方法如果有返回值的话： return+方法返回值，将返回值返回到方法的调用处</p>\n<p>方法没有返回值的话：return可以省略不写了，并且方法的返回值类型为：void</p>\n<pre><code class=\"java\">public class TestMethod02&#123;\n\n    public static void add(int num1,int num2)&#123;\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        System.out.println(sum);\n        //return;\n    &#125;\n\n    public static void main(String[] args)&#123;\n        //10+20:\n        //方法的调用：（用方法）\n        add(10,20);\n        //30+90:\n        add(30,90);\n        //50+48:\n        //System.out.println(add(50,48));//报错：TestMethod02.java:22: 错误: 此处不允许使用 &#39;空&#39; 类型\n\n    &#125;\n\n&#125;\n</code></pre>\n<p>什么时候有返回值，什么时候没有返回值？ 看心情–》看需求</p>\n<p>6.方法的定义需要注意什么？</p>\n<p>1）形参列表要怎么写：定义几个参数，分别是什么类型的 —》不确定因素我们会当做方法的形参</p>\n<ol start=\"2\">\n<li>方法到底是否需要返回值 ，如果需要的话，返回值的类型是什么</li>\n</ol>\n<p>7.方法的调用需要注意什么？</p>\n<p>1）实际参数要怎么传入：传入几个参数，传入什么类型的</p>\n<p>2） 方法是否有返回值需要接受</p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>【1】基本功能：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestMethod03&#123;\n    public static void main(String[] args)&#123;\n        //功能：我心里有一个数，你来猜，看是否猜对\n        //1.你猜一个数\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请你猜一个数：&quot;);\n        int yourGuessNum = sc.nextInt();\n        //2.我心里有一个数\n        int myHeartNum = 5;\n        //3.将两个数比对：\n        System.out.println(yourGuessNum==myHeartNum?&quot;猜对了&quot;:&quot;猜错了&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>对猜数功能提取为一个方法：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestMethod03&#123;\n    public static void main(String[] args)&#123;\n        //功能：我心里有一个数，你来猜，看是否猜对\n        //1.你猜一个数\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请你猜一个数：&quot;);\n        int yourGuessNum = sc.nextInt();\n\n        //调用猜数的方法：\n        guessNum(yourGuessNum);\n    &#125;\n\n    //方法的定义：功能：实现猜数功能：\n    public static void guessNum(int yourNum)&#123;\n        //我心里有一个数(1-6)\n        int myHeartNum = (int)(Math.random()\\*6)+1;\n        //将两个数比对：\n        System.out.println(yourNum==myHeartNum?&quot;猜对了&quot;:&quot;猜错了&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"面试题：两个数交换是否成功\"><a href=\"#面试题：两个数交换是否成功\" class=\"headerlink\" title=\"面试题：两个数交换是否成功\"></a>面试题：两个数交换是否成功</h2><p>【1】面试题：请问下面代码中两个数是否交换成功：</p>\n<pre><code class=\"java\">\n</code></pre>\n<p>|———————————————————————————————————————————————————————————————————————————————————————————————————————————-|</p>\n<p>结果：没有交换成功：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/d6adc25927a033764c5d084d040d5d88.png\" class=\"\">\n\n\n<p>原因：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/2a7e512536fdb2b6389db0fa7b3f959f.png\" class=\"\">\n\n\n<h1 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h1><p>【1】什么是方法的重载：</p>\n<p>方法的重载是指一个类中可以定义多个方法名相同，但参数不同的方法。 调用时，会根据不同的参数自动匹配对应的方法。</p>\n<p>注意本质：重载的方法，实际是完全不同的方法，只是名称相同而已！</p>\n<p>【2】构成方法重载的条件：</p>\n<p>❀不同的含义：形参类型、形参个数、形参顺序不同</p>\n<p>❀ 只有返回值不同不构成方法的重载</p>\n<p>如：int a(String str){}与 void a(String str){}不构成方法重载</p>\n<p>❀ 只有形参的名称不同，不构成方法的重载</p>\n<p>如：int a(String str){}与int a(String s){}不构成方法重载</p>\n<p>【3】代码：</p>\n<pre><code class=\"java\">public class TestMethod05&#123;\n    public static void main(String[] args)&#123;\n        //10+20:\n        int sum = add(10,20);\n        System.out.println(sum);\n\n        //20+40+80:\n        //System.out.println(add(add(20,40),80));\n        System.out.println(add(20,40,80));\n        //30+60+90+120:\n        //System.out.println(add(add(30,60),add(90,120)));\n        System.out.println(add(30,60,90,120));\n        //9.8+4.7:\n        //System.out.println(add(9.8,4.7));\n        System.out.println(add(9.8,4.7));\n    &#125;\n\n    //定义一个方法：两个数相加：两个int类型数据相加\n    public static int add(int num1,int num2)&#123;\n        return num1+num2;\n    &#125;\n\n    //定义一个方法：三个数相加：\n    public static int add(int num1,int num2,int num3)&#123;\n        return num1+num2+num3;\n    &#125;\n\n    //定义一个方法：四个数相加：\n    public static int add(int num1,int num2,int num3,int num4)&#123;\n        return num1+num2+num3+num4;\n    &#125;\n    //定义一个方法：两个数相加：两个double类型的数据相加\n    public static double add(double num1,double num2)&#123;\n        return num1+num2;\n    &#125;\n\n\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>1.方法的重载：在同一个类中，方法名相同，形参列表不同的多个方法，构成了方法的重载。</p>\n<p>2.方法的重载只跟：方法名和形参列表有关，与修饰符，返回值类型无关。</p>\n<p>3.注意：形参列表不同指的是什么？</p>\n<p>（1）个数不同</p>\n<p>add() add(int num1) add(int num1,int num2)</p>\n<p>（2）顺序不同</p>\n<p>add(int num1,double num2) add(double num1,int num2)</p>\n<p>（3）类型不同</p>\n<p>add(int num1) add(double num1)</p>\n<p>4.请问下面的方法是否构成了方法的重载？</p>\n<p>(1)add(int a) 和 add(int b) —&gt;不构成,相当于方法的重复定义</p>\n<p>(2)public static int add(int a) 和 public static void add(int b) —&gt;不构成</p>\n<p>【4】扩充：</p>\n<pre><code class=\"java\">public class TestMethod06&#123;\n    public static void main(String[] args)&#123;\n        add(5);\n        //级别：byte,short,char--\\&gt;int--\\&gt;long--\\&gt;float---\\&gt;double\n    &#125;\n    \n    public static void add(double num1)&#123;\n        System.out.println(&quot;------2&quot;);\n    &#125;\n    public static void add(float num1)&#123;\n        System.out.println(&quot;------3&quot;);\n    &#125;\n    public static void add(long num1)&#123;\n        System.out.println(&quot;------4&quot;);\n    &#125;\n    /\\*\n        public static void add(int num1)&#123;\n        System.out.println(&quot;------1&quot;);\n    &#125;\n    \\*/\n&#125;\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}