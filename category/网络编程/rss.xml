<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>记录“美食”每刻 • Posts by &#34;网络编程&#34; category</title>
        <link>http://example.com</link>
        <description>记录“美食”每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>博客</category>
        <category>环境搭建</category>
        <category>分布式</category>
        <category>Dubbo</category>
        <category>FastDFS</category>
        <category>MySQL</category>
        <category>数据库基础</category>
        <category>数据库基本知识</category>
        <category>数据库</category>
        <category>框架</category>
        <category>ORM</category>
        <category>RPC</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>SpringMVC</category>
        <category>SpringSecurity</category>
        <category>JavaSE</category>
        <category>-JavaSE</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
            <title>第14章_网络编程</title>
            <link>http://example.com/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
            <category>JavaSE</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;引入&#34;&gt;&lt;a href=&#34;#引入&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;【1】网络编程：&lt;/p&gt;
&lt;p&gt;把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。&lt;/p&gt;
&lt;p&gt;设备之间在网络中进行数据的传输，发送&amp;#x2F;接收数据。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1a93dfa9d1c3ca81040d0cc18afb4aba.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】通信两个重要的要素：IP+PORT&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/c79c4973d3a3792ab9aef4710b01f370.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;域名：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20v&#34;&gt;www.baidu.com&lt;/span&gt; ——&amp;gt;DNS服务器解析 —-&amp;gt; IP地址&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5tYXNoaWJpbmcuY29tLw==&#34;&gt;www.mashibing.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5zaW5hLmNvbS8=&#34;&gt;www.sina.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy53YW5kYS5jb20v&#34;&gt;www.wanda.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYmJiLmNvbS8=&#34;&gt;www.bbbb.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【3】设备之间进行传输的时候，必须遵照一定的规则 —》通信协议：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/7dc2fafdf26997c871032c7bc7a91256.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/ae2d4c32ffafe3daac392da2ffcb1c5f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】TCP协议：可靠的&lt;/p&gt;
&lt;p&gt;建立连接： 三次握手&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/fc9427567eb4c9d54c08677d02e4ccfe.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;释放连接：四次挥手&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/bb485bb37ea12a870dcb3ba2799c07d9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【5】UDP协议：不可靠的&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/5e71f2ea6eb08ea6a59c1853accb6681.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;InetAddress-InetSocketAddress&#34;&gt;&lt;a href=&#34;#InetAddress-InetSocketAddress&#34; class=&#34;headerlink&#34; title=&#34;InetAddress,InetSocketAddress&#34;&gt;&lt;/a&gt;InetAddress,InetSocketAddress&lt;/h1&gt;&lt;p&gt;前情提要：File —》 封装盘符一个文件&lt;/p&gt;
&lt;p&gt;【1】InetAddress —》 封装了IP&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws UnknownHostException &amp;#123;
        //封装IP：
        //InetAddress ia = new InetAddress();不能直接创建对象，因为InetAddress()被default修饰了。
        InetAddress ia = InetAddress.getByName(&amp;quot;192.168.199.217&amp;quot;);
        System.out.println(ia);
        InetAddress ia2 = InetAddress.getByName(&amp;quot;localhost&amp;quot;);//localhost指代的是本机的ip地址
        System.out.println(ia2);
        InetAddress ia3 = InetAddress.getByName(&amp;quot;127.0.0.1&amp;quot;);//127.0.0.1指代的是本机的ip地址
        System.out.println(ia3);
        InetAddress ia4 = InetAddress.getByName(&amp;quot;LAPTOP-CRIVSRRU&amp;quot;);//封装计算机名
        System.out.println(ia4);
        InetAddress ia5 = InetAddress.getByName(&amp;quot;www.mashibing.com&amp;quot;);//封装域名
        System.out.println(ia5);

        System.out.println(ia5.getHostName());//获取域名
        System.out.println(ia5.getHostAddress());//获取ip地址
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】InetSocketAddress —》封装了IP，端口号&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        InetSocketAddress isa = new InetSocketAddress(&amp;quot;192.168.199.217&amp;quot;,8080);
        System.out.println(isa);
        System.out.println(isa.getHostName());
        System.out.println(isa.getPort());

        InetAddress ia = isa.getAddress();
        System.out.println(ia.getHostName());
        System.out.println(ia.getHostAddress());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;网络通信原理–套接字&#34;&gt;&lt;a href=&#34;#网络通信原理–套接字&#34; class=&#34;headerlink&#34; title=&#34;网络通信原理–套接字&#34;&gt;&lt;/a&gt;网络通信原理–套接字&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/62ac948054889d710868c47aea8165d8.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;基于TCP的网络编程&#34;&gt;&lt;a href=&#34;#基于TCP的网络编程&#34; class=&#34;headerlink&#34; title=&#34;基于TCP的网络编程&#34;&gt;&lt;/a&gt;基于TCP的网络编程&lt;/h2&gt;&lt;p&gt;功能：模拟网站的登录，客户端录入账号密码，然后服务器端进行验证。&lt;/p&gt;
&lt;h3 id=&#34;功能分解1：单向通信&#34;&gt;&lt;a href=&#34;#功能分解1：单向通信&#34; class=&#34;headerlink&#34; title=&#34;功能分解1：单向通信&#34;&gt;&lt;/a&gt;功能分解1：单向通信&lt;/h3&gt;&lt;p&gt;功能：客户端发送一句话到服务器：&lt;/p&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestClient &amp;#123;//客户端

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.创建套接字：指定服务器的ip和端口号：
        Socket s = new Socket(&amp;quot;192.168.199.217&amp;quot;,8888);
        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：
        OutputStream os = s.getOutputStream();
        DataOutputStream dos = new DataOutputStream(os);
        //利用这个OutputStream就可以向外发送数据了，但是没有直接发送String的方法
        //所以我们又在OutputStream外面套了一个处理流：DataOutputStream
        dos.writeUTF(&amp;quot;你好&amp;quot;);

        //3.关闭流 + 关闭网络资源：
        dos.close();
        os.close();
        s.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestServer &amp;#123;//服务器

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.创建套接字： 指定服务器的端口号
        ServerSocket ss = new ServerSocket(8888);
        //2.等着客户端发来的信息：
        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
        //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了
        //3.感受到的操作流：
        InputStream is = s.getInputStream();
        DataInputStream dis = new DataInputStream(is);

        //4.读取客户端发来的数据：
        String str = dis.readUTF();
        System.out.println(&amp;quot;客户端发来的数据为：&amp;quot;+str);

        //5.关闭流+关闭网络资源：
        dis.close();
        is.close();
        s.close();
        ss.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;p&gt;（1）先开启客户端还是先开启服务器：先开服务器，再开启客户端&lt;/p&gt;
&lt;p&gt;侧面验证：先开客户端：出错：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/8de05d3a78c633604b764ff81cf5c54c.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&#34;功能分解2：双向通信&#34;&gt;&lt;a href=&#34;#功能分解2：双向通信&#34; class=&#34;headerlink&#34; title=&#34;功能分解2：双向通信&#34;&gt;&lt;/a&gt;功能分解2：双向通信&lt;/h3&gt;&lt;p&gt;服务器端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.ServerSocket;
import java.net.Socket;

/\*\*
    \* @author : msb-zhaoss
        \*/
        public class TestServer &amp;#123;//服务器

            //这是一个main方法，是程序的入口：
            public static void main(String[] args) throws IOException &amp;#123;
                //1.创建套接字： 指定服务器的端口号
                ServerSocket ss = new ServerSocket(8888);
                //2.等着客户端发来的信息：
                Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
                //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
                //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了
                //3.感受到的操作流：
                InputStream is = s.getInputStream();
                DataInputStream dis = new DataInputStream(is);

                //4.读取客户端发来的数据：
                String str = dis.readUTF();
                System.out.println(&amp;quot;客户端发来的数据为：&amp;quot;+str);

                //向客户端输出一句话：---》操作流---》输出流
                OutputStream os = s.getOutputStream();
                DataOutputStream dos = new DataOutputStream(os);
                dos.writeUTF(&amp;quot;你好，我是服务器端，我接受到你的请求了&amp;quot;);


                //5.关闭流+关闭网络资源：
                dos.close();
                os.close();
                dis.close();
                is.close();
                s.close();
                ss.close();
            &amp;#125;
        &amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.Socket;

public class TestClient &amp;#123;//客户端

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.创建套接字：指定服务器的ip和端口号：
        Socket s = new Socket(&amp;quot;192.168.199.217&amp;quot;,8888);
        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：
        OutputStream os = s.getOutputStream();
        DataOutputStream dos = new DataOutputStream(os);
        //利用这个OutputStream就可以向外发送数据了，但是没有直接发送String的方法
        //所以我们又在OutputStream外面套了一个处理流：DataOutputStream
        dos.writeUTF(&amp;quot;你好&amp;quot;);

        //接收服务器端的回话--》利用输入流：
        InputStream is = s.getInputStream();
        DataInputStream dis = new DataInputStream(is);
        String str = dis.readUTF();
        System.out.println(&amp;quot;服务器端对我说：&amp;quot;+str);

        //3.关闭流 + 关闭网络资源：
        dis.close();
        is.close();
        dos.close();
        os.close();
        s.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：关闭防火墙&lt;/p&gt;
&lt;h3 id=&#34;功能分解3：对象流传送&#34;&gt;&lt;a href=&#34;#功能分解3：对象流传送&#34; class=&#34;headerlink&#34; title=&#34;功能分解3：对象流传送&#34;&gt;&lt;/a&gt;功能分解3：对象流传送&lt;/h3&gt;&lt;p&gt;封装的User类：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.Serializable;


public class User implements Serializable &amp;#123;
    private static final long serialVersionUID = 9050691344308365540L;
    private String name;
    private String pwd;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public String getPwd() &amp;#123;
        return pwd;
    &amp;#125;

    public void setPwd(String pwd) &amp;#123;
        this.pwd = pwd;
    &amp;#125;

    public User(String name, String pwd) &amp;#123;
        this.name = name;
        this.pwd = pwd;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.Socket;
import java.util.Scanner;

public class TestClient &amp;#123;//客户端

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.创建套接字：指定服务器的ip和端口号：
        Socket s = new Socket(&amp;quot;192.168.199.217&amp;quot;,8888);

        //录入用户的账号和密码：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入您的账号：&amp;quot;);
        String name = sc.next();
        System.out.println(&amp;quot;请录入您的密码：&amp;quot;);
        String pwd = sc.next();
        //将账号和密码封装为一个User的对象：
        User user = new User(name,pwd);


        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：
        OutputStream os = s.getOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(os);
        oos.writeObject(user);


        //接收服务器端的回话--》利用输入流：
        InputStream is = s.getInputStream();
        DataInputStream dis = new DataInputStream(is);
        boolean b = dis.readBoolean();
        if(b)&amp;#123;
            System.out.println(&amp;quot;恭喜，登录成功&amp;quot;);
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;对不起，登录失败&amp;quot;);
        &amp;#125;

        //3.关闭流 + 关闭网络资源：
        dis.close();
        is.close();
        oos.close();
        os.close();
        s.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务器：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.ServerSocket;
import java.net.Socket;


public class TestServer &amp;#123;//服务器

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException, ClassNotFoundException &amp;#123;
        //1.创建套接字： 指定服务器的端口号
        ServerSocket ss = new ServerSocket(8888);
        //2.等着客户端发来的信息：
        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
        //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了
        //3.感受到的操作流：
        InputStream is = s.getInputStream();
        ObjectInputStream ois = new ObjectInputStream(is);

        //4.读取客户端发来的数据：
        User user = (User)(ois.readObject());

        //对对象进行验证：
        boolean flag = false;
        if(user.getName().equals(&amp;quot;娜娜&amp;quot;)&amp;amp;&amp;amp;user.getPwd().equals(&amp;quot;123123&amp;quot;))&amp;#123;
            flag = true;
        &amp;#125;

        //向客户端输出结果：---》操作流---》输出流
        OutputStream os = s.getOutputStream();
        DataOutputStream dos = new DataOutputStream(os);
        dos.writeBoolean(flag);


        //5.关闭流+关闭网络资源：
        dos.close();
        os.close();
        ois.close();
        is.close();
        s.close();
        ss.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解4：加入完整的处理异常方式&#34;&gt;&lt;a href=&#34;#功能分解4：加入完整的处理异常方式&#34; class=&#34;headerlink&#34; title=&#34;功能分解4：加入完整的处理异常方式&#34;&gt;&lt;/a&gt;功能分解4：加入完整的处理异常方式&lt;/h3&gt;&lt;p&gt;服务器端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.ServerSocket;
import java.net.Socket;


public class TestServer &amp;#123;//服务器

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //1.创建套接字： 指定服务器的端口号
        ServerSocket ss = null;
        Socket s = null;
        InputStream is = null;
        ObjectInputStream ois = null;
        OutputStream os = null;
        DataOutputStream dos = null;
        try &amp;#123;
            ss = new ServerSocket(8888);
            //2.等着客户端发来的信息：
            s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
            //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
            //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了
            //3.感受到的操作流：
            is = s.getInputStream();
            ois = new ObjectInputStream(is);

            //4.读取客户端发来的数据：
            User user = (User)(ois.readObject());

            //对对象进行验证：
            boolean flag = false;
            if(user.getName().equals(&amp;quot;娜娜&amp;quot;)&amp;amp;&amp;amp;user.getPwd().equals(&amp;quot;123123&amp;quot;))&amp;#123;
                flag = true;
            &amp;#125;

            //向客户端输出结果：---》操作流---》输出流
            os = s.getOutputStream();
            dos = new DataOutputStream(os);
            dos.writeBoolean(flag);
        &amp;#125; catch (IOException \| ClassNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //5.关闭流+关闭网络资源：
            try &amp;#123;
                if(dos!=null)&amp;#123;
                    dos.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(os!=null)&amp;#123;
                    os.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(ois!=null)&amp;#123;
                    ois.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(is!=null)&amp;#123;
                    is.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(s!=null)&amp;#123;
                    s.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(ss!=null)&amp;#123;
                    ss.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;




    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.Socket;
import java.util.Scanner;


public class TestClient &amp;#123;//客户端

    //这是一个main方法，是程序的入口：
    public static void main(String[] args)&amp;#123;
        //1.创建套接字：指定服务器的ip和端口号：
        Socket s = null;
        OutputStream os = null;
        ObjectOutputStream oos = null;
        InputStream is = null;
        DataInputStream dis = null;
        try &amp;#123;
            s = new Socket(&amp;quot;192.168.199.217&amp;quot;,8888);
            //录入用户的账号和密码：
            Scanner sc = new Scanner(System.in);
            System.out.println(&amp;quot;请录入您的账号：&amp;quot;);
            String name = sc.next();
            System.out.println(&amp;quot;请录入您的密码：&amp;quot;);
            String pwd = sc.next();
            //将账号和密码封装为一个User的对象：
            User user = new User(name,pwd);
            //2.对于程序员来说，向外发送数据 感受 --》利用输出流：
            os = s.getOutputStream();
            oos = new ObjectOutputStream(os);
            oos.writeObject(user);
            //接收服务器端的回话--》利用输入流：
            is = s.getInputStream();
            dis = new DataInputStream(is);
            boolean b = dis.readBoolean();
            if(b)&amp;#123;
                System.out.println(&amp;quot;恭喜，登录成功&amp;quot;);
            &amp;#125;else&amp;#123;
                System.out.println(&amp;quot;对不起，登录失败&amp;quot;);
            &amp;#125;
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally&amp;#123;
            //3.关闭流 + 关闭网络资源：
            try &amp;#123;
                if(dis!=null)&amp;#123;
                    dis.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(is!=null)&amp;#123;
                    is.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(oos!=null)&amp;#123;
                    oos.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(os!=null)&amp;#123;
                    os.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(s!=null)&amp;#123;
                    s.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;




    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解5：多线程接收用户请求&#34;&gt;&lt;a href=&#34;#功能分解5：多线程接收用户请求&#34; class=&#34;headerlink&#34; title=&#34;功能分解5：多线程接收用户请求&#34;&gt;&lt;/a&gt;功能分解5：多线程接收用户请求&lt;/h3&gt;&lt;p&gt;遗留问题：服务器针对一个请求服务，之后服务器就关闭了（程序自然结束了）&lt;/p&gt;
&lt;p&gt;现在需要解决：服务器必须一直在监听 ，一直开着，等待客户端的请求&lt;/p&gt;
&lt;p&gt;在当前代码中，客户端不用动了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/55e902e4e9bedbb725045b7b82e8a9d8.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;更改服务器代码：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.Socket;


public class ServerThread extends Thread &amp;#123;//线程：专门处理客户端的请求
    InputStream is = null;
    ObjectInputStream ois = null;
    OutputStream os = null;
    DataOutputStream dos = null;
    Socket s = null;
    public ServerThread(Socket s)&amp;#123;
        this.s = s;
    &amp;#125;
    @Override
    public void run() &amp;#123;
        try&amp;#123;
            //2.等着客户端发来的信息：

            is = s.getInputStream();
            ois = new ObjectInputStream(is);

            //4.读取客户端发来的数据：
            User user = (User)(ois.readObject());

            //对对象进行验证：
            boolean flag = false;
            if(user.getName().equals(&amp;quot;娜娜&amp;quot;)&amp;amp;&amp;amp;user.getPwd().equals(&amp;quot;123123&amp;quot;))&amp;#123;
                flag = true;
            &amp;#125;

            //向客户端输出结果：---》操作流---》输出流
            os = s.getOutputStream();
            dos = new DataOutputStream(os);
            dos.writeBoolean(flag);
        &amp;#125;catch (IOException \| ClassNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;finally &amp;#123;
            try &amp;#123;
                if(dos!=null)&amp;#123;
                    dos.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(os!=null)&amp;#123;
                    os.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(ois!=null)&amp;#123;
                    ois.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(is!=null)&amp;#123;
                    is.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.ServerSocket;
import java.net.Socket;

public class TestServer &amp;#123;//服务器

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        System.out.println(&amp;quot;服务器启动了&amp;quot;);
        //1.创建套接字： 指定服务器的端口号
        ServerSocket ss = null;
        Socket s = null;
        int count = 0;//定义一个计数器，用来计数 客户端的请求
        try &amp;#123;
            ss = new ServerSocket(8888);
            while(true)&amp;#123;//加入死循环，服务器一直监听客户端是否发送数据
                s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
                //每次过来的客户端的请求 靠 线程处理：
                new ServerThread(s).start();
                count++;
                //输入请求的客户端的信息：
                System.out.println(&amp;quot;当前是第&amp;quot;+count+&amp;quot;个用户访问我们的服务器,对应的用户是：&amp;quot;+s.getInetAddress());
            &amp;#125;
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;基于UDP的网络编程&#34;&gt;&lt;a href=&#34;#基于UDP的网络编程&#34; class=&#34;headerlink&#34; title=&#34;基于UDP的网络编程&#34;&gt;&lt;/a&gt;基于UDP的网络编程&lt;/h2&gt;&lt;p&gt;TCP:&lt;/p&gt;
&lt;p&gt;客户端：Socket&lt;/p&gt;
&lt;p&gt;程序感受到的 使用流 ：输出流&lt;/p&gt;
&lt;p&gt;服务器端： ServerSocket —&amp;gt;Socket 程序感受到的 使用流 ：输入流&lt;/p&gt;
&lt;p&gt;（客户端和服务器端地位不平等。）&lt;/p&gt;
&lt;p&gt;UDP:&lt;/p&gt;
&lt;p&gt;发送方：DatagramSocket 发送：数据包 DatagramPacket&lt;/p&gt;
&lt;p&gt;接收方：DatagramSocket 接收：数据包 DatagramPacket&lt;/p&gt;
&lt;p&gt;（发送方和接收方的地址是平等的。）&lt;/p&gt;
&lt;p&gt;UDP案例： 完成网站的咨询聊天&lt;/p&gt;
&lt;h3 id=&#34;功能分解1：单向通信-1&#34;&gt;&lt;a href=&#34;#功能分解1：单向通信-1&#34; class=&#34;headerlink&#34; title=&#34;功能分解1：单向通信&#34;&gt;&lt;/a&gt;功能分解1：单向通信&lt;/h3&gt;&lt;p&gt;发送方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;


public class TestSend &amp;#123;//发送方：

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        System.out.println(&amp;quot;学生上线。。。&amp;quot;);
        //1.准备套接字： 指定发送方的端口号
        DatagramSocket ds = new DatagramSocket(8888);
        //2.准备数据包
        String str = &amp;quot;你好&amp;quot;;
        byte[] bytes = str.getBytes();
        /\*
            需要四个参数：
            1.指的是传送数据转为字节数组
            2.字节数组的长度
            3.封装接收方的ip
            4.指定接收方的端口号
            \*/
            DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),9999);
        //发送：
        ds.send(dp);

        //关闭资源
        ds.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接收方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;


public class TestReceive &amp;#123;//接收方

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        System.out.println(&amp;quot;老师上线了。。&amp;quot;);
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = new DatagramSocket(9999);
        //2.有一个空的数据包，打算用来接收 对方传过来的数据包：
        byte[] b = new byte[1024];
        DatagramPacket dp = new DatagramPacket(b,b.length);
        //3.接收对方的数据包，然后放入我们的dp数据包中填充
        ds.receive(dp);//接收完以后 dp里面就填充好内容了

        //4.取出数据：
        byte[] data = dp.getData();
        String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度
        System.out.println(&amp;quot;学生对我说：&amp;quot;+s);

        //5.关闭资源：
        ds.close();


    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;-1&#34;&gt;&lt;a href=&#34;#-1&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&#34;功能分解2：双向通信-1&#34;&gt;&lt;a href=&#34;#功能分解2：双向通信-1&#34; class=&#34;headerlink&#34; title=&#34;功能分解2：双向通信&#34;&gt;&lt;/a&gt;功能分解2：双向通信&lt;/h3&gt;&lt;p&gt;发送方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;

public class TestSend &amp;#123;//发送方：

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        System.out.println(&amp;quot;学生上线。。。&amp;quot;);
        //1.准备套接字： 指定发送方的端口号
        DatagramSocket ds = new DatagramSocket(8888);
        //2.准备数据包
        Scanner sc = new Scanner(System.in);
        System.out.print(&amp;quot;学生：&amp;quot;);
        String str = sc.next();
        byte[] bytes = str.getBytes();
        /\*
            需要四个参数：
            1.指的是传送数据转为Z字节数组
            2.字节数组的长度
            3.封装接收方的ip
            4.指定接收方的端口号
            \*/
            DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),9999);
        //发送：
        ds.send(dp);

        //接收老师发送回来的信息：
        byte[] b = new byte[1024];
        DatagramPacket dp2 = new DatagramPacket(b,b.length);
        ds.receive(dp2);//接收完以后 dp2里面就填充好内容了

        //取出数据：
        byte[] data = dp2.getData();
        String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度
        System.out.println(&amp;quot;老师对我说：&amp;quot;+s);

        //关闭资源
        ds.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接收方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.Scanner;


public class TestReceive &amp;#123;//接收方

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        System.out.println(&amp;quot;老师上线了。。&amp;quot;);
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = new DatagramSocket(9999);
        //2.有一个空的数据包，打算用来接收 对方传过来的数据包：
        byte[] b = new byte[1024];
        DatagramPacket dp = new DatagramPacket(b,b.length);
        //3.接收对方的数据包，然后放入我们的dp数据包中填充
        ds.receive(dp);//接收完以后 dp里面就填充好内容了

        //4.取出数据：
        byte[] data = dp.getData();
        String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度
        System.out.println(&amp;quot;学生对我说：&amp;quot;+s);

        //老师进行回复：
        Scanner sc = new Scanner(System.in);
        System.out.print(&amp;quot;老师：&amp;quot;);
        String str = sc.next();
        byte[] bytes = str.getBytes();
        //封装数据，并且指定学生的ip和端口号
        DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),8888);
        //发送：
        ds.send(dp2);
        //5.关闭资源：
        ds.close();


    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解3：加入完整的处理异常方式&#34;&gt;&lt;a href=&#34;#功能分解3：加入完整的处理异常方式&#34; class=&#34;headerlink&#34; title=&#34;功能分解3：加入完整的处理异常方式&#34;&gt;&lt;/a&gt;功能分解3：加入完整的处理异常方式&lt;/h3&gt;&lt;p&gt;发送方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;


public class TestSend &amp;#123;//发送方：

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        System.out.println(&amp;quot;学生上线。。。&amp;quot;);
        //1.准备套接字： 指定发送方的端口号
        DatagramSocket ds = null;
        try &amp;#123;
            ds = new DatagramSocket(8888);
            //2.准备数据包
            Scanner sc = new Scanner(System.in);
            System.out.print(&amp;quot;学生：&amp;quot;);
            String str = sc.next();
            byte[] bytes = str.getBytes();
            /\*
                需要四个参数：
                1.指的是传送数据转为Z字节数组
                2.字节数组的长度
                3.封装接收方的ip
                4.指定接收方的端口号
                \*/
                DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),9999);
            //发送：
            ds.send(dp);

            //接收老师发送回来的信息：
            byte[] b = new byte[1024];
            DatagramPacket dp2 = new DatagramPacket(b,b.length);
            ds.receive(dp2);//接收完以后 dp2里面就填充好内容了

            //取出数据：
            byte[] data = dp2.getData();
            String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度
            System.out.println(&amp;quot;老师对我说：&amp;quot;+s);
        &amp;#125; catch (SocketException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (UnknownHostException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //关闭资源
            ds.close();
        &amp;#125;



    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接收方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;

public class TestReceive &amp;#123;//接收方

    //这是一个main方法，是程序的入口：
    public static void main(String[] args)&amp;#123;
        System.out.println(&amp;quot;老师上线了。。&amp;quot;);
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = null;
        try &amp;#123;
            ds = new DatagramSocket(9999);
            //2.有一个空的数据包，打算用来接收 对方传过来的数据包：
            byte[] b = new byte[1024];
            DatagramPacket dp = new DatagramPacket(b,b.length);
            //3.接收对方的数据包，然后放入我们的dp数据包中填充
            ds.receive(dp);//接收完以后 dp里面就填充好内容了

            //4.取出数据：
            byte[] data = dp.getData();
            String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度
            System.out.println(&amp;quot;学生对我说：&amp;quot;+s);

            //老师进行回复：
            Scanner sc = new Scanner(System.in);
            System.out.print(&amp;quot;老师：&amp;quot;);
            String str = sc.next();
            byte[] bytes = str.getBytes();
            //封装数据，并且指定学生的ip和端口号
            DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),8888);
            //发送：
            ds.send(dp2);
        &amp;#125; catch (SocketException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (UnknownHostException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //5.关闭资源：
            ds.close();
        &amp;#125;




    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解4：正常通信&#34;&gt;&lt;a href=&#34;#功能分解4：正常通信&#34; class=&#34;headerlink&#34; title=&#34;功能分解4：正常通信&#34;&gt;&lt;/a&gt;功能分解4：正常通信&lt;/h3&gt;&lt;p&gt;发送方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;

public class TestSend &amp;#123;//发送方：

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        System.out.println(&amp;quot;学生上线。。。&amp;quot;);
        //1.准备套接字： 指定发送方的端口号
        DatagramSocket ds = null;
        try &amp;#123;
            ds = new DatagramSocket(8888);
            while(true)&amp;#123;
                //2.准备数据包
                Scanner sc = new Scanner(System.in);
                System.out.print(&amp;quot;学生：&amp;quot;);
                String str = sc.next();

                byte[] bytes = str.getBytes();
                /\*
                    需要四个参数：
                    1.指的是传送数据转为Z字节数组
                    2.字节数组的长度
                    3.封装接收方的ip
                    4.指定接收方的端口号
                    \*/
                    DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),9999);
                //发送：
                ds.send(dp);
                if(str.equals(&amp;quot;byebye&amp;quot;))&amp;#123;
                    System.out.println(&amp;quot;学生下线。。&amp;quot;);
                    break;
                &amp;#125;
                //接收老师发送回来的信息：
                byte[] b = new byte[1024];
                DatagramPacket dp2 = new DatagramPacket(b,b.length);
                ds.receive(dp2);//接收完以后 dp2里面就填充好内容了

                //取出数据：
                byte[] data = dp2.getData();
                String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度
                System.out.println(&amp;quot;老师对我说：&amp;quot;+s);
            &amp;#125;
        &amp;#125; catch (SocketException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (UnknownHostException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //关闭资源
            ds.close();
        &amp;#125;



    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接收方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;


public class TestReceive &amp;#123;//接收方

    //这是一个main方法，是程序的入口：
    public static void main(String[] args)&amp;#123;
        System.out.println(&amp;quot;老师上线了。。&amp;quot;);
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = null;
        try &amp;#123;
            ds = new DatagramSocket(9999);
            while(true)&amp;#123;
                //2.有一个空的数据包，打算用来接收 对方传过来的数据包：
                byte[] b = new byte[1024];
                DatagramPacket dp = new DatagramPacket(b,b.length);
                //3.接收对方的数据包，然后放入我们的dp数据包中填充
                ds.receive(dp);//接收完以后 dp里面就填充好内容了

                //4.取出数据：
                byte[] data = dp.getData();
                String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度
                System.out.println(&amp;quot;学生对我说：&amp;quot;+s);
                if(s.equals(&amp;quot;byebye&amp;quot;))&amp;#123;
                    System.out.println(&amp;quot;学生已经下线了，老师也下线。。。&amp;quot;);
                    break;
                &amp;#125;

                //老师进行回复：
                Scanner sc = new Scanner(System.in);
                System.out.print(&amp;quot;老师：&amp;quot;);
                String str = sc.next();
                byte[] bytes = str.getBytes();
                //封装数据，并且指定学生的ip和端口号
                DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),8888);
                //发送：
                ds.send(dp2);
            &amp;#125;
        &amp;#125; catch (SocketException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (UnknownHostException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //5.关闭资源：
            ds.close();
        &amp;#125;




    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
