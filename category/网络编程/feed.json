{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"网络编程\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "url": "http://example.com/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "title": "第14章_网络编程",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>【1】网络编程：</p>\n<p>把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。</p>\n<p>设备之间在网络中进行数据的传输，发送&#x2F;接收数据。</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1a93dfa9d1c3ca81040d0cc18afb4aba.png\" class=\"\">\n\n\n<p>【2】通信两个重要的要素：IP+PORT</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/c79c4973d3a3792ab9aef4710b01f370.png\" class=\"\">\n\n\n<p>域名：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20v\">www.baidu.com</span> ——&gt;DNS服务器解析 —-&gt; IP地址</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tYXNoaWJpbmcuY29tLw==\">www.mashibing.com</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zaW5hLmNvbS8=\">www.sina.com</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53YW5kYS5jb20v\">www.wanda.com</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYmJiLmNvbS8=\">www.bbbb.com</span></p>\n<p>【3】设备之间进行传输的时候，必须遵照一定的规则 —》通信协议：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/7dc2fafdf26997c871032c7bc7a91256.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/ae2d4c32ffafe3daac392da2ffcb1c5f.png\" class=\"\">\n\n\n<p>【4】TCP协议：可靠的</p>\n<p>建立连接： 三次握手</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/fc9427567eb4c9d54c08677d02e4ccfe.png\" class=\"\">\n\n\n<p>释放连接：四次挥手</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/bb485bb37ea12a870dcb3ba2799c07d9.png\" class=\"\">\n\n\n<p>【5】UDP协议：不可靠的</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/5e71f2ea6eb08ea6a59c1853accb6681.png\" class=\"\">\n\n\n<h1 id=\"InetAddress-InetSocketAddress\"><a href=\"#InetAddress-InetSocketAddress\" class=\"headerlink\" title=\"InetAddress,InetSocketAddress\"></a>InetAddress,InetSocketAddress</h1><p>前情提要：File —》 封装盘符一个文件</p>\n<p>【1】InetAddress —》 封装了IP</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws UnknownHostException &#123;\n        //封装IP：\n        //InetAddress ia = new InetAddress();不能直接创建对象，因为InetAddress()被default修饰了。\n        InetAddress ia = InetAddress.getByName(&quot;192.168.199.217&quot;);\n        System.out.println(ia);\n        InetAddress ia2 = InetAddress.getByName(&quot;localhost&quot;);//localhost指代的是本机的ip地址\n        System.out.println(ia2);\n        InetAddress ia3 = InetAddress.getByName(&quot;127.0.0.1&quot;);//127.0.0.1指代的是本机的ip地址\n        System.out.println(ia3);\n        InetAddress ia4 = InetAddress.getByName(&quot;LAPTOP-CRIVSRRU&quot;);//封装计算机名\n        System.out.println(ia4);\n        InetAddress ia5 = InetAddress.getByName(&quot;www.mashibing.com&quot;);//封装域名\n        System.out.println(ia5);\n\n        System.out.println(ia5.getHostName());//获取域名\n        System.out.println(ia5.getHostAddress());//获取ip地址\n    &#125;\n&#125;\n</code></pre>\n<p>【2】InetSocketAddress —》封装了IP，端口号</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        InetSocketAddress isa = new InetSocketAddress(&quot;192.168.199.217&quot;,8080);\n        System.out.println(isa);\n        System.out.println(isa.getHostName());\n        System.out.println(isa.getPort());\n\n        InetAddress ia = isa.getAddress();\n        System.out.println(ia.getHostName());\n        System.out.println(ia.getHostAddress());\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"网络通信原理–套接字\"><a href=\"#网络通信原理–套接字\" class=\"headerlink\" title=\"网络通信原理–套接字\"></a>网络通信原理–套接字</h1><img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/62ac948054889d710868c47aea8165d8.png\" class=\"\">\n\n\n<h2 id=\"基于TCP的网络编程\"><a href=\"#基于TCP的网络编程\" class=\"headerlink\" title=\"基于TCP的网络编程\"></a>基于TCP的网络编程</h2><p>功能：模拟网站的登录，客户端录入账号密码，然后服务器端进行验证。</p>\n<h3 id=\"功能分解1：单向通信\"><a href=\"#功能分解1：单向通信\" class=\"headerlink\" title=\"功能分解1：单向通信\"></a>功能分解1：单向通信</h3><p>功能：客户端发送一句话到服务器：</p>\n<p>客户端：</p>\n<pre><code class=\"java\">public class TestClient &#123;//客户端\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.创建套接字：指定服务器的ip和端口号：\n        Socket s = new Socket(&quot;192.168.199.217&quot;,8888);\n        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：\n        OutputStream os = s.getOutputStream();\n        DataOutputStream dos = new DataOutputStream(os);\n        //利用这个OutputStream就可以向外发送数据了，但是没有直接发送String的方法\n        //所以我们又在OutputStream外面套了一个处理流：DataOutputStream\n        dos.writeUTF(&quot;你好&quot;);\n\n        //3.关闭流 + 关闭网络资源：\n        dos.close();\n        os.close();\n        s.close();\n    &#125;\n&#125;\n</code></pre>\n<p>服务器：</p>\n<pre><code class=\"java\">public class TestServer &#123;//服务器\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.创建套接字： 指定服务器的端口号\n        ServerSocket ss = new ServerSocket(8888);\n        //2.等着客户端发来的信息：\n        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket\n        //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了\n        //3.感受到的操作流：\n        InputStream is = s.getInputStream();\n        DataInputStream dis = new DataInputStream(is);\n\n        //4.读取客户端发来的数据：\n        String str = dis.readUTF();\n        System.out.println(&quot;客户端发来的数据为：&quot;+str);\n\n        //5.关闭流+关闭网络资源：\n        dis.close();\n        is.close();\n        s.close();\n        ss.close();\n    &#125;\n&#125;\n</code></pre>\n<p>测试：</p>\n<p>（1）先开启客户端还是先开启服务器：先开服务器，再开启客户端</p>\n<p>侧面验证：先开客户端：出错：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/8de05d3a78c633604b764ff81cf5c54c.png\" class=\"\">\n\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"功能分解2：双向通信\"><a href=\"#功能分解2：双向通信\" class=\"headerlink\" title=\"功能分解2：双向通信\"></a>功能分解2：双向通信</h3><p>服务器端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/\\*\\*\n    \\* @author : msb-zhaoss\n        \\*/\n        public class TestServer &#123;//服务器\n\n            //这是一个main方法，是程序的入口：\n            public static void main(String[] args) throws IOException &#123;\n                //1.创建套接字： 指定服务器的端口号\n                ServerSocket ss = new ServerSocket(8888);\n                //2.等着客户端发来的信息：\n                Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n                //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket\n                //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了\n                //3.感受到的操作流：\n                InputStream is = s.getInputStream();\n                DataInputStream dis = new DataInputStream(is);\n\n                //4.读取客户端发来的数据：\n                String str = dis.readUTF();\n                System.out.println(&quot;客户端发来的数据为：&quot;+str);\n\n                //向客户端输出一句话：---》操作流---》输出流\n                OutputStream os = s.getOutputStream();\n                DataOutputStream dos = new DataOutputStream(os);\n                dos.writeUTF(&quot;你好，我是服务器端，我接受到你的请求了&quot;);\n\n\n                //5.关闭流+关闭网络资源：\n                dos.close();\n                os.close();\n                dis.close();\n                is.close();\n                s.close();\n                ss.close();\n            &#125;\n        &#125;\n\n</code></pre>\n<p>客户端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.Socket;\n\npublic class TestClient &#123;//客户端\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.创建套接字：指定服务器的ip和端口号：\n        Socket s = new Socket(&quot;192.168.199.217&quot;,8888);\n        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：\n        OutputStream os = s.getOutputStream();\n        DataOutputStream dos = new DataOutputStream(os);\n        //利用这个OutputStream就可以向外发送数据了，但是没有直接发送String的方法\n        //所以我们又在OutputStream外面套了一个处理流：DataOutputStream\n        dos.writeUTF(&quot;你好&quot;);\n\n        //接收服务器端的回话--》利用输入流：\n        InputStream is = s.getInputStream();\n        DataInputStream dis = new DataInputStream(is);\n        String str = dis.readUTF();\n        System.out.println(&quot;服务器端对我说：&quot;+str);\n\n        //3.关闭流 + 关闭网络资源：\n        dis.close();\n        is.close();\n        dos.close();\n        os.close();\n        s.close();\n    &#125;\n&#125;\n\n</code></pre>\n<p>注意：关闭防火墙</p>\n<h3 id=\"功能分解3：对象流传送\"><a href=\"#功能分解3：对象流传送\" class=\"headerlink\" title=\"功能分解3：对象流传送\"></a>功能分解3：对象流传送</h3><p>封装的User类：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.Serializable;\n\n\npublic class User implements Serializable &#123;\n    private static final long serialVersionUID = 9050691344308365540L;\n    private String name;\n    private String pwd;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public String getPwd() &#123;\n        return pwd;\n    &#125;\n\n    public void setPwd(String pwd) &#123;\n        this.pwd = pwd;\n    &#125;\n\n    public User(String name, String pwd) &#123;\n        this.name = name;\n        this.pwd = pwd;\n    &#125;\n&#125;\n\n</code></pre>\n<p>客户端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.Socket;\nimport java.util.Scanner;\n\npublic class TestClient &#123;//客户端\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.创建套接字：指定服务器的ip和端口号：\n        Socket s = new Socket(&quot;192.168.199.217&quot;,8888);\n\n        //录入用户的账号和密码：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入您的账号：&quot;);\n        String name = sc.next();\n        System.out.println(&quot;请录入您的密码：&quot;);\n        String pwd = sc.next();\n        //将账号和密码封装为一个User的对象：\n        User user = new User(name,pwd);\n\n\n        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：\n        OutputStream os = s.getOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(os);\n        oos.writeObject(user);\n\n\n        //接收服务器端的回话--》利用输入流：\n        InputStream is = s.getInputStream();\n        DataInputStream dis = new DataInputStream(is);\n        boolean b = dis.readBoolean();\n        if(b)&#123;\n            System.out.println(&quot;恭喜，登录成功&quot;);\n        &#125;else&#123;\n            System.out.println(&quot;对不起，登录失败&quot;);\n        &#125;\n\n        //3.关闭流 + 关闭网络资源：\n        dis.close();\n        is.close();\n        oos.close();\n        os.close();\n        s.close();\n    &#125;\n&#125;\n\n</code></pre>\n<p>服务器：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n\npublic class TestServer &#123;//服务器\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;\n        //1.创建套接字： 指定服务器的端口号\n        ServerSocket ss = new ServerSocket(8888);\n        //2.等着客户端发来的信息：\n        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket\n        //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了\n        //3.感受到的操作流：\n        InputStream is = s.getInputStream();\n        ObjectInputStream ois = new ObjectInputStream(is);\n\n        //4.读取客户端发来的数据：\n        User user = (User)(ois.readObject());\n\n        //对对象进行验证：\n        boolean flag = false;\n        if(user.getName().equals(&quot;娜娜&quot;)&amp;&amp;user.getPwd().equals(&quot;123123&quot;))&#123;\n            flag = true;\n        &#125;\n\n        //向客户端输出结果：---》操作流---》输出流\n        OutputStream os = s.getOutputStream();\n        DataOutputStream dos = new DataOutputStream(os);\n        dos.writeBoolean(flag);\n\n\n        //5.关闭流+关闭网络资源：\n        dos.close();\n        os.close();\n        ois.close();\n        is.close();\n        s.close();\n        ss.close();\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"功能分解4：加入完整的处理异常方式\"><a href=\"#功能分解4：加入完整的处理异常方式\" class=\"headerlink\" title=\"功能分解4：加入完整的处理异常方式\"></a>功能分解4：加入完整的处理异常方式</h3><p>服务器端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n\npublic class TestServer &#123;//服务器\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //1.创建套接字： 指定服务器的端口号\n        ServerSocket ss = null;\n        Socket s = null;\n        InputStream is = null;\n        ObjectInputStream ois = null;\n        OutputStream os = null;\n        DataOutputStream dos = null;\n        try &#123;\n            ss = new ServerSocket(8888);\n            //2.等着客户端发来的信息：\n            s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n            //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket\n            //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了\n            //3.感受到的操作流：\n            is = s.getInputStream();\n            ois = new ObjectInputStream(is);\n\n            //4.读取客户端发来的数据：\n            User user = (User)(ois.readObject());\n\n            //对对象进行验证：\n            boolean flag = false;\n            if(user.getName().equals(&quot;娜娜&quot;)&amp;&amp;user.getPwd().equals(&quot;123123&quot;))&#123;\n                flag = true;\n            &#125;\n\n            //向客户端输出结果：---》操作流---》输出流\n            os = s.getOutputStream();\n            dos = new DataOutputStream(os);\n            dos.writeBoolean(flag);\n        &#125; catch (IOException \\| ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //5.关闭流+关闭网络资源：\n            try &#123;\n                if(dos!=null)&#123;\n                    dos.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(os!=null)&#123;\n                    os.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(ois!=null)&#123;\n                    ois.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(is!=null)&#123;\n                    is.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(s!=null)&#123;\n                    s.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(ss!=null)&#123;\n                    ss.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n\n\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>客户端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.Socket;\nimport java.util.Scanner;\n\n\npublic class TestClient &#123;//客户端\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args)&#123;\n        //1.创建套接字：指定服务器的ip和端口号：\n        Socket s = null;\n        OutputStream os = null;\n        ObjectOutputStream oos = null;\n        InputStream is = null;\n        DataInputStream dis = null;\n        try &#123;\n            s = new Socket(&quot;192.168.199.217&quot;,8888);\n            //录入用户的账号和密码：\n            Scanner sc = new Scanner(System.in);\n            System.out.println(&quot;请录入您的账号：&quot;);\n            String name = sc.next();\n            System.out.println(&quot;请录入您的密码：&quot;);\n            String pwd = sc.next();\n            //将账号和密码封装为一个User的对象：\n            User user = new User(name,pwd);\n            //2.对于程序员来说，向外发送数据 感受 --》利用输出流：\n            os = s.getOutputStream();\n            oos = new ObjectOutputStream(os);\n            oos.writeObject(user);\n            //接收服务器端的回话--》利用输入流：\n            is = s.getInputStream();\n            dis = new DataInputStream(is);\n            boolean b = dis.readBoolean();\n            if(b)&#123;\n                System.out.println(&quot;恭喜，登录成功&quot;);\n            &#125;else&#123;\n                System.out.println(&quot;对不起，登录失败&quot;);\n            &#125;\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally&#123;\n            //3.关闭流 + 关闭网络资源：\n            try &#123;\n                if(dis!=null)&#123;\n                    dis.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(is!=null)&#123;\n                    is.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(oos!=null)&#123;\n                    oos.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(os!=null)&#123;\n                    os.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(s!=null)&#123;\n                    s.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n\n\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"功能分解5：多线程接收用户请求\"><a href=\"#功能分解5：多线程接收用户请求\" class=\"headerlink\" title=\"功能分解5：多线程接收用户请求\"></a>功能分解5：多线程接收用户请求</h3><p>遗留问题：服务器针对一个请求服务，之后服务器就关闭了（程序自然结束了）</p>\n<p>现在需要解决：服务器必须一直在监听 ，一直开着，等待客户端的请求</p>\n<p>在当前代码中，客户端不用动了</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/55e902e4e9bedbb725045b7b82e8a9d8.png\" class=\"\">\n\n\n<p>更改服务器代码：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.Socket;\n\n\npublic class ServerThread extends Thread &#123;//线程：专门处理客户端的请求\n    InputStream is = null;\n    ObjectInputStream ois = null;\n    OutputStream os = null;\n    DataOutputStream dos = null;\n    Socket s = null;\n    public ServerThread(Socket s)&#123;\n        this.s = s;\n    &#125;\n    @Override\n    public void run() &#123;\n        try&#123;\n            //2.等着客户端发来的信息：\n\n            is = s.getInputStream();\n            ois = new ObjectInputStream(is);\n\n            //4.读取客户端发来的数据：\n            User user = (User)(ois.readObject());\n\n            //对对象进行验证：\n            boolean flag = false;\n            if(user.getName().equals(&quot;娜娜&quot;)&amp;&amp;user.getPwd().equals(&quot;123123&quot;))&#123;\n                flag = true;\n            &#125;\n\n            //向客户端输出结果：---》操作流---》输出流\n            os = s.getOutputStream();\n            dos = new DataOutputStream(os);\n            dos.writeBoolean(flag);\n        &#125;catch (IOException \\| ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            try &#123;\n                if(dos!=null)&#123;\n                    dos.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(os!=null)&#123;\n                    os.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(ois!=null)&#123;\n                    ois.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(is!=null)&#123;\n                    is.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TestServer &#123;//服务器\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;服务器启动了&quot;);\n        //1.创建套接字： 指定服务器的端口号\n        ServerSocket ss = null;\n        Socket s = null;\n        int count = 0;//定义一个计数器，用来计数 客户端的请求\n        try &#123;\n            ss = new ServerSocket(8888);\n            while(true)&#123;//加入死循环，服务器一直监听客户端是否发送数据\n                s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n                //每次过来的客户端的请求 靠 线程处理：\n                new ServerThread(s).start();\n                count++;\n                //输入请求的客户端的信息：\n                System.out.println(&quot;当前是第&quot;+count+&quot;个用户访问我们的服务器,对应的用户是：&quot;+s.getInetAddress());\n            &#125;\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"基于UDP的网络编程\"><a href=\"#基于UDP的网络编程\" class=\"headerlink\" title=\"基于UDP的网络编程\"></a>基于UDP的网络编程</h2><p>TCP:</p>\n<p>客户端：Socket</p>\n<p>程序感受到的 使用流 ：输出流</p>\n<p>服务器端： ServerSocket —&gt;Socket 程序感受到的 使用流 ：输入流</p>\n<p>（客户端和服务器端地位不平等。）</p>\n<p>UDP:</p>\n<p>发送方：DatagramSocket 发送：数据包 DatagramPacket</p>\n<p>接收方：DatagramSocket 接收：数据包 DatagramPacket</p>\n<p>（发送方和接收方的地址是平等的。）</p>\n<p>UDP案例： 完成网站的咨询聊天</p>\n<h3 id=\"功能分解1：单向通信-1\"><a href=\"#功能分解1：单向通信-1\" class=\"headerlink\" title=\"功能分解1：单向通信\"></a>功能分解1：单向通信</h3><p>发送方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\n\n\npublic class TestSend &#123;//发送方：\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        System.out.println(&quot;学生上线。。。&quot;);\n        //1.准备套接字： 指定发送方的端口号\n        DatagramSocket ds = new DatagramSocket(8888);\n        //2.准备数据包\n        String str = &quot;你好&quot;;\n        byte[] bytes = str.getBytes();\n        /\\*\n            需要四个参数：\n            1.指的是传送数据转为字节数组\n            2.字节数组的长度\n            3.封装接收方的ip\n            4.指定接收方的端口号\n            \\*/\n            DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),9999);\n        //发送：\n        ds.send(dp);\n\n        //关闭资源\n        ds.close();\n    &#125;\n&#125;\n\n</code></pre>\n<p>接收方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\n\n\npublic class TestReceive &#123;//接收方\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        System.out.println(&quot;老师上线了。。&quot;);\n        //1.创建套接字：指定接收方的端口\n        DatagramSocket ds = new DatagramSocket(9999);\n        //2.有一个空的数据包，打算用来接收 对方传过来的数据包：\n        byte[] b = new byte[1024];\n        DatagramPacket dp = new DatagramPacket(b,b.length);\n        //3.接收对方的数据包，然后放入我们的dp数据包中填充\n        ds.receive(dp);//接收完以后 dp里面就填充好内容了\n\n        //4.取出数据：\n        byte[] data = dp.getData();\n        String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度\n        System.out.println(&quot;学生对我说：&quot;+s);\n\n        //5.关闭资源：\n        ds.close();\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"功能分解2：双向通信-1\"><a href=\"#功能分解2：双向通信-1\" class=\"headerlink\" title=\"功能分解2：双向通信\"></a>功能分解2：双向通信</h3><p>发送方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\npublic class TestSend &#123;//发送方：\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        System.out.println(&quot;学生上线。。。&quot;);\n        //1.准备套接字： 指定发送方的端口号\n        DatagramSocket ds = new DatagramSocket(8888);\n        //2.准备数据包\n        Scanner sc = new Scanner(System.in);\n        System.out.print(&quot;学生：&quot;);\n        String str = sc.next();\n        byte[] bytes = str.getBytes();\n        /\\*\n            需要四个参数：\n            1.指的是传送数据转为Z字节数组\n            2.字节数组的长度\n            3.封装接收方的ip\n            4.指定接收方的端口号\n            \\*/\n            DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),9999);\n        //发送：\n        ds.send(dp);\n\n        //接收老师发送回来的信息：\n        byte[] b = new byte[1024];\n        DatagramPacket dp2 = new DatagramPacket(b,b.length);\n        ds.receive(dp2);//接收完以后 dp2里面就填充好内容了\n\n        //取出数据：\n        byte[] data = dp2.getData();\n        String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度\n        System.out.println(&quot;老师对我说：&quot;+s);\n\n        //关闭资源\n        ds.close();\n    &#125;\n&#125;\n\n</code></pre>\n<p>接收方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\nimport java.util.Scanner;\n\n\npublic class TestReceive &#123;//接收方\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        System.out.println(&quot;老师上线了。。&quot;);\n        //1.创建套接字：指定接收方的端口\n        DatagramSocket ds = new DatagramSocket(9999);\n        //2.有一个空的数据包，打算用来接收 对方传过来的数据包：\n        byte[] b = new byte[1024];\n        DatagramPacket dp = new DatagramPacket(b,b.length);\n        //3.接收对方的数据包，然后放入我们的dp数据包中填充\n        ds.receive(dp);//接收完以后 dp里面就填充好内容了\n\n        //4.取出数据：\n        byte[] data = dp.getData();\n        String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度\n        System.out.println(&quot;学生对我说：&quot;+s);\n\n        //老师进行回复：\n        Scanner sc = new Scanner(System.in);\n        System.out.print(&quot;老师：&quot;);\n        String str = sc.next();\n        byte[] bytes = str.getBytes();\n        //封装数据，并且指定学生的ip和端口号\n        DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),8888);\n        //发送：\n        ds.send(dp2);\n        //5.关闭资源：\n        ds.close();\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"功能分解3：加入完整的处理异常方式\"><a href=\"#功能分解3：加入完整的处理异常方式\" class=\"headerlink\" title=\"功能分解3：加入完整的处理异常方式\"></a>功能分解3：加入完整的处理异常方式</h3><p>发送方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\n\npublic class TestSend &#123;//发送方：\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;学生上线。。。&quot;);\n        //1.准备套接字： 指定发送方的端口号\n        DatagramSocket ds = null;\n        try &#123;\n            ds = new DatagramSocket(8888);\n            //2.准备数据包\n            Scanner sc = new Scanner(System.in);\n            System.out.print(&quot;学生：&quot;);\n            String str = sc.next();\n            byte[] bytes = str.getBytes();\n            /\\*\n                需要四个参数：\n                1.指的是传送数据转为Z字节数组\n                2.字节数组的长度\n                3.封装接收方的ip\n                4.指定接收方的端口号\n                \\*/\n                DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),9999);\n            //发送：\n            ds.send(dp);\n\n            //接收老师发送回来的信息：\n            byte[] b = new byte[1024];\n            DatagramPacket dp2 = new DatagramPacket(b,b.length);\n            ds.receive(dp2);//接收完以后 dp2里面就填充好内容了\n\n            //取出数据：\n            byte[] data = dp2.getData();\n            String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度\n            System.out.println(&quot;老师对我说：&quot;+s);\n        &#125; catch (SocketException e) &#123;\n            e.printStackTrace();\n        &#125; catch (UnknownHostException e) &#123;\n            e.printStackTrace();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //关闭资源\n            ds.close();\n        &#125;\n\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>接收方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\npublic class TestReceive &#123;//接收方\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args)&#123;\n        System.out.println(&quot;老师上线了。。&quot;);\n        //1.创建套接字：指定接收方的端口\n        DatagramSocket ds = null;\n        try &#123;\n            ds = new DatagramSocket(9999);\n            //2.有一个空的数据包，打算用来接收 对方传过来的数据包：\n            byte[] b = new byte[1024];\n            DatagramPacket dp = new DatagramPacket(b,b.length);\n            //3.接收对方的数据包，然后放入我们的dp数据包中填充\n            ds.receive(dp);//接收完以后 dp里面就填充好内容了\n\n            //4.取出数据：\n            byte[] data = dp.getData();\n            String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度\n            System.out.println(&quot;学生对我说：&quot;+s);\n\n            //老师进行回复：\n            Scanner sc = new Scanner(System.in);\n            System.out.print(&quot;老师：&quot;);\n            String str = sc.next();\n            byte[] bytes = str.getBytes();\n            //封装数据，并且指定学生的ip和端口号\n            DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),8888);\n            //发送：\n            ds.send(dp2);\n        &#125; catch (SocketException e) &#123;\n            e.printStackTrace();\n        &#125; catch (UnknownHostException e) &#123;\n            e.printStackTrace();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //5.关闭资源：\n            ds.close();\n        &#125;\n\n\n\n\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"功能分解4：正常通信\"><a href=\"#功能分解4：正常通信\" class=\"headerlink\" title=\"功能分解4：正常通信\"></a>功能分解4：正常通信</h3><p>发送方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\npublic class TestSend &#123;//发送方：\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;学生上线。。。&quot;);\n        //1.准备套接字： 指定发送方的端口号\n        DatagramSocket ds = null;\n        try &#123;\n            ds = new DatagramSocket(8888);\n            while(true)&#123;\n                //2.准备数据包\n                Scanner sc = new Scanner(System.in);\n                System.out.print(&quot;学生：&quot;);\n                String str = sc.next();\n\n                byte[] bytes = str.getBytes();\n                /\\*\n                    需要四个参数：\n                    1.指的是传送数据转为Z字节数组\n                    2.字节数组的长度\n                    3.封装接收方的ip\n                    4.指定接收方的端口号\n                    \\*/\n                    DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),9999);\n                //发送：\n                ds.send(dp);\n                if(str.equals(&quot;byebye&quot;))&#123;\n                    System.out.println(&quot;学生下线。。&quot;);\n                    break;\n                &#125;\n                //接收老师发送回来的信息：\n                byte[] b = new byte[1024];\n                DatagramPacket dp2 = new DatagramPacket(b,b.length);\n                ds.receive(dp2);//接收完以后 dp2里面就填充好内容了\n\n                //取出数据：\n                byte[] data = dp2.getData();\n                String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度\n                System.out.println(&quot;老师对我说：&quot;+s);\n            &#125;\n        &#125; catch (SocketException e) &#123;\n            e.printStackTrace();\n        &#125; catch (UnknownHostException e) &#123;\n            e.printStackTrace();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //关闭资源\n            ds.close();\n        &#125;\n\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>接收方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\n\npublic class TestReceive &#123;//接收方\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args)&#123;\n        System.out.println(&quot;老师上线了。。&quot;);\n        //1.创建套接字：指定接收方的端口\n        DatagramSocket ds = null;\n        try &#123;\n            ds = new DatagramSocket(9999);\n            while(true)&#123;\n                //2.有一个空的数据包，打算用来接收 对方传过来的数据包：\n                byte[] b = new byte[1024];\n                DatagramPacket dp = new DatagramPacket(b,b.length);\n                //3.接收对方的数据包，然后放入我们的dp数据包中填充\n                ds.receive(dp);//接收完以后 dp里面就填充好内容了\n\n                //4.取出数据：\n                byte[] data = dp.getData();\n                String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度\n                System.out.println(&quot;学生对我说：&quot;+s);\n                if(s.equals(&quot;byebye&quot;))&#123;\n                    System.out.println(&quot;学生已经下线了，老师也下线。。。&quot;);\n                    break;\n                &#125;\n\n                //老师进行回复：\n                Scanner sc = new Scanner(System.in);\n                System.out.print(&quot;老师：&quot;);\n                String str = sc.next();\n                byte[] bytes = str.getBytes();\n                //封装数据，并且指定学生的ip和端口号\n                DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),8888);\n                //发送：\n                ds.send(dp2);\n            &#125;\n        &#125; catch (SocketException e) &#123;\n            e.printStackTrace();\n        &#125; catch (UnknownHostException e) &#123;\n            e.printStackTrace();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //5.关闭资源：\n            ds.close();\n        &#125;\n\n\n\n\n    &#125;\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}