{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"solr\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Distribution/Solr/",
            "url": "http://example.com/2022/10/07/Distribution/Solr/",
            "title": "Solr",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"solr\"><a class=\"anchor\" href=\"#solr\">#</a> Solr</h1>\n<h3 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> 主要内容</h3>\n<ol>\n<li>\n<p>Solr 简介</p>\n</li>\n<li>\n<p>Solr 搜索原理</p>\n</li>\n<li>\n<p>Solr 单机版安装</p>\n</li>\n<li>\n<p>可视化管理界面</p>\n</li>\n<li>\n<p>新建核心</p>\n</li>\n<li>\n<p>分词</p>\n</li>\n<li>\n<p>Dataimport</p>\n</li>\n<li>\n<p>使用 SolrJ 操作 Solr</p>\n</li>\n<li>\n<p>Spring Data for Apache Solr</p>\n<ol start=\"10\">\n<li>SolrCloud</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"学习目标\"><a class=\"anchor\" href=\"#学习目标\">#</a> 学习目标</h3>\n<table>\n<thead>\n<tr>\n<th>知识点</th>\n<th>要求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Solr 简介</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Solr 搜索原理</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Solr 单机版安装</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>可视化管理界面</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>新建核心</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>分词</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Dataimport</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>使用 SolrJ 操作 Solr</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>SolrCloud</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Spring Data for Apache Solr</td>\n<td>掌握</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一-solr简介\"><a class=\"anchor\" href=\"#一-solr简介\">#</a> 一、Solr 简介</h3>\n<h4 id=\"1为什么使用solr\"><a class=\"anchor\" href=\"#1为什么使用solr\">#</a> 1. 为什么使用 Solr</h4>\n<p>​\t在海量数据下，对 MySQL 或 Oracle 进行模糊查询或条件查询的效率是很低的。而搜索功能在绝大多数项目中都是必须的，如何提升搜索效率是很多互联网项目必须要考虑的问题。</p>\n<p>​\t既然使用关系型数据库进行搜索效率比较低，最直接的解决方案就是使用专用搜索工具进行搜索，从而提升搜索效率。</p>\n<h4 id=\"2常见搜索解决方案\"><a class=\"anchor\" href=\"#2常见搜索解决方案\">#</a> 2. 常见搜索解决方案</h4>\n<p>​\t基于 Apache Lucene（全文检索工具库）实现搜索。但是 Lucene 的使用对于绝大多数的程序员都是 “噩梦级” 的。</p>\n<p>​\t基于谷歌 API 实现搜索。</p>\n<p>​\t基于百度 API 实现搜索。</p>\n<h4 id=\"3solr简介\"><a class=\"anchor\" href=\"#3solr简介\">#</a> 3.Solr 简介</h4>\n<p>​\tSolr 是基于 Apache Lucene 构建的用于搜索和分析的开源解决方案。可提供可扩展索引、搜索功能、高亮显示和文字解析功能。</p>\n<p>​\tSolr 本质就是一个 Java web 项目，且内嵌了 Jetty 服务器，所以安装起来非常方便。客户端操作 Solr 的过程和平时我们所写项目一样，就是请求 Solr 中控制器，处理完数据后把结果响应给客户端。</p>\n<h4 id=\"4正向索引和反向索引\"><a class=\"anchor\" href=\"#4正向索引和反向索引\">#</a> 4. 正向索引和反向索引</h4>\n<p>​\t只要讨论搜索就不得不提的两个概念：正向索引（forward index）和反向索引 (inverted index)。</p>\n<p>​\t正向索引：从文档内容到词组的过程。每次搜索的实收需要搜索所有文档，每个文档比较搜索条件和词组。</p>\n<table>\n<thead>\n<tr>\n<th>文档</th>\n<th>词组</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I am a chinese</td>\n<td>I,am,a,chinese</td>\n</tr>\n</tbody>\n</table>\n<p>​\t反向索引：是正向索引的逆向。建立词组和文档的映射关系。通过找到词组就能找到文档内容。（和新华字典找字很像）</p>\n<table>\n<thead>\n<tr>\n<th>词组</th>\n<th>文档</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>I,am,a,chinese</td>\n<td>I am a chinese</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"二-solr搜索原理\"><a class=\"anchor\" href=\"#二-solr搜索原理\">#</a> 二、Solr 搜索原理</h3>\n<h4 id=\"1搜索原理\"><a class=\"anchor\" href=\"#1搜索原理\">#</a> 1. 搜索原理</h4>\n<p>​\tSolr 能够提升检索效率的主要原因就是分词和索引（反向索引，通过）。</p>\n<p>​\t分词：会对搜索条件 / 存储内容进行分词，分成日常所使用的词语。</p>\n<p>​\t索引：存储在 Solr 中内容会按照程序员的要求来是否建立索引。如果要求建立索引会把存储内容中关键字（分词）建立索引。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-01.JPG\" class=\"\"></p>\n<h4 id=\"2solr中数据存储说明\"><a class=\"anchor\" href=\"#2solr中数据存储说明\">#</a> 2.Solr 中数据存储说明</h4>\n<p>​\tSolr 为了给内容建立索引，所以 Solr 就必须具备数据存储能力。所有需要被搜索的内容都需要存储在 Solr 中，在开发中需要把数据库中数据添加到 Solr 中进行初始化，每次修改数据库中数据还需要同步 Solr 中的数据。</p>\n<p>​\tSolr 中数据存储是存储在 Document 对象中，对象中可以包含的属性和属性类型都定义在 scheme.xml 中。如果需要自定义属性或自定义属性类型都需要修改 scheme.xml 配置文件。从 Solr5 开始 schema.xml 更改名称为 managed-scheme (没有扩展名)</p>\n<h3 id=\"三-solr单机版安装\"><a class=\"anchor\" href=\"#三-solr单机版安装\">#</a> 三、Solr 单机版安装</h3>\n<p>​\tSolr 是使用 Java 编写，所以必选先安装 JDK。</p>\n<h4 id=\"1上传并解压\"><a class=\"anchor\" href=\"#1上传并解压\">#</a> 1. 上传并解压</h4>\n<p>​\t上传压缩包 solr-7.7.2.tgz 到 /usr/local/tmp 中。</p>\n<p>解压</p>\n<pre><code># cd /usr/local/tmp\n# tar zxf solr-7.7.2.tgz\n</code></pre>\n<h4 id=\"2复制到usrlocal中\"><a class=\"anchor\" href=\"#2复制到usrlocal中\">#</a> 2. 复制到 /usr/local 中</h4>\n<pre><code># cp -r solr-7.7.2 ../solr\n</code></pre>\n<h4 id=\"3修改启动参数\"><a class=\"anchor\" href=\"#3修改启动参数\">#</a> 3. 修改启动参数</h4>\n<p>​\t修改启动参数，否则启动时报警告。提示设置 SOLR_ULIMIT_CHECKS=false</p>\n<pre><code># cd /usr/local/solr/bin\n# vim solr.in.sh\n</code></pre>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-02.jpg\" class=\"\"></p>\n<h4 id=\"4启动solr\"><a class=\"anchor\" href=\"#4启动solr\">#</a> 4. 启动 Solr</h4>\n<p>​\tSolr 内嵌 Jetty，直接启动即可。监听 8983 端口。</p>\n<p>​\tsolr 默认不推荐 root 账户启动，如果是 root 账户启动需要添加 - force 参数。</p>\n<pre><code># ./solr start -force\n</code></pre>\n<h3 id=\"四-可视化管理界面\"><a class=\"anchor\" href=\"#四-可视化管理界面\">#</a> 四、可视化管理界面</h3>\n<p>​\t在关闭防火墙的前提下，可以在 windows 的浏览器中访问 Solr。</p>\n<p>​\t输入: <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguOTMuMTA6ODk4Mw==\">http://192.168.93.10:8983</span> 就可以访问 Solr 的可视化管理界面。</p>\n<p>​\t左侧有 5 个菜单。分别是：</p>\n<p>​\t（1）Dashboard：面板显示 Solr 的总体信息。</p>\n<p>​\t（2）Logging：日志</p>\n<p>​\t（3）Core Admin：Solr 的核心。类似于数据的 Database</p>\n<p>​\t（4）Java Perperties：所有 Java 相关属性。</p>\n<p>​\t（5）Thread Dump：线程相关信息。</p>\n<p>​\t（6）如果有 Core，将显示在此处。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-03.JPG\" class=\"\"></p>\n<h3 id=\"五-新建核心\"><a class=\"anchor\" href=\"#五-新建核心\">#</a> 五、新建核心</h3>\n<p>​\tSolr 安装完成后默认是没有核心的。需要手动配置。</p>\n<p>​\t需要在 solr/server/solr 下新建文件夹，并给定配置文件，否则无法建立。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-04.JPG\" class=\"\"></p>\n<h4 id=\"1新建目录\"><a class=\"anchor\" href=\"#1新建目录\">#</a> 1. 新建目录</h4>\n<p>​\t在 /usr/local/solr/server/solr 中新建自定义名称目录。此处示例名称为 testcore。</p>\n<pre><code># cd /usr/local/solr/server/solr\n# mkdir testcore\n</code></pre>\n<h4 id=\"2复制配置文件\"><a class=\"anchor\" href=\"#2复制配置文件\">#</a> 2. 复制配置文件</h4>\n<p>​\t在 configsets 里面包含了_default 和 sample_techproducts_configs。里面都是配置文件示例。_default 属于默认配置，较纯净。sample_techproducts_configs 是带有了一些配置示例。</p>\n<pre><code># cp -r configsets/_default/conf/ testcore/\n</code></pre>\n<h4 id=\"3填写core信息\"><a class=\"anchor\" href=\"#3填写core信息\">#</a> 3. 填写 Core 信息</h4>\n<p>​\t在可视化管理界面中 Core Admin 中编写信息后点击 Add Core 后，短暂延迟后 testcore 就会创建成功。schema 处不用更改。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-05.JPG\" class=\"\"></p>\n<h4 id=\"4出现testcore\"><a class=\"anchor\" href=\"#4出现testcore\">#</a> 4. 出现 testcore</h4>\n<p>​\t在客户端管理界面中，选择新建的 Core 后，就可以按照自己项目的需求进行操作了。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-06.jpg\" class=\"\"></p>\n<h3 id=\"六-分词analysis\"><a class=\"anchor\" href=\"#六-分词analysis\">#</a> 六、分词 Analysis</h3>\n<p>​\t在 Solr 可视化管理界面中，Core 的管理菜单项中都会有 Analysis。表示根据 Scheme.xml (managed-schema) 中配置要求进行解析。</p>\n<p>​\t对英文解析就比较简单了，只要按照空格把英文语句拆分成英文单词即可。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-07.jpg\" class=\"\"></p>\n<p>​\t但是如果条件是中文时，把一句话按照字进行拆分就不是很合理了。正确的方式是按照合理的词组进行拆分。<img data-src=\"/2022/10/07/Distribution/Solr/solr-08.jpg\" class=\"\"></p>\n<h4 id=\"1配置步骤\"><a class=\"anchor\" href=\"#1配置步骤\">#</a> 1. 配置步骤</h4>\n<p>​\t上传 ik-analyzer.jar 到 webapps 中。</p>\n<p>​\t去 https://search.maven.org/search?q=com.github.magese 下载对应版本的 ik-analyzer。可以在资料中直接获取。</p>\n<h5 id=\"11上传jar到指定目录\"><a class=\"anchor\" href=\"#11上传jar到指定目录\">#</a> 1.1 上传 jar 到指定目录</h5>\n<p>​\t上传 ik-analyzer-7.7.0.jar 到</p>\n<p>​\t/usr/local/solr/server/solr-webapp/webapp/WEB-INF/lib 目录中</p>\n<h5 id=\"12修改配置文件\"><a class=\"anchor\" href=\"#12修改配置文件\">#</a> 1.2 修改配置文件</h5>\n<p>​\t修改 /usr/local/solr/server/solr/testcore/conf/managed-schema</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> /usr/local/solr/server/solr/testcore/conf/managed-schema</pre></td></tr></table></figure><p>​\t添加下面内容。</p>\n<p>​\t排版：Esc 退出编辑状态下：gg=G</p>\n<pre><code>&lt;field name=&quot;myfield&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;\n    &lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;\n            &lt;analyzer type=&quot;index&quot;&gt;\n                    &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot; useSmart=&quot;false&quot; conf=&quot;ik.conf&quot;/&gt;\n                    &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;\n            &lt;/analyzer&gt;\n            &lt;analyzer type=&quot;query&quot;&gt;\n                    &lt;tokenizer class=&quot;org.wltea.analyzer.lucene.IKTokenizerFactory&quot; useSmart=&quot;true&quot; conf=&quot;ik.conf&quot;/&gt;\n                    &lt;filter class=&quot;solr.LowerCaseFilterFactory&quot;/&gt;\n            &lt;/analyzer&gt;\n    &lt;/fieldType&gt;\n</code></pre>\n<h5 id=\"13重启\"><a class=\"anchor\" href=\"#13重启\">#</a> 1.3 重启</h5>\n<pre><code># cd /usr/local/solr/bin\n# ./solr stop -all\n# ./solr start -force\n</code></pre>\n<h5 id=\"14验证\"><a class=\"anchor\" href=\"#14验证\">#</a> 1.4 验证</h5>\n<p>​\t可以在可视化管理界面中找到 myfield 属性进行验证。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-09.jpg\" class=\"\"></p>\n<h4 id=\"2managed-schema配置说明\"><a class=\"anchor\" href=\"#2managed-schema配置说明\">#</a> 2.managed-schema 配置说明</h4>\n<h5 id=\"21-fieldtype\"><a class=\"anchor\" href=\"#21-fieldtype\">#</a> 2.1&lt; fieldType/&gt;</h5>\n<p>​\t表示定义一个属性类型。在 Solr 中属性类型都是自定义的。在上面配置中 name=”text_ik” 为自定义类型。当某个属性取值为 text_ik 时 IK Analyzer 才能生效。</p>\n<h5 id=\"22-field\"><a class=\"anchor\" href=\"#22-field\">#</a> 2.2&lt; field/&gt;</h5>\n<p>​\t表示向 Document 中添加一个属性。</p>\n<p>​\t常用属性：</p>\n<p>​\t\tname: 属性名</p>\n<p>​\t\ttype: 属性类型。所有类型都是 solr 使用 &lt;fieldType&gt; 配置的</p>\n<p>​\t\tindexed: 是否建立索引</p>\n<p>​\t\tstored: solr 是否把该属性值响应给搜索用户。</p>\n<p>​\t\trequired：该属性是否是必须的。默认 id 是必须的。</p>\n<p>​\t\tmultiValued：如果为 true，表示该属性为复合属性，此属性中包含了多个其他的属性。常用在多个列作为搜索条件时，把这些列定义定义成一个新的复合属性，通过搜索一个复合属性就可以实现搜索多个列。当设置为 true 时与 &lt;copyField source=&quot;&quot;dest=&quot;&quot;/&gt; 结合使用</p>\n<h5 id=\"23-uniquekey\"><a class=\"anchor\" href=\"#23-uniquekey\">#</a> 2.3&lt; uniqueKey&gt;</h5>\n<p>​\t唯一主键，Solr 中默认定义 id 属性为唯一主键。ID 的值是不允许重复的。</p>\n<h5 id=\"24-dynamicfield\"><a class=\"anchor\" href=\"#24-dynamicfield\">#</a> 2.4&lt; dynamicField&gt;</h5>\n<p>​\t名称中允许 * 进行通配。代表满足特定名称要求的一组属性。</p>\n<pre><code>msb_java    \n</code></pre>\n<p>​\tmsb_bigdata</p>\n<p>​\tmsb_UI</p>\n<p>​        msb_*</p>\n<h3 id=\"七-dataimport\"><a class=\"anchor\" href=\"#七-dataimport\">#</a> 七、Dataimport</h3>\n<p>​\t可以使用 Solr 自带的 Dataimport 功能把数据库中数据快速导入到 solr 中.</p>\n<p>​\t<strong>必须保证 managed-schema 和数据库中表的列对应。，添加配置</strong></p>\n<h4 id=\"1修改配置文件\"><a class=\"anchor\" href=\"#1修改配置文件\">#</a> 1. 修改配置文件</h4>\n<p>​\t修改 solrconfig.xml，添加下面内容</p>\n<pre><code> &lt;!-- 配置数据导入的处理器 --&gt;\n  &lt;requestHandler name=&quot;/dataimport&quot; class=&quot;org.apache.solr.handler.dataimport.DataImportHandler&quot;&gt;\n    &lt;lst name=&quot;defaults&quot;&gt;\n\t  &lt;!--  加载data-config.xml  --&gt;\n      &lt;str name=&quot;config&quot;&gt;data-config.xml&lt;/str&gt;\n     &lt;/lst&gt;\n  &lt;/requestHandler&gt;\n</code></pre>\n<h4 id=\"2新建data-configxml\"><a class=\"anchor\" href=\"#2新建data-configxml\">#</a> 2. 新建 data-config.xml</h4>\n<p>​\t和 solrconfig.xml 同一目录下新建 data-config.xml</p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;dataConfig&gt;\n        &lt;dataSource type=&quot;JdbcDataSource&quot;   \n                driver=&quot;com.mysql.jdbc.Driver&quot;   \n                url=&quot;jdbc:mysql://192.168.1.135:3306/mytest&quot;   \n                user=&quot;root&quot;   \n                password=&quot;root&quot;/&gt;\n        &lt;document&gt;\n            &lt;entity name=&quot;product&quot; query=&quot;SELECT id,name,price from t_product&quot;&gt;\n                &lt;!-- \n                 实现数据库的列和索引库的字段的映射\n                 column 指定数据库的列表\n                 name  指定索引库的字段名字，必须和schema.xml中定义的一样\n                 --&gt;\n                 &lt;field column=&quot;id&quot; name=&quot;id&quot;/&gt;\n                 &lt;field column=&quot;name&quot; name=&quot;name&quot;/&gt;\n\t\t\t\t &lt;field column=&quot;price&quot; name=&quot;price&quot;/&gt;\n            &lt;/entity&gt;\n         &lt;/document&gt;\n&lt;/dataConfig&gt;\n</code></pre>\n<h4 id=\"3添加jar\"><a class=\"anchor\" href=\"#3添加jar\">#</a> 3. 添加 jar</h4>\n<p>​\t向 solr-webapp 中添加三个 jar。在 dist 中两个还有一个数据库驱动。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Solr/solr-10.jpg\" class=\"\"></p>\n<h4 id=\"4操作\"><a class=\"anchor\" href=\"#4操作\">#</a> 4. 操作</h4>\n<p>​\t重启 solr 后，在可视化管理页面中进行数据导入。</p>\n<p>​\t注意：</p>\n<p>​\t点击导入按钮后，要记得点击刷新按钮。</p>\n<h3 id=\"八-菜单项目documents使用办法\"><a class=\"anchor\" href=\"#八-菜单项目documents使用办法\">#</a> 八、菜单项目 Documents 使用办法</h3>\n<p>​\t以 XML 格式举例</p>\n<h4 id=\"1新增修改\"><a class=\"anchor\" href=\"#1新增修改\">#</a> 1. 新增 / 修改</h4>\n<p>​\t当 id 不存在时新增，当 id 存在修改。</p>\n<pre><code>&lt;doc&gt;\n&lt;field name=&quot;id&quot;&gt;8&lt;/field&gt;\n&lt;field name=&quot;name&quot;&gt;明天更大卖&lt;/field&gt;\n&lt;field name=&quot;price&quot;&gt;98&lt;/field&gt;\n&lt;/doc&gt;\n</code></pre>\n<h4 id=\"2删除\"><a class=\"anchor\" href=\"#2删除\">#</a> 2. 删除</h4>\n<h5 id=\"21根据主键删除\"><a class=\"anchor\" href=\"#21根据主键删除\">#</a> 2.1 根据主键删除</h5>\n<pre><code>&lt;delete&gt;\n\t&lt;id&gt;8&lt;/id&gt;\n&lt;/delete&gt;\n&lt;commit/&gt;\n</code></pre>\n<h5 id=\"22根据条件删除\"><a class=\"anchor\" href=\"#22根据条件删除\">#</a> 2.2 根据条件删除</h5>\n<pre><code>&lt;delete&gt;\n\t&lt;query&gt;*:*&lt;/query&gt;\n&lt;/delete&gt;\n</code></pre>\n<h4 id=\"3solr可视化界面使用query\"><a class=\"anchor\" href=\"#3solr可视化界面使用query\">#</a> 3.solr 可视化界面使用（QUERY）</h4>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645693120964.png\" alt=\"1645693120964\" /></p>\n<p>参数：</p>\n<p>​\t**q：**query，等于。格式  ——&gt; parameter/columns : value\t<strong>具有分词时，相当于模糊查询 --like</strong></p>\n<p>​\t<strong>fq：</strong>【在 q 的情况下再加条件】（要有分词功能）注意这里的 keyword 是用来检索的字段，他包含 name、address、gender、expert_skill，这几个属性，所以我搜索 “海” 能够查询出来有海字的记录。</p>\n<p>​\t**sort：** 排序 。 parameter/columns    desc 逆序 /asc</p>\n<p>​\t**start,rows：** 从查询结果的 start 开始，显示到 rows 结束【下标】</p>\n<p>​\t**fl：** 想显示的属性。</p>\n<p>​\t**df：** 不想显示的属性。</p>\n<p>​\t**wt：** 返回值类型</p>\n<p>​\t**hl：** 高亮</p>\n<pre><code>\t*  hl.fl\t\t\t\t\t\t value\n\t*  hl.simple.pre        &lt;font color='red'&gt;\n\t*  hl.simple.post     &lt;/font&gt;\n</code></pre>\n<p>​</p>\n<h3 id=\"九-使用solrj操作solr\"><a class=\"anchor\" href=\"#九-使用solrj操作solr\">#</a> 九、使用 SolrJ 操作 Solr</h3>\n<p>​\tSolrJ 是 Solr 提供的 Java 客户端 API。通过 SolrJ 可以实现 Java 程序对 Solr 中数据的操作。</p>\n<p>​\t大前提：添加 SolrJ 依赖。依赖版本和 Solr 版本严格对应</p>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.solr&lt;/groupId&gt;\n        \t&lt;artifactId&gt;solr-solrj&lt;/artifactId&gt;\n        &lt;version&gt;7.7.2&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<h4 id=\"1新增修改实现\"><a class=\"anchor\" href=\"#1新增修改实现\">#</a> 1. 新增 / 修改实现</h4>\n<pre><code>String url = &quot;http://192.168.93.10:8983/solr/testcore&quot;;\nHttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();\nSolrInputDocument inputDocument = new SolrInputDocument();\ninputDocument.addField(&quot;id&quot;,&quot;3&quot;);\ninputDocument.addField(&quot;myfield&quot;,&quot;myfield3&quot;);\nsolrClient.add(inputDocument);\nsolrClient.commit();\n</code></pre>\n<ul>\n<li>使用 solrj 进行索引的添加\n<ul>\n<li>\n<ul>\n<li><strong>每个索引的添加必须要 ID</strong>\n<ul>\n<li><strong>添加 key 值要和 schema.xml 文件内的 field 域保持一致</strong></li>\n<li><strong>添加数据后一定要提交数据，不然是不存在数据的</strong></li>\n<li><strong>连接 Solr 的对象需要连接到项目名</strong></li>\n<li><strong>每个 document 是一组 Json 数据对象</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2删除实现\"><a class=\"anchor\" href=\"#2删除实现\">#</a> 2. 删除实现</h4>\n<pre><code>String url = &quot;http://192.168.93.10:8983/solr/testcore&quot;;\nHttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();\nsolrClient.deleteById(&quot;3&quot;);\nsolrClient.commit();\n</code></pre>\n<ul>\n<li><strong>删除</strong></li>\n<li>删除支持两种删除方式\n<ul>\n<li>\n<ul>\n<li><strong>1. 根据 ID</strong>\n<ul>\n<li>2. 执行查询删除\n<ul>\n<li>\n<ul>\n<li><strong>查询删除的格式：查询的域：值</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3查询实现\"><a class=\"anchor\" href=\"#3查询实现\">#</a> 3. 查询实现</h4>\n<pre><code>public void testQuery()&#123;\n    try &#123;\n        String url = &quot;http://192.168.93.10:8983/solr/testcore&quot;;\n        HttpSolrClient solrClient = new HttpSolrClient.Builder(url).build();\n\n        //封装了所有查询条件\n        SolrQuery params = new SolrQuery();\n        params.setQuery(&quot;name:丰富的&quot;);\n        //排序\n        params.setSort(&quot;price&quot;, SolrQuery.ORDER.desc);\n        //分页\n        params.setStart(0);\n params.setRows(1);\n        //高亮\n        params.setHighlight(true);\n        params.addHighlightField(&quot;name&quot;);\n        params.setHighlightSimplePre(&quot;&lt;span&gt;&quot;);\n        params.setHighlightSimplePost(&quot;&lt;/span&gt;&quot;);\n\n        QueryResponse response = solrClient.query(params);\n        SolrDocumentList list = response.getResults();\n        System.out.println(&quot;总条数：&quot;+list.getNumFound());\n\n        //高亮数据\n        Map&lt;String, Map&lt;String, List&lt;String&gt;&gt;&gt; highlighting = response.getHighlighting();\n\n        for(SolrDocument doc :list)&#123;\n            System.out.println(doc.get(&quot;id&quot;));\n            Map&lt;String, List&lt;String&gt;&gt; map = highlighting.get(doc.get(&quot;id&quot;));\n            List&lt;String&gt; HLList = map.get(&quot;name&quot;);\n            if(HLList!=null&amp;&amp;HLList.size()&gt;0)&#123;//显示高亮数据\n                System.out.println(HLList.get(0));\n            &#125;else&#123;\n                System.out.println(doc.get(&quot;name&quot;));\n            &#125;\n            System.out.println(doc.get(&quot;price&quot;));\n            System.out.println(&quot;===================&quot;);\n        &#125;\n        solrClient.close();\n    &#125; catch (SolrServerException e) &#123;\n        e.printStackTrace();\n    &#125; catch (IOException e) &#123;\n        e.printStackTrace();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>使用到的对象</strong></p>\n<ul>\n<li>1.SolrQuery 查询对象\n<ul>\n<li>1.setQuery ()：设置查询的关键字<br />\n 2.set（）: 设置查询的域<br />\n 3.setStart (): 设置开始<br />\n 4.setRows（）：设置结束</li>\n</ul>\n</li>\n</ul>\n<hr />\n<ul>\n<li>\n<p>2.QueryResponse：响应结果集</p>\n<ul>\n<li>1.getNumFound (): 返回查询到的数量<br />\n 2.getResults（）；返回封装的 list 集合</li>\n</ul>\n</li>\n<li>\n<p>3.SolrDocumentList：结果集合</p>\n<ul>\n<li>1.get (): 获取指定域的值</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十-spring-data-for-apache-solr\"><a class=\"anchor\" href=\"#十-spring-data-for-apache-solr\">#</a> 十、Spring Data for Apache Solr</h3>\n<h4 id=\"1spring-data简介\"><a class=\"anchor\" href=\"#1spring-data简介\">#</a> 1.Spring Data 简介</h4>\n<p>​\tSpring Data 是 Spring 的顶级项目。里面包含了 N 多个二级子项目，每个子项目对应一种技术或工具。其目的为了让数据访问更加简单，更加方便的和 Spring 进行整合。</p>\n<p>​\tSpring Data 项目如果单独使用是还需要配置 XML 配置文件的，当和 Spring Boot 整合后使用起来非常方便。spring-boot-starter-data-xx 就是对应的启动器。</p>\n<h4 id=\"2实现步骤\"><a class=\"anchor\" href=\"#2实现步骤\">#</a> 2. 实现步骤</h4>\n<h5 id=\"21添加依赖\"><a class=\"anchor\" href=\"#21添加依赖\">#</a> 2.1 添加依赖</h5>\n<pre><code> &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-solr&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre>\n<h5 id=\"22编写配置文件\"><a class=\"anchor\" href=\"#22编写配置文件\">#</a> 2.2 编写配置文件</h5>\n<pre><code>spring:\n  data:\n    solr:\n      host: http://192.168.9.132:8080/solr\n      # zk-host: 192.168.9.132:2181,192.168.9.132:2182,192.168.9.132:2183\n</code></pre>\n<h5 id=\"23编写测试类\"><a class=\"anchor\" href=\"#23编写测试类\">#</a> 2.3 编写测试类</h5>\n<pre><code>@RunWith(SpringJUnit4ClassRunner.class)\n@SpringBootTest(classes = MyApplication.class)\npublic class MyTest &#123;\n    @Autowired\n    private SolrTemplate solrTemplate;\n\n    public void testInsert()&#123;\n        SolrInputDocument doc = new SolrInputDocument();\n        doc.setField(&quot;id&quot;,&quot;002&quot;);\n        doc.setField(&quot;item_title&quot;,&quot;这是一个手机3&quot;);\n        UpdateResponse ur = solrTemplate.saveBean(&quot;collection1&quot;, doc);\n        if(ur.getStatus()==0)&#123;\n            System.out.println(&quot;成功&quot;);\n        &#125;else&#123;\n            System.out.println(&quot;失败&quot;);\n        &#125;\n        solrTemplate.commit(&quot;collection1&quot;);\n    &#125;\n\n    public void testDelete()&#123;\n        UpdateResponse ur = solrTemplate.deleteByIds(&quot;collection1&quot;, &quot;change.me&quot;);\n        if(ur.getStatus()==0)&#123;\n            System.out.println(&quot;成功&quot;);\n        &#125;else&#123;\n            System.out.println(&quot;失败&quot;);\n        &#125;\n        solrTemplate.commit(&quot;collection1&quot;);\n    &#125;\n\n\n    public void query()&#123;\n        SimpleQuery query = new SimpleQuery();\n        Criteria c = new Criteria(&quot;item_keywords&quot;);\n        c.is(&quot;手机&quot;);\n        query.addCriteria(c);\n        query.setOffset(1L);\n        query.setRows(1);\n        ScoredPage&lt;DemoPojo&gt; sp = solrTemplate.queryForPage(&quot;collection1&quot;, query, DemoPojo.class);\n        System.out.println(sp.getContent());\n    &#125;\n\n    @Test\n    public void queryHL()&#123;\n\n        List&lt;DemoPojo&gt; listResult = new ArrayList&lt;&gt;();\n        SimpleHighlightQuery query = new SimpleHighlightQuery();\n        //设置查询条件\n        Criteria c = new Criteria(&quot;item_keywords&quot;);\n        c.is(&quot;手机&quot;);\n        query.addCriteria(c);\n        //分页\n        query.setOffset(0L);\n        query.setRows(10);\n        //排序\n        Sort sort = new Sort(Sort.Direction.DESC,&quot;id&quot;);\n        query.addSort(sort);\n        //高亮设置\n        HighlightOptions hlo = new HighlightOptions();\n        hlo.addField(&quot;item_title item_sell_point&quot;);\n        hlo.setSimplePrefix(&quot;&lt;span style='color:red;'&gt;&quot;);\n        hlo.setSimplePostfix(&quot;&lt;/span&gt;&quot;);\n        query.setHighlightOptions(hlo);\n        HighlightPage&lt;DemoPojo&gt; hl = solrTemplate.queryForHighlightPage(&quot;collection1&quot;, query, DemoPojo.class);\n//        System.out.println(hl.getContent());\n        List&lt;HighlightEntry&lt;DemoPojo&gt;&gt; highlighted = hl.getHighlighted();\n        for(HighlightEntry&lt;DemoPojo&gt; hle : highlighted)&#123;\n            List&lt;HighlightEntry.Highlight&gt; list = hle.getHighlights();\n            DemoPojo dp = hle.getEntity();\n            for (HighlightEntry.Highlight h : list)&#123;//一个对象里面可能多个属性是高亮属性\n                if(h.getField().getName().equals(&quot;item_title&quot;))&#123;\n                    dp.setItem_title( h.getSnipplets().get(0));\n                &#125;\n            &#125;\n            listResult.add(dp);\n        &#125;\n        System.out.println(listResult);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"十一-使用zookeepr管理solr集群\"><a class=\"anchor\" href=\"#十一-使用zookeepr管理solr集群\">#</a> 十一。使用 zookeepr 管理 solr 集群</h3>\n<p>1. 上传压缩包到 /usr/local/tmp 下 并解压。</p>\n<p>2. 在 /usr/local 下新建文件夹 zookeeper</p>\n<pre><code># mkdir /usr/local/zookeeper\n</code></pre>\n<p>3. 把解压的所有文件复制到 zookeeper 下， 并命名为 zk1</p>\n<pre><code># cp -r /usr/local/temp/zookeeper-3.4.8 /usr/local/zookeeper/zk1\n</code></pre>\n<p>4. 在 zk1 下新建文件夹 data</p>\n<p>5. 在 data 下新建文件 myid, 里面写上 1</p>\n<pre><code># vim myid\n</code></pre>\n<p>6. 进入到 zk1/conf 下 把 zoo_sample.cfg 复制一份叫做 zoo.cfg</p>\n<p>7. 编辑 zoo.cfg 内容，设置 dataDIR 为 data 文件夹， 并在文件最下面添加下面内容</p>\n<pre><code>server.1=192.168.93.10:2688:3888\nserver.2=192.168.93.10:2689:3889\nserver.3=192.168.93.10:2690:3890\n</code></pre>\n<p>7.1 server.1 中的 1 是 myid 的内容</p>\n<p>7.2 2688 2689 2690 是 zookeeper 内部端口</p>\n<p>7.3 3888 3889 3890 是 leader 端口</p>\n<p>8. 把 zk1 复制两份，分部叫做 zk2  zk3  并修改 myid 的值为 2，3 修改 zoo.cfg 中 dataDIR 和 clientPort</p>\n<p>9. 启动三个 zookeeper</p>\n<pre><code># ./zkServer.sh start\n</code></pre>\n<p>10. 查看状态</p>\n<pre><code># ./zkServer.sh status\n</code></pre>\n<h3 id=\"十一-使用zookeepr管理solr集群dokcer\"><a class=\"anchor\" href=\"#十一-使用zookeepr管理solr集群dokcer\">#</a> 十一。使用 zookeepr 管理 solr 集群 (Dokcer)</h3>\n<h4 id=\"1-准备docker-composeyml文件\"><a class=\"anchor\" href=\"#1-准备docker-composeyml文件\">#</a> <strong>1、准备</strong> docker-compose.yml<strong> 文件</strong></h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>version: <span class=\"token string\">'2'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>services:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  zoo1:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    image: zookeeper:3.5</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    container_name: zoo1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      - <span class=\"token string\">\"2181:2181\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      ZOO_SERVERS: <span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2688:3888 <span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>zoo2:2689:3888 <span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>zoo3:2690:3888</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  zoo2:</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    image: zookeeper:3.5</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    container_name: zoo2</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      - <span class=\"token string\">\"2182:2181\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      ZOO_SERVERS: <span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>zoo1:2688:3888 <span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2689:3888 <span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>zoo3:2690:3888</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  zoo3:</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    image: zookeeper:3.5</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    restart: always</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    container_name: zoo3</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    ports:</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      - <span class=\"token string\">\"2183:2181\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    environment:</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      ZOO_MY_ID: <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      ZOO_SERVERS: <span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>zoo1:2688:3888 <span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>zoo2:2689:3888 <span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2690:3888</pre></td></tr></table></figure><h4 id=\"2-创建镜像\"><a class=\"anchor\" href=\"#2-创建镜像\">#</a> <strong>2、创建镜像</strong></h4>\n<ul>\n<li>要在创建的 docker-compose.yml 文件中使用命令</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><h4 id=\"3-进入容器\"><a class=\"anchor\" href=\"#3-进入容器\">#</a> <strong>3、进入容器</strong></h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zoo1 /bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#查看 zoo1 的状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./zkServer.sh status</pre></td></tr></table></figure><ul>\n<li>如果出现，以下情况：</li>\n</ul>\n<pre><code>ZooKeeper JMX enabled by default\nUsing config: /conf/zoo.cfg\nClient port not found in static config file. Looking in dynamic config file.\ngrep: : No such file or directory\nClient port not found in the server configs\nClient port not found. Looking for secureClientPort in the static config.\nUnable to find either secure or unsecure client port in any configs. Terminating.\n</code></pre>\n<p>​\t通过阅读我们知道他在 conf 中的 zoo.cfg 文件中缺少 **clientPort ** 我们只需要自行添加即可</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#修改之前我们先装一下 vim</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">vim</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#修改 zoo.fcg 文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">vim</span> /conf/zoo.fcg</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">clientPort</span><span class=\"token operator\">=</span><span class=\"token number\">2181</span></pre></td></tr></table></figure><ul>\n<li>\n<p>完事之后<strong>重启</strong> zoo1</p>\n<p><img data-src=\"C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645780920291.png\" alt=\"1645780920291\" /></p>\n<p>成功！！</p>\n</li>\n</ul>\n<h4 id=\"4-查看所有zookeeper的状态\"><a class=\"anchor\" href=\"#4-查看所有zookeeper的状态\">#</a> 4、查看所有 zookeeper 的状态</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zoo3 <span class=\"token function\">bash</span> ./bin/zkServer.sh status</pre></td></tr></table></figure><h4 id=\"5-进去客户端\"><a class=\"anchor\" href=\"#5-进去客户端\">#</a> 5、进去客户端</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> zoo3 zkCli.sh</pre></td></tr></table></figure><h3 id=\"十二-solrcloud\"><a class=\"anchor\" href=\"#十二-solrcloud\">#</a> 十二、SolrCloud</h3>\n<p>​\tSolr 可以搭建具备容错能力和高可用的 Solr 集群。集群中集群配置、自动负载均衡和查询故障转移、\t\t\tZookeeper 集群实现集群协调管理，这些全部功能统称为 SolrCloud。</p>\n<p>​\tSolrCloud 是基于 Zookeeper 进行管理的。在 Solr 中已经内置了 Zookeeper 相关内容，当执行集群创建命令会自动创建 Zookeeper 相关内容。这个使用的是 Zookeeper 的集群管理功能实现的。</p>\n<h4 id=\"1搭建\"><a class=\"anchor\" href=\"#1搭建\">#</a> 1. 搭建</h4>\n<h5 id=\"11创建\"><a class=\"anchor\" href=\"#11创建\">#</a> 1.1 创建</h5>\n<p>​\tSolrCloud 已经包含在了 Solr 中，可以直接启动 Solr 集群。</p>\n<pre><code> ./solr -e cloud -noprompt -force\n</code></pre>\n<p>​\t此命令等同于# ./solr -e cloud -force 全部参数为默认值。</p>\n<p>​\t运行成功后会在 example 文件夹多出 cloud 文件夹。</p>\n<h5 id=\"12停止\"><a class=\"anchor\" href=\"#12停止\">#</a> 1.2 停止</h5>\n<pre><code> ./solr stop -all\n</code></pre>\n<h5 id=\"13重新运行\"><a class=\"anchor\" href=\"#13重新运行\">#</a> 1.3 重新运行</h5>\n<pre><code> ./solr start -c -p 8983 -s ../example/cloud/node1/solr/ -force\n ./solr start -c -p 7574 -z localhost:9983 -s ../example/cloud/node2/solr/ -force\n</code></pre>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "分布式",
                "中间件",
                "Solr",
                "快速搜索"
            ]
        }
    ]
}