{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"面向对象\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "第8章_面向对象",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"面向过程和面向对象的区别\"><a href=\"#面向过程和面向对象的区别\" class=\"headerlink\" title=\"面向过程和面向对象的区别\"></a>面向过程和面向对象的区别</h1><p>面向过程：当事件比较简单的时候，利用面向过程，注重的是事件的具体的步骤&#x2F;过程，注重的是过程中的具体的行为，以函数为最小单位，考虑怎么做。</p>\n<p>面向对象：注重找“参与者”,将功能封装进对象，强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做。</p>\n<p>案例：</p>\n<p>人把大象装进冰箱：</p>\n<p>面向过程：</p>\n<p>函数1：打开冰箱(){人站在冰箱前，打开冰箱，冰箱卡到30度角的时候，冰箱的灯打开了………}</p>\n<p>函数2：储存大象(){大象先迈左腿，再迈右退，考虑冰箱能不能装下……}</p>\n<p>函数3：关闭冰箱(){人站在冰箱前，关闭冰箱，冰箱开到30度角的时候，冰箱的灯关闭了……….}</p>\n<p>面向对象：</p>\n<p>人{</p>\n<p>打开(冰箱){</p>\n<p>冰箱.打开();</p>\n<p>}</p>\n<p>存储(大象){</p>\n<p>大象.进入();</p>\n<p>}</p>\n<p>关闭(冰箱){</p>\n<p>冰箱.关闭();</p>\n<p>}</p>\n<p>}</p>\n<p>冰箱{</p>\n<p>打开（）{ 1.2.3.}</p>\n<p>关闭（）{}</p>\n<p>}</p>\n<p>柜子{</p>\n<p>}</p>\n<p>大象{</p>\n<p>进入(冰箱){</p>\n<p>}</p>\n<p>}</p>\n<p>面向过程 —&gt; 面向对象 , 其实就是由执行者 —&gt; 指挥者的 一个过渡</p>\n<p>面向过程：编年体<br>面向对象：纪传体</p>\n<p>二者相辅相成,并不是对立的。解决复杂问题,通过面向对象方式便于我们从宏观上把握事物之间复杂的关系、方便我们分析整个系统;具体到微观操作,仍然使用面向过程方式来处理</p>\n<h1 id=\"类和对象的关系\"><a href=\"#类和对象的关系\" class=\"headerlink\" title=\"类和对象的关系\"></a>类和对象的关系</h1><p>【1】万事万物皆对象</p>\n<p>【2】</p>\n<p>对象：具体的事物，具体的实体，具体的实例，模板下具体的产品</p>\n<p>类：对对象向上抽取出像的部分，公共的部分，形成类，类是抽象的，是一个模板</p>\n<p>【3】一般在写代码的时候先写类，然后在根据类创建对应的对象。</p>\n<h1 id=\"面向对象三个阶段\"><a href=\"#面向对象三个阶段\" class=\"headerlink\" title=\"面向对象三个阶段\"></a>面向对象三个阶段</h1><p>面向对象三个阶段：</p>\n<p>【1】面向对象分析OOA – Object Oriented Analysis</p>\n<p>对象：张三，王五，朱六，你，我</p>\n<p>抽取出一个类—-》人类</p>\n<p>类里面有什么：</p>\n<p>动词–》动态特性–》方法</p>\n<p>名词–》静态特性–》属性</p>\n<p>【2】面向对象设计OOD – Object Oriented Design</p>\n<p>先有类，再有对象：</p>\n<p>类：人类： Person</p>\n<p>对象：zhangsan ，lisi，zhuliu</p>\n<p>【3】面向对象编程OOP – Object Oriented Programming</p>\n<p>创建类：</p>\n<p>（1）属性（field 成员变量）</p>\n<p>属性用于定义该类或该类对象包含的数据或者说静态特征。属性作用范围是整个类体。</p>\n<p>属性定义格式：</p>\n<table>\n<thead>\n<tr>\n<th>[修饰符] 方法返回值类型 方法名(形参列表) {   &#x2F;&#x2F; n条语句  }</th>\n</tr>\n</thead>\n</table>\n<p>（2）方法</p>\n<p>方法用于定义该类或该类实例的行为特征和功能实现。方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。</p>\n<p>方法定义格式：</p>\n<table>\n<thead>\n<tr>\n<th>[修饰符] 方法返回值类型 方法名(形参列表) {   &#x2F;&#x2F; n条语句  }</th>\n</tr>\n</thead>\n</table>\n<p>void代表没有返回值；方法的作用：重用代码，封装功能，便于修改</p>\n<p>代码：</p>\n<ol>\n<li></li>\n</ol>\n<pre><code class=\"java\">package com.msb;\n\npublic class Person &#123;\n    //名词---》属性---》成员变量---》放在类中方法外（注意：我们只把有需要的内容写到代码里，不相关的东西不要放在代码中）\n    int age ;//年龄\n    String name;//姓名\n    double height;//身高\n    double weight;//体重\n\n    //动词---》方法\n    //吃饭\n    public void eat()&#123;\n        int num = 10;//局部变量：放在方法中\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\n    //睡觉：\n    public void sleep(String address)&#123;\n        System.out.println(&quot;我在&quot;+address+&quot;睡觉&quot;);\n    &#125;\n    //自我介绍：\n    public String introduce()&#123;\n        return &quot;我的名字是：&quot;+name+&quot;，我的年龄是：&quot;+age+&quot;,我的身高是：&quot;+height+&quot;,我的体重是：&quot;+weight;\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h1><ol>\n<li></li>\n</ol>\n<pre><code class=\"java\">package com.msb;\n\npublic class Test &#123;//测试类\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个人类的具体的对象/实例：\n        //创建一个对象，对象的名字叫：zs\n        //Person 属于 引用数据类型\n        //第一次加载类的时候，会进行类的加载，初始化创建对象的时候，对象的属性没有给赋值，有默认的初始化的值。\n        Person zs = new Person();\n        zs.name = &quot;张三&quot;;\n        zs.age = 19;\n        zs.height = 180.4;\n        zs.weight = 170.4;\n\n        //再创建一个对象：\n        //再次创建类的时候，就不会进行类的加载了，类的加载只在第一次需要的时候加载一次\n        Person ls = new Person();\n        ls.name = &quot;李四&quot;;\n        ls.age = 18;\n        ls.height = 170.6;\n        ls.weight = 160.5;\n\n        //对属性值进行读取：\n        System.out.println(zs.name);\n        System.out.println(ls.age);\n\n        //对方法进行操作：\n        //不同的对象，属性有自己的特有的值，但是方法都是调用类中通用的方法。\n        //属性：各个对象的属性是独立的，\n        //方法：各个对象的方法是共享的。\n        zs.eat();\n        ls.eat();\n        zs.sleep(&quot;教室&quot;);\n        /\\*String str = zs.introduce();\n        System.out.println(str);\\*/\n            System.out.println(zs.introduce());\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"局部变量和成员变量的区别\"><a href=\"#局部变量和成员变量的区别\" class=\"headerlink\" title=\"局部变量和成员变量的区别\"></a>局部变量和成员变量的区别</h1><p><strong>区别1：</strong>代码中位置不同</p>\n<p>成员变量：类中方法外定义的变量</p>\n<p>局部变量：方法中定义的变量 代码块中定义的变量</p>\n<p><strong>区别2：</strong>代码的作用范围</p>\n<p>成员变量：当前类的很多方法</p>\n<p>局部变量：当前一个方法（当前代码块）</p>\n<p><strong>区别3：</strong>是否有默认值</p>\n<p>成员变量：有</p>\n<p>局部变量：没有</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/fa7d1bf775d1f357c4dec5d94d02d2f2.png\" class=\"\">\n\n\n<p>引用数据类型： null</p>\n<p><strong>区别4：</strong>是否要初始化</p>\n<p>成员变量：不需要，不建议初始化，后续使用的时候再赋值即可</p>\n<p>局部变量：一定需要，不然直接使用的时候报错</p>\n<p><strong>区别5</strong>：内存中位置不同</p>\n<p>成员变量：堆内存</p>\n<p>局部变量：栈内存</p>\n<p><strong>区别6：</strong>作用时间不同</p>\n<p>成员变量：当前对象从创建到销毁</p>\n<p>局部变量：当前方法从开始执行到执行完毕</p>\n<p>代码：</p>\n<ol>\n<li>package com.msb;</li>\n<li></li>\n<li>&#x2F;**</li>\n<li>* @Auther: msb-zhaoss</li>\n<li>*&#x2F;</li>\n</ol>\n<pre><code class=\"java\">public class Student &#123;\n    byte e;\n    short s;\n    int c ;//成员变量：在类中方法外\n    long num2;\n    float f ;\n    double d;\n    char ch;\n    boolean bo;\n    String name;\n    public void study()&#123;\n        int num = 10 ; //局部变量：在方法中\n        System.out.println(num);//10\n        //int num ;重复命名，出错了\n        &#123;\n            int a;//局部变量：在代码块中\n        &#125;\n        int a;\n        if(1==3)&#123;\n            int b;\n        &#125;\n        System.out.println(c);\n    &#125;\n    public void eat()&#123;\n        System.out.println(c);\n    &#125;\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Student s = new Student();\n        System.out.println(s.c);\n        System.out.println(s.bo);\n        System.out.println(s.ch);\n        System.out.println(s.d);\n        System.out.println(s.e);\n        System.out.println(s.f);\n        System.out.println(s.name);\n        System.out.println(s.num2);\n        System.out.println(s.s);\n\n        s.d = 10.4;\n    &#125;\n&#125;\n\n</code></pre>\n<p>运行结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/92101fdba0ac0fe94fbe9079ab09ab40.png\" class=\"\">\n\n\n<h1 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h1><pre><code class=\"java\">public class Person &#123;\n    //构造器：没有任何参数的构造器我们叫做：空参构造器--》空构造器\n    public Person()&#123;\n        /\\*age = 19;\n        name = &quot;lili&quot;;\n        height = 169.5;\\*/\n    &#125;\n    //属性：\n    String name;\n    int age;\n    double height;\n    //方法：\n    public void eat()&#123;\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\n&#125;\n\npackage com.msb2;\n\n/\\*\\*\n    \\* @Auther: msb-zhaoss\n        \\*/\n        public class Test &#123;\n            //这是一个main方法，是程序的入口：\n            public static void main(String[] args) &#123;\n                //创建一个Person类的具体的对象/实例/实体：\n                /\\*\n                    创建对象的过程：\n                    1.第一次遇到Person的时候，进行类的加载（只加载一次）\n                    2.创建对象，为这个对象在堆中开辟空间\n                    3.为对象进行属性的初始化动作\n\n                    new关键字实际上是在调用一个方法，这个方法叫构造方法（构造器）\n                    调用构造器的时候，如果你的类中没有写构造器，那么系统会默认给你分配一个构造器，只是我们看不到罢了。\n                    可以自己显式 的将构造器编写出来：\n                    构造器的格式：\n                    [修饰符] 构造器的名字()&#123;\n\n                &#125;\n                构造器和方法的区别：\n                    1.没有方法的返回值类型\n                    2.方法体内部不能有return语句\n                    3.构造器的名字很特殊，必须跟类名一样\n\n                    构造器的作用：不是为了创建对象，因为在调用构造器之前，这个对象就已经创建好了，并且属性有默认的初始化的值。\n                    调用构造器的目的是给属性进行赋值操作的。\n\n                    注意：我们一般不会在空构造器中进行初始化操作，因为那样的话每个对象的属性就一样了。\n                    实际上，我们只要保证空构造器的存在就可以了，里面的东西不用写\n                    \\*/\n                    Person p = new Person();\n                System.out.println(p.age);\n                System.out.println(p.name);\n                System.out.println(p.height);\n\n                Person p2 = new Person();\n                System.out.println(p2.age);\n                System.out.println(p2.name);\n                System.out.println(p2.height);\n            &#125;\n        &#125;\n\n</code></pre>\n<h1 id=\"构造器的重载\"><a href=\"#构造器的重载\" class=\"headerlink\" title=\"构造器的重载\"></a>构造器的重载</h1><pre><code class=\"java\">public class Person &#123;\n\n    //属性：\n    String name;\n    int age;\n    double height;\n\n    //空构造器\n    public Person()&#123;\n\n    &#125;\n    public Person(String name,int age,double height)&#123;\n        //当形参名字和属性名字重名的时候，会出现就近原则：\n        //在要表示对象的属性前加上this.来修饰 ，因为this代表的就是你创建的那个对象\n        this.name = name;\n        this.age = age;\n        this.height = height;\n    &#125;\n    public Person(String a,int b)&#123;\n        name = a;\n        age = b;\n    &#125;\n\n    //方法：\n    public void eat()&#123;\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\n&#125;\npackage com.msb3.msb2;\n\n/\\*\\*\n    \\* @Auther: msb-zhaoss\n        \\*/\n        public class Test &#123;\n            //这是一个main方法，是程序的入口：\n            public static void main(String[] args) &#123;\n                /\\*\n                    1.一般保证空构造器的存在，空构造器中一般不会进行属性的赋值操作\n                    2.一般我们会重载构造器，在重载的构造器中进行属性赋值操作\n                    3.在重载构造器以后，假如空构造器忘写了，系统也不会给你分配默认的空构造器了，那么你要调用的话就会出错了。\n                    4\\. 当形参名字和属性名字重名的时候，会出现就近原则：\n                    在要表示对象的属性前加上this.来修饰 ，因为this代表的就是你创建的那个对象\n\n                    \\*/\n\n                    Person p = new Person();\n                /\\*p.age = 19;\n                p.name = &quot;lili&quot;;\n                p.height = 180.4;\\*/\n\n                    Person p2 = new Person(&quot;lili&quot;,19,180.4);\n                System.out.println(p2.age);\n                System.out.println(p2.height);\n                System.out.println(p2.name);\n\n            &#125;\n        &#125;\n</code></pre>\n<h1 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h1><h2 id=\"代码1\"><a href=\"#代码1\" class=\"headerlink\" title=\"代码1\"></a>代码1</h2><table>\n<thead>\n<tr>\n<th>public class Person {   int id;   int age;    public static void main(String args[]){   Person p1&#x3D; new Person();   }  }</th>\n</tr>\n</thead>\n</table>\n<p>内存分析：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/79c1914e1e30446244e44849e42197d1.png\" class=\"\">\n\n\n<h2 id=\"代码2\"><a href=\"#代码2\" class=\"headerlink\" title=\"代码2\"></a>代码2</h2><pre><code class=\"java\">public class Person &#123;\n    int id;\n    int age;\n    String school;\n    public Person (int a,int b,String c)&#123;\n        id=a;\n        age=b;\n        school=c;\n    &#125;\n    public static void main(String args[])&#123;\n        Person p= new Person(1,20, &quot;海淀&quot;);\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c1037dadb36bf06b082ec248a4d08482.png\" class=\"\">\n\n\n<h2 id=\"代码3\"><a href=\"#代码3\" class=\"headerlink\" title=\"代码3\"></a>代码3</h2><table>\n<thead>\n<tr>\n<th>class Person{   int id;   int age;   String school;   Person (int a,int b,String c){   id&#x3D;a;   age&#x3D;b;   school&#x3D;c;   }    public void setAge(int a){   age&#x3D;a;   }  }</th>\n</tr>\n</thead>\n</table>\n<pre><code class=\"java\">\n</code></pre>\n<p>|————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————–|</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/886999b72f2ada92abc161d2ab8e4df0.png\" class=\"\">\n\n\n<p>this</p>\n<p>【1】创建对象的过程：</p>\n<p>（1）在第一次遇到一个类的时候，对这个类要进行加载，只加载一次。</p>\n<p>（2）创建对象，在堆中开辟空间</p>\n<p>（3）对对象进行初始化操作，属性赋值都是默认的初始值。</p>\n<p>（4）new关键字调用构造器，执行构造方法，在构造器中对属性重新进行赋值</p>\n<p>this:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e59335fd9cf3566613aab1164ac0711b.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5b8476d675f8c1b9000590c4031a7005.png\" class=\"\">\n\n\n<p>从上面的效果能够看到：this指代的就是当前对象：</p>\n<p>内存：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4eda9c8a53fa801bd70b6fe32f281919.png\" class=\"\">\n\n\n<p>this关键字 用法：</p>\n<p>（1）this可以修饰属性：</p>\n<p>总结：当属性名字和形参发生重名的时候，或者 属性名字 和局部变量重名的时候，都会发生就近原则，所以如果我要是直接使用变量名字的话就指的是离的近的那个形参或者局部变量，这时候如果我想要表示属性的话，在前面要加上：this.修饰</p>\n<p>如果不发生重名问题的话，实际上你要是访问属性也可以省略this.</p>\n<pre><code class=\"java\">public class Person &#123;\n    //属性\n    int age;\n    String name;\n    double height;\n    //空构造器\n    public Person()&#123;\n\n    &#125;\n    //有参构造器\n    public Person(int age,String name,double height)&#123;\n        this.age = age;\n        this.name = name;\n        this.height = height;\n    &#125;\n    //方法：\n    public void eat()&#123;\n        int age = 10;\n        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age\n        System.out.println(this.age);//这里指代的就是属性的age\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<p>（2）this修饰方法：</p>\n<p>总结：在同一个类中，方法可以互相调用，this.可以省略不写。</p>\n<pre><code class=\"java\">public class Person &#123;\n    //属性\n    int age;\n    String name;\n    double height;\n    //空构造器\n    public Person()&#123;\n\n    &#125;\n    //有参构造器\n    public Person(int age,String name,double height)&#123;\n        this.age = age;\n        this.name = name;\n        this.height = height;\n    &#125;\n    //方法：\n    /\\*public void eat()&#123;\n        int age = 10;\n        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age\n        System.out.println(this.age);//这里指代的就是属性的age\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\\*/\n\n        public void play()&#123;\n        /\\*this.\\*/eat();\n        System.out.println(&quot;上网&quot;);\n        System.out.println(&quot;洗澡&quot;);\n    &#125;\n\n    public void eat()&#123;\n        System.out.println(/\\*this.\\*/age);\n        System.out.println(&quot;吃饭&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<p>（3）this可以修饰构造器：</p>\n<p>总结：同一个类中的构造器可以相互用this调用，注意：this修饰构造器必须放在第一行</p>\n<pre><code class=\"java\">public class Person &#123;\n    //属性\n    int age;\n    String name;\n    double height;\n    //空构造器\n    public Person()&#123;\n\n    &#125;\n    //有参构造器\n    public Person(int age,String name,double height)&#123;\n        this(age,name);\n        this.height = height;\n\n    &#125;\n    public Person(int age,String name)&#123;\n        this(age);\n        this.name = name;\n    &#125;\n    public Person(int age)&#123;\n        this.age = age;\n    &#125;\n    //方法：\n    /\\*public void eat()&#123;\n        int age = 10;\n        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age\n        System.out.println(this.age);//这里指代的就是属性的age\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\\*/\n\n        public void play()&#123;\n        /\\*this.\\*/eat();\n        System.out.println(&quot;上网&quot;);\n        System.out.println(&quot;洗澡&quot;);\n    &#125;\n\n    public void eat()&#123;\n        System.out.println(/\\*this.\\*/age);\n        System.out.println(&quot;吃饭&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h1><p>【1】static可以修饰：属性，方法，代码块，内部类。</p>\n<p>【2】static修饰属性；</p>\n<pre><code class=\"java\">public class Test &#123;\n    //属性：\n    int id;\n    static int sid;\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Test类的具体的对象\n        Test t1 = new Test();\n        t1.id = 10;\n        t1.sid = 10;\n\n        Test t2 = new Test();\n        t2.id = 20;\n        t2.sid = 20;\n\n        Test t3 = new Test();\n        t3.id = 30;\n        t3.sid = 30;\n\n        //读取属性的值：\n        System.out.println(t1.id);\n        System.out.println(t2.id);\n        System.out.println(t3.id);\n\n        System.out.println(t1.sid);\n        System.out.println(t2.sid);\n        System.out.println(t3.sid);\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>内存分析：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/86494081f26104991702618717098030.png\" class=\"\">\n\n\n<p>一般官方的推荐访问方式：可以通过类名.属性名的方式去访问：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/300391675e1efe8df337d8171c8bb6d7.png\" class=\"\">\n\n\n<p>static修饰属性总结：</p>\n<p>（1）在类加载的时候一起加载入方法区中的静态域中</p>\n<p>（2）先于对象存在</p>\n<p>（3）访问方式： 对象名.属性名 类名.属性名（推荐）</p>\n<p>static修饰属性的应用场景：某些特定的数据想要在内存中共享，只有一块 –》这个情况下，就可以用static修饰的属性</p>\n<pre><code class=\"java\">public class MsbStudent &#123;\n    //属性：\n    String name;\n    int age;\n    static String school;\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        MsbStudent.school = &quot;马士兵教育&quot;;\n        //创建学生对象：\n        MsbStudent s1 = new MsbStudent();\n        s1.name = &quot;张三&quot;;\n        s1.age = 19;\n        //s1.school = &quot;马士兵教育&quot;;\n\n        MsbStudent s2 = new MsbStudent();\n        s2.name = &quot;李四&quot;;\n        s2.age = 21;\n        //s2.school = &quot;马士兵教育&quot;;\n\n        System.out.println(s2.school);\n\n\n\n\n    &#125;\n\n&#125;\n\n</code></pre>\n<p>属性：</p>\n<p>静态属性 （类变量）</p>\n<p>非静态属性（实例变量）</p>\n<p>【3】static修饰方法；</p>\n<pre><code class=\"java\">public class Demo &#123;\n    int id;\n    static int sid;\n\n    public void a()&#123;\n        System.out.println(id);\n        System.out.println(sid);\n        System.out.println(&quot;------a&quot;);\n    &#125;\n    //1.static和public都是修饰符，并列的没有先后顺序，先写谁后写谁都行\n    static public void b()&#123;\n        //System.out.println(this.id);//4.在静态方法中不能使用this关键字\n        //a();//3.在静态方法中不能访问非静态的方法\n        //System.out.println(id);//2.在静态方法中不能访问非静态的属性\n        System.out.println(sid);\n        System.out.println(&quot;------b&quot;);\n    &#125;\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //5.非静态的方法可以用对象名.方法名去调用\n        Demo d = new Demo();\n        d.a();\n        //6.静态的方法可以用 对象名.方法名去调用 也可以 用 类名.方法名 （推荐）\n        Demo.b();\n        d.b();\n        &#123;% asset_img 4bb83b402c7aad5b29b09c46fe3a60b9.png  %&#125;\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h1><p>【1】类的组成：属性，方法，构造器，代码块，内部类</p>\n<p>【2】代码块分类：普通块，构造块，静态块，同步块（多线程）</p>\n<p>【3】代码：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //属性\n    int a;\n    static int sa;\n\n    //方法\n    public void a()&#123;\n        System.out.println(&quot;-----a&quot;);\n        &#123;\n            //普通块限制了局部变量的作用范围\n            System.out.println(&quot;这是普通块&quot;);\n            System.out.println(&quot;----000000&quot;);\n            int num = 10;\n            System.out.println(num);\n        &#125;\n        //System.out.println(num);\n        //if()&#123;&#125;\n        //while()&#123;&#125;\n    &#125;\n    public static void b()&#123;\n        System.out.println(&quot;------b&quot;);\n    &#125;\n\n    //构造块\n    &#123;\n        System.out.println(&quot;------这是构造块&quot;);\n    &#125;\n    //静态块\n    static&#123;\n        System.out.println(&quot;-----这是静态块&quot;);\n        //在静态块中只能方法：静态属性，静态方法\n        System.out.println(sa);\n        b();\n    &#125;\n\n\n    //构造器\n    public Test()&#123;\n        System.out.println(&quot;这是空构造器&quot;);\n    &#125;\n    public Test(int a)&#123;\n        this.a = a;\n    &#125;\n\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Test t = new Test();\n        t.a();\n\n        Test t2 = new Test();\n        t2.a();\n    &#125;\n\n\n\n&#125;\n\n</code></pre>\n<p>总结：</p>\n<p>（1）代码块执行顺序：</p>\n<p>最先执行静态块，只在类加载的时候执行一次，所以一般以后实战写项目：创建工厂，数据库的初始化信息都放入静态块。</p>\n<p>一般用于执行一些全局性的初始化操作。</p>\n<p>再执行构造块，（不常用）</p>\n<p>再执行构造器，</p>\n<p>再执行方法中的普通块。</p>\n<h1 id=\"包，import\"><a href=\"#包，import\" class=\"headerlink\" title=\"包，import\"></a>包，import</h1><p>【1】生活案例：</p>\n<p>邮寄快递：中国.北京.通州区.****小区.5号楼.3单元.101房.赵珊珊</p>\n<p>历史：常山赵子龙</p>\n<p>【2】包的作用：</p>\n<p>为了解决重名问题（实际上包对应的就是盘符上的目录）</p>\n<p>解决权限问题</p>\n<p>【3】创建包：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4c01c78e65328aa2cc03c43c7dc51cd7.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b813c37b6345ac6463be51d3c6c7ff77.png\" class=\"\">\n\n\n<p>包名定义：</p>\n<p>（1）名字全部小写</p>\n<p>（2）中间用.隔开</p>\n<p>（3）一般都是公司域名倒着写 ： com.jd com.msb</p>\n<p>（4）加上模块名字：</p>\n<p>com.jd.login com.jd.register</p>\n<p>（5）不能使用系统中的关键字：nul,con,com1—com9…..</p>\n<p>（6）包声明的位置一般都在非注释性代码的第一行：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c54ecb2742a2b971e196ee55f9ab9193.png\" class=\"\">\n\n\n<p>【4】导包问题：</p>\n<pre><code class=\"java\">import com.msb2.Person; //导包：就是为了进行定位\n\nimport java.util.Date;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        new Person();\n        new Date();\n        new java.sql.Date(1000L);//在导包以后，还想用其他包下同名的类，就必须要手动自己写所在的包。\n        new Demo();\n    &#125;\n&#125;\n\n</code></pre>\n<p>总结：</p>\n<pre><code class=\"java\">\n</code></pre>\n<p>（2）在导包以后，还想用其他包下同名的类，就必须要手动自己写所在的包。</p>\n<p>（3）同一个包下的类想使用不需要导包，可以直接使用。</p>\n<p>（4）在java.lang包下的类，可以直接使用无需导包：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0b7459093a2491a103c60fc5b7d9a6b9.png\" class=\"\">\n\n\n<p>（5）IDEA中导包快捷键：alt+enter</p>\n<p>可以自己设置自动导包</p>\n<p>（6）可以直接导入*：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/69d91ed24222309df909ff777d89d08f.png\" class=\"\">\n\n\n<p>【5】在Java中的导包没有包含和被包含的关系：</p>\n<p>设置目录平级的格式（不是包含和被包含的显示）：  </p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/26efc24659a7281452240f746bfc8f2f.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6d440aaefd446325e269a62253689110.png\" class=\"\">\n\n\n<p>【6】静态导入：</p>\n<ol>\n<li>package com.msb11;</li>\n<li>&#x2F;&#x2F;静态导入：</li>\n</ol>\n<pre><code class=\"java\"> import static java.lang.Math.\\*;\n //导入：java.lang下的Math类中的所有静态的内容\n\n public class Test &#123;\n //这是一个main方法，是程序的入口：\n public static void main(String[] args) &#123;\n System.out.println(random());\n System.out.println(PI);\n System.out.println(round(5.6));\n &#125;\n //在静态导入后，同一个类中有相同的方法的时候，会优先走自己定义的方法。\n public static int round(double a)&#123;\n return 1000;\n &#125;\n &#125;\n \n</code></pre>\n<h1 id=\"三大特性\"><a href=\"#三大特性\" class=\"headerlink\" title=\"三大特性\"></a>三大特性</h1><h2 id=\"封装-Encapsulation\"><a href=\"#封装-Encapsulation\" class=\"headerlink\" title=\"封装(Encapsulation)\"></a>封装(Encapsulation)</h2><p><strong>【1】生活案例：</strong></p>\n<p>ATM , 电线</p>\n<p><strong>【2】Java中封装的理解：</strong></p>\n<p>将某些东西进行隐藏，然后提供相应的方式进行获取。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/95a55583bf15b892c21ed0eb2380eed9.png\" class=\"\">\n\n\n<p>我们程序设计追求“高内聚，低耦合”。</p>\n<p>➢高内聚:类的内部数据操作细节自己完成，不允许外部干涉;</p>\n<p>➢低耦合:仅对外暴露少量的方法用于使用。</p>\n<p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提</p>\n<p>高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露</p>\n<p>的暴露出来。这就是封装性的设计思想。</p>\n<p><strong>【3】封装的好处：</strong></p>\n<p>提高代码的安全性</p>\n<p><strong>【4】代码：通过一个属性感受封装：</strong></p>\n<ol>\n<li>package com.msb.test01;</li>\n<li></li>\n<li>&#x2F;**</li>\n<li>* @Auther: msb-zhaoss</li>\n<li>*&#x2F;</li>\n</ol>\n<pre><code class=\"java\">public class Girl &#123;//女孩\n    //属性：\n    private int age;\n\n    //读取年龄：\n    public int duquAge()&#123;\n        return age;\n    &#125;\n\n    //设置年龄：\n    public void shezhiAge(int age)&#123;\n        if(age \\&gt;= 30 )&#123;\n            this.age = 18;\n        &#125;else&#123;\n            this.age = age;\n        &#125;\n\n    &#125;\n\n\n&#125;\n\npackage com.msb.test01;\n\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Girl类的对象：\n        Girl g = new Girl();\n        /\\*g.age = 33;\n        System.out.println(g.age);\\*/\n            //设置年龄：\n            g.shezhiAge(31);\n        //读取年龄：\n        System.out.println(g.duquAge());\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>上面的代码，对于属性age来说，我加了修饰符private，这样外界对它的访问就受到了限制，现在我还想加上其他的限制条件，但是在属性本身上没有办法再加了，所以我们通过定义方法来进行限制条件的添加。</p>\n<p>以属性为案例：</p>\n<p>进行封装：</p>\n<p>（1）将属性私有化，被private修饰–》加入权限修饰符</p>\n<p>一旦加入了权限修饰符，其他人就不可以随意的获取这个属性</p>\n<p>（2）提供public修饰的方法让别人来访问&#x2F;使用</p>\n<p>（3）即使外界可以通过方法来访问属性了，但是也不能随意访问，因为咱们在方法中可以加入 限制条件。</p>\n<p><strong>【5】实际开发中，方法一般会写成 setter，getter方法：</strong></p>\n<p>可以利用IDEA快捷键生成：alt+insert –&gt;getter and setter:</p>\n<pre><code class=\"java\">public class Girl &#123;//女孩\n    //属性：\n    private int age;\n\n    //读取年龄：\n    public int getAge()&#123;\n        return age;\n    &#125;\n\n    //设置年龄：\n    public void setAge(int age)&#123;\n        if(age \\&gt;= 30 )&#123;\n            this.age = 18;\n        &#125;else&#123;\n            this.age = age;\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p><strong>【6】加深练习：</strong></p>\n<pre><code class=\"java\">public class Student &#123;\n    //属性：\n    private int age;\n    private String name;\n    private String sex;\n\n    //加入对应的setter和getter方法：\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public String getSex() &#123;\n        return sex;\n    &#125;\n\n    public void setSex(String sex) &#123;\n        if(&quot;男&quot;.equals(sex) \\|\\| &quot;女&quot;.equals(sex) )&#123;//sex是男 或者 是 女\n            this.sex = sex;\n        &#125;else&#123;\n            this.sex = &quot;男&quot;;\n        &#125;\n    &#125;\n\n    //加入构造器：\n    public Student()&#123;\n\n    &#125;\n\n    public Student(int age,String name,String sex)&#123;\n        this.age = age;\n        this.name = name;\n        //this.sex = sex;\n        this.setSex(sex);\n    &#125;\n&#125;\n\npackage com.msb.test2;\n\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Student对象：\n        Student s1 = new Student();\n        s1.setName(&quot;nana&quot;);\n        s1.setAge(19);\n        s1.setSex(&quot;女&quot;);\n        System.out.println(s1.getName()+&quot;---&quot;+s1.getAge()+&quot;----&quot;+s1.getSex());\n\n        Student s2 = new Student(18,&quot;菲菲&quot;,&quot;asdfasdfsadf&quot;);\n        System.out.println(s2.getName()+&quot;---&quot;+s2.getAge()+&quot;----&quot;+s2.getSex());\n    &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"继承-Inheritance\"><a href=\"#继承-Inheritance\" class=\"headerlink\" title=\"继承(Inheritance)\"></a>继承(Inheritance)</h2><p><strong>【1】类是对对象的抽象：</strong></p>\n<p>举例：</p>\n<p>荣耀20 ，小米 红米3，华为 p40 pro —&gt; 类：手机类</p>\n<p><strong>【2】继承是对类的抽象：</strong></p>\n<p>举例：</p>\n<p>学生类：Student：</p>\n<p>属性：姓名，年龄，身高，学生编号</p>\n<p>方法：吃饭，睡觉，喊叫，学习</p>\n<p>教师类：Teacher:</p>\n<p>属性：姓名，年龄，身高，教师编号</p>\n<p>方法：吃饭，睡觉，喊叫，教学</p>\n<p>员工类：Emploee:</p>\n<p>属性：姓名，年龄，身高，员工编号</p>\n<p>方法：吃饭，睡觉，喊叫，工作</p>\n<p>共同的东西：</p>\n<p>人类：</p>\n<p>属性：姓名，年龄，身高</p>\n<p>方法：吃饭，睡觉，喊叫</p>\n<p>学生类&#x2F;教师类&#x2F;员工类 继承 自 人类</p>\n<p>以后定义代码：</p>\n<p>先定义人类：</p>\n<p>人类： —》父类，基类，超类</p>\n<p>属性：姓名，年龄，身高</p>\n<p>方法：吃饭，睡觉，喊叫</p>\n<p>再定义 ： —》子类，派生类</p>\n<p>学生类：Student：</p>\n<p>属性：学生编号</p>\n<p>方法：学习</p>\n<p>教师类：Teacher:</p>\n<p>属性：教师编号</p>\n<p>方法：教学</p>\n<p>员工类：Emploee:</p>\n<p>属性：员工编号</p>\n<p>方法：工作</p>\n<p>子类 继承自 父类</p>\n<p>狗类：</p>\n<p>属性：姓名，年龄，身高</p>\n<p>方法：吃饭，睡觉，喊叫</p>\n<p>我们的继承关系，是在合理的范围中进行的抽取 ，抽取出子类父类的关系：</p>\n<p>上面的案例中：</p>\n<p>学生类&#x2F;教师类&#x2F;员工类 继承 自 人类 —》合理</p>\n<p>学生类&#x2F;教师类&#x2F;员工类 继承 自 狗类 —》不合理</p>\n<p>区分：</p>\n<p>学生是一个人</p>\n<p>教师是一个人</p>\n<p>员工是一个人 —》合理</p>\n<p>学生是一个狗 —》不合理</p>\n<p>总结：继承 就是 is - a 的关系</p>\n<p><strong>【3】代码层面的解释：</strong></p>\n<p>先写父类，再写子类：</p>\n<p>父类：人类 Person</p>\n<p>子类：学生类 Student</p>\n<ol>\n<li>package com.msb.test03;</li>\n<li></li>\n<li>&#x2F;**</li>\n<li>* @Auther: msb-zhaoss</li>\n<li>*&#x2F;</li>\n</ol>\n<pre><code class=\"java\">public class Person &#123;\n    //属性：\n    private int age;\n    private String name;\n    private double height;\n\n    //提供setter getter方法：\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public double getHeight() &#123;\n        return height;\n    &#125;\n\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n\n    //方法：\n    public void eat()&#123;\n        System.out.println(&quot;可以吃饭。。。&quot;);\n    &#125;\n\n    public void sleep()&#123;\n        System.out.println(&quot;可以睡觉。。。&quot;);\n    &#125;\n\n&#125;\n</code></pre>\n<pre><code class=\"java\">\npackage com.msb.test03;\n\npublic class Student extends Person &#123;//子类Student 继承 父类Person\n    //属性：\n    private int sno;//学号\n\n    public int getSno() &#123;\n        return sno;\n    &#125;\n\n    public void setSno(int sno) &#123;\n        this.sno = sno;\n    &#125;\n\n    //方法：\n    public void study()&#123;\n        System.out.println(&quot;学生可以学习&quot;);\n    &#125;\n\n&#125;\n</code></pre>\n<pre><code class=\"java\">package com.msb.test03;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建子类Student的对象\n        Student s = new Student();\n        s.setSno(1001);\n        s.setAge(18);\n        s.setName(&quot;菲菲&quot;);\n        s.setHeight(180.4);\n\n        System.out.println(&quot;学生名字为：&quot;+s.getName()+&quot;,学生的年纪：&quot;+s.getAge());\n\n        //访问方法：\n        s.study();\n        s.eat();\n        s.sleep();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【4】继承的好处：</strong>提高代码的复用性</p>\n<p>父类定义的内容，子类可以直接拿过来用就可以了，不用代码上反复重复定义了</p>\n<p>需要注意的点：</p>\n<p>父类private修饰的内容，子类实际上也继承，只是因为封装的特性阻碍了直接调用，但是提供了间接调用的方式，可以间接调用。</p>\n<p><strong>【5】总结：</strong></p>\n<p><strong>（1）继承关系 ：</strong></p>\n<p>父类&#x2F;基类&#x2F;超类</p>\n<p>子类&#x2F;派生类</p>\n<p>子类继承父类一定在合理的范围进行继承的 子类 extends 父类</p>\n<p><strong>（2）继承的好处：</strong></p>\n<p>1.提高了代码的复用性，父类定义的内容，子类可以直接拿过来用就可以了，不用代码上反复重复定义了</p>\n<p>2.便于代码的扩展</p>\n<p>3.为了以后多态的使用。是多态的前提。</p>\n<p>（3）父类private修饰的内容，子类也继承过来了。</p>\n<p>（4）一个父类可以有多个子类。</p>\n<p>（5）一个子类只能有一个直接父类。</p>\n<p>但是可以间接的继承自其它类。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/853b3f04c4932ab081cea980b8b93937.png\" class=\"\">\n\n\n<p>（6）继承具有传递性：</p>\n<p>Student –》继承自 Person —》继承自Object</p>\n<p>Object类是所有类的根基父类。</p>\n<p>所有的类都直接或者间接的继承自Object。</p>\n<h3 id=\"内存分析-1\"><a href=\"#内存分析-1\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/efb4a8c9189aea82cd25ed76bb83892b.png\" class=\"\">\n\n\n<h3 id=\"权限修饰符\"><a href=\"#权限修饰符\" class=\"headerlink\" title=\"权限修饰符\"></a>权限修饰符</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6362352d7d72827f6e8330b2314e50fe.png\" class=\"\">\n\n\n<p>【1】private：权限：在当前类中可以访问</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f49850ada620326d3c6e3e969491ea0f.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d1051cf6836474d0bd46cebbc5e9f2b7.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/748f9a251587c5c3f527c6b60ae68961.png\" class=\"\">\n\n\n<p>【2】default:缺省修饰符：权限：到同一个包下的其他类都可以访问</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a9adb2a0ee7b22a158499bdf9264e927.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/507700aaac0bb1ea4c9ea49935843e06.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a1884c8b37bef224d8111b5d03a6fba7.png\" class=\"\">\n\n\n<p>【3】protected：权限：最大到不同包下的子类</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c9f4fec14f259e36b1d3b1d0f84666a1.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/14538a4729c730bee00cb172b0bbaf69.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1ba8b04d798285212551e94f9beb2a27.png\" class=\"\">\n\n\n<p>【4】public：在整个项目中都可以访问</p>\n<p>总结：</p>\n<p>属性，方法：修饰符：四种：private，缺省，protected，public</p>\n<p>类：修饰符：两种：缺省，public</p>\n<p>以后写代码</p>\n<p>一般属性：用private修饰 ，方法：用public修饰</p>\n<h3 id=\"方法的重写\"><a href=\"#方法的重写\" class=\"headerlink\" title=\"方法的重写\"></a>方法的重写</h3><p><strong>【1】重写：</strong></p>\n<p>发生在子类和父类中，当子类对父类提供的方法不满意的时候，要对父类的方法进行重写。</p>\n<p><strong>【2】重写有严格的格式要求：</strong></p>\n<p>子类的方法名字和父类必须一致，参数列表（个数，类型，顺序）也要和父类一致。</p>\n<p><strong>【3】代码：</strong></p>\n<pre><code class=\"java\">public class Person &#123;\n    public void eat()&#123;\n        System.out.println(&quot;吃食物&quot;);\n    &#125;\n    public void sleep()&#123;\n        System.out.println(&quot;睡觉&quot;);\n    &#125;\n&#125;\n\npublic class Student extends Person &#123;\n    public void study()&#123;\n        System.out.println(&quot;学习&quot;);\n    &#125;\n    @override\n    public void eat()&#123;\n        System.out.println(&quot;我喜欢吃小龙虾喝啤酒。。&quot;);\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/bd618aafd593ad295ce5c750618dc32a.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Student类的对象：\n        Student s = new Student();\n        s.eat();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【4】内存：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e938358a339565fc850e88e0fb056438.png\" class=\"\">\n\n\n<p><strong>【5】重载和重写的区别：</strong></p>\n<p>重载：在同一个类中，当方法名相同，形参列表不同的时候 多个方法构成了重载</p>\n<p>重写：在不同的类中，子类对父类提供的方法不满意的时候，要对父类的方法进行重写。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d5872fc2effee86b2e0573634c6c876c.png\" class=\"\">\n\n\n<h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h3><p>【1】super:指的是： 父类的</p>\n<p>【2】super可以修饰属性，可以修饰方法；</p>\n<p>在子类的方法中，可以通过 super.属性 super.方法 的方式，显示的去调用父类提供的属性，方法。在通常情况下，super.可以省略不写：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9c34efb863bf488a0d6c9a5e631a6a1d.png\" class=\"\">\n\n\n<p>在特殊情况下，当子类和父类的属性重名时，你要想使用父类的属性，必须加上修饰符super.，只能通过super.属性来调用</p>\n<p>在特殊情况下，当子类和父类的方法重名时，你要想使用父类的方法，必须加上修饰符super.，只能通过super.方法来调用</p>\n<p>在这种情况下，super.就不可以省略不写。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/af3658cad9ff80c0cd50ec8a8957809b.png\" class=\"\">\n\n\n<p><strong>【3】super修饰构造器：</strong></p>\n<p>其实我们平时写的构造器的第一行都有：super() –&gt;作用：调用父类的空构造器，只是我们一般都省略不写</p>\n<p>（所有构造器的第一行默认情况下都有super(),但是一旦你的构造器中显示的使用super调用了父类构造器，那么这个super()就不会给你默认分配了。如果构造器中没有显示的调用父类构造器的话，那么第一行都有super(),可以省略不写）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f83b1b34f45ed2c2fa508c0bfd3edff2.png\" class=\"\">\n\n\n<p>如果构造器中已经显示的调用super父类构造器，那么它的第一行就没有默认分配的super();了</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2b726c25c19f6d0bda87b121df9e5c17.png\" class=\"\">\n\n\n<p>在构造器中，super调用父类构造器和this调用子类构造器只能存在一个，两者不能共存：</p>\n<p>因为super修饰构造器要放在第一行，this修饰构造器也要放在第一行：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0d12186c6df4682072262dac8a7ebc6b.png\" class=\"\">\n\n\n<p>改正二选一即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b1232bfc50729fc5ae34b3bb8e24c495.png\" class=\"\">\n\n\n<p><strong>【4】以后写代码构造器的生成可以直接使用IDEA提供的快捷键：</strong></p>\n<p>alt+insert</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3a4ffc5a8078225efe692487eaaa27f9.png\" class=\"\">\n\n\n<h3 id=\"继承条件下构造方法的执行过程\"><a href=\"#继承条件下构造方法的执行过程\" class=\"headerlink\" title=\"继承条件下构造方法的执行过程\"></a>继承条件下构造方法的执行过程</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e486184aee5d5ed004fbe3a9bc06497a.png\" class=\"\">\n\n\n\n\n<pre><code class=\"java\">public class Person &#123;\n    int age;\n    String name;\n\n    public Person(int age, String name) &#123;\n        super();\n        this.age = age;\n        this.name = name;\n    &#125;\n\n    public Person() &#123;\n    &#125;\n&#125;\n\npublic class Student extends Person &#123;\n    double height ;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(int age, String name, double height) &#123;\n        super(age, name);\n        this.height = height;\n    &#125;\n&#125;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Student s = new Student(19,&quot;feifei&quot;,160.8);\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"Object类\"><a href=\"#Object类\" class=\"headerlink\" title=\"Object类\"></a>Object类</h3><p>所有类都直接或间接的继承自Object类，Object类是所有Java类的根基类。</p>\n<p>也就意味着所有的Java对象都拥有Object类的属性和方法。</p>\n<p>如果在类的声明中未使用extends关键字指明其父类，则默认继承Object类。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/aeccaa6fc133025b43dc6e9670f17d44.png\" class=\"\">\n\n\n<p>toString()方法</p>\n<p><strong>【1】Object类的toString()的作用：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/899bcc0c91c446dfb749301b53563996.png\" class=\"\">\n\n\n<p>方法的原理：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/745b80c0db126d2edafc1f7daf1f955a.png\" class=\"\">\n\n\n<p>现在，使用toString方法的时候，打印出来的东西 “不好看”，对于其他人来说不友好，可读性不好</p>\n<p>我们现在是想知道对象的信息，名字，年龄，身高。。。。。。</p>\n<p>现在的格式不好：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d377d6556ae80f216e00404592999e77.png\" class=\"\">\n\n\n<p>出现的问题：子类Student对父类Object提供的toString方法不满意，不满意–》对toString方法进行重写：</p>\n<pre><code class=\"java\">public class Student /\\*extends Object\\*/&#123;\n    private String name;\n    private int age;\n    private double height;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public double getHeight() &#123;\n        return height;\n    &#125;\n\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(String name, int age, double height) &#123;\n        this.name = name;\n        this.age = age;\n        this.height = height;\n    &#125;\n\n    public String toString() &#123;\n        return &quot;这是一个Student对象，这个对象的名字：&quot;+name+&quot;,年龄：&quot;+age+&quot;,身高：&quot;+height;\n    &#125;\n&#125;\n\n</code></pre>\n<p>测试类：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/777945b54a0ad9f5d6284ac3acf271d0.png\" class=\"\">\n\n\n<p>总结：toString的作用就是对对象进行“自我介绍”，一般子类对父类提供的toString都不满意，都要进行重写。</p>\n<p>IDEA提供了快捷键：</p>\n<pre><code class=\"java\">public class Student /\\*extends Object\\*/&#123;\n    private String name;\n    private int age;\n    private double height;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public double getHeight() &#123;\n        return height;\n    &#125;\n\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(String name, int age, double height) &#123;\n        this.name = name;\n        this.age = age;\n        this.height = height;\n    &#125;\n\n    /\\*public String toString() &#123;\n        return &quot;这是一个Student对象，这个对象的名字：&quot;+name+&quot;,年龄：&quot;+age+&quot;,身高：&quot;+height;\n    &#125;\\*/\n\n        @Override\n        public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n            &quot;name=&#39;&quot; + name + &#39;\\\\&#39;&#39; +\n            &quot;, age=&quot; + age +\n            &quot;, height=&quot; + height +\n            &#39;&#125;&#39;;\n    &#125;\n&#125;\n\n</code></pre>\n<p>equals方法</p>\n<pre><code class=\"java\">public class Phone &#123;//手机类：\n    //属性：\n    private String brand;//品牌型号\n    private double price;//价格\n    private int year ;//出产年份\n    //方法：\n\n    public String getBrand() &#123;\n        return brand;\n    &#125;\n\n    public void setBrand(String brand) &#123;\n        this.brand = brand;\n    &#125;\n\n    public double getPrice() &#123;\n        return price;\n    &#125;\n\n    public void setPrice(double price) &#123;\n        this.price = price;\n    &#125;\n\n    public int getYear() &#123;\n        return year;\n    &#125;\n\n    public void setYear(int year) &#123;\n        this.year = year;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Phone&#123;&quot; +\n            &quot;brand=&#39;&quot; + brand + &#39;\\\\&#39;&#39; +\n            &quot;, price=&quot; + price +\n            &quot;, year=&quot; + year +\n            &#39;&#125;&#39;;\n    &#125;\n\n    //构造器：\n\n    public Phone() &#123;\n    &#125;\n\n    public Phone(String brand, double price, int year) &#123;\n        this.brand = brand;\n        this.price = price;\n        this.year = year;\n    &#125;\n\n\n    //对equals方法进行重写：\n    public boolean equals(Object obj) &#123;//Object obj = new Phone();\n        //将obj转为Phone类型：\n        Phone other = (Phone)obj;//向下转型，为了获取子类中特有的内容\n        if(this.getBrand()==other.getBrand()&amp;&amp;this.getPrice()==other.getPrice()&amp;&amp;this.getYear()==other.getYear())&#123;\n            return true;\n        &#125;\n        return false;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n\n        //创建Phone类的对象：\n        Phone p1 = new Phone(&quot;华为P40&quot;,2035.98,2020);\n        Phone p2 = new Phone(&quot;华为P40&quot;,2035.98,2020);\n        //比较两个对象：p1和p2对象：\n        //==的作用：比较左右两侧的值是否想的，要么相等，返回true,要么不相等,返回false\n        System.out.println(p1==p2);//--\\&gt;\\&gt;\\&gt;对于引用数据类型来说，比较的是地址值。---\\&gt;一定返回的是false\n\n        //Object类提供了一个方法 equals方法 ：作用：比较对象具体内容是否相等。\n        boolean flag = p1.equals(p2);//点进源码发现：底层依旧比较的是==，比较的还是地址值。\n        System.out.println(flag);\n\n    &#125;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>equals作用：这个方法提供了对对象的内容是否相等 的一个比较方式，对象的内容指的就是属性。</p>\n<p>父类Object提供的equals就是在比较&#x3D;&#x3D;地址，没有实际的意义，我们一般不会直接使用父类提供的方法，</p>\n<p>而是在子类中对这个方法进行重写。</p>\n<p>instanceof</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/30e52b9618d9cbd40553fdef0f60675b.png\" class=\"\">\n\n\n<p>利用集成开发工具生成equals方法</p>\n<p><strong>【1】利用eclipse：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/91bbe52ca5d21f371941360962dea206.png\" class=\"\">\n\n\n<p><strong>【2】利用idea：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/97956cd439b862107cbc346e52ba17c3.png\" class=\"\">\n\n\n<h3 id=\"类和类的关系\"><a href=\"#类和类的关系\" class=\"headerlink\" title=\"类和类的关系\"></a>类和类的关系</h3><p>代码</p>\n<p>总结：</p>\n<p><strong>【1】面向对象的思维：</strong>找参与者，找女孩类，找男孩类</p>\n<p><strong>【2】体会了什么叫方法的性擦，什么叫方法的实参：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a4ab41dc30f6f798d4f7e210c42f758e.png\" class=\"\">\n\n\n<p>具体传入的内容 实参：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2c75ac587a45937e5652a3096bfe6126.png\" class=\"\">\n\n\n<p><strong>【3】类和类可以产生关系：</strong></p>\n<p>（1）将一个类作为另一个类中的方法的形参</p>\n<p>（2）将一个类作为另一个类的属性</p>\n<pre><code class=\"java\">public class Girl &#123;\n    //属性：\n    String name;\n    double weight;\n    Mom m /\\*= new Mom()\\*/;\n    //方法：\n    public void add(int a)&#123;//参数是基本数据类型\n        System.out.println(a);\n        System.out.println(a+100);\n    &#125;\n    //谈恋爱的方法：\n    public void love(Boy b)&#123;//参数是引用数据类型Boy\n        System.out.println(&quot;我男朋友的名字是：&quot;+b.name+&quot;，我男朋友的年龄是：&quot;+b.age);\n        b.buy();\n    &#125;\n\n    //女孩跟妈妈聊天：\n    public void wechat()&#123;\n        m.say();\n    &#125;\n\n    //构造器：\n    public Girl(String name, double weight) &#123;\n        this.name = name;\n        this.weight = weight;\n    &#125;\n&#125;\npublic class Boy &#123;\n    //属性：\n    int age;\n    String name;\n    //方法：\n    public void buy()&#123;\n        System.out.println(&quot;跟我谈恋爱，我给你买买买。。。&quot;);\n    &#125;\n    //构造器：\n    public Boy(int age, String name) &#123;\n        this.age = age;\n        this.name = name;\n    &#125;\n&#125;\npublic class Mom &#123;\n    //方法：\n    public void say()&#123;\n        System.out.println(&quot;妈妈唠唠叨叨 都是爱，听妈妈的话。。&quot;);\n    &#125;\n&#125;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Boy类的具体的对象：\n        Boy boy = new Boy(30,&quot;鹿晗&quot;);\n        //创建一个Girl类的具体的对象：\n        Girl girl = new Girl(&quot;关晓彤&quot;,100);\n        //谈恋爱：\n        //girl.love(boy);\n        Boy boy2 = new Boy(35,&quot;陈伟霆&quot;);\n        girl.love(boy2);\n\n        //还可以跟妈妈微信聊天：\n        girl.m = new Mom();\n        girl.wechat();\n    &#125;\n&#125;\n</code></pre>\n<p>总结</p>\n<p>一、继承关系</p>\n<p>继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。在Java中继承关系通过关键字extends明确标识，在设计时一般没有争议性。在UML类图设计中，继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6df8fcf572c5c9257622c561c3f9b8ce.png\" class=\"\">\n\n\n<p>二、实现关系</p>\n<p>实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性。在UML类图设计中，实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7980497e067f9fb24a419ae71874f7c9.png\" class=\"\">\n\n\n<p>三、依赖关系</p>\n<p>简单的理解，依赖就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是类B的变化会影响到类A。比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。表现在代码层面，让类B作为参数被类A在某个method方法中使用。在UML类图设计中，依赖关系用由类A指向类B的带箭头虚线表示。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d43f314a327103dae3f6211ba1668d9f.png\" class=\"\">\n\n\n<p>四、关联关系</p>\n<p>关联体现的是两个类之间语义级别的一种强依赖关系，比如我和我的朋友，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。关联可以是单向、双向的。表现在代码层面，为被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。在UML类图设计中，关联关系用由关联类A指向被关联类B的带箭头实线表示，在关联的两端可以标注关联双方的角色和多重性标记。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/18a919f662aae552a4f799f592a76428.png\" class=\"\">\n\n\n<p>五、聚合关系</p>\n<p>聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，聚合关系以空心菱形加实线箭头表示。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f588bbc3aa0176674ac7a0ad91269ee5.png\" class=\"\">\n\n\n<p>六、组合关系</p>\n<p>组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，比如人和人的大脑。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，组合关系以实心菱形加实线箭头表示。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1b8ae6d948c959d7a1a598bcf58ae9ba.png\" class=\"\">\n\n\n<p>七、总结</p>\n<p>对于继承、实现这两种关系没多少疑问，它们体现的是一种类和类、或者类与接口间的纵向关系。其他的四种关系体现的是类和类、或者类与接口间的引用、横向关系，是比较难区分的，有很多事物间的关系要想准确定位是很难的。前面也提到，这四种关系都是语义级别的，所以从代码层面并不能完全区分各种关系，但总的来说，后几种关系所表现的强弱程度依次为：组合&gt;聚合&gt;关联&gt;依赖。</p>\n<h2 id=\"多态-Polymorphism\"><a href=\"#多态-Polymorphism\" class=\"headerlink\" title=\"多态(Polymorphism)\"></a>多态(Polymorphism)</h2><p><strong>【1】多态跟属性无关，多态指的是方法的多态，而不是属性的多态。</strong></p>\n<p>【<strong>2】案例代入：</strong></p>\n<pre><code class=\"java\">public class Animal &#123;//父类：动物：\n    public void shout()&#123;\n        System.out.println(&quot;我是小动物，我可以叫。。。&quot;);\n    &#125;\n&#125;\npublic class Cat extends Animal&#123;\n    //喊叫方法：\n    public void shout()&#123;\n        System.out.println(&quot;我是小猫，可以喵喵叫&quot;);\n    &#125;\n    public void scratch()&#123;\n        System.out.println(&quot;我是小猫，我可以挠人&quot;);\n    &#125;\n&#125;\npublic class Dog extends Animal&#123;\n    //喊叫：\n    public void shout()&#123;\n        System.out.println(&quot;我是小狗，我可以汪汪叫&quot;);\n    &#125;\n    public void guard()&#123;\n        System.out.println(&quot;我是小狗，我可以看家护院，保护我的小主人。。。&quot;);\n    &#125;\n&#125;\npublic class Pig extends Animal&#123;\n    public void shout()&#123;\n        System.out.println(&quot;我是小猪，我嗯嗯嗯的叫&quot;);\n    &#125;\n    public void eat()&#123;\n        System.out.println(&quot;我是小猪，我爱吃东西。。&quot;);\n    &#125;\n\n&#125;\npublic class Girl &#123;\n    //跟猫玩耍：\n    /\\*public void play(Cat cat)&#123;\n        cat.shout();\n    &#125;\\*/\n        //跟狗玩耍：\n        /\\*public void play(Dog dog)&#123;\n        dog.shout();\n    &#125;\\*/\n        //跟小动物玩耍：\n        public void play(Animal an)&#123;\n        an.shout();\n    &#125;\n&#125;\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //具体的猫：--》猫的对象\n        //Cat c = new Cat();\n        //具体的小女孩：--》女孩的对象\n        Girl g = new Girl();\n        //小女孩跟猫玩：\n        //g.play(c);\n        //具体的狗---》狗的对象：\n        //Dog d = new Dog();\n        //小女孩跟狗玩：\n        //g.play(d);\n        //具体的动物：--》动物的对象：\n        //Cat c = new Cat();\n        //Dog d = new Dog();\n        Pig p = new Pig();\n        Animal an = p;\n        g.play(an);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【3】总结：</strong></p>\n<p>（1）先有父类，再有子类：–》继承 先有子类，再抽取父类 —-》泛化</p>\n<p>（2）什么是多态：</p>\n<p>多态就是多种状态：同一个行为，不同的子类表现出来不同的形态。</p>\n<p>多态指的就是同一个方法调用，然后由于对象不同会产生不同的行为。</p>\n<p>（3）多态的好处：</p>\n<p>为了提高代码的扩展性，符合面向对象的设计原则：开闭原则。</p>\n<p>开闭原则：指的就是扩展是 开放的，修改是关闭的。</p>\n<p>注意：多态可以提高扩展性，但是扩展性没有达到最好，以后我们会学习 反射</p>\n<p>（4）多态的要素：</p>\n<p>一，继承： Cat extends Animal ,Pig extends Animal, Dog extends Animal</p>\n<p>二，重写：子类对父类的方法shout()重写</p>\n<p>三， 父类引用指向子类对象：</p>\n<ol>\n<li>Pig p &#x3D; new Pig();</li>\n<li>Animal an &#x3D; p;</li>\n</ol>\n<p>将上面的代码合为一句话：</p>\n<p>Animal an &#x3D; new Pig();</p>\n<p>&#x3D;左侧：编译期的类型</p>\n<p>&#x3D;右侧：运行期的类型</p>\n<p>Animal an &#x3D; new Pig();</p>\n<p>g.play(an); &#x2F;&#x2F;</p>\n<ol>\n<li>public void play(Animal an){&#x2F;&#x2F;Animal an &#x3D; an &#x3D; new Pig();</li>\n<li>an.shout();</li>\n<li>}</li>\n</ol>\n<p>上面的代码，也是多态的一种非常常见的应用场合：父类当方法的形参，然后传入的是具体的子类的对象，</p>\n<p>然后调用同一个方法，根据传入的子类的不同展现出来的效果也不同，构成了多态。</p>\n<h3 id=\"内存分析-2\"><a href=\"#内存分析-2\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f791313852aa2be7d3c356e48db838ff.png\" class=\"\">\n\n\n<h3 id=\"向下转型，向上转型\"><a href=\"#向下转型，向上转型\" class=\"headerlink\" title=\"向下转型，向上转型\"></a>向下转型，向上转型</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e1446c03705f221dabfc73404636e7f9.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/dde65c5b8a65a38de394553d0009de33.png\" class=\"\">\n\n\n<p>现在我就想访问到eat()方法和weight属性：</p>\n<pre><code class=\"java\">public class Demo &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Pig p = new Pig();\n        Animal an = p;//转型：向上转型\n        an.shout();\n\n        //加入转型的代码：\n        //将Animal转为Pig类型：\n        Pig pig = (Pig)an ;//转型：向下转型\n        pig.eat();\n        pig.age = 10;\n        pig.weight = 60.8;\n    &#125;\n&#125;\n</code></pre>\n<p>对应内存：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b2f3a4672a7467f639d8429662e933e8.png\" class=\"\">\n\n\n<p>思考之前的equals方法：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/25ce73d23e12ac98e7b1f7aa81f9ff22.png\" class=\"\">\n\n\n<h3 id=\"简单工厂设计模式\"><a href=\"#简单工厂设计模式\" class=\"headerlink\" title=\"简单工厂设计模式\"></a>简单工厂设计模式</h3><p>不仅可以使用父类做方法的形参，还可以使用父类做方法的返回值类型，真实返回的对象可以是该类的任意一个子类对象。</p>\n<p>简单工厂模式的实现，它是解决大量对象创建问题的一个解决方案。将创建和使用分开，工厂负责创建，使用者直接调用即可。简单工厂模式的基本要求是</p>\n<p>² 定义一个static方法，通过类名直接调用</p>\n<p>² 返回值类型是父类类型，返回的可以是其任意子类类型</p>\n<p>² 传入一个字符串类型的参数，工厂根据参数创建对应的子类产品</p>\n<pre><code class=\"java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        Girl g = new Girl();\n\n        //Cat c = new Cat();\n        //Dog d = new Dog();\n        //Pig p = new Pig();\n        Animal an = PetStore.getAnimal(&quot;狗&quot;);\n\n        g.play(an);\n    &#125;\n&#125;\npublic class PetStore &#123;//宠物店 ---》工厂类\n    //方法：提供动物\n    public static Animal getAnimal(String petName)&#123;//多态的应用场合（二）\n        Animal an = null;\n\n        if(&quot;猫&quot;.equals(petName))&#123;//petName.equals(&quot;猫&quot;) --》这样写容易发生空指针异常\n            an = new Cat();\n        &#125;\n\n        if(&quot;狗&quot;.equals(petName))&#123;\n            an = new Dog();\n        &#125;\n\n        if(&quot;猪&quot;.equals(petName))&#123;\n            an = new Pig();\n        &#125;\n\n        return an;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h1><p><strong>【1】修饰变量；</strong></p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //第1种情况：\n        //final修饰一个变量，变量的值不可以改变，这个变量也变成了一个字符常量，约定俗称的规定：名字大写\n        final int A = 10;//final修饰基本数据类型\n        //A = 20; 报错：不可以修改值\n        //第2种情况：\n        final Dog d = new Dog();//final修饰引用数据类型，那么地址值就不可以改变\n        //d = new Dog(); --\\&gt;地址值不可以更改\n        //d对象的属性依然可以改变：\n        d.age = 10;\n        d.weight = 13.7;\n\n        //第3种情况：\n        final Dog d2 = new Dog();\n        a(d2);\n        //第4种情况：\n        b(d2);\n\n    &#125;\n    public static void a(Dog d)&#123;\n        d = new Dog();\n    &#125;\n    public static void b(final Dog d)&#123;//d被final修饰 ，指向不可以改变\n        //d = new Dog();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【2】修饰方法；</strong></p>\n<p>final修饰方法，那么这个方法不可以被该类的子类重写：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e2ac79b24d344d5b0d6b8faa62f96090.png\" class=\"\">\n\n\n<p><strong>【3】修饰类；</strong></p>\n<p>final修饰类，代表没有子类，该类不可以被继承：</p>\n<p>一旦一个类被final修饰，那么里面的方法也没有必要用final修饰了（final可以省略不写）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5598439b682631d58965e571cf796ae3.png\" class=\"\">\n\n\n<p><strong>【4】案例：JDK提供的Math类：</strong>看源码发现：</p>\n<p>（1）使用Math类的时候无需导包，直接使用即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3acfdc8f04f80a895820a2d9947c1a59.png\" class=\"\">\n\n\n<p>（2）Math类没有子类，不能被其他类继承了</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0febe174ebc78d4977b9ac8a6259fef8.png\" class=\"\">\n\n\n<p>（3）里面的属性全部被final修饰，方法也是被final修饰的，只是省略不写了</p>\n<p>原因：子类没有必要进行重写。</p>\n<p>（4）外界不可以创建对象：</p>\n<p>Math m &#x3D; new Math();</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/97205d348a09e70cdda26b24ec220407.png\" class=\"\">\n\n\n<p>（5）发现Math类中的所有的属性，方法都被static修饰</p>\n<p>那么不用创建对象去调用，只能通过类名.属性名 类名.方法名 去调用</p>\n<h1 id=\"抽象类，抽象方法\"><a href=\"#抽象类，抽象方法\" class=\"headerlink\" title=\"抽象类，抽象方法\"></a>抽象类，抽象方法</h1><p>【1】抽象类和抽象方法的关系：</p>\n<p>抽象类中可以定义0-n个抽象方法。</p>\n<p>【2】抽象类作用：</p>\n<p>在抽象类中定义抽象方法，目的是为了为子类提供一个通用的模板，子类可以在模板的基础上进行开发，先重写父类的抽象方法，然后可以扩展子类自己的内容。抽象类设计避免了子类设计的随意性，通过抽象类，子类的设计变得更加严格，进行某些程度上的限制。</p>\n<p>使子类更加的通用。</p>\n<p>【3】代码：</p>\n<pre><code class=\"java\">//4.一个类中如果有方法是抽象方法，那么这个类也要变成一个抽象类。\n//5.一个抽象类中可以有0-n个抽象方法\npublic abstract class Person &#123;\n    //1.在一个类中，会有一类方法，子类对这个方法非常满意，无需重写，直接使用\n    public void eat()&#123;\n        System.out.println(&quot;一顿不吃饿得慌&quot;);\n    &#125;\n    //2.在一个类中，会有一类方法，子类对这个方法永远不满意，会对这个方法进行重写。\n    //3.一个方法的方法体去掉，然后被abstract修饰，那么这个方法就变成了一个抽象方法\n    public abstract void say();\n    public abstract void sleep();\n&#125;\n\n//6.抽象类可以被其他类继承：\n//7.一个类继承一个抽象类，那么这个类可以变成抽象类\n//8.一般子类不会加abstract修饰，一般会让子类重写父类中的抽象方法\n//9.子类继承抽象类，就必须重写全部的抽象方法\n//10.子类如果没有重写父类全部的抽象方法，那么子类也可以变成一个抽象类。\nclass Student extends Person&#123;\n\n    @Override\n    public void say() &#123;\n        System.out.println(&quot;我是东北人，我喜欢说东北话。。&quot;);\n    &#125;\n\n    @Override\n    public void sleep() &#123;\n        System.out.println(&quot;东北人喜欢睡炕。。&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">class Demo&#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //11.创建抽象类的对象：--\\&gt;抽象类不可以创建对象\n        //Person p = new Person();\n        \n        //12.创建子类对象：\n        Student s = new Student();\n        s.sleep();\n        s.say();\n        \n        //13.多态的写法：父类引用只想子类对象：\n        Person p = new Student();\n        p.say();\n        p.sleep();\n    &#125;\n&#125;\n</code></pre>\n<p>【4】面试题：</p>\n<p>（1）抽象类不能创建对象，那么抽象类中是否有构造器？</p>\n<p>抽象类中一定有构造器。构造器的作用 给子类初始化对象的时候要先super调用父类的构造器。</p>\n<p>（2）抽象类是否可以被final修饰？</p>\n<p>不能被final修饰，因为抽象类设计的初衷就是给子类继承用的。要是被final修饰了这个抽象类了，就不存在继承了，就没有子类。</p>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p><strong>【1】接口声明格式：</strong></p>\n<table>\n<thead>\n<tr>\n<th>[访问修饰符] interface 接口名 [extends 父接口1，父接口2…] {   常量定义；   方法定义；  }</th>\n</tr>\n</thead>\n</table>\n<p><strong>【2】代码：</strong></p>\n<pre><code class=\"java\">package com.msb.test04;\n\n/**\n    * 1.类是类，接口是接口，它们是同一层次的概念。\n    * 2.接口中没有构造器\n    * 3.接口如何声明：interface\n    * 4.在JDK1.8之前，接口中只有两部分内容：\n    * （1）常量：固定修饰符：public static final\n    * （2）抽象方法：固定修饰符：public abstract\n    * 注意：修饰符可以省略不写，IDE会帮你自动补全，但是初学者建议写上，防止遗忘。\n*/\npublic interface TestInterface01 &#123;\n    //常量：\n    /\\*public static final\\*/ int NUM = 10;\n    //抽象方法：\n    /\\*public abstract\\*/ void a();\n    /\\*public abstract\\*/ void b(int num);\n    /\\*public abstract\\*/ int c(String name);\n&#125;\n\ninterface TestInterface02&#123;\n    void e();\n    void f();\n&#125;\n/\\*\n    5.类和接口的关系是什么？ 实现关系 类实现接口：\n    6.一旦实现一个接口，那么实现类要重写接口中的全部的抽象方法：\n    7.如果没有全部重写抽象方法，那么这个类可以变成一个抽象类。\n    8.java只有单继承，java还有多实现\n    一个类继承其他类，只能直接继承一个父类\n    但是实现类实现接口的话，可以实现多个接口\n    9.写法：先继承 再实现：extends Person implements TestInterface01,TestInterface02\n    \\*/\n    class Student extends Person implements TestInterface01,TestInterface02 &#123;\n        @Override\n        public void a() &#123;\n            System.out.println(&quot;---1&quot;);\n        &#125;\n\n        @Override\n        public void b(int num) &#123;\n            System.out.println(&quot;---2&quot;);\n        &#125;\n\n        @Override\n        public int c(String name) &#123;\n            return 100;\n        &#125;\n\n        @Override\n        public void e() &#123;\n            System.out.println(&quot;---3&quot;);\n        &#125;\n\n        @Override\n        public void f() &#123;\n            System.out.println(&quot;---4&quot;);\n        &#125;\n    &#125;\n\n\nclass Test&#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //10.接口不能创建对象：\n        //TestInterface02 t = new TestInterface02();\n        TestInterface02 t = new Student();//接口指向实现类 ---》多态\n\n        //11.接口中常量如何访问：\n        System.out.println(TestInterface01.NUM);\n        System.out.println(Student.NUM);\n        Student s = new Student();\n        System.out.println(s.NUM);\n        TestInterface01 t2 = new Student();\n        System.out.println(t2.NUM);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【3】接口的作用是什么？</strong></p>\n<p>定义规则，只是跟抽象类不同地方在哪？它是接口不是类。</p>\n<p>接口定义好规则之后，实现类负责实现即可。</p>\n<p><strong>【4】</strong></p>\n<p>继承：子类对父类的继承</p>\n<p>实现：实现类对接口的实现</p>\n<p>手机 是不是 照相机</p>\n<p>继承：手机 extends 照相机 “is-a”的关系，手机是一个照相机</p>\n<p>上面的写法 不好：</p>\n<p>实现： 手机 implements 拍照功能 “has-a”的关系，手机具备照相的能力</p>\n<p>案例：飞机，小鸟，风筝</p>\n<p>定义一个接口： Flyable</p>\n<p><strong>【5】多态的应用场合：</strong></p>\n<p>（1）父类当做方法的形参，传入具体的子类的对象</p>\n<p>（2）父类当做方法的返回值，返回的是具体的子类的对象</p>\n<p>（3）接口当做方法的形参，传入具体的实现类的对象</p>\n<p>（4）接口当做方法的返回值，返回的是具体的实现类的对象</p>\n<p><strong>【6】接口和抽象类的区别：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/ff922aa23cf8364987c661f524bf9d58.png\" class=\"\">\n\n\n<h2 id=\"JDK1-8以后的接口新增内容\"><a href=\"#JDK1-8以后的接口新增内容\" class=\"headerlink\" title=\" JDK1.8以后的接口新增内容\"></a> JDK1.8以后的接口新增内容</h2><p><strong>在JDK1.8之前，接口中只有两部分内容：</strong><br>（1）常量：固定修饰符：public static final<br>（2）抽象方法：固定修饰符：public abstract</p>\n<p><strong>在JDK1.8之后，新增非抽象方法：</strong></p>\n<p>（1）被public default修饰的非抽象方法：</p>\n<p>注意1：default修饰符必须要加上，否则出错</p>\n<p>注意2：实现类中要是想重写接口中的非抽象方法，那么default修饰符必须不能加，否则出错。</p>\n<pre><code class=\"java\">public interface TestInterface &#123;\n    //常量：\n    public static final int NUM= 10;\n    //抽象方法：\n    public abstract void a();\n    //public default修饰的非抽象方法：\n    public default void b()&#123;\n        System.out.println(&quot;-------TestInterface---b()-----&quot;);\n    &#125;\n&#125;\nclass Test implements TestInterface&#123;\n    public void c()&#123;\n        //用一下接口中的b方法：\n        b();//可以\n        //super.b();不可以\n        TestInterface.super.b();//可以\n    &#125;\n    @Override\n    public void a() &#123;\n        System.out.println(&quot;重写了a方法&quot;);\n    &#125;\n\n    @Override\n    public void b() &#123;\n\n    &#125;\n&#125;\n</code></pre>\n<p>（2）静态方法：</p>\n<p>注意1：static不可以省略不写</p>\n<p>注意2：静态方法不能重写</p>\n<pre><code class=\"java\">public interface TestInterface2 &#123;\n    //常量：\n    public static final int NUM = 10;\n    //抽象方法：\n    public abstract void a();\n    //public default非抽象方法；\n    public default void b()&#123;\n        System.out.println(&quot;-----TestInterface2---b&quot;);\n    &#125;\n    //静态方法：\n    public static void c()&#123;\n        System.out.println(&quot;TestInterface2中的静态方法&quot;);\n    &#125;\n&#125;\n\nclass Demo implements TestInterface2&#123;\n    @Override\n    public void a() &#123;\n        System.out.println(&quot;重写了a方法&quot;);\n    &#125;\n    public static void c()&#123;\n        System.out.println(&quot;Demo中的静态方法&quot;);\n    &#125;\n&#125;\n\nclass A &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Demo d = new Demo();\n        d.c();\n        Demo.c();\n        TestInterface2.c();\n    &#125;\n&#125;\n</code></pre>\n<p>疑问：为什么要在接口中加入非抽象方法？？？</p>\n<p>如果接口中只能定义抽象方法的话，那么我要是修改接口中的内容，那么对实现类的影响太大了，所有实现类都会受到影响。</p>\n<p>现在在接口中加入非抽象方法，对实现类没有影响，想调用就去调用即可。</p>\n<h1 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h1><h2 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h2><pre><code class=\"java\">/**\n* 1.类的组成：属性，方法，构造器，代码块（普通块，静态块，构造块，同步块），内部类\n* 2.一个类TestOuter的内部的类SubTest叫内部类， 内部类 ：SubTest 外部类：TestOuter\n* 3.内部类：成员内部类 (静态的，非静态的) 和 局部内部类（位置：方法内，块内，构造器内）\n* 4.成员内部类:\n* 里面属性，方法，构造器等\n* 修饰符：private，default，protect，public，final,abstract\n*/\npublic class TestOuter &#123;\n    //非静态的成员内部类：\n    public class D&#123;\n        int age = 20;\n        String name;\n        public void method()&#123;\n            //5.内部类可以访问外部类的内容\n            /\\*System.out.println(age);\n            a();\\*/\n                int age = 30;\n\n            //8.内部类和外部类属性重名的时候，如何进行调用：\n            System.out.println(age);//30\n            System.out.println(this.age);//20\n            System.out.println(TestOuter.this.age);//10\n        &#125;\n    &#125;\n\n    //静态成员内部类：\n    static class E&#123;\n        public void method()&#123;\n            //6.静态内部类中只能访问外部类中被static修饰的内容\n            /\\*System.out.println(age);\n            a();\\*/\n        &#125;\n    &#125;\n    //属性：\n    int age = 10;\n    //方法：\n    public void a()&#123;\n        System.out.println(&quot;这是a方法&quot;);\n        &#123;\n            System.out.println(&quot;这是一个普通块&quot;);\n            class B&#123;\n\n            &#125;\n        &#125;\n        class A&#123;\n\n        &#125;\n        //7.外部类想要访问内部类的东西，需要创建内部类的对象然后进行调用\n        D d = new D();\n        System.out.println(d.name);\n        d.method();\n\n    &#125;\n    static&#123;\n        System.out.println(&quot;这是静态块&quot;);\n    &#125;\n    &#123;\n        System.out.println(&quot;这是构造块&quot;);\n    &#125;\n    //构造器：\n    public TestOuter()&#123;\n        class C&#123;\n\n        &#125;\n    &#125;\n\n    public TestOuter(int age) &#123;\n        this.age = age;\n    &#125;\n&#125;\n\nclass Demo&#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建外部类的对象：\n        TestOuter to = new TestOuter();\n        to.a();\n\n        //9.创建内部类的对象：\n        //静态的成员内部类创建对象：\n        TestOuter.E e = new TestOuter.E();\n        //非静态的成员内部类创建对象：\n        //错误：TestOuter.D d = new TestOuter.D();\n        TestOuter t = new TestOuter();\n        TestOuter.D d = t.new D();\n\n    &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h2><ol>\n<li></li>\n</ol>\n<pre><code class=\"java\">public class TestOuter &#123;\n    //1.在局部内部类中访问到的变量必须是被final修饰的\n    public void method()&#123;\n        final int num = 10;\n        class A&#123;\n            public void a()&#123;\n                //num = 20;\n                System.out.println(num);\n            &#125;\n        &#125;\n    &#125;\n    //2.如果类B在整个项目中只使用一次，那么就没有必要单独创建一个B类，使用内部类就可以了\n    public Comparable method2()&#123;\n        class B implements Comparable&#123;\n            @Override\n            public int compareTo(Object o) &#123;\n                return 100;\n            &#125;\n        &#125;\n        return new B();\n    &#125;\n\n    public Comparable method3()&#123;\n        //3.匿名内部类\n        return new Comparable()&#123;\n\n            @Override\n            public int compareTo(Object o) &#123;\n                return 200;\n            &#125;\n        &#125;;\n    &#125;\n\n    public void teat()&#123;\n        Comparable com = new Comparable()&#123;\n\n            @Override\n            public int compareTo(Object o) &#123;\n                return 200;\n            &#125;\n        &#125;;\n\n        System.out.println(com.compareTo(&quot;abc&quot;));\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"面向对象项目\"><a href=\"#面向对象项目\" class=\"headerlink\" title=\"面向对象项目\"></a>面向对象项目</h1><h2 id=\"项目需求\"><a href=\"#项目需求\" class=\"headerlink\" title=\"项目需求\"></a>项目需求</h2><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/55242c8d1c966467d3474bfd5be55072.png\" class=\"\">\n\n\n<h2 id=\"项目结构分析\"><a href=\"#项目结构分析\" class=\"headerlink\" title=\"项目结构分析\"></a>项目结构分析</h2><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/71e9407d4bd6fa1ac73e649f555944d3.png\" class=\"\">\n\n\n<h2 id=\"最终代码\"><a href=\"#最终代码\" class=\"headerlink\" title=\"最终代码\"></a>最终代码</h2><p>匹萨父类：</p>\n<pre><code class=\"java\">public class Pizza &#123;\n    //属性\n    private String name;//名称\n    private int size;//大小\n    private int price;//价格\n\n    //方法\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getSize() &#123;\n        return size;\n    &#125;\n\n    public void setSize(int size) &#123;\n        this.size = size;\n    &#125;\n\n    public int getPrice() &#123;\n        return price;\n    &#125;\n\n    public void setPrice(int price) &#123;\n        this.price = price;\n    &#125;\n\n    //展示匹萨信息：\n    public String showPizza()&#123;\n        return &quot;匹萨的名字是：&quot;+name+&quot;\\\\n匹萨的大小是：&quot;+size+&quot;寸\\\\n匹萨的价格：&quot;+price+&quot;元&quot;;\n    &#125;\n\n\n    //构造器\n\n    public Pizza() &#123;\n    &#125;\n\n    public Pizza(String name, int size, int price) &#123;\n        this.name = name;\n        this.size = size;\n        this.price = price;\n    &#125;\n&#125;\n\n</code></pre>\n<p>培根匹萨：</p>\n<pre><code class=\"java\">public class BaconPizza extends Pizza &#123;\n    //属性：\n    private int weight;\n\n    public int getWeight() &#123;\n        return weight;\n    &#125;\n\n    public void setWeight(int weight) &#123;\n        this.weight = weight;\n    &#125;\n\n    //构造器：\n\n    public BaconPizza() &#123;\n    &#125;\n\n    public BaconPizza(String name, int size, int price, int weight) &#123;\n        super(name, size, price);\n        this.weight = weight;\n    &#125;\n\n    //重写父类showPizza方法：\n\n    @Override\n    public String showPizza() &#123;\n        return super.showPizza()+&quot;\\\\n培根的克数是：&quot;+weight+&quot;克&quot;;\n    &#125;\n&#125;\n\n</code></pre>\n<p>水果匹萨：</p>\n<pre><code class=\"java\">public class FruitsPizza extends Pizza&#123;\n    //属性：\n    private String burdening;\n\n    public String getBurdening() &#123;\n        return burdening;\n    &#125;\n\n    public void setBurdening(String burdening) &#123;\n        this.burdening = burdening;\n    &#125;\n\n    //构造器：\n\n    public FruitsPizza() &#123;\n    &#125;\n\n    public FruitsPizza(String name, int size, int price, String burdening) &#123;\n        super(name, size, price);\n        this.burdening = burdening;\n    &#125;\n\n    //重写父类showPizza方法：\n\n    @Override\n    public String showPizza() &#123;\n        return super.showPizza()+&quot;\\\\n你要加入的水果：&quot;+burdening;\n    &#125;\n&#125;\n\n</code></pre>\n<p>测试类：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //选择购买匹萨：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请选择你想要购买的匹萨（1.培根匹萨 2.水果匹萨）:&quot;);\n        int choice = sc.nextInt();//选择\n        //通过工厂获取匹萨：\n        Pizza pizza = PizzaStore.getPizza(choice);\n        System.out.println(pizza.showPizza());\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>工厂类：</p>\n<pre><code class=\"java\">import java.util.Scanner;\n\n\npublic class PizzaStore &#123;\n    public static Pizza getPizza(int choice)&#123;\n        Scanner sc = new Scanner(System.in);\n        Pizza p = null;\n        switch (choice)&#123;\n            case 1:\n                &#123;\n                    System.out.println(&quot;请录入培根的克数：&quot;);\n                    int weight = sc.nextInt();\n                    System.out.println(&quot;请录入匹萨的大小：&quot;);\n                    int size = sc.nextInt();\n                    System.out.println(&quot;请录入匹萨的价格：&quot;);\n                    int price = sc.nextInt();\n                    //将录入的信息封装为培根匹萨的对象：\n                    BaconPizza bp = new BaconPizza(&quot;培根匹萨&quot;,size,price,weight);\n                    p = bp;\n                &#125;\n                break;\n            case 2:\n                &#123;\n                    System.out.println(&quot;请录入你想要加入的水果：&quot;);\n                    String burdening = sc.next();\n                    System.out.println(&quot;请录入匹萨的大小：&quot;);\n                    int size = sc.nextInt();\n                    System.out.println(&quot;请录入匹萨的价格：&quot;);\n                    int price = sc.nextInt();\n                    //将录入的信息封装为水果匹萨的对象：\n                    FruitsPizza fp = new FruitsPizza(&quot;水果匹萨&quot;,size,price,burdening);\n                    p = fp;\n                &#125;\n                break;\n        &#125;\n        return p;\n    &#125;\n&#125;\n\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}