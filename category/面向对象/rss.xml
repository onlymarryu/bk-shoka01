<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>记录“美食”每刻 • Posts by &#34;面向对象&#34; category</title>
        <link>http://example.com</link>
        <description>记录“美食”每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>博客</category>
        <category>环境搭建</category>
        <category>分布式</category>
        <category>Dubbo</category>
        <category>FastDFS</category>
        <category>MySQL</category>
        <category>数据库基础</category>
        <category>数据库基本知识</category>
        <category>数据库</category>
        <category>框架</category>
        <category>ORM</category>
        <category>RPC</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>SpringMVC</category>
        <category>SpringSecurity</category>
        <category>JavaSE</category>
        <category>-JavaSE</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</guid>
            <title>第8章_面向对象</title>
            <link>http://example.com/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</link>
            <category>JavaSE</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;面向过程和面向对象的区别&#34;&gt;&lt;a href=&#34;#面向过程和面向对象的区别&#34; class=&#34;headerlink&#34; title=&#34;面向过程和面向对象的区别&#34;&gt;&lt;/a&gt;面向过程和面向对象的区别&lt;/h1&gt;&lt;p&gt;面向过程：当事件比较简单的时候，利用面向过程，注重的是事件的具体的步骤&amp;#x2F;过程，注重的是过程中的具体的行为，以函数为最小单位，考虑怎么做。&lt;/p&gt;
&lt;p&gt;面向对象：注重找“参与者”,将功能封装进对象，强调具备了功能的对象，以类&amp;#x2F;对象为最小单位，考虑谁来做。&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;人把大象装进冰箱：&lt;/p&gt;
&lt;p&gt;面向过程：&lt;/p&gt;
&lt;p&gt;函数1：打开冰箱(){人站在冰箱前，打开冰箱，冰箱卡到30度角的时候，冰箱的灯打开了………}&lt;/p&gt;
&lt;p&gt;函数2：储存大象(){大象先迈左腿，再迈右退，考虑冰箱能不能装下……}&lt;/p&gt;
&lt;p&gt;函数3：关闭冰箱(){人站在冰箱前，关闭冰箱，冰箱开到30度角的时候，冰箱的灯关闭了……….}&lt;/p&gt;
&lt;p&gt;面向对象：&lt;/p&gt;
&lt;p&gt;人{&lt;/p&gt;
&lt;p&gt;打开(冰箱){&lt;/p&gt;
&lt;p&gt;冰箱.打开();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;存储(大象){&lt;/p&gt;
&lt;p&gt;大象.进入();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;关闭(冰箱){&lt;/p&gt;
&lt;p&gt;冰箱.关闭();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;冰箱{&lt;/p&gt;
&lt;p&gt;打开（）{ 1.2.3.}&lt;/p&gt;
&lt;p&gt;关闭（）{}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;柜子{&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;大象{&lt;/p&gt;
&lt;p&gt;进入(冰箱){&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;面向过程 —&amp;gt; 面向对象 , 其实就是由执行者 —&amp;gt; 指挥者的 一个过渡&lt;/p&gt;
&lt;p&gt;面向过程：编年体&lt;br&gt;面向对象：纪传体&lt;/p&gt;
&lt;p&gt;二者相辅相成,并不是对立的。解决复杂问题,通过面向对象方式便于我们从宏观上把握事物之间复杂的关系、方便我们分析整个系统;具体到微观操作,仍然使用面向过程方式来处理&lt;/p&gt;
&lt;h1 id=&#34;类和对象的关系&#34;&gt;&lt;a href=&#34;#类和对象的关系&#34; class=&#34;headerlink&#34; title=&#34;类和对象的关系&#34;&gt;&lt;/a&gt;类和对象的关系&lt;/h1&gt;&lt;p&gt;【1】万事万物皆对象&lt;/p&gt;
&lt;p&gt;【2】&lt;/p&gt;
&lt;p&gt;对象：具体的事物，具体的实体，具体的实例，模板下具体的产品&lt;/p&gt;
&lt;p&gt;类：对对象向上抽取出像的部分，公共的部分，形成类，类是抽象的，是一个模板&lt;/p&gt;
&lt;p&gt;【3】一般在写代码的时候先写类，然后在根据类创建对应的对象。&lt;/p&gt;
&lt;h1 id=&#34;面向对象三个阶段&#34;&gt;&lt;a href=&#34;#面向对象三个阶段&#34; class=&#34;headerlink&#34; title=&#34;面向对象三个阶段&#34;&gt;&lt;/a&gt;面向对象三个阶段&lt;/h1&gt;&lt;p&gt;面向对象三个阶段：&lt;/p&gt;
&lt;p&gt;【1】面向对象分析OOA – Object Oriented Analysis&lt;/p&gt;
&lt;p&gt;对象：张三，王五，朱六，你，我&lt;/p&gt;
&lt;p&gt;抽取出一个类—-》人类&lt;/p&gt;
&lt;p&gt;类里面有什么：&lt;/p&gt;
&lt;p&gt;动词–》动态特性–》方法&lt;/p&gt;
&lt;p&gt;名词–》静态特性–》属性&lt;/p&gt;
&lt;p&gt;【2】面向对象设计OOD – Object Oriented Design&lt;/p&gt;
&lt;p&gt;先有类，再有对象：&lt;/p&gt;
&lt;p&gt;类：人类： Person&lt;/p&gt;
&lt;p&gt;对象：zhangsan ，lisi，zhuliu&lt;/p&gt;
&lt;p&gt;【3】面向对象编程OOP – Object Oriented Programming&lt;/p&gt;
&lt;p&gt;创建类：&lt;/p&gt;
&lt;p&gt;（1）属性（field 成员变量）&lt;/p&gt;
&lt;p&gt;属性用于定义该类或该类对象包含的数据或者说静态特征。属性作用范围是整个类体。&lt;/p&gt;
&lt;p&gt;属性定义格式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[修饰符] 方法返回值类型 方法名(形参列表) {   &amp;#x2F;&amp;#x2F; n条语句  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;（2）方法&lt;/p&gt;
&lt;p&gt;方法用于定义该类或该类实例的行为特征和功能实现。方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。&lt;/p&gt;
&lt;p&gt;方法定义格式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[修饰符] 方法返回值类型 方法名(形参列表) {   &amp;#x2F;&amp;#x2F; n条语句  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;void代表没有返回值；方法的作用：重用代码，封装功能，便于修改&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb;

public class Person &amp;#123;
    //名词---》属性---》成员变量---》放在类中方法外（注意：我们只把有需要的内容写到代码里，不相关的东西不要放在代码中）
    int age ;//年龄
    String name;//姓名
    double height;//身高
    double weight;//体重

    //动词---》方法
    //吃饭
    public void eat()&amp;#123;
        int num = 10;//局部变量：放在方法中
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;
    //睡觉：
    public void sleep(String address)&amp;#123;
        System.out.println(&amp;quot;我在&amp;quot;+address+&amp;quot;睡觉&amp;quot;);
    &amp;#125;
    //自我介绍：
    public String introduce()&amp;#123;
        return &amp;quot;我的名字是：&amp;quot;+name+&amp;quot;，我的年龄是：&amp;quot;+age+&amp;quot;,我的身高是：&amp;quot;+height+&amp;quot;,我的体重是：&amp;quot;+weight;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;创建对象&#34;&gt;&lt;a href=&#34;#创建对象&#34; class=&#34;headerlink&#34; title=&#34;创建对象&#34;&gt;&lt;/a&gt;创建对象&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb;

public class Test &amp;#123;//测试类

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个人类的具体的对象/实例：
        //创建一个对象，对象的名字叫：zs
        //Person 属于 引用数据类型
        //第一次加载类的时候，会进行类的加载，初始化创建对象的时候，对象的属性没有给赋值，有默认的初始化的值。
        Person zs = new Person();
        zs.name = &amp;quot;张三&amp;quot;;
        zs.age = 19;
        zs.height = 180.4;
        zs.weight = 170.4;

        //再创建一个对象：
        //再次创建类的时候，就不会进行类的加载了，类的加载只在第一次需要的时候加载一次
        Person ls = new Person();
        ls.name = &amp;quot;李四&amp;quot;;
        ls.age = 18;
        ls.height = 170.6;
        ls.weight = 160.5;

        //对属性值进行读取：
        System.out.println(zs.name);
        System.out.println(ls.age);

        //对方法进行操作：
        //不同的对象，属性有自己的特有的值，但是方法都是调用类中通用的方法。
        //属性：各个对象的属性是独立的，
        //方法：各个对象的方法是共享的。
        zs.eat();
        ls.eat();
        zs.sleep(&amp;quot;教室&amp;quot;);
        /\*String str = zs.introduce();
        System.out.println(str);\*/
            System.out.println(zs.introduce());
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;局部变量和成员变量的区别&#34;&gt;&lt;a href=&#34;#局部变量和成员变量的区别&#34; class=&#34;headerlink&#34; title=&#34;局部变量和成员变量的区别&#34;&gt;&lt;/a&gt;局部变量和成员变量的区别&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;区别1：&lt;/strong&gt;代码中位置不同&lt;/p&gt;
&lt;p&gt;成员变量：类中方法外定义的变量&lt;/p&gt;
&lt;p&gt;局部变量：方法中定义的变量 代码块中定义的变量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别2：&lt;/strong&gt;代码的作用范围&lt;/p&gt;
&lt;p&gt;成员变量：当前类的很多方法&lt;/p&gt;
&lt;p&gt;局部变量：当前一个方法（当前代码块）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别3：&lt;/strong&gt;是否有默认值&lt;/p&gt;
&lt;p&gt;成员变量：有&lt;/p&gt;
&lt;p&gt;局部变量：没有&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/fa7d1bf775d1f357c4dec5d94d02d2f2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;引用数据类型： null&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别4：&lt;/strong&gt;是否要初始化&lt;/p&gt;
&lt;p&gt;成员变量：不需要，不建议初始化，后续使用的时候再赋值即可&lt;/p&gt;
&lt;p&gt;局部变量：一定需要，不然直接使用的时候报错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别5&lt;/strong&gt;：内存中位置不同&lt;/p&gt;
&lt;p&gt;成员变量：堆内存&lt;/p&gt;
&lt;p&gt;局部变量：栈内存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别6：&lt;/strong&gt;作用时间不同&lt;/p&gt;
&lt;p&gt;成员变量：当前对象从创建到销毁&lt;/p&gt;
&lt;p&gt;局部变量：当前方法从开始执行到执行完毕&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package com.msb;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;**&lt;/li&gt;
&lt;li&gt;* @Auther: msb-zhaoss&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student &amp;#123;
    byte e;
    short s;
    int c ;//成员变量：在类中方法外
    long num2;
    float f ;
    double d;
    char ch;
    boolean bo;
    String name;
    public void study()&amp;#123;
        int num = 10 ; //局部变量：在方法中
        System.out.println(num);//10
        //int num ;重复命名，出错了
        &amp;#123;
            int a;//局部变量：在代码块中
        &amp;#125;
        int a;
        if(1==3)&amp;#123;
            int b;
        &amp;#125;
        System.out.println(c);
    &amp;#125;
    public void eat()&amp;#123;
        System.out.println(c);
    &amp;#125;

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Student s = new Student();
        System.out.println(s.c);
        System.out.println(s.bo);
        System.out.println(s.ch);
        System.out.println(s.d);
        System.out.println(s.e);
        System.out.println(s.f);
        System.out.println(s.name);
        System.out.println(s.num2);
        System.out.println(s.s);

        s.d = 10.4;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/92101fdba0ac0fe94fbe9079ab09ab40.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;构造器&#34;&gt;&lt;a href=&#34;#构造器&#34; class=&#34;headerlink&#34; title=&#34;构造器&#34;&gt;&lt;/a&gt;构造器&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //构造器：没有任何参数的构造器我们叫做：空参构造器--》空构造器
    public Person()&amp;#123;
        /\*age = 19;
        name = &amp;quot;lili&amp;quot;;
        height = 169.5;\*/
    &amp;#125;
    //属性：
    String name;
    int age;
    double height;
    //方法：
    public void eat()&amp;#123;
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;
&amp;#125;

package com.msb2;

/\*\*
    \* @Auther: msb-zhaoss
        \*/
        public class Test &amp;#123;
            //这是一个main方法，是程序的入口：
            public static void main(String[] args) &amp;#123;
                //创建一个Person类的具体的对象/实例/实体：
                /\*
                    创建对象的过程：
                    1.第一次遇到Person的时候，进行类的加载（只加载一次）
                    2.创建对象，为这个对象在堆中开辟空间
                    3.为对象进行属性的初始化动作

                    new关键字实际上是在调用一个方法，这个方法叫构造方法（构造器）
                    调用构造器的时候，如果你的类中没有写构造器，那么系统会默认给你分配一个构造器，只是我们看不到罢了。
                    可以自己显式 的将构造器编写出来：
                    构造器的格式：
                    [修饰符] 构造器的名字()&amp;#123;

                &amp;#125;
                构造器和方法的区别：
                    1.没有方法的返回值类型
                    2.方法体内部不能有return语句
                    3.构造器的名字很特殊，必须跟类名一样

                    构造器的作用：不是为了创建对象，因为在调用构造器之前，这个对象就已经创建好了，并且属性有默认的初始化的值。
                    调用构造器的目的是给属性进行赋值操作的。

                    注意：我们一般不会在空构造器中进行初始化操作，因为那样的话每个对象的属性就一样了。
                    实际上，我们只要保证空构造器的存在就可以了，里面的东西不用写
                    \*/
                    Person p = new Person();
                System.out.println(p.age);
                System.out.println(p.name);
                System.out.println(p.height);

                Person p2 = new Person();
                System.out.println(p2.age);
                System.out.println(p2.name);
                System.out.println(p2.height);
            &amp;#125;
        &amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;构造器的重载&#34;&gt;&lt;a href=&#34;#构造器的重载&#34; class=&#34;headerlink&#34; title=&#34;构造器的重载&#34;&gt;&lt;/a&gt;构造器的重载&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;

    //属性：
    String name;
    int age;
    double height;

    //空构造器
    public Person()&amp;#123;

    &amp;#125;
    public Person(String name,int age,double height)&amp;#123;
        //当形参名字和属性名字重名的时候，会出现就近原则：
        //在要表示对象的属性前加上this.来修饰 ，因为this代表的就是你创建的那个对象
        this.name = name;
        this.age = age;
        this.height = height;
    &amp;#125;
    public Person(String a,int b)&amp;#123;
        name = a;
        age = b;
    &amp;#125;

    //方法：
    public void eat()&amp;#123;
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;
&amp;#125;
package com.msb3.msb2;

/\*\*
    \* @Auther: msb-zhaoss
        \*/
        public class Test &amp;#123;
            //这是一个main方法，是程序的入口：
            public static void main(String[] args) &amp;#123;
                /\*
                    1.一般保证空构造器的存在，空构造器中一般不会进行属性的赋值操作
                    2.一般我们会重载构造器，在重载的构造器中进行属性赋值操作
                    3.在重载构造器以后，假如空构造器忘写了，系统也不会给你分配默认的空构造器了，那么你要调用的话就会出错了。
                    4\. 当形参名字和属性名字重名的时候，会出现就近原则：
                    在要表示对象的属性前加上this.来修饰 ，因为this代表的就是你创建的那个对象

                    \*/

                    Person p = new Person();
                /\*p.age = 19;
                p.name = &amp;quot;lili&amp;quot;;
                p.height = 180.4;\*/

                    Person p2 = new Person(&amp;quot;lili&amp;quot;,19,180.4);
                System.out.println(p2.age);
                System.out.println(p2.height);
                System.out.println(p2.name);

            &amp;#125;
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;内存分析&#34;&gt;&lt;a href=&#34;#内存分析&#34; class=&#34;headerlink&#34; title=&#34;内存分析&#34;&gt;&lt;/a&gt;内存分析&lt;/h1&gt;&lt;h2 id=&#34;代码1&#34;&gt;&lt;a href=&#34;#代码1&#34; class=&#34;headerlink&#34; title=&#34;代码1&#34;&gt;&lt;/a&gt;代码1&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;public class Person {   int id;   int age;    public static void main(String args[]){   Person p1&amp;#x3D; new Person();   }  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;内存分析：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/79c1914e1e30446244e44849e42197d1.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;代码2&#34;&gt;&lt;a href=&#34;#代码2&#34; class=&#34;headerlink&#34; title=&#34;代码2&#34;&gt;&lt;/a&gt;代码2&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    int id;
    int age;
    String school;
    public Person (int a,int b,String c)&amp;#123;
        id=a;
        age=b;
        school=c;
    &amp;#125;
    public static void main(String args[])&amp;#123;
        Person p= new Person(1,20, &amp;quot;海淀&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c1037dadb36bf06b082ec248a4d08482.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;代码3&#34;&gt;&lt;a href=&#34;#代码3&#34; class=&#34;headerlink&#34; title=&#34;代码3&#34;&gt;&lt;/a&gt;代码3&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;class Person{   int id;   int age;   String school;   Person (int a,int b,String c){   id&amp;#x3D;a;   age&amp;#x3D;b;   school&amp;#x3D;c;   }    public void setAge(int a){   age&amp;#x3D;a;   }  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;|————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————–|&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/886999b72f2ada92abc161d2ab8e4df0.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;this&lt;/p&gt;
&lt;p&gt;【1】创建对象的过程：&lt;/p&gt;
&lt;p&gt;（1）在第一次遇到一个类的时候，对这个类要进行加载，只加载一次。&lt;/p&gt;
&lt;p&gt;（2）创建对象，在堆中开辟空间&lt;/p&gt;
&lt;p&gt;（3）对对象进行初始化操作，属性赋值都是默认的初始值。&lt;/p&gt;
&lt;p&gt;（4）new关键字调用构造器，执行构造方法，在构造器中对属性重新进行赋值&lt;/p&gt;
&lt;p&gt;this:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e59335fd9cf3566613aab1164ac0711b.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5b8476d675f8c1b9000590c4031a7005.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;从上面的效果能够看到：this指代的就是当前对象：&lt;/p&gt;
&lt;p&gt;内存：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4eda9c8a53fa801bd70b6fe32f281919.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;this关键字 用法：&lt;/p&gt;
&lt;p&gt;（1）this可以修饰属性：&lt;/p&gt;
&lt;p&gt;总结：当属性名字和形参发生重名的时候，或者 属性名字 和局部变量重名的时候，都会发生就近原则，所以如果我要是直接使用变量名字的话就指的是离的近的那个形参或者局部变量，这时候如果我想要表示属性的话，在前面要加上：this.修饰&lt;/p&gt;
&lt;p&gt;如果不发生重名问题的话，实际上你要是访问属性也可以省略this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //属性
    int age;
    String name;
    double height;
    //空构造器
    public Person()&amp;#123;

    &amp;#125;
    //有参构造器
    public Person(int age,String name,double height)&amp;#123;
        this.age = age;
        this.name = name;
        this.height = height;
    &amp;#125;
    //方法：
    public void eat()&amp;#123;
        int age = 10;
        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age
        System.out.println(this.age);//这里指代的就是属性的age
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）this修饰方法：&lt;/p&gt;
&lt;p&gt;总结：在同一个类中，方法可以互相调用，this.可以省略不写。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //属性
    int age;
    String name;
    double height;
    //空构造器
    public Person()&amp;#123;

    &amp;#125;
    //有参构造器
    public Person(int age,String name,double height)&amp;#123;
        this.age = age;
        this.name = name;
        this.height = height;
    &amp;#125;
    //方法：
    /\*public void eat()&amp;#123;
        int age = 10;
        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age
        System.out.println(this.age);//这里指代的就是属性的age
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;\*/

        public void play()&amp;#123;
        /\*this.\*/eat();
        System.out.println(&amp;quot;上网&amp;quot;);
        System.out.println(&amp;quot;洗澡&amp;quot;);
    &amp;#125;

    public void eat()&amp;#123;
        System.out.println(/\*this.\*/age);
        System.out.println(&amp;quot;吃饭&amp;quot;);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（3）this可以修饰构造器：&lt;/p&gt;
&lt;p&gt;总结：同一个类中的构造器可以相互用this调用，注意：this修饰构造器必须放在第一行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //属性
    int age;
    String name;
    double height;
    //空构造器
    public Person()&amp;#123;

    &amp;#125;
    //有参构造器
    public Person(int age,String name,double height)&amp;#123;
        this(age,name);
        this.height = height;

    &amp;#125;
    public Person(int age,String name)&amp;#123;
        this(age);
        this.name = name;
    &amp;#125;
    public Person(int age)&amp;#123;
        this.age = age;
    &amp;#125;
    //方法：
    /\*public void eat()&amp;#123;
        int age = 10;
        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age
        System.out.println(this.age);//这里指代的就是属性的age
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;\*/

        public void play()&amp;#123;
        /\*this.\*/eat();
        System.out.println(&amp;quot;上网&amp;quot;);
        System.out.println(&amp;quot;洗澡&amp;quot;);
    &amp;#125;

    public void eat()&amp;#123;
        System.out.println(/\*this.\*/age);
        System.out.println(&amp;quot;吃饭&amp;quot;);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;static&#34;&gt;&lt;a href=&#34;#static&#34; class=&#34;headerlink&#34; title=&#34;static&#34;&gt;&lt;/a&gt;static&lt;/h1&gt;&lt;p&gt;【1】static可以修饰：属性，方法，代码块，内部类。&lt;/p&gt;
&lt;p&gt;【2】static修饰属性；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //属性：
    int id;
    static int sid;

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Test类的具体的对象
        Test t1 = new Test();
        t1.id = 10;
        t1.sid = 10;

        Test t2 = new Test();
        t2.id = 20;
        t2.sid = 20;

        Test t3 = new Test();
        t3.id = 30;
        t3.sid = 30;

        //读取属性的值：
        System.out.println(t1.id);
        System.out.println(t2.id);
        System.out.println(t3.id);

        System.out.println(t1.sid);
        System.out.println(t2.sid);
        System.out.println(t3.sid);

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内存分析：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/86494081f26104991702618717098030.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;一般官方的推荐访问方式：可以通过类名.属性名的方式去访问：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/300391675e1efe8df337d8171c8bb6d7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;static修饰属性总结：&lt;/p&gt;
&lt;p&gt;（1）在类加载的时候一起加载入方法区中的静态域中&lt;/p&gt;
&lt;p&gt;（2）先于对象存在&lt;/p&gt;
&lt;p&gt;（3）访问方式： 对象名.属性名 类名.属性名（推荐）&lt;/p&gt;
&lt;p&gt;static修饰属性的应用场景：某些特定的数据想要在内存中共享，只有一块 –》这个情况下，就可以用static修饰的属性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MsbStudent &amp;#123;
    //属性：
    String name;
    int age;
    static String school;

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        MsbStudent.school = &amp;quot;马士兵教育&amp;quot;;
        //创建学生对象：
        MsbStudent s1 = new MsbStudent();
        s1.name = &amp;quot;张三&amp;quot;;
        s1.age = 19;
        //s1.school = &amp;quot;马士兵教育&amp;quot;;

        MsbStudent s2 = new MsbStudent();
        s2.name = &amp;quot;李四&amp;quot;;
        s2.age = 21;
        //s2.school = &amp;quot;马士兵教育&amp;quot;;

        System.out.println(s2.school);




    &amp;#125;

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;p&gt;静态属性 （类变量）&lt;/p&gt;
&lt;p&gt;非静态属性（实例变量）&lt;/p&gt;
&lt;p&gt;【3】static修饰方法；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    int id;
    static int sid;

    public void a()&amp;#123;
        System.out.println(id);
        System.out.println(sid);
        System.out.println(&amp;quot;------a&amp;quot;);
    &amp;#125;
    //1.static和public都是修饰符，并列的没有先后顺序，先写谁后写谁都行
    static public void b()&amp;#123;
        //System.out.println(this.id);//4.在静态方法中不能使用this关键字
        //a();//3.在静态方法中不能访问非静态的方法
        //System.out.println(id);//2.在静态方法中不能访问非静态的属性
        System.out.println(sid);
        System.out.println(&amp;quot;------b&amp;quot;);
    &amp;#125;

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //5.非静态的方法可以用对象名.方法名去调用
        Demo d = new Demo();
        d.a();
        //6.静态的方法可以用 对象名.方法名去调用 也可以 用 类名.方法名 （推荐）
        Demo.b();
        d.b();
        &amp;#123;% asset_img 4bb83b402c7aad5b29b09c46fe3a60b9.png  %&amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;代码块&#34;&gt;&lt;a href=&#34;#代码块&#34; class=&#34;headerlink&#34; title=&#34;代码块&#34;&gt;&lt;/a&gt;代码块&lt;/h1&gt;&lt;p&gt;【1】类的组成：属性，方法，构造器，代码块，内部类&lt;/p&gt;
&lt;p&gt;【2】代码块分类：普通块，构造块，静态块，同步块（多线程）&lt;/p&gt;
&lt;p&gt;【3】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //属性
    int a;
    static int sa;

    //方法
    public void a()&amp;#123;
        System.out.println(&amp;quot;-----a&amp;quot;);
        &amp;#123;
            //普通块限制了局部变量的作用范围
            System.out.println(&amp;quot;这是普通块&amp;quot;);
            System.out.println(&amp;quot;----000000&amp;quot;);
            int num = 10;
            System.out.println(num);
        &amp;#125;
        //System.out.println(num);
        //if()&amp;#123;&amp;#125;
        //while()&amp;#123;&amp;#125;
    &amp;#125;
    public static void b()&amp;#123;
        System.out.println(&amp;quot;------b&amp;quot;);
    &amp;#125;

    //构造块
    &amp;#123;
        System.out.println(&amp;quot;------这是构造块&amp;quot;);
    &amp;#125;
    //静态块
    static&amp;#123;
        System.out.println(&amp;quot;-----这是静态块&amp;quot;);
        //在静态块中只能方法：静态属性，静态方法
        System.out.println(sa);
        b();
    &amp;#125;


    //构造器
    public Test()&amp;#123;
        System.out.println(&amp;quot;这是空构造器&amp;quot;);
    &amp;#125;
    public Test(int a)&amp;#123;
        this.a = a;
    &amp;#125;


    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Test t = new Test();
        t.a();

        Test t2 = new Test();
        t2.a();
    &amp;#125;



&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;（1）代码块执行顺序：&lt;/p&gt;
&lt;p&gt;最先执行静态块，只在类加载的时候执行一次，所以一般以后实战写项目：创建工厂，数据库的初始化信息都放入静态块。&lt;/p&gt;
&lt;p&gt;一般用于执行一些全局性的初始化操作。&lt;/p&gt;
&lt;p&gt;再执行构造块，（不常用）&lt;/p&gt;
&lt;p&gt;再执行构造器，&lt;/p&gt;
&lt;p&gt;再执行方法中的普通块。&lt;/p&gt;
&lt;h1 id=&#34;包，import&#34;&gt;&lt;a href=&#34;#包，import&#34; class=&#34;headerlink&#34; title=&#34;包，import&#34;&gt;&lt;/a&gt;包，import&lt;/h1&gt;&lt;p&gt;【1】生活案例：&lt;/p&gt;
&lt;p&gt;邮寄快递：中国.北京.通州区.****小区.5号楼.3单元.101房.赵珊珊&lt;/p&gt;
&lt;p&gt;历史：常山赵子龙&lt;/p&gt;
&lt;p&gt;【2】包的作用：&lt;/p&gt;
&lt;p&gt;为了解决重名问题（实际上包对应的就是盘符上的目录）&lt;/p&gt;
&lt;p&gt;解决权限问题&lt;/p&gt;
&lt;p&gt;【3】创建包：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4c01c78e65328aa2cc03c43c7dc51cd7.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b813c37b6345ac6463be51d3c6c7ff77.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;包名定义：&lt;/p&gt;
&lt;p&gt;（1）名字全部小写&lt;/p&gt;
&lt;p&gt;（2）中间用.隔开&lt;/p&gt;
&lt;p&gt;（3）一般都是公司域名倒着写 ： com.jd com.msb&lt;/p&gt;
&lt;p&gt;（4）加上模块名字：&lt;/p&gt;
&lt;p&gt;com.jd.login com.jd.register&lt;/p&gt;
&lt;p&gt;（5）不能使用系统中的关键字：nul,con,com1—com9…..&lt;/p&gt;
&lt;p&gt;（6）包声明的位置一般都在非注释性代码的第一行：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c54ecb2742a2b971e196ee55f9ab9193.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】导包问题：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.msb2.Person; //导包：就是为了进行定位

import java.util.Date;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        new Person();
        new Date();
        new java.sql.Date(1000L);//在导包以后，还想用其他包下同名的类，就必须要手动自己写所在的包。
        new Demo();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）在导包以后，还想用其他包下同名的类，就必须要手动自己写所在的包。&lt;/p&gt;
&lt;p&gt;（3）同一个包下的类想使用不需要导包，可以直接使用。&lt;/p&gt;
&lt;p&gt;（4）在java.lang包下的类，可以直接使用无需导包：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0b7459093a2491a103c60fc5b7d9a6b9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（5）IDEA中导包快捷键：alt+enter&lt;/p&gt;
&lt;p&gt;可以自己设置自动导包&lt;/p&gt;
&lt;p&gt;（6）可以直接导入*：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/69d91ed24222309df909ff777d89d08f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【5】在Java中的导包没有包含和被包含的关系：&lt;/p&gt;
&lt;p&gt;设置目录平级的格式（不是包含和被包含的显示）：  &lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/26efc24659a7281452240f746bfc8f2f.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6d440aaefd446325e269a62253689110.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【6】静态导入：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package com.msb11;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;静态导入：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; import static java.lang.Math.\*;
 //导入：java.lang下的Math类中的所有静态的内容

 public class Test &amp;#123;
 //这是一个main方法，是程序的入口：
 public static void main(String[] args) &amp;#123;
 System.out.println(random());
 System.out.println(PI);
 System.out.println(round(5.6));
 &amp;#125;
 //在静态导入后，同一个类中有相同的方法的时候，会优先走自己定义的方法。
 public static int round(double a)&amp;#123;
 return 1000;
 &amp;#125;
 &amp;#125;
 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;三大特性&#34;&gt;&lt;a href=&#34;#三大特性&#34; class=&#34;headerlink&#34; title=&#34;三大特性&#34;&gt;&lt;/a&gt;三大特性&lt;/h1&gt;&lt;h2 id=&#34;封装-Encapsulation&#34;&gt;&lt;a href=&#34;#封装-Encapsulation&#34; class=&#34;headerlink&#34; title=&#34;封装(Encapsulation)&#34;&gt;&lt;/a&gt;封装(Encapsulation)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【1】生活案例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ATM , 电线&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】Java中封装的理解：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将某些东西进行隐藏，然后提供相应的方式进行获取。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/95a55583bf15b892c21ed0eb2380eed9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;我们程序设计追求“高内聚，低耦合”。&lt;/p&gt;
&lt;p&gt;➢高内聚:类的内部数据操作细节自己完成，不允许外部干涉;&lt;/p&gt;
&lt;p&gt;➢低耦合:仅对外暴露少量的方法用于使用。&lt;/p&gt;
&lt;p&gt;隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提&lt;/p&gt;
&lt;p&gt;高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露&lt;/p&gt;
&lt;p&gt;的暴露出来。这就是封装性的设计思想。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】封装的好处：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提高代码的安全性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4】代码：通过一个属性感受封装：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package com.msb.test01;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;**&lt;/li&gt;
&lt;li&gt;* @Auther: msb-zhaoss&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Girl &amp;#123;//女孩
    //属性：
    private int age;

    //读取年龄：
    public int duquAge()&amp;#123;
        return age;
    &amp;#125;

    //设置年龄：
    public void shezhiAge(int age)&amp;#123;
        if(age \&amp;gt;= 30 )&amp;#123;
            this.age = 18;
        &amp;#125;else&amp;#123;
            this.age = age;
        &amp;#125;

    &amp;#125;


&amp;#125;

package com.msb.test01;


public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Girl类的对象：
        Girl g = new Girl();
        /\*g.age = 33;
        System.out.println(g.age);\*/
            //设置年龄：
            g.shezhiAge(31);
        //读取年龄：
        System.out.println(g.duquAge());

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的代码，对于属性age来说，我加了修饰符private，这样外界对它的访问就受到了限制，现在我还想加上其他的限制条件，但是在属性本身上没有办法再加了，所以我们通过定义方法来进行限制条件的添加。&lt;/p&gt;
&lt;p&gt;以属性为案例：&lt;/p&gt;
&lt;p&gt;进行封装：&lt;/p&gt;
&lt;p&gt;（1）将属性私有化，被private修饰–》加入权限修饰符&lt;/p&gt;
&lt;p&gt;一旦加入了权限修饰符，其他人就不可以随意的获取这个属性&lt;/p&gt;
&lt;p&gt;（2）提供public修饰的方法让别人来访问&amp;#x2F;使用&lt;/p&gt;
&lt;p&gt;（3）即使外界可以通过方法来访问属性了，但是也不能随意访问，因为咱们在方法中可以加入 限制条件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【5】实际开发中，方法一般会写成 setter，getter方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以利用IDEA快捷键生成：alt+insert –&amp;gt;getter and setter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Girl &amp;#123;//女孩
    //属性：
    private int age;

    //读取年龄：
    public int getAge()&amp;#123;
        return age;
    &amp;#125;

    //设置年龄：
    public void setAge(int age)&amp;#123;
        if(age \&amp;gt;= 30 )&amp;#123;
            this.age = 18;
        &amp;#125;else&amp;#123;
            this.age = age;
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【6】加深练习：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student &amp;#123;
    //属性：
    private int age;
    private String name;
    private String sex;

    //加入对应的setter和getter方法：
    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public String getSex() &amp;#123;
        return sex;
    &amp;#125;

    public void setSex(String sex) &amp;#123;
        if(&amp;quot;男&amp;quot;.equals(sex) \|\| &amp;quot;女&amp;quot;.equals(sex) )&amp;#123;//sex是男 或者 是 女
            this.sex = sex;
        &amp;#125;else&amp;#123;
            this.sex = &amp;quot;男&amp;quot;;
        &amp;#125;
    &amp;#125;

    //加入构造器：
    public Student()&amp;#123;

    &amp;#125;

    public Student(int age,String name,String sex)&amp;#123;
        this.age = age;
        this.name = name;
        //this.sex = sex;
        this.setSex(sex);
    &amp;#125;
&amp;#125;

package com.msb.test2;


public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Student对象：
        Student s1 = new Student();
        s1.setName(&amp;quot;nana&amp;quot;);
        s1.setAge(19);
        s1.setSex(&amp;quot;女&amp;quot;);
        System.out.println(s1.getName()+&amp;quot;---&amp;quot;+s1.getAge()+&amp;quot;----&amp;quot;+s1.getSex());

        Student s2 = new Student(18,&amp;quot;菲菲&amp;quot;,&amp;quot;asdfasdfsadf&amp;quot;);
        System.out.println(s2.getName()+&amp;quot;---&amp;quot;+s2.getAge()+&amp;quot;----&amp;quot;+s2.getSex());
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;继承-Inheritance&#34;&gt;&lt;a href=&#34;#继承-Inheritance&#34; class=&#34;headerlink&#34; title=&#34;继承(Inheritance)&#34;&gt;&lt;/a&gt;继承(Inheritance)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【1】类是对对象的抽象：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;荣耀20 ，小米 红米3，华为 p40 pro —&amp;gt; 类：手机类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】继承是对类的抽象：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;学生类：Student：&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高，学生编号&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫，学习&lt;/p&gt;
&lt;p&gt;教师类：Teacher:&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高，教师编号&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫，教学&lt;/p&gt;
&lt;p&gt;员工类：Emploee:&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高，员工编号&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫，工作&lt;/p&gt;
&lt;p&gt;共同的东西：&lt;/p&gt;
&lt;p&gt;人类：&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫&lt;/p&gt;
&lt;p&gt;学生类&amp;#x2F;教师类&amp;#x2F;员工类 继承 自 人类&lt;/p&gt;
&lt;p&gt;以后定义代码：&lt;/p&gt;
&lt;p&gt;先定义人类：&lt;/p&gt;
&lt;p&gt;人类： —》父类，基类，超类&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫&lt;/p&gt;
&lt;p&gt;再定义 ： —》子类，派生类&lt;/p&gt;
&lt;p&gt;学生类：Student：&lt;/p&gt;
&lt;p&gt;属性：学生编号&lt;/p&gt;
&lt;p&gt;方法：学习&lt;/p&gt;
&lt;p&gt;教师类：Teacher:&lt;/p&gt;
&lt;p&gt;属性：教师编号&lt;/p&gt;
&lt;p&gt;方法：教学&lt;/p&gt;
&lt;p&gt;员工类：Emploee:&lt;/p&gt;
&lt;p&gt;属性：员工编号&lt;/p&gt;
&lt;p&gt;方法：工作&lt;/p&gt;
&lt;p&gt;子类 继承自 父类&lt;/p&gt;
&lt;p&gt;狗类：&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫&lt;/p&gt;
&lt;p&gt;我们的继承关系，是在合理的范围中进行的抽取 ，抽取出子类父类的关系：&lt;/p&gt;
&lt;p&gt;上面的案例中：&lt;/p&gt;
&lt;p&gt;学生类&amp;#x2F;教师类&amp;#x2F;员工类 继承 自 人类 —》合理&lt;/p&gt;
&lt;p&gt;学生类&amp;#x2F;教师类&amp;#x2F;员工类 继承 自 狗类 —》不合理&lt;/p&gt;
&lt;p&gt;区分：&lt;/p&gt;
&lt;p&gt;学生是一个人&lt;/p&gt;
&lt;p&gt;教师是一个人&lt;/p&gt;
&lt;p&gt;员工是一个人 —》合理&lt;/p&gt;
&lt;p&gt;学生是一个狗 —》不合理&lt;/p&gt;
&lt;p&gt;总结：继承 就是 is - a 的关系&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】代码层面的解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先写父类，再写子类：&lt;/p&gt;
&lt;p&gt;父类：人类 Person&lt;/p&gt;
&lt;p&gt;子类：学生类 Student&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package com.msb.test03;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;**&lt;/li&gt;
&lt;li&gt;* @Auther: msb-zhaoss&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //属性：
    private int age;
    private String name;
    private double height;

    //提供setter getter方法：

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public double getHeight() &amp;#123;
        return height;
    &amp;#125;

    public void setHeight(double height) &amp;#123;
        this.height = height;
    &amp;#125;

    //方法：
    public void eat()&amp;#123;
        System.out.println(&amp;quot;可以吃饭。。。&amp;quot;);
    &amp;#125;

    public void sleep()&amp;#123;
        System.out.println(&amp;quot;可以睡觉。。。&amp;quot;);
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
package com.msb.test03;

public class Student extends Person &amp;#123;//子类Student 继承 父类Person
    //属性：
    private int sno;//学号

    public int getSno() &amp;#123;
        return sno;
    &amp;#125;

    public void setSno(int sno) &amp;#123;
        this.sno = sno;
    &amp;#125;

    //方法：
    public void study()&amp;#123;
        System.out.println(&amp;quot;学生可以学习&amp;quot;);
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test03;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建子类Student的对象
        Student s = new Student();
        s.setSno(1001);
        s.setAge(18);
        s.setName(&amp;quot;菲菲&amp;quot;);
        s.setHeight(180.4);

        System.out.println(&amp;quot;学生名字为：&amp;quot;+s.getName()+&amp;quot;,学生的年纪：&amp;quot;+s.getAge());

        //访问方法：
        s.study();
        s.eat();
        s.sleep();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【4】继承的好处：&lt;/strong&gt;提高代码的复用性&lt;/p&gt;
&lt;p&gt;父类定义的内容，子类可以直接拿过来用就可以了，不用代码上反复重复定义了&lt;/p&gt;
&lt;p&gt;需要注意的点：&lt;/p&gt;
&lt;p&gt;父类private修饰的内容，子类实际上也继承，只是因为封装的特性阻碍了直接调用，但是提供了间接调用的方式，可以间接调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【5】总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）继承关系 ：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;父类&amp;#x2F;基类&amp;#x2F;超类&lt;/p&gt;
&lt;p&gt;子类&amp;#x2F;派生类&lt;/p&gt;
&lt;p&gt;子类继承父类一定在合理的范围进行继承的 子类 extends 父类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）继承的好处：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.提高了代码的复用性，父类定义的内容，子类可以直接拿过来用就可以了，不用代码上反复重复定义了&lt;/p&gt;
&lt;p&gt;2.便于代码的扩展&lt;/p&gt;
&lt;p&gt;3.为了以后多态的使用。是多态的前提。&lt;/p&gt;
&lt;p&gt;（3）父类private修饰的内容，子类也继承过来了。&lt;/p&gt;
&lt;p&gt;（4）一个父类可以有多个子类。&lt;/p&gt;
&lt;p&gt;（5）一个子类只能有一个直接父类。&lt;/p&gt;
&lt;p&gt;但是可以间接的继承自其它类。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/853b3f04c4932ab081cea980b8b93937.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（6）继承具有传递性：&lt;/p&gt;
&lt;p&gt;Student –》继承自 Person —》继承自Object&lt;/p&gt;
&lt;p&gt;Object类是所有类的根基父类。&lt;/p&gt;
&lt;p&gt;所有的类都直接或者间接的继承自Object。&lt;/p&gt;
&lt;h3 id=&#34;内存分析-1&#34;&gt;&lt;a href=&#34;#内存分析-1&#34; class=&#34;headerlink&#34; title=&#34;内存分析&#34;&gt;&lt;/a&gt;内存分析&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/efb4a8c9189aea82cd25ed76bb83892b.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;权限修饰符&#34;&gt;&lt;a href=&#34;#权限修饰符&#34; class=&#34;headerlink&#34; title=&#34;权限修饰符&#34;&gt;&lt;/a&gt;权限修饰符&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6362352d7d72827f6e8330b2314e50fe.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【1】private：权限：在当前类中可以访问&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f49850ada620326d3c6e3e969491ea0f.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d1051cf6836474d0bd46cebbc5e9f2b7.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/748f9a251587c5c3f527c6b60ae68961.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】default:缺省修饰符：权限：到同一个包下的其他类都可以访问&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a9adb2a0ee7b22a158499bdf9264e927.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/507700aaac0bb1ea4c9ea49935843e06.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a1884c8b37bef224d8111b5d03a6fba7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】protected：权限：最大到不同包下的子类&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c9f4fec14f259e36b1d3b1d0f84666a1.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/14538a4729c730bee00cb172b0bbaf69.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1ba8b04d798285212551e94f9beb2a27.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】public：在整个项目中都可以访问&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;属性，方法：修饰符：四种：private，缺省，protected，public&lt;/p&gt;
&lt;p&gt;类：修饰符：两种：缺省，public&lt;/p&gt;
&lt;p&gt;以后写代码&lt;/p&gt;
&lt;p&gt;一般属性：用private修饰 ，方法：用public修饰&lt;/p&gt;
&lt;h3 id=&#34;方法的重写&#34;&gt;&lt;a href=&#34;#方法的重写&#34; class=&#34;headerlink&#34; title=&#34;方法的重写&#34;&gt;&lt;/a&gt;方法的重写&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;【1】重写：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发生在子类和父类中，当子类对父类提供的方法不满意的时候，要对父类的方法进行重写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】重写有严格的格式要求：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;子类的方法名字和父类必须一致，参数列表（个数，类型，顺序）也要和父类一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    public void eat()&amp;#123;
        System.out.println(&amp;quot;吃食物&amp;quot;);
    &amp;#125;
    public void sleep()&amp;#123;
        System.out.println(&amp;quot;睡觉&amp;quot;);
    &amp;#125;
&amp;#125;

public class Student extends Person &amp;#123;
    public void study()&amp;#123;
        System.out.println(&amp;quot;学习&amp;quot;);
    &amp;#125;
    @override
    public void eat()&amp;#123;
        System.out.println(&amp;quot;我喜欢吃小龙虾喝啤酒。。&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/bd618aafd593ad295ce5c750618dc32a.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Student类的对象：
        Student s = new Student();
        s.eat();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【4】内存：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e938358a339565fc850e88e0fb056438.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【5】重载和重写的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重载：在同一个类中，当方法名相同，形参列表不同的时候 多个方法构成了重载&lt;/p&gt;
&lt;p&gt;重写：在不同的类中，子类对父类提供的方法不满意的时候，要对父类的方法进行重写。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d5872fc2effee86b2e0573634c6c876c.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;super&#34;&gt;&lt;a href=&#34;#super&#34; class=&#34;headerlink&#34; title=&#34;super&#34;&gt;&lt;/a&gt;super&lt;/h3&gt;&lt;p&gt;【1】super:指的是： 父类的&lt;/p&gt;
&lt;p&gt;【2】super可以修饰属性，可以修饰方法；&lt;/p&gt;
&lt;p&gt;在子类的方法中，可以通过 super.属性 super.方法 的方式，显示的去调用父类提供的属性，方法。在通常情况下，super.可以省略不写：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9c34efb863bf488a0d6c9a5e631a6a1d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;在特殊情况下，当子类和父类的属性重名时，你要想使用父类的属性，必须加上修饰符super.，只能通过super.属性来调用&lt;/p&gt;
&lt;p&gt;在特殊情况下，当子类和父类的方法重名时，你要想使用父类的方法，必须加上修饰符super.，只能通过super.方法来调用&lt;/p&gt;
&lt;p&gt;在这种情况下，super.就不可以省略不写。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/af3658cad9ff80c0cd50ec8a8957809b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【3】super修饰构造器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实我们平时写的构造器的第一行都有：super() –&amp;gt;作用：调用父类的空构造器，只是我们一般都省略不写&lt;/p&gt;
&lt;p&gt;（所有构造器的第一行默认情况下都有super(),但是一旦你的构造器中显示的使用super调用了父类构造器，那么这个super()就不会给你默认分配了。如果构造器中没有显示的调用父类构造器的话，那么第一行都有super(),可以省略不写）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f83b1b34f45ed2c2fa508c0bfd3edff2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;如果构造器中已经显示的调用super父类构造器，那么它的第一行就没有默认分配的super();了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2b726c25c19f6d0bda87b121df9e5c17.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;在构造器中，super调用父类构造器和this调用子类构造器只能存在一个，两者不能共存：&lt;/p&gt;
&lt;p&gt;因为super修饰构造器要放在第一行，this修饰构造器也要放在第一行：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0d12186c6df4682072262dac8a7ebc6b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;改正二选一即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b1232bfc50729fc5ae34b3bb8e24c495.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【4】以后写代码构造器的生成可以直接使用IDEA提供的快捷键：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;alt+insert&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3a4ffc5a8078225efe692487eaaa27f9.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;继承条件下构造方法的执行过程&#34;&gt;&lt;a href=&#34;#继承条件下构造方法的执行过程&#34; class=&#34;headerlink&#34; title=&#34;继承条件下构造方法的执行过程&#34;&gt;&lt;/a&gt;继承条件下构造方法的执行过程&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e486184aee5d5ed004fbe3a9bc06497a.png&#34; class=&#34;&#34;&gt;




&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    int age;
    String name;

    public Person(int age, String name) &amp;#123;
        super();
        this.age = age;
        this.name = name;
    &amp;#125;

    public Person() &amp;#123;
    &amp;#125;
&amp;#125;

public class Student extends Person &amp;#123;
    double height ;

    public Student() &amp;#123;
    &amp;#125;

    public Student(int age, String name, double height) &amp;#123;
        super(age, name);
        this.height = height;
    &amp;#125;
&amp;#125;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Student s = new Student(19,&amp;quot;feifei&amp;quot;,160.8);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Object类&#34;&gt;&lt;a href=&#34;#Object类&#34; class=&#34;headerlink&#34; title=&#34;Object类&#34;&gt;&lt;/a&gt;Object类&lt;/h3&gt;&lt;p&gt;所有类都直接或间接的继承自Object类，Object类是所有Java类的根基类。&lt;/p&gt;
&lt;p&gt;也就意味着所有的Java对象都拥有Object类的属性和方法。&lt;/p&gt;
&lt;p&gt;如果在类的声明中未使用extends关键字指明其父类，则默认继承Object类。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/aeccaa6fc133025b43dc6e9670f17d44.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;toString()方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【1】Object类的toString()的作用：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/899bcc0c91c446dfb749301b53563996.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;方法的原理：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/745b80c0db126d2edafc1f7daf1f955a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;现在，使用toString方法的时候，打印出来的东西 “不好看”，对于其他人来说不友好，可读性不好&lt;/p&gt;
&lt;p&gt;我们现在是想知道对象的信息，名字，年龄，身高。。。。。。&lt;/p&gt;
&lt;p&gt;现在的格式不好：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d377d6556ae80f216e00404592999e77.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;出现的问题：子类Student对父类Object提供的toString方法不满意，不满意–》对toString方法进行重写：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student /\*extends Object\*/&amp;#123;
    private String name;
    private int age;
    private double height;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public double getHeight() &amp;#123;
        return height;
    &amp;#125;

    public void setHeight(double height) &amp;#123;
        this.height = height;
    &amp;#125;

    public Student() &amp;#123;
    &amp;#125;

    public Student(String name, int age, double height) &amp;#123;
        this.name = name;
        this.age = age;
        this.height = height;
    &amp;#125;

    public String toString() &amp;#123;
        return &amp;quot;这是一个Student对象，这个对象的名字：&amp;quot;+name+&amp;quot;,年龄：&amp;quot;+age+&amp;quot;,身高：&amp;quot;+height;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/777945b54a0ad9f5d6284ac3acf271d0.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;总结：toString的作用就是对对象进行“自我介绍”，一般子类对父类提供的toString都不满意，都要进行重写。&lt;/p&gt;
&lt;p&gt;IDEA提供了快捷键：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student /\*extends Object\*/&amp;#123;
    private String name;
    private int age;
    private double height;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public double getHeight() &amp;#123;
        return height;
    &amp;#125;

    public void setHeight(double height) &amp;#123;
        this.height = height;
    &amp;#125;

    public Student() &amp;#123;
    &amp;#125;

    public Student(String name, int age, double height) &amp;#123;
        this.name = name;
        this.age = age;
        this.height = height;
    &amp;#125;

    /\*public String toString() &amp;#123;
        return &amp;quot;这是一个Student对象，这个对象的名字：&amp;quot;+name+&amp;quot;,年龄：&amp;quot;+age+&amp;quot;,身高：&amp;quot;+height;
    &amp;#125;\*/

        @Override
        public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
            &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;quot;, age=&amp;quot; + age +
            &amp;quot;, height=&amp;quot; + height +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;equals方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Phone &amp;#123;//手机类：
    //属性：
    private String brand;//品牌型号
    private double price;//价格
    private int year ;//出产年份
    //方法：

    public String getBrand() &amp;#123;
        return brand;
    &amp;#125;

    public void setBrand(String brand) &amp;#123;
        this.brand = brand;
    &amp;#125;

    public double getPrice() &amp;#123;
        return price;
    &amp;#125;

    public void setPrice(double price) &amp;#123;
        this.price = price;
    &amp;#125;

    public int getYear() &amp;#123;
        return year;
    &amp;#125;

    public void setYear(int year) &amp;#123;
        this.year = year;
    &amp;#125;

    @Override
    public String toString() &amp;#123;
        return &amp;quot;Phone&amp;#123;&amp;quot; +
            &amp;quot;brand=&amp;#39;&amp;quot; + brand + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;quot;, price=&amp;quot; + price +
            &amp;quot;, year=&amp;quot; + year +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;

    //构造器：

    public Phone() &amp;#123;
    &amp;#125;

    public Phone(String brand, double price, int year) &amp;#123;
        this.brand = brand;
        this.price = price;
        this.year = year;
    &amp;#125;


    //对equals方法进行重写：
    public boolean equals(Object obj) &amp;#123;//Object obj = new Phone();
        //将obj转为Phone类型：
        Phone other = (Phone)obj;//向下转型，为了获取子类中特有的内容
        if(this.getBrand()==other.getBrand()&amp;amp;&amp;amp;this.getPrice()==other.getPrice()&amp;amp;&amp;amp;this.getYear()==other.getYear())&amp;#123;
            return true;
        &amp;#125;
        return false;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;

        //创建Phone类的对象：
        Phone p1 = new Phone(&amp;quot;华为P40&amp;quot;,2035.98,2020);
        Phone p2 = new Phone(&amp;quot;华为P40&amp;quot;,2035.98,2020);
        //比较两个对象：p1和p2对象：
        //==的作用：比较左右两侧的值是否想的，要么相等，返回true,要么不相等,返回false
        System.out.println(p1==p2);//--\&amp;gt;\&amp;gt;\&amp;gt;对于引用数据类型来说，比较的是地址值。---\&amp;gt;一定返回的是false

        //Object类提供了一个方法 equals方法 ：作用：比较对象具体内容是否相等。
        boolean flag = p1.equals(p2);//点进源码发现：底层依旧比较的是==，比较的还是地址值。
        System.out.println(flag);

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;equals作用：这个方法提供了对对象的内容是否相等 的一个比较方式，对象的内容指的就是属性。&lt;/p&gt;
&lt;p&gt;父类Object提供的equals就是在比较&amp;#x3D;&amp;#x3D;地址，没有实际的意义，我们一般不会直接使用父类提供的方法，&lt;/p&gt;
&lt;p&gt;而是在子类中对这个方法进行重写。&lt;/p&gt;
&lt;p&gt;instanceof&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/30e52b9618d9cbd40553fdef0f60675b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;利用集成开发工具生成equals方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【1】利用eclipse：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/91bbe52ca5d21f371941360962dea206.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【2】利用idea：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/97956cd439b862107cbc346e52ba17c3.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;类和类的关系&#34;&gt;&lt;a href=&#34;#类和类的关系&#34; class=&#34;headerlink&#34; title=&#34;类和类的关系&#34;&gt;&lt;/a&gt;类和类的关系&lt;/h3&gt;&lt;p&gt;代码&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【1】面向对象的思维：&lt;/strong&gt;找参与者，找女孩类，找男孩类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】体会了什么叫方法的性擦，什么叫方法的实参：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a4ab41dc30f6f798d4f7e210c42f758e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;具体传入的内容 实参：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2c75ac587a45937e5652a3096bfe6126.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【3】类和类可以产生关系：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）将一个类作为另一个类中的方法的形参&lt;/p&gt;
&lt;p&gt;（2）将一个类作为另一个类的属性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Girl &amp;#123;
    //属性：
    String name;
    double weight;
    Mom m /\*= new Mom()\*/;
    //方法：
    public void add(int a)&amp;#123;//参数是基本数据类型
        System.out.println(a);
        System.out.println(a+100);
    &amp;#125;
    //谈恋爱的方法：
    public void love(Boy b)&amp;#123;//参数是引用数据类型Boy
        System.out.println(&amp;quot;我男朋友的名字是：&amp;quot;+b.name+&amp;quot;，我男朋友的年龄是：&amp;quot;+b.age);
        b.buy();
    &amp;#125;

    //女孩跟妈妈聊天：
    public void wechat()&amp;#123;
        m.say();
    &amp;#125;

    //构造器：
    public Girl(String name, double weight) &amp;#123;
        this.name = name;
        this.weight = weight;
    &amp;#125;
&amp;#125;
public class Boy &amp;#123;
    //属性：
    int age;
    String name;
    //方法：
    public void buy()&amp;#123;
        System.out.println(&amp;quot;跟我谈恋爱，我给你买买买。。。&amp;quot;);
    &amp;#125;
    //构造器：
    public Boy(int age, String name) &amp;#123;
        this.age = age;
        this.name = name;
    &amp;#125;
&amp;#125;
public class Mom &amp;#123;
    //方法：
    public void say()&amp;#123;
        System.out.println(&amp;quot;妈妈唠唠叨叨 都是爱，听妈妈的话。。&amp;quot;);
    &amp;#125;
&amp;#125;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Boy类的具体的对象：
        Boy boy = new Boy(30,&amp;quot;鹿晗&amp;quot;);
        //创建一个Girl类的具体的对象：
        Girl girl = new Girl(&amp;quot;关晓彤&amp;quot;,100);
        //谈恋爱：
        //girl.love(boy);
        Boy boy2 = new Boy(35,&amp;quot;陈伟霆&amp;quot;);
        girl.love(boy2);

        //还可以跟妈妈微信聊天：
        girl.m = new Mom();
        girl.wechat();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;一、继承关系&lt;/p&gt;
&lt;p&gt;继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。在Java中继承关系通过关键字extends明确标识，在设计时一般没有争议性。在UML类图设计中，继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6df8fcf572c5c9257622c561c3f9b8ce.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;二、实现关系&lt;/p&gt;
&lt;p&gt;实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性。在UML类图设计中，实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7980497e067f9fb24a419ae71874f7c9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;三、依赖关系&lt;/p&gt;
&lt;p&gt;简单的理解，依赖就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是类B的变化会影响到类A。比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。表现在代码层面，让类B作为参数被类A在某个method方法中使用。在UML类图设计中，依赖关系用由类A指向类B的带箭头虚线表示。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d43f314a327103dae3f6211ba1668d9f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;四、关联关系&lt;/p&gt;
&lt;p&gt;关联体现的是两个类之间语义级别的一种强依赖关系，比如我和我的朋友，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。关联可以是单向、双向的。表现在代码层面，为被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。在UML类图设计中，关联关系用由关联类A指向被关联类B的带箭头实线表示，在关联的两端可以标注关联双方的角色和多重性标记。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/18a919f662aae552a4f799f592a76428.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;五、聚合关系&lt;/p&gt;
&lt;p&gt;聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，聚合关系以空心菱形加实线箭头表示。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f588bbc3aa0176674ac7a0ad91269ee5.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;六、组合关系&lt;/p&gt;
&lt;p&gt;组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，比如人和人的大脑。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，组合关系以实心菱形加实线箭头表示。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1b8ae6d948c959d7a1a598bcf58ae9ba.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;七、总结&lt;/p&gt;
&lt;p&gt;对于继承、实现这两种关系没多少疑问，它们体现的是一种类和类、或者类与接口间的纵向关系。其他的四种关系体现的是类和类、或者类与接口间的引用、横向关系，是比较难区分的，有很多事物间的关系要想准确定位是很难的。前面也提到，这四种关系都是语义级别的，所以从代码层面并不能完全区分各种关系，但总的来说，后几种关系所表现的强弱程度依次为：组合&amp;gt;聚合&amp;gt;关联&amp;gt;依赖。&lt;/p&gt;
&lt;h2 id=&#34;多态-Polymorphism&#34;&gt;&lt;a href=&#34;#多态-Polymorphism&#34; class=&#34;headerlink&#34; title=&#34;多态(Polymorphism)&#34;&gt;&lt;/a&gt;多态(Polymorphism)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【1】多态跟属性无关，多态指的是方法的多态，而不是属性的多态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;【&lt;strong&gt;2】案例代入：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Animal &amp;#123;//父类：动物：
    public void shout()&amp;#123;
        System.out.println(&amp;quot;我是小动物，我可以叫。。。&amp;quot;);
    &amp;#125;
&amp;#125;
public class Cat extends Animal&amp;#123;
    //喊叫方法：
    public void shout()&amp;#123;
        System.out.println(&amp;quot;我是小猫，可以喵喵叫&amp;quot;);
    &amp;#125;
    public void scratch()&amp;#123;
        System.out.println(&amp;quot;我是小猫，我可以挠人&amp;quot;);
    &amp;#125;
&amp;#125;
public class Dog extends Animal&amp;#123;
    //喊叫：
    public void shout()&amp;#123;
        System.out.println(&amp;quot;我是小狗，我可以汪汪叫&amp;quot;);
    &amp;#125;
    public void guard()&amp;#123;
        System.out.println(&amp;quot;我是小狗，我可以看家护院，保护我的小主人。。。&amp;quot;);
    &amp;#125;
&amp;#125;
public class Pig extends Animal&amp;#123;
    public void shout()&amp;#123;
        System.out.println(&amp;quot;我是小猪，我嗯嗯嗯的叫&amp;quot;);
    &amp;#125;
    public void eat()&amp;#123;
        System.out.println(&amp;quot;我是小猪，我爱吃东西。。&amp;quot;);
    &amp;#125;

&amp;#125;
public class Girl &amp;#123;
    //跟猫玩耍：
    /\*public void play(Cat cat)&amp;#123;
        cat.shout();
    &amp;#125;\*/
        //跟狗玩耍：
        /\*public void play(Dog dog)&amp;#123;
        dog.shout();
    &amp;#125;\*/
        //跟小动物玩耍：
        public void play(Animal an)&amp;#123;
        an.shout();
    &amp;#125;
&amp;#125;
public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //具体的猫：--》猫的对象
        //Cat c = new Cat();
        //具体的小女孩：--》女孩的对象
        Girl g = new Girl();
        //小女孩跟猫玩：
        //g.play(c);
        //具体的狗---》狗的对象：
        //Dog d = new Dog();
        //小女孩跟狗玩：
        //g.play(d);
        //具体的动物：--》动物的对象：
        //Cat c = new Cat();
        //Dog d = new Dog();
        Pig p = new Pig();
        Animal an = p;
        g.play(an);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【3】总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）先有父类，再有子类：–》继承 先有子类，再抽取父类 —-》泛化&lt;/p&gt;
&lt;p&gt;（2）什么是多态：&lt;/p&gt;
&lt;p&gt;多态就是多种状态：同一个行为，不同的子类表现出来不同的形态。&lt;/p&gt;
&lt;p&gt;多态指的就是同一个方法调用，然后由于对象不同会产生不同的行为。&lt;/p&gt;
&lt;p&gt;（3）多态的好处：&lt;/p&gt;
&lt;p&gt;为了提高代码的扩展性，符合面向对象的设计原则：开闭原则。&lt;/p&gt;
&lt;p&gt;开闭原则：指的就是扩展是 开放的，修改是关闭的。&lt;/p&gt;
&lt;p&gt;注意：多态可以提高扩展性，但是扩展性没有达到最好，以后我们会学习 反射&lt;/p&gt;
&lt;p&gt;（4）多态的要素：&lt;/p&gt;
&lt;p&gt;一，继承： Cat extends Animal ,Pig extends Animal, Dog extends Animal&lt;/p&gt;
&lt;p&gt;二，重写：子类对父类的方法shout()重写&lt;/p&gt;
&lt;p&gt;三， 父类引用指向子类对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pig p &amp;#x3D; new Pig();&lt;/li&gt;
&lt;li&gt;Animal an &amp;#x3D; p;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将上面的代码合为一句话：&lt;/p&gt;
&lt;p&gt;Animal an &amp;#x3D; new Pig();&lt;/p&gt;
&lt;p&gt;&amp;#x3D;左侧：编译期的类型&lt;/p&gt;
&lt;p&gt;&amp;#x3D;右侧：运行期的类型&lt;/p&gt;
&lt;p&gt;Animal an &amp;#x3D; new Pig();&lt;/p&gt;
&lt;p&gt;g.play(an); &amp;#x2F;&amp;#x2F;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;public void play(Animal an){&amp;#x2F;&amp;#x2F;Animal an &amp;#x3D; an &amp;#x3D; new Pig();&lt;/li&gt;
&lt;li&gt;an.shout();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面的代码，也是多态的一种非常常见的应用场合：父类当方法的形参，然后传入的是具体的子类的对象，&lt;/p&gt;
&lt;p&gt;然后调用同一个方法，根据传入的子类的不同展现出来的效果也不同，构成了多态。&lt;/p&gt;
&lt;h3 id=&#34;内存分析-2&#34;&gt;&lt;a href=&#34;#内存分析-2&#34; class=&#34;headerlink&#34; title=&#34;内存分析&#34;&gt;&lt;/a&gt;内存分析&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f791313852aa2be7d3c356e48db838ff.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;向下转型，向上转型&#34;&gt;&lt;a href=&#34;#向下转型，向上转型&#34; class=&#34;headerlink&#34; title=&#34;向下转型，向上转型&#34;&gt;&lt;/a&gt;向下转型，向上转型&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e1446c03705f221dabfc73404636e7f9.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/dde65c5b8a65a38de394553d0009de33.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;现在我就想访问到eat()方法和weight属性：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Pig p = new Pig();
        Animal an = p;//转型：向上转型
        an.shout();

        //加入转型的代码：
        //将Animal转为Pig类型：
        Pig pig = (Pig)an ;//转型：向下转型
        pig.eat();
        pig.age = 10;
        pig.weight = 60.8;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对应内存：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b2f3a4672a7467f639d8429662e933e8.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;思考之前的equals方法：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/25ce73d23e12ac98e7b1f7aa81f9ff22.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;简单工厂设计模式&#34;&gt;&lt;a href=&#34;#简单工厂设计模式&#34; class=&#34;headerlink&#34; title=&#34;简单工厂设计模式&#34;&gt;&lt;/a&gt;简单工厂设计模式&lt;/h3&gt;&lt;p&gt;不仅可以使用父类做方法的形参，还可以使用父类做方法的返回值类型，真实返回的对象可以是该类的任意一个子类对象。&lt;/p&gt;
&lt;p&gt;简单工厂模式的实现，它是解决大量对象创建问题的一个解决方案。将创建和使用分开，工厂负责创建，使用者直接调用即可。简单工厂模式的基本要求是&lt;/p&gt;
&lt;p&gt;² 定义一个static方法，通过类名直接调用&lt;/p&gt;
&lt;p&gt;² 返回值类型是父类类型，返回的可以是其任意子类类型&lt;/p&gt;
&lt;p&gt;² 传入一个字符串类型的参数，工厂根据参数创建对应的子类产品&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    public static void main(String[] args) &amp;#123;
        Girl g = new Girl();

        //Cat c = new Cat();
        //Dog d = new Dog();
        //Pig p = new Pig();
        Animal an = PetStore.getAnimal(&amp;quot;狗&amp;quot;);

        g.play(an);
    &amp;#125;
&amp;#125;
public class PetStore &amp;#123;//宠物店 ---》工厂类
    //方法：提供动物
    public static Animal getAnimal(String petName)&amp;#123;//多态的应用场合（二）
        Animal an = null;

        if(&amp;quot;猫&amp;quot;.equals(petName))&amp;#123;//petName.equals(&amp;quot;猫&amp;quot;) --》这样写容易发生空指针异常
            an = new Cat();
        &amp;#125;

        if(&amp;quot;狗&amp;quot;.equals(petName))&amp;#123;
            an = new Dog();
        &amp;#125;

        if(&amp;quot;猪&amp;quot;.equals(petName))&amp;#123;
            an = new Pig();
        &amp;#125;

        return an;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;final&#34;&gt;&lt;a href=&#34;#final&#34; class=&#34;headerlink&#34; title=&#34;final&#34;&gt;&lt;/a&gt;final&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】修饰变量；&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //第1种情况：
        //final修饰一个变量，变量的值不可以改变，这个变量也变成了一个字符常量，约定俗称的规定：名字大写
        final int A = 10;//final修饰基本数据类型
        //A = 20; 报错：不可以修改值
        //第2种情况：
        final Dog d = new Dog();//final修饰引用数据类型，那么地址值就不可以改变
        //d = new Dog(); --\&amp;gt;地址值不可以更改
        //d对象的属性依然可以改变：
        d.age = 10;
        d.weight = 13.7;

        //第3种情况：
        final Dog d2 = new Dog();
        a(d2);
        //第4种情况：
        b(d2);

    &amp;#125;
    public static void a(Dog d)&amp;#123;
        d = new Dog();
    &amp;#125;
    public static void b(final Dog d)&amp;#123;//d被final修饰 ，指向不可以改变
        //d = new Dog();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【2】修饰方法；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;final修饰方法，那么这个方法不可以被该类的子类重写：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e2ac79b24d344d5b0d6b8faa62f96090.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【3】修饰类；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;final修饰类，代表没有子类，该类不可以被继承：&lt;/p&gt;
&lt;p&gt;一旦一个类被final修饰，那么里面的方法也没有必要用final修饰了（final可以省略不写）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5598439b682631d58965e571cf796ae3.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【4】案例：JDK提供的Math类：&lt;/strong&gt;看源码发现：&lt;/p&gt;
&lt;p&gt;（1）使用Math类的时候无需导包，直接使用即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3acfdc8f04f80a895820a2d9947c1a59.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（2）Math类没有子类，不能被其他类继承了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0febe174ebc78d4977b9ac8a6259fef8.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（3）里面的属性全部被final修饰，方法也是被final修饰的，只是省略不写了&lt;/p&gt;
&lt;p&gt;原因：子类没有必要进行重写。&lt;/p&gt;
&lt;p&gt;（4）外界不可以创建对象：&lt;/p&gt;
&lt;p&gt;Math m &amp;#x3D; new Math();&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/97205d348a09e70cdda26b24ec220407.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（5）发现Math类中的所有的属性，方法都被static修饰&lt;/p&gt;
&lt;p&gt;那么不用创建对象去调用，只能通过类名.属性名 类名.方法名 去调用&lt;/p&gt;
&lt;h1 id=&#34;抽象类，抽象方法&#34;&gt;&lt;a href=&#34;#抽象类，抽象方法&#34; class=&#34;headerlink&#34; title=&#34;抽象类，抽象方法&#34;&gt;&lt;/a&gt;抽象类，抽象方法&lt;/h1&gt;&lt;p&gt;【1】抽象类和抽象方法的关系：&lt;/p&gt;
&lt;p&gt;抽象类中可以定义0-n个抽象方法。&lt;/p&gt;
&lt;p&gt;【2】抽象类作用：&lt;/p&gt;
&lt;p&gt;在抽象类中定义抽象方法，目的是为了为子类提供一个通用的模板，子类可以在模板的基础上进行开发，先重写父类的抽象方法，然后可以扩展子类自己的内容。抽象类设计避免了子类设计的随意性，通过抽象类，子类的设计变得更加严格，进行某些程度上的限制。&lt;/p&gt;
&lt;p&gt;使子类更加的通用。&lt;/p&gt;
&lt;p&gt;【3】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//4.一个类中如果有方法是抽象方法，那么这个类也要变成一个抽象类。
//5.一个抽象类中可以有0-n个抽象方法
public abstract class Person &amp;#123;
    //1.在一个类中，会有一类方法，子类对这个方法非常满意，无需重写，直接使用
    public void eat()&amp;#123;
        System.out.println(&amp;quot;一顿不吃饿得慌&amp;quot;);
    &amp;#125;
    //2.在一个类中，会有一类方法，子类对这个方法永远不满意，会对这个方法进行重写。
    //3.一个方法的方法体去掉，然后被abstract修饰，那么这个方法就变成了一个抽象方法
    public abstract void say();
    public abstract void sleep();
&amp;#125;

//6.抽象类可以被其他类继承：
//7.一个类继承一个抽象类，那么这个类可以变成抽象类
//8.一般子类不会加abstract修饰，一般会让子类重写父类中的抽象方法
//9.子类继承抽象类，就必须重写全部的抽象方法
//10.子类如果没有重写父类全部的抽象方法，那么子类也可以变成一个抽象类。
class Student extends Person&amp;#123;

    @Override
    public void say() &amp;#123;
        System.out.println(&amp;quot;我是东北人，我喜欢说东北话。。&amp;quot;);
    &amp;#125;

    @Override
    public void sleep() &amp;#123;
        System.out.println(&amp;quot;东北人喜欢睡炕。。&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;class Demo&amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //11.创建抽象类的对象：--\&amp;gt;抽象类不可以创建对象
        //Person p = new Person();
        
        //12.创建子类对象：
        Student s = new Student();
        s.sleep();
        s.say();
        
        //13.多态的写法：父类引用只想子类对象：
        Person p = new Student();
        p.say();
        p.sleep();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】面试题：&lt;/p&gt;
&lt;p&gt;（1）抽象类不能创建对象，那么抽象类中是否有构造器？&lt;/p&gt;
&lt;p&gt;抽象类中一定有构造器。构造器的作用 给子类初始化对象的时候要先super调用父类的构造器。&lt;/p&gt;
&lt;p&gt;（2）抽象类是否可以被final修饰？&lt;/p&gt;
&lt;p&gt;不能被final修饰，因为抽象类设计的初衷就是给子类继承用的。要是被final修饰了这个抽象类了，就不存在继承了，就没有子类。&lt;/p&gt;
&lt;h1 id=&#34;接口&#34;&gt;&lt;a href=&#34;#接口&#34; class=&#34;headerlink&#34; title=&#34;接口&#34;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】接口声明格式：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[访问修饰符] interface 接口名 [extends 父接口1，父接口2…] {   常量定义；   方法定义；  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;【2】代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test04;

/**
    * 1.类是类，接口是接口，它们是同一层次的概念。
    * 2.接口中没有构造器
    * 3.接口如何声明：interface
    * 4.在JDK1.8之前，接口中只有两部分内容：
    * （1）常量：固定修饰符：public static final
    * （2）抽象方法：固定修饰符：public abstract
    * 注意：修饰符可以省略不写，IDE会帮你自动补全，但是初学者建议写上，防止遗忘。
*/
public interface TestInterface01 &amp;#123;
    //常量：
    /\*public static final\*/ int NUM = 10;
    //抽象方法：
    /\*public abstract\*/ void a();
    /\*public abstract\*/ void b(int num);
    /\*public abstract\*/ int c(String name);
&amp;#125;

interface TestInterface02&amp;#123;
    void e();
    void f();
&amp;#125;
/\*
    5.类和接口的关系是什么？ 实现关系 类实现接口：
    6.一旦实现一个接口，那么实现类要重写接口中的全部的抽象方法：
    7.如果没有全部重写抽象方法，那么这个类可以变成一个抽象类。
    8.java只有单继承，java还有多实现
    一个类继承其他类，只能直接继承一个父类
    但是实现类实现接口的话，可以实现多个接口
    9.写法：先继承 再实现：extends Person implements TestInterface01,TestInterface02
    \*/
    class Student extends Person implements TestInterface01,TestInterface02 &amp;#123;
        @Override
        public void a() &amp;#123;
            System.out.println(&amp;quot;---1&amp;quot;);
        &amp;#125;

        @Override
        public void b(int num) &amp;#123;
            System.out.println(&amp;quot;---2&amp;quot;);
        &amp;#125;

        @Override
        public int c(String name) &amp;#123;
            return 100;
        &amp;#125;

        @Override
        public void e() &amp;#123;
            System.out.println(&amp;quot;---3&amp;quot;);
        &amp;#125;

        @Override
        public void f() &amp;#123;
            System.out.println(&amp;quot;---4&amp;quot;);
        &amp;#125;
    &amp;#125;


class Test&amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //10.接口不能创建对象：
        //TestInterface02 t = new TestInterface02();
        TestInterface02 t = new Student();//接口指向实现类 ---》多态

        //11.接口中常量如何访问：
        System.out.println(TestInterface01.NUM);
        System.out.println(Student.NUM);
        Student s = new Student();
        System.out.println(s.NUM);
        TestInterface01 t2 = new Student();
        System.out.println(t2.NUM);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【3】接口的作用是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义规则，只是跟抽象类不同地方在哪？它是接口不是类。&lt;/p&gt;
&lt;p&gt;接口定义好规则之后，实现类负责实现即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继承：子类对父类的继承&lt;/p&gt;
&lt;p&gt;实现：实现类对接口的实现&lt;/p&gt;
&lt;p&gt;手机 是不是 照相机&lt;/p&gt;
&lt;p&gt;继承：手机 extends 照相机 “is-a”的关系，手机是一个照相机&lt;/p&gt;
&lt;p&gt;上面的写法 不好：&lt;/p&gt;
&lt;p&gt;实现： 手机 implements 拍照功能 “has-a”的关系，手机具备照相的能力&lt;/p&gt;
&lt;p&gt;案例：飞机，小鸟，风筝&lt;/p&gt;
&lt;p&gt;定义一个接口： Flyable&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【5】多态的应用场合：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）父类当做方法的形参，传入具体的子类的对象&lt;/p&gt;
&lt;p&gt;（2）父类当做方法的返回值，返回的是具体的子类的对象&lt;/p&gt;
&lt;p&gt;（3）接口当做方法的形参，传入具体的实现类的对象&lt;/p&gt;
&lt;p&gt;（4）接口当做方法的返回值，返回的是具体的实现类的对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【6】接口和抽象类的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/ff922aa23cf8364987c661f524bf9d58.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;JDK1-8以后的接口新增内容&#34;&gt;&lt;a href=&#34;#JDK1-8以后的接口新增内容&#34; class=&#34;headerlink&#34; title=&#34; JDK1.8以后的接口新增内容&#34;&gt;&lt;/a&gt; JDK1.8以后的接口新增内容&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在JDK1.8之前，接口中只有两部分内容：&lt;/strong&gt;&lt;br&gt;（1）常量：固定修饰符：public static final&lt;br&gt;（2）抽象方法：固定修饰符：public abstract&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在JDK1.8之后，新增非抽象方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）被public default修饰的非抽象方法：&lt;/p&gt;
&lt;p&gt;注意1：default修饰符必须要加上，否则出错&lt;/p&gt;
&lt;p&gt;注意2：实现类中要是想重写接口中的非抽象方法，那么default修饰符必须不能加，否则出错。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface TestInterface &amp;#123;
    //常量：
    public static final int NUM= 10;
    //抽象方法：
    public abstract void a();
    //public default修饰的非抽象方法：
    public default void b()&amp;#123;
        System.out.println(&amp;quot;-------TestInterface---b()-----&amp;quot;);
    &amp;#125;
&amp;#125;
class Test implements TestInterface&amp;#123;
    public void c()&amp;#123;
        //用一下接口中的b方法：
        b();//可以
        //super.b();不可以
        TestInterface.super.b();//可以
    &amp;#125;
    @Override
    public void a() &amp;#123;
        System.out.println(&amp;quot;重写了a方法&amp;quot;);
    &amp;#125;

    @Override
    public void b() &amp;#123;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）静态方法：&lt;/p&gt;
&lt;p&gt;注意1：static不可以省略不写&lt;/p&gt;
&lt;p&gt;注意2：静态方法不能重写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface TestInterface2 &amp;#123;
    //常量：
    public static final int NUM = 10;
    //抽象方法：
    public abstract void a();
    //public default非抽象方法；
    public default void b()&amp;#123;
        System.out.println(&amp;quot;-----TestInterface2---b&amp;quot;);
    &amp;#125;
    //静态方法：
    public static void c()&amp;#123;
        System.out.println(&amp;quot;TestInterface2中的静态方法&amp;quot;);
    &amp;#125;
&amp;#125;

class Demo implements TestInterface2&amp;#123;
    @Override
    public void a() &amp;#123;
        System.out.println(&amp;quot;重写了a方法&amp;quot;);
    &amp;#125;
    public static void c()&amp;#123;
        System.out.println(&amp;quot;Demo中的静态方法&amp;quot;);
    &amp;#125;
&amp;#125;

class A &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Demo d = new Demo();
        d.c();
        Demo.c();
        TestInterface2.c();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;疑问：为什么要在接口中加入非抽象方法？？？&lt;/p&gt;
&lt;p&gt;如果接口中只能定义抽象方法的话，那么我要是修改接口中的内容，那么对实现类的影响太大了，所有实现类都会受到影响。&lt;/p&gt;
&lt;p&gt;现在在接口中加入非抽象方法，对实现类没有影响，想调用就去调用即可。&lt;/p&gt;
&lt;h1 id=&#34;内部类&#34;&gt;&lt;a href=&#34;#内部类&#34; class=&#34;headerlink&#34; title=&#34;内部类&#34;&gt;&lt;/a&gt;内部类&lt;/h1&gt;&lt;h2 id=&#34;成员内部类&#34;&gt;&lt;a href=&#34;#成员内部类&#34; class=&#34;headerlink&#34; title=&#34;成员内部类&#34;&gt;&lt;/a&gt;成员内部类&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
* 1.类的组成：属性，方法，构造器，代码块（普通块，静态块，构造块，同步块），内部类
* 2.一个类TestOuter的内部的类SubTest叫内部类， 内部类 ：SubTest 外部类：TestOuter
* 3.内部类：成员内部类 (静态的，非静态的) 和 局部内部类（位置：方法内，块内，构造器内）
* 4.成员内部类:
* 里面属性，方法，构造器等
* 修饰符：private，default，protect，public，final,abstract
*/
public class TestOuter &amp;#123;
    //非静态的成员内部类：
    public class D&amp;#123;
        int age = 20;
        String name;
        public void method()&amp;#123;
            //5.内部类可以访问外部类的内容
            /\*System.out.println(age);
            a();\*/
                int age = 30;

            //8.内部类和外部类属性重名的时候，如何进行调用：
            System.out.println(age);//30
            System.out.println(this.age);//20
            System.out.println(TestOuter.this.age);//10
        &amp;#125;
    &amp;#125;

    //静态成员内部类：
    static class E&amp;#123;
        public void method()&amp;#123;
            //6.静态内部类中只能访问外部类中被static修饰的内容
            /\*System.out.println(age);
            a();\*/
        &amp;#125;
    &amp;#125;
    //属性：
    int age = 10;
    //方法：
    public void a()&amp;#123;
        System.out.println(&amp;quot;这是a方法&amp;quot;);
        &amp;#123;
            System.out.println(&amp;quot;这是一个普通块&amp;quot;);
            class B&amp;#123;

            &amp;#125;
        &amp;#125;
        class A&amp;#123;

        &amp;#125;
        //7.外部类想要访问内部类的东西，需要创建内部类的对象然后进行调用
        D d = new D();
        System.out.println(d.name);
        d.method();

    &amp;#125;
    static&amp;#123;
        System.out.println(&amp;quot;这是静态块&amp;quot;);
    &amp;#125;
    &amp;#123;
        System.out.println(&amp;quot;这是构造块&amp;quot;);
    &amp;#125;
    //构造器：
    public TestOuter()&amp;#123;
        class C&amp;#123;

        &amp;#125;
    &amp;#125;

    public TestOuter(int age) &amp;#123;
        this.age = age;
    &amp;#125;
&amp;#125;

class Demo&amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建外部类的对象：
        TestOuter to = new TestOuter();
        to.a();

        //9.创建内部类的对象：
        //静态的成员内部类创建对象：
        TestOuter.E e = new TestOuter.E();
        //非静态的成员内部类创建对象：
        //错误：TestOuter.D d = new TestOuter.D();
        TestOuter t = new TestOuter();
        TestOuter.D d = t.new D();

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;局部内部类&#34;&gt;&lt;a href=&#34;#局部内部类&#34; class=&#34;headerlink&#34; title=&#34;局部内部类&#34;&gt;&lt;/a&gt;局部内部类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOuter &amp;#123;
    //1.在局部内部类中访问到的变量必须是被final修饰的
    public void method()&amp;#123;
        final int num = 10;
        class A&amp;#123;
            public void a()&amp;#123;
                //num = 20;
                System.out.println(num);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    //2.如果类B在整个项目中只使用一次，那么就没有必要单独创建一个B类，使用内部类就可以了
    public Comparable method2()&amp;#123;
        class B implements Comparable&amp;#123;
            @Override
            public int compareTo(Object o) &amp;#123;
                return 100;
            &amp;#125;
        &amp;#125;
        return new B();
    &amp;#125;

    public Comparable method3()&amp;#123;
        //3.匿名内部类
        return new Comparable()&amp;#123;

            @Override
            public int compareTo(Object o) &amp;#123;
                return 200;
            &amp;#125;
        &amp;#125;;
    &amp;#125;

    public void teat()&amp;#123;
        Comparable com = new Comparable()&amp;#123;

            @Override
            public int compareTo(Object o) &amp;#123;
                return 200;
            &amp;#125;
        &amp;#125;;

        System.out.println(com.compareTo(&amp;quot;abc&amp;quot;));
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;面向对象项目&#34;&gt;&lt;a href=&#34;#面向对象项目&#34; class=&#34;headerlink&#34; title=&#34;面向对象项目&#34;&gt;&lt;/a&gt;面向对象项目&lt;/h1&gt;&lt;h2 id=&#34;项目需求&#34;&gt;&lt;a href=&#34;#项目需求&#34; class=&#34;headerlink&#34; title=&#34;项目需求&#34;&gt;&lt;/a&gt;项目需求&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/55242c8d1c966467d3474bfd5be55072.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;项目结构分析&#34;&gt;&lt;a href=&#34;#项目结构分析&#34; class=&#34;headerlink&#34; title=&#34;项目结构分析&#34;&gt;&lt;/a&gt;项目结构分析&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/71e9407d4bd6fa1ac73e649f555944d3.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;最终代码&#34;&gt;&lt;a href=&#34;#最终代码&#34; class=&#34;headerlink&#34; title=&#34;最终代码&#34;&gt;&lt;/a&gt;最终代码&lt;/h2&gt;&lt;p&gt;匹萨父类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Pizza &amp;#123;
    //属性
    private String name;//名称
    private int size;//大小
    private int price;//价格

    //方法

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public int getSize() &amp;#123;
        return size;
    &amp;#125;

    public void setSize(int size) &amp;#123;
        this.size = size;
    &amp;#125;

    public int getPrice() &amp;#123;
        return price;
    &amp;#125;

    public void setPrice(int price) &amp;#123;
        this.price = price;
    &amp;#125;

    //展示匹萨信息：
    public String showPizza()&amp;#123;
        return &amp;quot;匹萨的名字是：&amp;quot;+name+&amp;quot;\\n匹萨的大小是：&amp;quot;+size+&amp;quot;寸\\n匹萨的价格：&amp;quot;+price+&amp;quot;元&amp;quot;;
    &amp;#125;


    //构造器

    public Pizza() &amp;#123;
    &amp;#125;

    public Pizza(String name, int size, int price) &amp;#123;
        this.name = name;
        this.size = size;
        this.price = price;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;培根匹萨：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class BaconPizza extends Pizza &amp;#123;
    //属性：
    private int weight;

    public int getWeight() &amp;#123;
        return weight;
    &amp;#125;

    public void setWeight(int weight) &amp;#123;
        this.weight = weight;
    &amp;#125;

    //构造器：

    public BaconPizza() &amp;#123;
    &amp;#125;

    public BaconPizza(String name, int size, int price, int weight) &amp;#123;
        super(name, size, price);
        this.weight = weight;
    &amp;#125;

    //重写父类showPizza方法：

    @Override
    public String showPizza() &amp;#123;
        return super.showPizza()+&amp;quot;\\n培根的克数是：&amp;quot;+weight+&amp;quot;克&amp;quot;;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;水果匹萨：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class FruitsPizza extends Pizza&amp;#123;
    //属性：
    private String burdening;

    public String getBurdening() &amp;#123;
        return burdening;
    &amp;#125;

    public void setBurdening(String burdening) &amp;#123;
        this.burdening = burdening;
    &amp;#125;

    //构造器：

    public FruitsPizza() &amp;#123;
    &amp;#125;

    public FruitsPizza(String name, int size, int price, String burdening) &amp;#123;
        super(name, size, price);
        this.burdening = burdening;
    &amp;#125;

    //重写父类showPizza方法：

    @Override
    public String showPizza() &amp;#123;
        return super.showPizza()+&amp;quot;\\n你要加入的水果：&amp;quot;+burdening;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //选择购买匹萨：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请选择你想要购买的匹萨（1.培根匹萨 2.水果匹萨）:&amp;quot;);
        int choice = sc.nextInt();//选择
        //通过工厂获取匹萨：
        Pizza pizza = PizzaStore.getPizza(choice);
        System.out.println(pizza.showPizza());

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;工厂类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;


public class PizzaStore &amp;#123;
    public static Pizza getPizza(int choice)&amp;#123;
        Scanner sc = new Scanner(System.in);
        Pizza p = null;
        switch (choice)&amp;#123;
            case 1:
                &amp;#123;
                    System.out.println(&amp;quot;请录入培根的克数：&amp;quot;);
                    int weight = sc.nextInt();
                    System.out.println(&amp;quot;请录入匹萨的大小：&amp;quot;);
                    int size = sc.nextInt();
                    System.out.println(&amp;quot;请录入匹萨的价格：&amp;quot;);
                    int price = sc.nextInt();
                    //将录入的信息封装为培根匹萨的对象：
                    BaconPizza bp = new BaconPizza(&amp;quot;培根匹萨&amp;quot;,size,price,weight);
                    p = bp;
                &amp;#125;
                break;
            case 2:
                &amp;#123;
                    System.out.println(&amp;quot;请录入你想要加入的水果：&amp;quot;);
                    String burdening = sc.next();
                    System.out.println(&amp;quot;请录入匹萨的大小：&amp;quot;);
                    int size = sc.nextInt();
                    System.out.println(&amp;quot;请录入匹萨的价格：&amp;quot;);
                    int price = sc.nextInt();
                    //将录入的信息封装为水果匹萨的对象：
                    FruitsPizza fp = new FruitsPizza(&amp;quot;水果匹萨&amp;quot;,size,price,burdening);
                    p = fp;
                &amp;#125;
                break;
        &amp;#125;
        return p;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
