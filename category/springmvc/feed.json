{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"springmvc\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/SpringMVC/",
            "url": "http://example.com/2022/10/07/SpringMVC/",
            "title": "SpringMVC",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><img data-src=\"/2022/10/07/SpringMVC/image-20220716212203883.png\" class=\"\">\n\n\n<p>M   model      模型层   DAO封装        &gt;&gt;&gt; Mybatis<br>V    view         视图层   html css js  jsp<br>C    controller 控制层   Servlet封装    &gt;&gt;&gt; springMVC </p>\n<p>SpringMVC是spring为展现层提供的基于MVC设计理念的优秀WEB框架,是目前最主流的MVC框架之一<br>SpringMVC通过一套注解,可以让普通的JAVA类成为contrllor控制器,无需继承Servlet,实现了控制层和Servlet之间的解耦<br>SpringMVC支持Rest风格的URL写法<br>SpringMVC采用了松耦合,可热插的主键结构,比其他的框架更具扩展性和灵活性</p>\n<h1 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h1><img data-src=\"/2022/10/07/SpringMVC/image-20220717190437596.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/SpringMVC/image-20220717190445738.png\" class=\"\">\n\n\n<p>1DispatcherServlet：前端控制器<br>用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由 它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</p>\n<p><strong>2 HandlerMapping：处理器映射器</strong><br>HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>\n<p>3 Handler：处理器 (自己定义的Controller处理单元)<br>它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理。</p>\n<p><strong>4 HandlAdapter：处理器适配器</strong><br>通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行</p>\n<p>5 View Resolver：视图解析器<br>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p>\n<p>6 View：视图<br>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开 发具体的页面。</p>\n<p>7 <span class=\"exturl\" data-url=\"bXZjOmFubm90YXRpb24tZHJpdmVu\">mvc:annotation-driven</span>说明<br>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。<br>使 用 <span class=\"exturl\" data-url=\"bXZjOmFubm90YXRpb24tZHJpdmVu\">mvc:annotation-driven</span> 自动加载 RequestMappingHandlerMapping （处理映射器） 和 RequestMappingHandlerAdapter （ 处 理 适 配 器 ） ， 可 用 在 SpringMVC.xml 配 置 文 件 中 使 用 <span class=\"exturl\" data-url=\"bXZjOmFubm90YXRpb24tZHJpdmVu\">mvc:annotation-driven</span>替代注解处理器和适配器的配置。</p>\n<p>HandlerMapping的实现类的作用<br>实现类RequestMappingHandlerMapping，它会处理@RequestMapping 注解，并将其注册到请求映射表中。</p>\n<p>HandlerAdapter的实现类的作用<br>实现类RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。</p>\n<p>当配置了mvc:annotation-driven&#x2F;后，Spring就知道了我们启用注解驱动。然后Spring通过context:component-scan&#x2F;标签的配置，会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求,这个时候接收返回json数据、参数验证、统一异常等功能。</p>\n<h1 id=\"重要注解\"><a href=\"#重要注解\" class=\"headerlink\" title=\"重要注解\"></a>重要注解</h1><h2 id=\"1、RequestMapping\"><a href=\"#1、RequestMapping\" class=\"headerlink\" title=\"1、RequestMapping\"></a>1、RequestMapping</h2><p>紧耦合方式(了解)<br>DispatcherServlet中的service方法直接将此次请求的request对象传递给调用的单元方法即可。同时在单元方法上声明形参HttpServletRequest来接收request实参即可。<br><strong>解耦合方式(熟练)</strong><br>DispatcherServlet在其service方法中将请求数据根据需求从request对象中获取出来后，将数据直接传递给对应的单元方法使用。同时在单元方法上直接声明对应的形参接收请求数据即可。在单元方法上声明形参来接收请求数据时，形参名必须和请求数据的键名一致，DispatcherServlet会将调用单元方法的形参名作为请求数据的键名获取请求数据，然后传递给单元方法。</p>\n<pre><code class=\"java\">@RestController\npublic class TestDataController &#123;\n    /*紧耦合方式参数注入\n    * 使用传统的HttpServletRequest对象获取参数  javax.servlet\n    * */\n    @RequestMapping(&quot;/getParamByRequest.do&quot;)\n    public String getParam1(HttpServletRequest req, HttpServletResponse resp)&#123;\n        String username = req.getParameter(&quot;username&quot;);\n        String password = req.getParameter(&quot;password&quot;);\n        System.out.println(&quot;username:&quot;+username+&quot;   password:&quot;+password);\n        return &quot;getParamSuccess&quot;;\n    &#125;\n    /*解耦合方式参数注入\n    * HttpServletRequest对象获取参数 通过SpringMVC框架功能,自动转换参数\n    * 处理单元参数列表中参数名必须和请求中的参数名一致\n                                        * 如不一致,可以通过@RequestParma注解进行转换\n    * */\n    @RequestMapping(&quot;/getParamByArgName.do&quot;)\n    public String getParam2(String username,@RequestParam(&quot;pwd&quot;) int password)&#123;\n        System.out.println(&quot;username:&quot;+username+&quot;   password:&quot;+password);\n        return &quot;getParamSuccess&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2、PathVariable注解和RESTful风格的支持\"><a href=\"#2、PathVariable注解和RESTful风格的支持\" class=\"headerlink\" title=\"2、PathVariable注解和RESTful风格的支持\"></a>2、PathVariable注解和RESTful风格的支持</h2><p><strong>普通形式的url</strong></p>\n<pre><code class=\"java\">*/contextPath/aaa.do\n*/contextPath/aaa.jsp\n*/contextPath/aaa.html\n*/contextPath/css/aaa.css\n*/contextPath/js/aaa.js\n*/contextPath/aaa.do?id=10&amp;username=root\n</code></pre>\n<p><strong>restFul风格的url</strong></p>\n<pre><code class=\"java\">*/contextPath/aaa/10/root\n*/contextPath/aaa\n</code></pre>\n<pre><code class=\"java\">@Controller\npublic class PathController &#123;\n    @RequestMapping(&quot;/testPathVariable/&#123;id&#125;/&#123;username&#125;&quot;)\n    public String testPathVariable(@PathVariable(&quot;id&quot;) Integer id, @PathVariable(&quot;username&quot;) String username)&#123;\n        System.out.println(&quot;id:&quot;+id);\n        System.out.println(&quot;username:&quot;+username);\n        System.out.println(&quot;testPathVariable1&quot;);\n        return &quot;success&quot;;\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/SpringMVC/image-20220717191056216.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/SpringMVC/image-20220717191104583-1661419340091.png\" class=\"\">\n\n\n\n\n\n\n<h1 id=\"响应处理\"><a href=\"#响应处理\" class=\"headerlink\" title=\"响应处理\"></a>响应处理</h1><img data-src=\"/2022/10/07/SpringMVC/image-20220717191212189-1661419342477.png\" class=\"\">\n\n\n\n\n<p>1、单元方法返回值为void</p>\n<img data-src=\"/2022/10/07/SpringMVC/image-20220717191318663-1661419344199.png\" class=\"\">\n\n\n<blockquote>\n<p>在SpringMVC中如果对于当前的控制单元，没有写对应的返回值，这个时候<strong>SpringMVC就会找和自己控制单元名称一致的页面展示</strong>，<strong>如果没有配置视图解析器的前缀和后缀是没有产生404</strong>,需要注意控制单元仍然可以进。</p>\n</blockquote>\n<p>2、转发和重定向ServletAPI 实现</p>\n<pre><code class=\"java\">@RequestMapping(&quot;demo1&quot;)\n    public void testDemo1(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;\n        // 请求转发\n        //request.getRequestDispatcher(&quot;/forward.jsp&quot;).forward(request,response);\n        // 响应重定向\n        response.sendRedirect(request.getContextPath()+&quot;/redirect.jsp&quot;);\n    &#125;\n</code></pre>\n<blockquote>\n<p>单元方法的返回值类型设置void。因为使用response对象在单元方法中直接对此次请求进行了响应，不再通过DispatcherServlet了，既然已经响应了，就不需要再给DispatcherServlet返回值了。在单元方法上声明HttpServletResponse形参，来接收此次请求的response对象。</p>\n</blockquote>\n<p>3、使用forward关键字完成响应</p>\n<pre><code class=\"java\"> /*\n    * 返回字符串告诉DispatcherServlet跳转的路径\n    * 在路径之前放上一个forward: 关键字,就是请求转发\n    * 如果路径前的关键字是forward,那么可以省略不写\n    * */\n    @RequestMapping(&quot;demo2&quot;)\n    public String testDemo2() throws Exception &#123;\n        //return &quot;forward:/forwardPage.jsp&quot;;\n        return &quot;/forwardPage.jsp&quot;;\n    &#125;\n</code></pre>\n<p>使用通过单元方法的返回值来告诉DispatcherServlet请求转发指定的资源,如果是请求转发，<strong>forward关键字可以<em>省略不写</em>的</strong></p>\n<p>4、使用redirect关键字完成响应</p>\n<pre><code class=\"java\">/*\n     * 返回字符串告诉DispatcherServlet跳转的路径\n     * 在路径之前放上一个redirect: 关键字,就是重定向\n     * 如果路径前的关键字是redirect,那么不可以省略\n     * /表示当前项目下.这里不需要项目的上下文路径\n     * */\n    @RequestMapping(&quot;demo3&quot;)\n    public String testDemo3() throws Exception &#123;\n        return &quot;redirect:/redirectPage.jsp&quot;;\n    &#125;\n</code></pre>\n<p>使用通过单元方法的返回值来告诉DispatcherServlet重定向指定的资源，注意这个<strong>redirect关键字<em>不可以省去</em></strong></p>\n<p>5、使用View视图转发和重定向</p>\n<pre><code class=\"java\"> @RequestMapping(&quot;demo4&quot;)\n    public View testDemo4(HttpServletRequest req)   &#123;\n        View  view =null;\n        // 请求转发\n        //view =new InternalResourceView(&quot;/forwardPage.jsp&quot;);\n        // 重定向\n        view=new RedirectView(req.getContextPath()+&quot;/redirectPage.jsp&quot;);\n        return view;\n    &#125;\n</code></pre>\n<blockquote>\n<p>RedirectView中所做的操作，最终的实现是在renderMergedOutputModel中完成实现的，简单来说RedirectView实现了链接的重定向，并且将数据保存到FlashMap中，这样在跳转后的链接中可以获取一些数据.</p>\n</blockquote>\n<p>6、使用ModelAndView转发重定向</p>\n<pre><code class=\"java\">@RequestMapping(&quot;demo5&quot;)\n    public ModelAndView testDemo5(HttpServletRequest req)   &#123;\n        ModelAndView mv=new ModelAndView();\n        // 请求转发\n        //mv.setViewName(&quot;forward:/forwardPage.jsp&quot;);\n        //mv.setView(new InternalResourceView(&quot;/forwardPage.jsp&quot;));\n        // 重定向\n        //mv.setViewName(&quot;redirect:/redirectPage.jsp&quot;);\n        mv.setView(new RedirectView(req.getContextPath()+&quot;/redirectPage.jsp&quot;));\n        return mv;\n    &#125;\n</code></pre>\n<p>​\tModelAndView中的Model代表模型，View代表视图，这个名字就很好地解释了该类的作用。业务处理器调用模型层处理完用户请求后，把结果数据存储在该类的model属性中，把要返回的视图信息存储在该类的view属性中，然后让该ModelAndView返回该Spring MVC框架。</p>\n<h1 id=\"作用域传参\"><a href=\"#作用域传参\" class=\"headerlink\" title=\"作用域传参\"></a>作用域传参</h1><img data-src=\"/2022/10/07/SpringMVC/image-20220717191751516-1661419352934.png\" class=\"\">\n\n\n<blockquote>\n<p>PageContext对象</p>\n</blockquote>\n<p>作用域范围:当前jsp页面内有效</p>\n<blockquote>\n<p>request对象</p>\n</blockquote>\n<p>作用域范围:一次请求内。</p>\n<p>作用: 解决了一次请求内的资源的数据共享问题</p>\n<blockquote>\n<p>session对象</p>\n</blockquote>\n<p>作用域范围:一次会话内有效。</p>\n<p>说明:浏览器不关闭,并且后台的session不失效，在任意请求中都可以获取到同一个session对象。</p>\n<p>作用:解决了一个用户不同请求的数据共享问题。</p>\n<blockquote>\n<p>application(ServletContext)对象</p>\n</blockquote>\n<p>作用域范围:整个项目内有效。</p>\n<p>特点:一个项目只有一个，在服务器启动的时候即完成初始化创建无论如何获取都是同一个项目。</p>\n<p>作用:解决了不同用户的数据共享问题。</p>\n<h1 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><blockquote>\n<p>&#x3D;&#x3D;过滤器的作用是保护请求的服务器资源，在请求资源被执行之前&#x3D;&#x3D;，如果请求地址符合拦截范围，则会先执行过滤器。&#x3D;&#x3D;过滤器的执行时机，是在Servlet之前执行的&#x3D;&#x3D;。但是在使用了SpringMVC后，Servlet只有一个了，也就是DisptcherServlet。那么，如果我们仍然使用过滤器来完成请求的拦截，因为过滤器是在Servlet之前执行的，就会造成，&#x3D;&#x3D;过滤器会拦截DispatcherServlet所有的请求&#x3D;&#x3D;。那么，如果我们有&#x3D;&#x3D;部分请求不想被拦截&#x3D;&#x3D;，怎么办？</p>\n</blockquote>\n<h2 id=\"拦截器使用\"><a href=\"#拦截器使用\" class=\"headerlink\" title=\"拦截器使用\"></a>拦截器使用</h2><img data-src=\"/2022/10/07/SpringMVC/image-20220717191927439-1661419356594.png\" class=\"\">\n\n\n<p>Spring MVC中的拦截器（Interceptor）类似于Servlet中的过滤器（Filter），它主要用于拦截用户请求并作相应的处理。例如通过拦截器可以进行权限验证、记录请求信息的日志、判断用户是否登录等。<br>    要使用Spring MVC中的拦截器，就需要对拦截器类进行定义和配置。通常拦截器类可以通过两种方式来定义。<br>    1.通过实现HandlerInterceptor接口，或继承HandlerInterceptor接口的实现类（如HandlerInterceptorAdapter）来定义。<br>    2.通过实现WebRequestInterceptor接口，或继承WebRequestInterceptor接口的实现类来定义。</p>\n<h2 id=\"拦截器和过滤器的区别\"><a href=\"#拦截器和过滤器的区别\" class=\"headerlink\" title=\"拦截器和过滤器的区别\"></a>拦截器和过滤器的区别</h2><ol>\n<li><p>拦截器SpringMVC的，而过滤器是servlet的。\t</p>\n</li>\n<li><p>拦截器不依赖与servlet容器,由spring容器初始化，过滤器依赖与servlet容器,由servlet容器初始化。. </p>\n</li>\n<li><p>拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。</p>\n</li>\n<li><p>拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。</p>\n</li>\n<li><p>在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</p>\n</li>\n<li><p>拦截器可以获取IOC容器中的各个bean，而过滤器就不太方便，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</p>\n</li>\n</ol>\n<pre><code class=\"java\">public class MyInterceptor implements HandlerInterceptor &#123;\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;\n        /*在请求到达我们定义的handler之前工作的*/\n        System.out.println(&quot;MyInterceptor preHandle&quot;);\n        /*返回的是true,代表放行,可以继续到达handler*/\n        return true;\n    &#125;\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;\n        System.out.println(&quot;MyInterceptor postHandle&quot;);\n        /*handler 处理单元返回ModelAndView 时候进行 拦截*/\n    &#125;\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;\n        /*\n        页面渲染完毕,但是还没有给浏览器响应数据的时候\n         */\n        System.out.println(&quot;MyInterceptor afterCompletion&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"多个拦截器执行顺序\"><a href=\"#多个拦截器执行顺序\" class=\"headerlink\" title=\"多个拦截器执行顺序\"></a>多个拦截器执行顺序</h2><p>多个拦截器同时存在时,执行的顺序由配置顺序决定. 先配置谁, 谁就先执行.多个拦截器可以理解为拦截器栈, 先进后出(后进先出), 如图所示:</p>\n<img data-src=\"/2022/10/07/SpringMVC/image-20220717192103889-1661419360360.png\" class=\"\">\n\n\n\n\n<h1 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h1><h2 id=\"SpringMVC异常简介\"><a href=\"#SpringMVC异常简介\" class=\"headerlink\" title=\"SpringMVC异常简介\"></a>SpringMVC异常简介</h2><p>​\t系统中异常包括两类：预期异常(检查型异常)和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息， 后者主要通过规范代码开发、测试通过手段减少运行时异常的发生</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><h3 id=\"1使用-ExceptionHandler注解处理异常\"><a href=\"#1使用-ExceptionHandler注解处理异常\" class=\"headerlink\" title=\"1使用@ExceptionHandler注解处理异常\"></a>1使用@ExceptionHandler注解处理异常</h3><p>缺点：只能处理当前Controller中的异常。</p>\n<pre><code class=\"java\"> @ExceptionHandler(value =&#123;ArithmeticException.class,NullPointerException.class&#125; )\n    public ModelAndView handelException()&#123;\n        ModelAndView mv =new ModelAndView();\n        mv.setViewName(&quot;error1.jsp&quot;);\n        return mv;\n    &#125;\n</code></pre>\n<h3 id=\"2使用：-ControllerAdvice-ExceptionHandler\"><a href=\"#2使用：-ControllerAdvice-ExceptionHandler\" class=\"headerlink\" title=\"2使用：@ControllerAdvice+@ExceptionHandler\"></a>2使用：@ControllerAdvice+@ExceptionHandler</h3><p>此处优先级低于局部异常处理器</p>\n<pre><code class=\"java\">@ControllerAdvice\npublic class GloableExceptionHandler1 &#123;\n    @ExceptionHandler(value =&#123;ArithmeticException.class,NullPointerException.class&#125; )\n    public ModelAndView handelException()&#123;\n        ModelAndView mv =new ModelAndView();\n        mv.setViewName(&quot;error1.jsp&quot;);\n        return mv;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"3使用：SimpleMappingExceptionResolver\"><a href=\"#3使用：SimpleMappingExceptionResolver\" class=\"headerlink\" title=\"3使用：SimpleMappingExceptionResolver\"></a>3使用：SimpleMappingExceptionResolver</h3><pre><code class=\"java\">/**\n * 全局异常\n */\n  @Configuration\n  public class GloableException2 &#123;\n    @Bean\n    public SimpleMappingExceptionResolver getSimpleMappingExceptionResolver()&#123;\n        SimpleMappingExceptionResolver resolver = new SimpleMappingExceptionResolver();\n        Properties prop = new Properties();\n        prop.put(&quot;java.lang.NullPointerException&quot;,&quot;error1.jsp&quot;);\n        prop.put(&quot;java.lang.ArithmeticException&quot;,&quot;error2.jsp&quot;);\n        resolver.setExceptionMappings(prop);\n        return resolver;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"4自定义的HandlerExceptionResolver\"><a href=\"#4自定义的HandlerExceptionResolver\" class=\"headerlink\" title=\"4自定义的HandlerExceptionResolver\"></a>4自定义的HandlerExceptionResolver</h3><pre><code class=\"java\">/**\n * 全局异常\n * HandlerExceptionResolve\n */\n  @Configuration\n  public class GloableException3 implements HandlerExceptionResolver &#123;\n    @Override\n    public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &#123;\n        ModelAndView mv = new ModelAndView();\n        if(e instanceof NullPointerException)&#123;\n                mv.setViewName(&quot;error1&quot;);\n        &#125;\n        if(e instanceof ArithmeticException)&#123;\n                mv.setViewName(&quot;error2&quot;);\n        &#125;\n        mv.addObject(&quot;msg&quot;,e);\n        return mv;\n    &#125;&#125;\n</code></pre>\n<h1 id=\"其他注解\"><a href=\"#其他注解\" class=\"headerlink\" title=\"其他注解\"></a>其他注解</h1><h2 id=\"RequestBody\"><a href=\"#RequestBody\" class=\"headerlink\" title=\"@RequestBody\"></a>@RequestBody</h2><p>作用：</p>\n<p>​\t用于获取请求体json格式的字符串内容。直接使用得到是 key&#x3D;value&amp;key&#x3D;value…结构的数据，get 请求方式不适用。</p>\n<p>属性：</p>\n<p>​\trequired：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值 为 false，get 请求得到是null。</p>\n<h2 id=\"CrossOrigin\"><a href=\"#CrossOrigin\" class=\"headerlink\" title=\"@CrossOrigin\"></a>@CrossOrigin</h2><p>作用：</p>\n<p>​\t解决ajax请求之间的跨域问题</p>\n<p>属性:</p>\n<p>origins  ： 允许可访问的域列表IP</p>\n<p>maxAge：准备响应前的缓存持续的最大时间（以秒为单位）。</p>\n",
            "tags": [
                "框架",
                "Spring",
                "SpringMVC"
            ]
        }
    ]
}