<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>记录“美食”每刻 • Posts by &#34;springmvc&#34; category</title>
    <link href="http://example.com" />
    <updated>2022-10-06T16:00:00.000Z</updated>
    <category term="博客" />
    <category term="环境搭建" />
    <category term="分布式" />
    <category term="Dubbo" />
    <category term="FastDFS" />
    <category term="MySQL" />
    <category term="数据库基础" />
    <category term="数据库基本知识" />
    <category term="数据库" />
    <category term="框架" />
    <category term="ORM" />
    <category term="RPC" />
    <category term="中间件" />
    <category term="RabbitMQ" />
    <category term="Solr" />
    <category term="快速搜索" />
    <category term="Redis基础" />
    <category term="NoSQL数据库" />
    <category term="Spring" />
    <category term="SpringBoot" />
    <category term="SpringMVC" />
    <category term="SpringSecurity" />
    <category term="JavaSE" />
    <category term="-JavaSE" />
    <entry>
        <id>http://example.com/2022/10/07/SpringMVC/</id>
        <title>SpringMVC</title>
        <link rel="alternate" href="http://example.com/2022/10/07/SpringMVC/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220716212203883.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;M   model      模型层   DAO封装        &amp;gt;&amp;gt;&amp;gt; Mybatis&lt;br&gt;V    view         视图层   html css js  jsp&lt;br&gt;C    controller 控制层   Servlet封装    &amp;gt;&amp;gt;&amp;gt; springMVC &lt;/p&gt;
&lt;p&gt;SpringMVC是spring为展现层提供的基于MVC设计理念的优秀WEB框架,是目前最主流的MVC框架之一&lt;br&gt;SpringMVC通过一套注解,可以让普通的JAVA类成为contrllor控制器,无需继承Servlet,实现了控制层和Servlet之间的解耦&lt;br&gt;SpringMVC支持Rest风格的URL写法&lt;br&gt;SpringMVC采用了松耦合,可热插的主键结构,比其他的框架更具扩展性和灵活性&lt;/p&gt;
&lt;h1 id=&#34;执行流程&#34;&gt;&lt;a href=&#34;#执行流程&#34; class=&#34;headerlink&#34; title=&#34;执行流程&#34;&gt;&lt;/a&gt;执行流程&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717190437596.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717190445738.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;1DispatcherServlet：前端控制器&lt;br&gt;用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由 它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 HandlerMapping：处理器映射器&lt;/strong&gt;&lt;br&gt;HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等。&lt;/p&gt;
&lt;p&gt;3 Handler：处理器 (自己定义的Controller处理单元)&lt;br&gt;它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 HandlAdapter：处理器适配器&lt;/strong&gt;&lt;br&gt;通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行&lt;/p&gt;
&lt;p&gt;5 View Resolver：视图解析器&lt;br&gt;View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。&lt;/p&gt;
&lt;p&gt;6 View：视图&lt;br&gt;SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开 发具体的页面。&lt;/p&gt;
&lt;p&gt;7 &lt;span class=&#34;exturl&#34; data-url=&#34;bXZjOmFubm90YXRpb24tZHJpdmVu&#34;&gt;mvc:annotation-driven&lt;/span&gt;说明&lt;br&gt;在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。&lt;br&gt;使 用 &lt;span class=&#34;exturl&#34; data-url=&#34;bXZjOmFubm90YXRpb24tZHJpdmVu&#34;&gt;mvc:annotation-driven&lt;/span&gt; 自动加载 RequestMappingHandlerMapping （处理映射器） 和 RequestMappingHandlerAdapter （ 处 理 适 配 器 ） ， 可 用 在 SpringMVC.xml 配 置 文 件 中 使 用 &lt;span class=&#34;exturl&#34; data-url=&#34;bXZjOmFubm90YXRpb24tZHJpdmVu&#34;&gt;mvc:annotation-driven&lt;/span&gt;替代注解处理器和适配器的配置。&lt;/p&gt;
&lt;p&gt;HandlerMapping的实现类的作用&lt;br&gt;实现类RequestMappingHandlerMapping，它会处理@RequestMapping 注解，并将其注册到请求映射表中。&lt;/p&gt;
&lt;p&gt;HandlerAdapter的实现类的作用&lt;br&gt;实现类RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。&lt;/p&gt;
&lt;p&gt;当配置了mvc:annotation-driven&amp;#x2F;后，Spring就知道了我们启用注解驱动。然后Spring通过context:component-scan&amp;#x2F;标签的配置，会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求,这个时候接收返回json数据、参数验证、统一异常等功能。&lt;/p&gt;
&lt;h1 id=&#34;重要注解&#34;&gt;&lt;a href=&#34;#重要注解&#34; class=&#34;headerlink&#34; title=&#34;重要注解&#34;&gt;&lt;/a&gt;重要注解&lt;/h1&gt;&lt;h2 id=&#34;1、RequestMapping&#34;&gt;&lt;a href=&#34;#1、RequestMapping&#34; class=&#34;headerlink&#34; title=&#34;1、RequestMapping&#34;&gt;&lt;/a&gt;1、RequestMapping&lt;/h2&gt;&lt;p&gt;紧耦合方式(了解)&lt;br&gt;DispatcherServlet中的service方法直接将此次请求的request对象传递给调用的单元方法即可。同时在单元方法上声明形参HttpServletRequest来接收request实参即可。&lt;br&gt;&lt;strong&gt;解耦合方式(熟练)&lt;/strong&gt;&lt;br&gt;DispatcherServlet在其service方法中将请求数据根据需求从request对象中获取出来后，将数据直接传递给对应的单元方法使用。同时在单元方法上直接声明对应的形参接收请求数据即可。在单元方法上声明形参来接收请求数据时，形参名必须和请求数据的键名一致，DispatcherServlet会将调用单元方法的形参名作为请求数据的键名获取请求数据，然后传递给单元方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RestController
public class TestDataController &amp;#123;
    /*紧耦合方式参数注入
    * 使用传统的HttpServletRequest对象获取参数  javax.servlet
    * */
    @RequestMapping(&amp;quot;/getParamByRequest.do&amp;quot;)
    public String getParam1(HttpServletRequest req, HttpServletResponse resp)&amp;#123;
        String username = req.getParameter(&amp;quot;username&amp;quot;);
        String password = req.getParameter(&amp;quot;password&amp;quot;);
        System.out.println(&amp;quot;username:&amp;quot;+username+&amp;quot;   password:&amp;quot;+password);
        return &amp;quot;getParamSuccess&amp;quot;;
    &amp;#125;
    /*解耦合方式参数注入
    * HttpServletRequest对象获取参数 通过SpringMVC框架功能,自动转换参数
    * 处理单元参数列表中参数名必须和请求中的参数名一致
                                        * 如不一致,可以通过@RequestParma注解进行转换
    * */
    @RequestMapping(&amp;quot;/getParamByArgName.do&amp;quot;)
    public String getParam2(String username,@RequestParam(&amp;quot;pwd&amp;quot;) int password)&amp;#123;
        System.out.println(&amp;quot;username:&amp;quot;+username+&amp;quot;   password:&amp;quot;+password);
        return &amp;quot;getParamSuccess&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2、PathVariable注解和RESTful风格的支持&#34;&gt;&lt;a href=&#34;#2、PathVariable注解和RESTful风格的支持&#34; class=&#34;headerlink&#34; title=&#34;2、PathVariable注解和RESTful风格的支持&#34;&gt;&lt;/a&gt;2、PathVariable注解和RESTful风格的支持&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;普通形式的url&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;*/contextPath/aaa.do
*/contextPath/aaa.jsp
*/contextPath/aaa.html
*/contextPath/css/aaa.css
*/contextPath/js/aaa.js
*/contextPath/aaa.do?id=10&amp;amp;username=root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;restFul风格的url&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;*/contextPath/aaa/10/root
*/contextPath/aaa
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class PathController &amp;#123;
    @RequestMapping(&amp;quot;/testPathVariable/&amp;#123;id&amp;#125;/&amp;#123;username&amp;#125;&amp;quot;)
    public String testPathVariable(@PathVariable(&amp;quot;id&amp;quot;) Integer id, @PathVariable(&amp;quot;username&amp;quot;) String username)&amp;#123;
        System.out.println(&amp;quot;id:&amp;quot;+id);
        System.out.println(&amp;quot;username:&amp;quot;+username);
        System.out.println(&amp;quot;testPathVariable1&amp;quot;);
        return &amp;quot;success&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191056216.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191104583-1661419340091.png&#34; class=&#34;&#34;&gt;






&lt;h1 id=&#34;响应处理&#34;&gt;&lt;a href=&#34;#响应处理&#34; class=&#34;headerlink&#34; title=&#34;响应处理&#34;&gt;&lt;/a&gt;响应处理&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191212189-1661419342477.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;1、单元方法返回值为void&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191318663-1661419344199.png&#34; class=&#34;&#34;&gt;


&lt;blockquote&gt;
&lt;p&gt;在SpringMVC中如果对于当前的控制单元，没有写对应的返回值，这个时候&lt;strong&gt;SpringMVC就会找和自己控制单元名称一致的页面展示&lt;/strong&gt;，&lt;strong&gt;如果没有配置视图解析器的前缀和后缀是没有产生404&lt;/strong&gt;,需要注意控制单元仍然可以进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、转发和重定向ServletAPI 实现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;demo1&amp;quot;)
    public void testDemo1(HttpServletRequest request, HttpServletResponse response) throws Exception &amp;#123;
        // 请求转发
        //request.getRequestDispatcher(&amp;quot;/forward.jsp&amp;quot;).forward(request,response);
        // 响应重定向
        response.sendRedirect(request.getContextPath()+&amp;quot;/redirect.jsp&amp;quot;);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;单元方法的返回值类型设置void。因为使用response对象在单元方法中直接对此次请求进行了响应，不再通过DispatcherServlet了，既然已经响应了，就不需要再给DispatcherServlet返回值了。在单元方法上声明HttpServletResponse形参，来接收此次请求的response对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、使用forward关键字完成响应&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; /*
    * 返回字符串告诉DispatcherServlet跳转的路径
    * 在路径之前放上一个forward: 关键字,就是请求转发
    * 如果路径前的关键字是forward,那么可以省略不写
    * */
    @RequestMapping(&amp;quot;demo2&amp;quot;)
    public String testDemo2() throws Exception &amp;#123;
        //return &amp;quot;forward:/forwardPage.jsp&amp;quot;;
        return &amp;quot;/forwardPage.jsp&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用通过单元方法的返回值来告诉DispatcherServlet请求转发指定的资源,如果是请求转发，&lt;strong&gt;forward关键字可以&lt;em&gt;省略不写&lt;/em&gt;的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、使用redirect关键字完成响应&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/*
     * 返回字符串告诉DispatcherServlet跳转的路径
     * 在路径之前放上一个redirect: 关键字,就是重定向
     * 如果路径前的关键字是redirect,那么不可以省略
     * /表示当前项目下.这里不需要项目的上下文路径
     * */
    @RequestMapping(&amp;quot;demo3&amp;quot;)
    public String testDemo3() throws Exception &amp;#123;
        return &amp;quot;redirect:/redirectPage.jsp&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用通过单元方法的返回值来告诉DispatcherServlet重定向指定的资源，注意这个&lt;strong&gt;redirect关键字&lt;em&gt;不可以省去&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5、使用View视图转发和重定向&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; @RequestMapping(&amp;quot;demo4&amp;quot;)
    public View testDemo4(HttpServletRequest req)   &amp;#123;
        View  view =null;
        // 请求转发
        //view =new InternalResourceView(&amp;quot;/forwardPage.jsp&amp;quot;);
        // 重定向
        view=new RedirectView(req.getContextPath()+&amp;quot;/redirectPage.jsp&amp;quot;);
        return view;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RedirectView中所做的操作，最终的实现是在renderMergedOutputModel中完成实现的，简单来说RedirectView实现了链接的重定向，并且将数据保存到FlashMap中，这样在跳转后的链接中可以获取一些数据.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6、使用ModelAndView转发重定向&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;demo5&amp;quot;)
    public ModelAndView testDemo5(HttpServletRequest req)   &amp;#123;
        ModelAndView mv=new ModelAndView();
        // 请求转发
        //mv.setViewName(&amp;quot;forward:/forwardPage.jsp&amp;quot;);
        //mv.setView(new InternalResourceView(&amp;quot;/forwardPage.jsp&amp;quot;));
        // 重定向
        //mv.setViewName(&amp;quot;redirect:/redirectPage.jsp&amp;quot;);
        mv.setView(new RedirectView(req.getContextPath()+&amp;quot;/redirectPage.jsp&amp;quot;));
        return mv;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	ModelAndView中的Model代表模型，View代表视图，这个名字就很好地解释了该类的作用。业务处理器调用模型层处理完用户请求后，把结果数据存储在该类的model属性中，把要返回的视图信息存储在该类的view属性中，然后让该ModelAndView返回该Spring MVC框架。&lt;/p&gt;
&lt;h1 id=&#34;作用域传参&#34;&gt;&lt;a href=&#34;#作用域传参&#34; class=&#34;headerlink&#34; title=&#34;作用域传参&#34;&gt;&lt;/a&gt;作用域传参&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191751516-1661419352934.png&#34; class=&#34;&#34;&gt;


&lt;blockquote&gt;
&lt;p&gt;PageContext对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:当前jsp页面内有效&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;request对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:一次请求内。&lt;/p&gt;
&lt;p&gt;作用: 解决了一次请求内的资源的数据共享问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;session对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:一次会话内有效。&lt;/p&gt;
&lt;p&gt;说明:浏览器不关闭,并且后台的session不失效，在任意请求中都可以获取到同一个session对象。&lt;/p&gt;
&lt;p&gt;作用:解决了一个用户不同请求的数据共享问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;application(ServletContext)对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:整个项目内有效。&lt;/p&gt;
&lt;p&gt;特点:一个项目只有一个，在服务器启动的时候即完成初始化创建无论如何获取都是同一个项目。&lt;/p&gt;
&lt;p&gt;作用:解决了不同用户的数据共享问题。&lt;/p&gt;
&lt;h1 id=&#34;拦截器&#34;&gt;&lt;a href=&#34;#拦截器&#34; class=&#34;headerlink&#34; title=&#34;拦截器&#34;&gt;&lt;/a&gt;拦截器&lt;/h1&gt;&lt;h2 id=&#34;引入&#34;&gt;&lt;a href=&#34;#引入&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;过滤器的作用是保护请求的服务器资源，在请求资源被执行之前&amp;#x3D;&amp;#x3D;，如果请求地址符合拦截范围，则会先执行过滤器。&amp;#x3D;&amp;#x3D;过滤器的执行时机，是在Servlet之前执行的&amp;#x3D;&amp;#x3D;。但是在使用了SpringMVC后，Servlet只有一个了，也就是DisptcherServlet。那么，如果我们仍然使用过滤器来完成请求的拦截，因为过滤器是在Servlet之前执行的，就会造成，&amp;#x3D;&amp;#x3D;过滤器会拦截DispatcherServlet所有的请求&amp;#x3D;&amp;#x3D;。那么，如果我们有&amp;#x3D;&amp;#x3D;部分请求不想被拦截&amp;#x3D;&amp;#x3D;，怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;拦截器使用&#34;&gt;&lt;a href=&#34;#拦截器使用&#34; class=&#34;headerlink&#34; title=&#34;拦截器使用&#34;&gt;&lt;/a&gt;拦截器使用&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191927439-1661419356594.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;Spring MVC中的拦截器（Interceptor）类似于Servlet中的过滤器（Filter），它主要用于拦截用户请求并作相应的处理。例如通过拦截器可以进行权限验证、记录请求信息的日志、判断用户是否登录等。&lt;br&gt;    要使用Spring MVC中的拦截器，就需要对拦截器类进行定义和配置。通常拦截器类可以通过两种方式来定义。&lt;br&gt;    1.通过实现HandlerInterceptor接口，或继承HandlerInterceptor接口的实现类（如HandlerInterceptorAdapter）来定义。&lt;br&gt;    2.通过实现WebRequestInterceptor接口，或继承WebRequestInterceptor接口的实现类来定义。&lt;/p&gt;
&lt;h2 id=&#34;拦截器和过滤器的区别&#34;&gt;&lt;a href=&#34;#拦截器和过滤器的区别&#34; class=&#34;headerlink&#34; title=&#34;拦截器和过滤器的区别&#34;&gt;&lt;/a&gt;拦截器和过滤器的区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;拦截器SpringMVC的，而过滤器是servlet的。	&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器不依赖与servlet容器,由spring容器初始化，过滤器依赖与servlet容器,由servlet容器初始化。. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器可以获取IOC容器中的各个bean，而过滤器就不太方便，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyInterceptor implements HandlerInterceptor &amp;#123;
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &amp;#123;
        /*在请求到达我们定义的handler之前工作的*/
        System.out.println(&amp;quot;MyInterceptor preHandle&amp;quot;);
        /*返回的是true,代表放行,可以继续到达handler*/
        return true;
    &amp;#125;
    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &amp;#123;
        System.out.println(&amp;quot;MyInterceptor postHandle&amp;quot;);
        /*handler 处理单元返回ModelAndView 时候进行 拦截*/
    &amp;#125;
    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &amp;#123;
        /*
        页面渲染完毕,但是还没有给浏览器响应数据的时候
         */
        System.out.println(&amp;quot;MyInterceptor afterCompletion&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;多个拦截器执行顺序&#34;&gt;&lt;a href=&#34;#多个拦截器执行顺序&#34; class=&#34;headerlink&#34; title=&#34;多个拦截器执行顺序&#34;&gt;&lt;/a&gt;多个拦截器执行顺序&lt;/h2&gt;&lt;p&gt;多个拦截器同时存在时,执行的顺序由配置顺序决定. 先配置谁, 谁就先执行.多个拦截器可以理解为拦截器栈, 先进后出(后进先出), 如图所示:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717192103889-1661419360360.png&#34; class=&#34;&#34;&gt;




&lt;h1 id=&#34;异常处理&#34;&gt;&lt;a href=&#34;#异常处理&#34; class=&#34;headerlink&#34; title=&#34;异常处理&#34;&gt;&lt;/a&gt;异常处理&lt;/h1&gt;&lt;h2 id=&#34;SpringMVC异常简介&#34;&gt;&lt;a href=&#34;#SpringMVC异常简介&#34; class=&#34;headerlink&#34; title=&#34;SpringMVC异常简介&#34;&gt;&lt;/a&gt;SpringMVC异常简介&lt;/h2&gt;&lt;p&gt;​	系统中异常包括两类：预期异常(检查型异常)和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息， 后者主要通过规范代码开发、测试通过手段减少运行时异常的发生&lt;/p&gt;
&lt;h2 id=&#34;具体实现&#34;&gt;&lt;a href=&#34;#具体实现&#34; class=&#34;headerlink&#34; title=&#34;具体实现&#34;&gt;&lt;/a&gt;具体实现&lt;/h2&gt;&lt;h3 id=&#34;1使用-ExceptionHandler注解处理异常&#34;&gt;&lt;a href=&#34;#1使用-ExceptionHandler注解处理异常&#34; class=&#34;headerlink&#34; title=&#34;1使用@ExceptionHandler注解处理异常&#34;&gt;&lt;/a&gt;1使用@ExceptionHandler注解处理异常&lt;/h3&gt;&lt;p&gt;缺点：只能处理当前Controller中的异常。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; @ExceptionHandler(value =&amp;#123;ArithmeticException.class,NullPointerException.class&amp;#125; )
    public ModelAndView handelException()&amp;#123;
        ModelAndView mv =new ModelAndView();
        mv.setViewName(&amp;quot;error1.jsp&amp;quot;);
        return mv;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2使用：-ControllerAdvice-ExceptionHandler&#34;&gt;&lt;a href=&#34;#2使用：-ControllerAdvice-ExceptionHandler&#34; class=&#34;headerlink&#34; title=&#34;2使用：@ControllerAdvice+@ExceptionHandler&#34;&gt;&lt;/a&gt;2使用：@ControllerAdvice+@ExceptionHandler&lt;/h3&gt;&lt;p&gt;此处优先级低于局部异常处理器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@ControllerAdvice
public class GloableExceptionHandler1 &amp;#123;
    @ExceptionHandler(value =&amp;#123;ArithmeticException.class,NullPointerException.class&amp;#125; )
    public ModelAndView handelException()&amp;#123;
        ModelAndView mv =new ModelAndView();
        mv.setViewName(&amp;quot;error1.jsp&amp;quot;);
        return mv;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3使用：SimpleMappingExceptionResolver&#34;&gt;&lt;a href=&#34;#3使用：SimpleMappingExceptionResolver&#34; class=&#34;headerlink&#34; title=&#34;3使用：SimpleMappingExceptionResolver&#34;&gt;&lt;/a&gt;3使用：SimpleMappingExceptionResolver&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 全局异常
 */
  @Configuration
  public class GloableException2 &amp;#123;
    @Bean
    public SimpleMappingExceptionResolver getSimpleMappingExceptionResolver()&amp;#123;
        SimpleMappingExceptionResolver resolver = new SimpleMappingExceptionResolver();
        Properties prop = new Properties();
        prop.put(&amp;quot;java.lang.NullPointerException&amp;quot;,&amp;quot;error1.jsp&amp;quot;);
        prop.put(&amp;quot;java.lang.ArithmeticException&amp;quot;,&amp;quot;error2.jsp&amp;quot;);
        resolver.setExceptionMappings(prop);
        return resolver;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4自定义的HandlerExceptionResolver&#34;&gt;&lt;a href=&#34;#4自定义的HandlerExceptionResolver&#34; class=&#34;headerlink&#34; title=&#34;4自定义的HandlerExceptionResolver&#34;&gt;&lt;/a&gt;4自定义的HandlerExceptionResolver&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 全局异常
 * HandlerExceptionResolve
 */
  @Configuration
  public class GloableException3 implements HandlerExceptionResolver &amp;#123;
    @Override
    public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &amp;#123;
        ModelAndView mv = new ModelAndView();
        if(e instanceof NullPointerException)&amp;#123;
                mv.setViewName(&amp;quot;error1&amp;quot;);
        &amp;#125;
        if(e instanceof ArithmeticException)&amp;#123;
                mv.setViewName(&amp;quot;error2&amp;quot;);
        &amp;#125;
        mv.addObject(&amp;quot;msg&amp;quot;,e);
        return mv;
    &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;其他注解&#34;&gt;&lt;a href=&#34;#其他注解&#34; class=&#34;headerlink&#34; title=&#34;其他注解&#34;&gt;&lt;/a&gt;其他注解&lt;/h1&gt;&lt;h2 id=&#34;RequestBody&#34;&gt;&lt;a href=&#34;#RequestBody&#34; class=&#34;headerlink&#34; title=&#34;@RequestBody&#34;&gt;&lt;/a&gt;@RequestBody&lt;/h2&gt;&lt;p&gt;作用：&lt;/p&gt;
&lt;p&gt;​	用于获取请求体json格式的字符串内容。直接使用得到是 key&amp;#x3D;value&amp;amp;key&amp;#x3D;value…结构的数据，get 请求方式不适用。&lt;/p&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;p&gt;​	required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值 为 false，get 请求得到是null。&lt;/p&gt;
&lt;h2 id=&#34;CrossOrigin&#34;&gt;&lt;a href=&#34;#CrossOrigin&#34; class=&#34;headerlink&#34; title=&#34;@CrossOrigin&#34;&gt;&lt;/a&gt;@CrossOrigin&lt;/h2&gt;&lt;p&gt;作用：&lt;/p&gt;
&lt;p&gt;​	解决ajax请求之间的跨域问题&lt;/p&gt;
&lt;p&gt;属性:&lt;/p&gt;
&lt;p&gt;origins  ： 允许可访问的域列表IP&lt;/p&gt;
&lt;p&gt;maxAge：准备响应前的缓存持续的最大时间（以秒为单位）。&lt;/p&gt;
</content>
        <category term="框架" />
        <category term="Spring" />
        <category term="SpringMVC" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
</feed>
