{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"[object object]\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/15/IDEA-tool/",
            "url": "http://example.com/2022/10/15/IDEA-tool/",
            "title": "IDEA-tool",
            "date_published": "2022-10-15T04:52:38.136Z",
            "content_html": "<h2 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h2><h4 id=\"皮肤\"><a href=\"#皮肤\" class=\"headerlink\" title=\"皮肤\"></a>皮肤</h4><blockquote>\n<p>所有Jetbrains全家桶都适用</p>\n</blockquote>\n<h5 id=\"Cyan-Light-Theme\"><a href=\"#Cyan-Light-Theme\" class=\"headerlink\" title=\"Cyan Light Theme\"></a>Cyan Light Theme</h5><img data-src=\"/2022/10/15/IDEA-tool/image-20220721202846958-1665745616515.png\" class=\"\">\n\n\n<h5 id=\"Vuesion-Theme\"><a href=\"#Vuesion-Theme\" class=\"headerlink\" title=\"Vuesion Theme\"></a>Vuesion Theme</h5><img data-src=\"/2022/10/15/IDEA-tool/image-20220721203729737-1665745616515.png\" class=\"\">\n\n\n<h5 id=\"One-Dark-Theme\"><a href=\"#One-Dark-Theme\" class=\"headerlink\" title=\"One Dark Theme\"></a>One Dark Theme</h5><img data-src=\"/2022/10/15/IDEA-tool/img-1665745616515.png\" class=\"\">\n\n\n<h4 id=\"Atom-Material-ICons\"><a href=\"#Atom-Material-ICons\" class=\"headerlink\" title=\"Atom Material ICons\"></a>Atom Material ICons</h4><blockquote>\n<p>文件夹图标修改</p>\n</blockquote>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220721202830248-1665745616515.png\" class=\"\">\n\n\n\n\n<h4 id=\"Maven-Helper\"><a href=\"#Maven-Helper\" class=\"headerlink\" title=\"Maven Helper ******\"></a>Maven Helper ******</h4><blockquote>\n<p>查看Maven依赖，如果存在依赖冲突会直接爆红，很方便。</p>\n</blockquote>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220721203551163-1665745616515.png\" class=\"\">\n\n\n<h4 id=\"MybatisX\"><a href=\"#MybatisX\" class=\"headerlink\" title=\"MybatisX\"></a>MybatisX</h4><blockquote>\n<p>这个不用多说懂的都懂</p>\n</blockquote>\n<h4 id=\"Lombok\"><a href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"></a>Lombok</h4><blockquote>\n<p>这个不用多说懂的都懂</p>\n</blockquote>\n<h4 id=\"JRebel-and-XRebel\"><a href=\"#JRebel-and-XRebel\" class=\"headerlink\" title=\"JRebel and XRebel\"></a>JRebel and XRebel</h4><blockquote>\n<p>热部署工具</p>\n</blockquote>\n<h4 id=\"RestfulToolkits\"><a href=\"#RestfulToolkits\" class=\"headerlink\" title=\"RestfulToolkits\"></a>RestfulToolkits</h4><blockquote>\n<p>可以直接根据URL查看本地的对应Controller，也可以当做Postman用</p>\n</blockquote>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220721203331392-1665745616515.png\" class=\"\">\n\n\n<h4 id=\"GsonFormat\"><a href=\"#GsonFormat\" class=\"headerlink\" title=\"GsonFormat\"></a>GsonFormat</h4><blockquote>\n<p>可以帮助我们快速的将JSON对象转换为Bean</p>\n</blockquote>\n<h4 id=\"Rainbow-Brakets\"><a href=\"#Rainbow-Brakets\" class=\"headerlink\" title=\"Rainbow Brakets\"></a>Rainbow Brakets</h4><blockquote>\n<p>彩虹括号</p>\n</blockquote>\n<h4 id=\"arthas-idea\"><a href=\"#arthas-idea\" class=\"headerlink\" title=\"arthas idea\"></a>arthas idea</h4><blockquote>\n<p>Arthas阿里开源的一款强大的JAVA在线诊断工具</p>\n<p>缺点：需要输入一段很长的命令，如果有遗忘的话就去查看文档<br>这款插件就直接解决了这些问题。</p>\n</blockquote>\n<h4 id=\"VisualGC\"><a href=\"#VisualGC\" class=\"headerlink\" title=\"VisualGC\"></a>VisualGC</h4><blockquote>\n<p>诊断JVM堆栈工具</p>\n</blockquote>\n<h4 id=\"Zoolytic\"><a href=\"#Zoolytic\" class=\"headerlink\" title=\"Zoolytic\"></a>Zoolytic</h4><blockquote>\n<p>一款Zookeeper结点查看分析插件。其实第三方也有一些工具。</p>\n</blockquote>\n<h4 id=\"SequenceDiagram\"><a href=\"#SequenceDiagram\" class=\"headerlink\" title=\"SequenceDiagram\"></a>SequenceDiagram</h4><blockquote>\n<p>作用：快速查看某个方法的时序图，作用就是在我们查看项目源码时，查看方法的流程</p>\n<p>注：只能查看我们自己写的源码，不能查看JDK的源码运行流程</p>\n</blockquote>\n<h5 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h5><p>1、点击<strong>方法名</strong> ，然后右键点击 <code>SequenceDiagram</code></p>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220727211446055-1665745616515.png\" class=\"\">\n\n\n<p>2、配置我们的生成策略</p>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220727212313180-1665745616515.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220727211659767-1665745616515.png\" class=\"\">\n\n\n<p>除了策略配置我们最常用的就还是最后一个保存为 .plantUML 文件，配合 <code>PlantUML Integration</code> 删除或者添加一下注解 更加完善我们的流程图</p>\n<h4 id=\"PlantUML-Integration\"><a href=\"#PlantUML-Integration\" class=\"headerlink\" title=\"PlantUML Integration\"></a>PlantUML Integration</h4><blockquote>\n<p>作用：通过代码形式来写时序图，主要还是配合 SquenceDiagram</p>\n</blockquote>\n<p>插件下载成功之后我们可以右键直接new出来 .PlantUML文件，自己直接写时序图，但是效率低不推荐还是配合Sequence吧</p>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220727212819103-1665745616515.png\" class=\"\">\n\n\n<p>推荐一个 Sequence 和 PlantUML 二合一的应用：Sourcetrail ，有点难用，关键是英文，但是真的好用，等我死磕！！！</p>\n<p>具体操作百度一下就行了</p>\n<h4 id=\"Easy-Code\"><a href=\"#Easy-Code\" class=\"headerlink\" title=\"Easy Code\"></a>Easy Code</h4><p> 自动生成作为为我自己常用的架构层次以及命名规则，在快速生产中没有他人硬性标准的情况下，不用额外配置，由于MybatisPlus的逆向工程(这老哥还要写那一套重复代码麻烦，我就鼠标点点！！！)</p>\n<p>&#x3D;&#x3D;下载完成之后，修改一下原来的配置模板文档(无脑粘贴没毛病)&#x3D;&#x3D;</p>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220821181239253-1665745616515.png\" class=\"\">\n\n\n<h5 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h5><pre><code class=\"java\">####导入宏定义\n$!&#123;define.vm&#125;\n\n####设置表后缀（宏定义）\n####setTableSuffix(&quot;Controller&quot;)\n\n####保存文件（宏定义）\n####save(&quot;/controller&quot;, &quot;Controller.java&quot;)\n\n####包路径（宏定义）\n####setPackageSuffix(&quot;controller&quot;)\n\n####定义服务名\n####set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), &quot;Service&quot;))\n\n####定义实体对象名\n####set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.api.ApiController;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!&#123;tableInfo.savePackageName&#125;.pojo.$!tableInfo.name;\nimport $!&#123;tableInfo.savePackageName&#125;.service.$!&#123;tableInfo.name&#125;Service;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n####表注释（宏定义）\n####tableComment(&quot;表控制层&quot;)\n@RestController\n@RequestMapping(&quot;/$!tool.firstLowerCase($!tableInfo.name)&quot;)\npublic class $!&#123;tableName&#125; &#123;\n    /**\n     * 服务对象\n     */\n    @Autowired\n    private $!&#123;tableInfo.name&#125;Service $!&#123;serviceName&#125;;\n\n    \n&#125;\n</code></pre>\n<h5 id=\"entity\"><a href=\"#entity\" class=\"headerlink\" title=\"entity\"></a>entity</h5><p>我的实体类一般都叫pojo， 其中要整合MybatisPlus因为我在模板里面加了一个他的注解@TableName</p>\n<pre><code class=\"xml\">   &lt;!--MybatisPlus--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;/dependency&gt;\n</code></pre>\n<pre><code class=\"java\">####导入宏定义\n$!&#123;define.vm&#125;\n\n####保存文件（宏定义）\n####save(&quot;/pojo&quot;, &quot;.java&quot;)\n\n####包路径（宏定义）\n####setPackageSuffix(&quot;pojo&quot;)\n\n####自动导入包（全局变量）\n$!&#123;autoImport.vm&#125;\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\nimport lombok.*;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport com.baomidou.mybatisplus.annotation.TableField;\n\n####表注释（宏定义）\n####tableComment(&quot;表实体类&quot;)\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Date\n@ToString\n@TableName(value = &quot;$!&#123;tableInfo.name&#125;&quot;)\npublic class $!&#123;tableInfo.name&#125; implements Serializable &#123;\n####foreach($column in $tableInfo.fullColumn)\n    /**\n    * ##if($&#123;column.comment&#125;)$&#123;column.comment&#125;##end\n    \n    */ \n    @TableField($tool.hump2Underline($!&#123;column.name&#125;))\n    private $!&#123;tool.getClsNameByFullName($column.type)&#125; $!&#123;column.name&#125;;\n    \n####end\n\n&#125;\n</code></pre>\n<h5 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h5><pre><code class=\"java\">####导入宏定义\n$!&#123;define.vm&#125;\n\n####设置表后缀（宏定义）\n####setTableSuffix(&quot;Service&quot;)\n\n####保存文件（宏定义）\n####save(&quot;/service&quot;, &quot;Service.java&quot;)\n\n####包路径（宏定义）\n####setPackageSuffix(&quot;service&quot;)\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!&#123;tableInfo.savePackageName&#125;.pojo.$!tableInfo.name;\n\n####表注释（宏定义）\n####tableComment(&quot;表服务接口&quot;)\npublic interface $!&#123;tableName&#125; extends IService&lt;$!tableInfo.name&gt; &#123;\n\n&#125;\n</code></pre>\n<h5 id=\"ServiceImpl\"><a href=\"#ServiceImpl\" class=\"headerlink\" title=\"ServiceImpl\"></a>ServiceImpl</h5><pre><code class=\"java\">####导入宏定义\n$!&#123;define.vm&#125;\n\n####设置表后缀（宏定义）\n####setTableSuffix(&quot;ServiceImpl&quot;)\n\n####保存文件（宏定义）\n####save(&quot;/service/impl&quot;, &quot;ServiceImpl.java&quot;)\n\n####包路径（宏定义）\n####setPackageSuffix(&quot;service.impl&quot;)\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!&#123;tableInfo.savePackageName&#125;.mapper.$!&#123;tableInfo.name&#125;Mapper;\nimport $!&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;;\nimport $!&#123;tableInfo.savePackageName&#125;.service.$!&#123;tableInfo.name&#125;Service;\nimport org.springframework.stereotype.Service;\n\n####表注释（宏定义）\n####tableComment(&quot;表服务实现类&quot;)\n@Service(&quot;$!tool.firstLowerCase($tableInfo.name)Service&quot;)\npublic class $!&#123;tableName&#125; extends ServiceImpl&lt;$!&#123;tableInfo.name&#125;Mapper, $!&#123;tableInfo.name&#125;&gt; implements $!&#123;tableInfo.name&#125;Service &#123;\n    @Autowired\n    private $!&#123;tableInfo.name&#125;Mapper $tool.firstLowerCase($!&#123;tableInfo.name&#125;)Mapper;\n    \n    \n    \n&#125;\n</code></pre>\n<h5 id=\"Dao-x2F-Mapper-java\"><a href=\"#Dao-x2F-Mapper-java\" class=\"headerlink\" title=\"Dao  &#x2F;  Mapper.java\"></a>Dao  &#x2F;  Mapper.java</h5><p>我习惯叫mapper层，文件也是以 *Mapper 结尾</p>\n<pre><code class=\"java\">####导入宏定义\n$!&#123;define.vm&#125;\n\n####设置表后缀（宏定义）\n####setTableSuffix(&quot;Mapper&quot;)\n\n####保存文件（宏定义）\n####save(&quot;/mapper&quot;, &quot;Mapper.java&quot;)\n\n####包路径（宏定义）\n####setPackageSuffix(&quot;mapper&quot;)\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!&#123;tableInfo.savePackageName&#125;.pojo.$!tableInfo.name;\nimport org.apache.ibatis.annotations.Mapper;\n\n####表注释（宏定义）\n####tableComment(&quot;表数据库访问层&quot;)\n\n@Mapper\npublic interface $!&#123;tableName&#125; extends BaseMapper&lt;$!tableInfo.name&gt; &#123;\n\n&#125;\n</code></pre>\n<h5 id=\"Mapper-xml-映射文件，自己创建一下\"><a href=\"#Mapper-xml-映射文件，自己创建一下\" class=\"headerlink\" title=\"Mapper.xml(映射文件，自己创建一下)\"></a>Mapper.xml(映射文件，自己创建一下)</h5><pre><code class=\"xml\">####引入mybatis支持\n$!&#123;mybatisSupport.vm&#125;\n\n####设置保存名称与保存位置\n$!callback.setFileName($tool.append($!&#123;tableInfo.name&#125;, &quot;Mapper.xml&quot;))\n$!callback.setSavePath($tool.append($modulePath, &quot;/src/main/resources/mapper&quot;))\n\n####拿到主键\n####if(!$tableInfo.pkColumn.isEmpty())\n#    ##set($pk = $tableInfo.pkColumn.get(0))\n####end\n#### 拿到全索引列，用‘，’间隔\n##set($sqlCloumn=&quot;##foreach($column in $tableInfo.fullColumn)$!column.name##if($!foreach.hasNext) ,##end ##end&quot;)\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;$&#123;tableInfo.savePackageName&#125;.mapper.$!&#123;tableInfo.name&#125;Mapper&quot;&gt;\n\n    &lt;sql id=&quot;All$!&#123;tableInfo.name&#125;Column&quot;&gt;$sqlCloumn&lt;/sql&gt;   \n    &lt;resultMap type=&quot;$&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;&quot; id=&quot;$!&#123;tableInfo.name&#125;Map&quot;&gt;\n####foreach($column in $tableInfo.fullColumn)\n        &lt;result property=&quot;$!column.name&quot; column=&quot;$!column.obj.name&quot; /&gt;\n####end\n    &lt;/resultMap&gt;\n    \n    \n\n&lt;/mapper&gt;\n</code></pre>\n<h5 id=\"设置快捷操作\"><a href=\"#设置快捷操作\" class=\"headerlink\" title=\"设置快捷操作***\"></a>设置快捷操作***</h5><p>直接导入我的JSON文件即可，将以下内容保存为.json文件并进行导入</p>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220823220304489-1665745616515.png\" class=\"\">\n\n\n<pre><code class=\"json\">&#123;\n  &quot;author&quot; : &quot;makejava&quot;,\n  &quot;version&quot; : &quot;1.2.6&quot;,\n  &quot;userSecure&quot; : &quot;&quot;,\n  &quot;currTypeMapperGroupName&quot; : &quot;Default&quot;,\n  &quot;currTemplateGroupName&quot; : &quot;MybatisPlus&quot;,\n  &quot;currColumnConfigGroupName&quot; : &quot;Default&quot;,\n  &quot;currGlobalConfigGroupName&quot; : &quot;Default&quot;,\n  &quot;typeMapper&quot; : &#123; &#125;,\n  &quot;template&quot; : &#123;\n    &quot;MybatisPlus&quot; : &#123;\n      &quot;name&quot; : &quot;MybatisPlus&quot;,\n      &quot;elementList&quot; : [ &#123;\n        &quot;name&quot; : &quot;controller.java.vm&quot;,\n        &quot;code&quot; : &quot;##导入宏定义\\n$!&#123;define.vm&#125;\\n\\n##设置表后缀（宏定义）\\n##setTableSuffix(\\&quot;Controller\\&quot;)\\n\\n##保存文件（宏定义）\\n##save(\\&quot;/controller\\&quot;, \\&quot;Controller.java\\&quot;)\\n\\n##包路径（宏定义）\\n##setPackageSuffix(\\&quot;controller\\&quot;)\\n\\n##定义服务名\\n##set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \\&quot;Service\\&quot;))\\n\\n##定义实体对象名\\n##set($entityName = $!tool.firstLowerCase($!tableInfo.name))\\n\\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\\nimport com.baomidou.mybatisplus.extension.api.ApiController;\\nimport com.baomidou.mybatisplus.extension.api.R;\\nimport org.springframework.beans.factory.annotation.Autowired;\\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\\nimport $!&#123;tableInfo.savePackageName&#125;.pojo.$!tableInfo.name;\\nimport $!&#123;tableInfo.savePackageName&#125;.service.$!&#123;tableInfo.name&#125;Service;\\nimport org.springframework.web.bind.annotation.*;\\n\\nimport java.io.Serializable;\\nimport java.util.List;\\n\\n##表注释（宏定义）\\n##tableComment(\\&quot;表控制层\\&quot;)\\n@RestController\\n@RequestMapping(\\&quot;/$!tool.firstLowerCase($!tableInfo.name)\\&quot;)\\npublic class $!&#123;tableName&#125; &#123;\\n    /**\\n     * 服务对象\\n     */\\n    @Autowired\\n    private $!&#123;tableInfo.name&#125;Service $!&#123;serviceName&#125;;\\n\\n    \\n&#125;\\n&quot;\n      &#125;, &#123;\n        &quot;name&quot; : &quot;entity.java.vm&quot;,\n        &quot;code&quot; : &quot;##导入宏定义\\n$!&#123;define.vm&#125;\\n\\n##保存文件（宏定义）\\n##save(\\&quot;/pojo\\&quot;, \\&quot;.java\\&quot;)\\n\\n##包路径（宏定义）\\n##setPackageSuffix(\\&quot;pojo\\&quot;)\\n\\n##自动导入包（全局变量）\\n$!&#123;autoImport.vm&#125;\\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\\nimport java.io.Serializable;\\nimport lombok.*;\\nimport com.baomidou.mybatisplus.annotation.TableName;\\nimport com.baomidou.mybatisplus.annotation.TableField;\\n\\n##表注释（宏定义）\\n##tableComment(\\&quot;表实体类\\&quot;)\\n\\n@AllArgsConstructor\\n@NoArgsConstructor\\n@Data\\n@ToString\\n@TableName(value = \\&quot;$tool.hump2Underline($!&#123;tableInfo.name&#125;)\\&quot;)\\npublic class $!&#123;tableInfo.name&#125; implements Serializable &#123;\\n##foreach($column in $tableInfo.fullColumn)\\n    /**\\n    * ##if($&#123;column.comment&#125;)$&#123;column.comment&#125;##end\\n    \\n    */ \\n    @TableField(\\&quot;$tool.hump2Underline($!&#123;column.name&#125;)\\&quot;)\\n    private $!&#123;tool.getClsNameByFullName($column.type)&#125; $!&#123;column.name&#125;;\\n    \\n##end\\n\\n&#125;\\n&quot;\n      &#125;, &#123;\n        &quot;name&quot; : &quot;service.java.vm&quot;,\n        &quot;code&quot; : &quot;##导入宏定义\\n$!&#123;define.vm&#125;\\n\\n##设置表后缀（宏定义）\\n##setTableSuffix(\\&quot;Service\\&quot;)\\n\\n##保存文件（宏定义）\\n##save(\\&quot;/service\\&quot;, \\&quot;Service.java\\&quot;)\\n\\n##包路径（宏定义）\\n##setPackageSuffix(\\&quot;service\\&quot;)\\n\\nimport com.baomidou.mybatisplus.extension.service.IService;\\nimport $!&#123;tableInfo.savePackageName&#125;.pojo.$!tableInfo.name;\\n\\n##表注释（宏定义）\\n##tableComment(\\&quot;表服务接口\\&quot;)\\npublic interface $!&#123;tableName&#125; extends IService&lt;$!tableInfo.name&gt; &#123;\\n\\n&#125;\\n&quot;\n      &#125;, &#123;\n        &quot;name&quot; : &quot;serviceImpl.java.vm&quot;,\n        &quot;code&quot; : &quot;##导入宏定义\\n$!&#123;define.vm&#125;\\n\\n##设置表后缀（宏定义）\\n##setTableSuffix(\\&quot;ServiceImpl\\&quot;)\\n\\n##保存文件（宏定义）\\n##save(\\&quot;/service/impl\\&quot;, \\&quot;ServiceImpl.java\\&quot;)\\n\\n##包路径（宏定义）\\n##setPackageSuffix(\\&quot;service.impl\\&quot;)\\n\\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\\nimport $!&#123;tableInfo.savePackageName&#125;.mapper.$!&#123;tableInfo.name&#125;Mapper;\\nimport $!&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;;\\nimport $!&#123;tableInfo.savePackageName&#125;.service.$!&#123;tableInfo.name&#125;Service;\\nimport org.springframework.stereotype.Service;\\n\\n##表注释（宏定义）\\n##tableComment(\\&quot;表服务实现类\\&quot;)\\n@Service(\\&quot;$!tool.firstLowerCase($tableInfo.name)Service\\&quot;)\\npublic class $!&#123;tableName&#125; extends ServiceImpl&lt;$!&#123;tableInfo.name&#125;Mapper, $!&#123;tableInfo.name&#125;&gt; implements $!&#123;tableInfo.name&#125;Service &#123;\\n    @Autowired\\n    private $!&#123;tableInfo.name&#125;Mapper $tool.firstLowerCase($!&#123;tableInfo.name&#125;)Mapper;\\n    \\n    \\n    \\n&#125;\\n&quot;\n      &#125;, &#123;\n        &quot;name&quot; : &quot;mapper.java.vm&quot;,\n        &quot;code&quot; : &quot;##导入宏定义\\n$!&#123;define.vm&#125;\\n\\n##设置表后缀（宏定义）\\n##setTableSuffix(\\&quot;Mapper\\&quot;)\\n\\n##保存文件（宏定义）\\n##save(\\&quot;/mapper\\&quot;, \\&quot;Mapper.java\\&quot;)\\n\\n##包路径（宏定义）\\n##setPackageSuffix(\\&quot;mapper\\&quot;)\\n\\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\\nimport $!&#123;tableInfo.savePackageName&#125;.pojo.$!tableInfo.name;\\nimport org.apache.ibatis.annotations.Mapper;\\n\\n##表注释（宏定义）\\n##tableComment(\\&quot;表数据库访问层\\&quot;)\\n\\n@Mapper\\npublic interface $!&#123;tableName&#125; extends BaseMapper&lt;$!tableInfo.name&gt; &#123;\\n\\n&#125;\\n&quot;\n      &#125;, &#123;\n        &quot;name&quot; : &quot;mapper.xml.vm&quot;,\n        &quot;code&quot; : &quot;##引入mybatis支持\\n$!&#123;mybatisSupport.vm&#125;\\n\\n##设置保存名称与保存位置\\n$!callback.setFileName($tool.append($!&#123;tableInfo.name&#125;, \\&quot;Mapper.xml\\&quot;))\\n$!callback.setSavePath($tool.append($modulePath, \\&quot;/src/main/resources/mapper\\&quot;))\\n\\n##拿到主键\\n##if(!$tableInfo.pkColumn.isEmpty())\\n    ##set($pk = $tableInfo.pkColumn.get(0))\\n##end\\n## 拿到全索引列，用‘，’间隔\\n##set($sqlCloumn=\\&quot;##foreach($column in $tableInfo.fullColumn)$tool.hump2Underline($!column.name)##if($!foreach.hasNext) ,##end ##end\\&quot;)\\n\\n&lt;?xml version=\\&quot;1.0\\&quot; encoding=\\&quot;UTF-8\\&quot;?&gt;\\n&lt;!DOCTYPE mapper PUBLIC \\&quot;-//mybatis.org//DTD Mapper 3.0//EN\\&quot; \\&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd\\&quot;&gt;\\n&lt;mapper namespace=\\&quot;$&#123;tableInfo.savePackageName&#125;.mapper.$!&#123;tableInfo.name&#125;Mapper\\&quot;&gt;\\n\\n    &lt;sql id=\\&quot;All$!&#123;tableInfo.name&#125;Column\\&quot;&gt;$sqlCloumn&lt;/sql&gt;   \\n    &lt;resultMap type=\\&quot;$&#123;tableInfo.savePackageName&#125;.pojo.$!&#123;tableInfo.name&#125;\\&quot; id=\\&quot;$!&#123;tableInfo.name&#125;Map\\&quot;&gt;\\n##foreach($column in $tableInfo.fullColumn)\\n        &lt;result property=\\&quot;$!column.name\\&quot; column=\\&quot;$!column.obj.name\\&quot; /&gt;\\n##end\\n    &lt;/resultMap&gt;\\n    \\n    \\n\\n&lt;/mapper&gt;\\n&quot;\n      &#125; ]\n    &#125;\n  &#125;,\n  &quot;columnConfig&quot; : &#123; &#125;,\n  &quot;globalConfig&quot; : &#123; &#125;\n&#125;\n</code></pre>\n<h5 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h5><p>一定要选择你的Module、包路径、Path，因为它们分别对应的是你模板中的三个参数modulePath、tableInfo.savePackageName、我们所有的Save都是以Path的路径为根路径</p>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220823215323871-1665745616515.png\" class=\"\">\n\n\n<h4 id=\"未完成\"><a href=\"#未完成\" class=\"headerlink\" title=\"未完成\"></a>未完成</h4><h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><h4 id=\"Service窗口\"><a href=\"#Service窗口\" class=\"headerlink\" title=\"Service窗口\"></a>Service窗口</h4><blockquote>\n<p>在微服务项目中，我们在创建多个模块后，想要启动特定的几个寻找起来非常麻烦我们这个时候就可以通过Service窗口快速找到我们的启动类</p>\n<img data-src=\"/2022/10/15/IDEA-tool/image-20220724161332641.png\" class=\"\" title=\"image-20220724161332641\">\n</blockquote>\n<h5 id=\"具体步骤-1\"><a href=\"#具体步骤-1\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h5><p>1：开启idea，右下角会显示下图</p>\n<img data-src=\"/2022/10/15/IDEA-tool/726e3c50b51442839ca357fa23bef649.png\" class=\"\">\n\n\n<p>2、点击Show run configurations in Services</p>\n<img data-src=\"/2022/10/15/IDEA-tool/f90f6ac3965943209d1761bc12e3bd03.png\" class=\"\">\n\n\n<p>最终效果图如下：</p>\n<img data-src=\"/2022/10/15/IDEA-tool/5649373054b74c3da30cc18febb3a01c.png\" class=\"\">\n\n\n<h4 id=\"未完成-1\"><a href=\"#未完成-1\" class=\"headerlink\" title=\"未完成\"></a>未完成</h4>",
            "tags": []
        }
    ]
}