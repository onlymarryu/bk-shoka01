{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"基础使用\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/14/bkBasic/Docsify/",
            "url": "http://example.com/2022/10/14/bkBasic/Docsify/",
            "title": "MySQL基础",
            "date_published": "2022-10-14T09:50:50.721Z",
            "content_html": "<h1 id=\"Docsify搭建\"><a href=\"#Docsify搭建\" class=\"headerlink\" title=\"Docsify搭建\"></a>Docsify搭建</h1><p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuLw==\">https://docsify.js.org/#/zh-cn/</span></p>\n<p>前提</p>\n<blockquote>\n<p>要配置好 <code>nodeJs</code> 、<code>npm</code></p>\n</blockquote>\n<h2 id=\"安装-Docsify-插件\"><a href=\"#安装-Docsify-插件\" class=\"headerlink\" title=\"安装 Docsify 插件\"></a>安装 Docsify 插件</h2><blockquote>\n<p>自己创建一个要下载到本地的文件夹，然后在这里直接利用命令下载</p>\n</blockquote>\n<p>推荐全局安装 <code>docsify-cli</code> 工具，可以方便地创建及在本地预览生成的文档。</p>\n<pre><code class=\"sh\">npm i docsify-cli -g\n</code></pre>\n<p>​\t下载完成之后，进入 <code>./node_modules/.bin</code> 使用终端查看安装是否成功 </p>\n<pre><code class=\"sh\">docsify -v\n</code></pre>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507180321976.png\" alt=\"image-20220507180321976\"></p>\n<p>出现版本号，表明安装成功，自己再将该路径定义为 <strong>系统环境变量</strong></p>\n<h2 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL3F1aWNrc3RhcnQ/aWQ9JUU1JTg4JTlEJUU1JUE3JThCJUU1JThDJTk2JUU5JUExJUI5JUU3JTlCJUFF\">初始化项目</span></h2><p>如果想在项目的 <code>./docs</code> 目录里写文档，直接通过 <code>init</code> 初始化项目。</p>\n<pre><code class=\"bash\"># init 初始化 + 初始化文件\ndocsify init ./docs\n</code></pre>\n<p>初始化成功：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507180556746.png\" alt=\"image-20220507180556746\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507180639225.png\" alt=\"image-20220507180639225\"></p>\n<h2 id=\"开始写文档\"><a href=\"#开始写文档\" class=\"headerlink\" title=\"开始写文档\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL3F1aWNrc3RhcnQ/aWQ9JUU1JUJDJTgwJUU1JUE3JThCJUU1JTg2JTk5JUU2JTk2JTg3JUU2JUExJUEz\">开始写文档</span></h2><p>初始化成功后，可以看到 <code>./docs</code> 目录下创建的几个文件</p>\n<ul>\n<li><code>index.html</code> 入口文件</li>\n<li><code>README.md</code> 会做为主页内容渲染</li>\n<li><code>.nojekyll</code> 用于阻止 GitHub Pages 忽略掉下划线开头的文件</li>\n</ul>\n<p>直接编辑 <code>docs/README.md</code> 就能更新文档内容，当然也可以<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL21vcmUtcGFnZXM=\">添加更多页面</span>。</p>\n<h2 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL3F1aWNrc3RhcnQ/aWQ9JUU2JTlDJUFDJUU1JTlDJUIwJUU5JUEyJTg0JUU4JUE3JTg4\">本地预览</span></h2><p>​\t通过运行 <code>docsify serve</code> 启动一个本地服务器，可以方便地实时预览效果。</p>\n<pre><code class=\"bash\">docsify serve docs\n</code></pre>\n<p>​\t</p>\n<p>​\t<strong>默认访问地址：</strong>   <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMDAwLw==\">http://localhost:3000</span> 。</p>\n<p>用 <code>IDE</code> 有可能遇到的问题。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507182733021.png\" alt=\"image-20220507182733021\"></p>\n<p>解决办法：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JraG9sZS9hcnRpY2xlL2RldGFpbHMvMTI0NjM2OTE2\">https://blog.csdn.net/Bkhole/article/details/124636916</span></p>\n<p>访问结果：</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507183235754.png\" alt=\"image-20220507183235754\"></p>\n<p>和 <code>README.md</code> 文件内容一致。</p>\n<blockquote>\n<p>我们在开发的时候 所有内容都是动态更新的</p>\n</blockquote>\n<h2 id=\"功能开发\"><a href=\"#功能开发\" class=\"headerlink\" title=\"功能开发\"></a>功能开发</h2><blockquote>\n<p>主要内容还是参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuLw==\">官网 </span>，这里只做简单描述。</p>\n</blockquote>\n<h3 id=\"分页\"><a href=\"#分页\" class=\"headerlink\" title=\"分页\"></a>分页</h3><p>​\t如果需要创建多个页面，或者需要多级路由的网站，在 docsify 里也能很容易的实现。例如创建一个 <code>guide.md</code> 文件，那么对应的路由就是 <code>/#/guide</code>。</p>\n<p>假设你的目录结构如下：</p>\n<pre><code class=\"text\">.\n└── docs\n    ├── README.md\n    ├── guide.md\n    └── zh-cn\n        ├── README.md\n        └── guide.md\n</code></pre>\n<p>那么对应的访问页面将是</p>\n<pre><code class=\"text\">docs/README.md        =&gt; http://domain.com\ndocs/guide.md         =&gt; http://domain.com/guide\ndocs/zh-cn/README.md  =&gt; http://domain.com/zh-cn/\ndocs/zh-cn/guide.md   =&gt; http://domain.com/zh-cn/guide\n</code></pre>\n<h3 id=\"定制侧边栏\"><a href=\"#定制侧边栏\" class=\"headerlink\" title=\"定制侧边栏\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL21vcmUtcGFnZXM/aWQ9JUU1JUFFJTlBJUU1JTg4JUI2JUU0JUJFJUE3JUU4JUJFJUI5JUU2JUEwJThG\">定制侧边栏</span></h3><p>为了获得侧边栏，您需要创建自己的 <code>_sidebar.md</code>，你也可以自定义加载的文件名。默认情况下侧边栏会通过 Markdown 文件自动生成，效果如当前的文档的侧边栏。</p>\n<p>首先配置 <code>loadSidebar</code> 选项，具体配置规则见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvbmZpZ3VyYXRpb24/aWQ9bG9hZHNpZGViYXI=\">配置项#loadSidebar</span>。</p>\n<pre><code class=\"html\">&lt;!-- index.html --&gt;\n\n&lt;script&gt;\n  window.$docsify = &#123;\n      &lt;!-- 打开配置 --&gt;\n    loadSidebar: true\n  &#125;\n&lt;/script&gt;\n&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>接着创建 <code>_sidebar.md</code> 文件，内容如下</p>\n<pre><code class=\"markdown\">&lt;!-- docs/_sidebar.md --&gt;\n\n* [首页](zh-cn/)\n* [指南](zh-cn/guide)\n</code></pre>\n<p>注：</p>\n<blockquote>\n<p>需要在 <code>./docs</code> 目录创建 <code>.nojekyll</code> 命名的空文件，阻止 GitHub Pages 忽略命名是下划线开头的文件。</p>\n</blockquote>\n<p>###<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL21vcmUtcGFnZXM/aWQ9JUU2JTk4JUJFJUU3JUE0JUJBJUU3JTlCJUFFJUU1JUJEJTk1\">显示目录</span></p>\n<p>自定义侧边栏同时也可以开启目录功能。设置 <code>subMaxLevel</code> 配置项，具体介绍见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvbmZpZ3VyYXRpb24/aWQ9c3VibWF4bGV2ZWw=\">配置项#subMaxLevel</span>。</p>\n<pre><code class=\"html\">&lt;!-- index.html --&gt;\n\n&lt;script&gt;\n  window.$docsify = &#123;\n    loadSidebar: true,\n    subMaxLevel: 2\n  &#125;\n&lt;/script&gt;\n&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<h3 id=\"自定义导航栏\"><a href=\"#自定义导航栏\" class=\"headerlink\" title=\"自定义导航栏\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2N1c3RvbS1uYXZiYXI/aWQ9JUU4JTg3JUFBJUU1JUFFJTlBJUU0JUI5JTg5JUU1JUFGJUJDJUU4JTg4JUFBJUU2JUEwJThG\">自定义导航栏</span></h3><h4 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2N1c3RvbS1uYXZiYXI/aWQ9aHRtbA==\">HTML</span></h4><p>如果你需要定制导航栏，可以用 HTML 创建一个导航栏。</p>\n<p>注意：文档的链接都要以 <code>#/</code> 开头。</p>\n<pre><code class=\"html\">&lt;!-- index.html --&gt;\n\n&lt;body&gt;\n  &lt;nav&gt;\n    &lt;a href=&quot;#/&quot;&gt;EN&lt;/a&gt;\n    &lt;a href=&quot;#/zh-cn/&quot;&gt;中文&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;\n&lt;/body&gt;\n</code></pre>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2N1c3RvbS1uYXZiYXI/aWQ9JUU5JTg1JThEJUU3JUJEJUFFJUU2JTk2JTg3JUU0JUJCJUI2\">配置文件</span></h3><p>那我们可以通过 Markdown 文件来配置导航。首先配置 <code>loadNavbar</code>，默认加载的文件为 <code>_navbar.md</code>。具体配置规则见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL2NvbmZpZ3VyYXRpb24/aWQ9bG9hZG5hdmJhcg==\">配置项#loadNavbar</span>。</p>\n<pre><code class=\"html\">&lt;!-- index.html --&gt;\n\n&lt;script&gt;\n  window.$docsify = &#123;\n    loadNavbar: true\n  &#125;\n&lt;/script&gt;\n&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&quot;&gt;&lt;/script&gt;\n&lt;!-- _navbar.md --&gt;\n\n* [En](/)\n* [中文](/zh-cn/)\n</code></pre>\n<p><strong>注：</strong></p>\n<blockquote>\n<p>你需要在 <code>./docs</code> 目录下创建一个 <code>.nojekyll</code> 文件，以防止 GitHub Pages 忽略下划线开头的文件。</p>\n</blockquote>\n<p><code>_navbar.md</code> 加载逻辑和 <code>sidebar</code> 文件一致，从每层目录下获取。例如当前路由为 <code>/zh-cn/custom-navbar</code> 那么是从 <code>/zh-cn/_navbar.md</code> 获取导航栏。</p>\n<h3 id=\"封面\"><a href=\"#封面\" class=\"headerlink\" title=\"封面\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvdmVyP2lkPSVFNSVCMCU4MSVFOSU5RCVBMg==\">封面</span></h3><p>通过设置 <code>coverpage</code> 参数，可以开启渲染封面的功能。具体用法见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL2NvbmZpZ3VyYXRpb24/aWQ9Y292ZXJwYWdl\">配置项#coverpage</span>。</p>\n<h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvdmVyP2lkPSVFNSU5RiVCQSVFNiU5QyVBQyVFNyU5NCVBOCVFNiVCMyU5NQ==\">基本用法</span></h4><p>封面的生成同样是从 markdown 文件渲染来的。开启渲染封面功能后在文档根目录创建 <code>_coverpage.md</code> 文件。渲染效果如本文档。</p>\n<p><em>index.html</em></p>\n<pre><code class=\"html\">&lt;!-- index.html --&gt;\n\n&lt;script&gt;\n  window.$docsify = &#123;\n    coverpage: true\n  &#125;\n&lt;/script&gt;\n&lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&quot;&gt;&lt;/script&gt;\n&lt;!-- techPage.md --&gt;\n\n&#123;% asset_img icon.svg logo %&#125;\n\n# docsify &lt;small&gt;3.5&lt;/small&gt;\n\n&gt; 一个神奇的文档网站生成器。\n\n- 简单、轻便 (压缩后 ~21kB)\n- 无需生成 html 文件\n- 众多主题\n\n[GitHub](https://github.com/docsifyjs/docsify/)\n[Get Started](#docsify)\n</code></pre>\n<h4 id=\"自定义背景\"><a href=\"#自定义背景\" class=\"headerlink\" title=\"自定义背景\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvdmVyP2lkPSVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OSVFOCU4MyU4QyVFNiU5OSVBRg==\">自定义背景</span></h4><p>目前的背景是随机生成的渐变色，我们自定义背景色或者背景图。在文档末尾用添加图片的 Markdown 语法设置背景。</p>\n<pre><code>_coverpage.md\n&lt;!-- _coverpage.md --&gt;\n\n# docsify &lt;small&gt;3.5&lt;/small&gt;\n\n[GitHub](https://github.com/docsifyjs/docsify/)\n[Get Started](#quick-start)\n\n&lt;!-- 背景图片 --&gt;\n\n&#123;% asset_img bg.png  %&#125;\n\n&lt;!-- 背景色 --&gt;\n\n![color](#f0f0f0)\n</code></pre>\n<h4 id=\"封面作为首页\"><a href=\"#封面作为首页\" class=\"headerlink\" title=\"封面作为首页\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvdmVyP2lkPSVFNSVCMCU4MSVFOSU5RCVBMiVFNCVCRCU5QyVFNCVCOCVCQSVFOSVBNiU5NiVFOSVBMSVCNQ==\">封面作为首页</span></h4><p>通常封面和首页是同时出现的，当然你也是当封面独立出来通过设置<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvbmZpZ3VyYXRpb24/aWQ9b25seWNvdmVy\">onlyCover 选项</span>。</p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><p>和 GitBook 生成的文档一样，我们可以直接把文档网站部署到 GitHub Pages 或者 VPS 上。</p>\n<h4 id=\"GitHub-Pages\"><a href=\"#GitHub-Pages\" class=\"headerlink\" title=\"GitHub Pages\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2RlcGxveT9pZD1naXRodWItcGFnZXM=\">GitHub Pages</span></h4><p>GitHub Pages 支持从三个地方读取文件</p>\n<ul>\n<li><code>docs/</code> 目录</li>\n<li>master 分支</li>\n<li>gh-pages 分支</li>\n</ul>\n<p>我们推荐直接将文档放在 <code>docs/</code> 目录下，在设置页面开启 <strong>GitHub Pages</strong> 功能并选择 <code>master branch /docs folder</code> 选项。</p>\n<h4 id=\"配置过程\"><a href=\"#配置过程\" class=\"headerlink\" title=\"配置过程\"></a>配置过程</h4><p>1、创建一个GitHub仓库</p>\n<blockquote>\n<p>要求：</p>\n<p>1、仓库名格式必须符合：github_username.github.io</p>\n</blockquote>\n<p>2、配置 GithubPage</p>\n<blockquote>\n<p>随便选一个主题，毕竟我们也不用</p>\n</blockquote>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185116977.png\" alt=\"image-20220507185116977\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185152734.png\" alt=\"image-20220507185152734\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185320819.png\" alt=\"image-20220507185320819\"></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185336250.png\" alt=\"image-20220507185336250\"></p>\n<p>3、上传项目</p>\n<blockquote>\n<p>直接将我们的项目上传到这个库中即可。</p>\n</blockquote>\n<p>–考虑到是保姆级教程我们将上传步骤也写一下</p>\n<p>（1）首先我们将仓库中的信息拉取下来</p>\n<p>​\t这是第二步配置结束之后会产生<code>GitHubPage</code>的配置文件</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185418951.png\" alt=\"image-20220507185418951\"></p>\n<p>（2）将配置文件与我们的docs文件一起重新提交到仓库中</p>\n<pre><code class=\"git\">git add xx\n\ngit commit xx -m&quot;注释&quot;\n\ngit push xx 仓库地址 分支\n</code></pre>\n<p>我这里直接使用工具 <code>Sourcetree</code> 提交。</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507190045839.png\" alt=\"image-20220507190045839\"></p>\n<p>4、上传成功，部署成功</p>\n<p>直接访问：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbmx5bWFycnl1LmdpdGh1Yi5pby8jLw==\">https://onlymarryu.github.io/#/</span></p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507184626485.png\" alt=\"image-20220507184626485\"></p>\n<blockquote>\n<p>​\t如果刷新不是想要的结果，只要确认之前所有本地测试结果正取，只是部署之后结果不对，这就是部署时间的问题，我们等一会刷新即可。</p>\n</blockquote>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "博客",
                "环境搭建"
            ]
        },
        {
            "id": "http://example.com/2022/10/06/bkBasic/hexo/",
            "url": "http://example.com/2022/10/06/bkBasic/hexo/",
            "title": "hexo",
            "date_published": "2022-10-06T06:50:57.000Z",
            "content_html": "<hr>\n<p>title: hexo<br>date: 2022-10-06 14:53:52<br>categories:<br>    - 基础使用<br>tags:<br>    - 环境搭建<br>    - 博客</p>\n<hr>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p><code>hexo</code>是一个基于nodejs的静态博客网站生成器，作者是来自台湾的<code>Tommy Chen</code>，为许多技术博客的博主所青睐，主要有如下的一些优点：</p>\n<ul>\n<li><p>支持Markdown语法，编辑简单，排版优美；</p>\n</li>\n<li><p>能够快速生成静态html文件；</p>\n</li>\n<li><p>部署容易，接口简单； 兼容于各大主流操作系统；</p>\n</li>\n<li><p>社区主题、插件很多，遇到问题的时候能查到的参考材料也很多。</p>\n</li>\n</ul>\n<p>Hexo官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">https://hexo.io/zh-cn/docs/</span></p>\n<p>Gitee Pages：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vaGVscC9hcnRpY2xlcy80MTM2I2FydGljbGUtaGVhZGVyMA==\">https://gitee.com/help/articles/4136#article-header0</span></p>\n<h1 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h1><p>搭建hexo首先需要有nodejs的环境，可以从官网直接下载。</p>\n<img data-src=\"/2022/10/06/bkBasic/hexo/2xKvaPTDoyZcFbp.png\" class=\"\" title=\"nodejs\">\n\n<h1 id=\"生成博客\"><a href=\"#生成博客\" class=\"headerlink\" title=\"生成博客\"></a>生成博客</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>有了npm包管理软件，安装hexo就很方便了，只需要一行命令：</p>\n<pre><code class=\"shell\">npm install node # homebrew安装nodejs\n</code></pre>\n<p>其中-g参数表示全局安装，没有这个参数就只在当前目录下安装，建议全局安装。</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>运行命令：</p>\n<pre><code class=\"shell\">hexo init\n</code></pre>\n<pre><code class=\"shell\">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git\nINFO  Install dependencies\n# 一些可能的中间信息\nINFO  Start blogging with Hexo!\n</code></pre>\n<p>然后进入博客目录：</p>\n<blockquote>\n<p> cd “博客目录”</p>\n</blockquote>\n<p>安装博客需要的其他支持：</p>\n<pre><code class=\"sh\">npm install # 安装的依赖项在package.json文件的dependencies字段中可以看到\n</code></pre>\n<h2 id=\"博客项目目录结构介绍\"><a href=\"#博客项目目录结构介绍\" class=\"headerlink\" title=\"博客项目目录结构介绍\"></a>博客项目目录结构介绍</h2><p>查看目录结构：</p>\n<pre><code class=\"sh\">tree -L 1 \n</code></pre>\n<p>结果如下：</p>\n<blockquote>\n<p>.<br>├── _config.landscape.yml<br>├── _config.yml<br>├── node_modules<br>├── package-lock.json<br>├── package.json<br>├── scaffolds<br>├── source<br>└── themes</p>\n</blockquote>\n<p>各部分的含义：</p>\n<ul>\n<li>`_config.yml &#96;<ul>\n<li>为全局配置文件，网站的很多信息都在这里配置，比如说网站名称，副标题，描述，作者，语言，主题等等。具体可以参考官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbi5odG1sJUUzJTgwJTgy\">https://hexo.io/zh-cn/docs/configuration.html。</span></li>\n</ul>\n</li>\n<li><code>_scaffolds</code><ul>\n<li>骨架文件，是生成新页面或者新博客的模版。可以根据需求编辑，当<code>hexo</code>生成新博客的时候，会用这里面的模版进行初始化。</li>\n</ul>\n</li>\n<li><code>_source</code><ul>\n<li>这个文件夹下面存放的是网站的<code>markdown</code>源文件，里面有一个<code>_post</code>文件夹，所有的<code>.md</code>博客文件都会存放在这个文件夹下。现在，你应该能看到里面有一个<code>hello-world.md</code>文件。_</li>\n</ul>\n</li>\n<li><code>_themes</code><ul>\n<li>网站主题目录，<code>hexo</code>有非常丰富的主题支持，主题目录会存放在这个目录下面。</li>\n<li>我们后续会以默认主题来演示，更多的主题参见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=\">https://hexo.io/themes/</span></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"生成新文章\"><a href=\"#生成新文章\" class=\"headerlink\" title=\"生成新文章\"></a>生成新文章</h2><pre><code class=\"sh\">hexo new post &quot;test&quot; # 会在 source/_posts/ 目录下生成文件 ‘test.md’，打开编辑\nhexo generate        # 生成静态HTML文件到 /public 文件夹中\nhexo server          # 本地运行server服务预览，打开 http://localhost:4000 即可预览你的博客\n</code></pre>\n<p><strong>本地预览效果：</strong></p>\n<img data-src=\"/2022/10/06/bkBasic/hexo/image-20221006120456734.png\" class=\"\" title=\"image-20221006120456734\">\n\n<p>这是hexo的默认主题，更多的主题可以从官网下载。</p>\n<p>更详细的hexo命令可以查看文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29tbWFuZHM=\">https://hexo.io/zh-cn/docs/commands</span></p>\n<h1 id=\"Hexo配置并部署\"><a href=\"#Hexo配置并部署\" class=\"headerlink\" title=\"Hexo配置并部署\"></a>Hexo配置并部署</h1><blockquote>\n<p>提前对要提交的仓库配置ssh</p>\n</blockquote>\n<h2 id=\"1-安装部署工具\"><a href=\"#1-安装部署工具\" class=\"headerlink\" title=\"1.安装部署工具\"></a>1.安装部署工具</h2><pre><code class=\"sh\">npm install hexo-deployer-git --save\n</code></pre>\n<h2 id=\"2-配置部署信息\"><a href=\"#2-配置部署信息\" class=\"headerlink\" title=\"2.配置部署信息\"></a>2.配置部署信息</h2><p>站点配置文件_config.yml</p>\n<pre><code class=\"yml\">deploy:\n  type: git\n  repo: &lt;repository url&gt; # 输入你的仓库地址\n  branch: [branch] # 输入分支\n  token:   #token\n</code></pre>\n<blockquote>\n<p>deploy:</p>\n<p> type: git</p>\n<p> repo: <span class=\"exturl\" data-url=\"bWFpbHRvOiYjeDY3OyYjMTA1OyYjMTE2OyYjeDQwOyYjMTAzOyYjMTA1OyYjeDc0OyYjeDY1OyYjMTAxOyYjNDY7JiN4NjM7JiMxMTE7JiMxMDk7\">&#x67;&#105;&#116;&#x40;&#103;&#105;&#x74;&#x65;&#101;&#46;&#x63;&#111;&#109;</span>:cysheng&#x2F;cysheng.git # 输入你的仓库地址</p>\n<p> branch: master # 输入分支</p>\n</blockquote>\n<h2 id=\"3-部署\"><a href=\"#3-部署\" class=\"headerlink\" title=\"3.部署\"></a>3.部署</h2><pre><code class=\"sh\"> hexo clean  \n hexo g  \n hexo d \n</code></pre>\n<ul>\n<li><p>hexo clean</p>\n<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p>\n</li>\n<li><p>hexo g</p>\n<p>hexo解析站点文件夹，生成一个public文件夹（只包含浏览器可以解析的html、css、js），也就是我们需要部署的文件夹。</p>\n</li>\n<li><p>hexo d</p>\n<p>部署，即将我们的public文件夹推送到我们配置的仓库</p>\n</li>\n</ul>\n<h2 id=\"4-开启Gitee-Pages服务\"><a href=\"#4-开启Gitee-Pages服务\" class=\"headerlink\" title=\"4.开启Gitee Pages服务\"></a>4.开启Gitee Pages服务</h2><p>找到新创建的仓库-&gt;【服务】-&gt;【Gitee Pages】  <img data-src=\"/2022/10/06/bkBasic/hexo/image-20221006120734926.png\" class=\"\" title=\"hexo&#x2F;image-20221006120734926\"></p>\n<p>如图，选择部署分支，部署目录</p>\n<ul>\n<li><p>部署分支，与本地hexo配置一致</p>\n</li>\n<li><p>部署目录，不填即整个仓库</p>\n</li>\n<li><p>强制使用https</p>\n<p>一个是进行加密，还有一个是我在用next主题时使用http访问会有跨域问题导致图标显示不出来</p>\n</li>\n<li><p>点击启动</p>\n</li>\n<li><p>访问给出的网站地址（以我的为例：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jeXNoZW5nLmdpdGVlLmlvKS8=\">https://cysheng.gitee.io）</span></p>\n</li>\n</ul>\n<h1 id=\"hexo-框架常用的指令：\"><a href=\"#hexo-框架常用的指令：\" class=\"headerlink\" title=\"hexo 框架常用的指令：\"></a>hexo 框架常用的指令：</h1><table>\n<thead>\n<tr>\n<th align=\"left\">指令</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>hexo clean &amp;&amp; hexo g</code></td>\n<td align=\"left\">清除本地项目并重新生成 （重新部署时使用）</td>\n</tr>\n<tr>\n<td align=\"left\"><code>hexo g</code></td>\n<td align=\"left\">重新生成</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Hexo s</code></td>\n<td align=\"left\">开启本地预览</td>\n</tr>\n<tr>\n<td align=\"left\"><code>Hexo d</code></td>\n<td align=\"left\">推送到github</td>\n</tr>\n</tbody></table>\n<h1 id=\"功能设置\"><a href=\"#功能设置\" class=\"headerlink\" title=\"功能设置\"></a>功能设置</h1><h2 id=\"标题和分类\"><a href=\"#标题和分类\" class=\"headerlink\" title=\"标题和分类\"></a>标题和分类</h2><p>在文章开头我们可以设置 FontMatter，例如</p>\n<pre><code class=\"yml\">---\ntitle: jQuery对表单的操作及更多应用 # 标题\ndate: 2022-01-07 22:53:43 # 创建时间\ncategories: # 分类，级别递减\n- web前端 # 一级分类\n- web前端2 # 二级分类\ntags: # 标签，没有级别\n    - a1\n    - a2\n---\n</code></pre>\n<p>​\t为了简化我们的操作，所以我们可以以设置模板，在 <code>/scaffolds</code> 下的 <code>draft.md</code> 、<code>page.md</code> 、 <code>post.md</code>  我们用来设置模板，例如我们最常使用的<code>post</code> 目录下的文件，所以我们配置一下<code>post.md</code></p>\n<pre><code class=\"yaml\">---\ntitle: &#123;&#123; title &#125;&#125;\ndate: &#123;&#123; date &#125;&#125;\ncomments:\ntags:\n---\n</code></pre>\n<p><strong>问题</strong></p>\n<p>如果我们在没有找到 tags 、categories 、link 、about文件时，我们手动创建</p>\n<pre><code class=\"sh\">hexo new page tags\nhexo new page categories \nhexo new page link \nhexo new page about\n</code></pre>\n<p>成功后，提示</p>\n<pre><code class=\"sh\">INFO  Created: ~/Documents/blog/source/xxx/index.md\n</code></pre>\n<p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p>\n<pre><code class=\"yaml\">---\ntitle: 文章分类\ndate: 2022-01-07 22:53:43\ntype: &quot;categories&quot; # 哪个文件就是那个类型\nlayout: &quot;categories&quot; # 哪个文件就是那个类型\n---\n</code></pre>\n<p>最后清除缓存，重新启动就行了 </p>\n<pre><code class=\"sh\">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s\n</code></pre>\n<h2 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h2><h3 id=\"1、注册账号\"><a href=\"#1、注册账号\" class=\"headerlink\" title=\"1、注册账号\"></a>1、注册账号</h3><p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20vdXNlcnMvc2lnbl9pbg==\">https://www.algolia.com/users/sign_in</span></p>\n<h3 id=\"2、之后在左侧导航栏中找到Search\"><a href=\"#2、之后在左侧导航栏中找到Search\" class=\"headerlink\" title=\"2、之后在左侧导航栏中找到Search\"></a>2、之后在左侧导航栏中找到Search</h3><img data-src=\"/2022/10/06/bkBasic/hexo/image-20221007104401652.png\" class=\"\" title=\"image-20221007104401652\">\n\n<h3 id=\"3、创建Index\"><a href=\"#3、创建Index\" class=\"headerlink\" title=\"3、创建Index\"></a>3、创建Index</h3><img data-src=\"/2022/10/06/bkBasic/hexo/image-20221007104429043.png\" class=\"\" title=\"image-20221007104429043\">\n\n<img data-src=\"/2022/10/06/bkBasic/hexo/image-20221007104449209.png\" class=\"\" title=\"image-20221007104449209\">\n\n<p><strong>随便写</strong></p>\n<h3 id=\"4、创建APPID\"><a href=\"#4、创建APPID\" class=\"headerlink\" title=\"4、创建APPID\"></a>4、创建APPID</h3><img data-src=\"/2022/10/06/bkBasic/hexo/image-20221007105625601.png\" class=\"\" title=\"image-20221007105625601\">\n\n<img data-src=\"/2022/10/06/bkBasic/hexo/image-20221007105704120.png\" class=\"\" title=\"image-20221007105704120\">\n\n<p>这两个后面有用</p>\n<img data-src=\"/2022/10/06/bkBasic/hexo/image-20221007105750168.png\" class=\"\" title=\"image-20221007105750168\">\n\n<blockquote>\n<p>Indices 是我们上面创建 index </p>\n</blockquote>\n<img data-src=\"/2022/10/06/bkBasic/hexo/20210516112405506.png\" class=\"\" title=\"在这里插入图片描述\">\n\n\n\n<h3 id=\"5、到博客根目录下安装hexo-algolia\"><a href=\"#5、到博客根目录下安装hexo-algolia\" class=\"headerlink\" title=\"5、到博客根目录下安装hexo-algolia\"></a>5、到博客根目录下安装hexo-algolia</h3><pre><code class=\"sh\">npm install hexo-algolia --save\n</code></pre>\n<h3 id=\"6、前往站点根目录打开-config-yml添加以下代码\"><a href=\"#6、前往站点根目录打开-config-yml添加以下代码\" class=\"headerlink\" title=\"6、前往站点根目录打开_config.yml添加以下代码\"></a>6、前往站点根目录打开_config.yml添加以下代码</h3><blockquote>\n<p><strong>注意：</strong>这是对全局的配置，所以是根目录的配置</p>\n</blockquote>\n<pre><code class=\"sh\">algolia:\n  appId:  &quot;***&quot;  #上面的application ID\n  apiKey:  &quot;****&quot;  # 上面的 Search-Only API Key\n  adminApiKey:  &quot;***&quot;  #上面的 Admin API Keys\n  chunkSize:  5000\n  indexName:  &quot;test001&quot; # Indices的index\n  fields: # 要搜索的词条范围\n    - title #必须配置\n    - path #必须配置\n    - categories #推荐配置\n    - content:strip:truncate,0,2000\n    - tags\n</code></pre>\n<p>例如：</p>\n<pre><code class=\"yml\">algolia:\n  appId: &quot;Z7A3XW4R2I&quot;\n  apiKey: &quot;12db1ad54372045549ef465881c17e743&quot;\n  adminApiKey: &quot;40321c7c207e7f73b63a19aa24c4761b&quot;\n  chunkSize: 5000\n  indexName: &quot;my-hexo-blog&quot;\n  fields:\n    - content:strip:truncate,0,500\n    - excerpt:strip\n    - gallery\n    - permalink\n    - photos\n    - slug\n    - tags\n    - title\n</code></pre>\n<h3 id=\"7、设置HEXO-ALGOLIA-INDEXING-KEY\"><a href=\"#7、设置HEXO-ALGOLIA-INDEXING-KEY\" class=\"headerlink\" title=\"7、设置HEXO_ALGOLIA_INDEXING_KEY\"></a>7、设置HEXO_ALGOLIA_INDEXING_KEY</h3><p>在博客根目录右击git bash</p>\n<pre><code class=\"sh\"># export HEXO_ALGOLIA_INDEXING_KEY=&quot;你刚才新创建的 APPKEY、appId、adminApiKey &quot;一个试一下 \nexport HEXO_ALGOLIA_INDEXING_KEY=&quot;******&quot; \n# 将我们的信息上川岛algolia\nhexo algolia\n</code></pre>\n<h3 id=\"8、修改主题内的-config-yml\"><a href=\"#8、修改主题内的-config-yml\" class=\"headerlink\" title=\"8、修改主题内的_config.yml\"></a>8、修改主题内的_config.yml</h3><blockquote>\n<p><strong>注意：</strong> 这是是对主题的配置</p>\n</blockquote>\n<pre><code class=\"yml\">#Algolia Search\nalgolia_search:\n  enable: true\n  hits:\n    per_page: 6\n  labels:\n    input_placeholder: Search for Posts !\n    hits_empty: &#39;我们没有找到任何搜索结果：$&#123;query&#125;&#39;\n    hits_stats: &#39;找到约$&#123;hits&#125;条结果 (用时$&#123;time&#125;ms)&#39;\n\n# local searach\nlocal_sreach:\n  enable : false\n</code></pre>\n<h3 id=\"9、启动即可\"><a href=\"#9、启动即可\" class=\"headerlink\" title=\"9、启动即可\"></a>9、启动即可</h3><pre><code class=\"sh\">hexo s\n</code></pre>\n<h3 id=\"10、测试\"><a href=\"#10、测试\" class=\"headerlink\" title=\"10、测试\"></a>10、测试</h3><img data-src=\"/2022/10/06/bkBasic/hexo/image-20221007123724497.png\" class=\"\" title=\"image-20221007123724497\">\n\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTczNDA0L2FydGljbGUvZGV0YWlscy8xMjI4NjEzMjE=\">https://blog.csdn.net/qq_45173404/article/details/122861321</span></p>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><p>&#x3D;&#x3D;toc 插件是：添加生成文章目录的一个插件&#x3D;&#x3D;</p>\n<p>一、安装(这里是hexo的路径下，也就是博客根目录下)</p>\n<pre><code class=\"shell\">npm install hexo-toc --save\n</code></pre>\n<p>二、配置博客根目录下的_config.yml文件：</p>\n<pre><code class=\"yml\">toc:  \n  maxdepth: 3 \n</code></pre>\n<p>在最后的空白处添加</p>\n<p>三、在markdown里使用</p>\n<p>在Markdown中需要显示文章目录的地方添加</p>\n<pre><code class=\"shell\">&lt;!-- toc --&gt;\n</code></pre>\n<p>然后就会将他&#x3D;&#x3D;后面&#x3D;&#x3D;的内容按照标题级别分层</p>\n<h2 id=\"图片显示\"><a href=\"#图片显示\" class=\"headerlink\" title=\"图片显示\"></a>图片显示</h2><h3 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h3><p><strong>typroa设置</strong></p>\n<p>打开typora，选择：偏好设置 - 图像 - 插入图片时，做如下更改：</p>\n<blockquote>\n<p>复制到指定路径</p>\n<p>.&#x2F;${filename}</p>\n</blockquote>\n<p>当插入图片时，会生成一个和文件名相同的文件夹，并将图片存入这个文件夹内。</p>\n<p><strong>Hexo 设置</strong></p>\n<ol>\n<li>安装 <code>hexo-renderer-marked</code></li>\n</ol>\n<pre><code class=\"sh\">npm install hexo-renderer-marked --save\n</code></pre>\n<ol start=\"2\">\n<li>之后更改 _config.yml 配置</li>\n</ol>\n<pre><code class=\"yml\">post_asset_folder: true \n</code></pre>\n<p>安装插件<code>hexo-image-link </code></p>\n<pre><code class=\"shell\">npm install hexo-image-link --save\n</code></pre>\n<p>此时，在typora 文件中正常显示的图片，在hexo发布后依旧能正常显示。</p>\n<p><strong>NOTE：</strong></p>\n<ol>\n<li>如果想用插件 <code>Hexo-renderer-markdown-it </code>（推荐）代替 <code>Hexo-renderer-marked </code></li>\n</ol>\n<pre><code class=\"sh\">npm uninstall hexo-renderer-marker --save  #卸载 marked \n\nnpm install hexo-renderer-markdown-it --save  #安装markdown-it\n</code></pre>\n<ol start=\"2\">\n<li>路径转换的解释</li>\n</ol>\n<p>假设：<br>文件名: .&#x2F;test.md</p>\n<p>图片路径: .&#x2F;test&#x2F;image.jpg</p>\n<pre><code>当插入图片 image.jpg 到 test.md 中时，typora 的引用路径为\n &#123;% asset_img image.jpg  %&#125; \n\nHexo 发布后的引用路径为\n![](image.jpg) \n</code></pre>\n<p>因此，typora的md文件引入hexo时，应转换路径。即删掉图片路径中的 “test&#x2F;“部分；（此时md文件已不能正常显示图片，而 hexo server 可正常显示）</p>\n<p>插件hexo-image-link帮助实现了这种路径转换。</p>\n<p>安装后，typora 文件中正常显示的图片，在hexo发布后依旧能正常显示。</p>\n<h3 id=\"方法2：\"><a href=\"#方法2：\" class=\"headerlink\" title=\"方法2：\"></a>方法2：</h3><blockquote>\n<p>同样的思路，相对路径，</p>\n</blockquote>\n<p>下载插件</p>\n<pre><code class=\"shell\">npm install hexo-asset-img --save\n</code></pre>\n<blockquote>\n<p>文件要求：</p>\n<p>​\t图片必须在 xx.md 同一级目录下的同名文件中存储，也就是在xx 文件夹下，所以md文档的图片路径就是\t&#x3D;&#x3D;![图片注释](xx&#x2F;图片名)&#x3D;&#x3D;</p>\n</blockquote>\n<h2 id=\"每篇文章的log设置\"><a href=\"#每篇文章的log设置\" class=\"headerlink\" title=\"每篇文章的log设置\"></a>每篇文章的log设置</h2><pre><code>---\n***\ncover: 图床链接/图片路径\n---\n</code></pre>\n<h1 id=\"主题\"><a href=\"#主题\" class=\"headerlink\" title=\"主题\"></a>主题</h1><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdXJvcmEudHJpZGlhbW9uZC50ZWNoL3poL2d1aWRlL2dldHRpbmctc3RhcnRlZC5odG1sIyVFNCVCRSU5RCVFOCVCNSU5NiVFNyU4RSVBRiVFNSVBMiU4Mw==\">aurora</span>    \t（最推荐）</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">shoka</span>        （好看，但是少东西，好多要自己配）</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0\">next</span>           （中等，但是好多人用，配东西好查的一批）</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plcnJ5YzEyNy9oZXhvLXRoZW1lLWJ1dHRlcmZseQ==\">butterfly  </span>（中等，要自己配一些）</li>\n</ul>\n<blockquote>\n<p>shoka</p>\n</blockquote>\n<pre><code class=\"shell\">npm i  hexo-renderer-multi-markdown-it --save #markdown解析的\nnpm i  hexo-autoprefixer --save\t\t#css\\html文件压缩的\nnpm i  hexo-algoliasearch --save\t#全文搜索的\nnpm i  hexo-symbols-count-time --save # 文字/时间统计\nnpm i  hexo-feed --save # 可选\nnpm un hexo-renderer-marked --save      #删除多余的库\n\ngit clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka\n</code></pre>\n<p>_config.yml</p>\n<pre><code class=\"yaml\"># markdown渲染\nmarkdown:\n  render: # 渲染器设置\n    html: false # 过滤 HTML 标签\n    xhtmlOut: true # 使用 &#39;/&#39; 来闭合单标签 （比如 &lt;br /&gt;）。\n    breaks: true # 转换段落里的 &#39;\\n&#39; 到 &lt;br&gt;。\n    linkify: true # 将类似 URL 的文本自动转换为链接。\n    typographer: \n    quotes: &#39;“”‘’&#39;\n  plugins: # markdown-it 插件设置\n    - plugin:\n        name: markdown-it-toc-and-anchor\n        enable: true\n        options: # 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样\n          tocClassName: &#39;toc&#39;\n          anchorClassName: &#39;anchor&#39;\n    - plugin:\n        name: markdown-it-multimd-table\n        enable: true\n        options:\n          multiline: true\n          rowspan: true\n          headerless: true\n    - plugin:\n        name: ./markdown-it-furigana\n        enable: true\n        options:\n          fallbackParens: &quot;()&quot;\n    - plugin:\n        name: ./markdown-it-spoiler\n        enable: true\n        options:\n          title: &quot;你知道得太多了&quot;\n\n# 压缩CSS/hTML\nminify:\n  html:\n    enable: true\n    exclude: # 排除 hexo-feed 用到的模板文件\n      - &#39;**/json.ejs&#39;\n      - &#39;**/atom.ejs&#39;\n      - &#39;**/rss.ejs&#39;\n  css:\n    enable: true\n    exclude:\n      - &#39;**/*.min.css&#39;\n  js:\n    enable: true\n    mangle:\n      toplevel: true\n    output:\n    compress:\n    exclude:\n      - &#39;**/*.min.js&#39;\n\n#css文件后缀\nautoprefixer:\n  exclude:\n    - &#39;*.min.css&#39;\n\n# 全文搜索\nalgolia:\n  appId: #Your appId\n  apiKey: #Your apiKey\n  adminApiKey: #Your adminApiKey\n  chunkSize: 5000\n  indexName: #&quot;shoka&quot;\n  fields:\n    - title #必须配置\n    - path #必须配置\n    - categories #推荐配置\n    - content:strip:truncate,0,2000\n    - gallery\n    - photos\n    - tags\n    \n</code></pre>\n<h2 id=\"未完成\"><a href=\"#未完成\" class=\"headerlink\" title=\"未完成\"></a>未完成</h2><h1 id=\"Netlify部署\"><a href=\"#Netlify部署\" class=\"headerlink\" title=\"Netlify部署\"></a>Netlify部署</h1><blockquote>\n<p><strong>前提</strong>：</p>\n<pre><code>在github上建立一个仓库，权限无所谓\n上传也只需要传编译后的public文件就行了\n</code></pre>\n</blockquote>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmV0bGlmeS5jb20v\">Netlify</span> 账号注册</p>\n</li>\n<li><p>添加新的站点</p>\n  <img data-src=\"/2022/10/06/bkBasic/hexo/image-20221013222215469.png\" class=\"\" title=\"image-20221013222215469\">\n\n  <img data-src=\"/2022/10/06/bkBasic/hexo/oSa6BOtIQ8WkZX1.png\" class=\"\" title=\"connect-github\">\n</li>\n<li><p>选取一个仓库，作为我们的资源地址</p>\n  <img data-src=\"/2022/10/06/bkBasic/hexo/image-20221013222447157.png\" class=\"\" title=\"image-20221013222447157\">\n</li>\n<li><p>一切默认，除了构建命令改成我们之前设置的<code>npm run netlify</code> ，当然也可以不设置</p>\n<p>  前提要在<code>package.json</code> 里面添加一个 <code>netlify</code> 命令 ，例如我们的：</p>\n<pre><code class=\"json\">&quot;scripts&quot;: &#123;\n        &quot;build&quot;: &quot;hexo generate&quot;,\n        &quot;clean&quot;: &quot;hexo clean&quot;,\n        &quot;deploy&quot;: &quot;hexo deploy&quot;,\n        &quot;server&quot;: &quot;hexo server&quot;,\n        // 每次提交会清除内容，然后重新建立项目，不要在项目中写这个注释，报错\n        &quot;netlify&quot;: &quot;npm run clean &amp;&amp; npm run build&quot; \n  &#125;,\n</code></pre>\n<p>  还要有将你的全部文件上传到github，才可以使用<code>npm</code></p>\n  <img data-src=\"/2022/10/06/bkBasic/hexo/p3P2NJaQzuIZnYs.png\" class=\"\" title=\"site-config\"></li>\n</ul>\n<blockquote>\n<p>这里BaseDirectory为空表示项目目录是仓库目录的根目录。</p>\n</blockquote>\n<ul>\n<li>构建完成后我们就能够看到一个URL，打开网址就是我们的个人博客了</li>\n</ul>\n<img data-src=\"/2022/10/06/bkBasic/hexo/image-20221013223348730.png\" class=\"\" title=\"image-20221013223348730\">\n\n<ul>\n<li><p>修改地址前缀（<strong>因为后缀不能改</strong>）</p>\n<p>  网站设置—》常规—》更改站点名，完成后缀是固定的 <code> *.netlify.app</code> ，要想改变就要买域名，然后配置域名的映射。</p>\n</li>\n<li><p>配置域名映射</p>\n  <img data-src=\"/2022/10/06/bkBasic/hexo/image-20221013223414819.png\" class=\"\" title=\"image-20221013223414819\">\n\n<ul>\n<li>配置域名的前提自然是要购买域名了，从任意域名服务商处购买一个域名。</li>\n</ul>\n  <img data-src=\"/2022/10/06/bkBasic/hexo/DFHYzywifpJTxqj.png\" class=\"\" title=\"domian-purchase\">\n\n<ul>\n<li>然后设置域名解析，类型为CNAME（DNS知识点参见计算机网络相关教程），内容为xxxxx.netlify.app，其中xxxxx为你自己设置的个性二级域名。</li>\n</ul>\n  <img data-src=\"/2022/10/06/bkBasic/hexo/5OVcw9ypvRKQePJ.png\" class=\"\" title=\"domain-resolve\">\n\n<ul>\n<li><p>设置完毕之后需要等待一段时间，因为DNS服务器需要一段时间来进行同步。</p>\n<p>  然后，我们还需要回到netlify中配置一下自己的用户域名，这样的话可以在国外获得netlify本身的CDN支持。</p>\n<ul>\n<li><p>在netlify设置用户域名。</p>\n  <img data-src=\"/2022/10/06/bkBasic/hexo/MDjxbIcWBEoLURA.png\" class=\"\" title=\"set-custom-domain\">\n\n<ul>\n<li><p>进行相关的配置，由于我们的域名本身已经配置了解析，这里会显示出来，不用再额外添加记录，只需要一路默认即可。</p>\n  <img data-src=\"/2022/10/06/bkBasic/hexo/cqwL9xF8Eov6yVa.png\" class=\"\" title=\"add-record\">\n\n  <img data-src=\"/2022/10/06/bkBasic/hexo/RTLcjynQYXbW9vI.png\" class=\"\" title=\"activate-dns\">\n</li>\n<li><p>设置一下netlify本身的对于国外CDN的支持。</p>\n  <img data-src=\"/2022/10/06/bkBasic/hexo/8v3ROjQc2WY9q7T.png\" class=\"\" title=\"netlify-cdn\">\n\n<p>  之后，我们就可以通过自己配置的域名访问自己的个人博客。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>这里<code>https</code>访问需要在<code>netlify</code>中配置，否则应该只能<code>http</code>访问。<br><a href=\"https://s2.loli.net/2022/09/05/f3q8hPbG5vsImeY.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/f3q8hPbG5vsImeY.png\" class=\"\" title=\"https-config\"></a><br>需要注意一下的是，此刻的https配置过程中的dns验证已经可以通过，但是证书检查会失败，等到后面clouldflare加速配置完成之后，这个问题 就可以解决了。所以暂时应该只能http访问。</p>\n</blockquote>\n<p>  <strong>但是，此刻我们的博客访问依然需要科学上网，因为我们还没有国内的CDN的支持，下面，我们来解决这个问题。</strong></p>\n</li>\n</ul>\n<h1 id=\"ClouldFlare加速\"><a href=\"#ClouldFlare加速\" class=\"headerlink\" title=\"ClouldFlare加速\"></a>ClouldFlare加速</h1><h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Netlify 虽然已经提供了 CDN 加速，但在使用过程中发现国内访问还是比较慢，Cloudflare 相对于国内的七牛云、阿里云等云服务商的 CDN 速度会慢一些，但是它有免费版本，而且最重要的是域名不用备案。</p>\n<h2 id=\"加速步骤\"><a href=\"#加速步骤\" class=\"headerlink\" title=\"加速步骤\"></a>加速步骤</h2><ol>\n<li><p>注册<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vemgtY24v\">Clouldflare</span>并登陆</p>\n</li>\n<li><p>添加站点</p>\n<ul>\n<li><a href=\"https://s2.loli.net/2022/09/05/rqNObP5dzE6GY83.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/rqNObP5dzE6GY83.png\" class=\"\" title=\"add-site\"></a></li>\n<li><a href=\"https://s2.loli.net/2022/09/05/Dk3Y4BrltQeCOHI.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/Dk3Y4BrltQeCOHI.png\" class=\"\" title=\"config-site\"></a></li>\n</ul>\n</li>\n<li><p>选择免费套餐</p>\n<ul>\n<li><a href=\"https://s2.loli.net/2022/09/05/SrhEAvmGZeqn8Co.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/SrhEAvmGZeqn8Co.png\" class=\"\" title=\"choose-project\"></a></li>\n</ul>\n</li>\n<li><p>添加 DNS 记录</p>\n<ul>\n<li><p>一般情况下 Cloudflare 会检测出来几条 DNS 记录，类型大多数是A，或者AAAA，由于我们是转发，所以应该是 CNAME 类型才对。有必要的话可能得手动配置一下。</p>\n<p>  <a href=\"https://s2.loli.net/2022/09/05/fSsAGV5JCeZuF1w.png\"><br>  <img data-src=\"/2022/10/06/bkBasic/hexo/fSsAGV5JCeZuF1w.png\" class=\"\" title=\"update-record\"></a></p>\n</li>\n<li><p>更改名称服务器</p>\n<ul>\n<li>这个步骤Cloudflare会提供一个在线的教程，主要步骤是在你的域名服务商那里修改 dns 解析服务器为 cloudflare 提供的地址，修改完成后点击完成。</li>\n<li><a href=\"https://s2.loli.net/2022/09/05/vd2WxXGbJHmgAey.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/vd2WxXGbJHmgAey.png\" class=\"\" title=\"modify-server\"></a></li>\n<li>以阿里云为例，设置的步骤如下:<ol>\n<li>进入域名的配置界面<ul>\n<li><a href=\"https://s2.loli.net/2022/09/05/ZfLiNUejRsCyhG3.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/ZfLiNUejRsCyhG3.png\" class=\"\" title=\"dns-manage\"></a></li>\n</ul>\n</li>\n<li>将域名服务器从阿里云的默认服务器改成clouldflare的服务器<ul>\n<li><a href=\"https://s2.loli.net/2022/09/05/juxWl7i9QaeLTGK.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/juxWl7i9QaeLTGK.png\" class=\"\" title=\"change-server\"></a></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>配置完成后，clouldflare会有邮件通知(一般不会等太久)<br>  <a href=\"https://s2.loli.net/2022/09/05/JbBvp18Trne37kC.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/JbBvp18Trne37kC.png\" class=\"\" title=\"mail-notice\"></a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置https\"><a href=\"#配置https\" class=\"headerlink\" title=\"配置https\"></a>配置https</h2><p> 在clouldflare配置完成之后，我们可以回到netlify去配置一下https访问。</p>\n<ol>\n<li>先确认一下dns解析</li>\n<li>:<ul>\n<li><a href=\"https://s2.loli.net/2022/09/05/r6iHKWLktnRap1j.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/r6iHKWLktnRap1j.png\" class=\"\" title=\"verify-dns\"></a></li>\n</ul>\n</li>\n<li>然后自动安装证书:<ul>\n<li><a href=\"https://s2.loli.net/2022/09/05/KvDupBFh8b9CScN.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/KvDupBFh8b9CScN.png\" class=\"\" title=\"certify\"></a></li>\n</ul>\n</li>\n<li>最后看到如下的界面，就说明https配置完成了<ul>\n<li><a href=\"https://s2.loli.net/2022/09/05/f3q8hPbG5vsImeY.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/f3q8hPbG5vsImeY.png\" class=\"\" title=\"https-config\"></a></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"测试站点\"><a href=\"#测试站点\" class=\"headerlink\" title=\"测试站点\"></a>测试站点</h1><p> 等待一段时间之后，我们可以试着用自己的浏览器去访问自己配置的域名地址，如果在不科学上网的情况下能够正常看到如下的默认页面，则我们的个人博客就配置成功了。</p>\n<p> <a href=\"https://s2.loli.net/2022/09/05/HESMpeXbUFT3rsR.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/HESMpeXbUFT3rsR.png\" class=\"\" title=\"default-page\"></a></p>\n<p> 本机能够正常访问之后，我们可以用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYm9jZS5jb20v\">拨测</span>来检测一下域名解析与访问的速度。</p>\n<p> <a href=\"https://s2.loli.net/2022/09/05/7C496Ruof1rBknM.png\"><img data-src=\"/2022/10/06/bkBasic/hexo/7C496Ruof1rBknM.png\" class=\"\" title=\"speed\"></a></p>\n<p> 到此为止，我们的个人博客就彻底搭建完成啦。后续我们只需要修改博客的配置文件和博客本身的markdown源文件，然后push到github上，netlify会自动帮我们运行当初配置的建站脚本，然后将生成在public文件夹中的静态网页部署出去。</p>\n<p> 关于hexo博客的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvd3JpdGluZw==\">写作方法</span>与各种好看的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=\">主题的配置</span>可以查看官方的文档，多尝试多摸索，配置自己的个性页面吧。</p>\n</li>\n</ol>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "框架",
                "博客"
            ]
        }
    ]
}