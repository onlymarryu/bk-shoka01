{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"java简介\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/",
            "title": "第1章初识JAVA",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"计算机语言的发展历史\"><a href=\"#计算机语言的发展历史\" class=\"headerlink\" title=\"计算机语言的发展历史\"></a>计算机语言的发展历史</h1><p>计算机编程语言的发展，是随着计算机本身硬件发展而发展的。硬件速度越快、体积越小、成本越低，应用到人类社会的场景就会越多，那么所需要的算法就会越复杂，也就要求计算机编程语言越高级。最初重达几十吨但一秒只能运算5000次的ENIAC(世界上第一台计算机)，只能做非常小的应用，比如：某些情况的弹道计算。现在任何一个人的手机运算能力都可以秒杀那个年代地球上所有计算机运算能力的总和。计算机编程语言的发展历经了从低级到高级发展。发展的核心思想就是“让人更容易编程”。越容易使用的语言，就有越多人使用；越多人使用，就有越多协作；越多协作，就可以创造越复杂的物体；计算机语言经历了三代：第一代是机器语言，第二代是汇编语言，第三代是高级语言。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/df224ffde641b2f50849b0d7ced03e3a.png\" class=\"\">\n\n\n<p>【1】第一代：机器语言（相当于人类的原始阶段）</p>\n<p>机器语言是机器指令的集合，机器指令展开来讲就是一台机器可以正确执行的命令。电子计算机的机器指令是一列二进制数字。计算机将之转变为一列高低电平，以使计算机的电子器件受到驱动，从而进行运算。上面所说的计算机，指的是可以执行机器指令，进行运算的机器。这是早期计算机的概念。早期的程序设计均使用机器语言。程序员们将用 0、1 数字编程的程序代码打在纸袋或卡片上，1打孔，0不打孔，再将程序通过纸带机或卡片机输入计算机，从而进行运算。</p>\n<p>应用8086CPU完成运算s&#x3D;768+12288-1280，机器码如下:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/cabe563631cd20b0be237288f14a60fd.png\" class=\"\">\n\n\n<p>假如将程序错写成以下的错误，请你找出错误:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/f3810a59f77dc88b809a08882fdbf11b.png\" class=\"\">\n\n\n<p>书写和阅读机器码程序不是一件简单的工作，要记住所有抽象的二进制码。上面只是一个非常简单的小程序，就暴露出机器码的晦涩难懂和不易查错。写如此小的一个程序尚且如此，实际上一个有用的程序至少要有几十行的机器码。那么，情况将会怎么样呢？</p>\n<p>在显示器输出“welcome to masm”，机器码如下：</p>\n<p>看到这样的程序，你有什么感想？如果程序里有一个“1”被误写成为“0”，又如何去查找错误呢？</p>\n<p>【2】第二代：汇编语言（相当于人类的手工业阶段）</p>\n<p>为了编程的方便，以及解决更加复杂的问题。程序员开始改进机器语言，使用英文缩写的助记符来表示基本的计算机操作。这些助记符构成了汇编语言的基础。如下是一些常见的汇编语言助记符(单词)比如：mov，add，sub之类，这样人更容易使用了。识别几百、几千个单词，感觉要比几百几千个数字，美妙多了。汇编语言相当于人类的手工业社会，需要技术极其娴熟的工匠，但是开发效率也非常低。汇编语言虽然能编写高效率的程序，但是学习和使用都不是易事，并且很难调试。另一个复杂的问题，汇编语言以及早期的计算机语言（Basic、Fortran等）没有考虑结构化设计原则，而是使用goto语句来作为程序流程控制的主要方法。这样做的后果是：一大堆混乱的调转语句使得程序几乎不可能被读懂。对于那个时代的程序员，能读懂上个月自己写的代码都成为一种挑战。 汇编语言仍然应用于工业电子编程领域、软件的加密解密、计算机病毒分析等。</p>\n<p>下面以Masm软件为例，编写一个简单的“hello world!”程序。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/25f4d0464a08bc680d211dc16e3fbdea.png\" class=\"\">\n\n\n<p>【3】第三代：高级语言（相当于人类的工业阶段）</p>\n<p>对于简单的任务，汇编语言可以胜任。但是随着计算机的发展，渗透到了工作生活的更多的方面，一些复杂的任务出现了，汇编语言就显得力不从心（应该说是程序员使用汇编语言解决复杂问题出现了瓶颈）。于是，出现了高级语言。像我们熟知的C、C++、Java等等都是高级语言。</p>\n<p>高级语言允许程序员使用接近日常英语的指令来编写程序。例如下图所示:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/087eeecede8f63fad58301244c34660a.png\" class=\"\">\n\n\n<h1 id=\"JAVA简史\"><a href=\"#JAVA简史\" class=\"headerlink\" title=\"JAVA简史\"></a>JAVA简史</h1><p><strong>【1】SUN公司</strong></p>\n<p>美国SUN(Stanford University Network)公司在中国大陆的正式中文名为“太阳计算机系统（中国）有限公司” ，在台湾中文名为“升 阳电脑公司”。</p>\n<p><strong>【2】Java为什么被发明</strong></p>\n<p>Green项目。</p>\n<p>应用环境：像电视盒这样的消费类电子产品</p>\n<p>要求： 语言本身是中立的，也就是跨平台</p>\n<p>1996年Java第一次发布就引起了人们的极大兴趣。关注Java的人士不仅限于计算机出版界， 还有诸如《纽约时报》《华盛顿邮报》《商业周刊》这样的主流媒体。Java 是第一种也是唯一种在National Public Radio上占用了10分钟时间来进行介绍的程序设计语言，并且还得到了$100000000的风险投资基金。这些基金全部用来支持用这种特别的计算机语言开发的产品。重温那些令人兴奋的日子是很有意思的。我们将简要地介绍一下Java语言的发展历史：</p>\n<p>Java的历史要追溯到1991年，由Patrick Naughton 及其伙伴James Gosling (一个全能的计算机奇才)带领的Sun公同的工程师小组想要设计一种小型的计算机语言，主要用于像有线电视转换盒这类的消费设备。由于这些消费设备的处理能力和内存都很有限，所以语言必须非常小且能够生成非常紧凑的代码。另外，由于不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是不能与任何特定的体系结构捆绑在一起。这个项目被命名为”Green”。</p>\n<p>所有就要求有这样的一种代码： 代码短小、紧凑且与平台无关。但是，Sun公司的人都有UNIX的应用背景。因此，所开发的语言以C++为基础。 是Gosling率先创造了这个语言，把这种语言称为“Oak”(这么起名的原因大概是因为他非常喜欢自己办公室外的橡树)。Sun 公司的人后来发现Oak是一种已有的计算机语言的名字，于是，将其改名为Java。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/b777a728d94309940fcfe8684bcc3f1b.png\" class=\"\">\n\n\n<p><strong>【3】Java的发明人</strong></p>\n<p>James Gosling </p>\n<p><strong>【4】经历阶段</strong></p>\n<p>1991年，James Gosling在SUN公司的工程师小组想要设计这样一种小型计算机语言。该语言主要用于像电视盒这样的消费类电子产品。另外，由于不同的厂商选择不同的CPU和操作系统，因此，要求该语言不能和特定的体系结构绑在一起，要求语言本身是中立的，也就是跨平台的。所以，将这个语言命名为“Green”，类似于绿色软件的意思。后来，改名为Oak，橡树的意思。改名后发现已经有一种语言叫这个名字了，再改名叫Java。Java语言发展到今天经历了一系列的过程：</p>\n<p> 1991年，SUN公司的Green项目，Oak</p>\n<p> 1995年，推出Java测试版</p>\n<p> 1996年，JDK1.0</p>\n<p> 1997年，JDK1.1</p>\n<p> 1998年，JDK1.2，大大改进了早期版本缺陷，是一个革命性的版本，更名为Java2。</p>\n<p> 2004年，J2SE 5.0 (1.5.0) Tiger老虎 成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0</p>\n<p> 2005年，Java的各种版本已经更名，以取消其中的数字”2”： J2ME更名为Java ME， J2SE更名为Java SE， J2EE更名为Java EE；</p>\n<p> 2006年，J2SE 6.0 (1.6.0) Mustang野马</p>\n<p> 2009年，甲骨文(oracle)收购SUN，交易高达价格74亿</p>\n<p> 2011年，JavaSE7.0 Dolphin海豚</p>\n<p> 2014年，JavaSE8.0</p>\n<p>2017年，JAVA 9.0</p>\n<p> 2018年3月，JAVA 10</p>\n<p> 2018年9月，JAVA 11</p>\n<p> 2019年3月，JAVA 12</p>\n<p> 2019年9月，JAVA 13</p>\n<p> 2020年3月，JAVA 14</p>\n<p>注意：SUN公司已经被oracle公司收购，目前每半年更新一次java的版本。但是，企业中的主流仍然以7和8为主。对于初学者，应该以企业主流应用版本为核心进行学习，没有必须在此处追求最新版本。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/e1e4acc66aa1b1f2c1e46059b1421c38.png\" class=\"\">\n\n\n<p><strong>【5】不同版本JDK说明</strong></p>\n<p>JDK Version 1.1</p>\n<p>于1997-02-19发行。</p>\n<p>引入的新特性包括：</p>\n<p>引入JDBC（Java Database Connectivity）；</p>\n<p>支持内部类；</p>\n<p>引入Java Bean；</p>\n<p>引入RMI（Remote Method Invocation）；</p>\n<p>引入反射（仅用于内省）。</p>\n<p>J2SE Version 1.2</p>\n<p>开发代号为Playground（操场），于1998-12-08发行。</p>\n<p>引入的新特性包括：</p>\n<p>引入集合（Collection）框架；</p>\n<p>对字符串常量做内存映射；</p>\n<p>引入JIT（Just In Time）编译器；</p>\n<p>引入对打包的Java文件进行数字签名；</p>\n<p>引入控制授权访问系统资源的策略工具；</p>\n<p>引入JFC（Java Foundation Classes），包括Swing 1.0、拖放和Java 2D类库；</p>\n<p>引入Java 插件；</p>\n<p>在JDBC中引入可滚动结果集、BLOB、CLOB、批量更新和用户自定义类型；</p>\n<p>在Applet中添加声音支持。</p>\n<p>J2SE Version 1.3</p>\n<p>开发代号为Kestrel（红隼），于2000-05-08发行。</p>\n<p>引入的新特性包括：</p>\n<p>引入Java Sound API；</p>\n<p>jar文件索引；</p>\n<p>对Java的各个方面都做了大量优化和增强。</p>\n<p>J2SE Version 1.4</p>\n<p>开发代号为Merlin（隼），于2004-02-06发行（首次在JCP下发行）。</p>\n<p>引入的新特性包括:</p>\n<p>XML处理；</p>\n<p>Java打印服务；</p>\n<p>引入Logging API；</p>\n<p>引入Java Web Start；</p>\n<p>引入JDBC 3.0 API；</p>\n<p>引入断言；</p>\n<p>引入Preferences API；</p>\n<p>引入链式异常处理；</p>\n<p>支持IPv6；</p>\n<p>支持正则表达式；</p>\n<p>引入Image I&#x2F;O slot machine API。</p>\n<p>Java Version SE 5.0</p>\n<p>开发代号为Tiger（老虎），于2004-09-30发行。</p>\n<p>引入的新特性包括:</p>\n<p>引入泛型；</p>\n<p>增强循环，可以使用迭代方式；</p>\n<p>自动装箱与自动拆箱；</p>\n<p>类型安全的枚举；</p>\n<p>可变参数；</p>\n<p>静态引入；</p>\n<p>元数据（注解）；</p>\n<p>引入Instrumentation。</p>\n<p>Java Version SE 6</p>\n<p>开发代号为Mustang（野马），于2006-12-11发行。</p>\n<p>引入的新特性包括：</p>\n<p>支持脚本语言；</p>\n<p>引入JDBC 4.0 API；</p>\n<p>引入Java Compiler API；</p>\n<p>可插拔注解；</p>\n<p>增加对Native PKI(Public Key Infrastructure)、Java GSS(Generic Security Service)、Kerberos和LDAP(Lightweight Directory Access Protocol)的支持；</p>\n<p>继承Web Services；</p>\n<p>做了很多优化。</p>\n<p>Java Version SE 7</p>\n<p>开发代号是Dolphin（海豚），于2011-07-28发行。</p>\n<p>引入的新特性包括：</p>\n<p>switch语句块中允许以字符串作为分支条件；</p>\n<p>在创建泛型对象时应用类型推断；</p>\n<p>在一个语句块中捕获多种异常；</p>\n<p>支持动态语言；</p>\n<p>支持try-with-resources；</p>\n<p>引入Java NIO.2开发包；</p>\n<p>数值类型可以用2进制字符串表示，并且可以在字符串表示中添加下划线；</p>\n<p>钻石型语法；</p>\n<p>null值的自动处理。</p>\n<p>Java Version SE 8</p>\n<p>开发代号是Spider（蜘蛛），于2014-03-18发行。</p>\n<p>支持 lambda支持；</p>\n<p>增强日期与时间API的功能；</p>\n<p>对垃圾回收的性能也进行了改进；</p>\n<p>并且移除了permgen区。</p>\n<p>Lambdas表达式与Functional接口</p>\n<p>接口的默认与静态方法</p>\n<p>方法引用</p>\n<p>重复注解</p>\n<p>更好的类型推测机制</p>\n<p>扩展注解的支持</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/cc266d289e8e3cb0c93696162df2eb73.png\" class=\"\">\n\n\n\n\n<h1 id=\"JAVA体系结构\"><a href=\"#JAVA体系结构\" class=\"headerlink\" title=\"JAVA体系结构\"></a>JAVA体系结构</h1><p><strong>JavaSE（Java Standard Edition）：标准版，定位在个人计算机上的应用</strong></p>\n<p>这个版本是Java平台的核心，它提供了非常丰富的API来开发一般个人计算机上的应用程序，包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。在上世纪90年代末互联网上大放异彩的Applet也属于这个版本。Applet后来为Flash取代，Flash即将被HTML5取代。</p>\n<p><strong>JavaEE（Java Enterprise Edition）：企业版，定位在服务器端的应用</strong></p>\n<p>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：JDBC是让程序员能直接在Java内使用的SQL的语法来访问数据库内的数据；Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术；</p>\n<p><strong>JavaME（Java Micro Edition）：微型版，定位在消费性电子产品的应用上</strong></p>\n<p>JavaME是JavaSE的内伸，包含J2SE的一部分核心类，也有自己的扩展类,增加了适合微小装置的类库：javax.microedition.io.*等。该版本针对资源有限的电子消费产品的需求精简核心类库，并提供了模块化的架构让不同类型产品能够随时增加支持的能力。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/4eac508d70b7f6ffc64ed3fdcfc23406.png\" class=\"\">\n\n\n<h1 id=\"JAVA的特性和优势\"><a href=\"#JAVA的特性和优势\" class=\"headerlink\" title=\"JAVA的特性和优势\"></a>JAVA的特性和优势</h1><p> <strong>跨平台&#x2F;可移植性</strong></p>\n<p>这是Java的核心优势。Java在设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。这样的话程序的移植就会非常麻烦。</p>\n<p> <strong>安全性</strong></p>\n<p>Java适合于网络&#x2F;分布式环境，为了达到这个目标，在安全性方面投入了很大的精力，使Java可以很容易构建防病毒，防篡改的系统。</p>\n<p> <strong>面向对象</strong></p>\n<p>面向对象是一种程序设计技术，非常适合大型软件的设计和开发。由于C++为了照顾大量C语言使用者而兼容了C，使得自身仅仅成为了带类的C语言，多少影响了其面向对象的彻底性！Java则是完全的面向对象语言。</p>\n<p> <strong>简单性</strong></p>\n<p>Java就是C++语法的简化版，我们也可以将Java称之为“C++-”。跟我念“C加加减”，指的就是将C++的一些内容去掉；比如：头文件，指针运算，结构，联合，操作符重载，虚基类等等。同时，由于语法基于C语言，因此学习起来完全不费力。</p>\n<p> <strong>高性能</strong></p>\n<p>Java最初发展阶段，总是被人诟病“性能低”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了几十倍运行效率。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。 将一些“热点”字节码编译成本地机器码，并将结果缓存起来，在需要的时候重新调用。这样的话，使Java程序的执行效率大大提高，某些代码甚至接待C++的效率。</p>\n<p>因此，Java低性能的短腿，已经被完全解决了。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p>\n<p> <strong>分布式</strong></p>\n<p>Java是为Internet的分布式环境设计的，因为它能够处理TCP&#x2F;IP协议。事实上，通过URL访问一个网络资源和访问本地文件是一样简单的。Java还支持远程方法调用(RMI,Remote Method Invocation)，使程序能够通过网络调用方法。</p>\n<p> <strong>多线程</strong></p>\n<p>多线程的使用可以带来更好的交互响应和实时行为。 Java多线程的简单性是Java成为主流服务器端开发语言的主要原因之一。</p>\n<p> <strong>健壮性</strong></p>\n<p>Java是一种健壮的语言，吸收了C&#x2F;C++ 语言的优点，但去掉了其影响程序健壮性的部分（如：指针、内存的申请与释放等）。Java程序不可能造成计算机崩溃。即使Java程序也可能有错误。如果出现某种出乎意料之事，程序也不会崩溃，而是把该异常抛出，再通过异常处理机制加以处理。</p>\n<p>总结：一句话：java很好！</p>\n<p>但是，并不是说学习了java，以后所有的东西都要用java开发了：某些领域其他语言有更出色的表现，比如，Objective C和后来的Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。</p>\n<p>只能说，不同的语言之间，平分秋色！</p>\n<h1 id=\"核心机制\"><a href=\"#核心机制\" class=\"headerlink\" title=\"核心机制\"></a>核心机制</h1><h2 id=\"垃圾收集机制\"><a href=\"#垃圾收集机制\" class=\"headerlink\" title=\"垃圾收集机制\"></a>垃圾收集机制</h2><p>垃圾收集的目的在除不再使用的对象，当对象建立的时候垃圾收集期，就开始监控对象的动态情况，垃圾收集主要是对内存的释放。创建对象的时候申请一个空间</p>\n<p>1.不再使用的内存空间应回收—》垃圾收集；</p>\n<p>2.Java消除了程序员回收无用内存空间的职责；提供一种系统级线程跟踪存储空间的分配情况。在JVM的空闲时，检查并释放可被释放的存储器空间；相比c++,开发人员负责要自己收回无用内存。</p>\n<p>3.垃圾收集在Java程序运行过程中自动进行，程序员无法精确控制和干预；</p>\n<p>4.GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上减少了因为没有释放空间而导致的内存泄露。</p>\n<p>后续：</p>\n<p>更高级：</p>\n<p>1.垃圾收集器有几种</p>\n<p>2.垃圾收集器底层原理剖析</p>\n<p>3.垃圾收集器算法，优化</p>\n<h2 id=\"跨平台原理\"><a href=\"#跨平台原理\" class=\"headerlink\" title=\"跨平台原理\"></a>跨平台原理</h2><p>JAVA跨平台原理的解释：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/c9214cebbc48ea99d832cf9899a52a8d.png\" class=\"\">\n\n\n<p>C语言的跨平台解释：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/66913892f5b4f71e30d054375cccb7c9.png\" class=\"\">\n\n\n<p>总结</p>\n<p>JVM(Java Virtual Machine)就是一个虚拟的用于执行bytecode字节码的”虚拟计算机”。他也定义了指令集、寄存器集、结构栈、垃圾收集堆、内存区域。JVM负责将Java字节码解释运行，边解释边运行，这样，速度就会受到一定的影响。</p>\n<p>不同的操作系统有不同的虚拟机。Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，随处运行”。 Java虚拟机是实现跨平台的核心机制。如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/9f86e99d761144f8e5f1025c263d727d.png\" class=\"\">\n\n\n<p>我们说的语言跨平台是编译后的文件跨平台，而不是源程序跨平台。</p>\n<p>接下来我们再比较下两种方式的差异：第一，C语言是编译执行的，编译器与平台相关，编译生成的可执行文件与平台相关；第二，Java是解释执行的，编译为中间码的编译器与平台无关，编译生成的中间码也与平台无关（一次编译，到处运行），中间码再由解释器解释执行，解释器是与平台相关的，也就是不同的平台需要不同的解释器.</p>\n<h1 id=\"常用DOS命令\"><a href=\"#常用DOS命令\" class=\"headerlink\" title=\"常用DOS命令\"></a>常用DOS命令</h1><p><strong>【1】DOS操作系统</strong></p>\n<p>--Microsoft公司推出的操作系统。（在windows之前的操作系统）</p>\n<p>--DOS是英文”Disk Operating System”的缩写,其中文含意是”磁盘操作系统”.</p>\n<p>--DOS是单用户、单任务的操作系统.（只能执行一个任务）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/b5c2c79cb5570c6e91dabc56e2eb2d91.png\" class=\"\">\n\n\n<p><strong>【2】DOS命令</strong></p>\n<p>--在windows中，我们通过鼠标菜单等来操作系统，而在dos操作系统中，要通过dos命令来操作系统。</p>\n<p>--是DOS操作系统的命令，是一种面向磁盘的操作命令，</p>\n<p>--不区分大小写。</p>\n<p><strong>【3】命令学习：</strong></p>\n<p>windows给我们保留了类似dos系统的操作界面，可以直接操作磁盘！</p>\n<p>dos 也是一种<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/d2Q9JUU2JTkzJThEJUU0JUJEJTlDJUU3JUIzJUJCJUU3JUJCJTlGJnRuPVNFX1BjWmhpZGFvbndoY19uZ3BhZ21qeiZyc3ZfZGw9Z2hfcGNfemhpZGFv\">操作系统</span>，是在windows出现以前用的，后来windows出来后基本没人用了，但是当windows崩溃的时候，还是要的dos方式解决，它是一种纯命令方式，cmd其实就是在windows状态下进入dos方式。</p>\n<p>控制命令台：win+r—&gt;cmd</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/3b0f71b42623023480dda23aabe8aee4.png\" class=\"\">\n\n\n<p><strong>【4】具体dos命令：</strong></p>\n<p>（1）切换盘符： c: d: e: 大小写没有区分</p>\n<p>（2）显示详细信息：dir</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1740909b2c155106334ed54298cadda0.png\" class=\"\">\n\n\n<p>（3）改变当前目录：cd</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/362c58e6a0f56fc1ace0bd31f0b741c2.png\" class=\"\">\n\n\n<p>（4）</p>\n<p>. 当前目录</p>\n<p>.. 代表上一层目录</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/5c967bca035c35add1b2104ca5649d38.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/acefdb41934d2aab97dfa5e969eff0cb.png\" class=\"\">\n\n\n<p>（5）清屏：cls</p>\n<p>（6）切换历史命令：上下箭头</p>\n<p>（7）补全命令： tab按键</p>\n<p>（8）创建目录：md</p>\n<p>删除目录：rd</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/09422f27f704dcbf9dae20fd1c3f6084.png\" class=\"\">\n\n\n<p>（9）复制文件命令：copy:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/0626fb05c5350a48f3194a4612623a9d.png\" class=\"\">\n\n\n<p>（10）删除文件：del</p>\n<p>del后面如果接的是文件夹&#x2F;目录：那么删除的就是这个文件夹下的文件，而不是文件夹</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/d5a261b9a18b4a7c852e02a84d2143bc.png\" class=\"\">\n\n\n<h1 id=\"JAVA环境准备–-gt-JDK\"><a href=\"#JAVA环境准备–-gt-JDK\" class=\"headerlink\" title=\"JAVA环境准备–&gt;JDK\"></a>JAVA环境准备–&gt;JDK</h1><h2 id=\"【1】下载JDK\"><a href=\"#【1】下载JDK\" class=\"headerlink\" title=\"【1】下载JDK\"></a><strong>【1】下载JDK</strong></h2><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvamF2YXNlL2Rvd25sb2Fkcy9pbmRleC5odG1s\">www.oracle.com/technetwork/java/javase/downloads/index.html</span></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/f5e306fff865e78e7cf4b3e0853d0a46.jpeg\" class=\"\">\n\n\n<p><strong>【2】安装JDK</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/76e9d157917264af13c9a2457ad03b0f.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/7d3e5ef356992506ea31a463b166089a.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/febc26a8ad5ca5d7a450a55ddd7c62d1.png\" class=\"\">\n\n\n<h2 id=\"【3】卸载JDK\"><a href=\"#【3】卸载JDK\" class=\"headerlink\" title=\"【3】卸载JDK\"></a><strong>【3】卸载JDK</strong></h2><p>控制面板卸载即可</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/f697774350b18624b56bed0f6254a517.png\" class=\"\">\n\n\n<h2 id=\"【4】-验证JDK是否安装成功\"><a href=\"#【4】-验证JDK是否安装成功\" class=\"headerlink\" title=\"【4】 验证JDK是否安装成功\"></a><strong>【4】 验证JDK是否安装成功</strong></h2><p>（1）方式1：去安装目录下看一眼：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/ac22249991f5294b4a9d223d5fcf5268.png\" class=\"\">\n\n\n<p>（2）方式2：通过控制命令台查看：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/39ae7561d4f131368eae9a9ccb2af553.png\" class=\"\">\n\n\n<p>（3）方式3：通过控制面板查看：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/261ebbcb3bc9cd8f43196c2baa4634c9.png\" class=\"\">\n\n\n<p><strong>【5】JDK和JRE：</strong></p>\n<p>JDK： Java Development kit —-&gt;编写Java程序的程序员使用的软件</p>\n<p>JRE : Java Runtime Enviroment —-》运行Java程序的用户使用的软件</p>\n<h2 id=\"安装notepad-，配置path环境变量\"><a href=\"#安装notepad-，配置path环境变量\" class=\"headerlink\" title=\"安装notepad++，配置path环境变量\"></a>安装notepad++，配置path环境变量</h2><p>【1】安装记事本：notepad</p>\n<p>【2】安装：一直下一步</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/abbe25e7ed8b045edea86256baa3f138.png\" class=\"\">\n\n\n<p>【3】打开记事本进行设置：</p>\n<p>设置–》首选项：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/c8dca7e180ad4bc69dd81c0953b1873c.png\" class=\"\">\n\n\n<p>设置–》语言格式设置：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/0542de937b85e18e1ef81e7cadea58ca.png\" class=\"\">\n\n\n<p>【4】打开notepad++:</p>\n<p>（1）方式1：通过快捷方式：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/be5c9d085c34c660cb272341c751ae2e.png\" class=\"\">\n\n\n<p>（2）方式2：通过可执行文件：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/9e8f1330d48c571f0f4d0f2f33c8b6a7.png\" class=\"\">\n\n\n<p>（3）方式3：利用控制命令台：</p>\n<p>win+r–&gt;cmd:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/701079b46451e26f184c5effbf08f14c.png\" class=\"\">\n\n\n<p>(4)方式4：在任意的路径下去执行notepad++.exe这个命令：</p>\n<p>但是发现报错：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/98e40692478ec2772c3fd5aa37bbbe3a.png\" class=\"\">\n\n\n<p>需要配置系统环境变量：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a8158c92fcc94f4cd7c16d98982d4f89.png\" class=\"\">\n\n\n<p>找系统环境变量：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/404df775e0f1df92adca292f150e2817.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/ba3326c542f0f0e4073bb51b03ed8b04.png\" class=\"\">\n\n\n<p>将notepad++.exe所在的路径配置到path环境变量中去：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a300969b9a9314375cb30c8d1e32608f.png\" class=\"\">\n\n\n<p>这样我就可以在任意的路径下去执行这个命令：（注意：控制命令台需要重启）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/422abd1f5e358db4fb883d2e6bbf7ed9.png\" class=\"\">\n\n\n<p>path环境变量作用：</p>\n<p>将命令所在的路径配置到path中去，就相当于在计算机中“注册”了一样，以后找这个命令，会直接去你配置的路径下寻找。</p>\n<p>达到了一个效果：在任意的路径下去执行某个命令—》path环境针对整个操作系统而言。</p>\n<h1 id=\"第一段程序\"><a href=\"#第一段程序\" class=\"headerlink\" title=\"第一段程序\"></a>第一段程序</h1><p><strong>【1】用notepad编写代码：</strong></p>\n<ol>\n<li>public class HelloWorld{</li>\n<li>public static void main(String[] args){</li>\n<li>System.out.println(“hi 这是一段Java程序。。。”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<p>记得保存 ctrl+s</p>\n<p><strong>【2】进行编译：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/43511ae71bacbf69c11b6d85f9c2194a.png\" class=\"\">\n\n\n<p>发现出错了，分析出错原因：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/298f40fc2221174be201d03882646bf2.png\" class=\"\">\n\n\n<p>解决办法：</p>\n<p>将javac.exe所在的路径 配置到 环境变量path中去，这样我就可以在任意的路径下去执行这个命令：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/efb27daee94a0e9016cf2bd8310c0a16.png\" class=\"\">\n\n\n<p>配置好环境变量以后发现代码可以成功编译：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/37a72dfd5ff1298fbecf36cd6f527b25.png\" class=\"\">\n\n\n<p>验证：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/8674f3596089c78139529ce26525fe26.png\" class=\"\">\n\n\n<p><strong>【3】进行解释&#x2F;翻译&#x2F;执行:</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/36f7e5bb879297158184c3d4b245a048.png\" class=\"\">\n\n\n<p>上面执行过程成功的原因：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a82f8d964fbb8a2243431f8b013374de.png\" class=\"\">\n\n\n<h1 id=\"程序中常见问题\"><a href=\"#程序中常见问题\" class=\"headerlink\" title=\"程序中常见问题\"></a>程序中常见问题</h1><p>【1】最低级的错误：单词拼写错误</p>\n<p>【2】要求源文件名字和类名必须一模一样：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/086728a33b6323fa8f6a7b901bb643c5.png\" class=\"\">\n\n\n<p>出错：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/310b7744316d2a235c93f190c14121f1.png\" class=\"\">\n\n\n<p>【3】所有的标点必须是英文状态下的：</p>\n<p>中文状态：【】（）{} ！；：“‘《》？</p>\n<p>英文状态：[] () {} ! ; : “ &amp;apos; &lt;&gt; ?</p>\n<p><strong>【4】成对编程：</strong></p>\n<p>[] {} () &lt;&gt; “” &amp;apos;&amp;apos;</p>\n<p><strong>【5】注意缩进</strong> ：只要遇到{}就进行缩进 —&gt;为了格式好看</p>\n<p>缩进：tab</p>\n<p>向前缩进： shift+tab</p>\n<p><strong>【6】编译：</strong></p>\n<p>javac HelloWorld.java</p>\n<p><strong>【7】执行：</strong></p>\n<p>java HelloWorld</p>\n<p><strong>【8】java中大小写严格区分，大小敏感：</strong></p>\n<p>HelloWorld Helloworld</p>\n<p>a A</p>\n<p>public PUBLIC</p>\n<p><strong>【9】我们要写代码：就当做有一个“框子”</strong></p>\n<ol>\n<li>public class HelloWorld{</li>\n<li>public static void main(String[] args){</li>\n<li></li>\n<li></li>\n<li>}</li>\n<li>}</li>\n</ol>\n<p><strong>【10】一个源文件中可以有多个类，只能有一个类被public修饰，源文件的名字必须跟public修饰的那个类名保持一致。</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/2fe1f0ad62885c1a9cc2e8d3b7e8caea.png\" class=\"\">\n\n\n<p>多个类会产生独立的字节码文件：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/2007ac8281d6622434662d7ca51549fb.png\" class=\"\">\n\n\n<p>执行的时候执行各自独立的字节码文件即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/3f43072f8d79a015c2c78e6e602f90c5.png\" class=\"\">\n\n\n<h1 id=\"编译方式\"><a href=\"#编译方式\" class=\"headerlink\" title=\"编译方式\"></a>编译方式</h1><p><strong>【1】方式1：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1a5be2e20f08cca2554764864b52483e.png\" class=\"\">\n\n\n<p><strong>【2】方式2：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a969ad6fbcf2440708966d0ebb881780.png\" class=\"\">\n\n\n<p><strong>【3】方式3：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/8fadab9466291f8d906886b25466c0b1.png\" class=\"\">\n\n\n<p><strong>【4】方式4：</strong></p>\n<p>在notepad中右键文件 –》打开文件夹所在命令行</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1309fcc40c24dc16194ec6d3d118bcc1.png\" class=\"\">\n\n\n<h1 id=\"扩展：classpath环境变量\"><a href=\"#扩展：classpath环境变量\" class=\"headerlink\" title=\"扩展：classpath环境变量\"></a>扩展：classpath环境变量</h1><p><strong>【1】系统有一个环境变量叫：</strong>classpath，现在我们将classpath环境变量显式的写出来：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/56653738bf699fa4839a1ad7a800d5b5.png\" class=\"\">\n\n\n<p>classpath作用：只要你配置到classpath中的路径，在执行java的字节码文件的时候，就会去这个配置的路径下找 对应的字节码文件：</p>\n<p>现在我不配置.\\了 我配置：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/45e1d0b90c634f8ae4ad6cd0e6754d6c.png\" class=\"\">\n\n\n<p>自从我配置了这个环境变量以后，可以在任意的路径下去执行字节码文件：</p>\n<p>总结：</p>\n<p>classpath作用：针对java执行字节码文件而产生的环境变量，只要配置了字节码文件所在的路径以后，那么以后你在任意位置都可以执行对应的字节码文件</p>\n<h1 id=\"扩展：JAVA-HOME环境变量\"><a href=\"#扩展：JAVA-HOME环境变量\" class=\"headerlink\" title=\"扩展：JAVA_HOME环境变量\"></a>扩展：JAVA_HOME环境变量</h1><p>后续我们会用到一个软件：tomcat，在执行startup.bat的时候会出现闪退问题：</p>\n<p>解决： 必须要配置一个环境变量叫：JAVA_HOME</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/d79c197731fc2fabf7d1eeffe68c3010.png\" class=\"\">\n\n\n<p>我再次启动才会成功：</p>\n<p>然后我们的path环境变量中刚好可以借助JAVA_HOME里面的内容，通过%%做引入 %JAVA_HOME%\\bin</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/eef1348dc722f99221851230d6166e99.png\" class=\"\">\n\n\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1cee5f8ef4a6dd22f4c2427ac9f9586f.png\" class=\"\">\n\n\n<ul>\n<li>JDK帮助文档</li>\n<li>SUN公司为JDK工具包提供了一整套文档资料,我们习惯上称之为JDK文档。</li>\n<li>JDK文档中提供了Java中的各种技术的详细资料,以及JDK中提供的各种类的帮助说明。</li>\n<li>JDk文档是Java语言的完整说明,大多数书籍中的类的介绍都要参照它来完成,它是编程者经常查阅的资料</li>\n<li>如何理解API：就当做是一个“字典”，“使用手册”，API就相当于是一个电子的帮助文档，可以帮我们查看JDK提供的类的信息，平时查看的时候可结合百度一起看。</li>\n</ul>\n<p>其实API没有什么神奇的，就是一个电子文档而已，帮助我们查看JAVA中涉及到的一些技能点：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/82e7900da21d11f6aa3c7c76599b84ed.png\" class=\"\">\n\n\n<h1 id=\"代码量统计工具\"><a href=\"#代码量统计工具\" class=\"headerlink\" title=\"代码量统计工具\"></a>代码量统计工具</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/7e64582ee7bad7b2c12ddece5c19f06b.png\" class=\"\">\n\n\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><p>为了方便程序的阅读，Java语言允许程序员在程序中写上一些说明性的文字，用来提高程序的可读性，这些文字性的说明就称为注释。</p>\n<p>注释不会出现在字节码文件中，即Java编译器编译时会跳过注释语句。</p>\n<p>在Java中根据注释的功能不同，主要分为单行注释、多行注释和文档注释。</p>\n<ul>\n<li>单行注释</li>\n</ul>\n<p>单行注释使用“&#x2F;&#x2F;”开头，“&#x2F;&#x2F;”后面的单行内容均为注释。</p>\n<ul>\n<li>多行注释</li>\n</ul>\n<p>多行注释以“&#x2F;*”开头以“*&#x2F;”结尾，在“&#x2F;*”和“*&#x2F;”之间的内容为注释，我们也可以使用多行注释作为行内注释。但是在使用时要注意，多行注释不能嵌套使用。</p>\n<ul>\n<li>文档注释</li>\n</ul>\n<p>文档注释以“&#x2F;**”开头以“*&#x2F;”结尾， 注释中包含一些说明性的文字及一些JavaDoc标签（后期写项目时，可以生成项目的API）</p>\n<h2 id=\"单行注释和多行注释\"><a href=\"#单行注释和多行注释\" class=\"headerlink\" title=\"单行注释和多行注释\"></a>单行注释和多行注释</h2><ol>\n<li>&#x2F;&#x2F;下面是一段标准代码</li>\n<li>&#x2F;&#x2F;这是代码的“框子”，当前阶段你可以当做一个模板</li>\n<li>&#x2F;&#x2F;其实这就是一个类，类的名字是HelloWorld，这个名字可以随便起，但是一般首字母大写，驼峰命名，见名知意</li>\n<li>public class HelloWorld{</li>\n<li>&#x2F;&#x2F;下面是一个main方法，方法的格式是固定的</li>\n<li>public static void main(String[] args){</li>\n<li>&#x2F;&#x2F;下面这句话的作用：将双引号中的内容进行原样输出</li>\n<li>&#x2F;*</li>\n<li>这是多行注释</li>\n<li>每行都可以写</li>\n<li>单行注释和多行注释，按照你自己的需求去使用即可</li>\n<li>*&#x2F;</li>\n<li>System.out.println(“hi….java”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<p>注意：</p>\n<p>1.注释不会参与编译，编译后产生的字节码文件中不会有注释的内容</p>\n<p>2.注释的作用：</p>\n<p>（1）注释就起到了标注解释的作用，提高代码的可读性，方便自己，方便他人–》是一个非常良好，非常专业的习惯！！！</p>\n<p>（2）方便代码的调试：</p>\n<ol>\n<li>public class HelloWorld2{</li>\n<li>public static void main(String[] args){</li>\n<li>System.out.println(“hi….java1”);</li>\n<li>&#x2F;&#x2F;System.out.println(“hi….java2”)</li>\n<li>System.out.println(“hi….java3”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<h2 id=\"文档注释\"><a href=\"#文档注释\" class=\"headerlink\" title=\"文档注释\"></a>文档注释</h2><ol>\n<li>&#x2F;**</li>\n<li>文档注释</li>\n<li>@author zhaoss</li>\n<li>@version 1.0</li>\n<li>这是我们第一章文档注释的代码，比较重要</li>\n<li>*&#x2F;</li>\n<li>public class HelloWorld3{</li>\n<li>public static void main(String[] args){</li>\n<li>System.out.println(“hi….java1”);</li>\n<li>}</li>\n<li>&#x2F;**</li>\n<li>@param name 姓名</li>\n<li>@param age 年龄</li>\n<li>*&#x2F;</li>\n<li>public void eat(String name,int age){</li>\n<li>System.out.println(“hello”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<p>一般文档注释可以配合：jdk提供的工具javadoc.exe来一起使用，通过javadoc.exe可以对文档注释进行解析，生成一套以网页文件形式体现的该程序的说明文档。（自定义类对应的API）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/5f36c3576cf9a48034a4b4ddd4ddf78b.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/239a7203195d3aa10f754e0cb4886fff.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/34f6260e1d8116cec2ddc29382b5d49c.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/63cfa40391722ade39f74d2cbdb5315f.png\" class=\"\">\n\n\n<h1 id=\"反编译工具的使用\"><a href=\"#反编译工具的使用\" class=\"headerlink\" title=\"反编译工具的使用\"></a>反编译工具的使用</h1><ul>\n<li>编译</li>\n</ul>\n<p>源代码—–&gt;class</p>\n<ul>\n<li>反编译</li>\n</ul>\n<p>class—-&gt;源代码</p>\n<ul>\n<li>反编译工具</li>\n</ul>\n<p>jd-gui.exe</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/ddc58027ebdd9a708cbf6ff40e6f525b.png\" class=\"\">\n\n\n<h1 id=\"本章最后一段代码\"><a href=\"#本章最后一段代码\" class=\"headerlink\" title=\"本章最后一段代码\"></a>本章最后一段代码</h1><ol>\n<li>public class HiWorld{</li>\n<li>public static void main(String[] args){</li>\n<li>&#x2F;&#x2F;进行自我介绍：</li>\n<li>System.out.print(“姓名：”);</li>\n<li>System.out.print(“\\t丽丽\\n”);</li>\n<li>System.out.print(“职业：”);</li>\n<li>System.out.print(“\\t学生”);</li>\n<li>&#x2F;*</li>\n<li>(1)System.out.print和System.out.println区别联系：</li>\n<li>System.out.print ： 将双引号中内容原样输出，不换行</li>\n<li>System.out.println ：将双引号中内容原样输出，换行</li>\n<li>(2)转义字符：</li>\n<li>\\就是转义字符：作用：将后面普通的字母转换为特殊含义</li>\n<li>\\n : 换行</li>\n<li>\\t : 距离前面有一个制表符位置</li>\n<li>*&#x2F;</li>\n<li></li>\n<li>System.out.println();&#x2F;&#x2F;换行</li>\n<li>System.out.println(“1111111111111111111”);</li>\n<li>System.out.println(“11111111\\t2222”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<h1 id=\"扩展面试题：JDK，JRE，JVM的区别\"><a href=\"#扩展面试题：JDK，JRE，JVM的区别\" class=\"headerlink\" title=\"扩展面试题：JDK，JRE，JVM的区别\"></a>扩展面试题：JDK，JRE，JVM的区别</h1><p>JDK,JRE,JVM的关系:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/63bfd9d6c63ebea3b5f9cf17f98644a4.png\" class=\"\">\n\n\n<p>先说JDK和JRE:</p>\n<p>初学JAVA很容易被其中的很多概念弄的傻傻分不清楚，首先从概念上理解一下吧，JDK（Java Development Kit）简单理解就是Java开发工具包，JRE(Java Runtime Enviroment)是Java的运行环境，JVM( java virtual machine)也就是常常听到Java虚拟机。JDK是面向开发者的，JRE是面向使用JAVA程序的用户，上面只是简单的区别</p>\n<p>通过上图发现发现有两个JRE文件夹，如果细看里面的内容基本上是一样的，如果是只是Java程序使用者，那么只会有最外层的那个JRE目录，JDK中是JRE自带的，你如果安装了JDK必然里面会有一个JRE.那么问题来了，为什么会有两套JRE呢？</p>\n<p>从侧面证明:</p>\n<p>利用javac.exe进行编译:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/9c783ba968cea227029eece87e12f9fa.png\" class=\"\">\n\n\n<p>然后我将C:\\Program Files\\Java\\jdk1.8.0_151\\lib\\tools.jar改个名字,再去编译:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/43325d9c5156144d0eeb92d48c4ab23c.png\" class=\"\">\n\n\n<p>证明:dt.jar和tools.jar是两个java最基本的包，里面包含了从java最重要的lang包到各种高级功能如可视化的swing包，是java必不可少的。而path下面的bin里面都是java的可执行的编译器及其工具，如java，javadoc等,报错的原因就是输入的javac的命令不是去JDK中bin目录去找的javac.exe，而是去JDK中lib目录中的tools.jar中com.sun.tools.javac.Main中执行，因此javac.exe只是一个包装器（Wrapper），存在的目的是为了让开发者免于输入过长的指命。这个时候发现JDK里的工具几乎是用Java所编写，同属于Java应用程序，因此要使用JDK所附的工具来开发Java程序，所以自身需要附一套JRE才能运行。上图中与jdk同级目录下的JRE就是用来运行一般Java程序用的。</p>\n<p>两套JRE运行的时候究竟运行哪一个呢，这个时候JDK中java.exe先从自身目录中找，然后父级目录中找，如果都没有就去注册表中找</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/774e13c2fe05e00b2b88485d66878cb5.png\" class=\"\">\n\n\n<p>再说JRE和JVM:</p>\n<p>JVM – java virtual machineJVM就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，class文件并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行，类似于C#中的CLR。</p>\n<p>JVM不能单独搞定class的执行，解释class的时候JVM需要调用解释所需要的类库lib。在JDK下面的的jre目录里面有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a6a57ddcf4dbbce6ec083f177185b938.png\" class=\"\">\n\n\n<p>JVM+Lib&#x3D;JRE，如果讲的具体点就是bin目录下的jvm.dll文件， jvm.dll无法单独工作，当jvm.dll启动后，会使用explicit的方法(就是使用Win32 API之中的LoadLibrary()与GetProcAddress()来载入辅助用的动态链接库)，而这些辅助用的动态链接库(.dll)都必须位 于jvm.dll所在目录的父目录之中。因此想使用哪个JVM，只需要设置PATH，指向JRE所在目录下的jvm.dll。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/3b5991d32e4ea2cdd83dfc682380f30f.png\" class=\"\">\n\n",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}