{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"设计模式\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/DesignMode/",
            "url": "http://example.com/2022/10/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/DesignMode/",
            "title": "设计模式",
            "date_published": "2022-10-07T15:52:00.000Z",
            "content_html": "<h1 id=\"谈谈你对设计模式的理解\"><a href=\"#谈谈你对设计模式的理解\" class=\"headerlink\" title=\"谈谈你对设计模式的理解\"></a>谈谈你对设计模式的理解</h1><p>1.首先谈设计模式的作用：经验的传承，提高了软件复用的水平，最终达到提高软件开发效率</p>\n<p><strong>五大原则</strong></p>\n<table>\n<thead>\n<tr>\n<th>设计原则</th>\n<th align=\"left\">简单说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单一职责</td>\n<td align=\"left\">一个类只负责一项职责</td>\n</tr>\n<tr>\n<td>里氏替换原则</td>\n<td align=\"left\">子类可以扩展父类的功能，但不能改变父类原有的功能</td>\n</tr>\n<tr>\n<td>依赖倒置原则</td>\n<td align=\"left\">要依赖于抽象，不要依赖于具体，核心思想是<strong>面向接口编程</strong></td>\n</tr>\n<tr>\n<td>接口隔离原则</td>\n<td align=\"left\">建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少</td>\n</tr>\n<tr>\n<td>迪米特法则 （最少知道原则）</td>\n<td align=\"left\">一个对象应该对其他对象保持最少的了解</td>\n</tr>\n<tr>\n<td>开闭原则</td>\n<td align=\"left\">对扩展开放，对修改关闭</td>\n</tr>\n</tbody></table>\n<p>2.设计模式的分类</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/2014caaf469649d1a3c84a582ef7319b.png\" alt=\"image.png\"></p>\n<p>3.创建型模式：都是用来帮助我们创建对象的！</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/c6b87746e9884c22b56ca99bc265c496.png\" alt=\"image.png\"></p>\n<p>4.结构性模式:关注对象和类的组织</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6b8dffa88b924af6ba3664386d6a9f0a.png\" alt=\"image.png\"></p>\n<p>5.行为型模式:关注系统中对象之间的相互交换，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责，共有11中模式</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/9bfe35ab4a494cc4ae84a20ee9e30a5c.png\" alt=\"image.png\"></p>\n<h1 id=\"一、创建型模式\"><a href=\"#一、创建型模式\" class=\"headerlink\" title=\"一、创建型模式\"></a>一、创建型模式</h1><h2 id=\"1-单例模式\"><a href=\"#1-单例模式\" class=\"headerlink\" title=\"1.单例模式\"></a>1.单例模式</h2><p>作用：单例模式的核心是<strong>保证一个类只有一个实例，并且提供一个访问实例的全局访问点。</strong></p>\n<table>\n<thead>\n<tr>\n<th>实现方式</th>\n<th align=\"left\">优缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>饿汉式</td>\n<td align=\"left\">线程安全，调用效率高 ，但是不能延迟加载</td>\n</tr>\n<tr>\n<td>懒汉式</td>\n<td align=\"left\">线程安全，调用效率不高，能延迟加载</td>\n</tr>\n<tr>\n<td>双重检测锁式</td>\n<td align=\"left\">在懒汉式的基础上解决并发问题</td>\n</tr>\n<tr>\n<td>静态内部类式</td>\n<td align=\"left\">线程安全，资源利用率高，可以延时加载</td>\n</tr>\n<tr>\n<td>枚举单例</td>\n<td align=\"left\">线程安全，调用效率高，但是不能延迟加载</td>\n</tr>\n</tbody></table>\n<h3 id=\"饿汉式\"><a href=\"#饿汉式\" class=\"headerlink\" title=\"饿汉式\"></a>饿汉式</h3><p>也就是类加载的时候立即实例化对象，实现的步骤是先私有化构造方法，对外提供唯一的静态入口方法，实现如下</p>\n<pre><code class=\"java\">/**\n * 单例模式：饿汉式\n *\n */\npublic class SingletonInstance1 &#123;\n    // 声明此类型的变量，并实例化，当该类被加载的时候就完成了实例化并保存在了内存中\n    private final static SingletonInstance1 instance = new SingletonInstance1();\n\n    // 私有化所有的构造方法,防止直接通过new关键字实例化\n    private SingletonInstance1()&#123;&#125;\n    // 对外提供一个获取实例的静态方法\n    public static SingletonInstance1 getInstance()&#123;\n        return instance;\n    &#125;\n&#125;\n</code></pre>\n<p>饿汉式单例模式代码中，static变量会在类装载时初始化，此时也不会涉及多个线程对象访问该对象的问题。虚拟机保证只会装载一次该类，肯定不会发生并发访问的问题。因此，可以省略synchronized关键字</p>\n<p>问题：如果只是加载本类，而不是要调用getInstance()，甚至永远没有调用，则会造成资源浪费！</p>\n<pre><code class=\"java\">/**\n * 单例模式：饿汉式\n *\n */\npublic class SingletonInstance1 &#123;\n    private byte[] b1 = new byte[1024*1024];\n    private byte[] b2 = new byte[1024*1024];\n    private byte[] b3 = new byte[1024*1024];\n    // 声明此类型的变量，并实例化，当该类被加载的时候就完成了实例化并保存在了内存中\n    private final static SingletonInstance1 instance = new SingletonInstance1();\n\n    // 私有化所有的构造方法,防止直接通过new关键字实例化\n    private SingletonInstance1()&#123;&#125;\n    // 对外提供一个获取实例的静态方法\n    public static SingletonInstance1 getInstance()&#123;\n        return instance;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"懒汉式\"><a href=\"#懒汉式\" class=\"headerlink\" title=\"懒汉式\"></a>懒汉式</h3><pre><code class=\"java\">/**\n * 单例模式：懒汉式\n *\n */\npublic class SingletonInstance2 &#123;\n    // 声明此类型的变量,但没有实例化\n    private static SingletonInstance2 instance = null;\n\n    // 私有化所有的构造方法,防止直接通过new关键字实例化\n    private SingletonInstance2()&#123;&#125;\n    // 对外提供一个获取实例的静态方法，为了数据安全添加synchronized关键字\n    public static synchronized SingletonInstance2 getInstance()&#123;\n        if(instance == null)&#123;\n            // 当instance不为空的时候才实例化\n            instance = new SingletonInstance2();\n        &#125;\n        return instance;\n    &#125;\n&#125;\n</code></pre>\n<p>&amp;emsp;&amp;emsp;此种方式在类加载后如果我们一直没有调用getInstance方法，那么就不会实例化对象。实现了延迟加载，但是因为在方法上添加了synchronized关键字，每次调用getInstance方法都会同步，所以对性能的影响比较大。</p>\n<h3 id=\"双重检测锁\"><a href=\"#双重检测锁\" class=\"headerlink\" title=\"双重检测锁\"></a>双重检测锁</h3><pre><code class=\"java\">/**\n * 单例模式：懒汉式\n * 双重检测机制\n *\n */\npublic class SingletonInstance3 &#123;\n    // 声明此类型的变量,但没有实例化\n    private static volatile  SingletonInstance3 instance = null;\n\n    // 私有化所有的构造方法,防止直接通过new关键字实例化\n    private SingletonInstance3()&#123;&#125;\n    // 对外提供一个获取实例的静态方法，\n    public static  SingletonInstance3 getInstance()&#123;\n        if(instance == null)&#123;\n            synchronized(SingletonInstance3.class)&#123;\n                if(instance == null)&#123;\n                    // 1.分配内存空间  2. 执行构造方法，实例化对象 3.把这个对象赋值给这个空间\n                    // 如果不加volatile 会执行重排序 1 3 2 \n                    instance = new SingletonInstance3();\n                &#125;\n            &#125;\n        &#125;\n        return instance;\n    &#125;\n&#125;\n</code></pre>\n<p>不加volatile有指令重排序的问题。添加后可以解决。</p>\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><pre><code class=\"java\">/**\n * 静态内部类实现方式\n *\n */\npublic class SingletonInstance4 &#123;\n    // 静态内部类\n    public static class SingletonClassInstance&#123;\n        // 声明外部类型的静态常量\n        public static final SingletonInstance4 instance = new SingletonInstance4();\n    &#125;\n    // 私有化构造方法\n    private SingletonInstance4()&#123;&#125;\n\n    // 对外提供的唯一获取实例的方法\n    public static SingletonInstance4 getInstance()&#123;\n        return SingletonClassInstance.instance;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"枚举单例\"><a href=\"#枚举单例\" class=\"headerlink\" title=\"枚举单例\"></a>枚举单例</h3><pre><code class=\"java\">/**\n * 单例模式：枚举方式实现\n *\n */\npublic enum SingletonInstance5 &#123;\n\n    // 定义一个枚举元素，则这个元素就代表了SingletonInstance5的实例\n    INSTANCE;\n\n    public void singletonOperation()&#123;\n        // 功能处理\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-怎么解决反射爆破单例\"><a href=\"#2-怎么解决反射爆破单例\" class=\"headerlink\" title=\"2.怎么解决反射爆破单例\"></a>2.怎么解决反射爆破单例</h2><p>&amp;emsp;&amp;emsp;在单例中我们定义的私有的构造器，但是我们知道反射是可以操作私有的属性和方法的，这时我们应该怎么处理？</p>\n<pre><code class=\"java\">public static void main(String[] args) throws Exception, IllegalAccessException &#123;\n    SingletonInstance1 s1 = SingletonInstance1.getInstance();\n    // 反射方式获取实例\n    Class c1 = SingletonInstance1.class;\n    Constructor constructor = c1.getDeclaredConstructor(null);\n    constructor.setAccessible(true);\n    SingletonInstance1 s2 = (SingletonInstance1)constructor.newInstance(null);\n    System.out.println(s1);\n    System.out.println(s2);\n&#125;\n</code></pre>\n<p>输出结果</p>\n<pre><code class=\"txt\">com.dpb.single.SingletonInstance1@15db9742\ncom.dpb.single.SingletonInstance1@6d06d69c\n</code></pre>\n<p>产生了两个对象，和单例的设计初衷违背了。<br>解决的方式是在无参构造方法中手动抛出异常控制,或者声明一个全局变量来控制。</p>\n<pre><code class=\"java\">// 私有化所有的构造方法,防止直接通过new关键字实例化\nprivate SingletonInstance2()&#123;\n    if(instance != null)&#123;\n        // 只能有一个实例存在，如果再次调用该构造方法就抛出异常，防止反射方式实例化\n        throw new RuntimeException(&quot;单例模式只能创建一个对象&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>上面这种方式我们还可以通过反序列化的方式来破解</p>\n<pre><code class=\"java\">public static void main(String[] args) throws Exception, IllegalAccessException &#123;\n    SingletonInstance2 s1 = SingletonInstance2.getInstance();\n    // 将实例对象序列化到文件中\n    ObjectOutputStream oos = new ObjectOutputStream(\n            new FileOutputStream(&quot;c:/tools/a.txt&quot;));\n    oos.writeObject(s1);\n    oos.flush();\n    oos.close();\n    // 将实例从文件中反序列化出来\n    ObjectInputStream ois = new ObjectInputStream(\n            new FileInputStream(&quot;c:/tools/a.txt&quot;));\n    SingletonInstance2 s2 = (SingletonInstance2) ois.readObject();\n    ois.close();\n    System.out.println(s1);\n    System.out.println(s2);\n&#125;\n</code></pre>\n<p>我们只需要在单例类中重写readResolve方法并在该方法中返回单例对象即可，如下:</p>\n<pre><code class=\"java\">package com.dpb.single;\n\nimport java.io.ObjectStreamException;\nimport java.io.Serializable;\n\n/**\n * 单例模式：懒汉式\n *\n */\npublic class SingletonInstance2 implements Serializable&#123;\n\n    // 声明此类型的变量,但没有实例化\n    private static SingletonInstance2 instance = null;\n\n    // 私有化所有的构造方法,防止直接通过new关键字实例化\n    private SingletonInstance2()&#123;\n        if(instance != null)&#123;\n            // 只能有一个实例存在，如果再次调用该构造方法就抛出异常，防止反射方式实例化\n            throw new RuntimeException(&quot;单例模式只能创建一个对象&quot;);\n        &#125;\n    &#125;\n    // 对外提供一个获取实例的静态方法，为了数据安全添加synchronized关键字\n    public static synchronized SingletonInstance2 getInstance()&#123;\n        if(instance == null)&#123;\n            // 当instance不为空的时候才实例化\n            instance = new SingletonInstance2();\n        &#125;\n        return instance;\n    &#125;\n    // 重写该方法，防止序列化和反序列化获取实例\n    private Object readResolve() throws ObjectStreamException&#123;\n        return instance;\n    &#125;\n&#125;\n</code></pre>\n<p>说明:readResolve方法是基于回调的，反序列化时，如果定义了readResolve()则直接返回此方法指定的对象，而不需要在创建新的对象！</p>\n<h2 id=\"3-说说你在哪些框架中看到了单例的设计\"><a href=\"#3-说说你在哪些框架中看到了单例的设计\" class=\"headerlink\" title=\"3.说说你在哪些框架中看到了单例的设计\"></a>3.说说你在哪些框架中看到了单例的设计</h2><p>1.Spring中的Bean对象，默认是单例模式</p>\n<p>2.相关的工厂对象都是单例，比如：MyBatis中的SqlSessionFactory，Spring中的BeanFactory</p>\n<p>3.保存相关配置信息的都是单例，比如：MyBatis中的Configuration对象，SpringBoot中的各个XXXAutoConfiguration对象等</p>\n<p>4.应用程序的日志应用，一般都会通过单例来实现</p>\n<p>5.数据库连接池的设计也是单例模式</p>\n<h2 id=\"4-工厂模式\"><a href=\"#4-工厂模式\" class=\"headerlink\" title=\"4.工厂模式\"></a>4.工厂模式</h2><p>&amp;emsp;&amp;emsp;工厂模式的作用是帮助我们创建对象，我们不用自己来创建，根据需要创建的对象的复杂度我们可以把工厂模式分为简单工厂，工厂方法和抽象工厂。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/95f501de57d3451faf9228414dc6f75f.png\" alt=\"image.png\"></p>\n<h3 id=\"4-1-简单工厂\"><a href=\"#4-1-简单工厂\" class=\"headerlink\" title=\"4.1 简单工厂\"></a>4.1 简单工厂</h3><p>&amp;emsp;&amp;emsp;简单工厂模式又称为静态工厂方法，他可以根据不同的参数而返回不同的实例，简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>\n<p>JDK中的简单工厂应用：DataFormat</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/4fdddcfbf8784080a3706158f6945e9a.png\" alt=\"image.png\"></p>\n<p>自己写一个简单工厂的案例</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/de2237eb14fe491fbd38c5a815fa7c27.png\" alt=\"image.png\"></p>\n<pre><code class=\"java\">/**\n * 简单工厂\n */\npublic class SimpleFactory &#123;\n\n    public static void main(String[] args) &#123;\n        // 根据对应的类型返回相关产品\n        CarFactory.createCar(&quot;奥迪&quot;).run();\n        CarFactory.createCar(&quot;Byd&quot;).run();\n    &#125;\n&#125;\n\n// 定义公共的接口\ninterface Car&#123;\n    void run();\n&#125;\n\nclass Audi implements Car&#123;\n    @Override\n    public void run() &#123;\n        System.out.println(&quot;奥迪在跑...&quot;);\n    &#125;\n&#125;\n\nclass Byd implements Car&#123;\n    @Override\n    public void run() &#123;\n        System.out.println(&quot;Byd在跑...&quot;);\n    &#125;\n&#125;\n\n// 创建对应的简单工厂类\nclass CarFactory&#123;\n    public static Car createCar(String type)&#123;\n        if(&quot;奥迪&quot;.equals(type))&#123;\n            return new Audi();\n        &#125;else if(&quot;Byd&quot;.equals(type))&#123;\n            return new Byd();\n        &#125;else&#123;\n            throw new RuntimeException(&quot;该产品不能生产&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>我们可以发现简单工厂对于新增产品是无能为力的！不修改原有代码根本就没办法扩展!!!</p>\n<h3 id=\"4-2-工厂方法\"><a href=\"#4-2-工厂方法\" class=\"headerlink\" title=\"4.2 工厂方法\"></a>4.2 工厂方法</h3><p>&amp;emsp;&amp;emsp;针对于简单工厂的短板，引出了工厂方法模式，定义一个用户创建对象的接口，让子类决定实例化哪个类，工厂方法使一个类的实例化延迟到了其子类中。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/cedbded5fc4543eb80dd3663bbe814c7.png\" alt=\"image.png\"></p>\n<p>代码实现：</p>\n<pre><code class=\"java\">/**\n * 工厂方法模式\n */\npublic class FactoryMethod &#123;\n\n    public static void main(String[] args) &#123;\n        new AudiCarFactory().createCar().run();\n        new BydCarFactory().createCar().run();\n    &#125;\n\n\n    public static interface  Car&#123;\n        public void run();\n    &#125;\n\n    public static class Byd implements Car&#123;\n        @Override\n        public void run() &#123;\n            System.out.println(&quot;比亚迪...&quot;);\n        &#125;\n    &#125;\n\n    public static class Audi implements Car&#123;\n        @Override\n        public void run() &#123;\n            System.out.println(&quot;奥迪...&quot;);\n        &#125;\n    &#125;\n\n    public static interface CarFactory&#123;\n        public Car createCar();\n    &#125;\n\n    // 扩展的工厂\n    public static class AudiCarFactory implements CarFactory&#123;\n        @Override\n        public Car createCar() &#123;\n            return new Audi();\n        &#125;\n    &#125;\n\n    public static class BydCarFactory implements CarFactory&#123;\n        @Override\n        public Car createCar() &#123;\n            return new Byd();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>简单工厂和工厂方法模式的对比</p>\n<ol>\n<li>简单工厂只有一个工厂，而工厂方法有多个工厂</li>\n<li>简单工厂不支持扩展，而工厂方法支持扩展，扩展的方式就是添加对应的工厂类即可</li>\n<li>简单工厂代码复杂度低，工厂方法代码复杂度高</li>\n<li>…</li>\n</ol>\n<h3 id=\"4-3-抽象工厂\"><a href=\"#4-3-抽象工厂\" class=\"headerlink\" title=\"4.3 抽象工厂\"></a>4.3 抽象工厂</h3><p>&amp;emsp;&amp;emsp;上面的两种方式实现的工厂都是生产同一大类的产品，如果要实现生产不同类型的产品这时我们就可以用抽象工厂模式来实现。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/185ba2bc37394c47ae8f62390d019829.png\" alt=\"image.png\"></p>\n<p>代码实现：</p>\n<pre><code class=\"java\">/**\n * 抽象工厂：多个产品族\n */\npublic class AbstractFactory &#123;\n\n    public static void main(String[] args) &#123;\n        Car car = new LuxuryEngineCarFacory().createCar();\n        Engine engine = new LuxuryEngineCarFacory().createEngine();\n        car.run();\n        engine.run();\n    &#125;\n\n    // 抽象工厂\n    public static interface AbstarctComponentFactory&#123;\n        Car createCar();\n        Engine createEngine();\n    &#125;\n\n    public static class LuxuryEngineCarFacory implements AbstarctComponentFactory&#123;\n        @Override\n        public Engine createEngine() &#123;\n            return new LuxuryEngineFactory().createEngine();\n        &#125;\n\n        @Override\n        public Car createCar() &#123;\n            return new BydCarFactory().createCar();\n        &#125;\n    &#125;\n\n    public static class LowEngineCarFacory implements AbstarctComponentFactory&#123;\n        @Override\n        public Car createCar() &#123;\n            return new AudiCarFactory().createCar();\n        &#125;\n\n        @Override\n        public Engine createEngine() &#123;\n            return new LowEngineFactory().createEngine();\n        &#125;\n    &#125;\n\n    // 汽车产品族\n    public static interface  Car&#123;\n        public void run();\n    &#125;\n\n    public static class Byd implements Car &#123;\n        @Override\n        public void run() &#123;\n            System.out.println(&quot;比亚迪...&quot;);\n        &#125;\n    &#125;\n\n    public static class Audi implements Car &#123;\n        @Override\n        public void run() &#123;\n            System.out.println(&quot;奥迪...&quot;);\n        &#125;\n    &#125;\n\n    public static interface CarFactory&#123;\n        public Car createCar();\n    &#125;\n\n    // 扩展的工厂\n    public static class AudiCarFactory implements CarFactory &#123;\n        @Override\n        public Car createCar() &#123;\n            return new Audi();\n        &#125;\n    &#125;\n\n    public static class BydCarFactory implements  CarFactory&#123;\n        @Override\n        public Car createCar() &#123;\n            return new Byd();\n        &#125;\n    &#125;\n\n    // 发动机产品族\n    public static interface Engine&#123;\n        public void run();\n    &#125;\n\n    public static class LuxuryEngine implements Engine&#123;\n        @Override\n        public void run() &#123;\n            System.out.println(&quot;豪华版发动机...&quot;);\n        &#125;\n    &#125;\n\n    public static class LowEngine implements Engine&#123;\n        @Override\n        public void run() &#123;\n            System.out.println(&quot;低配版发动机...&quot;);\n        &#125;\n    &#125;\n\n    public static interface EngineFactory&#123;\n        public Engine createEngine();\n    &#125;\n\n    public static class LuxuryEngineFactory implements EngineFactory&#123;\n        @Override\n        public Engine createEngine() &#123;\n            return new LuxuryEngine();\n        &#125;\n    &#125;\n\n    public static class LowEngineFactory implements EngineFactory&#123;\n        @Override\n        public Engine createEngine() &#123;\n            return new LowEngine();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>三者的对比：</p>\n<ol>\n<li>简单工厂模式(静态工厂模式) ：虽然某种程度不符合设计原则，但实际使用最多。</li>\n<li>工厂方法模式：不修改已有类的前提下，通过增加新的工厂类实现扩展。</li>\n<li>抽象工厂模式：不可以增加产品，可以增加产品族！</li>\n</ol>\n<h2 id=\"5-建造者模式\"><a href=\"#5-建造者模式\" class=\"headerlink\" title=\"5.建造者模式\"></a>5.建造者模式</h2><p>&amp;emsp;&amp;emsp;实际开发中，我们所需要的对象构建时非常复杂，且有很多步骤需要处理时，这时建造者模式就很适合。比如MyBatis中的SqlSessionFactory对象的创建，我们不光要创建SqlSessionFactory本身的对象，还有完成MyBatis的全局配置文件和映射文件的加载解析操作，之后把解析出来的信息绑定在SqlSessionFactory对象中，</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/21221aa599f9428083bc92d81ac151d2.png\" alt=\"image.png\"></p>\n<p>直接参考MyBatis的代码即可</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6d7aec1477204d9397cf5b59a1f2ad65.png\" alt=\"image.png\"></p>\n<p>所以建造者模式的作用就是帮助我们解决了复杂对象的创建</p>\n<p>建造者模式和工厂模式的区别：</p>\n<ul>\n<li>关注的维度是不一样的</li>\n<li>工厂模式创建对象 new 出来</li>\n<li>建造者模式关注的是对象创建的本身</li>\n</ul>\n<h2 id=\"6-原型模式\"><a href=\"#6-原型模式\" class=\"headerlink\" title=\"6.原型模式\"></a>6.原型模式</h2><p>&amp;emsp;&amp;emsp;在java中我们知道通过new关键字创建的对象是非常繁琐的(类加载判断，内存分配，初始化等)，在我们需要大量对象的情况下，原型模式就是我们可以考虑实现的方式。<br>&amp;emsp;&amp;emsp;原型模式我们也称为克隆模式，即一个某个对象为原型克隆出来一个一模一样的对象，该对象的属性和原型对象一模一样。而且对于原型对象没有任何影响。原型模式的克隆方式有两种：浅克隆和深度克隆.</p>\n<table>\n<thead>\n<tr>\n<th>原型模式</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>浅克隆</td>\n<td align=\"left\">只是拷贝本对象,其对象内部的数组、引用对象等都不拷贝，&#96;&#96;还是指向原生对象的内部元素地址</td>\n</tr>\n<tr>\n<td>深度克隆</td>\n<td align=\"left\">深复制把要复制的对象所引用的对象都复制了一遍</td>\n</tr>\n</tbody></table>\n<h3 id=\"6-1-浅克隆\"><a href=\"#6-1-浅克隆\" class=\"headerlink\" title=\"6.1 浅克隆\"></a>6.1 浅克隆</h3><p>&amp;emsp;&amp;emsp;被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。 Object类提供的方法clone&#x3D;只是拷贝本对象&#x3D; ， &#x3D;其对象内部的数组、引用对象等都不拷贝&#x3D; ，还是指向原生对象的内部元素地址.</p>\n<p>&amp;emsp;&amp;emsp;被克隆的对象必须Cloneable,Serializable这两个接口;</p>\n<pre><code class=\"java\">package com.bobo.prototype;\n\nimport java.io.Serializable;\nimport java.util.Date;\n\npublic class User implements Cloneable, Serializable &#123;\n\n    private String name;\n\n    private Date birth;\n\n    private int age;\n\n    /**\n     * 实现克隆的方法\n     * @return\n     * @throws CloneNotSupportedException\n     */\n    @Override\n    protected Object clone() throws CloneNotSupportedException &#123;\n        return super.clone();\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public Date getBirth() &#123;\n        return birth;\n    &#125;\n\n    public void setBirth(Date birth) &#123;\n        this.birth = birth;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public static void main(String[] args) throws Exception &#123;\n        // 创建一个普通对象\n        Date date =  new Date(666666);\n        User user = new User();\n        user.setName(&quot;波波烤鸭&quot;);\n        user.setAge(18);\n        user.setBirth(date);\n        System.out.println(&quot;原型对象的属性：&quot; + user);\n        // 克隆对象\n        User cloneUser = (User) user.clone();\n        System.out.println(&quot;克隆的对象的属性：&quot; + cloneUser);\n        // 修改原型对象的属性\n        date.setTime(12345677);\n        // 修改克隆对象的属性\n        cloneUser.setName(&quot;波哥&quot;);\n        System.out.println(&quot;原型对象的属性：&quot; + user);\n        System.out.println(&quot;克隆的对象的属性：&quot; + cloneUser);\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;User&#123;&quot; +\n                &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, birth=&quot; + birth +\n                &quot;, age=&quot; + age +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n<p>输出结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6443e2d851514225a9253ca8d26de73f.png\" alt=\"image.png\"></p>\n<p>浅克隆的问题:虽然产生了两个完全不同的对象，但是被复制的对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用都仍然指向原来的对象。<img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/05ad80babac04b43956010b8244cd85b.png\" alt=\"image.png\"></p>\n<h3 id=\"6-2-深度克隆\"><a href=\"#6-2-深度克隆\" class=\"headerlink\" title=\"6.2 深度克隆\"></a>6.2 深度克隆</h3><p>&amp;emsp;&amp;emsp;被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深复制把要复制的对象所引用的对象都复制了一遍。<br>实现的效果是:</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6fdf967a6fc74e8690b75e3bb3640b7c.png\" alt=\"image.png\"></p>\n<p>深度克隆(deep clone)有两种实现方式，第一种是在浅克隆的基础上实现，第二种是通过序列化和反序列化实现，我们分别来介绍</p>\n<p>方式一：在浅克隆的基础上实现</p>\n<pre><code class=\"java\">    /**\n     * 实现克隆的方法\n     * @return\n     * @throws CloneNotSupportedException\n     */\n    @Override\n    protected Object clone() throws CloneNotSupportedException &#123;\n        User user = (User) super.clone();\n        // 实现深度克隆\n        user.birth = (Date) this.birth.clone();\n        return user;\n    &#125;\n</code></pre>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/1ba148deb0244a4dbfef33a8f1b3bcbd.png\" alt=\"image.png\"></p>\n<p>方式二：序列化和反序列化</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>序列化</td>\n<td align=\"left\">把对象转换为字节序列的过程。</td>\n</tr>\n<tr>\n<td>反序列化</td>\n<td align=\"left\">把字节序列恢复为对象的过程。</td>\n</tr>\n</tbody></table>\n<pre><code class=\"java\">public static void main(String[] args) throws CloneNotSupportedException, Exception &#123;\n    Date date =  new Date(1231231231231l);\n    User user = new User();\n    user.setName(&quot;波波烤鸭&quot;);\n    user.setAge(18);\n    user.setBirth(date);\n    System.out.println(&quot;-----原型对象的属性------&quot;);\n    System.out.println(user);\n\n    //使用序列化和反序列化实现深复制\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n    ObjectOutputStream    oos = new ObjectOutputStream(bos);\n    oos.writeObject(user);\n    byte[] bytes = bos.toByteArray();\n\n    ByteArrayInputStream  bis = new ByteArrayInputStream(bytes);\n    ObjectInputStream\t  ois = new ObjectInputStream(bis);\n\n    //克隆好的对象！\n    User user1 = (User) ois.readObject();   \n\n    // 修改原型对象的值\n    date.setTime(221321321321321l);\n    System.out.println(user.getBirth());\n\n    System.out.println(&quot;------克隆对象的属性-------&quot;);\n    System.out.println(user1);\n&#125;\n</code></pre>\n<h2 id=\"7-谈谈你对创建型模式的理解\"><a href=\"#7-谈谈你对创建型模式的理解\" class=\"headerlink\" title=\"7.谈谈你对创建型模式的理解\"></a>7.谈谈你对创建型模式的理解</h2><p>&amp;emsp;&amp;emsp;Java的23种设计模式分为3类，分别是</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/e7bfebaff043483eae41837038342d60.png\" alt=\"image.png\"></p>\n<p>而创建型模式中有包含的如下的相关模式：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/370c67f33136431c8c3b4ab9f9e46445.png\" alt=\"image.png\"></p>\n<p>而每个设计模式的作用如下：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/19e2c33ad56e4b2cb22b3447fcf0e6a5.png\" alt=\"image.png\"></p>\n<h1 id=\"二、结构性模式\"><a href=\"#二、结构性模式\" class=\"headerlink\" title=\"二、结构性模式\"></a>二、结构性模式</h1><h2 id=\"1-代理模式\"><a href=\"#1-代理模式\" class=\"headerlink\" title=\"1.代理模式\"></a>1.代理模式</h2><h3 id=\"1-1-代理模式的作用\"><a href=\"#1-1-代理模式的作用\" class=\"headerlink\" title=\"1.1 代理模式的作用\"></a>1.1 代理模式的作用</h3><p>&amp;emsp;&amp;emsp;代理模式的作用是通过代理对象来增强目标对象的功能。利用的是AOP横切的思想。</p>\n<h3 id=\"1-2-代理模式的实现方式\"><a href=\"#1-2-代理模式的实现方式\" class=\"headerlink\" title=\"1.2 代理模式的实现方式\"></a>1.2 代理模式的实现方式</h3><p>&amp;emsp;&amp;emsp;代理模式的实现方式有三种：静态代理，动态代理(JDK动态代理和CGLIB动态代理)</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/ff3031b921b948338282ee57ee510c84.png\" alt=\"image.png\"></p>\n<h4 id=\"1-2-1-静态代理\"><a href=\"#1-2-1-静态代理\" class=\"headerlink\" title=\"1.2.1 静态代理\"></a>1.2.1 静态代理</h4><p>我们先声明接口和目标实现类</p>\n<pre><code class=\"java\">/**\n * 定义公共接口\n */\npublic interface SomeService &#123;\n    String doSome();\n&#125;\n</code></pre>\n<p>目标类</p>\n<pre><code class=\"java\">/**\n * 目标对象 target\n */\npublic class SomeServiceImpl implements SomeService &#123;\n    @Override\n    public String doSome() &#123;\n        System.out.println(&quot;目标对象：doSome()&quot; );\n        return &quot;hello ...&quot;;\n    &#125;\n&#125;\n</code></pre>\n<p>然后创建对应的代理类</p>\n<pre><code class=\"java\">/**\n * 代理类\n *     增强实现类\n *     和实现类实现同一个接口\n */\npublic class SomeProxy implements SomeService&#123;\n\n    private SomeService target;\n\n    public SomeProxy(SomeService target)&#123;\n        this.target = target;\n    &#125;\n\n    /**\n     * 增强的方法\n     * @return\n     */\n    @Override\n    public String doSome() &#123;\n        System.out.println(&quot;目标方法执行之前...&quot;);\n        String s = target.doSome();\n        System.out.println(&quot;目标方法执行之后...&quot;);\n        return s.toUpperCase();\n    &#125;\n&#125;\n</code></pre>\n<p>然后测试实现</p>\n<pre><code class=\"java\">public class MainTest &#123;\n    public static void main(String[] args) &#123;\n        SomeService some = new SomeServiceImpl();\n        SomeProxy proxy = new SomeProxy(some);\n        System.out.println(proxy.doSome());\n    &#125;\n&#125;\n</code></pre>\n<p>对应的输出结果</p>\n<pre><code class=\"java\">目标方法执行之前...\n目标对象：doSome()\n目标方法执行之后...\nHELLO ...\n</code></pre>\n<p>可以看到代理对象实现了目标对象的调用，同时增强了目标对象的功能。</p>\n<h4 id=\"1-2-2-JDK动态代理\"><a href=\"#1-2-2-JDK动态代理\" class=\"headerlink\" title=\"1.2.2 JDK动态代理\"></a>1.2.2 JDK动态代理</h4><p>&amp;emsp;&amp;emsp;上面的静态代理我们需要手动的创建一个对应的代理来实现，不是太灵活，针对目标对象有实现相关接口的情况，我们可以使用JDK动态代理。</p>\n<pre><code class=\"java\">public class JdkDynamicProxy &#123;\n\n    /**\n     * JDK动态代理：目标对象必须实现相关的接口\n     * @param args\n     */\n    public static void main(String[] args) &#123;\n        SomeService target = new SomeServiceImpl();\n        SomeService proxy = (SomeService) Proxy.newProxyInstance(JdkDynamicProxy.class.getClassLoader(), // 类加载器\n                target.getClass().getInterfaces() // 目标对象实现的相关接口\n                , new InvocationHandler() &#123; // 代理对象的回调方法\n                    @Override\n                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;\n                        System.out.println(&quot;before...&quot;);\n                        Object invoke = method.invoke(target, args);\n                        System.out.println(&quot;end...&quot;);\n                        if (invoke != null) &#123;\n                            return invoke.toString().toUpperCase();\n                        &#125;\n                        return null;\n                    &#125;\n                &#125;);\n        // 通过代理对象来执行\n        System.out.println(&quot;proxy.doSome() = &quot; + proxy.doSome());\n\n    &#125;\n&#125;\n</code></pre>\n<p>输出结构</p>\n<pre><code>before...\n目标对象：doSome()\nend...\nproxy.doSome() = HELLO ...\n</code></pre>\n<h4 id=\"1-2-3-CGLIB动态代理\"><a href=\"#1-2-3-CGLIB动态代理\" class=\"headerlink\" title=\"1.2.3 CGLIB动态代理\"></a>1.2.3 CGLIB动态代理</h4><p>&amp;emsp;&amp;emsp;如果目标对象实现了对应的接口我们可以通过JDK动态代理的方式来实现，但如果目标对象没有实现任何的接口，这时我们只能通过CGLIB动态代理来实现了，这时我们需要单独引入cglib的依赖</p>\n<pre><code class=\"java\">public class CGLIBDynamicProxy &#123;\n\n    /**\n     * CGLIB动态代理\n     * @param args\n     */\n    public static void main(String[] args) &#123;\n        SomeService target = new SomeServiceImpl();\n        SomeServiceImpl proxy = new MethodInterceptor() &#123;\n\n            /**\n             * 创建 CGLIB 代理对象的方法\n             * @return\n             */\n            public SomeServiceImpl createProxy() &#123;\n                // 创建增强器\n                Enhancer e = new Enhancer();\n                // 指定父类\n                e.setSuperclass(target.getClass());\n                // 指定回调接口对象\n                e.setCallback(this);\n                // 创建CGLIB代理对象\n                return (SomeServiceImpl) e.create();\n            &#125;\n\n            /**\n             * 拦截回调的方法\n             */\n            @Override\n            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &#123;\n                System.out.println(&quot;cglib -- befor&quot; );\n                Object res = method.invoke(target, args);\n                System.out.println(&quot;cglib -- end&quot;);\n                return res.toString().toUpperCase();\n            &#125;\n        &#125;.createProxy();\n        System.out.println(&quot;proxy.doSome() = &quot; + proxy.doSome());\n    &#125;\n&#125;\n</code></pre>\n<p>输出的结果</p>\n<pre><code>cglib -- befor\n目标对象：doSome()\ncglib -- end\nproxy.doSome() = HELLO ...\n</code></pre>\n<h2 id=\"2-适配器模式\"><a href=\"#2-适配器模式\" class=\"headerlink\" title=\"2.适配器模式\"></a>2.适配器模式</h2><h3 id=\"2-1-适配器的作用\"><a href=\"#2-1-适配器的作用\" class=\"headerlink\" title=\"2.1 适配器的作用\"></a>2.1 适配器的作用</h3><p>&amp;emsp;&amp;emsp;适配器模式的作用是把两个不兼容的对象通过适配器能够连接起来工作。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/4f1b8160dfaf4de6816c2d7bc7c79ed3.png\" alt=\"image.png\"></p>\n<h3 id=\"2-2-具体案例分析\"><a href=\"#2-2-具体案例分析\" class=\"headerlink\" title=\"2.2 具体案例分析\"></a>2.2 具体案例分析</h3><p>&amp;emsp;&amp;emsp;以MyBatis中的日志模块为例来介绍。常见的日志框架有log4j,log4j2,slf4j,logbak等，但是每种日志框架中的日志级别都有差异。</p>\n<p>log4j2的接口：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/97882ce34e7c45b38a242335fee35136.png\" alt=\"image.png\"></p>\n<p>slf4j的接口</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/2e0b96e4f72b4d4cb1da9ef190e06f7e.png\" alt=\"image.png\"></p>\n<p>也就是可以看到不同的日志框架里面所定义的日志级别和对应的方法都有区别，那么我们的框架怎么来统一使用这些日志框架呢？在MyBatis中通过定义了一个日志接口，定义了日志具有的级别和方法。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/13b885d6a2e742c8902a41cca65a77f3.png\" alt=\"image.png\"></p>\n<p>那这时候我们就发现具体的日志框架和这个接口其实是没有办法直接来使用的。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/5394d7aab0b9407bb44e7a43b5a46c35.png\" alt=\"image.png\"></p>\n<p>这时我们就需要通过对应的适配器来处理这种情况，以Slf4J为例。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/cc1a1999be144995bbdfd0d52af15aa1.png\" alt=\"image.png\"></p>\n<h2 id=\"3-装饰者模式\"><a href=\"#3-装饰者模式\" class=\"headerlink\" title=\"3.装饰者模式\"></a>3.装饰者模式</h2><h3 id=\"3-1-装饰者模式的作用\"><a href=\"#3-1-装饰者模式的作用\" class=\"headerlink\" title=\"3.1 装饰者模式的作用\"></a>3.1 装饰者模式的作用</h3><p>&amp;emsp;&amp;emsp;装饰者模式又称为包装模式(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1XcmFwcGVyJnNwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">Wrapper</span>),作用是用来动态的为一个对象增加新的功能。装饰模式是一种用于代替继承的技术， 无须通过继承增加子类就能扩展对象的新功能 。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/3d6542b45adc4fc1954b5a32e0cefe0b.png\" alt=\"image.png\"></p>\n<h3 id=\"3-2-装饰者模式的应用\"><a href=\"#3-2-装饰者模式的应用\" class=\"headerlink\" title=\"3.2 装饰者模式的应用\"></a>3.2 装饰者模式的应用</h3><p>&amp;emsp;&amp;emsp;装饰者模式的应用场景还是非常多的，比如</p>\n<ul>\n<li>IO流中的FileInputStream，FileOutputStream等</li>\n<li>Spring中的各种Wrapper</li>\n<li>MyBatis中的缓存设计</li>\n</ul>\n<p>我们以MyBatis中的缓存实例为例来看看其具体的实现。</p>\n<p>首先是Cache接口</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/4fd123c411d44b9b9be4b6fc042cd1a0.png\" alt=\"image.png\"></p>\n<p>然后是PerpetualCache实现：仅仅实现了数据基于内存的读写操作。功能单一。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/64a1d022065f46d5ad8f05fa0a884130.png\" alt=\"image.png\"></p>\n<p>装饰类：然后在MyBatis中给我们提供了很多的装饰类。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/b6a6d87b24bb40d08c86267957622a18.png\" alt=\"image.png\"></p>\n<p>每个装饰类都有自己的作用</p>\n<ul>\n<li>BlockingCache：阻塞的</li>\n<li>LruCache:根据Lru规则来淘汰缓存数据</li>\n<li>FifoCache：根据FIFO规则来淘汰缓存数据</li>\n<li>….</li>\n</ul>\n<p>源码中的装饰：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/15cfb22ba61c4fc9a3c0ee7db595d8b7.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/7379277ae49d422cbfe571f0852af446.png\" alt=\"image.png\"></p>\n<table>\n<thead>\n<tr>\n<th>比较</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>优点</td>\n<td align=\"left\">1. 扩展对象功能，比继承灵活，不会导致类个数急剧增加&amp;#x3c;br &#x2F;&gt;2. 可以对一个对象进行多次装饰,创造出不同行为的组合,得到功能更加强大的对象&amp;#x3c;br &#x2F;&gt;3. 具体构建类和具体装饰类可以独立变化,&amp;#x3c;br &#x2F;&gt;用户可以根据需要自己增加新的具体构件子类和具体装饰子类。</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td align=\"left\">1.  产生很多小对象。大量小对象占据内存，一定程度上影响性能。&amp;#x3c;br &#x2F;&gt;2. 装饰模式易于出错，调试排查比较麻烦。</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-组合模式\"><a href=\"#4-组合模式\" class=\"headerlink\" title=\"4.组合模式\"></a>4.组合模式</h2><h3 id=\"4-1-组合模式的作用\"><a href=\"#4-1-组合模式的作用\" class=\"headerlink\" title=\"4.1 组合模式的作用\"></a>4.1 组合模式的作用</h3><p>&amp;emsp;&amp;emsp;其实解决的是对象与对象之间的包含关系。也就是 部分-整体 的层次结构。</p>\n<h3 id=\"4-2-组合模式的应用\"><a href=\"#4-2-组合模式的应用\" class=\"headerlink\" title=\"4.2 组合模式的应用\"></a>4.2 组合模式的应用</h3><p>&amp;emsp;&amp;emsp;组合模式在配置文件的加载解析中其实会用的相对比较多。以SpringSecurity的配置文件为例</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/451caf5510724dbdb8781edc504a3108.png\" alt=\"image.png\"></p>\n<p>上面是具体的定义</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/225305de9e79499b9858fdf0954bee43.png\" alt=\"image.png\"></p>\n<p>应用</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/f27879a6ed534ecda344e3c8033e8b66.png\" alt=\"image.png\"></p>\n<h2 id=\"5-门面模式\"><a href=\"#5-门面模式\" class=\"headerlink\" title=\"5.门面模式\"></a>5.门面模式</h2><p>&amp;emsp;&amp;emsp;门面模式也称为外观模式，他隐藏了系统的复杂性，并向客户端提供了一个可以访问系统的接口。这种类型的设计模式属于结构性模式。为子系统中的一组接口提供了一个统一的访问接口，这个接口使得子系统更容易被访问或者使用。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/d7cbb356c586445cbae588a9c6944c48.png\" alt=\"image.png\"></p>\n<p>&amp;emsp;&amp;emsp;具体的例子比如：MyBatis中的SqlSession接口，对外提供了数据库操作的相关功能，具体的实现细节对调用者是隐藏的，这种模式在实际项目和框架中很频繁</p>\n<h2 id=\"6-桥接模式\"><a href=\"#6-桥接模式\" class=\"headerlink\" title=\"6.桥接模式\"></a>6.桥接模式</h2><p>&amp;emsp;&amp;emsp;桥接模式的出现是替代掉多层继承的问题。提高了系统的扩展性。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/689902586ed3400e808b3cdaf88a93de.png\" alt=\"image.png\"></p>\n<p>具体的应用比如JDBC中的DriverManager其实有用到桥接模式，不同的数据库厂商对应不同的驱动和连接</p>\n<h2 id=\"7-享元模式\"><a href=\"#7-享元模式\" class=\"headerlink\" title=\"7.享元模式\"></a>7.享元模式</h2><p>&amp;emsp;&amp;emsp;这个问题相对来说比较冷门，用到的也比较少，主要是针对内存这块的节省处理，如果有很多个完全相同或相似的对象，我们可以通过享元模式，节省内存.</p>\n<p>享元模式以共享的方式高效地支持大量细粒度对象的重用。</p>\n<p>享元对象能做到共享的关键是区分了内部状态和外部状态。<br>•  <strong>内部状态</strong> ：可以共享，不会随环境变化而改变<br>•  <strong>外部状态</strong> ：不可以共享，会随环境变化而改变</p>\n<p>比如以围棋为例:</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/ed27059ad63b4d408568033cd3d18998.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/d2cd6a9f545e4f09af78a4e4f3c09677.png\" alt=\"image.png\"></p>\n<h1 id=\"三、行为型模式\"><a href=\"#三、行为型模式\" class=\"headerlink\" title=\"三、行为型模式\"></a>三、行为型模式</h1><p>&amp;emsp;&amp;emsp;行为型模式关注的是对象之间的通信，也就是描述多个类或者对象之间，通过协作共同完成一个任务。主要涉及的是 <strong>对象</strong> 和 <strong>算法</strong>之间职责的分配。</p>\n<p>行为型模式分为两类：</p>\n<ul>\n<li>类行为模式： 通过继承机制来在类间分派行为。 主要是通过多态来分配父类和子类的职责</li>\n<li>对象行为模式： 通过组合或聚合，在对象间分派行为。通过对象关联等方式来分配类的职责。</li>\n</ul>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/44e5adf5c4a2487584f3b072b4a19d8a.png\" alt=\"image.png\"></p>\n<h2 id=\"1-解释器模式\"><a href=\"#1-解释器模式\" class=\"headerlink\" title=\"1.解释器模式\"></a>1.解释器模式</h2><h3 id=\"1-1-解释器模式的作用\"><a href=\"#1-1-解释器模式的作用\" class=\"headerlink\" title=\"1.1 解释器模式的作用\"></a>1.1 解释器模式的作用</h3><p>&amp;emsp;&amp;emsp;解释器模式在业务开发面是很少接触到的。主要的作用是定义的解释器来解析各种表达式，比如SQL语句，SPEL表达式，权限注解中的表达式 hasAnyRole(‘ROLE_ADMIN’)等。</p>\n<h3 id=\"1-2-解释器的应用\"><a href=\"#1-2-解释器的应用\" class=\"headerlink\" title=\"1.2 解释器的应用\"></a>1.2 解释器的应用</h3><p>&amp;emsp;&amp;emsp;比较常见的应用比如Spring中的针对SPEL表达式做的解析处理</p>\n<pre><code class=\"java\">    public static void main(String[] args) &#123;\n        SpelExpressionParser parser = new SpelExpressionParser();\n        Expression expression = parser.parseExpression(&quot;500-100*2+60&quot;);\n        Object value = expression.getValue();\n        System.out.println(&quot;value = &quot; + value);\n    &#125;\n</code></pre>\n<h2 id=\"2-模板模式\"><a href=\"#2-模板模式\" class=\"headerlink\" title=\"2.模板模式\"></a>2.模板模式</h2><h3 id=\"2-1-模板模式的作用\"><a href=\"#2-1-模板模式的作用\" class=\"headerlink\" title=\"2.1 模板模式的作用\"></a>2.1 模板模式的作用</h3><p>&amp;emsp;&amp;emsp;模板模式是一种相对简单的设计模式。作用是在父类中固定程序的执行顺序，具体的实现在子类中实现。比如银行定义每个人去银行开户的流程，</p>\n<ol>\n<li>取号</li>\n<li>填写单子</li>\n<li>等待</li>\n<li>办理业务</li>\n<li>结束</li>\n</ol>\n<p>然后每个人来开户都会走这个流程，只是每个人的具体操作内容会有区别</p>\n<h3 id=\"2-2-模板模式的应用\"><a href=\"#2-2-模板模式的应用\" class=\"headerlink\" title=\"2.2 模板模式的应用\"></a>2.2 模板模式的应用</h3><p>&amp;emsp;&amp;emsp;模板模式的应用就比较多如下：</p>\n<ol>\n<li>Servlet中的doGet和doPost方法</li>\n<li>Spring中的JdbcTemplate</li>\n<li>MyBatis中的Executor处理</li>\n<li>…..</li>\n</ol>\n<h2 id=\"3-责任链模式\"><a href=\"#3-责任链模式\" class=\"headerlink\" title=\"3.责任链模式\"></a>3.责任链模式</h2><h3 id=\"3-1-责任链模式的作用\"><a href=\"#3-1-责任链模式的作用\" class=\"headerlink\" title=\"3.1 责任链模式的作用\"></a>3.1 责任链模式的作用</h3><p>&amp;emsp;&amp;emsp;将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象处理。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/4c895e3c35f0466b8832bfaf6d4aa9f2.png\" alt=\"image.png\"></p>\n<h3 id=\"3-2-责任链模式的应用\"><a href=\"#3-2-责任链模式的应用\" class=\"headerlink\" title=\"3.2 责任链模式的应用\"></a>3.2 责任链模式的应用</h3><p>&amp;emsp;&amp;emsp;责任链模式的应用场景比较多，对大家来说印象比较深刻的应该是SpringSecurity中的处理请求的过滤器链了。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/627ec42ef657483289810bcd60d202d4.png\" alt=\"image.png\"></p>\n<p>&amp;emsp;&amp;emsp;可以和面试官具体聊下SpringSecurity中的这块设计。当然还有一些其他的也可聊比如：</p>\n<ol>\n<li>Java中，异常机制就是一种责任链模式。一个try可以对应多个catch，当第一个catch不匹配类型，则自动跳到第二个catch.</li>\n<li>Javascript语言中，事件的冒泡和捕获机制。Java语言中，事件的处理采用观察者模式。</li>\n<li>SpringMVC中，拦截器的调用也是典型的责任链模式</li>\n<li>同样的Servlet中的过滤器链同样是责任链模式的实现。</li>\n</ol>\n<h2 id=\"4-观察者模式\"><a href=\"#4-观察者模式\" class=\"headerlink\" title=\"4.观察者模式\"></a>4.观察者模式</h2><h3 id=\"4-1-观察者模式的作用\"><a href=\"#4-1-观察者模式的作用\" class=\"headerlink\" title=\"4.1 观察者模式的作用\"></a>4.1 观察者模式的作用</h3><p>&amp;emsp;&amp;emsp;建立对象与对象之间的依赖关系，一个对象发生改变时，会自动通知其他对象。这个场景中，发生改变的对象被称为观察目标，被通知的对象称为观察者。一个观察目标可以有多个观察者，而这些观察者之间可以没有联系，可以根据需要增加或删除观察者。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/28ad3ed5e28f41a69a490ee02fa0bb25.png\" alt=\"image.png\"></p>\n<h3 id=\"4-2-观察者模式的应用\"><a href=\"#4-2-观察者模式的应用\" class=\"headerlink\" title=\"4.2 观察者模式的应用\"></a>4.2 观察者模式的应用</h3><p>&amp;emsp;&amp;emsp;观察者模式在Java编程中用到最多的可能就是事件模块的处理，可以和面试官详细的聊下Spring的事件管理机制或者SpringBoot的事件处理机制。我们以SpringBoot的事件机制为例来说明</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTI2NTczL2FydGljbGUvZGV0YWlscy8xMjIxNDMyNTg=\">https://blog.csdn.net/qq_38526573/article/details/122143258</span> 单独通过一篇文章来说明事件的本质。</p>\n<h2 id=\"5-策略模式\"><a href=\"#5-策略模式\" class=\"headerlink\" title=\"5.策略模式\"></a>5.策略模式</h2><h3 id=\"5-1-策略模式的作用\"><a href=\"#5-1-策略模式的作用\" class=\"headerlink\" title=\"5.1 策略模式的作用\"></a>5.1 策略模式的作用</h3><p>&amp;emsp;&amp;emsp;策略模式的作用就是我们想要实现某个目的，实现的方式可以有很多种，那么这里的每一种实现方式都可以称为一种策略。比如：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/22ad4a07e93c4074ac60ae1c7924452a.png\" alt=\"image.png\"></p>\n<p>&amp;emsp;&amp;emsp;我们可以将每一种交通方式都封装为一个独立的类，这就是一种策略。为了保证策略的一致性，还可以用一个抽象的交通方式类 来 做交通方式的定义。</p>\n<h3 id=\"5-2-策略模式的应用\"><a href=\"#5-2-策略模式的应用\" class=\"headerlink\" title=\"5.2 策略模式的应用\"></a>5.2 策略模式的应用</h3><p>&amp;emsp;&amp;emsp;策略模式在实际开发中用到的同样会比较多。</p>\n<ol>\n<li>AOP 中根据不同的策略可以通过JDK动态代理或者CGLIB代理来创建代理对象</li>\n<li>Spring框架中的Resources接口，资源访问的策略</li>\n<li>Servlet中的service方法，会根据客户端的不同提交方式来调用对应的doGet或者doPost方法来处理请求</li>\n<li>Shiro中的多Realm认证中，根据我们不同的配置可以使用所有Realm认证通过或者其中一个认证通过等</li>\n<li>SpringSecurity中的Authentication对象的存储方式</li>\n<li>…….</li>\n</ol>\n<h2 id=\"6-迭代器模式\"><a href=\"#6-迭代器模式\" class=\"headerlink\" title=\"6.迭代器模式\"></a>6.迭代器模式</h2><h3 id=\"6-1-迭代器模式的作用\"><a href=\"#6-1-迭代器模式的作用\" class=\"headerlink\" title=\"6.1 迭代器模式的作用\"></a>6.1 迭代器模式的作用</h3><p>场景：访问聚合对象中的各个元素的时候，比如链表的遍历。我们一般是将遍历的方法也放在链表类中。但是如果需要修改遍历方法，就需要修改链表类的代码，违背了开闭原则。</p>\n<p>迭代器模式就是在客户访问和聚合类之间插入一个迭代器，这样就将<strong>聚合对象</strong> 和 <strong>遍历方法</strong>解耦了，并且对外隐藏其实现细节。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/8a9095d4fbe04245b476ca16250ab2eb.png\" alt=\"image.png\"></p>\n<h3 id=\"6-2-迭代器模式的应用\"><a href=\"#6-2-迭代器模式的应用\" class=\"headerlink\" title=\"6.2 迭代器模式的应用\"></a>6.2 迭代器模式的应用</h3><ol>\n<li>JDK中的List&#x2F;Set集合中的迭代器</li>\n<li>……</li>\n</ol>\n<h2 id=\"7-中介者模式\"><a href=\"#7-中介者模式\" class=\"headerlink\" title=\"7.中介者模式\"></a>7.中介者模式</h2><h3 id=\"7-1-中介则模式的作用\"><a href=\"#7-1-中介则模式的作用\" class=\"headerlink\" title=\"7.1 中介则模式的作用\"></a>7.1 中介则模式的作用</h3><p>&amp;emsp;&amp;emsp;对象之间具有很强的关联性，而且有大量的相互调用，这种情况下，如果一个对象发生了变化，就需要追踪该对象关联的其他对象，并进行相应的处理，这就变得很复杂。而中介者模式，就是用一个中介者对象来封装一系列的对象交互，中介者使各对象不需要显式的相互引用，这就使得系统变得低耦合。比如：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/bfe0f0f3fbff44e7ad83bc64c9637758.png\" alt=\"image.png\"></p>\n<p>假如没有总经理。下面三个部门：财务部、市场部、研发部。财务部要发工资，让大家核对公司需要跟市场部和研发部都通气；市场部要接个新项目，需要研发部处理技术、需要财务部出资金。市场部跟各个部门打交道。 虽然只有三个部门，但是关系非常乱。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/af819fcb665d4aacacc4af386c9b3f8e.png\" alt=\"image.png\"></p>\n<p>实际上，公司都有总经理。各个部门有什么事情都通报到总经理这里，总经理再通知各个相关部门。</p>\n<h3 id=\"7-2-中介则模式的应用\"><a href=\"#7-2-中介则模式的应用\" class=\"headerlink\" title=\"7.2 中介则模式的应用\"></a>7.2 中介则模式的应用</h3><ol>\n<li>MVC模式中的C，控制器就是一个中介者对象，M和V都和C打交道</li>\n<li>代理对象中的invoke方法，客户端和目标对象都是通过invoke来打交到的。</li>\n<li>…..</li>\n</ol>\n<h2 id=\"8-状态模式\"><a href=\"#8-状态模式\" class=\"headerlink\" title=\"8.状态模式\"></a>8.状态模式</h2><p>场景： 如果一个对象的行为会根据 其某个属性的变化而不同，那这个属性就可以被称为该对象的状态。这样的对象也被称为有状态对象（stateful）。如果这样的对象因为某些事件，其内部状态发生了改变，那么系统的行为也要随之发生变化的话，就可以使用状态模式。</p>\n<h2 id=\"9-命令模式\"><a href=\"#9-命令模式\" class=\"headerlink\" title=\"9.命令模式\"></a>9.命令模式</h2><p>场景：请求的发送者和接收者之间解耦，让对象之间的调用关系更加灵活。发送者和接收者之间没有直接的引用关系，发送请求的对象只需要知道如何发送，而不必关心如何完成请求。</p>\n<h2 id=\"10-备忘录模式\"><a href=\"#10-备忘录模式\" class=\"headerlink\" title=\"10.备忘录模式\"></a>10.备忘录模式</h2><p>场景：记录一个对象的内部状态，当用户后悔时能撤销当前的操作，是数据恢复到它原来的状态。比如我们编程的时候，ctrl+z 就是撤销当前操作，恢复到修改前的状态。又叫快照模式。</p>\n<h2 id=\"11-访问者模式\"><a href=\"#11-访问者模式\" class=\"headerlink\" title=\"11.访问者模式\"></a>11.访问者模式</h2><p>场景：有些集合对象中会有多种不同的元素，每种元素都有不同的访问者 和 处理方式。这种被处理的数据元素相对稳定，但是处理方式比较多样的情况，可以用访问者模式来处理。</p>\n<p>访问者模式将数据结构中的各元素的操作分离出来，封装成独立的类，使其在不改变数据结构的前提下，可以添加作用于这些元素的新操作。为数据结构中的每个元素提供多种访问方式。</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": []
        }
    ]
}