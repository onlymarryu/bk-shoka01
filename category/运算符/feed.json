{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"运算符\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC3%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC3%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "title": "第3章_运算符",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"Java中的运算符\"><a href=\"#Java中的运算符\" class=\"headerlink\" title=\"Java中的运算符\"></a>Java中的运算符</h1><p>【1】Java 语言支持如下运算符：</p>\n<ul>\n<li>算术运算符</li>\n</ul>\n<p>+，-，*，&#x2F;，%，++（自增），–（自减）</p>\n<ul>\n<li>赋值运算符</li>\n</ul>\n<p>&#x3D;</p>\n<ul>\n<li>扩展赋值运算符</li>\n</ul>\n<p>+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;</p>\n<ul>\n<li>关系运算符</li>\n</ul>\n<p>&gt;，&lt;，&gt;&#x3D;，&lt;&#x3D;，&#x3D;&#x3D;，!&#x3D;</p>\n<ul>\n<li>逻辑运算符</li>\n</ul>\n<p>&amp;，|， &amp;&amp;，||，!，^</p>\n<ul>\n<li>位运算符</li>\n</ul>\n<p>&amp;，|，^，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt; (了解！！！)</p>\n<ul>\n<li>条件运算符</li>\n</ul>\n<p>？：</p>\n<p>【2】相关概念辨析</p>\n<p>+ 运算符 操作符 Operator</p>\n<p>5+6 表达式 expression</p>\n<p>5 6 操作数 Operand</p>\n<p>int m &#x3D;5+6; 语句 Sentence</p>\n<h1 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h1><h2 id=\"x2F-和\"><a href=\"#x2F-和\" class=\"headerlink\" title=\"&#x2F;和%\"></a>&#x2F;和%</h2><p>【1】&#x2F; 除法运算符 ： 表示两个数相除运算</p>\n<p>% 取余运算符： 用来求余数的</p>\n<pre><code class=\"java\">public class TestOpe01&#123;\n\n    public static void main(String[] args)&#123;\n\n        //打印结果：\n\n        System.out.println(12/3);\n\n        System.out.println(12%5);\n\n        System.out.println(12/3.0);\n\n        System.out.println(12%5.0);\n\n    &#125;\n\n&#125;\n</code></pre>\n<p>【2】练习：</p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class TestOpe02&#123;\n\n    public static void main(String[] args)&#123;\n\n        //实现功能：任意给出一个四位数，求出每位上的数字并输出\n\n        \n\n        //1.任意给出一个四位数：\n\n        Scanner input = new Scanner(System.in);\n\n        System.out.println(&quot;请录入一个四位数：&quot;);\n\n        int num = input.nextInt();\n\n        \n\n        \n\n        //2.求出每位上的数字：\n\n        //个位数：\n\n        int num1 = num%10;\n\n        //十位数：\n\n        int num2 = num/10%10;//1234---\\&gt;123---\\&gt;3\n\n        //百位数：\n\n        int num3 = num/100%10;//1234---\\&gt;12---\\&gt;2\n\n        //千位数：\n\n        int num4 = num/1000;//1234---\\&gt;1\n\n        \n\n        \n\n        //3.输出每位上的数字：\n\n        System.out.println(&quot;个位上的数为：&quot;+num1);\n\n        System.out.println(&quot;十位上的数为：&quot;+num2);\n\n        System.out.println(&quot;百位上的数为：&quot;+num3);\n\n        System.out.println(&quot;千位上的数为：&quot;+num4);\n\n    &#125;\n\n    \n\n&#125;\n</code></pre>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"+\"></a>+</h2><p>【1】+的作用：</p>\n<p>（1）表示正数</p>\n<p>（2）表示相加操作</p>\n<p>（3）进行字符串的拼接</p>\n<p>【2】代码练习：</p>\n<pre><code class=\"java\">public class TestOpe03&#123;\n\n    public static void main(String[] args)&#123;\n\n        //表示正数：\n\n        System.out.println(+5);//5\n\n        //相加操作：\n\n        System.out.println(5+6);//11\n\n        System.out.println(5+&#39;6&#39;);//59\n\n        //字符串的拼接：\n\n        //规则：+左右两侧的任意一侧有字符串，那么这个加号就是字符串拼接的作用，结果一定是字符串\n\n        int num = 56;\n\n        System.out.println(&quot;num=&quot;+num);//&quot;num=56&quot; ---\\&gt; num=56\n\n        System.out.println(5+6+&quot;7&quot;);//11+&quot;7&quot;---\\&gt;&quot;117&quot; ---\\&gt;117\n\n        System.out.println(5+&#39;6&#39;+&quot;7&quot;);//59 +&quot;7&quot;---\\&gt;&quot;597&quot; ---\\&gt;597\n\n        System.out.println(&quot;5&quot;+6+&quot;7&quot;);//&quot;56&quot;+&quot;7&quot; ---\\&gt;&quot;567&quot;---\\&gt;567\n\n        System.out.println(&quot;5&quot;+&#39;6&#39;+&quot;7&quot;);//&quot;56&quot;+&quot;7&quot;---\\&gt;&quot;567&quot;---\\&gt;567\n\n        System.out.println(&quot;5&quot;+&#39;6&#39;+&#39;7&#39;);//&quot;56&quot;+&#39;7&#39;---\\&gt;&quot;567&quot;---567\n\n    &#125;\n\n&#125;\n</code></pre>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"++\"></a>++</h2><p>【1】++：</p>\n<pre><code class=\"java\">public class TestOpe04&#123;\n\n    public static void main(String[] args)&#123;\n\n        int a = 5;\n\n        a++;//理解为：相当于 a=a+1 操作\n\n        System.out.println(a);//6\n\n        \n\n        a = 5;\n\n        \\++a;//理解为：相当于 a=a+1 操作\n\n        System.out.println(a); //6\n\n        \n\n        //总结：++单独使用的时候，无论放在前还是后，都是加1操作\n\n        \n\n        //将++参与到运算中：\n\n        //规则：看++在前还是在后，如果++在后：先运算，后加1 如果++在前，先加1，后运算\n\n        a = 5;\n\n        int m = a++ + 7;//先运算 m=a+7 再加1： a = a+1\n\n        System.out.println(m);//12\n\n        System.out.println(a);//6\n\n        \n\n        a = 5;\n\n        int n = ++a + 7;//先加1 a=a+1 再运算： n = a+7\n\n        System.out.println(n);//13\n\n        System.out.println(a);//6\n\n    &#125;\n\n&#125;\n</code></pre>\n<p>无论这个变量是否参与到运算中去，只要用++运算符，这个变量本身就加1操作</p>\n<p>只是说如果变量参与到运算中去的话，对运算结果是产生影响：</p>\n<p>看++在前还是在后，如果++在后：先运算，后加1 如果++在前，先加1，后运算</p>\n<p>【2】练习：</p>\n<pre><code class=\"java\">public class TestOpe05&#123;\n\n    public static void main(String[] args)&#123;\n\n        int a = 5;\n\n        System.out.println(a++ + a++);\n\n        System.out.println(a++ + ++a);\n\n        System.out.println(++a + a++);\n\n        System.out.println(++a + ++a);\n\n    &#125;\n\n&#125;\n</code></pre>\n<p>运算过程：</p>\n\n\n\n<h1 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h1><p>【1】&#x3D;的作用： 将等号右侧的值赋给等号左侧：</p>\n<p>int age &#x3D; 19;</p>\n<p>int age &#x3D; 10+3+8;</p>\n<p>【2】练习：</p>\n<pre><code class=\"java\">public class TestOpe06&#123;\n    public static void main(String[] args)&#123;\n        //任意给出两个数，交换两个数并输出：\n        //1.给出两个数：\n        int num1 = 10;\n        int num2 = 20;\n        \n        //2.输出交换前的两个数：\n        System.out.println(&quot;交换前：&quot;+num1+&quot;\\\\t&quot;+num2);\n        \n        //3.交换\n        /\\*\n            错误代码：\n            num1 = num2;\n        num2 = num1;\n        \\*/\n            //解决办法：\n            //引入一个中间变量:\n            int t;\n        t = num1;\n        num1 = num2;\n        num2 = t;\n        /\\*\n            int t;\n        t = num2;\n        num2 = num1;\n        num1 = t;\n        \n        \\*/\n            \n            //4.输出交换后的两个数：\n            System.out.println(&quot;交换后：&quot;+num1+&quot;\\\\t&quot;+num2);\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<p>面试题：两个数交换的四种方式：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQnJhZC1MZWUvcC81ODA4Mjk5Lmh0bWw=\">https://www.cnblogs.com/Brad-Lee/p/5808299.html</span></p>\n<h1 id=\"扩展赋值运算符\"><a href=\"#扩展赋值运算符\" class=\"headerlink\" title=\"扩展赋值运算符\"></a>扩展赋值运算符</h1><p>【1】代码：</p>\n<pre><code class=\"java\">public class TestOpe07&#123;\n    public static void main(String[] args)&#123;\n        //实现功能：给出三个数，求和：\n        //1.给出三个数：\n        int num1 = 10;\n        int num2 = 20;\n        int num3 = 30;\n        //2.求和\n        //int sum = num1+num2+num3;\n        //定义一个变量，用来接收和：\n        int sum = 0;\n        sum = sum + num1;//等效： sum += num1;\n        sum = sum + num2;// sum += num2;\n        sum = sum + num3;//sum += num3;\n        //3.将和输出：\n        System.out.println(&quot;和：&quot;+sum);\n    &#125;\n&#125;\n</code></pre>\n<p>内存：</p>\n\n\n\n<p>【2】a+&#x3D;b 和 a&#x3D;a+b 区别：</p>\n<p>（1）a+&#x3D;b 可读性稍差 编译效率高 底层自动进行类型转换</p>\n<p>（2）a&#x3D;a+b 可读性好 编译效率低 手动进行类型转换</p>\n<p>【3】面试题</p>\n<p>（1）请问a+&#x3D;b相当于a&#x3D;a+b,那么也相当于 a&#x3D;b+a吗？</p>\n\n\n\n<p>（2）下面的代码哪一句出错： 4</p>\n<p>byte a &#x3D; 10; —&gt;1</p>\n<p>int b &#x3D; 20; —&gt;2</p>\n<p>a+&#x3D;b; —-&gt;3</p>\n<p>a &#x3D; a+b ;—-&gt;4</p>\n<p>更正： a &#x3D; (byte)(a+b);</p>\n<h1 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h1><pre><code class=\"java\">public class TestOpe08&#123;\n    public static void main(String[] args)&#123;\n        //\\&gt;，\\&lt;，\\&gt;=，\\&lt;=，==，!=\n        //关系运算符最终结果：要么是true要么是false\n        System.out.println(4\\&gt;9);//false\n        System.out.println(4\\&lt;9);//true\n        System.out.println(4\\&gt;=9);//false\n        System.out.println(4\\&lt;=9);//true\n        System.out.println(4==9);//false\n        System.out.println(4!=9);//true\n        System.out.println((5\\&lt;9)!=(6==8));//true\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h1><p>&amp;，|， &amp;&amp;，||，!，^</p>\n<p>逻辑运算符：进行逻辑运算的，运算符左右连接的都是 布尔类型的操作数，最终表达式的结果是布尔值：要么是true，要么false</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestOpe09&#123;\n    public static void main(String[] args)&#123;\n        // 逻辑与 ：&amp; 规律：只要有一个操作数是false，那么结果一定是false\n        System.out.println(true&amp;true);\n        System.out.println(true&amp;false);\n        System.out.println(false&amp;false);\n        System.out.println(false&amp;true);\n        \n        // 短路与：&amp;&amp; 规律：效率高一些，只要第一个表达式是false，那么第二个表达式就不用计算了，结果一定是false\n        System.out.println(true&amp;&amp;true);\n        System.out.println(true&amp;&amp;false);\n        System.out.println(false&amp;&amp;false);\n        System.out.println(false&amp;&amp;true);\n        \n        // 逻辑或：\\| 规律：只要有一个操作数是true，那么结果一定是true\n        System.out.println(true\\|true);\n        System.out.println(true\\|false);\n        System.out.println(false\\|false);\n        System.out.println(false\\|true);\n        \n        // 短路或：\\|\\| 规律：效率高一些，只要第一个表达式是true，那么第二个表达式就不用计算了，结果一定是true\n        System.out.println(true\\|\\|true);\n        System.out.println(true\\|\\|false);\n        System.out.println(false\\|\\|false);\n        System.out.println(false\\|\\|true);\n        \n        //逻辑非： ! 规律：相反结果\n        System.out.println(!true);//false\n        System.out.println(!false);//true\n        \n        //逻辑异或： \\^ 规律：两个操作数相同，结果为false，不相同，结果为true\n        System.out.println(true\\^true);\n        System.out.println(true\\^false);\n        System.out.println(false\\^false);\n        System.out.println(false\\^true);\n    &#125;\n&#125;\n</code></pre>\n<p>再做一个加深的练习：看代码 说结果：</p>\n<pre><code class=\"java\">public class TestOpe10&#123;\n    public static void main(String[] args)&#123;\n        int i=8;\n        System.out.println((5\\&gt;7)&amp;&amp;(i++==2)); //false\n        System.out.println(i); //8\n\n\n        int a=8;\n        System.out.println((5\\&gt;7)&amp;(a++==2)); //false\n        System.out.println(a); //9\n\n\n        int m=8;\n        System.out.println((5\\&lt;7)&amp;&amp;(m++==2)); //false\n        System.out.println(m); //9\n\n        int b=2;\n        System.out.println((5\\&lt;7)&amp;(b++==2)); //true\n        System.out.println(b); //3\n\n        int c=2;\n        System.out.println((5\\&lt;7)&amp;(++c==2)); //false\n        System.out.println(c); //3\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h1><p>【1】条件运算符：又称： 三元运算符&#x2F;三目运算符</p>\n<p>【2】格式：</p>\n<p>a?b:c</p>\n<p>其中a是一个布尔类型的表达式，返回结果要么是true要么false，通过a的结果决定最终表达式的结果:</p>\n<p>如果a的结果是true，那么表达式最终结果为b</p>\n<p>如果a的结果是false，那么表达式最终结果为c</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestOpe11&#123;\n    public static void main(String[] args)&#123;\n        int num = (5\\&gt;7)?6:9 ;\n        System.out.println(num);\n\n        String str = (4==4)?&quot;你好&quot;:&quot;你不好&quot; ;\n        System.out.println(str);\n\n        System.out.println((4==4)?&quot;你好&quot;:&quot;你不好&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>练习：</p>\n<ol>\n<li>import java.util.*;&#x2F;&#x2F;*代表所有</li>\n</ol>\n<pre><code class=\"java\"> public class TestOpe12&#123;\n public static void main(String[] args)&#123;\n //实现功能：男孩女孩选择晚饭吃什么，如果意见一致，听男生的，如果意见不一致，听女生的\n \n //1.要让男孩女孩选择晚饭吃什么：\n Scanner sc = new Scanner(System.in);\n System.out.println(&quot;请选择今晚吃什么：1.火锅 2.烧烤 3.麻辣烫 4.西餐&quot;);\n System.out.println(&quot;请男孩选择：&quot;);\n int boyChoice = sc.nextInt();\n System.out.println(&quot;请女孩选择：&quot;);\n int girlChoice = sc.nextInt();\n //2.判断：\n System.out.println(boyChoice==girlChoice?&quot;听男孩的&quot;:&quot;听女孩的&quot;);\n &#125;\n &#125;\n</code></pre>\n<p>PS:三目运算符可以代替后续我们要学习的if-else</p>\n<h1 id=\"位运算符-了解\"><a href=\"#位运算符-了解\" class=\"headerlink\" title=\"位运算符(了解)\"></a>位运算符(了解)</h1><p>位运算符：&amp;，|，^，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt;</p>\n<p>如何区分逻辑运算符和位运算符：</p>\n<p>逻辑运算符：左右连接的是布尔类型的操作数</p>\n<p>位运算符：左右连接的是具体的数值</p>\n<p>【1】&lt;&lt; 左移</p>\n<p>3&lt;&lt;2 &#x3D; 12</p>\n\n\n\n<p>面试题： 4乘以8最快的方式： 4&lt;&lt;3</p>\n<p>【2】&gt;&gt; 有符号右移</p>\n<p>6&gt;&gt;2 &#x3D; 1</p>\n\n\n\n<p>-6&gt;&gt;2 &#x3D; -2</p>\n\n\n\n<p>【3】&gt;&gt;&gt; 无符号右移：</p>\n<p>6&gt;&gt;&gt;2 &#x3D; 1</p>\n\n\n\n<p>【4】 &amp; 与</p>\n<p>6&amp;3 &#x3D; 2</p>\n\n\n\n<p>【5】| 或</p>\n<p>6|3&#x3D;7</p>\n\n\n\n<p>【6】^异或：</p>\n<p>6^3 &#x3D; 5</p>\n\n\n\n<p>【7】~反：</p>\n<p>~6 &#x3D; -7</p>\n\n\n\n<p>PS：</p>\n<p>byte类型的表数范围的 -128是怎么算出来的</p>\n<p>127： 01111111</p>\n<p>-128： 10000000</p>\n<p>一看就是个负数</p>\n<p>减1： 01111111</p>\n<p>取反： 10000000 —》2^7 &#x3D; 128</p>\n<p>加负号： -128</p>\n<h1 id=\"运算符总结\"><a href=\"#运算符总结\" class=\"headerlink\" title=\"运算符总结\"></a>运算符总结</h1>\n\n\n\n\n\n\n\n\n<h1 id=\"运算符的优先级别\"><a href=\"#运算符的优先级别\" class=\"headerlink\" title=\"运算符的优先级别\"></a>运算符的优先级别</h1>\n\n\n<p>不需要去刻意的记优先级关系</p>\n<p>赋值&lt;三目&lt;逻辑&lt;关系&lt;算术&lt;单目</p>\n<p>理解运算符的结合性</p>\n<p>PS:实际开发中我们不会写特别复杂的表达式，你要想先算谁就用()</p>\n<p>案例：</p>\n<p>5&lt;6 | &amp;apos;A&amp;apos;&gt;&amp;apos;a&amp;apos; &amp;&amp; 12*6&lt;&#x3D;45+23&amp;&amp;!true</p>\n<p>&#x3D;5&lt;6 | &amp;apos;A&amp;apos;&gt;&amp;apos;a&amp;apos; &amp;&amp; 12*6&lt;&#x3D;45+23&amp;&amp;false</p>\n<p>&#x3D; 5&lt;6 | &amp;apos;A&amp;apos;&gt;&amp;apos;a&amp;apos; &amp;&amp;72&lt;&#x3D;68&amp;&amp;false</p>\n<p>&#x3D; true|false&amp;&amp;false&amp;&amp;false</p>\n<p>&#x3D; true&amp;&amp;false&amp;&amp;false</p>\n<p>&#x3D;false&amp;&amp;false</p>\n<p>&#x3D;false</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}