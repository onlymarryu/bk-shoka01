<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>记录“美食”每刻 • Posts by &#34;运算符&#34; category</title>
        <link>http://example.com</link>
        <description>记录“美食”每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>分布式</category>
        <category>Dubbo</category>
        <category>FastDFS</category>
        <category>RPC</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>JavaSE</category>
        <category>-JavaSE</category>
        <category>框架</category>
        <category>ORM</category>
        <category>博客</category>
        <category>环境搭建</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>SpringMVC</category>
        <category>SpringSecurity</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/Java/%E7%AC%AC3%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
            <title>第3章_运算符</title>
            <link>http://example.com/2022/10/07/Java/%E7%AC%AC3%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
            <category>JavaSE</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Java中的运算符&#34;&gt;&lt;a href=&#34;#Java中的运算符&#34; class=&#34;headerlink&#34; title=&#34;Java中的运算符&#34;&gt;&lt;/a&gt;Java中的运算符&lt;/h1&gt;&lt;p&gt;【1】Java 语言支持如下运算符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+，-，*，&amp;#x2F;，%，++（自增），–（自减）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赋值运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展赋值运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+&amp;#x3D;，-&amp;#x3D;，*&amp;#x3D;，&amp;#x2F;&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关系运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;gt;，&amp;lt;，&amp;gt;&amp;#x3D;，&amp;lt;&amp;#x3D;，&amp;#x3D;&amp;#x3D;，!&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;amp;，|， &amp;amp;&amp;amp;，||，!，^&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;amp;，|，^，~ ， &amp;gt;&amp;gt;，&amp;lt;&amp;lt;，&amp;gt;&amp;gt;&amp;gt; (了解！！！)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;？：&lt;/p&gt;
&lt;p&gt;【2】相关概念辨析&lt;/p&gt;
&lt;p&gt;+ 运算符 操作符 Operator&lt;/p&gt;
&lt;p&gt;5+6 表达式 expression&lt;/p&gt;
&lt;p&gt;5 6 操作数 Operand&lt;/p&gt;
&lt;p&gt;int m &amp;#x3D;5+6; 语句 Sentence&lt;/p&gt;
&lt;h1 id=&#34;算术运算符&#34;&gt;&lt;a href=&#34;#算术运算符&#34; class=&#34;headerlink&#34; title=&#34;算术运算符&#34;&gt;&lt;/a&gt;算术运算符&lt;/h1&gt;&lt;h2 id=&#34;x2F-和&#34;&gt;&lt;a href=&#34;#x2F-和&#34; class=&#34;headerlink&#34; title=&#34;&amp;#x2F;和%&#34;&gt;&lt;/a&gt;&amp;#x2F;和%&lt;/h2&gt;&lt;p&gt;【1】&amp;#x2F; 除法运算符 ： 表示两个数相除运算&lt;/p&gt;
&lt;p&gt;% 取余运算符： 用来求余数的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe01&amp;#123;

    public static void main(String[] args)&amp;#123;

        //打印结果：

        System.out.println(12/3);

        System.out.println(12%5);

        System.out.println(12/3.0);

        System.out.println(12%5.0);

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】练习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;

public class TestOpe02&amp;#123;

    public static void main(String[] args)&amp;#123;

        //实现功能：任意给出一个四位数，求出每位上的数字并输出

        

        //1.任意给出一个四位数：

        Scanner input = new Scanner(System.in);

        System.out.println(&amp;quot;请录入一个四位数：&amp;quot;);

        int num = input.nextInt();

        

        

        //2.求出每位上的数字：

        //个位数：

        int num1 = num%10;

        //十位数：

        int num2 = num/10%10;//1234---\&amp;gt;123---\&amp;gt;3

        //百位数：

        int num3 = num/100%10;//1234---\&amp;gt;12---\&amp;gt;2

        //千位数：

        int num4 = num/1000;//1234---\&amp;gt;1

        

        

        //3.输出每位上的数字：

        System.out.println(&amp;quot;个位上的数为：&amp;quot;+num1);

        System.out.println(&amp;quot;十位上的数为：&amp;quot;+num2);

        System.out.println(&amp;quot;百位上的数为：&amp;quot;+num3);

        System.out.println(&amp;quot;千位上的数为：&amp;quot;+num4);

    &amp;#125;

    

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;+&#34;&gt;&lt;/a&gt;+&lt;/h2&gt;&lt;p&gt;【1】+的作用：&lt;/p&gt;
&lt;p&gt;（1）表示正数&lt;/p&gt;
&lt;p&gt;（2）表示相加操作&lt;/p&gt;
&lt;p&gt;（3）进行字符串的拼接&lt;/p&gt;
&lt;p&gt;【2】代码练习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe03&amp;#123;

    public static void main(String[] args)&amp;#123;

        //表示正数：

        System.out.println(+5);//5

        //相加操作：

        System.out.println(5+6);//11

        System.out.println(5+&amp;#39;6&amp;#39;);//59

        //字符串的拼接：

        //规则：+左右两侧的任意一侧有字符串，那么这个加号就是字符串拼接的作用，结果一定是字符串

        int num = 56;

        System.out.println(&amp;quot;num=&amp;quot;+num);//&amp;quot;num=56&amp;quot; ---\&amp;gt; num=56

        System.out.println(5+6+&amp;quot;7&amp;quot;);//11+&amp;quot;7&amp;quot;---\&amp;gt;&amp;quot;117&amp;quot; ---\&amp;gt;117

        System.out.println(5+&amp;#39;6&amp;#39;+&amp;quot;7&amp;quot;);//59 +&amp;quot;7&amp;quot;---\&amp;gt;&amp;quot;597&amp;quot; ---\&amp;gt;597

        System.out.println(&amp;quot;5&amp;quot;+6+&amp;quot;7&amp;quot;);//&amp;quot;56&amp;quot;+&amp;quot;7&amp;quot; ---\&amp;gt;&amp;quot;567&amp;quot;---\&amp;gt;567

        System.out.println(&amp;quot;5&amp;quot;+&amp;#39;6&amp;#39;+&amp;quot;7&amp;quot;);//&amp;quot;56&amp;quot;+&amp;quot;7&amp;quot;---\&amp;gt;&amp;quot;567&amp;quot;---\&amp;gt;567

        System.out.println(&amp;quot;5&amp;quot;+&amp;#39;6&amp;#39;+&amp;#39;7&amp;#39;);//&amp;quot;56&amp;quot;+&amp;#39;7&amp;#39;---\&amp;gt;&amp;quot;567&amp;quot;---567

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;-1&#34;&gt;&lt;a href=&#34;#-1&#34; class=&#34;headerlink&#34; title=&#34;++&#34;&gt;&lt;/a&gt;++&lt;/h2&gt;&lt;p&gt;【1】++：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe04&amp;#123;

    public static void main(String[] args)&amp;#123;

        int a = 5;

        a++;//理解为：相当于 a=a+1 操作

        System.out.println(a);//6

        

        a = 5;

        \++a;//理解为：相当于 a=a+1 操作

        System.out.println(a); //6

        

        //总结：++单独使用的时候，无论放在前还是后，都是加1操作

        

        //将++参与到运算中：

        //规则：看++在前还是在后，如果++在后：先运算，后加1 如果++在前，先加1，后运算

        a = 5;

        int m = a++ + 7;//先运算 m=a+7 再加1： a = a+1

        System.out.println(m);//12

        System.out.println(a);//6

        

        a = 5;

        int n = ++a + 7;//先加1 a=a+1 再运算： n = a+7

        System.out.println(n);//13

        System.out.println(a);//6

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;无论这个变量是否参与到运算中去，只要用++运算符，这个变量本身就加1操作&lt;/p&gt;
&lt;p&gt;只是说如果变量参与到运算中去的话，对运算结果是产生影响：&lt;/p&gt;
&lt;p&gt;看++在前还是在后，如果++在后：先运算，后加1 如果++在前，先加1，后运算&lt;/p&gt;
&lt;p&gt;【2】练习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe05&amp;#123;

    public static void main(String[] args)&amp;#123;

        int a = 5;

        System.out.println(a++ + a++);

        System.out.println(a++ + ++a);

        System.out.println(++a + a++);

        System.out.println(++a + ++a);

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运算过程：&lt;/p&gt;



&lt;h1 id=&#34;赋值运算符&#34;&gt;&lt;a href=&#34;#赋值运算符&#34; class=&#34;headerlink&#34; title=&#34;赋值运算符&#34;&gt;&lt;/a&gt;赋值运算符&lt;/h1&gt;&lt;p&gt;【1】&amp;#x3D;的作用： 将等号右侧的值赋给等号左侧：&lt;/p&gt;
&lt;p&gt;int age &amp;#x3D; 19;&lt;/p&gt;
&lt;p&gt;int age &amp;#x3D; 10+3+8;&lt;/p&gt;
&lt;p&gt;【2】练习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //任意给出两个数，交换两个数并输出：
        //1.给出两个数：
        int num1 = 10;
        int num2 = 20;
        
        //2.输出交换前的两个数：
        System.out.println(&amp;quot;交换前：&amp;quot;+num1+&amp;quot;\\t&amp;quot;+num2);
        
        //3.交换
        /\*
            错误代码：
            num1 = num2;
        num2 = num1;
        \*/
            //解决办法：
            //引入一个中间变量:
            int t;
        t = num1;
        num1 = num2;
        num2 = t;
        /\*
            int t;
        t = num2;
        num2 = num1;
        num1 = t;
        
        \*/
            
            //4.输出交换后的两个数：
            System.out.println(&amp;quot;交换后：&amp;quot;+num1+&amp;quot;\\t&amp;quot;+num2);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;面试题：两个数交换的四种方式：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQnJhZC1MZWUvcC81ODA4Mjk5Lmh0bWw=&#34;&gt;https://www.cnblogs.com/Brad-Lee/p/5808299.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;扩展赋值运算符&#34;&gt;&lt;a href=&#34;#扩展赋值运算符&#34; class=&#34;headerlink&#34; title=&#34;扩展赋值运算符&#34;&gt;&lt;/a&gt;扩展赋值运算符&lt;/h1&gt;&lt;p&gt;【1】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe07&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现功能：给出三个数，求和：
        //1.给出三个数：
        int num1 = 10;
        int num2 = 20;
        int num3 = 30;
        //2.求和
        //int sum = num1+num2+num3;
        //定义一个变量，用来接收和：
        int sum = 0;
        sum = sum + num1;//等效： sum += num1;
        sum = sum + num2;// sum += num2;
        sum = sum + num3;//sum += num3;
        //3.将和输出：
        System.out.println(&amp;quot;和：&amp;quot;+sum);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内存：&lt;/p&gt;



&lt;p&gt;【2】a+&amp;#x3D;b 和 a&amp;#x3D;a+b 区别：&lt;/p&gt;
&lt;p&gt;（1）a+&amp;#x3D;b 可读性稍差 编译效率高 底层自动进行类型转换&lt;/p&gt;
&lt;p&gt;（2）a&amp;#x3D;a+b 可读性好 编译效率低 手动进行类型转换&lt;/p&gt;
&lt;p&gt;【3】面试题&lt;/p&gt;
&lt;p&gt;（1）请问a+&amp;#x3D;b相当于a&amp;#x3D;a+b,那么也相当于 a&amp;#x3D;b+a吗？&lt;/p&gt;



&lt;p&gt;（2）下面的代码哪一句出错： 4&lt;/p&gt;
&lt;p&gt;byte a &amp;#x3D; 10; —&amp;gt;1&lt;/p&gt;
&lt;p&gt;int b &amp;#x3D; 20; —&amp;gt;2&lt;/p&gt;
&lt;p&gt;a+&amp;#x3D;b; —-&amp;gt;3&lt;/p&gt;
&lt;p&gt;a &amp;#x3D; a+b ;—-&amp;gt;4&lt;/p&gt;
&lt;p&gt;更正： a &amp;#x3D; (byte)(a+b);&lt;/p&gt;
&lt;h1 id=&#34;关系运算符&#34;&gt;&lt;a href=&#34;#关系运算符&#34; class=&#34;headerlink&#34; title=&#34;关系运算符&#34;&gt;&lt;/a&gt;关系运算符&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe08&amp;#123;
    public static void main(String[] args)&amp;#123;
        //\&amp;gt;，\&amp;lt;，\&amp;gt;=，\&amp;lt;=，==，!=
        //关系运算符最终结果：要么是true要么是false
        System.out.println(4\&amp;gt;9);//false
        System.out.println(4\&amp;lt;9);//true
        System.out.println(4\&amp;gt;=9);//false
        System.out.println(4\&amp;lt;=9);//true
        System.out.println(4==9);//false
        System.out.println(4!=9);//true
        System.out.println((5\&amp;lt;9)!=(6==8));//true
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;逻辑运算符&#34;&gt;&lt;a href=&#34;#逻辑运算符&#34; class=&#34;headerlink&#34; title=&#34;逻辑运算符&#34;&gt;&lt;/a&gt;逻辑运算符&lt;/h1&gt;&lt;p&gt;&amp;amp;，|， &amp;amp;&amp;amp;，||，!，^&lt;/p&gt;
&lt;p&gt;逻辑运算符：进行逻辑运算的，运算符左右连接的都是 布尔类型的操作数，最终表达式的结果是布尔值：要么是true，要么false&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe09&amp;#123;
    public static void main(String[] args)&amp;#123;
        // 逻辑与 ：&amp;amp; 规律：只要有一个操作数是false，那么结果一定是false
        System.out.println(true&amp;amp;true);
        System.out.println(true&amp;amp;false);
        System.out.println(false&amp;amp;false);
        System.out.println(false&amp;amp;true);
        
        // 短路与：&amp;amp;&amp;amp; 规律：效率高一些，只要第一个表达式是false，那么第二个表达式就不用计算了，结果一定是false
        System.out.println(true&amp;amp;&amp;amp;true);
        System.out.println(true&amp;amp;&amp;amp;false);
        System.out.println(false&amp;amp;&amp;amp;false);
        System.out.println(false&amp;amp;&amp;amp;true);
        
        // 逻辑或：\| 规律：只要有一个操作数是true，那么结果一定是true
        System.out.println(true\|true);
        System.out.println(true\|false);
        System.out.println(false\|false);
        System.out.println(false\|true);
        
        // 短路或：\|\| 规律：效率高一些，只要第一个表达式是true，那么第二个表达式就不用计算了，结果一定是true
        System.out.println(true\|\|true);
        System.out.println(true\|\|false);
        System.out.println(false\|\|false);
        System.out.println(false\|\|true);
        
        //逻辑非： ! 规律：相反结果
        System.out.println(!true);//false
        System.out.println(!false);//true
        
        //逻辑异或： \^ 规律：两个操作数相同，结果为false，不相同，结果为true
        System.out.println(true\^true);
        System.out.println(true\^false);
        System.out.println(false\^false);
        System.out.println(false\^true);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再做一个加深的练习：看代码 说结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe10&amp;#123;
    public static void main(String[] args)&amp;#123;
        int i=8;
        System.out.println((5\&amp;gt;7)&amp;amp;&amp;amp;(i++==2)); //false
        System.out.println(i); //8


        int a=8;
        System.out.println((5\&amp;gt;7)&amp;amp;(a++==2)); //false
        System.out.println(a); //9


        int m=8;
        System.out.println((5\&amp;lt;7)&amp;amp;&amp;amp;(m++==2)); //false
        System.out.println(m); //9

        int b=2;
        System.out.println((5\&amp;lt;7)&amp;amp;(b++==2)); //true
        System.out.println(b); //3

        int c=2;
        System.out.println((5\&amp;lt;7)&amp;amp;(++c==2)); //false
        System.out.println(c); //3
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;条件运算符&#34;&gt;&lt;a href=&#34;#条件运算符&#34; class=&#34;headerlink&#34; title=&#34;条件运算符&#34;&gt;&lt;/a&gt;条件运算符&lt;/h1&gt;&lt;p&gt;【1】条件运算符：又称： 三元运算符&amp;#x2F;三目运算符&lt;/p&gt;
&lt;p&gt;【2】格式：&lt;/p&gt;
&lt;p&gt;a?b:c&lt;/p&gt;
&lt;p&gt;其中a是一个布尔类型的表达式，返回结果要么是true要么false，通过a的结果决定最终表达式的结果:&lt;/p&gt;
&lt;p&gt;如果a的结果是true，那么表达式最终结果为b&lt;/p&gt;
&lt;p&gt;如果a的结果是false，那么表达式最终结果为c&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe11&amp;#123;
    public static void main(String[] args)&amp;#123;
        int num = (5\&amp;gt;7)?6:9 ;
        System.out.println(num);

        String str = (4==4)?&amp;quot;你好&amp;quot;:&amp;quot;你不好&amp;quot; ;
        System.out.println(str);

        System.out.println((4==4)?&amp;quot;你好&amp;quot;:&amp;quot;你不好&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;练习：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;import java.util.*;&amp;#x2F;&amp;#x2F;*代表所有&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; public class TestOpe12&amp;#123;
 public static void main(String[] args)&amp;#123;
 //实现功能：男孩女孩选择晚饭吃什么，如果意见一致，听男生的，如果意见不一致，听女生的
 
 //1.要让男孩女孩选择晚饭吃什么：
 Scanner sc = new Scanner(System.in);
 System.out.println(&amp;quot;请选择今晚吃什么：1.火锅 2.烧烤 3.麻辣烫 4.西餐&amp;quot;);
 System.out.println(&amp;quot;请男孩选择：&amp;quot;);
 int boyChoice = sc.nextInt();
 System.out.println(&amp;quot;请女孩选择：&amp;quot;);
 int girlChoice = sc.nextInt();
 //2.判断：
 System.out.println(boyChoice==girlChoice?&amp;quot;听男孩的&amp;quot;:&amp;quot;听女孩的&amp;quot;);
 &amp;#125;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PS:三目运算符可以代替后续我们要学习的if-else&lt;/p&gt;
&lt;h1 id=&#34;位运算符-了解&#34;&gt;&lt;a href=&#34;#位运算符-了解&#34; class=&#34;headerlink&#34; title=&#34;位运算符(了解)&#34;&gt;&lt;/a&gt;位运算符(了解)&lt;/h1&gt;&lt;p&gt;位运算符：&amp;amp;，|，^，~ ， &amp;gt;&amp;gt;，&amp;lt;&amp;lt;，&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;如何区分逻辑运算符和位运算符：&lt;/p&gt;
&lt;p&gt;逻辑运算符：左右连接的是布尔类型的操作数&lt;/p&gt;
&lt;p&gt;位运算符：左右连接的是具体的数值&lt;/p&gt;
&lt;p&gt;【1】&amp;lt;&amp;lt; 左移&lt;/p&gt;
&lt;p&gt;3&amp;lt;&amp;lt;2 &amp;#x3D; 12&lt;/p&gt;



&lt;p&gt;面试题： 4乘以8最快的方式： 4&amp;lt;&amp;lt;3&lt;/p&gt;
&lt;p&gt;【2】&amp;gt;&amp;gt; 有符号右移&lt;/p&gt;
&lt;p&gt;6&amp;gt;&amp;gt;2 &amp;#x3D; 1&lt;/p&gt;



&lt;p&gt;-6&amp;gt;&amp;gt;2 &amp;#x3D; -2&lt;/p&gt;



&lt;p&gt;【3】&amp;gt;&amp;gt;&amp;gt; 无符号右移：&lt;/p&gt;
&lt;p&gt;6&amp;gt;&amp;gt;&amp;gt;2 &amp;#x3D; 1&lt;/p&gt;



&lt;p&gt;【4】 &amp;amp; 与&lt;/p&gt;
&lt;p&gt;6&amp;amp;3 &amp;#x3D; 2&lt;/p&gt;



&lt;p&gt;【5】| 或&lt;/p&gt;
&lt;p&gt;6|3&amp;#x3D;7&lt;/p&gt;



&lt;p&gt;【6】^异或：&lt;/p&gt;
&lt;p&gt;6^3 &amp;#x3D; 5&lt;/p&gt;



&lt;p&gt;【7】~反：&lt;/p&gt;
&lt;p&gt;~6 &amp;#x3D; -7&lt;/p&gt;



&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;byte类型的表数范围的 -128是怎么算出来的&lt;/p&gt;
&lt;p&gt;127： 01111111&lt;/p&gt;
&lt;p&gt;-128： 10000000&lt;/p&gt;
&lt;p&gt;一看就是个负数&lt;/p&gt;
&lt;p&gt;减1： 01111111&lt;/p&gt;
&lt;p&gt;取反： 10000000 —》2^7 &amp;#x3D; 128&lt;/p&gt;
&lt;p&gt;加负号： -128&lt;/p&gt;
&lt;h1 id=&#34;运算符总结&#34;&gt;&lt;a href=&#34;#运算符总结&#34; class=&#34;headerlink&#34; title=&#34;运算符总结&#34;&gt;&lt;/a&gt;运算符总结&lt;/h1&gt;








&lt;h1 id=&#34;运算符的优先级别&#34;&gt;&lt;a href=&#34;#运算符的优先级别&#34; class=&#34;headerlink&#34; title=&#34;运算符的优先级别&#34;&gt;&lt;/a&gt;运算符的优先级别&lt;/h1&gt;


&lt;p&gt;不需要去刻意的记优先级关系&lt;/p&gt;
&lt;p&gt;赋值&amp;lt;三目&amp;lt;逻辑&amp;lt;关系&amp;lt;算术&amp;lt;单目&lt;/p&gt;
&lt;p&gt;理解运算符的结合性&lt;/p&gt;
&lt;p&gt;PS:实际开发中我们不会写特别复杂的表达式，你要想先算谁就用()&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;5&amp;lt;6 | &amp;amp;apos;A&amp;amp;apos;&amp;gt;&amp;amp;apos;a&amp;amp;apos; &amp;amp;&amp;amp; 12*6&amp;lt;&amp;#x3D;45+23&amp;amp;&amp;amp;!true&lt;/p&gt;
&lt;p&gt;&amp;#x3D;5&amp;lt;6 | &amp;amp;apos;A&amp;amp;apos;&amp;gt;&amp;amp;apos;a&amp;amp;apos; &amp;amp;&amp;amp; 12*6&amp;lt;&amp;#x3D;45+23&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 5&amp;lt;6 | &amp;amp;apos;A&amp;amp;apos;&amp;gt;&amp;amp;apos;a&amp;amp;apos; &amp;amp;&amp;amp;72&amp;lt;&amp;#x3D;68&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D; true|false&amp;amp;&amp;amp;false&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D; true&amp;amp;&amp;amp;false&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D;false&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D;false&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
