{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"mysql高级部分\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/DataBase/MySQL/MySQL_Super/",
            "url": "http://example.com/2022/10/07/DataBase/MySQL/MySQL_Super/",
            "title": "MySQL调优",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"mysql性能调优\"><a class=\"anchor\" href=\"#mysql性能调优\">#</a> MySQL 性能调优</h1>\n<blockquote>\n<p>环境：CentOS7.5\t\t\t\t\t Version：MySQL57.39</p>\n</blockquote>\n<h1 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> 主要内容</h1>\n<p><a href=\"#MySQL%E7%9A%84%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D\">1、MySQL 的架构介绍</a></p>\n<p><a href=\"#%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90\">2、索引优化分析</a></p>\n<p><a href=\"#%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96%E5%88%86%E6%9E%90\">3、查询截取分析</a></p>\n<p><a href=\"#MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6\">4、MySQL 的锁机制</a></p>\n<p>&lt;div name=MySQL 的架构介绍&gt;</p>\n<h1 id=\"mysql文件目录结构\"><a class=\"anchor\" href=\"#mysql文件目录结构\">#</a> MySQL 文件目录结构</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">路径</th>\n<th style=\"text-align:left\">解释</th>\n<th style=\"text-align:left\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">/var/lib/mysql/</td>\n<td style=\"text-align:left\">mysql 数据库文件的存放路径</td>\n<td style=\"text-align:left\">/var/lib/mysql/atguidgu.cloud.pid</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/usr/share/mysql</td>\n<td style=\"text-align:left\">配置文件目录</td>\n<td style=\"text-align:left\">mysql.server 命令及配置及文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/usr/bin/</td>\n<td style=\"text-align:left\">相关命令目录</td>\n<td style=\"text-align:left\">mysqladmin 、mysqldump 等相关命令</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">/ect/init.d/mysql</td>\n<td style=\"text-align:left\">启停相关脚本</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"主要配置文件\"><a class=\"anchor\" href=\"#主要配置文件\">#</a> 主要配置文件</h1>\n<p>1、二进制日志 log-bin ：主从复制</p>\n<p>2、错误日志 log-error ：默认是关闭的，记录严重的警告和错误信息，每次启动和关闭的详细信息等</p>\n<p>3、查询日志 log ：默认关闭，记录查询的 SQL 语句，如果开启就会降低 mysql 的整体性能</p>\n<p>4、数据文件 :</p>\n<ul>\n<li>\n<p>系统</p>\n<ul>\n<li>Windows：本地安装的目录下 /data  目录下可以挑选很多库</li>\n<li>Windows：本地安装的目录下 /data  目录下可以挑选很多库</li>\n</ul>\n</li>\n<li>\n<p>frm 文件： 存放表结构</p>\n</li>\n<li>\n<p>myd 文件：存放表数据</p>\n</li>\n<li>\n<p>myi 文件： 存放表索引</p>\n</li>\n</ul>\n<h1 id=\"逻辑架构\"><a class=\"anchor\" href=\"#逻辑架构\">#</a> 逻辑架构</h1>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220816182921842.png\" class=\"\"></p>\n<h2 id=\"1连接层\"><a class=\"anchor\" href=\"#1连接层\">#</a> 1. 连接层</h2>\n<p>​\t最上层是一些客户端和连接服务，包含本地 sock 通信和大多数基于客户端 / 服务端工具实现的类似于 tcplip 的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于 SSL 的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>\n<h2 id=\"2服务层\"><a class=\"anchor\" href=\"#2服务层\">#</a> ⒉服务层</h2>\n<p>​\t第二层架构主要完成大多少的核心服务功能，如 SQL 接口，并完成缓存的查询，SQL 的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是 select 语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。</p>\n<h2 id=\"3引擎层\"><a class=\"anchor\" href=\"#3引擎层\">#</a> 3. 引擎层</h2>\n<p>​\t存储引擎层，存储引擎真正的负责了 MySQL 中数据的存储和提取，服务器通过 API 与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。后面介绍 MylSAM 和 InnoDB</p>\n<p>常用的存储引擎：MyISAM、InnoDB (最常用)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">对比项</th>\n<th style=\"text-align:center\">MylSAM</th>\n<th style=\"text-align:center\">InnoDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">主外键</td>\n<td style=\"text-align:center\">不支持</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">事务</td>\n<td style=\"text-align:center\">不馳</td>\n<td style=\"text-align:center\">支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">行表锁</td>\n<td style=\"text-align:center\">表锁，即使操作一条记录也会锁住整 个表，不适合高并发的操作</td>\n<td style=\"text-align:center\">行锁，操作时只锁某一行，不对其它 行有影响， 适合高并发的操作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">緩存</td>\n<td style=\"text-align:center\">只緩存索引，不缓存真实数据</td>\n<td style=\"text-align:center\">不仅缓存索引还要缓存真实数据，对 内存要求较高，而且内存大小对性能 有决定性的影响</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">表空间</td>\n<td style=\"text-align:center\">小</td>\n<td style=\"text-align:center\">大</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">关注点</td>\n<td style=\"text-align:center\">性能</td>\n<td style=\"text-align:center\">事务</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">默认安装</td>\n<td style=\"text-align:center\">Y</td>\n<td style=\"text-align:center\">Y</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4存储层\"><a class=\"anchor\" href=\"#4存储层\">#</a> 4. 存储层</h2>\n<p>​\t数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</p>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220816181915861.png\" class=\"\"></p>\n<h2 id=\"连接器\"><a class=\"anchor\" href=\"#连接器\">#</a> 连接器</h2>\n<p>▪  连接器负责跟客户端建立连接，获取权限、维持和管理连接<br />\n– 用户名密码验证<br />\n– 查询权限信息，分配对应的权限<br />\n– 可以使用 show processlist 查看现在的连接<br />\n– 如果太长时间没有动静，  就会自动断开，通过 wait_timeout 控制，默认 8 小时</p>\n<p>▪  连接可以分为两类：</p>\n<p>– 长连接：推荐使用，但是要周期性的断开长连接</p>\n<p>– 短链接：</p>\n<h2 id=\"查询缓存\"><a class=\"anchor\" href=\"#查询缓存\">#</a> 查询缓存</h2>\n<p>▪  当执行查询语句的时候，会先去查询缓存中查看结果，之前执行 过的 sql 语句及其结果可能以 key-value 的形式存储在缓存中，如 果能找到则直接返回，如果找不到，就继续执行后续的阶段。<br />\n<mark>▪  但是，不推荐使用查询缓存：</mark><br />\n– 1、查询缓存的失效比较频繁，只要表更新，缓存就会清空</p>\n<p>– 2、缓存对应新更新的数据命中率比较低</p>\n<h2 id=\"分析器\"><a class=\"anchor\" href=\"#分析器\">#</a> 分析器</h2>\n<p>▪  词法分析：  Mysql 需要把输入的字符串进行识别每个部分代表什 么意思<br />\n– 把字符串 T 识别成 表名 T<br />\n– 把字符串 ID 识别成 列 ID<br />\n▪  语法分析：</p>\n<p>▪  根据语法规则判断这个 sql 语句是否满足 mysql 的语法，如果不符 合就会报错 “You have an error in your SQL synta”</p>\n<h2 id=\"优化器\"><a class=\"anchor\" href=\"#优化器\">#</a> 优化器</h2>\n<p>▪  在具体执行 SQL 语句之前，要先经过优化器的处理<br />\n– 当表中有多个索引的时候，决定用哪个索引<br />\n– 当 sql 语句需要做多表关联的时候，  决定表的连接顺序<br />\n– 等等<br />\n▪ 不同的执行方式对 SQL 语句的执行效率影响很大<br />\n– RBO: 基于规则的优化</p>\n<p>– CBO: 基于成本的优化</p>\n<h1 id=\"sql性能下降原因\"><a class=\"anchor\" href=\"#sql性能下降原因\">#</a> SQL 性能下降原因</h1>\n<ol>\n<li>查询语句写的烂</li>\n<li>索引失效</li>\n<li>关联查询太多 join</li>\n<li>服务器调优及各个参数设置（缓冲、线程数）</li>\n<li>..........etc</li>\n</ol>\n<h1 id=\"sql语句机读过程\"><a class=\"anchor\" href=\"#sql语句机读过程\">#</a> SQL 语句机读过程</h1>\n<p>人工：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token keyword\">DISTINCT</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">&lt;</span>SELECT_list<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>left_table<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>join_type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">Join</span> <span class=\"token operator\">&lt;</span>right_table<span class=\"token operator\">></span> <span class=\"token keyword\">on</span> <span class=\"token operator\">&lt;</span>join_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">WHERE</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>WHERE_Condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>group_by_list<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">HAVING</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>having_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span>order_by_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">LIMIT</span> <span class=\"token operator\">&lt;</span>limit_num<span class=\"token operator\">></span></pre></td></tr></table></figure><p>机器：</p>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220816200725202.png\" class=\"\"></p>\n<p>注意第一步是 from --&gt; on --&gt; join --&gt;where --&gt;group by --&gt;having --&gt;select --&gt;order by --&gt;limit</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">left</span> <span class=\"token keyword\">table</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \t   <span class=\"token keyword\">on</span> <span class=\"token operator\">&lt;</span>on_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>join_type<span class=\"token operator\">></span> <span class=\"token keyword\">join</span> <span class=\"token operator\">&lt;</span>join_table<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">where</span> <span class=\"token operator\">&lt;</span>where_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> <span class=\"token operator\">&lt;</span>group_by_list<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token operator\">&lt;</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>等聚合函数<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">having</span> <span class=\"token operator\">&lt;</span>having_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">select</span> <span class=\"token operator\">&lt;</span>select_list<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">distinct</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token operator\">&lt;</span>order_by_condition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">limit</span> <span class=\"token operator\">&lt;</span>limit_number<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"on和where的区别\"><a class=\"anchor\" href=\"#on和where的区别\">#</a> on 和 where 的区别？</h2>\n<p>​\t简单地说，当有外关联表时，on 主要是针对外关联表进行筛选，主表保留，当没有关联表时，二者作用相同。</p>\n<p>例如在左外连时，首先执行 on，筛选掉外连表中不符合 on 表达式的数据，而 where 的筛选是对主表的筛选。</p>\n<h1 id=\"mysql执行顺序理解\"><a class=\"anchor\" href=\"#mysql执行顺序理解\">#</a> MySql 执行顺序理解</h1>\n<p>第一步：加载 from 子句的前两个表计算笛卡尔积，生成虚拟表 vt1；</p>\n<p>第二步：筛选关联表符合 on 表达式的数据，保留主表，生成虚拟表 vt2；</p>\n<p>第三步：如果使用的是外连接，执行 on 的时候，会将主表中不符合 on 条件的数据也加载进来，做为外部行</p>\n<p>第四步：如果 from 子句中的表数量大于 2，则重复第一步到第三步，直至所有的表都加载完毕，更新 vt3；</p>\n<p>第五步：执行 where 表达式，筛选掉不符合条件的数据生成 vt4；</p>\n<p>第六步：执行 group by 子句。group by 子句执行过后，会对子句组合成唯一值并且对每个唯一值只包含一行，生成 vt5,。一旦执行 group by，后面的所有步骤只能得到 vt5 中的列（group by 的子句包含的列）和聚合函数。</p>\n<p>第七步：执行聚合函数，生成 vt6；</p>\n<p>第八步：执行 having 表达式，筛选 vt6 中的数据。having 是唯一一个在分组后的条件筛选，生成 vt7;</p>\n<p>第九步：从 vt7 中筛选列，生成 vt8；</p>\n<p>第十步：执行 distinct，对 vt8 去重，生成 vt9。其实执行过 group by 后就没必要再去执行 distinct，因为分组后，每组只会有一条数据，并且每条数据都不相同。</p>\n<p>第十一步：对 vt9 进行排序，此处返回的不是一个虚拟表，而是一个游标，记录了数据的排序顺序，此处可以使用别名；</p>\n<p>第十二步：执行 limit 语句，将结果返回给客户端</p>\n<p>&lt;div name = 索引优化分析&gt;</p>\n<h1 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h1>\n<p>​\tMySQL 官方对索引的定义为：索引 (Index）是帮助 MySQL 高效获取数据的数据结构。可以得到索引的本质:<mark> 索引是数据结构</mark>。</p>\n<p>&lt;font color=red&gt; 可以简单理解为 “排好序的快速查找数据结构”&lt;/font&gt;</p>\n<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上</p>\n<p>我们平常所说的<mark>索引，如果没有特别指明，都是指 B 树 (多路搜索树，并不一定是二叉的) 结构组织的索引</mark>。其中聚集索引，次要索引，复合索引，前缀索引，唯一索引默认都是使用 B + 树索引，统称索引。当然，除了 B + 树这种类型的索引之外还有哈稀索引 (hash，index) 等。</p>\n<p>简单来说<mark>最大的作用</mark>就是 <mark>排序</mark> 和 <mark>查询</mark></p>\n<h2 id=\"目的\"><a class=\"anchor\" href=\"#目的\">#</a> 目的</h2>\n<p>提高查询效率，可以类比字典，<br />\n如果要查 “mysql” 这个单询，我们肯定需要定位到 m 字母，然后从下往下找到 y 字母，再找到剩下的 sql。<br />\n如果没有索引，那么你可能需要 a----z，如果我想找到 Java 开头的单词呢？或者 Oracle 开头的单词呢？<br />\n 是不是觉得如果没有索引，这个事情根本无法完成？</p>\n<h2 id=\"详解\"><a class=\"anchor\" href=\"#详解\">#</a> 详解</h2>\n<p>​\t在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。</p>\n<p>下图就是一种可能的索引方式示例:</p>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220816211711261.png\" class=\"\"></p>\n<p>​\t\t\t\t左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址</p>\n<p>​\t为了加快 Col2 的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到相应数据，从而快速的检索出符合条件的记录.</p>\n<h2 id=\"优劣\"><a class=\"anchor\" href=\"#优劣\">#</a> 优劣</h2>\n<p>优势：</p>\n<p>​\t类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的 IO 成本</p>\n<p>​\t 通过索引列对数据进行排序，降低数据排序的成本，降低了 CPU 的消耗</p>\n<p>劣势：</p>\n<p>​\t1、实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间</p>\n<p>​\t2、虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 INSERT、UPDATE 和 DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，<br />\n都会调整因为更新所带来的键值变化后的索引信息<br />\n​\t3、索引只是提高效率的一个因素，如果你的 MySQL 有大数据量的表，就需要花时间研究建立最优秀的索引</p>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<ul>\n<li>单值索引：即一个索引只包含单个列，一个表可以有多个单列索引</li>\n<li>唯一索引：索引列的值必须唯一，但允许有空值</li>\n<li>复合索引：即一个索引包含多个列</li>\n</ul>\n<h2 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h2>\n<ul>\n<li>\n<p>创建：</p>\n<ul>\n<li>CREATE\t [UNIQUE ]INDEX  \tindexName   \tON   \tmytable(columnname(length));</li>\n<li>CREATE\t [UNIQUE ]INDEX      indexName   \tON   \tmytable(columnname(length));</li>\n</ul>\n</li>\n<li>\n<p>删除</p>\n<ul>\n<li>DROP \tINDEX \t[indexName] \tON \tmytable;</li>\n</ul>\n</li>\n<li>\n<p>查看</p>\n<ul>\n<li>SHOW \t\tINDEX \t\tFROM \t\ttable_name\\G</li>\n</ul>\n</li>\n<li>\n<p>使用 ALTER 命令</p>\n</li>\n</ul>\n<h2 id=\"mysql索引结构\"><a class=\"anchor\" href=\"#mysql索引结构\">#</a> MySQL 索引结构</h2>\n<ul>\n<li>\n<p>BTree 索引</p>\n</li>\n<li>\n<p>Hash 索引</p>\n</li>\n<li>\n<p>Full-Text 全文索引</p>\n</li>\n<li>\n<p>R-Tree 索引</p>\n</li>\n</ul>\n<h2 id=\"哪些情况下需要创建索引\"><a class=\"anchor\" href=\"#哪些情况下需要创建索引\">#</a> 哪些情况下需要创建索引</h2>\n<ol>\n<li>\n<p>主键自动建立唯一索引</p>\n</li>\n<li>\n<p>频繁作为查询条件的字段应该创建索引</p>\n</li>\n<li>\n<p>查询中与其它表关联的字段，外键关系建立索引</p>\n</li>\n<li>\n<p>频繁更新的字段不适合创建索引 or 因为每次更新不单单是更新了记录还会更新索引</p>\n</li>\n<li>\n<p>Where 条件里用不到的字段不创建索引</p>\n</li>\n<li>\n<p>单键 / 组合索引的选择问题，who?(在高并发下倾向创建组合索引)</p>\n</li>\n<li>\n<p>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</p>\n</li>\n<li>\n<p>查询中统计或者分组字段</p>\n</li>\n</ol>\n<h2 id=\"哪些情况不建索引\"><a class=\"anchor\" href=\"#哪些情况不建索引\">#</a> 哪些情况不建索引</h2>\n<ol>\n<li>\n<p>表记录太少</p>\n</li>\n<li>\n<p>经常增删改的表</p>\n<p>Why: 提高了查询速度，同时却会降低更新表的速度，如对表进行 INSERT、UPDATE 和 DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存一下索引文件</p>\n</li>\n<li>\n<p>数据重复且分布平均的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</p>\n</li>\n</ol>\n<h1 id=\"性能分析\"><a class=\"anchor\" href=\"#性能分析\">#</a> 性能分析</h1>\n<h2 id=\"mysql-query-optimizer\"><a class=\"anchor\" href=\"#mysql-query-optimizer\">#</a> MySql Query Optimizer</h2>\n<ol>\n<li>\n<p>Mysql 中有专门负责优化 SELECT 语句的优化器模块，主要功能：通过计算分析系统中收集到的统计信息，为客户端请求的 Query 提供他认为最优的执行计划（他认为最优的数据检索方式，但不见得是 DBA 认为是最优的，这部分最耗费时间)</p>\n</li>\n<li>\n<p>当客户端向 MySQL 请求一条 Query，命令解析器模块完成请求分类，区别出是 SELECT 并转发给 MySQLQuery Optimizer 时，MySQL Query Optimizer 首先会对整条 Query 进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对 Query 中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析 Query 中的 Hint 信息 (如果有），看显示 Hint 信息是否可以完全确定该 Query 的执行计划。如果没有 Hint 或 Hint 信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据 Query 进行写相应的计算分析，然后再得出最后的执行计划。</p>\n</li>\n</ol>\n<h2 id=\"mysql常见瓶颈\"><a class=\"anchor\" href=\"#mysql常见瓶颈\">#</a> MysQL 常见瓶颈</h2>\n<p>CPU:CPU 在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候</p>\n<p>IO: 磁盘 I/O 瓶颈发生在装入数据远大于内存容量的时候</p>\n<p>服务器硬件的性能瓶颈: top,free, iostat 和 vmstat 来查看系统的性能状态</p>\n<h2 id=\"explain\"><a class=\"anchor\" href=\"#explain\">#</a> Explain</h2>\n<h3 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h3>\n<p>​\t查看执行计划</p>\n<p>​\t使用 EXPLAIN 关键字可以模拟优化器执行 sQL 查询语句，从而知道 MySQL 是如何处理你的 SQL 语句的。分析你的查询语句或是表结构的性能瓶颈</p>\n<h3 id=\"作用范围\"><a class=\"anchor\" href=\"#作用范围\">#</a> 作用范围</h3>\n<ol>\n<li>\n<p>表的读取顺序   __ id__</p>\n</li>\n<li>\n<p>数据读取操作的操作类型哪些索引可以使用  <strong>possible key</strong></p>\n</li>\n<li>\n<p>哪些索引被实际使用表之间的引用  <strong>key</strong></p>\n</li>\n<li>\n<p>每张表有多少行被优化器查询    <strong>rows</strong></p>\n</li>\n<li>\n<p>表之间的引用 <strong>table</strong></p>\n</li>\n<li>\n<p>每张表有多少行被优化     <strong>rows</strong></p>\n</li>\n</ol>\n<h3 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h3>\n<p>explain + SQL 语句</p>\n<h3 id=\"执行计划包含的信息\"><a class=\"anchor\" href=\"#执行计划包含的信息\">#</a> 执行计划包含的信息</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2V4cGxhaW4tb3V0cHV0Lmh0bWwjZXhwbGFpbl9zZWxlY3RfdHlwZQ==\">MySQL ：： MySQL 5.7 参考手册 ：： 8.8.2 EXPLAIN 输出格式</span></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">列</th>\n<th style=\"text-align:center\">JSON 名称</th>\n<th style=\"text-align:center\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">id</td>\n<td style=\"text-align:center\">select_id</td>\n<td style=\"text-align:center\">标识符 SELECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"#select_type\">select type</a></td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">类型 SELECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">table</td>\n<td style=\"text-align:center\">table_name</td>\n<td style=\"text-align:center\">输出行的表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">partitions</td>\n<td style=\"text-align:center\">partitions</td>\n<td style=\"text-align:center\">匹配的分区</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2V4cGxhaW4tb3V0cHV0Lmh0bWwjZXhwbGFpbi1qb2luLXR5cGVz\">type</span></td>\n<td style=\"text-align:center\">access_type</td>\n<td style=\"text-align:center\">联接頰</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">possible keys</td>\n<td style=\"text-align:center\">possible_keys</td>\n<td style=\"text-align:center\">可供选择的可能索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key</td>\n<td style=\"text-align:center\">key</td>\n<td style=\"text-align:center\">实际选择的索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">key 丄 en</td>\n<td style=\"text-align:center\">key_length</td>\n<td style=\"text-align:center\">所选密钥的长度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ref</td>\n<td style=\"text-align:center\">ref</td>\n<td style=\"text-align:center\">与索引相比的列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rows</td>\n<td style=\"text-align:center\">rows</td>\n<td style=\"text-align:center\">要检查的行的估计值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">filtered</td>\n<td style=\"text-align:center\">filtered</td>\n<td style=\"text-align:center\">符合某条件的记录数百分比。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Extra</td>\n<td style=\"text-align:center\">None</td>\n<td style=\"text-align:center\">附加信息</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字段解释\"><a class=\"anchor\" href=\"#字段解释\">#</a> 字段解释</h3>\n<h4 id=\"id\"><a class=\"anchor\" href=\"#id\">#</a> id</h4>\n<p>id 相同，执行顺序由上至下</p>\n<p>id 不同，如果是子查询，id 的序号会递增，id 值越大优先级越高，越先被执行</p>\n<p>null 为结果集的整合</p>\n<p>总结：</p>\n<ul>\n<li><mark>id 如果相同，可以认为是一组，从上往下顺序执行</mark>；</li>\n<li>id 值越大，优先级越高，越先执行</li>\n</ul>\n<h4 id=\"select_type\"><a class=\"anchor\" href=\"#select_type\">#</a> select_type</h4>\n<p><a href=\"#select_type\">见下方附录</a></p>\n<h4 id=\"table\"><a class=\"anchor\" href=\"#table\">#</a> table</h4>\n<p>对应行正在访问哪一个表，表名或者别名，可能是临时表或者 union 合并结果集<br />\n 1、如果是具体的表名，则表明从实际的物理表中获取数据，当然也可以是表的别名</p>\n<p>​\t\t2、表名是 derivedN 的形式，表示使用了 id 为 N 的查询产生的衍生表</p>\n<p>​\t\t3、当有 union result 的时候，表名是 union n1,n2 等的形式，n1,n2 表示参与 union 的 id</p>\n<h4 id=\"type\"><a class=\"anchor\" href=\"#type\">#</a> type</h4>\n<p><a href=\"#type_example\">例子见下方附录</a></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">性能</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">system</td>\n<td style=\"text-align:center\">1</td>\n<td><mark>表只有一行记录</mark> (等于系统表), 这是 const 类型的特例，平时不会出现，可忽略</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">const</td>\n<td style=\"text-align:center\">2</td>\n<td>表示该表最多有一个匹配行通过索引一次就找到了，const 用于比较 primary key 或者 &lt;br/&gt;unique 索引。因为只匹配一行数据，所以很快如将主键置于 where 列表中 &lt; br/&gt;MySQL 就能将该查询转换为一个常量</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">eq_ref</td>\n<td style=\"text-align:center\">3</td>\n<td><mark>唯一性索引</mark>扫描，对于<mark>每个索引键，表中只有一条记录与之匹配</mark>。&lt;br/&gt; 常见于主键或唯一索引扫描</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ref</td>\n<td style=\"text-align:center\">4</td>\n<td><mark>非唯一性索引</mark>扫描，<mark>返回匹配某个单独值的所有行</mark>.&lt;br/&gt; 本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而， &lt;br/&gt; 它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">range</td>\n<td style=\"text-align:center\">5</td>\n<td><mark>只检索给定范围的行，使用一个索引来选择行</mark>。key 列显示使用了哪个索引，&lt;br/&gt; 一般就是在你的 where 语句中出现了 between、&lt;、&gt;、in 等的查询  &lt;br/&gt; 这种范围扫描索引扫描比全表扫描要好，，这样避免了 index 的全索引扫描 &lt; br/&gt; 因为它只需要开始于索引的某一点，而结束语另一点，不用扫描全部索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">index</td>\n<td style=\"text-align:center\">6</td>\n<td>联接类型与 <a href=\"https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_all\"> <code>ALL</code> </a> 相同，只是扫描了索引树。这以两种方式发生： <code>index</code>  &lt;br/&gt;Full Index Scan，index 与 ALL 区别为 index 类型只遍历索引树。这通常比 ALL 快，&lt;br/&gt; 因为索引文件通常比数据文件小。(也就是说虽然 all 和 Index 都是读全表，&lt;br/&gt; 但 index 是从索引中读取的，而 all 是从硬盘中读的)&lt;br/&gt; 全索引扫描这个比 all 的效率要好，主要有两种情况，一种是当前的查询时覆盖索引 &lt; br/&gt; 即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，&lt;br/&gt; 这样就避免数据的重排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">all</td>\n<td style=\"text-align:center\">7</td>\n<td>将遍历全表以找到匹配的行 &lt;br/&gt; 全表扫描，一般情况下出现这样的 sql 语句而且数据量比较大的话那么就需要进行优化。</td>\n</tr>\n</tbody>\n</table>\n<p>&lt;font color=red&gt; 一般来说，得保证查询至少要达到 range 级别，最好能达到 ref &lt;/font&gt;</p>\n<h4 id=\"possible_key\"><a class=\"anchor\" href=\"#possible_key\">#</a> possible_key</h4>\n<p>显示可能应用在这张表中的索引，一个或多个</p>\n<p>查询涉及到的字段上若存在索引，则该索引将被列出，&lt;font color=red&gt; 但不一定被查询实际使用 &lt;/font&gt;。</p>\n<h4 id=\"key\"><a class=\"anchor\" href=\"#key\">#</a> key</h4>\n<p><mark>实际使用的索引。如果为 NULL，则没有使用索引</mark></p>\n<p>查询中若使用了覆盖索引，则该索引仅出现在 key 列表中</p>\n<p>&lt;font color=red&gt; 引申：&lt;/font&gt;</p>\n<p>覆盖索引：简单来说就是你查询到的字段数目和你建立索引所对应字段相同且数量相同</p>\n<h4 id=\"key_len\"><a class=\"anchor\" href=\"#key_len\">#</a> key_len</h4>\n<p>​\t表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，<mark>长度越短越好</mark><br />\n​\tkey_len 显示的值为索刳字段的最大可能长度，&lt;font color=red&gt; 并非实际使用长度 &lt;/font&gt;，即 key_len 是根据表定义计算而得，不是通过表内检索出的</p>\n<h4 id=\"ref\"><a class=\"anchor\" href=\"#ref\">#</a> ref</h4>\n<p>​\t显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值</p>\n<h4 id=\"rows\"><a class=\"anchor\" href=\"#rows\">#</a> rows</h4>\n<p>​\t根据表的统计信息及索引使用情况，大致估算出找出所需记录需要读取的行数，此参数很重要，直接反应的 sql 找了多少数据，在完成目的的情况下越少越好</p>\n<h4 id=\"extra\"><a class=\"anchor\" href=\"#extra\">#</a> extra</h4>\n<p>包含不适合在其他列中显示但十分重要的额外信息</p>\n<ul>\n<li>\n<p>Using filesort (&lt;font color=red&gt; 索引本来就是排序和查找，这种等于只用了一半，而且排序本身就比较耗时 &lt;/font&gt;)</p>\n<p>说明 mysq | 会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。</p>\n<p>MySQL 中无法利用索引完成的排序操作称为 “文件排序 &quot;</p>\n</li>\n<li>\n<p>Using temporay (&lt;font color=red&gt; 严重影响性能 &lt;/font&gt;)</p>\n<p>使了用临时表保存中间结果，MySQL 在对查询结果排序时使用临时表。</p>\n<p>常见于排序 orderby 和分组查询 groupby。</p>\n</li>\n<li>\n<p>Using  index</p>\n<p>表示相应的 select 操作中使用了覆盖索引 (Covering Index)，避免访问了表的数据行，效率不错！如果同时出现</p>\n<p>using where，表明索引被用来执行索引键值的查找；</p>\n<p>如果没有同时出现 using where，表明索引用来读取数据而非执行查找动作。</p>\n<p><strong><mark>覆盖索引 (Covering Index)</mark></strong></p>\n<p>理解方式：就是 select 的数据列只用从索引中就能够取得，不必读取数据行，MySQL 可 以利用索引返回 select 列表中的字段，而不必根据索引再次读取数据文件，换句话说查询列要被所建的索引覆盖。</p>\n<p><mark><strong>注意:</strong></mark><br />\n 如果要使用覆盖索引，一 - 定 要注意 select 列表中只取出需要的列，不可   <strong><mark>Select   *</mark></strong><br />\n 因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。</p>\n</li>\n</ul>\n<p><a href=\"#extra_example\">具体事例见附录</a></p>\n<h1 id=\"索引优化\"><a class=\"anchor\" href=\"#索引优化\">#</a> 索引优化</h1>\n<h2 id=\"单表优化\"><a class=\"anchor\" href=\"#单表优化\">#</a> 单表优化</h2>\n<p>准备</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> article <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">auto_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>author_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>category_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>views <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>comments <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>title <span class=\"token keyword\">VARBINARY</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>content <span class=\"token keyword\">TEXT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> article <span class=\"token punctuation\">(</span> author_id <span class=\"token punctuation\">,</span>category_id <span class=\"token punctuation\">,</span>views <span class=\"token punctuation\">,</span>comments <span class=\"token punctuation\">,</span>title<span class=\"token punctuation\">,</span>content <span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- ----------------------------------------------</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">-- 01</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>author_id</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">from</span> article </pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">where</span> category_id <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> comments <span class=\"token operator\">></span><span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> views <span class=\"token keyword\">desc</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">limit</span> <span class=\"token number\">1</span>\\G</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">-- 01-1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> idx_id_article_ccv <span class=\"token keyword\">on</span> article<span class=\"token punctuation\">(</span>category_id<span class=\"token punctuation\">,</span>comments<span class=\"token punctuation\">,</span>views<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> idx_id_article_ccv <span class=\"token keyword\">on</span> article<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> idx_id_article_cv <span class=\"token keyword\">on</span> article<span class=\"token punctuation\">(</span>category_id<span class=\"token punctuation\">,</span>views<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> idx_id_article_cv <span class=\"token keyword\">on</span> article<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">-- 查看之后发现因为 > 1 的原因导致我们索引失效 我们直接放弃这个字段从三个改为两个字段的索引，性能更优</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>author_id <span class=\"token keyword\">from</span> article <span class=\"token keyword\">where</span> category_id <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> comments <span class=\"token operator\">></span><span class=\"token number\">1</span>  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> views <span class=\"token keyword\">desc</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>author_id <span class=\"token keyword\">from</span> article <span class=\"token keyword\">where</span> category_id <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> comments <span class=\"token operator\">=</span><span class=\"token number\">1</span>  <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> views <span class=\"token keyword\">desc</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"双表优化\"><a class=\"anchor\" href=\"#双表优化\">#</a> 双表优化</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>class<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token identifier\"><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token identifier\"><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span></span><span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>book<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token identifier\"><span class=\"token punctuation\">`</span>bookid<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token identifier\"><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span></span>  <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>bookid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">-- ----------------------------------------------</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> class<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">-- type=all</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> class<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> idx_card <span class=\"token keyword\">on</span>  book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> idx_card <span class=\"token keyword\">on</span>  class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> idx_card <span class=\"token keyword\">on</span>  book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> idx_card <span class=\"token keyword\">on</span>  class<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span>  book <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> class <span class=\"token keyword\">on</span> class<span class=\"token punctuation\">.</span>card<span class=\"token operator\">=</span>book<span class=\"token punctuation\">.</span>card<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span>  class <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> book <span class=\"token keyword\">on</span> class<span class=\"token punctuation\">.</span>card<span class=\"token operator\">=</span>book<span class=\"token punctuation\">.</span>card<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>左连接</strong></p>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220818221306990.png\" class=\"\"></p>\n<p>结果显示，在没有用索引的状况下我们的索引类型均为 ALL。</p>\n<p>因为是<mark>左连接</mark>的缘故我们的<mark>左表是根据右表搜索行</mark>的，<mark>左边一定都有</mark>，所以<mark>右边是我们的关键点</mark>，一定需要建立索引。</p>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220818221831192.png\" class=\"\"></p>\n<p>可以看到第二行的 type 变为了 ref，rows 也变成了优化比较明显。这是由左连接特性决定的。LEFT  JOIN 条件用于确定如何从右表搜索行。所以右边是我们的关键点，- 定需要建立索引。</p>\n<p><strong>同理可证右连接</strong><br />\n因为 RIGHTJOIN 条件用于确定如何从左表搜索行，右边一定都有，所以左边是我们的关键点，一定需要建立索引。</p>\n<h2 id=\"三表优化\"><a class=\"anchor\" href=\"#三表优化\">#</a> 三表优化</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> phone<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tphoneid <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcard <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span>phoneid<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">INNODB</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">-- --------===============================================</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> class <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> X <span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> phone <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> Y <span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> X <span class=\"token keyword\">on</span> class<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">index</span> Y <span class=\"token keyword\">on</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> class <span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> book <span class=\"token keyword\">on</span> class<span class=\"token punctuation\">.</span>card <span class=\"token operator\">=</span> book<span class=\"token punctuation\">.</span>card <span class=\"token keyword\">join</span> phone <span class=\"token keyword\">on</span> book<span class=\"token punctuation\">.</span>card <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">.</span>card<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> phone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">index</span> <span class=\"token keyword\">from</span> class<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>初始结果</p>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220818222159241.png\" class=\"\"></p>\n<p>优化后</p>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220818222905733.png\" class=\"\"></p>\n<p>后 2 行的 type 都是 ref 且总 rows 优化很好效果不错。</p>\n<p>因此索引最好设置在需要经常查询的字段中</p>\n<p>解释：不论是 class 还是 phone 都是需要 book.card 来确定而且在第二个 join 中还需要全部扫描 book 所以尽管他是一个与 class 的左连接，理论上要给 book 建立一个索引，但是因为 phone 的关系我们倒不如给 phone 和 class 做索引，减少可以减少的，book 反正要全表无所谓。</p>\n<p>总结就是<mark>小结果集推动大结果集</mark>就可以起到优化作用</p>\n<h2 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> [结论]</h2>\n<p>Join 语句的优化</p>\n<p>尽可能减少 Join 语句中的 NestedL oop 的循环总次数；“永远用小结果集驱动大的结果集”。</p>\n<p>优先优化 Nested L oop 的内层循环；</p>\n<p>保证 Join 语句中被驱动表上 Join 条件 字段已经被索引；</p>\n<p>当无法保证被驱动表的 Join 条件字段被索引且内存资源充足的前提下，不要太吝惜 JoinBuffer 的设置；</p>\n<h1 id=\"索引失效\"><a class=\"anchor\" href=\"#索引失效\">#</a> 索引失效</h1>\n<ol>\n<li>全值匹配我最爱</li>\n</ol>\n<blockquote>\n<p>​\t每个索引字段都存在</p>\n</blockquote>\n<ol start=\"2\">\n<li>最佳左前缀法则 (<mark>where 条件</mark>)</li>\n</ol>\n<blockquote>\n<p>​\t如果索引了多列 (<mark>3 个及以上</mark>)，要遵守最左前缀法则。指的是查询<mark>从索引的最左前列开始</mark>并且<mark>不跳过索引中的列</mark>。<br />\n​\t简单来说就是<mark>每个字段的带头大哥不能丢，中间兄弟不能断</mark></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> tbl_user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> tbl_user<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   age <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tsex <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">check</span><span class=\"token punctuation\">(</span> sex <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   email <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 添加测试数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span>  tbl_user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> tbl_user<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>email<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'aa11aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa22aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'456@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa33aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'789@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'aa11aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa22aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'456@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aa33aa'</span><span class=\"token punctuation\">,</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'789@qq.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 走索引且 key_len 越来越长</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa11aa'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa11aa'</span> <span class=\"token operator\">and</span> age <span class=\"token operator\">=</span> <span class=\"token number\">11</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa11aa'</span> <span class=\"token operator\">and</span> age <span class=\"token operator\">=</span> <span class=\"token number\">11</span> <span class=\"token operator\">and</span> sex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">-- 走索引</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa11aa'</span>  <span class=\"token operator\">and</span> sex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">-- 不走索引带头大哥没了</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> age <span class=\"token operator\">=</span> <span class=\"token number\">11</span> <span class=\"token operator\">and</span> sex <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<ol start=\"3\">\n<li>\n<p>不在索引列上做任何操作 (计算、函数 (自动 or 手动) 类型转换)，会导致索引失效而转向全表扫描</p>\n</li>\n<li>\n<p>存储引擎 <mark>不能使用索引中范围条件</mark> &lt;font color=red&gt; 右边的列 &lt;/font&gt; (<mark>自己是最后一个</mark>)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 范围条件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> tbl_user <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> idx_tbl_user_age_sex_email <span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 全部走了索引</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age <span class=\"token keyword\">from</span> tbl_user <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age<span class=\"token punctuation\">,</span>sex <span class=\"token keyword\">from</span> tbl_user <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>email <span class=\"token keyword\">from</span> tbl_user <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 部分走了索引</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> sex <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age<span class=\"token punctuation\">,</span>sex <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> sex <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age<span class=\"token punctuation\">,</span>sex<span class=\"token punctuation\">,</span>email <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> sex <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><mark>尽量使用覆盖索引</mark> (只访问索引的查询 (索引列和查询列一致))， 减少 select  *</p>\n</li>\n<li>\n<p>mysql 在<mark>使用不等于 (!= 或者 &lt;&gt; )<mark> 的时候</mark>无法使用索引</mark>会导致<mark>全表扫描团</mark></p>\n</li>\n<li>\n<p>is null ,is not null 也无法使用索引</p>\n</li>\n<li>\n<p>like<mark> 以通配符开头 (</mark>'%abc...)mysq|<mark> 索引失效</mark>会变成全表扫描的操作。(<mark>放右边可以</mark>)</p>\n<p><strong>问题：解决 like'% 字符串 %' 时索引不被使用的方法？？</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 建立索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> tbl_user <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> idx_tbl_user_name_age <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 测试</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 走索引</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> name <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> age <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 走索引</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> name<span class=\"token punctuation\">,</span>age <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">-- 不走索引</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>email <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>email <span class=\"token keyword\">from</span> tbl_user <span class=\"token keyword\">where</span> name <span class=\"token operator\">like</span> <span class=\"token string\">'%aa%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><mark>字符串不加单引号索引失效</mark></p>\n</li>\n<li>\n<p>少用 or，用它来连接时会索引失效</p>\n</li>\n</ol>\n<h2 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- indexc1234</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> test03 <span class=\"token keyword\">where</span> c1<span class=\"token operator\">=</span><span class=\"token string\">'a1'</span> <span class=\"token operator\">and</span> c2<span class=\"token operator\">=</span><span class=\"token string\">'a2'</span> <span class=\"token operator\">and</span> c5<span class=\"token operator\">=</span><span class=\"token string\">'a5'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> c3<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> test03 <span class=\"token keyword\">where</span> c1<span class=\"token operator\">=</span><span class=\"token string\">'a1'</span> <span class=\"token operator\">and</span> c5<span class=\"token operator\">=</span><span class=\"token string\">'a5'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> c3<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><em><strong>这两种 SQL 的区别在哪？</strong></em></p>\n<blockquote>\n<p>都走了索引，但是在第 2 条 SQL 会产生文件的内排序，为什么呢？这是因为本来应该是自动的顺序排列，即 c1,c2,c3..... 默认，但是我们写了 order by 所以产生了内排。但是同样第 1 条 SQL 为什么没有呢？因为我们在 where 条件中使用了他让他固定成了一个常量 constant ，即 c3 虽然一直在动，但是 c2 已经固定没有了排序的过程所以不会产生内排的步骤</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> t1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> t1<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tid <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tc1 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tc2 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tc3 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tc4 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tc5 <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t1<span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">,</span>c3<span class=\"token punctuation\">,</span>c4<span class=\"token punctuation\">,</span>c5<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> t1 <span class=\"token keyword\">add</span> <span class=\"token keyword\">index</span> idx_c1234 <span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">,</span>c2<span class=\"token punctuation\">,</span>c3<span class=\"token punctuation\">,</span>c4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> c1 <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> c4 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> c3<span class=\"token punctuation\">,</span>c2 <span class=\"token keyword\">desc</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t1 <span class=\"token keyword\">where</span> c1 <span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> c4 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> c3<span class=\"token punctuation\">,</span>c2 <span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<p>结果：</p>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220818213253106.png\" class=\"\"></p>\n<p><em><strong>同理论证 gourp by</strong></em></p>\n<ul>\n<li>分组之前比排序，可能会产生临时表的产生</li>\n</ul>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220818213434892.png\" class=\"\"></p>\n<h2 id=\"建议\"><a class=\"anchor\" href=\"#建议\">#</a> 建议</h2>\n<ul>\n<li>\n<p>对于单键索引，尽量选择针对当前 query 过滤性更好的索引</p>\n</li>\n<li>\n<p>在选择组合索引的时候，当前 Query 中过滤性最好的字段在索引字段顺序中，位置越靠前越好。</p>\n</li>\n<li>\n<p>在选择组合索引的时候，尽量选择可以能够包含当前 query 中的 where 字句中更多字段的索引</p>\n</li>\n<li>\n<p>尽可能通过分析统计信息和调整 query 的写法来达到选择合适索引的目的</p>\n</li>\n</ul>\n<h2 id=\"口诀\"><a class=\"anchor\" href=\"#口诀\">#</a> 口诀</h2>\n<p>全值匹配我最爱\t，最左前缀要遵守；</p>\n<p>帶头大哥不能死\t，中间兄弟不能断；</p>\n<p>索引列上少计算\t，范围之后全失效；</p>\n<p>LIKE 百分写最右\t，覆盖索引不写星；</p>\n<p>不等空值还有 or     ，索引失效要少用；</p>\n<p>VAR 的引号不可丢，SQL 高级也不难！</p>\n<p>&lt;div name = 查询截取分析&gt;</p>\n<h1 id=\"查询截取分析\"><a class=\"anchor\" href=\"#查询截取分析\">#</a> 查询截取分析</h1>\n<h2 id=\"内容\"><a class=\"anchor\" href=\"#内容\">#</a> 内容：</h2>\n<p>​\t查询优化</p>\n<p>​\t慢查询日志</p>\n<p>​\t批量数据脚本</p>\n<p>​\tshow profile</p>\n<p>​\t全局查询日志</p>\n<h2 id=\"工作一般流程分析过程\"><a class=\"anchor\" href=\"#工作一般流程分析过程\">#</a> 工作一般流程 (分析过程)</h2>\n<ol>\n<li>观察，至少跑 1 天，看看生产的慢 SQL 情况。</li>\n<li>开启慢查询日志，设置阙值，比如超过 5 秒钟的就是慢 SQL，并将它抓取出来。</li>\n<li>explain + 慢 SQL 分析</li>\n<li>show profile</li>\n<li>运维经理 or DBA，进行 SQL 数据库服务器的参数调优。。</li>\n</ol>\n<p><mark>总结</mark></p>\n<ol>\n<li>\n<p>慢查询的开启并捕获</p>\n</li>\n<li>\n<p>explain + 慢 SQL 分析</p>\n</li>\n<li>\n<p>show profile 查询 SQL 在 Mysql 服务器里面的执行细节和生命周期情况</p>\n</li>\n<li>\n<p>SQL 数据库服务器的参数调优。</p>\n</li>\n</ol>\n<h2 id=\"查询优化\"><a class=\"anchor\" href=\"#查询优化\">#</a> 查询优化</h2>\n<h3 id=\"永远小表驱动大表即小的数据集驱动大的数据集\"><a class=\"anchor\" href=\"#永远小表驱动大表即小的数据集驱动大的数据集\">#</a> 永远小表驱动大表，即小的数据集驱动大的数据集</h3>\n<p>小表驱动大表，类似嵌套循环 Nested Loop</p>\n<h4 id=\"case-1\"><a class=\"anchor\" href=\"#case-1\">#</a> Case 1：</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>两个简单的 for 循环，但是在 SQL 中我们就应该选择 第一个循环而不是第二个</p>\n<ul>\n<li>小的循环在外层，表连接需要 5 次</li>\n<li>大的循环在外层，表连接需要 1000 次，浪费数据库资源</li>\n</ul>\n<p><strong>总结:</strong> 小表驱动大表的主要目的是通过减少表连接创建的次数，加快查询速度.</p>\n<h4 id=\"case-2\"><a class=\"anchor\" href=\"#case-2\">#</a> Case 2</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> A <span class=\"token keyword\">where</span>  id <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> B<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 等价于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span> id <span class=\"token keyword\">from</span> B</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> A <span class=\"token keyword\">where</span> A<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span>（B<span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tA<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>B<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>当 B 表的数据集小于 A 表的数据集时，用 in 优于 exists。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> A <span class=\"token keyword\">where</span> <span class=\"token keyword\">exists</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token number\">1</span> <span class=\"token keyword\">from</span> B <span class=\"token keyword\">where</span> B<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 等价于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span><span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> A</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> B <span class=\"token keyword\">where</span> B<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span>（A<span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span>&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tA<span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>B<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t&#125;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>&#125;</pre></td></tr></table></figure><p>当 A 表的数据集小于 B 表的数据集时，用 exists 优于 in。</p>\n<p>注意：A 表与 B 表的 ID 字段应建立索引。</p>\n<ul>\n<li>EXISTS</li>\n</ul>\n<blockquote>\n<p>语法：SELECT .….. FROM table WHERE EXISTS (subquery)</p>\n</blockquote>\n<p>​\t该语法可以理解为。<mark>将主查询的数据，放到子查询中做条件验证，根据验证结果（TRUE 或 FALSE) 来决定主查询的数据结果是否得以保留</mark>。</p>\n<ul>\n<li>提示\n<ol>\n<li><mark>EXSTS (stbuey) 只返回 TRUE 或 FALSE，因此子查询中的 SELECT * 也可以是 SELECT  1 或是 SELECT ‘X’。官方说法是：实际执行时会忽略 SELECT 清单，因此没有区别</mark></li>\n<li>EXSTS 子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比，如果担忧效率问题，可进行实际检验以确定是否有效率问题。</li>\n<li>EXISTS 子查询往往也可以用条件表达式、其他子查询或者 JOIN 来替代，<mark>何种最优需要具体问题具体分析</mark></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"为排序使用索引ordeby优化\"><a class=\"anchor\" href=\"#为排序使用索引ordeby优化\">#</a> 为排序使用索引 OrdeBy 优化</h3>\n<p>MySQL 支持<mark>二种方式的排序</mark>，<mark>FileSort</mark> 和<mark> Index</mark>，<mark>Index 效率高。</mark></p>\n<p>它指 MySQL 扫描索引本身完成排序。FileSort 方式效率较低。</p>\n<p>&lt;font color=red&gt;ORDER BY 满足两情况，会使用 Index 方式排序：&lt;/font&gt;</p>\n<ul>\n<li>\n<p>ORDER BY 语句使用索引最左前列</p>\n</li>\n<li>\n<p>使用 where 字句与 Order By 字句条件列组合满足<mark>索引最左前列</mark></p>\n</li>\n</ul>\n<p>建议：</p>\n<p>​\t尽量使用 Index 方式排序，避免使用 FileSort 方式排序尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀</p>\n<p>&lt;font color=red&gt; 如果不在索引列上，filesort 有两种算法：mysql 就要启动双路排序和单路排序 &lt;/font&gt;</p>\n<p><mark><em>双路排序</em></mark></p>\n<blockquote>\n<p>MySQL 4.1 之前是使用双路排序，字面意思就是两次扫描磁盘，最终得到数据，<br />\n读取行指针和 orderby 列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出</p>\n<p>从磁盘取排序字段，在 buffer 进行排序，再从磁盘取其他字段。</p>\n<p>取一批数据， 要对磁盘进行了两次扫描，众所周知，I\\O 是很耗时的，所以在 mysql4.1 之后，出现了第二种改进的算法，就是单路排序</p>\n</blockquote>\n<p><mark><em>单路排序</em></mark></p>\n<blockquote>\n<p>从磁盘读取查询需要的所有列，按照 order by 列在 buffer 对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机 IO 变成了顺序 I0, 但是它会使用更多的空间，因为它把每一行都保存在内存中了。</p>\n</blockquote>\n<p>结论：</p>\n<p>​\t<strong>由于单路是后出的，总体而言好过双路！</strong></p>\n<p>引申出来的问题：</p>\n<blockquote>\n<p>​\t在 sort_buffer 中，方法 B 比方法 A 要多占用很多空间，因为方法 B 是把所有字段都取出，所以有可能取出的数据的总大小超出了 sort_buffer 的容量，导致每次只能取 sort_buffer 容量大小的数据，进行排序（创建 tmp 文件，多路合并〉，排完再取取 sort_buffer 容量大小，再排…… 从而多次 I/O。本来想省一次 I/O 操作，反而导致了大量的 I/O 操作，反而得不偿失。</p>\n</blockquote>\n<p>优化策略</p>\n<ul>\n<li>增大 sort_buffer_size 参数的设置</li>\n<li>增大 max_length_for_sort_data 参数的设置</li>\n</ul>\n<p>&lt;font color=red&gt; 提高 Order By 的速度 &lt;/font&gt;</p>\n<ol>\n<li>\n<p>Order by 时 select 是一个大忌只 Query 需要的字段，这点非常重要。在这里的影响是:</p>\n<ol>\n<li>当 Query 的字段共小总和小于 max_length_for_sort_data 而且排序字段不是 TEXTIBLOB 类型时，会用改进后的算法 —— 单路排序，否则用老算法 —— 多路排序。</li>\n<li>两种算法的数据都有可能超出 sort_buffer 的容量，超出之后，会创建 tmp 文件进行合并排序，导致多次 IO，但是用单路排序算法的风险会更大一些，所以要提高 sort_buffer_size.</li>\n</ol>\n</li>\n<li>\n<p>尝试提高 sort_buffer_size<br />\n 不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的</p>\n</li>\n<li>\n<p>尝试提高 max_length_for_sort_data<br />\n 提高这个参数，会增加用改进算法的概率。但是如果设的太高，数据总容量超出 sort_buffer_size 的概率就增大，明显症状是高的磁盘 I/O 活动和低的处理器使用率.</p>\n</li>\n</ol>\n<h3 id=\"group-by\"><a class=\"anchor\" href=\"#group-by\">#</a> Group By</h3>\n<p>group by 实质是<mark>先排序</mark>后进行<mark>分组</mark>，<mark>遵照索引建的最佳左前缀</mark></p>\n<p>当无法使用索引列，增大 max_length_for_sort_data 参数的设置 + 增大 sort_buffer_size 参数的设置</p>\n<p>where 高于 having，能写在 where 限定的条件就不要去 having 限定了。</p>\n<p>其余均和 Order by 相同</p>\n<h2 id=\"慢查询日志\"><a class=\"anchor\" href=\"#慢查询日志\">#</a> 慢查询日志</h2>\n<ul>\n<li>\n<p>MySQL 的慢查询日志是 MySQL 提供的一种日志记录，它用来记录在 MySQL 中响应时间超过阀值的语句，具体指运行时间超过 long_query_time 值的 SQL，则会被记录到慢查询日志中。</p>\n</li>\n<li>\n<p>具体指运行时间超过 long_query_time 值的 SQL，则会被记录到慢查询日志中。long_query_time 的默认值为 10，意思是运行 10 秒以上的语句。</p>\n</li>\n<li>\n<p>由他来查看哪些 SQL 超出了我们的最大忍耐时间值，比如一条 sql 执行超过 5 秒钟，我们就算慢 SQL，希望能收集超过 5 秒的 sql，结合之前 explain 进行全面分析。</p>\n</li>\n</ul>\n<h3 id=\"操作说明\"><a class=\"anchor\" href=\"#操作说明\">#</a> 操作说明</h3>\n<p>&lt;font color=red&gt; 默认情况下，MySQL 数据库没有开启慢查询日志 &lt;/font&gt;，需要我们手动来设置这个参数。</p>\n<p>&lt;font color=red&gt; 当然，如果不是调优需要的话，一般不建议启动该参数 &lt;/font&gt;，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件</p>\n<h3 id=\"查看是否开启及开启\"><a class=\"anchor\" href=\"#查看是否开启及开启\">#</a> 查看是否开启及开启</h3>\n<p>默认：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'%slow_query_log%'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- OFF 关闭</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819170427373.png\" class=\"\"></p>\n<p>开启</p>\n<p>开启了慢查询日志只对当前数据库生效，如果 MySQL 重启后则会失效。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> slow_query_log<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果要永久生效，就必须修改配置文件 my.cnf（其它系统变量也是如此)</p>\n<p>修改 my.cnf 文件，[mysqld] 下增加或修改参数<br />\n slow_query_log 和 slow_query_log_file 后，然后重启 MySQL 服务器。也即将如下两行配置进 my.cnf 文件</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>slow_query_log <span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">slow_query_log_file</span><span class=\"token operator\">=</span>/var/lib/mysqlslow-slow.log</pre></td></tr></table></figure><p>关于慢查询的参数 slow_query_log_file，它指定慢查询日志文件的存放路径，&lt;font color=red&gt; 系统默认会给一个缺省的文件 host_name-slow.log&lt;/font&gt;(如果没有指定参数 slow_query_log_file 的话)</p>\n<h3 id=\"那么开启了慢查询日志后什么样的sql才会记录到慢查询日志里面呢\"><a class=\"anchor\" href=\"#那么开启了慢查询日志后什么样的sql才会记录到慢查询日志里面呢\">#</a> 那么开启了慢查询日志后，什么样的 SQL 才会记录到慢查询日志里面呢？</h3>\n<p>这个是由参数 long_query_time 控制，默认情况下 long_query_time 的值为 10 秒，命令:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHoW</span> VARIABLES <span class=\"token operator\">LIKE</span> 'long_query_time<span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819171026557.png\" class=\"\"></p>\n<p>可以使用命令修改，也可以在 my.cnf 参数里面修改。</p>\n<p>假如运行时间正好等于 long_query_time 的情况，并不会被记录下来。也就是说，在 mysql 源码里是 &lt;font color=red&gt; 判断大于 long_query_time，而非大于等于 &lt;/font&gt;。</p>\n<h3 id=\"case\"><a class=\"anchor\" href=\"#case\">#</a> Case</h3>\n<ol>\n<li>查看当前多少秒算慢</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'long_query_time%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>设置慢的阙值时间</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> long_query_time<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819171344450.png\" class=\"\"></p>\n<ol start=\"3\">\n<li>为什么设置后看不出变化？</li>\n</ol>\n<p>需要<mark>重新连接或新开一个会话</mark>才能看到修改值</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHow</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'long _query_time%'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">global</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'long_query_time'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>记录慢 SQL 并后续分析 R</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> sleep<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">-- 睡 4s</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 查看日志</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819171955968.png\" class=\"\"></p>\n<ol start=\"5\">\n<li>查询当前系统中有多少条慢查询记录冒 R</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">global</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'%Slow_queries%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819172043683.png\" class=\"\"></p>\n<h3 id=\"配置版\"><a class=\"anchor\" href=\"#配置版\">#</a> 配置版</h3>\n<p>【mysqld】下配置:</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 开启查询日志</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">slow_query_log</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 日志地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">slow_query_log_file</span><span class=\"token operator\">=</span>/var/lib/mysql/atguigu-slow.log</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 最大的查询时间，超过就算是慢查询</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">long_query_time</span><span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 日志输出</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">log_output</span><span class=\"token operator\">=</span>FILE</pre></td></tr></table></figure><h3 id=\"日志分析工具mysqldumpslow\"><a class=\"anchor\" href=\"#日志分析工具mysqldumpslow\">#</a> 日志分析工具 —mysqldumpslow</h3>\n<p>​\t在生产环境中，如果要手工分析日志，查找、分析 SQL，显然是个体力活，MySQL 提供了日志分析工具 mysqldumpslow</p>\n<p>查看 mysqldumpslow 的帮助信息</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">--help</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常用参数</th>\n<th style=\"text-align:center\">注解</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">s</td>\n<td style=\"text-align:center\">是表示按照何种方式排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">c</td>\n<td style=\"text-align:center\">访问次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">l</td>\n<td style=\"text-align:center\">锁定时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:center\">返回记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">t</td>\n<td style=\"text-align:center\">查询时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">al</td>\n<td style=\"text-align:center\">平均锁定时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ar</td>\n<td style=\"text-align:center\">平均返回记录数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">at</td>\n<td style=\"text-align:center\">平均查询时间</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">t</td>\n<td style=\"text-align:center\">即为返回前面多少条的数据；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">g</td>\n<td style=\"text-align:center\">后边搭配一个正则匹配模式，大小写不敏感的；</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>得到返回记录集最多的10个SQL</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">-s</span> r <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> /var/lib/mysql/atguigu-slow.log</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>得到访问次数最多的10个SQL</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">-s</span> c <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> /var/lib/mysql/atguigu-slow.log</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>得到按照时间排序的前10条里面含有左连接的查询语句</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">-s</span> t <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> <span class=\"token parameter variable\">-g</span> <span class=\"token string\">\"left join\"</span>lar/lib/mysql/atguigu-slow.log</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>另外建议在使用这些命令时结合<span class=\"token operator\">|</span>和more使用，否则有可能出现爆屏情况</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mysqldumpslow <span class=\"token parameter variable\">-s</span> r <span class=\"token parameter variable\">-t</span> <span class=\"token number\">10</span> /ar/lib/mysql/atguigu-slow.log <span class=\"token operator\">|</span> <span class=\"token function\">more</span></pre></td></tr></table></figure><h2 id=\"批量数据脚本\"><a class=\"anchor\" href=\"#批量数据脚本\">#</a> 批量数据脚本</h2>\n<p>1. 建表 (dept,emp)</p>\n<p>2. 设置参数 log_bin_trust_function_creatorst</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建函数，假如报错：This function has none of DETERMINISTIC</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 由于开启过慢查询日志，因为我们开启了 bin-log, 我们就必须为我们的 function 指定一个参数。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'log_bin_trust_function_creators'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> log_bin_trust_function_creators<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 这样添加了参数以后，如果 mysqld 重启，上述参数又会消失，永久方法:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>I</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>windows下my<span class=\"token punctuation\">.</span>ini<span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span>加上log_bin_trust_function_creators<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>linux下letc<span class=\"token operator\">/</span>my<span class=\"token punctuation\">.</span>cnf 下my<span class=\"token punctuation\">.</span>cnf<span class=\"token punctuation\">[</span>mysqld<span class=\"token punctuation\">]</span>加上log_bin_trust_function_creators<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></table></figure><p>3. 创建函数，保证每条数据都不同</p>\n<p>随机产生字符串</p>\n<p>随机产生部门编号</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> $$</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> rand_string<span class=\"token punctuation\">(</span>n lNT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span>）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> chars_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'abcdefghijlklmnoparstuvwxyABCDEFJHIJKLMNOPQRSTUWWXYZ'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> return_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">WHILE</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token keyword\">DO</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">SET</span> return_str <span class=\"token operator\">=</span>CONCAT<span class=\"token punctuation\">(</span>return_str<span class=\"token punctuation\">,</span>SUBSTRING<span class=\"token punctuation\">(</span>chars_str<span class=\"token punctuation\">,</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span>i<span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">RETURN</span> return_str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>$$</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>DFLIMITER <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                               </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">delimiter</span> $$</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">CREATE</span> FUNCTLON rand_num<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">int</span> <span class=\"token keyword\">default</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">RETURN</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">END</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">delimiter</span> $$</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>DFLIMITER <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4. 创建存储过程</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>创建往emp表中插入数据的存储过程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> $$</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_emp<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> <span class=\"token keyword\">START</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">IN</span> max_num <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">#set autocomnit = 0 把 autocommit 设置成 0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">REPEAT</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">SET</span> i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTo</span> emp<span class=\"token punctuation\">(</span>empno，ename <span class=\"token punctuation\">,</span> job <span class=\"token punctuation\">,</span>mgr <span class=\"token punctuation\">,</span>hiredate <span class=\"token punctuation\">,</span>sal <span class=\"token punctuation\">,</span>comm <span class=\"token punctuation\">,</span>deptno <span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>SEAR<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sAESLsy'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0001</span><span class=\"token punctuation\">,</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    UNTIL i <span class=\"token operator\">=</span> max_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">END</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>$$</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>DFLIMITER <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>创建往dept表中插入数据的存储过程</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>DFLIMITER $$</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_dept<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> <span class=\"token keyword\">START</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">IN</span> max_num lNT<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">DECLARE</span> i lNT <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">REPEAT</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    SETi<span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept <span class=\"token punctuation\">(</span>deptno <span class=\"token punctuation\">,</span>dname<span class=\"token punctuation\">,</span>loc <span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">START</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    UNTIL i <span class=\"token operator\">=</span> max_num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">END</span> $$</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>DFLIMITER <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>5. 调用存储过程</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">call</span> insert_emp<span class=\"token punctuation\">(</span><span class=\"token number\">10001</span><span class=\"token punctuation\">,</span><span class=\"token number\">50000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">call</span> inser_dept<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"show-profile\"><a class=\"anchor\" href=\"#show-profile\">#</a> Show profile</h2>\n<p>是什么：是 mysql 提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于 SQL 的调优的测量</p>\n<p>官网: <span class=\"exturl\" data-url=\"aHR0cDovL2Rldi5teXNxbC5jb20vZG9jL3JlZm1hbi81LjUvZW4vc2hvdy1wcm9maWxlLmh0bWw=\">http://dev.mysql.com/doc/refman/5.5/en/show-profile.html</span></p>\n<p>默认情况下，参数处于关闭状态，并保存最近 15 次的运行结果</p>\n<p>分析步骤</p>\n<p>1. 是否支持，看看当前的 mysql 版本是否支持</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'profiling'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 默认是关闭，使用前需要开启</span></pre></td></tr></table></figure><p>2. 开启功能，默认是关闭，使用前需要开启</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span> profiling<span class=\"token operator\">=</span><span class=\"token keyword\">on</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">show</span> variables <span class=\"token operator\">like</span> <span class=\"token string\">'profiling'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3. 运行 SQL</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">join</span> dept d <span class=\"token keyword\">on</span> e<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> id<span class=\"token operator\">%</span><span class=\"token number\">10</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> id<span class=\"token operator\">%</span><span class=\"token number\">20</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>4. 查看结果，show profiles;</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> profiles<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819180736190.png\" class=\"\"></p>\n<p>5. 诊断 SQL，</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> profile cpu<span class=\"token punctuation\">,</span>block io <span class=\"token keyword\">for</span> query <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token comment\">-- 最后数字是上一步前面的 SQL 的 Id;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常用参数</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ALL</td>\n<td>显示所有的开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BLOCK IO</td>\n<td>显示块 IO 相关开销</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CONTEXT SWITCHES</td>\n<td>上下文切换相关开销</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CPU</td>\n<td>显示 CPU 相关开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">IPC</td>\n<td>显示发送和接收相关开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MEMORY</td>\n<td>显示内存相关开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PAGE FAULTS</td>\n<td>显示页面错误相关开销信息 |</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SOURCE</td>\n<td>显示和 Source_function，Source_file，Source_line 相关的开销信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SWAPS</td>\n<td>显示交换次数相关开销的信息</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819182050124.png\" class=\"\"></p>\n<p>6. 日常开发需要注意的结论</p>\n<ul>\n<li>\n<p>converting HEAP to MyISAM     查询结果太大，内存都不够用了往磁盘上搬了。</p>\n</li>\n<li>\n<p>Creating tmp table       创建临时表</p>\n<ul>\n<li>拷贝数据到临时表</li>\n<li>用完再删除</li>\n</ul>\n</li>\n<li>\n<p>Copying to tmp table on disk      把内存中临时表复制到磁盘，危险！！!</p>\n</li>\n<li>\n<p>locked    (死锁)</p>\n</li>\n</ul>\n<h2 id=\"全局查询日志\"><a class=\"anchor\" href=\"#全局查询日志\">#</a> 全局查询日志</h2>\n<p>&lt;font color=red&gt;<strong> 永远不要在生产环境开启这个功能</strong>。&lt;/font&gt;</p>\n<p>配置启用</p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#在 mysql 的 my.cnf 中，设置如下:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#开启</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">general_log</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#记录日志文件的路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">general_log_file</span><span class=\"token operator\">=</span>/path/logfile</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#输出格式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">log_output</span><span class=\"token operator\">=</span>FILE</pre></td></tr></table></figure><p>编码启用</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 命令</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> general_log<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> log_output<span class=\"token operator\">=</span><span class=\"token string\">'TABLE'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 此后，你所编写的 sql 语句，将会记录到 mysql 库里的 general_log 表，可以用下面的命令查看</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span>general_lpg<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>&lt;div name=MySQL 的锁机制&gt;</p>\n<h1 id=\"mysql锁机制\"><a class=\"anchor\" href=\"#mysql锁机制\">#</a> MySQL 锁机制</h1>\n<p>概述：锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源〈如 CPU、RAM、V/O 等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。[</p>\n<p>打个比方，我们到淘宝上买一件商品，商品只有一件库存，这个时候如果还有另一个人买，那么如何解决是你买到还是另一个人买到的问题？</p>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819183900802.png\" class=\"\"></p>\n<p>这里肯定要用到事务，我们先从库存表中取出物品数量，然后插入订单，付款后插入付款表信息，然后更新商品数量。在这个过程中，使用锁可以对有限的资源进行保护，解决隔离和并发的矛盾。</p>\n<h2 id=\"锁的分类\"><a class=\"anchor\" href=\"#锁的分类\">#</a> 锁的分类</h2>\n<ul>\n<li>\n<p>从对数据操作的粒度分</p>\n<ul>\n<li>表锁 (偏读，解决幻读 (一个事务中对数据添加、删除，并且多次查询，每次结果不都相同))</li>\n<li>行锁 (偏写，解决重复读 (一个事务中对一条数据多次修改，并且多次查询，每次结果不都相同))</li>\n</ul>\n</li>\n<li>\n<p>从对数据操作的类型（读 \\ 写) 分</p>\n<ul>\n<li><mark>读锁 (共享锁)</mark>：针对同一份数据，多个读操作可以同时进行而不会互相影响。</li>\n<li><mark>写锁 (排它锁)</mark>：当前写操作没有完成前，它会阻断其他写锁和读锁。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"读锁案例介绍\"><a class=\"anchor\" href=\"#读锁案例介绍\">#</a> 读锁 (案例介绍)</h2>\n<p>准备：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> mylock<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">engine</span> myisam<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> mylock<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mylock<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>book<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>bookid<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">unsigned</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>bookid<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_card<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">9</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 手动添加表锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 语法：lock table Table_1_Name  read/write,Table_2_name read/write,..;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">lock</span> <span class=\"token keyword\">table</span> mylock <span class=\"token keyword\">read</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 查看锁</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">open</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 释放锁</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">unlock</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mylock<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 读锁没有释放之前这个回话只能读取这个读锁表，其他回话可以查询或者更新未锁定的表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 其他回话插入或者更新表的时候会进入阻塞状态，直至锁的释放</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">update</span> mylock <span class=\"token keyword\">set</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'aa'</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"写锁案例介绍\"><a class=\"anchor\" href=\"#写锁案例介绍\">#</a> 写锁 (案例介绍)</h2>\n<p>Session 1 (产生锁)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">lock</span> <span class=\"token keyword\">table</span> mylock <span class=\"token keyword\">write</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mylock<span class=\"token punctuation\">;</span> <span class=\"token comment\">--ok</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">update</span> mylock <span class=\"token keyword\">set</span> name <span class=\"token operator\">=</span><span class=\"token string\">'aa'</span> <span class=\"token keyword\">where</span>  id <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- ok</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> book<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'uplock tables' at line 1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">unlock</span> <span class=\"token keyword\">tables</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>Session 2</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> mylock<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- block 阻塞住了，直至锁的释放才看到了</span></pre></td></tr></table></figure><h2 id=\"读写结论\"><a class=\"anchor\" href=\"#读写结论\">#</a> 读写结论</h2>\n<p>MyISAM 在执行查询语句〈SELECT) 前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。</p>\n<p>MySQL 的表级锁有两种模式:</p>\n<p>​\t表共享读锁 (Table Read Lock)</p>\n<p>​\t表独享读锁 (Table Write Lock)</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">lock_type</th>\n<th style=\"text-align:center\">是否共享</th>\n<th style=\"text-align:center\">读锁</th>\n<th style=\"text-align:center\">写锁</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">读锁</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">写锁</td>\n<td style=\"text-align:center\">是</td>\n<td style=\"text-align:center\">否</td>\n<td style=\"text-align:center\">否</td>\n</tr>\n</tbody>\n</table>\n<p><mark>结论:</mark></p>\n<p>结合上表，所以对 MyISAM 表进行操作，会有以下情况:</p>\n<p>1、对 MyISAM 表的读操作〈加读锁)，不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。</p>\n<p>2、对 MyISAM 表的写操作（加写锁)，会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。</p>\n<p>&lt;font color=red&gt;<strong> 简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞</strong>。&lt;/font&gt;</p>\n<h2 id=\"表锁案例介绍\"><a class=\"anchor\" href=\"#表锁案例介绍\">#</a> 表锁 (案例介绍)</h2>\n<p>【如何分析表锁定】<br />\n可以通过检查 table_locks_waited 和 table_locks_immedlate 状态变量来分析系统上的表锁定:</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'table%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819205444832.png\" class=\"\"></p>\n<p>这里有两个状态变量记录 MySQL 内部表级锁定的情况，两个变量说明如下:</p>\n<p>&lt;font color=blue&gt;T<strong>able_locks_immediate: 产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加 1</strong>&lt;/font&gt;</p>\n<p>&lt;font color=blue&gt;<strong>Table_locks_waited: 出现表级锁定争用而发生等待的次数 (不能立即获取锁的次数，每等待一次锁值加 1),</strong><br />\n<strong> 此值高则说明存在着较严重的表级锁争用情况；</strong>&lt;/font&gt;</p>\n<p>&lt;font color=red&gt;<strong> 此外，&lt;u&gt;<em><strong>Myisam</strong></em>&lt;/u&gt; 的读写锁调度是写优先，这也是 &lt; u&gt;<em><strong>myisam</strong></em>&lt;/u&gt; 不适合做写为主表的引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞</strong> &lt;/font&gt;</p>\n<h2 id=\"行锁案例介绍\"><a class=\"anchor\" href=\"#行锁案例介绍\">#</a> 行锁 (案例介绍)</h2>\n<h3 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h3>\n<blockquote>\n<p>​\t偏向 InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p>\n<p>​\tInnoDB 与 MyISAM 的最大不同有两点:</p>\n<p>​\t一、是支持事务（TRANSACTION);</p>\n<p>​\t二、是采用了行级锁</p>\n</blockquote>\n<h3 id=\"事务知识复习\"><a class=\"anchor\" href=\"#事务知识复习\">#</a> 事务知识复习</h3>\n<h4 id=\"四大特性\"><a class=\"anchor\" href=\"#四大特性\">#</a> 四大特性</h4>\n<p>事务是由一组 SQL 语句组成的逻辑处理单元，事务具有以下 4 个属性，通常简称为事务的 ACID 属性。</p>\n<ul>\n<li>&lt;font color=red&gt; 原子性（Atomicity)&lt;/font&gt;﹔事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。</li>\n<li>&lt;font color=red&gt; 一致性（Consistent)&lt;/font&gt;: 在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性；事务结束时，所有的内部数据结构（如 B 树索引或双向链表）也都必须是正确的。</li>\n<li>&lt;font color=red&gt; 隔离性（lsolation)&lt;/font&gt;: 数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的 “独立” 环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。</li>\n<li>&lt;font color=red&gt; 持久性（Durable)&lt;/font&gt;: 事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。</li>\n</ul>\n<p></p>\n<h4 id=\"并发带来的问题\"><a class=\"anchor\" href=\"#并发带来的问题\">#</a> 并发带来的问题</h4>\n<p>更新丢失 (Lost Update)</p>\n<blockquote>\n<p>当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题――最后的更新覆盖了由其他事务所做的更新。<br />\n例如，两个程序员修改同一 java 文件。每程序员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改。<br />\n如果在一个程序员完成并提交事务之前，另一个程序员不能访问同一文件，则可避免此问题。</p>\n</blockquote>\n<p>脏读 (Dirty Reads)</p>\n<blockquote>\n<p>简单来说就是 读了未提交的，此时事务级别在最低，改善方法就是提高级别即可</p>\n</blockquote>\n<p>不可重复读 (Non-Repeatable Reads)</p>\n<blockquote>\n<p>简单来说就是在一个事务中多次读取某些数据，数据的条数没有变，但是数据却变了。</p>\n<p>重在修改</p>\n</blockquote>\n<p>幻读 (Phantom Reads)</p>\n<blockquote>\n<p>简单来说就是在一个事务中多次读取某些数据，数据的条数变了</p>\n<p>重在添加、删除</p>\n</blockquote>\n<h4 id=\"事务的隔离级别\"><a class=\"anchor\" href=\"#事务的隔离级别\">#</a> 事务的隔离级别</h4>\n<p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220819211429410.png\" class=\"\"></p>\n<h4 id=\"面试题-2\"><a class=\"anchor\" href=\"#面试题-2\">#</a> 面试题</h4>\n<p>不可重复读和幻读的区别？如何解决？</p>\n<blockquote>\n<p>​\t他们都是在一个事务中对某些数据进行多次读取，但是不可重复读的问题重在多次读取的数据不都一致；幻读重在多次读取确得到不一样数据量的数据</p>\n<p>解决办法：</p>\n<p>​\t重复读加行数</p>\n<p>​\t幻读加表锁</p>\n</blockquote>\n<h3 id=\"案例分析\"><a class=\"anchor\" href=\"#案例分析\">#</a> 案例分析</h3>\n<p>准备</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> test_innodb_lock <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">engine</span><span class=\"token operator\">=</span><span class=\"token keyword\">innodb</span><span class=\"token punctuation\">;</span>I</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token string\">'6000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token string\">'7000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token string\">'80O0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">'9000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> test_innodb_lock <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> test_innodb_a_ind  <span class=\"token keyword\">on</span> test_innodb_lock<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> test_innodb_b_ind  <span class=\"token keyword\">on</span> test_innodb_lock<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">-- 打开两个会话 并且都关闭自动提交</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">set</span> autocommit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"行锁演示\"><a class=\"anchor\" href=\"#行锁演示\">#</a> 行锁演示</h4>\n<p>&lt;style&gt;<br />\ntable td{<br />\ntext-align:center;<br />\nborder-bottom: 1px solid #000000;<br />\nborder-right: 1px solid #000000;<br />\n}<br />\ntable tr:first-child td{<br />\ntext-align:center;<br />\nborder-top: 1px solid #000000;<br />\n}<br />\ntable tr td:first-child{<br />\ntext-align:center;<br />\nborder-left: 1px solid #000000;<br />\n}<br />\n&lt;/style&gt;<br />\n&lt;table  border=&quot;1px solid red;&quot; &gt;<br />\n&lt;tr &gt;<br />\n&lt;th&gt;Session 1&lt;/th&gt;<br />\n&lt;th&gt;Session 2&lt;/th&gt;<br />\n&lt;th&gt;explain  &lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th style=&quot;text-align:center; &quot; colspan='3'&gt;case 1&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;img/image-20220819233537212.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 关闭 Session 1 的自动提交<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;img/image-20220819230937872.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;p&gt;<br />\n 关闭 Session 2 的自动提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 目的是：模拟高并发的情况下事务的处理情况，就好比一个 SQL 在修改但是没又被提交<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 在 Innodb 引擎作用下默认行锁，可以自动锁住我们当行数据保证数据的准确性<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot; style=&quot;text-align:center;&quot;  &gt;case 2&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot;img/image-20220819234521630.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 修改 a=4 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot;img/image-20220819233807979.png &quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 无法查询到原有数据<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p&gt;<br />\n&lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot;  style=&quot;text-align:center;&quot; &gt;case 3&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot;img/image-20220819234824459.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 提交事务<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot;img/image-20220819234803742.png &quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 提交事务 ()<br />\n&lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;&gt;<br />\nSession 2 这里也可以当做是清除之前数据库累计事务<br />\n &lt;/p&gt;<br />\n&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 如果不提交，我们的 Session 2 还是原来的数据<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot; style=&quot;text-align:center;&quot; &gt;case 4&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot;img/image-20220819235205871.png &quot;/&gt;<br />\n&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 修改 a=4 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot; img/image-20220819235132716.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 修改 a=9 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 两个 Session 操作不同的数据，互补影响，充分的体现了行锁的作用<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot; style=&quot;text-align:center;&quot; &gt;case 5&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot;img/image-20220820093552303.png &quot;/&gt;<br />\n&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 修改 a=1 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot; img/image-20220820093614653.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 修改 a=1 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 两个 Session 操作相同的数据，互相影响<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession2 在 Session1 没有提交之前，直接处于阻塞状态<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;th colspan=&quot;3&quot; style=&quot;text-align:center;&quot; &gt;case 5&lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot;img/image-20220819235205871.png &quot;/&gt;<br />\n&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 1 修改 a=4 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot; img/image-20220819235132716.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\nSession 2 修改 a=9 的数据，不提交<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 两个 Session 操作不同的数据，互补影响，充分的体现了行锁的作用<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/table&gt;</p>\n<h4 id=\"索引失效导致行锁变成表锁\"><a class=\"anchor\" href=\"#索引失效导致行锁变成表锁\">#</a> 索引失效导致行锁变成表锁</h4>\n<p>&lt;style&gt;<br />\ntable td{<br />\ntext-align:center;<br />\nborder-bottom: 1px solid #000000;<br />\nborder-right: 1px solid #000000;<br />\n}<br />\ntable tr:first-child td{<br />\ntext-align:center;<br />\nborder-top: 1px solid #000000;<br />\n}<br />\ntable tr td:first-child{<br />\ntext-align:center;<br />\nborder-left: 1px solid #000000;<br />\n}<br />\n&lt;/style&gt;<br />\n&lt;table  border=&quot;1px solid red;&quot; &gt;<br />\n&lt;tr &gt;<br />\n&lt;th&gt;Session 1&lt;/th&gt;<br />\n&lt;th&gt;Session 2&lt;/th&gt;<br />\n&lt;th&gt;explain  &lt;/th&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;img/image-20220820000724418.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src= &quot;img/image-20220820000816926.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 我们在最开始准备阶段，就创建了关于 a ,b 的索引 (单索引)<br />\n&lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 我们之前说过，在 where 上不要进行隐式转换，这样会导致索引失效<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 从这个例子中我们左边进行了隐式操作，导致索引失效，第二个 Session<br />\n&lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 直接进入到了阻塞状态，&lt;a font=&quot;color:'red'&quot;&gt; 表明了我们的索引失效让行锁变成了表锁 &lt;/a&gt;<br />\n&lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;tr&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot;img/image-20220820000801075.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;img src = &quot;img/image-20220820000837775.png&quot;/&gt;&lt;br/&gt;<br />\n&lt;/td&gt;<br />\n&lt;td&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 上面的例子中直至 Session 1 回话结束，这时候释放了锁<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 我们的 Session 2 才接受到了锁，进入了表<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 这个例子充分的表明了，我们在操作中一定要注意索引失效的问题<br />\n &lt;/p&gt;&lt;br/&gt;<br />\n&lt;p style=&quot;text-align:center; &quot;&gt;<br />\n 他有可能会导致我们效率更低<br />\n &lt;/p&gt;<br />\n&lt;/td&gt;<br />\n&lt;/tr&gt;<br />\n&lt;/table&gt;</p>\n<h4 id=\"间隙锁的危害\"><a class=\"anchor\" href=\"#间隙锁的危害\">#</a> 间隙锁的危害</h4>\n<p>【概念】</p>\n<p>​\t当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB 会给符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并木存在的记录，叫做 “间隙（GAP)”，</p>\n<p>InnoDB 也会对这个 “间隙” 加锁，这种锁机制就是所谓的间隙锁（Next-Key 锁）。</p>\n<p>【危害】<br />\n因为 Query 执行过程中通过过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，<br />\n而造成在锁定的时候无<br />\n法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- session 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">update</span> t1 <span class=\"token keyword\">set</span> b<span class=\"token operator\">=</span><span class=\"token string\">'12312'</span> <span class=\"token keyword\">where</span> a<span class=\"token operator\">></span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> a<span class=\"token operator\">&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- session 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> t1 <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">'asda'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220820001444127.png\" class=\"\"></p>\n<p>明显的看到在 Session 1 执行结束之后，执行 Session 2 即使他们操作的不是同一行也会因为间隙锁的缘故锁定这一行，即使不存在也是如此，直到 commit 之后 Session 2 才反应</p>\n<h4 id=\"如何锁定一行\"><a class=\"anchor\" href=\"#如何锁定一行\">#</a> 如何锁定一行</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>select xoo.... for update 锁定某一行后，其它的操作会械阻塞，直到锁定行的会话提交 commit</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">begin</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> test_innodb_lock <span class=\"token keyword\">where</span> a <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token keyword\">for</span> <span class=\"token keyword\">update</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">commit</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"案例结论\"><a class=\"anchor\" href=\"#案例结论\">#</a> 案例结论</h3>\n<p>​\tInnodb 存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于 MyISAM 的表级锁定的。当系统并发量较高的时候，Innodb 的整体性能和 MyIlSAM 相比就会有比较明显的优势了。</p>\n<p>​\t但是，Innodb 的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让 Innodb 的整体性能表现不仅不能比 MyISAM 高，甚至可能会更差。(索引失效行锁变表锁)</p>\n<h3 id=\"如何分析行锁定\"><a class=\"anchor\" href=\"#如何分析行锁定\">#</a> 如何分析行锁定</h3>\n<p>通过检查 InnoDB_row_lock 状态变量来分析系统上的行锁的争夺情况</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> <span class=\"token keyword\">status</span> <span class=\"token operator\">like</span> <span class=\"token string\">'innodb_row_lock%'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/DataBase/MySQL/MySQL_Super/image-20220820002244586.png\" class=\"\"></p>\n<p>对各个状态量的说明如下:</p>\n<p>Innodb_row_lock_current_waits：当前正在等待锁定的数量；</p>\n<p>Innodb_row_lock_time：队系统启动到现在锁定总时间长度；</p>\n<p>Innodb_row_lock_time_avg：每次等待所花平均时间；</p>\n<p>Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间；</p>\n<p>Innodb_row_lock_waits：系统启动后到现在总共等待的次数；</p>\n<p>对于这 5 个状态变量，比较重要的主要是</p>\n<p>&lt;font color=red&gt;Innodb_row_lock_time_avg（等待平均时长）&lt;/font&gt;，</p>\n<p>&lt;font color=red&gt;Innodb_row_lock_waits（等待总次数)&lt;/font&gt; ，</p>\n<p>&lt;font color=red&gt;lnnodb_row_lock_time（等待总时长）这三项 &lt;/font&gt;。</p>\n<p>尤其是当等踌次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待<br />\n然后根据分析结果着手指定优化计划。</p>\n<h3 id=\"优化意见\"><a class=\"anchor\" href=\"#优化意见\">#</a> 优化意见</h3>\n<ol>\n<li>\n<p>尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。</p>\n</li>\n<li>\n<p>合理设计索引，尽量缩小锁的范围</p>\n</li>\n<li>\n<p>尽可能较少检索条件，避免间隙锁</p>\n</li>\n<li>\n<p>尽量控制事务大小，减少锁定资源量和时间长度</p>\n</li>\n<li>\n<p>尽可能低级别事务隔离</p>\n</li>\n</ol>\n<h2 id=\"页锁案例介绍\"><a class=\"anchor\" href=\"#页锁案例介绍\">#</a> 页锁 (案例介绍)</h2>\n<p>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>\n<h1 id=\"主从复制\"><a class=\"anchor\" href=\"#主从复制\">#</a> 主从复制</h1>\n<p>在总结 MySQL 的分库分表时候再将，Mycat 章节 (也有可能是 Shardingsphere)</p>\n<h1 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h1>\n<p>&lt;h2&gt;<br />\n&lt;div name=select_type&gt;<br />\n&lt;a style=&quot;color:red; &quot; &gt;Select_Type&lt;/a&gt;<br />\n&lt;/div&gt;<br />\n&lt;/h2&gt;</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">select_type 价值</th>\n<th style=\"text-align:center\">JSON 名称</th>\n<th style=\"text-align:center\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">SIMPLE</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">简单选择（不使用 UNION 或子查询）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">PRIMARY</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">多层子查询中最外层选择</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UNION</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">联盟中的第二个或稍后的 SELECT 语句 &lt;br/&gt; 若第二个 SELECT 出现在 UNION 之后，则被标记为 UNION;&lt;br/&gt; 若 UNION 包含在 FROM 子句的子查询中，外层 SELECT 将被标记为：DERIVED</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DEPENDENT UNION</td>\n<td style=\"text-align:center\">dependent(true)</td>\n<td style=\"text-align:center\">UNION 中的第二个或更高版本的 SELECT 语句，依赖于外部查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UNION RESULT</td>\n<td style=\"text-align:center\">union_result</td>\n<td style=\"text-align:center\">从 UNION 表获取结果的 SELECT</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SUBQUERY</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">子查询中的第一个 SELECT&lt;br/&gt; 在 SELECT 或 WHERE 列表中包含了子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DEPENDENT SUBQUERY</td>\n<td style=\"text-align:center\">dependent(true)</td>\n<td style=\"text-align:center\">子查询中的第一个 SELECT, 依赖于外部查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">DERIVED</td>\n<td style=\"text-align:center\">没有</td>\n<td style=\"text-align:center\">派生表 &lt;br/&gt; 在 FROM 列表中包含的子查询被标记为 DERIVED (衍生) MySQL 会递归执行这些子查询，把结果放在临时表里。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MATERIALIZED</td>\n<td style=\"text-align:center\">material!zed_from_subquery</td>\n<td style=\"text-align:center\">实例化子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UNCACHEABLE SU3QUERY</td>\n<td style=\"text-align:center\">cacheable(false)</td>\n<td style=\"text-align:center\">无法缓存其结果并且必须为外部查询的每一行重新计算其结果的子查询</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">UNCACHEABLE UNION</td>\n<td style=\"text-align:center\">cacheable(false)</td>\n<td style=\"text-align:center\">在属于不可缓存子查询的 UNION 中的第二个或更高版本选择（请参见 UNCACHEABLE SUBQUERY）</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--sample: 简单的查询，不包含子查询和 union</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">--primary: 查询中若包含任何复杂的子查询，最外层查询则被标记为 Primary</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> staname<span class=\"token punctuation\">,</span>ename supname <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> ename staname<span class=\"token punctuation\">,</span>mgr <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">)</span> t <span class=\"token keyword\">join</span> emp <span class=\"token keyword\">on</span> t<span class=\"token punctuation\">.</span>mgr<span class=\"token operator\">=</span>emp<span class=\"token punctuation\">.</span>empno <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">--union: 若第二个 select 出现在 union 之后，则被标记为 union</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> deptno <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> sal <span class=\"token operator\">></span><span class=\"token number\">2000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">--dependent union: 跟 union 类似，此处的 depentent 表示 union 或 union all 联合而成的结果会受外部表影响</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">where</span> e<span class=\"token punctuation\">.</span>empno  <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">select</span> empno <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> deptno <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> empno <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> sal <span class=\"token operator\">></span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">--union result: 从 union 表获取结果的 select</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> deptno <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token keyword\">union</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> sal <span class=\"token operator\">></span><span class=\"token number\">2000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">--subquery: 在 select 或者 where 列表中包含子查询</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> sal <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">--dependent subquery:subquery 的子查询要受到外部表查询的影响</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">where</span> e<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> deptno <span class=\"token keyword\">from</span> dept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">--DERIVED: from 子句中出现的子查询，也叫做派生类，</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> staname<span class=\"token punctuation\">,</span>ename supname <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> ename staname<span class=\"token punctuation\">,</span>mgr <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">)</span> t <span class=\"token keyword\">join</span> emp <span class=\"token keyword\">on</span> t<span class=\"token punctuation\">.</span>mgr<span class=\"token operator\">=</span>emp<span class=\"token punctuation\">.</span>empno <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">--UNCACHEABLE SUBQUERY：表示使用子查询的结果不能被缓存</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> empno <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> empno <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> deptno<span class=\"token operator\">=</span>@<span class=\"token variable\">@sort_buffer_size</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">--uncacheable union: 表示 union 的查询结果不能被缓存：sql 语句未验证</span></pre></td></tr></table></figure><p>&lt;h2&gt;<br />\n&lt;div name=extra_example &gt;<br />\n&lt;p style=&quot;color:red; font-size:25px; &quot; &gt;<br />\ntype_example<br />\n&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/h2&gt;</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--all: 全表扫描，一般情况下出现这样的 sql 语句而且数据量比较大的话那么就需要进行优化。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">--index：全索引扫描这个比 all 的效率要好，主要有两种情况，一种是当前的查询时覆盖索引，即我们需要的数据在索引中就可以索取，或者是使用了索引进行排序，这样就避免数据的重排序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">explain</span>  <span class=\"token keyword\">select</span> empno <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">--range：表示利用索引查询的时候限制了范围，在指定范围内进行查询，这样避免了 index 的全索引扫描，适用的操作符： =, &lt;>, >, >=, &lt;, &lt;=, IS NULL, BETWEEN, LIKE, or IN () </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> empno <span class=\"token operator\">between</span> <span class=\"token number\">7000</span> <span class=\"token operator\">and</span> <span class=\"token number\">7500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">--index_subquery：利用索引来关联子查询，不再扫描全表</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> emp<span class=\"token punctuation\">.</span>job <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> job <span class=\"token keyword\">from</span> t_job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">--unique_subquery: 该连接类型类似与 index_subquery, 使用的是唯一索引</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">where</span> e<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">in</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token keyword\">distinct</span> deptno <span class=\"token keyword\">from</span> dept<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">--index_merge：在查询过程中需要多个索引组合使用，没有模拟出来</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">--ref_or_null：对于某个字段即需要关联条件，也需要 null 值的情况下，查询优化器会选择这种访问方式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp e <span class=\"token keyword\">where</span>  e<span class=\"token punctuation\">.</span>mgr <span class=\"token operator\">is</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">or</span> e<span class=\"token punctuation\">.</span>mgr<span class=\"token operator\">=</span><span class=\"token number\">7369</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">--ref：使用了非唯一性索引进行数据的查找</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> <span class=\"token keyword\">create</span> <span class=\"token keyword\">index</span> idx_3 <span class=\"token keyword\">on</span> emp<span class=\"token punctuation\">(</span>deptno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp e<span class=\"token punctuation\">,</span>dept d <span class=\"token keyword\">where</span> e<span class=\"token punctuation\">.</span>deptno <span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">--eq_ref ：使用唯一性索引进行数据查找</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp<span class=\"token punctuation\">,</span>emp2 <span class=\"token keyword\">where</span> emp<span class=\"token punctuation\">.</span>empno <span class=\"token operator\">=</span> emp2<span class=\"token punctuation\">.</span>empno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">--const：这个表至多有一个匹配行，</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> empno <span class=\"token operator\">=</span> <span class=\"token number\">7369</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">--system：表只有一行记录（等于系统表），这是 const 类型的特例，平时不会出现</span></pre></td></tr></table></figure><p>&lt;h2&gt;<br />\n&lt;div name=extra_example &gt;<br />\n&lt;p style=&quot;color:red; font-size:25px; &quot; &gt;extra_example&lt;/p&gt;<br />\n&lt;/div&gt;<br />\n&lt;/h2&gt;</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">--using filesort: 说明 mysql 无法利用索引进行排序，只能利用排序算法进行排序，会消耗额外的位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> sal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">--using temporary: 建立临时表来保存中间结果，查询完成之后把临时表删除</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> ename<span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> deptno <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> ename<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">--using index: 这个表示当前的查询时覆盖索引的，直接从索引中读取数据，而不用访问数据表。如果同时出现 using where 表名索引被用来执行索引键值的查找，如果没有，表面索引被用来读取数据，而不是真的查找</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> deptno<span class=\"token punctuation\">,</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> deptno <span class=\"token keyword\">limit</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">--using where: 使用 where 进行条件过滤</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t_user <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">--using join buffer: 使用连接缓存，情况没有模拟出来</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">--impossible where：where 语句的结果总是 false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">explain</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> empno <span class=\"token operator\">=</span> <span class=\"token number\">7469</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev?https://github.com/login/oauth/access_token\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": []
        }
    ]
}