{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"dubbo\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Dubbo/",
            "url": "http://example.com/2022/10/07/Dubbo/",
            "title": "Dubbo",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h1><h3 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h3><ol>\n<li>Dubbo简介</li>\n<li>Dubbo架构讲解</li>\n<li>Dubbo支持的协议</li>\n<li>Dubbo支持的注册中心</li>\n<li>第一个Dubbo的Provider</li>\n<li>Admin管理界面搭建</li>\n<li>成Dubbo的Consumer</li>\n<li>负载均衡</li>\n<li>完整Dubbo项目演示</li>\n</ol>\n<h3 id=\"学习目标\"><a href=\"#学习目标\" class=\"headerlink\" title=\"学习目标\"></a>学习目标</h3><table>\n<thead>\n<tr>\n<th>知识点</th>\n<th>要求</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Dubbo简介</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Dubbo架构讲解</td>\n<td>精通</td>\n</tr>\n<tr>\n<td>Dubbo支持的协议</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Dubbo支持的注册中心</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>第一个Dubbo的Provider</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Admin管理界面搭建</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>完成Dubbo的Consumer</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>负载均衡</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>完整Dubbo项目演示</td>\n<td>掌握</td>\n</tr>\n</tbody></table>\n<h3 id=\"一、Dubbo简介\"><a href=\"#一、Dubbo简介\" class=\"headerlink\" title=\"一、Dubbo简介\"></a>一、Dubbo简介</h3><h4 id=\"1-官方说明\"><a href=\"#1-官方说明\" class=\"headerlink\" title=\"1,官方说明\"></a>1,官方说明</h4><img data-src=\"/2022/10/07/Dubbo/Dubbo-1.png\" class=\"\">\n\n\n<p>​\tApache Dubbo 是一个高可用的，基于Java的开源RPC框架。</p>\n<p>​\tDubbo框架不仅仅是具备RPC访问功能，还包含服务治理功能。</p>\n<h4 id=\"2-发展历史\"><a href=\"#2-发展历史\" class=\"headerlink\" title=\"2.发展历史\"></a>2.发展历史</h4><p>​\tDubbo是最开始是阿里巴巴内部使用的RPC框架。</p>\n<p>​\t2011年对外提供。</p>\n<p>​\t2012年停止更新。</p>\n<p>​\t2017年开始继续更新。</p>\n<p>​\t2019年捐献给Apache，由Apache维护2.7以上版本。</p>\n<h4 id=\"3-Dubbo架构讲解\"><a href=\"#3-Dubbo架构讲解\" class=\"headerlink\" title=\"3.Dubbo架构讲解\"></a>3.Dubbo架构讲解</h4><h5 id=\"3-1架构图\"><a href=\"#3-1架构图\" class=\"headerlink\" title=\"3.1架构图\"></a>3.1架构图</h5><img data-src=\"/2022/10/07/Dubbo/Dubbo-2.png\" class=\"\">\n\n\n<h4 id=\"3-2架构说明\"><a href=\"#3-2架构说明\" class=\"headerlink\" title=\"3.2架构说明\"></a>3.2架构说明</h4><h5 id=\"3-2-1虚线\"><a href=\"#3-2-1虚线\" class=\"headerlink\" title=\"3.2.1虚线\"></a>3.2.1虚线</h5><p>​\t虚线表示异步，实线表示同步。异步不阻塞线程性能高，同步阻塞线程必须等待响应结果才能继续执行，相对性能低。</p>\n<h5 id=\"3-2-2Provider\"><a href=\"#3-2-2Provider\" class=\"headerlink\" title=\"3.2.2Provider\"></a>3.2.2Provider</h5><p>​\t提供者。编写持久层和事务代码。</p>\n<h5 id=\"3-2-3Container\"><a href=\"#3-2-3Container\" class=\"headerlink\" title=\"3.2.3Container\"></a>3.2.3Container</h5><p>​\t容器（Spring容器），Dubbo完全基于Spring实现的。</p>\n<h5 id=\"3-2-4Registry\"><a href=\"#3-2-4Registry\" class=\"headerlink\" title=\"3.2.4Registry\"></a>3.2.4Registry</h5><p>​\t注册中心。放置所有Provider对外提供的信息。包含Provider的IP，访问端口，访问遵守的协议，对外提供的接口，接口中有哪些方法等相关信息。</p>\n<h5 id=\"3-2-5Consumer\"><a href=\"#3-2-5Consumer\" class=\"headerlink\" title=\"3.2.5Consumer\"></a>3.2.5Consumer</h5><p>​\t消费者（RPC调用者，SOA调用服务的项目）开发中也是一个项目，编写service和controller（还可以报页面等）。调用XXXXServiceImpl中的方法。</p>\n<h5 id=\"3-2-6Monitor\"><a href=\"#3-2-6Monitor\" class=\"headerlink\" title=\"3.2.6Monitor\"></a>3.2.6Monitor</h5><p>​\t监控中心。监控Provider的压力情况等。每隔2分钟Consumer和Provider会把调用次数发送给Monitor，由Monitor进行统计。</p>\n<h4 id=\"4-执行流程\"><a href=\"#4-执行流程\" class=\"headerlink\" title=\"4.执行流程\"></a>4.执行流程</h4><ol start=\"0\">\n<li>start：启动Spring容器时会把Provider启动。 </li>\n<li>register：把Provider相关信息注册到Registry里</li>\n<li>subscribe：Consumer从Registry中订阅Provider的信息</li>\n<li>notify：通知给Consumer</li>\n<li>invoke：Consumer根据Registry通知的信息进行调用Provider中方法。</li>\n<li>count:Consumer和Provider把调用次数信息异步发送给Monitor进行统计。</li>\n</ol>\n<h3 id=\"二、Dubbo支持的协议\"><a href=\"#二、Dubbo支持的协议\" class=\"headerlink\" title=\"二、Dubbo支持的协议\"></a>二、Dubbo支持的协议</h3><h4 id=\"1-Dubbo协议-官方推荐协议\"><a href=\"#1-Dubbo协议-官方推荐协议\" class=\"headerlink\" title=\"1.Dubbo协议(官方推荐协议)\"></a>1.Dubbo协议(官方推荐协议)</h4><p>​\t优点：</p>\n<p>​\t\t采用NIO复用单一长连接，并使用线程池并发处理请求，减少握手和加大并发效率，性能较好（推荐使用）</p>\n<p>​\t缺点：</p>\n<p>​\t\t大文件上传时,可能出现问题(不使用Dubbo文件上传)</p>\n<h4 id=\"2-RMI-Remote-Method-Invocation-协议\"><a href=\"#2-RMI-Remote-Method-Invocation-协议\" class=\"headerlink\" title=\"2.RMI(Remote Method Invocation)协议\"></a>2.RMI(Remote Method Invocation)协议</h4><p>​\t优点:</p>\n<p>​\t\tJDK自带的能力。</p>\n<p>​\t缺点:</p>\n<p>​\t\t偶尔连接失败.</p>\n<h4 id=\"3-Hessian协议\"><a href=\"#3-Hessian协议\" class=\"headerlink\" title=\"3.Hessian协议\"></a>3.Hessian协议</h4><p>​\t优点:</p>\n<p>​\t\t可与原生Hessian互操作，基于HTTP协议</p>\n<p>​\t缺点:</p>\n<p>​\t\t需hessian.jar支持，http短连接的开销大</p>\n<h3 id=\"三、Dubbo支持的注册中心\"><a href=\"#三、Dubbo支持的注册中心\" class=\"headerlink\" title=\"三、Dubbo支持的注册中心\"></a>三、Dubbo支持的注册中心</h3><h4 id=\"1-Zookeeper-官方推荐\"><a href=\"#1-Zookeeper-官方推荐\" class=\"headerlink\" title=\"1.Zookeeper(官方推荐)\"></a>1.Zookeeper(官方推荐)</h4><p>​\t1) 优点:</p>\n<p>​\t\t支持分布式.很多周边产品.</p>\n<p>​\t2) 缺点: </p>\n<p>​\t\t受限于Zookeeper软件的稳定性.Zookeeper专门分布式辅助软件,稳定较优</p>\n<h4 id=\"2-Multicast\"><a href=\"#2-Multicast\" class=\"headerlink\" title=\"2.Multicast\"></a>2.Multicast</h4><p>​\t1) 优点:</p>\n<p>​\t\t去中心化,不需要单独安装软件.</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t2.2.1 Provider和Consumer和Registry不能跨机房(路由)</p>\n<h4 id=\"3-Redis\"><a href=\"#3-Redis\" class=\"headerlink\" title=\"3.Redis\"></a>3.Redis</h4><p>​\t1) 优点:</p>\n<p>​\t\t支持集群,性能高</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t要求服务器时间同步.否则可能出现集群失败问题.</p>\n<h4 id=\"4-Simple\"><a href=\"#4-Simple\" class=\"headerlink\" title=\"4.Simple\"></a>4.Simple</h4><p>​\t1) 优点: </p>\n<p>​\t\t标准RPC服务.没有兼容问题</p>\n<p>​\t2) 缺点: </p>\n<p>​\t\t不支持集群.</p>\n<h3 id=\"四、第一个Dubbo的Provider\"><a href=\"#四、第一个Dubbo的Provider\" class=\"headerlink\" title=\"四、第一个Dubbo的Provider\"></a>四、第一个Dubbo的Provider</h3><p>​\t新建父项目Parent1。最终结构如下：</p>\n<img data-src=\"/2022/10/07/Dubbo/Dubbo-3.png\" class=\"\">\n\n\n<p>​\t编写pom.xml继承SpringBoot父项目。</p>\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n&lt;/parent&gt; \n</code></pre>\n<h4 id=\"1-新建api项目\"><a href=\"#1-新建api项目\" class=\"headerlink\" title=\"1.新建api项目\"></a>1.新建api项目</h4><h5 id=\"1-1创建接口\"><a href=\"#1-1创建接口\" class=\"headerlink\" title=\"1.1创建接口\"></a>1.1创建接口</h5><p>​\t创建com.msb.<strong>dubbo</strong>.service.Demo<strong>Dubbo</strong>Service接口</p>\n<pre><code>public interface DemoDubboService &#123;\n    String demo();\n&#125;\n</code></pre>\n<h4 id=\"2-新建provider项目\"><a href=\"#2-新建provider项目\" class=\"headerlink\" title=\"2.新建provider项目\"></a>2.新建provider项目</h4><h5 id=\"2-1编写pom-xml\"><a href=\"#2-1编写pom-xml\" class=\"headerlink\" title=\"2.1编写pom.xml\"></a>2.1编写pom.xml</h5><p>​\t注意：不需要依赖web，如果依赖spring-boot-start-web还需要考虑端口问题。</p>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.7.3&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;   \n</code></pre>\n<h5 id=\"2-2编写配置文件\"><a href=\"#2-2编写配置文件\" class=\"headerlink\" title=\"2.2编写配置文件\"></a>2.2编写配置文件</h5><p>​\t新建application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-provider\n  registry:\n    address: zookeeper://192.168.32.128:2181\n</code></pre>\n<h5 id=\"2-3新建实现类\"><a href=\"#2-3新建实现类\" class=\"headerlink\" title=\"2.3新建实现类\"></a>2.3新建实现类</h5><p>​\t新建com.msb.dubbo.service.impl.DemoDubboServiceImpl</p>\n<p>​\t注意：注解是apache的注解。</p>\n<pre><code>import com.msb.dubbo.service.DemoDubboService;\nimport org.apache.dubbo.config.annotation.Service;\n\n@Service\npublic class DemoDubboServiceImpl implements DemoDubboService &#123;\n    @Override\n    public String demo() &#123;\n        System.out.println(&quot;demo方法&quot;);\n        return &quot;123&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"2-4新建启动类\"><a href=\"#2-4新建启动类\" class=\"headerlink\" title=\"2.4新建启动类\"></a>2.4新建启动类</h5><p>​\t新建com.msb.ProviderApplication。</p>\n<p>​\t必须要有@EnableDubbo注解，否则Dubbo不生效。</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\npublic class ProviderApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ProviderApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"五、完成Dubbo的Consumer\"><a href=\"#五、完成Dubbo的Consumer\" class=\"headerlink\" title=\"五、完成Dubbo的Consumer\"></a>五、完成Dubbo的Consumer</h3><p>​\t创建consumer项目</p>\n<h4 id=\"1-编写pom-xml\"><a href=\"#1-编写pom-xml\" class=\"headerlink\" title=\"1.编写pom.xml\"></a>1.编写pom.xml</h4><pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.7.3&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;   \n</code></pre>\n<h4 id=\"2-新建配置文件\"><a href=\"#2-新建配置文件\" class=\"headerlink\" title=\"2.新建配置文件\"></a>2.新建配置文件</h4><p>​\t新建application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-consumer\n  registry:\n    address: zookeeper://192.168.32.128:2181\n</code></pre>\n<h4 id=\"3-新建service及实现类\"><a href=\"#3-新建service及实现类\" class=\"headerlink\" title=\"3.新建service及实现类\"></a>3.新建service及实现类</h4><p>​\t新建com.msb.service.DemoService</p>\n<p>​\t新建com.msb.service.impl.DemoServiceImpl</p>\n<p>​\t调用服务使用@Reference注解，不要倒错包了，有两个。</p>\n<pre><code>public interface DemoService &#123;\n    String consumerDemo();\n&#125;\n</code></pre>\n<pre><code>import com.msb.dubbo.service.DemoDubboService;\nimport com.msb.service.DemoService;\nimport org.apache.dubbo.config.annotation.Reference;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DemoServiceImpl implements DemoService &#123;\n\n    @Reference\n    private DemoDubboService demoDubboService;\n\n    @Override\n    public String consumerDemo() &#123;\n        return demoDubboService.demo();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"4-新建控制器\"><a href=\"#4-新建控制器\" class=\"headerlink\" title=\"4.新建控制器\"></a>4.新建控制器</h4><p>​\t新建控制器com.msb.controller.DemoController</p>\n<pre><code>@Controller\npublic class DemoController &#123;\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(&quot;/demo&quot;)\n    @ResponseBody\n    public String demo()&#123;\n        return demoService.consumerDemo();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"5-新建启动器\"><a href=\"#5-新建启动器\" class=\"headerlink\" title=\"5.新建启动器\"></a>5.新建启动器</h4><p>​\t新建com.msb.ConsumerApplication</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\npublic class ConsumerApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ConsumerApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"六、Admin管理界面搭建\"><a href=\"#六、Admin管理界面搭建\" class=\"headerlink\" title=\"六、Admin管理界面搭建\"></a>六、Admin管理界面搭建</h3><p>​\t资料中把dubbo-admin-0.2.0.jar\\BOOT-INF\\classes 中application.properties里面注册中心的ip设置正确</p>\n<p>​\t使用java -jar dubbo-admin-0.2.0.jar运行即可。</p>\n<p>​\t注意：占用8080端口，不要冲突了。</p>\n<h3 id=\"七、负载均衡\"><a href=\"#七、负载均衡\" class=\"headerlink\" title=\"七、负载均衡\"></a>七、负载均衡</h3><p>​\t集群：一个内容，部署多次，形成的整体称为集群。集群中每个个体应该部署到不同的服务器上。</p>\n<p>​\t伪集群：集群中内容部署到同一台服务器上，通过不同端口区分不同个体。</p>\n<p>​\t负载均衡是在集群前提下，当访问整个集群时，集群中每个节点被访问次数或频率的规则。</p>\n<p>​\tDubbo 内置了四个负载均衡策略。默认为Random</p>\n<h4 id=\"1-内置策略\"><a href=\"#1-内置策略\" class=\"headerlink\" title=\"1.内置策略\"></a>1.内置策略</h4><h5 id=\"1-1Random\"><a href=\"#1-1Random\" class=\"headerlink\" title=\"1.1Random\"></a>1.1Random</h5><p>​\t随机。随机访问集群中节点。访问概率和权重有关。</p>\n<h5 id=\"1-2RoundRobin\"><a href=\"#1-2RoundRobin\" class=\"headerlink\" title=\"1.2RoundRobin\"></a>1.2RoundRobin</h5><p>​\t轮询。访问频率和权重有关。</p>\n<p>​\t权重（weight）：占有比例。集群中每个项目部署的服务器的性能可能是不同，性能好的服务器权重应该高一些。</p>\n<h5 id=\"1-3LeastActive\"><a href=\"#1-3LeastActive\" class=\"headerlink\" title=\"1.3LeastActive\"></a>1.3LeastActive</h5><p>​\t活跃数相同的随机，不同的活跃数高的放前面。</p>\n<h5 id=\"1-4ConsistentHash\"><a href=\"#1-4ConsistentHash\" class=\"headerlink\" title=\"1.4ConsistentHash\"></a>1.4ConsistentHash</h5><p>​\t一致性Hash。相同参数请求总是发到一个提供者。</p>\n<h4 id=\"2-Provider集群\"><a href=\"#2-Provider集群\" class=\"headerlink\" title=\"2.Provider集群\"></a>2.Provider集群</h4><p>​\t新建四个启动类。</p>\n<p>​\t每次启动启动类修改配置文件dubbo.protocal.port</p>\n<h4 id=\"3-设置负载均衡\"><a href=\"#3-设置负载均衡\" class=\"headerlink\" title=\"3.设置负载均衡\"></a>3.设置负载均衡</h4><h5 id=\"3-1-Reference\"><a href=\"#3-1-Reference\" class=\"headerlink\" title=\"3.1@Reference\"></a>3.1@Reference</h5><p>​\t调用的服务采用的负载均衡</p>\n<pre><code>@Reference(loadbalance = &quot;roundrobin&quot;)\nprivate DemoDubboService demoDubboService;\n</code></pre>\n<h5 id=\"3-2-Service\"><a href=\"#3-2-Service\" class=\"headerlink\" title=\"3.2 @Service\"></a>3.2 @Service</h5><p>​\t当前服务采用的负载均衡算法</p>\n<pre><code>@Service(loadbalance = &quot;random&quot;)\npublic class DemoDubboServiceImpl implements DemoDubboService &#123;\n</code></pre>\n<p>​\t设置权重</p>\n<pre><code>@Service(weight = 4)\n</code></pre>\n<h5 id=\"3-3配置文件\"><a href=\"#3-3配置文件\" class=\"headerlink\" title=\"3.3配置文件\"></a>3.3配置文件</h5><p>​\t\t\t全局设置所有provider和consumer的负载均衡效果。</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-provider\n  registry:\n    address: zookeeper://192.168.32.128:2181\n  protocol:\n    port: 20884\n  provider:\n    loadbalance: random\n  consumer:\n    loadbalance: random\n</code></pre>\n<h3 id=\"八、完整Dubbo项目演示\"><a href=\"#八、完整Dubbo项目演示\" class=\"headerlink\" title=\"八、完整Dubbo项目演示\"></a>八、完整Dubbo项目演示</h3><h4 id=\"1-原型\"><a href=\"#1-原型\" class=\"headerlink\" title=\"1.原型\"></a>1.原型</h4><h5 id=\"1-1部门显示\"><a href=\"#1-1部门显示\" class=\"headerlink\" title=\"1.1部门显示\"></a>1.1部门显示</h5><p>​\t显示全部部门信息</p>\n<img data-src=\"/2022/10/07/Dubbo/Dubbo-4.png\" class=\"\">\n\n\n\n\n<h5 id=\"1-2员工新增\"><a href=\"#1-2员工新增\" class=\"headerlink\" title=\"1.2员工新增\"></a>1.2员工新增</h5><img data-src=\"/2022/10/07/Dubbo/Dubbo-5.png\" class=\"\">\n\n\n<h5 id=\"1-3查看部门员工\"><a href=\"#1-3查看部门员工\" class=\"headerlink\" title=\"1.3查看部门员工\"></a>1.3查看部门员工</h5><img data-src=\"/2022/10/07/Dubbo/Dubbo-6.png\" class=\"\">\n\n\n<h4 id=\"2-按照分布式架构进行设计项目\"><a href=\"#2-按照分布式架构进行设计项目\" class=\"headerlink\" title=\"2.按照分布式架构进行设计项目\"></a>2.按照分布式架构进行设计项目</h4><p>​\t\t设定员工管理和部门管理不在同一个模块中，需要有一个员工管理项目和一个部门管理项目。</p>\n<p>​\t为了方便，不去每个项目使用一个窗口，而是使用聚合项目。      </p>\n<img data-src=\"/2022/10/07/Dubbo/Dubbo-7.png\" class=\"\">\n\n\n\n\n\n\n\n\n<h4 id=\"3-创建数据库表\"><a href=\"#3-创建数据库表\" class=\"headerlink\" title=\"3.创建数据库表\"></a>3.创建数据库表</h4><pre><code>create table dept(\nid int(11) primary key auto_increment,\nname varchar(20)\n);\n\ninsert into dept values(default,&#39;开发部&#39;);\ninsert into dept values(default,&#39;产品部&#39;);\n\ncreate table emp(\nid int(11) primary key auto_increment,\nname varchar(20),\nphoto varchar(200),\ndid int(11),\nCONSTRAINT fk_emp_dept FOREIGN key (did) REFERENCES dept(id)\n);\n</code></pre>\n<h4 id=\"4-创建父项目\"><a href=\"#4-创建父项目\" class=\"headerlink\" title=\"4.创建父项目\"></a>4.创建父项目</h4><p>​\t创建项目parent。</p>\n<img data-src=\"/2022/10/07/Dubbo/Dubbo-8.png\" class=\"\">\n\n\n\n\n<p>编写pom.xml</p>\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n&lt;/parent&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n            &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.7.3&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n            &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n            &lt;version&gt;4.2.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n            &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n            &lt;version&gt;4.2.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.6&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-io&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n            &lt;version&gt;2.6&lt;/version&gt;\n        &lt;/dependency&gt;\n         &lt;dependency&gt;\n             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n             &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n             &lt;version&gt;1.18.12&lt;/version&gt;\n             &lt;scope&gt;provided&lt;/scope&gt;\n         &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre>\n<h4 id=\"5-创建pojo项目\"><a href=\"#5-创建pojo项目\" class=\"headerlink\" title=\"5.创建pojo项目\"></a>5.创建pojo项目</h4><h4 id=\"6-创建mapper项目\"><a href=\"#6-创建mapper项目\" class=\"headerlink\" title=\"6.创建mapper项目\"></a>6.创建mapper项目</h4><h5 id=\"6-1编写pom-xml\"><a href=\"#6-1编写pom-xml\" class=\"headerlink\" title=\"6.1编写pom.xml\"></a>6.1编写pom.xml</h5><pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;pojo&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;mysql&lt;/groupId&gt;\n        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;    \n</code></pre>\n<h5 id=\"6-2新建配置文件\"><a href=\"#6-2新建配置文件\" class=\"headerlink\" title=\"6.2新建配置文件\"></a>6.2新建配置文件</h5><p>​\t新建application-mybatis.yml</p>\n<pre><code>spring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/maven\n    username: root\n    password: root\n\nmybatis:\n  mapper-locations: classpath:mybatis/*.xml\n  type-aliases-package: com.msb.pojo\n</code></pre>\n<h4 id=\"7-新建api项目\"><a href=\"#7-新建api项目\" class=\"headerlink\" title=\"7.新建api项目\"></a>7.新建api项目</h4><h5 id=\"7-1编写pom-xml\"><a href=\"#7-1编写pom-xml\" class=\"headerlink\" title=\"7.1编写pom.xml\"></a>7.1编写pom.xml</h5><pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;pojo&lt;/artifactId&gt;\n        &lt;groupId&gt;com.bjsxt&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;    \n</code></pre>\n<h4 id=\"8-新建provider\"><a href=\"#8-新建provider\" class=\"headerlink\" title=\"8.新建provider\"></a>8.新建provider</h4><h5 id=\"8-1编写pom-xml\"><a href=\"#8-1编写pom-xml\" class=\"headerlink\" title=\"8.1编写pom.xml\"></a>8.1编写pom.xml</h5><pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;mapper&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<h5 id=\"8-2新建配置文件\"><a href=\"#8-2新建配置文件\" class=\"headerlink\" title=\"8.2新建配置文件\"></a>8.2新建配置文件</h5><p>​\t新建application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-provider\n  registry:\n    address: zookeeper://192.168.52.128:2181\n\n# 加载其他配置文件,加载其他application-*.yml文件，多个名称之间使用逗号分隔\nspring:\n  profiles:\n    active: mybatis\n</code></pre>\n<h5 id=\"8-3新建启动类\"><a href=\"#8-3新建启动类\" class=\"headerlink\" title=\"8.3新建启动类\"></a>8.3新建启动类</h5><p>​\t新建com.msb.ProviderApplication</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\n@MapperScan(&quot;com.msb.mapper&quot;)\npublic class ProviderApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ProviderApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"9-完成Dept查询功能\"><a href=\"#9-完成Dept查询功能\" class=\"headerlink\" title=\"9.完成Dept查询功能\"></a>9.完成Dept查询功能</h4><h5 id=\"9-1在api中新建接口\"><a href=\"#9-1在api中新建接口\" class=\"headerlink\" title=\"9.1在api中新建接口\"></a>9.1在api中新建接口</h5><p>​\tcom.msb.dubbo.service.DeptDubboService</p>\n<pre><code>public interface DeptDubboService &#123;\n    List&lt;Dept&gt; selectAll();\n&#125;\n</code></pre>\n<h5 id=\"9-2在provider中新建实现类\"><a href=\"#9-2在provider中新建实现类\" class=\"headerlink\" title=\"9.2在provider中新建实现类\"></a>9.2在provider中新建实现类</h5><p>​\tcom.msb.dubbo.service.impl.DeptDubboServiceImpl</p>\n<pre><code>@Service\npublic class DeptDubboServiceImpl implements DeptDubboService &#123;\n    @Autowired\n    private DeptMapper deptMapper;\n    @Override\n    public List&lt;Dept&gt; selectAll() &#123;\n        return deptMapper.selectByExample(null);\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"9-3新建项目dept\"><a href=\"#9-3新建项目dept\" class=\"headerlink\" title=\"9.3新建项目dept\"></a>9.3新建项目dept</h5><h6 id=\"9-3-1添加依赖\"><a href=\"#9-3-1添加依赖\" class=\"headerlink\" title=\"9.3.1添加依赖\"></a>9.3.1添加依赖</h6><pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;   \n</code></pre>\n<h6 id=\"9-3-2编写配置文件\"><a href=\"#9-3-2编写配置文件\" class=\"headerlink\" title=\"9.3.2编写配置文件\"></a>9.3.2编写配置文件</h6><p>​\t新建application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-dept-consumer\n  registry:\n    address: zookeeper://192.168.52.128:2181\n</code></pre>\n<h6 id=\"9-3-3新建启动类\"><a href=\"#9-3-3新建启动类\" class=\"headerlink\" title=\"9.3.3新建启动类\"></a>9.3.3新建启动类</h6><p>​\tcom.msb.DeptApplication</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\npublic class DeptApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(DeptApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h6 id=\"9-3-4新建接口及实现类\"><a href=\"#9-3-4新建接口及实现类\" class=\"headerlink\" title=\"9.3.4新建接口及实现类\"></a>9.3.4新建接口及实现类</h6><p>​\t接口：com.msb.service.DeptService</p>\n<p>​\t实现类：com.msb.service.impl.DeptServiceImpl</p>\n<pre><code>public interface DeptService &#123;\n    List&lt;Dept&gt; showAll();\n&#125;\n</code></pre>\n<pre><code>@Service\npublic class DeptServiceImpl implements DeptService &#123;\n    @Reference\n    private DeptDubboService deptDubboService;\n    @Override\n    public List&lt;Dept&gt; showAll() &#123;\n        return deptDubboService.selectAll();\n    &#125;\n&#125;\n</code></pre>\n<h6 id=\"9-3-5新建控制器\"><a href=\"#9-3-5新建控制器\" class=\"headerlink\" title=\"9.3.5新建控制器\"></a>9.3.5新建控制器</h6><p>​\tcom.msb.controller.DeptController</p>\n<pre><code>@Controller\npublic class DeptController &#123;\n\n    @Autowired\n    private DeptService deptService;\n\n    @GetMapping(&quot;/dept&quot;)\n    public String shwoDept(Model model)&#123;\n        model.addAttribute(&quot;list&quot;,deptService.showAll());\n        return &quot;dept&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"9-3-6-新建页面\"><a href=\"#9-3-6-新建页面\" class=\"headerlink\" title=\"9.3.6  新建页面\"></a>9.3.6  新建页面</h5><p>​\t在resources &#x2F;templates新建dept.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table border=&quot;1&quot; width=&quot;500&quot;&gt;\n        &lt;tr&gt;\n            &lt;th&gt;编号&lt;/th&gt;\n            &lt;th&gt;部门名称&lt;/th&gt;\n            &lt;th&gt;查看&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr th:each=&quot;dept : $&#123;list&#125;&quot;&gt;\n            &lt;td th:text=&quot;$&#123;dept.id&#125;&quot;&gt;&lt;/td&gt;\n            &lt;td th:text=&quot;$&#123;dept.name&#125;&quot;&gt;&lt;/td&gt;\n            &lt;td&gt; &lt;a th:href=&quot;@&#123;/showEmp(did=$&#123;dept.id&#125;)&#125;&quot;&gt;查看&lt;/a&gt; &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;             \n</code></pre>\n",
            "tags": [
                "分布式",
                "Dubbo"
            ]
        }
    ]
}