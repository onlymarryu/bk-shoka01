{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"javase\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC10%E7%AB%A0_%E5%B8%B8%E7%94%A8%E7%B1%BB/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC10%E7%AB%A0_%E5%B8%B8%E7%94%A8%E7%B1%BB/",
            "title": "第10章_常用类",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/",
            "title": "第11章集合",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"11-集合\"><a href=\"#11-集合\" class=\"headerlink\" title=\"11 集合\"></a>11 集合</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180112196.png\" class=\"\">\n\n\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618170703735.png\" class=\"\">\n\n\n\n\n<h1 id=\"Colletion接口\"><a href=\"#Colletion接口\" class=\"headerlink\" title=\"Colletion接口\"></a>Colletion接口</h1><h2 id=\"1-1-常用方法\"><a href=\"#1-1-常用方法\" class=\"headerlink\" title=\"1.1 常用方法\"></a>1.1 常用方法</h2><pre><code class=\"java\">package com.msb.test01;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n/**\n * @author : msb-zhaoss\n */\npublic class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        /*\n        Collection接口的常用方法：\n        增加：add(E e) addAll(Collection&lt;? extends E&gt; c)\n        删除：clear() remove(Object o)\n        修改：\n        查看：iterator() size()\n        判断：contains(Object o)  equals(Object o) isEmpty()\n         */\n        //创建对象：接口不能创建对象，利用实现类创建对象：\n        Collection col = new ArrayList();\n        //调用方法：\n        //集合有一个特点：只能存放引用数据类型的数据，不能是基本数据类型\n        //基本数据类型自动装箱，对应包装类。int---&gt;Integer\n        col.add(18);\n        col.add(12);\n        col.add(11);\n        col.add(17);\n        System.out.println(col/*.toString()*/);\n        List list = Arrays.asList(new Integer[]&#123;11, 15, 3, 7, 1&#125;);\n        col.addAll(list);//将另一个集合添加入col中\n        System.out.println(col);\n        //col.clear();清空集合\n        System.out.println(col);\n        System.out.println(&quot;集合中元素的数量为：&quot;+col.size());\n        System.out.println(&quot;集合是否为空：&quot;+col.isEmpty());\n        boolean isRemove = col.remove(15);\n        System.out.println(col);\n        System.out.println(&quot;集合中数据是否被删除：&quot;+isRemove);\n        Collection col2 = new ArrayList();\n        col2.add(18);\n        col2.add(12);\n        col2.add(11);\n        col2.add(17);\n        Collection col3 = new ArrayList();\n        col3.add(18);\n        col3.add(12);\n        col3.add(11);\n        col3.add(17);\n        System.out.println(col2.equals(col3));\n        System.out.println(col2==col3);//地址一定不相等  false\n        System.out.println(&quot;是否包含元素：&quot;+col3.contains(117));\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"1-2-Collection集合的遍历\"><a href=\"#1-2-Collection集合的遍历\" class=\"headerlink\" title=\"1.2 Collection集合的遍历\"></a>1.2 Collection集合的遍历</h2><pre><code class=\"java\">迭代器简要原理图：\n\n\n\npackage com.msb.test01;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Iterator;\n/**\n * @author : msb-zhaoss\n */\npublic class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        Collection col = new ArrayList();\n        col.add(18);\n        col.add(12);\n        col.add(11);\n        col.add(17);\n        col.add(&quot;abc&quot;);\n        col.add(9.8);\n        //对集合遍历（对集合中元素进行查看）\n        //方式1：普通for循环\n        /*for(int i= 0;i&lt;col.size();i++)&#123;\n            col.\n        &#125;*/\n        //方式2：增强for循环\n        for(Object o:col)&#123;\n            System.out.println(o);\n        &#125;\n        System.out.println(&quot;------------------------&quot;);\n        //方式3：iterator()\n        Iterator it = col.iterator();\n        while(it.hasNext())&#123;\n            System.out.println(it.next());\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-List接口\"><a href=\"#2-List接口\" class=\"headerlink\" title=\"2 List接口\"></a>2 List接口</h2><h3 id=\"2-1-常用方法和遍历方式\"><a href=\"#2-1-常用方法和遍历方式\" class=\"headerlink\" title=\"2.1 常用方法和遍历方式\"></a>2.1 常用方法和遍历方式</h3><pre><code class=\"java\">package com.msb.test01;\nimport com.sun.org.apache.xerces.internal.dom.PSVIAttrNSImpl;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n/**\n * @author : msb-zhaoss\n */\npublic class Test03 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        /*\n        List接口中常用方法：\n        增加：add(int index, E element)\n        删除：remove(int index)  remove(Object o)\n        修改：set(int index, E element)\n        查看：get(int index)\n        判断：\n         */\n        List list = new ArrayList();\n        list.add(13);\n        list.add(17);\n        list.add(6);\n        list.add(-1);\n        list.add(2);\n        list.add(&quot;abc&quot;);\n        System.out.println(list);\n        list.add(3,66);\n        System.out.println(list);\n        list.set(3,77);\n        System.out.println(list);\n        list.remove(2);//在集合中存入的是Integer类型数据的时候，调用remove方法调用的是：remove(int index)\n        System.out.println(list);\n        list.remove(&quot;abc&quot;);\n        System.out.println(list);\n        Object o = list.get(0);\n        System.out.println(o);\n        //List集合 遍历：\n        //方式1：普通for循环：\n        System.out.println(&quot;---------------------&quot;);\n        for(int i = 0;i&lt;list.size();i++)&#123;\n            System.out.println(list.get(i));\n        &#125;\n        //方式2：增强for循环：\n        System.out.println(&quot;---------------------&quot;);\n        for(Object obj:list)&#123;\n            System.out.println(obj);\n        &#125;\n        //方式3：迭代器：\n        System.out.println(&quot;---------------------&quot;);\n        Iterator it = list.iterator();\n        while(it.hasNext())&#123;\n            System.out.println(it.next());\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"2-2-ArrayList实现类（JDK1-7）\"><a href=\"#2-2-ArrayList实现类（JDK1-7）\" class=\"headerlink\" title=\"2.2 ArrayList实现类（JDK1.7）\"></a>2.2 ArrayList实现类（JDK1.7）</h3><p>底层重要属性：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172028655.png\" class=\"\">\n\n\n<p>在JDK1.7中：在调用构造器的时候给底层数组elementData初始化，<font color=#FF0000>数组初始化长度为10</font>：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172107247.png\" class=\"\">\n\n\n<p>对应内存：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172121579.png\" class=\"\">\n\n\n<p>调用add方法：</p>\n<pre><code class=\"java\">         ArrayList al = new ArrayList();\n        System.out.println(al.add(&quot;abc&quot;));\n        System.out.println(al.add(&quot;def&quot;));\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172152471.png\" class=\"\">\n\n\n<p>当数组中的10个位置都满了的时候就开始进行数组的扩容，扩容长度为 <font color=#FF0000>原数组的1.5倍</font>：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172227199.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172231517.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172235705.png\" class=\"\">\n\n\n\n\n\n\n\n\n<h3 id=\"2-3-ArrayList实现类（JDK1-8）\"><a href=\"#2-3-ArrayList实现类（JDK1-8）\" class=\"headerlink\" title=\"2.3 ArrayList实现类（JDK1.8）\"></a>2.3 ArrayList实现类（JDK1.8）</h3><p>【1】JDK1.8底层依旧是Object类型的数组，size:数组中有效长度：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172252320.png\" class=\"\">\n\n\n<p>【2】ArrayList al &#x3D; new ArrayList();调用空构造器：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172303832.png\" class=\"\">\n\n\n<p>【3】add方法：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172316929.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172324585.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172335841.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172340839.png\" class=\"\">\n\n\n\n\n<h3 id=\"2-4-Vector实现类\"><a href=\"#2-4-Vector实现类\" class=\"headerlink\" title=\"2.4 Vector实现类\"></a>2.4 Vector实现类</h3><p>【1】底层Object数组，int类型属性表示数组中有效长度：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172455343.png\" class=\"\">\n\n\n\n<p>【2】Vector v&#x3D;new Vector();调用构造器：</p>\n<p>【3】add方法：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172507015.png\" class=\"\">\n\n\n\n\n<h3 id=\"2-5-泛型\"><a href=\"#2-5-泛型\" class=\"headerlink\" title=\"2.5 泛型\"></a>2.5 泛型</h3><p>【1】什么是泛型（Generic）：<br>泛型就相当于标签<br>形式：&lt;&gt;<br>集合容器类在设计阶段&#x2F;声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，<br>JDK1.5之 后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。<br>Collection<E>, List<E>， ArrayList<E> 这个<E>就是类型参数，即泛型。</p>\n<p>【2】没有泛型的时候使用集合：</p>\n<pre><code class=\"java\">package com.msb.test01;\nimport java.util.ArrayList;\n/**\n * @author : msb-zhaoss\n */\npublic class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个ArrayList集合，向这个集合中存入学生的成绩：\n        ArrayList al = new ArrayList();\n        al.add(98);\n        al.add(18);\n        al.add(39);\n        al.add(60);\n        al.add(83);\n        al.add(&quot;丽丽&quot;);\n        //对集合遍历查看：\n        for(Object obj:al)&#123;\n            System.out.println(obj);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>如果不使用泛型的话，有缺点：<br>一般我们在使用的时候基本上往集合中存入的都是相同类型的数据–》便于管理，所以现在什么引用数据类型都可以存入集合，不方便！</p>\n<p>【3】JDK1.5以后开始使用泛型，集合中使用泛型：</p>\n<pre><code class=\"java\">package com.msb.test01;\nimport java.util.ArrayList;\n/**\n * @author : msb-zhaoss\n */\npublic class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个ArrayList集合，向这个集合中存入学生的成绩：\n        //加入泛型的优点：在编译时期就会对类型进行检查，不是泛型对应的类型就不可以添加入这个集合。\n        ArrayList&lt;Integer&gt; al = new ArrayList&lt;Integer&gt;();\n        al.add(98);\n        al.add(18);\n        al.add(39);\n        al.add(60);\n        al.add(83);\n        /*al.add(&quot;丽丽&quot;);\n        al.add(9.8);*/\n        //对集合遍历查看：\n        /*for(Object obj:al)&#123;\n            System.out.println(obj);\n        &#125;*/\n        for(Integer i:al)&#123;\n            System.out.println(i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【4】泛型总结：<br>（1）JDK1.5以后<br>（2）泛型实际就是 一个&lt;&gt;引起来的 参数类型，这个参数类型  具体在使用的时候才会确定具体的类型。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172646571.png\" class=\"\">\n\n\n<p>（3）使用了泛型以后，可以确定集合中存放数据的类型，在编译时期就可以检查出来。<br>（4）使用泛型你可能觉得麻烦，实际使用了泛型才会简单，后续的遍历等操作简单。<br>（5）泛型的类型：都是引用数据类型，不能是基本数据类型。<br>（6）ArrayList<Integer> al &#x3D; new ArrayList<Integer>();在JDK1.7以后可以写为：<br>ArrayList<Integer> al &#x3D; new ArrayList&lt;&gt;();  –&lt;&gt;  —钻石运算符</p>\n<h4 id=\"2-5-1-自定义泛型结构\"><a href=\"#2-5-1-自定义泛型结构\" class=\"headerlink\" title=\"2.5.1 自定义泛型结构\"></a>2.5.1 自定义泛型结构</h4><p>泛型类，泛型接口</p>\n<p>【1】泛型类的定义和实例化：</p>\n<pre><code class=\"java\">package com.msb.test02;\n/**\n * @author : msb-zhaoss\n * GenericTes就是一个普通的类\n * GenericTest&lt;E&gt; 就是一个泛型类\n * &lt;&gt;里面就是一个参数类型，但是这个类型是什么呢？这个类型现在是不确定的，相当于一个占位\n * 但是现在确定的是这个类型一定是一个引用数据类型，而不是基本数据类型\n */\npublic class GenericTest&lt;E&gt; &#123;\n    int age;\n    String name;\n    E sex;\n    public void a(E n)&#123;\n    &#125;\n    public void b(E[] m)&#123;\n    &#125;\n&#125;\nclass Test&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //GenericTest进行实例化：\n        //(1)实例化的时候不指定泛型：如果实例化的时候不明确的指定类的泛型，那么认为此泛型为Object类型\n        GenericTest gt1 = new GenericTest();\n        gt1.a(&quot;abc&quot;);\n        gt1.a(17);\n        gt1.a(9.8);\n        gt1.b(new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;);\n        //（2）实例化的时候指定泛型：---》推荐方式\n        GenericTest&lt;String&gt; gt2 = new GenericTest&lt;&gt;();\n        gt2.sex = &quot;男&quot;;\n        gt2.a(&quot;abc&quot;);\n        gt2.b(new String[]&#123;&quot;a&quot;,&quot;b&quot;,&quot;c&quot;&#125;);\n        \n    &#125;\n&#125;\n</code></pre>\n<p>【2】继承情况：<br>（1）父类指定泛型：</p>\n<pre><code class=\"java\">class SubGenericTest extends GenericTest&lt;Integer&gt;&#123;\n&#125;\nclass Demo&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用\n        SubGenericTest sgt = new SubGenericTest();\n        sgt.a(19);\n    &#125;\n&#125;\n</code></pre>\n<p>（2）父类不指定泛型：<br>如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定：</p>\n<pre><code class=\"java\">class SubGenericTest2&lt;E&gt; extends GenericTest&lt;E&gt;&#123;\n&#125;\n\nclass Demo2&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        SubGenericTest2&lt;String&gt; s = new  SubGenericTest2&lt;&gt;();\n        s.a(&quot;abc&quot;);\n        s.sex = &quot;女&quot;;\n    &#125;\n&#125;\n</code></pre>\n<p>【3】应用场合：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173037582.png\" class=\"\">\n\n\n<p>【4】细节：<br>（1）泛型类可以定义多个参数类型</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173045431.png\" class=\"\">\n\n\n<p>（2）泛型类的构造器的写法：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173057556.png\" class=\"\">\n\n\n<p>（3）不同的泛型的引用类型不可以相互赋值：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173104251.png\" class=\"\">\n\n\n<p>（4）泛型如果不指定，那么就会被擦除，反应对应的类型为Object类型：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173116539.png\" class=\"\">\n\n\n<p>（5）反省类中的静态方法不能使用类的泛型：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173123924.png\" class=\"\">\n\n\n<p>（6）不能直接使用E[]的创建：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173130213.png\" class=\"\">\n\n\n<h4 id=\"2-5-2-泛型方法\"><a href=\"#2-5-2-泛型方法\" class=\"headerlink\" title=\"2.5.2 泛型方法\"></a>2.5.2 泛型方法</h4><pre><code class=\"java\">package com.msb.test04;\n/**\n * @author : msb-zhaoss\n * 1.什么是泛型方法：\n * 不是带泛型的方法就是泛型方法\n * 泛型方法有要求：这个方法的泛型的参数类型要和当前的类的泛型无关\n * 换个角度：\n * 泛型方法对应的那个泛型参数类型 和  当前所在的这个类 是否是泛型类，泛型是啥  无关\n * 2.泛型方法定义的时候，前面要加上&lt;T&gt;\n *     原因：如果不加的话，会把T当做一种数据类型，然而代码中没有T类型那么就会报错\n * 3.T的类型是在调用方法的时候确定的\n * 4.泛型方法可否是静态方法？可以是静态方法\n */\npublic class TestGeneric&lt;E&gt; &#123;\n    //不是泛型方法 （不能是静态方法）\n    public static void a(E e)&#123;\n    &#125;\n    //是泛型方法\n    public static &lt;T&gt;  void b(T t)&#123;\n    &#125;\n&#125;\nclass Demo&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        TestGeneric&lt;String&gt; tg = new TestGeneric&lt;&gt;();\n        tg.a(&quot;abc&quot;);\n        tg.b(&quot;abc&quot;);\n        tg.b(19);\n        tg.b(true);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"2-5-3-泛型参数存在继承关系的情况\"><a href=\"#2-5-3-泛型参数存在继承关系的情况\" class=\"headerlink\" title=\"2.5.3 泛型参数存在继承关系的情况\"></a>2.5.3 泛型参数存在继承关系的情况</h4><img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173213265.png\" class=\"\">\n\n\n<h4 id=\"2-5-4-通配符\"><a href=\"#2-5-4-通配符\" class=\"headerlink\" title=\"2.5.4 通配符\"></a>2.5.4 通配符</h4><p>【1】在没有通配符的时候：<br>下面的a方法，相当于方法的重复定义，报错</p>\n<pre><code class=\"java\">public class Test &#123;\n    /*public void a(List&lt;Object&gt; list)&#123;\n    &#125;\n    public void a(List&lt;String&gt; list)&#123;\n    &#125;\n    public void a(List&lt;Integer&gt; list)&#123;\n    &#125;*/\n&#125;\n</code></pre>\n<p>【2】引入通配符：</p>\n<pre><code class=\"java\">public class Demo &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        List&lt;Object&gt; list1 = new ArrayList&lt;&gt;();\n        List&lt;String&gt; list2 = new ArrayList&lt;&gt;();\n        List&lt;Integer&gt; list3 = new ArrayList&lt;&gt;();\n        List&lt;?&gt; list = null;\n        list = list1;\n        list = list2;\n        list = list3;\n    &#125;\n&#125;\n</code></pre>\n<p>发现： A 和 B是子类父类的关系，G<A>和G<B>不存在子类父类关系，是并列的<br>加入通配符？后，G&lt;?&gt;就变成了 G<A>和G<B>的父类</p>\n<p>【3】使用通配符：</p>\n<pre><code class=\"java\">package com.msb.test06;\nimport java.util.ArrayList;\nimport java.util.List;\n/**\n * @author : msb-zhaoss\n */\npublic class Test &#123;\n    /*public void a(List&lt;Object&gt; list)&#123;\n    &#125;\n    public void a(List&lt;String&gt; list)&#123;\n    &#125;\n    public void a(List&lt;Integer&gt; list)&#123;\n    &#125;*/\n    public void a(List&lt;?&gt; list)&#123;\n        //内部遍历的时候用Object即可，不用？\n        for(Object a:list)&#123;\n            System.out.println(a);\n        &#125;\n    &#125;\n&#125;\nclass T&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        Test t = new Test();\n        t.a(new ArrayList&lt;Integer&gt;());\n        t.a(new ArrayList&lt;String&gt;());\n        t.a(new ArrayList&lt;Object&gt;());\n    &#125;\n&#125;\n</code></pre>\n<p>【4】查看API中应用位置：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173333503.png\" class=\"\">\n\n\n<h4 id=\"2-5-5-使用通配符后的细节\"><a href=\"#2-5-5-使用通配符后的细节\" class=\"headerlink\" title=\"2.5.5 使用通配符后的细节\"></a>2.5.5 使用通配符后的细节</h4><pre><code class=\"java\">public class Test &#123;\n    public void a(List&lt;?&gt; list)&#123;\n        //1.遍历：\n        for(Object a:list)&#123;\n            System.out.println(a);\n        &#125;\n        //2.数据的写入操作 ：\n        //list.add(&quot;abc&quot;);--&gt;出错，不能随意的添加数据\n        list.add(null);\n        //3.数据的读取操作：\n        Object s = list.get(0);\n    &#125;\n&#125;\nclass T&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        Test t = new Test();\n        t.a(new ArrayList&lt;Integer&gt;());\n        t.a(new ArrayList&lt;String&gt;());\n        t.a(new ArrayList&lt;Object&gt;());\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"2-5-6-泛型受限\"><a href=\"#2-5-6-泛型受限\" class=\"headerlink\" title=\"2.5.6 泛型受限\"></a>2.5.6 泛型受限</h4><pre><code class=\"java\">package com.msb.test07;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //a,b,c三个集合是并列的关系：\n        List&lt;Object&gt; a = new ArrayList&lt;&gt;();\n        List&lt;Person&gt; b = new ArrayList&lt;&gt;();\n        List&lt;Student&gt; c = new ArrayList&lt;&gt;();\n        /*开始使用泛型受限：泛型的上限\n        List&lt;? extends Person&gt;:\n        就相当于：\n        List&lt;? extends Person&gt;是List&lt;Person&gt;的父类，是List&lt;Person的子类&gt;的父类\n         */\n        List&lt;? extends Person&gt; list1 = null;\n        /*list1 = a;\n        list1 = b;\n        list1 = c;*/\n        /*开始使用泛型受限：泛型的下限\n        List&lt;? super Person&gt;\n        就相当于：\n        List&lt;? super Person&gt;是List&lt;Person&gt;的父类，是List&lt;Person的父类&gt;的父类\n         */\n        List&lt;? super Person&gt; list2 = null;\n        list2 = a;\n        list2 = b;\n        list3 = c;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"2-6-LinkedList实现类\"><a href=\"#2-6-LinkedList实现类\" class=\"headerlink\" title=\"2.6 LinkedList实现类\"></a>2.6 LinkedList实现类</h3><h4 id=\"2-6-1-基本方法使用\"><a href=\"#2-6-1-基本方法使用\" class=\"headerlink\" title=\"2.6.1 基本方法使用\"></a>2.6.1 基本方法使用</h4><pre><code class=\"java\">package com.msb.test04;\nimport java.util.Iterator;\nimport java.util.LinkedList;\n/**\n * @author : msb-zhaoss\n */\npublic class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        /*\n        LinkedList常用方法：\n        增加 addFirst(E e) addLast(E e)\n             offer(E e) offerFirst(E e) offerLast(E e)\n        删除 poll()\n            pollFirst() pollLast()  ---》JDK1.6以后新出的方法，提高了代码的健壮性\n            removeFirst() removeLast()\n        修改\n        查看 element()\n             getFirst()  getLast()\n             indexOf(Object o)   lastIndexOf(Object o)\n             peek()\n             peekFirst() peekLast()\n        判断\n         */\n        //创建一个LinkedList集合对象：\n        LinkedList&lt;String&gt; list = new LinkedList&lt;&gt;();\n        list.add(&quot;aaaaa&quot;);\n        list.add(&quot;bbbbb&quot;);\n        list.add(&quot;ccccc&quot;);\n        list.add(&quot;ddddd&quot;);\n        list.add(&quot;eeeee&quot;);\n        list.add(&quot;bbbbb&quot;);\n        list.add(&quot;fffff&quot;);\n        list.addFirst(&quot;jj&quot;);\n        list.addLast(&quot;hh&quot;);\n        list.offer(&quot;kk&quot;);//添加元素在尾端\n        list.offerFirst(&quot;pp&quot;);\n        list.offerLast(&quot;rr&quot;);\n        System.out.println(list);//LinkedList可以添加重复数据\n        System.out.println(list.poll());//删除头上的元素并且将元素输出\n        System.out.println(list.pollFirst());\n        System.out.println(list.pollLast());\n        System.out.println(list.removeFirst());\n        System.out.println(list.removeLast());\n        System.out.println(list);//LinkedList可以添加重复数据\n        /*list.clear();//清空集合\n        System.out.println(list);*/\n        /*System.out.println(list.pollFirst());*/\n        /*System.out.println(list.removeFirst());报错：Exception in thread &quot;main&quot; java.util.NoSuchElementException*/\n        //集合的遍历：\n        System.out.println(&quot;---------------------&quot;);\n        //普通for循环：\n        for(int i = 0;i&lt;list.size();i++)&#123;\n            System.out.println(list.get(i));\n        &#125;\n        System.out.println(&quot;---------------------&quot;);\n        //增强for：\n        for(String s:list)&#123;\n            System.out.println(s);\n        &#125;\n        System.out.println(&quot;---------------------&quot;);\n        //迭代器：\n        /*Iterator&lt;String&gt; it = list.iterator();\n        while(it.hasNext())&#123;\n            System.out.println(it.next());\n        &#125;*/\n        //下面这种方式好，节省内存\n        for(Iterator&lt;String&gt; it = list.iterator();it.hasNext();)&#123;\n            System.out.println(it.next());\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"2-6-2-简要底层原理图\"><a href=\"#2-6-2-简要底层原理图\" class=\"headerlink\" title=\"2.6.2 简要底层原理图\"></a>2.6.2 简要底层原理图</h4><img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173515599.png\" class=\"\">\n\n\n<h4 id=\"2-6-3-模拟LinkedList源码\"><a href=\"#2-6-3-模拟LinkedList源码\" class=\"headerlink\" title=\"2.6.3 模拟LinkedList源码\"></a>2.6.3 模拟LinkedList源码</h4><pre><code class=\"java\">package com.msb.test05;\n/**\n * @author : msb-zhaoss\n */\npublic class MyLinkedList &#123;\n    //链中一定有一个首节点：\n    Node first;\n    //链中一定有一个尾节点：\n    Node last;\n    //计数器：\n    int count = 0;\n    //提供一个构造器：\n    public MyLinkedList()&#123;\n    &#125;\n    //添加元素方法：\n    public void add(Object o)&#123;\n        if(first == null)&#123;//证明你添加的元素是第一个节点：\n            //将添加的元素封装为一个Node对象：\n            Node n = new Node();\n            n.setPre(null);\n            n.setObj(o);\n            n.setNext(null);\n            //当前链中第一个节点变为n\n            first = n;\n            //当前链中最后一个节点变为n\n            last = n;\n        &#125;else&#123;//证明已经不是链中第一个节点了\n            //将添加的元素封装为一个Node对象：\n            Node n = new Node();\n            n.setPre(last);//n的上一个节点一定是当前链中的最后一个节点last\n            n.setObj(o);\n            n.setNext(null);\n            //当前链中的最后一个节点的下一个元素 要指向n\n            last.setNext(n);\n            //将最后一个节点变为n\n            last = n;\n        &#125;\n        //链中元素数量加1\n        count++;\n    &#125;\n    //得到集合中元素的数量：\n    public int getSize()&#123;\n        return count;\n    &#125;\n    //通过下标得到元素：\n    public Object get(int index)&#123;\n        //获取链表的头元素：\n        Node n = first;\n        //一路next得到想要的元素\n        for(int i=0;i&lt;index;i++)&#123;\n            n = n.getNext();\n        &#125;\n        return n.getObj();\n    &#125;\n&#125;\nclass Test&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个MyLinkedList集合对象：\n        MyLinkedList ml = new MyLinkedList();\n        ml.add(&quot;aa&quot;);\n        ml.add(&quot;bb&quot;);\n        ml.add(&quot;cc&quot;);\n        System.out.println(ml.getSize());\n        System.out.println(ml.get(0));\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"2-6-4-LinkedList源码解析\"><a href=\"#2-6-4-LinkedList源码解析\" class=\"headerlink\" title=\"2.6.4 LinkedList源码解析\"></a>2.6.4 LinkedList源码解析</h4><p>【1】JDK1.7和JDK1.8的LinkedList的源码是一致的<br>【2】源码：</p>\n<pre><code class=\"java\">public class LinkedList&lt;E&gt;&#123;//E是一个泛型，具体的类型要在实例化的时候才会最终确定\n        transient int size = 0;//集合中元素的数量\n        //Node的内部类\n        private static class Node&lt;E&gt; &#123;\n        E item;//当前元素\n        Node&lt;E&gt; next;//指向下一个元素地址\n        Node&lt;E&gt; prev;//上一个元素地址\n        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;\n            this.item = element;\n            this.next = next;\n            this.prev = prev;\n        &#125;\n    &#125;\n        transient Node&lt;E&gt; first;//链表的首节点\n        transient Node&lt;E&gt; last;//链表的尾节点\n        //空构造器：\n        public LinkedList() &#123;\n    &#125;\n        //添加元素操作：\n        public boolean add(E e) &#123;\n        linkLast(e);\n        return true;\n    &#125;\n        void linkLast(E e) &#123;//添加的元素e\n        final Node&lt;E&gt; l = last;//将链表中的last节点给l 如果是第一个元素的话 l为null\n                //将元素封装为一个Node具体的对象：\n        final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null);\n                //将链表的last节点指向新的创建的对象：\n        last = newNode;\n                \n        if (l == null)//如果添加的是第一个节点\n            first = newNode;//将链表的first节点指向为新节点\n        else//如果添加的不是第一个节点 \n            l.next = newNode;//将l的下一个指向为新的节点\n        size++;//集合中元素数量加1操作\n        modCount++;\n    &#125;\n        //获取集合中元素数量\n        public int size() &#123;\n        return size;\n    &#125;\n        //通过索引得到元素：\n        public E get(int index) &#123;\n        checkElementIndex(index);//健壮性考虑\n        return node(index).item;\n    &#125;\n        \n    Node&lt;E&gt; node(int index) &#123;\n        //如果index在链表的前半段，那么从前往后找\n        if (index &lt; (size &gt;&gt; 1)) &#123;\n            Node&lt;E&gt; x = first;\n            for (int i = 0; i &lt; index; i++)\n                x = x.next;\n            return x;\n        &#125; else &#123;//如果index在链表的后半段，那么从后往前找\n            Node&lt;E&gt; x = last;\n            for (int i = size - 1; i &gt; index; i--)\n                x = x.prev;\n            return x;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"面试题：\"><a href=\"#面试题：\" class=\"headerlink\" title=\"面试题：\"></a>面试题：</h3><blockquote>\n<p>iterator(),Iterator,Iterable关系</p>\n</blockquote>\n<p>【1】面试题：对应的关系：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173707713.png\" class=\"\">\n\n\n<p>【2】hasNext(),next()的具体实现：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173654976.png\" class=\"\">\n\n\n<p>ListIterator迭代器</p>\n<p>【1】加入字符串：</p>\n<pre><code class=\"java\">package com.msb.test06;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n/**\n * @author : msb-zhaoss\n */\npublic class Test2 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(&quot;aa&quot;);\n        list.add(&quot;bb&quot;);\n        list.add(&quot;cc&quot;);\n        list.add(&quot;dd&quot;);\n        list.add(&quot;ee&quot;);\n        //在&quot;cc&quot;之后添加一个字符串&quot;kk&quot;\n        Iterator&lt;String&gt; it = list.iterator();\n        while(it.hasNext())&#123;\n            if(&quot;cc&quot;.equals(it.next()))&#123;\n                list.add(&quot;kk&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>发现报错：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173818117.png\" class=\"\">\n\n\n<p>出错原因：就是迭代器和list同时对集合进行操作：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173826503.png\" class=\"\">\n\n\n<p>解决办法：事情让一个“人”做 –》引入新的迭代器：ListIterator<br>迭代和添加操作都是靠ListIterator来完成的：</p>\n<pre><code class=\"java\">package com.msb.test06;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.ListIterator;\n/**\n * @author : msb-zhaoss\n */\npublic class Test2 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(&quot;aa&quot;);\n        list.add(&quot;bb&quot;);\n        list.add(&quot;cc&quot;);\n        list.add(&quot;dd&quot;);\n        list.add(&quot;ee&quot;);\n        //在&quot;cc&quot;之后添加一个字符串&quot;kk&quot;\n        ListIterator&lt;String&gt; it = list.listIterator();\n        while(it.hasNext())&#123;\n            if(&quot;cc&quot;.equals(it.next()))&#123;\n                it.add(&quot;kk&quot;);\n            &#125;\n        &#125;\n        System.out.println(it.hasNext());\n        System.out.println(it.hasPrevious());\n        //逆向遍历：\n        while(it.hasPrevious())&#123;\n            System.out.println(it.previous());\n        &#125;\n        System.out.println(it.hasNext());\n        System.out.println(it.hasPrevious());\n        System.out.println(list);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-Set接口\"><a href=\"#3-Set接口\" class=\"headerlink\" title=\"3 Set接口\"></a>3 Set接口</h2><h3 id=\"3-1-HashSet实现类的使用\"><a href=\"#3-1-HashSet实现类的使用\" class=\"headerlink\" title=\"3.1 HashSet实现类的使用\"></a>3.1 HashSet实现类的使用</h3><p>【1】放入Integer类型数据：</p>\n<pre><code class=\"java\">package com.msb.test07;\nimport java.util.HashSet;\n/**\n * @author : msb-zhaoss\n */\npublic class TestInteger &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个HashSet集合：\n        HashSet&lt;Integer&gt; hs = new HashSet&lt;&gt;();\n        System.out.println(hs.add(19));//true\n        hs.add(5);\n        hs.add(20);\n        System.out.println(hs.add(19));//false 这个19没有放入到集合中\n        hs.add(41);\n        hs.add(0);\n        System.out.println(hs.size());//唯一，无序\n        System.out.println(hs);\n    &#125;\n&#125;\n</code></pre>\n<p>【2】放入String类型数据：</p>\n<pre><code class=\"java\">package com.msb.test07;\nimport java.util.HashSet;\n/**\n * @author : msb-zhaoss\n */\npublic class TestString &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个HashSet集合：\n        HashSet&lt;String&gt; hs = new HashSet&lt;&gt;();\n        hs.add(&quot;hello&quot;);\n        hs.add(&quot;apple&quot;);\n        hs.add(&quot;banana&quot;);\n        hs.add(&quot;html&quot;);\n        hs.add(&quot;apple&quot;);\n        hs.add(&quot;css&quot;);\n        System.out.println(hs.size());\n        System.out.println(hs);\n    &#125;\n&#125;\n</code></pre>\n<p>【3】放入自定义的引用数据类型的数据：</p>\n<pre><code class=\"java\">package com.msb.test07;\nimport java.util.HashSet;\n/**\n * @author : msb-zhaoss\n */\npublic class TestStudent &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个HashSet集合：\n        HashSet&lt;Student&gt; hs = new HashSet&lt;&gt;();\n        hs.add(new Student(19,&quot;lili&quot;));\n        hs.add(new Student(20,&quot;lulu&quot;));\n        hs.add(new Student(18,&quot;feifei&quot;));\n        hs.add(new Student(19,&quot;lili&quot;));\n        hs.add(new Student(10,&quot;nana&quot;));\n        System.out.println(hs.size());\n        System.out.println(hs);\n    &#125;\n&#125;\n</code></pre>\n<p>上面自定义的类型不满足 唯一，无序的特点。为什么呢？</p>\n<p>【4】HashSet原理图：（简要原理图）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173954231.png\" class=\"\">\n\n\n<p>【5】疑问：<br>1.数组的长度是多少。<br>2.数组的类型是什么？<br>3.hashCode，equals方法真的调用了吗？验证<br>4.底层表达式是什么？<br>5.同一个位置的数据 向前放  还是 向后放？<br>6.放入数组中的数据，是直接放的吗？是否封装为对象了？</p>\n<h3 id=\"3-2LinkedHashSet使用\"><a href=\"#3-2LinkedHashSet使用\" class=\"headerlink\" title=\"3.2LinkedHashSet使用\"></a>3.2LinkedHashSet使用</h3><p>其实就是在HashSet的基础上，多了一个总的链表，这个总链表将放入的元素串在一起，方便有序的遍历：<br>（可以看到LinkedHashMap.Entry 继承自HashMap.Node 除了Node 本身有的几个属性外，额外增加了before after 用于指向前一个Entry 后一个Entry。也就是说，元素之间维持着一条总的链表数据结构。）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174059591.png\" class=\"\">\n\n\n<pre><code class=\"java\">package com.msb.test07;\nimport java.util.HashSet;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\n/**\n * @author : msb-zhaoss\n */\npublic class TestInteger &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个HashSet集合：\n        LinkedHashSet&lt;Integer&gt; hs = new LinkedHashSet&lt;&gt;();\n        System.out.println(hs.add(19));//true\n        hs.add(5);\n        hs.add(20);\n        System.out.println(hs.add(19));//false 这个19没有放入到集合中\n        hs.add(41);\n        hs.add(0);\n        System.out.println(hs.size());//唯一，无序\n        System.out.println(hs);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"3-3-比较器的使用\"><a href=\"#3-3-比较器的使用\" class=\"headerlink\" title=\"3.3 比较器的使用\"></a>3.3 比较器的使用</h3><p>【1】以int类型为案例：<br>比较的思路：将比较的数据做差，然后返回一个int类型的数据，将这个int类型的数值  按照 &#x3D;0  &gt;0  &lt;0</p>\n<pre><code class=\"java\">          int a = 10;\n        int b = 20;\n        System.out.println(a-b); // =0  &gt;0  &lt;0\n</code></pre>\n<p>【2】比较String类型数据：<br>String类实现了Comparable接口，这个接口中有一个抽象方法compareTo，String类中重写这个方法即可</p>\n<pre><code class=\"java\">          String a = &quot;A&quot;;\n        String b = &quot;B&quot;;\n        System.out.println(a.compareTo(b));\n</code></pre>\n<p>【3】比较double类型数据：</p>\n<pre><code class=\"java\">         double a = 9.6;\n        double b = 9.3;\n       /* System.out.println((int)(a-b));*/\n        System.out.println(((Double) a).compareTo((Double) b));\n</code></pre>\n<p>【4】比较自定义的数据类型：<br>（1）内部比较器：</p>\n<pre><code class=\"java\">public class Student implements Comparable&lt;Student&gt;&#123;\n    private int age;\n    private double height;\n    private String name;\n    public int getAge() &#123;\n        return age;\n    &#125;\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n    public double getHeight() &#123;\n        return height;\n    &#125;\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public Student(int age, double height, String name) &#123;\n        this.age = age;\n        this.height = height;\n        this.name = name;\n    &#125;\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n                &quot;age=&quot; + age +\n                &quot;, height=&quot; + height +\n                &quot;, name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n    @Override\n    public int compareTo(Student o) &#123;\n        //按照年龄进行比较：\n        /*return this.getAge() - o.getAge();*/\n        //按照身高比较\n        /*return ((Double)(this.getHeight())).compareTo((Double)(o.getHeight()));*/\n        //按照名字比较：\n        return this.getName().compareTo(o.getName());\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //比较两个学生：\n        Student s1 = new Student(14,160.5,&quot;alili&quot;);\n        Student s2 = new Student(14,170.5,&quot;bnana&quot;);\n        System.out.println(s1.compareTo(s2));\n    &#125;\n&#125;\n</code></pre>\n<p>（2）外部比较器：</p>\n<pre><code class=\"java\">public class Student&#123;\n    private int age;\n    private double height;\n    private String name;\n    public int getAge() &#123;\n        return age;\n    &#125;\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n    public double getHeight() &#123;\n        return height;\n    &#125;\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public Student(int age, double height, String name) &#123;\n        this.age = age;\n        this.height = height;\n        this.name = name;\n    &#125;\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n                &quot;age=&quot; + age +\n                &quot;, height=&quot; + height +\n                &quot;, name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\nclass BiJiao01 implements Comparator&lt;Student&gt; &#123;\n    @Override\n    public int compare(Student o1, Student o2) &#123;\n        //比较年龄：\n        return o1.getAge()-o2.getAge();\n    &#125;\n&#125;\nclass BiJiao02 implements Comparator&lt;Student&gt; &#123;\n    @Override\n    public int compare(Student o1, Student o2) &#123;\n        //比较姓名：\n        return o1.getName().compareTo(o2.getName());\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">class BiJiao03 implements Comparator&lt;Student&gt; &#123;\n    @Override\n    public int compare(Student o1, Student o2) &#123;\n        //在年龄相同的情况下 比较身高  年龄不同比较年龄\n        if((o1.getAge()-o2.getAge())==0)&#123;\n            return ((Double)(o1.getHeight())).compareTo((Double)(o2.getHeight()));\n        &#125;else&#123;//年龄不一样\n            return o1.getAge()-o2.getAge();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //比较两个学生：\n        Student s1 = new Student(9,160.5,&quot;alili&quot;);\n        Student s2 = new Student(14,170.5,&quot;bnana&quot;);\n        //获取外部比较器：\n        Comparator bj1 = new BiJiao03();\n        System.out.println(bj1.compare(s1, s2));\n    &#125;\n&#125;\n</code></pre>\n<p>【5】外部比较器和内部比较器 谁好呀？<br>答案：外部比较器，多态，扩展性好</p>\n<h3 id=\"3-4-TreeSet实现类的使用\"><a href=\"#3-4-TreeSet实现类的使用\" class=\"headerlink\" title=\"3.4 TreeSet实现类的使用\"></a>3.4 TreeSet实现类的使用</h3><p>【1】存入Integer类型数据：（底层利用的是内部比较器）</p>\n<pre><code class=\"java\">package com.msb.test10;\nimport java.util.TreeSet;\n/**\n * @author : msb-zhaoss\n */\npublic class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个TreeSet:\n        TreeSet&lt;Integer&gt; ts = new TreeSet&lt;&gt;();\n        ts.add(12);\n        ts.add(3);\n        ts.add(7);\n        ts.add(9);\n        ts.add(3);\n        ts.add(16);\n        System.out.println(ts.size());\n        System.out.println(ts);\n    &#125;\n&#125;\n</code></pre>\n<p>特点：唯一，无序（没有按照输入顺序进行输出）， 有序（按照升序进行遍历）</p>\n<p>【2】原理：底层：二叉树（数据结构中的一个逻辑结构）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174503614.png\" class=\"\">\n\n\n<p>【3】放入String类型数据：（底层实现类内部比较器）</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个TreeSet:\n        TreeSet&lt;String&gt; ts = new TreeSet&lt;&gt;();\n        ts.add(&quot;elili&quot;);\n        ts.add(&quot;blili&quot;);\n        ts.add(&quot;alili&quot;);\n        ts.add(&quot;elili&quot;);\n        ts.add(&quot;clili&quot;);\n        ts.add(&quot;flili&quot;);\n        ts.add(&quot;glili&quot;);\n        System.out.println(ts.size());\n        System.out.println(ts);\n    &#125;\n&#125;\n</code></pre>\n<p>【4】想放入自定义的Student类型的数据：<br>（1）利用内部比较器：</p>\n<pre><code class=\"java\">public class Student implements Comparable&lt;Student&gt; &#123;\n    private int age;\n    private String name;\n    public int getAge() &#123;\n        return age;\n    &#125;\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public Student(int age, String name) &#123;\n        this.age = age;\n        this.name = name;\n    &#125;\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n                &quot;age=&quot; + age +\n                &quot;, name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n    @Override\n    public int compareTo(Student o) &#123;\n        return this.getAge()-o.getAge();\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test03 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个TreeSet:\n        TreeSet&lt;Student&gt; ts = new TreeSet&lt;&gt;();\n        ts.add(new Student(10,&quot;elili&quot;));\n        ts.add(new Student(8,&quot;blili&quot;));\n        ts.add(new Student(4,&quot;alili&quot;));\n        ts.add(new Student(9,&quot;elili&quot;));\n        ts.add(new Student(10,&quot;flili&quot;));\n        ts.add(new Student(1,&quot;dlili&quot;));\n        System.out.println(ts.size());\n        System.out.println(ts);\n    &#125;\n&#125;\n</code></pre>\n<p>（2）通过外部比较器：</p>\n<pre><code class=\"java\">public class Student  &#123;\n    private int age;\n    private String name;\n    public int getAge() &#123;\n        return age;\n    &#125;\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public Student(int age, String name) &#123;\n        this.age = age;\n        this.name = name;\n    &#125;\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n                &quot;age=&quot; + age +\n                &quot;, name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\nclass BiJiao implements Comparator&lt;Student&gt;&#123;\n    @Override\n    public int compare(Student o1, Student o2) &#123;\n        return o1.getName().compareTo(o2.getName());\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test03 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个TreeSet:\n        //利用外部比较器，必须自己制定：\n        Comparator&lt;Student&gt; com = new BiJiao();\n        TreeSet&lt;Student&gt; ts = new TreeSet&lt;&gt;(com);//一旦指定外部比较器，那么就会按照外部比较器来比较\n        ts.add(new Student(10,&quot;elili&quot;));\n        ts.add(new Student(8,&quot;blili&quot;));\n        ts.add(new Student(4,&quot;alili&quot;));\n        ts.add(new Student(9,&quot;elili&quot;));\n        ts.add(new Student(10,&quot;flili&quot;));\n        ts.add(new Student(1,&quot;dlili&quot;));\n        System.out.println(ts.size());\n        System.out.println(ts);\n    &#125;\n&#125;\n</code></pre>\n<p>实际开发中利用外部比较器多，因为扩展性好（多态）</p>\n<p>换一种写法：</p>\n<pre><code class=\"java\">public class Test03 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个TreeSet:\n        //利用外部比较器，必须自己制定：\n        /*Comparator&lt;Student&gt; com = new Comparator&lt;Student&gt;() &#123;\n            @Override\n            public int compare(Student o1, Student o2) &#123;\n                return o1.getName().compareTo(o2.getName());\n            &#125;\n        &#125;;*/\n        TreeSet&lt;Student&gt; ts = new TreeSet&lt;&gt;(new Comparator&lt;Student&gt;() &#123;\n            @Override\n            public int compare(Student o1, Student o2) &#123;\n                return o1.getName().compareTo(o2.getName());\n            &#125;\n        &#125;);//一旦指定外部比较器，那么就会按照外部比较器来比较\n        ts.add(new Student(10,&quot;elili&quot;));\n        ts.add(new Student(8,&quot;blili&quot;));\n        ts.add(new Student(4,&quot;alili&quot;));\n        ts.add(new Student(9,&quot;elili&quot;));\n        ts.add(new Student(10,&quot;flili&quot;));\n        ts.add(new Student(1,&quot;dlili&quot;));\n        System.out.println(ts.size());\n        System.out.println(ts);\n    &#125;\n&#125;\n</code></pre>\n<p>【5】TreeSet底层的二叉树的遍历是按照升序的结果出现的，这个升序是靠中序遍历得到的：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174642838.png\" class=\"\">\n\n\n\n\n\n\n<h3 id=\"3-5-Collection部分整体结构图\"><a href=\"#3-5-Collection部分整体结构图\" class=\"headerlink\" title=\"3.5 Collection部分整体结构图\"></a>3.5 Collection部分整体结构图</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174657969.png\" class=\"\">\n\n\n\n\n\n\n<h1 id=\"Map接口\"><a href=\"#Map接口\" class=\"headerlink\" title=\"Map接口\"></a>Map接口</h1><h2 id=\"1-常用方法\"><a href=\"#1-常用方法\" class=\"headerlink\" title=\"1 常用方法\"></a>1 常用方法</h2><pre><code class=\"java\">package com.msb.test11;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n/**\n * @author : msb-zhaoss\n */\npublic class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        /*\n        增加：put(K key, V value)\n        删除：clear() remove(Object key)\n        修改：\n        查看：entrySet() get(Object key) keySet() size() values()\n        判断：containsKey(Object key) containsValue(Object value)\n            equals(Object o) isEmpty()\n         */\n        //创建一个Map集合：无序，唯一\n        Map&lt;String,Integer&gt; map = new HashMap&lt;&gt;();\n        System.out.println(map.put(&quot;lili&quot;, 10101010));\n        map.put(&quot;nana&quot;,12345234);\n        map.put(&quot;feifei&quot;,34563465);\n        System.out.println(map.put(&quot;lili&quot;, 34565677));\n        map.put(&quot;mingming&quot;,12323);\n        /*map.clear();清空*/\n        /*map.remove(&quot;feifei&quot;);移除*/\n        System.out.println(map.size());\n        System.out.println(map);\n        System.out.println(map.containsKey(&quot;lili&quot;));\n        System.out.println(map.containsValue(12323));\n        Map&lt;String,Integer&gt; map2 = new HashMap&lt;&gt;();\n        System.out.println(map2.put(&quot;lili&quot;, 10101010));\n        map2.put(&quot;nana&quot;,12345234);\n        map2.put(&quot;feifei&quot;,34563465);\n        System.out.println(map2.put(&quot;lili&quot;, 34565677));\n        map2.put(&quot;mingming2&quot;,12323);\n        System.out.println(map==map2);\n        System.out.println(map.equals(map2));//equals进行了重写，比较的是集合中的值是否一致\n        System.out.println(&quot;判断是否为空：&quot;+map.isEmpty());\n        System.out.println(map.get(&quot;nana&quot;));\n        System.out.println(&quot;-----------------------------------&quot;);\n        //keySet()对集合中的key进行遍历查看：\n        Set&lt;String&gt; set = map.keySet();\n        for(String s:set)&#123;\n            System.out.println(s);\n        &#125;\n        System.out.println(&quot;-----------------------------------&quot;);\n        //values()对集合中的value进行遍历查看：\n        Collection&lt;Integer&gt; values = map.values();\n        for(Integer i:values)&#123;\n            System.out.println(i);\n        &#125;\n        System.out.println(&quot;-----------------------------------&quot;);\n        //get(Object key) keySet()\n        Set&lt;String&gt; set2 = map.keySet();\n        for(String s:set2)&#123;\n            System.out.println(map.get(s));\n        &#125;\n        System.out.println(&quot;-----------------------------------&quot;);\n        //entrySet()\n        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();\n        for(Map.Entry&lt;String, Integer&gt; e:entries)&#123;\n            System.out.println(e.getKey()+&quot;----&quot;+e.getValue());\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-TreeMap\"><a href=\"#2-TreeMap\" class=\"headerlink\" title=\"2 TreeMap\"></a>2 TreeMap</h2><p>【1】key的类型为String类型：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        Map&lt;String,Integer&gt; map = new TreeMap&lt;&gt;();\n        map.put(&quot;blili&quot;,1234);\n        map.put(&quot;alili&quot;,2345);\n        map.put(&quot;blili&quot;,5467);\n        map.put(&quot;clili&quot;,5678);\n        map.put(&quot;dlili&quot;,2345);\n        System.out.println(map.size());\n        System.out.println(map);\n    &#125;\n&#125;\n</code></pre>\n<p>【2】key的类型是一个自定义的引用数据类型：<br>（1）内部比较器：</p>\n<pre><code class=\"java\">public class Test03 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        Map&lt;Student,Integer&gt; map = new TreeMap&lt;&gt;();\n        map.put(new Student(19,&quot;blili&quot;,170.5),1001);\n        map.put(new Student(18,&quot;blili&quot;,150.5),1003);\n        map.put(new Student(19,&quot;alili&quot;,180.5),1023);\n        map.put(new Student(17,&quot;clili&quot;,140.5),1671);\n        map.put(new Student(10,&quot;dlili&quot;,160.5),1891);\n        System.out.println(map);\n        System.out.println(map.size());\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Student implements Comparable&lt;Student&gt;&#123;\n    private int age;\n    private String name;\n    private double height;\n    public int getAge() &#123;\n        return age;\n    &#125;\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public double getHeight() &#123;\n        return height;\n    &#125;\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n    public Student(int age, String name, double height) &#123;\n        this.age = age;\n        this.name = name;\n        this.height = height;\n    &#125;\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n                &quot;age=&quot; + age +\n                &quot;, name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, height=&quot; + height +\n                &#39;&#125;&#39;;\n    &#125;\n    @Override\n    public int compareTo(Student o) &#123;\n       /* return this.getAge()-o.getAge();*/\n        return this.getName().compareTo(o.getName());\n    &#125;\n&#125;\n</code></pre>\n<p>（2）外部比较器：</p>\n<pre><code class=\"java\">public class Test03 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        Map&lt;Student,Integer&gt; map = new TreeMap&lt;&gt;(new Comparator&lt;Student&gt;() &#123;\n            @Override\n            public int compare(Student o1, Student o2) &#123;\n                return ((Double)(o1.getHeight())).compareTo((Double)(o2.getHeight()));\n            &#125;\n        &#125;);\n        map.put(new Student(19,&quot;blili&quot;,170.5),1001);\n        map.put(new Student(18,&quot;blili&quot;,150.5),1003);\n        map.put(new Student(19,&quot;alili&quot;,180.5),1023);\n        map.put(new Student(17,&quot;clili&quot;,140.5),1671);\n        map.put(new Student(10,&quot;dlili&quot;,160.5),1891);\n        System.out.println(map);\n        System.out.println(map.size());\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-Map部分整体结构图\"><a href=\"#3-Map部分整体结构图\" class=\"headerlink\" title=\"3 Map部分整体结构图\"></a>3 Map部分整体结构图</h2><img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174919194.png\" class=\"\">\n\n\n<h2 id=\"4-源码部分\"><a href=\"#4-源码部分\" class=\"headerlink\" title=\"4 源码部分\"></a>4 源码部分</h2><h3 id=\"4-1-HashMap\"><a href=\"#4-1-HashMap\" class=\"headerlink\" title=\"4.1 HashMap\"></a>4.1 HashMap</h3><h4 id=\"4-1-1-代码展示特性\"><a href=\"#4-1-1-代码展示特性\" class=\"headerlink\" title=\"4.1.1 代码展示特性\"></a>4.1.1 代码展示特性</h4><pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //JDK1.7以后支持后面的&lt;&gt;中内容可以不写\n        HashMap&lt;Integer,String&gt; hm = new HashMap&lt;&gt;();\n        System.out.println(hm.put(12,&quot;丽丽&quot;));\n        System.out.println(hm.put(7,&quot;菲菲&quot;));\n        System.out.println(hm.put(19,&quot;露露&quot;));\n        System.out.println(hm.put(12,&quot;明明&quot;));\n        System.out.println(hm.put(6,&quot;莹莹&quot;));\n        System.out.println(&quot;集合的长度：&quot;+hm.size());\n        System.out.println(&quot;集合中内容查看：&quot;+hm);\n    &#125;\n&#125;\n</code></pre>\n<p>结果展示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175455959.png\" class=\"\">\n\n\n\n\n\n\n<h4 id=\"4-1-2-先演示原理\"><a href=\"#4-1-2-先演示原理\" class=\"headerlink\" title=\"4.1.2 先演示原理\"></a>4.1.2 先演示原理</h4><p>先演示原理图，再看源码，直接看的话，有的人接不上就蒙了：<br>相当于先看原理，然后从源码中验证这个原理是否正确：把图搞懂了，就是事倍功半的效果<br>原理如下：(JDK1.7)</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175512371.png\" class=\"\">\n\n\n\n\n\n\n<h4 id=\"4-1-3-源码（JDK1-7版本）\"><a href=\"#4-1-3-源码（JDK1-7版本）\" class=\"headerlink\" title=\"4.1.3 源码（JDK1.7版本）\"></a>4.1.3 源码（JDK1.7版本）</h4><pre><code class=\"java\">public class HashMap&lt;K,V&gt;\n    extends AbstractMap&lt;K,V&gt; //【1】继承的AbstractMap中，已经实现了Map接口\n        //【2】又实现了这个接口，多余，但是设计者觉得没有必要删除，就这么地了\n    implements Map&lt;K,V&gt;, Cloneable, Serializable&#123;\n                \n                \n        //【3】后续会用到的重要属性：先粘贴过来：\n    static final int DEFAULT_INITIAL_CAPACITY = 16;//哈希表主数组的默认长度\n        //定义了一个float类型的变量，以后作为：默认的装填因子，加载因子是表示Hsah表中元素的填满的程度\n        //太大容易引起哈西冲突，太小容易浪费  0.75是经过大量运算后得到的最好值\n        //这个值其实可以自己改，但是不建议改，因为这个0.75是大量运算得到的\n        static final float DEFAULT_LOAD_FACTOR = 0.75f;\n        transient Entry&lt;K,V&gt;[] table;//主数组,每个元素为Entry类型\n        transient int size;\n        int threshold;//数组扩容的界限值,门槛值   16*0.75=12 \n        final float loadFactor;//用来接收装填因子的变量\n        \n        //【4】查看构造器：内部相当于：this(16,0.75f);调用了当前类中的带参构造器\n        public HashMap() &#123;\n        this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);\n    &#125;\n        //【5】本类中带参数构造器：--》作用给一些数值进行初始化的！\n        public HashMap(int initialCapacity, float loadFactor) &#123;\n        //【6】给capacity赋值，capacity的值一定是 大于你传进来的initialCapacity 的 最小的 2的倍数\n        int capacity = 1;\n        while (capacity &lt; initialCapacity)\n            capacity &lt;&lt;= 1;\n                //【7】给loadFactor赋值，将装填因子0.75赋值给loadFactor\n        this.loadFactor = loadFactor;\n                //【8】数组扩容的界限值,门槛值\n        threshold = (int)Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);\n                \n                //【9】给table数组赋值，初始化数组长度为16\n        table = new Entry[capacity];\n                   \n    &#125;\n        //【10】调用put方法：\n        public V put(K key, V value) &#123;\n                //【11】对空值的判断\n        if (key == null)\n            return putForNullKey(value);\n                //【12】调用hash方法，获取哈希码\n        int hash = hash(key);\n                //【14】得到key对应在数组中的位置\n        int i = indexFor(hash, table.length);\n                //【16】如果你放入的元素，在主数组那个位置上没有值，e==null  那么下面这个循环不走\n                //当在同一个位置上放入元素的时候\n        for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;\n            Object k;\n                        //哈希值一样  并且  equals相比一样   \n                        //(k = e.key) == key  如果是一个对象就不用比较equals了\n            if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;\n                V oldValue = e.value;\n                e.value = value;\n                e.recordAccess(this);\n                return oldValue;\n            &#125;\n        &#125;\n        modCount++;\n                //【17】走addEntry添加这个节点的方法：\n        addEntry(hash, key, value, i);\n        return null;\n    &#125;\n        \n        //【13】hash方法返回这个key对应的哈希值，内部进行二次散列，为了尽量保证不同的key得到不同的哈希码！\n        final int hash(Object k) &#123;\n        int h = 0;\n        if (useAltHashing) &#123;\n            if (k instanceof String) &#123;\n                return sun.misc.Hashing.stringHash32((String) k);\n            &#125;\n            h = hashSeed;\n        &#125;\n                //k.hashCode()函数调用的是key键值类型自带的哈希函数，\n                //由于不同的对象其hashCode()有可能相同，所以需对hashCode()再次哈希，以降低相同率。\n        h ^= k.hashCode();\n        // This function ensures that hashCodes that differ only by\n        // constant multiples at each bit position have a bounded\n        // number of collisions (approximately 8 at default load factor).\n                /*\n                接下来的一串与运算和异或运算，称之为“扰动函数”，\n                扰动的核心思想在于使计算出来的值在保留原有相关特性的基础上，\n                增加其值的不确定性，从而降低冲突的概率。\n                不同的版本实现的方式不一样，但其根本思想是一致的。\n                往右移动的目的，就是为了将h的高位利用起来，减少哈西冲突\n                */\n        h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);\n        return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);\n    &#125;\n        //【15】返回int类型数组的坐标\n        static int indexFor(int h, int length) &#123;\n                //其实这个算法就是取模运算：h%length，取模效率不如位运算\n        return h &amp; (length-1);\n    &#125;\n        //【18】调用addEntry\n        void addEntry(int hash, K key, V value, int bucketIndex) &#123;\n                //【25】size的大小  大于 16*0.75=12的时候，比如你放入的是第13个，这第13个你打算放在没有元素的位置上的时候\n        if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;\n                        //【26】主数组扩容为2倍\n            resize(2 * table.length);\n                        //【30】重新调整当前元素的hash码\n            hash = (null != key) ? hash(key) : 0;\n                        //【31】重新计算元素位置\n            bucketIndex = indexFor(hash, table.length);\n        &#125;\n                //【19】将hash,key,value,bucketIndex位置  封装为一个Entry对象：\n        createEntry(hash, key, value, bucketIndex);\n    &#125;\n        //【20】\n        void createEntry(int hash, K key, V value, int bucketIndex) &#123;\n                //【21】获取bucketIndex位置上的元素给e\n        Entry&lt;K,V&gt; e = table[bucketIndex];\n                //【22】然后将hash, key, value封装为一个对象，然后将下一个元素的指向为e （链表的头插法）\n                //【23】将新的Entry放在table[bucketIndex]的位置上\n        table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);\n                //【24】集合中加入一个元素 size+1\n        size++;\n    &#125;\n    //【27】\n        void resize(int newCapacity) &#123;\n        Entry[] oldTable = table;\n        int oldCapacity = oldTable.length;\n        if (oldCapacity == MAXIMUM_CAPACITY) &#123;\n            threshold = Integer.MAX_VALUE;\n            return;\n        &#125;\n                //【28】创建长度为newCapacity的数组\n        Entry[] newTable = new Entry[newCapacity];\n        boolean oldAltHashing = useAltHashing;\n        useAltHashing |= sun.misc.VM.isBooted() &amp;&amp;\n                (newCapacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);\n        boolean rehash = oldAltHashing ^ useAltHashing;\n                //【28.5】转让方法：将老数组中的东西都重新放入新数组中\n        transfer(newTable, rehash);\n                //【29】老数组替换为新数组\n        table = newTable;\n                //【29.5】重新计算\n        threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);\n    &#125;\n        //【28.6】\n        void transfer(Entry[] newTable, boolean rehash) &#123;\n        int newCapacity = newTable.length;\n        for (Entry&lt;K,V&gt; e : table) &#123;\n            while(null != e) &#123;\n                Entry&lt;K,V&gt; next = e.next;\n                if (rehash) &#123;\n                    e.hash = null == e.key ? 0 : hash(e.key);\n                &#125;\n                                //【28.7】将哈希值，和新的数组容量传进去，重新计算key在新数组中的位置\n                int i = indexFor(e.hash, newCapacity);\n                                //【28.8】头插法\n                e.next = newTable[i];//获取链表上元素给e.next\n                newTable[i] = e;//然后将e放在i位置 \n                e = next;//e再指向下一个节点继续遍历\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"4-1-4-细节讲解：主数组的长度为2的倍数\"><a href=\"#4-1-4-细节讲解：主数组的长度为2的倍数\" class=\"headerlink\" title=\"4.1.4  细节讲解：主数组的长度为2的倍数\"></a>4.1.4  细节讲解：主数组的长度为2的倍数</h4><p>【1】主数组的长度为2的倍数，</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175628889.png\" class=\"\">\n\n\n<p>因为这个length的长度，会影响 key的位置：<br>key的位置的计算：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175638657.png\" class=\"\">\n\n\n\n\n<p>实际上这个算法就是：  h%length   ,但是取模的话  效率太低，所以用位运算效率会很高。</p>\n<p><strong>原因1：</strong><br><img data-src=\"/img/image-20220618175703663.png\" alt=\"image-20220618175703663\">和<img data-src=\"/img/image-20220618175712379.png\" alt=\"image-20220618175712379\">等效的前提就是  length必须是2的整数倍<br><strong>原因2：</strong></p>\n<p>如果不是2的整数倍，那么 哈西碰撞 哈西冲突的概率就高了很多</p>\n<p>位运算 就  涉及  到  length是不是2的整数倍：<br>比如是2的整数倍：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175753914.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175800521.png\" class=\"\">\n\n\n<p>并且这个得到的索引值，一定在 0-15之间（数组是16的时候）：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175840905.png\" class=\"\">\n\n\n<p>当然如果你扩容后数组长度为 32，那么这个索引就在0-31之间</p>\n<p>比如如果不是2的整数倍：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175850530.png\" class=\"\">\n\n\n<p>发现：如果不是2的整数倍，那么 哈西碰撞 哈西冲突的概率就高了很多</p>\n<h4 id=\"4-1-5-细节讲解：装填因子0-75的原因\"><a href=\"#4-1-5-细节讲解：装填因子0-75的原因\" class=\"headerlink\" title=\"4.1.5 细节讲解：装填因子0.75的原因\"></a>4.1.5 细节讲解：装填因子0.75的原因</h4><p>如果装填因子是1， 那么数组满了再扩容，可以做到  最大的空间利用率<br>但是这是一个理想状态，元素不可能完全的均匀分布，很可能就哈西碰撞产生链表了。产生链表的话 查询时间就长了。<br>—》空间好，时间不好</p>\n<p>那么有人说 ，把装填因子搞小一点，0.5，  如果是0.5的话，就浪费空间，但是可以做到 到0.5就扩容 ，然后哈西碰撞就少，<br>不产生链表的话，那么查询效率很高<br>—》时间好，空间不好</p>\n<p>所以在空间和时间中，<br>取中间值，平衡这个因素 就取值为 0.75</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175921895.png\" class=\"\">\n\n\n<p><strong>1.8版本</strong></p>\n<h2 id=\"1-8底层遵照-哈希表结构-红黑树\"><a href=\"#1-8底层遵照-哈希表结构-红黑树\" class=\"headerlink\" title=\"1.8底层遵照 哈希表结构 + 红黑树\"></a>1.8底层遵照 <font color=red >哈希表结构 + 红黑树</font></h2><pre><code class=\"java\">// HashMap&lt;String,Integer&gt; map = new HashMap&lt;&gt;(); --&gt;JDK 1.7开始类型推断，后面用钻石运算符即可。\npublic class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; \t\t//【1】继承的AbstractMap中，已经实现了Map接口\n    implements Map&lt;K,V&gt;, Cloneable, Serializable &#123; //【2】又实现了这个接口，多余，但是集合的设计者觉得没有必要删除，就这么地了\n\n    //------------------属性部分：\n    final float loadFactor;//【3-2】用来接收装填因子的变量\n    /*\n        【3-3】\n        定义了一个float类型的变量，以后作为：默认的装填因子，加载因子是表示Hsah表中元素的填满的程度\n        太大容易引起哈西冲突，太小容易浪费  0.75是经过大量运算后得到的最好值\n        这个值其实可以自己改，但是不建议改，因为这个0.75是大量运算得到的\n    */\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    int threshold;//【6-3】数组扩容的界限值,门槛值\n    transient Node&lt;K,V&gt;[] table;//【7-5】底层主数组\n    //------------------构造器：\n    //【3】调用空构造器\n    public HashMap() &#123;\n        //【3-1】给装填因子loadFactor赋值\n        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted\n    &#125;\n    \n    //【4】调用有参构造器：\n    public HashMap(int initialCapacity) &#123;\n        //【5】调用两个参数构造器\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    &#125;\n    //【6】\n    public HashMap(int initialCapacity, float loadFactor) &#123;\n        //【6-1】健壮性考虑，传入的数据过小不行，过大不行\n        if (initialCapacity &lt; 0)\n            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                               initialCapacity);\n        if (initialCapacity &gt; MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                               loadFactor);\n        //【6-2】给装填因子loadFactor赋值，赋值为0.75，这个值可以单独传入改变，但是不建议改变，一般都用默认的0.75\n        this.loadFactor = loadFactor;\n        //【6-3】给threshold赋值 \n        this.threshold = tableSizeFor(initialCapacity);\n    &#125;\n    //【6-4】返回的是大于initialCapacity的最接近的2的整数倍  ，比如initialCapacity传入10，这个方法返回16\n    static final int tableSizeFor(int cap) &#123;//（内部内容讲源码时候不用管，面试题中详讲）\n        int n = cap - 1;\n        n |= n &gt;&gt;&gt; 1;\n        n |= n &gt;&gt;&gt; 2;\n        n |= n &gt;&gt;&gt; 4;\n        n |= n &gt;&gt;&gt; 8;\n        n |= n &gt;&gt;&gt; 16;\n        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    &#125;\n    \n    //------------------方法：\n    //【7】调用put方法\n    public V put(K key, V value) &#123;\n        //【7-1】首先调用hash方法计算哈希值：\n        //【7-3】调用putVal方法传入五个参数：\n        return putVal(hash(key), key, value, false, true);\n    &#125;\n    //【7-2】计算hash值\n    static final int hash(Object key) &#123;\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n    &#125;\n    //【7-4】调用\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) &#123;\n        Node&lt;K,V&gt;[] tab;\n        Node&lt;K,V&gt; p; \n        int n, i;\n        //【7-6】将底层主数组table给tab，判断是否为null，第一次放数据一定是null\n        if ((tab = table) == null || (n = tab.length) == 0)\n            //【7-7】走入if分支：table是null，就对table进行扩容，走进resize方法\n            n = (tab = resize()).length;//【7-21】table的length为16 ，n为16\n        /*\n        【7-22】\n        i = (n - 1) &amp; hash 根据哈希值和n计算放入数组的位置\n        取出这个位置上的元素，看是否为空，如果是第一个元素，一定是null\n        */\n        if ((p = tab[i = (n - 1) &amp; hash]) == null)\n            //【7-23】在这个位置上将元素封装为Node对象，放入对应位置\n            tab[i] = newNode(hash, key, value, null);//封装Node节点new Node&lt;&gt;(hash, key, value, null);\n        else &#123;\n            Node&lt;K,V&gt; e; K k;\n            if (p.hash == hash &amp;&amp;\n                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);\n            else &#123;\n                for (int binCount = 0; ; ++binCount) &#123;\n                    if ((e = p.next) == null) &#123;\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount &gt;= TREEIFY_THRESHOLD - 1)  \n                            treeifyBin(tab, hash);\n                        break;\n                    &#125;\n                    if (e.hash == hash &amp;&amp;\n                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                        break;\n                    p = e;\n                &#125;\n            &#125;\n            if (e != null) &#123;  \n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            &#125;\n        &#125;\n        ++modCount;\n        //【7-25】size指的是放入集合的键值总数，size++操作，不大于threshold，resize方法不走\n        if (++size &gt; threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    &#125;\n    //【7-8】resize方法：---》假设最开始走的是HashMap的空构造器：\n    final Node&lt;K,V&gt;[] resize() &#123;\n        Node&lt;K,V&gt;[] oldTab = table;//【7-9】table 是null\n        int oldCap = (oldTab == null) ? 0 : oldTab.length; //【7-10】oldCap:0\n        int oldThr = threshold;//【7-11】threshold为16，oldThr：16\n        int newCap, newThr = 0;\n        if (oldCap &gt; 0) &#123;//【7-12】不走\n            if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            &#125;\n            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;\n                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr &lt;&lt; 1;\n        &#125;\n        else if (oldThr &gt; 0)  //【7-13】走\n            newCap = oldThr;//newCap=16\n        else &#123;               //【7-14】不走\n             \n            newCap = DEFAULT_INITIAL_CAPACITY;\n             \n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        &#125;\n        if (newThr == 0) &#123;//【7-15】走\n            float ft = (float)newCap * loadFactor;//【7-16】ft: 16*0.75=12\n            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE); //【7-17】newThr = 12\n        &#125;\n        //【7-18】threshold赋值为newThr为12， ---》所以走空构造器这里threshold赋值为12，走有参构造器里面threshold赋值为12？？？？\n        threshold = newThr;\n        @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)\n        //【7-19】创建Node数组，长度为newCap16\n            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];\n        //【7-20】table赋值为newTab\n        table = newTab;\n        if (oldTab != null) &#123;\n            for (int j = 0; j &lt; oldCap; ++j) &#123;\n                Node&lt;K,V&gt; e;\n                if ((e = oldTab[j]) != null) &#123;\n                    oldTab[j] = null;\n                    if (e.next == null)\n                        newTab[e.hash &amp; (newCap - 1)] = e;\n                    else if (e instanceof TreeNode)\n                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);\n                    else &#123; \n                        Node&lt;K,V&gt; loHead = null, loTail = null;\n                        Node&lt;K,V&gt; hiHead = null, hiTail = null;\n                        Node&lt;K,V&gt; next;\n                        do &#123;\n                            next = e.next;\n                            if ((e.hash &amp; oldCap) == 0) &#123;\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            &#125;\n                            else &#123;\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            &#125;\n                        &#125; while ((e = next) != null);\n                        if (loTail != null) &#123;\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        &#125;\n                        if (hiTail != null) &#123;\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return newTab;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; \n    implements Map&lt;K,V&gt;, Cloneable, Serializable &#123; \n    final float loadFactor;\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    int threshold;\n    transient Node&lt;K,V&gt;[] table;\n    public HashMap() &#123;\n        this.loadFactor = DEFAULT_LOAD_FACTOR; \n    &#125;\n    \n    public HashMap(int initialCapacity) &#123;\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    &#125;\n    public HashMap(int initialCapacity, float loadFactor) &#123;\n        if (initialCapacity &lt; 0)\n            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                               initialCapacity);\n        if (initialCapacity &gt; MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    &#125;\n    static final int tableSizeFor(int cap) &#123;\n        int n = cap - 1;\n        n |= n &gt;&gt;&gt; 1;\n        n |= n &gt;&gt;&gt; 2;\n        n |= n &gt;&gt;&gt; 4;\n        n |= n &gt;&gt;&gt; 8;\n        n |= n &gt;&gt;&gt; 16;\n        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    &#125;\n    \n    //【8-1】put方法\n    public V put(K key, V value) &#123;\n        //计算hash值\n        return putVal(hash(key), key, value, false, true);\n    &#125;\n\n    static final int hash(Object key) &#123;\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n    &#125;\n    //【8-2】调用putVal方法\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) &#123;\n        Node&lt;K,V&gt;[] tab;\n        Node&lt;K,V&gt; p; \n        int n, i;\n        \n        //【8-3】table不空了，不走if\t\t\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        //【8-4】tab[i]不null，不走if\n        if ((p = tab[i = (n - 1) &amp; hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else &#123;\n            Node&lt;K,V&gt; e; K k;\n            /*\n                【8-5】\n                判断p.hash == hash哈希值是否相等，即使hash相等也要做&amp;&amp;后续的判断，因为两个对象哈希值相等是有可能的\n                (k = p.key) == key   == 比较地址值，String的话一样，不是字符串地址也不一样，\n                Animal a1 = new Animal(19);\t\t和 \tAnimal a2 = new Animal(19);\t地址一定不同，就需要用后面的equals进行比较\n            */\n            if (p.hash == hash &amp;&amp;\n                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))   //----》哈希值相等，出现哈西碰撞\n                //【8-6】将该数组位置的数据给e\n                e = p;\n            else if (p instanceof TreeNode)\n                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);\n            else &#123;\n                for (int binCount = 0; ; ++binCount) &#123;\n                    if ((e = p.next) == null) &#123;\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount &gt;= TREEIFY_THRESHOLD - 1)  \n                            treeifyBin(tab, hash);\n                        break;\n                    &#125;\n                    if (e.hash == hash &amp;&amp;\n                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                        break;\n                    p = e;\n                &#125;\n            &#125;\n            if (e != null) &#123;  \n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;//【8-7】新value替换老value\n                afterNodeAccess(e);\n                return oldValue;//【8-8】返回老value\n            &#125;\n        &#125;\n        ++modCount;\n\n        if (++size &gt; threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    &#125;\n\n    final Node&lt;K,V&gt;[] resize() &#123;\n        Node&lt;K,V&gt;[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length; \n        int oldThr = threshold;\n        int newCap, newThr = 0;\n        if (oldCap &gt; 0) &#123;\n            if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            &#125;\n            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;\n                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr &lt;&lt; 1;\n        &#125;\n        else if (oldThr &gt; 0) \n            newCap = oldThr;\n        else &#123;    \n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        &#125;\n        if (newThr == 0) &#123;\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        &#125;\n        threshold = newThr;\n        @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)\n            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];\n        table = newTab;\n        if (oldTab != null) &#123;\n            for (int j = 0; j &lt; oldCap; ++j) &#123;\n                Node&lt;K,V&gt; e;\n                if ((e = oldTab[j]) != null) &#123;\n                    oldTab[j] = null;\n                    if (e.next == null)\n                        newTab[e.hash &amp; (newCap - 1)] = e;\n                    else if (e instanceof TreeNode)\n                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);\n                    else &#123; \n                        Node&lt;K,V&gt; loHead = null, loTail = null;\n                        Node&lt;K,V&gt; hiHead = null, hiTail = null;\n                        Node&lt;K,V&gt; next;\n                        do &#123;\n                            next = e.next;\n                            if ((e.hash &amp; oldCap) == 0) &#123;\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            &#125;\n                            else &#123;\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            &#125;\n                        &#125; while ((e = next) != null);\n                        if (loTail != null) &#123;\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        &#125;\n                        if (hiTail != null) &#123;\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return newTab;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; \n    implements Map&lt;K,V&gt;, Cloneable, Serializable &#123; \n    final float loadFactor;\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n    int threshold;\n    transient Node&lt;K,V&gt;[] table;\n    public HashMap() &#123;\n        this.loadFactor = DEFAULT_LOAD_FACTOR; \n    &#125;\n    \n    public HashMap(int initialCapacity) &#123;\n        this(initialCapacity, DEFAULT_LOAD_FACTOR);\n    &#125;\n    public HashMap(int initialCapacity, float loadFactor) &#123;\n        if (initialCapacity &lt; 0)\n            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                               initialCapacity);\n        if (initialCapacity &gt; MAXIMUM_CAPACITY)\n            initialCapacity = MAXIMUM_CAPACITY;\n        if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                               loadFactor);\n        this.loadFactor = loadFactor;\n        this.threshold = tableSizeFor(initialCapacity);\n    &#125;\n    static final int tableSizeFor(int cap) &#123;\n        int n = cap - 1;\n        n |= n &gt;&gt;&gt; 1;\n        n |= n &gt;&gt;&gt; 2;\n        n |= n &gt;&gt;&gt; 4;\n        n |= n &gt;&gt;&gt; 8;\n        n |= n &gt;&gt;&gt; 16;\n        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    &#125;\n    \n    //【9-1】put方法\n    public V put(K key, V value) &#123;\n        //计算hash值\n        return putVal(hash(key), key, value, false, true);\n    &#125;\n\n    static final int hash(Object key) &#123;\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n    &#125;\n    //【9-2】调用putVal方法\n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) &#123;\n        Node&lt;K,V&gt;[] tab;\n        Node&lt;K,V&gt; p; \n        int n, i;\n        \n        //【9-3】table不空了，不走if\t\t\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        //【9-4】tab[i]不null，不走if\n        if ((p = tab[i = (n - 1) &amp; hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        else &#123;\n            Node&lt;K,V&gt; e; K k;\n            /*\n                【9-5】\n                判断p.hash == hash哈希值是否相等，即使hash相等也要做&amp;&amp;后续的判断，因为两个对象哈希值相等是有可能的\n                此时“通话”和“重地”的哈希值一致，但是key不一致，if不走\n            */\n            if (p.hash == hash &amp;&amp;\n                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n                e = p;\n            else if (p instanceof TreeNode)//【9-6】p也不是红黑树，不走if\n                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);\n            else &#123;\n                //【9-7】走到这里，证明数组的这个位置是个链表了\n                for (int binCount = 0; ; ++binCount) &#123;//【9-8】无条件的死循环   binCount 链表上节点的个数\n                    //随着循环  p.next就是一路找链上元素\n                    //p.next要是没有元素，就要开始追加了呗\n                    if ((e = p.next) == null) &#123;//【9-10】一路next比较都没有key相同的数据\n                    \n                        p.next = newNode(hash, key, value, null);//【9-11】追加在链表尾部 ---》 前七后八\n                        //【9-12】如果节点个数大于8，进行树化：要从链表转为红黑树\n                        if (binCount &gt;= TREEIFY_THRESHOLD - 1)  \n                            treeifyBin(tab, hash);//【9-13】这里还涉及 剪枝 问题，树节点在6个以下，就又变成链表了\n                        break;\n                    &#125;\n                    //【9-9】比较过程中：如果比较链表某个key相同，就break结束了，不用继续走了\n                    if (e.hash == hash &amp;&amp;\n                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                        break;\n                    p = e;\n                &#125;\n            &#125;\n            if (e != null) &#123;  \n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;//【8-7】新value替换老value\n                afterNodeAccess(e);\n                return oldValue;//【8-8】返回老value\n            &#125;\n        &#125;\n        ++modCount;\n\n        if (++size &gt; threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    &#125;\n\n    final Node&lt;K,V&gt;[] resize() &#123;\n        Node&lt;K,V&gt;[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length; \n        int oldThr = threshold;\n        int newCap, newThr = 0;\n        if (oldCap &gt; 0) &#123;\n            if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            &#125;\n            else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;\n                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr &lt;&lt; 1;\n        &#125;\n        else if (oldThr &gt; 0) \n            newCap = oldThr;\n        else &#123;    \n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        &#125;\n        if (newThr == 0) &#123;\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        &#125;\n        threshold = newThr;\n        @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)\n            Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];\n        table = newTab;\n        if (oldTab != null) &#123;\n            for (int j = 0; j &lt; oldCap; ++j) &#123;\n                Node&lt;K,V&gt; e;\n                if ((e = oldTab[j]) != null) &#123;\n                    oldTab[j] = null;\n                    if (e.next == null)\n                        newTab[e.hash &amp; (newCap - 1)] = e;\n                    else if (e instanceof TreeNode)\n                        ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);\n                    else &#123; \n                        Node&lt;K,V&gt; loHead = null, loTail = null;\n                        Node&lt;K,V&gt; hiHead = null, hiTail = null;\n                        Node&lt;K,V&gt; next;\n                        do &#123;\n                            next = e.next;\n                            if ((e.hash &amp; oldCap) == 0) &#123;\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            &#125;\n                            else &#123;\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            &#125;\n                        &#125; while ((e = next) != null);\n                        if (loTail != null) &#123;\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        &#125;\n                        if (hiTail != null) &#123;\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        &#125;\n                    &#125;\n                &#125;\n            &#125;\n        &#125;\n        return newTab;\n    &#125;\n&#125;\n</code></pre>\n<p><strong>总结：</strong></p>\n<p>默认<strong>数组长度为16</strong>，<strong>最大程度${2^{30}}$</strong>,<strong>负载因子为0.75</strong>，扩容时<strong>扩大2倍</strong>，</p>\n<p>1.8比1.7改变了底层数据结构而已</p>\n<h4 id=\"4-1-6-HashSet底层原理\"><a href=\"#4-1-6-HashSet底层原理\" class=\"headerlink\" title=\"4.1.6 HashSet底层原理\"></a>4.1.6 HashSet底层原理</h4><pre><code class=\"java\">public class HashSet&lt;E&gt;&#123;\n    //重要属性：\n    private transient HashMap&lt;E,Object&gt; map;\n    private static final Object PRESENT = new Object();\n    //构造器：\n    public HashSet() &#123;\n        map = new HashMap&lt;&gt;();//HashSet底层就是利用HashMap来完成的\n    &#125;\n        \n    public boolean add(E e) &#123;\n        return map.put(e, PRESENT)==null;\n    &#125;      \n&#125;\n</code></pre>\n<h3 id=\"4-2TreeMap\"><a href=\"#4-2TreeMap\" class=\"headerlink\" title=\"4.2TreeMap\"></a>4.2TreeMap</h3><p>【1】原理大致介绍：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175955956.png\" class=\"\">\n\n\n<p>【2】源码：</p>\n<pre><code class=\"java\">public class TreeMap&lt;K,V&gt;&#123;\n        //重要属性：\n        //外部比较器：\n        private final Comparator&lt;? super K&gt; comparator;\n        //树的根节点：\n        private transient Entry&lt;K,V&gt; root = null;\n        //集合中元素的数量：\n        private transient int size = 0;\n        //空构造器:\n        public TreeMap() &#123;\n        comparator = null;//如果使用空构造器，那么底层就不使用外部比较器\n    &#125;\n        //有参构造器：\n        public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;\n        this.comparator = comparator;//如果使用有参构造器，那么就相当于指定了外部比较器\n    &#125;\n        \n        public V put(K key, V value) &#123;//k,V的类型在创建对象的时候确定了\n        //如果放入的是第一对元素，那么t的值为null\n        Entry&lt;K,V&gt; t = root;//在放入第二个节点的时候，root已经是根节点了\n                //如果放入的是第一个元素的话，走入这个if中：\n        if (t == null) &#123;\n                        //自己跟自己比\n            compare(key, key); // type (and possibly null) check\n                        //根节点确定为root\n            root = new Entry&lt;&gt;(key, value, null);\n                        //size值变为1\n            size = 1;\n            modCount++;\n            return null;\n        &#125;\n                \n        int cmp;\n        Entry&lt;K,V&gt; parent;\n        // split comparator and comparable paths\n                //将外部比较器赋给cpr:\n        Comparator&lt;? super K&gt; cpr = comparator;\n                //cpr不等于null，意味着你刚才创建对象的时候调用了有参构造器，指定了外部比较器\n        if (cpr != null) &#123;\n            do &#123;\n                parent = t;\n                cmp = cpr.compare(key, t.key);//将元素的key值做比较\n                                //cmp返回的值就是int类型的数据：\n                                //要是这个值《0 =0  》0\n                if (cmp &lt; 0)\n                    t = t.left;\n                else if (cmp &gt; 0)\n                    t = t.right;\n                else//cpm==0\n                                //如果key的值一样，那么新的value替换老的value  但是key不变 因为key是唯一的\n                    return t.setValue(value);\n            &#125; while (t != null);\n        &#125;\n                //cpr等于null，意味着你刚才创建对象的时候调用了空构造器，没有指定外部比较器，使用内部比较器\n        else &#123;\n            if (key == null)\n                throw new NullPointerException();\n            Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key;\n            do &#123;\n                parent = t;\n                cmp = k.compareTo(t.key);//将元素的key值做比较\n                if (cmp &lt; 0)\n                    t = t.left;\n                else if (cmp &gt; 0)\n                    t = t.right;\n                else\n                    return t.setValue(value);\n            &#125; while (t != null);\n        &#125;\n        Entry&lt;K,V&gt; e = new Entry&lt;&gt;(key, value, parent);\n        if (cmp &lt; 0)\n            parent.left = e;\n        else\n            parent.right = e;\n        fixAfterInsertion(e);\n        size++;//size加1 操作\n        modCount++;\n        return null;\n    &#125;\n        \n        \n&#125;\n static final class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;\n        K key;\n        V value;\n        Entry&lt;K,V&gt; left = null;\n        Entry&lt;K,V&gt; right = null;\n        Entry&lt;K,V&gt; parent;\n        boolean color = BLACK;\n &#125;\n</code></pre>\n<h4 id=\"TreeSet源码\"><a href=\"#TreeSet源码\" class=\"headerlink\" title=\"TreeSet源码\"></a>TreeSet源码</h4><pre><code class=\"java\">public class TreeSet&lt;E&gt; extends AbstractSet&lt;E&gt;\n    implements NavigableSet&lt;E&gt;, Cloneable, java.io.Serializable&#123;\n                //重要属性：\n                private transient NavigableMap&lt;E,Object&gt; m;\n                private static final Object PRESENT = new Object();\n                \n                //在调用空构造器的时候，底层创建了一个TreeMap\n                public TreeSet() &#123;\n                        this(new TreeMap&lt;E,Object&gt;());\n                &#125;\n                \n                TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;\n                        this.m = m;\n                &#125;\n                \n                public boolean add(E e) &#123;\n        return m.put(e, PRESENT)==null;\n    &#125;\n                \n                \n        &#125;\n</code></pre>\n<h1 id=\"Collections工具类\"><a href=\"#Collections工具类\" class=\"headerlink\" title=\"Collections工具类\"></a>Collections工具类</h1><pre><code class=\"java\">public class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //Collections不支持创建对象，因为构造器私有化了\n        /*Collections cols = new Collections();*/\n        //里面的属性和方法都是被static修饰，我们可以直接用类名.去调用即可：\n        //常用方法：\n        //addAll：\n        ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(&quot;cc&quot;);\n        list.add(&quot;bb&quot;);\n        list.add(&quot;aa&quot;);\n        Collections.addAll(list,&quot;ee&quot;,&quot;dd&quot;,&quot;ff&quot;);\n        Collections.addAll(list,new String[]&#123;&quot;gg&quot;,&quot;oo&quot;,&quot;pp&quot;&#125;);\n        System.out.println(list);\n        //binarySearch必须在有序的集合中查找：--》排序：\n        Collections.sort(list);//sort提供的是升序排列\n        System.out.println(list);\n        //binarySearch\n        System.out.println(Collections.binarySearch(list, &quot;cc&quot;));\n        //copy:替换方法\n        ArrayList&lt;String&gt; list2 = new ArrayList&lt;&gt;();\n        Collections.addAll(list2,&quot;tt&quot;,&quot;ss&quot;);\n        Collections.copy(list,list2);//将list2的内容替换到list上去\n        System.out.println(list);\n        System.out.println(list2);\n        //fill 填充\n        Collections.fill(list2,&quot;yyy&quot;);\n        System.out.println(list2);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h2 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h2><pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        /*\n        Stack是Vector的子类，Vector里面两个重要的属性：\n        Object[] elementData;底层依然是一个数组\n        int elementCount;数组中的容量\n         */\n        Stack s = new Stack();\n        s.add(&quot;A&quot;);\n        s.add(&quot;B&quot;);\n        s.add(&quot;C&quot;);\n        s.add(&quot;D&quot;);\n        System.out.println(s);//[A, B, C, D]\n        System.out.println(&quot;栈是否为空：&quot; + s.empty());\n        System.out.println(&quot;查看栈顶的数据，但是不移除：&quot; + s.peek());\n        System.out.println(s);\n        System.out.println(&quot;查看栈顶的数据，并且不移除：&quot; + s.pop());\n        System.out.println(s);\n        s.push(&quot;D&quot;);//和add方法执行的功能一样，就是返回值不同\n        System.out.println(s);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"同步类容器\"><a href=\"#同步类容器\" class=\"headerlink\" title=\"同步类容器\"></a>同步类容器</h2><p>比如ArrayList，HashMap，线程不安全，现在想把线程不安全的集合转换为线程安全的集合：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //ArrayList为案例：从线程不安全  转为线程安全：\n        List list = Collections.synchronizedList(new ArrayList());\n    &#125;\n&#125;\n</code></pre>\n<p>试试ArrayList的线程不安全：</p>\n<pre><code class=\"java\">public class Demo &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个ArrayList集合：\n        ArrayList list = new ArrayList();\n        //创建一个线程池：线程池定长100\n        ExecutorService es = Executors.newFixedThreadPool(100);\n        //并发向集合中添加10000个数据：\n        for (int i = 0; i &lt; 10000; i++) &#123;\n            //每个线程处理任务：run方法中的内容就是线程单元，任务，实际线程执行的部分\n            es.execute(new Runnable() &#123;\n                @Override\n                public void run() &#123;\n                    list.add(&quot;aaa&quot;);\n                &#125;\n            &#125;);\n        &#125;\n        //关闭线程池：\n        es.shutdown();\n        //监控线程是否执行完毕：\n        while(true)&#123;\n            //线程都执行完以后返回true\n            if(es.isTerminated())&#123;\n                System.out.println(&quot;所有的子线程都执行完毕了！&quot;);\n                //执行完毕以后看一下集合中元素的数量：\n                System.out.println(list.size());\n                if(list.size() == 10000)&#123;\n                    System.out.println(&quot;线程安全！&quot;);\n                &#125;else&#123;\n                    System.out.println(&quot;线程不安全！&quot;);\n                &#125;\n                //线程执行完以后，while循环可以停止：\n                break;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180549466.png\" class=\"\">\n\n\n<p>利用同步类容器解决：</p>\n<pre><code class=\"java\">public class Demo &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个ArrayList集合：\n        ArrayList oldlist = new ArrayList();\n        List list = Collections.synchronizedList(oldlist);\n        //创建一个线程池：线程池定长100\n        ExecutorService es = Executors.newFixedThreadPool(100);\n        //并发向集合中添加10000个数据：\n        for (int i = 0; i &lt; 10000; i++) &#123;\n            //每个线程处理任务：run方法中的内容就是线程单元，任务，实际线程执行的部分\n            es.execute(new Runnable() &#123;\n                @Override\n                public void run() &#123;\n                    list.add(&quot;aaa&quot;);\n                &#125;\n            &#125;);\n        &#125;\n        //关闭线程池：\n        es.shutdown();\n        //监控线程是否执行完毕：\n        while(true)&#123;\n            //线程都执行完以后返回true\n            if(es.isTerminated())&#123;\n                System.out.println(&quot;所有的子线程都执行完毕了！&quot;);\n                //执行完毕以后看一下集合中元素的数量：\n                System.out.println(list.size());\n                if(list.size() == 10000)&#123;\n                    System.out.println(&quot;线程安全！&quot;);\n                &#125;else&#123;\n                    System.out.println(&quot;线程不安全！&quot;);\n                &#125;\n                //线程执行完以后，while循环可以停止：\n                break;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180623443.png\" class=\"\">\n\n\n<p>源码解析：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180635090.png\" class=\"\">\n\n\n\n\n<h2 id=\"ConcurrentMap并发容器\"><a href=\"#ConcurrentMap并发容器\" class=\"headerlink\" title=\"ConcurrentMap并发容器\"></a>ConcurrentMap并发容器</h2><p>JDK5.0之后提供了多种并发类容器可以替代同步类容器，提升性能、吞吐量<br>ConcurrentHashMap替代HashMap、HashTable<br>ConcurrentSkipListMap替代TreeMap</p>\n<p>简单原理：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180711631.png\" class=\"\">\n\n\n<p>并发情况下，验证提高性能：</p>\n<p>ConcunrrentHashMap :</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //选择一个容器：\n        ConcurrentHashMap&lt;String,Integer&gt; map = new ConcurrentHashMap&lt;&gt;();\n        \n        //创建10个线程：\n        for (int i = 0; i &lt; 10; i++) &#123;\n            new Thread(new Runnable() &#123;\n                @Override\n                public void run() &#123;\n                    long startTime = System.currentTimeMillis();\n                    for (int j = 0; j &lt; 1000000; j++) &#123;\n                        map.put(&quot;test&quot; + j , j);\n                    &#125;\n                    long endTime = System.currentTimeMillis();\n                    System.out.println(&quot;一共需要的时间：&quot; + (endTime - startTime));\n                &#125;\n            &#125;).start();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180735265.png\" class=\"\">\n\n\n<p>Hashtable：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //选择一个容器：\n        //ConcurrentHashMap&lt;String,Integer&gt; map = new ConcurrentHashMap&lt;&gt;();\n        Hashtable map = new Hashtable();\n        //创建10个线程：\n        for (int i = 0; i &lt; 10; i++) &#123;\n            new Thread(new Runnable() &#123;\n                @Override\n                public void run() &#123;\n                    long startTime = System.currentTimeMillis();\n                    for (int j = 0; j &lt; 1000000; j++) &#123;\n                        map.put(&quot;test&quot; + j , j);\n                    &#125;\n                    long endTime = System.currentTimeMillis();\n                    System.out.println(&quot;一共需要的时间：&quot; + (endTime - startTime));\n                &#125;\n            &#125;).start();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180757516.png\" class=\"\">\n\n\n<p>HashMap：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //选择一个容器：\n        //ConcurrentHashMap&lt;String,Integer&gt; map = new ConcurrentHashMap&lt;&gt;();\n        //Hashtable map = new Hashtable();\n        HashMap map = new HashMap();\n        //创建10个线程：\n        for (int i = 0; i &lt; 10; i++) &#123;\n            new Thread(new Runnable() &#123;\n                @Override\n                public void run() &#123;\n                    long startTime = System.currentTimeMillis();\n                    for (int j = 0; j &lt; 1000000; j++) &#123;\n                        map.put(&quot;test&quot; + j , j);\n                    &#125;\n                    long endTime = System.currentTimeMillis();\n                    System.out.println(&quot;一共需要的时间：&quot; + (endTime - startTime));\n                &#125;\n            &#125;).start();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180824896.png\" class=\"\">\n\n\n<p>线程安全的HashMap：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //选择一个容器：\n        //ConcurrentHashMap&lt;String,Integer&gt; map = new ConcurrentHashMap&lt;&gt;();\n        //Hashtable map = new Hashtable();\n        HashMap oldmap = new HashMap();\n        Map map = Collections.synchronizedMap(oldmap);\n        //创建10个线程：\n        for (int i = 0; i &lt; 10; i++) &#123;\n            new Thread(new Runnable() &#123;\n                @Override\n                public void run() &#123;\n                    long startTime = System.currentTimeMillis();\n                    for (int j = 0; j &lt; 1000000; j++) &#123;\n                        map.put(&quot;test&quot; + j , j);\n                    &#125;\n                    long endTime = System.currentTimeMillis();\n                    System.out.println(&quot;一共需要的时间：&quot; + (endTime - startTime));\n                &#125;\n            &#125;).start();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180846459.png\" class=\"\">\n\n\n<p>总结：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">ConcurrentHashMap</th>\n<th align=\"center\">性能高，线程安全</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Hashtable: 线程安全</td>\n<td align=\"center\">性能低</td>\n</tr>\n<tr>\n<td align=\"center\">HashMap:线程不安全</td>\n<td align=\"center\">性能高</td>\n</tr>\n</tbody></table>\n<p>线程安全的HashMap：线程安全，性能低</p>\n<h2 id=\"COW并发容器\"><a href=\"#COW并发容器\" class=\"headerlink\" title=\"COW并发容器\"></a>COW并发容器</h2><p>【1】COW类并发容器，全称：Copy  On  Write容器，写时复制容器。（读写分离容器）</p>\n<p>【2】原理：<br>向容器中添加元素时，先将容器进行Copy复制出一个新容器，然后将元素添加到新容器中，再将原容器的引用指向新容器。<br>并发读的时候不需要锁定容器，因为原容器没有变化，所以可以读取原容器中的值，使用的是一种读写分离的思想。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181056593.png\" class=\"\">\n\n\n\n\n<p>【3】这种设计的好处是什么呢？<br>注意上面的操作arr数组本身是无锁的，没有锁，在添加数据的时候，做了额外的复制，<br>此时如果有线程来读数据，那么读取的是老arr的数据，此时arr的地址还没有改呢，在我添加元素的过程中，<br>无论有多少个线程来读数据，都是读的原来的arr，不是新的arr<br>所以性能很高，读写分离。提高了并发的性能。如果再读再复制…</p>\n<p>【4】注意：<br>CopyOnWrite容器只能保证数据的最终一致性，不能保证数据实时一致性。<br>所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。</p>\n<p>【5】适合特定场合：<br>这个应用场景显而易见，适合读多写少的情况。如果一万个线程都添加操作，都在集合中添加数据，那数组不断复制，长度不断+1，<br>那JVM肯定一直往上飙升，你用的时候肯定要评估使用场景的。<br>由于每次更新都会复制新容器，所以如果数据量较大并且更新操作频繁则对内存消耗很高，建议在高并发读的场景下使用。</p>\n<p>【6】主要讲解：<br>COW容器有两种一种是CopyonWriteArrayList，一种是CopyOnWriteArraySet<br>一个是替代ArrayList，一个是代替Set</p>\n<h3 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a>CopyOnWriteArrayList</h3><pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        CopyOnWriteArrayList&lt;Integer&gt; list = new CopyOnWriteArrayList&lt;&gt;();\n        //添加方法：\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.add(4);\n        System.out.println(list);//[1, 2, 3, 4]\n        list.add(3);//add方法无论元素是否存在，都可以添加进去--》添加重复的元素\n        System.out.println(list);//[1, 2, 3, 4, 3]\n        //adj. 缺席的；缺少的；心不在焉的；茫然的\n        list.addIfAbsent(33);//添加不存在的元素--》不可以添加重复的数据\n        System.out.println(list);//[1, 2, 3, 4, 3, 33]\n    &#125;\n&#125;\n</code></pre>\n<p>源码分析：</p>\n<pre><code class=\"java\">public class CopyOnWriteArrayList&lt;E&gt;&#123;\n        //底层基于数组实现的\n        private transient volatile Object[] array;\n        \n        public CopyOnWriteArrayList() &#123;\n        setArray(new Object[0]);\n    &#125;\n        \n        final void setArray(Object[] a) &#123;\n        array = a; // array = new Object[0]\n    &#125;\n        //add方法：\n        public boolean add(E e) &#123;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try &#123;\n                        //返回底层array数组,给了elements\n            Object[] elements = getArray();\n                        //获取elements的长度---》获取老数组的长度\n            int len = elements.length;\n                        //完成数组的复制，将老数组中的元素复制到新数组中，并且新数组的长度加1操作\n            Object[] newElements = Arrays.copyOf(elements, len + 1);\n                        //将e元素放入新数组最后位置\n            newElements[len] = e;\n                        //array数组的指向从老数组变为新数组\n            setArray(newElements);\n            return true;\n        &#125; finally &#123;\n            lock.unlock();\n        &#125;\n    &#125;\n        \n        \n        final Object[] getArray() &#123;\n        return array;//返回底层数组\n    &#125;\n        \n        \n        private boolean addIfAbsent(E e, Object[] snapshot) &#123;\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try &#123;\n                        //取出array数组给current\n            Object[] current = getArray();\n            int len = current.length;\n            if (snapshot != current) &#123;\n                // Optimize for lost race to another addXXX operation\n                int common = Math.min(snapshot.length, len);\n                                //遍历老数组：\n                for (int i = 0; i &lt; common; i++)\n                                        //eq(e, current[i])将放入的元素和老数组的每一个元素进行比较，如果有重复的元素，就返回false，不添加了\n                    if (current[i] != snapshot[i] &amp;&amp; eq(e, current[i]))\n                        return false;\n                if (indexOf(e, current, common, len) &gt;= 0)\n                        return false;\n            &#125;\n                        //完成数组的复制，将老数组中的元素复制到新数组中，并且新数组的长度加1操作\n            Object[] newElements = Arrays.copyOf(current, len + 1);\n                        //将e元素放入新数组最后位置\n            newElements[len] = e;\n                        //array数组的指向从老数组变为新数组\n            setArray(newElements);\n            return true;\n        &#125; finally &#123;\n            lock.unlock();\n        &#125;\n    &#125;             \n&#125;\n</code></pre>\n<h3 id=\"CopyOnWriteArraySet\"><a href=\"#CopyOnWriteArraySet\" class=\"headerlink\" title=\"CopyOnWriteArraySet\"></a>CopyOnWriteArraySet</h3><pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建一个集合：\n        CopyOnWriteArraySet&lt;Integer&gt; set = new CopyOnWriteArraySet&lt;&gt;();\n        //在这里也体现出Set和List的本质区别，就在于是否重复\n        //所以add方法直接不可以添加重复数据进去\n        set.add(1);\n        set.add(2);\n        set.add(2);\n        set.add(7);\n        System.out.println(set);//[1, 2, 7]\n        \n    &#125;\n&#125;\n</code></pre>\n<p>源码：</p>\n<pre><code class=\"java\">public class CopyOnWriteArraySet&lt;E&gt;&#123;\n        //CopyOnWriteArraySet底层基于CopyOnWriteArrayList\n        private final CopyOnWriteArrayList&lt;E&gt; al;\n        \n        public CopyOnWriteArraySet() &#123;\n        al = new CopyOnWriteArrayList&lt;E&gt;();\n    &#125;\n        \n        //添加方法：\n        public boolean add(E e) &#123;\n        return al.addIfAbsent(e);//底层调用的还是CopyOnWriteArrayList的addIfAbsent\n    &#125;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>由上面的源码看出，每次调用CopyOnWriteArraySet的add方法时候，其实底层是基于CopyOnWriteArrayList的addIfAbsent，<br>每次在addIfAbsent方法中每次都要对数组进行遍历，所以CopyOnWriteArraySet的性能低于CopyOnWriteArrayList</p>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>数据结构分为：<br>（1）逻辑结构 ：–》思想上的结构–》卧室，厨房，卫生间 —》线性表（数组，链表），图，树，栈，队列<br>（2）物理结构 ：–》真实结构–》钢筋混凝土+牛顿力学——》紧密结构（顺序结构），跳转结构（链式结构）</p>\n<p>队列：特点：先进先出 （FIFO）（first in first out）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181454201.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181504415.png\" class=\"\">\n\n\n\n\n<p>他有两端，一端是让新元素进去，一端是让老元素出去</p>\n<p>在需要公平且经济地对各种自然或社会资源做管理或分配的场合，无论是调度银行和医院的服务窗口，还是管理轮耕的田地和轮伐的森林，队列都可大显身手。</p>\n<p>甚至计算机及其网络自身内部的各种计算资源，无论是多进程共享的 CPU 时间，还是多用户共享的打印机，也都需要借助队列结构实现合理和优化的分配。</p>\n<p>双端队列：两端都可以进行进队，出队的队列：</p>\n<p>（1）前端，后端都可以进出：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181511902.png\" class=\"\">\n\n\n\n\n<p>（2）进行限制：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181516928.png\" class=\"\">\n\n\n\n\n<p>（3）特殊情况，双端队列实现栈操作:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181522040.png\" class=\"\">\n\n\n\n\n<p>栈和队列的物理结构实现 可以用线性表的数组，链表都可以</p>\n<h2 id=\"队列Queue\"><a href=\"#队列Queue\" class=\"headerlink\" title=\"队列Queue\"></a>队列Queue</h2><h3 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h3><h4 id=\"BlockingQueue介绍\"><a href=\"#BlockingQueue介绍\" class=\"headerlink\" title=\"BlockingQueue介绍\"></a>BlockingQueue介绍</h4><img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181740905.png\" class=\"\">\n\n\n<p>总结：BlockingQueue继承Queue，Queue继承自Collection<br>所以Collection最基础的增删改查操作是有的，在这个基础上，多了Queue的特点，在这个基础上又多了阻塞的特点，最终形成了BlockingQueue</p>\n<p>什么叫阻塞？</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181750078.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181756012.png\" class=\"\">\n\n\n<p>常用的API：<br>添加：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181825630.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181805698.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181833424.png\" class=\"\">\n\n\n<p>put是阻塞的</p>\n<p>查询：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181839103.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181845214.png\" class=\"\">\n\n\n\n\n<p>take是阻塞的</p>\n<p>删除：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181852391.png\" class=\"\">\n\n\n\n\n<h4 id=\"常见子类\"><a href=\"#常见子类\" class=\"headerlink\" title=\"常见子类\"></a>常见子类</h4><p><a href=\"#queue_impl1\">ArrayBlockingQueue</a></p>\n<p><a href=\"#queue_impl2\">LinkedBlockingQueue</a></p>\n<p><a href=\"#queue_impl3\">SynchronousQueue</a></p>\n<p><a href=\"#queue_impl4\">PriorityBlockingQueue</a></p>\n<p><a href=\"#queue_impl5\">DelayQueue</a></p>\n<div name=queue_impl1>\n\n\n\n<blockquote>\n<p>ArrayBlockingQueue</p>\n</blockquote>\n<p>源码中的注释的解释说明：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181949074.png\" class=\"\">\n\n\n\n\n<p>【1】添加元素：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) throws InterruptedException &#123;\n        //创建一个队列，队列可以指定容量指定长度3：\n        ArrayBlockingQueue aq = new ArrayBlockingQueue(3);\n        //添加元素：\n        //【1】添加null元素：不可以添加null元素，会报空指针异常：NullPointerException\n        //aq.add(null);\n        //aq.offer(null);\n        //aq.put(null);\n        //【2】正常添加元素：\n        aq.add(&quot;aaa&quot;);\n        aq.offer(&quot;bbb&quot;);\n        aq.put(&quot;ccc&quot;);\n        System.out.println(aq);//[aaa, bbb, ccc]\n        //【3】在队列满的情况下，再添加元素：\n        //aq.add(&quot;ddd&quot;);//在队列满的情况下，添加元素 出现异常：Queue full\n        //System.out.println(aq.offer(&quot;ddd&quot;));//没有添加成功，返回false\n        //设置最大阻塞时间，如果时间到了，队列还是满的，就不再阻塞了\n        //aq.offer(&quot;ddd&quot;,2, TimeUnit.SECONDS);\n        //真正阻塞的方法： put ,如果队列满，就永远阻塞 \n        aq.put(&quot;ddd&quot;);\n        System.out.println(aq);\n    &#125;\n&#125;\n</code></pre>\n<p>【2】获取元素：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) throws InterruptedException &#123;\n        //创建一个队列，队列可以指定容量指定长度3：\n        ArrayBlockingQueue aq = new ArrayBlockingQueue(3);\n        aq.add(&quot;aaa&quot;);\n        aq.add(&quot;bbb&quot;);\n        aq.add(&quot;ccc&quot;);\n        //得到头元素但是不移除\n        System.out.println(aq.peek());\n        System.out.println(aq);\n        //得到头元素并且移除\n        System.out.println(aq.poll());\n        System.out.println(aq);\n        //得到头元素并且移除\n        System.out.println(aq.take());\n        System.out.println(aq);\n        //清空元素：\n        aq.clear();\n        System.out.println(aq);\n        System.out.println(aq.peek());//null\n        System.out.println(aq.poll());//null\n        //设置阻塞事件，如果队列为空，返回null，时间到了以后就不阻塞了\n        //System.out.println(aq.poll(2, TimeUnit.SECONDS));\n        //真正阻塞：队列为空，永远阻塞\n        System.out.println(aq.take());\n    &#125;\n&#125;\n</code></pre>\n<p>【3】源码：</p>\n<pre><code class=\"java\">public class ArrayBlockingQueue&lt;E&gt; &#123;\n        //底层就是一个数组：\n        final Object[] items;\n        //取元素用到的索引，初始结果为0\n        int takeIndex;\n        //放元素用到的索引，初始结果为0\n        int putIndex;\n        //数组中元素的个数：\n        int count;\n        \n        //一把锁：这个锁肯定很多方法中用到了，所以定义为属性，初始化以后可以随时使用\n    final ReentrantLock lock;\n    //锁伴随的一个等待吃：notEmpty\n    private final Condition notEmpty;\n    //锁伴随的一个等待吃：notFull\n    private final Condition notFull;\n        \n        //构造器：\n        public ArrayBlockingQueue(int capacity) &#123;//传入队列指定的容量\n        this(capacity, false);\n    &#125;\n        \n        public ArrayBlockingQueue(int capacity, boolean fair) &#123;//传入队列指定的容量\n                //健壮性考虑\n        if (capacity &lt;= 0)\n            throw new IllegalArgumentException();\n                //初始化底层数组\n        this.items = new Object[capacity];\n                //初始化锁 和  等待队列\n        lock = new ReentrantLock(fair);\n        notEmpty = lock.newCondition();\n        notFull =  lock.newCondition();\n    &#125;\n        \n        //两个基本方法：一个是入队，一个是出队  ，是其他方法的基础：\n        //入队：\n        private void enqueue(E x) &#123;\n        // assert lock.getHoldCount() == 1;\n        // assert items[putIndex] == null;\n        final Object[] items = this.items;//底层数组赋给items\n                //在对应的下标位置放入元素\n        items[putIndex] = x;\n        if (++putIndex == items.length) //++putIndex putIndex 索引 加1 \n            putIndex = 0;\n                //每放入一个元素，count加1操作\n        count++;\n        notEmpty.signal();\n    &#125;\n        \n        \n        //出队：\n        private E dequeue() &#123;\n        // assert lock.getHoldCount() == 1;\n        // assert items[takeIndex] != null;\n        final Object[] items = this.items;//底层数组赋给items\n        @SuppressWarnings(&quot;unchecked&quot;)\n        E x = (E) items[takeIndex];//在对应的位置取出元素\n        items[takeIndex] = null;//对应位置元素取出后就置为null\n        if (++takeIndex == items.length)//++takeIndex 加1操作\n            takeIndex = 0;\n        count--;//每取出一个元素，count减1操作\n        if (itrs != null)\n            itrs.elementDequeued();\n        notFull.signal();\n        return x;//将取出的元素作为方法的返回值\n    &#125;       \n&#125;\n</code></pre>\n<p>takeIndex和putIndex置为0的原因：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182045354.png\" class=\"\">\n\n\n<p>【4】其他的添加或者获取的方法都是依托与这个入队和出队的基础方法</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182053419.png\" class=\"\">\n\n\n<p>【5】感受一下put和take的阻塞：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182101129.png\" class=\"\">\n\n\n<p>上面的while不可以换为if，因为如果notFull中的线程被激活的瞬间，有其他线程放入元素，那么队列就又满了<br>那么沿着await后面继续执行就不可以，所以一定要反复确定队列是否满的，才能放入元素</p>\n<div name=queue_impl2>\n\n\n\n<blockquote>\n<p>LinkedBlockingQueue</p>\n</blockquote>\n<p>一个可选择的有边界的队列：意思就是队列的长度可以指定，也可以不指定</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182251224.png\" class=\"\">\n\n\n<p>【1】添加元素：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) throws InterruptedException &#123;\n        //创建一个队列，队列可以指定容量指定长度3：\n        LinkedBlockingQueue aq = new LinkedBlockingQueue(3);\n        //添加元素：\n        //【1】添加null元素：不可以添加null元素，会报空指针异常：NullPointerException\n        //aq.add(null);\n        //aq.offer(null);\n        aq.put(null);\n        //【2】正常添加元素：\n        aq.add(&quot;aaa&quot;);\n        aq.offer(&quot;bbb&quot;);\n        aq.put(&quot;ccc&quot;);\n        System.out.println(aq);//[aaa, bbb, ccc]\n        //【3】在队列满的情况下，再添加元素：\n        //aq.add(&quot;ddd&quot;);//在队列满的情况下，添加元素 出现异常：Queue full\n        //System.out.println(aq.offer(&quot;ddd&quot;));//没有添加成功，返回false\n        //设置最大阻塞时间，如果时间到了，队列还是满的，就不再阻塞了\n        //aq.offer(&quot;ddd&quot;,2, TimeUnit.SECONDS);\n        //真正阻塞的方法： put ,如果队列满，就永远阻塞\n        aq.put(&quot;ddd&quot;);\n        System.out.println(aq);\n    &#125;\n&#125;\n</code></pre>\n<p>【2】取出元素：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) throws InterruptedException &#123;\n        //创建一个队列，队列可以指定容量指定长度3：\n        LinkedBlockingQueue aq = new LinkedBlockingQueue();\n        aq.add(&quot;aaa&quot;);\n        aq.add(&quot;bbb&quot;);\n        aq.add(&quot;ccc&quot;);\n        //得到头元素但是不移除\n        System.out.println(aq.peek());\n        System.out.println(aq);\n        //得到头元素并且移除\n        System.out.println(aq.poll());\n        System.out.println(aq);\n        //得到头元素并且移除\n        System.out.println(aq.take());\n        System.out.println(aq);\n        //清空元素：\n        aq.clear();\n        System.out.println(aq);\n        System.out.println(aq.peek());//null\n        System.out.println(aq.poll());//null\n        //设置阻塞事件，如果队列为空，返回null，时间到了以后就不阻塞了\n        //System.out.println(aq.poll(2, TimeUnit.SECONDS));\n        //真正阻塞：队列为空，永远阻塞\n        System.out.println(aq.take());\n    &#125;\n&#125;\n</code></pre>\n<p>【3】特点：<br>ArrayBlockingQueue ： 不支持读写同时操作，底层基于数组的。<br>LinkedBlockingQueue：支持读写同时操作，并发情况下，效率高。底层基于链表。</p>\n<p>【4】源码：<br>入队操作：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182330212.png\" class=\"\">\n\n\n<p>出队操作：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182341368.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class LinkedBlockingQueue&lt;E&gt;&#123;\n        //内部类Node就是链表的节点的对象对应的类：\n        static class Node&lt;E&gt; &#123;\n        E item;//封装你要装的那个元素\n        \n        Node&lt;E&gt; next;//下一个Node节点的地址\n        Node(E x) &#123; item = x; &#125;//构造器\n    &#125;\n        //链表的长度\n        private final int capacity;\n        //计数器：\n        private final AtomicInteger count = new AtomicInteger();\n        //链表的头结点\n        transient Node&lt;E&gt; head;\n        //链表的尾结点\n        private transient Node&lt;E&gt; last;\n        //取元素用的锁\n        private final ReentrantLock takeLock = new ReentrantLock();\n        //等待池\n    private final Condition notEmpty = takeLock.newCondition();\n    //放元素用的锁\n    private final ReentrantLock putLock = new ReentrantLock();\n    //等待池\n    private final Condition notFull = putLock.newCondition();\n        \n        public LinkedBlockingQueue() &#123;\n        this(Integer.MAX_VALUE);//调用类本类的空构造器，传入正21亿\n    &#125;\n        \n        public LinkedBlockingQueue(int capacity) &#123;\n                //健壮性考虑\n        if (capacity &lt;= 0) throw new IllegalArgumentException();\n                //给队列指定长度  \n        this.capacity = capacity;\n                //last，head指向一个新的节点，新的节点中 元素为null \n        last = head = new Node&lt;E&gt;(null);\n    &#125;\n        \n        \n        //入队：\n        private void enqueue(Node&lt;E&gt; node) &#123;\n        last = last.next = node;\n    &#125;\n        \n        //出队：\n        private E dequeue() &#123;\n        Node&lt;E&gt; h = head;//h指向了head\n        Node&lt;E&gt; first = h.next;//first 指向head的next\n        h.next = h; // help GC   h.next指向自己，更容易被GC发现 被GC\n        head = first;//head的指向指为first\n        E x = first.item;//取出链中第一个元素，给了x\n        first.item = null;\n        return x;//把x作为方法的返回值\n    &#125;\n&#125;\n</code></pre>\n<p>【5】put的阻塞：</p>\n<p>阻塞的前提是  队列是固定长度的</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182407325.png\" class=\"\">\n\n\n\n\n<div name=queue_impl3>\n\n\n\n<blockquote>\n<p>SynchronousQueue</p>\n</blockquote>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182455703.png\" class=\"\">\n\n\n<p>这个特殊的队列设计的意义：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182515070.png\" class=\"\">\n\n\n<p>测试1：先添加元素：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        SynchronousQueue sq = new SynchronousQueue();\n        sq.add(&quot;aaa&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>直接报错：说队列满了，因为队列没有容量，理解为满也是正常的：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182535474.png\" class=\"\">\n\n\n<p>测试2：put方法  阻塞：队列是空的，可以理解为队列满了，满的话放入元素 put 一定会阻塞：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) throws InterruptedException &#123;\n        SynchronousQueue sq = new SynchronousQueue();\n        sq.put(&quot;aaa&quot;);\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182600030.png\" class=\"\">\n\n\n<p>测试3：先取  再放：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        SynchronousQueue sq = new SynchronousQueue();\n        //创建一个线程，取数据：\n        new Thread(new Runnable() &#123;\n            @Override\n            public void run() &#123;\n                while(true)&#123;\n                    try &#123;\n                        System.out.println(sq.take());\n                    &#125; catch (InterruptedException e) &#123;\n                        e.printStackTrace();\n                    &#125;\n                &#125;\n            &#125;\n        &#125;).start();\n        //搞一个线程，往里面放数据：\n        new Thread(new Runnable() &#123;\n            @Override\n            public void run() &#123;\n                try &#123;\n                    sq.put(&quot;aaa&quot;);\n                    sq.put(&quot;bbb&quot;);\n                    sq.put(&quot;ccc&quot;);\n                    sq.put(&quot;ddd&quot;);\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n        &#125;).start();\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182625271.png\" class=\"\">\n\n\n<p>测试4：poll方法：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        SynchronousQueue sq = new SynchronousQueue();\n        //创建一个线程，取数据：\n        new Thread(new Runnable() &#123;\n            @Override\n            public void run() &#123;\n                while(true)&#123;\n                    try &#123;\n                        //设置一个阻塞事件：超出事件就不阻塞了\n                        Object result = sq.poll(5, TimeUnit.SECONDS);\n                        System.out.println(result);\n                        if(result == null)&#123;\n                            break;\n                        &#125;\n                    &#125; catch (InterruptedException e) &#123;\n                        e.printStackTrace();\n                    &#125;\n                &#125;\n            &#125;\n        &#125;).start();\n        //搞一个线程，往里面放数据：\n        new Thread(new Runnable() &#123;\n            @Override\n            public void run() &#123;\n                try &#123;\n                    sq.put(&quot;aaa&quot;);\n                    sq.put(&quot;bbb&quot;);\n                    sq.put(&quot;ccc&quot;);\n                    sq.put(&quot;ddd&quot;);\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n        &#125;).start();\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182647289.png\" class=\"\">\n\n\n<p>注意：取出元素 不能用peek，因为peek不会将元素从队列中拿走，只是查看的效果；</p>\n<div name=queue_impl4>\n\n\n\n<blockquote>\n<p>PriorityBlockingQueue</p>\n</blockquote>\n<p>带有优先级的阻塞队列。<br>优先级队列，意味着队列有先后顺序的，数据有不同的权重。</p>\n<p>无界的队列，没有长度限制，但是在你不指定长度的时候，默认初始长度为11，也可以手动指定，<br>当然随着数据不断的加入，底层（底层是数组Object[]）会自动扩容，直到内存全部消耗殆尽了，导致 OutOfMemoryError内存溢出 程序才会结束。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183001941.png\" class=\"\">\n\n\n<p>不可以放入null元素的，不允许放入不可比较的对象（导致抛出ClassCastException），对象必须实现内部比较器或者外部比较器。</p>\n<p>测试1：添加null数据：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        PriorityBlockingQueue pq = new PriorityBlockingQueue();\n        pq.put(null);\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183016134.png\" class=\"\">\n\n\n<p>测试2：添加四个数据：</p>\n<pre><code class=\"java\">public class Student implements Comparable&lt;Student&gt; &#123;\n    String name;\n    int age;\n    public Student() &#123;\n    &#125;\n    public Student(String name, int age) &#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n                &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, age=&quot; + age +\n                &#39;&#125;&#39;;\n    &#125;\n    @Override\n    public int compareTo(Student o) &#123;\n        return this.age - o.age;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        PriorityBlockingQueue&lt;Student&gt; pq = new PriorityBlockingQueue&lt;&gt;();\n        pq.put(new Student(&quot;nana&quot;,18));\n        pq.put(new Student(&quot;lulu&quot;,11));\n        pq.put(new Student(&quot;feifei&quot;,6));\n        pq.put(new Student(&quot;mingming&quot;,21));\n        System.out.println(pq);\n    &#125;\n&#125;\n</code></pre>\n<p>结果</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183048547.png\" class=\"\">\n\n\n<p>发现结果并没有按照优先级顺序排列</p>\n<p>测试3：取出数据：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) throws InterruptedException &#123;\n        PriorityBlockingQueue&lt;Student&gt; pq = new PriorityBlockingQueue&lt;&gt;();\n        pq.put(new Student(&quot;nana&quot;,18));\n        pq.put(new Student(&quot;lulu&quot;,11));\n        pq.put(new Student(&quot;feifei&quot;,6));\n        pq.put(new Student(&quot;mingming&quot;,21));\n        System.out.println(&quot;------------------------------------------&quot;);\n        System.out.println(pq.take());\n        System.out.println(pq.take());\n        System.out.println(pq.take());\n        System.out.println(pq.take());\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183114429.png\" class=\"\">\n\n\n<p>从结果证明，这个优先级队列，并不是在put数据的时候计算谁在前谁在后<br>而是取数据的时候，才真正判断谁在前 谁在后</p>\n<p>优先级 –》取数据的优先级</p>\n<div name=queue_impl5>\n\n\n\n<blockquote>\n<p>DelayQueue</p>\n</blockquote>\n<p>一、DelayQueue是什么<br>DelayQueue是一个无界的BlockingQueue，用于放置实现了Delayed接口的对象，其中的对象只能在其到期时才能从队列中取走。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183216715.png\" class=\"\">\n\n\n<p>​\t 当生产者线程调用put之类的方法加入元素时，会触发Delayed接口中的compareTo方法进行排序，也就是说队列中元素的顺序是按到期时间排序的，而非它们进入队列的顺序。排在队列头部的元素是最早到期的，越往后到期时间赿晚。</p>\n<p>消费者线程查看队列头部的元素，注意是查看不是取出。然后调用元素的getDelay方法，如果此方法返回的值小０或者等于０，则消费者线程会从队列中取出此元素，并进行处理。如果getDelay方法返回的值大于0，则消费者线程wait返回的时间值后，再从队列头部取出元素，此时元素应该已经到期。</p>\n<p>​\t注意：不能将null元素放置到这种队列中。</p>\n<p>二、DelayQueue能做什么</p>\n<ol>\n<li><p>淘宝订单业务:下单之后如果三十分钟之内没有付款就自动取消订单。</p>\n</li>\n<li><p>饿了吗订餐通知:下单成功后60s之后给用户发送短信通知。</p>\n</li>\n<li><p>关闭空闲连接。服务器中，有很多客户端的连接，空闲一段时间之后需要关闭之。</p>\n</li>\n<li><p>缓存。缓存中的对象，超过了空闲时间，需要从缓存中移出。</p>\n</li>\n<li><p>任务超时处理。在网络协议滑动窗口请求应答式交互时，处理超时未响应的请求等。</p>\n</li>\n</ol>\n<p>案例：</p>\n<pre><code class=\"java\">public class User implements Delayed &#123;\n    private int id;//用户id\n    private String name;//用户名字\n    private long endTime;//结束时间\n    public int getId() &#123;\n        return id;\n    &#125;\n    public void setId(int id) &#123;\n        this.id = id;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public long getEndTime() &#123;\n        return endTime;\n    &#125;\n    public void setEndTime(long endTime) &#123;\n        this.endTime = endTime;\n    &#125;\n    public User(int id, String name, long endTime) &#123;\n        this.id = id;\n        this.name = name;\n        this.endTime = endTime;\n    &#125;\n    //只包装用户名字就可以\n    @Override\n    public String toString() &#123;\n        return &quot;User&#123;&quot; +\n                &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &#39;&#125;&#39;;\n    &#125;\n    @Override\n    public long getDelay(TimeUnit unit) &#123;\n        //计算剩余时间 剩余时间小于0 &lt;=0  证明已经到期\n        return this.getEndTime() - System.currentTimeMillis();\n    &#125;\n    @Override\n    public int compareTo(Delayed o) &#123;\n        //队列中数据 到期时间的比较\n        User other = (User)o;\n        return ((Long)(this.getEndTime())).compareTo((Long)(other.getEndTime()));\n    &#125;\n&#125;\n</code></pre>\n<p>compareTo：看谁先被移除<br>getDelay ：看剩余时间</p>\n<pre><code class=\"java\">public class TestDelayQueue &#123;\n    //创建一个队列：\n    DelayQueue&lt;User&gt; dq = new DelayQueue&lt;&gt;();\n    //登录游戏：\n    public void login(User user)&#123;\n        dq.add(user);\n        System.out.println(&quot;用户：[&quot; + user.getId() +&quot;],[&quot; + user.getName() + &quot;]已经登录，预计下机时间为：&quot; + user.getEndTime() );\n    &#125;\n    //时间到，退出游戏，队列中移除：\n    public void logout()&#123;\n        //打印队列中剩余的人：\n        System.out.println(dq);\n        try &#123;\n            User user = dq.take();\n            System.out.println(&quot;用户：[&quot; + user.getId() +&quot;],[&quot; + user.getName() + &quot;]上机时间到，自动退出游戏&quot;);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n    //获取在线人数：\n    public int onlineSize()&#123;\n        return dq.size();\n    &#125;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建测试类对象：\n        TestDelayQueue test = new TestDelayQueue();\n        //添加登录的用户：\n        test.login(new User(1,&quot;张三&quot;,System.currentTimeMillis()+5000));\n        test.login(new User(2,&quot;李四&quot;,System.currentTimeMillis()+2000));\n        test.login(new User(3,&quot;王五&quot;,System.currentTimeMillis()+10000));\n        //一直监控\n        while(true)&#123;\n            //到期的话，就自动下线：\n            test.logout();\n            //队列中元素都被移除了的话，那么停止监控，停止程序即可\n            if(test.onlineSize() == 0)&#123;\n                break;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183342855.png\" class=\"\">\n\n\n\n\n\n\n<h3 id=\"双端队列Deque\"><a href=\"#双端队列Deque\" class=\"headerlink\" title=\"双端队列Deque\"></a>双端队列Deque</h3><pre><code class=\"java\">public class Test03 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        /*\n        双端队列：\n        Deque&lt;E&gt; extends Queue\n        Queue一端放 一端取的基本方法  Deque是具备的\n        在此基础上 又扩展了 一些 头尾操作（添加，删除，获取）的方法\n         */\n        Deque&lt;String&gt; d = new LinkedList&lt;&gt;() ;\n        d.offer(&quot;A&quot;);\n        d.offer(&quot;B&quot;);\n        d.offer(&quot;C&quot;);\n        System.out.println(d);//[A, B, C]\n        d.offerFirst(&quot;D&quot;);\n        d.offerLast(&quot;E&quot;);\n        System.out.println(d);//[D, A, B, C, E]\n        System.out.println(d.poll());\n        System.out.println(d);//[A, B, C, E]\n        System.out.println(d.pollFirst());\n        System.out.println(d.pollLast());\n        System.out.println(d);\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/",
            "title": "第12章IO",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"12-IO流\"><a href=\"#12-IO流\" class=\"headerlink\" title=\"12 IO流\"></a>12 IO流</h1><h1 id=\"File类\"><a href=\"#File类\" class=\"headerlink\" title=\"File类\"></a>File类</h1><h2 id=\"1-对文件进行操作\"><a href=\"#1-对文件进行操作\" class=\"headerlink\" title=\"1 对文件进行操作\"></a>1 对文件进行操作</h2><pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //将文件封装为一个File类的对象：\n        File f = new File(&quot;d:\\\\test.txt&quot;);\n        File f1 = new File(&quot;d:\\\\test.txt&quot;);\n        File f2 = new File(&quot;d:/test.txt&quot;);\n        //File.separator属性帮我们获取当前操作系统的路径拼接符号\n       //在windows，dos下，系统默认用“\\”作为路径分隔符 ，在unix，url中，使用“/”作为路径分隔符。\n        File f3 = new File(&quot;d:&quot;+File.separator+&quot;test.txt&quot;);//建议使用这种\n        //常用方法：\n        System.out.println(&quot;文件是否可读：&quot;+f.canRead());\n        System.out.println(&quot;文件是否可写：&quot;+f.canWrite());\n        System.out.println(&quot;文件的名字：&quot;+f.getName());\n        System.out.println(&quot;上级目录：&quot;+f.getParent());\n        System.out.println(&quot;是否是一个目录：&quot;+f.isDirectory());\n        System.out.println(&quot;是否是一个文件：&quot;+f.isFile());\n        System.out.println(&quot;是否隐藏：&quot;+f.isHidden());\n        System.out.println(&quot;文件的大小：&quot;+f.length());\n        System.out.println(&quot;是否存在：&quot;+f.exists());\n        /*if(f.exists())&#123;//如果文件存在，将文件删除操作\n            f.delete();\n        &#125;else&#123;//如果不存在，就创建这个文件\n            f.createNewFile();\n        &#125;*/\n        System.out.println(f == f1);//比较两个对象的地址\n        System.out.println(f.equals(f1));//比较两个对象对应的文件的路径\n        //跟路径相关的：\n        System.out.println(&quot;绝对路径：&quot;+f.getAbsolutePath());\n        System.out.println(&quot;相对路径：&quot;+f.getPath());\n        System.out.println(&quot;toString:&quot;+f.toString());\n        System.out.println(&quot;----------------------&quot;);\n        File f5 = new File(&quot;demo.txt&quot;);\n        if(!f5.exists())&#123;\n            f5.createNewFile();\n        &#125;\n        //绝对路径指的就是：真实的一个精准的，完整的路径\n        System.out.println(&quot;绝对路径：&quot;+f5.getAbsolutePath());\n        //相对路径：有一个参照物，相对这个参照物的路径。\n        //在main方法中，相对位置指的就是：D:\\IDEA_workspace\\TestJavaSE\n        //在junit的测试方法中，相对路径指的就是模块位置\n        System.out.println(&quot;相对路径：&quot;+f5.getPath());\n        //toString的效果永远是  相对路径\n        System.out.println(&quot;toString:&quot;+f5.toString());\n        File f6 = new File(&quot;a/b/c/demo.txt&quot;);\n        if(!f5.exists())&#123;\n            f5.createNewFile();\n        &#125;\n        System.out.println(&quot;绝对路径：&quot;+f6.getAbsolutePath());\n        System.out.println(&quot;相对路径：&quot;+f6.getPath());\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"2-对目录进行操作\"><a href=\"#2-对目录进行操作\" class=\"headerlink\" title=\"2 对目录进行操作\"></a>2 对目录进行操作</h2><pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //将目录封装为File类的对象：\n        File f = new File(&quot;D:\\\\IDEA_workspace&quot;);\n        System.out.println(&quot;文件是否可读：&quot;+f.canRead());\n        System.out.println(&quot;文件是否可写：&quot;+f.canWrite());\n        System.out.println(&quot;文件的名字：&quot;+f.getName());\n        System.out.println(&quot;上级目录：&quot;+f.getParent());\n        System.out.println(&quot;是否是一个目录：&quot;+f.isDirectory());\n        System.out.println(&quot;是否是一个文件：&quot;+f.isFile());\n        System.out.println(&quot;是否隐藏：&quot;+f.isHidden());\n        System.out.println(&quot;文件的大小：&quot;+f.length());\n        System.out.println(&quot;是否存在：&quot;+f.exists());\n        System.out.println(&quot;绝对路径：&quot;+f.getAbsolutePath());\n        System.out.println(&quot;相对路径：&quot;+f.getPath());\n        System.out.println(&quot;toString:&quot;+f.toString());\n        //跟目录相关的方法：\n        File f2 = new File(&quot;D:\\\\a\\\\b\\\\c&quot;);\n        //创建目录：\n        //f2.mkdir();//创建单层目录\n        //f2.mkdirs();//创建多层目录\n        //删除：如果是删除目录的话，只会删除一层，并且前提：这层目录是空的，里面没有内容，如果内容就不会被删除\n        f2.delete();\n        //查看：\n        String[] list = f.list();//文件夹下目录/文件对应的名字的数组\n        for(String s:list)&#123;\n            System.out.println(s);\n        &#125;\n        System.out.println(&quot;=========================&quot;);\n        File[] files = f.listFiles();//作用更加广泛\n        for(File file:files)&#123;\n            System.out.println(file.getName()+&quot;,&quot;+file.getAbsolutePath());\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h1><h2 id=\"1-引入\"><a href=\"#1-引入\" class=\"headerlink\" title=\"1 引入\"></a>1 引入</h2><p>【1】File类：封装文件&#x2F;目录的各种信息，对目录&#x2F;文件进行操作，但是我们不可以获取到文件&#x2F;目录中的内容。<br>【2】引入：IO流：<br>I&#x2F;O ： Input&#x2F;Output的缩写，用于处理设备之间的数据的传输。<br>【3】形象理解：IO流 当做一根 “管”：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618184436805.png\" class=\"\">\n\n\n\n\n\n<p>【4】IO流的体系结构：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618184443031.png\" class=\"\">\n\n\n\n\n\n\n<h2 id=\"2-案例：通过java程序完成文件的复制操作\"><a href=\"#2-案例：通过java程序完成文件的复制操作\" class=\"headerlink\" title=\"2 案例：通过java程序完成文件的复制操作\"></a>2 案例：通过java程序完成文件的复制操作</h2><h3 id=\"功能分解1：文件–》程序：FileReader\"><a href=\"#功能分解1：文件–》程序：FileReader\" class=\"headerlink\" title=\"功能分解1：文件–》程序：FileReader\"></a>功能分解1：文件–》程序：FileReader</h3><p>一个字符一个字符的将文件中的内容读取到程序中了：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //文件--》程序：\n        //1.有一个文件：----》创建一个File类的对象\n        File f = new File(&quot;d:\\\\Test.txt&quot;);\n        //2.利用FileReader这个流，这个“管”怼到源文件上去   ---》创建一个FileReader的流的对象\n        FileReader fr = new FileReader(f);\n        //3.进行操作“吸”的动作  ---》读取动作\n        /*下面的代码我们验证了：如果到了文件的结尾处，那么读取的内容为-1\n        int n1 = fr.read();\n        int n2 = fr.read();\n        int n3 = fr.read();\n        int n4 = fr.read();\n        int n5 = fr.read();\n        int n6 = fr.read();\n        System.out.println(n1);\n        System.out.println(n2);\n        System.out.println(n3);\n        System.out.println(n4);\n        System.out.println(n5);\n        System.out.println(n6);*/\n        //方式1：\n        /*int n = fr.read();\n        while(n!=-1)&#123;\n            System.out.println(n);\n            n = fr.read();\n        &#125;*/\n        //方式2：\n        int n;\n        while((n = fr.read())!=-1)&#123;\n            System.out.println((char)n);\n        &#125;\n        //4.“管”不用了，就要关闭  ---》关闭流\n        //流，数据库，网络资源，靠jvm本身没有办法帮我们关闭，此时必须程序员手动关闭：\n        fr.close();\n    &#125;\n&#125;\n</code></pre>\n<p>想一次性读取五个字符，不够的话下次再读五个字符：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //文件--》程序：\n        //1.创建一个File类的对象\n        File f = new File(&quot;d:\\\\Test.txt&quot;);\n        //2.创建一个FileReader的流的对象\n        FileReader fr = new FileReader(f);\n        //3.读取动作\n        //引入一个“快递员的小车”，这个“小车”一次拉5个快递：\n        char[] ch = new char[5];//缓冲数组\n        int len = fr.read(ch);//一次读取五个:返回值是这个数组中 的有效长度\n        while(len!=-1)&#123;\n            //System.out.println(len);\n            //错误方式：\n            /*for (int i = 0 ;i &lt; ch.length;i++)&#123;\n                System.out.println(ch[i]);\n            &#125;*/\n            //正确方式：\n            /*for (int i = 0 ;i &lt; len;i++)&#123;\n                System.out.println(ch[i]);\n            &#125;*/\n            //正确方式2：将数组转为String：\n            String str = new String(ch,0,len);\n            System.out.print(str);\n            len = fr.read(ch);\n        &#125;\n        //4.关闭流\n        fr.close();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"功能分解2：程序–》文件：FileWriter\"><a href=\"#功能分解2：程序–》文件：FileWriter\" class=\"headerlink\" title=\"功能分解2：程序–》文件：FileWriter\"></a>功能分解2：程序–》文件：FileWriter</h3><p>一个字符一个字符的向外输出：</p>\n<pre><code class=\"java\">public class Test03 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.有个目标文件：\n        File f = new File(&quot;d:\\\\demo.txt&quot;);\n        //2.FileWriter管怼到文件上去：\n        FileWriter fw = new FileWriter(f);\n        //3.开始动作：输出动作：\n        //一个字符一个字符的往外输出：\n        String str = &quot;hello你好&quot;;\n        for (int i = 0 ;i &lt; str.length();i++)&#123;\n            fw.write(str.charAt(i));\n        &#125;\n        //4.关闭流：\n        fw.close();\n    &#125;\n&#125;\n</code></pre>\n<p>发现：<br>如果目标文件不存在的话，那么会自动创建此文件。<br>如果目标文件存在的话：<br>new FileWriter(f)   相当于对原文件进行覆盖操作。<br>new FileWriter(f,false)  相当于对源文件进行覆盖操作。不是追加。<br>new FileWriter(f,true)   对原来的文件进行追加，而不是覆盖。</p>\n<p><strong>利用缓冲数组：向外输出（利用缓冲数组：）</strong></p>\n<pre><code class=\"java\">public class Test03 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.有个目标文件：\n        File f = new File(&quot;d:\\\\demo.txt&quot;);\n        //2.FileWriter管怼到文件上去：\n        FileWriter fw = new FileWriter(f,true);\n        //3.开始动作：输出动作：\n        //一个字符一个字符的往外输出：\n        String str = &quot;你好中国&quot;;\n        char[] chars = str.toCharArray();\n        fw.write(chars);\n        //4.关闭流：\n        fw.close();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"功能分解3：利用FileReader，FileWriter文件复制\"><a href=\"#功能分解3：利用FileReader，FileWriter文件复制\" class=\"headerlink\" title=\"功能分解3：利用FileReader，FileWriter文件复制\"></a>功能分解3：利用FileReader，FileWriter文件复制</h3><pre><code class=\"java\">public class Test04 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.有一个源文件\n        File f1 = new File(&quot;d:\\\\Test.txt&quot;);\n        //2.有一个目标文件：\n        File f2 = new File(&quot;d:\\\\Demo.txt&quot;);\n        //3.搞一个输入的管 怼到源文件上：\n        FileReader fr = new FileReader(f1);\n        //4.搞一个输出的管，怼到目标文件上：\n        FileWriter fw = new FileWriter(f2);\n        //5.开始动作：\n        //方式1：一个字符一个字符的复制：\n        /*int n = fr.read();\n        while(n!=-1)&#123;\n            fw.write(n);\n            n = fr.read();\n        &#125;*/\n        //方式2：利用缓冲字符数组：\n        /*char[] ch = new char[5];\n        int len = fr.read(ch);\n        while(len!=-1)&#123;\n            fw.write(ch,0,len);//将缓冲数组中有效长度写出\n            len = fr.read(ch);\n        &#125;*/\n        //方式3：利用缓冲字符数组，将数组转为String写出。\n        char[] ch = new char[5];\n        int len = fr.read(ch);\n        while(len!=-1)&#123;\n            String s = new String(ch,0,len);\n            fw.write(s);\n            len = fr.read(ch);\n        &#125;\n        //6.关闭流：(关闭流的时候，倒着关闭，后用先关)\n        fw.close();\n        fr.close();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-警告：不要用字符流去操作非文本文件\"><a href=\"#3-警告：不要用字符流去操作非文本文件\" class=\"headerlink\" title=\"3 警告：不要用字符流去操作非文本文件\"></a>3 警告：不要用字符流去操作非文本文件</h2><p>文本文件：.txt   .java  .c  .cpp  —》建议使用字符流操作<br>非文本文件：.jpg,  .mp3  ,   .mp4 , .doc  , .ppt  —》建议使用字节流操作</p>\n<h2 id=\"4-用try-catch-finally处理异常方式\"><a href=\"#4-用try-catch-finally处理异常方式\" class=\"headerlink\" title=\"4 用try-catch-finally处理异常方式\"></a>4 用try-catch-finally处理异常方式</h2><pre><code class=\"java\">public class Test04 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args)  &#123;\n        //1.有一个源文件\n        File f1 = new File(&quot;d:\\\\Test.txt&quot;);\n        //2.有一个目标文件：\n        File f2 = new File(&quot;d:\\\\Demo.txt&quot;);\n        //3.搞一个输入的管 怼到源文件上：\n        FileReader fr = null;\n        FileWriter fw = null;\n        try &#123;\n            fr = new FileReader(f1);\n            //4.搞一个输出的管，怼到目标文件上：\n            fw = new FileWriter(f2);\n            //5.开始动作：\n            char[] ch = new char[5];\n            int len = fr.read(ch);\n            while(len!=-1)&#123;\n                String s = new String(ch,0,len);\n                fw.write(s);\n                len = fr.read(ch);\n            &#125;\n        &#125; catch (FileNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //6.关闭流：(关闭流的时候，倒着关闭，后用先关)\n            try &#123;\n                if(fw!=null)&#123;//防止空指针异常\n                    fw.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(fr!=null)&#123;\n                    fr.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"5-FileInputStream读取文件中内容\"><a href=\"#5-FileInputStream读取文件中内容\" class=\"headerlink\" title=\"5 FileInputStream读取文件中内容\"></a>5 FileInputStream读取文件中内容</h2><p>【1】读取文本文件：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //功能：利用字节流将文件中内容读到程序中来：\n        //1.有一个源文件：\n        File f = new File(&quot;D:\\\\Test.txt&quot;);\n        //2.将一个字节流这个管 怼  到 源文件上：\n        FileInputStream fis = new FileInputStream(f);\n        //3.开始读取动作\n        /*\n        细节1：\n        文件是utf-8进行存储的，所以英文字符 底层实际占用1个字节\n        但是中文字符，底层实际占用3个字节。\n        细节2：\n        如果文件是文本文件，那么就不要使用字节流读取了，建议使用字符流。\n        细节3：\n        read()读取一个字节，但是你有没有发现返回值是 int类型，而不是byte类型？\n        read方法底层做了处理，让返回的数据都是“正数”\n        就是为了避免如果字节返回的是-1的话，那到底是读入的字节，还是到文件结尾呢。\n         */\n        int n = fis.read();\n        while(n!=-1)&#123;\n            System.out.println(n);\n            n = fis.read();\n        &#125;\n        //4.关闭流：\n        fis.close();\n    &#125;\n&#125;\n</code></pre>\n<p>【2】利用字节流读取非文本文件：（以图片为案例：）–》一个字节一个字节的读取：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //功能：利用字节流将文件中内容读到程序中来：\n        //1.有一个源文件：\n        File f = new File(&quot;D:\\\\LOL.jpg&quot;);\n        //2.将一个字节流这个管 怼  到 源文件上：\n        FileInputStream fis = new FileInputStream(f);\n        //3.开始读取动作\n        int count = 0;//定义一个计数器，用来计读入的字节的个数\n        int n = fis.read();\n        while(n!=-1)&#123;\n            count++;\n            System.out.println(n);\n            n = fis.read();\n        &#125;\n        System.out.println(&quot;count=&quot;+count);\n        //4.关闭流：\n        fis.close();\n    &#125;\n&#125;\n</code></pre>\n<p>【3】利用字节类型的缓冲数组：</p>\n<pre><code class=\"java\">public class Test03 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //功能：利用字节流将文件中内容读到程序中来：\n        //1.有一个源文件：\n        File f = new File(&quot;D:\\\\LOL.jpg&quot;);\n        //2.将一个字节流这个管 怼  到 源文件上：\n        FileInputStream fis = new FileInputStream(f);\n        //3.开始读取动作\n        //利用缓冲数组：（快递员的小车）\n        byte[] b = new byte[1024*6];\n        int len = fis.read(b);//len指的就是读取的数组中的有效长度\n        while(len!=-1)&#123;\n            //System.out.println(len);\n            for(int i = 0;i&lt;len;i++)&#123;\n                System.out.println(b[i]);\n            &#125;\n            len = fis.read(b);\n        &#125;\n        //4.关闭流：\n        fis.close();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"6-FileInputStream-FileOutputStream完成非文本文件的复制\"><a href=\"#6-FileInputStream-FileOutputStream完成非文本文件的复制\" class=\"headerlink\" title=\"6 FileInputStream,FileOutputStream完成非文本文件的复制\"></a>6 FileInputStream,FileOutputStream完成非文本文件的复制</h2><p>【1】读入一个字节，写出一个字节：</p>\n<pre><code class=\"java\">public class Test04 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //功能：完成图片的复制：\n        //1.有一个源图片\n        File f1 = new File(&quot;d:\\\\LOL.jpg&quot;);\n        //2.有一个目标图片：\n        File f2 = new File(&quot;d:\\\\LOL2.jpg&quot;);\n        //3.有一个输入的管道 怼 到 源文件：\n        FileInputStream fis = new FileInputStream(f1);\n        //4.有一个输出的管道 怼到  目标文件上：\n        FileOutputStream fos = new FileOutputStream(f2);\n        //5.开始复制：（边读边写）\n        int n = fis.read();\n        while(n!=-1)&#123;\n            fos.write(n);\n            n = fis.read();\n        &#125;\n        //6.关闭流：(倒着关闭流，先用后关)\n        fos.close();\n        fis.close();\n    &#125;\n&#125;\n</code></pre>\n<p>【2】利用缓冲字节数组：</p>\n<pre><code class=\"java\">public class Test05 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //功能：完成图片的复制：\n        //1.有一个源图片\n        File f1 = new File(&quot;d:\\\\LOL.jpg&quot;);\n        //2.有一个目标图片：\n        File f2 = new File(&quot;d:\\\\LOL2.jpg&quot;);\n        //3.有一个输入的管道 怼 到 源文件：\n        FileInputStream fis = new FileInputStream(f1);\n        //4.有一个输出的管道 怼到  目标文件上：\n        FileOutputStream fos = new FileOutputStream(f2);\n        //5.开始复制：（边读边写）\n        //利用缓冲数组：\n        byte[] b = new byte[1024*8];\n        int len = fis.read(b);\n        while(len!=-1)&#123;\n            fos.write(b,0,len);\n            len = fis.read(b);\n        &#125;\n        //6.关闭流：(倒着关闭流，先用后关)\n        fos.close();\n        fis.close();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"7-缓冲字节流-处理流-BufferedInputStream-BufferedOutputStream\"><a href=\"#7-缓冲字节流-处理流-BufferedInputStream-BufferedOutputStream\" class=\"headerlink\" title=\"7 缓冲字节流(处理流)-BufferedInputStream ,BufferedOutputStream\"></a>7 缓冲字节流(处理流)-BufferedInputStream ,BufferedOutputStream</h2><p>【1】读入一个字节，写出一个字节：</p>\n<p>【2】利用缓冲字节数组：</p>\n<p>【3】利用缓冲区：</p>\n<p>想要完成上面的效果，单纯的靠FileInputStream,FileOutputStream是不可以完成的，这个时候就需要功能的加强，<br>这个加强就需要引入新的流（在FileInputStream,FileOutputStream外面再套一层流）：BufferedInputStream ,BufferedOutputStream. —–&gt;处理流</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class Test06 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.有一个源图片\n        File f1 = new File(&quot;d:\\\\LOL.jpg&quot;);\n        //2.有一个目标图片：\n        File f2 = new File(&quot;d:\\\\LOL2.jpg&quot;);\n        //3.有一个输入的管道 怼 到 源文件：\n        FileInputStream fis = new FileInputStream(f1);\n        //4.有一个输出的管道 怼到  目标文件上：\n        FileOutputStream fos = new FileOutputStream(f2);\n        //5.功能加强，在FileInputStream外面套一个管：BufferedInputStream:\n        BufferedInputStream bis = new BufferedInputStream(fis);\n        //6.功能加强，在FileOutputStream外面套一个管：BufferedOutputStream:\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        //7.开始动作 ：\n        byte[] b = new byte[1024*6];\n        int len = bis.read(b);\n        while(len!=-1)&#123;\n            bos.write(b,0,len);\n           /* bos.flush(); 底层已经帮我们做了刷新缓冲区的操作，不用我们手动完成：底层调用flushBuffer()*/\n            len = bis.read(b);\n        &#125;\n        //8.关闭流：\n        //倒着关：\n        //如果处理流包裹着节点流的话，那么其实只要关闭高级流（处理流），那么里面的字节流也会随之被关闭。\n        bos.close();\n        bis.close();\n        /*fos.close();\n        fis.close();*/\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"8-比对非文本文件复制的三种方法的效率\"><a href=\"#8-比对非文本文件复制的三种方法的效率\" class=\"headerlink\" title=\"8 比对非文本文件复制的三种方法的效率\"></a>8 比对非文本文件复制的三种方法的效率</h2><p>【1】读入一个字节，写出一个字节：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618184948658.png\" class=\"\">\n\n\n<p>【2】利用缓冲字节数组：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618184953685.png\" class=\"\">\n\n\n<p>【3】利用缓冲区：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618184958715.png\" class=\"\">\n\n\n<p>代码：</p>\n<pre><code class=\"java\">public class Test06 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.有一个源图片\n        File f1 = new File(&quot;d:\\\\LOL.jpg&quot;);\n        //2.有一个目标图片：\n        File f2 = new File(&quot;d:\\\\LOL2.jpg&quot;);\n        //3.有一个输入的管道 怼 到 源文件：\n        FileInputStream fis = new FileInputStream(f1);\n        //4.有一个输出的管道 怼到  目标文件上：\n        FileOutputStream fos = new FileOutputStream(f2);\n        //5.功能加强，在FileInputStream外面套一个管：BufferedInputStream:\n        BufferedInputStream bis = new BufferedInputStream(fis);\n        //6.功能加强，在FileOutputStream外面套一个管：BufferedOutputStream:\n        BufferedOutputStream bos = new BufferedOutputStream(fos);\n        //7.开始动作 ：\n        long startTime = System.currentTimeMillis();\n        byte[] b = new byte[1024];\n        int len = bis.read(b);\n        while(len!=-1)&#123;\n            bos.write(b,0,len);\n           /* bos.flush(); 底层已经帮我们做了刷新缓冲区的操作，不用我们手动完成：底层调用flushBuffer()*/\n            len = bis.read(b);\n        &#125;\n        long endTime = System.currentTimeMillis();\n        System.out.println(&quot;复制完成的时间为：&quot;+(endTime-startTime));\n        //8.关闭流：\n        //倒着关：\n        //如果处理流包裹着节点流的话，那么其实只要关闭高级流（处理流），那么里面的字节流也会随之被关闭。\n        bos.close();\n        bis.close();\n        /*fos.close();\n        fis.close();*/\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"9-缓冲字符流-处理流-BufferedReader-BufferedWriter完成文本文件的复制\"><a href=\"#9-缓冲字符流-处理流-BufferedReader-BufferedWriter完成文本文件的复制\" class=\"headerlink\" title=\"9 缓冲字符流(处理流)-BufferedReader,BufferedWriter完成文本文件的复制\"></a>9 缓冲字符流(处理流)-BufferedReader,BufferedWriter完成文本文件的复制</h2><pre><code class=\"java\">public class Test07 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.有一个源文件：\n        File f1 = new File(&quot;d:\\\\Test.txt&quot;);\n        //2.有一个目标文件：\n        File f2 = new File(&quot;d:\\\\Demo.txt&quot;);\n        //3.需要一个管 怼到 源文件：\n        FileReader fr = new FileReader(f1);\n        //4.需要一根管怼到目标文件：\n        FileWriter fw = new FileWriter(f2);\n        //5.套一根管在输入字符流外面：\n        BufferedReader br = new BufferedReader(fr);\n        //6.套一根管在输出字符流外面：\n        BufferedWriter bw = new BufferedWriter(fw);\n        //7.开始动作：\n        //方式1：读取一个字符，输出一个字符：\n        /*int n = br.read();\n        while(n!=-1)&#123;\n            bw.write(n);\n            n = br.read();\n        &#125;*/\n        //方式2:利用缓冲数组：\n        /*char[] ch = new char[30];\n        int len = br.read(ch);\n        while(len!=-1)&#123;\n            bw.write(ch,0,len);\n            len = br.read(ch);\n        &#125;*/\n        //方式3：读取String：\n        String str = br.readLine();//每次读取文本文件中一行，返回字符串\n        while(str!=null)&#123;\n            bw.write(str);\n            //在文本文件中应该再写出一个换行：\n            bw.newLine();//新起一行\n            str = br.readLine();\n        &#125;\n        //8.关闭流\n        bw.close();\n        br.close();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"10-转换流-InputStreamReader-OutputStreamWriter\"><a href=\"#10-转换流-InputStreamReader-OutputStreamWriter\" class=\"headerlink\" title=\"10 转换流-InputStreamReader,OutputStreamWriter\"></a>10 转换流-InputStreamReader,OutputStreamWriter</h2><p>【1】转换流：作用：将字节流和字符流进行转换。<br>【2】转换流  属于 字节流还是字符流？属于字符流<br>InputStreamReader  ：字节输入流 —》字符的输入流<br>OutputStreamWriter  ： 字符输出流 –》字节的输出流</p>\n<p>【3】图解：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185049182.png\" class=\"\">\n\n\n<p>【4】将输入的字节流转换为输入的字符流，然后完成文件–》程序 ：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //文件---》程序：\n        //1.有一个源文件：\n        File f = new File(&quot;d:\\\\Test.txt&quot;);\n        //2.需要一个输入的字节流接触文件：\n        FileInputStream fis = new FileInputStream(f);\n        //3.加入一个转换流，将字节流转换为字符流：（转换流属于一个处理流）\n        //将字节转换为字符的时候，需要指定一个编码，这个编码跟文件本身的编码格式统一\n        //如果编码格式不统一的话，那么在控制台上展示的效果就会出现乱码\n        //InputStreamReader isr = new InputStreamReader(fis,&quot;utf-8&quot;);\n        //获取程序本身的编码--》utf-8\n        InputStreamReader isr = new InputStreamReader(fis);\n        //4.开始动作，将文件中内容显示在控制台：\n        char[] ch = new char[20];\n        int len = isr.read(ch);\n        while(len!=-1)&#123;\n            //将缓冲数组转为字符串在控制台上打印出来\n            System.out.print(new String(ch,0,len));\n            len = isr.read(ch);\n        &#125;\n        //5.关闭流：\n        isr.close();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"11-转换流-InputStreamReader-OutputStreamWriter实现文本文件的复制\"><a href=\"#11-转换流-InputStreamReader-OutputStreamWriter实现文本文件的复制\" class=\"headerlink\" title=\"11 转换流-InputStreamReader,OutputStreamWriter实现文本文件的复制\"></a>11 转换流-InputStreamReader,OutputStreamWriter实现文本文件的复制</h2><pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.有一个源文件\n        File f1 = new File(&quot;d:\\\\Test.txt&quot;);\n        //2.有一个目标文件：\n        File f2 = new File(&quot;d:\\\\Demo.txt&quot;);\n        //3.输入方向：\n        FileInputStream fis = new FileInputStream(f1);\n        InputStreamReader isr = new InputStreamReader(fis,&quot;utf-8&quot;);\n        //4.输出方向：\n        FileOutputStream fos = new FileOutputStream(f2);\n        OutputStreamWriter osw = new OutputStreamWriter(fos,&quot;gbk&quot;);\n        //5.开始动作：\n        char[] ch = new char[20];\n        int len = isr.read(ch);\n        while(len!=-1)&#123;\n            osw.write(ch,0,len);\n            len = isr.read(ch);\n        &#125;\n        //6.关闭流：\n        osw.close();\n        isr.close();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"12-System类对IO流的支持\"><a href=\"#12-System类对IO流的支持\" class=\"headerlink\" title=\"12 System类对IO流的支持\"></a>12 System类对IO流的支持</h2><p>【1】System的属性：<br>System.in  : “标准”输入流。—》默认情况下  从键盘输入<br>System.out  :“标准”输出流。 —》默认情况下，输出到控制台。</p>\n<p>【2】System.in ：“标准”输入流。—》默认情况下  从键盘输入</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //得到的是标准的输入流：--》从键盘输入：\n        //InputStream in = System.in;\n        //调用方法：\n        //int n = in.read();//read方法等待键盘的录入，所以这个方法是一个阻塞方法。\n        //System.out.println(n);\n        //以前案例：从键盘录入一个int类型的数据：\n        //从上面的代码证明，键盘录入实际上是：System.in\n        //形象的理解：System.in管，这个管怼到键盘上去了，所以你从键盘录入的话，就从这个管到程序中了\n        //Scanner的作用：扫描器：起扫描作用的，扫键盘的从这根管出来的数据\n        /*Scanner sc = new Scanner(System.in);\n        int i = sc.nextInt();\n        System.out.println(i);*/\n        //既然Scanner是扫描的作用，不一定非得扫 System.in进来的东西，还可以扫描其他管的内容：\n        Scanner sc = new Scanner(new FileInputStream(new File(&quot;d:\\\\Test.txt&quot;)));\n        while(sc.hasNext())&#123;\n            System.out.println(sc.next());\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【3】System.out  : 返回的输出流 、 打印流（PrintStream）</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //写到控制台：\n        PrintStream out = System.out;\n        //调用方法：\n        out.print(&quot;你好1&quot;);//直接在控制台写出，但是不换行\n        out.print(&quot;你好2&quot;);\n        out.print(&quot;你好3&quot;);\n        out.print(&quot;你好4&quot;);\n        out.println(&quot;我是中国人1&quot;);//直接在控制台写出，并且换行操作\n        out.println(&quot;我是中国人2&quot;);\n        out.println(&quot;我是中国人3&quot;);\n        out.println(&quot;我是中国人4&quot;);\n        System.out.println(&quot;你是&quot;);\n        System.out.print(&quot;中国人&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"13-练习：键盘录入内容输出到文件中\"><a href=\"#13-练习：键盘录入内容输出到文件中\" class=\"headerlink\" title=\"13 练习：键盘录入内容输出到文件中\"></a>13 练习：键盘录入内容输出到文件中</h2><p>【1】解决思路：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185310964.png\" class=\"\">\n\n\n<p>【2】代码：</p>\n<pre><code class=\"java\">public class Test03 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.先准备输入方向：\n        //键盘录入：\n        InputStream in = System.in;//属于字节流\n        //字节流--》字符流：\n        InputStreamReader isr = new InputStreamReader(in);\n        //在isr外面再套一个缓冲流：\n        BufferedReader br = new BufferedReader(isr);\n        //2.再准备输出方向：\n        //准备目标文件\n        File f = new File(&quot;d:\\\\Demo1.txt&quot;);\n        FileWriter fw = new FileWriter(f);\n        BufferedWriter bw = new BufferedWriter(fw);\n        //3.开始动作：\n        String s = br.readLine();\n        while(!s.equals(&quot;exit&quot;))&#123;\n            bw.write(s);\n            bw.newLine();//文件中换行\n            s = br.readLine();\n        &#125;\n        //4.关闭流：\n        bw.close();\n        br.close();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"14-数据流-DataInputStream-DataOutputStream\"><a href=\"#14-数据流-DataInputStream-DataOutputStream\" class=\"headerlink\" title=\"14 数据流-DataInputStream,DataOutputStream\"></a>14 数据流-DataInputStream,DataOutputStream</h2><p>【1】数据流：用来操作基本数据类型和字符串的<br>【2】<br>DataInputStream:将文件中存储的基本数据类型和字符串  写入  内存的变量中<br>DataOutputStream:  将内存中的基本数据类型和字符串的变量 写出  文件中</p>\n<p>【3】代码：</p>\n<p>利用DataOutputStream向外写出变量：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //DataOutputStream:  将内存中的基本数据类型和字符串的变量 写出  文件中\n        /*File f = new File(&quot;d:\\\\Demo2.txt&quot;);\n        FileOutputStream fos = new FileOutputStream(f);\n        DataOutputStream dos = new DataOutputStream(fos);*/\n        DataOutputStream dos = new DataOutputStream(new FileOutputStream(new File(&quot;d:\\\\Demo2.txt&quot;)));\n        //向外将变量写到文件中去：\n        dos.writeUTF(&quot;你好&quot;);\n        dos.writeBoolean(false);\n        dos.writeDouble(6.9);\n        dos.writeInt(82);\n        //关闭流：\n        dos.close();\n    &#125;\n&#125;\n</code></pre>\n<p>在Demo2.txt文件中，我们看到：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185411994.png\" class=\"\">\n\n\n\n\n\n<p>发现：这个内容我们看不懂，是给程序看的</p>\n<p>所以下面我们开始读取的程序：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //DataInputStream:将文件中存储的基本数据类型和字符串  写入  内存的变量中\n        DataInputStream dis = new DataInputStream(new FileInputStream(new File(&quot;d:\\\\Demo2.txt&quot;)));\n        //将文件中内容读取到程序中来：\n        System.out.println(dis.readUTF());\n        System.out.println(dis.readBoolean());\n        System.out.println(dis.readDouble());\n        System.out.println(dis.readInt());\n        //关闭流：\n        dis.close();\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185431650.png\" class=\"\">\n\n\n<p>验证：那个文件，我们看不懂，程序看得懂<br>要求：<br>写出的类型跟读入的类型 必须 要匹配！</p>\n<h2 id=\"15-对象流-ObjectInputStream-ObjectOutputStream\"><a href=\"#15-对象流-ObjectInputStream-ObjectOutputStream\" class=\"headerlink\" title=\"15 对象流-ObjectInputStream,ObjectOutputStream\"></a>15 对象流-ObjectInputStream,ObjectOutputStream</h2><p>【1】对象流：ObjectInputStream，ObjectInputStream<br>用于存储和读取基本数据类型数据或对象的处理流。<br>它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p>\n<p>【2】序列化和反序列化：<br>ObjectOutputStream 类 ： 把内存中的Java对象转换成平台无关的二进制数据，从而允许把这种二进制数据持久地保存在磁盘上，或通过网络将这种二进制数据传输到另一个网络节点。—-》序列化<br>用ObjectInputStream类 ： 当其它程序获取了这种二进制数据，就可以恢复成原来的Java对象。—-》反序列化</p>\n<p>【3】代码：操作字符串对象：<br>首先将一个字符串对象写到文件中去：—-》序列化</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(&quot;d:\\\\Demo3.txt&quot;)));\n        //将内存中的字符串写出到文件中：\n        oos.writeObject(&quot;你好&quot;);\n        //关闭流：\n        oos.close();\n    &#125;\n&#125;\n</code></pre>\n<p>查看文件：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185509008.png\" class=\"\">\n\n\n<p>我们看不懂文件的内容，但是程序是可以看懂的，所以可以写一个程序读文件中内容：—-》反序列化</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;\n        //将文件中保存的字符串 读入到 内存：\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&quot;d:\\\\Demo3.txt&quot;)));\n        //读取：\n        String s = (String)(ois.readObject());\n        System.out.println(s);\n        //关闭流：\n        ois.close();\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185547246.png\" class=\"\">\n\n\n<p>【4】代码：操作自定义类的对象：<br>自定义的Person类：</p>\n<pre><code class=\"java\">public class Person &#123;\n    private String name;\n    private int age;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public int getAge() &#123;\n        return age;\n    &#125;\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n    public Person() &#123;\n    &#125;\n    public Person(String name, int age) &#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n&#125;\n</code></pre>\n<p>测试类：</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //序列化：将内存中对象 ---》 文件：\n        //有一个对象：\n        Person p = new Person(&quot;lili&quot;,19);\n        //有对象流：\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(&quot;d:\\\\Demo4.txt&quot;)));\n        //向外写：\n        oos.writeObject(p);\n        //关闭流：\n        oos.close();\n    &#125;\n&#125;\n</code></pre>\n<p>运行的时候发现出现异常：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185638520.png\" class=\"\">\n\n\n<p>出现异常的原因：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185644074.png\" class=\"\">\n\n\n<p>起到标识作用，标识什么呢？只要实现这个接口的类的对象才能序列化，否则不可以。</font></p>\n<p>解决办法：将Person 实现这个标识接口就可以：</p>\n<pre><code class=\"java\">public class Person implements Serializable &#123;\n    private String name;\n    private int age;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public int getAge() &#123;\n        return age;\n    &#125;\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n    public Person() &#123;\n    &#125;\n    public Person(String name, int age) &#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n&#125;\n</code></pre>\n<p>测试：发现序列化成功，Person具备了序列化的能力。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185843749.png\" class=\"\">\n\n\n<p>这个二进制数据我们看不懂，但是程序可以看懂，所以我们可以用程序实现 反序列化操作：<br>将这个对象 恢复到内存中来：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&quot;d:\\\\Demo4.txt&quot;)));\n        //读入内存：\n        Person p = (Person)(ois.readObject());\n        System.out.println(p/*.toString()*/);\n        //关闭流：\n        ois.close();\n    &#125;\n&#125;\n</code></pre>\n<p>结果：<br>因为我们没有重写toString方法，所以结果为：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618185906147.png\" class=\"\">\n\n\n<p>证明了反序列化成功：   将二进制数据 –》内存</p>\n<p>【5】serialVersionUID：<br>凡是实现Serializable接口（标识接口）的类都有一个表示序列化版本标识符的静态常量:<br>➢private static final long serialVersionUID;<br>➢serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象进行版本控制，有关各版本反序加化时是否兼容。<br>➢如果类没有显示定义这个静态变量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明。</p>\n<p>➢简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)</p>\n<p>我现在在Person类中加入toString方法：</p>\n<pre><code class=\"java\">public class Person implements Serializable &#123;\n    private String name;\n    private int age;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public int getAge() &#123;\n        return age;\n    &#125;\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n    public Person() &#123;\n    &#125;\n    public Person(String name, int age) &#123;\n        this.name = name;\n        this.age = age;\n    &#125;\n    @Override\n    public String toString() &#123;\n        return &quot;Person&#123;&quot; +\n                &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, age=&quot; + age +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n<p>再次运行测试类：<br>出现异常：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618193403947.png\" class=\"\">\n\n\n\n<p>出现异常的原因：</p>\n<p>解决：给这个类 加入一个 序列号：serialVersionUID</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618193411439.png\" class=\"\">\n\n\n\n\n<p>【6】IDEA中配置序列化版本号：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618193419904.png\" class=\"\">\n\n\n\n\n<p>在Person类上：alt+enter:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618193429703.png\" class=\"\">\n\n\n<p>回车即可生成</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618193434654.png\" class=\"\">\n\n\n<p>【7】序列化细节：<br>（1）被序列化的类的内部的所有属性，必须是可序列化的 （基本数据类型都是可序列化的）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618193446336.png\" class=\"\">\n\n\n\n<p>（2）static，transient修饰的属性 不可以被序列化。</p>\n<pre><code class=\"java\">public class Person implements Serializable &#123;\n    private static final long serialVersionUID = 8027651838638826533L;\n    private transient String name;\n    private static int age;\n    private Famaily f = new Famaily();\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    public int getAge() &#123;\n        return age;\n    &#125;\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n    public Person() &#123;\n    &#125;\n    @Override\n    public String toString() &#123;\n        return &quot;Person&#123;&quot; +\n                &quot;name=&#39;&quot; + name + &#39;\\&#39;&#39; +\n                &quot;, f=&quot; + f + &quot;,age=&quot; + age +\n                &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC12%E7%AB%A0IO/image-20220618193501694.png\" class=\"\">\n\n\n\n\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/",
            "title": "第13章多线程",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>【1】程序，进程，线程<br>➢程序(program)：是为完成特定任务、用某种语言编写的一组指令的集合,是一段静态的代码。 （程序是静态的）</p>\n<p>➢进程(process)：是程序的一次执行过程。正在运行的一个程序，进程作为资源分配的单位，在内存中会为每个进程分配不同的内存区域。 （进程是动态的）是一个动的过程 ，进程的生命周期  :  有它自身的产生、存在和消亡的过程</p>\n<p>➢线程(thread)，进程可进一步细化为线程， 是一个程序内部的一条执行路径。<br>若一个进程同一时间并行执行多个线程，就是支持多线程的。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194135831.png\" class=\"\">\n\n\n\n<p>【2】单核CPU与多核CPU的任务执行：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194141865.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194149206.png\" class=\"\">\n\n\n\n\n<p>【3】并行和并发：<br>并行：多个CPU同时执行多个任务<br>并发：一个CPU“同时”执行多个任务（采用时间片切换）</p>\n<h1 id=\"1-创建线程的三种方式\"><a href=\"#1-创建线程的三种方式\" class=\"headerlink\" title=\"1 创建线程的三种方式\"></a>1 创建线程的三种方式</h1><h2 id=\"第一种：继承Thread类\"><a href=\"#第一种：继承Thread类\" class=\"headerlink\" title=\"第一种：继承Thread类\"></a>第一种：继承Thread类</h2><p>【1】在学习多线程一章之前，以前的代码是单线程的吗？不是，以前也是有三个线程同时执行的。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194435926.png\" class=\"\">\n\n\n<p>【2】现在我想自己制造多线程—》创建线程 ？？<br>线程类–》线程对象</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194442238.png\" class=\"\">\n\n\n<pre><code class=\"java\">/**\n * 线程类叫：TestThread，不是说你名字中带线程单词你就具备多线程能力了（争抢资源能力）\n * 现在想要具备能力，继承一个类：Thread，具备了争抢资源的能力\n */\npublic class TestThread extends Thread&#123;\n    /*\n    一会线程对象就要开始争抢资源了，这个线程要执行的任务到底是啥？这个任务你要放在方法中\n    但是这个方法不能是随便写的一个方法，必须是重写Thread类中的run方法\n    然后线程的任务/逻辑写在run方法中\n     */\n    @Override\n    public void run() &#123;\n        //输出1-10\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //主线程中也要输出十个数：\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(&quot;main1-----&quot;+i);\n        &#125;\n        //制造其他线程，要跟主线程争抢资源：\n        //具体的线程对象：子线程\n        TestThread tt = new TestThread();\n        //tt.run();//调用run方法，想要执行线程中的任务 --&gt;这个run方法不能直接调用，直接调用就会被当做一个普通方法\n        //想要tt子线程真正起作用比如要启动线程：\n        tt.start();//start()是Thread类中的方法\n        //主线程中也要输出十个数：\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(&quot;main2-----&quot;+i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>运行结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194526775.png\" class=\"\">\n\n\n<h3 id=\"设置读取线程名字\"><a href=\"#设置读取线程名字\" class=\"headerlink\" title=\"设置读取线程名字\"></a>设置读取线程名字</h3><p>【1】setName,getName方法来进行设置读取：</p>\n<pre><code class=\"java\">/**\n * 线程类叫：TestThread，不是说你名字中带线程单词你就具备多线程能力了（争抢资源能力）\n * 现在想要具备能力，继承一个类：Thread，具备了争抢资源的能力\n */\npublic class TestThread extends Thread&#123;\n    /*\n    一会线程对象就要开始争抢资源了，这个线程要执行的任务到底是啥？这个任务你要放在方法中\n    但是这个方法不能是随便写的一个方法，必须是重写Thread类中的run方法\n    然后线程的任务/逻辑写在run方法中\n     */\n    @Override\n    public void run() &#123;\n        //输出1-10\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(this.getName()+i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //给main方法这个主线程设置名字：\n        //Thread.currentThread()作用获取当前正在执行的线程\n        Thread.currentThread().setName(&quot;主线程&quot;);\n        //主线程中也要输出十个数：\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(Thread.currentThread().getName()+&quot;1-------&quot;+i);\n        &#125;\n        //制造其他线程，要跟主线程争抢资源：\n        //具体的线程对象：子线程\n        TestThread tt = new TestThread();\n        tt.setName(&quot;子线程&quot;);\n        //tt.run();//调用run方法，想要执行线程中的任务 --&gt;这个run方法不能直接调用，直接调用就会被当做一个普通方法\n        //想要tt子线程真正起作用比如要启动线程：\n        tt.start();//start()是Thread类中的方法\n        //主线程中也要输出十个数：\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(Thread.currentThread().getName()+&quot;2-------&quot;+i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】通过构造器设置 名字：</p>\n<pre><code class=\"java\">/**\n * 线程类叫：TestThread，不是说你名字中带线程单词你就具备多线程能力了（争抢资源能力）\n * 现在想要具备能力，继承一个类：Thread，具备了争抢资源的能力\n */\npublic class TestThread extends Thread&#123;\n    public TestThread(String name)&#123;\n        super(name);//调用父类的有参构造器\n    &#125;\n    /*\n    一会线程对象就要开始争抢资源了，这个线程要执行的任务到底是啥？这个任务你要放在方法中\n    但是这个方法不能是随便写的一个方法，必须是重写Thread类中的run方法\n    然后线程的任务/逻辑写在run方法中\n     */\n    @Override\n    public void run() &#123;\n        //输出1-10\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(this.getName()+i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"习题：买火车票\"><a href=\"#习题：买火车票\" class=\"headerlink\" title=\"习题：买火车票\"></a>习题：买火车票</h3><p>【1】原理：每个窗口都是一个线程对象：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194717605.png\" class=\"\">\n\n\n\n\n\n<p>【2】代码：</p>\n<pre><code class=\"java\">public class BuyTicketThread extends Thread &#123;\n    public BuyTicketThread(String name)&#123;\n        super(name);\n    &#125;\n    //一共10张票：\n    static int ticketNum = 10;//多个对象共享10张票\n    //每个窗口都是一个线程对象：每个对象执行的代码放入run方法中\n    @Override\n    public void run() &#123;\n        //每个窗口后面有100个人在抢票：\n        for (int i = 1; i &lt;= 100 ; i++) &#123;\n            if(ticketNum &gt; 0)&#123;//对票数进行判断，票数大于零我们才抢票\n                System.out.println(&quot;我在&quot;+this.getName()+&quot;买到了从北京到哈尔滨的第&quot; + ticketNum-- + &quot;张车票&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        //多个窗口抢票：三个窗口三个线程对象：\n        BuyTicketThread t1 = new BuyTicketThread(&quot;窗口1&quot;);\n        t1.start();\n        BuyTicketThread t2 = new BuyTicketThread(&quot;窗口2&quot;);\n        t2.start();\n        BuyTicketThread t3 = new BuyTicketThread(&quot;窗口3&quot;);\n        t3.start();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"第二种：实现Runnable接口\"><a href=\"#第二种：实现Runnable接口\" class=\"headerlink\" title=\"第二种：实现Runnable接口\"></a>第二种：实现Runnable接口</h2><p>【1】代码：</p>\n<pre><code class=\"java\">/**\n * TestThread实现了这个接口，才会变成一个线程类\n */\npublic class TestThread implements Runnable&#123;\n    @Override\n    public void run() &#123;\n        //输出1-10数字：\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(Thread.currentThread().getName()+&quot;----&quot;+i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        //创建子线程对象：\n        TestThread tt = new TestThread();\n        Thread t = new Thread(tt,&quot;子线程&quot;);\n        t.start();\n        //主线程里面也是打印1-10数字：\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(Thread.currentThread().getName()+&quot;---&quot;+i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>运行结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194854683.png\" class=\"\">\n\n\n<h3 id=\"习题：买火车票-1\"><a href=\"#习题：买火车票-1\" class=\"headerlink\" title=\"习题：买火车票\"></a>习题：买火车票</h3><p>【1】代码：</p>\n<pre><code class=\"java\">public class BuyTicketThread implements Runnable &#123;\n    int ticketNum = 10;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 100 ; i++) &#123;\n            if(ticketNum &gt; 0)&#123;\n                System.out.println(&quot;我在&quot;+Thread.currentThread().getName()+&quot;买到了北京到哈尔滨的第&quot; + ticketNum-- + &quot;张车票&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //定义一个线程对象：\n        BuyTicketThread t = new BuyTicketThread();\n        //窗口1买票：\n        Thread t1 = new Thread(t,&quot;窗口1&quot;);\n        t1.start();\n        //窗口2买票：\n        Thread t2 = new Thread(t,&quot;窗口2&quot;);\n        t2.start();\n        //窗口3买票：\n        Thread t3 = new Thread(t,&quot;窗口3&quot;);\n        t3.start();\n    &#125;\n&#125;\n</code></pre>\n<p>【2】实际开发中，方式1 继承Thread类   还是  方式2 实现Runnable接口这种方式多呢？–》方式2</p>\n<p>（1）方式1的话有 Java单继承的局限性，因为继承了Thread类，就不能再继承其它的类了</p>\n<p>（2）方式2的共享资源的能力也会强一些，不需要非得加个static来修饰</p>\n<p>【3】Thread类 Runnable接口 有联系吗？</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195007939.png\" class=\"\">\n\n\n<p>对比第一种和第二种创建线程的方式发现，无论第一种继承Thread类的方式还是第二种实现Runnable接口的方式，都需要有一个run方法，<br>但是这个run方法有不足：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195022846.png\" class=\"\">\n\n\n<p>（1）没有返回值<br>（2）不能抛出异常</p>\n<p>基于上面的两个不足，在JDK1.5以后出现了第三种创建线程的方式：实现Callable接口：</p>\n<p>实现Callable接口好处：（1）有返回值  （2）能抛出异常<br>缺点：线程创建比较麻烦</p>\n<pre><code class=\"java\">public class TestRandomNum implements Callable&lt;Integer&gt; &#123;\n    /*\n    1.实现Callable接口，可以不带泛型，如果不带泛型，那么call方式的返回值就是Object类型\n    2.如果带泛型，那么call的返回值就是泛型对应的类型\n    3.从call方法看到：方法有返回值，可以跑出异常\n     */\n    @Override\n    public Integer call() throws Exception &#123;\n        return new Random().nextInt(10);//返回10以内的随机数\n    &#125;\n&#125;\nclass Test&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;\n        //定义一个线程对象：\n        TestRandomNum trn = new TestRandomNum();\n        FutureTask ft = new FutureTask(trn);\n        Thread t = new Thread(ft);\n        t.start();\n        //获取线程得到的返回值：\n        Object obj = ft.get();\n        System.out.println(obj);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"2-线程的生命周期\"><a href=\"#2-线程的生命周期\" class=\"headerlink\" title=\"2 线程的生命周期\"></a>2 线程的生命周期</h1><p>【1】线程声明周期：线程开始–》线程消亡<br>【2】线程经历哪些阶段：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195248025.png\" class=\"\">\n\n\n<h1 id=\"3-线程常见方法\"><a href=\"#3-线程常见方法\" class=\"headerlink\" title=\"3 线程常见方法\"></a>3 线程常见方法</h1><p>（1）start() :  启动当前线程，表面上调用start方法，实际在调用线程里面的run方法</p>\n<p>（2）run() : 线程类 继承 Thread类 或者 实现Runnable接口的时候，都要重新实现这个run方法，run方法里面是线程要执行的内容</p>\n<p>（3）currentThread :Thread类中一个静态方法：获取当前正在执行的线程</p>\n<p>（4）setName 设置线程名字</p>\n<p>（5）getName 读取线程名字</p>\n<h2 id=\"设置优先级\"><a href=\"#设置优先级\" class=\"headerlink\" title=\"设置优先级\"></a>设置优先级</h2><p>【1】同优先级别的线程，采取的策略就是先到先服务，使用时间片策略</p>\n<p>【2】如果优先级别高，被CPU调度的概率就高</p>\n<p>【3】级别：1-10   默认的级别为5</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195340695.png\" class=\"\">\n\n\n\n\n\n<p>【4】代码：</p>\n<pre><code class=\"java\">public class TestThread01 extends Thread &#123;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 10; i++) &#123;\n            System.out.println(i);\n        &#125;\n    &#125;\n&#125;\nclass TestThread02 extends Thread&#123;\n    @Override\n    public void run() &#123;\n        for (int i = 20; i &lt;= 30 ; i++) &#123;\n            System.out.println(i);\n        &#125;\n    &#125;\n&#125;\nclass Test&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建两个子线程，让这两个子线程争抢资源：\n        TestThread01 t1 = new TestThread01();\n        t1.setPriority(10);//优先级别高\n        t1.start();\n        TestThread02 t2 = new TestThread02();\n        t2.setPriority(1);//优先级别低\n        t2.start();\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h2><p>join方法：当一个线程调用了join方法，这个线程就会先被执行，它执行结束以后才可以去执行其余的线程。</p>\n<blockquote>\n<p>注意：必须先start，再join才有效。</p>\n</blockquote>\n<pre><code class=\"java\">public class TestThread extends Thread &#123;\n    public TestThread(String name)&#123;\n        super(name);\n    &#125;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(this.getName()+&quot;----&quot;+i);\n        &#125;\n    &#125;\n&#125;\nclass Test&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) throws InterruptedException &#123;\n        for (int i = 1; i &lt;= 100 ; i++) &#123;\n            System.out.println(&quot;main-----&quot;+i);\n            if(i == 6)&#123;\n                //创建子线程：\n                TestThread tt = new TestThread(&quot;子线程&quot;);\n                tt.start();\n                tt.join();//“半路杀出个程咬金”\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep\"></a>sleep</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nby56YmouY29tL25ld3MvMjAxNDYuaHRtbA==\">https://go.zbj.com/news/20146.html</span> （段子）</p>\n<p>【1】sleep : 人为的制造阻塞事件</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        try &#123;\n            Thread.sleep(3000);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n        System.out.println(&quot;00000000000000&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>【2】案例：完成秒表功能：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //2.定义一个时间格式：\n        DateFormat df = new SimpleDateFormat(&quot;HH:mm:ss&quot;);\n        while(true)&#123;\n            //1.获取当前时间：\n            Date d = new Date();\n            //3.按照上面定义的格式将Date类型转为指定格式的字符串：\n            System.out.println(df.format(d));\n            try &#123;\n                Thread.sleep(1000);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"setDaemon\"><a href=\"#setDaemon\" class=\"headerlink\" title=\"setDaemon\"></a>setDaemon</h2><p>【1】设置伴随线程<br>将子线程设置为主线程的伴随线程，主线程停止的时候，子线程也不要继续执行了<br>案例：皇上 –》驾崩 —》妃子陪葬</p>\n<pre><code class=\"java\">public class TestThread extends Thread &#123;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 1000 ; i++) &#123;\n            System.out.println(&quot;子线程----&quot;+i);\n        &#125;\n    &#125;\n&#125;\nclass Test&#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        //创建并启动子线程：\n        TestThread tt = new TestThread();\n        tt.setDaemon(true);//设置伴随线程  注意：先设置，再启动\n        tt.start();\n        //主线程中还要输出1-10的数字：\n        for (int i = 1; i &lt;= 10 ; i++) &#123;\n            System.out.println(&quot;main---&quot;+i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195552686.png\" class=\"\">\n\n\n<h2 id=\"stop\"><a href=\"#stop\" class=\"headerlink\" title=\"stop\"></a>stop</h2><pre><code class=\"java\">public class Demo &#123;\n    //这是main方法，程序的入口\n    public static void main(String[] args) &#123;\n        for (int i = 1; i &lt;= 100 ; i++) &#123;\n            if(i == 6)&#123;\n                Thread.currentThread().stop();//过期方法，不建议使用\n            &#125;\n            System.out.println(i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"4-线程安全问题\"><a href=\"#4-线程安全问题\" class=\"headerlink\" title=\"4 线程安全问题\"></a>4 线程安全问题</h1><h2 id=\"方法1：同步代码块\"><a href=\"#方法1：同步代码块\" class=\"headerlink\" title=\"方法1：同步代码块\"></a>方法1：同步代码块</h2><p>【1】同步代码块演示1：</p>\n<pre><code class=\"java\">package com.msb.test04;\n/**\n * @author : msb-zhaoss\n */\npublic class BuyTicketThread implements Runnable &#123;\n    int ticketNum = 10;\n    @Override\n    public void run() &#123;\n        //此处有1000行代码\n        for (int i = 1; i &lt;= 100 ; i++) &#123;\n            synchronized (this)&#123;//把具有安全隐患的代码锁住即可，如果锁多了就会效率低 --》this就是这个锁\n                if(ticketNum &gt; 0)&#123;\n                    System.out.println(&quot;我在&quot;+Thread.currentThread().getName()+&quot;买到了北京到哈尔滨的第&quot; + ticketNum-- + &quot;张车票&quot;);\n                &#125;\n            &#125;\n        &#125;\n        //此处有1000行代码\n    &#125;\n&#125;\n</code></pre>\n<p>【2】同步代码块演示2：</p>\n<pre><code class=\"java\">public class BuyTicketThread extends Thread &#123;\n    public BuyTicketThread(String name)&#123;\n        super(name);\n    &#125;\n    //一共10张票：\n    static int ticketNum = 10;//多个对象共享10张票\n    //每个窗口都是一个线程对象：每个对象执行的代码放入run方法中\n    @Override\n    public void run() &#123;\n        //每个窗口后面有100个人在抢票：\n        for (int i = 1; i &lt;= 100 ; i++) &#123;\n            synchronized (BuyTicketThread.class)&#123;//锁必须多个线程用的是同一把锁！！！\n                if(ticketNum &gt; 0)&#123;//对票数进行判断，票数大于零我们才抢票\n                    System.out.println(&quot;我在&quot;+this.getName()+&quot;买到了从北京到哈尔滨的第&quot; + ticketNum-- + &quot;张车票&quot;);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"方法2：同步方法\"><a href=\"#方法2：同步方法\" class=\"headerlink\" title=\"方法2：同步方法\"></a>方法2：同步方法</h2><p>【1】代码展示：</p>\n<pre><code class=\"java\">public class BuyTicketThread implements Runnable &#123;\n    int ticketNum = 10;\n    @Override\n    public void run() &#123;\n        //此处有1000行代码\n        for (int i = 1; i &lt;= 100 ; i++) &#123;\n            buyTicket();\n        &#125;\n        //此处有1000行代码\n    &#125;\n    public synchronized void buyTicket()&#123;//锁住的是this\n        if(ticketNum &gt; 0)&#123;\n            System.out.println(&quot;我在&quot;+Thread.currentThread().getName()+&quot;买到了北京到哈尔滨的第&quot; + ticketNum-- + &quot;张车票&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class BuyTicketThread extends Thread &#123;\n    public BuyTicketThread(String name)&#123;\n        super(name);\n    &#125;\n    //一共10张票：\n    static int ticketNum = 10;//多个对象共享10张票\n    //每个窗口都是一个线程对象：每个对象执行的代码放入run方法中\n    @Override\n    public void run() &#123;\n        //每个窗口后面有100个人在抢票：\n        for (int i = 1; i &lt;= 100 ; i++) &#123;\n            buyTicket();\n        &#125;\n    &#125;\n    public static synchronized void buyTicket()&#123;//锁住的  同步监视器： BuyTicketThread.class\n        if(ticketNum &gt; 0)&#123;//对票数进行判断，票数大于零我们才抢票\n            System.out.println(&quot;我在&quot;+Thread.currentThread().getName()+&quot;买到了从北京到哈尔滨的第&quot; + ticketNum-- + &quot;张车票&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】总结：<br>总结1：<br>多线程在争抢资源，就要实现线程的同步（就要进行加锁，并且这个锁必须是共享的，必须是唯一的。<br>咱们的锁一般都是引用数据类型的。</p>\n<p>目的：解决了线程安全问题。</p>\n<p>总结2：关于同步方法</p>\n<ol>\n<li>不要将run()定义为同步方法</li>\n<li>非静态同步方法的同步监视器是this<br>静态同步方法的同步监视器是 类名.class 字节码信息对象</li>\n<li>同步代码块的效率要高于同步方法<br>原因：同步方法是将线程挡在了方法的外部，而同步代码块锁将线程挡在了代码块的外部，但是却是方法的内部</li>\n<li>同步方法的锁是this，一旦锁住一个方法，就锁住了所有的同步方法；同步代码块只是锁住使用该同步监视器的代码块，而没有锁住使用其他监视器的代码块</li>\n</ol>\n<h2 id=\"方法3：Lock锁\"><a href=\"#方法3：Lock锁\" class=\"headerlink\" title=\"方法3：Lock锁\"></a>方法3：Lock锁</h2><p>【1】Lock锁引入：<br>JDK1.5后新增新一代的线程同步方式:Lock锁<br>与采用synchronized相比，lock可提供多种锁方案，更灵活</p>\n<p>synchronized是Java中的关键字，这个关键字的识别是靠JVM来识别完成的呀。是虚拟机级别的。<br>但是Lock锁是API级别的，提供了相应的接口和对应的实现类，这个方式更灵活，表现出来的性能优于之前的方式。</p>\n<p>【2】代码演示：</p>\n<pre><code class=\"java\">public class BuyTicketThread implements Runnable &#123;\n    int ticketNum = 10;\n    //拿来一把锁：\n    Lock lock = new ReentrantLock();//多态  接口=实现类  可以使用不同的实现类\n    @Override\n    public void run() &#123;\n        //此处有1000行代码\n        for (int i = 1; i &lt;= 100 ; i++) &#123;\n            //打开锁：\n            lock.lock();\n            try&#123;\n                if(ticketNum &gt; 0)&#123;\n                    System.out.println(&quot;我在&quot;+Thread.currentThread().getName()+&quot;买到了北京到哈尔滨的第&quot; + ticketNum-- + &quot;张车票&quot;);\n                &#125;\n            &#125;catch (Exception ex)&#123;\n                ex.printStackTrace();\n            &#125;finally &#123;\n                //关闭锁：---&gt;即使有异常，这个锁也可以得到释放\n                lock.unlock();\n            &#125;\n        &#125;\n        //此处有1000行代码\n    &#125;\n&#125;\n</code></pre>\n<p>【3】 Lock和synchronized的区别</p>\n<pre><code>    1.Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁\n    2.Lock只有代码块锁，synchronized有代码块锁和方法锁\n    3.使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）\n</code></pre>\n<p>【4】优先使用顺序：</p>\n<pre><code>    Lock----同步代码块（已经进入了方法体，分配了相应资源）----同步方法（在方法体之外）\n</code></pre>\n<h2 id=\"线程同步的优缺点\"><a href=\"#线程同步的优缺点\" class=\"headerlink\" title=\"线程同步的优缺点\"></a>线程同步的优缺点</h2><p>【1】对比：<br>线程安全，效率低<br>线程不安全，效率高</p>\n<p>【2】可能造成死锁：<br>死锁</p>\n<blockquote>\n<p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁<br>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</p>\n</blockquote>\n<p>【3】代码演示：</p>\n<pre><code class=\"java\">public class TestDeadLock implements Runnable &#123;\n    public int flag = 1;\n    static Object o1 = new Object(),o2 = new Object();\n        \n        \n    public void run()&#123;\n        System.out.println(&quot;flag=&quot; + flag);\n        // 当flag==1锁住o1\n        if (flag == 1) &#123;\n            synchronized (o1) &#123;\n                try &#123;\n                    Thread.sleep(500);\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\n                // 只要锁住o2就完成\n                synchronized (o2) &#123;\n                    System.out.println(&quot;2&quot;);\n                &#125;\n            &#125;\n        &#125;\n        // 如果flag==0锁住o2\n        if (flag == 0) &#123;\n            synchronized (o2) &#123;\n                try &#123;\n                    Thread.sleep(500);\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\n                // 只要锁住o1就完成\n                synchronized (o1) &#123;\n                    System.out.println(&quot;3&quot;);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n        \n        \n    public static void main(String[] args) &#123;\n        // 实例2个线程类\n        TestDeadLock td1 = new TestDeadLock();\n        TestDeadLock td2 = new TestDeadLock();\n        td1.flag = 1;\n        td2.flag = 0;\n        // 开启2个线程\n        Thread t1 = new Thread(td1);\n        Thread t2 = new Thread(td2);\n        t1.start();\n        t2.start();\n    &#125;\n&#125;\n</code></pre>\n<p>【4】解决方法： 减少同步资源的定义，避免嵌套同步</p>\n<h1 id=\"5-线程通信问题\"><a href=\"#5-线程通信问题\" class=\"headerlink\" title=\"5 线程通信问题\"></a>5 线程通信问题</h1><p>应用场景：生产者和消费者问题<br>假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中产品取走消费<br>如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止<br>如果仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200150740.png\" class=\"\">\n\n\n<p>代码结果展示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200157334.png\" class=\"\">\n\n\n<p>代码：<br>1.商品：属性：品牌 ，名字<br>2.线程1：生产者<br>3.线程2：消费者</p>\n<h2 id=\"分解1\"><a href=\"#分解1\" class=\"headerlink\" title=\"分解1\"></a>分解1</h2><p>出现问题：<br>1.生产者和消费者没有交替输出</p>\n<p>2.打印数据错乱<br>哈尔滨 - null<br>费列罗啤酒<br>哈尔滨巧克力<br>—-没有加同步</p>\n<p>代码展示：</p>\n<pre><code class=\"java\">public class Product &#123;//商品类\n    //品牌\n    private String brand;\n    //名字\n    private String name;\n    //setter,getter方法；\n    public String getBrand() &#123;\n        return brand;\n    &#125;\n    public void setBrand(String brand) &#123;\n        this.brand = brand;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class ProducerThread extends Thread&#123;//生产者线程\n    //共享商品：\n    private Product p;\n    public ProducerThread(Product p) &#123;\n        this.p = p;\n    &#125;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 10 ; i++) &#123;//生产十个商品 i:生产的次数\n            if(i % 2 == 0)&#123;\n                //生产费列罗巧克力\n                p.setBrand(&quot;费列罗&quot;);\n                try &#123;\n                    Thread.sleep(100);\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n                p.setName(&quot;巧克力&quot;);\n            &#125;else&#123;\n                //生产哈尔滨啤酒\n                p.setBrand(&quot;哈尔滨&quot;);\n                try &#123;\n                    Thread.sleep(100);\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n                p.setName(&quot;啤酒&quot;);\n            &#125;\n            //将生产信息做一个打印：\n            System.out.println(&quot;生产者生产了：&quot; + p.getBrand() + &quot;---&quot; + p.getName());\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class CustomerThread extends Thread&#123;//消费者线程\n    //共享商品：\n    private Product p;\n    public CustomerThread(Product p) &#123;\n        this.p = p;\n    &#125;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 10 ; i++) &#123;//i:消费次数\n            System.out.println(&quot;消费者消费了：&quot; + p.getBrand() + &quot;---&quot; + p.getName());\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"分解2\"><a href=\"#分解2\" class=\"headerlink\" title=\"分解2\"></a>分解2</h2><p>【1】利用同步代码块解决问题：</p>\n<pre><code class=\"java\">public class ProducerThread extends Thread&#123;//生产者线程\n    //共享商品：\n    private Product p;\n    public ProducerThread(Product p) &#123;\n        this.p = p;\n    &#125;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 10 ; i++) &#123;//生产十个商品 i:生产的次数\n            synchronized (p)&#123;\n                if(i % 2 == 0)&#123;\n                    //生产费列罗巧克力\n                    p.setBrand(&quot;费列罗&quot;);\n                    try &#123;\n                        Thread.sleep(100);\n                    &#125; catch (InterruptedException e) &#123;\n                        e.printStackTrace();\n                    &#125;\n                    p.setName(&quot;巧克力&quot;);\n                &#125;else&#123;\n                    //生产哈尔滨啤酒\n                    p.setBrand(&quot;哈尔滨&quot;);\n                    try &#123;\n                        Thread.sleep(100);\n                    &#125; catch (InterruptedException e) &#123;\n                        e.printStackTrace();\n                    &#125;\n                    p.setName(&quot;啤酒&quot;);\n                &#125;\n                //将生产信息做一个打印：\n                System.out.println(&quot;生产者生产了：&quot; + p.getBrand() + &quot;---&quot; + p.getName());\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class CustomerThread extends Thread&#123;//消费者线程\n    //共享商品：\n    private Product p;\n    public CustomerThread(Product p) &#123;\n        this.p = p;\n    &#125;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 10 ; i++) &#123;//i:消费次数\n            synchronized (p)&#123;\n                System.out.println(&quot;消费者消费了：&quot; + p.getBrand() + &quot;---&quot; + p.getName());\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】利用同步方法解决问题：</p>\n<pre><code class=\"java\">public class Product &#123;//商品类\n    //品牌\n    private String brand;\n    //名字\n    private String name;\n    //setter,getter方法；\n    public String getBrand() &#123;\n        return brand;\n    &#125;\n    public void setBrand(String brand) &#123;\n        this.brand = brand;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    //生产商品\n    public synchronized void setProduct(String brand,String name)&#123;\n        this.setBrand(brand);\n        try &#123;\n            Thread.sleep(100);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n        this.setName(name);\n        //将生产信息做一个打印：\n        System.out.println(&quot;生产者生产了：&quot; + this.getBrand() + &quot;---&quot; + this.getName());\n    &#125;\n    //消费商品：\n    public synchronized void getProduct()&#123;\n        System.out.println(&quot;消费者消费了：&quot; + this.getBrand() + &quot;---&quot; + this.getName());\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class CustomerThread extends Thread&#123;//消费者线程\n    //共享商品：\n    private Product p;\n    public CustomerThread(Product p) &#123;\n        this.p = p;\n    &#125;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 10 ; i++) &#123;//i:消费次数\n            p.getProduct();;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class ProducerThread extends Thread&#123;//生产者线程\n    //共享商品：\n    private Product p;\n    public ProducerThread(Product p) &#123;\n        this.p = p;\n    &#125;\n    @Override\n    public void run() &#123;\n        for (int i = 1; i &lt;= 10 ; i++) &#123;//生产十个商品 i:生产的次数\n            if(i % 2 == 0)&#123;\n                p.setProduct(&quot;费列罗&quot;,&quot;巧克力&quot;);\n            &#125;else&#123;\n                p.setProduct(&quot;哈尔滨&quot;,&quot;啤酒&quot;);\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>（这个else中的代码在分解3中 演示了错误）</p>\n<h2 id=\"分解3\"><a href=\"#分解3\" class=\"headerlink\" title=\"分解3\"></a>分解3</h2><p>【1】原理：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200412158.png\" class=\"\">\n\n\n\n<p>【2】代码：</p>\n<pre><code class=\"java\">public class Product &#123;//商品类\n    //品牌\n    private String brand;\n    //名字\n    private String name;\n    //引入一个灯：true:红色  false 绿色\n    boolean flag = false;//默认情况下没有商品 让生产者先生产  然后消费者再消费\n    //setter,getter方法；\n    public String getBrand() &#123;\n        return brand;\n    &#125;\n    public void setBrand(String brand) &#123;\n        this.brand = brand;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    //生产商品\n    public synchronized void setProduct(String brand,String name)&#123;\n        if(flag == true)&#123;//灯是红色，证明有商品，生产者不生产，等着消费者消费\n            try &#123;\n                wait();\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n        //灯是绿色的，就生产：\n        this.setBrand(brand);\n        try &#123;\n            Thread.sleep(100);\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n        this.setName(name);\n        //将生产信息做一个打印：\n        System.out.println(&quot;生产者生产了：&quot; + this.getBrand() + &quot;---&quot; + this.getName());\n        //生产完以后，灯变色：变成红色：\n        flag = true;\n        //告诉消费者赶紧来消费：\n        notify();\n    &#125;\n    //消费商品：\n    public synchronized void getProduct()&#123;\n        if(!flag)&#123;//flag == false没有商品，等待生产者生产：\n            try &#123;\n                wait();\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n        //有商品，消费：\n        System.out.println(&quot;消费者消费了：&quot; + this.getBrand() + &quot;---&quot; + this.getName());\n        //消费完：灯变色：\n        flag = false;\n        //通知生产者生产：\n        notify();\n    &#125;\n&#125;\n</code></pre>\n<p>【3】原理：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200442747.png\" class=\"\">\n\n\n<p>注意：wait方法和notify方法  是必须放在同步方法或者同步代码块中才生效的 （因为在同步的基础上进行线程的通信才是有效的）<br>注意：sleep和wait的区别：sleep进入阻塞状态没有释放锁，wait进入阻塞状态但是同时释放了锁<br>【4】线程生命周期完整图：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200450798.png\" class=\"\">\n\n\n<h2 id=\"Loc锁情况下的线程通信\"><a href=\"#Loc锁情况下的线程通信\" class=\"headerlink\" title=\"Loc锁情况下的线程通信\"></a>Loc锁情况下的线程通信</h2><p>Condition是在Java 1.5中才出现的，它用来替代传统的Object的wait()、notify()实现线程间的协作，相比使用Object的wait()、notify()，使用Condition1的await()、signal()这种方式实现线程间协作更加安全和高效。</p>\n<p>它的更强大的地方在于：能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition</p>\n<p>一个Condition包含一个等待队列。一个Lock可以产生多个Condition，所以可以有多个等待队列。</p>\n<p>在Object的监视器模型上，一个对象拥有一个同步队列和等待队列，<font color=\"red\">而Lock（同步器）拥有一个同步队列和多个等待队列</font>。</p>\n<p>Object中的wait(),notify(),notifyAll()方法是和”同步锁”(synchronized关键字)捆绑使用的；而Condition是需要与”互斥锁”&#x2F;“共享锁”捆绑使用的。</p>\n<p>调用Condition的await()、signal()、signalAll()方法，都必须在lock保护之内，<font color=\"red\">就是说必须在lock.lock()和lock.unlock之间才可以使用 </font></p>\n<p>· Conditon中的await()对应Object的wait()；</p>\n<p>· Condition中的signal()对应Object的notify()；<br>· Condition中的signalAll()对应Object的notifyAll()。</p>\n<p>void await()  throws InterruptedException</p>\n<p>造成当前线程在接到信号或被中断之前一直处于等待状态。</p>\n<p>与此 Condition 相关的锁以原子方式释放，并且出于线程调度的目的，将禁用当前线程，且在发生以下四种情况之一 以前，当前线程将一直处于休眠状态：</p>\n<p>· 其他某个线程调用此 Condition 的 signal() 方法，并且碰巧将当前线程选为被唤醒的线程；或者<br>· 其他某个线程调用此 Condition 的 signalAll() 方法；或者<br>· 其他某个线程中断当前线程，且支持中断线程的挂起；或者<br>· 发生“虚假唤醒”</p>\n<p>在所有情况下，在此方法可以返回当前线程之前，都必须重新获取与此条件有关的锁。在线程返回时，可以保证它保持此锁。</p>\n<p>void <strong>signal()</strong></p>\n<p>唤醒一个等待线程。</p>\n<p>如果所有的线程都在等待此条件，则选择其中的一个唤醒。在从 await 返回之前，该线程必须重新获取锁。</p>\n<p>void <strong>signalAll()</strong></p>\n<p>唤醒所有等待线程。</p>\n<p>如果所有的线程都在等待此条件，则唤醒所有线程。在从 await 返回之前，每个线程都必须重新获取锁。</p>\n<p>更改代码：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200641119.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class Product &#123;//商品类\n    //品牌\n    private String brand;\n    //名字\n    private String name;\n    //声明一个Lock锁：\n    Lock lock = new ReentrantLock();\n    //搞一个生产者的等待队列：\n    Condition produceCondition = lock.newCondition();\n    //搞一个消费者的等待队列：\n    Condition consumeCondition = lock.newCondition();\n    //引入一个灯：true:红色  false 绿色\n    boolean flag = false;//默认情况下没有商品 让生产者先生产  然后消费者再消费\n    //setter,getter方法；\n    public String getBrand() &#123;\n        return brand;\n    &#125;\n    public void setBrand(String brand) &#123;\n        this.brand = brand;\n    &#125;\n    public String getName() &#123;\n        return name;\n    &#125;\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n    //生产商品\n    public void setProduct(String brand,String name)&#123;\n        lock.lock();\n        try&#123;\n            if(flag == true)&#123;//灯是红色，证明有商品，生产者不生产，等着消费者消费\n                try &#123;\n                    //wait();\n                    //生产者阻塞，生产者进入等待队列中\n                    produceCondition.await();\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n            //灯是绿色的，就生产：\n            this.setBrand(brand);\n            try &#123;\n                Thread.sleep(100);\n            &#125; catch (InterruptedException e) &#123;\n                e.printStackTrace();\n            &#125;\n            this.setName(name);\n            //将生产信息做一个打印：\n            System.out.println(&quot;生产者生产了：&quot; + this.getBrand() + &quot;---&quot; + this.getName());\n            //生产完以后，灯变色：变成红色：\n            flag = true;\n            //告诉消费者赶紧来消费：\n            //notify();\n            consumeCondition.signal();\n        &#125;finally &#123;\n            lock.unlock();\n        &#125;\n    &#125;\n    //消费商品：\n    public void getProduct()&#123;\n        lock.lock();\n        try&#123;\n            if(!flag)&#123;//flag == false没有商品，等待生产者生产：\n                try &#123;\n                   // wait();\n                    //消费者等待，消费者线程进入等待队列：\n                    consumeCondition.await();\n                &#125; catch (InterruptedException e) &#123;\n                    e.printStackTrace();\n                &#125;\n            &#125;\n            //有商品，消费：\n            System.out.println(&quot;消费者消费了：&quot; + this.getBrand() + &quot;---&quot; + this.getName());\n            //消费完：灯变色：\n            flag = false;\n            //通知生产者生产：\n            //notify();\n            produceCondition.signal();\n        &#125;finally &#123;\n            lock.unlock();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"未完成！！！！！！！！！！\"><a href=\"#未完成！！！！！！！！！！\" class=\"headerlink\" title=\"未完成！！！！！！！！！！\"></a>未完成！！！！！！！！！！</h1>",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",
            "title": "第14章_网络编程",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>【1】网络编程：</p>\n<p>把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。</p>\n<p>设备之间在网络中进行数据的传输，发送&#x2F;接收数据。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1a93dfa9d1c3ca81040d0cc18afb4aba.png\" class=\"\">\n\n\n<p>【2】通信两个重要的要素：IP+PORT</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/c79c4973d3a3792ab9aef4710b01f370.png\" class=\"\">\n\n\n<p>域名：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20v\">www.baidu.com</span> ——&gt;DNS服务器解析 —-&gt; IP地址</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tYXNoaWJpbmcuY29tLw==\">www.mashibing.com</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zaW5hLmNvbS8=\">www.sina.com</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53YW5kYS5jb20v\">www.wanda.com</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYmJiLmNvbS8=\">www.bbbb.com</span></p>\n<p>【3】设备之间进行传输的时候，必须遵照一定的规则 —》通信协议：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/7dc2fafdf26997c871032c7bc7a91256.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/ae2d4c32ffafe3daac392da2ffcb1c5f.png\" class=\"\">\n\n\n<p>【4】TCP协议：可靠的</p>\n<p>建立连接： 三次握手</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/fc9427567eb4c9d54c08677d02e4ccfe.png\" class=\"\">\n\n\n<p>释放连接：四次挥手</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/bb485bb37ea12a870dcb3ba2799c07d9.png\" class=\"\">\n\n\n<p>【5】UDP协议：不可靠的</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/5e71f2ea6eb08ea6a59c1853accb6681.png\" class=\"\">\n\n\n<h1 id=\"InetAddress-InetSocketAddress\"><a href=\"#InetAddress-InetSocketAddress\" class=\"headerlink\" title=\"InetAddress,InetSocketAddress\"></a>InetAddress,InetSocketAddress</h1><p>前情提要：File —》 封装盘符一个文件</p>\n<p>【1】InetAddress —》 封装了IP</p>\n<pre><code class=\"java\">public class Test01 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws UnknownHostException &#123;\n        //封装IP：\n        //InetAddress ia = new InetAddress();不能直接创建对象，因为InetAddress()被default修饰了。\n        InetAddress ia = InetAddress.getByName(&quot;192.168.199.217&quot;);\n        System.out.println(ia);\n        InetAddress ia2 = InetAddress.getByName(&quot;localhost&quot;);//localhost指代的是本机的ip地址\n        System.out.println(ia2);\n        InetAddress ia3 = InetAddress.getByName(&quot;127.0.0.1&quot;);//127.0.0.1指代的是本机的ip地址\n        System.out.println(ia3);\n        InetAddress ia4 = InetAddress.getByName(&quot;LAPTOP-CRIVSRRU&quot;);//封装计算机名\n        System.out.println(ia4);\n        InetAddress ia5 = InetAddress.getByName(&quot;www.mashibing.com&quot;);//封装域名\n        System.out.println(ia5);\n\n        System.out.println(ia5.getHostName());//获取域名\n        System.out.println(ia5.getHostAddress());//获取ip地址\n    &#125;\n&#125;\n</code></pre>\n<p>【2】InetSocketAddress —》封装了IP，端口号</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        InetSocketAddress isa = new InetSocketAddress(&quot;192.168.199.217&quot;,8080);\n        System.out.println(isa);\n        System.out.println(isa.getHostName());\n        System.out.println(isa.getPort());\n\n        InetAddress ia = isa.getAddress();\n        System.out.println(ia.getHostName());\n        System.out.println(ia.getHostAddress());\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"网络通信原理–套接字\"><a href=\"#网络通信原理–套接字\" class=\"headerlink\" title=\"网络通信原理–套接字\"></a>网络通信原理–套接字</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/62ac948054889d710868c47aea8165d8.png\" class=\"\">\n\n\n<h2 id=\"基于TCP的网络编程\"><a href=\"#基于TCP的网络编程\" class=\"headerlink\" title=\"基于TCP的网络编程\"></a>基于TCP的网络编程</h2><p>功能：模拟网站的登录，客户端录入账号密码，然后服务器端进行验证。</p>\n<h3 id=\"功能分解1：单向通信\"><a href=\"#功能分解1：单向通信\" class=\"headerlink\" title=\"功能分解1：单向通信\"></a>功能分解1：单向通信</h3><p>功能：客户端发送一句话到服务器：</p>\n<p>客户端：</p>\n<pre><code class=\"java\">public class TestClient &#123;//客户端\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.创建套接字：指定服务器的ip和端口号：\n        Socket s = new Socket(&quot;192.168.199.217&quot;,8888);\n        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：\n        OutputStream os = s.getOutputStream();\n        DataOutputStream dos = new DataOutputStream(os);\n        //利用这个OutputStream就可以向外发送数据了，但是没有直接发送String的方法\n        //所以我们又在OutputStream外面套了一个处理流：DataOutputStream\n        dos.writeUTF(&quot;你好&quot;);\n\n        //3.关闭流 + 关闭网络资源：\n        dos.close();\n        os.close();\n        s.close();\n    &#125;\n&#125;\n</code></pre>\n<p>服务器：</p>\n<pre><code class=\"java\">public class TestServer &#123;//服务器\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.创建套接字： 指定服务器的端口号\n        ServerSocket ss = new ServerSocket(8888);\n        //2.等着客户端发来的信息：\n        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket\n        //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了\n        //3.感受到的操作流：\n        InputStream is = s.getInputStream();\n        DataInputStream dis = new DataInputStream(is);\n\n        //4.读取客户端发来的数据：\n        String str = dis.readUTF();\n        System.out.println(&quot;客户端发来的数据为：&quot;+str);\n\n        //5.关闭流+关闭网络资源：\n        dis.close();\n        is.close();\n        s.close();\n        ss.close();\n    &#125;\n&#125;\n</code></pre>\n<p>测试：</p>\n<p>（1）先开启客户端还是先开启服务器：先开服务器，再开启客户端</p>\n<p>侧面验证：先开客户端：出错：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/8de05d3a78c633604b764ff81cf5c54c.png\" class=\"\">\n\n\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"功能分解2：双向通信\"><a href=\"#功能分解2：双向通信\" class=\"headerlink\" title=\"功能分解2：双向通信\"></a>功能分解2：双向通信</h3><p>服务器端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/\\*\\*\n    \\* @author : msb-zhaoss\n        \\*/\n        public class TestServer &#123;//服务器\n\n            //这是一个main方法，是程序的入口：\n            public static void main(String[] args) throws IOException &#123;\n                //1.创建套接字： 指定服务器的端口号\n                ServerSocket ss = new ServerSocket(8888);\n                //2.等着客户端发来的信息：\n                Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n                //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket\n                //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了\n                //3.感受到的操作流：\n                InputStream is = s.getInputStream();\n                DataInputStream dis = new DataInputStream(is);\n\n                //4.读取客户端发来的数据：\n                String str = dis.readUTF();\n                System.out.println(&quot;客户端发来的数据为：&quot;+str);\n\n                //向客户端输出一句话：---》操作流---》输出流\n                OutputStream os = s.getOutputStream();\n                DataOutputStream dos = new DataOutputStream(os);\n                dos.writeUTF(&quot;你好，我是服务器端，我接受到你的请求了&quot;);\n\n\n                //5.关闭流+关闭网络资源：\n                dos.close();\n                os.close();\n                dis.close();\n                is.close();\n                s.close();\n                ss.close();\n            &#125;\n        &#125;\n\n</code></pre>\n<p>客户端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.Socket;\n\npublic class TestClient &#123;//客户端\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.创建套接字：指定服务器的ip和端口号：\n        Socket s = new Socket(&quot;192.168.199.217&quot;,8888);\n        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：\n        OutputStream os = s.getOutputStream();\n        DataOutputStream dos = new DataOutputStream(os);\n        //利用这个OutputStream就可以向外发送数据了，但是没有直接发送String的方法\n        //所以我们又在OutputStream外面套了一个处理流：DataOutputStream\n        dos.writeUTF(&quot;你好&quot;);\n\n        //接收服务器端的回话--》利用输入流：\n        InputStream is = s.getInputStream();\n        DataInputStream dis = new DataInputStream(is);\n        String str = dis.readUTF();\n        System.out.println(&quot;服务器端对我说：&quot;+str);\n\n        //3.关闭流 + 关闭网络资源：\n        dis.close();\n        is.close();\n        dos.close();\n        os.close();\n        s.close();\n    &#125;\n&#125;\n\n</code></pre>\n<p>注意：关闭防火墙</p>\n<h3 id=\"功能分解3：对象流传送\"><a href=\"#功能分解3：对象流传送\" class=\"headerlink\" title=\"功能分解3：对象流传送\"></a>功能分解3：对象流传送</h3><p>封装的User类：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.Serializable;\n\n\npublic class User implements Serializable &#123;\n    private static final long serialVersionUID = 9050691344308365540L;\n    private String name;\n    private String pwd;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public String getPwd() &#123;\n        return pwd;\n    &#125;\n\n    public void setPwd(String pwd) &#123;\n        this.pwd = pwd;\n    &#125;\n\n    public User(String name, String pwd) &#123;\n        this.name = name;\n        this.pwd = pwd;\n    &#125;\n&#125;\n\n</code></pre>\n<p>客户端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.Socket;\nimport java.util.Scanner;\n\npublic class TestClient &#123;//客户端\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        //1.创建套接字：指定服务器的ip和端口号：\n        Socket s = new Socket(&quot;192.168.199.217&quot;,8888);\n\n        //录入用户的账号和密码：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入您的账号：&quot;);\n        String name = sc.next();\n        System.out.println(&quot;请录入您的密码：&quot;);\n        String pwd = sc.next();\n        //将账号和密码封装为一个User的对象：\n        User user = new User(name,pwd);\n\n\n        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：\n        OutputStream os = s.getOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(os);\n        oos.writeObject(user);\n\n\n        //接收服务器端的回话--》利用输入流：\n        InputStream is = s.getInputStream();\n        DataInputStream dis = new DataInputStream(is);\n        boolean b = dis.readBoolean();\n        if(b)&#123;\n            System.out.println(&quot;恭喜，登录成功&quot;);\n        &#125;else&#123;\n            System.out.println(&quot;对不起，登录失败&quot;);\n        &#125;\n\n        //3.关闭流 + 关闭网络资源：\n        dis.close();\n        is.close();\n        oos.close();\n        os.close();\n        s.close();\n    &#125;\n&#125;\n\n</code></pre>\n<p>服务器：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n\npublic class TestServer &#123;//服务器\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;\n        //1.创建套接字： 指定服务器的端口号\n        ServerSocket ss = new ServerSocket(8888);\n        //2.等着客户端发来的信息：\n        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket\n        //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了\n        //3.感受到的操作流：\n        InputStream is = s.getInputStream();\n        ObjectInputStream ois = new ObjectInputStream(is);\n\n        //4.读取客户端发来的数据：\n        User user = (User)(ois.readObject());\n\n        //对对象进行验证：\n        boolean flag = false;\n        if(user.getName().equals(&quot;娜娜&quot;)&amp;&amp;user.getPwd().equals(&quot;123123&quot;))&#123;\n            flag = true;\n        &#125;\n\n        //向客户端输出结果：---》操作流---》输出流\n        OutputStream os = s.getOutputStream();\n        DataOutputStream dos = new DataOutputStream(os);\n        dos.writeBoolean(flag);\n\n\n        //5.关闭流+关闭网络资源：\n        dos.close();\n        os.close();\n        ois.close();\n        is.close();\n        s.close();\n        ss.close();\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"功能分解4：加入完整的处理异常方式\"><a href=\"#功能分解4：加入完整的处理异常方式\" class=\"headerlink\" title=\"功能分解4：加入完整的处理异常方式\"></a>功能分解4：加入完整的处理异常方式</h3><p>服务器端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n\npublic class TestServer &#123;//服务器\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //1.创建套接字： 指定服务器的端口号\n        ServerSocket ss = null;\n        Socket s = null;\n        InputStream is = null;\n        ObjectInputStream ois = null;\n        OutputStream os = null;\n        DataOutputStream dos = null;\n        try &#123;\n            ss = new ServerSocket(8888);\n            //2.等着客户端发来的信息：\n            s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n            //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket\n            //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了\n            //3.感受到的操作流：\n            is = s.getInputStream();\n            ois = new ObjectInputStream(is);\n\n            //4.读取客户端发来的数据：\n            User user = (User)(ois.readObject());\n\n            //对对象进行验证：\n            boolean flag = false;\n            if(user.getName().equals(&quot;娜娜&quot;)&amp;&amp;user.getPwd().equals(&quot;123123&quot;))&#123;\n                flag = true;\n            &#125;\n\n            //向客户端输出结果：---》操作流---》输出流\n            os = s.getOutputStream();\n            dos = new DataOutputStream(os);\n            dos.writeBoolean(flag);\n        &#125; catch (IOException \\| ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //5.关闭流+关闭网络资源：\n            try &#123;\n                if(dos!=null)&#123;\n                    dos.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(os!=null)&#123;\n                    os.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(ois!=null)&#123;\n                    ois.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(is!=null)&#123;\n                    is.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(s!=null)&#123;\n                    s.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(ss!=null)&#123;\n                    ss.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n\n\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>客户端：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.Socket;\nimport java.util.Scanner;\n\n\npublic class TestClient &#123;//客户端\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args)&#123;\n        //1.创建套接字：指定服务器的ip和端口号：\n        Socket s = null;\n        OutputStream os = null;\n        ObjectOutputStream oos = null;\n        InputStream is = null;\n        DataInputStream dis = null;\n        try &#123;\n            s = new Socket(&quot;192.168.199.217&quot;,8888);\n            //录入用户的账号和密码：\n            Scanner sc = new Scanner(System.in);\n            System.out.println(&quot;请录入您的账号：&quot;);\n            String name = sc.next();\n            System.out.println(&quot;请录入您的密码：&quot;);\n            String pwd = sc.next();\n            //将账号和密码封装为一个User的对象：\n            User user = new User(name,pwd);\n            //2.对于程序员来说，向外发送数据 感受 --》利用输出流：\n            os = s.getOutputStream();\n            oos = new ObjectOutputStream(os);\n            oos.writeObject(user);\n            //接收服务器端的回话--》利用输入流：\n            is = s.getInputStream();\n            dis = new DataInputStream(is);\n            boolean b = dis.readBoolean();\n            if(b)&#123;\n                System.out.println(&quot;恭喜，登录成功&quot;);\n            &#125;else&#123;\n                System.out.println(&quot;对不起，登录失败&quot;);\n            &#125;\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally&#123;\n            //3.关闭流 + 关闭网络资源：\n            try &#123;\n                if(dis!=null)&#123;\n                    dis.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(is!=null)&#123;\n                    is.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(oos!=null)&#123;\n                    oos.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(os!=null)&#123;\n                    os.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(s!=null)&#123;\n                    s.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n\n\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"功能分解5：多线程接收用户请求\"><a href=\"#功能分解5：多线程接收用户请求\" class=\"headerlink\" title=\"功能分解5：多线程接收用户请求\"></a>功能分解5：多线程接收用户请求</h3><p>遗留问题：服务器针对一个请求服务，之后服务器就关闭了（程序自然结束了）</p>\n<p>现在需要解决：服务器必须一直在监听 ，一直开着，等待客户端的请求</p>\n<p>在当前代码中，客户端不用动了</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/55e902e4e9bedbb725045b7b82e8a9d8.png\" class=\"\">\n\n\n<p>更改服务器代码：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.Socket;\n\n\npublic class ServerThread extends Thread &#123;//线程：专门处理客户端的请求\n    InputStream is = null;\n    ObjectInputStream ois = null;\n    OutputStream os = null;\n    DataOutputStream dos = null;\n    Socket s = null;\n    public ServerThread(Socket s)&#123;\n        this.s = s;\n    &#125;\n    @Override\n    public void run() &#123;\n        try&#123;\n            //2.等着客户端发来的信息：\n\n            is = s.getInputStream();\n            ois = new ObjectInputStream(is);\n\n            //4.读取客户端发来的数据：\n            User user = (User)(ois.readObject());\n\n            //对对象进行验证：\n            boolean flag = false;\n            if(user.getName().equals(&quot;娜娜&quot;)&amp;&amp;user.getPwd().equals(&quot;123123&quot;))&#123;\n                flag = true;\n            &#125;\n\n            //向客户端输出结果：---》操作流---》输出流\n            os = s.getOutputStream();\n            dos = new DataOutputStream(os);\n            dos.writeBoolean(flag);\n        &#125;catch (IOException \\| ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125;finally &#123;\n            try &#123;\n                if(dos!=null)&#123;\n                    dos.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(os!=null)&#123;\n                    os.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(ois!=null)&#123;\n                    ois.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n            try &#123;\n                if(is!=null)&#123;\n                    is.close();\n                &#125;\n            &#125; catch (IOException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<pre><code class=\"java\">import java.io.\\*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TestServer &#123;//服务器\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;服务器启动了&quot;);\n        //1.创建套接字： 指定服务器的端口号\n        ServerSocket ss = null;\n        Socket s = null;\n        int count = 0;//定义一个计数器，用来计数 客户端的请求\n        try &#123;\n            ss = new ServerSocket(8888);\n            while(true)&#123;//加入死循环，服务器一直监听客户端是否发送数据\n                s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。\n                //每次过来的客户端的请求 靠 线程处理：\n                new ServerThread(s).start();\n                count++;\n                //输入请求的客户端的信息：\n                System.out.println(&quot;当前是第&quot;+count+&quot;个用户访问我们的服务器,对应的用户是：&quot;+s.getInetAddress());\n            &#125;\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"基于UDP的网络编程\"><a href=\"#基于UDP的网络编程\" class=\"headerlink\" title=\"基于UDP的网络编程\"></a>基于UDP的网络编程</h2><p>TCP:</p>\n<p>客户端：Socket</p>\n<p>程序感受到的 使用流 ：输出流</p>\n<p>服务器端： ServerSocket —&gt;Socket 程序感受到的 使用流 ：输入流</p>\n<p>（客户端和服务器端地位不平等。）</p>\n<p>UDP:</p>\n<p>发送方：DatagramSocket 发送：数据包 DatagramPacket</p>\n<p>接收方：DatagramSocket 接收：数据包 DatagramPacket</p>\n<p>（发送方和接收方的地址是平等的。）</p>\n<p>UDP案例： 完成网站的咨询聊天</p>\n<h3 id=\"功能分解1：单向通信-1\"><a href=\"#功能分解1：单向通信-1\" class=\"headerlink\" title=\"功能分解1：单向通信\"></a>功能分解1：单向通信</h3><p>发送方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\n\n\npublic class TestSend &#123;//发送方：\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        System.out.println(&quot;学生上线。。。&quot;);\n        //1.准备套接字： 指定发送方的端口号\n        DatagramSocket ds = new DatagramSocket(8888);\n        //2.准备数据包\n        String str = &quot;你好&quot;;\n        byte[] bytes = str.getBytes();\n        /\\*\n            需要四个参数：\n            1.指的是传送数据转为字节数组\n            2.字节数组的长度\n            3.封装接收方的ip\n            4.指定接收方的端口号\n            \\*/\n            DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),9999);\n        //发送：\n        ds.send(dp);\n\n        //关闭资源\n        ds.close();\n    &#125;\n&#125;\n\n</code></pre>\n<p>接收方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\n\n\npublic class TestReceive &#123;//接收方\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        System.out.println(&quot;老师上线了。。&quot;);\n        //1.创建套接字：指定接收方的端口\n        DatagramSocket ds = new DatagramSocket(9999);\n        //2.有一个空的数据包，打算用来接收 对方传过来的数据包：\n        byte[] b = new byte[1024];\n        DatagramPacket dp = new DatagramPacket(b,b.length);\n        //3.接收对方的数据包，然后放入我们的dp数据包中填充\n        ds.receive(dp);//接收完以后 dp里面就填充好内容了\n\n        //4.取出数据：\n        byte[] data = dp.getData();\n        String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度\n        System.out.println(&quot;学生对我说：&quot;+s);\n\n        //5.关闭资源：\n        ds.close();\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h3><h3 id=\"功能分解2：双向通信-1\"><a href=\"#功能分解2：双向通信-1\" class=\"headerlink\" title=\"功能分解2：双向通信\"></a>功能分解2：双向通信</h3><p>发送方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\npublic class TestSend &#123;//发送方：\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        System.out.println(&quot;学生上线。。。&quot;);\n        //1.准备套接字： 指定发送方的端口号\n        DatagramSocket ds = new DatagramSocket(8888);\n        //2.准备数据包\n        Scanner sc = new Scanner(System.in);\n        System.out.print(&quot;学生：&quot;);\n        String str = sc.next();\n        byte[] bytes = str.getBytes();\n        /\\*\n            需要四个参数：\n            1.指的是传送数据转为Z字节数组\n            2.字节数组的长度\n            3.封装接收方的ip\n            4.指定接收方的端口号\n            \\*/\n            DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),9999);\n        //发送：\n        ds.send(dp);\n\n        //接收老师发送回来的信息：\n        byte[] b = new byte[1024];\n        DatagramPacket dp2 = new DatagramPacket(b,b.length);\n        ds.receive(dp2);//接收完以后 dp2里面就填充好内容了\n\n        //取出数据：\n        byte[] data = dp2.getData();\n        String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度\n        System.out.println(&quot;老师对我说：&quot;+s);\n\n        //关闭资源\n        ds.close();\n    &#125;\n&#125;\n\n</code></pre>\n<p>接收方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\nimport java.util.Scanner;\n\n\npublic class TestReceive &#123;//接收方\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws IOException &#123;\n        System.out.println(&quot;老师上线了。。&quot;);\n        //1.创建套接字：指定接收方的端口\n        DatagramSocket ds = new DatagramSocket(9999);\n        //2.有一个空的数据包，打算用来接收 对方传过来的数据包：\n        byte[] b = new byte[1024];\n        DatagramPacket dp = new DatagramPacket(b,b.length);\n        //3.接收对方的数据包，然后放入我们的dp数据包中填充\n        ds.receive(dp);//接收完以后 dp里面就填充好内容了\n\n        //4.取出数据：\n        byte[] data = dp.getData();\n        String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度\n        System.out.println(&quot;学生对我说：&quot;+s);\n\n        //老师进行回复：\n        Scanner sc = new Scanner(System.in);\n        System.out.print(&quot;老师：&quot;);\n        String str = sc.next();\n        byte[] bytes = str.getBytes();\n        //封装数据，并且指定学生的ip和端口号\n        DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),8888);\n        //发送：\n        ds.send(dp2);\n        //5.关闭资源：\n        ds.close();\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"功能分解3：加入完整的处理异常方式\"><a href=\"#功能分解3：加入完整的处理异常方式\" class=\"headerlink\" title=\"功能分解3：加入完整的处理异常方式\"></a>功能分解3：加入完整的处理异常方式</h3><p>发送方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\n\npublic class TestSend &#123;//发送方：\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;学生上线。。。&quot;);\n        //1.准备套接字： 指定发送方的端口号\n        DatagramSocket ds = null;\n        try &#123;\n            ds = new DatagramSocket(8888);\n            //2.准备数据包\n            Scanner sc = new Scanner(System.in);\n            System.out.print(&quot;学生：&quot;);\n            String str = sc.next();\n            byte[] bytes = str.getBytes();\n            /\\*\n                需要四个参数：\n                1.指的是传送数据转为Z字节数组\n                2.字节数组的长度\n                3.封装接收方的ip\n                4.指定接收方的端口号\n                \\*/\n                DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),9999);\n            //发送：\n            ds.send(dp);\n\n            //接收老师发送回来的信息：\n            byte[] b = new byte[1024];\n            DatagramPacket dp2 = new DatagramPacket(b,b.length);\n            ds.receive(dp2);//接收完以后 dp2里面就填充好内容了\n\n            //取出数据：\n            byte[] data = dp2.getData();\n            String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度\n            System.out.println(&quot;老师对我说：&quot;+s);\n        &#125; catch (SocketException e) &#123;\n            e.printStackTrace();\n        &#125; catch (UnknownHostException e) &#123;\n            e.printStackTrace();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //关闭资源\n            ds.close();\n        &#125;\n\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>接收方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\npublic class TestReceive &#123;//接收方\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args)&#123;\n        System.out.println(&quot;老师上线了。。&quot;);\n        //1.创建套接字：指定接收方的端口\n        DatagramSocket ds = null;\n        try &#123;\n            ds = new DatagramSocket(9999);\n            //2.有一个空的数据包，打算用来接收 对方传过来的数据包：\n            byte[] b = new byte[1024];\n            DatagramPacket dp = new DatagramPacket(b,b.length);\n            //3.接收对方的数据包，然后放入我们的dp数据包中填充\n            ds.receive(dp);//接收完以后 dp里面就填充好内容了\n\n            //4.取出数据：\n            byte[] data = dp.getData();\n            String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度\n            System.out.println(&quot;学生对我说：&quot;+s);\n\n            //老师进行回复：\n            Scanner sc = new Scanner(System.in);\n            System.out.print(&quot;老师：&quot;);\n            String str = sc.next();\n            byte[] bytes = str.getBytes();\n            //封装数据，并且指定学生的ip和端口号\n            DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),8888);\n            //发送：\n            ds.send(dp2);\n        &#125; catch (SocketException e) &#123;\n            e.printStackTrace();\n        &#125; catch (UnknownHostException e) &#123;\n            e.printStackTrace();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //5.关闭资源：\n            ds.close();\n        &#125;\n\n\n\n\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"功能分解4：正常通信\"><a href=\"#功能分解4：正常通信\" class=\"headerlink\" title=\"功能分解4：正常通信\"></a>功能分解4：正常通信</h3><p>发送方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\npublic class TestSend &#123;//发送方：\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        System.out.println(&quot;学生上线。。。&quot;);\n        //1.准备套接字： 指定发送方的端口号\n        DatagramSocket ds = null;\n        try &#123;\n            ds = new DatagramSocket(8888);\n            while(true)&#123;\n                //2.准备数据包\n                Scanner sc = new Scanner(System.in);\n                System.out.print(&quot;学生：&quot;);\n                String str = sc.next();\n\n                byte[] bytes = str.getBytes();\n                /\\*\n                    需要四个参数：\n                    1.指的是传送数据转为Z字节数组\n                    2.字节数组的长度\n                    3.封装接收方的ip\n                    4.指定接收方的端口号\n                    \\*/\n                    DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),9999);\n                //发送：\n                ds.send(dp);\n                if(str.equals(&quot;byebye&quot;))&#123;\n                    System.out.println(&quot;学生下线。。&quot;);\n                    break;\n                &#125;\n                //接收老师发送回来的信息：\n                byte[] b = new byte[1024];\n                DatagramPacket dp2 = new DatagramPacket(b,b.length);\n                ds.receive(dp2);//接收完以后 dp2里面就填充好内容了\n\n                //取出数据：\n                byte[] data = dp2.getData();\n                String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度\n                System.out.println(&quot;老师对我说：&quot;+s);\n            &#125;\n        &#125; catch (SocketException e) &#123;\n            e.printStackTrace();\n        &#125; catch (UnknownHostException e) &#123;\n            e.printStackTrace();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //关闭资源\n            ds.close();\n        &#125;\n\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>接收方：</p>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code class=\"java\">import java.io.IOException;\nimport java.net.\\*;\nimport java.util.Scanner;\n\n\npublic class TestReceive &#123;//接收方\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args)&#123;\n        System.out.println(&quot;老师上线了。。&quot;);\n        //1.创建套接字：指定接收方的端口\n        DatagramSocket ds = null;\n        try &#123;\n            ds = new DatagramSocket(9999);\n            while(true)&#123;\n                //2.有一个空的数据包，打算用来接收 对方传过来的数据包：\n                byte[] b = new byte[1024];\n                DatagramPacket dp = new DatagramPacket(b,b.length);\n                //3.接收对方的数据包，然后放入我们的dp数据包中填充\n                ds.receive(dp);//接收完以后 dp里面就填充好内容了\n\n                //4.取出数据：\n                byte[] data = dp.getData();\n                String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度\n                System.out.println(&quot;学生对我说：&quot;+s);\n                if(s.equals(&quot;byebye&quot;))&#123;\n                    System.out.println(&quot;学生已经下线了，老师也下线。。。&quot;);\n                    break;\n                &#125;\n\n                //老师进行回复：\n                Scanner sc = new Scanner(System.in);\n                System.out.print(&quot;老师：&quot;);\n                String str = sc.next();\n                byte[] bytes = str.getBytes();\n                //封装数据，并且指定学生的ip和端口号\n                DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&quot;localhost&quot;),8888);\n                //发送：\n                ds.send(dp2);\n            &#125;\n        &#125; catch (SocketException e) &#123;\n            e.printStackTrace();\n        &#125; catch (UnknownHostException e) &#123;\n            e.printStackTrace();\n        &#125; catch (IOException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            //5.关闭资源：\n            ds.close();\n        &#125;\n\n\n\n\n    &#125;\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/",
            "title": "第15章Junit注解_枚举",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"第15章-Junit-注解-枚举\"><a href=\"#第15章-Junit-注解-枚举\" class=\"headerlink\" title=\"第15章_Junit_注解_枚举\"></a>第15章_Junit_注解_枚举</h1><h1 id=\"Junit单元测试\"><a href=\"#Junit单元测试\" class=\"headerlink\" title=\"Junit单元测试\"></a>Junit单元测试</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>【1】软件测试的目的：</p>\n<p>软件测试的目的是在规定的条件下对程序进行操作,以发现程序错误,衡量软件质量,并对其是否能满足设计要求进行评估的过程。</p>\n<p>【2】测试分类：</p>\n<p>（1）黑盒测试：</p>\n<p>软件的黑盒测试意味着测试要在软件的接口处进行。这种方法是把测试对象看做一个黑盒子,测试人员完全不考虑程序内部的逻辑结构和内部特性,只依据程序的需求规格说明书,检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试。</p>\n<p>（2）白盒测试：—》Junit属于白盒测试。</p>\n<p>软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看做一个打开的盒子,它允许测试人员利用程序内部的逻辑结构及有关信息,设计或选择测试用例,对程序的所有逻辑路径进行测试,通过在不同点检查程序状态,确定实际状态是否与预期的状态一致。因此白盒测试又称为结构测试。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/42a7ac6afb1bc65c1526524fb22c0cf6.png\" class=\"\">\n\n\n<h2 id=\"没有Junit的情况下如何测试\"><a href=\"#没有Junit的情况下如何测试\" class=\"headerlink\" title=\"没有Junit的情况下如何测试\"></a>没有Junit的情况下如何测试</h2><p>在没有使用Junit的时候，缺点：</p>\n<p>（1）测试一定走main方法，是程序的入口，main方法的格式必须不能写错。</p>\n<p>（2）要是在同一个main方法中测试的话，那么不需要测试的东西必须注释掉。</p>\n<p>（3）测试逻辑如果分开的话，需要定义多个测试类，麻烦。</p>\n<p>（4）业务逻辑和测试代码，都混淆了。</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class Calculator &#123;\n    //加法：\n    public int add(int a,int b)&#123;\n        return a+b;\n    &#125;\n\n    //减法：\n    public int sub(int a,int b)&#123;\n        return a-b;\n    &#125;\n&#125;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //测试加法：\n        Calculator cal = new Calculator();\n        int result = cal.add(10, 20);\n        System.out.println(result);\n        //测试减法：\n        /\\* int result = cal.sub(30, 10);\n        System.out.println(result);\\*/\n    &#125;\n&#125;\npublic class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Calculator cal = new Calculator();\n        //测试减法：\n        int result = cal.sub(30, 10);\n        System.out.println(result);\n    &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"Junit的使用\"><a href=\"#Junit的使用\" class=\"headerlink\" title=\"Junit的使用\"></a>Junit的使用</h2><p>【1】一般测试和业务做一个分离，分离为不同的包：</p>\n<p>建议起名：公司域名倒着写+test</p>\n<p>以后测试类就单独放在这个包下</p>\n<p>【2】测试类的名字：****Test —&gt;见名知意</p>\n<p>【3】测试方法的定义–》这个方法可以独立运行，不依托于main方法</p>\n<p>建议：</p>\n<p>名字：testAdd() testSub() 见名知意</p>\n<p>参数：无参</p>\n<p>返回值：void</p>\n<p>【4】测试方法定义完以后，不能直接就独立运行了，必须要在方法前加入一个注解： @Test</p>\n<p>【5】导入Junit的依赖的环境：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/46fb99bb996eae46795d2c8db94485f6.png\" class=\"\">\n\n\n<p>【6】代码：</p>\n<pre><code class=\"java\">public class CalculatorTest &#123;\n    //测试add方法\n    @Test\n    public void testAdd()&#123;\n        System.out.println(&quot;测试add方法&quot;);\n        Calculator cal = new Calculator();\n        int result = cal.add(10, 30);\n        System.out.println(result);\n    &#125;\n\n    //测试sub方法\n    @Test\n    public void testSub()&#123;\n        System.out.println(&quot;测试sub方法&quot;);\n        Calculator cal = new Calculator();\n        int result = cal.sub(10, 30);\n        System.out.println(result);\n    &#125;\n&#125;\n\n</code></pre>\n<p>【7】判定结果：</p>\n<p>绿色：正常结果</p>\n<p>红色：出现异常</p>\n<p>【8】即使出现绿色效果，也不意味着你的测试就通过了，因为代码中逻辑也可能出现问题，这种情况怎么解决呢？</p>\n<p>加入断言</p>\n<pre><code class=\"java\">public class CalculatorTest &#123;\n    //测试add方法\n    @Test\n    public void testAdd()&#123;\n        System.out.println(&quot;测试add方法&quot;);\n        Calculator cal = new Calculator();\n        int result = cal.add(10, 30);\n        //System.out.println(result);--》程序的运行结果可以不关注\n        //加入断言：预测一下结果，判断一下我预测的结果和 实际的结果是否一致：\n        Assert.assertEquals(40,result);//第一个参数：预测结果 第二个参数：实际结果\n    &#125;\n\n    //测试sub方法\n    @Test\n    public void testSub()&#123;\n        System.out.println(&quot;测试sub方法&quot;);\n        Calculator cal = new Calculator();\n        int result = cal.sub(10, 30);\n        System.out.println(result);\n    &#125;\n&#125;\n\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/f28545eda706a96a1dc81a62bd94b0b6.png\" class=\"\">\n\n\n<h2 id=\"Before-After\"><a href=\"#Before-After\" class=\"headerlink\" title=\"@Before_@After\"></a>@Before_@After</h2><p>@Before:</p>\n<p>某一个方法中，加入了@Before注解以后，那么这个方法中的功能会在测试方法执行前先执行</p>\n<p>一般会在@Beforer修饰的那个方法中加入：加入一些申请资源的代码：申请数据库资源，申请IO资源，申请网络资源。。。</p>\n<p>@After:</p>\n<p>某一个方法中，加入了@After注解以后，那么这个方法中的功能会在测试方法执行后先执行</p>\n<p>一般会在@After修饰的那个方法中加入：加入释放资源的代码：释放数据库资源，释放IO资源，释放网络资源。。。</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class CalculatorTest &#123;\n    @Before\n    public void init()&#123;\n        System.out.println(&quot;方法执行开始了。。。&quot;);\n    &#125;\n    @After\n    public void close()&#123;\n        System.out.println(&quot;方法执行结束了。。。&quot;);\n    &#125;\n    //测试add方法\n    @Test\n    public void testAdd()&#123;\n        System.out.println(&quot;测试add方法&quot;);\n        Calculator cal = new Calculator();\n        int result = cal.add(10, 30);\n        //System.out.println(result);--》程序的运行结果可以不关注\n        //加入断言：预测一下结果，判断一下我预测的结果和 实际的结果是否一致：\n        Assert.assertEquals(40,result);//第一个参数：预测结果 第二个参数：实际结果\n    &#125;\n\n    //测试sub方法\n    @Test\n    public void testSub()&#123;\n        System.out.println(&quot;测试sub方法&quot;);\n        Calculator cal = new Calculator();\n        int result = cal.sub(10, 30);\n        System.out.println(result);\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><h2 id=\"引入-1\"><a href=\"#引入-1\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>【1】历史：</p>\n<p>JDK5.0 新增 — 注解（Annotation）,也叫元数据</p>\n<p>【2】什么是注解？</p>\n<p>注解其实就是代码里的特殊标记，这些标记可以在编译,类加载,运行时被读取,并执行相应的处理。通过使用注解,程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。</p>\n<p>使用注解时要在其前面增加@符号,并把该注解当成一个修饰符使用。用于修饰它支持的程序元素。</p>\n<p>【3】注解的重要性：</p>\n<p>Annotation 可以像修饰符一样被使用，可用于修饰包，类，构造器,方法，成员变量,参数，局部变量的声明，这些信息被保存在Annotation的”name&#x3D;value”对中。在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE&#x2F;ArIdroid中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。未来的开发模式都是基于注解的，JPA(java的持久化API)是基于注解的，Spring2.5以. E都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说 ：框架&#x3D;注解+反射+设计模式。</p>\n<h2 id=\"注解的使用实例\"><a href=\"#注解的使用实例\" class=\"headerlink\" title=\"注解的使用实例\"></a>注解的使用实例</h2><h3 id=\"Junit的注解\"><a href=\"#Junit的注解\" class=\"headerlink\" title=\"Junit的注解\"></a>Junit的注解</h3><p>@Test</p>\n<p>@Before</p>\n<p>@After</p>\n<p>代码：</p>\n<pre><code class=\"java\">\n\n public class CalculatorTest &#123;\n @Before\n public void init()&#123;\n System.out.println(&quot;方法执行开始了。。。&quot;);\n &#125;\n @After\n public void close()&#123;\n System.out.println(&quot;方法执行结束了。。。&quot;);\n &#125;\n @Test\n public void testAdd()&#123;\n System.out.println(&quot;测试add方法&quot;);\n Calculator cal = new Calculator();\n int result = cal.add(10, 30);\n Assert.assertEquals(40,result);//第一个参数：预测结果 第二个参数：实际结果\n &#125;\n &#125;\n</code></pre>\n<h3 id=\"文档相关的注解\"><a href=\"#文档相关的注解\" class=\"headerlink\" title=\"文档相关的注解\"></a>文档相关的注解</h3><p>说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。</p>\n<p>说明注释，使你更加方便的记录你的程序信息。</p>\n<p>文档注解我们一般使用在文档注释中，配合javadoc工具</p>\n<p>javadoc 工具软件识别以下标签：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/23874004c970e81a5f5e4f59177c0a6f.png\" class=\"\">\n\n\n<p>其中注意：</p>\n<p>Ø @param @return和@exception这三个标记都是只用于方法的。</p>\n<p>Ø @param的格式要求: @param 形参名 形参类型 形参说明</p>\n<p>Ø @return的格式要求: @return 返回值类型返回值说明，如果方法的返回值类型是void就不能写</p>\n<p>Ø @exception的格式要求: @exception 异常类型异常说明</p>\n<p>Ø @param和@exception可以并列多个</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class Person &#123;\n    /**\n * 下面是eat方法，实现了XXX功能。\n * @param num1 就餐人数\n * @param num2 点了几个菜\n */\n    public void eat(int num1,int num2)&#123;\n\n    &#125;\n\n    /\\*\\*\n        \\* @param age 年龄\n        \\* @return int\n        \\* @exception RuntimeException 当年龄过大的时候\n        \\* @exception IndexOutOfBoundsException 当年龄过小的时候\n        \\* @see Student\n        \\*/\n        public int sleep(int age)&#123;\n        new Student();\n        if(age\\&gt;100)&#123;\n            throw new RuntimeException();\n        &#125;\n        if(age\\&lt;0)&#123;\n            throw new IndexOutOfBoundsException();\n        &#125;\n        return 10;\n    &#125;\n&#125;\n</code></pre>\n<p>IDEA中的javadoc使用：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/1887cd6739c2f89c5a4ef2d33ec03b55.png\" class=\"\">\n\n\n<p>防止乱码：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/7fe5daf476aadfa53d22106b5979d514.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/010eb501804b4f0f6a550a3a3c8617a2.png\" class=\"\">\n\n\n<h3 id=\"JDK内置的3个注解\"><a href=\"#JDK内置的3个注解\" class=\"headerlink\" title=\"JDK内置的3个注解\"></a>JDK内置的3个注解</h3><p>@Override:限定重写父类方法，该注解只能用于方法</p>\n<pre><code class=\"java\">\n</code></pre>\n<p>| ———————————————————— |</p>\n<pre><code class=\"java\">\n</code></pre>\n<p>@Deprecated:用于表示所修饰的元素(类,方法，构造器，属性等)已过时。通常是因为所修饰的结构危险或存在更好的选择</p>\n<pre><code class=\"java\">public class Student extends Person &#123;\n    /\\*\n        @Override的作用：限定重写的方法，只要重写方法有问题，就有错误提示。\n        \\*/\n        @Override\n        public void eat()&#123;\n        System.out.println(&quot;子类eat..&quot;);\n    &#125;\n    /\\*\n        在方法前加入@Deprecated，这个方法就会变成一个废弃方法/过期方法/过时方法\n        \\*/\n\n        @Deprecated\n        public void study()&#123;\n        System.out.println(&quot;学习。。&quot;);\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/e87bd738286630379a4436ddeb991a7f.png\" class=\"\">\n\n\n<p>@SuppressWarnings:抑制编译器警告</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        @SuppressWarnings(&quot;unused&quot;)\n        int age = 10;\n\n        int num = 10;\n        System.out.println(num);\n        @SuppressWarnings(&#123;&quot;unused&quot;,&quot;rwatypes&quot;&#125;)\n        ArrayList al = new ArrayList();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"实现替代配置文件功能的注解\"><a href=\"#实现替代配置文件功能的注解\" class=\"headerlink\" title=\"实现替代配置文件功能的注解\"></a>实现替代配置文件功能的注解</h3><p>在servlet3.0之前的配置：</p>\n<table>\n<thead>\n<tr>\n<th>&lt;?xml version&#x3D;”1.0” encoding&#x3D;”UTF-8”?&gt;  &lt;web-app xmlns&#x3D;”<span class=\"exturl\" data-url=\"aHR0cDovL3htbG5zLmpjcC5vcmcveG1sL25zL2phdmFlZSZxdW90Ow==\">http://xmlns.jcp.org/xml/ns/javaee&quot;</span>   xmlns:xsi&#x3D;”<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UmcXVvdDs=\">http://www.w3.org/2001/XMLSchema-instance&quot;</span>   xsi:schemaLocation&#x3D;”<span class=\"exturl\" data-url=\"aHR0cDovL3htbG5zLmpjcC5vcmcveG1sL25zL2phdmFlZQ==\">http://xmlns.jcp.org/xml/ns/javaee</span> <span class=\"exturl\" data-url=\"aHR0cDovL3htbG5zLmpjcC5vcmcveG1sL25zL2phdmFlZS93ZWItYXBwXzRfMC54c2QmcXVvdDs=\">http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span>   version&#x3D;”4.0”&gt;   &lt;!–配置Servlet–&gt;   &lt;!–配置Servlet的信息–&gt;   &lt;servlet&gt;   &lt;servlet-name&gt;HelloServlet&lt;&#x2F;servlet-name&gt;   &lt;servlet-class&gt;com.bjsxt.servlet.HelloServlet&lt;&#x2F;servlet-class&gt;   &lt;&#x2F;servlet&gt;   &lt;!–配置Servlet的映射路径–&gt;   &lt;servlet-mapping&gt;   &lt;servlet-name&gt;HelloServlet&lt;&#x2F;servlet-name&gt;   &lt;!–<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLzAxLWhlbGxvLXNlcnZsZXQvaGVsbG8tLS8mZ3Q7\">http://localhost:8080/01-hello-servlet/hello--\\&gt;</span>   &lt;url-pattern&gt;&#x2F;hello&lt;&#x2F;url-pattern&gt;   &lt;&#x2F;servlet-mapping&gt;  &lt;&#x2F;web-app&gt;</th>\n</tr>\n</thead>\n</table>\n<p>在servlet3.0之后使用注解：替代配置文件。</p>\n<pre><code class=\"java\">\n</code></pre>\n<p>|——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————–|</p>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><p>【1】自定义注解使用很少，一般情况下都是用现成的注解。</p>\n<p>【2】如何自定义注解：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/4b5d48a592cbac3d289f687d5e9ec1e7.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/1f30647690be446463b91286618f3176.png\" class=\"\">\n\n\n<p>发现定义的注解的声明使用的关键字：<span class=\"exturl\" data-url=\"ZmlsZTovLy9EOlzkuIvovb1AaW50ZXJmYWNl\">@interface</span>，跟接口没有一点关系。</p>\n<p>【3】注解的内部：</p>\n<p>以<span class=\"exturl\" data-url=\"ZmlsZTovLy9EOlzkuIvovb1AU3VwcHJlc3NXYXJuaW5ncw==\">@SuppressWarnings</span>为例，发现内部：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/258a1b996f98d74fa67f5511b0957b01.png\" class=\"\">\n\n\n<p>这value是属性还是方法？</p>\n<p>答案：看上去是无参数方法，实际上理解为一个成员变量，一个属性</p>\n<p>无参数方法名字–》成员变量的名字</p>\n<p>无参数方法的返回值–》成员变量的类型</p>\n<p>这个参数叫 配置参数</p>\n<p>无参数方法的类型：基本数据类型（八种），String，枚举，注解类型，还可以是以上类型对应的数组。</p>\n<p>PS：注意：如果只有一个成员变量的话，名字尽量叫value。</p>\n<p>【4】使用注解：</p>\n<p>（1）使用注解的话，如果你定义了配置参数，就必须给配置参数进行赋值操作：</p>\n<pre><code class=\"java\">@MyAnnotation(value=&#123;&quot;abc&quot;,&quot;def&quot;,&quot;hij&quot;&#125;)\npublic class Person &#123;\n &#125;\n</code></pre>\n<p>（2）如果只有一个参数，并且这个参数的名字为value的话，那么value&#x3D;可以省略不写。</p>\n<pre><code class=\"java\">@MyAnnotation(&#123;&quot;abc&quot;,&quot;def&quot;,&quot;hij&quot;&#125;)\npublic class Person &#123;\n &#125;\n</code></pre>\n<p>（3）如果你给配置参数设置默认的值了，那么使用的时候可以无需传值：</p>\n<ol>\n<li>public @interface MyAnnotation2 {</li>\n<li>String value() default “abc”;</li>\n<li>}</li>\n</ol>\n<p>使用：</p>\n<pre><code class=\"java\">@MyAnnotation2\n@MyAnnotation(&#123;&quot;abc&quot;,&quot;def&quot;,&quot;hij&quot;&#125;)\npublic class Person &#123;\n    \n &#125;\n</code></pre>\n<p>（4）一个注解的内部是可以不定义配置参数的：</p>\n<pre><code class=\"java\">  public @interface MyAnnotation3 &#123;\n  &#125;\n</code></pre>\n<p>内部没有定义配置参数的注解–》可以叫做标记</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/5a3c24803c3f8ed92d3272ac78b52ce7.png\" class=\"\">\n\n\n<p>内部定义配置参数的注解–》元数据</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/0f6376fb4928988abc36de912ae6e857.png\" class=\"\">\n\n\n<p>【5】注解的使用：</p>\n<p>现在只学习注解的大致技能点，具体怎么应用 后面慢慢学习。</p>\n<h2 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h2><p>元注解是用于修饰其它注解的注解。</p>\n<p>举例：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/34f66e3c7b9665d0d116172ef2d023e3.png\" class=\"\">\n\n\n<p>JDK5.0提供了四种元注解：Retention, Target, Documented, Inherited</p>\n<h3 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"Retention\"></a>Retention</h3><p>@Retention:用于修饰注解，用于指定修饰的那个注解的生命周期，@Rentention包含一个RetentionPolicy枚举类型的成员变量,使用@Rentention时必须为该value成员变量指定值:</p>\n<p>➢RetentionPolicy.SOURCE:在源文件中有效(即源文件保留),编译器直接丢弃这种策略的注释，在.class文件中不会保留注解信息</p>\n<p>案例：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/d3e2e82ebd228e73e7c31cc574e94c62.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/4d2c3bc743b41c72b97faabb8603e63d.png\" class=\"\">\n\n\n<p>反编译查看字节码文件：发现字节码文件中没有MyAnnotation这个注解：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/ef82a6553de8c7049479945ca1d4435e.png\" class=\"\">\n\n\n<p>➢RetentionPolicy.CLASS:在class文件中有效(即class保留)，保留在.class文件中，但是当运行Java程序时，他就不会继续加载了，不会保留在内存中，JVM不会保留注解。如果注解没有加Retention元注解，那么相当于默认的注解就是这种状态。</p>\n<p>案例：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/f23af522879c92eb18b5b6a6de68eb92.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/b6d188929cf9db1376241c79683d1e86.png\" class=\"\">\n\n\n<p>反编译看字节码文件，字节码文件中带有MyAnnotation注解：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/ce86fb17bc2a2f453556cdbac9a35524.png\" class=\"\">\n\n\n<p>➢RetentionPolicy.RUNTIME:在运行时有效(即运行时保留),当运行 Java程序时，JVM会保留注释，加载在内存中了，那么程序可以通过反射获取该注释。</p>\n<h3 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"Target\"></a>Target</h3><p>用于修饰注解的注解，用于指定被修饰的注解能用于修饰哪些程序元素。@Target也包含一个名为value的成员变量。</p>\n<p>案例：</p>\n<pre><code class=\"java\">@Target(&#123;TYPE,CONSTRUCTOR,METHOD&#125;)\npublic @interface MyAnnotation4 &#123;\n&#125;\n</code></pre>\n<p>使用：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/f7fc8775a65c517683db05e1714142d4.png\" class=\"\">\n\n\n<h3 id=\"Documented（很少）\"><a href=\"#Documented（很少）\" class=\"headerlink\" title=\"Documented（很少）\"></a>Documented（很少）</h3><p>用于指定被该元注解修饰的注解类将被javadoc工具提取成文档。默认情况下，javadoc是 不包括注解的，但是加上了这个注解生成的文档中就会带着注解了</p>\n<p>案例：</p>\n<p>如果：Documented注解修饰了Deprecated注解，</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/2c2e47e5817fc9dce848588c74c99fca.png\" class=\"\">\n\n\n<p>那么Deprecated注解就会在javadoc提取的时候，提取到API中：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/eaffd4880e967c3b2924741f4ce2213c.png\" class=\"\">\n\n\n<h3 id=\"Inherited（极少）\"><a href=\"#Inherited（极少）\" class=\"headerlink\" title=\"Inherited（极少）\"></a>Inherited（极少）</h3><p>被它修饰的Annotation将具有继承性。如果某个类使用了被</p>\n<p>@Inherited修饰的Annotation,则其子类将自动具有该注解。</p>\n<p>案例：</p>\n<p>注解：如果MyAnno注解使用了@Inherited之后，就具备了继承性，那么相当于子类Student也使用了这个MyAnno</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/30e71681fd1e8664b949a536691dc82f.png\" class=\"\">\n\n\n<p>父类：  </p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/2a385f34e462174022fc8abb73112b4f.png\" class=\"\">\n\n\n<p>子类：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/0f863775e4fc46e421d2a5189572c538.png\" class=\"\">\n\n\n<h1 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h1><h2 id=\"引入-2\"><a href=\"#引入-2\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>【1】数学：枚举法：</p>\n<p>1&lt;x&lt;4</p>\n<p>2&lt;y&lt;5</p>\n<p>求x+y&#x3D;6</p>\n<p>枚举法：一枚一枚的列举出来。前提：有限，确定</p>\n<p>【2】在java中，类的对象是有限个，确定的。这个类我们可以定义为枚举类。</p>\n<p>举例：</p>\n<p>星期：一二三四五六日</p>\n<p>性别：男女</p>\n<p>季节：春夏秋冬</p>\n<p>【3】自定义枚举类：（JDK1.5之前自定义枚举类）</p>\n<ol start=\"2\">\n<li></li>\n<li>&#x2F;**</li>\n<li>* @author : msb-zhaoss</li>\n<li>* 定义枚举类：季节</li>\n<li>*&#x2F;</li>\n</ol>\n<pre><code class=\"java\">public class Season &#123;\n    //属性：\n    private final String seasonName ;//季节名字\n    private final String seasonDesc ;//季节描述\n    //利用构造器对属性进行赋值操作：\n    //构造器私有化，外界不能调用这个构造器，只能Season内部自己调用\n    private Season(String seasonName,String seasonDesc)&#123;\n        this.seasonName = seasonName;\n        this.seasonDesc = seasonDesc;\n    &#125;\n\n    //提供枚举类的有限的 确定的对象：\n    public static final Season SPRING = new Season(&quot;春天&quot;,&quot;春暖花开&quot;);\n    public static final Season SUMMER = new Season(&quot;夏天&quot;,&quot;烈日炎炎&quot;);\n    public static final Season AUTUMN = new Season(&quot;秋天&quot;,&quot;硕果累累&quot;);\n    public static final Season WINTER = new Season(&quot;冬天&quot;,&quot;冰天雪地&quot;);\n\n    //额外因素：\n\n    public String getSeasonName() &#123;\n        return seasonName;\n    &#125;\n\n    public String getSeasonDesc() &#123;\n        return seasonDesc;\n    &#125;\n\n    //toString();\n\n    @Override\n    public String toString() &#123;\n        return &quot;Season&#123;&quot; +\n            &quot;seasonName=&#39;&quot; + seasonName + &#39;\\\\&#39;&#39; +\n            &quot;, seasonDesc=&#39;&quot; + seasonDesc + &#39;\\\\&#39;&#39; +\n            &#39;&#125;&#39;;\n    &#125;\n&#125;\n\n</code></pre>\n<p>测试类：</p>\n<pre><code class=\"java\">public class TestSeason &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Season summer = Season.SUMMER;\n        System.out.println(summer/\\*.toString()\\*/);\n        System.out.println(summer.getSeasonName());\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"JDK1-5之后使用enum关键字来创建枚举类\"><a href=\"#JDK1-5之后使用enum关键字来创建枚举类\" class=\"headerlink\" title=\"JDK1_5之后使用enum关键字来创建枚举类\"></a>JDK1_5之后使用enum关键字来创建枚举类</h2><p>JDK1.5以后使用enum关键字创建枚举类：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/657e63e35654f2386483ef6f014c3be2.png\" class=\"\">\n\n\n<p>变为下面的枚举类：</p>\n<pre><code class=\"java\">public enum Season &#123;\n    //提供枚举类的有限的 确定的对象：---\\&gt;enum枚举类要求对象（常量）必须放在最开始位置\n    //多个对象之间用，进行连接，最后一个对象后面用;结束\n    SPRING(&quot;春天&quot;,&quot;春暖花开&quot;),\n    SUMMER(&quot;夏天&quot;,&quot;烈日炎炎&quot;),\n    AUTUMN(&quot;秋天&quot;,&quot;硕果累累&quot;),\n    WINTER(&quot;冬天&quot;,&quot;冰天雪地&quot;);\n    //属性：\n    private final String seasonName ;//季节名字\n    private final String seasonDesc ;//季节描述\n    //利用构造器对属性进行赋值操作：\n    //构造器私有化，外界不能调用这个构造器，只能Season内部自己调用\n    private Season(String seasonName, String seasonDesc)&#123;\n        this.seasonName = seasonName;\n        this.seasonDesc = seasonDesc;\n    &#125;\n\n\n\n    //额外因素：\n\n    public String getSeasonName() &#123;\n        return seasonName;\n    &#125;\n\n    public String getSeasonDesc() &#123;\n        return seasonDesc;\n    &#125;\n\n    //toString();\n\n    @Override\n    public String toString() &#123;\n        return &quot;Season&#123;&quot; +\n            &quot;seasonName=&#39;&quot; + seasonName + &#39;\\\\&#39;&#39; +\n            &quot;, seasonDesc=&#39;&quot; + seasonDesc + &#39;\\\\&#39;&#39; +\n            &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n<p>使用枚举类：</p>\n<pre><code class=\"java\">public class TestSeason &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Season winter = Season.WINTER;\n        System.out.println(winter);\n        //enum关键字对应的枚举类的上层父类是 ：java.lang.Enum\n        //但是我们自定义的枚举类的上层父类：Object\n        System.out.println(Season.class.getSuperclass().getName());//java.lang.Enum\n    &#125;\n&#125;\n\n</code></pre>\n<p>在源码中经常看到别人定义的枚举类形态：</p>\n<pre><code class=\"java\">public enum Season &#123;\n    SPRING,\n    SUMMER,\n    AUTUMN,\n    WINTER;\n&#125;\n</code></pre>\n<p>为什么这么简单：因为这个枚举类底层没有属性，属性，构造器，toString，get方法都删掉不写了，然后案例来说应该</p>\n<p>写为：SPRING() 现在连（）可以省略 就变成 SPRING</p>\n<p>看到的形态就剩：常量名（对象名）</p>\n<p>案例：Thread中的枚举类：State</p>\n<pre><code class=\"java\">\npublic enum State &#123;\n    /\\*\\*\n        \\* Thread state for a thread which has not yet started.\n            \\*/\n            NEW,\n\n    /\\*\\*\n        \\* Thread state for a runnable thread. A thread in the runnable\n            \\* state is executing in the Java virtual machine but it may\n            \\* be waiting for other resources from the operating system\n                \\* such as processor.\n                \\*/\n                RUNNABLE,\n\n    /\\*\\*\n        \\* Thread state for a thread blocked waiting for a monitor lock.\n            \\* A thread in the blocked state is waiting for a monitor lock\n                \\* to enter a synchronized block/method or\n                \\* reenter a synchronized block/method after calling\n                \\* &#123;@link Object\\#wait() Object.wait&#125;.\n                \\*/\n                BLOCKED,\n\n    /\\*\\*\n        \\* Thread state for a waiting thread.\n            \\* A thread is in the waiting state due to calling one of the\n            \\* following methods:\n    \\* \\&lt;ul\\&gt;\n        \\* \\&lt;li\\&gt;&#123;@link Object\\#wait() Object.wait&#125; with no timeout\\&lt;/li\\&gt;\n        \\* \\&lt;li\\&gt;&#123;@link \\#join() Thread.join&#125; with no timeout\\&lt;/li\\&gt;\n        \\* \\&lt;li\\&gt;&#123;@link LockSupport\\#park() LockSupport.park&#125;\\&lt;/li\\&gt;\n        \\* \\&lt;/ul\\&gt;\n        \\*\n        \\* \\&lt;p\\&gt;A thread in the waiting state is waiting for another thread to\n            \\* perform a particular action.\n            \\*\n            \\* For example, a thread that has called \\&lt;tt\\&gt;Object.wait()\\&lt;/tt\\&gt;\n            \\* on an object is waiting for another thread to call\n                \\* \\&lt;tt\\&gt;Object.notify()\\&lt;/tt\\&gt; or \\&lt;tt\\&gt;Object.notifyAll()\\&lt;/tt\\&gt; on\n                \\* that object. A thread that has called \\&lt;tt\\&gt;Thread.join()\\&lt;/tt\\&gt;\n                \\* is waiting for a specified thread to terminate.\n                    \\*/\n                    WAITING,\n\n    /\\*\\*\n        \\* Thread state for a waiting thread with a specified waiting time.\n            \\* A thread is in the timed waiting state due to calling one of\n            \\* the following methods with a specified positive waiting time:\n    \\* \\&lt;ul\\&gt;\n        \\* \\&lt;li\\&gt;&#123;@link \\#sleep Thread.sleep&#125;\\&lt;/li\\&gt;\n        \\* \\&lt;li\\&gt;&#123;@link Object\\#wait(long) Object.wait&#125; with timeout\\&lt;/li\\&gt;\n        \\* \\&lt;li\\&gt;&#123;@link \\#join(long) Thread.join&#125; with timeout\\&lt;/li\\&gt;\n        \\* \\&lt;li\\&gt;&#123;@link LockSupport\\#parkNanos LockSupport.parkNanos&#125;\\&lt;/li\\&gt;\n        \\* \\&lt;li\\&gt;&#123;@link LockSupport\\#parkUntil LockSupport.parkUntil&#125;\\&lt;/li\\&gt;\n        \\* \\&lt;/ul\\&gt;\n        \\*/\n        TIMED_WAITING,\n\n    /\\*\\*\n        \\* Thread state for a terminated thread.\n            \\* The thread has completed execution.\n            \\*/\n            TERMINATED;\n&#125;\n</code></pre>\n<h2 id=\"Enum类的常用方法\"><a href=\"#Enum类的常用方法\" class=\"headerlink\" title=\"Enum类的常用方法\"></a>Enum类的常用方法</h2><pre><code class=\"java\">public class TestSeason &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //用enum关键字创建的Season枚举类上面的父类是：java.lang.Enum,常用方法子类Season可以直接拿过来使用：\n        //toString();---\\&gt;获取对象的名字\n        Season autumn = Season.AUTUMN;\n        System.out.println(autumn/\\*.toString()\\*/);//AUTUMN\n\n        System.out.println(&quot;--------------------&quot;);\n        //values:返回枚举类对象的数组\n        Season[] values = Season.values();\n        for(Season s:values)&#123;\n            System.out.println(s/\\*.toString()\\*/);\n        &#125;\n\n        System.out.println(&quot;--------------------&quot;);\n        //valueOf：通过对象名字获取这个枚举对象\n        //注意：对象的名字必须传正确，否则抛出异常\n        Season autumn1 = Season.valueOf(&quot;AUTUMN&quot;);\n        System.out.println(autumn1);\n    &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"枚举类实现接口\"><a href=\"#枚举类实现接口\" class=\"headerlink\" title=\"枚举类实现接口\"></a>枚举类实现接口</h2><p>定义一个接口：</p>\n<pre><code class=\"java\">public interface TestInterface &#123;\n    void show();\n&#125;\n</code></pre>\n<p>枚举类实现接口，并且重写show方法：</p>\n<pre><code class=\"java\">public enum Season implements TestInterface &#123;\n    SPRING,\n    SUMMER,\n    AUTUMN,\n    WINTER;\n\n    @Override\n    public void show() &#123;\n        System.out.println(&quot;这是Season....&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>测试类：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Season autumn = Season.AUTUMN;\n        autumn.show();\n        Season summer = Season.SUMMER;\n        summer.show();\n    &#125;\n&#125;\n</code></pre>\n<p>上面发现所有的枚举对象，调用这个show方法的时候走的都是同一个方法，结果都一样：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/1f3767921901f0bdaab9e90f542d92ee.png\" class=\"\">\n\n\n<p>但是现在我想要：不同的对象 调用的show方法也不同：</p>\n<pre><code class=\"java\">public enum Season implements TestInterface &#123;\n    SPRING&#123;\n        @Override\n        public void show() &#123;\n            System.out.println(&quot;这是春天。。。&quot;);\n        &#125;\n    &#125;,\n    SUMMER&#123;\n        @Override\n        public void show() &#123;\n            System.out.println(&quot;这是夏天。。&quot;);\n        &#125;\n    &#125;,\n    AUTUMN&#123;\n        @Override\n        public void show() &#123;\n            System.out.println(&quot;这是秋天&quot;);\n        &#125;\n    &#125;,\n    WINTER&#123;\n        @Override\n        public void show() &#123;\n            System.out.println(&quot;这是冬天&quot;);\n        &#125;\n    &#125;;\n\n    /\\*@Override\n        public void show() &#123;\n        System.out.println(&quot;这是Season....&quot;);\n    &#125;\\*/\n&#125;\n</code></pre>\n<pre><code class=\"java\">\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Season autumn = Season.AUTUMN;\n        autumn.show();\n        Season summer = Season.SUMMER;\n        summer.show();\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/5739ebe7587a21e7d7144b96ec7a5833.png\" class=\"\">\n\n\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><pre><code class=\"java\">public class Person &#123;\n    //属性：\n    private int age;\n    private String name;\n    private Gender sex;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public Gender getSex() &#123;\n        return sex;\n    &#125;\n\n    public void setSex(Gender sex) &#123;\n        this.sex = sex;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Person&#123;&quot; +\n            &quot;age=&quot; + age +\n            &quot;, name=&#39;&quot; + name + &#39;\\\\&#39;&#39; +\n            &quot;, sex=&#39;&quot; + sex + &#39;\\\\&#39;&#39; +\n            &#39;&#125;&#39;;\n    &#125;\n&#125;\n\npublic enum Gender &#123;\n    男,\n    女;\n&#125;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Person p = new Person();\n        p.setAge(19);\n        p.setName(&quot;lili&quot;);\n        p.setSex(Gender.男);//传入枚举类Gender的对象：--\\&gt;在入口处对参数进行了限制\n        System.out.println(p);\n    &#125;\n&#125;\n\n</code></pre>\n<p>还可以通过枚举结合switch处理：</p>\n<pre><code class=\"java\">public class Test02 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Gender sex = Gender.男;\n        //switch后面的（）中可以传入枚举类型\n        //switch后面的（）:int,short,byte,char,String ,枚举\n        switch (sex)&#123;\n            case 女:\n                System.out.println(&quot;是个女孩&quot;);\n                break;\n            case 男:\n                System.out.println(&quot;是个男孩&quot;);\n                break;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/",
            "title": "第16章_反射",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"通过案例体会反射的好处\"><a href=\"#通过案例体会反射的好处\" class=\"headerlink\" title=\"通过案例体会反射的好处\"></a>通过案例体会反射的好处</h1><p>案例：美团外卖 —&gt;付款 —》要么用微信支付 要么用支付宝支付</p>\n<pre><code class=\"java\">//接口的制定方：美团外卖\npublic interface Mtwm &#123;\n    //在线支付功能：\n    void payOnline();\n&#125;\n\npublic class WeChat implements Mtwm&#123;\n    @Override\n    public void payOnline() &#123;\n        //具体实现微信支付的功能：\n        System.out.println(&quot;我已经点了外卖，正在使用微信支付&quot;);\n    &#125;\n&#125;\npublic class AliPay implements Mtwm &#123;\n    @Override\n    public void payOnline() &#123;\n        //具体的支付宝支付：\n        System.out.println(&quot;我已经点了外卖，我正在使用支付宝进行支付&quot;);\n    &#125;\n&#125;\npublic class BankCard implements Mtwm&#123;\n    @Override\n    public void payOnline() &#123;\n        System.out.println(&quot;我已经定了外卖，我正在用招商银行信用卡支付&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\"> public class Test &#123;\n public static void main(String[] args) &#123;\n //定义一个字符串，用来模拟前台的支付方式：\n String str = &quot;微信&quot;;\n if(&quot;微信&quot;.equals(str))&#123;//str.equals(&quot;微信&quot;)---？避免空指针异常\n //微信支付：\n //new WeChat().payOnline();\n pay(new WeChat());\n &#125;\n\n if(&quot;支付宝&quot;.equals(str))&#123;\n //支付宝支付：\n //new AliPay().payOnline();\n pay(new AliPay());\n &#125;\n\n if(&quot;招商银行&quot;.equals(str))&#123;\n pay(new BankCard());\n &#125;\n &#125;\n //微信支付\n public static void pay(WeChat wc)&#123;\n wc.payOnline();\n &#125;\n //支付宝支付\n public static void pay(AliPay ap)&#123;\n ap.payOnline();\n &#125;\n\n //招商银行支付\n public static void pay(BankCard bc)&#123;\n bc.payOnline();\n &#125;\n &#125;\n</code></pre>\n<p>为了提高代码的扩展性—》面向对象特性：多态：</p>\n<pre><code class=\"java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        //定义一个字符串，用来模拟前台的支付方式：\n        String str = &quot;微信&quot;;\n        if(&quot;微信&quot;.equals(str))&#123;//str.equals(&quot;微信&quot;)---？避免空指针异常\n            //微信支付：\n            pay(new WeChat());\n        &#125;\n\n        if(&quot;支付宝&quot;.equals(str))&#123;\n            //支付宝支付：\n            pay(new AliPay());\n        &#125;\n\n        if(&quot;招商银行&quot;.equals(str))&#123;\n            pay(new BankCard());\n        &#125;\n    &#125;\n    //方法形参是接口，具体传入的是接口的实现类的对象---》多态的一种形式\n    public static void pay(Mtwm m)&#123;\n        m.payOnline();\n    &#125;\n&#125;\n\n\n</code></pre>\n<p>多态确实可以提高代码的扩展性，但是：扩展性没有达到最好。</p>\n<p>怎么没有达到最好：上面的分支，还是需要手动的删除或者添加。</p>\n<p>解决办法：反射机制</p>\n<p>利用反射实现上述功能：</p>\n<pre><code class=\"java\">public class Demo &#123;\n    public static void main(String[] args) throws Exception &#123;\n        //定义一个字符串，用来模拟前台的支付方式：\n        String str = &quot;com.zhaoss.test01.AliPay&quot;; //字符串：实际上：就是微信类的全限定路径\n\n        //下面的代码就是利用反射：\n        Class cls = Class.forName(str);//cls--\\&gt;Class类具体的对象--》AliPay字节码信息\n        Object o = cls.newInstance();\n        Method method = cls.getMethod(&quot;payOnline&quot;);\n        method.invoke(o);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"通过概念再体会反射\"><a href=\"#通过概念再体会反射\" class=\"headerlink\" title=\"通过概念再体会反射\"></a>通过概念再体会反射</h1><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，</p>\n<p>都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</p>\n<p>在编译后产生字节码文件的时候，类加载器子系统通过二进制字节流，负责从文件系统加载class文件。</p>\n<p>在执行程序（java.exe）时候，将字节码文件读入JVM中—&gt;这个过程叫做类的加载。然后在内存中对应创建一个java.lang.Class对象–&gt;这个对象会被放入字节码信息中,这个Class对象,就对应加载那个字节码信息,这个对象将被作为程序访问方法区中的这个类的各种数据的外部接口。</p>\n<p>所以：我们可以通过这个对象看到类的结构，这个对象就好像是一面镜子，透过镜子看到类的各种信息，我们形象的称之为反射</p>\n<p>这种“看透”class的能力（the ability of the program to examine itself）被称为introspection（内省、内观、反省）。Reflection和introspection是常被并提的两个术语。</p>\n<p>说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。</p>\n<p>如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。</p>\n<p>补充:</p>\n<p>动态语膏vs静态语言</p>\n<p>1、动态语言</p>\n<p>是一类在运行时可以改变其结构的语言:例如新的函数、对象、甚至代码可以</p>\n<p>被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运</p>\n<p>行时代码可以根据某些条件改变自身结构。</p>\n<p>主要动态语言: Object-C、 C#、JavaScript、 PHP、 Python、 Erlang 。</p>\n<p>2、静态语言</p>\n<p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、</p>\n<p>C++。</p>\n<p>所以Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动</p>\n<p>态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。</p>\n<p>Java的动态性让编程的时候更加灵活!</p>\n<p>Class类的理解</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/6d8b0c266d2a65f30295f32185c3256c.png\" class=\"\">\n\n\n<h1 id=\"提供丰富的类\"><a href=\"#提供丰富的类\" class=\"headerlink\" title=\"提供丰富的类\"></a>提供丰富的类</h1><pre><code class=\"java\">//作为一个父类\npublic class Person &#123;\n    //属性\n    private int age;\n    public String name;\n\n    //方法\n    private void eat()&#123;\n        System.out.println(&quot;Person---eat&quot;);\n    &#125;\n    public void sleep()&#123;\n        System.out.println(&quot;Person---sleep&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">//Student作为子类\npublic class Student extends Person &#123;\n    //属性：\n    private int sno;//学号\n    double height;//身高\n    protected double weight;//体重\n    public double score;//成绩\n\n    //方法：\n    public String showInfo()&#123;\n        return &quot;我是一名三好学生&quot;;\n    &#125;\n    private void work()&#123;\n        System.out.println(&quot;我以后会找工作--》成为码农 程序员 程序猿 程序媛&quot;);\n    &#125;\n\n    //构造器\n    public Student()&#123;\n        System.out.println(&quot;空参构造器&quot;);\n    &#125;\n    private Student(int sno)&#123;\n        this.sno = sno;\n    &#125;\n    Student(int sno,double weight)&#123;\n        this.sno = sno;\n        this.weight = weight;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"获取字节码信息的四种形式\"><a href=\"#获取字节码信息的四种形式\" class=\"headerlink\" title=\"获取字节码信息的四种形式\"></a>获取字节码信息的四种形式</h1><pre><code class=\"java\">\npublic class Test &#123;\n    public static void main(String[] args) throws ClassNotFoundException &#123;\n        //案例：以Person的字节码信息为案例\n        //方式1：通过getClass()方法获取\n        Person p = new Person();\n        Class c1 = p.getClass();\n        System.out.println(c1);\n\n        //方式2：通过内置class属性：\n        Class c2 = Person.class;\n        System.out.println(c2);\n\n        System.out.println(c1==c2);\n\n        //注意：方式1和方式2 不常用\n\n        //方式3：--》用的最多：调用Class类提供的静态方法forName\n        Class c3 = Class.forName(&quot;com.zhaoss.test02.Person&quot;);\n        //方式4：利用类的加载器(了解技能点)\n        ClassLoader loader = Test.class.getClassLoader();\n        Class c4 = loader.loadClass(&quot;com.zhaoss.test02.Person&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"可以作为Class类的实例的种类\"><a href=\"#可以作为Class类的实例的种类\" class=\"headerlink\" title=\"可以作为Class类的实例的种类\"></a>可以作为Class类的实例的种类</h1><p>Class类的具体的实例：</p>\n<p>（1）类：外部类，内部类</p>\n<p>（2）接口</p>\n<p>（3）注解</p>\n<p>（4）数组</p>\n<p>（5）基本数据类型</p>\n<p>（6）void</p>\n<p>验证：</p>\n<pre><code class=\"java\">\n\npublic class Demo &#123;\n    public static void main(String[] args) &#123;\n        /\\*\n            Class类的具体的实例：\n            （1）类：外部类，内部类\n            （2）接口\n            （3）注解\n            （4）数组\n            （5）基本数据类型\n            （6）void\n            \\*/\n            Class c1 = Person.class;\n        Class c2 = Comparable.class;\n        Class c3 = Override.class;\n\n        int[] arr1 = &#123;1,2,3&#125;;\n        Class c4 = arr1.getClass();\n        int[] arr2 = &#123;5,6,7&#125;;\n        Class c5 = arr2.getClass();\n        System.out.println(c4==c5);//结果：true .同一个维度，同一个元素类型,得到的字节码就是同一个\n\n        Class c6 = int.class;\n        Class c7 = void.class;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"获取运行时类的完整结构\"><a href=\"#获取运行时类的完整结构\" class=\"headerlink\" title=\"获取运行时类的完整结构\"></a>获取运行时类的完整结构</h1><h2 id=\"补充完善上面提供的丰富的类\"><a href=\"#补充完善上面提供的丰富的类\" class=\"headerlink\" title=\"补充完善上面提供的丰富的类\"></a>补充完善上面提供的丰富的类</h2><ol>\n<li>&#x2F;&#x2F;作为一个父类</li>\n</ol>\n<pre><code class=\"java\">public class Person implements Serializable &#123;\n    //属性\n    private int age;\n    public String name;\n\n    //方法\n    private void eat()&#123;\n        System.out.println(&quot;Person---eat&quot;);\n    &#125;\n    public void sleep()&#123;\n        System.out.println(&quot;Person---sleep&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">//Student作为子类\n@MyAnnotation(value=&quot;hello&quot;)\npublic class Student extends Person implements MyInterface&#123;\n    //属性：\n    private int sno;//学号\n    double height;//身高\n    protected double weight;//体重\n    public double score;//成绩\n\n    //方法：\n    @MyAnnotation(value=&quot;himethod&quot;)\n    public String showInfo()&#123;\n        return &quot;我是一名三好学生&quot;;\n    &#125;\n    public String showInfo(int a,int b)&#123;\n        return &quot;重载方法====我是一名三好学生&quot;;\n    &#125;\n    private void work()&#123;\n        System.out.println(&quot;我以后会找工作--》成为码农 程序员 程序猿 程序媛&quot;);\n    &#125;\n    void happy()&#123;\n        System.out.println(&quot;做人最重要的就是开心每一天&quot;);\n    &#125;\n    protected int getSno()&#123;\n        return sno;\n    &#125;\n\n    //构造器\n    public Student()&#123;\n        System.out.println(&quot;空参构造器&quot;);\n    &#125;\n    private Student(int sno)&#123;\n        this.sno = sno;\n    &#125;\n    Student(int sno,double weight)&#123;\n        this.sno = sno;\n        this.weight = weight;\n    &#125;\n    protected Student(int sno,double height,double weight)&#123;\n        this.sno = sno;\n    &#125;\n\n    @Override\n    @MyAnnotation(value=&quot;hellomyMethod&quot;)\n    public void myMethod() &#123;\n        System.out.println(&quot;我重写了myMethod方法。。&quot;);\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n            &quot;sno=&quot; + sno +\n            &quot;, height=&quot; + height +\n            &quot;, weight=&quot; + weight +\n            &quot;, score=&quot; + score +\n            &#39;&#125;&#39;;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">/\\*\n    @Target:定义当前注解能够修饰程序中的哪些元素\n        @Retention:定义注解的声明周期\n            \\*/\n@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)\n            @Retention(RetentionPolicy.RUNTIME)\n            public @interface MyAnnotation &#123;\n            String value();//属性\n        &#125;\n</code></pre>\n<pre><code class=\"java\"> public interface MyInterface &#123;//自定义的接口\n //随便定义一个抽象方法：\n void myMethod();\n &#125;\n</code></pre>\n<h2 id=\"获取构造器和创建对象\"><a href=\"#获取构造器和创建对象\" class=\"headerlink\" title=\"获取构造器和创建对象\"></a>获取构造器和创建对象</h2><pre><code class=\"java\">public class Test01 &#123;\n    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;\n        //获取字节码信息：\n        Class cls = Student.class;\n\n        //通过字节码信息可以获取构造器：\n        //getConstructors只能获取当前运行时类的被public修饰的构造器\n        Constructor[] c1 = cls.getConstructors();\n        for(Constructor c:c1)&#123;\n            System.out.println(c);\n        &#125;\n\n        System.out.println(&quot;-------------------&quot;);\n        //getDeclaredConstructors:获取运行时类的全部修饰符的构造器\n        Constructor[] c2 = cls.getDeclaredConstructors();\n        for(Constructor c:c2)&#123;\n            System.out.println(c);\n        &#125;\n        System.out.println(&quot;-------------------&quot;);\n        //获取指定的构造器：\n        //得到空构造器\n        Constructor con1 = cls.getConstructor();\n        System.out.println(con1);\n\n        //得到两个参数的有参构造器：\n        Constructor con2 = cls.getConstructor(double.class, double.class);\n        System.out.println(con2);\n\n        //得到一个参数的有参构造器：并且是private修饰的\n        Constructor con3 = cls.getDeclaredConstructor(int.class);\n        System.out.println(con3);\n\n        //有了构造器以后我就可以创建对象：\n        Object o1 = con1.newInstance();\n        System.out.println(o1);\n\n        Object o2 = con2.newInstance(180.5, 170.6);\n        System.out.println(o2);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"获取属性和对属性进行赋值\"><a href=\"#获取属性和对属性进行赋值\" class=\"headerlink\" title=\"获取属性和对属性进行赋值\"></a>获取属性和对属性进行赋值</h2><pre><code class=\"java\">public class Test02 &#123;\n    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InstantiationException &#123;\n        //获取运行时类的字节码信息：\n        Class cls = Student.class;\n        //获取属性：\n        //getFields：获取运行时类和父类中被public修饰的属性\n        Field[] fields = cls.getFields();\n        for(Field f:fields)&#123;\n            System.out.println(f);\n        &#125;\n        System.out.println(&quot;---------------------&quot;);\n        //getDeclaredFields：获取运行时类中的所有属性\n        Field[] declaredFields = cls.getDeclaredFields();\n        for(Field f:declaredFields)&#123;\n            System.out.println(f);\n        &#125;\n        System.out.println(&quot;---------------------&quot;);\n        //获取指定的属性：\n        Field score = cls.getField(&quot;score&quot;);\n        System.out.println(score);\n        Field sno = cls.getDeclaredField(&quot;sno&quot;);\n        System.out.println(sno);\n\n        System.out.println(&quot;---------------------&quot;);\n        //属性的具体结构：\n        //获取修饰符\n        /\\*int modifiers = sno.getModifiers();\n        System.out.println(modifiers);\n        System.out.println(Modifier.toString(modifiers));\\*/\n            System.out.println(Modifier.toString(sno.getModifiers()));\n        //获取属性的数据类型：\n        Class clazz = sno.getType();\n        System.out.println(clazz.getName());\n\n        //获取属性的名字：\n        String name = sno.getName();\n        System.out.println(name);\n        System.out.println(&quot;-------------------------------&quot;);\n        //给属性赋值：(给属性设置值，必须要有对象)\n        Field sco = cls.getField(&quot;score&quot;);\n        Object obj = cls.newInstance();\n        sco.set(obj,98);//给obj这个对象的score属性设置具体的值，这个值为98\n        System.out.println(obj);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"获取方法和调用方法\"><a href=\"#获取方法和调用方法\" class=\"headerlink\" title=\"获取方法和调用方法\"></a>获取方法和调用方法</h2><pre><code class=\"java\">public class Test03 &#123;\n    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;\n        //获取字节码信息：\n        Class cls = Student.class;\n        //获取方法：\n        //getMethods:获取运行时类的方法还有所有父类中的方法（被public修饰）\n        Method[] methods = cls.getMethods();\n        for(Method m:methods)&#123;\n            System.out.println(m);\n        &#125;\n        System.out.println(&quot;-----------------------&quot;);\n        //getDeclaredMethods:获取运行时类中的所有方法：\n        Method[] declaredMethods = cls.getDeclaredMethods();\n        for(Method m:declaredMethods)&#123;\n            System.out.println(m);\n        &#125;\n        System.out.println(&quot;-----------------------&quot;);\n        //获取指定的方法：\n        Method showInfo1 = cls.getMethod(&quot;showInfo&quot;);\n        System.out.println(showInfo1);\n        Method showInfo2 = cls.getMethod(&quot;showInfo&quot;, int.class, int.class);\n        System.out.println(showInfo2);\n        Method work = cls.getDeclaredMethod(&quot;work&quot;,int.class);\n        System.out.println(work);\n        System.out.println(&quot;-----------------------&quot;);\n        //获取方法的具体结构：\n        /\\*\n            @注解\n            修饰符 返回值类型 方法名(参数列表) throws XXXXX&#123;&#125;\n        \\*/\n            //名字：\n            System.out.println(work.getName());\n        //修饰符：\n        int modifiers = work.getModifiers();\n        System.out.println(Modifier.toString(modifiers));\n        //返回值：\n        System.out.println(work.getReturnType());\n        //参数列表：\n        Class[] parameterTypes = work.getParameterTypes();\n        for(Class c:parameterTypes)&#123;\n            System.out.println(c);\n        &#125;\n\n        //获取注解：\n        Method myMethod = cls.getMethod(&quot;myMethod&quot;);\n        Annotation[] annotations = myMethod.getAnnotations();\n        for(Annotation a:annotations)&#123;\n            System.out.println(a);\n        &#125;\n\n        //获取异常：\n        Class[] exceptionTypes = myMethod.getExceptionTypes();\n        for(Class c:exceptionTypes)&#123;\n            System.out.println(c);\n        &#125;\n\n\n        //调用方法：\n        Object o = cls.newInstance();\n        myMethod.invoke(o);//调用o对象的mymethod方法\n\n        System.out.println(showInfo2.invoke(o,12,45));;\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"获取类的接口，所在包，注解\"><a href=\"#获取类的接口，所在包，注解\" class=\"headerlink\" title=\"获取类的接口，所在包，注解\"></a>获取类的接口，所在包，注解</h2><pre><code class=\"java\">\n\npublic class Test04 &#123;\n    public static void main(String[] args) &#123;\n        //获取字节码信息：\n        Class cls = Student.class;\n        //获取运行时类的接口：\n        Class[] interfaces = cls.getInterfaces();\n        for(Class c:interfaces)&#123;\n            System.out.println(c);\n        &#125;\n\n        //得到父类的接口：\n        //先得到父类的字节码信息：\n        Class superclass = cls.getSuperclass();\n\n        //得到接口：\n        Class[] interfaces1 = superclass.getInterfaces();\n        for(Class c:interfaces1)&#123;\n            System.out.println(c);\n        &#125;\n\n        //获取运行时类所在的包：\n        Package aPackage = cls.getPackage();\n        System.out.println(aPackage);\n        System.out.println(aPackage.getName());\n\n        //获取运行类的注解：\n        Annotation[] annotations = cls.getAnnotations();\n        for(Annotation a:annotations)&#123;\n            System.out.println(a);\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"关于反射的面试题\"><a href=\"#关于反射的面试题\" class=\"headerlink\" title=\"关于反射的面试题\"></a>关于反射的面试题</h2><p>【1】问题1：创建Person的对象，以后用new Person()创建,还是用反射创建？</p>\n<p>【2】问题2：反射是否破坏了面向对象的封装性？</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/",
            "title": "第1章初识JAVA",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"计算机语言的发展历史\"><a href=\"#计算机语言的发展历史\" class=\"headerlink\" title=\"计算机语言的发展历史\"></a>计算机语言的发展历史</h1><p>计算机编程语言的发展，是随着计算机本身硬件发展而发展的。硬件速度越快、体积越小、成本越低，应用到人类社会的场景就会越多，那么所需要的算法就会越复杂，也就要求计算机编程语言越高级。最初重达几十吨但一秒只能运算5000次的ENIAC(世界上第一台计算机)，只能做非常小的应用，比如：某些情况的弹道计算。现在任何一个人的手机运算能力都可以秒杀那个年代地球上所有计算机运算能力的总和。计算机编程语言的发展历经了从低级到高级发展。发展的核心思想就是“让人更容易编程”。越容易使用的语言，就有越多人使用；越多人使用，就有越多协作；越多协作，就可以创造越复杂的物体；计算机语言经历了三代：第一代是机器语言，第二代是汇编语言，第三代是高级语言。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/df224ffde641b2f50849b0d7ced03e3a.png\" class=\"\">\n\n\n<p>【1】第一代：机器语言（相当于人类的原始阶段）</p>\n<p>机器语言是机器指令的集合，机器指令展开来讲就是一台机器可以正确执行的命令。电子计算机的机器指令是一列二进制数字。计算机将之转变为一列高低电平，以使计算机的电子器件受到驱动，从而进行运算。上面所说的计算机，指的是可以执行机器指令，进行运算的机器。这是早期计算机的概念。早期的程序设计均使用机器语言。程序员们将用 0、1 数字编程的程序代码打在纸袋或卡片上，1打孔，0不打孔，再将程序通过纸带机或卡片机输入计算机，从而进行运算。</p>\n<p>应用8086CPU完成运算s&#x3D;768+12288-1280，机器码如下:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/cabe563631cd20b0be237288f14a60fd.png\" class=\"\">\n\n\n<p>假如将程序错写成以下的错误，请你找出错误:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/f3810a59f77dc88b809a08882fdbf11b.png\" class=\"\">\n\n\n<p>书写和阅读机器码程序不是一件简单的工作，要记住所有抽象的二进制码。上面只是一个非常简单的小程序，就暴露出机器码的晦涩难懂和不易查错。写如此小的一个程序尚且如此，实际上一个有用的程序至少要有几十行的机器码。那么，情况将会怎么样呢？</p>\n<p>在显示器输出“welcome to masm”，机器码如下：</p>\n<p>看到这样的程序，你有什么感想？如果程序里有一个“1”被误写成为“0”，又如何去查找错误呢？</p>\n<p>【2】第二代：汇编语言（相当于人类的手工业阶段）</p>\n<p>为了编程的方便，以及解决更加复杂的问题。程序员开始改进机器语言，使用英文缩写的助记符来表示基本的计算机操作。这些助记符构成了汇编语言的基础。如下是一些常见的汇编语言助记符(单词)比如：mov，add，sub之类，这样人更容易使用了。识别几百、几千个单词，感觉要比几百几千个数字，美妙多了。汇编语言相当于人类的手工业社会，需要技术极其娴熟的工匠，但是开发效率也非常低。汇编语言虽然能编写高效率的程序，但是学习和使用都不是易事，并且很难调试。另一个复杂的问题，汇编语言以及早期的计算机语言（Basic、Fortran等）没有考虑结构化设计原则，而是使用goto语句来作为程序流程控制的主要方法。这样做的后果是：一大堆混乱的调转语句使得程序几乎不可能被读懂。对于那个时代的程序员，能读懂上个月自己写的代码都成为一种挑战。 汇编语言仍然应用于工业电子编程领域、软件的加密解密、计算机病毒分析等。</p>\n<p>下面以Masm软件为例，编写一个简单的“hello world!”程序。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/25f4d0464a08bc680d211dc16e3fbdea.png\" class=\"\">\n\n\n<p>【3】第三代：高级语言（相当于人类的工业阶段）</p>\n<p>对于简单的任务，汇编语言可以胜任。但是随着计算机的发展，渗透到了工作生活的更多的方面，一些复杂的任务出现了，汇编语言就显得力不从心（应该说是程序员使用汇编语言解决复杂问题出现了瓶颈）。于是，出现了高级语言。像我们熟知的C、C++、Java等等都是高级语言。</p>\n<p>高级语言允许程序员使用接近日常英语的指令来编写程序。例如下图所示:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/087eeecede8f63fad58301244c34660a.png\" class=\"\">\n\n\n<h1 id=\"JAVA简史\"><a href=\"#JAVA简史\" class=\"headerlink\" title=\"JAVA简史\"></a>JAVA简史</h1><p><strong>【1】SUN公司</strong></p>\n<p>美国SUN(Stanford University Network)公司在中国大陆的正式中文名为“太阳计算机系统（中国）有限公司” ，在台湾中文名为“升 阳电脑公司”。</p>\n<p><strong>【2】Java为什么被发明</strong></p>\n<p>Green项目。</p>\n<p>应用环境：像电视盒这样的消费类电子产品</p>\n<p>要求： 语言本身是中立的，也就是跨平台</p>\n<p>1996年Java第一次发布就引起了人们的极大兴趣。关注Java的人士不仅限于计算机出版界， 还有诸如《纽约时报》《华盛顿邮报》《商业周刊》这样的主流媒体。Java 是第一种也是唯一种在National Public Radio上占用了10分钟时间来进行介绍的程序设计语言，并且还得到了$100000000的风险投资基金。这些基金全部用来支持用这种特别的计算机语言开发的产品。重温那些令人兴奋的日子是很有意思的。我们将简要地介绍一下Java语言的发展历史：</p>\n<p>Java的历史要追溯到1991年，由Patrick Naughton 及其伙伴James Gosling (一个全能的计算机奇才)带领的Sun公同的工程师小组想要设计一种小型的计算机语言，主要用于像有线电视转换盒这类的消费设备。由于这些消费设备的处理能力和内存都很有限，所以语言必须非常小且能够生成非常紧凑的代码。另外，由于不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是不能与任何特定的体系结构捆绑在一起。这个项目被命名为”Green”。</p>\n<p>所有就要求有这样的一种代码： 代码短小、紧凑且与平台无关。但是，Sun公司的人都有UNIX的应用背景。因此，所开发的语言以C++为基础。 是Gosling率先创造了这个语言，把这种语言称为“Oak”(这么起名的原因大概是因为他非常喜欢自己办公室外的橡树)。Sun 公司的人后来发现Oak是一种已有的计算机语言的名字，于是，将其改名为Java。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/b777a728d94309940fcfe8684bcc3f1b.png\" class=\"\">\n\n\n<p><strong>【3】Java的发明人</strong></p>\n<p>James Gosling </p>\n<p><strong>【4】经历阶段</strong></p>\n<p>1991年，James Gosling在SUN公司的工程师小组想要设计这样一种小型计算机语言。该语言主要用于像电视盒这样的消费类电子产品。另外，由于不同的厂商选择不同的CPU和操作系统，因此，要求该语言不能和特定的体系结构绑在一起，要求语言本身是中立的，也就是跨平台的。所以，将这个语言命名为“Green”，类似于绿色软件的意思。后来，改名为Oak，橡树的意思。改名后发现已经有一种语言叫这个名字了，再改名叫Java。Java语言发展到今天经历了一系列的过程：</p>\n<p> 1991年，SUN公司的Green项目，Oak</p>\n<p> 1995年，推出Java测试版</p>\n<p> 1996年，JDK1.0</p>\n<p> 1997年，JDK1.1</p>\n<p> 1998年，JDK1.2，大大改进了早期版本缺陷，是一个革命性的版本，更名为Java2。</p>\n<p> 2004年，J2SE 5.0 (1.5.0) Tiger老虎 成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0</p>\n<p> 2005年，Java的各种版本已经更名，以取消其中的数字”2”： J2ME更名为Java ME， J2SE更名为Java SE， J2EE更名为Java EE；</p>\n<p> 2006年，J2SE 6.0 (1.6.0) Mustang野马</p>\n<p> 2009年，甲骨文(oracle)收购SUN，交易高达价格74亿</p>\n<p> 2011年，JavaSE7.0 Dolphin海豚</p>\n<p> 2014年，JavaSE8.0</p>\n<p>2017年，JAVA 9.0</p>\n<p> 2018年3月，JAVA 10</p>\n<p> 2018年9月，JAVA 11</p>\n<p> 2019年3月，JAVA 12</p>\n<p> 2019年9月，JAVA 13</p>\n<p> 2020年3月，JAVA 14</p>\n<p>注意：SUN公司已经被oracle公司收购，目前每半年更新一次java的版本。但是，企业中的主流仍然以7和8为主。对于初学者，应该以企业主流应用版本为核心进行学习，没有必须在此处追求最新版本。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/e1e4acc66aa1b1f2c1e46059b1421c38.png\" class=\"\">\n\n\n<p><strong>【5】不同版本JDK说明</strong></p>\n<p>JDK Version 1.1</p>\n<p>于1997-02-19发行。</p>\n<p>引入的新特性包括：</p>\n<p>引入JDBC（Java Database Connectivity）；</p>\n<p>支持内部类；</p>\n<p>引入Java Bean；</p>\n<p>引入RMI（Remote Method Invocation）；</p>\n<p>引入反射（仅用于内省）。</p>\n<p>J2SE Version 1.2</p>\n<p>开发代号为Playground（操场），于1998-12-08发行。</p>\n<p>引入的新特性包括：</p>\n<p>引入集合（Collection）框架；</p>\n<p>对字符串常量做内存映射；</p>\n<p>引入JIT（Just In Time）编译器；</p>\n<p>引入对打包的Java文件进行数字签名；</p>\n<p>引入控制授权访问系统资源的策略工具；</p>\n<p>引入JFC（Java Foundation Classes），包括Swing 1.0、拖放和Java 2D类库；</p>\n<p>引入Java 插件；</p>\n<p>在JDBC中引入可滚动结果集、BLOB、CLOB、批量更新和用户自定义类型；</p>\n<p>在Applet中添加声音支持。</p>\n<p>J2SE Version 1.3</p>\n<p>开发代号为Kestrel（红隼），于2000-05-08发行。</p>\n<p>引入的新特性包括：</p>\n<p>引入Java Sound API；</p>\n<p>jar文件索引；</p>\n<p>对Java的各个方面都做了大量优化和增强。</p>\n<p>J2SE Version 1.4</p>\n<p>开发代号为Merlin（隼），于2004-02-06发行（首次在JCP下发行）。</p>\n<p>引入的新特性包括:</p>\n<p>XML处理；</p>\n<p>Java打印服务；</p>\n<p>引入Logging API；</p>\n<p>引入Java Web Start；</p>\n<p>引入JDBC 3.0 API；</p>\n<p>引入断言；</p>\n<p>引入Preferences API；</p>\n<p>引入链式异常处理；</p>\n<p>支持IPv6；</p>\n<p>支持正则表达式；</p>\n<p>引入Image I&#x2F;O slot machine API。</p>\n<p>Java Version SE 5.0</p>\n<p>开发代号为Tiger（老虎），于2004-09-30发行。</p>\n<p>引入的新特性包括:</p>\n<p>引入泛型；</p>\n<p>增强循环，可以使用迭代方式；</p>\n<p>自动装箱与自动拆箱；</p>\n<p>类型安全的枚举；</p>\n<p>可变参数；</p>\n<p>静态引入；</p>\n<p>元数据（注解）；</p>\n<p>引入Instrumentation。</p>\n<p>Java Version SE 6</p>\n<p>开发代号为Mustang（野马），于2006-12-11发行。</p>\n<p>引入的新特性包括：</p>\n<p>支持脚本语言；</p>\n<p>引入JDBC 4.0 API；</p>\n<p>引入Java Compiler API；</p>\n<p>可插拔注解；</p>\n<p>增加对Native PKI(Public Key Infrastructure)、Java GSS(Generic Security Service)、Kerberos和LDAP(Lightweight Directory Access Protocol)的支持；</p>\n<p>继承Web Services；</p>\n<p>做了很多优化。</p>\n<p>Java Version SE 7</p>\n<p>开发代号是Dolphin（海豚），于2011-07-28发行。</p>\n<p>引入的新特性包括：</p>\n<p>switch语句块中允许以字符串作为分支条件；</p>\n<p>在创建泛型对象时应用类型推断；</p>\n<p>在一个语句块中捕获多种异常；</p>\n<p>支持动态语言；</p>\n<p>支持try-with-resources；</p>\n<p>引入Java NIO.2开发包；</p>\n<p>数值类型可以用2进制字符串表示，并且可以在字符串表示中添加下划线；</p>\n<p>钻石型语法；</p>\n<p>null值的自动处理。</p>\n<p>Java Version SE 8</p>\n<p>开发代号是Spider（蜘蛛），于2014-03-18发行。</p>\n<p>支持 lambda支持；</p>\n<p>增强日期与时间API的功能；</p>\n<p>对垃圾回收的性能也进行了改进；</p>\n<p>并且移除了permgen区。</p>\n<p>Lambdas表达式与Functional接口</p>\n<p>接口的默认与静态方法</p>\n<p>方法引用</p>\n<p>重复注解</p>\n<p>更好的类型推测机制</p>\n<p>扩展注解的支持</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/cc266d289e8e3cb0c93696162df2eb73.png\" class=\"\">\n\n\n\n\n<h1 id=\"JAVA体系结构\"><a href=\"#JAVA体系结构\" class=\"headerlink\" title=\"JAVA体系结构\"></a>JAVA体系结构</h1><p><strong>JavaSE（Java Standard Edition）：标准版，定位在个人计算机上的应用</strong></p>\n<p>这个版本是Java平台的核心，它提供了非常丰富的API来开发一般个人计算机上的应用程序，包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。在上世纪90年代末互联网上大放异彩的Applet也属于这个版本。Applet后来为Flash取代，Flash即将被HTML5取代。</p>\n<p><strong>JavaEE（Java Enterprise Edition）：企业版，定位在服务器端的应用</strong></p>\n<p>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：JDBC是让程序员能直接在Java内使用的SQL的语法来访问数据库内的数据；Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术；</p>\n<p><strong>JavaME（Java Micro Edition）：微型版，定位在消费性电子产品的应用上</strong></p>\n<p>JavaME是JavaSE的内伸，包含J2SE的一部分核心类，也有自己的扩展类,增加了适合微小装置的类库：javax.microedition.io.*等。该版本针对资源有限的电子消费产品的需求精简核心类库，并提供了模块化的架构让不同类型产品能够随时增加支持的能力。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/4eac508d70b7f6ffc64ed3fdcfc23406.png\" class=\"\">\n\n\n<h1 id=\"JAVA的特性和优势\"><a href=\"#JAVA的特性和优势\" class=\"headerlink\" title=\"JAVA的特性和优势\"></a>JAVA的特性和优势</h1><p> <strong>跨平台&#x2F;可移植性</strong></p>\n<p>这是Java的核心优势。Java在设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。这样的话程序的移植就会非常麻烦。</p>\n<p> <strong>安全性</strong></p>\n<p>Java适合于网络&#x2F;分布式环境，为了达到这个目标，在安全性方面投入了很大的精力，使Java可以很容易构建防病毒，防篡改的系统。</p>\n<p> <strong>面向对象</strong></p>\n<p>面向对象是一种程序设计技术，非常适合大型软件的设计和开发。由于C++为了照顾大量C语言使用者而兼容了C，使得自身仅仅成为了带类的C语言，多少影响了其面向对象的彻底性！Java则是完全的面向对象语言。</p>\n<p> <strong>简单性</strong></p>\n<p>Java就是C++语法的简化版，我们也可以将Java称之为“C++-”。跟我念“C加加减”，指的就是将C++的一些内容去掉；比如：头文件，指针运算，结构，联合，操作符重载，虚基类等等。同时，由于语法基于C语言，因此学习起来完全不费力。</p>\n<p> <strong>高性能</strong></p>\n<p>Java最初发展阶段，总是被人诟病“性能低”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了几十倍运行效率。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。 将一些“热点”字节码编译成本地机器码，并将结果缓存起来，在需要的时候重新调用。这样的话，使Java程序的执行效率大大提高，某些代码甚至接待C++的效率。</p>\n<p>因此，Java低性能的短腿，已经被完全解决了。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p>\n<p> <strong>分布式</strong></p>\n<p>Java是为Internet的分布式环境设计的，因为它能够处理TCP&#x2F;IP协议。事实上，通过URL访问一个网络资源和访问本地文件是一样简单的。Java还支持远程方法调用(RMI,Remote Method Invocation)，使程序能够通过网络调用方法。</p>\n<p> <strong>多线程</strong></p>\n<p>多线程的使用可以带来更好的交互响应和实时行为。 Java多线程的简单性是Java成为主流服务器端开发语言的主要原因之一。</p>\n<p> <strong>健壮性</strong></p>\n<p>Java是一种健壮的语言，吸收了C&#x2F;C++ 语言的优点，但去掉了其影响程序健壮性的部分（如：指针、内存的申请与释放等）。Java程序不可能造成计算机崩溃。即使Java程序也可能有错误。如果出现某种出乎意料之事，程序也不会崩溃，而是把该异常抛出，再通过异常处理机制加以处理。</p>\n<p>总结：一句话：java很好！</p>\n<p>但是，并不是说学习了java，以后所有的东西都要用java开发了：某些领域其他语言有更出色的表现，比如，Objective C和后来的Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。</p>\n<p>只能说，不同的语言之间，平分秋色！</p>\n<h1 id=\"核心机制\"><a href=\"#核心机制\" class=\"headerlink\" title=\"核心机制\"></a>核心机制</h1><h2 id=\"垃圾收集机制\"><a href=\"#垃圾收集机制\" class=\"headerlink\" title=\"垃圾收集机制\"></a>垃圾收集机制</h2><p>垃圾收集的目的在除不再使用的对象，当对象建立的时候垃圾收集期，就开始监控对象的动态情况，垃圾收集主要是对内存的释放。创建对象的时候申请一个空间</p>\n<p>1.不再使用的内存空间应回收—》垃圾收集；</p>\n<p>2.Java消除了程序员回收无用内存空间的职责；提供一种系统级线程跟踪存储空间的分配情况。在JVM的空闲时，检查并释放可被释放的存储器空间；相比c++,开发人员负责要自己收回无用内存。</p>\n<p>3.垃圾收集在Java程序运行过程中自动进行，程序员无法精确控制和干预；</p>\n<p>4.GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上减少了因为没有释放空间而导致的内存泄露。</p>\n<p>后续：</p>\n<p>更高级：</p>\n<p>1.垃圾收集器有几种</p>\n<p>2.垃圾收集器底层原理剖析</p>\n<p>3.垃圾收集器算法，优化</p>\n<h2 id=\"跨平台原理\"><a href=\"#跨平台原理\" class=\"headerlink\" title=\"跨平台原理\"></a>跨平台原理</h2><p>JAVA跨平台原理的解释：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/c9214cebbc48ea99d832cf9899a52a8d.png\" class=\"\">\n\n\n<p>C语言的跨平台解释：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/66913892f5b4f71e30d054375cccb7c9.png\" class=\"\">\n\n\n<p>总结</p>\n<p>JVM(Java Virtual Machine)就是一个虚拟的用于执行bytecode字节码的”虚拟计算机”。他也定义了指令集、寄存器集、结构栈、垃圾收集堆、内存区域。JVM负责将Java字节码解释运行，边解释边运行，这样，速度就会受到一定的影响。</p>\n<p>不同的操作系统有不同的虚拟机。Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，随处运行”。 Java虚拟机是实现跨平台的核心机制。如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/9f86e99d761144f8e5f1025c263d727d.png\" class=\"\">\n\n\n<p>我们说的语言跨平台是编译后的文件跨平台，而不是源程序跨平台。</p>\n<p>接下来我们再比较下两种方式的差异：第一，C语言是编译执行的，编译器与平台相关，编译生成的可执行文件与平台相关；第二，Java是解释执行的，编译为中间码的编译器与平台无关，编译生成的中间码也与平台无关（一次编译，到处运行），中间码再由解释器解释执行，解释器是与平台相关的，也就是不同的平台需要不同的解释器.</p>\n<h1 id=\"常用DOS命令\"><a href=\"#常用DOS命令\" class=\"headerlink\" title=\"常用DOS命令\"></a>常用DOS命令</h1><p><strong>【1】DOS操作系统</strong></p>\n<p>--Microsoft公司推出的操作系统。（在windows之前的操作系统）</p>\n<p>--DOS是英文”Disk Operating System”的缩写,其中文含意是”磁盘操作系统”.</p>\n<p>--DOS是单用户、单任务的操作系统.（只能执行一个任务）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/b5c2c79cb5570c6e91dabc56e2eb2d91.png\" class=\"\">\n\n\n<p><strong>【2】DOS命令</strong></p>\n<p>--在windows中，我们通过鼠标菜单等来操作系统，而在dos操作系统中，要通过dos命令来操作系统。</p>\n<p>--是DOS操作系统的命令，是一种面向磁盘的操作命令，</p>\n<p>--不区分大小写。</p>\n<p><strong>【3】命令学习：</strong></p>\n<p>windows给我们保留了类似dos系统的操作界面，可以直接操作磁盘！</p>\n<p>dos 也是一种<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/d2Q9JUU2JTkzJThEJUU0JUJEJTlDJUU3JUIzJUJCJUU3JUJCJTlGJnRuPVNFX1BjWmhpZGFvbndoY19uZ3BhZ21qeiZyc3ZfZGw9Z2hfcGNfemhpZGFv\">操作系统</span>，是在windows出现以前用的，后来windows出来后基本没人用了，但是当windows崩溃的时候，还是要的dos方式解决，它是一种纯命令方式，cmd其实就是在windows状态下进入dos方式。</p>\n<p>控制命令台：win+r—&gt;cmd</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/3b0f71b42623023480dda23aabe8aee4.png\" class=\"\">\n\n\n<p><strong>【4】具体dos命令：</strong></p>\n<p>（1）切换盘符： c: d: e: 大小写没有区分</p>\n<p>（2）显示详细信息：dir</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1740909b2c155106334ed54298cadda0.png\" class=\"\">\n\n\n<p>（3）改变当前目录：cd</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/362c58e6a0f56fc1ace0bd31f0b741c2.png\" class=\"\">\n\n\n<p>（4）</p>\n<p>. 当前目录</p>\n<p>.. 代表上一层目录</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/5c967bca035c35add1b2104ca5649d38.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/acefdb41934d2aab97dfa5e969eff0cb.png\" class=\"\">\n\n\n<p>（5）清屏：cls</p>\n<p>（6）切换历史命令：上下箭头</p>\n<p>（7）补全命令： tab按键</p>\n<p>（8）创建目录：md</p>\n<p>删除目录：rd</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/09422f27f704dcbf9dae20fd1c3f6084.png\" class=\"\">\n\n\n<p>（9）复制文件命令：copy:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/0626fb05c5350a48f3194a4612623a9d.png\" class=\"\">\n\n\n<p>（10）删除文件：del</p>\n<p>del后面如果接的是文件夹&#x2F;目录：那么删除的就是这个文件夹下的文件，而不是文件夹</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/d5a261b9a18b4a7c852e02a84d2143bc.png\" class=\"\">\n\n\n<h1 id=\"JAVA环境准备–-gt-JDK\"><a href=\"#JAVA环境准备–-gt-JDK\" class=\"headerlink\" title=\"JAVA环境准备–&gt;JDK\"></a>JAVA环境准备–&gt;JDK</h1><h2 id=\"【1】下载JDK\"><a href=\"#【1】下载JDK\" class=\"headerlink\" title=\"【1】下载JDK\"></a><strong>【1】下载JDK</strong></h2><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvamF2YXNlL2Rvd25sb2Fkcy9pbmRleC5odG1s\">www.oracle.com/technetwork/java/javase/downloads/index.html</span></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/f5e306fff865e78e7cf4b3e0853d0a46.jpeg\" class=\"\">\n\n\n<p><strong>【2】安装JDK</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/76e9d157917264af13c9a2457ad03b0f.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/7d3e5ef356992506ea31a463b166089a.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/febc26a8ad5ca5d7a450a55ddd7c62d1.png\" class=\"\">\n\n\n<h2 id=\"【3】卸载JDK\"><a href=\"#【3】卸载JDK\" class=\"headerlink\" title=\"【3】卸载JDK\"></a><strong>【3】卸载JDK</strong></h2><p>控制面板卸载即可</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/f697774350b18624b56bed0f6254a517.png\" class=\"\">\n\n\n<h2 id=\"【4】-验证JDK是否安装成功\"><a href=\"#【4】-验证JDK是否安装成功\" class=\"headerlink\" title=\"【4】 验证JDK是否安装成功\"></a><strong>【4】 验证JDK是否安装成功</strong></h2><p>（1）方式1：去安装目录下看一眼：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/ac22249991f5294b4a9d223d5fcf5268.png\" class=\"\">\n\n\n<p>（2）方式2：通过控制命令台查看：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/39ae7561d4f131368eae9a9ccb2af553.png\" class=\"\">\n\n\n<p>（3）方式3：通过控制面板查看：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/261ebbcb3bc9cd8f43196c2baa4634c9.png\" class=\"\">\n\n\n<p><strong>【5】JDK和JRE：</strong></p>\n<p>JDK： Java Development kit —-&gt;编写Java程序的程序员使用的软件</p>\n<p>JRE : Java Runtime Enviroment —-》运行Java程序的用户使用的软件</p>\n<h2 id=\"安装notepad-，配置path环境变量\"><a href=\"#安装notepad-，配置path环境变量\" class=\"headerlink\" title=\"安装notepad++，配置path环境变量\"></a>安装notepad++，配置path环境变量</h2><p>【1】安装记事本：notepad</p>\n<p>【2】安装：一直下一步</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/abbe25e7ed8b045edea86256baa3f138.png\" class=\"\">\n\n\n<p>【3】打开记事本进行设置：</p>\n<p>设置–》首选项：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/c8dca7e180ad4bc69dd81c0953b1873c.png\" class=\"\">\n\n\n<p>设置–》语言格式设置：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/0542de937b85e18e1ef81e7cadea58ca.png\" class=\"\">\n\n\n<p>【4】打开notepad++:</p>\n<p>（1）方式1：通过快捷方式：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/be5c9d085c34c660cb272341c751ae2e.png\" class=\"\">\n\n\n<p>（2）方式2：通过可执行文件：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/9e8f1330d48c571f0f4d0f2f33c8b6a7.png\" class=\"\">\n\n\n<p>（3）方式3：利用控制命令台：</p>\n<p>win+r–&gt;cmd:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/701079b46451e26f184c5effbf08f14c.png\" class=\"\">\n\n\n<p>(4)方式4：在任意的路径下去执行notepad++.exe这个命令：</p>\n<p>但是发现报错：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/98e40692478ec2772c3fd5aa37bbbe3a.png\" class=\"\">\n\n\n<p>需要配置系统环境变量：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a8158c92fcc94f4cd7c16d98982d4f89.png\" class=\"\">\n\n\n<p>找系统环境变量：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/404df775e0f1df92adca292f150e2817.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/ba3326c542f0f0e4073bb51b03ed8b04.png\" class=\"\">\n\n\n<p>将notepad++.exe所在的路径配置到path环境变量中去：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a300969b9a9314375cb30c8d1e32608f.png\" class=\"\">\n\n\n<p>这样我就可以在任意的路径下去执行这个命令：（注意：控制命令台需要重启）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/422abd1f5e358db4fb883d2e6bbf7ed9.png\" class=\"\">\n\n\n<p>path环境变量作用：</p>\n<p>将命令所在的路径配置到path中去，就相当于在计算机中“注册”了一样，以后找这个命令，会直接去你配置的路径下寻找。</p>\n<p>达到了一个效果：在任意的路径下去执行某个命令—》path环境针对整个操作系统而言。</p>\n<h1 id=\"第一段程序\"><a href=\"#第一段程序\" class=\"headerlink\" title=\"第一段程序\"></a>第一段程序</h1><p><strong>【1】用notepad编写代码：</strong></p>\n<ol>\n<li>public class HelloWorld{</li>\n<li>public static void main(String[] args){</li>\n<li>System.out.println(“hi 这是一段Java程序。。。”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<p>记得保存 ctrl+s</p>\n<p><strong>【2】进行编译：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/43511ae71bacbf69c11b6d85f9c2194a.png\" class=\"\">\n\n\n<p>发现出错了，分析出错原因：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/298f40fc2221174be201d03882646bf2.png\" class=\"\">\n\n\n<p>解决办法：</p>\n<p>将javac.exe所在的路径 配置到 环境变量path中去，这样我就可以在任意的路径下去执行这个命令：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/efb27daee94a0e9016cf2bd8310c0a16.png\" class=\"\">\n\n\n<p>配置好环境变量以后发现代码可以成功编译：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/37a72dfd5ff1298fbecf36cd6f527b25.png\" class=\"\">\n\n\n<p>验证：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/8674f3596089c78139529ce26525fe26.png\" class=\"\">\n\n\n<p><strong>【3】进行解释&#x2F;翻译&#x2F;执行:</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/36f7e5bb879297158184c3d4b245a048.png\" class=\"\">\n\n\n<p>上面执行过程成功的原因：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a82f8d964fbb8a2243431f8b013374de.png\" class=\"\">\n\n\n<h1 id=\"程序中常见问题\"><a href=\"#程序中常见问题\" class=\"headerlink\" title=\"程序中常见问题\"></a>程序中常见问题</h1><p>【1】最低级的错误：单词拼写错误</p>\n<p>【2】要求源文件名字和类名必须一模一样：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/086728a33b6323fa8f6a7b901bb643c5.png\" class=\"\">\n\n\n<p>出错：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/310b7744316d2a235c93f190c14121f1.png\" class=\"\">\n\n\n<p>【3】所有的标点必须是英文状态下的：</p>\n<p>中文状态：【】（）{} ！；：“‘《》？</p>\n<p>英文状态：[] () {} ! ; : “ &amp;apos; &lt;&gt; ?</p>\n<p><strong>【4】成对编程：</strong></p>\n<p>[] {} () &lt;&gt; “” &amp;apos;&amp;apos;</p>\n<p><strong>【5】注意缩进</strong> ：只要遇到{}就进行缩进 —&gt;为了格式好看</p>\n<p>缩进：tab</p>\n<p>向前缩进： shift+tab</p>\n<p><strong>【6】编译：</strong></p>\n<p>javac HelloWorld.java</p>\n<p><strong>【7】执行：</strong></p>\n<p>java HelloWorld</p>\n<p><strong>【8】java中大小写严格区分，大小敏感：</strong></p>\n<p>HelloWorld Helloworld</p>\n<p>a A</p>\n<p>public PUBLIC</p>\n<p><strong>【9】我们要写代码：就当做有一个“框子”</strong></p>\n<ol>\n<li>public class HelloWorld{</li>\n<li>public static void main(String[] args){</li>\n<li></li>\n<li></li>\n<li>}</li>\n<li>}</li>\n</ol>\n<p><strong>【10】一个源文件中可以有多个类，只能有一个类被public修饰，源文件的名字必须跟public修饰的那个类名保持一致。</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/2fe1f0ad62885c1a9cc2e8d3b7e8caea.png\" class=\"\">\n\n\n<p>多个类会产生独立的字节码文件：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/2007ac8281d6622434662d7ca51549fb.png\" class=\"\">\n\n\n<p>执行的时候执行各自独立的字节码文件即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/3f43072f8d79a015c2c78e6e602f90c5.png\" class=\"\">\n\n\n<h1 id=\"编译方式\"><a href=\"#编译方式\" class=\"headerlink\" title=\"编译方式\"></a>编译方式</h1><p><strong>【1】方式1：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1a5be2e20f08cca2554764864b52483e.png\" class=\"\">\n\n\n<p><strong>【2】方式2：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a969ad6fbcf2440708966d0ebb881780.png\" class=\"\">\n\n\n<p><strong>【3】方式3：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/8fadab9466291f8d906886b25466c0b1.png\" class=\"\">\n\n\n<p><strong>【4】方式4：</strong></p>\n<p>在notepad中右键文件 –》打开文件夹所在命令行</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1309fcc40c24dc16194ec6d3d118bcc1.png\" class=\"\">\n\n\n<h1 id=\"扩展：classpath环境变量\"><a href=\"#扩展：classpath环境变量\" class=\"headerlink\" title=\"扩展：classpath环境变量\"></a>扩展：classpath环境变量</h1><p><strong>【1】系统有一个环境变量叫：</strong>classpath，现在我们将classpath环境变量显式的写出来：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/56653738bf699fa4839a1ad7a800d5b5.png\" class=\"\">\n\n\n<p>classpath作用：只要你配置到classpath中的路径，在执行java的字节码文件的时候，就会去这个配置的路径下找 对应的字节码文件：</p>\n<p>现在我不配置.\\了 我配置：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/45e1d0b90c634f8ae4ad6cd0e6754d6c.png\" class=\"\">\n\n\n<p>自从我配置了这个环境变量以后，可以在任意的路径下去执行字节码文件：</p>\n<p>总结：</p>\n<p>classpath作用：针对java执行字节码文件而产生的环境变量，只要配置了字节码文件所在的路径以后，那么以后你在任意位置都可以执行对应的字节码文件</p>\n<h1 id=\"扩展：JAVA-HOME环境变量\"><a href=\"#扩展：JAVA-HOME环境变量\" class=\"headerlink\" title=\"扩展：JAVA_HOME环境变量\"></a>扩展：JAVA_HOME环境变量</h1><p>后续我们会用到一个软件：tomcat，在执行startup.bat的时候会出现闪退问题：</p>\n<p>解决： 必须要配置一个环境变量叫：JAVA_HOME</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/d79c197731fc2fabf7d1eeffe68c3010.png\" class=\"\">\n\n\n<p>我再次启动才会成功：</p>\n<p>然后我们的path环境变量中刚好可以借助JAVA_HOME里面的内容，通过%%做引入 %JAVA_HOME%\\bin</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/eef1348dc722f99221851230d6166e99.png\" class=\"\">\n\n\n<h1 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1cee5f8ef4a6dd22f4c2427ac9f9586f.png\" class=\"\">\n\n\n<ul>\n<li>JDK帮助文档</li>\n<li>SUN公司为JDK工具包提供了一整套文档资料,我们习惯上称之为JDK文档。</li>\n<li>JDK文档中提供了Java中的各种技术的详细资料,以及JDK中提供的各种类的帮助说明。</li>\n<li>JDk文档是Java语言的完整说明,大多数书籍中的类的介绍都要参照它来完成,它是编程者经常查阅的资料</li>\n<li>如何理解API：就当做是一个“字典”，“使用手册”，API就相当于是一个电子的帮助文档，可以帮我们查看JDK提供的类的信息，平时查看的时候可结合百度一起看。</li>\n</ul>\n<p>其实API没有什么神奇的，就是一个电子文档而已，帮助我们查看JAVA中涉及到的一些技能点：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/82e7900da21d11f6aa3c7c76599b84ed.png\" class=\"\">\n\n\n<h1 id=\"代码量统计工具\"><a href=\"#代码量统计工具\" class=\"headerlink\" title=\"代码量统计工具\"></a>代码量统计工具</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/7e64582ee7bad7b2c12ddece5c19f06b.png\" class=\"\">\n\n\n<h1 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h1><p>为了方便程序的阅读，Java语言允许程序员在程序中写上一些说明性的文字，用来提高程序的可读性，这些文字性的说明就称为注释。</p>\n<p>注释不会出现在字节码文件中，即Java编译器编译时会跳过注释语句。</p>\n<p>在Java中根据注释的功能不同，主要分为单行注释、多行注释和文档注释。</p>\n<ul>\n<li>单行注释</li>\n</ul>\n<p>单行注释使用“&#x2F;&#x2F;”开头，“&#x2F;&#x2F;”后面的单行内容均为注释。</p>\n<ul>\n<li>多行注释</li>\n</ul>\n<p>多行注释以“&#x2F;*”开头以“*&#x2F;”结尾，在“&#x2F;*”和“*&#x2F;”之间的内容为注释，我们也可以使用多行注释作为行内注释。但是在使用时要注意，多行注释不能嵌套使用。</p>\n<ul>\n<li>文档注释</li>\n</ul>\n<p>文档注释以“&#x2F;**”开头以“*&#x2F;”结尾， 注释中包含一些说明性的文字及一些JavaDoc标签（后期写项目时，可以生成项目的API）</p>\n<h2 id=\"单行注释和多行注释\"><a href=\"#单行注释和多行注释\" class=\"headerlink\" title=\"单行注释和多行注释\"></a>单行注释和多行注释</h2><ol>\n<li>&#x2F;&#x2F;下面是一段标准代码</li>\n<li>&#x2F;&#x2F;这是代码的“框子”，当前阶段你可以当做一个模板</li>\n<li>&#x2F;&#x2F;其实这就是一个类，类的名字是HelloWorld，这个名字可以随便起，但是一般首字母大写，驼峰命名，见名知意</li>\n<li>public class HelloWorld{</li>\n<li>&#x2F;&#x2F;下面是一个main方法，方法的格式是固定的</li>\n<li>public static void main(String[] args){</li>\n<li>&#x2F;&#x2F;下面这句话的作用：将双引号中的内容进行原样输出</li>\n<li>&#x2F;*</li>\n<li>这是多行注释</li>\n<li>每行都可以写</li>\n<li>单行注释和多行注释，按照你自己的需求去使用即可</li>\n<li>*&#x2F;</li>\n<li>System.out.println(“hi….java”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<p>注意：</p>\n<p>1.注释不会参与编译，编译后产生的字节码文件中不会有注释的内容</p>\n<p>2.注释的作用：</p>\n<p>（1）注释就起到了标注解释的作用，提高代码的可读性，方便自己，方便他人–》是一个非常良好，非常专业的习惯！！！</p>\n<p>（2）方便代码的调试：</p>\n<ol>\n<li>public class HelloWorld2{</li>\n<li>public static void main(String[] args){</li>\n<li>System.out.println(“hi….java1”);</li>\n<li>&#x2F;&#x2F;System.out.println(“hi….java2”)</li>\n<li>System.out.println(“hi….java3”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<h2 id=\"文档注释\"><a href=\"#文档注释\" class=\"headerlink\" title=\"文档注释\"></a>文档注释</h2><ol>\n<li>&#x2F;**</li>\n<li>文档注释</li>\n<li>@author zhaoss</li>\n<li>@version 1.0</li>\n<li>这是我们第一章文档注释的代码，比较重要</li>\n<li>*&#x2F;</li>\n<li>public class HelloWorld3{</li>\n<li>public static void main(String[] args){</li>\n<li>System.out.println(“hi….java1”);</li>\n<li>}</li>\n<li>&#x2F;**</li>\n<li>@param name 姓名</li>\n<li>@param age 年龄</li>\n<li>*&#x2F;</li>\n<li>public void eat(String name,int age){</li>\n<li>System.out.println(“hello”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<p>一般文档注释可以配合：jdk提供的工具javadoc.exe来一起使用，通过javadoc.exe可以对文档注释进行解析，生成一套以网页文件形式体现的该程序的说明文档。（自定义类对应的API）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/5f36c3576cf9a48034a4b4ddd4ddf78b.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/239a7203195d3aa10f754e0cb4886fff.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/34f6260e1d8116cec2ddc29382b5d49c.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/63cfa40391722ade39f74d2cbdb5315f.png\" class=\"\">\n\n\n<h1 id=\"反编译工具的使用\"><a href=\"#反编译工具的使用\" class=\"headerlink\" title=\"反编译工具的使用\"></a>反编译工具的使用</h1><ul>\n<li>编译</li>\n</ul>\n<p>源代码—–&gt;class</p>\n<ul>\n<li>反编译</li>\n</ul>\n<p>class—-&gt;源代码</p>\n<ul>\n<li>反编译工具</li>\n</ul>\n<p>jd-gui.exe</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/ddc58027ebdd9a708cbf6ff40e6f525b.png\" class=\"\">\n\n\n<h1 id=\"本章最后一段代码\"><a href=\"#本章最后一段代码\" class=\"headerlink\" title=\"本章最后一段代码\"></a>本章最后一段代码</h1><ol>\n<li>public class HiWorld{</li>\n<li>public static void main(String[] args){</li>\n<li>&#x2F;&#x2F;进行自我介绍：</li>\n<li>System.out.print(“姓名：”);</li>\n<li>System.out.print(“\\t丽丽\\n”);</li>\n<li>System.out.print(“职业：”);</li>\n<li>System.out.print(“\\t学生”);</li>\n<li>&#x2F;*</li>\n<li>(1)System.out.print和System.out.println区别联系：</li>\n<li>System.out.print ： 将双引号中内容原样输出，不换行</li>\n<li>System.out.println ：将双引号中内容原样输出，换行</li>\n<li>(2)转义字符：</li>\n<li>\\就是转义字符：作用：将后面普通的字母转换为特殊含义</li>\n<li>\\n : 换行</li>\n<li>\\t : 距离前面有一个制表符位置</li>\n<li>*&#x2F;</li>\n<li></li>\n<li>System.out.println();&#x2F;&#x2F;换行</li>\n<li>System.out.println(“1111111111111111111”);</li>\n<li>System.out.println(“11111111\\t2222”);</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<h1 id=\"扩展面试题：JDK，JRE，JVM的区别\"><a href=\"#扩展面试题：JDK，JRE，JVM的区别\" class=\"headerlink\" title=\"扩展面试题：JDK，JRE，JVM的区别\"></a>扩展面试题：JDK，JRE，JVM的区别</h1><p>JDK,JRE,JVM的关系:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/63bfd9d6c63ebea3b5f9cf17f98644a4.png\" class=\"\">\n\n\n<p>先说JDK和JRE:</p>\n<p>初学JAVA很容易被其中的很多概念弄的傻傻分不清楚，首先从概念上理解一下吧，JDK（Java Development Kit）简单理解就是Java开发工具包，JRE(Java Runtime Enviroment)是Java的运行环境，JVM( java virtual machine)也就是常常听到Java虚拟机。JDK是面向开发者的，JRE是面向使用JAVA程序的用户，上面只是简单的区别</p>\n<p>通过上图发现发现有两个JRE文件夹，如果细看里面的内容基本上是一样的，如果是只是Java程序使用者，那么只会有最外层的那个JRE目录，JDK中是JRE自带的，你如果安装了JDK必然里面会有一个JRE.那么问题来了，为什么会有两套JRE呢？</p>\n<p>从侧面证明:</p>\n<p>利用javac.exe进行编译:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/9c783ba968cea227029eece87e12f9fa.png\" class=\"\">\n\n\n<p>然后我将C:\\Program Files\\Java\\jdk1.8.0_151\\lib\\tools.jar改个名字,再去编译:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/43325d9c5156144d0eeb92d48c4ab23c.png\" class=\"\">\n\n\n<p>证明:dt.jar和tools.jar是两个java最基本的包，里面包含了从java最重要的lang包到各种高级功能如可视化的swing包，是java必不可少的。而path下面的bin里面都是java的可执行的编译器及其工具，如java，javadoc等,报错的原因就是输入的javac的命令不是去JDK中bin目录去找的javac.exe，而是去JDK中lib目录中的tools.jar中com.sun.tools.javac.Main中执行，因此javac.exe只是一个包装器（Wrapper），存在的目的是为了让开发者免于输入过长的指命。这个时候发现JDK里的工具几乎是用Java所编写，同属于Java应用程序，因此要使用JDK所附的工具来开发Java程序，所以自身需要附一套JRE才能运行。上图中与jdk同级目录下的JRE就是用来运行一般Java程序用的。</p>\n<p>两套JRE运行的时候究竟运行哪一个呢，这个时候JDK中java.exe先从自身目录中找，然后父级目录中找，如果都没有就去注册表中找</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/774e13c2fe05e00b2b88485d66878cb5.png\" class=\"\">\n\n\n<p>再说JRE和JVM:</p>\n<p>JVM – java virtual machineJVM就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，class文件并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行，类似于C#中的CLR。</p>\n<p>JVM不能单独搞定class的执行，解释class的时候JVM需要调用解释所需要的类库lib。在JDK下面的的jre目录里面有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a6a57ddcf4dbbce6ec083f177185b938.png\" class=\"\">\n\n\n<p>JVM+Lib&#x3D;JRE，如果讲的具体点就是bin目录下的jvm.dll文件， jvm.dll无法单独工作，当jvm.dll启动后，会使用explicit的方法(就是使用Win32 API之中的LoadLibrary()与GetProcAddress()来载入辅助用的动态链接库)，而这些辅助用的动态链接库(.dll)都必须位 于jvm.dll所在目录的父目录之中。因此想使用哪个JVM，只需要设置PATH，指向JRE所在目录下的jvm.dll。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/3b5991d32e4ea2cdd83dfc682380f30f.png\" class=\"\">\n\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC2%E7%AB%A0_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC2%E7%AB%A0_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "第2章_数据类型",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h1><p><strong>【1】标识符：读音 biao zhi fu</strong></p>\n<p><strong>【2】什么是标识符？</strong></p>\n<p>包，类，变量，方法…..等等,只要是起名字的地方,那个<strong>名字</strong>就是标识符</p>\n<p><strong>【3】标识符定义规则：</strong></p>\n<p>1.四个可以（组成部分）：数字，字母，下划线_，美元符号$</p>\n<p>注意：字母概念比较宽泛，指的是英文字母，汉字，日语，俄语……</p>\n<p>但是我们一般起名字尽量使用英文字母</p>\n<p>2.两个不可以：不可以以数字开头，不可以使用java中的关键字</p>\n<p>3.见名知意：增加可读性</p>\n<p><strong>4.大小写敏感</strong>： int a ; int A;</p>\n<p><strong>5.遵照驼峰命名：</strong></p>\n<p>类名：首字母大写，其余遵循驼峰命名</p>\n<p>方法名，变量名：首字母小写，其余遵循驼峰命名</p>\n<p>包名：全部小写，不遵循驼峰命名</p>\n<p><strong>6.长度无限制，但是不建议太长 asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd</strong></p>\n<h1 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h1><p><strong>关键字：</strong>被JAVA语言赋予了特殊含义，用作专门用途的单词</p>\n<p>特点：JAVA中所有关键字都为小写</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2phdmEvbnV0c2FuZGJvbHRzL19rZXl3b3Jkcy5odG1s\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</span></p>\n\n\n\n\n\n\n<h1 id=\"变量和常量\"><a href=\"#变量和常量\" class=\"headerlink\" title=\"变量和常量\"></a>变量和常量</h1><p>举例：</p>\n<p>丽丽的年龄：去年17岁，今年18岁，明年19岁</p>\n<p>年龄：17–》18—》19 –》值不断变化</p>\n<p>年龄—》变量</p>\n<p>常量： 17 ， 18 ， 19 —-》 常量中的字面常量</p>\n<h2 id=\"字面常量\"><a href=\"#字面常量\" class=\"headerlink\" title=\"字面常量\"></a>字面常量</h2><p><strong>常量分为两种：</strong></p>\n<p>常量通常指的是一个固定的值，例如：1、2、3、’a’、’b’、true、false、”helloWorld”等。</p>\n<p>在Java语言中，主要是利用关键字final来定义一个常量。 常量一旦被初始化后不能再更改其值。</p>\n<p>为了更好的区分和表述，一般将1、2、3、’a’、’b’、true、false、”helloWorld”等称为字面常量，而使用final修饰的PI等称为符号常量（字符常量）。</p>\n<p><strong>字面常量的类型：</strong></p>\n\n\n\n<p>注意：逻辑常量就两个值，一个是true，一个是false</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量本质上就是代表一个”可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可通过变量名来访问“对应的存储空间”，从而操纵这个“存储空间”存储的值。Java是一种强类型语言，每个变量都必须声明其数据类型。变量的数据类型决定了变量占据存储空间的大小。 比如，int a&#x3D;3; 表示a变量的空间大小为4个字节。变量作为程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储空间。</p>\n<p>【1】变量声明格式：</p>\n<p>type varName [&#x3D;value][,varName[&#x3D;value]…]; &#x2F;&#x2F;[ ]中的内容为可选项，即可有可无</p>\n<p>数据类型 变量名 [&#x3D;初始值] [,变量名 [&#x3D;初始值]…];</p>\n<p>案例：</p>\n<p>int age &#x3D; 19 , age2 &#x3D; 90 ;</p>\n<p>int age,age2;</p>\n<p>【2】变量的声明：</p>\n<p>（1）如果你只定义一个变量，没有给变量进行赋值的话，那么其实这个变量相当于没有定义：</p>\n\n\n\n<p>（2）变量如果没有进行赋值的话，那么使用的时候会出错，告诉你：尚未初始化变量：</p>\n\n\n\n<p>【3】变量的赋值：</p>\n\n\n\n<p>我们自己定义的时候直接就可以用一句话定义：</p>\n<p>int age &#x3D; 10;</p>\n<p>变量的值可以更改：</p>\n<pre><code class=\"java\">public class TestVar01&#123;\n    public static void main(String[] args)&#123;\n        //变量的声明（定义变量）（以年龄为案例讲解）\n        //java是一个强类型的语言，只要声明变量就必须定义类型：定义整数类型\n        int age ; //定义一个整数类型的变量，变量名字为age\n        //对变量进行赋值操作：\n        age = 10; //变量名字为age，具体的值为10\n        age = 12;\n        age = 20;\n        age = age + 4;\n        age = 9;\n        age = 9;\n        System.out.println(age);\n        \n    &#125;\n&#125;\n</code></pre>\n<p>变量不可以重复定义：</p>\n\n\n\n<p>【4】变量的使用：</p>\n<pre><code class=\"java\">public class TestVar01&#123;\n    public static void main(String[] args)&#123;\n        //变量的声明（定义变量）（以年龄为案例讲解）\n        //java是一个强类型的语言，只要声明变量就必须定义类型：定义整数类型\n        int age ; //定义一个整数类型的变量，变量名字为age\n        //对变量进行赋值操作：\n        age = 10; //变量名字为age，具体的值为10\n        age = 12;\n        age = 20;\n        age = age + 4;\n        age = 9;\n        age = 9;\n        System.out.println(age);\n        System.out.println(age-2);\n        System.out.println(age+10);\n        int num = age + 66;\n        System.out.println(num);\n        \n    &#125;\n&#125;\n</code></pre>\n<p>扩展：</p>\n<pre><code class=\"java\">public class TestVar02&#123;\n    public static void main(String[] args)&#123;\n        int a = 10;\n        int b = 20;\n        int c = a + b ;\n    &#125;\n&#125;\n</code></pre>\n<p>现在对上述代码进行“反编译过程”“反汇编过程”</p>\n\n\n\n\n\n\n<p>【5】变量的内存：</p>\n\n\n\n<p>【6】习题：</p>\n<pre><code class=\"java\">public class TestVar03&#123;\n    public static void main(String[] args)&#123;\n        int num1 = 10;\n        int num2 = 20;\n        num1 = num2;\n        num2 = num2 + 10;\n        num1 = num2 - 10;\n        num2 = num1;\n        System.out.println(&quot;num1=&quot;+num1);\n        System.out.println(&quot;num2=&quot;+num2);\n    &#125;\n&#125;\n</code></pre>\n<p>内存分析：</p>\n\n\n\n<p>结果：</p>\n\n\n\n<p>【7】变量的作用域：</p>\n<p>作用域指的就是作用范围，变量在什么范围中有效</p>\n<p>作用范围就是离它最近的{}</p>\n<p>备注：一会我们写的代码，不要去运行，会出错</p>\n<pre><code class=\"java\">/\\*\n    局部变量：定义在方法中\n    成员变量：定义在类中，方法外\n    \\*/\npublic class TestVar04&#123;\n    int b = 20;\n    public static void main(String[] args)&#123;\n        System.out.println(a);//no\n        int a = 10;\n        System.out.println(a);//yes\n        System.out.println(b);//yes\n        &#123;\n            int c = 40;\n            System.out.println(c);//yes\n            int a = 50;//属于变量的重复定义\n        &#125;\n        System.out.println(c);//no\n    &#125;\n\n    public void eat()&#123;\n        System.out.println(b);//yes\n        System.out.println(a);//no\n        int a = 30;//不是变量的重复定义\n        System.out.println(a);//yes\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h1><p>Java是一种强类型语言，每个变量都必须声明其数据类型。</p>\n<p>Java的数据类型可分为两大类：基本数据类型（primitive data type）和引用数据类型（reference data type）。</p>\n\n\n\n<p>PS:巧妙记忆：除了基本数据类型以外的所有类型都属于引用数据类型，本章重点：基本数据类型</p>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><h3 id=\"整数类型常量\"><a href=\"#整数类型常量\" class=\"headerlink\" title=\"整数类型常量\"></a>整数类型常量</h3><p>十进制整数，如：99, -500, 0</p>\n<p>八进制整数，要求以 0 开头，如：015</p>\n<p>十六进制数，要求 0x 或 0X 开头，如：0x15</p>\n<p>二进制：要求0b或者0B开头，如：0b11</p>\n<p>几进制：就是逢几进1的问题：</p>\n<p>平时实际生活中用的最多的是：十进制</p>\n<p>计算机用二进制最多</p>\n\n\n\n<p>扩展：进制转换问题</p>\n<p>【1】二进制转换为十进制：</p>\n<p>二进制： 1101</p>\n<p>1*2^3 + 1*2^2 + 0*2^1 + 1*2^0</p>\n<p>&#x3D; 8 + 4 + 0 + 1</p>\n<p>&#x3D; 13</p>\n<p>【2】十进制转换为二进制：</p>\n<p>十进制 13</p>\n\n\n\n<p>【3】八进制转换十进制：</p>\n<p>八进制： 16</p>\n<p>1*8^1 + 6*8^0</p>\n<p>&#x3D; 8 + 6</p>\n<p>&#x3D;14</p>\n<p>【4】十进制转换为八进制：</p>\n<p>十进制14：</p>\n\n\n\n<p>【5】八进制转换为十六进制：</p>\n<p>把十进制当做一个中转站：</p>\n<p>八进制—》十进制—》十六进制</p>\n<p>实际上根本不用自己转换这么麻烦：我们可以直接用系统中提供给我们的计算器：</p>\n\n\n\n<h3 id=\"整数类型变量\"><a href=\"#整数类型变量\" class=\"headerlink\" title=\"整数类型变量\"></a>整数类型变量</h3><p><strong>整型数据类型：</strong></p>\n\n\n\n<p>比如：byte的右侧表数范围127怎么算出来的？</p>\n<p>byte: 1字节 &#x3D; 8位</p>\n<p>二进制：01111111</p>\n<p>1*2^6 + 1*2^5 + 1*2^4 + 1*2^3 + 1*2^2 + 1*2^1 + 1*2^0</p>\n<p>&#x3D; 64 + 32 + 16 +8 +4 + 2 +1</p>\n<p>&#x3D; 127</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestVar05&#123;\n    public static void main(String[] args)&#123;\n        //定义整数类型的变量：\n        //给变量赋值的时候，值可以为不同进制的：\n        int num1 = 12 ;//默认情况下赋值就是十进制的情况\n        System.out.println(num1);\n        int num2 = 012;//前面加上0，这个值就是八进制的\n        System.out.println(num2);\n        int num3 = 0x12;//前面加上0x或者0X，这个值就是十六进制的\n        System.out.println(num3);\n        int num4 = 0b10;//前面加上0b或者0B,这个值就是二进制的\n        System.out.println(num4);\n        \n        //定义byte类型的变量：\n        byte b = 126;//定义了一个byte类型的变量，名字叫b，赋值为12\n        System.out.println(b);\n        //注意：超范围的赋值会报错。\n        short s = 30000;\n        System.out.println(s);\n        int i = 1234;\n        System.out.println(i);\n        //整数类型默认就是int类型的，所以12345678910是一个int类型的数，对于int类型来说，它超出范围了\n        //要想把一个数给long类型变量，那么后面加上L(推荐)或者l就可以了\n        long num5 = 12345678910L;\n        System.out.println(num5);\n        //注意：只有这个数超出int类型的范围了后面才需要加上L，否则无需加L也可以赋值给long类型：\n        long num6 = 12;\n        System.out.println(num6);\n        \n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h2><h3 id=\"浮点类型常量\"><a href=\"#浮点类型常量\" class=\"headerlink\" title=\"浮点类型常量\"></a>浮点类型常量</h3><p>（1）十进制数形式，例如:</p>\n<p>3.14 314.0 0.314</p>\n<p>（2）科学记数法形式，如</p>\n<p>314e2 314E2 (E的大小写没有区分) 314E-2</p>\n<p>double f &#x3D; 314e2; &#x2F;&#x2F;314*10^2–&gt;31400.0</p>\n<p>double f2 &#x3D; 314e-2; &#x2F;&#x2F;314*10^(-2)–&gt;3.14</p>\n<h3 id=\"浮点类型变量\"><a href=\"#浮点类型变量\" class=\"headerlink\" title=\"浮点类型变量\"></a>浮点类型变量</h3><p>float类型又被称作单精度类型，尾数可以精确到7位有效数字，在很多情况下，float类型的精度很难满足需求。</p>\n<p>而double表示这种类型的数值精度约是float类型的两倍，又被称作双精度类型，绝大部分应用程序都采用double类型。</p>\n<p>float类型的数值有一个后缀F或者f ，没有后缀F&#x2F;f的浮点数值默认为double类型。</p>\n<p>也可以在浮点数值后添加后缀D或者d， 以明确其为double类型。</p>\n\n\n\n<p>PS：有效数字指的是从左开始第一个不为0的数到最后一个数</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestVar06&#123;\n    public static void main(String[] args)&#123;\n        //浮点类型的常量有两种形式：\n        //十进制形式：\n        double num1 = 3.14;\n        System.out.println(num1);\n        //科学计数法形式：\n        double num2 = 314E-2;\n        System.out.println(num2);\n        \n        //浮点类型的变量：\n        //注意：浮点型默认是double类型的，要想将一个double类型的数赋给float类型，必须后面加上F或者f\n        float f1 = 3.14234567898623F;\n        System.out.println(f1);\n        //注意：double类型后面可以加D或者d，但是一般我们都省略不写\n        double d1 = 3.14234567898623D;\n        System.out.println(d1);\n        \n        //注意：我们最好不要进行浮点类型的比较：\n        float f2 = 0.3F;\n        double d2 = 0.3;\n        System.out.println(f2==d2);\n        /\\*\n            区别：\n            = 赋值运算： 将等号右侧的值赋给等号左侧\n            == 判断==左右两侧的值是否相等 ：结果要么相等 要么不相等\n            ==运算符的结果就是要么是true，要么是false\n            \\*/\n            \n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h2><p>【1】Java中使用单引号来表示字符常量，字符型在内存中占2个字节。</p>\n<p>char 类型用来表示在Unicode编码表中的字符。Unicode编码被设计用来处理各种语言的文字，它占2个字节，可允许有65536个字符。</p>\n<p>【2】转义字符：</p>\n\n\n\n<p>【3】ASCII表：</p>\n\n\n\n<p>【4】Unicode编码表：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3NndW8vcC83NDAxODc0Lmh0bWw=\">https://www.cnblogs.com/csguo/p/7401874.html</span></p>\n<p>代码1：</p>\n<pre><code class=\"java\">public class TestVar07&#123;\n    public static void main(String[] args)&#123;\n        //定义字符类型的变量：\n        char ch1 = &#39;a&#39;;\n        System.out.println(ch1);\n        char ch2 = &#39;A&#39;;\n        System.out.println(ch2);\n        char ch3 = &#39;4&#39;;\n        System.out.println(ch3);\n        char ch4 = &#39;中&#39;;\n        System.out.println(ch4);\n        char ch5 = &#39;?&#39;;\n        System.out.println(ch5);\n        //java中无论：字母，数字，符号，中文都是字符类型的常量，都占用2个字节。\n        char ch6 = &#39; &#39;;\n        System.out.println(ch6);\n        //字符类型：单引号引起来的单个字符\n        System.out.println(&quot;--------------------------------&quot;);\n        /\\*\n            转义字符：\n            \\\\将后面的普通字符转换为特殊含义\n            \\*/\n            char ch7 = &#39;\\\\n&#39;;\n        System.out.println(&quot;aaa&quot;+ch7+&quot;bbb&quot;);\n        \n        System.out.println(&quot;aaa\\\\nbbb&quot;);// \\\\n 换行\n        \n        System.out.println(&quot;aaaaaaa\\\\tbbb&quot;); // \\\\t 制表符\n        \n        System.out.println(&quot;aaa\\\\bbbb&quot;);//aabbb \\\\b 向前退一格\n        System.out.println(&quot;aaa\\\\rbbb&quot;);//bbb \\\\r 将光标到本行开头 ：回车\n        \n        System.out.println(&quot;\\\\&quot;java\\\\&quot;&quot;); // \\\\&quot; 将双引号原样输出 \\\\&#39; 将单引号原样输出 \\\\\\\\ 将\\\\原样输出\n    &#125;\n&#125;\n</code></pre>\n<p>代码2：</p>\n<pre><code class=\"java\">public class TestVar08&#123;\n    public static void main(String[] args)&#123;\n        char ch1 = &#39;A&#39;;\n        System.out.println(ch1);//A\n        System.out.println(ch1+90);//155\n        System.out.println(155-ch1);//90\n        //char类型我们看到的样子就是它本身的字面常量,但是底层在进行计算的时候，实际上是按照一个码进行计算的。\n        //这个码就是ASCII\n        //之前说char类型是按照Unicode码表进行存储的 (Unicode兼容了ASCII码，Unicode的前128位置ASCII)\n        \n        char ch2 = &#39;中&#39;;\n        System.out.println(ch2);// 中\n        System.out.println(ch2+90);// 20103\n        System.out.println(20103-ch2);// 90\n        \n        //转换：\n        int num1 = (int)ch2;\n        System.out.println(num1);//20013\n        \n        char ch = (char)20013;\n        System.out.println(ch);\n        \n        int num2 = &#39;中&#39;;\n        char ch5 = 20013;\n        System.out.println(ch5);\n        \n        //面试题：\n        char ch6 = &#39;2&#39;+2;\n        System.out.println(ch6);//&#39;4&#39;---\\&gt;4\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"编码和字符集\"><a href=\"#编码和字符集\" class=\"headerlink\" title=\"编码和字符集\"></a>编码和字符集</h3><p>【1】什么是编码？</p>\n\n\n\n<p>【2】通过生活案例：</p>\n\n\n\n<p>【3】由权威机构形成的编码表才可以称之为：字符集</p>\n<ul>\n<li>ASCII</li>\n</ul>\n<p>英文字符集</p>\n<p>用一个字节的7位表示</p>\n<ul>\n<li>IOS8859-1</li>\n</ul>\n<p>西欧字符集</p>\n<p>用一个字节的8位表示</p>\n<ul>\n<li>GB2312</li>\n</ul>\n<p>简体中文字符集</p>\n<p>最多使用两个字节编码</p>\n<p>PS：中文：2个字节</p>\n<p>GB2312兼容了ASCII中的字符：</p>\n<ul>\n<li>GBK</li>\n</ul>\n<p>GB2312的升级，加入了繁体字</p>\n<p>最多使用两个字节编码</p>\n<p>疑问：</p>\n\n\n\n<p>首位如果是0：一个字节代码代表一个字符</p>\n<p>首位如果是1：那么一个字节不够，要加上后面的字节才能完整的表示一个字符。</p>\n<ul>\n<li>Unicode</li>\n</ul>\n<p>国际通用字符集，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。</p>\n<p>退出了UTF标准：</p>\n<p>三种编码方案： UTF-8，UTF-16,UTF-32</p>\n<p>以UTF-8为案例讲解：</p>\n<p>中文： 珊 —》Unicode ： 29642</p>\n\n\n\n\n\n\n<p>底层存储：</p>\n\n\n\n<p>UTF-8标准最多可以用6个字节表示：</p>\n\n\n\n<p>以后我们用的最多的就是UTF-8.</p>\n<h3 id=\"解释乱码问题\"><a href=\"#解释乱码问题\" class=\"headerlink\" title=\"解释乱码问题\"></a>解释乱码问题</h3>\n\n\n<p>用记事本选择编码方法的时候一般要选择为ANSI—》获取当前操作系统的编码格式：GBK</p>\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><p>boolean类型有两个常量值，true和false，在内存中占一位（不是一个字节），不可以使用 0 或非 0 的整数替代 true 和 false ，这点和C语言不同。 boolean 类型用来判断逻辑条件，一般用于程序流程控制 。</p>\n<pre><code class=\"java\">public class TestVar09&#123;\n    public static void main(String[] args)&#123;\n        //创建一个布尔类型的变量：\n        boolean flag1 = true;\n        System.out.println(flag1);\n        boolean flag2 = false;\n        System.out.println(flag2);\n        boolean flag3 = 5==9;\n        System.out.println(flag3);\n        boolean flag4 = 5\\&lt;9;\n        System.out.println(flag4);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"基本数据类型的转换\"><a href=\"#基本数据类型的转换\" class=\"headerlink\" title=\"基本数据类型的转换\"></a>基本数据类型的转换</h2><p>【1】什么是类型转换：</p>\n<p>在赋值运算或者算数运算的时候，要求数据类型一致，就要进行类型的转换。</p>\n<p>【2】类型转换的种类：</p>\n<p>自动转换，强制转换</p>\n<p>【3】内存演示：</p>\n\n\n\n<p>【4】代码：</p>\n<pre><code class=\"java\">public class TestVar10&#123;\n    public static void main(String[] args)&#123;\n        //类型转换的两种形式：\n        double d = 6;//int--\\&gt;double 自动类型转换\n        System.out.println(d);\n        int i = (int)6.5;//double---\\&gt;int 强制类型转换 （强转）\n        System.out.println(i);\n        \n        //在同一个表达式中，有多个数据类型的时候，应该如何处理：\n        //多种数据类型参与运算的时候，整数类型，浮点类型，字符类型都可以参与运算，唯独布尔类型不可以参与运算。\n        //double d2 = 12+1294L+8.5F+3.81+&#39;a&#39;+true;\n        double d2 = 12+1294L+8.5F+3.81+&#39;a&#39;;\n        System.out.println(d2);\n        /\\*\n            类型级别：(从低到高的)\n            byte,short,char--\\&gt;int---\\&gt;long---\\&gt;float---\\&gt;double\n            级别用来做什么？当一个表达式中有多种数据类型的时候，要找出当前表达式中级别最高的那个类型，然后\n            其余的类型都转换为当前表达式中级别最高的类型进行计算。\n            double d2 = 12+1294L+8.5F+3.81+&#39;a&#39;;\n        = 12.0+1294.0+8.5+3.81+97.0\n            \\*/\n            int i2 = (int)(12+1294L+8.5F+3.81+&#39;a&#39;);\n        System.out.println(i2);\n        /\\*\n            在进行运算的时候：\n            左=右 : 直接赋值\n                左\\&lt;右 ：强转\n                左\\&gt;右 ：直接自动转换\n                \\*/\n                \n                //以下情况属于特殊情形：对于byte，short，char类型来说，只要在他们的表数范围中，赋值的时候就不需要进行\n                //强转了直接赋值即可。\n                byte b = 12;\n        System.out.println(b);\n        byte b2 = (byte)270;\n        System.out.println(b2);\n        \n        \n        \n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"练习：final，字符常量，Scanner的使用\"><a href=\"#练习：final，字符常量，Scanner的使用\" class=\"headerlink\" title=\"练习：final，字符常量，Scanner的使用\"></a>练习：final，字符常量，Scanner的使用</h2><pre><code class=\"java\">import java.util.Scanner;//形象理解：在java.util下将Scanner拿过来用\npublic class TestVar11&#123;\n    public static void main(String[] args)&#123;\n        //实现功能：求圆的周长和面积\n        //【1】提取变量：提取变量，就是为了一劳永逸，以后只要改变变量的值，下面只要用到这个变量的地方，取值也都发生变化了\n        //【2】一个变量被final修饰，这个变量就变成了一个常量，这个常量的值就不可变了\n        // 这个常量就是我们所说的 字符常量 ---》pi\n        // 约定俗成的规定：字符常量的名字全部大写\n        //【3】使用扫描器：Scanner的使用--》注意通过形象的理解去使用\n        final double PI = 3.14;\n        //拿来一个扫描器：\n        Scanner sc = new Scanner(System.in);\n        //给一个友好性的提示：\n        System.out.print(&quot;请录入一个半径：&quot;);\n        //让扫描器扫描键盘录入的int类型的数据：\n        int r = sc.nextInt();\n        \n        //求周长：\n        double c = 2\\*PI\\*r;\n        System.out.println(&quot;周长为：&quot;+c);\n        \n        //求面积：\n        //PI = 9.29;报错：TestVar11.java:12: 错误: 无法为最终变量pi分配值\n        double s = PI\\*r\\*r;\n        System.out.println(&quot;面积为：&quot;+s);\n        \n        \n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"练习：加深对Scanner的使用\"><a href=\"#练习：加深对Scanner的使用\" class=\"headerlink\" title=\"练习：加深对Scanner的使用\"></a>练习：加深对Scanner的使用</h2>\n\n\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestVar12&#123;\n    public static void main(String[] args)&#123;\n        //键盘录入学生的信息：年龄，身高，姓名，性别：\n        //键盘录入年龄：(接收int类型数据)\n        Scanner sc = new Scanner(System.in);\n        System.out.print(&quot;请录入年龄：&quot;);\n        int age = sc.nextInt();\n        //键盘录入身高：（接收double类型数据）\n        System.out.print(&quot;请录入身高：&quot;);\n        double height = sc.nextDouble();\n        //键盘录入姓名：(接收String类型数据--》字符串)\n        System.out.print(&quot;请录入姓名：&quot;);\n        String name = sc.next();\n        //键盘录入性别：(接受char类型)\n        System.out.print(&quot;请录入性别：&quot;);\n        String sexStr = sc.next();\n        char sex = sexStr.charAt(0);\n        //上面两句可以合为一句表示：char sex = sc.next().charAt(0);\n        System.out.println(&quot;该学生的信息为:姓名是：&quot;+name+&quot;,年龄是：&quot;+age+&quot;,身高为：&quot;+height+&quot;,性别是：&quot;+sex);\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC3%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC3%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/",
            "title": "第3章_运算符",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"Java中的运算符\"><a href=\"#Java中的运算符\" class=\"headerlink\" title=\"Java中的运算符\"></a>Java中的运算符</h1><p>【1】Java 语言支持如下运算符：</p>\n<ul>\n<li>算术运算符</li>\n</ul>\n<p>+，-，*，&#x2F;，%，++（自增），–（自减）</p>\n<ul>\n<li>赋值运算符</li>\n</ul>\n<p>&#x3D;</p>\n<ul>\n<li>扩展赋值运算符</li>\n</ul>\n<p>+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;</p>\n<ul>\n<li>关系运算符</li>\n</ul>\n<p>&gt;，&lt;，&gt;&#x3D;，&lt;&#x3D;，&#x3D;&#x3D;，!&#x3D;</p>\n<ul>\n<li>逻辑运算符</li>\n</ul>\n<p>&amp;，|， &amp;&amp;，||，!，^</p>\n<ul>\n<li>位运算符</li>\n</ul>\n<p>&amp;，|，^，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt; (了解！！！)</p>\n<ul>\n<li>条件运算符</li>\n</ul>\n<p>？：</p>\n<p>【2】相关概念辨析</p>\n<p>+ 运算符 操作符 Operator</p>\n<p>5+6 表达式 expression</p>\n<p>5 6 操作数 Operand</p>\n<p>int m &#x3D;5+6; 语句 Sentence</p>\n<h1 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h1><h2 id=\"x2F-和\"><a href=\"#x2F-和\" class=\"headerlink\" title=\"&#x2F;和%\"></a>&#x2F;和%</h2><p>【1】&#x2F; 除法运算符 ： 表示两个数相除运算</p>\n<p>% 取余运算符： 用来求余数的</p>\n<pre><code class=\"java\">public class TestOpe01&#123;\n\n    public static void main(String[] args)&#123;\n\n        //打印结果：\n\n        System.out.println(12/3);\n\n        System.out.println(12%5);\n\n        System.out.println(12/3.0);\n\n        System.out.println(12%5.0);\n\n    &#125;\n\n&#125;\n</code></pre>\n<p>【2】练习：</p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class TestOpe02&#123;\n\n    public static void main(String[] args)&#123;\n\n        //实现功能：任意给出一个四位数，求出每位上的数字并输出\n\n        \n\n        //1.任意给出一个四位数：\n\n        Scanner input = new Scanner(System.in);\n\n        System.out.println(&quot;请录入一个四位数：&quot;);\n\n        int num = input.nextInt();\n\n        \n\n        \n\n        //2.求出每位上的数字：\n\n        //个位数：\n\n        int num1 = num%10;\n\n        //十位数：\n\n        int num2 = num/10%10;//1234---\\&gt;123---\\&gt;3\n\n        //百位数：\n\n        int num3 = num/100%10;//1234---\\&gt;12---\\&gt;2\n\n        //千位数：\n\n        int num4 = num/1000;//1234---\\&gt;1\n\n        \n\n        \n\n        //3.输出每位上的数字：\n\n        System.out.println(&quot;个位上的数为：&quot;+num1);\n\n        System.out.println(&quot;十位上的数为：&quot;+num2);\n\n        System.out.println(&quot;百位上的数为：&quot;+num3);\n\n        System.out.println(&quot;千位上的数为：&quot;+num4);\n\n    &#125;\n\n    \n\n&#125;\n</code></pre>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"+\"></a>+</h2><p>【1】+的作用：</p>\n<p>（1）表示正数</p>\n<p>（2）表示相加操作</p>\n<p>（3）进行字符串的拼接</p>\n<p>【2】代码练习：</p>\n<pre><code class=\"java\">public class TestOpe03&#123;\n\n    public static void main(String[] args)&#123;\n\n        //表示正数：\n\n        System.out.println(+5);//5\n\n        //相加操作：\n\n        System.out.println(5+6);//11\n\n        System.out.println(5+&#39;6&#39;);//59\n\n        //字符串的拼接：\n\n        //规则：+左右两侧的任意一侧有字符串，那么这个加号就是字符串拼接的作用，结果一定是字符串\n\n        int num = 56;\n\n        System.out.println(&quot;num=&quot;+num);//&quot;num=56&quot; ---\\&gt; num=56\n\n        System.out.println(5+6+&quot;7&quot;);//11+&quot;7&quot;---\\&gt;&quot;117&quot; ---\\&gt;117\n\n        System.out.println(5+&#39;6&#39;+&quot;7&quot;);//59 +&quot;7&quot;---\\&gt;&quot;597&quot; ---\\&gt;597\n\n        System.out.println(&quot;5&quot;+6+&quot;7&quot;);//&quot;56&quot;+&quot;7&quot; ---\\&gt;&quot;567&quot;---\\&gt;567\n\n        System.out.println(&quot;5&quot;+&#39;6&#39;+&quot;7&quot;);//&quot;56&quot;+&quot;7&quot;---\\&gt;&quot;567&quot;---\\&gt;567\n\n        System.out.println(&quot;5&quot;+&#39;6&#39;+&#39;7&#39;);//&quot;56&quot;+&#39;7&#39;---\\&gt;&quot;567&quot;---567\n\n    &#125;\n\n&#125;\n</code></pre>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"++\"></a>++</h2><p>【1】++：</p>\n<pre><code class=\"java\">public class TestOpe04&#123;\n\n    public static void main(String[] args)&#123;\n\n        int a = 5;\n\n        a++;//理解为：相当于 a=a+1 操作\n\n        System.out.println(a);//6\n\n        \n\n        a = 5;\n\n        \\++a;//理解为：相当于 a=a+1 操作\n\n        System.out.println(a); //6\n\n        \n\n        //总结：++单独使用的时候，无论放在前还是后，都是加1操作\n\n        \n\n        //将++参与到运算中：\n\n        //规则：看++在前还是在后，如果++在后：先运算，后加1 如果++在前，先加1，后运算\n\n        a = 5;\n\n        int m = a++ + 7;//先运算 m=a+7 再加1： a = a+1\n\n        System.out.println(m);//12\n\n        System.out.println(a);//6\n\n        \n\n        a = 5;\n\n        int n = ++a + 7;//先加1 a=a+1 再运算： n = a+7\n\n        System.out.println(n);//13\n\n        System.out.println(a);//6\n\n    &#125;\n\n&#125;\n</code></pre>\n<p>无论这个变量是否参与到运算中去，只要用++运算符，这个变量本身就加1操作</p>\n<p>只是说如果变量参与到运算中去的话，对运算结果是产生影响：</p>\n<p>看++在前还是在后，如果++在后：先运算，后加1 如果++在前，先加1，后运算</p>\n<p>【2】练习：</p>\n<pre><code class=\"java\">public class TestOpe05&#123;\n\n    public static void main(String[] args)&#123;\n\n        int a = 5;\n\n        System.out.println(a++ + a++);\n\n        System.out.println(a++ + ++a);\n\n        System.out.println(++a + a++);\n\n        System.out.println(++a + ++a);\n\n    &#125;\n\n&#125;\n</code></pre>\n<p>运算过程：</p>\n\n\n\n<h1 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h1><p>【1】&#x3D;的作用： 将等号右侧的值赋给等号左侧：</p>\n<p>int age &#x3D; 19;</p>\n<p>int age &#x3D; 10+3+8;</p>\n<p>【2】练习：</p>\n<pre><code class=\"java\">public class TestOpe06&#123;\n    public static void main(String[] args)&#123;\n        //任意给出两个数，交换两个数并输出：\n        //1.给出两个数：\n        int num1 = 10;\n        int num2 = 20;\n        \n        //2.输出交换前的两个数：\n        System.out.println(&quot;交换前：&quot;+num1+&quot;\\\\t&quot;+num2);\n        \n        //3.交换\n        /\\*\n            错误代码：\n            num1 = num2;\n        num2 = num1;\n        \\*/\n            //解决办法：\n            //引入一个中间变量:\n            int t;\n        t = num1;\n        num1 = num2;\n        num2 = t;\n        /\\*\n            int t;\n        t = num2;\n        num2 = num1;\n        num1 = t;\n        \n        \\*/\n            \n            //4.输出交换后的两个数：\n            System.out.println(&quot;交换后：&quot;+num1+&quot;\\\\t&quot;+num2);\n    &#125;\n&#125;\n</code></pre>\n\n\n\n<p>面试题：两个数交换的四种方式：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQnJhZC1MZWUvcC81ODA4Mjk5Lmh0bWw=\">https://www.cnblogs.com/Brad-Lee/p/5808299.html</span></p>\n<h1 id=\"扩展赋值运算符\"><a href=\"#扩展赋值运算符\" class=\"headerlink\" title=\"扩展赋值运算符\"></a>扩展赋值运算符</h1><p>【1】代码：</p>\n<pre><code class=\"java\">public class TestOpe07&#123;\n    public static void main(String[] args)&#123;\n        //实现功能：给出三个数，求和：\n        //1.给出三个数：\n        int num1 = 10;\n        int num2 = 20;\n        int num3 = 30;\n        //2.求和\n        //int sum = num1+num2+num3;\n        //定义一个变量，用来接收和：\n        int sum = 0;\n        sum = sum + num1;//等效： sum += num1;\n        sum = sum + num2;// sum += num2;\n        sum = sum + num3;//sum += num3;\n        //3.将和输出：\n        System.out.println(&quot;和：&quot;+sum);\n    &#125;\n&#125;\n</code></pre>\n<p>内存：</p>\n\n\n\n<p>【2】a+&#x3D;b 和 a&#x3D;a+b 区别：</p>\n<p>（1）a+&#x3D;b 可读性稍差 编译效率高 底层自动进行类型转换</p>\n<p>（2）a&#x3D;a+b 可读性好 编译效率低 手动进行类型转换</p>\n<p>【3】面试题</p>\n<p>（1）请问a+&#x3D;b相当于a&#x3D;a+b,那么也相当于 a&#x3D;b+a吗？</p>\n\n\n\n<p>（2）下面的代码哪一句出错： 4</p>\n<p>byte a &#x3D; 10; —&gt;1</p>\n<p>int b &#x3D; 20; —&gt;2</p>\n<p>a+&#x3D;b; —-&gt;3</p>\n<p>a &#x3D; a+b ;—-&gt;4</p>\n<p>更正： a &#x3D; (byte)(a+b);</p>\n<h1 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h1><pre><code class=\"java\">public class TestOpe08&#123;\n    public static void main(String[] args)&#123;\n        //\\&gt;，\\&lt;，\\&gt;=，\\&lt;=，==，!=\n        //关系运算符最终结果：要么是true要么是false\n        System.out.println(4\\&gt;9);//false\n        System.out.println(4\\&lt;9);//true\n        System.out.println(4\\&gt;=9);//false\n        System.out.println(4\\&lt;=9);//true\n        System.out.println(4==9);//false\n        System.out.println(4!=9);//true\n        System.out.println((5\\&lt;9)!=(6==8));//true\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h1><p>&amp;，|， &amp;&amp;，||，!，^</p>\n<p>逻辑运算符：进行逻辑运算的，运算符左右连接的都是 布尔类型的操作数，最终表达式的结果是布尔值：要么是true，要么false</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestOpe09&#123;\n    public static void main(String[] args)&#123;\n        // 逻辑与 ：&amp; 规律：只要有一个操作数是false，那么结果一定是false\n        System.out.println(true&amp;true);\n        System.out.println(true&amp;false);\n        System.out.println(false&amp;false);\n        System.out.println(false&amp;true);\n        \n        // 短路与：&amp;&amp; 规律：效率高一些，只要第一个表达式是false，那么第二个表达式就不用计算了，结果一定是false\n        System.out.println(true&amp;&amp;true);\n        System.out.println(true&amp;&amp;false);\n        System.out.println(false&amp;&amp;false);\n        System.out.println(false&amp;&amp;true);\n        \n        // 逻辑或：\\| 规律：只要有一个操作数是true，那么结果一定是true\n        System.out.println(true\\|true);\n        System.out.println(true\\|false);\n        System.out.println(false\\|false);\n        System.out.println(false\\|true);\n        \n        // 短路或：\\|\\| 规律：效率高一些，只要第一个表达式是true，那么第二个表达式就不用计算了，结果一定是true\n        System.out.println(true\\|\\|true);\n        System.out.println(true\\|\\|false);\n        System.out.println(false\\|\\|false);\n        System.out.println(false\\|\\|true);\n        \n        //逻辑非： ! 规律：相反结果\n        System.out.println(!true);//false\n        System.out.println(!false);//true\n        \n        //逻辑异或： \\^ 规律：两个操作数相同，结果为false，不相同，结果为true\n        System.out.println(true\\^true);\n        System.out.println(true\\^false);\n        System.out.println(false\\^false);\n        System.out.println(false\\^true);\n    &#125;\n&#125;\n</code></pre>\n<p>再做一个加深的练习：看代码 说结果：</p>\n<pre><code class=\"java\">public class TestOpe10&#123;\n    public static void main(String[] args)&#123;\n        int i=8;\n        System.out.println((5\\&gt;7)&amp;&amp;(i++==2)); //false\n        System.out.println(i); //8\n\n\n        int a=8;\n        System.out.println((5\\&gt;7)&amp;(a++==2)); //false\n        System.out.println(a); //9\n\n\n        int m=8;\n        System.out.println((5\\&lt;7)&amp;&amp;(m++==2)); //false\n        System.out.println(m); //9\n\n        int b=2;\n        System.out.println((5\\&lt;7)&amp;(b++==2)); //true\n        System.out.println(b); //3\n\n        int c=2;\n        System.out.println((5\\&lt;7)&amp;(++c==2)); //false\n        System.out.println(c); //3\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h1><p>【1】条件运算符：又称： 三元运算符&#x2F;三目运算符</p>\n<p>【2】格式：</p>\n<p>a?b:c</p>\n<p>其中a是一个布尔类型的表达式，返回结果要么是true要么false，通过a的结果决定最终表达式的结果:</p>\n<p>如果a的结果是true，那么表达式最终结果为b</p>\n<p>如果a的结果是false，那么表达式最终结果为c</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestOpe11&#123;\n    public static void main(String[] args)&#123;\n        int num = (5\\&gt;7)?6:9 ;\n        System.out.println(num);\n\n        String str = (4==4)?&quot;你好&quot;:&quot;你不好&quot; ;\n        System.out.println(str);\n\n        System.out.println((4==4)?&quot;你好&quot;:&quot;你不好&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>练习：</p>\n<ol>\n<li>import java.util.*;&#x2F;&#x2F;*代表所有</li>\n</ol>\n<pre><code class=\"java\"> public class TestOpe12&#123;\n public static void main(String[] args)&#123;\n //实现功能：男孩女孩选择晚饭吃什么，如果意见一致，听男生的，如果意见不一致，听女生的\n \n //1.要让男孩女孩选择晚饭吃什么：\n Scanner sc = new Scanner(System.in);\n System.out.println(&quot;请选择今晚吃什么：1.火锅 2.烧烤 3.麻辣烫 4.西餐&quot;);\n System.out.println(&quot;请男孩选择：&quot;);\n int boyChoice = sc.nextInt();\n System.out.println(&quot;请女孩选择：&quot;);\n int girlChoice = sc.nextInt();\n //2.判断：\n System.out.println(boyChoice==girlChoice?&quot;听男孩的&quot;:&quot;听女孩的&quot;);\n &#125;\n &#125;\n</code></pre>\n<p>PS:三目运算符可以代替后续我们要学习的if-else</p>\n<h1 id=\"位运算符-了解\"><a href=\"#位运算符-了解\" class=\"headerlink\" title=\"位运算符(了解)\"></a>位运算符(了解)</h1><p>位运算符：&amp;，|，^，~ ， &gt;&gt;，&lt;&lt;，&gt;&gt;&gt;</p>\n<p>如何区分逻辑运算符和位运算符：</p>\n<p>逻辑运算符：左右连接的是布尔类型的操作数</p>\n<p>位运算符：左右连接的是具体的数值</p>\n<p>【1】&lt;&lt; 左移</p>\n<p>3&lt;&lt;2 &#x3D; 12</p>\n\n\n\n<p>面试题： 4乘以8最快的方式： 4&lt;&lt;3</p>\n<p>【2】&gt;&gt; 有符号右移</p>\n<p>6&gt;&gt;2 &#x3D; 1</p>\n\n\n\n<p>-6&gt;&gt;2 &#x3D; -2</p>\n\n\n\n<p>【3】&gt;&gt;&gt; 无符号右移：</p>\n<p>6&gt;&gt;&gt;2 &#x3D; 1</p>\n\n\n\n<p>【4】 &amp; 与</p>\n<p>6&amp;3 &#x3D; 2</p>\n\n\n\n<p>【5】| 或</p>\n<p>6|3&#x3D;7</p>\n\n\n\n<p>【6】^异或：</p>\n<p>6^3 &#x3D; 5</p>\n\n\n\n<p>【7】~反：</p>\n<p>~6 &#x3D; -7</p>\n\n\n\n<p>PS：</p>\n<p>byte类型的表数范围的 -128是怎么算出来的</p>\n<p>127： 01111111</p>\n<p>-128： 10000000</p>\n<p>一看就是个负数</p>\n<p>减1： 01111111</p>\n<p>取反： 10000000 —》2^7 &#x3D; 128</p>\n<p>加负号： -128</p>\n<h1 id=\"运算符总结\"><a href=\"#运算符总结\" class=\"headerlink\" title=\"运算符总结\"></a>运算符总结</h1>\n\n\n\n\n\n\n\n\n<h1 id=\"运算符的优先级别\"><a href=\"#运算符的优先级别\" class=\"headerlink\" title=\"运算符的优先级别\"></a>运算符的优先级别</h1>\n\n\n<p>不需要去刻意的记优先级关系</p>\n<p>赋值&lt;三目&lt;逻辑&lt;关系&lt;算术&lt;单目</p>\n<p>理解运算符的结合性</p>\n<p>PS:实际开发中我们不会写特别复杂的表达式，你要想先算谁就用()</p>\n<p>案例：</p>\n<p>5&lt;6 | &amp;apos;A&amp;apos;&gt;&amp;apos;a&amp;apos; &amp;&amp; 12*6&lt;&#x3D;45+23&amp;&amp;!true</p>\n<p>&#x3D;5&lt;6 | &amp;apos;A&amp;apos;&gt;&amp;apos;a&amp;apos; &amp;&amp; 12*6&lt;&#x3D;45+23&amp;&amp;false</p>\n<p>&#x3D; 5&lt;6 | &amp;apos;A&amp;apos;&gt;&amp;apos;a&amp;apos; &amp;&amp;72&lt;&#x3D;68&amp;&amp;false</p>\n<p>&#x3D; true|false&amp;&amp;false&amp;&amp;false</p>\n<p>&#x3D; true&amp;&amp;false&amp;&amp;false</p>\n<p>&#x3D;false&amp;&amp;false</p>\n<p>&#x3D;false</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "title": "第4章_流程控制",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"第4章-流程控制\"><a href=\"#第4章-流程控制\" class=\"headerlink\" title=\"第4章_流程控制\"></a>第4章_流程控制</h1><h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>【1】流程控制的作用：</p>\n<p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</p>\n<p>【2】控制语句的分类：</p>\n<p>控制语句分为三类：顺序、选择和循环。</p>\n<p>“顺序结构”代表“先执行a，再执行b”的逻辑。</p>\n<p>“条件判断结构”代表“如果…，则…”的逻辑。</p>\n<p>“循环结构”代表“如果…，则再继续…”的逻辑。</p>\n<p>三种流程控制语句就能表示所有的事情！不信，你可以试试拆分你遇到的各种事情。这三种基本逻辑结构是相互支撑的，它们共同构成了算法的基本结构，无论怎样复杂的逻辑结构，都可以通过它们来表达。所以任何一种高级语言都具备上述两种结构。</p>\n<p>本章是大家真正进入编程界的“门票”。</p>\n<p>【3】流程控制的流程：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0be7aaf463c4b8bcab05594f71875ce8.png\" class=\"\">\n\n\n<h1 id=\"分支结构-选择结构\"><a href=\"#分支结构-选择结构\" class=\"headerlink\" title=\"分支结构(选择结构)\"></a>分支结构(选择结构)</h1><h1 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h1><h3 id=\"单分支\"><a href=\"#单分支\" class=\"headerlink\" title=\"单分支\"></a>单分支</h3><p>【1】语法结构:</p>\n<table>\n<thead>\n<tr>\n<th>if(布尔表达式){   语句块  }</th>\n</tr>\n</thead>\n</table>\n<p>if语句对布尔表达式进行一次判定，若判定为真，则执行{}中的语句块，否则跳过该语句块。流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0931341f710ef8def2eeccb5d15e57c6.png\" class=\"\">\n\n\n<p>【2】代码：</p>\n<pre><code class=\"java\">public class TestIf01&#123;\n    public static void main(String[] args)&#123;\n        //实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品\n        //1.给出三个数：\n        int num1 = 6;\n        int num2 = 2;\n        int num3 = 3;\n        //2.求和\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        sum += num3;\n        System.out.println(&quot;和为：&quot;+sum);\n\n        //3.根据和判断奖品：\n        //如果和大于等于14，那么就是一等奖\n        if(sum\\&gt;=14)&#123;\n            System.out.println(&quot;一等奖&quot;);\n            System.out.println(&quot;恭喜你很幸运，中了一等奖&quot;);\n        &#125;\n\n        if(sum\\&gt;=10&amp;&amp;sum\\&lt;14)&#123;\n            System.out.println(&quot;二等奖&quot;);\n        &#125;\n\n        if(sum\\&gt;=6&amp;&amp;sum\\&lt;10)&#123;\n            System.out.println(&quot;三等奖&quot;);\n        &#125;\n\n        if(sum\\&lt;6)&#123;\n            System.out.println(&quot;四等奖&quot;);\n        &#125;\n\n        /\\*\n            if-单分支：\n                （1）结构：\n                if(条件表达式，这个表达式的结果是布尔值：要么是false，要么是true)&#123;\n                    //如果上面()中的表达式返回结果是true，那么执行&#123;&#125;中代码\n                    //如果上面()中的表达式返回结果是false ，那么不执行&#123;&#125;中代码\n                    //PS:&#123;&#125;中的代码是否执行，取决于()中表达式的返回结果\n                &#125;\n        （2）上面的代码中，我用四个单分支拼凑出四个选择，每个选择是独立的，依次判断执行的\n            （3）if后面的()中的条件，要按照自己需求尽量完善\n            （4）&#123;&#125;可以省略不写,但是一旦省略，这个if就只负责后面的一句话，所以我们不建议初学者省略\n            \\*/\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"多分支\"><a href=\"#多分支\" class=\"headerlink\" title=\"多分支\"></a>多分支</h3><p>【1】语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>if(布尔表达式1) {   语句块1;  } else if(布尔表达式2) {   语句块2;  }……  else if(布尔表达式n){   语句块n;  } else {   语句块n+1;  }</th>\n</tr>\n</thead>\n</table>\n<p>当布尔表达式1为真时，执行语句块1；否则，判断布尔表达式2，当布尔表达式2为真时，执行语句块2；否则，继续判断布尔表达式3······；如果1~n个布尔表达式均判定为假时，则执行语句块n+1，也就是else部分。流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/c88bacdaa34dd27e9d243e5982d3ed6f.png\" class=\"\">\n\n\n<p>【2】数轴分析：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/7dd5d0a3ce4defddad8b915dbd61c4fd.png\" class=\"\">\n\n\n<p>【3】代码：</p>\n<pre><code class=\"java\">public class TestIf02&#123;\n    public static void main(String[] args)&#123;\n        //实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品\n        //1.给出三个数：\n        int num1 = 6;\n        int num2 = 4;\n        int num3 = 2;\n        //2.求和\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        sum += num3;\n        System.out.println(&quot;和为：&quot;+sum);\n\n        //3.根据和判断奖品：\n        /\\*\n            利用一个多分支\n            【1】结构：\n            if()&#123;\n\n            &#125;else if()&#123;\n\n            &#125;else if()&#123;\n\n            &#125;...\n                else&#123;\n\n                &#125;\n        【2】else:隐藏了一个条件，跟上面分支条件表达式相反的功能 (详见数轴分析)\n            【3】多分支：好处：只要满足一个 分支以后，后面的分支就不需要判断了 --》效率高\n            【4】我们写代码的时候，尽量保证else的存在--》else分支相当于“兜底”“备胎”的作用，别的分支都不走，就会走这个分支了\n            \\*/\n            if(sum\\&gt;=14)&#123;\n                System.out.println(&quot;一等奖&quot;);\n            &#125;else if(sum\\&gt;=10)&#123;//隐藏了sum\\&lt;14\n                System.out.println(&quot;二等奖&quot;);\n            &#125;else if(sum\\&gt;=6)&#123;//隐藏了sum\\&lt;10\n                System.out.println(&quot;三等奖&quot;);\n            &#125;else&#123;//隐藏了sum\\&lt;6\n                System.out.println(&quot;四等奖&quot;);\n            &#125;\n\n\n\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"双分支\"><a href=\"#双分支\" class=\"headerlink\" title=\"双分支\"></a>双分支</h3><p>【1】语法结构:</p>\n<table>\n<thead>\n<tr>\n<th>if(布尔表达式){  语句块1  }else{   语句块2  }</th>\n</tr>\n</thead>\n</table>\n<p>当布尔表达式为真时，执行语句块1，否则，执行语句块2。也就是else部分。流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/27925a9f266f6f323822dfd891938abf.png\" class=\"\">\n\n\n<h3 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h3><p>随机数：这个数在生成之前我们不确定这个数是多少，不可知</p>\n<p>在java中依靠一个类：Math类帮助我们生成，这个类中有一个方法专门用来生成随机数：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/dc25d09059fb76e3d1c8468c2bc3b071.png\" class=\"\">\n\n\n<p>Math.random() ——-&gt; [0.0,1.0)</p>\n<p>Math.random()*6 —–&gt;[0.0,6.0)</p>\n<p>(int)(Math.random()*6) —–&gt;[0,5]</p>\n<p>(int)(Math.random()*6) +1 —–&gt;[1,6]</p>\n<p>应用到程序中：</p>\n<pre><code class=\"java\">int num1 = (int)(Math.random()\\*6) +1;\nint num2 = (int)(Math.random()\\*6) +1;\nint num3 = (int)(Math.random()\\*6) +1;\n</code></pre>\n<p>练习：</p>\n<p>[32,98] - [0,66]+32 - (int)(Math.random()*67) + 32</p>\n<h3 id=\"分支的嵌套使用\"><a href=\"#分支的嵌套使用\" class=\"headerlink\" title=\"分支的嵌套使用\"></a>分支的嵌套使用</h3><p>分支结构练习1</p>\n<p>练习：</p>\n<p>会员购物时，不同积分享受的折扣不同，规则如下：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/83f88cbff6a2d8323bd5195d7274fb6e.png\" class=\"\">\n\n\n<p>计算会员购物时获得的折扣，效果如下：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/84cd71a572646a9eb1d109050b80331c.png\" class=\"\">\n\n\n<p>本题主要考的是 程序的优化：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestIf04&#123;\n    public static void main(String[] args)&#123;\n        //1.给出积分：\n        Scanner sc = new Scanner(System.in);\n        System.out.print(&quot;请输入会员积分：&quot;);\n\n        //先判断键盘录入的数据是不是int类型的\n        if(sc.hasNextInt()==true)&#123;//是int类型数据：\n            //将这个int类型的数据接收：\n            int score = sc.nextInt();\n            //判断这个积分是否是正数：\n            if(score\\&gt;=0)&#123;\n                String discount = &quot;&quot;;\n                //2.根据积分判断折扣：\n                if(score\\&gt;=8000)&#123;\n                    discount = &quot;0.6&quot;;\n                &#125;else if(score\\&gt;=4000)&#123;\n                    discount = &quot;0.7&quot;;\n                &#125;else if(score\\&gt;=2000)&#123;\n                    discount = &quot;0.8&quot;;\n                &#125;else&#123;\n                    discount = &quot;0.9&quot;;\n                &#125;\n                System.out.println(&quot;该会员享受的折扣为：&quot;+discount);\n\n            &#125;else&#123;//score\\&lt;0\n                System.out.println(&quot;对不起，你录入的积分是负数！不符合需求！&quot;);\n            &#125;\n        &#125;else&#123;//不是int类型的数据\n            System.out.println(&quot;你录入的积分不是整数！&quot;);\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<p>分支结构练习2</p>\n<p>练习：</p>\n<p>小朋友搬桌子：</p>\n<p>年龄大于7岁，可以搬桌子；</p>\n<p>如果年龄大于5岁，性别是男，可以搬桌子；</p>\n<p>否则不可以搬动桌子，提示：你还太小了</p>\n<p>本题主要考的是：逻辑</p>\n<p>方式1：性别用0或者1接收：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestIf05&#123;\n    public static void main(String[] args)&#123;\n        //1.录入小朋友的年龄：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入小朋友的年龄：&quot;);\n        int age = sc.nextInt();\n\n        //2.根据年龄判断：\n        if(age\\&gt;=7)&#123;\n            System.out.println(&quot;yes&quot;);\n        &#125;else if(age\\&gt;=5)&#123;\n            //录入小朋友的性别；\n            System.out.println(&quot;请录入小朋友的性别：男：1 女 ：0&quot;);\n            int sex = sc.nextInt();\n            if(sex==1)&#123;//男生\n                System.out.println(&quot;yes&quot;);\n            &#125;else&#123;//女孩\n                System.out.println(&quot;no&quot;);\n            &#125;\n        &#125;else&#123;//age\\&lt;5\n            System.out.println(&quot;no&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>方式2：性别用男或者女接收：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestIf06&#123;\n    public static void main(String[] args)&#123;\n        //1.录入小朋友的年龄：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入小朋友的年龄：&quot;);\n        int age = sc.nextInt();\n\n        //2.根据年龄判断：\n        if(age\\&gt;=7)&#123;\n            System.out.println(&quot;yes&quot;);\n        &#125;else if(age\\&gt;=5)&#123;\n            //录入小朋友的性别；\n            System.out.println(&quot;请录入小朋友的性别：&quot;);\n            String str = sc.next();\n            char sex = str.charAt(0);\n            if(sex==&#39;男&#39;)&#123;\n                System.out.println(&quot;yes&quot;);\n            &#125;else&#123;\n                System.out.println(&quot;no&quot;);\n            &#125;\n        &#125;else&#123;//age\\&lt;5\n            System.out.println(&quot;no&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h2><p>【1】switch多分支结构(多值情况)</p>\n<p>语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>switch (表达式) {   case 值1:   语句序列1;   [break];   case 值2:   语句序列2;   [break];   … … … … …   [default:默认语句;]  }</th>\n</tr>\n</thead>\n</table>\n<p>switch语句会根据表达式的值从相匹配的case标签处开始执行，一直执行到break语句处或者是switch语句的末尾。如果表达式的值与任一case值不匹配，则进入default语句（如果存在default语句的情况）。根据表达式值的不同可以执行许多不同的操作。switch语句中case标签在JDK1.5之前必须是整数（long类型除外）或者枚举，不能是字符串，在JDK1.7之后允许使用字符串(String)。大家要注意，当布尔表达式是等值判断的情况，可以使用if-else if-else多分支结构或者switch结构，如果布尔表达式区间判断的情况，则只能使用if-else if-else多分支结构。switch多分支结构的流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2f1d12c7b2e144d52b36c7aace3d6024.png\" class=\"\">\n\n\n<p>【2】练习</p>\n<pre><code class=\"java\">public class TestSwitch&#123;\n    public static void main(String[] args)&#123;\n        /\\*\n            实现一个功能：\n            根据给出的学生分数，判断学生的等级：\n            \\&gt;=90 -----A\n            \\&gt;=80 -----B\n            \\&gt;=70 -----C\n            \\&gt;=60 -----D\n            \\&lt;60 -----E\n\n            用if分支：\n            if(score\\&gt;=90)&#123;\n\n            &#125;else if(score\\&gt;=80)&#123;\n\n            &#125;\n        \\*/\n            //1.给出学生的成绩：\n            int score = 167;\n        //2.根据成绩判断学生的等级：\n        switch(score/10)&#123;\n            case 10 :\n            case 9 : System.out.println(&quot;A级&quot;);break;\n            case 8 : System.out.println(&quot;B级&quot;);break;\n            case 7 : System.out.println(&quot;C级&quot;);break;\n            case 6 : System.out.println(&quot;D级&quot;);break;\n            default:System.out.println(&quot;成绩错误&quot;);break;\n            case 5 :\n            case 4 :\n            case 3 :\n            case 2 :\n            case 1 :\n            case 0 : System.out.println(&quot;E级&quot;);break;\n\n        &#125;\n        /\\*\n            【1】语法结构：\n            switch()&#123;\n                case \\* :\n                case \\* :\n                    .......\n            &#125;\n        【2】switch后面是一个()，()中表达式返回的结果是一个等值，这个等值的类型可以为：\n            int,byte,short,char,String,枚举类型\n            【3】这个()中的等值会依次跟case后面的值进行比较，如果匹配成功，就执行:后面的代码\n            【4】为了防止代码的“穿透”效果：在每个分支后面加上一个关键词break，遇到break这个分支就结束了\n            【5】类似else的“兜底”“备胎”的分支：default分支\n            【6】default分支可以写在任意的位置上，但是如果没有在最后一行，后面必须加上break关键字，\n            如果在最后一行的话，break可以省略\n            【7】相邻分支逻辑是一样的，那么就可以只保留最后一个分支，上面的都可以省去不写了\n            【8】switch分支和if分支区别：\n            表达式是等值判断的话--》if ，switch都可以\n            如果表达式是区间判断的情况---》if最好\n            【9】switch应用场合：就是等值判断，等值的情况比较少的情况下\n            \\*/\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h1><h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><p>【1】语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>while (布尔表达式) {   循环体;  }</th>\n</tr>\n</thead>\n</table>\n<p>在循环刚开始时，会计算一次“布尔表达式”的值，若条件为真，执行循环体。而对于后来每一次额外的循环，都会在开始前重新计算一次。</p>\n<p>语句中应有使循环趋向于结束的语句，否则会出现无限循环–––”死”循环。</p>\n<p>while循环结构流程图如图所示:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/d9a799db990ed9073c404c284874e3c7.png\" class=\"\">\n\n\n<p>【2】练习：1+2+3+4+5</p>\n<pre><code class=\"java\">public class TestWhile&#123;\n    public static void main(String[] args)&#123;\n        //功能：1+2+3+4+5\n        //1.定义变量：\n        int num1 = 1;\n        int num2 = 2;\n        int num3 = 3;\n        int num4 = 4;\n        int num5 = 5;\n        //2.定义一个求和变量，用来接收和：\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        sum += num3;\n        sum += num4;\n        sum += num5;\n\n        //3.输出和\n        System.out.println(sum);\n    &#125;\n&#125;\n</code></pre>\n<p>上述代码缺点：变量的定义个数太多了</p>\n<p>解决：</p>\n<pre><code class=\"java\">public class TestWhile&#123;\n    public static void main(String[] args)&#123;\n        //功能：1+2+3+4+5\n        //1.定义变量：\n        int num = 1;\n        //2.定义一个求和变量，用来接收和：\n        int sum = 0;\n        sum += num;\n        num++;\n        sum += num;\n        num++;\n        sum += num;\n        num++;\n        sum += num;\n        num++;\n        sum += num;\n        num++;\n\n        //3.输出和\n        System.out.println(sum);\n    &#125;\n&#125;\n</code></pre>\n<p>上述代码缺点：重复写的代码太多了</p>\n<p>解决：—》引入java中循环结构：</p>\n<pre><code class=\"java\">public class TestWhile&#123;\n    public static void main(String[] args)&#123;\n        //功能：1+2+3+4+5\n        //1.定义变量：\n        int num = 1;**[1]条件初始化**\n            //2.定义一个求和变量，用来接收和：\n            int sum = 0;\n        while(num\\&lt;=5)&#123;**[2]条件判断**\n            sum += num;**[3]循环体**\n                num++;**[4]迭代**\n                      &#125;\n        //3.输出和\n        System.out.println(sum);\n    &#125;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>【1】循环作用：将部分代码重复执行。</p>\n<p>循环只是提高了程序员编写代码的效率，但是底层执行的时候依然是重复执行。</p>\n<p>【2】循环四要素：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/ca11475c2f0a778cad36886cf66366a1.png\" class=\"\">\n\n\n<p>初始化谁，就判断谁，判断谁，就迭代谁</p>\n<p>执行过程：[1][2][3][4] [2][3][4] [2][3][4]。。。。</p>\n<p>【3】循环的执行过程：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2ff230667c913bd5e87743476c334561.png\" class=\"\">\n\n\n<p>【4】验证循环的执行过程：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/a5f3022962bd6c9af4a1e9a1e9da5f56.png\" class=\"\">\n\n\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><p>【1】1+2+3+4+5+。。。。+100</p>\n<p>【2】2+4+6+8+。。。。+998+1000</p>\n<p>【3】5+10+15+20+。。。+100</p>\n<p>【4】99+97+95+。。5+3+1</p>\n<p>【5】1*3*5*7*9*11*13</p>\n<pre><code class=\"java\">public class TestWhile02&#123;\n    public static void main(String[] args)&#123;\n        /\\*\n            【1】1+2+3+4+5+。。。。+100\n            int i = 1;\n        int sum = 0;\n        while(i\\&lt;=100)&#123;\n            sum += i;\n            i++;\n        &#125;\n        System.out.println(sum);\n        【2】2+4+6+8+。。。。+998+1000\n            int i = 2;\n        int sum = 0;\n        while(i\\&lt;=1000)&#123;\n            sum += i;\n            i = i+2;\n        &#125;\n        System.out.println(sum);\n        【3】5+10+15+20+。。。+100\n            int i = 5;\n        int sum = 0;\n        while(i\\&lt;=100)&#123;\n            sum += i;\n            i = i+5;\n        &#125;\n        System.out.println(sum);\n\n        【4】99+97+95+。。5+3+1\n            int i = 99;\n        int sum = 0;\n        while(i\\&gt;=1)&#123;\n            sum += i;\n            i = i-2;\n        &#125;\n        System.out.println(sum);\n        【5】1\\*3\\*5\\*7\\*9\\*11\\*13\n\n            \\*/\n            int i = 1;\n        int result = 1;\n        while(i\\&lt;=13)&#123;\n            result \\*= i;\n            i = i+2;\n        &#125;\n        System.out.println(result);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"do-while\"><a href=\"#do-while\" class=\"headerlink\" title=\"do-while\"></a>do-while</h2><p>【1】语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>do {   循环体;   } while(布尔表达式) ;</th>\n</tr>\n</thead>\n</table>\n<p>do-while循环结构会先执行循环体，然后再判断布尔表达式的值，若条件为真，执行循环体，当条件为假时结束循环。do-while循环的循环体至少执行一次。do-while循环结构流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0a5138cc1b27bf3150998a807c0084ff.png\" class=\"\">\n\n\n<p>【2】代码：</p>\n<pre><code class=\"java\">public class TestDoWhile&#123;\n    public static void main(String[] args)&#123;\n        //1+2+3+4+...100\n        //while方式:\n        /\\*\n            int i = 101;\n        int sum = 0;\n        while(i\\&lt;=100)&#123;\n            sum += i;\n            i++;\n        &#125;\n        System.out.println(i);//101\n        System.out.println(sum);//0\n        \\*/\n            //do-while方式：\n\n            int i = 101;\n        int sum = 0;\n        do&#123;\n            sum += i;\n            i++;\n        &#125;while(i\\&lt;=100);//一定要注意写这个分号，否则编译出错\n        System.out.println(i);//102\n        System.out.println(sum);//101\n        /\\*\n            【1】while和do-while的区别:\n        while:先判断，再执行\n            do-while:先执行，再判断---》至少被执行一次，从第二次开始才进行判断\n                【2】什么场合使用do-while:\n\n        while(考试是否通过)&#123;\n            考试；\n        &#125;\n        \\---》不合适\n            do&#123;\n                考试；\n            &#125;while(考试是否通过);\n        \\---》合适\n            \\*/\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><p>【1】语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>for (初始表达式; 布尔表达式; 迭代因子) {   循环体;  }</th>\n</tr>\n</thead>\n</table>\n<p>for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。for循环在第一次反复之前要进行初始化，即执行初始表达式；随后，对布尔表达式进行判定，若判定结果为true，则执行循环体，否则，终止循环；最后在每一次反复的时候，进行某种形式的“步进”，即执行迭代因子。</p>\n<ol>\n<li>初始化部分设置循环变量的初值</li>\n<li>条件判断部分为任意布尔表达式</li>\n<li>迭代因子控制循环变量的增减</li>\n</ol>\n<p>for循环在执行条件判定后，先执行的循环体部分，再执行步进。</p>\n<p>for循环结构的流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/e65934410d1164966962fc0ec10b942f.png\" class=\"\">\n\n\n<p>【2】代码：</p>\n<pre><code class=\"java\">public class TestFor01&#123;\n    public static void main(String[] args)&#123;\n        //1+2+3+..+100\n        //while:\n        /\\*int i = 1;\n        int sum = 0;\n        while(i\\&lt;=100)&#123;\n            sum += i;\n            i++;\n        &#125;\n        System.out.println(sum);\n        \\*/\n\n            //for:\n            int sum = 0;\n        int i;\n        for(i = 1;i\\&lt;=100;i++)&#123;\n            sum += i;\n        &#125;\n        System.out.println(sum);\n        System.out.println(i);\n\n        /\\*\n            【1】for的结构：\n            for(条件初始化;条件判断;迭代)&#123;\n                循环体；\n            &#125;\n\n        【2】i的作用域：作用范围：离变量最近&#123;&#125; ---\\&gt;可以自己去控制\n            【3】for循环格式特别灵活：格式虽然很灵活，但是我们自己写代码的时候不建议灵活着写。\n            for(;;)&#123;&#125; --\\&gt;死循环\n\n                int i = 1;\n        for(;i\\&lt;=100;)&#123;\n            sum += i;\n            i++;\n        &#125;\n\n        【4】死循环：\n            for(;;)&#123;&#125;\n\n        while(true)&#123;&#125;\n\n        do&#123;\n\n        &#125;while(true);\n\n        【5】循环分为两大类：\n            第一类：当型 while()&#123;&#125; for(;;)&#123;&#125;\n        第二类：直到型 do&#123;&#125;while();\n\n        【6】以后常用：for循环\n            【7】do-while,while,for循环谁的效率高？ 一样高\n                \\*/\n                &#125;\n&#125;\n</code></pre>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><p>在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。</p>\n<p>continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</p>\n<p>return的作用,结束当前所在方法的执行.</p>\n<h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>【1】通过练习感受break的作用：作用：停止循环：</p>\n<pre><code class=\"java\">public class TestFor02&#123;\n    public static void main(String[] args)&#123;\n        //功能：求1-100的和，当和第一次超过300的时候，停止程序\n        int sum = 0;\n        for(int i=1;i\\&lt;=100;i++)&#123;\n            sum += i;\n            if(sum\\&gt;300)&#123;//当和第一次超过300的时候\n                //停止循环\n                break;//停止循环\n            &#125;\n            System.out.println(sum);\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【2】加深理解：</p>\n<pre><code class=\"java\">public class TestFor03&#123;\n    public static void main(String[] args)&#123;\n        //break的作用：停止最近的循环\n        /\\*\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                System.out.println(i);\n                if(i==36)&#123;\n                    break;//1-36\n                &#125;\n            &#125;\n        \\*/\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                System.out.println(i);\n                while(i==36)&#123;\n                    break; //1-100 ---》break停止的是while循环，而不是外面的for循环\n                &#125;\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【3】break带标签的使用：</p>\n<pre><code class=\"java\">public class TestFor04&#123;\n    public static void main(String[] args)&#123;\n        outer: ----》定义标签结束的位置\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                System.out.println(i);\n                while(i==36)&#123;\n                    break outer; ----》根据标签来结束循环\n                &#125;\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>多层循环也可以使用标签，按照自己的需求去设定即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/edd6160d15c42695164e614a174da464.png\" class=\"\">\n\n\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p>【1】通过案例感受continue的作用：结束本次循环，继续下一次循环</p>\n<pre><code class=\"java\">public class TestFor05&#123;\n    public static void main(String[] args)&#123;\n        //功能：输出1-100中被6整除的数：\n        //方式1：\n        /\\*\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                if(i%6==0)&#123;//被6整除\n                    System.out.println(i);\n                &#125;\n            &#125;\n        \\*/\n\n            //方式2：\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                if(i%6!=0)&#123;//不被6整除\n                    continue;//停止本次循环，继续下一次循环\n                &#125;\n                System.out.println(i);\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】加深理解：</p>\n<pre><code class=\"java\">public class TestFor06&#123;\n    public static void main(String[] args)&#123;\n        //continue:结束本次离它近的循环，继续下一次循环\n        /\\*\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                if(i==36)&#123;\n                    continue;//1-100中间没有36\n                &#125;\n                System.out.println(i);\n            &#125;\n        \\*/\n\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                while(i==36)&#123;\n                    System.out.println(&quot;------&quot;);\n                    continue; //1-35+死循环\n                &#125;\n                System.out.println(i);\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【3】continue带标签的使用：</p>\n<pre><code class=\"java\">public class TestFor07&#123;\n    public static void main(String[] args)&#123;\n\n        outer:\n        for(int i=1;i\\&lt;=100;i++)&#123;\n            while(i==36)&#123;\n                continue outer; //1-100没有36\n            &#125;\n            System.out.println(i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/fc2cc84a39aeaca59d8b618b6a71a46c.png\" class=\"\">\n\n\n<h3 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h3><p>return的作用：跟循环无关，就是程序中遇到return那么return所在的那个方法就停止执行了：</p>\n<pre><code class=\"java\">public class TestFor08&#123;\n    public static void main(String[] args)&#123;\n        //return:遇到return结束当前正在执行的方法\n        for(int i=1;i\\&lt;=100;i++)&#123;\n            while(i==36)&#123;\n                return;\n            &#125;\n            System.out.println(i);\n        &#125;\n\n        System.out.println(&quot;-----&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"循环练习\"><a href=\"#循环练习\" class=\"headerlink\" title=\"循环练习\"></a>循环练习</h2><p>【1】练习1：</p>\n<pre><code class=\"java\">public class TestFor09&#123;\n    public static void main(String[] args)&#123;\n        /\\* 输出1-100中被5整除的数,每行输出6个\\*/\n            //引入一个计数器：\n            int count = 0;//初始值为0\n        for(int i=1;i\\&lt;=100;i++)&#123;\n            if(i%5==0)&#123;//被5整除的数\n                System.out.print(i+&quot;\\\\t&quot;);\n                count++;//每在控制台输出一个数，count就加1操作\n                if(count%6==0)&#123;\n                    System.out.println();//换行\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】练习2：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestFor10&#123;\n    public static void main(String[] args)&#123;\n        /\\*\n            实现一个功能：\n            【1】请录入10个整数，当输入的数是666的时候，退出程序。\n            【2】判断其中录入正数的个数并输出。\n            【3】判断系统的退出状态：是正常退出还是被迫退出。\n            \\*/\n            //引入一个计数器：\n            int count = 0;\n        //引入一个布尔类型的变量：\n        boolean flag = true; //---》理解为一个“开关”，默认情况下开关是开着的\n        Scanner sc = new Scanner(System.in);\n        for(int i=1;i\\&lt;=10;i++)&#123;//i:循环次数\n            System.out.println(&quot;请录入第&quot;+i+&quot;个数：&quot;);\n            int num = sc.nextInt();\n            if(num\\&gt;0)&#123;//录入的正数\n                count++;\n            &#125;\n            if(num==666)&#123;\n                flag = false;//当遇到666的时候，“开关”被关上了\n                //退出循环：\n                break;\n            &#125;\n\n        &#125;\n\n        System.out.println(&quot;你录入的正数的个数为：&quot;+count);\n\n\n        if(flag)&#123;//flag==true\n            System.out.println(&quot;正常退出！&quot;);\n        &#125;else&#123;//flag==false\n            System.out.println(&quot;被迫退出！&quot;);\n        &#125;\n\n\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"循环的嵌套使用\"><a href=\"#循环的嵌套使用\" class=\"headerlink\" title=\"循环的嵌套使用\"></a>循环的嵌套使用</h2><h3 id=\"双重循环\"><a href=\"#双重循环\" class=\"headerlink\" title=\"双重循环\"></a>双重循环</h3><p>乘法口诀</p>\n<p>乘法口诀：</p>\n<p>1*1&#x3D;1</p>\n<p>1*2&#x3D;2 2*2&#x3D;4</p>\n<p>1*3&#x3D;3 2*3&#x3D;6 3*3&#x3D;9</p>\n<p>1*4&#x3D;4 2*4&#x3D;8 3*4&#x3D;12 4*4&#x3D;16</p>\n<p>1*5&#x3D;5 2*5&#x3D;10 3*5&#x3D;15 4*5&#x3D;20 5*5&#x3D;25</p>\n<p>1*6&#x3D;6 2*6&#x3D;12 3*6&#x3D;18 4*6&#x3D;24 5*6&#x3D;30 6*6&#x3D;36</p>\n<p>1*7&#x3D;7 2*7&#x3D;14 3*7&#x3D;21 4*7&#x3D;28 5*7&#x3D;35 6*7&#x3D;42 7*7&#x3D;49</p>\n<p>1*8&#x3D;8 2*8&#x3D;16 3*8&#x3D;24 4*8&#x3D;32 5*8&#x3D;40 6*8&#x3D;48 7*8&#x3D;56 8*8&#x3D;64</p>\n<p>1*9&#x3D;9 2*9&#x3D;18 3*9&#x3D;27 4*9&#x3D;36 5*9&#x3D;45 6*9&#x3D;54 7*9&#x3D;63 8*9&#x3D;72 9*9&#x3D;81</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestFor11&#123;\n    public static void main(String[] args)&#123;\n        //1\\*6=6 2\\*6=12 3\\*6=18 4\\*6=24 5\\*6=30 6\\*6=36\n        /\\*\n            System.out.print(&quot;1\\*6=6&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;2\\*6=12&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;3\\*6=18&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;4\\*6=24&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;5\\*6=30&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;6\\*6=36&quot;+&quot;\\\\t&quot;);\n\n        for(int i=1;i\\&lt;=6;i++)&#123;\n            System.out.print(i+&quot;\\*6=&quot;+i\\*6+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n\n        //1\\*7=7 2\\*7=14 3\\*7=21 4\\*7=28 5\\*7=35 6\\*7=42 7\\*7=49\n        for(int i=1;i\\&lt;=7;i++)&#123;\n            System.out.print(i+&quot;\\*7=&quot;+i\\*7+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n\n        //1\\*8=8 2\\*8=16 3\\*8=24 4\\*8=32 5\\*8=40 6\\*8=48 7\\*8=56 8\\*8=64\n        for(int i=1;i\\&lt;=8;i++)&#123;\n            System.out.print(i+&quot;\\*8=&quot;+i\\*8+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n        \\*/\n\n            for(int j=1;j\\&lt;=9;j++)&#123;\n                for(int i=1;i\\&lt;=j;i++)&#123;\n                    System.out.print(i+&quot;\\*&quot;+j+&quot;=&quot;+i\\*j+&quot;\\\\t&quot;);\n                &#125;\n                //换行\n                System.out.println();\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>1*9&#x3D;9 2*9&#x3D;18 3*9&#x3D;27 4*9&#x3D;36 5*9&#x3D;45 6*9&#x3D;54 7*9&#x3D;63 8*9&#x3D;72 9*9&#x3D;81</p>\n<p>1*8&#x3D;8 2*8&#x3D;16 3*8&#x3D;24 4*8&#x3D;32 5*8&#x3D;40 6*8&#x3D;48 7*8&#x3D;56 8*8&#x3D;64</p>\n<p>1*7&#x3D;7 2*7&#x3D;14 3*7&#x3D;21 4*7&#x3D;28 5*7&#x3D;35 6*7&#x3D;42 7*7&#x3D;49</p>\n<p>1*6&#x3D;6 2*6&#x3D;12 3*6&#x3D;18 4*6&#x3D;24 5*6&#x3D;30 6*6&#x3D;36</p>\n<p>1*5&#x3D;5 2*5&#x3D;10 3*5&#x3D;15 4*5&#x3D;20 5*5&#x3D;25</p>\n<p>1*4&#x3D;4 2*4&#x3D;8 3*4&#x3D;12 4*4&#x3D;16</p>\n<p>1*3&#x3D;3 2*3&#x3D;6 3*3&#x3D;9</p>\n<p>1*2&#x3D;2 2*2&#x3D;4</p>\n<p>1*1&#x3D;1</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestFor12&#123;\n    public static void main(String[] args)&#123;\n\n        /\\*\n            //1\\*8=8 2\\*8=16 3\\*8=24 4\\*8=32 5\\*8=40 6\\*8=48 7\\*8=56 8\\*8=64\n            for(int i=1;i\\&lt;=8;i++)&#123;\n                System.out.print(i+&quot;\\*8=&quot;+i\\*8+&quot;\\\\t&quot;);\n            &#125;\n        //换行\n        System.out.println();\n\n\n        //1\\*7=7 2\\*7=14 3\\*7=21 4\\*7=28 5\\*7=35 6\\*7=42 7\\*7=49\n        for(int i=1;i\\&lt;=7;i++)&#123;\n            System.out.print(i+&quot;\\*7=&quot;+i\\*7+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n\n        //1\\*6=6 2\\*6=12 3\\*6=18 4\\*6=24 5\\*6=30 6\\*6=36\n        for(int i=1;i\\&lt;=6;i++)&#123;\n            System.out.print(i+&quot;\\*6=&quot;+i\\*6+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n\n\n\n\n        \\*/\n\n            for(int j=9;j\\&gt;=1;j--)&#123;\n                for(int i=1;i\\&lt;=j;i++)&#123;\n                    System.out.print(i+&quot;\\*&quot;+j+&quot;=&quot;+i\\*j+&quot;\\\\t&quot;);\n                &#125;\n                //换行\n                System.out.println();\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>打印各种形状</p>\n<p>【1】长方形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/34a4f4344ea5d5ffd88f932d98827359.png\" class=\"\">\n\n\n<pre><code class=\"java\">for(int j=1;j\\&lt;=4;j++)&#123;//j:控制行数\n    //\\*\\*\\*\\*\\*\\*\\*\\*\\*\n    for(int i=1;i\\&lt;=9;i++)&#123;//i:控制\\*的个数\n        System.out.print(&quot;\\*&quot;);\n    &#125;\n    //换行：\n    System.out.println();\n&#125;\n</code></pre>\n<p>【2】距离前面有一定空隙的长方形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/53f97abfc48cab59034a76006c1c1c71.png\" class=\"\">\n\n\n<ol>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;5;i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;9;i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>【3】平行四边形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/67d40798af8ec1921f09d49c09d0137c.png\" class=\"\">\n\n\n<ol>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(9-j);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;9;i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>【4】三角形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/49555021efb328437055bea6119ae9f2.png\" class=\"\">\n\n\n<ol>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(9-j);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(2*j-1);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>【5】菱形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/d798118edc1454a1bb0e83bb70d60758.png\" class=\"\">\n\n\n<ol>\n<li>&#x2F;&#x2F;上面三角形：</li>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(9-j);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(2*j-1);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n<li></li>\n<li>&#x2F;&#x2F;下面三角形：</li>\n<li>for(int j&#x3D;1;j&lt;&#x3D;3;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(j+5);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(7-2*j);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>【6】空心菱形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/7df2cd3380e772f02c2dcbcc4d6a3438.png\" class=\"\">\n\n\n<ol>\n<li>&#x2F;&#x2F;上面三角形：</li>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(9-j);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(2*j-1);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>if(i&#x3D;&#x3D;1||i&#x3D;&#x3D;(2*j-1)){</li>\n<li>System.out.print(“*“);</li>\n<li>}else{</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n<li></li>\n<li>&#x2F;&#x2F;下面三角形：</li>\n<li>for(int j&#x3D;1;j&lt;&#x3D;3;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(j+5);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(7-2*j);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>if(i&#x3D;&#x3D;1||i&#x3D;&#x3D;(7-2*j)){</li>\n<li>System.out.print(“*“);</li>\n<li>}else{</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>扩展：菱形打印方式2</p>\n<p>【1】实心菱形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/745dd4be231e5197141fa4721b372fa9.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class TestFor14&#123;\n    public static void main(String[] args)&#123;\n        //先打印出一个正方形，然后某些位置上打印\\* 某些位置上打印空格：\n        int size = 17;\n        int startNum = size/2+1;//起始列号\n        int endNum = size/2+1;//结束列号\n        //引入一个布尔类型的变量---》理解为“开关”\n        boolean flag = true;\n        for(int j=1;j\\&lt;=size;j++)&#123;\n            //\\*\\*\\*\\*\\*\n            for(int i=1;i\\&lt;=size;i++)&#123;\n                if(i\\&gt;=startNum&amp;&amp;i\\&lt;=endNum)&#123;\n                    System.out.print(&quot;\\*&quot;);\n                &#125;else&#123;\n                    System.out.print(&quot; &quot;);\n                &#125;\n            &#125;\n            //换行\n            System.out.println();\n            if(endNum==size)&#123;\n                flag = false;\n            &#125;\n\n            if(flag)&#123;//flag是true相当于在菱形的上半侧 flag是false相当于在菱形的下半侧\n                startNum--;\n                endNum++;\n            &#125;else&#123;\n                startNum++;\n                endNum--;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】空心菱形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/8938fc30a4da55ff90c902646c105355.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class TestFor14&#123;\n    public static void main(String[] args)&#123;\n        //先打印出一个正方形，然后某些位置上打印\\* 某些位置上打印空格：\n        int size = 17;\n        int startNum = size/2+1;//起始列号\n        int endNum = size/2+1;//结束列号\n        //引入一个布尔类型的变量---》理解为“开关”\n        boolean flag = true;\n        for(int j=1;j\\&lt;=size;j++)&#123;\n            //\\*\\*\\*\\*\\*\n            for(int i=1;i\\&lt;=size;i++)&#123;\n                if(i==startNum\\|\\|i==endNum)&#123;\n                    System.out.print(&quot;\\*&quot;);\n                &#125;else&#123;\n                    System.out.print(&quot; &quot;);\n                &#125;\n            &#125;\n            //换行\n            System.out.println();\n            if(endNum==size)&#123;\n                flag = false;\n            &#125;\n\n            if(flag)&#123;//flag是true相当于在菱形的上半侧 flag是false相当于在菱形的下半侧\n                startNum--;\n                endNum++;\n            &#125;else&#123;\n                startNum++;\n                endNum--;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"三重循环\"><a href=\"#三重循环\" class=\"headerlink\" title=\"三重循环\"></a>三重循环</h3><p>百钱买百鸡</p>\n<p>【1】二重循环可以帮我们解决：二元一次方程组的问题：</p>\n<pre><code class=\"java\">public   class   TestFor15 &#123;\n    public   static   void   main (String[] args)&#123;\n        for ( int  a=1;a\\&lt;=5;a++)&#123;\n            for ( int  b=3;b\\&lt;=6;b++)&#123;\n                if (a+b==7)&#123;\n                    System. out .println(a+&quot;----&quot;+b);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】三重循环可以帮我们解决：三元一次方程组的问题：</p>\n",
            "tags": [
                "-JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/",
            "title": "第5章_方法的定义_调用_重载",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"方法的定义和调用\"><a href=\"#方法的定义和调用\" class=\"headerlink\" title=\"方法的定义和调用\"></a>方法的定义和调用</h1><p>【1】什么是方法？</p>\n<p>方法(method)就是一段用来完成特定功能的代码片段，类似于其它语言的函数(function)。</p>\n<p>方法用于定义该类或该类的实例的行为特征和功能实现。 方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。</p>\n<p>【2】方法声明格式：</p>\n<table>\n<thead>\n<tr>\n<th>[修饰符1 修饰符2 …] 返回值类型 方法名(形式参数列表){   Java语句；… … …  }</th>\n</tr>\n</thead>\n</table>\n<p>【3】方法的调用方式：</p>\n<table>\n<thead>\n<tr>\n<th>对象名.方法名(实参列表)</th>\n</tr>\n</thead>\n</table>\n<p>【4】方法的详细说明</p>\n<ul>\n<li>形式参数：在方法声明时用于接收外界传入的数据。</li>\n<li>实参：调用方法时实际传给方法的数据。</li>\n<li>返回值：方法在执行完毕后返还给调用它的环境的数据。</li>\n<li>返回值类型：事先约定的返回值的数据类型，如无返回值，必须显示指定为为void。</li>\n</ul>\n<p>【5】代码：</p>\n<pre><code class=\"java\">public class TestMethod01&#123;\n\n    //方法的定义：（写方法）\n    public static int add(int num1,int num2)&#123;\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        return sum;//将返回值返回到方法的调用处\n    &#125;\n\n    public static void main(String[] args)&#123;\n        //10+20:\n        //方法的调用：（用方法）\n        int num = add(10,20);\n        System.out.println(num);\n        /\\*\n            int num1 = 10;\n        int num2 = 20;\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        System.out.println(sum);\n        \\*/\n            //30+90:\n            int sum = add(30,90);\n        System.out.println(sum);\n        /\\*\n            int num3 = 30;\n        int num4 = 90;\n        int sum1 = 0 ;\n        sum1 += num3;\n        sum1 += num4;\n        System.out.println(sum1);\n        \\*/\n            //50+48:\n            System.out.println(add(50,48));\n\n    &#125;\n\n\n&#125;\n</code></pre>\n<p>【6】总结：</p>\n<p>1.方法是：对特定的功能进行提取，形成一个代码片段，这个代码片段就是我们所说的方法</p>\n<p>2.方法和方法是并列的关系，所以我们定义的方法不能写到main方法中</p>\n<p>3.方法的定义–》格式：</p>\n<p>修饰符 方法返回值类型 方法名(形参列表){</p>\n<p>方法体;</p>\n<p>return 方法返回值;</p>\n<p>}</p>\n<p>4.方法的作用：提高代码的复用性</p>\n<p>5.总结方法定义的格式：</p>\n<ol>\n<li><p>修饰符: 暂时使用public static —&gt;面向对象一章讲解</p>\n</li>\n<li><p>方法返回值类型 : 方法的返回值对应的数据类型</p>\n</li>\n</ol>\n<p>数据类型： 可以是基本数据类型（byte,short,int,long,float,double,char,boolean） 也可以是引用数据类型</p>\n<ol start=\"3\">\n<li><p>方法名 :见名知意，首字母小写，其余遵循驼峰命名， eg: addNum ,一般尽量使用英文来命名</p>\n</li>\n<li><p>形参列表 :方法定义的时候需要的形式参数 ： int num1, int num2 –&gt;相当于告诉方法的调用者：需要传入几个参数，需要传入的参数的类型</p>\n</li>\n</ol>\n<p>实际参数：方法调用的时候传入的具体的参数： 10,20 –&gt;根据形式参数的需要传入的</p>\n<p>5)方法体：具体的业务逻辑代码</p>\n<ol start=\"6\">\n<li>return 方法返回值;</li>\n</ol>\n<p>方法如果有返回值的话： return+方法返回值，将返回值返回到方法的调用处</p>\n<p>方法没有返回值的话：return可以省略不写了，并且方法的返回值类型为：void</p>\n<pre><code class=\"java\">public class TestMethod02&#123;\n\n    public static void add(int num1,int num2)&#123;\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        System.out.println(sum);\n        //return;\n    &#125;\n\n    public static void main(String[] args)&#123;\n        //10+20:\n        //方法的调用：（用方法）\n        add(10,20);\n        //30+90:\n        add(30,90);\n        //50+48:\n        //System.out.println(add(50,48));//报错：TestMethod02.java:22: 错误: 此处不允许使用 &#39;空&#39; 类型\n\n    &#125;\n\n&#125;\n</code></pre>\n<p>什么时候有返回值，什么时候没有返回值？ 看心情–》看需求</p>\n<p>6.方法的定义需要注意什么？</p>\n<p>1）形参列表要怎么写：定义几个参数，分别是什么类型的 —》不确定因素我们会当做方法的形参</p>\n<ol start=\"2\">\n<li>方法到底是否需要返回值 ，如果需要的话，返回值的类型是什么</li>\n</ol>\n<p>7.方法的调用需要注意什么？</p>\n<p>1）实际参数要怎么传入：传入几个参数，传入什么类型的</p>\n<p>2） 方法是否有返回值需要接受</p>\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><p>【1】基本功能：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestMethod03&#123;\n    public static void main(String[] args)&#123;\n        //功能：我心里有一个数，你来猜，看是否猜对\n        //1.你猜一个数\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请你猜一个数：&quot;);\n        int yourGuessNum = sc.nextInt();\n        //2.我心里有一个数\n        int myHeartNum = 5;\n        //3.将两个数比对：\n        System.out.println(yourGuessNum==myHeartNum?&quot;猜对了&quot;:&quot;猜错了&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>对猜数功能提取为一个方法：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestMethod03&#123;\n    public static void main(String[] args)&#123;\n        //功能：我心里有一个数，你来猜，看是否猜对\n        //1.你猜一个数\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请你猜一个数：&quot;);\n        int yourGuessNum = sc.nextInt();\n\n        //调用猜数的方法：\n        guessNum(yourGuessNum);\n    &#125;\n\n    //方法的定义：功能：实现猜数功能：\n    public static void guessNum(int yourNum)&#123;\n        //我心里有一个数(1-6)\n        int myHeartNum = (int)(Math.random()\\*6)+1;\n        //将两个数比对：\n        System.out.println(yourNum==myHeartNum?&quot;猜对了&quot;:&quot;猜错了&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"面试题：两个数交换是否成功\"><a href=\"#面试题：两个数交换是否成功\" class=\"headerlink\" title=\"面试题：两个数交换是否成功\"></a>面试题：两个数交换是否成功</h2><p>【1】面试题：请问下面代码中两个数是否交换成功：</p>\n<pre><code class=\"java\">\n</code></pre>\n<p>|———————————————————————————————————————————————————————————————————————————————————————————————————————————-|</p>\n<p>结果：没有交换成功：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/d6adc25927a033764c5d084d040d5d88.png\" class=\"\">\n\n\n<p>原因：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/2a7e512536fdb2b6389db0fa7b3f959f.png\" class=\"\">\n\n\n<h1 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h1><p>【1】什么是方法的重载：</p>\n<p>方法的重载是指一个类中可以定义多个方法名相同，但参数不同的方法。 调用时，会根据不同的参数自动匹配对应的方法。</p>\n<p>注意本质：重载的方法，实际是完全不同的方法，只是名称相同而已！</p>\n<p>【2】构成方法重载的条件：</p>\n<p>❀不同的含义：形参类型、形参个数、形参顺序不同</p>\n<p>❀ 只有返回值不同不构成方法的重载</p>\n<p>如：int a(String str){}与 void a(String str){}不构成方法重载</p>\n<p>❀ 只有形参的名称不同，不构成方法的重载</p>\n<p>如：int a(String str){}与int a(String s){}不构成方法重载</p>\n<p>【3】代码：</p>\n<pre><code class=\"java\">public class TestMethod05&#123;\n    public static void main(String[] args)&#123;\n        //10+20:\n        int sum = add(10,20);\n        System.out.println(sum);\n\n        //20+40+80:\n        //System.out.println(add(add(20,40),80));\n        System.out.println(add(20,40,80));\n        //30+60+90+120:\n        //System.out.println(add(add(30,60),add(90,120)));\n        System.out.println(add(30,60,90,120));\n        //9.8+4.7:\n        //System.out.println(add(9.8,4.7));\n        System.out.println(add(9.8,4.7));\n    &#125;\n\n    //定义一个方法：两个数相加：两个int类型数据相加\n    public static int add(int num1,int num2)&#123;\n        return num1+num2;\n    &#125;\n\n    //定义一个方法：三个数相加：\n    public static int add(int num1,int num2,int num3)&#123;\n        return num1+num2+num3;\n    &#125;\n\n    //定义一个方法：四个数相加：\n    public static int add(int num1,int num2,int num3,int num4)&#123;\n        return num1+num2+num3+num4;\n    &#125;\n    //定义一个方法：两个数相加：两个double类型的数据相加\n    public static double add(double num1,double num2)&#123;\n        return num1+num2;\n    &#125;\n\n\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>1.方法的重载：在同一个类中，方法名相同，形参列表不同的多个方法，构成了方法的重载。</p>\n<p>2.方法的重载只跟：方法名和形参列表有关，与修饰符，返回值类型无关。</p>\n<p>3.注意：形参列表不同指的是什么？</p>\n<p>（1）个数不同</p>\n<p>add() add(int num1) add(int num1,int num2)</p>\n<p>（2）顺序不同</p>\n<p>add(int num1,double num2) add(double num1,int num2)</p>\n<p>（3）类型不同</p>\n<p>add(int num1) add(double num1)</p>\n<p>4.请问下面的方法是否构成了方法的重载？</p>\n<p>(1)add(int a) 和 add(int b) —&gt;不构成,相当于方法的重复定义</p>\n<p>(2)public static int add(int a) 和 public static void add(int b) —&gt;不构成</p>\n<p>【4】扩充：</p>\n<pre><code class=\"java\">public class TestMethod06&#123;\n    public static void main(String[] args)&#123;\n        add(5);\n        //级别：byte,short,char--\\&gt;int--\\&gt;long--\\&gt;float---\\&gt;double\n    &#125;\n    \n    public static void add(double num1)&#123;\n        System.out.println(&quot;------2&quot;);\n    &#125;\n    public static void add(float num1)&#123;\n        System.out.println(&quot;------3&quot;);\n    &#125;\n    public static void add(long num1)&#123;\n        System.out.println(&quot;------4&quot;);\n    &#125;\n    /\\*\n        public static void add(int num1)&#123;\n        System.out.println(&quot;------1&quot;);\n    &#125;\n    \\*/\n&#125;\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/",
            "title": "第6章_数组",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"数组的引入\"><a href=\"#数组的引入\" class=\"headerlink\" title=\"数组的引入\"></a>数组的引入</h1><p>【1】习题引入：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestArray01&#123;\n    public static void main(String[] args)&#123;\n        //功能：键盘录入十个学生的成绩，求和，求平均数：\n        //定义一个求和的变量：\n        int sum = 0;\n        Scanner sc = new Scanner(System.in);\n\n        for(int i=1;i\\&lt;=10;i++)&#123;//i:控制循环次数\n            System.out.print(&quot;请录入第&quot;+i+&quot;个学生的成绩：&quot;);\n            int score = sc.nextInt();\n            sum += score;\n        &#125;\n\n        System.out.println(&quot;十个学生的成绩之和为：&quot;+sum);\n        System.out.println(&quot;十个学生的成绩平均数为：&quot;+sum/10);\n\n        //本题的缺点：\n        //求第6个学生的成绩：？？？？？---》不能\n\n    &#125;\n&#125;\n</code></pre>\n<p>缺点：就是不能求每个学生的成绩具体是多少</p>\n<p>解决：将成绩进行存储 —-》 引入 ： 数组</p>\n<p>感受到数组的作用：数组用来存储数据的，在程序设计中，为了处理方便，数组用来将相同类型的若干数据组织起来。</p>\n<p>这个若干数据的集合我们称之为数组。</p>\n<h1 id=\"数组的学习\"><a href=\"#数组的学习\" class=\"headerlink\" title=\"数组的学习\"></a>数组的学习</h1><p>【1】数组的定义</p>\n<p>数组是相同类型数据的有序集合。数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。其中，每一个数据称作一个元素，每个元素可以通过一个索引（下标）来访问它们。</p>\n<p>数组的四个基本特点：</p>\n<p>1.长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</p>\n<p>2.其元素的类型必须是相同类型，不允许出现混合类型。</p>\n<p>3.数组类型可以是任何数据类型，包括基本类型和引用类型。</p>\n<p>4.数组有索引的：索引从0开始，到 数组.length-1 结束</p>\n<p>5.数组变量属于引用类型，数组也是对象。</p>\n<p>PS:数组变量属于引用类型，数组也是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中存储的。</p>\n<p>【2】数组的学习：</p>\n<pre><code class=\"java\">public class TestArray02&#123;\n    public static void main(String[] args)&#123;\n        //数组的作用：用来存储相同类型的数据\n        //以int类型数据为案例：数组用来存储int类型数据\n        //1.声明(定义数组)\n        int[] arr; //定义一个int类型的数组，名字叫arr\n        //int arr2[];\n        //如果数组只声明，没有后续操作，那么这个数组相当于没定义\n        //int[] arr3 = null;//空 辨别：数组赋值为null和什么都没有赋值 不一样的效果\n\n        //2.创建\n        arr = new int[4];//给数组开辟了一个长度为4的空间\n        //编译期声明和创建会被合为一句话: int[] arr = new int[4];\n\n        //3.赋值\n        arr[0] = 12;\n        arr[3] = 47;\n        arr[2] = 98;\n        arr[1] = 56;\n        arr[2] = 66;\n        /\\*\n            arr[4] = 93;\n        出现异常：Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 4\n            Array 数组\n            Index 索引\n            OutOf 超出\n            Bounds 界限\n            Exception 异常\n            \\---》数组索引越界异常\n            \\*/\n\n            //4.使用\n            System.out.println(arr[2]);\n        System.out.println(arr[0]+100);\n        //通过数组一个属性来获取 length 长度\n        System.out.println(&quot;数组的长度是：&quot;+arr.length);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/046af579ec25dd3f79d0c86ae6002a90.png\" class=\"\">\n\n\n<h1 id=\"完善引入的习题-数组的遍历\"><a href=\"#完善引入的习题-数组的遍历\" class=\"headerlink\" title=\"完善引入的习题_数组的遍历\"></a>完善引入的习题_数组的遍历</h1><p>【1】代码：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestArray03&#123;\n    public static void main(String[] args)&#123;\n        //功能：键盘录入十个学生的成绩，求和，求平均数：\n        //定义一个int类型的数组，长度为10 ：\n        int[] scores = new int[10];\n        //定义一个求和的变量：\n        int sum = 0;\n        Scanner sc = new Scanner(System.in);\n\n        for(int i=1;i\\&lt;=10;i++)&#123;//i:控制循环次数\n            System.out.print(&quot;请录入第&quot;+i+&quot;个学生的成绩：&quot;);\n            int score = sc.nextInt();\n            scores[i-1] = score;\n            sum += score;\n        &#125;\n\n        System.out.println(&quot;十个学生的成绩之和为：&quot;+sum);\n        System.out.println(&quot;十个学生的成绩平均数为：&quot;+sum/10);\n\n\n        //求第6个学生的成绩：\n        //System.out.println(scores[5]);\n        /\\*\n            System.out.println(scores[0]);\n        System.out.println(scores[1]);\n        System.out.println(scores[2]);\n        System.out.println(scores[3]);\n        //....\n        System.out.println(scores[9]);\n        \\*/\n            //将数组中的每个元素进行查看--》数组的遍历：\n            //方式1：普通for循环---》正向遍历：\n            for(int i=0;i\\&lt;=9;i++)&#123;\n                System.out.println(&quot;第&quot;+(i+1)+&quot;个学生的成绩为：&quot;+scores[i]);\n            &#125;\n\n        //方式2：增强for循环:\n        //对scores数组进行遍历，遍历出来每个元素都用int类型的num接收：\n        int count = 0;\n        for(int num:scores)&#123;\n            count++;\n            //每次都将num在控制台输出\n            System.out.println(&quot;第&quot;+count+&quot;个学生的成绩为：&quot;+num);\n        &#125;\n\n        /\\*\n            增强for循环：\n            优点：代码简单\n            缺点：单纯的增强for循环不能涉及跟索引相关的操作\n            \\*/\n\n            //方式3：利用普通for循环： 逆向遍历：\n            for(int i=9;i\\&gt;=0;i--)&#123;\n                System.out.println(&quot;第&quot;+(i+1)+&quot;个学生的成绩为：&quot;+scores[i]);\n            &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【2】用IDEA验证数组的确将数据进行存储了：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/8a7a660c15849bc9d85e42452b74c0a5.png\" class=\"\">\n\n\n<h1 id=\"数组的三种初始化方式\"><a href=\"#数组的三种初始化方式\" class=\"headerlink\" title=\"数组的三种初始化方式\"></a>数组的三种初始化方式</h1><p>数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。</p>\n<ul>\n<li>静态初始化</li>\n</ul>\n<p>除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。</p>\n<p>eg:</p>\n<pre><code class=\"java\">int[] arr = &#123;12,23,45&#125;;\n\nint[] arr = new int[]&#123;12,23,45&#125;;\n\n注意：\n\n1.new int[3]&#123;12,23,45&#125;;--\\&gt;错误\n\n2.int[] arr ;\n\narr = &#123;12,23,45&#125;; ---\\&gt;错误\n</code></pre>\n<ul>\n<li>动态初始化</li>\n</ul>\n<p>数组定义与为数组元素分配空间并赋值的操作分开进行。</p>\n<p>eg:</p>\n<pre><code class=\"java\">int[] arr ;\n\narr = new int[3]\n\narr[0] = 12;\n\narr[1] = 23;\n\narr[2] = 45;\n</code></pre>\n<ul>\n<li>默认初始化</li>\n</ul>\n<p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</p>\n<p>int[] arr &#x3D; new int[3]; —&gt; 数组有默认的初始化值</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/7dd1ca8911a4defc392409e9442bb532.png\" class=\"\">\n\n\n<h1 id=\"数组的应用题\"><a href=\"#数组的应用题\" class=\"headerlink\" title=\"数组的应用题\"></a>数组的应用题</h1><h2 id=\"最值问题\"><a href=\"#最值问题\" class=\"headerlink\" title=\"最值问题\"></a>最值问题</h2><p>【1】实现一个功能：给定一个数组int[] arr &#x3D; {12,3,7,4,8,125,9,45}; ，求出数组中最大的数。</p>\n<p>思路图：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/70c971a42c3219e306e6ece0eb9e41d8.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class TestArray04&#123;\n    public static void main(String[] args)&#123;\n        //实现一个功能：给定一个数组int[] arr = &#123;12,3,7,4,8,125,9,45&#125;; ，求出数组中最大的数。\n        //1.给定一个数组\n        int[] arr = &#123;12,3,7,4,8,125,9,45,666,36&#125;;\n\n        //2.求出数组中的最大值：\n        //先找一个数上擂台，假定认为这个数最大：\n        int maxNum = arr[0];\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]\\&gt;maxNum)&#123;\n                maxNum = arr[i];\n            &#125;\n        &#125;\n        System.out.println(&quot;当前数组中最大的数为：&quot;+maxNum);\n\n    &#125;\n&#125;\n</code></pre>\n<p>【2】将求最大值的方法提取出来：</p>\n<pre><code class=\"java\">public class TestArray04&#123;\n    public static void main(String[] args)&#123;\n        //实现一个功能：给定一个数组int[] arr = &#123;12,3,7,4,8,125,9,45&#125;; ，求出数组中最大的数。\n        //1.给定一个数组\n        int[] arr = &#123;12,3,7,4,8,725,9,45,666,36&#125;;\n\n        //2.求出数组中的最大值：\n        //调用方法：\n        int num = getMaxNum(arr);\n        System.out.println(&quot;当前数组中最大的数为：&quot;+num);\n    &#125;\n\n    /\\*\n        想提取一个方法：求数组中的最大值\n        求哪个数组中的最大值 ---》不确定因素：哪个数组 (形参)---》返回值：最大值\n        \\*/\n        public static int getMaxNum(int[] arr)&#123;\n        //先找一个数上擂台，假定认为这个数最大：\n        int maxNum = arr[0];\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]\\&gt;maxNum)&#123;\n                maxNum = arr[i];\n            &#125;\n        &#125;\n        return maxNum;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【3】画内存：</p>\n<p>方法的实参传递给形参的时候一定要注意：一切都是值传递：</p>\n<p>如果是基本数据类型，那么传递的就是字面值</p>\n<p>如果是引用数据类型，那么传递的就是地址值</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/9fcaf17f1bd6f6c30ecdf3db3fb2a57c.png\" class=\"\">\n\n\n<h2 id=\"查询问题\"><a href=\"#查询问题\" class=\"headerlink\" title=\"查询问题\"></a>查询问题</h2><p>【1】查询指定位置的元素</p>\n<pre><code class=\"java\">public class TestArray05&#123;\n    public static void main(String[] args)&#123;\n        //查询指定位置的元素\n        //给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10&#125;;\n        //查找索引为2的位置上对应的元素是什么？\n        System.out.println(arr[2]);\n    &#125;\n&#125;\n</code></pre>\n<p>上面代码体现了数组的一个优点：</p>\n<p>在按照位置查询的时候，直接一步到位，效率非常高</p>\n<p>【2】查询指定元素的位置–》找出元素对应的索引</p>\n<pre><code class=\"java\">public class TestArray06&#123;\n    public static void main(String[] args)&#123;\n        //查询指定元素的位置--》找出元素对应的索引\n        //给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,56&#125;;\n        // 0 1 2 3 4 5\n\n        //功能：查询元素888对应的索引：\n        int index = -1; //这个初始值只要不是数组的索引即可\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]==12)&#123;\n                index = i;//只要找到了元素，那么index就变成为i\n                break;//只要找到这个元素，循环就停止\n            &#125;\n        &#125;\n        if(index!=-1)&#123;\n            System.out.println(&quot;元素对应的索引：&quot;+index);\n        &#125;else&#123;//index==-1\n            System.out.println(&quot;查无次数！&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【3】将查指定元素对应的索引的功能提取为方法：</p>\n<pre><code class=\"java\">public class TestArray06&#123;\n    public static void main(String[] args)&#123;\n        //查询指定元素的位置--》找出元素对应的索引\n        //给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,56&#125;;\n        // 0 1 2 3 4 5\n\n        //功能：查询元素888对应的索引：\n        //调用方法：\n        int index = getIndex(arr,999);\n        //后续对index的值进行判断：\n        if(index!=-1)&#123;\n            System.out.println(&quot;元素对应的索引：&quot;+index);\n        &#125;else&#123;//index==-1\n            System.out.println(&quot;查无次数！&quot;);\n        &#125;\n    &#125;\n\n    /\\*\n        定义一个方法：查询数组中指定的元素对应的索引：\n        不确定因素：哪个数组，哪个指定元素 （形参）\n        返回值：索引\n\n        \\*/\n        public static int getIndex(int[] arr,int ele)&#123;\n        int index = -1; //这个初始值只要不是数组的索引即可\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]==ele)&#123;\n                index = i;//只要找到了元素，那么index就变成为i\n                break;//只要找到这个元素，循环就停止\n            &#125;\n        &#125;\n        return index;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h2><p>【1】实现一个功能：</p>\n<p>添加逻辑：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/b8b369a935a5784a33f79bddc13e998b.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class TestArray07&#123;\n    public static void main(String[] args)&#123;\n        //功能：给定一个数组,在数组下标为2的位置上添加一个元素91\n\n        //1.给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10,55,66,77,88,999,89&#125;;\n        // 0 1 2 3 4 5\n        //2.输出增加元素前的数组：\n        System.out.print(&quot;增加元素前的数组：&quot;);\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(i!=arr.length-1)&#123;\n                System.out.print(arr[i]+&quot;,&quot;);\n            &#125;else&#123;//i==arr.length-1 最后一个元素不用加,\n                System.out.print(arr[i]);\n            &#125;\n        &#125;\n\n        //3.增加元素\n        /\\*\n            arr[5] = arr[4];\n        arr[4] = arr[3];\n        arr[3] = arr[2];\n        \\*/\n            int index = 1;//在这个指定位置添加 元素\n        for(int i=arr.length-1;i\\&gt;=(index+1);i--)&#123;\n            arr[i] = arr[i-1];\n        &#125;\n        arr[index] = 666;\n\n\n        //4.输出增加元素后的数组：\n        System.out.print(&quot;\\\\n增加元素后的数组：&quot;);\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(i!=arr.length-1)&#123;\n                System.out.print(arr[i]+&quot;,&quot;);\n            &#125;else&#123;//i==arr.length-1 最后一个元素不用加,\n                System.out.print(arr[i]);\n            &#125;\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【2】将添加功能提取为一个 方法：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestArray07&#123;\n    public static void main(String[] args)&#123;\n        //功能：给定一个数组,在数组下标为2的位置上添加一个元素91\n\n        //1.给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10,55,66,77,88,999,89&#125;;\n        // 0 1 2 3 4 5\n        //2.输出增加元素前的数组：\n        /\\*\n            System.out.print(&quot;增加元素前的数组：&quot;);\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(i!=arr.length-1)&#123;\n                System.out.print(arr[i]+&quot;,&quot;);\n            &#125;else&#123;//i==arr.length-1 最后一个元素不用加,\n                System.out.print(arr[i]);\n            &#125;\n        &#125;\n        \\*/\n\n            //从键盘接收数据：\n            Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入你要添加元素的指定下标：&quot;);\n        int index = sc.nextInt();\n        System.out.println(&quot;请录入你要添加的元素：&quot;);\n        int ele = sc.nextInt();\n\n        //3.增加元素\n        //调用方法：\n        insertEle(arr,index,ele);\n\n\n\n        //4.输出增加元素后的数组：\n        System.out.print(&quot;\\\\n增加元素后的数组：&quot;);\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(i!=arr.length-1)&#123;\n                System.out.print(arr[i]+&quot;,&quot;);\n            &#125;else&#123;//i==arr.length-1 最后一个元素不用加,\n                System.out.print(arr[i]);\n            &#125;\n        &#125;\n\n    &#125;\n\n\n    /\\*\n        提取一个添加元素的方法：\n        在数组的指定位置上添加一个指定的元素。\n        在哪个数组的哪个位置添加哪个元素！\n        不确定因素：形参：哪个数组，哪个位置，哪个元素\n        返回值：无\n\n        \\*/\n        public static void insertEle(int[] arr,int index,int ele)&#123;\n        for(int i=arr.length-1;i\\&gt;=(index+1);i--)&#123;\n            arr[i] = arr[i-1];\n        &#125;\n        arr[index] = ele;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h2><p>【1】实现一个功能：删除指定位置上的元素</p>\n<p>逻辑：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/6c0276c47a14681f40e5ee09c6f35150.png\" class=\"\">\n\n\n<pre><code class=\"java\">import java.util.Arrays;\npublic class TestArray08&#123;\n    public static void main(String[] args)&#123;\n        //功能：给定一个数组,删除下标为2元素\n\n        //1.给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10,34,45,56,7,666&#125;;\n        // 0 1 2 3 4 5\n        //2.输出删除前的数组：\n        System.out.println(&quot;删除元素前的数组：&quot;+Arrays.toString(arr));\n\n        //3.删除\n        /\\*\n            arr[2] = arr[3];\n        arr[3] = arr[4];\n        arr[4] = arr[5];\n        \\*/\n            int index = 0;\n        for(int i=index;i\\&lt;=arr.length-2;i++)&#123;\n            arr[i] = arr[i+1];\n        &#125;\n        arr[arr.length-1] = 0;\n\n        //4.输出删除后的数组：\n        System.out.println(&quot;删除元素后的数组：&quot;+Arrays.toString(arr));\n    &#125;\n&#125;\n</code></pre>\n<p>【2】实现一个功能：删除指定元素</p>\n<pre><code class=\"java\">import java.util.Arrays;\npublic class TestArray09&#123;\n    public static void main(String[] args)&#123;\n        //功能：给定一个数组,删除元素3：\n\n        //1.给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10,34,45,56,7,666&#125;;\n\n        //2.输出删除前的数组：\n        System.out.println(&quot;删除元素前的数组：&quot;+Arrays.toString(arr));\n\n\n        //找到要删除的元素对应的索引即可：\n        int index = -1 ;\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]==1200)&#123;\n                index = i;\n                break;\n            &#125;\n        &#125;\n\n        //3.删除\n\n        if(index!=-1)&#123;\n            for(int i=index;i\\&lt;=arr.length-2;i++)&#123;\n                arr[i] = arr[i+1];\n            &#125;\n            arr[arr.length-1] = 0;\n        &#125;else&#123;//index==-1\n            System.out.println(&quot;根本没有你要删除的元素！&quot;);\n        &#125;\n\n\n        //4.输出删除后的数组：\n        System.out.println(&quot;删除元素后的数组：&quot;+Arrays.toString(arr));\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"详述main方法\"><a href=\"#详述main方法\" class=\"headerlink\" title=\"详述main方法\"></a>详述main方法</h1><p>【1】main方法：程序的入口，在同一个类中，如果有多个方法，那么虚拟机就会识别main方法，从这个方法作为程序的入口</p>\n<p>【2】main方法格式严格要求：</p>\n<p>public static void main(String[] args){}</p>\n<p>public static —&gt;修饰符 ，暂时用这个 –&gt;面向对象一章</p>\n<p>void —&gt;代表方法没有返回值 对应的类型void</p>\n<p>main —&gt;见名知意名字</p>\n<p>String[] args —&gt;形参 —》不确定因素</p>\n<p>【3】问题：程序中是否可以有其他的方法也叫main方法？</p>\n<p>可以，构成了方法的重载。</p>\n<pre><code class=\"java\">public class TestArray10&#123;\n    public static void main(String[] args)&#123;\n\n    &#125;\n    public static void main(String str)&#123;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【4】形参为String[] 那么实参到底是什么？</p>\n<pre><code class=\"java\">public class TestArray10&#123;\n    public static void main(String[] args)&#123;\n        //从侧面验证：\n        //int[] arr1; //如果对数组只声明，没有后续操作，那么相当于 白定义了。\n        //int[] arr2 = null;\n        //System.out.println(arr2.length);//Exception in thread &quot;main&quot; java.lang.NullPointerException\n        //int[] arr3 = new int[0];\n        //System.out.println(arr3.length);\n        //int[] arr4 = new int[4];\n        //System.out.println(arr4.length);\n\n        //System.out.println(args.length);//0\n        //从这个结果证明，参数是String[],实参是 new String[0]\n        //默认情况下，虚拟机在调用main方法的时候就是传入了一个长度为0的数组\n\n        System.out.println(args.length);\n        for(String str:args)&#123;\n            System.out.println(str);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>手动传入实参：</p>\n<p>有特殊符号的时候可以加上“”</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/d3da5aadcf3237a0ded3957e968da17a.png\" class=\"\">\n\n\n<p>没有特殊符号用空格隔开即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/a7c9de6cf8fb43afc60fbbcea917ed21.png\" class=\"\">\n\n\n<h1 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h1><pre><code class=\"java\">public class TestArray12&#123;\n    /\\*\n        1.可变参数：作用提供了一个方法，参数的个数是可变的 ,解决了部分方法的重载问题\n        int...num\n        double...num\n        boolean...num\n\n\n        2.可变参数在JDK1.5之后加入的新特性\n        3.方法的内部对可变参数的处理跟数组是一样\n        4.可变参数和其他数据一起作为形参的时候，可变参数一定要放在最后\n        5.我们自己在写代码的时候，建议不要使用可变参数。\n        \\*/\n        public static void main(String[] args)&#123;\n        //method01(10);\n        //method01();\n        //method01(20,30,40);\n        method01(30,40,50,60,70);\n        //method01(new int[]&#123;11,22,33,44&#125;);\n    &#125;\n    public static void method01(int num2,int...num)&#123;\n        System.out.println(&quot;-----1&quot;);\n        for(int i:num)&#123;\n            System.out.print(i+&quot;\\\\t&quot;);\n        &#125;\n        System.out.println();\n\n        System.out.println(num2);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"Arrays工具类\"><a href=\"#Arrays工具类\" class=\"headerlink\" title=\"Arrays工具类\"></a>Arrays工具类</h1><p>为了方便我们对数组进行操作，系统提供一个类Arrays，我们将它当做工具类来使用。</p>\n<pre><code class=\"java\">import java.util.Arrays;\npublic class TestArray13&#123;\n    public static void main(String[] args)&#123;\n        //给定一个数组：\n        int[] arr = &#123;1,3,7,2,4,8&#125;;\n        //toString:对数组进行遍历查看的，返回的是一个字符串，这个字符串比较好看\n        System.out.println(Arrays.toString(arr));\n\n        //binarySearch:二分法查找：找出指定数组中的指定元素对应的索引：\n        //这个方法的使用前提：一定要查看的是一个有序的数组：\n        //sort：排序 --\\&gt;升序\n        Arrays.sort(arr);\n        System.out.println(Arrays.toString(arr));\n        System.out.println(Arrays.binarySearch(arr,4));\n\n        int[] arr2 = &#123;1,3,7,2,4,8&#125;;\n        //copyOf:完成数组的复制：\n        int[] newArr = Arrays.copyOf(arr2,4);\n        System.out.println(Arrays.toString(newArr));\n\n        //copyOfRange:区间复制：\n        int[] newArr2 = Arrays.copyOfRange(arr2,1,4);//[1,4)--\\&gt;1,2,3位置\n        System.out.println(Arrays.toString(newArr2));\n\n        //equals:比较两个数组的值是否一样：\n        int[] arr3 = &#123;1,3,7,2,4,8&#125;;\n        int[] arr4 = &#123;1,3,7,2,4,8&#125;;\n        System.out.println(Arrays.equals(arr3,arr4));//true\n        System.out.println(arr3==arr4);//false ==比较左右两侧的值是否相等，比较的是左右的地址值，返回结果一定是false\n\n        //fill：数组的填充：\n        int[] arr5 = &#123;1,3,7,2,4,8&#125;;\n        Arrays.fill(arr5,10);\n        System.out.println(Arrays.toString(arr5));\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"数组的复制操作\"><a href=\"#数组的复制操作\" class=\"headerlink\" title=\"数组的复制操作\"></a>数组的复制操作</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/f55029455c828e6298cac80b7e99f3d4.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/fe8cc0293b38bcca7c79d0f53366bf51.png\" class=\"\">\n\n\n<p>原理：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/c646de79c14443e0f59dbfd4df86acc9.png\" class=\"\">\n\n\n<p>代码：</p>\n<pre><code class=\"java\">import java.util.Arrays;\npublic class TestArray14&#123;\n    public static void main(String[] args)&#123;\n        //给一个源数组：\n        int[] srcArr = &#123;11,22,33,44,55,66,77,88&#125;;\n        //给一个目标数组：\n        int[] destArr = new int[10];\n\n        //复制：\n        System.arraycopy(srcArr,1,destArr,3,3);\n        //遍历查看目标数组：\n        System.out.println(Arrays.toString(destArr));\n    &#125;\n\n&#125;\n</code></pre>\n<p>结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/449d70aa26b1dd58faf4391d631b23c9.png\" class=\"\">\n\n\n<h1 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h1><p>【1】引入：本质上全部都是一维数组：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/34650d8b02d5b0ec054c9dca9a6d89fd.png\" class=\"\">\n\n\n<p>【2】基本代码：</p>\n<pre><code class=\"java\">public class TestArray15&#123;\n    public static void main(String[] args)&#123;\n        //定义一个二维数组：\n        int[][] arr = new int[3][];//本质上定义了一个一维数组，长度为3\n\n        int[] a1 = &#123;1,2,3&#125;;\n        arr[0] = a1;\n\n        arr[1] = new int[]&#123;4,5,6,7&#125;;\n\n        arr[2] = new int[]&#123;9,10&#125;;\n\n    &#125;\n&#125;\n</code></pre>\n<p>对应内存：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/7b1ecb2fa93e9b387e7ad62603746e33.png\" class=\"\">\n\n\n<p>【3】四种遍历方式：</p>\n<pre><code class=\"java\">public class TestArray15&#123;\n    public static void main(String[] args)&#123;\n        //定义一个二维数组：\n        int[][] arr = new int[3][];//本质上定义了一个一维数组，长度为3\n\n        int[] a1 = &#123;1,2,3&#125;;\n        arr[0] = a1;\n\n        arr[1] = new int[]&#123;4,5,6,7&#125;;\n\n        arr[2] = new int[]&#123;9,10&#125;;\n\n        //读取6这个元素：\n        //System.out.println(arr[1][2]);\n\n        //对二维数组遍历：\n        //方式1：外层普通for循环+内层普通for循环：\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            for(int j=0;j\\&lt;arr[i].length;j++)&#123;\n                System.out.print(arr[i][j]+&quot;\\\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n\n        //方式2：外层普通for循环+内层增强for循环：\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            for(int num:arr[i])&#123;\n                System.out.print(num+&quot;\\\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n\n        //方式3：外层增强for循环+内层增强for循环：\n        for(int[] a:arr)&#123;\n            for(int num:a)&#123;\n                System.out.print(num+&quot;\\\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n\n        //方式4：外层增强for循环+内层普通for循环：\n        for(int[] a:arr)&#123;\n            for(int i=0;i\\&lt;a.length;i++)&#123;\n                System.out.print(a[i]+&quot;\\\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"二维数组的初始化方式\"><a href=\"#二维数组的初始化方式\" class=\"headerlink\" title=\"二维数组的初始化方式\"></a>二维数组的初始化方式</h1><p>数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。</p>\n<ul>\n<li>静态初始化</li>\n</ul>\n<p>除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。</p>\n<p>eg:</p>\n<pre><code class=\"java\">int[][] arr = &#123;&#123;1,2&#125;,&#123;4,5,6&#125;,&#123;4,5,6,7,8,9,9&#125;&#125;;\n\nint[][] arr =new int[][] &#123;&#123;1,2&#125;,&#123;4,5,6&#125;,&#123;4,5,6,7,8,9,9&#125;&#125;;\n</code></pre>\n<ul>\n<li>动态初始化</li>\n</ul>\n<p>数组定义与为数组元素分配空间并赋值的操作分开进行。</p>\n<p>eg:</p>\n<pre><code class=\"java\">int[][] arr = new int[3][]; //本质上定义了一维数组长度为3，每个“格子”中放入的是一个数组\n\narr[0] = new int[]&#123;1,2&#125;;\n\narr[1] = new int[]&#123;3,4,5,6&#125;;\n\narr[2] = new int[]&#123;34,45,56&#125;;\n</code></pre>\n<p>eg:</p>\n<pre><code class=\"java\">int[][] arr = new int[3][2];\n</code></pre>\n<ul>\n<li>默认初始化</li>\n</ul>\n<p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "第7章_IDEA的使用",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"IDE\"><a href=\"#IDE\" class=\"headerlink\" title=\"IDE\"></a>IDE</h1><p>集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如微软的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。编程开发软件将编辑、编译、调试等功能集成在一个桌面环境中,这样就大大方便了用户。</p>\n<p>❀优点</p>\n<p>节省时间和精力。IDE的目的就是要让开发更加快捷方便，通过提供工具和各种性能来帮助开发者组织资源，减少失误，提供捷径。</p>\n<p>建立统一标准。当一组程序员使用同一个开发环境时，就建立了统一的工作标准，当IDE提供预设的模板，或者不同团队分享代码库时，这一效果就更加明显了。</p>\n<p>管理开发工作。首先，IDE提供文档工具，可以自动输入开发者评论，或者迫使开发者在不同区域编写评论。其次，IDE可以展示资源，更便于发现应用所处位置，无需在文件系统里面艰难的搜索。</p>\n<p>❀缺点</p>\n<p>学习曲线问题。IDE基本上是比较复杂的工具，为了更好的熟练使用，需要一定的时间和耐心。</p>\n<p>初学者的困难。对初学者来说，使用IDE来学习开发有相当的难度，不适合学习一种新语言时使用。</p>\n<p>无法修复坏代码或设计。开发者不能完全依赖工具的便捷，还是必须保持专业水准和熟练度，开发的成果好坏主要还是看开发员的技术。</p>\n<h1 id=\"JetBrains公司介绍\"><a href=\"#JetBrains公司介绍\" class=\"headerlink\" title=\"JetBrains公司介绍\"></a>JetBrains公司介绍</h1><p>【1】IntelliJ IDEA就是Java的IDE。</p>\n<p>【2】市场占有率竹节攀升，超过了Eclipse。</p>\n<p>【3】JetBrains公司介绍：</p>\n<p>JetBrains是一家捷克的软件开发公司，该公司位于捷克的布拉格，并在俄罗斯的圣彼得堡及美国麻州波士顿都设有办公室，该公司最为人所熟知的产品是Java编程语言开发撰写时所用的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUIlODYlRTYlODglOTAlRTUlQkMlODAlRTUlOEYlOTElRTclOEUlQUYlRTUlQTIlODMvMjk4NTI0\">集成开发环境</span>：IntelliJ IDEA。公司旗下还有其它产品，比如：</p>\n<p>➢WebStorm: 用于开发JavaScript、HTML5、 CS3等前端技术;</p>\n<p>➢PyCharm: 用于开发python（python语言热度排行榜排名第一，在人工智能大数据领域应用）</p>\n<p>➢PhpStorm: 用于开发PHP</p>\n<p>➢RubyMine: 用于开发Ruby&#x2F;Rails</p>\n<p>➢AppCode: 用于开发Objective - C&#x2F;Swift,替换xcode的</p>\n<p>➢CLion: 用于开发C&#x2F;C++</p>\n<p>➢DataGrip: 用于开发数据库和SQL</p>\n<p>➢Rider: 用于开发.NET</p>\n<p>➢GoLand: 用于开发Go（区块链主流开发语言就是Go语言）</p>\n<p>【4】官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS8=\">https://www.jetbrains.com/</span></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/f362feebfb46d136a1d0b793447e81ea.png\" class=\"\">\n\n\n<h1 id=\"IntelliJ-IDEA介绍\"><a href=\"#IntelliJ-IDEA介绍\" class=\"headerlink\" title=\"IntelliJ_IDEA介绍\"></a>IntelliJ_IDEA介绍</h1><p>【1】IDEA 全称IntelliJ IDEA，是用于java语言开发的集成环境IDE(Integrated Development Environment)，也可用于其他语言。</p>\n<p>IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。</p>\n<p>IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。</p>\n<p>【2】IDEA的支持：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/9a9495032bd248f3996d975a1f8e42bb.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/105733bb7ad26ddef778db2103e8c4cf.png\" class=\"\">\n\n\n<p>【3】IDEA的优势（相对于Eclipse）</p>\n<p>①强大的整合能力。比如: Git、 Maven、 Spring 等</p>\n<p>②提示功能的快速、便捷</p>\n<p>③提示功能的范围广</p>\n<p>④好用的快捷键和代码模板</p>\n<p>⑤精准搜索</p>\n<h1 id=\"IntelliJ-IDEA的下载和安装的准备\"><a href=\"#IntelliJ-IDEA的下载和安装的准备\" class=\"headerlink\" title=\"IntelliJ_IDEA的下载和安装的准备\"></a>IntelliJ_IDEA的下载和安装的准备</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/35f4cb2446e40dde79002379353ccabb.png\" class=\"\">\n\n\n<p>【2】安装的准备：</p>\n<p>（1）硬件环境：</p>\n<p>内存8G以上</p>\n<p>CPU i5以上</p>\n<p>安装在固态硬盘下</p>\n<p>（2）软件环境：</p>\n<p>需要安装JDK</p>\n<h1 id=\"IDEA的卸载\"><a href=\"#IDEA的卸载\" class=\"headerlink\" title=\"IDEA的卸载\"></a>IDEA的卸载</h1><p>对于免安装的idea：</p>\n<p>（1）删除安装文件</p>\n<p>（2）到用户下将idea的缓存，配置的目录删除掉即可</p>\n<p>安装idea:</p>\n<p>(1)可以用控制面板–》程序</p>\n<h1 id=\"IDEA页面展示\"><a href=\"#IDEA页面展示\" class=\"headerlink\" title=\"IDEA页面展示\"></a>IDEA页面展示</h1><p>【1】项目下内容：</p>\n<p>➢工程下的src类似于Eclipse下的src目录，用于存放代码。。</p>\n<p>➢工程下的.idea 和TestProject.iml文件都是IDEA工程特有的。类似于Eclipse 工程下的settings、.classpath、.project 等。</p>\n<p>【2】配置：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/1a7cb74f3df7fbe79e6ba069bf4dc546.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/7cbbe2dc58eda1196a34dd448e7bca5b.png\" class=\"\">\n\n\n<h1 id=\"Module的概念和使用\"><a href=\"#Module的概念和使用\" class=\"headerlink\" title=\"Module的概念和使用\"></a>Module的概念和使用</h1><p>【1】在Eclipse中我们有Workspace (工作空间)和Project (工程)的概念，在IDEA中只有Project (工程)和Module (模块)的概念。</p>\n<p>这里的对应关系为:</p>\n<table>\n<thead>\n<tr>\n<th>IDEA官网说明:  An Eclipse workspace is similar to a project in IntelliJ IDEA  An Eclipse project maps to a module in IntelliJ IDEA</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>翻译:  Eclipse中 workspace 相当于 IDEA中的Project  Eclipse中 Project 相当于 IDEA中的Module</td>\n</tr>\n</tbody></table>\n<p>在IntelliJ IDEA中Project(工程) 是最顶级的级别，次级别是Module(模块)。</p>\n<p>一个Project下可以有多个Module。</p>\n<p>【2】从Eclipse 转过来的人总是下意识地要在同一个窗口管理n个项目，这在Intellij IDEA是无法做到的。Intellij IDEA提供的解决方案是打开多个项目实例，即打开多个项目窗口。即:一个Project 打开一个Window窗口。</p>\n<p>【3】IDEA这样设置的原因：</p>\n<p>目前主流的大型项目都是分布式部署的，结构都是类似这种多Module的。</p>\n<p>这类项目一般是这样划分的，比如: 积分模块、任务模块、活动模块等等，模块之间彼此可以相互依赖。这些Module之间都是处于同一个项目业务下的模块，彼此之间是有不可分割的业务关系的。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/4b4fbdbfa923e2591cb2a7f701c738b0.png\" class=\"\">\n\n\n<p>【4】out目录的说明：里面存放的是编译后的字节码文件</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/f817b14883ed0ace61fc69631f5c6b71.png\" class=\"\">\n\n\n<p>【5】删除模块：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/b052b9c22ae29325f823db7e69e542f3.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/af8bd2a497a5f963c8d8dde9cbe0289e.png\" class=\"\">\n\n\n<h1 id=\"IDEA的常用设置\"><a href=\"#IDEA的常用设置\" class=\"headerlink\" title=\"IDEA的常用设置\"></a>IDEA的常用设置</h1><p>【1】进入设置：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/2122254fa737cc380ce88f392c2a78cd.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/ff7ec5c53e192881c538304fd2126de7.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/62073c876d3f02e4124f4d448ef6688b.png\" class=\"\">\n\n\n<p>【2】设置主题：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/a88a39e6124b6ce58feea16fb7222564.png\" class=\"\">\n\n\n<p>【3】编辑区的字体变大或者变小：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/4be07f5bae751ae60b3f710c4542a394.png\" class=\"\">\n\n\n<p>【4】鼠标悬浮在代码上有提示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/6a2a4a6748c4a79cf49cfa184d03830b.png\" class=\"\">\n\n\n<p>【5】自动导包和优化多余的包：</p>\n<p>手动导包：快捷键：alt+enter</p>\n<p>自动导包和优化多余的包：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/ae52672fe1d257f8c341969321d8a069.png\" class=\"\">\n\n\n<p>【6】同一个包下的类，超过指定个数的时候，导包合并为*</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/881a90cec620ed6f85dd6cb5ed9bdd36.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/f90fc12b1369268eccf01e27bcebd82b.png\" class=\"\">\n\n\n<p>【7】显示行号 ， 方法和方法间的分隔符：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/99d7a1252fb6b7875100125d44a85331.png\" class=\"\">\n\n\n<p>【8】忽略大小写，进行提示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/ccaa47c6e69e912e33532a31e2318df5.png\" class=\"\">\n\n\n<p>【9】多个类不隐藏，多行显示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/5120dab3e7cda14f9d0050ea46857bf5.png\" class=\"\">\n\n\n<p>【10】设置默认的字体，字体大小，字体行间距：(编辑区和控制台都会变化)</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/2a62492e45c48ceea2c42b47dfef33fd.png\" class=\"\">\n\n\n<p>【11】修改代码中注释的字体颜色：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/9b5a6ee63fb86a251a8fb50d89a06a58.png\" class=\"\">\n\n\n<p>【12】修改类头的文档注释信息：—》注意：对新建的类才有效</p>\n<p>&#x2F;**</p>\n<p>* @Auther: zhaoss</p>\n<p>* @Date: ${DATE} - ${MONTH} - ${DAY} - ${TIME}</p>\n<p>* @Description: ${PACKAGE_NAME}</p>\n<p>* @version: 1.0</p>\n<p>*&#x2F;</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/b0b5e655926c1a39182d6e702b8f19f4.png\" class=\"\">\n\n\n<p>【13】设置项目文件编码：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/1ec297778834824cec1030cceb9a35a7.png\" class=\"\">\n\n\n<p>文件右下角可以调节编码格式：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/372613a9deca43cb5531ab639ccb93c5.png\" class=\"\">\n\n\n<p>【14】自动编译：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/99364bdcbac808e8a9283f7bf4d00f74.png\" class=\"\">\n\n\n<p>【15】省电模式：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/29648a84a17bd70f4a67e3fed4edaa86.png\" class=\"\">\n\n\n<p>【16】代码显示结构：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/d7a0885c61310238679d9ceaf73305d6.png\" class=\"\">\n\n\n<p>【17】导入jar包：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/9702df3179e89f4b31db86f2b40e6d15.png\" class=\"\">\n\n\n<p>【18】生成序列化版本号：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/e25056c4b5486ac9139430f1da3a6928.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/144c56bd5d909172bf01f3aff56304e2.png\" class=\"\">\n\n\n<h1 id=\"IDEA的常用快捷键\"><a href=\"#IDEA的常用快捷键\" class=\"headerlink\" title=\"IDEA的常用快捷键\"></a>IDEA的常用快捷键</h1><p>【1】创建内容：alt+insert</p>\n<p>【2】main方法：psvm</p>\n<p>【3】输出语句：sout<br>【4】复制行：ctrl+d</p>\n<p>【5】删除行：ctrl+y</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/1de3898fffc8b5ec0ae35b447d852504.png\" class=\"\">\n\n\n<p>【6】代码向上&#x2F;下移动：Ctrl + Shift + Up &#x2F; Down</p>\n<p>【7】搜索类： ctrl+n</p>\n<p>【8】生成代码 ：alt + Insert（如构造函数等，getter,setter,hashCode,equals,toString）</p>\n<p>【9】百能快捷键 : alt + Enter （导包，生成变量等）</p>\n<p>【10】单行注释或多行注释 ： Ctrl + &#x2F; 或 Ctrl + Shift + &#x2F;</p>\n<p>【11】重命名 shift+f6</p>\n<p>【12】for循环 直接 ：fori 回车即可</p>\n<p>【13】代码块包围：try-catch,if,while等 ctrl+alt+t</p>\n<p>【14】 代码自动补全提示:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/93e80fcfe447c7cb0a98a2369aa78beb.png\" class=\"\">\n\n\n<p>【15】 idea代码字体大小放大和缩小的快捷键</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/99248f6b95a9feb45be9eab9b874a74e.png\" class=\"\">\n\n\n<p>【16】代码一层一层调用的快捷键：</p>\n<p>点进源码：ctrl+鼠标悬浮在代码上+点进去即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/2e55ee66a1a3d5b2dc4d0ea0976d20e7.png\" class=\"\">\n\n\n<p>【17】显示代码结构 : alt + 7</p>\n<p>【18】显示导航栏： alt +1</p>\n<p>【19】撤回：ctrl+z</p>\n<p>【20】REDO操作：</p>\n<p>如果跟搜狗输入法的快捷键冲突，可以选择将搜狗的快捷键取消。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/8f5fe14e09048ef82253d1fd802f9a47.png\" class=\"\">\n\n\n<p>【21】缩进：tab 取消缩进： shift+tab</p>\n<h1 id=\"模板的使用\"><a href=\"#模板的使用\" class=\"headerlink\" title=\"模板的使用\"></a>模板的使用</h1><h2 id=\"代码模板是什么\"><a href=\"#代码模板是什么\" class=\"headerlink\" title=\"代码模板是什么\"></a>代码模板是什么</h2><p>它的原理就是配置一些常用代码字母缩写，在输入简写时可以出现你预定义的固定模式的代码，使得开发效率大大提高，同时也可以增加个性化。最简单的例子就是在Java中输入sout会出现System.out.println();</p>\n<p>（一）所处位置：</p>\n<p>（1）Live Templates</p>\n<p>（2）Postfix Completion</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/44e87a0a66f725ae3cfddbda8bd1589e.png\" class=\"\">\n\n\n<p>（二）区别：</p>\n<p>【1】</p>\n<p>Live Templates中可以做用户的个性化定制。</p>\n<p>Postfix Completion中只能用，不能修改。</p>\n<p>【2】使用方式不同</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/7b200ed579ae2298e6a2fe9ea46fa4fe.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/a7b86e5aff479f5b201a801d9ed6ad45.png\" class=\"\">\n\n\n<h2 id=\"修改现有模板\"><a href=\"#修改现有模板\" class=\"headerlink\" title=\"修改现有模板\"></a>修改现有模板</h2><p>【1】案例1：改main方法： psvm</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/b04c099b7f0015f617ee1efce204b916.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/e8cc33bcf3c8a81d002bd204e5a90b6d.png\" class=\"\">\n\n\n<p>【2】案例2：修饰属性的修饰符：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/0450041e947e4b790f5d4c0c8c4ec683.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/9f613bedeea2a0e7b0de3bb0a670044e.png\" class=\"\">\n\n\n<h2 id=\"常用的代码模板\"><a href=\"#常用的代码模板\" class=\"headerlink\" title=\"常用的代码模板\"></a>常用的代码模板</h2><p>【1】模板1： main方法：</p>\n<p>main 或者 psvm</p>\n<p>【2】模板2：输出语句：</p>\n<p>sout 或者 .sout</p>\n<p>一些变型：<br>soutp:打印方法的形参</p>\n<p>soutm:打印方法的名字</p>\n<p>soutv:打印变量</p>\n<p>【3】模板3： 循环</p>\n<p>普通for循环： fori（正向） 或者 .fori （正向） . forr(逆向)</p>\n<p>增强for循环： iter 或者 .for</p>\n<p>（可以用于数组的遍历，集合的遍历）</p>\n<p>【4】模板4： 条件判断</p>\n<p>ifn 或者 .null ：判断是否为null （if null）</p>\n<p>inn 或者 .nn ：判断不等于null (if not null)</p>\n<p>【5】模板5： 属性修饰符：</p>\n<p>prsf : private static final</p>\n<p>psf :public static final</p>\n<h2 id=\"自定义模板\"><a href=\"#自定义模板\" class=\"headerlink\" title=\"自定义模板\"></a>自定义模板</h2><p>【1】测试方法：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/eedbf8c570d40d09fcdba50c22849a53.png\" class=\"\">\n\n\n<p>【2】常用属性：($$中的内容其实就是在定义光标的位置，光标可以切换，用回车切换)</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/fd705090e45097098e2b7353d8a61be9.png\" class=\"\">\n\n\n<p>【3】方法注释模板：</p>\n<p>&#x2F;**</p>\n<p>* 功能描述:</p>\n<p>* @param: $param$</p>\n<p>* @return: $return$</p>\n<p>* @auther: $user$</p>\n<p>* @date: $date$ $time$</p>\n<p>*&#x2F;</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/0ea3381f82d736afa0bf29f5dd66627d.png\" class=\"\">\n\n\n<h1 id=\"IDEA中的断点调试\"><a href=\"#IDEA中的断点调试\" class=\"headerlink\" title=\"IDEA中的断点调试\"></a>IDEA中的断点调试</h1><h2 id=\"常用断点调试快捷键\"><a href=\"#常用断点调试快捷键\" class=\"headerlink\" title=\"常用断点调试快捷键\"></a>常用断点调试快捷键</h2><p>调试在开发中大量应用：</p>\n<p>【1】Debug的优化设置：更加节省内存空间：</p>\n<p>设置Debug连接方式，默认是Socket。 Shared memory是Windows 特有的一个属性，一般在Windows系统下建议使用此设置，</p>\n<p>内存占用相对较少。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/d698443a9071f2169d0927c70c319d27.png\" class=\"\">\n\n\n<p>【2】常用断点调试快捷键：</p>\n一步一步的向下运行代码，不会走入任何方法中。\n\n一步一步的向下运行代码，不会走入系统类库的方法中，但是会走入自定义的方法中。\n\n一步一步的向下运行代码，会走入系统类库的方法中，也会走入自定义的方法中。\n\n跳出方法\n\n结束程序\n\n进入到下一个断点，如果没有下一个断点了，就直接运行到程序结束。\n\n 在当前次取消未执行的断点。\n\n<h2 id=\"条件判断，查看表达式的值\"><a href=\"#条件判断，查看表达式的值\" class=\"headerlink\" title=\"条件判断，查看表达式的值\"></a>条件判断，查看表达式的值</h2><p>【1】条件判断：</p>\n<p>说明:</p>\n<p>调试的时候，在循环里增加条件判断，可以极大的提高效率，心情也能惧悦。</p>\n<p>具体操作:</p>\n<p>在断点处右击调出条件断点。可以在满足某个条件下，实施断点。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/a93800a6aeec05869df076e73dd0e2a5.png\" class=\"\">\n\n\n<p>【2】查看表达式的值：</p>\n<p>选择行，alt+f8。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/ddfa7ec0690cfd5ea999e455ca4ef922.png\" class=\"\">\n\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/",
            "title": "第9章_异常",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"习题的引入\"><a href=\"#习题的引入\" class=\"headerlink\" title=\"习题的引入\"></a>习题的引入</h1><p>【1】代码：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入第一个数：&quot;);\n        int num1 = sc.nextInt();\n        System.out.println(&quot;请录入第二个数：&quot;);\n        int num2 = sc.nextInt();\n        System.out.println(&quot;商：&quot;+num1/num2);\n\n    &#125;\n&#125;\n</code></pre>\n<p>运行结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/56f8af6619f13a967fd59a493803ae88.png\" class=\"\">\n\n\n<p>测试过程发现问题：</p>\n<p>录入的数据应为int类型，但是录入非int类型数据的时候，出异常：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/70fd21c0b8969ead54a12fe1afc5c8f6.png\" class=\"\">\n\n\n<p>除数为0的时候：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/6ac232ad5d4a32bdd682ee7df14a2a2a.png\" class=\"\">\n\n\n<p>异常：Exception：在程序的运行过程中，发生了不正常的现象，阻止了程序的运行，我们称之为发生异常。</p>\n<h1 id=\"通过if-else解决异常\"><a href=\"#通过if-else解决异常\" class=\"headerlink\" title=\"通过if-else解决异常\"></a>通过if-else解决异常</h1><pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入第一个数：&quot;);\n        if(sc.hasNextInt())&#123;\n            int num1 = sc.nextInt();\n            System.out.println(&quot;请录入第二个数：&quot;);\n            if(sc.hasNextInt())&#123;\n                int num2 = sc.nextInt();\n                if(num2 == 0)&#123;\n                    System.out.println(&quot;对不起，除数不能为0&quot;);\n                &#125;else&#123;\n                    System.out.println(&quot;商：&quot;+num1/num2);\n                &#125;\n            &#125;else&#123;\n                System.out.println(&quot;对不起，你录入的不是int类型的数据！&quot;);\n            &#125;\n        &#125;else&#123;\n            System.out.println(&quot;对不起，你录入的不是int类型的数据！&quot;);\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>用if-else堵漏洞的缺点：</p>\n<p>（1）代码臃肿，业务代码和处理异常的代码混在一起。</p>\n<p>（2）可读性差</p>\n<p>（3）程序员需要花费大量的经历来维护这个漏洞</p>\n<p>（4）程序员很难堵住所有的漏洞。</p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h1 id=\"try-catch\"><a href=\"#try-catch\" class=\"headerlink\" title=\"try-catch\"></a>try-catch</h1><p>【1】基于if-else处理异常缺点太多，所以java中专门出了一个异常处理机制：</p>\n<p>“异常三连” try-catch-finally</p>\n<p>【2】异常出现了以后怎么看：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/bb3e30a8d6384f5a856b898d56f6aae4.png\" class=\"\">\n\n\n<p>【3】捕获异常： try-catch</p>\n<p>对应代码：</p>\n<pre><code class=\"java\">public class Test2 &#123;\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        try&#123;\n            Scanner sc = new Scanner(System.in);\n            System.out.println(&quot;请录入第一个数：&quot;);\n            int num1 = sc.nextInt();\n            System.out.println(&quot;请录入第二个数：&quot;);\n            int num2 = sc.nextInt();\n            System.out.println(&quot;商：&quot;+num1/num2);\n        &#125;catch(Exception ex)&#123;\n            System.out.println(&quot;对不起，程序出现异常！&quot;);\n        &#125;\n\n        System.out.println(&quot;----谢谢你使用计算器111&quot;);\n        System.out.println(&quot;----谢谢你使用计算器222&quot;);\n        System.out.println(&quot;----谢谢你使用计算器333&quot;);\n        System.out.println(&quot;----谢谢你使用计算器444&quot;);\n        System.out.println(&quot;----谢谢你使用计算器555&quot;);\n        System.out.println(&quot;----谢谢你使用计算器666&quot;);\n    &#125;\n&#125;\n</code></pre>\n<p>原理：</p>\n<p>把可能出现异常的代码放入try代码块中，然后将异常封装为对象，被catch后面的()中的那个异常对象接收，接收以后：执行catch后面的{}里面的代码，然后try-catch后面的代码，该怎么执行就怎么执行。</p>\n<p>详细说一下：</p>\n<p>（1）try中没有异常，catch中代码不执行。</p>\n<p>（2）try中有异常，catch进行捕获：</p>\n<p>如果catch中异常类型和你出的异常类型匹配的话：走catch中的代码–》进行捕获</p>\n<p>如果catch中异常类型和你出的异常类型不匹配的话：不走catch中的代码–》没有捕获成功，程序相当于遇到异常了，中断了，后续代码不执行</p>\n<p>注意：</p>\n<p>（1）try中如果出现异常，然后用catch捕获成功的话，那么try中后续的代码是不会执行的。</p>\n<p>（2）如果catch捕获异常成功，那么try-catch后面的代码该执行还是执行没有影响。</p>\n<h1 id=\"catch中如何处理异常\"><a href=\"#catch中如何处理异常\" class=\"headerlink\" title=\"catch中如何处理异常\"></a>catch中如何处理异常</h1><pre><code class=\"java\">public class Test3 &#123;\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        try&#123;\n            Scanner sc = new Scanner(System.in);\n            System.out.println(&quot;请录入第一个数：&quot;);\n            int num1 = sc.nextInt();\n            System.out.println(&quot;请录入第二个数：&quot;);\n            int num2 = sc.nextInt();\n            System.out.println(&quot;商：&quot;+num1/num2);\n        &#125;catch(Exception ex)&#123;\n            //第一种处理：什么都不写，什么都不做\n\n            //第二种处理：输出自定义异常信息\n            //System.out.println(&quot;对不起，你的代码有问题！&quot;);\n\n            //第三种处理：打印异常信息：\n            /\\*(1)调用toString方法，显示异常的类名（全限定路径）\\*/\n                /\\*System.out.println(ex);\n            System.out.println(ex.toString());\\*/\n                /\\*(2)显示异常描述信息对应的字符串，如果没有就显示null\n                System.out.println(ex.getMessage());\\*/\n                /\\*(3)显示异常的堆栈信息：将异常信息捕获以后，在控制台将异常的效果给我们展示出来，方便我们查看异常\\*/\n                /\\* ex.printStackTrace();\\*/\n\n                //第四种处理：抛出异常：\n                throw ex;\n        &#125;\n\n        System.out.println(&quot;----谢谢你使用计算器111&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" class=\"headerlink\" title=\"try-catch-finally\"></a>try-catch-finally</h1><p><strong>【1】在什么情况下，try-catch后面的代码不执行？</strong></p>\n<p>（1）throw抛出异常的情况</p>\n<p>（2）catch中没有正常的进行异常捕获</p>\n<p>（3）在try中遇到return</p>\n<p><strong>【2】怎么样才可以将 try-catch后面的代码 必须执行？</strong></p>\n<p>只要将必须执行的代码放入finally中，那么这个代码无论如何一定执行。</p>\n<p><strong>【3】return和finally执行顺序？</strong></p>\n<p>先执行finally最后执行return</p>\n<p><strong>【4】什么代码会放在finally中呢？</strong></p>\n<p>关闭数据库资源，关闭IO流资源，关闭socket资源。</p>\n<p><strong>【5】有一句话代码很厉害，它可以让finally中代码不执行!</strong></p>\n<p><span class=\"exturl\" data-url=\"ZmlsZTovLy9EOlzkuIvovb1cU3lzdGVtLmV4aXQoMCk7XOe7iOatouW9k+WJjeeahOiZmuaLn+acuuaJp+ihjA==\">System.exit(0);&#x2F;&#x2F;终止当前的虚拟机执行</span></p>\n<p>代码：</p>\n<pre><code class=\"java\">import java.util.Scanner;\n\npublic class Test3 &#123;\n    public static void main(String[] args) &#123;\n        //实现一个功能：键盘录入两个数，求商：\n        try&#123;\n            Scanner sc = new Scanner(System.in);\n            System.out.println(&quot;请录入第一个数：&quot;);\n            int num1 = sc.nextInt();\n            System.out.println(&quot;请录入第二个数：&quot;);\n            int num2 = sc.nextInt();\n            System.out.println(&quot;商：&quot;+num1/num2);\n            System.exit(0);//终止当前的虚拟机执行\n            return;\n        &#125;catch(ArithmeticException ex)&#123;\n            //throw ex;\n        &#125;finally &#123;\n            System.out.println(&quot;----谢谢你使用计算器111&quot;);\n        &#125;\n\n\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"多重catch\"><a href=\"#多重catch\" class=\"headerlink\" title=\"多重catch\"></a>多重catch</h1><p>【1】try中出现异常以后，将异常类型跟catch后面的类型依次比较，按照代码的顺序进行比对，执行第一个与异常类型匹配的catch语句</p>\n<p>【2】一旦执行其中一条catch语句之后，后面的catch语句就会被忽略了！</p>\n<p>【3】在安排catch语句的顺序的时候，一般会将特殊异常放在前面（并列），一般化的异常放在后面。</p>\n<p>先写子类异常，再写父类异常。</p>\n<p>【4】在JDK1.7以后，异常新处理方式：可以并列用|符号连接：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/fed2c319de1a9a8d184482f4c55ef6e4.png\" class=\"\">\n\n\n<pre><code class=\"java\">import java.util.InputMismatchException;\nimport java.util.Scanner;\n\npublic class Test4 &#123;\n    public static void main(String[] args) &#123;\n        Integer\n            //实现一个功能：键盘录入两个数，求商：\n            try&#123;\n                Scanner sc = new Scanner(System.in);\n                System.out.println(&quot;请录入第一个数：&quot;);\n                int num1 = sc.nextInt();\n                System.out.println(&quot;请录入第二个数：&quot;);\n                int num2 = sc.nextInt();\n                System.out.println(&quot;商：&quot;+num1/num2);\n            &#125;catch(ArithmeticException ex)&#123;\n                System.out.println(&quot;对不起，除数不可以为0&quot;);\n            &#125;catch(InputMismatchException ex)&#123;\n                System.out.println(&quot;对不起，你录入的数据不是int类型的数据&quot;);\n            &#125;catch(Exception ex)&#123;\n                System.out.println(&quot;对不起，你的程序出现异常&quot;);\n            &#125;finally &#123;\n                System.out.println(&quot;----谢谢你使用计算器111&quot;);\n            &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"异常的分类\"><a href=\"#异常的分类\" class=\"headerlink\" title=\"异常的分类\"></a>异常的分类</h1><p>【1】层次结构：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/49c007ec5d133e1d0e68827b9cf4b03e.png\" class=\"\">\n\n\n<p>注意：程序中语法错误，逻辑错误 都不属于上面的Error，Exception</p>\n<p>【2】运行时异常：</p>\n<pre><code class=\"java\">public class Test5 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //运行时异常：\n        int[] arr = &#123;1,2,3&#125;;\n        System.out.println(arr.length);\n        /\\*int[] arr2 = null;\n        System.out.println(arr2.length);\\*/\n            System.out.println(arr[10]);\n    &#125;\n&#125;\n</code></pre>\n<p>【3】检查异常：</p>\n<p>处理方式1：try-catch嵌套try-catch</p>\n<pre><code class=\"java\">public class Test6 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //检查异常：\n        try &#123;\n            try &#123;\n                Class.forName(&quot;com.msb.test01.Test&quot;).newInstance();\n            &#125; catch (InstantiationException e) &#123;\n                e.printStackTrace();\n            &#125; catch (IllegalAccessException e) &#123;\n                e.printStackTrace();\n            &#125;\n        &#125; catch (ClassNotFoundException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>处理方式2：多重catch</p>\n<pre><code class=\"java\">public class Test6 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //检查异常：\n        try &#123;\n            Class.forName(&quot;com.msb.test01.Test&quot;).newInstance();\n        &#125; catch (ClassNotFoundException \\| InstantiationException \\| IllegalAccessException e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>处理方式3：throws</p>\n<pre><code class=\"java\">public class Test6 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException &#123;\n        //检查异常：\n        Class.forName(&quot;com.msb.test01.Test&quot;).newInstance();\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"throw和throws的区别\"><a href=\"#throw和throws的区别\" class=\"headerlink\" title=\"throw和throws的区别\"></a>throw和throws的区别</h1><pre><code class=\"java\">import java.util.Scanner;\n\npublic class Test7 &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) throws Exception &#123;\n        //实现一个功能：两个数相除，当除数为0的时候，程序出现异常。\n        /\\*try &#123;\n            devide();\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\\*/\n            devide();\n    &#125;\n    public static void devide() throws Exception &#123;\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入第一个数：&quot;);\n        int num1 = sc.nextInt();\n        System.out.println(&quot;请录入第二个数：&quot;);\n        int num2 = sc.nextInt();\n        if(num2 == 0 )&#123;//除数为0 ，制造异常。\n            //制造运行时异常：\n            /\\*throw new RuntimeException();\\*/\n                //制造检查异常：\n                /\\*try &#123;\n                    throw new Exception();\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\\*/\n                    throw new Exception();\n        &#125;else&#123;\n            System.out.println(&quot;商：&quot;+num1/num2);\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p>总结：</p>\n<p>throw和throws的区别：</p>\n<p>（1）位置不同：</p>\n<p>throw：方法内部</p>\n<p>throws: 方法的签名处，方法的声明处</p>\n<p>（2）内容不同：</p>\n<p>throw+异常对象（检查异常，运行时异常）</p>\n<p>throws+异常的类型（可以多个类型，用，拼接）</p>\n<p>（3）作用不同：</p>\n<p>throw：异常出现的源头，制造异常。</p>\n<p>throws:在方法的声明处，告诉方法的调用者，这个方法中可能会出现我声明的这些异常。然后调用者对这个异常进行处理：</p>\n<p>要么自己处理要么再继续向外抛出异常</p>\n<h2 id=\"练习：\"><a href=\"#练习：\" class=\"headerlink\" title=\"练习：\"></a>练习：</h2><pre><code class=\"java\">\npublic class Student &#123;\n    private String name;\n    private int age;\n    private String sex;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public String getSex() &#123;\n        return sex;\n    &#125;\n\n    public void setSex(String sex) throws Exception &#123;\n        if(sex.equals(&quot;男&quot;)\\|\\|sex.equals(&quot;女&quot;))&#123;\n            this.sex = sex;\n        &#125;else&#123;//非男非女\n            //解决办法1：\n            /\\*this.sex = &quot;男&quot;;\\*/\n                //解决办法2：给个友好型提示，但是打印结果为默认的null效果\n                /\\*System.out.println(&quot;对不起，你的性别错误了&quot;);\\*/\n                //解决办法3：\n                //制造运行时异常：\n                /\\*throw new RuntimeException(&quot;性别不对！&quot;);\\*/\n                //制造检查异常\n                /\\*try &#123;\n                    throw new Exception();\n                &#125; catch (Exception e) &#123;\n                    e.printStackTrace();\n                &#125;\\*/\n                    throw new Exception();\n        &#125;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n            &quot;name=&#39;&quot; + name + &#39;\\\\&#39;&#39; +\n            &quot;, age=&quot; + age +\n            &quot;, sex=&#39;&quot; + sex + &#39;\\\\&#39;&#39; +\n            &#39;&#125;&#39;;\n    &#125;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(String name, int age, String sex) &#123;\n        this.name = name;\n        this.age = age;\n        //this.sex = sex;\n        try &#123;\n            this.setSex(sex);\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\n    &#125;\n&#125;\n\n\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Student的对象：\n        /\\*Student s = new Student();\n        s.setName(&quot;菲菲&quot;);\n        s.setAge(19);\n        try &#123;\n            s.setSex(&quot;asdfasdfasdf&quot;);\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n        &#125;\n        System.out.println(s);\\*/\n\n            Student s2 = new Student(&quot;娜娜&quot;,21,&quot;asdfasdfasdf&quot;);\n        System.out.println(s2);\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"重载和重写的异常\"><a href=\"#重载和重写的异常\" class=\"headerlink\" title=\"重载和重写的异常\"></a>重载和重写的异常</h1><img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/cf74eead97b51814e21b234c60586c9a.png\" class=\"\">\n\n\n<p>【1】重载：</p>\n<pre><code class=\"java\">public class Demo &#123;\n    public void a() throws Exception&#123;\n\n    &#125;\n    public void a(int age) throws ArithmeticException&#123;\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>【2】重写：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/0ee7a011f038160bdfaa00237577e0c1.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/3243038ec840d0d3cc6dc909e039f3df.png\" class=\"\">\n\n\n<p>子类 &lt;&#x3D; 父类</p>\n<h1 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h1><p>自定义的异常可以继承：运行时异常</p>\n<pre><code class=\"java\">public class MyException extends RuntimeException &#123;\n\n    static final long serialVersionUID = -70348971907L;\n\n    public MyException()&#123;\n\n    &#125;\n    public MyException(String msg)&#123;\n        super(msg);\n    &#125;\n&#125;\n</code></pre>\n<p>也可以继承检查异常：</p>\n<pre><code class=\"java\">public class MyException extends Exception &#123;\n\n    static final long serialVersionUID = -70348971907L;\n\n    public MyException()&#123;\n\n    &#125;\n    public MyException(String msg)&#123;\n        super(msg);\n    &#125;\n&#125;\n\n</code></pre>\n<p>如果继承的是运行时异常，那么在使用的时候无需额外处理</p>\n<p>如果继承的是检查异常，那么使用的时候需要try-catch捕获或者throws向上抛</p>\n",
            "tags": [
                "JavaSE"
            ]
        },
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "第8章_面向对象",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"面向过程和面向对象的区别\"><a href=\"#面向过程和面向对象的区别\" class=\"headerlink\" title=\"面向过程和面向对象的区别\"></a>面向过程和面向对象的区别</h1><p>面向过程：当事件比较简单的时候，利用面向过程，注重的是事件的具体的步骤&#x2F;过程，注重的是过程中的具体的行为，以函数为最小单位，考虑怎么做。</p>\n<p>面向对象：注重找“参与者”,将功能封装进对象，强调具备了功能的对象，以类&#x2F;对象为最小单位，考虑谁来做。</p>\n<p>案例：</p>\n<p>人把大象装进冰箱：</p>\n<p>面向过程：</p>\n<p>函数1：打开冰箱(){人站在冰箱前，打开冰箱，冰箱卡到30度角的时候，冰箱的灯打开了………}</p>\n<p>函数2：储存大象(){大象先迈左腿，再迈右退，考虑冰箱能不能装下……}</p>\n<p>函数3：关闭冰箱(){人站在冰箱前，关闭冰箱，冰箱开到30度角的时候，冰箱的灯关闭了……….}</p>\n<p>面向对象：</p>\n<p>人{</p>\n<p>打开(冰箱){</p>\n<p>冰箱.打开();</p>\n<p>}</p>\n<p>存储(大象){</p>\n<p>大象.进入();</p>\n<p>}</p>\n<p>关闭(冰箱){</p>\n<p>冰箱.关闭();</p>\n<p>}</p>\n<p>}</p>\n<p>冰箱{</p>\n<p>打开（）{ 1.2.3.}</p>\n<p>关闭（）{}</p>\n<p>}</p>\n<p>柜子{</p>\n<p>}</p>\n<p>大象{</p>\n<p>进入(冰箱){</p>\n<p>}</p>\n<p>}</p>\n<p>面向过程 —&gt; 面向对象 , 其实就是由执行者 —&gt; 指挥者的 一个过渡</p>\n<p>面向过程：编年体<br>面向对象：纪传体</p>\n<p>二者相辅相成,并不是对立的。解决复杂问题,通过面向对象方式便于我们从宏观上把握事物之间复杂的关系、方便我们分析整个系统;具体到微观操作,仍然使用面向过程方式来处理</p>\n<h1 id=\"类和对象的关系\"><a href=\"#类和对象的关系\" class=\"headerlink\" title=\"类和对象的关系\"></a>类和对象的关系</h1><p>【1】万事万物皆对象</p>\n<p>【2】</p>\n<p>对象：具体的事物，具体的实体，具体的实例，模板下具体的产品</p>\n<p>类：对对象向上抽取出像的部分，公共的部分，形成类，类是抽象的，是一个模板</p>\n<p>【3】一般在写代码的时候先写类，然后在根据类创建对应的对象。</p>\n<h1 id=\"面向对象三个阶段\"><a href=\"#面向对象三个阶段\" class=\"headerlink\" title=\"面向对象三个阶段\"></a>面向对象三个阶段</h1><p>面向对象三个阶段：</p>\n<p>【1】面向对象分析OOA – Object Oriented Analysis</p>\n<p>对象：张三，王五，朱六，你，我</p>\n<p>抽取出一个类—-》人类</p>\n<p>类里面有什么：</p>\n<p>动词–》动态特性–》方法</p>\n<p>名词–》静态特性–》属性</p>\n<p>【2】面向对象设计OOD – Object Oriented Design</p>\n<p>先有类，再有对象：</p>\n<p>类：人类： Person</p>\n<p>对象：zhangsan ，lisi，zhuliu</p>\n<p>【3】面向对象编程OOP – Object Oriented Programming</p>\n<p>创建类：</p>\n<p>（1）属性（field 成员变量）</p>\n<p>属性用于定义该类或该类对象包含的数据或者说静态特征。属性作用范围是整个类体。</p>\n<p>属性定义格式：</p>\n<table>\n<thead>\n<tr>\n<th>[修饰符] 方法返回值类型 方法名(形参列表) {   &#x2F;&#x2F; n条语句  }</th>\n</tr>\n</thead>\n</table>\n<p>（2）方法</p>\n<p>方法用于定义该类或该类实例的行为特征和功能实现。方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。</p>\n<p>方法定义格式：</p>\n<table>\n<thead>\n<tr>\n<th>[修饰符] 方法返回值类型 方法名(形参列表) {   &#x2F;&#x2F; n条语句  }</th>\n</tr>\n</thead>\n</table>\n<p>void代表没有返回值；方法的作用：重用代码，封装功能，便于修改</p>\n<p>代码：</p>\n<ol>\n<li></li>\n</ol>\n<pre><code class=\"java\">package com.msb;\n\npublic class Person &#123;\n    //名词---》属性---》成员变量---》放在类中方法外（注意：我们只把有需要的内容写到代码里，不相关的东西不要放在代码中）\n    int age ;//年龄\n    String name;//姓名\n    double height;//身高\n    double weight;//体重\n\n    //动词---》方法\n    //吃饭\n    public void eat()&#123;\n        int num = 10;//局部变量：放在方法中\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\n    //睡觉：\n    public void sleep(String address)&#123;\n        System.out.println(&quot;我在&quot;+address+&quot;睡觉&quot;);\n    &#125;\n    //自我介绍：\n    public String introduce()&#123;\n        return &quot;我的名字是：&quot;+name+&quot;，我的年龄是：&quot;+age+&quot;,我的身高是：&quot;+height+&quot;,我的体重是：&quot;+weight;\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h1><ol>\n<li></li>\n</ol>\n<pre><code class=\"java\">package com.msb;\n\npublic class Test &#123;//测试类\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个人类的具体的对象/实例：\n        //创建一个对象，对象的名字叫：zs\n        //Person 属于 引用数据类型\n        //第一次加载类的时候，会进行类的加载，初始化创建对象的时候，对象的属性没有给赋值，有默认的初始化的值。\n        Person zs = new Person();\n        zs.name = &quot;张三&quot;;\n        zs.age = 19;\n        zs.height = 180.4;\n        zs.weight = 170.4;\n\n        //再创建一个对象：\n        //再次创建类的时候，就不会进行类的加载了，类的加载只在第一次需要的时候加载一次\n        Person ls = new Person();\n        ls.name = &quot;李四&quot;;\n        ls.age = 18;\n        ls.height = 170.6;\n        ls.weight = 160.5;\n\n        //对属性值进行读取：\n        System.out.println(zs.name);\n        System.out.println(ls.age);\n\n        //对方法进行操作：\n        //不同的对象，属性有自己的特有的值，但是方法都是调用类中通用的方法。\n        //属性：各个对象的属性是独立的，\n        //方法：各个对象的方法是共享的。\n        zs.eat();\n        ls.eat();\n        zs.sleep(&quot;教室&quot;);\n        /\\*String str = zs.introduce();\n        System.out.println(str);\\*/\n            System.out.println(zs.introduce());\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"局部变量和成员变量的区别\"><a href=\"#局部变量和成员变量的区别\" class=\"headerlink\" title=\"局部变量和成员变量的区别\"></a>局部变量和成员变量的区别</h1><p><strong>区别1：</strong>代码中位置不同</p>\n<p>成员变量：类中方法外定义的变量</p>\n<p>局部变量：方法中定义的变量 代码块中定义的变量</p>\n<p><strong>区别2：</strong>代码的作用范围</p>\n<p>成员变量：当前类的很多方法</p>\n<p>局部变量：当前一个方法（当前代码块）</p>\n<p><strong>区别3：</strong>是否有默认值</p>\n<p>成员变量：有</p>\n<p>局部变量：没有</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/fa7d1bf775d1f357c4dec5d94d02d2f2.png\" class=\"\">\n\n\n<p>引用数据类型： null</p>\n<p><strong>区别4：</strong>是否要初始化</p>\n<p>成员变量：不需要，不建议初始化，后续使用的时候再赋值即可</p>\n<p>局部变量：一定需要，不然直接使用的时候报错</p>\n<p><strong>区别5</strong>：内存中位置不同</p>\n<p>成员变量：堆内存</p>\n<p>局部变量：栈内存</p>\n<p><strong>区别6：</strong>作用时间不同</p>\n<p>成员变量：当前对象从创建到销毁</p>\n<p>局部变量：当前方法从开始执行到执行完毕</p>\n<p>代码：</p>\n<ol>\n<li>package com.msb;</li>\n<li></li>\n<li>&#x2F;**</li>\n<li>* @Auther: msb-zhaoss</li>\n<li>*&#x2F;</li>\n</ol>\n<pre><code class=\"java\">public class Student &#123;\n    byte e;\n    short s;\n    int c ;//成员变量：在类中方法外\n    long num2;\n    float f ;\n    double d;\n    char ch;\n    boolean bo;\n    String name;\n    public void study()&#123;\n        int num = 10 ; //局部变量：在方法中\n        System.out.println(num);//10\n        //int num ;重复命名，出错了\n        &#123;\n            int a;//局部变量：在代码块中\n        &#125;\n        int a;\n        if(1==3)&#123;\n            int b;\n        &#125;\n        System.out.println(c);\n    &#125;\n    public void eat()&#123;\n        System.out.println(c);\n    &#125;\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Student s = new Student();\n        System.out.println(s.c);\n        System.out.println(s.bo);\n        System.out.println(s.ch);\n        System.out.println(s.d);\n        System.out.println(s.e);\n        System.out.println(s.f);\n        System.out.println(s.name);\n        System.out.println(s.num2);\n        System.out.println(s.s);\n\n        s.d = 10.4;\n    &#125;\n&#125;\n\n</code></pre>\n<p>运行结果：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/92101fdba0ac0fe94fbe9079ab09ab40.png\" class=\"\">\n\n\n<h1 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h1><pre><code class=\"java\">public class Person &#123;\n    //构造器：没有任何参数的构造器我们叫做：空参构造器--》空构造器\n    public Person()&#123;\n        /\\*age = 19;\n        name = &quot;lili&quot;;\n        height = 169.5;\\*/\n    &#125;\n    //属性：\n    String name;\n    int age;\n    double height;\n    //方法：\n    public void eat()&#123;\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\n&#125;\n\npackage com.msb2;\n\n/\\*\\*\n    \\* @Auther: msb-zhaoss\n        \\*/\n        public class Test &#123;\n            //这是一个main方法，是程序的入口：\n            public static void main(String[] args) &#123;\n                //创建一个Person类的具体的对象/实例/实体：\n                /\\*\n                    创建对象的过程：\n                    1.第一次遇到Person的时候，进行类的加载（只加载一次）\n                    2.创建对象，为这个对象在堆中开辟空间\n                    3.为对象进行属性的初始化动作\n\n                    new关键字实际上是在调用一个方法，这个方法叫构造方法（构造器）\n                    调用构造器的时候，如果你的类中没有写构造器，那么系统会默认给你分配一个构造器，只是我们看不到罢了。\n                    可以自己显式 的将构造器编写出来：\n                    构造器的格式：\n                    [修饰符] 构造器的名字()&#123;\n\n                &#125;\n                构造器和方法的区别：\n                    1.没有方法的返回值类型\n                    2.方法体内部不能有return语句\n                    3.构造器的名字很特殊，必须跟类名一样\n\n                    构造器的作用：不是为了创建对象，因为在调用构造器之前，这个对象就已经创建好了，并且属性有默认的初始化的值。\n                    调用构造器的目的是给属性进行赋值操作的。\n\n                    注意：我们一般不会在空构造器中进行初始化操作，因为那样的话每个对象的属性就一样了。\n                    实际上，我们只要保证空构造器的存在就可以了，里面的东西不用写\n                    \\*/\n                    Person p = new Person();\n                System.out.println(p.age);\n                System.out.println(p.name);\n                System.out.println(p.height);\n\n                Person p2 = new Person();\n                System.out.println(p2.age);\n                System.out.println(p2.name);\n                System.out.println(p2.height);\n            &#125;\n        &#125;\n\n</code></pre>\n<h1 id=\"构造器的重载\"><a href=\"#构造器的重载\" class=\"headerlink\" title=\"构造器的重载\"></a>构造器的重载</h1><pre><code class=\"java\">public class Person &#123;\n\n    //属性：\n    String name;\n    int age;\n    double height;\n\n    //空构造器\n    public Person()&#123;\n\n    &#125;\n    public Person(String name,int age,double height)&#123;\n        //当形参名字和属性名字重名的时候，会出现就近原则：\n        //在要表示对象的属性前加上this.来修饰 ，因为this代表的就是你创建的那个对象\n        this.name = name;\n        this.age = age;\n        this.height = height;\n    &#125;\n    public Person(String a,int b)&#123;\n        name = a;\n        age = b;\n    &#125;\n\n    //方法：\n    public void eat()&#123;\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\n&#125;\npackage com.msb3.msb2;\n\n/\\*\\*\n    \\* @Auther: msb-zhaoss\n        \\*/\n        public class Test &#123;\n            //这是一个main方法，是程序的入口：\n            public static void main(String[] args) &#123;\n                /\\*\n                    1.一般保证空构造器的存在，空构造器中一般不会进行属性的赋值操作\n                    2.一般我们会重载构造器，在重载的构造器中进行属性赋值操作\n                    3.在重载构造器以后，假如空构造器忘写了，系统也不会给你分配默认的空构造器了，那么你要调用的话就会出错了。\n                    4\\. 当形参名字和属性名字重名的时候，会出现就近原则：\n                    在要表示对象的属性前加上this.来修饰 ，因为this代表的就是你创建的那个对象\n\n                    \\*/\n\n                    Person p = new Person();\n                /\\*p.age = 19;\n                p.name = &quot;lili&quot;;\n                p.height = 180.4;\\*/\n\n                    Person p2 = new Person(&quot;lili&quot;,19,180.4);\n                System.out.println(p2.age);\n                System.out.println(p2.height);\n                System.out.println(p2.name);\n\n            &#125;\n        &#125;\n</code></pre>\n<h1 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h1><h2 id=\"代码1\"><a href=\"#代码1\" class=\"headerlink\" title=\"代码1\"></a>代码1</h2><table>\n<thead>\n<tr>\n<th>public class Person {   int id;   int age;    public static void main(String args[]){   Person p1&#x3D; new Person();   }  }</th>\n</tr>\n</thead>\n</table>\n<p>内存分析：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/79c1914e1e30446244e44849e42197d1.png\" class=\"\">\n\n\n<h2 id=\"代码2\"><a href=\"#代码2\" class=\"headerlink\" title=\"代码2\"></a>代码2</h2><pre><code class=\"java\">public class Person &#123;\n    int id;\n    int age;\n    String school;\n    public Person (int a,int b,String c)&#123;\n        id=a;\n        age=b;\n        school=c;\n    &#125;\n    public static void main(String args[])&#123;\n        Person p= new Person(1,20, &quot;海淀&quot;);\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c1037dadb36bf06b082ec248a4d08482.png\" class=\"\">\n\n\n<h2 id=\"代码3\"><a href=\"#代码3\" class=\"headerlink\" title=\"代码3\"></a>代码3</h2><table>\n<thead>\n<tr>\n<th>class Person{   int id;   int age;   String school;   Person (int a,int b,String c){   id&#x3D;a;   age&#x3D;b;   school&#x3D;c;   }    public void setAge(int a){   age&#x3D;a;   }  }</th>\n</tr>\n</thead>\n</table>\n<pre><code class=\"java\">\n</code></pre>\n<p>|————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————–|</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/886999b72f2ada92abc161d2ab8e4df0.png\" class=\"\">\n\n\n<p>this</p>\n<p>【1】创建对象的过程：</p>\n<p>（1）在第一次遇到一个类的时候，对这个类要进行加载，只加载一次。</p>\n<p>（2）创建对象，在堆中开辟空间</p>\n<p>（3）对对象进行初始化操作，属性赋值都是默认的初始值。</p>\n<p>（4）new关键字调用构造器，执行构造方法，在构造器中对属性重新进行赋值</p>\n<p>this:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e59335fd9cf3566613aab1164ac0711b.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5b8476d675f8c1b9000590c4031a7005.png\" class=\"\">\n\n\n<p>从上面的效果能够看到：this指代的就是当前对象：</p>\n<p>内存：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4eda9c8a53fa801bd70b6fe32f281919.png\" class=\"\">\n\n\n<p>this关键字 用法：</p>\n<p>（1）this可以修饰属性：</p>\n<p>总结：当属性名字和形参发生重名的时候，或者 属性名字 和局部变量重名的时候，都会发生就近原则，所以如果我要是直接使用变量名字的话就指的是离的近的那个形参或者局部变量，这时候如果我想要表示属性的话，在前面要加上：this.修饰</p>\n<p>如果不发生重名问题的话，实际上你要是访问属性也可以省略this.</p>\n<pre><code class=\"java\">public class Person &#123;\n    //属性\n    int age;\n    String name;\n    double height;\n    //空构造器\n    public Person()&#123;\n\n    &#125;\n    //有参构造器\n    public Person(int age,String name,double height)&#123;\n        this.age = age;\n        this.name = name;\n        this.height = height;\n    &#125;\n    //方法：\n    public void eat()&#123;\n        int age = 10;\n        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age\n        System.out.println(this.age);//这里指代的就是属性的age\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<p>（2）this修饰方法：</p>\n<p>总结：在同一个类中，方法可以互相调用，this.可以省略不写。</p>\n<pre><code class=\"java\">public class Person &#123;\n    //属性\n    int age;\n    String name;\n    double height;\n    //空构造器\n    public Person()&#123;\n\n    &#125;\n    //有参构造器\n    public Person(int age,String name,double height)&#123;\n        this.age = age;\n        this.name = name;\n        this.height = height;\n    &#125;\n    //方法：\n    /\\*public void eat()&#123;\n        int age = 10;\n        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age\n        System.out.println(this.age);//这里指代的就是属性的age\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\\*/\n\n        public void play()&#123;\n        /\\*this.\\*/eat();\n        System.out.println(&quot;上网&quot;);\n        System.out.println(&quot;洗澡&quot;);\n    &#125;\n\n    public void eat()&#123;\n        System.out.println(/\\*this.\\*/age);\n        System.out.println(&quot;吃饭&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<p>（3）this可以修饰构造器：</p>\n<p>总结：同一个类中的构造器可以相互用this调用，注意：this修饰构造器必须放在第一行</p>\n<pre><code class=\"java\">public class Person &#123;\n    //属性\n    int age;\n    String name;\n    double height;\n    //空构造器\n    public Person()&#123;\n\n    &#125;\n    //有参构造器\n    public Person(int age,String name,double height)&#123;\n        this(age,name);\n        this.height = height;\n\n    &#125;\n    public Person(int age,String name)&#123;\n        this(age);\n        this.name = name;\n    &#125;\n    public Person(int age)&#123;\n        this.age = age;\n    &#125;\n    //方法：\n    /\\*public void eat()&#123;\n        int age = 10;\n        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age\n        System.out.println(this.age);//这里指代的就是属性的age\n        System.out.println(&quot;我喜欢吃饭&quot;);\n    &#125;\\*/\n\n        public void play()&#123;\n        /\\*this.\\*/eat();\n        System.out.println(&quot;上网&quot;);\n        System.out.println(&quot;洗澡&quot;);\n    &#125;\n\n    public void eat()&#123;\n        System.out.println(/\\*this.\\*/age);\n        System.out.println(&quot;吃饭&quot;);\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static\"></a>static</h1><p>【1】static可以修饰：属性，方法，代码块，内部类。</p>\n<p>【2】static修饰属性；</p>\n<pre><code class=\"java\">public class Test &#123;\n    //属性：\n    int id;\n    static int sid;\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Test类的具体的对象\n        Test t1 = new Test();\n        t1.id = 10;\n        t1.sid = 10;\n\n        Test t2 = new Test();\n        t2.id = 20;\n        t2.sid = 20;\n\n        Test t3 = new Test();\n        t3.id = 30;\n        t3.sid = 30;\n\n        //读取属性的值：\n        System.out.println(t1.id);\n        System.out.println(t2.id);\n        System.out.println(t3.id);\n\n        System.out.println(t1.sid);\n        System.out.println(t2.sid);\n        System.out.println(t3.sid);\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>内存分析：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/86494081f26104991702618717098030.png\" class=\"\">\n\n\n<p>一般官方的推荐访问方式：可以通过类名.属性名的方式去访问：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/300391675e1efe8df337d8171c8bb6d7.png\" class=\"\">\n\n\n<p>static修饰属性总结：</p>\n<p>（1）在类加载的时候一起加载入方法区中的静态域中</p>\n<p>（2）先于对象存在</p>\n<p>（3）访问方式： 对象名.属性名 类名.属性名（推荐）</p>\n<p>static修饰属性的应用场景：某些特定的数据想要在内存中共享，只有一块 –》这个情况下，就可以用static修饰的属性</p>\n<pre><code class=\"java\">public class MsbStudent &#123;\n    //属性：\n    String name;\n    int age;\n    static String school;\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        MsbStudent.school = &quot;马士兵教育&quot;;\n        //创建学生对象：\n        MsbStudent s1 = new MsbStudent();\n        s1.name = &quot;张三&quot;;\n        s1.age = 19;\n        //s1.school = &quot;马士兵教育&quot;;\n\n        MsbStudent s2 = new MsbStudent();\n        s2.name = &quot;李四&quot;;\n        s2.age = 21;\n        //s2.school = &quot;马士兵教育&quot;;\n\n        System.out.println(s2.school);\n\n\n\n\n    &#125;\n\n&#125;\n\n</code></pre>\n<p>属性：</p>\n<p>静态属性 （类变量）</p>\n<p>非静态属性（实例变量）</p>\n<p>【3】static修饰方法；</p>\n<pre><code class=\"java\">public class Demo &#123;\n    int id;\n    static int sid;\n\n    public void a()&#123;\n        System.out.println(id);\n        System.out.println(sid);\n        System.out.println(&quot;------a&quot;);\n    &#125;\n    //1.static和public都是修饰符，并列的没有先后顺序，先写谁后写谁都行\n    static public void b()&#123;\n        //System.out.println(this.id);//4.在静态方法中不能使用this关键字\n        //a();//3.在静态方法中不能访问非静态的方法\n        //System.out.println(id);//2.在静态方法中不能访问非静态的属性\n        System.out.println(sid);\n        System.out.println(&quot;------b&quot;);\n    &#125;\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //5.非静态的方法可以用对象名.方法名去调用\n        Demo d = new Demo();\n        d.a();\n        //6.静态的方法可以用 对象名.方法名去调用 也可以 用 类名.方法名 （推荐）\n        Demo.b();\n        d.b();\n        &#123;% asset_img 4bb83b402c7aad5b29b09c46fe3a60b9.png  %&#125;\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h1><p>【1】类的组成：属性，方法，构造器，代码块，内部类</p>\n<p>【2】代码块分类：普通块，构造块，静态块，同步块（多线程）</p>\n<p>【3】代码：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //属性\n    int a;\n    static int sa;\n\n    //方法\n    public void a()&#123;\n        System.out.println(&quot;-----a&quot;);\n        &#123;\n            //普通块限制了局部变量的作用范围\n            System.out.println(&quot;这是普通块&quot;);\n            System.out.println(&quot;----000000&quot;);\n            int num = 10;\n            System.out.println(num);\n        &#125;\n        //System.out.println(num);\n        //if()&#123;&#125;\n        //while()&#123;&#125;\n    &#125;\n    public static void b()&#123;\n        System.out.println(&quot;------b&quot;);\n    &#125;\n\n    //构造块\n    &#123;\n        System.out.println(&quot;------这是构造块&quot;);\n    &#125;\n    //静态块\n    static&#123;\n        System.out.println(&quot;-----这是静态块&quot;);\n        //在静态块中只能方法：静态属性，静态方法\n        System.out.println(sa);\n        b();\n    &#125;\n\n\n    //构造器\n    public Test()&#123;\n        System.out.println(&quot;这是空构造器&quot;);\n    &#125;\n    public Test(int a)&#123;\n        this.a = a;\n    &#125;\n\n\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Test t = new Test();\n        t.a();\n\n        Test t2 = new Test();\n        t2.a();\n    &#125;\n\n\n\n&#125;\n\n</code></pre>\n<p>总结：</p>\n<p>（1）代码块执行顺序：</p>\n<p>最先执行静态块，只在类加载的时候执行一次，所以一般以后实战写项目：创建工厂，数据库的初始化信息都放入静态块。</p>\n<p>一般用于执行一些全局性的初始化操作。</p>\n<p>再执行构造块，（不常用）</p>\n<p>再执行构造器，</p>\n<p>再执行方法中的普通块。</p>\n<h1 id=\"包，import\"><a href=\"#包，import\" class=\"headerlink\" title=\"包，import\"></a>包，import</h1><p>【1】生活案例：</p>\n<p>邮寄快递：中国.北京.通州区.****小区.5号楼.3单元.101房.赵珊珊</p>\n<p>历史：常山赵子龙</p>\n<p>【2】包的作用：</p>\n<p>为了解决重名问题（实际上包对应的就是盘符上的目录）</p>\n<p>解决权限问题</p>\n<p>【3】创建包：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4c01c78e65328aa2cc03c43c7dc51cd7.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b813c37b6345ac6463be51d3c6c7ff77.png\" class=\"\">\n\n\n<p>包名定义：</p>\n<p>（1）名字全部小写</p>\n<p>（2）中间用.隔开</p>\n<p>（3）一般都是公司域名倒着写 ： com.jd com.msb</p>\n<p>（4）加上模块名字：</p>\n<p>com.jd.login com.jd.register</p>\n<p>（5）不能使用系统中的关键字：nul,con,com1—com9…..</p>\n<p>（6）包声明的位置一般都在非注释性代码的第一行：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c54ecb2742a2b971e196ee55f9ab9193.png\" class=\"\">\n\n\n<p>【4】导包问题：</p>\n<pre><code class=\"java\">import com.msb2.Person; //导包：就是为了进行定位\n\nimport java.util.Date;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        new Person();\n        new Date();\n        new java.sql.Date(1000L);//在导包以后，还想用其他包下同名的类，就必须要手动自己写所在的包。\n        new Demo();\n    &#125;\n&#125;\n\n</code></pre>\n<p>总结：</p>\n<pre><code class=\"java\">\n</code></pre>\n<p>（2）在导包以后，还想用其他包下同名的类，就必须要手动自己写所在的包。</p>\n<p>（3）同一个包下的类想使用不需要导包，可以直接使用。</p>\n<p>（4）在java.lang包下的类，可以直接使用无需导包：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0b7459093a2491a103c60fc5b7d9a6b9.png\" class=\"\">\n\n\n<p>（5）IDEA中导包快捷键：alt+enter</p>\n<p>可以自己设置自动导包</p>\n<p>（6）可以直接导入*：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/69d91ed24222309df909ff777d89d08f.png\" class=\"\">\n\n\n<p>【5】在Java中的导包没有包含和被包含的关系：</p>\n<p>设置目录平级的格式（不是包含和被包含的显示）：  </p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/26efc24659a7281452240f746bfc8f2f.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6d440aaefd446325e269a62253689110.png\" class=\"\">\n\n\n<p>【6】静态导入：</p>\n<ol>\n<li>package com.msb11;</li>\n<li>&#x2F;&#x2F;静态导入：</li>\n</ol>\n<pre><code class=\"java\"> import static java.lang.Math.\\*;\n //导入：java.lang下的Math类中的所有静态的内容\n\n public class Test &#123;\n //这是一个main方法，是程序的入口：\n public static void main(String[] args) &#123;\n System.out.println(random());\n System.out.println(PI);\n System.out.println(round(5.6));\n &#125;\n //在静态导入后，同一个类中有相同的方法的时候，会优先走自己定义的方法。\n public static int round(double a)&#123;\n return 1000;\n &#125;\n &#125;\n \n</code></pre>\n<h1 id=\"三大特性\"><a href=\"#三大特性\" class=\"headerlink\" title=\"三大特性\"></a>三大特性</h1><h2 id=\"封装-Encapsulation\"><a href=\"#封装-Encapsulation\" class=\"headerlink\" title=\"封装(Encapsulation)\"></a>封装(Encapsulation)</h2><p><strong>【1】生活案例：</strong></p>\n<p>ATM , 电线</p>\n<p><strong>【2】Java中封装的理解：</strong></p>\n<p>将某些东西进行隐藏，然后提供相应的方式进行获取。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/95a55583bf15b892c21ed0eb2380eed9.png\" class=\"\">\n\n\n<p>我们程序设计追求“高内聚，低耦合”。</p>\n<p>➢高内聚:类的内部数据操作细节自己完成，不允许外部干涉;</p>\n<p>➢低耦合:仅对外暴露少量的方法用于使用。</p>\n<p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提</p>\n<p>高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露</p>\n<p>的暴露出来。这就是封装性的设计思想。</p>\n<p><strong>【3】封装的好处：</strong></p>\n<p>提高代码的安全性</p>\n<p><strong>【4】代码：通过一个属性感受封装：</strong></p>\n<ol>\n<li>package com.msb.test01;</li>\n<li></li>\n<li>&#x2F;**</li>\n<li>* @Auther: msb-zhaoss</li>\n<li>*&#x2F;</li>\n</ol>\n<pre><code class=\"java\">public class Girl &#123;//女孩\n    //属性：\n    private int age;\n\n    //读取年龄：\n    public int duquAge()&#123;\n        return age;\n    &#125;\n\n    //设置年龄：\n    public void shezhiAge(int age)&#123;\n        if(age \\&gt;= 30 )&#123;\n            this.age = 18;\n        &#125;else&#123;\n            this.age = age;\n        &#125;\n\n    &#125;\n\n\n&#125;\n\npackage com.msb.test01;\n\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Girl类的对象：\n        Girl g = new Girl();\n        /\\*g.age = 33;\n        System.out.println(g.age);\\*/\n            //设置年龄：\n            g.shezhiAge(31);\n        //读取年龄：\n        System.out.println(g.duquAge());\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>上面的代码，对于属性age来说，我加了修饰符private，这样外界对它的访问就受到了限制，现在我还想加上其他的限制条件，但是在属性本身上没有办法再加了，所以我们通过定义方法来进行限制条件的添加。</p>\n<p>以属性为案例：</p>\n<p>进行封装：</p>\n<p>（1）将属性私有化，被private修饰–》加入权限修饰符</p>\n<p>一旦加入了权限修饰符，其他人就不可以随意的获取这个属性</p>\n<p>（2）提供public修饰的方法让别人来访问&#x2F;使用</p>\n<p>（3）即使外界可以通过方法来访问属性了，但是也不能随意访问，因为咱们在方法中可以加入 限制条件。</p>\n<p><strong>【5】实际开发中，方法一般会写成 setter，getter方法：</strong></p>\n<p>可以利用IDEA快捷键生成：alt+insert –&gt;getter and setter:</p>\n<pre><code class=\"java\">public class Girl &#123;//女孩\n    //属性：\n    private int age;\n\n    //读取年龄：\n    public int getAge()&#123;\n        return age;\n    &#125;\n\n    //设置年龄：\n    public void setAge(int age)&#123;\n        if(age \\&gt;= 30 )&#123;\n            this.age = 18;\n        &#125;else&#123;\n            this.age = age;\n        &#125;\n    &#125;\n&#125;\n\n</code></pre>\n<p><strong>【6】加深练习：</strong></p>\n<pre><code class=\"java\">public class Student &#123;\n    //属性：\n    private int age;\n    private String name;\n    private String sex;\n\n    //加入对应的setter和getter方法：\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public String getSex() &#123;\n        return sex;\n    &#125;\n\n    public void setSex(String sex) &#123;\n        if(&quot;男&quot;.equals(sex) \\|\\| &quot;女&quot;.equals(sex) )&#123;//sex是男 或者 是 女\n            this.sex = sex;\n        &#125;else&#123;\n            this.sex = &quot;男&quot;;\n        &#125;\n    &#125;\n\n    //加入构造器：\n    public Student()&#123;\n\n    &#125;\n\n    public Student(int age,String name,String sex)&#123;\n        this.age = age;\n        this.name = name;\n        //this.sex = sex;\n        this.setSex(sex);\n    &#125;\n&#125;\n\npackage com.msb.test2;\n\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Student对象：\n        Student s1 = new Student();\n        s1.setName(&quot;nana&quot;);\n        s1.setAge(19);\n        s1.setSex(&quot;女&quot;);\n        System.out.println(s1.getName()+&quot;---&quot;+s1.getAge()+&quot;----&quot;+s1.getSex());\n\n        Student s2 = new Student(18,&quot;菲菲&quot;,&quot;asdfasdfsadf&quot;);\n        System.out.println(s2.getName()+&quot;---&quot;+s2.getAge()+&quot;----&quot;+s2.getSex());\n    &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"继承-Inheritance\"><a href=\"#继承-Inheritance\" class=\"headerlink\" title=\"继承(Inheritance)\"></a>继承(Inheritance)</h2><p><strong>【1】类是对对象的抽象：</strong></p>\n<p>举例：</p>\n<p>荣耀20 ，小米 红米3，华为 p40 pro —&gt; 类：手机类</p>\n<p><strong>【2】继承是对类的抽象：</strong></p>\n<p>举例：</p>\n<p>学生类：Student：</p>\n<p>属性：姓名，年龄，身高，学生编号</p>\n<p>方法：吃饭，睡觉，喊叫，学习</p>\n<p>教师类：Teacher:</p>\n<p>属性：姓名，年龄，身高，教师编号</p>\n<p>方法：吃饭，睡觉，喊叫，教学</p>\n<p>员工类：Emploee:</p>\n<p>属性：姓名，年龄，身高，员工编号</p>\n<p>方法：吃饭，睡觉，喊叫，工作</p>\n<p>共同的东西：</p>\n<p>人类：</p>\n<p>属性：姓名，年龄，身高</p>\n<p>方法：吃饭，睡觉，喊叫</p>\n<p>学生类&#x2F;教师类&#x2F;员工类 继承 自 人类</p>\n<p>以后定义代码：</p>\n<p>先定义人类：</p>\n<p>人类： —》父类，基类，超类</p>\n<p>属性：姓名，年龄，身高</p>\n<p>方法：吃饭，睡觉，喊叫</p>\n<p>再定义 ： —》子类，派生类</p>\n<p>学生类：Student：</p>\n<p>属性：学生编号</p>\n<p>方法：学习</p>\n<p>教师类：Teacher:</p>\n<p>属性：教师编号</p>\n<p>方法：教学</p>\n<p>员工类：Emploee:</p>\n<p>属性：员工编号</p>\n<p>方法：工作</p>\n<p>子类 继承自 父类</p>\n<p>狗类：</p>\n<p>属性：姓名，年龄，身高</p>\n<p>方法：吃饭，睡觉，喊叫</p>\n<p>我们的继承关系，是在合理的范围中进行的抽取 ，抽取出子类父类的关系：</p>\n<p>上面的案例中：</p>\n<p>学生类&#x2F;教师类&#x2F;员工类 继承 自 人类 —》合理</p>\n<p>学生类&#x2F;教师类&#x2F;员工类 继承 自 狗类 —》不合理</p>\n<p>区分：</p>\n<p>学生是一个人</p>\n<p>教师是一个人</p>\n<p>员工是一个人 —》合理</p>\n<p>学生是一个狗 —》不合理</p>\n<p>总结：继承 就是 is - a 的关系</p>\n<p><strong>【3】代码层面的解释：</strong></p>\n<p>先写父类，再写子类：</p>\n<p>父类：人类 Person</p>\n<p>子类：学生类 Student</p>\n<ol>\n<li>package com.msb.test03;</li>\n<li></li>\n<li>&#x2F;**</li>\n<li>* @Auther: msb-zhaoss</li>\n<li>*&#x2F;</li>\n</ol>\n<pre><code class=\"java\">public class Person &#123;\n    //属性：\n    private int age;\n    private String name;\n    private double height;\n\n    //提供setter getter方法：\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public double getHeight() &#123;\n        return height;\n    &#125;\n\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n\n    //方法：\n    public void eat()&#123;\n        System.out.println(&quot;可以吃饭。。。&quot;);\n    &#125;\n\n    public void sleep()&#123;\n        System.out.println(&quot;可以睡觉。。。&quot;);\n    &#125;\n\n&#125;\n</code></pre>\n<pre><code class=\"java\">\npackage com.msb.test03;\n\npublic class Student extends Person &#123;//子类Student 继承 父类Person\n    //属性：\n    private int sno;//学号\n\n    public int getSno() &#123;\n        return sno;\n    &#125;\n\n    public void setSno(int sno) &#123;\n        this.sno = sno;\n    &#125;\n\n    //方法：\n    public void study()&#123;\n        System.out.println(&quot;学生可以学习&quot;);\n    &#125;\n\n&#125;\n</code></pre>\n<pre><code class=\"java\">package com.msb.test03;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建子类Student的对象\n        Student s = new Student();\n        s.setSno(1001);\n        s.setAge(18);\n        s.setName(&quot;菲菲&quot;);\n        s.setHeight(180.4);\n\n        System.out.println(&quot;学生名字为：&quot;+s.getName()+&quot;,学生的年纪：&quot;+s.getAge());\n\n        //访问方法：\n        s.study();\n        s.eat();\n        s.sleep();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【4】继承的好处：</strong>提高代码的复用性</p>\n<p>父类定义的内容，子类可以直接拿过来用就可以了，不用代码上反复重复定义了</p>\n<p>需要注意的点：</p>\n<p>父类private修饰的内容，子类实际上也继承，只是因为封装的特性阻碍了直接调用，但是提供了间接调用的方式，可以间接调用。</p>\n<p><strong>【5】总结：</strong></p>\n<p><strong>（1）继承关系 ：</strong></p>\n<p>父类&#x2F;基类&#x2F;超类</p>\n<p>子类&#x2F;派生类</p>\n<p>子类继承父类一定在合理的范围进行继承的 子类 extends 父类</p>\n<p><strong>（2）继承的好处：</strong></p>\n<p>1.提高了代码的复用性，父类定义的内容，子类可以直接拿过来用就可以了，不用代码上反复重复定义了</p>\n<p>2.便于代码的扩展</p>\n<p>3.为了以后多态的使用。是多态的前提。</p>\n<p>（3）父类private修饰的内容，子类也继承过来了。</p>\n<p>（4）一个父类可以有多个子类。</p>\n<p>（5）一个子类只能有一个直接父类。</p>\n<p>但是可以间接的继承自其它类。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/853b3f04c4932ab081cea980b8b93937.png\" class=\"\">\n\n\n<p>（6）继承具有传递性：</p>\n<p>Student –》继承自 Person —》继承自Object</p>\n<p>Object类是所有类的根基父类。</p>\n<p>所有的类都直接或者间接的继承自Object。</p>\n<h3 id=\"内存分析-1\"><a href=\"#内存分析-1\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/efb4a8c9189aea82cd25ed76bb83892b.png\" class=\"\">\n\n\n<h3 id=\"权限修饰符\"><a href=\"#权限修饰符\" class=\"headerlink\" title=\"权限修饰符\"></a>权限修饰符</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6362352d7d72827f6e8330b2314e50fe.png\" class=\"\">\n\n\n<p>【1】private：权限：在当前类中可以访问</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f49850ada620326d3c6e3e969491ea0f.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d1051cf6836474d0bd46cebbc5e9f2b7.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/748f9a251587c5c3f527c6b60ae68961.png\" class=\"\">\n\n\n<p>【2】default:缺省修饰符：权限：到同一个包下的其他类都可以访问</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a9adb2a0ee7b22a158499bdf9264e927.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/507700aaac0bb1ea4c9ea49935843e06.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a1884c8b37bef224d8111b5d03a6fba7.png\" class=\"\">\n\n\n<p>【3】protected：权限：最大到不同包下的子类</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c9f4fec14f259e36b1d3b1d0f84666a1.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/14538a4729c730bee00cb172b0bbaf69.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1ba8b04d798285212551e94f9beb2a27.png\" class=\"\">\n\n\n<p>【4】public：在整个项目中都可以访问</p>\n<p>总结：</p>\n<p>属性，方法：修饰符：四种：private，缺省，protected，public</p>\n<p>类：修饰符：两种：缺省，public</p>\n<p>以后写代码</p>\n<p>一般属性：用private修饰 ，方法：用public修饰</p>\n<h3 id=\"方法的重写\"><a href=\"#方法的重写\" class=\"headerlink\" title=\"方法的重写\"></a>方法的重写</h3><p><strong>【1】重写：</strong></p>\n<p>发生在子类和父类中，当子类对父类提供的方法不满意的时候，要对父类的方法进行重写。</p>\n<p><strong>【2】重写有严格的格式要求：</strong></p>\n<p>子类的方法名字和父类必须一致，参数列表（个数，类型，顺序）也要和父类一致。</p>\n<p><strong>【3】代码：</strong></p>\n<pre><code class=\"java\">public class Person &#123;\n    public void eat()&#123;\n        System.out.println(&quot;吃食物&quot;);\n    &#125;\n    public void sleep()&#123;\n        System.out.println(&quot;睡觉&quot;);\n    &#125;\n&#125;\n\npublic class Student extends Person &#123;\n    public void study()&#123;\n        System.out.println(&quot;学习&quot;);\n    &#125;\n    @override\n    public void eat()&#123;\n        System.out.println(&quot;我喜欢吃小龙虾喝啤酒。。&quot;);\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/bd618aafd593ad295ce5c750618dc32a.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Student类的对象：\n        Student s = new Student();\n        s.eat();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【4】内存：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e938358a339565fc850e88e0fb056438.png\" class=\"\">\n\n\n<p><strong>【5】重载和重写的区别：</strong></p>\n<p>重载：在同一个类中，当方法名相同，形参列表不同的时候 多个方法构成了重载</p>\n<p>重写：在不同的类中，子类对父类提供的方法不满意的时候，要对父类的方法进行重写。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d5872fc2effee86b2e0573634c6c876c.png\" class=\"\">\n\n\n<h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h3><p>【1】super:指的是： 父类的</p>\n<p>【2】super可以修饰属性，可以修饰方法；</p>\n<p>在子类的方法中，可以通过 super.属性 super.方法 的方式，显示的去调用父类提供的属性，方法。在通常情况下，super.可以省略不写：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9c34efb863bf488a0d6c9a5e631a6a1d.png\" class=\"\">\n\n\n<p>在特殊情况下，当子类和父类的属性重名时，你要想使用父类的属性，必须加上修饰符super.，只能通过super.属性来调用</p>\n<p>在特殊情况下，当子类和父类的方法重名时，你要想使用父类的方法，必须加上修饰符super.，只能通过super.方法来调用</p>\n<p>在这种情况下，super.就不可以省略不写。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/af3658cad9ff80c0cd50ec8a8957809b.png\" class=\"\">\n\n\n<p><strong>【3】super修饰构造器：</strong></p>\n<p>其实我们平时写的构造器的第一行都有：super() –&gt;作用：调用父类的空构造器，只是我们一般都省略不写</p>\n<p>（所有构造器的第一行默认情况下都有super(),但是一旦你的构造器中显示的使用super调用了父类构造器，那么这个super()就不会给你默认分配了。如果构造器中没有显示的调用父类构造器的话，那么第一行都有super(),可以省略不写）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f83b1b34f45ed2c2fa508c0bfd3edff2.png\" class=\"\">\n\n\n<p>如果构造器中已经显示的调用super父类构造器，那么它的第一行就没有默认分配的super();了</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2b726c25c19f6d0bda87b121df9e5c17.png\" class=\"\">\n\n\n<p>在构造器中，super调用父类构造器和this调用子类构造器只能存在一个，两者不能共存：</p>\n<p>因为super修饰构造器要放在第一行，this修饰构造器也要放在第一行：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0d12186c6df4682072262dac8a7ebc6b.png\" class=\"\">\n\n\n<p>改正二选一即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b1232bfc50729fc5ae34b3bb8e24c495.png\" class=\"\">\n\n\n<p><strong>【4】以后写代码构造器的生成可以直接使用IDEA提供的快捷键：</strong></p>\n<p>alt+insert</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3a4ffc5a8078225efe692487eaaa27f9.png\" class=\"\">\n\n\n<h3 id=\"继承条件下构造方法的执行过程\"><a href=\"#继承条件下构造方法的执行过程\" class=\"headerlink\" title=\"继承条件下构造方法的执行过程\"></a>继承条件下构造方法的执行过程</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e486184aee5d5ed004fbe3a9bc06497a.png\" class=\"\">\n\n\n\n\n<pre><code class=\"java\">public class Person &#123;\n    int age;\n    String name;\n\n    public Person(int age, String name) &#123;\n        super();\n        this.age = age;\n        this.name = name;\n    &#125;\n\n    public Person() &#123;\n    &#125;\n&#125;\n\npublic class Student extends Person &#123;\n    double height ;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(int age, String name, double height) &#123;\n        super(age, name);\n        this.height = height;\n    &#125;\n&#125;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Student s = new Student(19,&quot;feifei&quot;,160.8);\n    &#125;\n&#125;\n\n</code></pre>\n<h3 id=\"Object类\"><a href=\"#Object类\" class=\"headerlink\" title=\"Object类\"></a>Object类</h3><p>所有类都直接或间接的继承自Object类，Object类是所有Java类的根基类。</p>\n<p>也就意味着所有的Java对象都拥有Object类的属性和方法。</p>\n<p>如果在类的声明中未使用extends关键字指明其父类，则默认继承Object类。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/aeccaa6fc133025b43dc6e9670f17d44.png\" class=\"\">\n\n\n<p>toString()方法</p>\n<p><strong>【1】Object类的toString()的作用：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/899bcc0c91c446dfb749301b53563996.png\" class=\"\">\n\n\n<p>方法的原理：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/745b80c0db126d2edafc1f7daf1f955a.png\" class=\"\">\n\n\n<p>现在，使用toString方法的时候，打印出来的东西 “不好看”，对于其他人来说不友好，可读性不好</p>\n<p>我们现在是想知道对象的信息，名字，年龄，身高。。。。。。</p>\n<p>现在的格式不好：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d377d6556ae80f216e00404592999e77.png\" class=\"\">\n\n\n<p>出现的问题：子类Student对父类Object提供的toString方法不满意，不满意–》对toString方法进行重写：</p>\n<pre><code class=\"java\">public class Student /\\*extends Object\\*/&#123;\n    private String name;\n    private int age;\n    private double height;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public double getHeight() &#123;\n        return height;\n    &#125;\n\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(String name, int age, double height) &#123;\n        this.name = name;\n        this.age = age;\n        this.height = height;\n    &#125;\n\n    public String toString() &#123;\n        return &quot;这是一个Student对象，这个对象的名字：&quot;+name+&quot;,年龄：&quot;+age+&quot;,身高：&quot;+height;\n    &#125;\n&#125;\n\n</code></pre>\n<p>测试类：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/777945b54a0ad9f5d6284ac3acf271d0.png\" class=\"\">\n\n\n<p>总结：toString的作用就是对对象进行“自我介绍”，一般子类对父类提供的toString都不满意，都要进行重写。</p>\n<p>IDEA提供了快捷键：</p>\n<pre><code class=\"java\">public class Student /\\*extends Object\\*/&#123;\n    private String name;\n    private int age;\n    private double height;\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getAge() &#123;\n        return age;\n    &#125;\n\n    public void setAge(int age) &#123;\n        this.age = age;\n    &#125;\n\n    public double getHeight() &#123;\n        return height;\n    &#125;\n\n    public void setHeight(double height) &#123;\n        this.height = height;\n    &#125;\n\n    public Student() &#123;\n    &#125;\n\n    public Student(String name, int age, double height) &#123;\n        this.name = name;\n        this.age = age;\n        this.height = height;\n    &#125;\n\n    /\\*public String toString() &#123;\n        return &quot;这是一个Student对象，这个对象的名字：&quot;+name+&quot;,年龄：&quot;+age+&quot;,身高：&quot;+height;\n    &#125;\\*/\n\n        @Override\n        public String toString() &#123;\n        return &quot;Student&#123;&quot; +\n            &quot;name=&#39;&quot; + name + &#39;\\\\&#39;&#39; +\n            &quot;, age=&quot; + age +\n            &quot;, height=&quot; + height +\n            &#39;&#125;&#39;;\n    &#125;\n&#125;\n\n</code></pre>\n<p>equals方法</p>\n<pre><code class=\"java\">public class Phone &#123;//手机类：\n    //属性：\n    private String brand;//品牌型号\n    private double price;//价格\n    private int year ;//出产年份\n    //方法：\n\n    public String getBrand() &#123;\n        return brand;\n    &#125;\n\n    public void setBrand(String brand) &#123;\n        this.brand = brand;\n    &#125;\n\n    public double getPrice() &#123;\n        return price;\n    &#125;\n\n    public void setPrice(double price) &#123;\n        this.price = price;\n    &#125;\n\n    public int getYear() &#123;\n        return year;\n    &#125;\n\n    public void setYear(int year) &#123;\n        this.year = year;\n    &#125;\n\n    @Override\n    public String toString() &#123;\n        return &quot;Phone&#123;&quot; +\n            &quot;brand=&#39;&quot; + brand + &#39;\\\\&#39;&#39; +\n            &quot;, price=&quot; + price +\n            &quot;, year=&quot; + year +\n            &#39;&#125;&#39;;\n    &#125;\n\n    //构造器：\n\n    public Phone() &#123;\n    &#125;\n\n    public Phone(String brand, double price, int year) &#123;\n        this.brand = brand;\n        this.price = price;\n        this.year = year;\n    &#125;\n\n\n    //对equals方法进行重写：\n    public boolean equals(Object obj) &#123;//Object obj = new Phone();\n        //将obj转为Phone类型：\n        Phone other = (Phone)obj;//向下转型，为了获取子类中特有的内容\n        if(this.getBrand()==other.getBrand()&amp;&amp;this.getPrice()==other.getPrice()&amp;&amp;this.getYear()==other.getYear())&#123;\n            return true;\n        &#125;\n        return false;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n\n        //创建Phone类的对象：\n        Phone p1 = new Phone(&quot;华为P40&quot;,2035.98,2020);\n        Phone p2 = new Phone(&quot;华为P40&quot;,2035.98,2020);\n        //比较两个对象：p1和p2对象：\n        //==的作用：比较左右两侧的值是否想的，要么相等，返回true,要么不相等,返回false\n        System.out.println(p1==p2);//--\\&gt;\\&gt;\\&gt;对于引用数据类型来说，比较的是地址值。---\\&gt;一定返回的是false\n\n        //Object类提供了一个方法 equals方法 ：作用：比较对象具体内容是否相等。\n        boolean flag = p1.equals(p2);//点进源码发现：底层依旧比较的是==，比较的还是地址值。\n        System.out.println(flag);\n\n    &#125;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>equals作用：这个方法提供了对对象的内容是否相等 的一个比较方式，对象的内容指的就是属性。</p>\n<p>父类Object提供的equals就是在比较&#x3D;&#x3D;地址，没有实际的意义，我们一般不会直接使用父类提供的方法，</p>\n<p>而是在子类中对这个方法进行重写。</p>\n<p>instanceof</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/30e52b9618d9cbd40553fdef0f60675b.png\" class=\"\">\n\n\n<p>利用集成开发工具生成equals方法</p>\n<p><strong>【1】利用eclipse：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/91bbe52ca5d21f371941360962dea206.png\" class=\"\">\n\n\n<p><strong>【2】利用idea：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/97956cd439b862107cbc346e52ba17c3.png\" class=\"\">\n\n\n<h3 id=\"类和类的关系\"><a href=\"#类和类的关系\" class=\"headerlink\" title=\"类和类的关系\"></a>类和类的关系</h3><p>代码</p>\n<p>总结：</p>\n<p><strong>【1】面向对象的思维：</strong>找参与者，找女孩类，找男孩类</p>\n<p><strong>【2】体会了什么叫方法的性擦，什么叫方法的实参：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a4ab41dc30f6f798d4f7e210c42f758e.png\" class=\"\">\n\n\n<p>具体传入的内容 实参：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2c75ac587a45937e5652a3096bfe6126.png\" class=\"\">\n\n\n<p><strong>【3】类和类可以产生关系：</strong></p>\n<p>（1）将一个类作为另一个类中的方法的形参</p>\n<p>（2）将一个类作为另一个类的属性</p>\n<pre><code class=\"java\">public class Girl &#123;\n    //属性：\n    String name;\n    double weight;\n    Mom m /\\*= new Mom()\\*/;\n    //方法：\n    public void add(int a)&#123;//参数是基本数据类型\n        System.out.println(a);\n        System.out.println(a+100);\n    &#125;\n    //谈恋爱的方法：\n    public void love(Boy b)&#123;//参数是引用数据类型Boy\n        System.out.println(&quot;我男朋友的名字是：&quot;+b.name+&quot;，我男朋友的年龄是：&quot;+b.age);\n        b.buy();\n    &#125;\n\n    //女孩跟妈妈聊天：\n    public void wechat()&#123;\n        m.say();\n    &#125;\n\n    //构造器：\n    public Girl(String name, double weight) &#123;\n        this.name = name;\n        this.weight = weight;\n    &#125;\n&#125;\npublic class Boy &#123;\n    //属性：\n    int age;\n    String name;\n    //方法：\n    public void buy()&#123;\n        System.out.println(&quot;跟我谈恋爱，我给你买买买。。。&quot;);\n    &#125;\n    //构造器：\n    public Boy(int age, String name) &#123;\n        this.age = age;\n        this.name = name;\n    &#125;\n&#125;\npublic class Mom &#123;\n    //方法：\n    public void say()&#123;\n        System.out.println(&quot;妈妈唠唠叨叨 都是爱，听妈妈的话。。&quot;);\n    &#125;\n&#125;\n\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建一个Boy类的具体的对象：\n        Boy boy = new Boy(30,&quot;鹿晗&quot;);\n        //创建一个Girl类的具体的对象：\n        Girl girl = new Girl(&quot;关晓彤&quot;,100);\n        //谈恋爱：\n        //girl.love(boy);\n        Boy boy2 = new Boy(35,&quot;陈伟霆&quot;);\n        girl.love(boy2);\n\n        //还可以跟妈妈微信聊天：\n        girl.m = new Mom();\n        girl.wechat();\n    &#125;\n&#125;\n</code></pre>\n<p>总结</p>\n<p>一、继承关系</p>\n<p>继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。在Java中继承关系通过关键字extends明确标识，在设计时一般没有争议性。在UML类图设计中，继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6df8fcf572c5c9257622c561c3f9b8ce.png\" class=\"\">\n\n\n<p>二、实现关系</p>\n<p>实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性。在UML类图设计中，实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7980497e067f9fb24a419ae71874f7c9.png\" class=\"\">\n\n\n<p>三、依赖关系</p>\n<p>简单的理解，依赖就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是类B的变化会影响到类A。比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。表现在代码层面，让类B作为参数被类A在某个method方法中使用。在UML类图设计中，依赖关系用由类A指向类B的带箭头虚线表示。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d43f314a327103dae3f6211ba1668d9f.png\" class=\"\">\n\n\n<p>四、关联关系</p>\n<p>关联体现的是两个类之间语义级别的一种强依赖关系，比如我和我的朋友，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。关联可以是单向、双向的。表现在代码层面，为被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。在UML类图设计中，关联关系用由关联类A指向被关联类B的带箭头实线表示，在关联的两端可以标注关联双方的角色和多重性标记。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/18a919f662aae552a4f799f592a76428.png\" class=\"\">\n\n\n<p>五、聚合关系</p>\n<p>聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，聚合关系以空心菱形加实线箭头表示。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f588bbc3aa0176674ac7a0ad91269ee5.png\" class=\"\">\n\n\n<p>六、组合关系</p>\n<p>组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，比如人和人的大脑。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，组合关系以实心菱形加实线箭头表示。</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1b8ae6d948c959d7a1a598bcf58ae9ba.png\" class=\"\">\n\n\n<p>七、总结</p>\n<p>对于继承、实现这两种关系没多少疑问，它们体现的是一种类和类、或者类与接口间的纵向关系。其他的四种关系体现的是类和类、或者类与接口间的引用、横向关系，是比较难区分的，有很多事物间的关系要想准确定位是很难的。前面也提到，这四种关系都是语义级别的，所以从代码层面并不能完全区分各种关系，但总的来说，后几种关系所表现的强弱程度依次为：组合&gt;聚合&gt;关联&gt;依赖。</p>\n<h2 id=\"多态-Polymorphism\"><a href=\"#多态-Polymorphism\" class=\"headerlink\" title=\"多态(Polymorphism)\"></a>多态(Polymorphism)</h2><p><strong>【1】多态跟属性无关，多态指的是方法的多态，而不是属性的多态。</strong></p>\n<p>【<strong>2】案例代入：</strong></p>\n<pre><code class=\"java\">public class Animal &#123;//父类：动物：\n    public void shout()&#123;\n        System.out.println(&quot;我是小动物，我可以叫。。。&quot;);\n    &#125;\n&#125;\npublic class Cat extends Animal&#123;\n    //喊叫方法：\n    public void shout()&#123;\n        System.out.println(&quot;我是小猫，可以喵喵叫&quot;);\n    &#125;\n    public void scratch()&#123;\n        System.out.println(&quot;我是小猫，我可以挠人&quot;);\n    &#125;\n&#125;\npublic class Dog extends Animal&#123;\n    //喊叫：\n    public void shout()&#123;\n        System.out.println(&quot;我是小狗，我可以汪汪叫&quot;);\n    &#125;\n    public void guard()&#123;\n        System.out.println(&quot;我是小狗，我可以看家护院，保护我的小主人。。。&quot;);\n    &#125;\n&#125;\npublic class Pig extends Animal&#123;\n    public void shout()&#123;\n        System.out.println(&quot;我是小猪，我嗯嗯嗯的叫&quot;);\n    &#125;\n    public void eat()&#123;\n        System.out.println(&quot;我是小猪，我爱吃东西。。&quot;);\n    &#125;\n\n&#125;\npublic class Girl &#123;\n    //跟猫玩耍：\n    /\\*public void play(Cat cat)&#123;\n        cat.shout();\n    &#125;\\*/\n        //跟狗玩耍：\n        /\\*public void play(Dog dog)&#123;\n        dog.shout();\n    &#125;\\*/\n        //跟小动物玩耍：\n        public void play(Animal an)&#123;\n        an.shout();\n    &#125;\n&#125;\npublic class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //具体的猫：--》猫的对象\n        //Cat c = new Cat();\n        //具体的小女孩：--》女孩的对象\n        Girl g = new Girl();\n        //小女孩跟猫玩：\n        //g.play(c);\n        //具体的狗---》狗的对象：\n        //Dog d = new Dog();\n        //小女孩跟狗玩：\n        //g.play(d);\n        //具体的动物：--》动物的对象：\n        //Cat c = new Cat();\n        //Dog d = new Dog();\n        Pig p = new Pig();\n        Animal an = p;\n        g.play(an);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【3】总结：</strong></p>\n<p>（1）先有父类，再有子类：–》继承 先有子类，再抽取父类 —-》泛化</p>\n<p>（2）什么是多态：</p>\n<p>多态就是多种状态：同一个行为，不同的子类表现出来不同的形态。</p>\n<p>多态指的就是同一个方法调用，然后由于对象不同会产生不同的行为。</p>\n<p>（3）多态的好处：</p>\n<p>为了提高代码的扩展性，符合面向对象的设计原则：开闭原则。</p>\n<p>开闭原则：指的就是扩展是 开放的，修改是关闭的。</p>\n<p>注意：多态可以提高扩展性，但是扩展性没有达到最好，以后我们会学习 反射</p>\n<p>（4）多态的要素：</p>\n<p>一，继承： Cat extends Animal ,Pig extends Animal, Dog extends Animal</p>\n<p>二，重写：子类对父类的方法shout()重写</p>\n<p>三， 父类引用指向子类对象：</p>\n<ol>\n<li>Pig p &#x3D; new Pig();</li>\n<li>Animal an &#x3D; p;</li>\n</ol>\n<p>将上面的代码合为一句话：</p>\n<p>Animal an &#x3D; new Pig();</p>\n<p>&#x3D;左侧：编译期的类型</p>\n<p>&#x3D;右侧：运行期的类型</p>\n<p>Animal an &#x3D; new Pig();</p>\n<p>g.play(an); &#x2F;&#x2F;</p>\n<ol>\n<li>public void play(Animal an){&#x2F;&#x2F;Animal an &#x3D; an &#x3D; new Pig();</li>\n<li>an.shout();</li>\n<li>}</li>\n</ol>\n<p>上面的代码，也是多态的一种非常常见的应用场合：父类当方法的形参，然后传入的是具体的子类的对象，</p>\n<p>然后调用同一个方法，根据传入的子类的不同展现出来的效果也不同，构成了多态。</p>\n<h3 id=\"内存分析-2\"><a href=\"#内存分析-2\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f791313852aa2be7d3c356e48db838ff.png\" class=\"\">\n\n\n<h3 id=\"向下转型，向上转型\"><a href=\"#向下转型，向上转型\" class=\"headerlink\" title=\"向下转型，向上转型\"></a>向下转型，向上转型</h3><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e1446c03705f221dabfc73404636e7f9.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/dde65c5b8a65a38de394553d0009de33.png\" class=\"\">\n\n\n<p>现在我就想访问到eat()方法和weight属性：</p>\n<pre><code class=\"java\">public class Demo &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Pig p = new Pig();\n        Animal an = p;//转型：向上转型\n        an.shout();\n\n        //加入转型的代码：\n        //将Animal转为Pig类型：\n        Pig pig = (Pig)an ;//转型：向下转型\n        pig.eat();\n        pig.age = 10;\n        pig.weight = 60.8;\n    &#125;\n&#125;\n</code></pre>\n<p>对应内存：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b2f3a4672a7467f639d8429662e933e8.png\" class=\"\">\n\n\n<p>思考之前的equals方法：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/25ce73d23e12ac98e7b1f7aa81f9ff22.png\" class=\"\">\n\n\n<h3 id=\"简单工厂设计模式\"><a href=\"#简单工厂设计模式\" class=\"headerlink\" title=\"简单工厂设计模式\"></a>简单工厂设计模式</h3><p>不仅可以使用父类做方法的形参，还可以使用父类做方法的返回值类型，真实返回的对象可以是该类的任意一个子类对象。</p>\n<p>简单工厂模式的实现，它是解决大量对象创建问题的一个解决方案。将创建和使用分开，工厂负责创建，使用者直接调用即可。简单工厂模式的基本要求是</p>\n<p>² 定义一个static方法，通过类名直接调用</p>\n<p>² 返回值类型是父类类型，返回的可以是其任意子类类型</p>\n<p>² 传入一个字符串类型的参数，工厂根据参数创建对应的子类产品</p>\n<pre><code class=\"java\">public class Test &#123;\n    public static void main(String[] args) &#123;\n        Girl g = new Girl();\n\n        //Cat c = new Cat();\n        //Dog d = new Dog();\n        //Pig p = new Pig();\n        Animal an = PetStore.getAnimal(&quot;狗&quot;);\n\n        g.play(an);\n    &#125;\n&#125;\npublic class PetStore &#123;//宠物店 ---》工厂类\n    //方法：提供动物\n    public static Animal getAnimal(String petName)&#123;//多态的应用场合（二）\n        Animal an = null;\n\n        if(&quot;猫&quot;.equals(petName))&#123;//petName.equals(&quot;猫&quot;) --》这样写容易发生空指针异常\n            an = new Cat();\n        &#125;\n\n        if(&quot;狗&quot;.equals(petName))&#123;\n            an = new Dog();\n        &#125;\n\n        if(&quot;猪&quot;.equals(petName))&#123;\n            an = new Pig();\n        &#125;\n\n        return an;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"final\"><a href=\"#final\" class=\"headerlink\" title=\"final\"></a>final</h1><p><strong>【1】修饰变量；</strong></p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //第1种情况：\n        //final修饰一个变量，变量的值不可以改变，这个变量也变成了一个字符常量，约定俗称的规定：名字大写\n        final int A = 10;//final修饰基本数据类型\n        //A = 20; 报错：不可以修改值\n        //第2种情况：\n        final Dog d = new Dog();//final修饰引用数据类型，那么地址值就不可以改变\n        //d = new Dog(); --\\&gt;地址值不可以更改\n        //d对象的属性依然可以改变：\n        d.age = 10;\n        d.weight = 13.7;\n\n        //第3种情况：\n        final Dog d2 = new Dog();\n        a(d2);\n        //第4种情况：\n        b(d2);\n\n    &#125;\n    public static void a(Dog d)&#123;\n        d = new Dog();\n    &#125;\n    public static void b(final Dog d)&#123;//d被final修饰 ，指向不可以改变\n        //d = new Dog();\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【2】修饰方法；</strong></p>\n<p>final修饰方法，那么这个方法不可以被该类的子类重写：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e2ac79b24d344d5b0d6b8faa62f96090.png\" class=\"\">\n\n\n<p><strong>【3】修饰类；</strong></p>\n<p>final修饰类，代表没有子类，该类不可以被继承：</p>\n<p>一旦一个类被final修饰，那么里面的方法也没有必要用final修饰了（final可以省略不写）</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5598439b682631d58965e571cf796ae3.png\" class=\"\">\n\n\n<p><strong>【4】案例：JDK提供的Math类：</strong>看源码发现：</p>\n<p>（1）使用Math类的时候无需导包，直接使用即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3acfdc8f04f80a895820a2d9947c1a59.png\" class=\"\">\n\n\n<p>（2）Math类没有子类，不能被其他类继承了</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0febe174ebc78d4977b9ac8a6259fef8.png\" class=\"\">\n\n\n<p>（3）里面的属性全部被final修饰，方法也是被final修饰的，只是省略不写了</p>\n<p>原因：子类没有必要进行重写。</p>\n<p>（4）外界不可以创建对象：</p>\n<p>Math m &#x3D; new Math();</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/97205d348a09e70cdda26b24ec220407.png\" class=\"\">\n\n\n<p>（5）发现Math类中的所有的属性，方法都被static修饰</p>\n<p>那么不用创建对象去调用，只能通过类名.属性名 类名.方法名 去调用</p>\n<h1 id=\"抽象类，抽象方法\"><a href=\"#抽象类，抽象方法\" class=\"headerlink\" title=\"抽象类，抽象方法\"></a>抽象类，抽象方法</h1><p>【1】抽象类和抽象方法的关系：</p>\n<p>抽象类中可以定义0-n个抽象方法。</p>\n<p>【2】抽象类作用：</p>\n<p>在抽象类中定义抽象方法，目的是为了为子类提供一个通用的模板，子类可以在模板的基础上进行开发，先重写父类的抽象方法，然后可以扩展子类自己的内容。抽象类设计避免了子类设计的随意性，通过抽象类，子类的设计变得更加严格，进行某些程度上的限制。</p>\n<p>使子类更加的通用。</p>\n<p>【3】代码：</p>\n<pre><code class=\"java\">//4.一个类中如果有方法是抽象方法，那么这个类也要变成一个抽象类。\n//5.一个抽象类中可以有0-n个抽象方法\npublic abstract class Person &#123;\n    //1.在一个类中，会有一类方法，子类对这个方法非常满意，无需重写，直接使用\n    public void eat()&#123;\n        System.out.println(&quot;一顿不吃饿得慌&quot;);\n    &#125;\n    //2.在一个类中，会有一类方法，子类对这个方法永远不满意，会对这个方法进行重写。\n    //3.一个方法的方法体去掉，然后被abstract修饰，那么这个方法就变成了一个抽象方法\n    public abstract void say();\n    public abstract void sleep();\n&#125;\n\n//6.抽象类可以被其他类继承：\n//7.一个类继承一个抽象类，那么这个类可以变成抽象类\n//8.一般子类不会加abstract修饰，一般会让子类重写父类中的抽象方法\n//9.子类继承抽象类，就必须重写全部的抽象方法\n//10.子类如果没有重写父类全部的抽象方法，那么子类也可以变成一个抽象类。\nclass Student extends Person&#123;\n\n    @Override\n    public void say() &#123;\n        System.out.println(&quot;我是东北人，我喜欢说东北话。。&quot;);\n    &#125;\n\n    @Override\n    public void sleep() &#123;\n        System.out.println(&quot;东北人喜欢睡炕。。&quot;);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">class Demo&#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //11.创建抽象类的对象：--\\&gt;抽象类不可以创建对象\n        //Person p = new Person();\n        \n        //12.创建子类对象：\n        Student s = new Student();\n        s.sleep();\n        s.say();\n        \n        //13.多态的写法：父类引用只想子类对象：\n        Person p = new Student();\n        p.say();\n        p.sleep();\n    &#125;\n&#125;\n</code></pre>\n<p>【4】面试题：</p>\n<p>（1）抽象类不能创建对象，那么抽象类中是否有构造器？</p>\n<p>抽象类中一定有构造器。构造器的作用 给子类初始化对象的时候要先super调用父类的构造器。</p>\n<p>（2）抽象类是否可以被final修饰？</p>\n<p>不能被final修饰，因为抽象类设计的初衷就是给子类继承用的。要是被final修饰了这个抽象类了，就不存在继承了，就没有子类。</p>\n<h1 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h1><p><strong>【1】接口声明格式：</strong></p>\n<table>\n<thead>\n<tr>\n<th>[访问修饰符] interface 接口名 [extends 父接口1，父接口2…] {   常量定义；   方法定义；  }</th>\n</tr>\n</thead>\n</table>\n<p><strong>【2】代码：</strong></p>\n<pre><code class=\"java\">package com.msb.test04;\n\n/**\n    * 1.类是类，接口是接口，它们是同一层次的概念。\n    * 2.接口中没有构造器\n    * 3.接口如何声明：interface\n    * 4.在JDK1.8之前，接口中只有两部分内容：\n    * （1）常量：固定修饰符：public static final\n    * （2）抽象方法：固定修饰符：public abstract\n    * 注意：修饰符可以省略不写，IDE会帮你自动补全，但是初学者建议写上，防止遗忘。\n*/\npublic interface TestInterface01 &#123;\n    //常量：\n    /\\*public static final\\*/ int NUM = 10;\n    //抽象方法：\n    /\\*public abstract\\*/ void a();\n    /\\*public abstract\\*/ void b(int num);\n    /\\*public abstract\\*/ int c(String name);\n&#125;\n\ninterface TestInterface02&#123;\n    void e();\n    void f();\n&#125;\n/\\*\n    5.类和接口的关系是什么？ 实现关系 类实现接口：\n    6.一旦实现一个接口，那么实现类要重写接口中的全部的抽象方法：\n    7.如果没有全部重写抽象方法，那么这个类可以变成一个抽象类。\n    8.java只有单继承，java还有多实现\n    一个类继承其他类，只能直接继承一个父类\n    但是实现类实现接口的话，可以实现多个接口\n    9.写法：先继承 再实现：extends Person implements TestInterface01,TestInterface02\n    \\*/\n    class Student extends Person implements TestInterface01,TestInterface02 &#123;\n        @Override\n        public void a() &#123;\n            System.out.println(&quot;---1&quot;);\n        &#125;\n\n        @Override\n        public void b(int num) &#123;\n            System.out.println(&quot;---2&quot;);\n        &#125;\n\n        @Override\n        public int c(String name) &#123;\n            return 100;\n        &#125;\n\n        @Override\n        public void e() &#123;\n            System.out.println(&quot;---3&quot;);\n        &#125;\n\n        @Override\n        public void f() &#123;\n            System.out.println(&quot;---4&quot;);\n        &#125;\n    &#125;\n\n\nclass Test&#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //10.接口不能创建对象：\n        //TestInterface02 t = new TestInterface02();\n        TestInterface02 t = new Student();//接口指向实现类 ---》多态\n\n        //11.接口中常量如何访问：\n        System.out.println(TestInterface01.NUM);\n        System.out.println(Student.NUM);\n        Student s = new Student();\n        System.out.println(s.NUM);\n        TestInterface01 t2 = new Student();\n        System.out.println(t2.NUM);\n    &#125;\n&#125;\n</code></pre>\n<p><strong>【3】接口的作用是什么？</strong></p>\n<p>定义规则，只是跟抽象类不同地方在哪？它是接口不是类。</p>\n<p>接口定义好规则之后，实现类负责实现即可。</p>\n<p><strong>【4】</strong></p>\n<p>继承：子类对父类的继承</p>\n<p>实现：实现类对接口的实现</p>\n<p>手机 是不是 照相机</p>\n<p>继承：手机 extends 照相机 “is-a”的关系，手机是一个照相机</p>\n<p>上面的写法 不好：</p>\n<p>实现： 手机 implements 拍照功能 “has-a”的关系，手机具备照相的能力</p>\n<p>案例：飞机，小鸟，风筝</p>\n<p>定义一个接口： Flyable</p>\n<p><strong>【5】多态的应用场合：</strong></p>\n<p>（1）父类当做方法的形参，传入具体的子类的对象</p>\n<p>（2）父类当做方法的返回值，返回的是具体的子类的对象</p>\n<p>（3）接口当做方法的形参，传入具体的实现类的对象</p>\n<p>（4）接口当做方法的返回值，返回的是具体的实现类的对象</p>\n<p><strong>【6】接口和抽象类的区别：</strong></p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/ff922aa23cf8364987c661f524bf9d58.png\" class=\"\">\n\n\n<h2 id=\"JDK1-8以后的接口新增内容\"><a href=\"#JDK1-8以后的接口新增内容\" class=\"headerlink\" title=\" JDK1.8以后的接口新增内容\"></a> JDK1.8以后的接口新增内容</h2><p><strong>在JDK1.8之前，接口中只有两部分内容：</strong><br>（1）常量：固定修饰符：public static final<br>（2）抽象方法：固定修饰符：public abstract</p>\n<p><strong>在JDK1.8之后，新增非抽象方法：</strong></p>\n<p>（1）被public default修饰的非抽象方法：</p>\n<p>注意1：default修饰符必须要加上，否则出错</p>\n<p>注意2：实现类中要是想重写接口中的非抽象方法，那么default修饰符必须不能加，否则出错。</p>\n<pre><code class=\"java\">public interface TestInterface &#123;\n    //常量：\n    public static final int NUM= 10;\n    //抽象方法：\n    public abstract void a();\n    //public default修饰的非抽象方法：\n    public default void b()&#123;\n        System.out.println(&quot;-------TestInterface---b()-----&quot;);\n    &#125;\n&#125;\nclass Test implements TestInterface&#123;\n    public void c()&#123;\n        //用一下接口中的b方法：\n        b();//可以\n        //super.b();不可以\n        TestInterface.super.b();//可以\n    &#125;\n    @Override\n    public void a() &#123;\n        System.out.println(&quot;重写了a方法&quot;);\n    &#125;\n\n    @Override\n    public void b() &#123;\n\n    &#125;\n&#125;\n</code></pre>\n<p>（2）静态方法：</p>\n<p>注意1：static不可以省略不写</p>\n<p>注意2：静态方法不能重写</p>\n<pre><code class=\"java\">public interface TestInterface2 &#123;\n    //常量：\n    public static final int NUM = 10;\n    //抽象方法：\n    public abstract void a();\n    //public default非抽象方法；\n    public default void b()&#123;\n        System.out.println(&quot;-----TestInterface2---b&quot;);\n    &#125;\n    //静态方法：\n    public static void c()&#123;\n        System.out.println(&quot;TestInterface2中的静态方法&quot;);\n    &#125;\n&#125;\n\nclass Demo implements TestInterface2&#123;\n    @Override\n    public void a() &#123;\n        System.out.println(&quot;重写了a方法&quot;);\n    &#125;\n    public static void c()&#123;\n        System.out.println(&quot;Demo中的静态方法&quot;);\n    &#125;\n&#125;\n\nclass A &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        Demo d = new Demo();\n        d.c();\n        Demo.c();\n        TestInterface2.c();\n    &#125;\n&#125;\n</code></pre>\n<p>疑问：为什么要在接口中加入非抽象方法？？？</p>\n<p>如果接口中只能定义抽象方法的话，那么我要是修改接口中的内容，那么对实现类的影响太大了，所有实现类都会受到影响。</p>\n<p>现在在接口中加入非抽象方法，对实现类没有影响，想调用就去调用即可。</p>\n<h1 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h1><h2 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h2><pre><code class=\"java\">/**\n* 1.类的组成：属性，方法，构造器，代码块（普通块，静态块，构造块，同步块），内部类\n* 2.一个类TestOuter的内部的类SubTest叫内部类， 内部类 ：SubTest 外部类：TestOuter\n* 3.内部类：成员内部类 (静态的，非静态的) 和 局部内部类（位置：方法内，块内，构造器内）\n* 4.成员内部类:\n* 里面属性，方法，构造器等\n* 修饰符：private，default，protect，public，final,abstract\n*/\npublic class TestOuter &#123;\n    //非静态的成员内部类：\n    public class D&#123;\n        int age = 20;\n        String name;\n        public void method()&#123;\n            //5.内部类可以访问外部类的内容\n            /\\*System.out.println(age);\n            a();\\*/\n                int age = 30;\n\n            //8.内部类和外部类属性重名的时候，如何进行调用：\n            System.out.println(age);//30\n            System.out.println(this.age);//20\n            System.out.println(TestOuter.this.age);//10\n        &#125;\n    &#125;\n\n    //静态成员内部类：\n    static class E&#123;\n        public void method()&#123;\n            //6.静态内部类中只能访问外部类中被static修饰的内容\n            /\\*System.out.println(age);\n            a();\\*/\n        &#125;\n    &#125;\n    //属性：\n    int age = 10;\n    //方法：\n    public void a()&#123;\n        System.out.println(&quot;这是a方法&quot;);\n        &#123;\n            System.out.println(&quot;这是一个普通块&quot;);\n            class B&#123;\n\n            &#125;\n        &#125;\n        class A&#123;\n\n        &#125;\n        //7.外部类想要访问内部类的东西，需要创建内部类的对象然后进行调用\n        D d = new D();\n        System.out.println(d.name);\n        d.method();\n\n    &#125;\n    static&#123;\n        System.out.println(&quot;这是静态块&quot;);\n    &#125;\n    &#123;\n        System.out.println(&quot;这是构造块&quot;);\n    &#125;\n    //构造器：\n    public TestOuter()&#123;\n        class C&#123;\n\n        &#125;\n    &#125;\n\n    public TestOuter(int age) &#123;\n        this.age = age;\n    &#125;\n&#125;\n\nclass Demo&#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //创建外部类的对象：\n        TestOuter to = new TestOuter();\n        to.a();\n\n        //9.创建内部类的对象：\n        //静态的成员内部类创建对象：\n        TestOuter.E e = new TestOuter.E();\n        //非静态的成员内部类创建对象：\n        //错误：TestOuter.D d = new TestOuter.D();\n        TestOuter t = new TestOuter();\n        TestOuter.D d = t.new D();\n\n    &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h2><ol>\n<li></li>\n</ol>\n<pre><code class=\"java\">public class TestOuter &#123;\n    //1.在局部内部类中访问到的变量必须是被final修饰的\n    public void method()&#123;\n        final int num = 10;\n        class A&#123;\n            public void a()&#123;\n                //num = 20;\n                System.out.println(num);\n            &#125;\n        &#125;\n    &#125;\n    //2.如果类B在整个项目中只使用一次，那么就没有必要单独创建一个B类，使用内部类就可以了\n    public Comparable method2()&#123;\n        class B implements Comparable&#123;\n            @Override\n            public int compareTo(Object o) &#123;\n                return 100;\n            &#125;\n        &#125;\n        return new B();\n    &#125;\n\n    public Comparable method3()&#123;\n        //3.匿名内部类\n        return new Comparable()&#123;\n\n            @Override\n            public int compareTo(Object o) &#123;\n                return 200;\n            &#125;\n        &#125;;\n    &#125;\n\n    public void teat()&#123;\n        Comparable com = new Comparable()&#123;\n\n            @Override\n            public int compareTo(Object o) &#123;\n                return 200;\n            &#125;\n        &#125;;\n\n        System.out.println(com.compareTo(&quot;abc&quot;));\n    &#125;\n&#125;\n\n</code></pre>\n<h1 id=\"面向对象项目\"><a href=\"#面向对象项目\" class=\"headerlink\" title=\"面向对象项目\"></a>面向对象项目</h1><h2 id=\"项目需求\"><a href=\"#项目需求\" class=\"headerlink\" title=\"项目需求\"></a>项目需求</h2><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/55242c8d1c966467d3474bfd5be55072.png\" class=\"\">\n\n\n<h2 id=\"项目结构分析\"><a href=\"#项目结构分析\" class=\"headerlink\" title=\"项目结构分析\"></a>项目结构分析</h2><img data-src=\"/2022/10/07/Java/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/71e9407d4bd6fa1ac73e649f555944d3.png\" class=\"\">\n\n\n<h2 id=\"最终代码\"><a href=\"#最终代码\" class=\"headerlink\" title=\"最终代码\"></a>最终代码</h2><p>匹萨父类：</p>\n<pre><code class=\"java\">public class Pizza &#123;\n    //属性\n    private String name;//名称\n    private int size;//大小\n    private int price;//价格\n\n    //方法\n\n    public String getName() &#123;\n        return name;\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public int getSize() &#123;\n        return size;\n    &#125;\n\n    public void setSize(int size) &#123;\n        this.size = size;\n    &#125;\n\n    public int getPrice() &#123;\n        return price;\n    &#125;\n\n    public void setPrice(int price) &#123;\n        this.price = price;\n    &#125;\n\n    //展示匹萨信息：\n    public String showPizza()&#123;\n        return &quot;匹萨的名字是：&quot;+name+&quot;\\\\n匹萨的大小是：&quot;+size+&quot;寸\\\\n匹萨的价格：&quot;+price+&quot;元&quot;;\n    &#125;\n\n\n    //构造器\n\n    public Pizza() &#123;\n    &#125;\n\n    public Pizza(String name, int size, int price) &#123;\n        this.name = name;\n        this.size = size;\n        this.price = price;\n    &#125;\n&#125;\n\n</code></pre>\n<p>培根匹萨：</p>\n<pre><code class=\"java\">public class BaconPizza extends Pizza &#123;\n    //属性：\n    private int weight;\n\n    public int getWeight() &#123;\n        return weight;\n    &#125;\n\n    public void setWeight(int weight) &#123;\n        this.weight = weight;\n    &#125;\n\n    //构造器：\n\n    public BaconPizza() &#123;\n    &#125;\n\n    public BaconPizza(String name, int size, int price, int weight) &#123;\n        super(name, size, price);\n        this.weight = weight;\n    &#125;\n\n    //重写父类showPizza方法：\n\n    @Override\n    public String showPizza() &#123;\n        return super.showPizza()+&quot;\\\\n培根的克数是：&quot;+weight+&quot;克&quot;;\n    &#125;\n&#125;\n\n</code></pre>\n<p>水果匹萨：</p>\n<pre><code class=\"java\">public class FruitsPizza extends Pizza&#123;\n    //属性：\n    private String burdening;\n\n    public String getBurdening() &#123;\n        return burdening;\n    &#125;\n\n    public void setBurdening(String burdening) &#123;\n        this.burdening = burdening;\n    &#125;\n\n    //构造器：\n\n    public FruitsPizza() &#123;\n    &#125;\n\n    public FruitsPizza(String name, int size, int price, String burdening) &#123;\n        super(name, size, price);\n        this.burdening = burdening;\n    &#125;\n\n    //重写父类showPizza方法：\n\n    @Override\n    public String showPizza() &#123;\n        return super.showPizza()+&quot;\\\\n你要加入的水果：&quot;+burdening;\n    &#125;\n&#125;\n\n</code></pre>\n<p>测试类：</p>\n<pre><code class=\"java\">public class Test &#123;\n    //这是一个main方法，是程序的入口：\n    public static void main(String[] args) &#123;\n        //选择购买匹萨：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请选择你想要购买的匹萨（1.培根匹萨 2.水果匹萨）:&quot;);\n        int choice = sc.nextInt();//选择\n        //通过工厂获取匹萨：\n        Pizza pizza = PizzaStore.getPizza(choice);\n        System.out.println(pizza.showPizza());\n\n    &#125;\n&#125;\n\n</code></pre>\n<p>工厂类：</p>\n<pre><code class=\"java\">import java.util.Scanner;\n\n\npublic class PizzaStore &#123;\n    public static Pizza getPizza(int choice)&#123;\n        Scanner sc = new Scanner(System.in);\n        Pizza p = null;\n        switch (choice)&#123;\n            case 1:\n                &#123;\n                    System.out.println(&quot;请录入培根的克数：&quot;);\n                    int weight = sc.nextInt();\n                    System.out.println(&quot;请录入匹萨的大小：&quot;);\n                    int size = sc.nextInt();\n                    System.out.println(&quot;请录入匹萨的价格：&quot;);\n                    int price = sc.nextInt();\n                    //将录入的信息封装为培根匹萨的对象：\n                    BaconPizza bp = new BaconPizza(&quot;培根匹萨&quot;,size,price,weight);\n                    p = bp;\n                &#125;\n                break;\n            case 2:\n                &#123;\n                    System.out.println(&quot;请录入你想要加入的水果：&quot;);\n                    String burdening = sc.next();\n                    System.out.println(&quot;请录入匹萨的大小：&quot;);\n                    int size = sc.nextInt();\n                    System.out.println(&quot;请录入匹萨的价格：&quot;);\n                    int price = sc.nextInt();\n                    //将录入的信息封装为水果匹萨的对象：\n                    FruitsPizza fp = new FruitsPizza(&quot;水果匹萨&quot;,size,price,burdening);\n                    p = fp;\n                &#125;\n                break;\n        &#125;\n        return p;\n    &#125;\n&#125;\n\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}