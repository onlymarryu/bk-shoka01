{
    "version": "https://jsonfeed.org/version/1",
    "title": "雾都博客 • All posts by \"springboot\" category",
    "description": "记录美食每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/SpringBoot/",
            "url": "http://example.com/2022/10/07/SpringBoot/",
            "title": "SpringBoot",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<h2 id=\"原有spring优缺点分析\"><a class=\"anchor\" href=\"#原有spring优缺点分析\">#</a> 原有 Spring 优缺点分析</h2>\n<p>优点：</p>\n<blockquote>\n<p>Spring 是 Java 企业版（JAVAEE) 开发的一种相对简单的方法，通过依赖注入和面向切面编程，用简单 的 Java 对象实现了 EJB==(Enterprise Java Beans 技术的简称，又被称为企业 Java Beans)== 的功能</p>\n</blockquote>\n<p>缺点：</p>\n<ul>\n<li>虽然 Spring 的组件<strong>代码是轻量级</strong>的，但它的<strong>配置却是重量级</strong>的</li>\n<li><strong>依赖管理</strong>也是一件耗时耗力的事情，会产生版本不兼容的问题</li>\n</ul>\n<h2 id=\"springboot概念简介\"><a class=\"anchor\" href=\"#springboot概念简介\">#</a> SpringBoot 概念简介</h2>\n<blockquote>\n<p>Spring Boot 是 Spring 公司的一个顶级项目，和 Spring Framework 是一个级别的。<br />\nSpring Boot 实际上是利用 Spring Framework 4 自动配置特性完成。编写项目时不需要编写 xml 文件。发展到现在，Spring Boot 已经具有很很大的生态圈，各种主流技术已经都提供了 Spring Boot 的启动器。</p>\n</blockquote>\n<h2 id=\"什么是启动器\"><a class=\"anchor\" href=\"#什么是启动器\">#</a> 什么是启动器</h2>\n<blockquote>\n<p>Spring 框架在项目中作用是 Spring 整合各种其他技术，让其他技术使用更加方便。Spring Boot 的启动器<strong>实际上就是一个依赖</strong>。这个依赖中包含了整个这个技术的相关 jar 包，还包含了这个技术的自动配置，以前绝大多数 XML 配置都不需要配置了。当然了，启动器中自动配置无法实现所有内容的自动配置，在使用 Spring Boot 时还需要进行少量的配置（这个配置不是在 xml 中了，而是在 properties 或 yml 中即可）。如果是<strong> Spring 自己封装的启动器</strong>的 artifact id<strong> 名字满足：spring-boot-starter-<em>xxxx</em></strong>，如果是<strong>第三方公司提供的启动</strong>满足：<strong><em>xxxx</em>-spring-boot-starter</strong>。以后每次使用 Spring Boot 整合其他技术时首先需要考虑导入启动器。</p>\n</blockquote>\n<h1 id=\"spring-boot优点\"><a class=\"anchor\" href=\"#spring-boot优点\">#</a> Spring Boot 优点</h1>\n<p>①　使用 Spring Boot 可以创建独立的 Spring 应用程序<br />\n②　在 Spring Boot 中<strong>直接嵌入了 Tomcat</strong>、Jetty、Undertow 等 Web  容器，在使用 SpringBoot 做 Web 开发时<strong>不需要部署 WAR 文件</strong><br />\n③　通过提供自己的启动器 (Starter) 依赖，简化项目构建配置<br />\n④　尽量的自动配置 Spring 和第三方库<br />\n⑤　绝对没有代码生成，也不需要 XML 配置文件</p>\n<h1 id=\"spring-boot的核心\"><a class=\"anchor\" href=\"#spring-boot的核心\">#</a> Spring Boot 的核心</h1>\n<p><strong>起步依赖</strong>：起步依赖本质上是一个 Maven 项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。 简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。</p>\n<p><strong>自动配置</strong> ：Spring Boot 的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定 Spring 配置应该用哪个，不该用哪个。该过程是 Spring 自动完成的。</p>\n<h1 id=\"启动原理分析\"><a class=\"anchor\" href=\"#启动原理分析\">#</a> 启动原理分析</h1>\n<p><img data-src=\"/2022/10/07/SpringBoot/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE.jpg\" class=\"\"></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Registrar</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ImportBeanDefinitionRegistrar</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DeterminableImports</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">registerBeanDefinitions</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> metadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BeanDefinitionRegistry</span> registry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">register</span><span class=\"token punctuation\">(</span>registry<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PackageImports</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPackageNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">determineImports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> metadata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">singleton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PackageImports</span><span class=\"token punctuation\">(</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>将配置类 @SpringBootApplication 标注的类所在包及下面所有子包里的所有组件扫描到 spring 容器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCandidateConfigurations</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AnnotationMetadata</span> metadata<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AnnotationAttributes</span> attributes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> configurations <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringFactoriesLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadFactoryNames</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSpringFactoriesLoaderFactoryClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t\t<span class=\"token function\">getBeanClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notEmpty</span><span class=\"token punctuation\">(</span>configurations<span class=\"token punctuation\">,</span> <span class=\"token string\">\"No auto configuration classes found in META-INF/spring.factories. If you \"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token string\">\"are using a custom packaging, make sure that file is correct.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> configurations<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>通过 getCandidateConfigurations 读取自带的配置文件，得到他们的全路径名，通过反射创建他们</strong></p>\n<h1 id=\"异常处理和拦截器\"><a class=\"anchor\" href=\"#异常处理和拦截器\">#</a> 异常处理和拦截器</h1>\n<p><strong>均与 SpringMVC 中处理一致</strong></p>\n<h1 id=\"分页\"><a class=\"anchor\" href=\"#分页\">#</a> 分页</h1>\n<p>主要参数：</p>\n<p>当前页 、一页 n 个 (每页的数量)、 总条数</p>\n<h2 id=\"属性介绍\"><a class=\"anchor\" href=\"#属性介绍\">#</a> 属性介绍</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性名</th>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">默认值</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">overflow</td>\n<td style=\"text-align:center\">boolean</td>\n<td style=\"text-align:center\">false</td>\n<td style=\"text-align:center\">溢出总页数后是否进行处理 &lt;br/&gt;(默认不处理，参见  <code>插件#continuePage</code>  方法)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">maxLimit</td>\n<td style=\"text-align:center\">Long</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">单页分页条数限制 &lt;br/&gt;(默认无限制，参见  <code>插件#handlerLimit</code>  方法)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dbType</td>\n<td style=\"text-align:center\">DbType</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">数据库类型 &lt;br/&gt;(根据类型获取应使用的分页方言，参见  <code>插件#findIDialect</code>  方法)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dialect</td>\n<td style=\"text-align:center\">IDialect</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">方言实现类 &lt;br/&gt;(参见  <code>插件#findIDialect</code>  方法)</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>建议单一数据库类型的均设置 dbType</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/test\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Response</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Produce</span><span class=\"token punctuation\">></span></span> producePage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Page</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Produce</span><span class=\"token punctuation\">></span></span> page <span class=\"token operator\">=</span> produceService<span class=\"token punctuation\">.</span><span class=\"token function\">page</span><span class=\"token punctuation\">(</span>producePage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>producePage <span class=\"token operator\">==</span> page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Produce</span><span class=\"token punctuation\">></span></span> records <span class=\"token operator\">=</span> page<span class=\"token punctuation\">.</span><span class=\"token function\">getRecords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Produce</span> record <span class=\"token operator\">:</span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResultEnum</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SUCCESS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/SpringBoot/656c18aaaf9ed11fee9b9f1576cc840f.png\" class=\"\"></p>\n<p>默认是会查询总条数，都有 get、set 方法，可以根据自己的需求设置（点开 Page 类看看）</p>\n<p><img data-src=\"/2022/10/07/SpringBoot/d0e0280ca8a9d46a4a41c4a1de89ab3c.png\" class=\"\"></p>\n<h1 id=\"项目打包和部署\"><a class=\"anchor\" href=\"#项目打包和部署\">#</a> 项目打包和部署</h1>\n<h2 id=\"打包\"><a class=\"anchor\" href=\"#打包\">#</a> 打包</h2>\n<p>SpringBoot 项目打包在 linux 服务器中运行:<br />\n①jar 类型项目会打成 jar 包:<br />\njar 类型项目使用 SpringBoot 打包插件打包时，会在打成的 jar 中内置一个 tomcat 的 jar。所以我们可以使用 jdk 直接运行该 jar 项目可，jar 项目中有一个功能，将功能代码放到其内置的 tomcat 中运行。我们直接使用浏览器访问即可。<br />\n②war 类型项目会打成 war 包:<br />\n 在打包时需要将内置的 tomcat 插件排除，配置 servlet 的依赖。将 war 正常的放到 tomcat 服务器中运行即可。</p>\n<p><img data-src=\"/2022/10/07/SpringBoot/image-20220718170542347.png\" class=\"\"></p>\n<h2 id=\"部署\"><a class=\"anchor\" href=\"#部署\">#</a> 部署</h2>\n<p><strong>注：这里是部署到 Tomcat（war），jar 直接编译启动</strong></p>\n<h3 id=\"第一步\"><a class=\"anchor\" href=\"#第一步\">#</a> 第一步：</h3>\n<pre><code>在部署到Tomcat 之前我们要将我们项目中的Tomcat(==它在Web中==)去掉，但是我们在项目中又有可能要使用他提供的jar包 HttpServlet 之类的，所以我们还需要再将它手动导入，但是他不需要他打包。\n</code></pre>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 配置 SpringBoot 的 web 启动器 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-web<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 排除 web 启动中自动依赖的 tomcat 插件 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">&lt;!--</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    手动依赖 tomcat 插件，但是表明项目打包时该依赖不会被打进去，目的主要是保证开发阶段本地 SpringBoot</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    项目可以正常运行</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>--></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-tomcat<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        相当于 compile，但是打包阶段做了 exclude 操作 --></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>provided<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"第二步\"><a class=\"anchor\" href=\"#第二步\">#</a> 第二步：</h3>\n<p>SpringBoot 的<strong>启动类继承 SpringBootServletInitializer</strong>，并<strong>重写 configure</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyApplication</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SpringBootServletInitializer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 重写配置方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">SpringApplicationBuilder</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SpringApplicationBuilder</span> application<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> application<span class=\"token punctuation\">.</span><span class=\"token function\">sources</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 启动 SpringBoot</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 package 命令打包项目，并将 war 包放到 tomcat 下的 webapps 下，启动 tomcat 即可。</p>\n<h3 id=\"注\"><a class=\"anchor\" href=\"#注\">#</a> 注：</h3>\n<ul>\n<li>部署到 tomcat 之后我们的 URL 就会变化，tomcat 会自动编译 war 包，我们的<strong>项目名和 war 包同名</strong>，所以不想改变提前修改</li>\n<li><strong>端口号也是 tomcat 的端口号</strong>（tomcat/conf/server.xml）</li>\n</ul>\n<h1 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题</h1>\n<h2 id=\"springboot约定大于配置理解\"><a class=\"anchor\" href=\"#springboot约定大于配置理解\">#</a> SpringBoot 约定大于配置理解</h2>\n<p>约定大于配置是一种开发原则，就是减少人为的配置，直接用默认的配置就能获得我们想要的结果。<br />\n　　SpringBoot 的约定大于配置，按我的理解是：对比 SpringMVC，需要在 web.xml 里面配置前端控制器，还需要在核心配置文件（*-servlet.xml）中配置视图解析器啥的，更要配置第三方的 Tomcat 服务器。而 SpringBoot 就不需要我们配置这些，他内嵌了 Tomcat 服务器，我们只需要在 Maven 配置文件（Pom.xml）里面导入 SpringMVC 所需要的依赖就可以了。<br />\n　　这就是 SpringBoot 的优势，在传统所需要配置的地方，SpringBoot 都进行了约定（配置好了），开发人员能配置得更少，更直接地开发项目，写业务逻辑代码。<br />\nspring boot 和 maven 的约定大于配置体现 点：<br />\n　　1.maven 的目录文件结构<br />\n　　1）默认有 resources 文件夹，存放资源配置文件。src-main-resources,src-main-java<br />\n 默认的编译生成的类都在 targetwen。<br />\n　　2）默认有 target 文件夹，将生成 class 文件盒编程生成的 jar 存放在 target 文件夹下</p>\n<p>2.spring boot 默认的配置文件必须是，也只能是 application. 命名的 yml 文件或者 properties 文件，且唯一</p>\n<p>1）spring boot 默认只会去 src-main-resources 文件夹下去找 application 配置文件</p>\n<p>这个问题呢，我从四个方面来回答。</p>\n<p>首先，约定优于配置是一种软件设计的范式，它的核心思想，是减少软件开发人员对于配置项的。从而让开发人员更加聚焦在业务逻辑上</p>\n<p>第二个呢，Spring boot 就是约定优于配置这一理念下的产物，它类似于 spring 框架下的一个脚手架，通过 spring boot，我们可以快速开发基于 spring 生态下的应用程序。基于传统的 spring 框架开发 web 应用的时候，我们需要做很多和业务无关，并且只需要做一次的配置项，比如</p>\n<ol>\n<li>\n<p>管理架包的依赖</p>\n</li>\n<li>\n<p>web.xml 的维护</p>\n</li>\n<li>\n<p>spring MVC 中的一个叫 Dispatch-Servlet.x ml 配置项的一个维护</p>\n</li>\n<li>\n<p>应用需要自己手动去部署到 web 容器</p>\n</li>\n<li>\n<p>第三方组件集成到 spring IOC 容器中，我们需要做配置项的维护</p>\n</li>\n</ol>\n<p>而在 SpringBoot 中，我们不再需要去做这些繁琐的配置，因为 SpringBoot 已经帮我们自动完成了，而完成这样一个动作的前提就是基于<mark>约定优于配置</mark>这样一个思想。</p>\n<p>最后呢，Spring boot 约定优于配置的体现有很多，</p>\n<p>比如第一个 spring boat start 启动依赖，它能够帮助我们管理所有的 jar 包版本。</p>\n<p>第二个，如果当前的应用依赖了 web 这样一个 jar 包，那么 spring boot 会自动内置 Tomcat，他们看着容器来去运行 web 应用，我们不再需要去单独进行应用部署。</p>\n<p>第三，Spring boot 的自动装配机制的实现中，通过扫描约定路径下的 spring.factory 文件去进行识别配置类，从而去实现类的自动装载</p>\n<p>第四，Spring boot？默认会加载 resource 目录下的 application.property 文件。总的来说啊，约定优于配置呢，是一个比较常见的软件设计思想，它的核心本质都是为了去更加高效，以及更加便捷的去实现软件系统的开发和维护。</p>\n<p><strong>自我总结：</strong></p>\n<p>​\t约定大于配置，不是说我们要设定啥，原来规定的是什么就不能改变，不是这个意思。他真正的意思是说当我们配置某个选项时，springboot 会自动帮我们加载可能会与其相关的配置，就好比我们应用依赖了 web，那么 spring boot 会自动内置 Tomcat，他们看着容器来去运行 web 应用，我们不再需要去单独进行应用部署。</p>\n<p>​\t总的来说啊，约定优于配置呢，是一个比较常见的软件设计思想，它的核心本质都是为了去更加高效，以及更加便捷的去实现软件系统的开发和维护。</p>\n",
            "tags": [
                "框架",
                "Spring",
                "SpringBoot"
            ]
        }
    ]
}