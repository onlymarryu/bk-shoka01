{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"数据类型\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/%E7%AC%AC2%E7%AB%A0_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "http://example.com/2022/10/07/%E7%AC%AC2%E7%AB%A0_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "第2章_数据类型",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h1><p><strong>【1】标识符：读音 biao zhi fu</strong></p>\n<p><strong>【2】什么是标识符？</strong></p>\n<p>包，类，变量，方法…..等等,只要是起名字的地方,那个<strong>名字</strong>就是标识符</p>\n<p><strong>【3】标识符定义规则：</strong></p>\n<p>1.四个可以（组成部分）：数字，字母，下划线_，美元符号$</p>\n<p>注意：字母概念比较宽泛，指的是英文字母，汉字，日语，俄语……</p>\n<p>但是我们一般起名字尽量使用英文字母</p>\n<p>2.两个不可以：不可以以数字开头，不可以使用java中的关键字</p>\n<p>3.见名知意：增加可读性</p>\n<p><strong>4.大小写敏感</strong>： int a ; int A;</p>\n<p><strong>5.遵照驼峰命名：</strong></p>\n<p>类名：首字母大写，其余遵循驼峰命名</p>\n<p>方法名，变量名：首字母小写，其余遵循驼峰命名</p>\n<p>包名：全部小写，不遵循驼峰命名</p>\n<p><strong>6.长度无限制，但是不建议太长 asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd</strong></p>\n<h1 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h1><p><strong>关键字：</strong>被JAVA语言赋予了特殊含义，用作专门用途的单词</p>\n<p>特点：JAVA中所有关键字都为小写</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2phdmEvbnV0c2FuZGJvbHRzL19rZXl3b3Jkcy5odG1s\">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</span></p>\n\n\n\n\n\n\n<h1 id=\"变量和常量\"><a href=\"#变量和常量\" class=\"headerlink\" title=\"变量和常量\"></a>变量和常量</h1><p>举例：</p>\n<p>丽丽的年龄：去年17岁，今年18岁，明年19岁</p>\n<p>年龄：17–》18—》19 –》值不断变化</p>\n<p>年龄—》变量</p>\n<p>常量： 17 ， 18 ， 19 —-》 常量中的字面常量</p>\n<h2 id=\"字面常量\"><a href=\"#字面常量\" class=\"headerlink\" title=\"字面常量\"></a>字面常量</h2><p><strong>常量分为两种：</strong></p>\n<p>常量通常指的是一个固定的值，例如：1、2、3、’a’、’b’、true、false、”helloWorld”等。</p>\n<p>在Java语言中，主要是利用关键字final来定义一个常量。 常量一旦被初始化后不能再更改其值。</p>\n<p>为了更好的区分和表述，一般将1、2、3、’a’、’b’、true、false、”helloWorld”等称为字面常量，而使用final修饰的PI等称为符号常量（字符常量）。</p>\n<p><strong>字面常量的类型：</strong></p>\n\n\n\n<p>注意：逻辑常量就两个值，一个是true，一个是false</p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>变量本质上就是代表一个”可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可通过变量名来访问“对应的存储空间”，从而操纵这个“存储空间”存储的值。Java是一种强类型语言，每个变量都必须声明其数据类型。变量的数据类型决定了变量占据存储空间的大小。 比如，int a&#x3D;3; 表示a变量的空间大小为4个字节。变量作为程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储空间。</p>\n<p>【1】变量声明格式：</p>\n<p>type varName [&#x3D;value][,varName[&#x3D;value]…]; &#x2F;&#x2F;[ ]中的内容为可选项，即可有可无</p>\n<p>数据类型 变量名 [&#x3D;初始值] [,变量名 [&#x3D;初始值]…];</p>\n<p>案例：</p>\n<p>int age &#x3D; 19 , age2 &#x3D; 90 ;</p>\n<p>int age,age2;</p>\n<p>【2】变量的声明：</p>\n<p>（1）如果你只定义一个变量，没有给变量进行赋值的话，那么其实这个变量相当于没有定义：</p>\n\n\n\n<p>（2）变量如果没有进行赋值的话，那么使用的时候会出错，告诉你：尚未初始化变量：</p>\n\n\n\n<p>【3】变量的赋值：</p>\n\n\n\n<p>我们自己定义的时候直接就可以用一句话定义：</p>\n<p>int age &#x3D; 10;</p>\n<p>变量的值可以更改：</p>\n<pre><code class=\"java\">public class TestVar01&#123;\n    public static void main(String[] args)&#123;\n        //变量的声明（定义变量）（以年龄为案例讲解）\n        //java是一个强类型的语言，只要声明变量就必须定义类型：定义整数类型\n        int age ; //定义一个整数类型的变量，变量名字为age\n        //对变量进行赋值操作：\n        age = 10; //变量名字为age，具体的值为10\n        age = 12;\n        age = 20;\n        age = age + 4;\n        age = 9;\n        age = 9;\n        System.out.println(age);\n        \n    &#125;\n&#125;\n</code></pre>\n<p>变量不可以重复定义：</p>\n\n\n\n<p>【4】变量的使用：</p>\n<pre><code class=\"java\">public class TestVar01&#123;\n    public static void main(String[] args)&#123;\n        //变量的声明（定义变量）（以年龄为案例讲解）\n        //java是一个强类型的语言，只要声明变量就必须定义类型：定义整数类型\n        int age ; //定义一个整数类型的变量，变量名字为age\n        //对变量进行赋值操作：\n        age = 10; //变量名字为age，具体的值为10\n        age = 12;\n        age = 20;\n        age = age + 4;\n        age = 9;\n        age = 9;\n        System.out.println(age);\n        System.out.println(age-2);\n        System.out.println(age+10);\n        int num = age + 66;\n        System.out.println(num);\n        \n    &#125;\n&#125;\n</code></pre>\n<p>扩展：</p>\n<pre><code class=\"java\">public class TestVar02&#123;\n    public static void main(String[] args)&#123;\n        int a = 10;\n        int b = 20;\n        int c = a + b ;\n    &#125;\n&#125;\n</code></pre>\n<p>现在对上述代码进行“反编译过程”“反汇编过程”</p>\n\n\n\n\n\n\n<p>【5】变量的内存：</p>\n\n\n\n<p>【6】习题：</p>\n<pre><code class=\"java\">public class TestVar03&#123;\n    public static void main(String[] args)&#123;\n        int num1 = 10;\n        int num2 = 20;\n        num1 = num2;\n        num2 = num2 + 10;\n        num1 = num2 - 10;\n        num2 = num1;\n        System.out.println(&quot;num1=&quot;+num1);\n        System.out.println(&quot;num2=&quot;+num2);\n    &#125;\n&#125;\n</code></pre>\n<p>内存分析：</p>\n\n\n\n<p>结果：</p>\n\n\n\n<p>【7】变量的作用域：</p>\n<p>作用域指的就是作用范围，变量在什么范围中有效</p>\n<p>作用范围就是离它最近的{}</p>\n<p>备注：一会我们写的代码，不要去运行，会出错</p>\n<pre><code class=\"java\">/\\*\n    局部变量：定义在方法中\n    成员变量：定义在类中，方法外\n    \\*/\npublic class TestVar04&#123;\n    int b = 20;\n    public static void main(String[] args)&#123;\n        System.out.println(a);//no\n        int a = 10;\n        System.out.println(a);//yes\n        System.out.println(b);//yes\n        &#123;\n            int c = 40;\n            System.out.println(c);//yes\n            int a = 50;//属于变量的重复定义\n        &#125;\n        System.out.println(c);//no\n    &#125;\n\n    public void eat()&#123;\n        System.out.println(b);//yes\n        System.out.println(a);//no\n        int a = 30;//不是变量的重复定义\n        System.out.println(a);//yes\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h1><p>Java是一种强类型语言，每个变量都必须声明其数据类型。</p>\n<p>Java的数据类型可分为两大类：基本数据类型（primitive data type）和引用数据类型（reference data type）。</p>\n\n\n\n<p>PS:巧妙记忆：除了基本数据类型以外的所有类型都属于引用数据类型，本章重点：基本数据类型</p>\n<h2 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h2><h3 id=\"整数类型常量\"><a href=\"#整数类型常量\" class=\"headerlink\" title=\"整数类型常量\"></a>整数类型常量</h3><p>十进制整数，如：99, -500, 0</p>\n<p>八进制整数，要求以 0 开头，如：015</p>\n<p>十六进制数，要求 0x 或 0X 开头，如：0x15</p>\n<p>二进制：要求0b或者0B开头，如：0b11</p>\n<p>几进制：就是逢几进1的问题：</p>\n<p>平时实际生活中用的最多的是：十进制</p>\n<p>计算机用二进制最多</p>\n\n\n\n<p>扩展：进制转换问题</p>\n<p>【1】二进制转换为十进制：</p>\n<p>二进制： 1101</p>\n<p>1*2^3 + 1*2^2 + 0*2^1 + 1*2^0</p>\n<p>&#x3D; 8 + 4 + 0 + 1</p>\n<p>&#x3D; 13</p>\n<p>【2】十进制转换为二进制：</p>\n<p>十进制 13</p>\n\n\n\n<p>【3】八进制转换十进制：</p>\n<p>八进制： 16</p>\n<p>1*8^1 + 6*8^0</p>\n<p>&#x3D; 8 + 6</p>\n<p>&#x3D;14</p>\n<p>【4】十进制转换为八进制：</p>\n<p>十进制14：</p>\n\n\n\n<p>【5】八进制转换为十六进制：</p>\n<p>把十进制当做一个中转站：</p>\n<p>八进制—》十进制—》十六进制</p>\n<p>实际上根本不用自己转换这么麻烦：我们可以直接用系统中提供给我们的计算器：</p>\n\n\n\n<h3 id=\"整数类型变量\"><a href=\"#整数类型变量\" class=\"headerlink\" title=\"整数类型变量\"></a>整数类型变量</h3><p><strong>整型数据类型：</strong></p>\n\n\n\n<p>比如：byte的右侧表数范围127怎么算出来的？</p>\n<p>byte: 1字节 &#x3D; 8位</p>\n<p>二进制：01111111</p>\n<p>1*2^6 + 1*2^5 + 1*2^4 + 1*2^3 + 1*2^2 + 1*2^1 + 1*2^0</p>\n<p>&#x3D; 64 + 32 + 16 +8 +4 + 2 +1</p>\n<p>&#x3D; 127</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestVar05&#123;\n    public static void main(String[] args)&#123;\n        //定义整数类型的变量：\n        //给变量赋值的时候，值可以为不同进制的：\n        int num1 = 12 ;//默认情况下赋值就是十进制的情况\n        System.out.println(num1);\n        int num2 = 012;//前面加上0，这个值就是八进制的\n        System.out.println(num2);\n        int num3 = 0x12;//前面加上0x或者0X，这个值就是十六进制的\n        System.out.println(num3);\n        int num4 = 0b10;//前面加上0b或者0B,这个值就是二进制的\n        System.out.println(num4);\n        \n        //定义byte类型的变量：\n        byte b = 126;//定义了一个byte类型的变量，名字叫b，赋值为12\n        System.out.println(b);\n        //注意：超范围的赋值会报错。\n        short s = 30000;\n        System.out.println(s);\n        int i = 1234;\n        System.out.println(i);\n        //整数类型默认就是int类型的，所以12345678910是一个int类型的数，对于int类型来说，它超出范围了\n        //要想把一个数给long类型变量，那么后面加上L(推荐)或者l就可以了\n        long num5 = 12345678910L;\n        System.out.println(num5);\n        //注意：只有这个数超出int类型的范围了后面才需要加上L，否则无需加L也可以赋值给long类型：\n        long num6 = 12;\n        System.out.println(num6);\n        \n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"浮点类型\"><a href=\"#浮点类型\" class=\"headerlink\" title=\"浮点类型\"></a>浮点类型</h2><h3 id=\"浮点类型常量\"><a href=\"#浮点类型常量\" class=\"headerlink\" title=\"浮点类型常量\"></a>浮点类型常量</h3><p>（1）十进制数形式，例如:</p>\n<p>3.14 314.0 0.314</p>\n<p>（2）科学记数法形式，如</p>\n<p>314e2 314E2 (E的大小写没有区分) 314E-2</p>\n<p>double f &#x3D; 314e2; &#x2F;&#x2F;314*10^2–&gt;31400.0</p>\n<p>double f2 &#x3D; 314e-2; &#x2F;&#x2F;314*10^(-2)–&gt;3.14</p>\n<h3 id=\"浮点类型变量\"><a href=\"#浮点类型变量\" class=\"headerlink\" title=\"浮点类型变量\"></a>浮点类型变量</h3><p>float类型又被称作单精度类型，尾数可以精确到7位有效数字，在很多情况下，float类型的精度很难满足需求。</p>\n<p>而double表示这种类型的数值精度约是float类型的两倍，又被称作双精度类型，绝大部分应用程序都采用double类型。</p>\n<p>float类型的数值有一个后缀F或者f ，没有后缀F&#x2F;f的浮点数值默认为double类型。</p>\n<p>也可以在浮点数值后添加后缀D或者d， 以明确其为double类型。</p>\n\n\n\n<p>PS：有效数字指的是从左开始第一个不为0的数到最后一个数</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestVar06&#123;\n    public static void main(String[] args)&#123;\n        //浮点类型的常量有两种形式：\n        //十进制形式：\n        double num1 = 3.14;\n        System.out.println(num1);\n        //科学计数法形式：\n        double num2 = 314E-2;\n        System.out.println(num2);\n        \n        //浮点类型的变量：\n        //注意：浮点型默认是double类型的，要想将一个double类型的数赋给float类型，必须后面加上F或者f\n        float f1 = 3.14234567898623F;\n        System.out.println(f1);\n        //注意：double类型后面可以加D或者d，但是一般我们都省略不写\n        double d1 = 3.14234567898623D;\n        System.out.println(d1);\n        \n        //注意：我们最好不要进行浮点类型的比较：\n        float f2 = 0.3F;\n        double d2 = 0.3;\n        System.out.println(f2==d2);\n        /\\*\n            区别：\n            = 赋值运算： 将等号右侧的值赋给等号左侧\n            == 判断==左右两侧的值是否相等 ：结果要么相等 要么不相等\n            ==运算符的结果就是要么是true，要么是false\n            \\*/\n            \n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"字符类型\"><a href=\"#字符类型\" class=\"headerlink\" title=\"字符类型\"></a>字符类型</h2><p>【1】Java中使用单引号来表示字符常量，字符型在内存中占2个字节。</p>\n<p>char 类型用来表示在Unicode编码表中的字符。Unicode编码被设计用来处理各种语言的文字，它占2个字节，可允许有65536个字符。</p>\n<p>【2】转义字符：</p>\n\n\n\n<p>【3】ASCII表：</p>\n\n\n\n<p>【4】Unicode编码表：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3NndW8vcC83NDAxODc0Lmh0bWw=\">https://www.cnblogs.com/csguo/p/7401874.html</span></p>\n<p>代码1：</p>\n<pre><code class=\"java\">public class TestVar07&#123;\n    public static void main(String[] args)&#123;\n        //定义字符类型的变量：\n        char ch1 = &#39;a&#39;;\n        System.out.println(ch1);\n        char ch2 = &#39;A&#39;;\n        System.out.println(ch2);\n        char ch3 = &#39;4&#39;;\n        System.out.println(ch3);\n        char ch4 = &#39;中&#39;;\n        System.out.println(ch4);\n        char ch5 = &#39;?&#39;;\n        System.out.println(ch5);\n        //java中无论：字母，数字，符号，中文都是字符类型的常量，都占用2个字节。\n        char ch6 = &#39; &#39;;\n        System.out.println(ch6);\n        //字符类型：单引号引起来的单个字符\n        System.out.println(&quot;--------------------------------&quot;);\n        /\\*\n            转义字符：\n            \\\\将后面的普通字符转换为特殊含义\n            \\*/\n            char ch7 = &#39;\\\\n&#39;;\n        System.out.println(&quot;aaa&quot;+ch7+&quot;bbb&quot;);\n        \n        System.out.println(&quot;aaa\\\\nbbb&quot;);// \\\\n 换行\n        \n        System.out.println(&quot;aaaaaaa\\\\tbbb&quot;); // \\\\t 制表符\n        \n        System.out.println(&quot;aaa\\\\bbbb&quot;);//aabbb \\\\b 向前退一格\n        System.out.println(&quot;aaa\\\\rbbb&quot;);//bbb \\\\r 将光标到本行开头 ：回车\n        \n        System.out.println(&quot;\\\\&quot;java\\\\&quot;&quot;); // \\\\&quot; 将双引号原样输出 \\\\&#39; 将单引号原样输出 \\\\\\\\ 将\\\\原样输出\n    &#125;\n&#125;\n</code></pre>\n<p>代码2：</p>\n<pre><code class=\"java\">public class TestVar08&#123;\n    public static void main(String[] args)&#123;\n        char ch1 = &#39;A&#39;;\n        System.out.println(ch1);//A\n        System.out.println(ch1+90);//155\n        System.out.println(155-ch1);//90\n        //char类型我们看到的样子就是它本身的字面常量,但是底层在进行计算的时候，实际上是按照一个码进行计算的。\n        //这个码就是ASCII\n        //之前说char类型是按照Unicode码表进行存储的 (Unicode兼容了ASCII码，Unicode的前128位置ASCII)\n        \n        char ch2 = &#39;中&#39;;\n        System.out.println(ch2);// 中\n        System.out.println(ch2+90);// 20103\n        System.out.println(20103-ch2);// 90\n        \n        //转换：\n        int num1 = (int)ch2;\n        System.out.println(num1);//20013\n        \n        char ch = (char)20013;\n        System.out.println(ch);\n        \n        int num2 = &#39;中&#39;;\n        char ch5 = 20013;\n        System.out.println(ch5);\n        \n        //面试题：\n        char ch6 = &#39;2&#39;+2;\n        System.out.println(ch6);//&#39;4&#39;---\\&gt;4\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"编码和字符集\"><a href=\"#编码和字符集\" class=\"headerlink\" title=\"编码和字符集\"></a>编码和字符集</h3><p>【1】什么是编码？</p>\n\n\n\n<p>【2】通过生活案例：</p>\n\n\n\n<p>【3】由权威机构形成的编码表才可以称之为：字符集</p>\n<ul>\n<li>ASCII</li>\n</ul>\n<p>英文字符集</p>\n<p>用一个字节的7位表示</p>\n<ul>\n<li>IOS8859-1</li>\n</ul>\n<p>西欧字符集</p>\n<p>用一个字节的8位表示</p>\n<ul>\n<li>GB2312</li>\n</ul>\n<p>简体中文字符集</p>\n<p>最多使用两个字节编码</p>\n<p>PS：中文：2个字节</p>\n<p>GB2312兼容了ASCII中的字符：</p>\n<ul>\n<li>GBK</li>\n</ul>\n<p>GB2312的升级，加入了繁体字</p>\n<p>最多使用两个字节编码</p>\n<p>疑问：</p>\n\n\n\n<p>首位如果是0：一个字节代码代表一个字符</p>\n<p>首位如果是1：那么一个字节不够，要加上后面的字节才能完整的表示一个字符。</p>\n<ul>\n<li>Unicode</li>\n</ul>\n<p>国际通用字符集，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。</p>\n<p>退出了UTF标准：</p>\n<p>三种编码方案： UTF-8，UTF-16,UTF-32</p>\n<p>以UTF-8为案例讲解：</p>\n<p>中文： 珊 —》Unicode ： 29642</p>\n\n\n\n\n\n\n<p>底层存储：</p>\n\n\n\n<p>UTF-8标准最多可以用6个字节表示：</p>\n\n\n\n<p>以后我们用的最多的就是UTF-8.</p>\n<h3 id=\"解释乱码问题\"><a href=\"#解释乱码问题\" class=\"headerlink\" title=\"解释乱码问题\"></a>解释乱码问题</h3>\n\n\n<p>用记事本选择编码方法的时候一般要选择为ANSI—》获取当前操作系统的编码格式：GBK</p>\n<h2 id=\"布尔类型\"><a href=\"#布尔类型\" class=\"headerlink\" title=\"布尔类型\"></a>布尔类型</h2><p>boolean类型有两个常量值，true和false，在内存中占一位（不是一个字节），不可以使用 0 或非 0 的整数替代 true 和 false ，这点和C语言不同。 boolean 类型用来判断逻辑条件，一般用于程序流程控制 。</p>\n<pre><code class=\"java\">public class TestVar09&#123;\n    public static void main(String[] args)&#123;\n        //创建一个布尔类型的变量：\n        boolean flag1 = true;\n        System.out.println(flag1);\n        boolean flag2 = false;\n        System.out.println(flag2);\n        boolean flag3 = 5==9;\n        System.out.println(flag3);\n        boolean flag4 = 5\\&lt;9;\n        System.out.println(flag4);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"基本数据类型的转换\"><a href=\"#基本数据类型的转换\" class=\"headerlink\" title=\"基本数据类型的转换\"></a>基本数据类型的转换</h2><p>【1】什么是类型转换：</p>\n<p>在赋值运算或者算数运算的时候，要求数据类型一致，就要进行类型的转换。</p>\n<p>【2】类型转换的种类：</p>\n<p>自动转换，强制转换</p>\n<p>【3】内存演示：</p>\n\n\n\n<p>【4】代码：</p>\n<pre><code class=\"java\">public class TestVar10&#123;\n    public static void main(String[] args)&#123;\n        //类型转换的两种形式：\n        double d = 6;//int--\\&gt;double 自动类型转换\n        System.out.println(d);\n        int i = (int)6.5;//double---\\&gt;int 强制类型转换 （强转）\n        System.out.println(i);\n        \n        //在同一个表达式中，有多个数据类型的时候，应该如何处理：\n        //多种数据类型参与运算的时候，整数类型，浮点类型，字符类型都可以参与运算，唯独布尔类型不可以参与运算。\n        //double d2 = 12+1294L+8.5F+3.81+&#39;a&#39;+true;\n        double d2 = 12+1294L+8.5F+3.81+&#39;a&#39;;\n        System.out.println(d2);\n        /\\*\n            类型级别：(从低到高的)\n            byte,short,char--\\&gt;int---\\&gt;long---\\&gt;float---\\&gt;double\n            级别用来做什么？当一个表达式中有多种数据类型的时候，要找出当前表达式中级别最高的那个类型，然后\n            其余的类型都转换为当前表达式中级别最高的类型进行计算。\n            double d2 = 12+1294L+8.5F+3.81+&#39;a&#39;;\n        = 12.0+1294.0+8.5+3.81+97.0\n            \\*/\n            int i2 = (int)(12+1294L+8.5F+3.81+&#39;a&#39;);\n        System.out.println(i2);\n        /\\*\n            在进行运算的时候：\n            左=右 : 直接赋值\n                左\\&lt;右 ：强转\n                左\\&gt;右 ：直接自动转换\n                \\*/\n                \n                //以下情况属于特殊情形：对于byte，short，char类型来说，只要在他们的表数范围中，赋值的时候就不需要进行\n                //强转了直接赋值即可。\n                byte b = 12;\n        System.out.println(b);\n        byte b2 = (byte)270;\n        System.out.println(b2);\n        \n        \n        \n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"练习：final，字符常量，Scanner的使用\"><a href=\"#练习：final，字符常量，Scanner的使用\" class=\"headerlink\" title=\"练习：final，字符常量，Scanner的使用\"></a>练习：final，字符常量，Scanner的使用</h2><pre><code class=\"java\">import java.util.Scanner;//形象理解：在java.util下将Scanner拿过来用\npublic class TestVar11&#123;\n    public static void main(String[] args)&#123;\n        //实现功能：求圆的周长和面积\n        //【1】提取变量：提取变量，就是为了一劳永逸，以后只要改变变量的值，下面只要用到这个变量的地方，取值也都发生变化了\n        //【2】一个变量被final修饰，这个变量就变成了一个常量，这个常量的值就不可变了\n        // 这个常量就是我们所说的 字符常量 ---》pi\n        // 约定俗成的规定：字符常量的名字全部大写\n        //【3】使用扫描器：Scanner的使用--》注意通过形象的理解去使用\n        final double PI = 3.14;\n        //拿来一个扫描器：\n        Scanner sc = new Scanner(System.in);\n        //给一个友好性的提示：\n        System.out.print(&quot;请录入一个半径：&quot;);\n        //让扫描器扫描键盘录入的int类型的数据：\n        int r = sc.nextInt();\n        \n        //求周长：\n        double c = 2\\*PI\\*r;\n        System.out.println(&quot;周长为：&quot;+c);\n        \n        //求面积：\n        //PI = 9.29;报错：TestVar11.java:12: 错误: 无法为最终变量pi分配值\n        double s = PI\\*r\\*r;\n        System.out.println(&quot;面积为：&quot;+s);\n        \n        \n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"练习：加深对Scanner的使用\"><a href=\"#练习：加深对Scanner的使用\" class=\"headerlink\" title=\"练习：加深对Scanner的使用\"></a>练习：加深对Scanner的使用</h2>\n\n\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestVar12&#123;\n    public static void main(String[] args)&#123;\n        //键盘录入学生的信息：年龄，身高，姓名，性别：\n        //键盘录入年龄：(接收int类型数据)\n        Scanner sc = new Scanner(System.in);\n        System.out.print(&quot;请录入年龄：&quot;);\n        int age = sc.nextInt();\n        //键盘录入身高：（接收double类型数据）\n        System.out.print(&quot;请录入身高：&quot;);\n        double height = sc.nextDouble();\n        //键盘录入姓名：(接收String类型数据--》字符串)\n        System.out.print(&quot;请录入姓名：&quot;);\n        String name = sc.next();\n        //键盘录入性别：(接受char类型)\n        System.out.print(&quot;请录入性别：&quot;);\n        String sexStr = sc.next();\n        char sex = sexStr.charAt(0);\n        //上面两句可以合为一句表示：char sex = sc.next().charAt(0);\n        System.out.println(&quot;该学生的信息为:姓名是：&quot;+name+&quot;,年龄是：&quot;+age+&quot;,身高为：&quot;+height+&quot;,性别是：&quot;+sex);\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}