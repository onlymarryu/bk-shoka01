<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>记录“美食”每刻 • Posts by &#34;数据类型&#34; category</title>
        <link>http://example.com</link>
        <description>记录“美食”每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>博客</category>
        <category>环境搭建</category>
        <category>分布式</category>
        <category>Dubbo</category>
        <category>FastDFS</category>
        <category>MySQL</category>
        <category>数据库基础</category>
        <category>数据库基本知识</category>
        <category>数据库</category>
        <category>框架</category>
        <category>ORM</category>
        <category>RPC</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>SpringMVC</category>
        <category>SpringSecurity</category>
        <category>JavaSE</category>
        <category>-JavaSE</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/%E7%AC%AC2%E7%AB%A0_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
            <title>第2章_数据类型</title>
            <link>http://example.com/2022/10/07/%E7%AC%AC2%E7%AB%A0_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
            <category>JavaSE</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;标识符&#34;&gt;&lt;a href=&#34;#标识符&#34; class=&#34;headerlink&#34; title=&#34;标识符&#34;&gt;&lt;/a&gt;标识符&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】标识符：读音 biao zhi fu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】什么是标识符？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包，类，变量，方法…..等等,只要是起名字的地方,那个&lt;strong&gt;名字&lt;/strong&gt;就是标识符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】标识符定义规则：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.四个可以（组成部分）：数字，字母，下划线_，美元符号$&lt;/p&gt;
&lt;p&gt;注意：字母概念比较宽泛，指的是英文字母，汉字，日语，俄语……&lt;/p&gt;
&lt;p&gt;但是我们一般起名字尽量使用英文字母&lt;/p&gt;
&lt;p&gt;2.两个不可以：不可以以数字开头，不可以使用java中的关键字&lt;/p&gt;
&lt;p&gt;3.见名知意：增加可读性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.大小写敏感&lt;/strong&gt;： int a ; int A;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.遵照驼峰命名：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类名：首字母大写，其余遵循驼峰命名&lt;/p&gt;
&lt;p&gt;方法名，变量名：首字母小写，其余遵循驼峰命名&lt;/p&gt;
&lt;p&gt;包名：全部小写，不遵循驼峰命名&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.长度无限制，但是不建议太长 asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;关键字&#34;&gt;&lt;a href=&#34;#关键字&#34; class=&#34;headerlink&#34; title=&#34;关键字&#34;&gt;&lt;/a&gt;关键字&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;关键字：&lt;/strong&gt;被JAVA语言赋予了特殊含义，用作专门用途的单词&lt;/p&gt;
&lt;p&gt;特点：JAVA中所有关键字都为小写&lt;/p&gt;
&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2phdmEvbnV0c2FuZGJvbHRzL19rZXl3b3Jkcy5odG1s&#34;&gt;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html&lt;/span&gt;&lt;/p&gt;






&lt;h1 id=&#34;变量和常量&#34;&gt;&lt;a href=&#34;#变量和常量&#34; class=&#34;headerlink&#34; title=&#34;变量和常量&#34;&gt;&lt;/a&gt;变量和常量&lt;/h1&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;丽丽的年龄：去年17岁，今年18岁，明年19岁&lt;/p&gt;
&lt;p&gt;年龄：17–》18—》19 –》值不断变化&lt;/p&gt;
&lt;p&gt;年龄—》变量&lt;/p&gt;
&lt;p&gt;常量： 17 ， 18 ， 19 —-》 常量中的字面常量&lt;/p&gt;
&lt;h2 id=&#34;字面常量&#34;&gt;&lt;a href=&#34;#字面常量&#34; class=&#34;headerlink&#34; title=&#34;字面常量&#34;&gt;&lt;/a&gt;字面常量&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;常量分为两种：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常量通常指的是一个固定的值，例如：1、2、3、’a’、’b’、true、false、”helloWorld”等。&lt;/p&gt;
&lt;p&gt;在Java语言中，主要是利用关键字final来定义一个常量。 常量一旦被初始化后不能再更改其值。&lt;/p&gt;
&lt;p&gt;为了更好的区分和表述，一般将1、2、3、’a’、’b’、true、false、”helloWorld”等称为字面常量，而使用final修饰的PI等称为符号常量（字符常量）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字面常量的类型：&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;注意：逻辑常量就两个值，一个是true，一个是false&lt;/p&gt;
&lt;h2 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;变量本质上就是代表一个”可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可通过变量名来访问“对应的存储空间”，从而操纵这个“存储空间”存储的值。Java是一种强类型语言，每个变量都必须声明其数据类型。变量的数据类型决定了变量占据存储空间的大小。 比如，int a&amp;#x3D;3; 表示a变量的空间大小为4个字节。变量作为程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储空间。&lt;/p&gt;
&lt;p&gt;【1】变量声明格式：&lt;/p&gt;
&lt;p&gt;type varName [&amp;#x3D;value][,varName[&amp;#x3D;value]…]; &amp;#x2F;&amp;#x2F;[ ]中的内容为可选项，即可有可无&lt;/p&gt;
&lt;p&gt;数据类型 变量名 [&amp;#x3D;初始值] [,变量名 [&amp;#x3D;初始值]…];&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;int age &amp;#x3D; 19 , age2 &amp;#x3D; 90 ;&lt;/p&gt;
&lt;p&gt;int age,age2;&lt;/p&gt;
&lt;p&gt;【2】变量的声明：&lt;/p&gt;
&lt;p&gt;（1）如果你只定义一个变量，没有给变量进行赋值的话，那么其实这个变量相当于没有定义：&lt;/p&gt;



&lt;p&gt;（2）变量如果没有进行赋值的话，那么使用的时候会出错，告诉你：尚未初始化变量：&lt;/p&gt;



&lt;p&gt;【3】变量的赋值：&lt;/p&gt;



&lt;p&gt;我们自己定义的时候直接就可以用一句话定义：&lt;/p&gt;
&lt;p&gt;int age &amp;#x3D; 10;&lt;/p&gt;
&lt;p&gt;变量的值可以更改：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //变量的声明（定义变量）（以年龄为案例讲解）
        //java是一个强类型的语言，只要声明变量就必须定义类型：定义整数类型
        int age ; //定义一个整数类型的变量，变量名字为age
        //对变量进行赋值操作：
        age = 10; //变量名字为age，具体的值为10
        age = 12;
        age = 20;
        age = age + 4;
        age = 9;
        age = 9;
        System.out.println(age);
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;变量不可以重复定义：&lt;/p&gt;



&lt;p&gt;【4】变量的使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //变量的声明（定义变量）（以年龄为案例讲解）
        //java是一个强类型的语言，只要声明变量就必须定义类型：定义整数类型
        int age ; //定义一个整数类型的变量，变量名字为age
        //对变量进行赋值操作：
        age = 10; //变量名字为age，具体的值为10
        age = 12;
        age = 20;
        age = age + 4;
        age = 9;
        age = 9;
        System.out.println(age);
        System.out.println(age-2);
        System.out.println(age+10);
        int num = age + 66;
        System.out.println(num);
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;扩展：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar02&amp;#123;
    public static void main(String[] args)&amp;#123;
        int a = 10;
        int b = 20;
        int c = a + b ;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在对上述代码进行“反编译过程”“反汇编过程”&lt;/p&gt;






&lt;p&gt;【5】变量的内存：&lt;/p&gt;



&lt;p&gt;【6】习题：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar03&amp;#123;
    public static void main(String[] args)&amp;#123;
        int num1 = 10;
        int num2 = 20;
        num1 = num2;
        num2 = num2 + 10;
        num1 = num2 - 10;
        num2 = num1;
        System.out.println(&amp;quot;num1=&amp;quot;+num1);
        System.out.println(&amp;quot;num2=&amp;quot;+num2);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内存分析：&lt;/p&gt;



&lt;p&gt;结果：&lt;/p&gt;



&lt;p&gt;【7】变量的作用域：&lt;/p&gt;
&lt;p&gt;作用域指的就是作用范围，变量在什么范围中有效&lt;/p&gt;
&lt;p&gt;作用范围就是离它最近的{}&lt;/p&gt;
&lt;p&gt;备注：一会我们写的代码，不要去运行，会出错&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/\*
    局部变量：定义在方法中
    成员变量：定义在类中，方法外
    \*/
public class TestVar04&amp;#123;
    int b = 20;
    public static void main(String[] args)&amp;#123;
        System.out.println(a);//no
        int a = 10;
        System.out.println(a);//yes
        System.out.println(b);//yes
        &amp;#123;
            int c = 40;
            System.out.println(c);//yes
            int a = 50;//属于变量的重复定义
        &amp;#125;
        System.out.println(c);//no
    &amp;#125;

    public void eat()&amp;#123;
        System.out.println(b);//yes
        System.out.println(a);//no
        int a = 30;//不是变量的重复定义
        System.out.println(a);//yes
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;基本数据类型&#34;&gt;&lt;a href=&#34;#基本数据类型&#34; class=&#34;headerlink&#34; title=&#34;基本数据类型&#34;&gt;&lt;/a&gt;基本数据类型&lt;/h1&gt;&lt;p&gt;Java是一种强类型语言，每个变量都必须声明其数据类型。&lt;/p&gt;
&lt;p&gt;Java的数据类型可分为两大类：基本数据类型（primitive data type）和引用数据类型（reference data type）。&lt;/p&gt;



&lt;p&gt;PS:巧妙记忆：除了基本数据类型以外的所有类型都属于引用数据类型，本章重点：基本数据类型&lt;/p&gt;
&lt;h2 id=&#34;整数类型&#34;&gt;&lt;a href=&#34;#整数类型&#34; class=&#34;headerlink&#34; title=&#34;整数类型&#34;&gt;&lt;/a&gt;整数类型&lt;/h2&gt;&lt;h3 id=&#34;整数类型常量&#34;&gt;&lt;a href=&#34;#整数类型常量&#34; class=&#34;headerlink&#34; title=&#34;整数类型常量&#34;&gt;&lt;/a&gt;整数类型常量&lt;/h3&gt;&lt;p&gt;十进制整数，如：99, -500, 0&lt;/p&gt;
&lt;p&gt;八进制整数，要求以 0 开头，如：015&lt;/p&gt;
&lt;p&gt;十六进制数，要求 0x 或 0X 开头，如：0x15&lt;/p&gt;
&lt;p&gt;二进制：要求0b或者0B开头，如：0b11&lt;/p&gt;
&lt;p&gt;几进制：就是逢几进1的问题：&lt;/p&gt;
&lt;p&gt;平时实际生活中用的最多的是：十进制&lt;/p&gt;
&lt;p&gt;计算机用二进制最多&lt;/p&gt;



&lt;p&gt;扩展：进制转换问题&lt;/p&gt;
&lt;p&gt;【1】二进制转换为十进制：&lt;/p&gt;
&lt;p&gt;二进制： 1101&lt;/p&gt;
&lt;p&gt;1*2^3 + 1*2^2 + 0*2^1 + 1*2^0&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 8 + 4 + 0 + 1&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 13&lt;/p&gt;
&lt;p&gt;【2】十进制转换为二进制：&lt;/p&gt;
&lt;p&gt;十进制 13&lt;/p&gt;



&lt;p&gt;【3】八进制转换十进制：&lt;/p&gt;
&lt;p&gt;八进制： 16&lt;/p&gt;
&lt;p&gt;1*8^1 + 6*8^0&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 8 + 6&lt;/p&gt;
&lt;p&gt;&amp;#x3D;14&lt;/p&gt;
&lt;p&gt;【4】十进制转换为八进制：&lt;/p&gt;
&lt;p&gt;十进制14：&lt;/p&gt;



&lt;p&gt;【5】八进制转换为十六进制：&lt;/p&gt;
&lt;p&gt;把十进制当做一个中转站：&lt;/p&gt;
&lt;p&gt;八进制—》十进制—》十六进制&lt;/p&gt;
&lt;p&gt;实际上根本不用自己转换这么麻烦：我们可以直接用系统中提供给我们的计算器：&lt;/p&gt;



&lt;h3 id=&#34;整数类型变量&#34;&gt;&lt;a href=&#34;#整数类型变量&#34; class=&#34;headerlink&#34; title=&#34;整数类型变量&#34;&gt;&lt;/a&gt;整数类型变量&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;整型数据类型：&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;比如：byte的右侧表数范围127怎么算出来的？&lt;/p&gt;
&lt;p&gt;byte: 1字节 &amp;#x3D; 8位&lt;/p&gt;
&lt;p&gt;二进制：01111111&lt;/p&gt;
&lt;p&gt;1*2^6 + 1*2^5 + 1*2^4 + 1*2^3 + 1*2^2 + 1*2^1 + 1*2^0&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 64 + 32 + 16 +8 +4 + 2 +1&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 127&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar05&amp;#123;
    public static void main(String[] args)&amp;#123;
        //定义整数类型的变量：
        //给变量赋值的时候，值可以为不同进制的：
        int num1 = 12 ;//默认情况下赋值就是十进制的情况
        System.out.println(num1);
        int num2 = 012;//前面加上0，这个值就是八进制的
        System.out.println(num2);
        int num3 = 0x12;//前面加上0x或者0X，这个值就是十六进制的
        System.out.println(num3);
        int num4 = 0b10;//前面加上0b或者0B,这个值就是二进制的
        System.out.println(num4);
        
        //定义byte类型的变量：
        byte b = 126;//定义了一个byte类型的变量，名字叫b，赋值为12
        System.out.println(b);
        //注意：超范围的赋值会报错。
        short s = 30000;
        System.out.println(s);
        int i = 1234;
        System.out.println(i);
        //整数类型默认就是int类型的，所以12345678910是一个int类型的数，对于int类型来说，它超出范围了
        //要想把一个数给long类型变量，那么后面加上L(推荐)或者l就可以了
        long num5 = 12345678910L;
        System.out.println(num5);
        //注意：只有这个数超出int类型的范围了后面才需要加上L，否则无需加L也可以赋值给long类型：
        long num6 = 12;
        System.out.println(num6);
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;浮点类型&#34;&gt;&lt;a href=&#34;#浮点类型&#34; class=&#34;headerlink&#34; title=&#34;浮点类型&#34;&gt;&lt;/a&gt;浮点类型&lt;/h2&gt;&lt;h3 id=&#34;浮点类型常量&#34;&gt;&lt;a href=&#34;#浮点类型常量&#34; class=&#34;headerlink&#34; title=&#34;浮点类型常量&#34;&gt;&lt;/a&gt;浮点类型常量&lt;/h3&gt;&lt;p&gt;（1）十进制数形式，例如:&lt;/p&gt;
&lt;p&gt;3.14 314.0 0.314&lt;/p&gt;
&lt;p&gt;（2）科学记数法形式，如&lt;/p&gt;
&lt;p&gt;314e2 314E2 (E的大小写没有区分) 314E-2&lt;/p&gt;
&lt;p&gt;double f &amp;#x3D; 314e2; &amp;#x2F;&amp;#x2F;314*10^2–&amp;gt;31400.0&lt;/p&gt;
&lt;p&gt;double f2 &amp;#x3D; 314e-2; &amp;#x2F;&amp;#x2F;314*10^(-2)–&amp;gt;3.14&lt;/p&gt;
&lt;h3 id=&#34;浮点类型变量&#34;&gt;&lt;a href=&#34;#浮点类型变量&#34; class=&#34;headerlink&#34; title=&#34;浮点类型变量&#34;&gt;&lt;/a&gt;浮点类型变量&lt;/h3&gt;&lt;p&gt;float类型又被称作单精度类型，尾数可以精确到7位有效数字，在很多情况下，float类型的精度很难满足需求。&lt;/p&gt;
&lt;p&gt;而double表示这种类型的数值精度约是float类型的两倍，又被称作双精度类型，绝大部分应用程序都采用double类型。&lt;/p&gt;
&lt;p&gt;float类型的数值有一个后缀F或者f ，没有后缀F&amp;#x2F;f的浮点数值默认为double类型。&lt;/p&gt;
&lt;p&gt;也可以在浮点数值后添加后缀D或者d， 以明确其为double类型。&lt;/p&gt;



&lt;p&gt;PS：有效数字指的是从左开始第一个不为0的数到最后一个数&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //浮点类型的常量有两种形式：
        //十进制形式：
        double num1 = 3.14;
        System.out.println(num1);
        //科学计数法形式：
        double num2 = 314E-2;
        System.out.println(num2);
        
        //浮点类型的变量：
        //注意：浮点型默认是double类型的，要想将一个double类型的数赋给float类型，必须后面加上F或者f
        float f1 = 3.14234567898623F;
        System.out.println(f1);
        //注意：double类型后面可以加D或者d，但是一般我们都省略不写
        double d1 = 3.14234567898623D;
        System.out.println(d1);
        
        //注意：我们最好不要进行浮点类型的比较：
        float f2 = 0.3F;
        double d2 = 0.3;
        System.out.println(f2==d2);
        /\*
            区别：
            = 赋值运算： 将等号右侧的值赋给等号左侧
            == 判断==左右两侧的值是否相等 ：结果要么相等 要么不相等
            ==运算符的结果就是要么是true，要么是false
            \*/
            
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符类型&#34;&gt;&lt;a href=&#34;#字符类型&#34; class=&#34;headerlink&#34; title=&#34;字符类型&#34;&gt;&lt;/a&gt;字符类型&lt;/h2&gt;&lt;p&gt;【1】Java中使用单引号来表示字符常量，字符型在内存中占2个字节。&lt;/p&gt;
&lt;p&gt;char 类型用来表示在Unicode编码表中的字符。Unicode编码被设计用来处理各种语言的文字，它占2个字节，可允许有65536个字符。&lt;/p&gt;
&lt;p&gt;【2】转义字符：&lt;/p&gt;



&lt;p&gt;【3】ASCII表：&lt;/p&gt;



&lt;p&gt;【4】Unicode编码表：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3NndW8vcC83NDAxODc0Lmh0bWw=&#34;&gt;https://www.cnblogs.com/csguo/p/7401874.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码1：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar07&amp;#123;
    public static void main(String[] args)&amp;#123;
        //定义字符类型的变量：
        char ch1 = &amp;#39;a&amp;#39;;
        System.out.println(ch1);
        char ch2 = &amp;#39;A&amp;#39;;
        System.out.println(ch2);
        char ch3 = &amp;#39;4&amp;#39;;
        System.out.println(ch3);
        char ch4 = &amp;#39;中&amp;#39;;
        System.out.println(ch4);
        char ch5 = &amp;#39;?&amp;#39;;
        System.out.println(ch5);
        //java中无论：字母，数字，符号，中文都是字符类型的常量，都占用2个字节。
        char ch6 = &amp;#39; &amp;#39;;
        System.out.println(ch6);
        //字符类型：单引号引起来的单个字符
        System.out.println(&amp;quot;--------------------------------&amp;quot;);
        /\*
            转义字符：
            \\将后面的普通字符转换为特殊含义
            \*/
            char ch7 = &amp;#39;\\n&amp;#39;;
        System.out.println(&amp;quot;aaa&amp;quot;+ch7+&amp;quot;bbb&amp;quot;);
        
        System.out.println(&amp;quot;aaa\\nbbb&amp;quot;);// \\n 换行
        
        System.out.println(&amp;quot;aaaaaaa\\tbbb&amp;quot;); // \\t 制表符
        
        System.out.println(&amp;quot;aaa\\bbbb&amp;quot;);//aabbb \\b 向前退一格
        System.out.println(&amp;quot;aaa\\rbbb&amp;quot;);//bbb \\r 将光标到本行开头 ：回车
        
        System.out.println(&amp;quot;\\&amp;quot;java\\&amp;quot;&amp;quot;); // \\&amp;quot; 将双引号原样输出 \\&amp;#39; 将单引号原样输出 \\\\ 将\\原样输出
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar08&amp;#123;
    public static void main(String[] args)&amp;#123;
        char ch1 = &amp;#39;A&amp;#39;;
        System.out.println(ch1);//A
        System.out.println(ch1+90);//155
        System.out.println(155-ch1);//90
        //char类型我们看到的样子就是它本身的字面常量,但是底层在进行计算的时候，实际上是按照一个码进行计算的。
        //这个码就是ASCII
        //之前说char类型是按照Unicode码表进行存储的 (Unicode兼容了ASCII码，Unicode的前128位置ASCII)
        
        char ch2 = &amp;#39;中&amp;#39;;
        System.out.println(ch2);// 中
        System.out.println(ch2+90);// 20103
        System.out.println(20103-ch2);// 90
        
        //转换：
        int num1 = (int)ch2;
        System.out.println(num1);//20013
        
        char ch = (char)20013;
        System.out.println(ch);
        
        int num2 = &amp;#39;中&amp;#39;;
        char ch5 = 20013;
        System.out.println(ch5);
        
        //面试题：
        char ch6 = &amp;#39;2&amp;#39;+2;
        System.out.println(ch6);//&amp;#39;4&amp;#39;---\&amp;gt;4
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;编码和字符集&#34;&gt;&lt;a href=&#34;#编码和字符集&#34; class=&#34;headerlink&#34; title=&#34;编码和字符集&#34;&gt;&lt;/a&gt;编码和字符集&lt;/h3&gt;&lt;p&gt;【1】什么是编码？&lt;/p&gt;



&lt;p&gt;【2】通过生活案例：&lt;/p&gt;



&lt;p&gt;【3】由权威机构形成的编码表才可以称之为：字符集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASCII&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;英文字符集&lt;/p&gt;
&lt;p&gt;用一个字节的7位表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IOS8859-1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;西欧字符集&lt;/p&gt;
&lt;p&gt;用一个字节的8位表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GB2312&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简体中文字符集&lt;/p&gt;
&lt;p&gt;最多使用两个字节编码&lt;/p&gt;
&lt;p&gt;PS：中文：2个字节&lt;/p&gt;
&lt;p&gt;GB2312兼容了ASCII中的字符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GBK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GB2312的升级，加入了繁体字&lt;/p&gt;
&lt;p&gt;最多使用两个字节编码&lt;/p&gt;
&lt;p&gt;疑问：&lt;/p&gt;



&lt;p&gt;首位如果是0：一个字节代码代表一个字符&lt;/p&gt;
&lt;p&gt;首位如果是1：那么一个字节不够，要加上后面的字节才能完整的表示一个字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unicode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;国际通用字符集，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。&lt;/p&gt;
&lt;p&gt;退出了UTF标准：&lt;/p&gt;
&lt;p&gt;三种编码方案： UTF-8，UTF-16,UTF-32&lt;/p&gt;
&lt;p&gt;以UTF-8为案例讲解：&lt;/p&gt;
&lt;p&gt;中文： 珊 —》Unicode ： 29642&lt;/p&gt;






&lt;p&gt;底层存储：&lt;/p&gt;



&lt;p&gt;UTF-8标准最多可以用6个字节表示：&lt;/p&gt;



&lt;p&gt;以后我们用的最多的就是UTF-8.&lt;/p&gt;
&lt;h3 id=&#34;解释乱码问题&#34;&gt;&lt;a href=&#34;#解释乱码问题&#34; class=&#34;headerlink&#34; title=&#34;解释乱码问题&#34;&gt;&lt;/a&gt;解释乱码问题&lt;/h3&gt;


&lt;p&gt;用记事本选择编码方法的时候一般要选择为ANSI—》获取当前操作系统的编码格式：GBK&lt;/p&gt;
&lt;h2 id=&#34;布尔类型&#34;&gt;&lt;a href=&#34;#布尔类型&#34; class=&#34;headerlink&#34; title=&#34;布尔类型&#34;&gt;&lt;/a&gt;布尔类型&lt;/h2&gt;&lt;p&gt;boolean类型有两个常量值，true和false，在内存中占一位（不是一个字节），不可以使用 0 或非 0 的整数替代 true 和 false ，这点和C语言不同。 boolean 类型用来判断逻辑条件，一般用于程序流程控制 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar09&amp;#123;
    public static void main(String[] args)&amp;#123;
        //创建一个布尔类型的变量：
        boolean flag1 = true;
        System.out.println(flag1);
        boolean flag2 = false;
        System.out.println(flag2);
        boolean flag3 = 5==9;
        System.out.println(flag3);
        boolean flag4 = 5\&amp;lt;9;
        System.out.println(flag4);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;基本数据类型的转换&#34;&gt;&lt;a href=&#34;#基本数据类型的转换&#34; class=&#34;headerlink&#34; title=&#34;基本数据类型的转换&#34;&gt;&lt;/a&gt;基本数据类型的转换&lt;/h2&gt;&lt;p&gt;【1】什么是类型转换：&lt;/p&gt;
&lt;p&gt;在赋值运算或者算数运算的时候，要求数据类型一致，就要进行类型的转换。&lt;/p&gt;
&lt;p&gt;【2】类型转换的种类：&lt;/p&gt;
&lt;p&gt;自动转换，强制转换&lt;/p&gt;
&lt;p&gt;【3】内存演示：&lt;/p&gt;



&lt;p&gt;【4】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar10&amp;#123;
    public static void main(String[] args)&amp;#123;
        //类型转换的两种形式：
        double d = 6;//int--\&amp;gt;double 自动类型转换
        System.out.println(d);
        int i = (int)6.5;//double---\&amp;gt;int 强制类型转换 （强转）
        System.out.println(i);
        
        //在同一个表达式中，有多个数据类型的时候，应该如何处理：
        //多种数据类型参与运算的时候，整数类型，浮点类型，字符类型都可以参与运算，唯独布尔类型不可以参与运算。
        //double d2 = 12+1294L+8.5F+3.81+&amp;#39;a&amp;#39;+true;
        double d2 = 12+1294L+8.5F+3.81+&amp;#39;a&amp;#39;;
        System.out.println(d2);
        /\*
            类型级别：(从低到高的)
            byte,short,char--\&amp;gt;int---\&amp;gt;long---\&amp;gt;float---\&amp;gt;double
            级别用来做什么？当一个表达式中有多种数据类型的时候，要找出当前表达式中级别最高的那个类型，然后
            其余的类型都转换为当前表达式中级别最高的类型进行计算。
            double d2 = 12+1294L+8.5F+3.81+&amp;#39;a&amp;#39;;
        = 12.0+1294.0+8.5+3.81+97.0
            \*/
            int i2 = (int)(12+1294L+8.5F+3.81+&amp;#39;a&amp;#39;);
        System.out.println(i2);
        /\*
            在进行运算的时候：
            左=右 : 直接赋值
                左\&amp;lt;右 ：强转
                左\&amp;gt;右 ：直接自动转换
                \*/
                
                //以下情况属于特殊情形：对于byte，short，char类型来说，只要在他们的表数范围中，赋值的时候就不需要进行
                //强转了直接赋值即可。
                byte b = 12;
        System.out.println(b);
        byte b2 = (byte)270;
        System.out.println(b2);
        
        
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;练习：final，字符常量，Scanner的使用&#34;&gt;&lt;a href=&#34;#练习：final，字符常量，Scanner的使用&#34; class=&#34;headerlink&#34; title=&#34;练习：final，字符常量，Scanner的使用&#34;&gt;&lt;/a&gt;练习：final，字符常量，Scanner的使用&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;//形象理解：在java.util下将Scanner拿过来用
public class TestVar11&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现功能：求圆的周长和面积
        //【1】提取变量：提取变量，就是为了一劳永逸，以后只要改变变量的值，下面只要用到这个变量的地方，取值也都发生变化了
        //【2】一个变量被final修饰，这个变量就变成了一个常量，这个常量的值就不可变了
        // 这个常量就是我们所说的 字符常量 ---》pi
        // 约定俗成的规定：字符常量的名字全部大写
        //【3】使用扫描器：Scanner的使用--》注意通过形象的理解去使用
        final double PI = 3.14;
        //拿来一个扫描器：
        Scanner sc = new Scanner(System.in);
        //给一个友好性的提示：
        System.out.print(&amp;quot;请录入一个半径：&amp;quot;);
        //让扫描器扫描键盘录入的int类型的数据：
        int r = sc.nextInt();
        
        //求周长：
        double c = 2\*PI\*r;
        System.out.println(&amp;quot;周长为：&amp;quot;+c);
        
        //求面积：
        //PI = 9.29;报错：TestVar11.java:12: 错误: 无法为最终变量pi分配值
        double s = PI\*r\*r;
        System.out.println(&amp;quot;面积为：&amp;quot;+s);
        
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;练习：加深对Scanner的使用&#34;&gt;&lt;a href=&#34;#练习：加深对Scanner的使用&#34; class=&#34;headerlink&#34; title=&#34;练习：加深对Scanner的使用&#34;&gt;&lt;/a&gt;练习：加深对Scanner的使用&lt;/h2&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestVar12&amp;#123;
    public static void main(String[] args)&amp;#123;
        //键盘录入学生的信息：年龄，身高，姓名，性别：
        //键盘录入年龄：(接收int类型数据)
        Scanner sc = new Scanner(System.in);
        System.out.print(&amp;quot;请录入年龄：&amp;quot;);
        int age = sc.nextInt();
        //键盘录入身高：（接收double类型数据）
        System.out.print(&amp;quot;请录入身高：&amp;quot;);
        double height = sc.nextDouble();
        //键盘录入姓名：(接收String类型数据--》字符串)
        System.out.print(&amp;quot;请录入姓名：&amp;quot;);
        String name = sc.next();
        //键盘录入性别：(接受char类型)
        System.out.print(&amp;quot;请录入性别：&amp;quot;);
        String sexStr = sc.next();
        char sex = sexStr.charAt(0);
        //上面两句可以合为一句表示：char sex = sc.next().charAt(0);
        System.out.println(&amp;quot;该学生的信息为:姓名是：&amp;quot;+name+&amp;quot;,年龄是：&amp;quot;+age+&amp;quot;,身高为：&amp;quot;+height+&amp;quot;,性别是：&amp;quot;+sex);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
