{
    "version": "https://jsonfeed.org/version/1",
    "title": "雾都博客 • All posts by \"mybatisplus\" category",
    "description": "记录美食每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/MybatisPlus/",
            "url": "http://example.com/2022/10/07/MybatisPlus/",
            "title": "MybatisPlus",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==\">MyBatis-Plus (opens new window)</span>（简称 MP）是一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXliYXRpcy5vcmcvbXliYXRpcy0zLw==\">MyBatis (opens new window)</span>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<blockquote>\n<p>愿景</p>\n<p>我们的愿景是成为 MyBatis 最好的搭档，就像 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vaW1nL2NvbnRyYS5qcGc=\">魂斗罗</span> 中的 1P、2P，基友搭配，效率翻倍。</p>\n</blockquote>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>\n<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>\n<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>\n<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>\n<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>\n<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>\n<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>\n<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>\n<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>\n<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>\n<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>\n<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>\n</ul>\n<h2 id=\"支持数据库\"><a href=\"#支持数据库\" class=\"headerlink\" title=\"支持数据库\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlOTQlQUYlRTYlOEMlODElRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTM=\"></span>支持数据库</h2><blockquote>\n<p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p>\n</blockquote>\n<ul>\n<li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li>\n<li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li>\n</ul>\n<h2 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlQTElODYlRTYlOUUlQjYlRTclQkIlOTMlRTYlOUUlODQ=\"></span>框架结构</h2><img data-src=\"/2022/10/07/MybatisPlus/mybatis-plus-framework.jpg\" class=\"\" title=\"framework\">\n\n\n\n<h1 id=\"快速使用\"><a href=\"#快速使用\" class=\"headerlink\" title=\"快速使用\"></a>快速使用</h1><blockquote>\n<p>使用的mybatis 3.5之前版本，也就是官方的旧版本</p>\n</blockquote>\n<h2 id=\"初始化工程\"><a href=\"#初始化工程\" class=\"headerlink\" title=\"初始化工程\"></a>初始化工程</h2><p>创建一个空的 Spring Boot 工程（工程将以 H2 作为默认数据库进行演示）</p>\n<p>提示</p>\n<p>可以使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v\">Spring Initializer (opens new window)</span>快速初始化一个 Spring Boot 工程</p>\n<h2 id=\"pom-添加依赖\"><a href=\"#pom-添加依赖\" class=\"headerlink\" title=\"pom 添加依赖\"></a><code>pom</code> 添加依赖</h2><pre><code class=\"xml\">        &lt;!--模板引擎,也可使用freemarker--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;\n            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;\n            &lt;version&gt;2.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--代码生成器 --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;\n            &lt;version&gt;3.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;!--内嵌mybatis，不需要在添加--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;3.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.3&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;1.1.10&lt;/version&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;\n                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n\n</code></pre>\n<h2 id=\"逆向工程\"><a href=\"#逆向工程\" class=\"headerlink\" title=\"逆向工程\"></a>逆向工程</h2><p>测试用例</p>\n<pre><code class=\"java\">import com.baomidou.mybatisplus.core.toolkit.StringPool;\nimport com.baomidou.mybatisplus.generator.AutoGenerator;\nimport com.baomidou.mybatisplus.generator.InjectionConfig;\nimport com.baomidou.mybatisplus.generator.config.*;\nimport com.baomidou.mybatisplus.generator.config.po.TableInfo;\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\n\npublic class Generator &#123;\n\n    public static void main(String[] args) &#123;\n        //0自动生成\n        AutoGenerator autoGenerator = new AutoGenerator();\n\n        //1 数据源配置\n        DataSourceConfig datasource = new DataSourceConfig();\n        datasource.setUrl(&quot;jdbc:mysql://127.0.0.1:3306/xhshixun?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);\n        // dsc.setSchemaName(&quot;public&quot;);\n        datasource.setDriverName(&quot;com.mysql.jdbc.Driver&quot;);\n        datasource.setUsername(&quot;root&quot;);\n        datasource.setPassword(&quot;root&quot;);\n\n        autoGenerator.setDataSource(datasource);\n\n        // 2全局配置\n        GlobalConfig gc = new GlobalConfig();\n        /**\n         * System.getProperty(key)\n         * getProperty()这个方法是获取指定键指示的系统属性的。\n         * 如果key不是系统属性本来系统自带的，需要用户自己设定采用。如果不设定，则为null\n         */\n        String projectPath = System.getProperty(&quot;user.dir&quot;);\n        //与其等同  ||\n        // String projectPath = &quot;E:\\\\code\\\\java\\\\test&quot;;\n\n        //生成在那个目录下\n        gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);\n        gc.setOpen(false);//生成之后打开目录？是在资源管理器中打开的\n        gc.setAuthor(&quot;zjj&quot;);//作者\n        gc.setFileOverride(true);//是否覆盖原来文件\n        //gc.setMapperName(&quot;%sDao&quot;);//设置数据层接口名，%s指代模块名,默认是*Mapper\n        gc.setMapperName(&quot;%sMapper&quot;);\n        // ,,,其余自行探索\n//        gc.setSwagger2(true);// 实体属性 Swagger2 注解\n        autoGenerator.setGlobalConfig(gc);\n\n        //3 包配置\n        PackageConfig pc = new PackageConfig();\n        //pc.setModuleName(null); //模块名\n        pc.setParent(&quot;com.aaa&quot;);\n        pc.setEntity(&quot;pojo&quot;);   //设置实体类包名\n        pc.setMapper(&quot;mapper&quot;); //设置mapper层包名\n        //,,,其余自行探索\n        autoGenerator.setPackageInfo(pc);\n\n        //4自定义配置\n        // 如果模板引擎是 freemarker\n        //String templatePath = &quot;/templates/mapper.xml.ftl&quot;;\n        // 如果模板引擎是 velocity\n        //String templatePath = &quot;/templates/mapper.xml.vm&quot;;\n        String templatePath = &quot;/templates/service.java.vm&quot;;\n\n\n\n        // 4自定义配置\n        InjectionConfig cfg = new InjectionConfig() &#123;\n            @Override\n            public void initMap() &#123;\n                // to do nothing\n            &#125;\n        &#125;;\n        // 自定义输出配置\n        List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();\n        // 自定义配置会被优先输出\n        focList.add(new FileOutConfig(templatePath) &#123;\n            @Override\n            public String outputFile(TableInfo tableInfo) &#123;\n                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！\n                return projectPath + &quot;/src/main/resources/mapper/&quot; + pc.getModuleName()\n                        + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;\n            &#125;\n        &#125;);\n        cfg.setFileOutConfigList(focList);\n        autoGenerator.setCfg(cfg);\n\n        // 5配置模板\n        TemplateConfig templateConfig = new TemplateConfig();\n\n        // 配置自定义输出模板\n        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别\n        // templateConfig.setEntity(&quot;templates/entity2.java&quot;);\n        // templateConfig.setService();\n        // templateConfig.setController();\n\n        templateConfig.setXml(null);\n        autoGenerator.setTemplate(templateConfig);\n\n        //提交配置\n        autoGenerator.setPackageInfo(pc);\n\n\n        //6策略设置\n        StrategyConfig strategyConfig = new StrategyConfig();\n\n        //strategyConfig.setInclude(&quot;tbl_user&quot;);//设置当前参与生成的表名，参数为可变参数\n        strategyConfig.setTablePrefix(&quot;tbl_&quot;);//设置数据库表的前缀，模块名=数振库表名+前缀名\n\n//        strategyConfig.setRestControllerStyle(true);//设置是否启用Rest风格\n//        strategyConfig.setVersionFieldName(&quot;version&quot;);//设置乐观锁宁段名\n//        strategyConfig.setLogicDelet  eFieldName(&quot;deleted&quot;);//设置逻辑删除字段将\n//        strategyConfig.setEntityLombokModel(true);//设置是否启用Lombok\n//        strategyConfig.setControllerMappingHyphenStyle(true); //url中驼峰转连字符\n\n        autoGenerator.setStrategy(strategyConfig);\n\n        //执行生成操作\n        autoGenerator.execute();\n    &#125;\n\n    @Test\n    public void test()&#123;\n        //获取所有的属性\n        Properties properties = System.getProperties();\n        //为了看看系统的属性有几个，加了一个计数器\n        int count = 0;\n        //遍历所有的属性\n        for (String key : properties.stringPropertyNames()) &#123;\n            System.out.println(key + &quot;=&quot; + properties.getProperty(key));\n            count++;\n            if (key.equalsIgnoreCase(&quot;jdbc.drivers&quot;))&#123;\n                System.out.println(&quot;YES&quot;);\n                return ;\n            &#125;\n\n        &#125;\n        System.out.println(count);\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "框架",
                "ORM"
            ]
        }
    ]
}