{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"mybatisplus\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/ORM/MybatisPlus/",
            "url": "http://example.com/2022/10/07/ORM/MybatisPlus/",
            "title": "MybatisPlus",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==\">MyBatis-Plus (opens new window)</span>（简称 MP）是一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubXliYXRpcy5vcmcvbXliYXRpcy0zLw==\">MyBatis (opens new window)</span>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p>\n<blockquote>\n<p>愿景</p>\n<p>我们的愿景是成为 MyBatis 最好的搭档，就像 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vaW1nL2NvbnRyYS5qcGc=\">魂斗罗</span> 中的 1P、2P，基友搭配，效率翻倍。</p>\n</blockquote>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li>\n<li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li>\n<li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li>\n<li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li>\n<li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li>\n<li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li>\n<li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li>\n<li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li>\n<li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li>\n<li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li>\n<li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li>\n<li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li>\n</ul>\n<h2 id=\"支持数据库\"><a href=\"#支持数据库\" class=\"headerlink\" title=\"支持数据库\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlOTQlQUYlRTYlOEMlODElRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTM=\"></span>支持数据库</h2><blockquote>\n<p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p>\n</blockquote>\n<ul>\n<li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li>\n<li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li>\n</ul>\n<h2 id=\"框架结构\"><a href=\"#框架结构\" class=\"headerlink\" title=\"框架结构\"></a><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlQTElODYlRTYlOUUlQjYlRTclQkIlOTMlRTYlOUUlODQ=\"></span>框架结构</h2><img data-src=\"/2022/10/07/ORM/MybatisPlus/mybatis-plus-framework.jpg\" class=\"\" title=\"framework\">\n\n\n\n<h1 id=\"快速使用\"><a href=\"#快速使用\" class=\"headerlink\" title=\"快速使用\"></a>快速使用</h1><blockquote>\n<p>使用的mybatis 3.5之前版本，也就是官方的旧版本</p>\n</blockquote>\n<h2 id=\"初始化工程\"><a href=\"#初始化工程\" class=\"headerlink\" title=\"初始化工程\"></a>初始化工程</h2><p>创建一个空的 Spring Boot 工程（工程将以 H2 作为默认数据库进行演示）</p>\n<p>提示</p>\n<p>可以使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v\">Spring Initializer (opens new window)</span>快速初始化一个 Spring Boot 工程</p>\n<h2 id=\"pom-添加依赖\"><a href=\"#pom-添加依赖\" class=\"headerlink\" title=\"pom 添加依赖\"></a><code>pom</code> 添加依赖</h2><pre><code class=\"xml\">    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;\n        &lt;spring-boot.version&gt;2.3.7.RELEASE&lt;/spring-boot.version&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;!--freemarker--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.freemarker&lt;/groupId&gt;\n            &lt;artifactId&gt;freemarker&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!--velocity--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;\n            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;\n            &lt;version&gt;2.2&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--generator--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;\n            &lt;version&gt;3.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--mybatis-plus--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;3.4.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--jdbc--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;scope&gt;runtime&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;!--lombok--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;!--spring-start-web--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!--spring-test--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;\n                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;\n        &lt;!--junit4--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;junit&lt;/groupId&gt;\n            &lt;artifactId&gt;junit&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;\n                &lt;version&gt;$&#123;spring-boot.version&#125;&lt;/version&gt;\n                &lt;type&gt;pom&lt;/type&gt;\n                &lt;scope&gt;import&lt;/scope&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n\n    &lt;build&gt;\n        &lt;plugins&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                &lt;version&gt;3.8.1&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;source&gt;1.8&lt;/source&gt;\n                    &lt;target&gt;1.8&lt;/target&gt;\n                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;\n                &lt;/configuration&gt;\n            &lt;/plugin&gt;\n            &lt;plugin&gt;\n                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;\n                &lt;version&gt;2.3.7.RELEASE&lt;/version&gt;\n                &lt;configuration&gt;\n                    &lt;mainClass&gt;com.example.TestMybatisplusApplication&lt;/mainClass&gt;\n                &lt;/configuration&gt;\n                &lt;executions&gt;\n                    &lt;execution&gt;\n                        &lt;id&gt;repackage&lt;/id&gt;\n                        &lt;goals&gt;\n                            &lt;goal&gt;repackage&lt;/goal&gt;\n                        &lt;/goals&gt;\n                    &lt;/execution&gt;\n                &lt;/executions&gt;\n            &lt;/plugin&gt;\n        &lt;/plugins&gt;\n    &lt;/build&gt;\n</code></pre>\n<h2 id=\"模板准备\"><a href=\"#模板准备\" class=\"headerlink\" title=\"模板准备\"></a>模板准备</h2><p>因为个人习惯原因，我修改了一下entity的模板。</p>\n<blockquote>\n<p>在<code>resource/templates </code>下创建一个<code>MyEntity.java.ftl</code>(就这个名字吧，不然还要改代码，再者这个没啥用，只用于我们的逆向工程) ，直接将下面的内容粘贴创建即可。</p>\n<p>注意：</p>\n<ul>\n<li>我用的模板引擎是 <code>freemarker</code> 一定得加依赖</li>\n<li>用 .vm 就要加 <code>velocity</code> 依赖</li>\n</ul>\n</blockquote>\n<h3 id=\"ftl文件\"><a href=\"#ftl文件\" class=\"headerlink\" title=\".ftl文件\"></a>.ftl文件</h3><pre><code class=\"ftl\">package $&#123;package.Entity&#125;;\n\n&lt;#list table.importPackages as pkg&gt;\nimport $&#123;pkg&#125;;\n&lt;/#list&gt;\n&lt;#if swagger2&gt;\n&lt;/#if&gt;\n&lt;#if entityLombokModel&gt;\nimport lombok.*;\n&lt;/#if&gt;\n\n/**\n * &lt;p&gt;\n * $&#123;table.comment!&#125;\n * &lt;/p&gt;\n *\n * @author $&#123;author&#125;\n * @since $&#123;date&#125;\n */\n&lt;#if entityLombokModel&gt;\n    &lt;#if superEntityClass??&gt;\n@EqualsAndHashCode(callSuper = true)\n    &lt;#else&gt;\n@EqualsAndHashCode(callSuper = false)\n    &lt;/#if&gt;\n    &lt;#if chainModel&gt;\n@Accessors(chain = true)\n    &lt;/#if&gt;\n&lt;/#if&gt;\n&lt;#if table.convert&gt;\n@TableName(&quot;$&#123;table.name&#125;&quot;)\n&lt;/#if&gt;\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@ToString\n&lt;#if superEntityClass??&gt;\npublic class $&#123;entity&#125; extends $&#123;superEntityClass&#125;&lt;#if activeRecord&gt;&lt;$&#123;entity&#125;&gt;&lt;/#if&gt; &#123;\n&lt;#elseif activeRecord&gt;\npublic class $&#123;entity&#125; extends Model&lt;$&#123;entity&#125;&gt; &#123;\n&lt;#else&gt;\npublic class $&#123;entity&#125; implements Serializable &#123;\n&lt;/#if&gt;\n\n&lt;#if entitySerialVersionUID&gt;\n    private static final long serialVersionUID = 1L;\n&lt;/#if&gt;\n&lt;#-- ----------  BEGIN 字段循环遍历  ----------&gt;\n&lt;#list table.fields as field&gt;\n    &lt;#if field.keyFlag&gt;\n        &lt;#assign keyPropertyName=&quot;$&#123;field.propertyName&#125;&quot;/&gt;\n    &lt;/#if&gt;\n\n    &lt;#if field.comment!?length gt 0&gt;\n        &lt;#if swagger2&gt;\n    @ApiModelProperty(value = &quot;$&#123;field.comment&#125;&quot;)\n        &lt;#else&gt;\n    /**\n     * $&#123;field.comment&#125;\n     */\n        &lt;/#if&gt;\n    &lt;/#if&gt;\n    &lt;#if field.keyFlag&gt;\n        &lt;#-- 主键 --&gt;\n        &lt;#if field.keyIdentityFlag&gt;\n    @TableId(value = &quot;$&#123;field.annotationColumnName&#125;&quot;, type = IdType.AUTO)\n        &lt;#elseif idType??&gt;\n    @TableId(value = &quot;$&#123;field.annotationColumnName&#125;&quot;, type = IdType.$&#123;idType&#125;)\n        &lt;#elseif field.convert&gt;\n    @TableId(&quot;$&#123;field.annotationColumnName&#125;&quot;)\n        &lt;/#if&gt;\n        &lt;#-- 普通字段 --&gt;\n    &lt;#elseif field.fill??&gt;\n    &lt;#-- -----   存在字段填充设置   -----&gt;\n        &lt;#if field.convert&gt;\n    @TableField(value = &quot;$&#123;field.annotationColumnName&#125;&quot;, fill = FieldFill.$&#123;field.fill&#125;)\n        &lt;#else&gt;\n    @TableField(fill = FieldFill.$&#123;field.fill&#125;)\n        &lt;/#if&gt;\n    &lt;#elseif field.convert&gt;\n    @TableField(&quot;$&#123;field.annotationColumnName&#125;&quot;)\n    &lt;/#if&gt;\n    &lt;#-- 乐观锁注解 --&gt;\n    &lt;#if (versionFieldName!&quot;&quot;) == field.name&gt;\n    @Version\n    &lt;/#if&gt;\n    &lt;#-- 逻辑删除注解 --&gt;\n    &lt;#if (logicDeleteFieldName!&quot;&quot;) == field.name&gt;\n    @TableLogic\n    &lt;/#if&gt;\n    private $&#123;field.propertyType&#125; $&#123;field.propertyName&#125;;\n&lt;/#list&gt;\n&lt;#------------  END 字段循环遍历  ----------&gt;\n\n&lt;#if !entityLombokModel&gt;\n    &lt;#list table.fields as field&gt;\n        &lt;#if field.propertyType == &quot;boolean&quot;&gt;\n            &lt;#assign getprefix=&quot;is&quot;/&gt;\n        &lt;#else&gt;\n            &lt;#assign getprefix=&quot;get&quot;/&gt;\n        &lt;/#if&gt;\n    public $&#123;field.propertyType&#125; $&#123;getprefix&#125;$&#123;field.capitalName&#125;() &#123;\n        return $&#123;field.propertyName&#125;;\n    &#125;\n\n    &lt;#if chainModel&gt;\n    public $&#123;entity&#125; set$&#123;field.capitalName&#125;($&#123;field.propertyType&#125; $&#123;field.propertyName&#125;) &#123;\n    &lt;#else&gt;\n    public void set$&#123;field.capitalName&#125;($&#123;field.propertyType&#125; $&#123;field.propertyName&#125;) &#123;\n    &lt;/#if&gt;\n        this.$&#123;field.propertyName&#125; = $&#123;field.propertyName&#125;;\n        &lt;#if chainModel&gt;\n        return this;\n        &lt;/#if&gt;\n    &#125;\n    &lt;/#list&gt;\n&lt;/#if&gt;\n\n&lt;#if entityColumnConstant&gt;\n    &lt;#list table.fields as field&gt;\n    public static final String $&#123;field.name?upper_case&#125; = &quot;$&#123;field.name&#125;&quot;;\n\n    &lt;/#list&gt;\n&lt;/#if&gt;\n&lt;#if activeRecord&gt;\n    @Override\n    protected Serializable pkVal() &#123;\n    &lt;#if keyPropertyName??&gt;\n        return this.$&#123;keyPropertyName&#125;;\n    &lt;#else&gt;\n        return null;\n    &lt;/#if&gt;\n    &#125;\n\n&lt;/#if&gt;\n&lt;#if !entityLombokModel&gt;\n    @Override\n    public String toString() &#123;\n        return &quot;$&#123;entity&#125;&#123;&quot; +\n    &lt;#list table.fields as field&gt;\n        &lt;#if field_index==0&gt;\n            &quot;$&#123;field.propertyName&#125;=&quot; + $&#123;field.propertyName&#125; +\n        &lt;#else&gt;\n            &quot;, $&#123;field.propertyName&#125;=&quot; + $&#123;field.propertyName&#125; +\n        &lt;/#if&gt;\n    &lt;/#list&gt;\n        &quot;&#125;&quot;;\n    &#125;\n&lt;/#if&gt;\n&#125;\n</code></pre>\n<h3 id=\"vm文件\"><a href=\"#vm文件\" class=\"headerlink\" title=\".vm文件\"></a>.vm文件</h3><pre><code class=\"vm\">package $&#123;package.Entity&#125;;\n\n#foreach($pkg in $&#123;table.importPackages&#125;)\nimport $&#123;pkg&#125;;\n#end\n#if($&#123;entityLombokModel&#125;)\nimport lombok.*;\n#end\n\n/**\n * &lt;p&gt;\n * $!&#123;table.comment&#125;\n * &lt;/p&gt;\n *\n * @author $&#123;author&#125;\n * @since $&#123;date&#125;\n */\n#if($&#123;entityLombokModel&#125;)\n  #if($&#123;superEntityClass&#125;)\n@EqualsAndHashCode(callSuper = true)\n  #else\n@EqualsAndHashCode(callSuper = false)\n  #end\n#end\n#if($&#123;table.convert&#125;)\n@TableName(&quot;$&#123;table.name&#125;&quot;)\n#end\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@ToString\n#if($&#123;superEntityClass&#125;)\npublic class $&#123;entity&#125; extends $&#123;superEntityClass&#125;#if($&#123;activeRecord&#125;)&lt;$&#123;entity&#125;&gt;#end &#123;\n#elseif($&#123;activeRecord&#125;)\npublic class $&#123;entity&#125; extends Model&lt;$&#123;entity&#125;&gt; &#123;\n#else\npublic class $&#123;entity&#125; implements Serializable &#123;\n#end\n\n#if($&#123;entitySerialVersionUID&#125;)\n    private static final long serialVersionUID = 1L;\n#end\n## ----------  BEGIN 字段循环遍历  ----------\n#foreach($field in $&#123;table.fields&#125;)\n\n#if($&#123;field.keyFlag&#125;)\n#set($keyPropertyName=$&#123;field.propertyName&#125;)\n#end\n#if(&quot;$!field.comment&quot; != &quot;&quot;)\n  #if($&#123;swagger2&#125;)\n    @ApiModelProperty(value = &quot;$&#123;field.comment&#125;&quot;)\n  #else\n    /**\n     * $&#123;field.comment&#125;\n     */\n  #end\n#end\n#if($&#123;field.keyFlag&#125;)\n## 主键\n  #if($&#123;field.keyIdentityFlag&#125;)\n    @TableId(value = &quot;$&#123;field.annotationColumnName&#125;&quot;, type = IdType.AUTO)\n  #elseif(!$null.isNull($&#123;idType&#125;) &amp;&amp; &quot;$!idType&quot; != &quot;&quot;)\n    @TableId(value = &quot;$&#123;field.annotationColumnName&#125;&quot;, type = IdType.$&#123;idType&#125;)\n  #elseif($&#123;field.convert&#125;)\n    @TableId(&quot;$&#123;field.annotationColumnName&#125;&quot;)\n  #end\n## 普通字段\n#elseif($&#123;field.fill&#125;)\n## -----   存在字段填充设置   -----\n  #if($&#123;field.convert&#125;)\n    @TableField(value = &quot;$&#123;field.annotationColumnName&#125;&quot;, fill = FieldFill.$&#123;field.fill&#125;)\n  #else\n    @TableField(fill = FieldFill.$&#123;field.fill&#125;)\n  #end\n#elseif($&#123;field.convert&#125;)\n    @TableField(&quot;$&#123;field.annotationColumnName&#125;&quot;)\n#end\n## 乐观锁注解\n#if($&#123;versionFieldName&#125;==$&#123;field.name&#125;)\n    @Version\n#end\n## 逻辑删除注解\n#if($&#123;logicDeleteFieldName&#125;==$&#123;field.name&#125;)\n    @TableLogic\n#end\n    private $&#123;field.propertyType&#125; $&#123;field.propertyName&#125;;\n#end\n## ----------  END 字段循环遍历  ----------\n\n#if(!$&#123;entityLombokModel&#125;)\n#foreach($field in $&#123;table.fields&#125;)\n  #if($&#123;field.propertyType.equals(&quot;boolean&quot;)&#125;)\n    #set($getprefix=&quot;is&quot;)\n  #else\n    #set($getprefix=&quot;get&quot;)\n  #end\n\n    public $&#123;field.propertyType&#125; $&#123;getprefix&#125;$&#123;field.capitalName&#125;() &#123;\n        return $&#123;field.propertyName&#125;;\n    &#125;\n\n  #if($&#123;chainModel&#125;)\n    public $&#123;entity&#125; set$&#123;field.capitalName&#125;($&#123;field.propertyType&#125; $&#123;field.propertyName&#125;) &#123;\n  #else\n    public void set$&#123;field.capitalName&#125;($&#123;field.propertyType&#125; $&#123;field.propertyName&#125;) &#123;\n  #end\n        this.$&#123;field.propertyName&#125; = $&#123;field.propertyName&#125;;\n  #if($&#123;chainModel&#125;)\n        return this;\n  #end\n    &#125;\n#end\n## --foreach end---\n#end\n## --end of #if(!$&#123;entityLombokModel&#125;)--\n\n#if($&#123;entityColumnConstant&#125;)\n  #foreach($field in $&#123;table.fields&#125;)\n    public static final String $&#123;field.name.toUpperCase()&#125; = &quot;$&#123;field.name&#125;&quot;;\n\n  #end\n#end\n#if($&#123;activeRecord&#125;)\n    @Override\n    protected Serializable pkVal() &#123;\n  #if($&#123;keyPropertyName&#125;)\n        return this.$&#123;keyPropertyName&#125;;\n  #else\n        return null;\n  #end\n    &#125;\n\n#end\n#if(!$&#123;entityLombokModel&#125;)\n    @Override\n    public String toString() &#123;\n        return &quot;$&#123;entity&#125;&#123;&quot; +\n  #foreach($field in $&#123;table.fields&#125;)\n    #if($!&#123;foreach.index&#125;==0)\n        &quot;$&#123;field.propertyName&#125;=&quot; + $&#123;field.propertyName&#125; +\n    #else\n        &quot;, $&#123;field.propertyName&#125;=&quot; + $&#123;field.propertyName&#125; +\n    #end\n  #end\n        &quot;&#125;&quot;;\n    &#125;\n#end\n&#125;\n</code></pre>\n<h2 id=\"逆向工程\"><a href=\"#逆向工程\" class=\"headerlink\" title=\"逆向工程\"></a>逆向工程</h2><blockquote>\n<p>通用模板代码，符合我的习惯。</p>\n<p>其他具体的风格配置可以因人而异再次修改。代码中注释很多</p>\n</blockquote>\n<pre><code class=\"java\">import com.baomidou.mybatisplus.core.toolkit.StringPool;\nimport com.baomidou.mybatisplus.generator.AutoGenerator;\nimport com.baomidou.mybatisplus.generator.InjectionConfig;\nimport com.baomidou.mybatisplus.generator.config.*;\nimport com.baomidou.mybatisplus.generator.config.po.TableInfo;\nimport com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;\nimport com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Scanner;\n\npublic class Generator &#123;\n\n    /*\n    * 逆向工程\n    * 要修改前缀、后缀的东西策略中，\n    * 其他的修改去代码里面翻一翻，大多数都注释了，找不到了可以看官网\n    *  */\n    public static void main(String[] args) &#123;\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(&quot;====================================&quot;);\n        System.out.println(&quot;==============1.生成部分表============&quot;);\n        System.out.println(&quot;==============2.生成全部表============&quot;);\n        System.out.println(&quot;=====================================&quot;);\n        int i = scanner.nextInt();\n        switch (i) &#123;\n            case 1:\n                System.out.println(&quot;请输入你要逆向生成的表名，用 , 号分开&quot;);\n                String name = scanner.next();\n                generator(name);\n                break;\n            case 2: generator(null);break;\n        &#125;\n    &#125;\n    public static void generator(String tableName)&#123;\n        // 代码生成器\n        AutoGenerator mpg = new AutoGenerator();\n\n        // 全局配置\n        GlobalConfig gc = new GlobalConfig();\n        String projectPath = System.getProperty(&quot;user.dir&quot;);\n        gc.setOutputDir(projectPath + &quot;/src/main/java&quot;);\n        gc.setAuthor(&quot;zjj&quot;); //作者\n        gc.setOpen(false); //是否打开目录\n        gc.setBaseResultMap(true);//xml开启BaseResultMap\n        gc.setBaseColumnList(true);//xml 开启BaseColumn\n        // gc.setSwagger2(true); //实体属性 Swagger2 注解\n        mpg.setGlobalConfig(gc);\n\n        // 数据源配置\n        DataSourceConfig dsc = new DataSourceConfig();\n        dsc.setUrl(&quot;jdbc:mysql://localhost:3306/mydb?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&quot;);\n        // dsc.setSchemaName(&quot;public&quot;);\n        dsc.setDriverName(&quot;com.mysql.cj.jdbc.Driver&quot;);\n        dsc.setUsername(&quot;root&quot;);\n        dsc.setPassword(&quot;root&quot;);\n        mpg.setDataSource(dsc);\n\n        // 包配置\n        PackageConfig pc = new PackageConfig();\n        //pc.setModuleName(scanner(&quot;模块名&quot;));\n        pc.setParent(&quot;com.zjj&quot;)\n                .setEntity(&quot;pojo&quot;)\n                .setMapper(&quot;mapper&quot;)\n                .setService(&quot;service&quot;)\n                .setServiceImpl(&quot;service.impl&quot;)\n                .setController(&quot;controller&quot;);\n        mpg.setPackageInfo(pc);\n\n        // 自定义配置\n        InjectionConfig cfg = new InjectionConfig() &#123;\n            @Override\n            public void initMap() &#123;\n                // to do nothing\n            &#125;\n        &#125;;\n\n        // 如果模板引擎是 freemarker\n        String templatePath = &quot;/templates/mapper.xml.ftl&quot;;\n        // 如果模板引擎是 velocity\n        // String templatePath = &quot;/templates/mapper.xml.vm&quot;;\n\n        // 自定义输出配置\n        List&lt;FileOutConfig&gt; focList = new ArrayList&lt;&gt;();\n        // 自定义配置会被优先输出\n        focList.add(new FileOutConfig(templatePath) &#123;\n            @Override\n            public String outputFile(TableInfo tableInfo) &#123;\n                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！\n                System.out.println(pc.getModuleName());\n                return projectPath + &quot;/src/main/resources/mapper&quot; + pc.getModuleName()\n                        + &quot;/&quot; + tableInfo.getEntityName() + &quot;Mapper&quot; + StringPool.DOT_XML;\n            &#125;\n        &#125;);\n\n        cfg.setFileOutConfigList(focList);\n        mpg.setCfg(cfg);\n\n        // 配置模板\n        TemplateConfig templateConfig = new TemplateConfig();\n        // 配置自定义输出模板\n        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别\n        templateConfig.setEntity(&quot;/templates/MyEntity.java&quot;);\n        // templateConfig.setService();\n        // templateConfig.setController();\n        templateConfig.setXml(null);\n        mpg.setTemplate(templateConfig);\n\n        // 策略配置\n        StrategyConfig strategy = new StrategyConfig();\n        //数据库表映射到实体的命名策略\n        strategy.setNaming(NamingStrategy.underline_to_camel);\n        //数据库表字段映射到实体的命名策略\n        strategy.setColumnNaming(NamingStrategy.no_change);\n        //strategy.setSuperEntityClass(&quot;你自己的父类实体,没有就不用设置!&quot;);\n        //lombok模型\n        strategy.setEntityLombokModel(true);\n        //生成RestController\n        strategy.setRestControllerStyle(true);\n        // 公共父类\n        //strategy.setSuperControllerClass(&quot;你自己的父类控制器,没有就不用设置!&quot;);\n        // 写于父类中的公共字段\n        //strategy.setSuperEntityColumns(&quot;id&quot;);\n        if (!Objects.isNull(tableName)) &#123;\n            //strategy.setInclude(scanner(&quot;表名，多个英文逗号分割&quot;).split(&quot;,&quot;));\n            strategy.setInclude(tableName.split(&quot;,&quot;));\n        &#125;\n\n        strategy.setControllerMappingHyphenStyle(true);\n        //表前缀\n        // strategy.setTablePrefix(&quot;t_&quot;);\n        mpg.setStrategy(strategy);\n        mpg.setTemplateEngine(new FreemarkerTemplateEngine());\n        mpg.execute();\n    &#125;\n&#125;\n</code></pre>\n",
            "tags": [
                "框架",
                "ORM"
            ]
        }
    ]
}