<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>记录“美食”每刻 • Posts by &#34;mybatisplus&#34; category</title>
        <link>http://example.com</link>
        <description>记录“美食”每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>分布式</category>
        <category>Dubbo</category>
        <category>FastDFS</category>
        <category>RPC</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>JavaSE</category>
        <category>-JavaSE</category>
        <category>框架</category>
        <category>ORM</category>
        <category>博客</category>
        <category>环境搭建</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>SpringMVC</category>
        <category>SpringSecurity</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/ORM/MybatisPlus/</guid>
            <title>MybatisPlus</title>
            <link>http://example.com/2022/10/07/ORM/MybatisPlus/</link>
            <category>框架</category>
            <category>ORM</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==&#34;&gt;MyBatis-Plus (opens new window)&lt;/span&gt;（简称 MP）是一个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubXliYXRpcy5vcmcvbXliYXRpcy0zLw==&#34;&gt;MyBatis (opens new window)&lt;/span&gt;的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愿景&lt;/p&gt;
&lt;p&gt;我们的愿景是成为 MyBatis 最好的搭档，就像 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vaW1nL2NvbnRyYS5qcGc=&#34;&gt;魂斗罗&lt;/span&gt; 中的 1P、2P，基友搭配，效率翻倍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;特性&#34;&gt;&lt;a href=&#34;#特性&#34; class=&#34;headerlink&#34; title=&#34;特性&#34;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无侵入&lt;/strong&gt;：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;损耗小&lt;/strong&gt;：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强大的 CRUD 操作&lt;/strong&gt;：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 Lambda 形式调用&lt;/strong&gt;：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持主键自动生成&lt;/strong&gt;：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 ActiveRecord 模式&lt;/strong&gt;：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持自定义全局通用操作&lt;/strong&gt;：支持全局通用方法注入（ Write once, use anywhere ）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置代码生成器&lt;/strong&gt;：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置分页插件&lt;/strong&gt;：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分页插件支持多种数据库&lt;/strong&gt;：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置性能分析插件&lt;/strong&gt;：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置全局拦截插件&lt;/strong&gt;：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支持数据库&#34;&gt;&lt;a href=&#34;#支持数据库&#34; class=&#34;headerlink&#34; title=&#34;支持数据库&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlOTQlQUYlRTYlOEMlODElRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTM=&#34;&gt;&lt;/span&gt;支持数据库&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;任何能使用 &lt;code&gt;MyBatis&lt;/code&gt; 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb&lt;/li&gt;
&lt;li&gt;达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;框架结构&#34;&gt;&lt;a href=&#34;#框架结构&#34; class=&#34;headerlink&#34; title=&#34;框架结构&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlQTElODYlRTYlOUUlQjYlRTclQkIlOTMlRTYlOUUlODQ=&#34;&gt;&lt;/span&gt;框架结构&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/ORM/MybatisPlus/mybatis-plus-framework.jpg&#34; class=&#34;&#34; title=&#34;framework&#34;&gt;



&lt;h1 id=&#34;快速使用&#34;&gt;&lt;a href=&#34;#快速使用&#34; class=&#34;headerlink&#34; title=&#34;快速使用&#34;&gt;&lt;/a&gt;快速使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用的mybatis 3.5之前版本，也就是官方的旧版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;初始化工程&#34;&gt;&lt;a href=&#34;#初始化工程&#34; class=&#34;headerlink&#34; title=&#34;初始化工程&#34;&gt;&lt;/a&gt;初始化工程&lt;/h2&gt;&lt;p&gt;创建一个空的 Spring Boot 工程（工程将以 H2 作为默认数据库进行演示）&lt;/p&gt;
&lt;p&gt;提示&lt;/p&gt;
&lt;p&gt;可以使用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v&#34;&gt;Spring Initializer (opens new window)&lt;/span&gt;快速初始化一个 Spring Boot 工程&lt;/p&gt;
&lt;h2 id=&#34;pom-添加依赖&#34;&gt;&lt;a href=&#34;#pom-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;pom 添加依赖&#34;&gt;&lt;/a&gt;&lt;code&gt;pom&lt;/code&gt; 添加依赖&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;properties&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
        &amp;lt;spring-boot.version&amp;gt;2.3.7.RELEASE&amp;lt;/spring-boot.version&amp;gt;
    &amp;lt;/properties&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;!--freemarker--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.freemarker&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;freemarker&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--velocity--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.velocity&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;velocity-engine-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--generator--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-generator&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--mybatis-plus--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--jdbc--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--lombok--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--spring-start-web--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--spring-test--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.junit.vintage&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;junit-vintage-engine&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--junit4--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

    &amp;lt;dependencyManagement&amp;gt;
        &amp;lt;dependencies&amp;gt;
            &amp;lt;dependency&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-dependencies&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;$&amp;#123;spring-boot.version&amp;#125;&amp;lt;/version&amp;gt;
                &amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
                &amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
            &amp;lt;/dependency&amp;gt;
        &amp;lt;/dependencies&amp;gt;
    &amp;lt;/dependencyManagement&amp;gt;

    &amp;lt;build&amp;gt;
        &amp;lt;plugins&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;3.8.1&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
                    &amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
                    &amp;lt;encoding&amp;gt;UTF-8&amp;lt;/encoding&amp;gt;
                &amp;lt;/configuration&amp;gt;
            &amp;lt;/plugin&amp;gt;
            &amp;lt;plugin&amp;gt;
                &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
                &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
                &amp;lt;version&amp;gt;2.3.7.RELEASE&amp;lt;/version&amp;gt;
                &amp;lt;configuration&amp;gt;
                    &amp;lt;mainClass&amp;gt;com.example.TestMybatisplusApplication&amp;lt;/mainClass&amp;gt;
                &amp;lt;/configuration&amp;gt;
                &amp;lt;executions&amp;gt;
                    &amp;lt;execution&amp;gt;
                        &amp;lt;id&amp;gt;repackage&amp;lt;/id&amp;gt;
                        &amp;lt;goals&amp;gt;
                            &amp;lt;goal&amp;gt;repackage&amp;lt;/goal&amp;gt;
                        &amp;lt;/goals&amp;gt;
                    &amp;lt;/execution&amp;gt;
                &amp;lt;/executions&amp;gt;
            &amp;lt;/plugin&amp;gt;
        &amp;lt;/plugins&amp;gt;
    &amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;模板准备&#34;&gt;&lt;a href=&#34;#模板准备&#34; class=&#34;headerlink&#34; title=&#34;模板准备&#34;&gt;&lt;/a&gt;模板准备&lt;/h2&gt;&lt;p&gt;因为个人习惯原因，我修改了一下entity的模板。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;resource/templates &lt;/code&gt;下创建一个&lt;code&gt;MyEntity.java.ftl&lt;/code&gt;(就这个名字吧，不然还要改代码，再者这个没啥用，只用于我们的逆向工程) ，直接将下面的内容粘贴创建即可。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我用的模板引擎是 &lt;code&gt;freemarker&lt;/code&gt; 一定得加依赖&lt;/li&gt;
&lt;li&gt;用 .vm 就要加 &lt;code&gt;velocity&lt;/code&gt; 依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ftl文件&#34;&gt;&lt;a href=&#34;#ftl文件&#34; class=&#34;headerlink&#34; title=&#34;.ftl文件&#34;&gt;&lt;/a&gt;.ftl文件&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;ftl&#34;&gt;package $&amp;#123;package.Entity&amp;#125;;

&amp;lt;#list table.importPackages as pkg&amp;gt;
import $&amp;#123;pkg&amp;#125;;
&amp;lt;/#list&amp;gt;
&amp;lt;#if swagger2&amp;gt;
&amp;lt;/#if&amp;gt;
&amp;lt;#if entityLombokModel&amp;gt;
import lombok.*;
&amp;lt;/#if&amp;gt;

/**
 * &amp;lt;p&amp;gt;
 * $&amp;#123;table.comment!&amp;#125;
 * &amp;lt;/p&amp;gt;
 *
 * @author $&amp;#123;author&amp;#125;
 * @since $&amp;#123;date&amp;#125;
 */
&amp;lt;#if entityLombokModel&amp;gt;
    &amp;lt;#if superEntityClass??&amp;gt;
@EqualsAndHashCode(callSuper = true)
    &amp;lt;#else&amp;gt;
@EqualsAndHashCode(callSuper = false)
    &amp;lt;/#if&amp;gt;
    &amp;lt;#if chainModel&amp;gt;
@Accessors(chain = true)
    &amp;lt;/#if&amp;gt;
&amp;lt;/#if&amp;gt;
&amp;lt;#if table.convert&amp;gt;
@TableName(&amp;quot;$&amp;#123;table.name&amp;#125;&amp;quot;)
&amp;lt;/#if&amp;gt;
@AllArgsConstructor
@NoArgsConstructor
@Data
@ToString
&amp;lt;#if superEntityClass??&amp;gt;
public class $&amp;#123;entity&amp;#125; extends $&amp;#123;superEntityClass&amp;#125;&amp;lt;#if activeRecord&amp;gt;&amp;lt;$&amp;#123;entity&amp;#125;&amp;gt;&amp;lt;/#if&amp;gt; &amp;#123;
&amp;lt;#elseif activeRecord&amp;gt;
public class $&amp;#123;entity&amp;#125; extends Model&amp;lt;$&amp;#123;entity&amp;#125;&amp;gt; &amp;#123;
&amp;lt;#else&amp;gt;
public class $&amp;#123;entity&amp;#125; implements Serializable &amp;#123;
&amp;lt;/#if&amp;gt;

&amp;lt;#if entitySerialVersionUID&amp;gt;
    private static final long serialVersionUID = 1L;
&amp;lt;/#if&amp;gt;
&amp;lt;#-- ----------  BEGIN 字段循环遍历  ----------&amp;gt;
&amp;lt;#list table.fields as field&amp;gt;
    &amp;lt;#if field.keyFlag&amp;gt;
        &amp;lt;#assign keyPropertyName=&amp;quot;$&amp;#123;field.propertyName&amp;#125;&amp;quot;/&amp;gt;
    &amp;lt;/#if&amp;gt;

    &amp;lt;#if field.comment!?length gt 0&amp;gt;
        &amp;lt;#if swagger2&amp;gt;
    @ApiModelProperty(value = &amp;quot;$&amp;#123;field.comment&amp;#125;&amp;quot;)
        &amp;lt;#else&amp;gt;
    /**
     * $&amp;#123;field.comment&amp;#125;
     */
        &amp;lt;/#if&amp;gt;
    &amp;lt;/#if&amp;gt;
    &amp;lt;#if field.keyFlag&amp;gt;
        &amp;lt;#-- 主键 --&amp;gt;
        &amp;lt;#if field.keyIdentityFlag&amp;gt;
    @TableId(value = &amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;, type = IdType.AUTO)
        &amp;lt;#elseif idType??&amp;gt;
    @TableId(value = &amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;, type = IdType.$&amp;#123;idType&amp;#125;)
        &amp;lt;#elseif field.convert&amp;gt;
    @TableId(&amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;)
        &amp;lt;/#if&amp;gt;
        &amp;lt;#-- 普通字段 --&amp;gt;
    &amp;lt;#elseif field.fill??&amp;gt;
    &amp;lt;#-- -----   存在字段填充设置   -----&amp;gt;
        &amp;lt;#if field.convert&amp;gt;
    @TableField(value = &amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;, fill = FieldFill.$&amp;#123;field.fill&amp;#125;)
        &amp;lt;#else&amp;gt;
    @TableField(fill = FieldFill.$&amp;#123;field.fill&amp;#125;)
        &amp;lt;/#if&amp;gt;
    &amp;lt;#elseif field.convert&amp;gt;
    @TableField(&amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;)
    &amp;lt;/#if&amp;gt;
    &amp;lt;#-- 乐观锁注解 --&amp;gt;
    &amp;lt;#if (versionFieldName!&amp;quot;&amp;quot;) == field.name&amp;gt;
    @Version
    &amp;lt;/#if&amp;gt;
    &amp;lt;#-- 逻辑删除注解 --&amp;gt;
    &amp;lt;#if (logicDeleteFieldName!&amp;quot;&amp;quot;) == field.name&amp;gt;
    @TableLogic
    &amp;lt;/#if&amp;gt;
    private $&amp;#123;field.propertyType&amp;#125; $&amp;#123;field.propertyName&amp;#125;;
&amp;lt;/#list&amp;gt;
&amp;lt;#------------  END 字段循环遍历  ----------&amp;gt;

&amp;lt;#if !entityLombokModel&amp;gt;
    &amp;lt;#list table.fields as field&amp;gt;
        &amp;lt;#if field.propertyType == &amp;quot;boolean&amp;quot;&amp;gt;
            &amp;lt;#assign getprefix=&amp;quot;is&amp;quot;/&amp;gt;
        &amp;lt;#else&amp;gt;
            &amp;lt;#assign getprefix=&amp;quot;get&amp;quot;/&amp;gt;
        &amp;lt;/#if&amp;gt;
    public $&amp;#123;field.propertyType&amp;#125; $&amp;#123;getprefix&amp;#125;$&amp;#123;field.capitalName&amp;#125;() &amp;#123;
        return $&amp;#123;field.propertyName&amp;#125;;
    &amp;#125;

    &amp;lt;#if chainModel&amp;gt;
    public $&amp;#123;entity&amp;#125; set$&amp;#123;field.capitalName&amp;#125;($&amp;#123;field.propertyType&amp;#125; $&amp;#123;field.propertyName&amp;#125;) &amp;#123;
    &amp;lt;#else&amp;gt;
    public void set$&amp;#123;field.capitalName&amp;#125;($&amp;#123;field.propertyType&amp;#125; $&amp;#123;field.propertyName&amp;#125;) &amp;#123;
    &amp;lt;/#if&amp;gt;
        this.$&amp;#123;field.propertyName&amp;#125; = $&amp;#123;field.propertyName&amp;#125;;
        &amp;lt;#if chainModel&amp;gt;
        return this;
        &amp;lt;/#if&amp;gt;
    &amp;#125;
    &amp;lt;/#list&amp;gt;
&amp;lt;/#if&amp;gt;

&amp;lt;#if entityColumnConstant&amp;gt;
    &amp;lt;#list table.fields as field&amp;gt;
    public static final String $&amp;#123;field.name?upper_case&amp;#125; = &amp;quot;$&amp;#123;field.name&amp;#125;&amp;quot;;

    &amp;lt;/#list&amp;gt;
&amp;lt;/#if&amp;gt;
&amp;lt;#if activeRecord&amp;gt;
    @Override
    protected Serializable pkVal() &amp;#123;
    &amp;lt;#if keyPropertyName??&amp;gt;
        return this.$&amp;#123;keyPropertyName&amp;#125;;
    &amp;lt;#else&amp;gt;
        return null;
    &amp;lt;/#if&amp;gt;
    &amp;#125;

&amp;lt;/#if&amp;gt;
&amp;lt;#if !entityLombokModel&amp;gt;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;$&amp;#123;entity&amp;#125;&amp;#123;&amp;quot; +
    &amp;lt;#list table.fields as field&amp;gt;
        &amp;lt;#if field_index==0&amp;gt;
            &amp;quot;$&amp;#123;field.propertyName&amp;#125;=&amp;quot; + $&amp;#123;field.propertyName&amp;#125; +
        &amp;lt;#else&amp;gt;
            &amp;quot;, $&amp;#123;field.propertyName&amp;#125;=&amp;quot; + $&amp;#123;field.propertyName&amp;#125; +
        &amp;lt;/#if&amp;gt;
    &amp;lt;/#list&amp;gt;
        &amp;quot;&amp;#125;&amp;quot;;
    &amp;#125;
&amp;lt;/#if&amp;gt;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;vm文件&#34;&gt;&lt;a href=&#34;#vm文件&#34; class=&#34;headerlink&#34; title=&#34;.vm文件&#34;&gt;&lt;/a&gt;.vm文件&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;vm&#34;&gt;package $&amp;#123;package.Entity&amp;#125;;

#foreach($pkg in $&amp;#123;table.importPackages&amp;#125;)
import $&amp;#123;pkg&amp;#125;;
#end
#if($&amp;#123;entityLombokModel&amp;#125;)
import lombok.*;
#end

/**
 * &amp;lt;p&amp;gt;
 * $!&amp;#123;table.comment&amp;#125;
 * &amp;lt;/p&amp;gt;
 *
 * @author $&amp;#123;author&amp;#125;
 * @since $&amp;#123;date&amp;#125;
 */
#if($&amp;#123;entityLombokModel&amp;#125;)
  #if($&amp;#123;superEntityClass&amp;#125;)
@EqualsAndHashCode(callSuper = true)
  #else
@EqualsAndHashCode(callSuper = false)
  #end
#end
#if($&amp;#123;table.convert&amp;#125;)
@TableName(&amp;quot;$&amp;#123;table.name&amp;#125;&amp;quot;)
#end
@AllArgsConstructor
@NoArgsConstructor
@Data
@ToString
#if($&amp;#123;superEntityClass&amp;#125;)
public class $&amp;#123;entity&amp;#125; extends $&amp;#123;superEntityClass&amp;#125;#if($&amp;#123;activeRecord&amp;#125;)&amp;lt;$&amp;#123;entity&amp;#125;&amp;gt;#end &amp;#123;
#elseif($&amp;#123;activeRecord&amp;#125;)
public class $&amp;#123;entity&amp;#125; extends Model&amp;lt;$&amp;#123;entity&amp;#125;&amp;gt; &amp;#123;
#else
public class $&amp;#123;entity&amp;#125; implements Serializable &amp;#123;
#end

#if($&amp;#123;entitySerialVersionUID&amp;#125;)
    private static final long serialVersionUID = 1L;
#end
## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in $&amp;#123;table.fields&amp;#125;)

#if($&amp;#123;field.keyFlag&amp;#125;)
#set($keyPropertyName=$&amp;#123;field.propertyName&amp;#125;)
#end
#if(&amp;quot;$!field.comment&amp;quot; != &amp;quot;&amp;quot;)
  #if($&amp;#123;swagger2&amp;#125;)
    @ApiModelProperty(value = &amp;quot;$&amp;#123;field.comment&amp;#125;&amp;quot;)
  #else
    /**
     * $&amp;#123;field.comment&amp;#125;
     */
  #end
#end
#if($&amp;#123;field.keyFlag&amp;#125;)
## 主键
  #if($&amp;#123;field.keyIdentityFlag&amp;#125;)
    @TableId(value = &amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;, type = IdType.AUTO)
  #elseif(!$null.isNull($&amp;#123;idType&amp;#125;) &amp;amp;&amp;amp; &amp;quot;$!idType&amp;quot; != &amp;quot;&amp;quot;)
    @TableId(value = &amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;, type = IdType.$&amp;#123;idType&amp;#125;)
  #elseif($&amp;#123;field.convert&amp;#125;)
    @TableId(&amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;)
  #end
## 普通字段
#elseif($&amp;#123;field.fill&amp;#125;)
## -----   存在字段填充设置   -----
  #if($&amp;#123;field.convert&amp;#125;)
    @TableField(value = &amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;, fill = FieldFill.$&amp;#123;field.fill&amp;#125;)
  #else
    @TableField(fill = FieldFill.$&amp;#123;field.fill&amp;#125;)
  #end
#elseif($&amp;#123;field.convert&amp;#125;)
    @TableField(&amp;quot;$&amp;#123;field.annotationColumnName&amp;#125;&amp;quot;)
#end
## 乐观锁注解
#if($&amp;#123;versionFieldName&amp;#125;==$&amp;#123;field.name&amp;#125;)
    @Version
#end
## 逻辑删除注解
#if($&amp;#123;logicDeleteFieldName&amp;#125;==$&amp;#123;field.name&amp;#125;)
    @TableLogic
#end
    private $&amp;#123;field.propertyType&amp;#125; $&amp;#123;field.propertyName&amp;#125;;
#end
## ----------  END 字段循环遍历  ----------

#if(!$&amp;#123;entityLombokModel&amp;#125;)
#foreach($field in $&amp;#123;table.fields&amp;#125;)
  #if($&amp;#123;field.propertyType.equals(&amp;quot;boolean&amp;quot;)&amp;#125;)
    #set($getprefix=&amp;quot;is&amp;quot;)
  #else
    #set($getprefix=&amp;quot;get&amp;quot;)
  #end

    public $&amp;#123;field.propertyType&amp;#125; $&amp;#123;getprefix&amp;#125;$&amp;#123;field.capitalName&amp;#125;() &amp;#123;
        return $&amp;#123;field.propertyName&amp;#125;;
    &amp;#125;

  #if($&amp;#123;chainModel&amp;#125;)
    public $&amp;#123;entity&amp;#125; set$&amp;#123;field.capitalName&amp;#125;($&amp;#123;field.propertyType&amp;#125; $&amp;#123;field.propertyName&amp;#125;) &amp;#123;
  #else
    public void set$&amp;#123;field.capitalName&amp;#125;($&amp;#123;field.propertyType&amp;#125; $&amp;#123;field.propertyName&amp;#125;) &amp;#123;
  #end
        this.$&amp;#123;field.propertyName&amp;#125; = $&amp;#123;field.propertyName&amp;#125;;
  #if($&amp;#123;chainModel&amp;#125;)
        return this;
  #end
    &amp;#125;
#end
## --foreach end---
#end
## --end of #if(!$&amp;#123;entityLombokModel&amp;#125;)--

#if($&amp;#123;entityColumnConstant&amp;#125;)
  #foreach($field in $&amp;#123;table.fields&amp;#125;)
    public static final String $&amp;#123;field.name.toUpperCase()&amp;#125; = &amp;quot;$&amp;#123;field.name&amp;#125;&amp;quot;;

  #end
#end
#if($&amp;#123;activeRecord&amp;#125;)
    @Override
    protected Serializable pkVal() &amp;#123;
  #if($&amp;#123;keyPropertyName&amp;#125;)
        return this.$&amp;#123;keyPropertyName&amp;#125;;
  #else
        return null;
  #end
    &amp;#125;

#end
#if(!$&amp;#123;entityLombokModel&amp;#125;)
    @Override
    public String toString() &amp;#123;
        return &amp;quot;$&amp;#123;entity&amp;#125;&amp;#123;&amp;quot; +
  #foreach($field in $&amp;#123;table.fields&amp;#125;)
    #if($!&amp;#123;foreach.index&amp;#125;==0)
        &amp;quot;$&amp;#123;field.propertyName&amp;#125;=&amp;quot; + $&amp;#123;field.propertyName&amp;#125; +
    #else
        &amp;quot;, $&amp;#123;field.propertyName&amp;#125;=&amp;quot; + $&amp;#123;field.propertyName&amp;#125; +
    #end
  #end
        &amp;quot;&amp;#125;&amp;quot;;
    &amp;#125;
#end
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;逆向工程&#34;&gt;&lt;a href=&#34;#逆向工程&#34; class=&#34;headerlink&#34; title=&#34;逆向工程&#34;&gt;&lt;/a&gt;逆向工程&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通用模板代码，符合我的习惯。&lt;/p&gt;
&lt;p&gt;其他具体的风格配置可以因人而异再次修改。代码中注释很多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.baomidou.mybatisplus.core.toolkit.StringPool;
import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.InjectionConfig;
import com.baomidou.mybatisplus.generator.config.*;
import com.baomidou.mybatisplus.generator.config.po.TableInfo;
import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;
import com.baomidou.mybatisplus.generator.engine.FreemarkerTemplateEngine;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Scanner;

public class Generator &amp;#123;

    /*
    * 逆向工程
    * 要修改前缀、后缀的东西策略中，
    * 其他的修改去代码里面翻一翻，大多数都注释了，找不到了可以看官网
    *  */
    public static void main(String[] args) &amp;#123;
        Scanner scanner = new Scanner(System.in);
        System.out.println(&amp;quot;====================================&amp;quot;);
        System.out.println(&amp;quot;==============1.生成部分表============&amp;quot;);
        System.out.println(&amp;quot;==============2.生成全部表============&amp;quot;);
        System.out.println(&amp;quot;=====================================&amp;quot;);
        int i = scanner.nextInt();
        switch (i) &amp;#123;
            case 1:
                System.out.println(&amp;quot;请输入你要逆向生成的表名，用 , 号分开&amp;quot;);
                String name = scanner.next();
                generator(name);
                break;
            case 2: generator(null);break;
        &amp;#125;
    &amp;#125;
    public static void generator(String tableName)&amp;#123;
        // 代码生成器
        AutoGenerator mpg = new AutoGenerator();

        // 全局配置
        GlobalConfig gc = new GlobalConfig();
        String projectPath = System.getProperty(&amp;quot;user.dir&amp;quot;);
        gc.setOutputDir(projectPath + &amp;quot;/src/main/java&amp;quot;);
        gc.setAuthor(&amp;quot;zjj&amp;quot;); //作者
        gc.setOpen(false); //是否打开目录
        gc.setBaseResultMap(true);//xml开启BaseResultMap
        gc.setBaseColumnList(true);//xml 开启BaseColumn
        // gc.setSwagger2(true); //实体属性 Swagger2 注解
        mpg.setGlobalConfig(gc);

        // 数据源配置
        DataSourceConfig dsc = new DataSourceConfig();
        dsc.setUrl(&amp;quot;jdbc:mysql://localhost:3306/mydb?useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai&amp;quot;);
        // dsc.setSchemaName(&amp;quot;public&amp;quot;);
        dsc.setDriverName(&amp;quot;com.mysql.cj.jdbc.Driver&amp;quot;);
        dsc.setUsername(&amp;quot;root&amp;quot;);
        dsc.setPassword(&amp;quot;root&amp;quot;);
        mpg.setDataSource(dsc);

        // 包配置
        PackageConfig pc = new PackageConfig();
        //pc.setModuleName(scanner(&amp;quot;模块名&amp;quot;));
        pc.setParent(&amp;quot;com.zjj&amp;quot;)
                .setEntity(&amp;quot;pojo&amp;quot;)
                .setMapper(&amp;quot;mapper&amp;quot;)
                .setService(&amp;quot;service&amp;quot;)
                .setServiceImpl(&amp;quot;service.impl&amp;quot;)
                .setController(&amp;quot;controller&amp;quot;);
        mpg.setPackageInfo(pc);

        // 自定义配置
        InjectionConfig cfg = new InjectionConfig() &amp;#123;
            @Override
            public void initMap() &amp;#123;
                // to do nothing
            &amp;#125;
        &amp;#125;;

        // 如果模板引擎是 freemarker
        String templatePath = &amp;quot;/templates/mapper.xml.ftl&amp;quot;;
        // 如果模板引擎是 velocity
        // String templatePath = &amp;quot;/templates/mapper.xml.vm&amp;quot;;

        // 自定义输出配置
        List&amp;lt;FileOutConfig&amp;gt; focList = new ArrayList&amp;lt;&amp;gt;();
        // 自定义配置会被优先输出
        focList.add(new FileOutConfig(templatePath) &amp;#123;
            @Override
            public String outputFile(TableInfo tableInfo) &amp;#123;
                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！
                System.out.println(pc.getModuleName());
                return projectPath + &amp;quot;/src/main/resources/mapper&amp;quot; + pc.getModuleName()
                        + &amp;quot;/&amp;quot; + tableInfo.getEntityName() + &amp;quot;Mapper&amp;quot; + StringPool.DOT_XML;
            &amp;#125;
        &amp;#125;);

        cfg.setFileOutConfigList(focList);
        mpg.setCfg(cfg);

        // 配置模板
        TemplateConfig templateConfig = new TemplateConfig();
        // 配置自定义输出模板
        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别
        templateConfig.setEntity(&amp;quot;/templates/MyEntity.java&amp;quot;);
        // templateConfig.setService();
        // templateConfig.setController();
        templateConfig.setXml(null);
        mpg.setTemplate(templateConfig);

        // 策略配置
        StrategyConfig strategy = new StrategyConfig();
        //数据库表映射到实体的命名策略
        strategy.setNaming(NamingStrategy.underline_to_camel);
        //数据库表字段映射到实体的命名策略
        strategy.setColumnNaming(NamingStrategy.no_change);
        //strategy.setSuperEntityClass(&amp;quot;你自己的父类实体,没有就不用设置!&amp;quot;);
        //lombok模型
        strategy.setEntityLombokModel(true);
        //生成RestController
        strategy.setRestControllerStyle(true);
        // 公共父类
        //strategy.setSuperControllerClass(&amp;quot;你自己的父类控制器,没有就不用设置!&amp;quot;);
        // 写于父类中的公共字段
        //strategy.setSuperEntityColumns(&amp;quot;id&amp;quot;);
        if (!Objects.isNull(tableName)) &amp;#123;
            //strategy.setInclude(scanner(&amp;quot;表名，多个英文逗号分割&amp;quot;).split(&amp;quot;,&amp;quot;));
            strategy.setInclude(tableName.split(&amp;quot;,&amp;quot;));
        &amp;#125;

        strategy.setControllerMappingHyphenStyle(true);
        //表前缀
        // strategy.setTablePrefix(&amp;quot;t_&amp;quot;);
        mpg.setStrategy(strategy);
        mpg.setTemplateEngine(new FreemarkerTemplateEngine());
        mpg.execute();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
