<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>记录“美食”每刻 • Posts by &#34;mybatisplus&#34; category</title>
        <link>http://example.com</link>
        <description>记录“美食”每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>博客</category>
        <category>环境搭建</category>
        <category>分布式</category>
        <category>Dubbo</category>
        <category>FastDFS</category>
        <category>MySQL</category>
        <category>数据库基础</category>
        <category>数据库基本知识</category>
        <category>数据库</category>
        <category>框架</category>
        <category>ORM</category>
        <category>RPC</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>SpringMVC</category>
        <category>SpringSecurity</category>
        <category>JavaSE</category>
        <category>-JavaSE</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/MybatisPlus/</guid>
            <title>MybatisPlus</title>
            <link>http://example.com/2022/10/07/MybatisPlus/</link>
            <category>框架</category>
            <category>ORM</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==&#34;&gt;MyBatis-Plus (opens new window)&lt;/span&gt;（简称 MP）是一个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubXliYXRpcy5vcmcvbXliYXRpcy0zLw==&#34;&gt;MyBatis (opens new window)&lt;/span&gt;的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愿景&lt;/p&gt;
&lt;p&gt;我们的愿景是成为 MyBatis 最好的搭档，就像 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vaW1nL2NvbnRyYS5qcGc=&#34;&gt;魂斗罗&lt;/span&gt; 中的 1P、2P，基友搭配，效率翻倍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;特性&#34;&gt;&lt;a href=&#34;#特性&#34; class=&#34;headerlink&#34; title=&#34;特性&#34;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无侵入&lt;/strong&gt;：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;损耗小&lt;/strong&gt;：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强大的 CRUD 操作&lt;/strong&gt;：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 Lambda 形式调用&lt;/strong&gt;：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持主键自动生成&lt;/strong&gt;：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 ActiveRecord 模式&lt;/strong&gt;：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持自定义全局通用操作&lt;/strong&gt;：支持全局通用方法注入（ Write once, use anywhere ）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置代码生成器&lt;/strong&gt;：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置分页插件&lt;/strong&gt;：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分页插件支持多种数据库&lt;/strong&gt;：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置性能分析插件&lt;/strong&gt;：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置全局拦截插件&lt;/strong&gt;：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支持数据库&#34;&gt;&lt;a href=&#34;#支持数据库&#34; class=&#34;headerlink&#34; title=&#34;支持数据库&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlOTQlQUYlRTYlOEMlODElRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTM=&#34;&gt;&lt;/span&gt;支持数据库&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;任何能使用 &lt;code&gt;MyBatis&lt;/code&gt; 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb&lt;/li&gt;
&lt;li&gt;达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;框架结构&#34;&gt;&lt;a href=&#34;#框架结构&#34; class=&#34;headerlink&#34; title=&#34;框架结构&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlQTElODYlRTYlOUUlQjYlRTclQkIlOTMlRTYlOUUlODQ=&#34;&gt;&lt;/span&gt;框架结构&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/MybatisPlus/mybatis-plus-framework.jpg&#34; class=&#34;&#34; title=&#34;framework&#34;&gt;



&lt;h1 id=&#34;快速使用&#34;&gt;&lt;a href=&#34;#快速使用&#34; class=&#34;headerlink&#34; title=&#34;快速使用&#34;&gt;&lt;/a&gt;快速使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用的mybatis 3.5之前版本，也就是官方的旧版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;初始化工程&#34;&gt;&lt;a href=&#34;#初始化工程&#34; class=&#34;headerlink&#34; title=&#34;初始化工程&#34;&gt;&lt;/a&gt;初始化工程&lt;/h2&gt;&lt;p&gt;创建一个空的 Spring Boot 工程（工程将以 H2 作为默认数据库进行演示）&lt;/p&gt;
&lt;p&gt;提示&lt;/p&gt;
&lt;p&gt;可以使用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v&#34;&gt;Spring Initializer (opens new window)&lt;/span&gt;快速初始化一个 Spring Boot 工程&lt;/p&gt;
&lt;h2 id=&#34;pom-添加依赖&#34;&gt;&lt;a href=&#34;#pom-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;pom 添加依赖&#34;&gt;&lt;/a&gt;&lt;code&gt;pom&lt;/code&gt; 添加依赖&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;        &amp;lt;!--模板引擎,也可使用freemarker--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.velocity&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;velocity-engine-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!--代码生成器 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-generator&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!--内嵌mybatis，不需要在添加--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;


        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.1.10&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.junit.vintage&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;junit-vintage-engine&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;逆向工程&#34;&gt;&lt;a href=&#34;#逆向工程&#34; class=&#34;headerlink&#34; title=&#34;逆向工程&#34;&gt;&lt;/a&gt;逆向工程&lt;/h2&gt;&lt;p&gt;测试用例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.baomidou.mybatisplus.core.toolkit.StringPool;
import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.InjectionConfig;
import com.baomidou.mybatisplus.generator.config.*;
import com.baomidou.mybatisplus.generator.config.po.TableInfo;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;


public class Generator &amp;#123;

    public static void main(String[] args) &amp;#123;
        //0自动生成
        AutoGenerator autoGenerator = new AutoGenerator();

        //1 数据源配置
        DataSourceConfig datasource = new DataSourceConfig();
        datasource.setUrl(&amp;quot;jdbc:mysql://127.0.0.1:3306/xhshixun?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai&amp;quot;);
        // dsc.setSchemaName(&amp;quot;public&amp;quot;);
        datasource.setDriverName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;);
        datasource.setUsername(&amp;quot;root&amp;quot;);
        datasource.setPassword(&amp;quot;root&amp;quot;);

        autoGenerator.setDataSource(datasource);

        // 2全局配置
        GlobalConfig gc = new GlobalConfig();
        /**
         * System.getProperty(key)
         * getProperty()这个方法是获取指定键指示的系统属性的。
         * 如果key不是系统属性本来系统自带的，需要用户自己设定采用。如果不设定，则为null
         */
        String projectPath = System.getProperty(&amp;quot;user.dir&amp;quot;);
        //与其等同  ||
        // String projectPath = &amp;quot;E:\\code\\java\\test&amp;quot;;

        //生成在那个目录下
        gc.setOutputDir(projectPath + &amp;quot;/src/main/java&amp;quot;);
        gc.setOpen(false);//生成之后打开目录？是在资源管理器中打开的
        gc.setAuthor(&amp;quot;zjj&amp;quot;);//作者
        gc.setFileOverride(true);//是否覆盖原来文件
        //gc.setMapperName(&amp;quot;%sDao&amp;quot;);//设置数据层接口名，%s指代模块名,默认是*Mapper
        gc.setMapperName(&amp;quot;%sMapper&amp;quot;);
        // ,,,其余自行探索
//        gc.setSwagger2(true);// 实体属性 Swagger2 注解
        autoGenerator.setGlobalConfig(gc);

        //3 包配置
        PackageConfig pc = new PackageConfig();
        //pc.setModuleName(null); //模块名
        pc.setParent(&amp;quot;com.aaa&amp;quot;);
        pc.setEntity(&amp;quot;pojo&amp;quot;);   //设置实体类包名
        pc.setMapper(&amp;quot;mapper&amp;quot;); //设置mapper层包名
        //,,,其余自行探索
        autoGenerator.setPackageInfo(pc);

        //4自定义配置
        // 如果模板引擎是 freemarker
        //String templatePath = &amp;quot;/templates/mapper.xml.ftl&amp;quot;;
        // 如果模板引擎是 velocity
        //String templatePath = &amp;quot;/templates/mapper.xml.vm&amp;quot;;
        String templatePath = &amp;quot;/templates/service.java.vm&amp;quot;;



        // 4自定义配置
        InjectionConfig cfg = new InjectionConfig() &amp;#123;
            @Override
            public void initMap() &amp;#123;
                // to do nothing
            &amp;#125;
        &amp;#125;;
        // 自定义输出配置
        List&amp;lt;FileOutConfig&amp;gt; focList = new ArrayList&amp;lt;&amp;gt;();
        // 自定义配置会被优先输出
        focList.add(new FileOutConfig(templatePath) &amp;#123;
            @Override
            public String outputFile(TableInfo tableInfo) &amp;#123;
                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！
                return projectPath + &amp;quot;/src/main/resources/mapper/&amp;quot; + pc.getModuleName()
                        + &amp;quot;/&amp;quot; + tableInfo.getEntityName() + &amp;quot;Mapper&amp;quot; + StringPool.DOT_XML;
            &amp;#125;
        &amp;#125;);
        cfg.setFileOutConfigList(focList);
        autoGenerator.setCfg(cfg);

        // 5配置模板
        TemplateConfig templateConfig = new TemplateConfig();

        // 配置自定义输出模板
        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别
        // templateConfig.setEntity(&amp;quot;templates/entity2.java&amp;quot;);
        // templateConfig.setService();
        // templateConfig.setController();

        templateConfig.setXml(null);
        autoGenerator.setTemplate(templateConfig);

        //提交配置
        autoGenerator.setPackageInfo(pc);


        //6策略设置
        StrategyConfig strategyConfig = new StrategyConfig();

        //strategyConfig.setInclude(&amp;quot;tbl_user&amp;quot;);//设置当前参与生成的表名，参数为可变参数
        strategyConfig.setTablePrefix(&amp;quot;tbl_&amp;quot;);//设置数据库表的前缀，模块名=数振库表名+前缀名

//        strategyConfig.setRestControllerStyle(true);//设置是否启用Rest风格
//        strategyConfig.setVersionFieldName(&amp;quot;version&amp;quot;);//设置乐观锁宁段名
//        strategyConfig.setLogicDelet  eFieldName(&amp;quot;deleted&amp;quot;);//设置逻辑删除字段将
//        strategyConfig.setEntityLombokModel(true);//设置是否启用Lombok
//        strategyConfig.setControllerMappingHyphenStyle(true); //url中驼峰转连字符

        autoGenerator.setStrategy(strategyConfig);

        //执行生成操作
        autoGenerator.execute();
    &amp;#125;

    @Test
    public void test()&amp;#123;
        //获取所有的属性
        Properties properties = System.getProperties();
        //为了看看系统的属性有几个，加了一个计数器
        int count = 0;
        //遍历所有的属性
        for (String key : properties.stringPropertyNames()) &amp;#123;
            System.out.println(key + &amp;quot;=&amp;quot; + properties.getProperty(key));
            count++;
            if (key.equalsIgnoreCase(&amp;quot;jdbc.drivers&amp;quot;))&amp;#123;
                System.out.println(&amp;quot;YES&amp;quot;);
                return ;
            &amp;#125;

        &amp;#125;
        System.out.println(count);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
