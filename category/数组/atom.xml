<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>记录“美食”每刻 • Posts by &#34;数组&#34; category</title>
    <link href="http://example.com" />
    <updated>2022-10-06T16:00:00.000Z</updated>
    <category term="分布式" />
    <category term="Dubbo" />
    <category term="FastDFS" />
    <category term="RPC" />
    <category term="中间件" />
    <category term="RabbitMQ" />
    <category term="Solr" />
    <category term="快速搜索" />
    <category term="JavaSE" />
    <category term="-JavaSE" />
    <category term="框架" />
    <category term="ORM" />
    <category term="博客" />
    <category term="环境搭建" />
    <category term="Spring" />
    <category term="SpringBoot" />
    <category term="SpringMVC" />
    <category term="SpringSecurity" />
    <category term="Redis基础" />
    <category term="NoSQL数据库" />
    <entry>
        <id>http://example.com/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/</id>
        <title>第6章_数组</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/"/>
        <content type="html">&lt;h1 id=&#34;数组的引入&#34;&gt;&lt;a href=&#34;#数组的引入&#34; class=&#34;headerlink&#34; title=&#34;数组的引入&#34;&gt;&lt;/a&gt;数组的引入&lt;/h1&gt;&lt;p&gt;【1】习题引入：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestArray01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：键盘录入十个学生的成绩，求和，求平均数：
        //定义一个求和的变量：
        int sum = 0;
        Scanner sc = new Scanner(System.in);

        for(int i=1;i\&amp;lt;=10;i++)&amp;#123;//i:控制循环次数
            System.out.print(&amp;quot;请录入第&amp;quot;+i+&amp;quot;个学生的成绩：&amp;quot;);
            int score = sc.nextInt();
            sum += score;
        &amp;#125;

        System.out.println(&amp;quot;十个学生的成绩之和为：&amp;quot;+sum);
        System.out.println(&amp;quot;十个学生的成绩平均数为：&amp;quot;+sum/10);

        //本题的缺点：
        //求第6个学生的成绩：？？？？？---》不能

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;缺点：就是不能求每个学生的成绩具体是多少&lt;/p&gt;
&lt;p&gt;解决：将成绩进行存储 —-》 引入 ： 数组&lt;/p&gt;
&lt;p&gt;感受到数组的作用：数组用来存储数据的，在程序设计中，为了处理方便，数组用来将相同类型的若干数据组织起来。&lt;/p&gt;
&lt;p&gt;这个若干数据的集合我们称之为数组。&lt;/p&gt;
&lt;h1 id=&#34;数组的学习&#34;&gt;&lt;a href=&#34;#数组的学习&#34; class=&#34;headerlink&#34; title=&#34;数组的学习&#34;&gt;&lt;/a&gt;数组的学习&lt;/h1&gt;&lt;p&gt;【1】数组的定义&lt;/p&gt;
&lt;p&gt;数组是相同类型数据的有序集合。数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。其中，每一个数据称作一个元素，每个元素可以通过一个索引（下标）来访问它们。&lt;/p&gt;
&lt;p&gt;数组的四个基本特点：&lt;/p&gt;
&lt;p&gt;1.长度是确定的。数组一旦被创建，它的大小就是不可以改变的。&lt;/p&gt;
&lt;p&gt;2.其元素的类型必须是相同类型，不允许出现混合类型。&lt;/p&gt;
&lt;p&gt;3.数组类型可以是任何数据类型，包括基本类型和引用类型。&lt;/p&gt;
&lt;p&gt;4.数组有索引的：索引从0开始，到 数组.length-1 结束&lt;/p&gt;
&lt;p&gt;5.数组变量属于引用类型，数组也是对象。&lt;/p&gt;
&lt;p&gt;PS:数组变量属于引用类型，数组也是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中存储的。&lt;/p&gt;
&lt;p&gt;【2】数组的学习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray02&amp;#123;
    public static void main(String[] args)&amp;#123;
        //数组的作用：用来存储相同类型的数据
        //以int类型数据为案例：数组用来存储int类型数据
        //1.声明(定义数组)
        int[] arr; //定义一个int类型的数组，名字叫arr
        //int arr2[];
        //如果数组只声明，没有后续操作，那么这个数组相当于没定义
        //int[] arr3 = null;//空 辨别：数组赋值为null和什么都没有赋值 不一样的效果

        //2.创建
        arr = new int[4];//给数组开辟了一个长度为4的空间
        //编译期声明和创建会被合为一句话: int[] arr = new int[4];

        //3.赋值
        arr[0] = 12;
        arr[3] = 47;
        arr[2] = 98;
        arr[1] = 56;
        arr[2] = 66;
        /\*
            arr[4] = 93;
        出现异常：Exception in thread &amp;quot;main&amp;quot; java.lang.ArrayIndexOutOfBoundsException: 4
            Array 数组
            Index 索引
            OutOf 超出
            Bounds 界限
            Exception 异常
            \---》数组索引越界异常
            \*/

            //4.使用
            System.out.println(arr[2]);
        System.out.println(arr[0]+100);
        //通过数组一个属性来获取 length 长度
        System.out.println(&amp;quot;数组的长度是：&amp;quot;+arr.length);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;内存分析&#34;&gt;&lt;a href=&#34;#内存分析&#34; class=&#34;headerlink&#34; title=&#34;内存分析&#34;&gt;&lt;/a&gt;内存分析&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/046af579ec25dd3f79d0c86ae6002a90.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;完善引入的习题-数组的遍历&#34;&gt;&lt;a href=&#34;#完善引入的习题-数组的遍历&#34; class=&#34;headerlink&#34; title=&#34;完善引入的习题_数组的遍历&#34;&gt;&lt;/a&gt;完善引入的习题_数组的遍历&lt;/h1&gt;&lt;p&gt;【1】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestArray03&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：键盘录入十个学生的成绩，求和，求平均数：
        //定义一个int类型的数组，长度为10 ：
        int[] scores = new int[10];
        //定义一个求和的变量：
        int sum = 0;
        Scanner sc = new Scanner(System.in);

        for(int i=1;i\&amp;lt;=10;i++)&amp;#123;//i:控制循环次数
            System.out.print(&amp;quot;请录入第&amp;quot;+i+&amp;quot;个学生的成绩：&amp;quot;);
            int score = sc.nextInt();
            scores[i-1] = score;
            sum += score;
        &amp;#125;

        System.out.println(&amp;quot;十个学生的成绩之和为：&amp;quot;+sum);
        System.out.println(&amp;quot;十个学生的成绩平均数为：&amp;quot;+sum/10);


        //求第6个学生的成绩：
        //System.out.println(scores[5]);
        /\*
            System.out.println(scores[0]);
        System.out.println(scores[1]);
        System.out.println(scores[2]);
        System.out.println(scores[3]);
        //....
        System.out.println(scores[9]);
        \*/
            //将数组中的每个元素进行查看--》数组的遍历：
            //方式1：普通for循环---》正向遍历：
            for(int i=0;i\&amp;lt;=9;i++)&amp;#123;
                System.out.println(&amp;quot;第&amp;quot;+(i+1)+&amp;quot;个学生的成绩为：&amp;quot;+scores[i]);
            &amp;#125;

        //方式2：增强for循环:
        //对scores数组进行遍历，遍历出来每个元素都用int类型的num接收：
        int count = 0;
        for(int num:scores)&amp;#123;
            count++;
            //每次都将num在控制台输出
            System.out.println(&amp;quot;第&amp;quot;+count+&amp;quot;个学生的成绩为：&amp;quot;+num);
        &amp;#125;

        /\*
            增强for循环：
            优点：代码简单
            缺点：单纯的增强for循环不能涉及跟索引相关的操作
            \*/

            //方式3：利用普通for循环： 逆向遍历：
            for(int i=9;i\&amp;gt;=0;i--)&amp;#123;
                System.out.println(&amp;quot;第&amp;quot;+(i+1)+&amp;quot;个学生的成绩为：&amp;quot;+scores[i]);
            &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】用IDEA验证数组的确将数据进行存储了：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/8a7a660c15849bc9d85e42452b74c0a5.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;数组的三种初始化方式&#34;&gt;&lt;a href=&#34;#数组的三种初始化方式&#34; class=&#34;headerlink&#34; title=&#34;数组的三种初始化方式&#34;&gt;&lt;/a&gt;数组的三种初始化方式&lt;/h1&gt;&lt;p&gt;数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[] arr = &amp;#123;12,23,45&amp;#125;;

int[] arr = new int[]&amp;#123;12,23,45&amp;#125;;

注意：

1.new int[3]&amp;#123;12,23,45&amp;#125;;--\&amp;gt;错误

2.int[] arr ;

arr = &amp;#123;12,23,45&amp;#125;; ---\&amp;gt;错误
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;动态初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组定义与为数组元素分配空间并赋值的操作分开进行。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[] arr ;

arr = new int[3]

arr[0] = 12;

arr[1] = 23;

arr[2] = 45;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;默认初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。&lt;/p&gt;
&lt;p&gt;int[] arr &amp;#x3D; new int[3]; —&amp;gt; 数组有默认的初始化值&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/7dd1ca8911a4defc392409e9442bb532.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;数组的应用题&#34;&gt;&lt;a href=&#34;#数组的应用题&#34; class=&#34;headerlink&#34; title=&#34;数组的应用题&#34;&gt;&lt;/a&gt;数组的应用题&lt;/h1&gt;&lt;h2 id=&#34;最值问题&#34;&gt;&lt;a href=&#34;#最值问题&#34; class=&#34;headerlink&#34; title=&#34;最值问题&#34;&gt;&lt;/a&gt;最值问题&lt;/h2&gt;&lt;p&gt;【1】实现一个功能：给定一个数组int[] arr &amp;#x3D; {12,3,7,4,8,125,9,45}; ，求出数组中最大的数。&lt;/p&gt;
&lt;p&gt;思路图：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/70c971a42c3219e306e6ece0eb9e41d8.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray04&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现一个功能：给定一个数组int[] arr = &amp;#123;12,3,7,4,8,125,9,45&amp;#125;; ，求出数组中最大的数。
        //1.给定一个数组
        int[] arr = &amp;#123;12,3,7,4,8,125,9,45,666,36&amp;#125;;

        //2.求出数组中的最大值：
        //先找一个数上擂台，假定认为这个数最大：
        int maxNum = arr[0];
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]\&amp;gt;maxNum)&amp;#123;
                maxNum = arr[i];
            &amp;#125;
        &amp;#125;
        System.out.println(&amp;quot;当前数组中最大的数为：&amp;quot;+maxNum);

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】将求最大值的方法提取出来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray04&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现一个功能：给定一个数组int[] arr = &amp;#123;12,3,7,4,8,125,9,45&amp;#125;; ，求出数组中最大的数。
        //1.给定一个数组
        int[] arr = &amp;#123;12,3,7,4,8,725,9,45,666,36&amp;#125;;

        //2.求出数组中的最大值：
        //调用方法：
        int num = getMaxNum(arr);
        System.out.println(&amp;quot;当前数组中最大的数为：&amp;quot;+num);
    &amp;#125;

    /\*
        想提取一个方法：求数组中的最大值
        求哪个数组中的最大值 ---》不确定因素：哪个数组 (形参)---》返回值：最大值
        \*/
        public static int getMaxNum(int[] arr)&amp;#123;
        //先找一个数上擂台，假定认为这个数最大：
        int maxNum = arr[0];
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]\&amp;gt;maxNum)&amp;#123;
                maxNum = arr[i];
            &amp;#125;
        &amp;#125;
        return maxNum;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】画内存：&lt;/p&gt;
&lt;p&gt;方法的实参传递给形参的时候一定要注意：一切都是值传递：&lt;/p&gt;
&lt;p&gt;如果是基本数据类型，那么传递的就是字面值&lt;/p&gt;
&lt;p&gt;如果是引用数据类型，那么传递的就是地址值&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/9fcaf17f1bd6f6c30ecdf3db3fb2a57c.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;查询问题&#34;&gt;&lt;a href=&#34;#查询问题&#34; class=&#34;headerlink&#34; title=&#34;查询问题&#34;&gt;&lt;/a&gt;查询问题&lt;/h2&gt;&lt;p&gt;【1】查询指定位置的元素&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray05&amp;#123;
    public static void main(String[] args)&amp;#123;
        //查询指定位置的元素
        //给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10&amp;#125;;
        //查找索引为2的位置上对应的元素是什么？
        System.out.println(arr[2]);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码体现了数组的一个优点：&lt;/p&gt;
&lt;p&gt;在按照位置查询的时候，直接一步到位，效率非常高&lt;/p&gt;
&lt;p&gt;【2】查询指定元素的位置–》找出元素对应的索引&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //查询指定元素的位置--》找出元素对应的索引
        //给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,56&amp;#125;;
        // 0 1 2 3 4 5

        //功能：查询元素888对应的索引：
        int index = -1; //这个初始值只要不是数组的索引即可
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]==12)&amp;#123;
                index = i;//只要找到了元素，那么index就变成为i
                break;//只要找到这个元素，循环就停止
            &amp;#125;
        &amp;#125;
        if(index!=-1)&amp;#123;
            System.out.println(&amp;quot;元素对应的索引：&amp;quot;+index);
        &amp;#125;else&amp;#123;//index==-1
            System.out.println(&amp;quot;查无次数！&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】将查指定元素对应的索引的功能提取为方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //查询指定元素的位置--》找出元素对应的索引
        //给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,56&amp;#125;;
        // 0 1 2 3 4 5

        //功能：查询元素888对应的索引：
        //调用方法：
        int index = getIndex(arr,999);
        //后续对index的值进行判断：
        if(index!=-1)&amp;#123;
            System.out.println(&amp;quot;元素对应的索引：&amp;quot;+index);
        &amp;#125;else&amp;#123;//index==-1
            System.out.println(&amp;quot;查无次数！&amp;quot;);
        &amp;#125;
    &amp;#125;

    /\*
        定义一个方法：查询数组中指定的元素对应的索引：
        不确定因素：哪个数组，哪个指定元素 （形参）
        返回值：索引

        \*/
        public static int getIndex(int[] arr,int ele)&amp;#123;
        int index = -1; //这个初始值只要不是数组的索引即可
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]==ele)&amp;#123;
                index = i;//只要找到了元素，那么index就变成为i
                break;//只要找到这个元素，循环就停止
            &amp;#125;
        &amp;#125;
        return index;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;添加元素&#34;&gt;&lt;a href=&#34;#添加元素&#34; class=&#34;headerlink&#34; title=&#34;添加元素&#34;&gt;&lt;/a&gt;添加元素&lt;/h2&gt;&lt;p&gt;【1】实现一个功能：&lt;/p&gt;
&lt;p&gt;添加逻辑：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/b8b369a935a5784a33f79bddc13e998b.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray07&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：给定一个数组,在数组下标为2的位置上添加一个元素91

        //1.给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10,55,66,77,88,999,89&amp;#125;;
        // 0 1 2 3 4 5
        //2.输出增加元素前的数组：
        System.out.print(&amp;quot;增加元素前的数组：&amp;quot;);
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(i!=arr.length-1)&amp;#123;
                System.out.print(arr[i]+&amp;quot;,&amp;quot;);
            &amp;#125;else&amp;#123;//i==arr.length-1 最后一个元素不用加,
                System.out.print(arr[i]);
            &amp;#125;
        &amp;#125;

        //3.增加元素
        /\*
            arr[5] = arr[4];
        arr[4] = arr[3];
        arr[3] = arr[2];
        \*/
            int index = 1;//在这个指定位置添加 元素
        for(int i=arr.length-1;i\&amp;gt;=(index+1);i--)&amp;#123;
            arr[i] = arr[i-1];
        &amp;#125;
        arr[index] = 666;


        //4.输出增加元素后的数组：
        System.out.print(&amp;quot;\\n增加元素后的数组：&amp;quot;);
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(i!=arr.length-1)&amp;#123;
                System.out.print(arr[i]+&amp;quot;,&amp;quot;);
            &amp;#125;else&amp;#123;//i==arr.length-1 最后一个元素不用加,
                System.out.print(arr[i]);
            &amp;#125;
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】将添加功能提取为一个 方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestArray07&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：给定一个数组,在数组下标为2的位置上添加一个元素91

        //1.给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10,55,66,77,88,999,89&amp;#125;;
        // 0 1 2 3 4 5
        //2.输出增加元素前的数组：
        /\*
            System.out.print(&amp;quot;增加元素前的数组：&amp;quot;);
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(i!=arr.length-1)&amp;#123;
                System.out.print(arr[i]+&amp;quot;,&amp;quot;);
            &amp;#125;else&amp;#123;//i==arr.length-1 最后一个元素不用加,
                System.out.print(arr[i]);
            &amp;#125;
        &amp;#125;
        \*/

            //从键盘接收数据：
            Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入你要添加元素的指定下标：&amp;quot;);
        int index = sc.nextInt();
        System.out.println(&amp;quot;请录入你要添加的元素：&amp;quot;);
        int ele = sc.nextInt();

        //3.增加元素
        //调用方法：
        insertEle(arr,index,ele);



        //4.输出增加元素后的数组：
        System.out.print(&amp;quot;\\n增加元素后的数组：&amp;quot;);
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(i!=arr.length-1)&amp;#123;
                System.out.print(arr[i]+&amp;quot;,&amp;quot;);
            &amp;#125;else&amp;#123;//i==arr.length-1 最后一个元素不用加,
                System.out.print(arr[i]);
            &amp;#125;
        &amp;#125;

    &amp;#125;


    /\*
        提取一个添加元素的方法：
        在数组的指定位置上添加一个指定的元素。
        在哪个数组的哪个位置添加哪个元素！
        不确定因素：形参：哪个数组，哪个位置，哪个元素
        返回值：无

        \*/
        public static void insertEle(int[] arr,int index,int ele)&amp;#123;
        for(int i=arr.length-1;i\&amp;gt;=(index+1);i--)&amp;#123;
            arr[i] = arr[i-1];
        &amp;#125;
        arr[index] = ele;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;删除元素&#34;&gt;&lt;a href=&#34;#删除元素&#34; class=&#34;headerlink&#34; title=&#34;删除元素&#34;&gt;&lt;/a&gt;删除元素&lt;/h2&gt;&lt;p&gt;【1】实现一个功能：删除指定位置上的元素&lt;/p&gt;
&lt;p&gt;逻辑：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/6c0276c47a14681f40e5ee09c6f35150.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Arrays;
public class TestArray08&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：给定一个数组,删除下标为2元素

        //1.给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10,34,45,56,7,666&amp;#125;;
        // 0 1 2 3 4 5
        //2.输出删除前的数组：
        System.out.println(&amp;quot;删除元素前的数组：&amp;quot;+Arrays.toString(arr));

        //3.删除
        /\*
            arr[2] = arr[3];
        arr[3] = arr[4];
        arr[4] = arr[5];
        \*/
            int index = 0;
        for(int i=index;i\&amp;lt;=arr.length-2;i++)&amp;#123;
            arr[i] = arr[i+1];
        &amp;#125;
        arr[arr.length-1] = 0;

        //4.输出删除后的数组：
        System.out.println(&amp;quot;删除元素后的数组：&amp;quot;+Arrays.toString(arr));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】实现一个功能：删除指定元素&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Arrays;
public class TestArray09&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：给定一个数组,删除元素3：

        //1.给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10,34,45,56,7,666&amp;#125;;

        //2.输出删除前的数组：
        System.out.println(&amp;quot;删除元素前的数组：&amp;quot;+Arrays.toString(arr));


        //找到要删除的元素对应的索引即可：
        int index = -1 ;
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]==1200)&amp;#123;
                index = i;
                break;
            &amp;#125;
        &amp;#125;

        //3.删除

        if(index!=-1)&amp;#123;
            for(int i=index;i\&amp;lt;=arr.length-2;i++)&amp;#123;
                arr[i] = arr[i+1];
            &amp;#125;
            arr[arr.length-1] = 0;
        &amp;#125;else&amp;#123;//index==-1
            System.out.println(&amp;quot;根本没有你要删除的元素！&amp;quot;);
        &amp;#125;


        //4.输出删除后的数组：
        System.out.println(&amp;quot;删除元素后的数组：&amp;quot;+Arrays.toString(arr));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;详述main方法&#34;&gt;&lt;a href=&#34;#详述main方法&#34; class=&#34;headerlink&#34; title=&#34;详述main方法&#34;&gt;&lt;/a&gt;详述main方法&lt;/h1&gt;&lt;p&gt;【1】main方法：程序的入口，在同一个类中，如果有多个方法，那么虚拟机就会识别main方法，从这个方法作为程序的入口&lt;/p&gt;
&lt;p&gt;【2】main方法格式严格要求：&lt;/p&gt;
&lt;p&gt;public static void main(String[] args){}&lt;/p&gt;
&lt;p&gt;public static —&amp;gt;修饰符 ，暂时用这个 –&amp;gt;面向对象一章&lt;/p&gt;
&lt;p&gt;void —&amp;gt;代表方法没有返回值 对应的类型void&lt;/p&gt;
&lt;p&gt;main —&amp;gt;见名知意名字&lt;/p&gt;
&lt;p&gt;String[] args —&amp;gt;形参 —》不确定因素&lt;/p&gt;
&lt;p&gt;【3】问题：程序中是否可以有其他的方法也叫main方法？&lt;/p&gt;
&lt;p&gt;可以，构成了方法的重载。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray10&amp;#123;
    public static void main(String[] args)&amp;#123;

    &amp;#125;
    public static void main(String str)&amp;#123;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】形参为String[] 那么实参到底是什么？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray10&amp;#123;
    public static void main(String[] args)&amp;#123;
        //从侧面验证：
        //int[] arr1; //如果对数组只声明，没有后续操作，那么相当于 白定义了。
        //int[] arr2 = null;
        //System.out.println(arr2.length);//Exception in thread &amp;quot;main&amp;quot; java.lang.NullPointerException
        //int[] arr3 = new int[0];
        //System.out.println(arr3.length);
        //int[] arr4 = new int[4];
        //System.out.println(arr4.length);

        //System.out.println(args.length);//0
        //从这个结果证明，参数是String[],实参是 new String[0]
        //默认情况下，虚拟机在调用main方法的时候就是传入了一个长度为0的数组

        System.out.println(args.length);
        for(String str:args)&amp;#123;
            System.out.println(str);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;手动传入实参：&lt;/p&gt;
&lt;p&gt;有特殊符号的时候可以加上“”&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/d3da5aadcf3237a0ded3957e968da17a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;没有特殊符号用空格隔开即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/a7c9de6cf8fb43afc60fbbcea917ed21.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;可变参数&#34;&gt;&lt;a href=&#34;#可变参数&#34; class=&#34;headerlink&#34; title=&#34;可变参数&#34;&gt;&lt;/a&gt;可变参数&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray12&amp;#123;
    /\*
        1.可变参数：作用提供了一个方法，参数的个数是可变的 ,解决了部分方法的重载问题
        int...num
        double...num
        boolean...num


        2.可变参数在JDK1.5之后加入的新特性
        3.方法的内部对可变参数的处理跟数组是一样
        4.可变参数和其他数据一起作为形参的时候，可变参数一定要放在最后
        5.我们自己在写代码的时候，建议不要使用可变参数。
        \*/
        public static void main(String[] args)&amp;#123;
        //method01(10);
        //method01();
        //method01(20,30,40);
        method01(30,40,50,60,70);
        //method01(new int[]&amp;#123;11,22,33,44&amp;#125;);
    &amp;#125;
    public static void method01(int num2,int...num)&amp;#123;
        System.out.println(&amp;quot;-----1&amp;quot;);
        for(int i:num)&amp;#123;
            System.out.print(i+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        System.out.println();

        System.out.println(num2);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Arrays工具类&#34;&gt;&lt;a href=&#34;#Arrays工具类&#34; class=&#34;headerlink&#34; title=&#34;Arrays工具类&#34;&gt;&lt;/a&gt;Arrays工具类&lt;/h1&gt;&lt;p&gt;为了方便我们对数组进行操作，系统提供一个类Arrays，我们将它当做工具类来使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Arrays;
public class TestArray13&amp;#123;
    public static void main(String[] args)&amp;#123;
        //给定一个数组：
        int[] arr = &amp;#123;1,3,7,2,4,8&amp;#125;;
        //toString:对数组进行遍历查看的，返回的是一个字符串，这个字符串比较好看
        System.out.println(Arrays.toString(arr));

        //binarySearch:二分法查找：找出指定数组中的指定元素对应的索引：
        //这个方法的使用前提：一定要查看的是一个有序的数组：
        //sort：排序 --\&amp;gt;升序
        Arrays.sort(arr);
        System.out.println(Arrays.toString(arr));
        System.out.println(Arrays.binarySearch(arr,4));

        int[] arr2 = &amp;#123;1,3,7,2,4,8&amp;#125;;
        //copyOf:完成数组的复制：
        int[] newArr = Arrays.copyOf(arr2,4);
        System.out.println(Arrays.toString(newArr));

        //copyOfRange:区间复制：
        int[] newArr2 = Arrays.copyOfRange(arr2,1,4);//[1,4)--\&amp;gt;1,2,3位置
        System.out.println(Arrays.toString(newArr2));

        //equals:比较两个数组的值是否一样：
        int[] arr3 = &amp;#123;1,3,7,2,4,8&amp;#125;;
        int[] arr4 = &amp;#123;1,3,7,2,4,8&amp;#125;;
        System.out.println(Arrays.equals(arr3,arr4));//true
        System.out.println(arr3==arr4);//false ==比较左右两侧的值是否相等，比较的是左右的地址值，返回结果一定是false

        //fill：数组的填充：
        int[] arr5 = &amp;#123;1,3,7,2,4,8&amp;#125;;
        Arrays.fill(arr5,10);
        System.out.println(Arrays.toString(arr5));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;数组的复制操作&#34;&gt;&lt;a href=&#34;#数组的复制操作&#34; class=&#34;headerlink&#34; title=&#34;数组的复制操作&#34;&gt;&lt;/a&gt;数组的复制操作&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/f55029455c828e6298cac80b7e99f3d4.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/fe8cc0293b38bcca7c79d0f53366bf51.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;原理：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/c646de79c14443e0f59dbfd4df86acc9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Arrays;
public class TestArray14&amp;#123;
    public static void main(String[] args)&amp;#123;
        //给一个源数组：
        int[] srcArr = &amp;#123;11,22,33,44,55,66,77,88&amp;#125;;
        //给一个目标数组：
        int[] destArr = new int[10];

        //复制：
        System.arraycopy(srcArr,1,destArr,3,3);
        //遍历查看目标数组：
        System.out.println(Arrays.toString(destArr));
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/449d70aa26b1dd58faf4391d631b23c9.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;二维数组&#34;&gt;&lt;a href=&#34;#二维数组&#34; class=&#34;headerlink&#34; title=&#34;二维数组&#34;&gt;&lt;/a&gt;二维数组&lt;/h1&gt;&lt;p&gt;【1】引入：本质上全部都是一维数组：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/34650d8b02d5b0ec054c9dca9a6d89fd.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】基本代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray15&amp;#123;
    public static void main(String[] args)&amp;#123;
        //定义一个二维数组：
        int[][] arr = new int[3][];//本质上定义了一个一维数组，长度为3

        int[] a1 = &amp;#123;1,2,3&amp;#125;;
        arr[0] = a1;

        arr[1] = new int[]&amp;#123;4,5,6,7&amp;#125;;

        arr[2] = new int[]&amp;#123;9,10&amp;#125;;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对应内存：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Java/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/7b1ecb2fa93e9b387e7ad62603746e33.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】四种遍历方式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray15&amp;#123;
    public static void main(String[] args)&amp;#123;
        //定义一个二维数组：
        int[][] arr = new int[3][];//本质上定义了一个一维数组，长度为3

        int[] a1 = &amp;#123;1,2,3&amp;#125;;
        arr[0] = a1;

        arr[1] = new int[]&amp;#123;4,5,6,7&amp;#125;;

        arr[2] = new int[]&amp;#123;9,10&amp;#125;;

        //读取6这个元素：
        //System.out.println(arr[1][2]);

        //对二维数组遍历：
        //方式1：外层普通for循环+内层普通for循环：
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            for(int j=0;j\&amp;lt;arr[i].length;j++)&amp;#123;
                System.out.print(arr[i][j]+&amp;quot;\\t&amp;quot;);
            &amp;#125;
            System.out.println();
        &amp;#125;

        //方式2：外层普通for循环+内层增强for循环：
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            for(int num:arr[i])&amp;#123;
                System.out.print(num+&amp;quot;\\t&amp;quot;);
            &amp;#125;
            System.out.println();
        &amp;#125;

        //方式3：外层增强for循环+内层增强for循环：
        for(int[] a:arr)&amp;#123;
            for(int num:a)&amp;#123;
                System.out.print(num+&amp;quot;\\t&amp;quot;);
            &amp;#125;
            System.out.println();
        &amp;#125;

        //方式4：外层增强for循环+内层普通for循环：
        for(int[] a:arr)&amp;#123;
            for(int i=0;i\&amp;lt;a.length;i++)&amp;#123;
                System.out.print(a[i]+&amp;quot;\\t&amp;quot;);
            &amp;#125;
            System.out.println();
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;二维数组的初始化方式&#34;&gt;&lt;a href=&#34;#二维数组的初始化方式&#34; class=&#34;headerlink&#34; title=&#34;二维数组的初始化方式&#34;&gt;&lt;/a&gt;二维数组的初始化方式&lt;/h1&gt;&lt;p&gt;数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[][] arr = &amp;#123;&amp;#123;1,2&amp;#125;,&amp;#123;4,5,6&amp;#125;,&amp;#123;4,5,6,7,8,9,9&amp;#125;&amp;#125;;

int[][] arr =new int[][] &amp;#123;&amp;#123;1,2&amp;#125;,&amp;#123;4,5,6&amp;#125;,&amp;#123;4,5,6,7,8,9,9&amp;#125;&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;动态初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组定义与为数组元素分配空间并赋值的操作分开进行。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[][] arr = new int[3][]; //本质上定义了一维数组长度为3，每个“格子”中放入的是一个数组

arr[0] = new int[]&amp;#123;1,2&amp;#125;;

arr[1] = new int[]&amp;#123;3,4,5,6&amp;#125;;

arr[2] = new int[]&amp;#123;34,45,56&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[][] arr = new int[3][2];
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;默认初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。&lt;/p&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
</feed>
