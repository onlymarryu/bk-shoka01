{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"数组\" category",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/",
            "url": "http://example.com/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/",
            "title": "第6章_数组",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"数组的引入\"><a href=\"#数组的引入\" class=\"headerlink\" title=\"数组的引入\"></a>数组的引入</h1><p>【1】习题引入：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestArray01&#123;\n    public static void main(String[] args)&#123;\n        //功能：键盘录入十个学生的成绩，求和，求平均数：\n        //定义一个求和的变量：\n        int sum = 0;\n        Scanner sc = new Scanner(System.in);\n\n        for(int i=1;i\\&lt;=10;i++)&#123;//i:控制循环次数\n            System.out.print(&quot;请录入第&quot;+i+&quot;个学生的成绩：&quot;);\n            int score = sc.nextInt();\n            sum += score;\n        &#125;\n\n        System.out.println(&quot;十个学生的成绩之和为：&quot;+sum);\n        System.out.println(&quot;十个学生的成绩平均数为：&quot;+sum/10);\n\n        //本题的缺点：\n        //求第6个学生的成绩：？？？？？---》不能\n\n    &#125;\n&#125;\n</code></pre>\n<p>缺点：就是不能求每个学生的成绩具体是多少</p>\n<p>解决：将成绩进行存储 —-》 引入 ： 数组</p>\n<p>感受到数组的作用：数组用来存储数据的，在程序设计中，为了处理方便，数组用来将相同类型的若干数据组织起来。</p>\n<p>这个若干数据的集合我们称之为数组。</p>\n<h1 id=\"数组的学习\"><a href=\"#数组的学习\" class=\"headerlink\" title=\"数组的学习\"></a>数组的学习</h1><p>【1】数组的定义</p>\n<p>数组是相同类型数据的有序集合。数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。其中，每一个数据称作一个元素，每个元素可以通过一个索引（下标）来访问它们。</p>\n<p>数组的四个基本特点：</p>\n<p>1.长度是确定的。数组一旦被创建，它的大小就是不可以改变的。</p>\n<p>2.其元素的类型必须是相同类型，不允许出现混合类型。</p>\n<p>3.数组类型可以是任何数据类型，包括基本类型和引用类型。</p>\n<p>4.数组有索引的：索引从0开始，到 数组.length-1 结束</p>\n<p>5.数组变量属于引用类型，数组也是对象。</p>\n<p>PS:数组变量属于引用类型，数组也是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中存储的。</p>\n<p>【2】数组的学习：</p>\n<pre><code class=\"java\">public class TestArray02&#123;\n    public static void main(String[] args)&#123;\n        //数组的作用：用来存储相同类型的数据\n        //以int类型数据为案例：数组用来存储int类型数据\n        //1.声明(定义数组)\n        int[] arr; //定义一个int类型的数组，名字叫arr\n        //int arr2[];\n        //如果数组只声明，没有后续操作，那么这个数组相当于没定义\n        //int[] arr3 = null;//空 辨别：数组赋值为null和什么都没有赋值 不一样的效果\n\n        //2.创建\n        arr = new int[4];//给数组开辟了一个长度为4的空间\n        //编译期声明和创建会被合为一句话: int[] arr = new int[4];\n\n        //3.赋值\n        arr[0] = 12;\n        arr[3] = 47;\n        arr[2] = 98;\n        arr[1] = 56;\n        arr[2] = 66;\n        /\\*\n            arr[4] = 93;\n        出现异常：Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 4\n            Array 数组\n            Index 索引\n            OutOf 超出\n            Bounds 界限\n            Exception 异常\n            \\---》数组索引越界异常\n            \\*/\n\n            //4.使用\n            System.out.println(arr[2]);\n        System.out.println(arr[0]+100);\n        //通过数组一个属性来获取 length 长度\n        System.out.println(&quot;数组的长度是：&quot;+arr.length);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/046af579ec25dd3f79d0c86ae6002a90.png\" class=\"\">\n\n\n<h1 id=\"完善引入的习题-数组的遍历\"><a href=\"#完善引入的习题-数组的遍历\" class=\"headerlink\" title=\"完善引入的习题_数组的遍历\"></a>完善引入的习题_数组的遍历</h1><p>【1】代码：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestArray03&#123;\n    public static void main(String[] args)&#123;\n        //功能：键盘录入十个学生的成绩，求和，求平均数：\n        //定义一个int类型的数组，长度为10 ：\n        int[] scores = new int[10];\n        //定义一个求和的变量：\n        int sum = 0;\n        Scanner sc = new Scanner(System.in);\n\n        for(int i=1;i\\&lt;=10;i++)&#123;//i:控制循环次数\n            System.out.print(&quot;请录入第&quot;+i+&quot;个学生的成绩：&quot;);\n            int score = sc.nextInt();\n            scores[i-1] = score;\n            sum += score;\n        &#125;\n\n        System.out.println(&quot;十个学生的成绩之和为：&quot;+sum);\n        System.out.println(&quot;十个学生的成绩平均数为：&quot;+sum/10);\n\n\n        //求第6个学生的成绩：\n        //System.out.println(scores[5]);\n        /\\*\n            System.out.println(scores[0]);\n        System.out.println(scores[1]);\n        System.out.println(scores[2]);\n        System.out.println(scores[3]);\n        //....\n        System.out.println(scores[9]);\n        \\*/\n            //将数组中的每个元素进行查看--》数组的遍历：\n            //方式1：普通for循环---》正向遍历：\n            for(int i=0;i\\&lt;=9;i++)&#123;\n                System.out.println(&quot;第&quot;+(i+1)+&quot;个学生的成绩为：&quot;+scores[i]);\n            &#125;\n\n        //方式2：增强for循环:\n        //对scores数组进行遍历，遍历出来每个元素都用int类型的num接收：\n        int count = 0;\n        for(int num:scores)&#123;\n            count++;\n            //每次都将num在控制台输出\n            System.out.println(&quot;第&quot;+count+&quot;个学生的成绩为：&quot;+num);\n        &#125;\n\n        /\\*\n            增强for循环：\n            优点：代码简单\n            缺点：单纯的增强for循环不能涉及跟索引相关的操作\n            \\*/\n\n            //方式3：利用普通for循环： 逆向遍历：\n            for(int i=9;i\\&gt;=0;i--)&#123;\n                System.out.println(&quot;第&quot;+(i+1)+&quot;个学生的成绩为：&quot;+scores[i]);\n            &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【2】用IDEA验证数组的确将数据进行存储了：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/8a7a660c15849bc9d85e42452b74c0a5.png\" class=\"\">\n\n\n<h1 id=\"数组的三种初始化方式\"><a href=\"#数组的三种初始化方式\" class=\"headerlink\" title=\"数组的三种初始化方式\"></a>数组的三种初始化方式</h1><p>数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。</p>\n<ul>\n<li>静态初始化</li>\n</ul>\n<p>除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。</p>\n<p>eg:</p>\n<pre><code class=\"java\">int[] arr = &#123;12,23,45&#125;;\n\nint[] arr = new int[]&#123;12,23,45&#125;;\n\n注意：\n\n1.new int[3]&#123;12,23,45&#125;;--\\&gt;错误\n\n2.int[] arr ;\n\narr = &#123;12,23,45&#125;; ---\\&gt;错误\n</code></pre>\n<ul>\n<li>动态初始化</li>\n</ul>\n<p>数组定义与为数组元素分配空间并赋值的操作分开进行。</p>\n<p>eg:</p>\n<pre><code class=\"java\">int[] arr ;\n\narr = new int[3]\n\narr[0] = 12;\n\narr[1] = 23;\n\narr[2] = 45;\n</code></pre>\n<ul>\n<li>默认初始化</li>\n</ul>\n<p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</p>\n<p>int[] arr &#x3D; new int[3]; —&gt; 数组有默认的初始化值</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/7dd1ca8911a4defc392409e9442bb532.png\" class=\"\">\n\n\n<h1 id=\"数组的应用题\"><a href=\"#数组的应用题\" class=\"headerlink\" title=\"数组的应用题\"></a>数组的应用题</h1><h2 id=\"最值问题\"><a href=\"#最值问题\" class=\"headerlink\" title=\"最值问题\"></a>最值问题</h2><p>【1】实现一个功能：给定一个数组int[] arr &#x3D; {12,3,7,4,8,125,9,45}; ，求出数组中最大的数。</p>\n<p>思路图：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/70c971a42c3219e306e6ece0eb9e41d8.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class TestArray04&#123;\n    public static void main(String[] args)&#123;\n        //实现一个功能：给定一个数组int[] arr = &#123;12,3,7,4,8,125,9,45&#125;; ，求出数组中最大的数。\n        //1.给定一个数组\n        int[] arr = &#123;12,3,7,4,8,125,9,45,666,36&#125;;\n\n        //2.求出数组中的最大值：\n        //先找一个数上擂台，假定认为这个数最大：\n        int maxNum = arr[0];\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]\\&gt;maxNum)&#123;\n                maxNum = arr[i];\n            &#125;\n        &#125;\n        System.out.println(&quot;当前数组中最大的数为：&quot;+maxNum);\n\n    &#125;\n&#125;\n</code></pre>\n<p>【2】将求最大值的方法提取出来：</p>\n<pre><code class=\"java\">public class TestArray04&#123;\n    public static void main(String[] args)&#123;\n        //实现一个功能：给定一个数组int[] arr = &#123;12,3,7,4,8,125,9,45&#125;; ，求出数组中最大的数。\n        //1.给定一个数组\n        int[] arr = &#123;12,3,7,4,8,725,9,45,666,36&#125;;\n\n        //2.求出数组中的最大值：\n        //调用方法：\n        int num = getMaxNum(arr);\n        System.out.println(&quot;当前数组中最大的数为：&quot;+num);\n    &#125;\n\n    /\\*\n        想提取一个方法：求数组中的最大值\n        求哪个数组中的最大值 ---》不确定因素：哪个数组 (形参)---》返回值：最大值\n        \\*/\n        public static int getMaxNum(int[] arr)&#123;\n        //先找一个数上擂台，假定认为这个数最大：\n        int maxNum = arr[0];\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]\\&gt;maxNum)&#123;\n                maxNum = arr[i];\n            &#125;\n        &#125;\n        return maxNum;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【3】画内存：</p>\n<p>方法的实参传递给形参的时候一定要注意：一切都是值传递：</p>\n<p>如果是基本数据类型，那么传递的就是字面值</p>\n<p>如果是引用数据类型，那么传递的就是地址值</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/9fcaf17f1bd6f6c30ecdf3db3fb2a57c.png\" class=\"\">\n\n\n<h2 id=\"查询问题\"><a href=\"#查询问题\" class=\"headerlink\" title=\"查询问题\"></a>查询问题</h2><p>【1】查询指定位置的元素</p>\n<pre><code class=\"java\">public class TestArray05&#123;\n    public static void main(String[] args)&#123;\n        //查询指定位置的元素\n        //给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10&#125;;\n        //查找索引为2的位置上对应的元素是什么？\n        System.out.println(arr[2]);\n    &#125;\n&#125;\n</code></pre>\n<p>上面代码体现了数组的一个优点：</p>\n<p>在按照位置查询的时候，直接一步到位，效率非常高</p>\n<p>【2】查询指定元素的位置–》找出元素对应的索引</p>\n<pre><code class=\"java\">public class TestArray06&#123;\n    public static void main(String[] args)&#123;\n        //查询指定元素的位置--》找出元素对应的索引\n        //给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,56&#125;;\n        // 0 1 2 3 4 5\n\n        //功能：查询元素888对应的索引：\n        int index = -1; //这个初始值只要不是数组的索引即可\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]==12)&#123;\n                index = i;//只要找到了元素，那么index就变成为i\n                break;//只要找到这个元素，循环就停止\n            &#125;\n        &#125;\n        if(index!=-1)&#123;\n            System.out.println(&quot;元素对应的索引：&quot;+index);\n        &#125;else&#123;//index==-1\n            System.out.println(&quot;查无次数！&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【3】将查指定元素对应的索引的功能提取为方法：</p>\n<pre><code class=\"java\">public class TestArray06&#123;\n    public static void main(String[] args)&#123;\n        //查询指定元素的位置--》找出元素对应的索引\n        //给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,56&#125;;\n        // 0 1 2 3 4 5\n\n        //功能：查询元素888对应的索引：\n        //调用方法：\n        int index = getIndex(arr,999);\n        //后续对index的值进行判断：\n        if(index!=-1)&#123;\n            System.out.println(&quot;元素对应的索引：&quot;+index);\n        &#125;else&#123;//index==-1\n            System.out.println(&quot;查无次数！&quot;);\n        &#125;\n    &#125;\n\n    /\\*\n        定义一个方法：查询数组中指定的元素对应的索引：\n        不确定因素：哪个数组，哪个指定元素 （形参）\n        返回值：索引\n\n        \\*/\n        public static int getIndex(int[] arr,int ele)&#123;\n        int index = -1; //这个初始值只要不是数组的索引即可\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]==ele)&#123;\n                index = i;//只要找到了元素，那么index就变成为i\n                break;//只要找到这个元素，循环就停止\n            &#125;\n        &#125;\n        return index;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"添加元素\"><a href=\"#添加元素\" class=\"headerlink\" title=\"添加元素\"></a>添加元素</h2><p>【1】实现一个功能：</p>\n<p>添加逻辑：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/b8b369a935a5784a33f79bddc13e998b.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class TestArray07&#123;\n    public static void main(String[] args)&#123;\n        //功能：给定一个数组,在数组下标为2的位置上添加一个元素91\n\n        //1.给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10,55,66,77,88,999,89&#125;;\n        // 0 1 2 3 4 5\n        //2.输出增加元素前的数组：\n        System.out.print(&quot;增加元素前的数组：&quot;);\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(i!=arr.length-1)&#123;\n                System.out.print(arr[i]+&quot;,&quot;);\n            &#125;else&#123;//i==arr.length-1 最后一个元素不用加,\n                System.out.print(arr[i]);\n            &#125;\n        &#125;\n\n        //3.增加元素\n        /\\*\n            arr[5] = arr[4];\n        arr[4] = arr[3];\n        arr[3] = arr[2];\n        \\*/\n            int index = 1;//在这个指定位置添加 元素\n        for(int i=arr.length-1;i\\&gt;=(index+1);i--)&#123;\n            arr[i] = arr[i-1];\n        &#125;\n        arr[index] = 666;\n\n\n        //4.输出增加元素后的数组：\n        System.out.print(&quot;\\\\n增加元素后的数组：&quot;);\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(i!=arr.length-1)&#123;\n                System.out.print(arr[i]+&quot;,&quot;);\n            &#125;else&#123;//i==arr.length-1 最后一个元素不用加,\n                System.out.print(arr[i]);\n            &#125;\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【2】将添加功能提取为一个 方法：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestArray07&#123;\n    public static void main(String[] args)&#123;\n        //功能：给定一个数组,在数组下标为2的位置上添加一个元素91\n\n        //1.给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10,55,66,77,88,999,89&#125;;\n        // 0 1 2 3 4 5\n        //2.输出增加元素前的数组：\n        /\\*\n            System.out.print(&quot;增加元素前的数组：&quot;);\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(i!=arr.length-1)&#123;\n                System.out.print(arr[i]+&quot;,&quot;);\n            &#125;else&#123;//i==arr.length-1 最后一个元素不用加,\n                System.out.print(arr[i]);\n            &#125;\n        &#125;\n        \\*/\n\n            //从键盘接收数据：\n            Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入你要添加元素的指定下标：&quot;);\n        int index = sc.nextInt();\n        System.out.println(&quot;请录入你要添加的元素：&quot;);\n        int ele = sc.nextInt();\n\n        //3.增加元素\n        //调用方法：\n        insertEle(arr,index,ele);\n\n\n\n        //4.输出增加元素后的数组：\n        System.out.print(&quot;\\\\n增加元素后的数组：&quot;);\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(i!=arr.length-1)&#123;\n                System.out.print(arr[i]+&quot;,&quot;);\n            &#125;else&#123;//i==arr.length-1 最后一个元素不用加,\n                System.out.print(arr[i]);\n            &#125;\n        &#125;\n\n    &#125;\n\n\n    /\\*\n        提取一个添加元素的方法：\n        在数组的指定位置上添加一个指定的元素。\n        在哪个数组的哪个位置添加哪个元素！\n        不确定因素：形参：哪个数组，哪个位置，哪个元素\n        返回值：无\n\n        \\*/\n        public static void insertEle(int[] arr,int index,int ele)&#123;\n        for(int i=arr.length-1;i\\&gt;=(index+1);i--)&#123;\n            arr[i] = arr[i-1];\n        &#125;\n        arr[index] = ele;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h2><p>【1】实现一个功能：删除指定位置上的元素</p>\n<p>逻辑：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/6c0276c47a14681f40e5ee09c6f35150.png\" class=\"\">\n\n\n<pre><code class=\"java\">import java.util.Arrays;\npublic class TestArray08&#123;\n    public static void main(String[] args)&#123;\n        //功能：给定一个数组,删除下标为2元素\n\n        //1.给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10,34,45,56,7,666&#125;;\n        // 0 1 2 3 4 5\n        //2.输出删除前的数组：\n        System.out.println(&quot;删除元素前的数组：&quot;+Arrays.toString(arr));\n\n        //3.删除\n        /\\*\n            arr[2] = arr[3];\n        arr[3] = arr[4];\n        arr[4] = arr[5];\n        \\*/\n            int index = 0;\n        for(int i=index;i\\&lt;=arr.length-2;i++)&#123;\n            arr[i] = arr[i+1];\n        &#125;\n        arr[arr.length-1] = 0;\n\n        //4.输出删除后的数组：\n        System.out.println(&quot;删除元素后的数组：&quot;+Arrays.toString(arr));\n    &#125;\n&#125;\n</code></pre>\n<p>【2】实现一个功能：删除指定元素</p>\n<pre><code class=\"java\">import java.util.Arrays;\npublic class TestArray09&#123;\n    public static void main(String[] args)&#123;\n        //功能：给定一个数组,删除元素3：\n\n        //1.给定一个数组：\n        int[] arr = &#123;12,34,56,7,3,10,34,45,56,7,666&#125;;\n\n        //2.输出删除前的数组：\n        System.out.println(&quot;删除元素前的数组：&quot;+Arrays.toString(arr));\n\n\n        //找到要删除的元素对应的索引即可：\n        int index = -1 ;\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            if(arr[i]==1200)&#123;\n                index = i;\n                break;\n            &#125;\n        &#125;\n\n        //3.删除\n\n        if(index!=-1)&#123;\n            for(int i=index;i\\&lt;=arr.length-2;i++)&#123;\n                arr[i] = arr[i+1];\n            &#125;\n            arr[arr.length-1] = 0;\n        &#125;else&#123;//index==-1\n            System.out.println(&quot;根本没有你要删除的元素！&quot;);\n        &#125;\n\n\n        //4.输出删除后的数组：\n        System.out.println(&quot;删除元素后的数组：&quot;+Arrays.toString(arr));\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"详述main方法\"><a href=\"#详述main方法\" class=\"headerlink\" title=\"详述main方法\"></a>详述main方法</h1><p>【1】main方法：程序的入口，在同一个类中，如果有多个方法，那么虚拟机就会识别main方法，从这个方法作为程序的入口</p>\n<p>【2】main方法格式严格要求：</p>\n<p>public static void main(String[] args){}</p>\n<p>public static —&gt;修饰符 ，暂时用这个 –&gt;面向对象一章</p>\n<p>void —&gt;代表方法没有返回值 对应的类型void</p>\n<p>main —&gt;见名知意名字</p>\n<p>String[] args —&gt;形参 —》不确定因素</p>\n<p>【3】问题：程序中是否可以有其他的方法也叫main方法？</p>\n<p>可以，构成了方法的重载。</p>\n<pre><code class=\"java\">public class TestArray10&#123;\n    public static void main(String[] args)&#123;\n\n    &#125;\n    public static void main(String str)&#123;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【4】形参为String[] 那么实参到底是什么？</p>\n<pre><code class=\"java\">public class TestArray10&#123;\n    public static void main(String[] args)&#123;\n        //从侧面验证：\n        //int[] arr1; //如果对数组只声明，没有后续操作，那么相当于 白定义了。\n        //int[] arr2 = null;\n        //System.out.println(arr2.length);//Exception in thread &quot;main&quot; java.lang.NullPointerException\n        //int[] arr3 = new int[0];\n        //System.out.println(arr3.length);\n        //int[] arr4 = new int[4];\n        //System.out.println(arr4.length);\n\n        //System.out.println(args.length);//0\n        //从这个结果证明，参数是String[],实参是 new String[0]\n        //默认情况下，虚拟机在调用main方法的时候就是传入了一个长度为0的数组\n\n        System.out.println(args.length);\n        for(String str:args)&#123;\n            System.out.println(str);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>手动传入实参：</p>\n<p>有特殊符号的时候可以加上“”</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/d3da5aadcf3237a0ded3957e968da17a.png\" class=\"\">\n\n\n<p>没有特殊符号用空格隔开即可：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/a7c9de6cf8fb43afc60fbbcea917ed21.png\" class=\"\">\n\n\n<h1 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h1><pre><code class=\"java\">public class TestArray12&#123;\n    /\\*\n        1.可变参数：作用提供了一个方法，参数的个数是可变的 ,解决了部分方法的重载问题\n        int...num\n        double...num\n        boolean...num\n\n\n        2.可变参数在JDK1.5之后加入的新特性\n        3.方法的内部对可变参数的处理跟数组是一样\n        4.可变参数和其他数据一起作为形参的时候，可变参数一定要放在最后\n        5.我们自己在写代码的时候，建议不要使用可变参数。\n        \\*/\n        public static void main(String[] args)&#123;\n        //method01(10);\n        //method01();\n        //method01(20,30,40);\n        method01(30,40,50,60,70);\n        //method01(new int[]&#123;11,22,33,44&#125;);\n    &#125;\n    public static void method01(int num2,int...num)&#123;\n        System.out.println(&quot;-----1&quot;);\n        for(int i:num)&#123;\n            System.out.print(i+&quot;\\\\t&quot;);\n        &#125;\n        System.out.println();\n\n        System.out.println(num2);\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"Arrays工具类\"><a href=\"#Arrays工具类\" class=\"headerlink\" title=\"Arrays工具类\"></a>Arrays工具类</h1><p>为了方便我们对数组进行操作，系统提供一个类Arrays，我们将它当做工具类来使用。</p>\n<pre><code class=\"java\">import java.util.Arrays;\npublic class TestArray13&#123;\n    public static void main(String[] args)&#123;\n        //给定一个数组：\n        int[] arr = &#123;1,3,7,2,4,8&#125;;\n        //toString:对数组进行遍历查看的，返回的是一个字符串，这个字符串比较好看\n        System.out.println(Arrays.toString(arr));\n\n        //binarySearch:二分法查找：找出指定数组中的指定元素对应的索引：\n        //这个方法的使用前提：一定要查看的是一个有序的数组：\n        //sort：排序 --\\&gt;升序\n        Arrays.sort(arr);\n        System.out.println(Arrays.toString(arr));\n        System.out.println(Arrays.binarySearch(arr,4));\n\n        int[] arr2 = &#123;1,3,7,2,4,8&#125;;\n        //copyOf:完成数组的复制：\n        int[] newArr = Arrays.copyOf(arr2,4);\n        System.out.println(Arrays.toString(newArr));\n\n        //copyOfRange:区间复制：\n        int[] newArr2 = Arrays.copyOfRange(arr2,1,4);//[1,4)--\\&gt;1,2,3位置\n        System.out.println(Arrays.toString(newArr2));\n\n        //equals:比较两个数组的值是否一样：\n        int[] arr3 = &#123;1,3,7,2,4,8&#125;;\n        int[] arr4 = &#123;1,3,7,2,4,8&#125;;\n        System.out.println(Arrays.equals(arr3,arr4));//true\n        System.out.println(arr3==arr4);//false ==比较左右两侧的值是否相等，比较的是左右的地址值，返回结果一定是false\n\n        //fill：数组的填充：\n        int[] arr5 = &#123;1,3,7,2,4,8&#125;;\n        Arrays.fill(arr5,10);\n        System.out.println(Arrays.toString(arr5));\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"数组的复制操作\"><a href=\"#数组的复制操作\" class=\"headerlink\" title=\"数组的复制操作\"></a>数组的复制操作</h1><img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/f55029455c828e6298cac80b7e99f3d4.png\" class=\"\">\n\n\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/fe8cc0293b38bcca7c79d0f53366bf51.png\" class=\"\">\n\n\n<p>原理：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/c646de79c14443e0f59dbfd4df86acc9.png\" class=\"\">\n\n\n<p>代码：</p>\n<pre><code class=\"java\">import java.util.Arrays;\npublic class TestArray14&#123;\n    public static void main(String[] args)&#123;\n        //给一个源数组：\n        int[] srcArr = &#123;11,22,33,44,55,66,77,88&#125;;\n        //给一个目标数组：\n        int[] destArr = new int[10];\n\n        //复制：\n        System.arraycopy(srcArr,1,destArr,3,3);\n        //遍历查看目标数组：\n        System.out.println(Arrays.toString(destArr));\n    &#125;\n\n&#125;\n</code></pre>\n<p>结果：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/449d70aa26b1dd58faf4391d631b23c9.png\" class=\"\">\n\n\n<h1 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h1><p>【1】引入：本质上全部都是一维数组：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/34650d8b02d5b0ec054c9dca9a6d89fd.png\" class=\"\">\n\n\n<p>【2】基本代码：</p>\n<pre><code class=\"java\">public class TestArray15&#123;\n    public static void main(String[] args)&#123;\n        //定义一个二维数组：\n        int[][] arr = new int[3][];//本质上定义了一个一维数组，长度为3\n\n        int[] a1 = &#123;1,2,3&#125;;\n        arr[0] = a1;\n\n        arr[1] = new int[]&#123;4,5,6,7&#125;;\n\n        arr[2] = new int[]&#123;9,10&#125;;\n\n    &#125;\n&#125;\n</code></pre>\n<p>对应内存：</p>\n<img data-src=\"/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/7b1ecb2fa93e9b387e7ad62603746e33.png\" class=\"\">\n\n\n<p>【3】四种遍历方式：</p>\n<pre><code class=\"java\">public class TestArray15&#123;\n    public static void main(String[] args)&#123;\n        //定义一个二维数组：\n        int[][] arr = new int[3][];//本质上定义了一个一维数组，长度为3\n\n        int[] a1 = &#123;1,2,3&#125;;\n        arr[0] = a1;\n\n        arr[1] = new int[]&#123;4,5,6,7&#125;;\n\n        arr[2] = new int[]&#123;9,10&#125;;\n\n        //读取6这个元素：\n        //System.out.println(arr[1][2]);\n\n        //对二维数组遍历：\n        //方式1：外层普通for循环+内层普通for循环：\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            for(int j=0;j\\&lt;arr[i].length;j++)&#123;\n                System.out.print(arr[i][j]+&quot;\\\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n\n        //方式2：外层普通for循环+内层增强for循环：\n        for(int i=0;i\\&lt;arr.length;i++)&#123;\n            for(int num:arr[i])&#123;\n                System.out.print(num+&quot;\\\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n\n        //方式3：外层增强for循环+内层增强for循环：\n        for(int[] a:arr)&#123;\n            for(int num:a)&#123;\n                System.out.print(num+&quot;\\\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n\n        //方式4：外层增强for循环+内层普通for循环：\n        for(int[] a:arr)&#123;\n            for(int i=0;i\\&lt;a.length;i++)&#123;\n                System.out.print(a[i]+&quot;\\\\t&quot;);\n            &#125;\n            System.out.println();\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"二维数组的初始化方式\"><a href=\"#二维数组的初始化方式\" class=\"headerlink\" title=\"二维数组的初始化方式\"></a>二维数组的初始化方式</h1><p>数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。</p>\n<ul>\n<li>静态初始化</li>\n</ul>\n<p>除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。</p>\n<p>eg:</p>\n<pre><code class=\"java\">int[][] arr = &#123;&#123;1,2&#125;,&#123;4,5,6&#125;,&#123;4,5,6,7,8,9,9&#125;&#125;;\n\nint[][] arr =new int[][] &#123;&#123;1,2&#125;,&#123;4,5,6&#125;,&#123;4,5,6,7,8,9,9&#125;&#125;;\n</code></pre>\n<ul>\n<li>动态初始化</li>\n</ul>\n<p>数组定义与为数组元素分配空间并赋值的操作分开进行。</p>\n<p>eg:</p>\n<pre><code class=\"java\">int[][] arr = new int[3][]; //本质上定义了一维数组长度为3，每个“格子”中放入的是一个数组\n\narr[0] = new int[]&#123;1,2&#125;;\n\narr[1] = new int[]&#123;3,4,5,6&#125;;\n\narr[2] = new int[]&#123;34,45,56&#125;;\n</code></pre>\n<p>eg:</p>\n<pre><code class=\"java\">int[][] arr = new int[3][2];\n</code></pre>\n<ul>\n<li>默认初始化</li>\n</ul>\n<p>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</p>\n",
            "tags": [
                "JavaSE"
            ]
        }
    ]
}