<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title>记录“美食”每刻</title>
    <link href="http://example.com" />
    <updated>2022-10-15T06:00:00.000Z</updated>
    <category term="博客" />
    <category term="环境搭建" />
    <category term="分布式" />
    <category term="Dubbo" />
    <category term="FastDFS" />
    <category term="MySQL" />
    <category term="数据库基础" />
    <category term="数据库基本知识" />
    <category term="数据库" />
    <category term="框架" />
    <category term="ORM" />
    <category term="RPC" />
    <category term="中间件" />
    <category term="RabbitMQ" />
    <category term="Solr" />
    <category term="快速搜索" />
    <category term="Redis基础" />
    <category term="NoSQL数据库" />
    <category term="Spring" />
    <category term="SpringBoot" />
    <category term="SpringMVC" />
    <category term="SpringSecurity" />
    <category term="JavaSE" />
    <category term="-JavaSE" />
    <entry>
        <id>http://example.com/2022/10/15/tools-All/</id>
        <title>所有工具安装合集</title>
        <link rel="alternate" href="http://example.com/2022/10/15/tools-All/"/>
        <content type="html">&lt;div align=&#39;center&#39; &gt;&lt;font size=&#39;70&#39;&gt;工具安装&lt;/font&gt;&lt;/div&gt;
# 目录

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&#34;注解：&#34;&gt;&lt;a href=&#34;#注解：&#34; class=&#34;headerlink&#34; title=&#34;注解：&#34;&gt;&lt;/a&gt;注解：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;——1 .x：单机安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;——2 .x：Docker安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;X ：方式 X  ,default&amp;#x3D;1 不写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;注所有所需文件均可在gitee上找到&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;———————————————&#34;&gt;&lt;a href=&#34;#———————————————&#34; class=&#34;headerlink&#34; title=&#34;———————————————&#34;&gt;&lt;/a&gt;———————————————&lt;/h1&gt;&lt;h1 id=&#34;PATH———Linux&#34;&gt;&lt;a href=&#34;#PATH———Linux&#34; class=&#34;headerlink&#34; title=&#34;PATH———Linux&#34;&gt;&lt;/a&gt;PATH———Linux&lt;/h1&gt;&lt;h2 id=&#34;Linux&#34;&gt;&lt;a href=&#34;#Linux&#34; class=&#34;headerlink&#34; title=&#34;Linux&#34;&gt;&lt;/a&gt;Linux&lt;/h2&gt;&lt;h3 id=&#34;CentOS–7&#34;&gt;&lt;a href=&#34;#CentOS–7&#34; class=&#34;headerlink&#34; title=&#34;CentOS–7&#34;&gt;&lt;/a&gt;CentOS–7&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.下载镜像文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==&#34;&gt; 清华大学开源软件镜像站&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.开始安装&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/1646489101763.png&#34; class=&#34;&#34;&gt;








&lt;img data-src=&#34;/2022/10/15/tools-All/1646489187835.png&#34; class=&#34;&#34;&gt;






&lt;img data-src=&#34;/2022/10/15/tools-All/1646489210450.png&#34; class=&#34;&#34;&gt;








&lt;img data-src=&#34;/2022/10/15/tools-All/1646489375149.png&#34; class=&#34;&#34;&gt;








&lt;img data-src=&#34;/2022/10/15/tools-All/1646489450527.png&#34; class=&#34;&#34;&gt;






&lt;p&gt;&lt;strong&gt;3.开始进去虚拟机配置我们的软件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1语言&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/1646489591914.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&lt;strong&gt;3.2时区、软件选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;软件选择：按照自己的需求选，第一次多选也不要少选&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/1646489600666.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;4.硬、软配置完成，开始安装，同时要创建管理员Root 和 基础用户&lt;/p&gt;












&lt;p&gt;5.安装成功&lt;/p&gt;









&lt;p&gt;&lt;strong&gt;系统配置&lt;/strong&gt;&lt;/p&gt;
&lt;div name=&#34;Linux_install_centos7&#34;&gt;进入系统后~&lt;/div&gt;
1、首先配置网络

&lt;p&gt;要先切换到 root 用户上去，不然没权限。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;方式一
sudo -i
password:当前普通用户密码

方式二
su -
password：root用户密码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 将  **ONBOOT ** 改为 yes ： &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt; vim /etc/sysconfig/network-scripts/ifcfg-ens33
&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;重启网络&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;# CentOS6
service network restart
#CentOS7
systemlctl restart network 

# 检查是否通畅
ping 114.114.114.114
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、 安装net-tools 和 vim（&lt;strong&gt;有的话可直接跳过&lt;/strong&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;yum install -y net-tools vim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查自己的ip&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;







&lt;p&gt;3 启动sshd服务&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;service sshd start
&lt;/code&gt;&lt;/pre&gt;
&lt;div name=&#34;Linux_minInstall_4&#34;&gt;&lt;/div &gt;
4、修改登录，让Root用户直接登录

&lt;p&gt;&lt;a href=&#34;#problem-6&#34;&gt;具体步骤&lt;/a&gt;   		&lt;/p&gt;
&lt;div name=&#34;Linux_minInstall_5&#34;&gt;&lt;/div &gt;
5、修改DNS连接,让xshell访问快一点

&lt;p&gt;&lt;a href=&#34;#problem-5&#34;&gt;具体步骤&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、 &lt;strong&gt;关闭指定端口防火墙：&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;systemctl status firewalld  

#开启80端口

firewall-cmd --zone=public --add-port=80/tcp --permanent  

#开启3306端口

firewall-cmd --zone=public --add-port=3306/tcp --permanent  

#重启防火墙：

firewall-cmd --reload

关闭防火墙 ，重启失效(Linux系统一重启Linux中的防火墙又会被开起)
service firewalld stop
禁用防火墙，永久有效
systemctl disable firewalld 或者  systemctl disable firewalld.service
启动防火墙 (对禁用的防火墙进行启动)
systemctl enable firewalld
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Docker安装&#34;&gt;&lt;a href=&#34;#Docker安装&#34; class=&#34;headerlink&#34; title=&#34;Docker安装&#34;&gt;&lt;/a&gt;Docker安装&lt;/h2&gt;&lt;p&gt;docker官网，自己选定自己的Linux版本，按照官方文档配置即可，以下CentOS7的&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==&#34;&gt;https://docs.docker.com/engine/install/centos/&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;1、卸载原有的环境：&#34;&gt;&lt;a href=&#34;#1、卸载原有的环境：&#34; class=&#34;headerlink&#34; title=&#34;1、卸载原有的环境：&#34;&gt;&lt;/a&gt;1、卸载原有的环境：&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-selinux \
                  docker-engine-selinux \
                  docker-engine
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、安装对应的依赖环境和镜像地址&#34;&gt;&lt;a href=&#34;#2、安装对应的依赖环境和镜像地址&#34; class=&#34;headerlink&#34; title=&#34;2、安装对应的依赖环境和镜像地址&#34;&gt;&lt;/a&gt;2、安装对应的依赖环境和镜像地址&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum install -y yum-utils 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;官方安装(慢)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装过慢设置镜像 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum-config-manager \ --add-repo \ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、直接安装docker-CE&#34;&gt;&lt;a href=&#34;#3、直接安装docker-CE&#34; class=&#34;headerlink&#34; title=&#34;3、直接安装docker CE&#34;&gt;&lt;/a&gt;3、直接安装docker CE&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum install -y docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;报错时，大概率为&lt;strong&gt;镜像仓库问题&lt;/strong&gt; ，直接执行 &lt;strong&gt;步骤五&lt;/strong&gt; 的补充，再安装&lt;/p&gt;
&lt;h4 id=&#34;4、启动docker服务&#34;&gt;&lt;a href=&#34;#4、启动docker服务&#34; class=&#34;headerlink&#34; title=&#34;4、启动docker服务&#34;&gt;&lt;/a&gt;4、启动docker服务&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;systemctl start docker 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、查看docker的版本&#34;&gt;&lt;a href=&#34;#5、查看docker的版本&#34; class=&#34;headerlink&#34; title=&#34;5、查看docker的版本&#34;&gt;&lt;/a&gt;5、查看docker的版本&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker version 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;**补充：通过官方的镜像地址下载docker会比较慢， **&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置阿里云的镜像地址： &lt;strong&gt;经历过3的镜像库问题也就是配置阿里云镜像地址&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;yum更新下即可：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;yum makecache fast 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6、开机启动docker&#34;&gt;&lt;a href=&#34;#6、开机启动docker&#34; class=&#34;headerlink&#34; title=&#34;6、开机启动docker&#34;&gt;&lt;/a&gt;6、开机启动docker&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;补充：docker pull 下载镜像太慢，更换源进行网络加速的解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;步骤1：
sudo mkdir -p /etc/docker

步骤2：
sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
&amp;#123;
  &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://glhlrb75.mirror.aliyuncs.com&amp;quot;]
&amp;#125;
EOF
或者（老师的）
sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
&amp;#123; 
    &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://v9j5rufo.mirror.aliyuncs.com&amp;quot;] 
&amp;#125;
EOF

步骤3：
sudo systemctl daemon-reload

步骤4：
sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7、使用&#34;&gt;&lt;a href=&#34;#7、使用&#34; class=&#34;headerlink&#34; title=&#34;7、使用&#34;&gt;&lt;/a&gt;7、使用&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_25760623/article/details/88657491&#34;&gt;&lt;strong&gt;阿里云安装docker：&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1NzYwNjIzL2FydGljbGUvZGV0YWlscy84ODY1NzQ5MQ==&#34;&gt;https://blog.csdn.net/qq_25760623/article/details/88657491&lt;/span&gt; &lt;/p&gt;
&lt;h2 id=&#34;Docker-Compose安装&#34;&gt;&lt;a href=&#34;#Docker-Compose安装&#34; class=&#34;headerlink&#34; title=&#34;Docker-Compose安装&#34;&gt;&lt;/a&gt;Docker-Compose安装&lt;/h2&gt;&lt;h3 id=&#34;方式一&#34;&gt;&lt;a href=&#34;#方式一&#34; class=&#34;headerlink&#34; title=&#34;方式一&#34;&gt;&lt;/a&gt;方式一&lt;/h3&gt;&lt;p&gt;官网地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZQ==&#34;&gt;https://docs.docker.com/compose&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推荐&lt;/strong&gt;： 国内地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dldC5kYW9jbG91ZC5pby8jaW5zdGFsbC1jb21wb3Nl&#34;&gt;http://get.daocloud.io/#install-compose&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo curl -L &amp;quot;https://github.com/docker/compose/releases/download/1.29.2/docker- compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;速度比较慢的话使用下面的地址： &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker- compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改文件夹权限 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建立软连接 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;校验是否安装成功&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose --version
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;方式二&#34;&gt;&lt;a href=&#34;#方式二&#34; class=&#34;headerlink&#34; title=&#34;方式二&#34;&gt;&lt;/a&gt;方式二&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;手动下载 docker-compose 到本地，然后上传到 linux 服务器的 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin 路径下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）百度网盘：链接: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMW9fMlhzSUxmd2NBN21Sbi1mN0Exd0E=&#34;&gt;https://pan.baidu.com/s/1o_2XsILfwcA7mRn-f7A1wA&lt;/span&gt; 提取码: qiue  —— 网盘中 docker-compose 版本：2.2.2&lt;/p&gt;
&lt;p&gt;（2）也可以去GitHub上下：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3JlbGVhc2Vz&#34;&gt;https://github.com/docker/compose/releases&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tools-all2020.cnblogs.com/blog/1376119/202112/1376119-20211222005944642-1364547608.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;重命名：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;mv docker-compose-linux-x86_64 docker-compose&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;授权：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; chmod +x .&amp;#x2F;docker-compose &lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;查看版本：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;docker-compose –version&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tools-all2020.cnblogs.com/blog/1376119/202112/1376119-20211222005757511-1189151957.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;升级（方式三）&#34;&gt;&lt;a href=&#34;#升级（方式三）&#34; class=&#34;headerlink&#34; title=&#34;升级（方式三）&#34;&gt;&lt;/a&gt;升级（方式三）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;下载，命令如下👇：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;因Github国内访问不太稳定所以使用DaoCloud提供加速：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dldC5kYW9jbG91ZC5pby8jaW5zdGFsbC1jb21wb3Nl&#34;&gt;链接&lt;/span&gt;，你&lt;strong&gt;可以通过URL中的版本号，自定义下载你所需要的版本文件。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对命令进行一个授权&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;查看compose版本命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose --version
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;卸载&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo rm /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Python升级&#34;&gt;&lt;a href=&#34;#Python升级&#34; class=&#34;headerlink&#34; title=&#34;Python升级&#34;&gt;&lt;/a&gt;Python升级&lt;/h2&gt;&lt;h4 id=&#34;一、查看当前python版本&#34;&gt;&lt;a href=&#34;#一、查看当前python版本&#34; class=&#34;headerlink&#34; title=&#34;一、查看当前python版本&#34;&gt;&lt;/a&gt;一、&lt;strong&gt;查看当前python版本&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;[root@ansible ~]# python -V
Python 2.7.5
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;二、下载新的python包并安装&#34;&gt;&lt;a href=&#34;#二、下载新的python包并安装&#34; class=&#34;headerlink&#34; title=&#34;二、下载新的python包并安装&#34;&gt;&lt;/a&gt;二、&lt;strong&gt;下载新的python包并安装&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	进入python官网（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucHl0aG9uLm9yZyks6YCJ5oup6ZyA6KaB55qE54mI5pysLuatpOWkhOaIkemAieaLqeW9k+WJjeacgOaWsOeJiOacrHB5dGhvbjMuNi4xLw==&#34;&gt;https://www.python.org），选择需要的版本。此处我选择当前最新版本Python3.6.1&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install gcc gcc-c++ -y

wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz

tar xvf Python-3.7.3.tar.xz 

cd Python-3.7.3/

 ./configure
 
make

make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;三、验证&#34;&gt;&lt;a href=&#34;#三、验证&#34; class=&#34;headerlink&#34; title=&#34;三、验证&#34;&gt;&lt;/a&gt;三、&lt;strong&gt;验证&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;#python -V     #一个是旧版本，一个是新版本
Python 2.7.5
# python3 -V
Python 3.7.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;四、设置3-X为默认版本&#34;&gt;&lt;a href=&#34;#四、设置3-X为默认版本&#34; class=&#34;headerlink&#34; title=&#34;四、设置3.X为默认版本&#34;&gt;&lt;/a&gt;四、&lt;strong&gt;设置3.X为默认版本&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	查看 Python 的路径，在 &amp;#x2F;usr&amp;#x2F;bin 下面。可以看到 python 链接的是 python 2.7，所以，执行 python 就相当于执行 python 2.7。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible ~]# ls -al /usr/bin | grep python
-rwxr-xr-x.   1 root root       11232 Dec  2  2016 abrt-action-analyze-python
lrwxrwxrwx.   1 root root           7 May 26  2017 python -&amp;gt; python2
lrwxrwxrwx.   1 root root           9 May 26  2017 python2 -&amp;gt; python2.7
-rwxr-xr-x.   1 root root        7136 Nov  6  2016 python2.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将原来 python 的软链接重命名：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  mv /usr/bin/python /usr/bin/python.bak
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 python 链接至 python3：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ln -s /usr/local/bin/python3 /usr/bin/python
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;五、配置yum&#34;&gt;&lt;a href=&#34;#五、配置yum&#34; class=&#34;headerlink&#34; title=&#34;五、配置yum&#34;&gt;&lt;/a&gt;五、&lt;strong&gt;配置yum&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	升级 Python 之后，由于将默认的 python 指向了 python3，yum 不能正常使用，需要编辑 yum 的配置文件，此时：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@ansible-admin Python-3.7.3]# yum list
  File &amp;quot;/usr/bin/yum&amp;quot;, line 30
    except KeyboardInterrupt, e:

SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	修改&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;yum和&amp;#x2F;usr&amp;#x2F;libexec&amp;#x2F;urlgrabber-ext-down，将 #!&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;python 改为 #!&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;python2.7，保存退出即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vim &amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;yum&lt;/p&gt;
&lt;p&gt;vim &amp;#x2F;usr&amp;#x2F;libexec&amp;#x2F;urlgrabber-ext-down&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div name=&#34;jdk_install&#34;&gt;&lt;/div&gt;
## jdk安装

&lt;h4 id=&#34;1、下载对应的版本&#34;&gt;&lt;a href=&#34;#1、下载对应的版本&#34; class=&#34;headerlink&#34; title=&#34;1、下载对应的版本&#34;&gt;&lt;/a&gt;1、下载对应的版本&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1.1下载Linux对应版本的JDK&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;getconf  LONG_BIT
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;1.2下载压缩文件&lt;/strong&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jdk-8u261-linux-x64.tar.gz         &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;2、解压压缩文件&#34;&gt;&lt;a href=&#34;#2、解压压缩文件&#34; class=&#34;headerlink&#34; title=&#34;2、解压压缩文件&#34;&gt;&lt;/a&gt;2、解压压缩文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;tar -xvf   jdk-8u261-linux-x64.tar.gz  -C  /usr/local/  
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、配置环境变量&#34;&gt;&lt;a href=&#34;#3、配置环境变量&#34; class=&#34;headerlink&#34; title=&#34;3、配置环境变量&#34;&gt;&lt;/a&gt;3、配置环境变量&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim  /etc/profile

#自己选定的目录
export JAVA_HOME=/usr/local/jdk1.8.0_261
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、使用环境变量生效&#34;&gt;&lt;a href=&#34;#4、使用环境变量生效&#34; class=&#34;headerlink&#34; title=&#34;4、使用环境变量生效&#34;&gt;&lt;/a&gt;4、使用环境变量生效&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;#perblem-1&#34;&gt;长久生效&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;5、测试JDK是否安装成功&#34;&gt;&lt;a href=&#34;#5、测试JDK是否安装成功&#34; class=&#34;headerlink&#34; title=&#34;5、测试JDK是否安装成功&#34;&gt;&lt;/a&gt;5、测试JDK是否安装成功&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;java -version
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Tomcat安装&#34;&gt;&lt;a href=&#34;#Tomcat安装&#34; class=&#34;headerlink&#34; title=&#34;Tomcat安装&#34;&gt;&lt;/a&gt;Tomcat安装&lt;/h2&gt;&lt;h3 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h4 id=&#34;1、下载Linux对应版本的Tomcat&#34;&gt;&lt;a href=&#34;#1、下载Linux对应版本的Tomcat&#34; class=&#34;headerlink&#34; title=&#34;1、下载Linux对应版本的Tomcat&#34;&gt;&lt;/a&gt;1、下载Linux对应版本的Tomcat&lt;/h4&gt;&lt;p&gt;​	  下载压缩文件     apache-tomcat-7.0.68.tar.gz         &lt;/p&gt;
&lt;h4 id=&#34;2、解压压缩文件-1&#34;&gt;&lt;a href=&#34;#2、解压压缩文件-1&#34; class=&#34;headerlink&#34; title=&#34;2、解压压缩文件&#34;&gt;&lt;/a&gt;2、解压压缩文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;tar -xvf   apache-tomcat-7.0.68.tar.gz -C /usr/local/  #解压到的路径 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、配置环境变量-1&#34;&gt;&lt;a href=&#34;#3、配置环境变量-1&#34; class=&#34;headerlink&#34; title=&#34;3、配置环境变量&#34;&gt;&lt;/a&gt;3、配置环境变量&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim  /etc/profile

#自己定义为位置
export CATALINA_BASE=/usr/local/apache-tomcat-7.0.68
export PATH=$CATALINA_BASE/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、使用环境变量生效-1&#34;&gt;&lt;a href=&#34;#4、使用环境变量生效-1&#34; class=&#34;headerlink&#34; title=&#34;4、使用环境变量生效&#34;&gt;&lt;/a&gt;4、使用环境变量生效&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、启动Tomcat服务&#34;&gt;&lt;a href=&#34;#5、启动Tomcat服务&#34; class=&#34;headerlink&#34; title=&#34;5、启动Tomcat服务&#34;&gt;&lt;/a&gt;5、启动Tomcat服务&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;注：要是远程访问你关注防火墙问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;启动Tomcat服务：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;/usr/local/apache-tomcat-7.0.68/bin./startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动Tomcat并输出启动日志 :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;/usr/local/apache-tomcat-7.0.68/bin/startup.sh &amp;amp; tail -f  /usr/local/apache-tomcat-7.0.68/logs/catalina.out
&lt;/code&gt;&lt;/pre&gt;
&lt;div name=&#34;mysql_install&#34;&gt;

&lt;h2 id=&#34;MySQL-安装&#34;&gt;&lt;a href=&#34;#MySQL-安装&#34; class=&#34;headerlink&#34; title=&#34;MySQL 安装&#34;&gt;&lt;/a&gt;MySQL 安装&lt;/h2&gt;&lt;h3 id=&#34;——1-1&#34;&gt;&lt;a href=&#34;#——1-1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h4 id=&#34;1、卸载原来的版本&#34;&gt;&lt;a href=&#34;#1、卸载原来的版本&#34; class=&#34;headerlink&#34; title=&#34;1、卸载原来的版本&#34;&gt;&lt;/a&gt;1、卸载原来的版本&lt;/h4&gt;&lt;h5 id=&#34;1、查看mysql的安装情况&#34;&gt;&lt;a href=&#34;#1、查看mysql的安装情况&#34; class=&#34;headerlink&#34; title=&#34;1、查看mysql的安装情况&#34;&gt;&lt;/a&gt;1、查看mysql的安装情况&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rpm -qa | grep -i mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/1570605325400.png&#34; class=&#34;&#34;&gt;




&lt;h5 id=&#34;2、删除上图安装的软件&#34;&gt;&lt;a href=&#34;#2、删除上图安装的软件&#34; class=&#34;headerlink&#34; title=&#34;2、删除上图安装的软件&#34;&gt;&lt;/a&gt;2、删除上图安装的软件&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rpm -ev --nodeps mysql57-community-release-el5-7.noarch
rpm -ev --nodeps mysql-community-server-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-client-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-libs-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-common-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-libs-compat-5.7.18-1.el5.x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3、都删除成功之后，查找相关的mysql的文件&#34;&gt;&lt;a href=&#34;#3、都删除成功之后，查找相关的mysql的文件&#34; class=&#34;headerlink&#34; title=&#34;3、都删除成功之后，查找相关的mysql的文件&#34;&gt;&lt;/a&gt;3、都删除成功之后，查找相关的mysql的文件&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;find / -name mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/1570605553095.png&#34; class=&#34;&#34;&gt;




&lt;h5 id=&#34;4、删除全部文件&#34;&gt;&lt;a href=&#34;#4、删除全部文件&#34; class=&#34;headerlink&#34; title=&#34;4、删除全部文件&#34;&gt;&lt;/a&gt;4、删除全部文件&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rm -rf /etc/selinux/targeted/active/modules/100/mysql
rm -rf /root/mysql
rm -rf /root/mysql/data/mysql
rm -rf /var/lib/mysql
rm -rf /var/lib/mysql/mysql
rm -rf /usr/share/mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5、再次执行命令&#34;&gt;&lt;a href=&#34;#5、再次执行命令&#34; class=&#34;headerlink&#34; title=&#34;5、再次执行命令&#34;&gt;&lt;/a&gt;5、再次执行命令&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;rpm -qa | grep -i mysql
#如果没有显式则表示卸载完成
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、删除mariadb-libs-不可省略&#34;&gt;&lt;a href=&#34;#2、删除mariadb-libs-不可省略&#34; class=&#34;headerlink&#34; title=&#34;2、删除mariadb-libs(不可省略)&#34;&gt;&lt;/a&gt;2、删除mariadb-libs(不可省略)&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 检查mariadb-libs
rpm -qa|grep mariadb
# 卸载mariadb-libs
yum remove mariadb-libs
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、安装MySQL&#34;&gt;&lt;a href=&#34;#3、安装MySQL&#34; class=&#34;headerlink&#34; title=&#34;3、安装MySQL&#34;&gt;&lt;/a&gt;3、安装MySQL&lt;/h4&gt;&lt;h5 id=&#34;1，输入：&#34;&gt;&lt;a href=&#34;#1，输入：&#34; class=&#34;headerlink&#34; title=&#34;1，输入：&#34;&gt;&lt;/a&gt;1，输入：&lt;/h5&gt;&lt;p&gt;wegt &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2dldC9teXNxbCVFNyU4OSU4OCVFNiU5QyVBQyVFNSU4RiVCNy1jb21tdW5pdHktcmVsZWFzZS1lbCVFNSVBNCVBNyVFNyU4OSU4OCVFNiU5QyVBQy0lRTUlQjAlOEYlRTclODklODglRTYlOUMlQUMubm9hcmNoLnJwbQ==&#34;&gt;https://dev.mysql.com/get/mysql版本号-community-release-el大版本-小版本.noarch.rpm&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;wget https://dev.mysql.com/get/mysql57-community-release-el5-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2、安装数据源&#34;&gt;&lt;a href=&#34;#2、安装数据源&#34; class=&#34;headerlink&#34; title=&#34;2、安装数据源&#34;&gt;&lt;/a&gt;2、安装数据源&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install -y mysql57-community-release-el5-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3、查看mysql源是否安装成功&#34;&gt;&lt;a href=&#34;#3、查看mysql源是否安装成功&#34; class=&#34;headerlink&#34; title=&#34;3、查看mysql源是否安装成功&#34;&gt;&lt;/a&gt;3、查看mysql源是否安装成功&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum repolist enabled | grep &amp;quot;mysql.*-community.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4、安装数据库&#34;&gt;&lt;a href=&#34;#4、安装数据库&#34; class=&#34;headerlink&#34; title=&#34;4、安装数据库&#34;&gt;&lt;/a&gt;4、安装数据库&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install -y  mysql-community-server

# 如果过期可以在运行安装程序之前导入密钥，有了就不用了
rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5、启动mysql&#34;&gt;&lt;a href=&#34;#5、启动mysql&#34; class=&#34;headerlink&#34; title=&#34;5、启动mysql&#34;&gt;&lt;/a&gt;5、启动mysql&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# centos7
systemctl restart mysqld
systemctl status mysqld


# centos6
service mysqld start
service mysqld status
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6、显示mysql的随机密码&#34;&gt;&lt;a href=&#34;#6、显示mysql的随机密码&#34; class=&#34;headerlink&#34; title=&#34;6、显示mysql的随机密码&#34;&gt;&lt;/a&gt;6、显示mysql的随机密码&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;grep &amp;#39;temporary password&amp;#39; /var/log/mysqld.log
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/image-20220827193405451.png&#34; class=&#34;&#34;&gt;




&lt;h5 id=&#34;7、登录并修改mysql密码&#34;&gt;&lt;a href=&#34;#7、登录并修改mysql密码&#34; class=&#34;headerlink&#34; title=&#34;7、登录并修改mysql密码&#34;&gt;&lt;/a&gt;7、登录并修改mysql密码&lt;/h5&gt;&lt;p&gt;登录：mysql -u root -p   		然后输入上面生成的密码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;修改自定义密码，设置新的密码，进入操作页面，修改密码策略可以修改成你想要的&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;密码&amp;#39;;

ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;Root_21root&amp;#39;;

ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;root&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;失败了的话就修改策略，将策略降低一下就可以了&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看密码策略：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHOW VARIABLES LIKE &amp;#39;%password%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改密码策略&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 修改密码长度：（长度）
set global validate_password_length=1;
-- 修改密码等级：（等级）
set global validate_password_policy=0;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、其他配置&#34;&gt;&lt;a href=&#34;#4、其他配置&#34; class=&#34;headerlink&#34; title=&#34;4、其他配置&#34;&gt;&lt;/a&gt;4、其他配置&lt;/h4&gt;&lt;h5 id=&#34;1-远程连接&#34;&gt;&lt;a href=&#34;#1-远程连接&#34; class=&#34;headerlink&#34; title=&#34;1.远程连接&#34;&gt;&lt;/a&gt;1.远程连接&lt;/h5&gt;&lt;h6 id=&#34;方法一、创建一个用户-支持远程连接&#34;&gt;&lt;a href=&#34;#方法一、创建一个用户-支持远程连接&#34; class=&#34;headerlink&#34; title=&#34;方法一、创建一个用户 支持远程连接&#34;&gt;&lt;/a&gt;方法一、创建一个用户 支持远程连接&lt;/h6&gt;&lt;p&gt;①登录 ：mysql -u root -p&lt;/p&gt;
&lt;p&gt;②创建用户： create user ‘aaa‘@’%’ identified by ‘123456’;&lt;/p&gt;
&lt;p&gt;③授权所有权限给user这个新用户 ：grant all on &lt;em&gt;.&lt;/em&gt; to ‘aaa‘@’%’;&lt;/p&gt;
&lt;p&gt;④退出mysql：quit;&lt;/p&gt;
&lt;h6 id=&#34;方法二、设置root用户支持远程连接&#34;&gt;&lt;a href=&#34;#方法二、设置root用户支持远程连接&#34; class=&#34;headerlink&#34; title=&#34;方法二、设置root用户支持远程连接&#34;&gt;&lt;/a&gt;方法二、设置root用户支持远程连接&lt;/h6&gt;&lt;p&gt;①登录：mysql -u root -p （ 注：系统提示输入数据库root用户的密码，输入完成后即进入mysql控制台，这个命令的第一个mysql是执行命令，第二个mysql是系统数据名称，不一样的。）&lt;/p&gt;
&lt;p&gt;②设置权限：&lt;/p&gt;
&lt;p&gt;赋予权限格式： grant 权限 on 数据库对象 to 用户@IP(或者相应正则)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 新建用户规则或者直接修改root用户的规则 ，2 选一
use mysql;

-- 这里表示赋予该用户所有数据库所有表（*.*表示所有表），%表示所有IP地址。
GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;123456&amp;#39; WITH GRANT OPTION;
-- 使root能再任何host访问
update user set host = &amp;#39;%&amp;#39; where user = &amp;#39;root&amp;#39;;      

-- 刷新
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;③查看：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;use mysql;
SELECT HOST,USER FROM USER;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/920952e9041b4af1a8a49eb64e0f4430.jpeg&#34; class=&#34;&#34;&gt;




&lt;p&gt; ④退出mysql：quit;&lt;/p&gt;
&lt;h5 id=&#34;2-开机自启&#34;&gt;&lt;a href=&#34;#2-开机自启&#34; class=&#34;headerlink&#34; title=&#34;2.开机自启&#34;&gt;&lt;/a&gt;2.开机自启&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 开机启动
systemctl enable mysql
# 关闭自动启动
systemctl disable mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;——2&#34;&gt;&lt;a href=&#34;#——2&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h3&gt;&lt;h4 id=&#34;1、查询镜像&#34;&gt;&lt;a href=&#34;#1、查询镜像&#34; class=&#34;headerlink&#34; title=&#34;1、查询镜像&#34;&gt;&lt;/a&gt;1、查询镜像&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker search mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、拉取镜像&#34;&gt;&lt;a href=&#34;#2、拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;2、拉取镜像&#34;&gt;&lt;/a&gt;2、拉取镜像&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、构建容器&#34;&gt;&lt;a href=&#34;#3、构建容器&#34; class=&#34;headerlink&#34; title=&#34;3、构建容器&#34;&gt;&lt;/a&gt;3、构建容器&lt;/h4&gt;&lt;p&gt;先自己创建配置文件基础模板（&lt;strong&gt;要是后期要修改配置文件必须加入 模板中的两个元素，不然容器启动会出错&lt;/strong&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir -p /root/mysql/conf
vim  /root/mysql/conf/my.cnf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;模板内容：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;
# Copyright (c) 2016, 2021, Oracle and/or its affiliates.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2.0,
# as published by the Free Software Foundation.
#
# This program is also distributed with certain software (including
# but not limited to OpenSSL) that is licensed under separate terms,
# as designated in a particular file or component or in included license
# documentation.  The authors of MySQL hereby grant you an additional
# permission to link the program and your derivative works with the
# separately licensed software that they have included with MySQL.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License, version 2.0, for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA


!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mysql.conf.d/

[mysql]
default-character-set=utf8
[mysqld]
character_set_server=utf8
init_connect=&amp;#39;SET NAMES utf8&amp;#39;
lower_case_table_names = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;构建容器&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run \
-p 3306:3306 \
-v /root/mysql/data:/var/lib/mysql \
-v /root/mysql/logs:/logs \
-v /root/mysql/conf/my.cnf:/etc/mysql/my.cnf \
-e MYSQL_ROOT_PASSWORD=root \
--name mysql \
--hostname node1 \
--restart=always \
-d mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：出错时将本地映射文件检查一下，要是不需要配置，只需映射直接删掉就可，以后再改配置文件&lt;/p&gt;
&lt;h4 id=&#34;4、进入容器&#34;&gt;&lt;a href=&#34;#4、进入容器&#34; class=&#34;headerlink&#34; title=&#34;4、进入容器&#34;&gt;&lt;/a&gt;4、进入容器&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it mysql /bin/bash
或者
docker exec -it mysql mysql -uroot -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、查看远程连接&#34;&gt;&lt;a href=&#34;#5、查看远程连接&#34; class=&#34;headerlink&#34; title=&#34;5、查看远程连接&#34;&gt;&lt;/a&gt;5、查看远程连接&lt;/h4&gt;&lt;p&gt;还有一些方法也可以试一下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;1.赋予权限格式：grant 权限 on 数据库对象 to 用户@IP(或者相应正则)

　　　　注：可以赋予select,delete,update,insert,index等权限精确到某一个数据库某一个表。

　　　　GRANT ALL PRIVILEGES ON *.* TO &amp;#39;用户名&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;密码&amp;#39; WITH GRANT OPTION;
      GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;123456&amp;#39; WITH GRANT OPTION;

　　　　这里表示赋予该用户所有数据库所有表（*.*表示所有表），%表示所有IP地址。

2.刷新权限：FLUSH PRIVILEGES;

3.查看权限：select user,host from mysql.user;

二.意外
　　1.配置文件种指定了blind-address：
　　　　查看Mysql配置文件种（一般是/etc/my.cnf种）是否指定了blind-address，这表示只能是某个或某几个ip能连接。如果有就将它注释了，前面加#号注释。然后从启mysql。
    　重启mysql：service mysqld restart,如果安装的是Mariadb（我的就是）,则需要使用systemctl restart mariadb.service
    　
    2.防火墙的原因：
　　　　可能会报：ERROR 2003 (HY000): Can&amp;#39;t connect to MySQL server on &amp;#39;你要连接的IP&amp;#39; (111)。

　　　　原因：1.可能是Mysql端口不对（默认是3306），只需加参数 -P 你的端口指定就行；
　　　　
　　　2.还有可能是有防火墙阻止，可以通过telnet来测试（可以直接关闭防火墙）。
　　　　　　　　　　防火墙相关命令：

　　　　　　　　　　　　（1）查看防火墙状态：service  iptables status或者systemctl status firewalld或者firewall-cmd --state

　　　　　　　　　　　　（2）暂时关闭防火墙：systemctl stop firewalld或者service  iptables stop或者systemctl stop firewalld.service

　　　　　　　　　　　　（3）永久关闭防火墙：systemctl disable firewalld或者chkconfig iptables off或者systemctl disable firewalld.service

　　　　　　　　　　　　（4）重启防火墙：systemctl enable firewalld或者service iptables restart  或者systemctl restart firewalld.service

 　　　　　　　　　　　　 (5)永久关闭后重启：chkconfig iptables on

　　

　　3.端口未开启：（我遇到的就是这个原因）
　　　　　　Mysql：ERROR 2003 (HY000) 110（连接超时）

　　　　　　查看你的服务器是否把对应端口打开，未打开启动就行了。　
　　　　　　
   4.Navicat连接MySQL，出现2059 - authentication plugin &amp;#39;caching_sha2_password&amp;#39;的解决方案
      
      0先进入容器，
      docker exec -it mysql mysql -uroot -p
      
      1#修改加密规则password是自己的密码，root也是登陆账户，下同。
      use mysql;
    ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;root&amp;#39; PASSWORD EXPIRE NEVER; 
    
    2 #更新一下用户的密码 
    ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;root&amp;#39;;
    
    3#刷新权限 
    FLUSH PRIVILEGES; 
    
    4#更新一下用户的密码
    ALTER USER &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;root&amp;#39;; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;——2-1&#34;&gt;&lt;a href=&#34;#——2-1&#34; class=&#34;headerlink&#34; title=&#34;——2.1&#34;&gt;&lt;/a&gt;——2.1&lt;/h3&gt;&lt;p&gt;前提安装了 docker-compose，配置  docker-comose.yml 文件&lt;/p&gt;
&lt;p&gt;5.7：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;version: &amp;quot;3.0&amp;quot;
services:
  mysql8:
    image: mysql:5.7.32
    container_name: my_db57
    restart: always
    volumes:
      - ./db:/var/lib/mysql
      - ./conf/my.cnf:/etc/my.cnf
      # 数据库初始化脚本，当Mysql容器首次启动时，会在 /docker-entrypoint-initdb.d目录下扫描 .sh，.sql，.sql.gz类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库；
      - ./init/:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      # 指定初始化sql文件的数据库，简单来书就是新建一个数据库
      - MYSQL_DATABASE=my_db
      - TZ=Asia/Shanghai
    ports:
      - 3311:3306
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.0&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;version: &amp;quot;3.0&amp;quot;
services:
  mysql8:
    image: mysql:8.0.25
    container_name: my_db8
    restart: always
    volumes:
      - ./db:/var/lib/mysql
      - ./conf/my.cnf:/etc/my.cnf
      # 数据库初始化脚本，当Mysql容器首次启动时，会在 /docker-entrypoint-initdb.d目录下扫描 .sh，.sql，.sql.gz类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库；
      - ./init/:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      # 指定初始化sql文件的数据库，简单来书就是新建一个数据库
      - MYSQL_DATABASE=my_db
      - TZ=Asia/Shanghai
    ports:
      - 3301:3306
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置文件 my.cnf &lt;/p&gt;
&lt;p&gt;5.7：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4

[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

symbolic-links=0

log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8mb4

# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.0：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4
[mysqld]
# 允许最大连接数
max_connections=200

# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8mb4

# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;问题&#34;&gt;&lt;a href=&#34;#问题&#34; class=&#34;headerlink&#34; title=&#34;问题&#34;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;1、Can’t create&amp;#x2F;write to file ‘&amp;#x2F;var&amp;#x2F;run&amp;#x2F;mysqld&amp;#x2F;mysqld.pid&lt;/p&gt;
&lt;p&gt;去配置文件中找到 errorlog的地址，查看错误日志&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/20190602012200812.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;错误原因为：&amp;#x2F;var&amp;#x2F;run&amp;#x2F;mysqld&amp;#x2F;目录的拥有者为root，mysql不能在其中创建文件&lt;/p&gt;
&lt;p&gt;使用如下命令修改目录使用者&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;# 先查看目录是否存在
ls -ld /var/run/mysqld/
# 权限
chown mysql.mysql /var/run/mysqld/
# 修改后重启mysql服务
/etc/init.d/mysqld start
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;FastDFS安装&#34;&gt;&lt;a href=&#34;#FastDFS安装&#34; class=&#34;headerlink&#34; title=&#34;FastDFS安装&#34;&gt;&lt;/a&gt;FastDFS安装&lt;/h2&gt;&lt;h3 id=&#34;——1-2&#34;&gt;&lt;a href=&#34;#——1-2&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h4 id=&#34;1-安装FastDFS依赖&#34;&gt;&lt;a href=&#34;#1-安装FastDFS依赖&#34; class=&#34;headerlink&#34; title=&#34;1.安装FastDFS依赖&#34;&gt;&lt;/a&gt;1.安装FastDFS依赖&lt;/h4&gt;&lt;p&gt;FastDFS是C语言开发的应用。安装必须使用 make , cmake 和 gcc编译器。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;  yum install -y make cmake gcc gcc-c++
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-上传并解压libfastcommon-master&#34;&gt;&lt;a href=&#34;#2-上传并解压libfastcommon-master&#34; class=&#34;headerlink&#34; title=&#34;2 上传并解压libfastcommon-master&#34;&gt;&lt;/a&gt;2 上传并解压libfastcommon-master&lt;/h4&gt;&lt;p&gt;​	上传libfastcommon-master 到 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp下。 libfastcommon是从FastDFS和FastDHT中提取出来的公共C函数库&lt;/p&gt;
&lt;p&gt;​	解压 libfastcommon-master.zip 由于是zip文件所以要使用 unzip命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;  cd /usr/local/tmp
  unzip libfastcommon-master.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-编译并安装&#34;&gt;&lt;a href=&#34;#3-编译并安装&#34; class=&#34;headerlink&#34; title=&#34;3 编译并安装&#34;&gt;&lt;/a&gt;3 编译并安装&lt;/h4&gt;&lt;p&gt;​	libfastcommon没有提供make命令安装文件。使用的是shell脚本执行编译和安装。shell脚本为 make.sh&lt;/p&gt;
&lt;p&gt;​	进入解压后的文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; cd libfastcommon-master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	编译&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; ./make.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	安装	&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; ./make.sh install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	有固定的默认安装位置。在&amp;#x2F;usr&amp;#x2F;lib64 和  &amp;#x2F;usr&amp;#x2F;include&amp;#x2F;fastcommon两个目录中&lt;/p&gt;
&lt;h4 id=&#34;4-创建软连接&#34;&gt;&lt;a href=&#34;#4-创建软连接&#34; class=&#34;headerlink&#34; title=&#34;4 创建软连接&#34;&gt;&lt;/a&gt;4 创建软连接&lt;/h4&gt;&lt;p&gt;​	 因为FastDFS 主程序设置的lib目录是 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;lib， 所以需要创建软连接&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; ln -s /user/lib64/libfastcommon.so /usr/local/lib/libfastcommon.so
 ln -s /usr/local/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.so
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-上传并解压FastDFS主程序&#34;&gt;&lt;a href=&#34;#5-上传并解压FastDFS主程序&#34; class=&#34;headerlink&#34; title=&#34;5 上传并解压FastDFS主程序&#34;&gt;&lt;/a&gt;5 上传并解压FastDFS主程序&lt;/h4&gt;&lt;p&gt;​	 上传 FastDFS_v5.08.tar.gz 到 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp下后解压&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; cd /usr/local/tmp
 tar zxf FastDFS_v5.08.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-编译并安装FastDFS&#34;&gt;&lt;a href=&#34;#6-编译并安装FastDFS&#34; class=&#34;headerlink&#34; title=&#34;6 编译并安装FastDFS&#34;&gt;&lt;/a&gt;6 编译并安装FastDFS&lt;/h4&gt;&lt;p&gt;​	进入到解压后的FastDFS文件中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; cd FastDFS
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	编译&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; ./make.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	安装&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; ./make.sh install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	安装后 FastDFS主程序所在的位置是&lt;/p&gt;
&lt;p&gt;​	&amp;#x2F;usr&amp;#x2F;bin  可执行文件所在的位置&lt;/p&gt;
&lt;p&gt;​	&amp;#x2F;etc&amp;#x2F;fdfs  配置文件所在的位置&lt;/p&gt;
&lt;p&gt;​	&amp;#x2F;usr&amp;#x2F;bin  主程序代码所在位置&lt;/p&gt;
&lt;p&gt;​	&amp;#x2F;usr&amp;#x2F;include&amp;#x2F;fastdfs 包含一些插件组所在的位置&lt;/p&gt;
&lt;h4 id=&#34;7-配置tracker&#34;&gt;&lt;a href=&#34;#7-配置tracker&#34; class=&#34;headerlink&#34; title=&#34;7 配置tracker&#34;&gt;&lt;/a&gt;7 配置tracker&lt;/h4&gt;&lt;h5 id=&#34;7-1-复制配置文件&#34;&gt;&lt;a href=&#34;#7-1-复制配置文件&#34; class=&#34;headerlink&#34; title=&#34;7.1 复制配置文件&#34;&gt;&lt;/a&gt;7.1 复制配置文件&lt;/h5&gt;&lt;p&gt;​	进入到 &amp;#x2F;etc&amp;#x2F;fdfs 中 ， 把tracker配置文件复制一份&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;  cd /etc/fdfs
  cp tracker.conf.sample tracker.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;7-2-创建数据目录&#34;&gt;&lt;a href=&#34;#7-2-创建数据目录&#34; class=&#34;headerlink&#34; title=&#34;7.2 创建数据目录&#34;&gt;&lt;/a&gt;7.2 创建数据目录&lt;/h5&gt;&lt;p&gt;​	创建放置 tracker数据的目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;  mkdir -p /usr/local/fastdfs/tracker
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;7-3-修改配置文件&#34;&gt;&lt;a href=&#34;#7-3-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;7.3 修改配置文件&#34;&gt;&lt;/a&gt;7.3 修改配置文件&lt;/h5&gt;&lt;p&gt;​	修改 tracker.conf 设置 tracker 内容存储目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;base_path=/usr/local/fastdfs/tracker
 vim tracker.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 默认端口 22122   不需要修改&lt;/p&gt;
&lt;h5 id=&#34;7-4-启动服务&#34;&gt;&lt;a href=&#34;#7-4-启动服务&#34; class=&#34;headerlink&#34; title=&#34;7.4 启动服务&#34;&gt;&lt;/a&gt;7.4 启动服务&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;  service fdfs_trackerd start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	启动成功后， 配置文件中 base_path 指向的目录出现 FastDFS服务相关数据目录(data目录， logs 目录)&lt;/p&gt;
&lt;h5 id=&#34;7-5-查看服务运行状态&#34;&gt;&lt;a href=&#34;#7-5-查看服务运行状态&#34; class=&#34;headerlink&#34; title=&#34;7.5 查看服务运行状态&#34;&gt;&lt;/a&gt;7.5 查看服务运行状态&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;  service fdfs_trackerd status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	如果显示 is running 表示正常运行。&lt;/p&gt;
&lt;h5 id=&#34;7-6-关闭防火墙&#34;&gt;&lt;a href=&#34;#7-6-关闭防火墙&#34; class=&#34;headerlink&#34; title=&#34;7.6 关闭防火墙&#34;&gt;&lt;/a&gt;7.6 关闭防火墙&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; service iptables stop
  chkconfig iptables off
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-配置storage&#34;&gt;&lt;a href=&#34;#8-配置storage&#34; class=&#34;headerlink&#34; title=&#34;8 配置storage&#34;&gt;&lt;/a&gt;8 配置storage&lt;/h4&gt;&lt;p&gt;  storage可以和tracker不在同一台服务器上。示例中把storage和tracker安装在同一台服务器上了。&lt;/p&gt;
&lt;h5 id=&#34;8-1-复制配置文件&#34;&gt;&lt;a href=&#34;#8-1-复制配置文件&#34; class=&#34;headerlink&#34; title=&#34;8.1 复制配置文件&#34;&gt;&lt;/a&gt;8.1 复制配置文件&lt;/h5&gt;&lt;p&gt;​	进入到 &amp;#x2F;etc&amp;#x2F;fdfs, 把 storage 配置文件复制一份&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /etc/fdfs
 cp storage.conf.sample storage.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8-2-创建目录&#34;&gt;&lt;a href=&#34;#8-2-创建目录&#34; class=&#34;headerlink&#34; title=&#34;8.2 创建目录&#34;&gt;&lt;/a&gt;8.2 创建目录&lt;/h5&gt;&lt;p&gt;​	 创建两个目录， 把base用于存储基础数据和日志，store用于存储上传数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;  mkdir -p /usr/local/fastdfs/storage/base
 mkdir -p /usr/local/fastdfs/storage/store
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8-3-修改配置文件&#34;&gt;&lt;a href=&#34;#8-3-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;8.3 修改配置文件&#34;&gt;&lt;/a&gt;8.3 修改配置文件&lt;/h5&gt;&lt;p&gt;​	storage.conf配置文件用于描述存储服务的行为，需要进行下述修改&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; vim /etc/fdfs/storage.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	配置内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;base_path=/usr/local/fastdfs/storage/base
store_path0=/usr/local/fastdfs/storage/store
tracker_server=tracker 服务IP：22122
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	base_path - 基础路径。用于保存storage server 基础数据内容和日志内容的目录。&lt;/p&gt;
&lt;p&gt;​	store_path0 - 存储路径。是用于保存FastDFS中存储文件的目录，就是要创建256*256个子目录的位置。&lt;/p&gt;
&lt;p&gt;​	base_path 和 store_path0 可以使用同一个目录。&lt;/p&gt;
&lt;p&gt;​	tracker_server - 跟踪服务器位置。就是跟踪服务器的IP和端口。&lt;/p&gt;
&lt;p&gt;​	启动服务&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; service fdfs_storaged start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	启动成功后，配置文件中base_path 指向的目录中出现FastDFS服务相关数据目录（data目录、logs目录）配置文件中的store_path0指向的目录中同样出现FastDFS存储相关数据录（data目录）。其中$store_path0&amp;#x2F;data&amp;#x2F;目录中默认创建若干子孙目录（两级目录层级总计256*256个目录），是用于存储具体文件数据的。&lt;/p&gt;
&lt;p&gt;​	Storage 服务器启动比较慢，因为第一次启动的时候，需要创建256*256个目录。&lt;/p&gt;
&lt;p&gt;​	查看启动状态&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; service fdfs_storaged status
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;——2-1&#34;&gt;&lt;a href=&#34;#——2-1&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/15/tools-All/b60ca697c06d4425b7cd228b98dc3d19.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;FastDFS的安装我们还是通过Docker来安装实现吧，直接在Linux上还装还是比较繁琐的，但就学习而言Docker安装还是非常高效的。Docker环境请自行安装哦，不清楚的可以看看我的Docker专题的内容。&lt;a href=&#34;Docker%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99&#34; title=&#34;Docker学习资料&#34;&gt;https://blog.csdn.net/qq_38526573&amp;#x2F;category_9619681.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-拉取镜像文件&#34;&gt;&lt;a href=&#34;#1-拉取镜像文件&#34; class=&#34;headerlink&#34; title=&#34;1.拉取镜像文件&#34;&gt;&lt;/a&gt;1.拉取镜像文件&lt;/h4&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先我们可以通过 &lt;code&gt;docker search fastdfs&lt;/code&gt; 来查询下有哪些镜像文件。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/5a06a59eb24d4f9e847a4badeef871ac.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;我们看到搜索到的镜像还是蛮多的，这里我们使用 &lt;code&gt;delron/fastdfs&lt;/code&gt; 你也可以尝试使用其他的镜像来安装，你也可以制作自己的镜像来给别人使用哦，只是不同的镜像在使用的时候配置会有一些不一样，有些镜像没有提供Nginx的相关配置，使用的时候会繁琐一点。接下来通过 &lt;code&gt;docker pull delron/fastdfs&lt;/code&gt;命令把镜像拉取下来。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull delron/fastdfs
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/5e5b85b3dc9a432abf615b27868fc7bf.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;2-构建Tracker服务&#34;&gt;&lt;a href=&#34;#2-构建Tracker服务&#34; class=&#34;headerlink&#34; title=&#34;2.构建Tracker服务&#34;&gt;&lt;/a&gt;2.构建Tracker服务&lt;/h4&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先我们需要通过Docker命令来创建Tracker服务。命令为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name tracker --network=host -v /mydata/fastdfs/tracker:/var/fdfs delron/fastdfs tracker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;tracker服务默认的端口为22122，-v 实现了容器和本地目录的挂载操作。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/694d42632bf6410a806df9aa43e836c0.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;3-构建Storage服务&#34;&gt;&lt;a href=&#34;#3-构建Storage服务&#34; class=&#34;headerlink&#34; title=&#34;3.构建Storage服务&#34;&gt;&lt;/a&gt;3.构建Storage服务&lt;/h4&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;接下来创建Storage服务，具体的执行命令如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name storage --network=host  -e TRACKER_SERVER=192.168.1.195:22122 -v /mydata/fastdfs/storage:/var/fdfs -e GROUP_NAME=group1 delron/fastdfs storage
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;在执行上面命令的时候要注意对应的修改下，其中TRACKER_SERVER中的ip要修改为你的Tracker服务所在的服务IP地址。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/dc2bdf85d0f24fe18a32efbe4caa2d27.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;默认情况下在Storage服务中是帮我们安装了Nginx服务的，相关的端口为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;th&gt;默认端口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;tracker&lt;/td&gt;
&lt;td&gt;22122&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;storage&lt;/td&gt;
&lt;td&gt;23000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nginx&lt;/td&gt;
&lt;td&gt;8888&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;当然如果你发现这些相关的端口被占用了，或者想要对应的修改端口信息也可以的。要修改你可以先进入容器中查看下相关的配置文件信息。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/da5cc21445e840baa85580ba420db94d.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后查看storage.conf文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/63862499980b408195291de047048566.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;这个是storage监听的Nginx的端口8888，如果要修改那么我们还需要修改Nginx中的服务配置，这块的配置在 &lt;code&gt;/usr/local/nginx/conf&lt;/code&gt;目录下&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/f866c08177be4fd48bfd9a582ec78779.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;查看下文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/dc7c5888363a400b9308f3ba64cca9ac.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;所以要修改端口号的话，这两个位置都得修改了。当然本文我们就使用默认的端口号来使用了。&lt;/p&gt;
&lt;h4 id=&#34;4-测试图片上传&#34;&gt;&lt;a href=&#34;#4-测试图片上传&#34; class=&#34;headerlink&#34; title=&#34;4.测试图片上传&#34;&gt;&lt;/a&gt;4.测试图片上传&lt;/h4&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;好了，安装我们已经完成了，那么到底是否可以使用呢？我们来测试下。首先在虚拟机的&amp;#x2F;mydata&amp;#x2F;fastdfs&amp;#x2F;storage下保存一张图片。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/ff2ea2626bb34acd810fbb8d9438129a.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后我们再进入到storage容器中。并且进入到 &lt;code&gt;/var/fdfs&lt;/code&gt;目录下,可以看到我们挂载的文件了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/cb8a96fb9bb644328880ca70378a7fc2.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后执行如下命令即可完成图片的上传操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;/usr/bin/fdfs_upload_file /etc/fdfs/client.conf 1.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/0fd0e82898bb45178eca4eef9a412745.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;通过上面的提示我们看到文件上传成功了，而且返回了文件在storage中存储的信息。这时我们就可以通过这个信息来拼接访问的地址在浏览器中访问了：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguNTYuMTAwOjg4ODgvZ3JvdXAxL00wMC8wMC8wMC93S2c0WkdIY0tMU0FYaWJhQUFlek11VXJsUzgyMzUuanBn&#34;&gt;http://192.168.56.100:8888/group1/M00/00/00/wKg4ZGHcKLSAXibaAAezMuUrlS8235.jpg&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/b34e823e956f410297bfd1218ebc0231.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;好了到这儿FastDFS的服务安装成功了。&lt;/p&gt;
&lt;div name=&#34;nginx_install_1&#34; &gt;&lt;/div&gt;
## nginx安装



&lt;div name=&#34;nginx_install_2&#34;&gt;

&lt;h3 id=&#34;——2-2&#34;&gt;&lt;a href=&#34;#——2-2&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h3&gt;&lt;h4 id=&#34;1、拉取镜像&#34;&gt;&lt;a href=&#34;#1、拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;1、拉取镜像&#34;&gt;&lt;/a&gt;1、拉取镜像&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull nginx:1.16.1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、创建挂载数据卷&#34;&gt;&lt;a href=&#34;#2、创建挂载数据卷&#34; class=&#34;headerlink&#34; title=&#34;2、创建挂载数据卷&#34;&gt;&lt;/a&gt;2、创建挂载数据卷&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir -p /root/nginx/conf
vim /root/nginx/conf/nginx.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;nginx.conf内容：&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;user  root;
worker_processes  auto;
 
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
 
 
events &amp;#123;
    worker_connections  1024;
&amp;#125;
 
 
http &amp;#123;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
 
    log_format  main  &amp;#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &amp;#39;
                      &amp;#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &amp;#39;
                      &amp;#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&amp;#39;;
 
    access_log  /var/log/nginx/access.log  main;
 
    sendfile        on;
    #tcp_nopush     on;
 
    keepalive_timeout  65;
 
    #gzip  on;
    
    
    server &amp;#123;
        listen       80;
        server_name  localhost;

        #charset koi8-r;
        #access_log  /var/log/nginx/host.access.log  main;

        location / &amp;#123;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        &amp;#125;

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html

        error_page   500 502 503 504  /50x.html;
        location = /50x.html &amp;#123;
            root   /usr/share/nginx/html;
        &amp;#125;
   
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、创建容器&#34;&gt;&lt;a href=&#34;#3、创建容器&#34; class=&#34;headerlink&#34; title=&#34;3、创建容器&#34;&gt;&lt;/a&gt;3、创建容器&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;# 注意ip一定要与检测ip相同
docker run \
-p 80:80 \
--name nginx  \
-v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \
-d nginx:1.16.1 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、查看&#34;&gt;&lt;a href=&#34;#4、查看&#34; class=&#34;headerlink&#34; title=&#34;4、查看&#34;&gt;&lt;/a&gt;4、查看&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker ps 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Zookeeper安装&#34;&gt;&lt;a href=&#34;#Zookeeper安装&#34; class=&#34;headerlink&#34; title=&#34;Zookeeper安装&#34;&gt;&lt;/a&gt;Zookeeper安装&lt;/h2&gt;&lt;h3 id=&#34;——1-3&#34;&gt;&lt;a href=&#34;#——1-3&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h4 id=&#34;1-Zookeeper简介&#34;&gt;&lt;a href=&#34;#1-Zookeeper简介&#34; class=&#34;headerlink&#34; title=&#34;1     Zookeeper简介&#34;&gt;&lt;/a&gt;1     Zookeeper简介&lt;/h4&gt;&lt;p&gt;​	zookeeper分布式管理软件。常用它做注册中心（依赖zookeeper的发布&amp;#x2F;订阅功能）、配置文件中心、分布式锁配置、集群管理等。&lt;/p&gt;
&lt;p&gt;​	zookeeper一共就有两个版本。主要使用的是java语言写的。&lt;/p&gt;
&lt;h4 id=&#34;2-安装&#34;&gt;&lt;a href=&#34;#2-安装&#34; class=&#34;headerlink&#34; title=&#34;2     安装&#34;&gt;&lt;/a&gt;2     安装&lt;/h4&gt;&lt;h5 id=&#34;2-1-上传压缩文件&#34;&gt;&lt;a href=&#34;#2-1-上传压缩文件&#34; class=&#34;headerlink&#34; title=&#34;2.1   上传压缩文件&#34;&gt;&lt;/a&gt;2.1   上传压缩文件&lt;/h5&gt;&lt;p&gt;​	上传到 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中&lt;/p&gt;
&lt;h4 id=&#34;2-2-解压&#34;&gt;&lt;a href=&#34;#2-2-解压&#34; class=&#34;headerlink&#34; title=&#34;2.2   解压&#34;&gt;&lt;/a&gt;2.2   解压&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; tar zxf apache-zookeeper-3.5.5-bin.tar.gz
 cp -r apache-zookeeper-3.5.5-bin ../zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-3-新建data目录&#34;&gt;&lt;a href=&#34;#2-3-新建data目录&#34; class=&#34;headerlink&#34; title=&#34;2.3   新建data目录&#34;&gt;&lt;/a&gt;2.3   新建data目录&lt;/h4&gt;&lt;p&gt;进入到zookeeper中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/zookeeper
 mkdir data
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-4-修改配置文件&#34;&gt;&lt;a href=&#34;#2-4-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.4   修改配置文件&#34;&gt;&lt;/a&gt;2.4   修改配置文件&lt;/h4&gt;&lt;p&gt;进入conf中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd conf
 cp zoo_sample.cfg zoo.cfg
 vim zoo.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改dataDir为data文件夹路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dataDir=/usr/local/zookeeper/data
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-5-启动zookeeper&#34;&gt;&lt;a href=&#34;#2-5-启动zookeeper&#34; class=&#34;headerlink&#34; title=&#34;2.5   启动zookeeper&#34;&gt;&lt;/a&gt;2.5   启动zookeeper&lt;/h4&gt;&lt;p&gt;进入bin文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/zookeeper/bin
 ./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过status查看启动状态。稍微有个等待时间&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;  ./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;——2-3&#34;&gt;&lt;a href=&#34;#——2-3&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;资料：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2luZ2tvby9wLzg3MzI0NDguaHRtbA==&#34;&gt;https://www.cnblogs.com/kingkoo/p/8732448.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2ODA4NzQ2NjY/ZnJvbT1zZWFyY2gmYW1wO3NlaWQ9MTYyOTE0NTAyNTIxMTk5OTEwNCZhbXA7c3BtX2lkX2Zyb209MzMzLjMzNy4wLjA=&#34;&gt;https://www.bilibili.com/video/av80874666?from=search&amp;amp;seid=1629145025211999104&amp;amp;spm_id_from=333.337.0.0&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-Zookeeper简介-1&#34;&gt;&lt;a href=&#34;#1-Zookeeper简介-1&#34; class=&#34;headerlink&#34; title=&#34;1     Zookeeper简介&#34;&gt;&lt;/a&gt;1     Zookeeper简介&lt;/h4&gt;&lt;p&gt;​	zookeeper分布式管理软件。常用它做注册中心（依赖zookeeper的发布&amp;#x2F;订阅功能）、配置文件中心、分布式锁配置、集群管理等。&lt;/p&gt;
&lt;p&gt;​	zookeeper一共就有两个版本。主要使用的是java语言写的。&lt;/p&gt;
&lt;h4 id=&#34;2-安装-1&#34;&gt;&lt;a href=&#34;#2-安装-1&#34; class=&#34;headerlink&#34; title=&#34;2     安装&#34;&gt;&lt;/a&gt;2     安装&lt;/h4&gt;&lt;h5 id=&#34;2-1-拉取镜像&#34;&gt;&lt;a href=&#34;#2-1-拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;2.1   拉取镜像&#34;&gt;&lt;/a&gt;2.1   拉取镜像&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自定义zookeeper目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir /root/zookeeper

mkdir /root/zookeeper/data #原因参照上面 -在docker中data其实也不用在宿主机行自己生成(目前如此)

#仓库官网查看版本或者用命令直接查
docker search zookeeper

#拉取特定版本（3.5）
docker pull zookeeper:3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2-2-创建并启动容器&#34;&gt;&lt;a href=&#34;#2-2-创建并启动容器&#34; class=&#34;headerlink&#34; title=&#34;2.2 创建并启动容器&#34;&gt;&lt;/a&gt;2.2 创建并启动容器&lt;/h5&gt;&lt;p&gt;​	&lt;strong&gt;注：就目前而且 好像直接在docker中使用 zookeeper 不需要过多的配置，直接用命令创建吧，下面的解释先不看，具体原因后面补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name zookeeper -v /root/zookeeper/data:/data -p 2181:2181 --restart always zookeeper:3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--restart always&lt;/code&gt;：始终重启&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWdlb3ZiL3AvMTUzMjg3OTYuaHRtbA==&#34;&gt;https://www.cnblogs.com/ageovb/p/15328796.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、这里为啥只挂载了 data 目录–》因为当我们 没有直接的安装压缩包时，我们的就没有配置文件，所以我们直接生成，容器中就回自动生成conf文件，其中就有我们需要的 一系列配置文件，我们第一次创建的时候就可以如此，我们在进&lt;strong&gt;行配置文件的修改完成&lt;/strong&gt;后，要将所有配置文件放到我们  bash 目录中的 conf 文件中去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、第一次进入容器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在bash目录下进入bin 目录然后输入开启客户端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、第二次进入容器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zookeeper /bin/bash  -p    端口号
或
docker exec -it zookeeper zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;只看到这就可*，容器创建成功就可以直接用了，还没有出现问题。有待补充&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;2-3-修改配置文件&#34;&gt;&lt;a href=&#34;#2-3-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.3   修改配置文件&#34;&gt;&lt;/a&gt;2.3   修改配置文件&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;配置文件来源&lt;ul&gt;
&lt;li&gt;1、可以去我们的资料中直接解压出&lt;strong&gt;conf&lt;/strong&gt;目录粘贴到我们的 zookeeper 目录中去&lt;/li&gt;
&lt;li&gt;2、可以直接进行第 3 步，完事之后直接会在容器中生成。找到conf文件，修改其中的 zoo.cfg文件，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入容器后，找到conf中的 **zoo.cfg文件，接下来就是修改 &lt;strong&gt;dataDir&lt;/strong&gt; 路径为容器中的 data文件目录。&lt;/p&gt;
&lt;p&gt;前提是要下载 vim ，因为容器中没有，命令是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get update

apt-get install -y vim

cd conf
# 没有zoo.cfg 就先拷贝 zoo_sample.cfg 两个其实是一个文件，内容相同
#cp zoo_sample.cfg zoo.cfg
vim zoo.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改dataDir为data文件夹路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dataDir=/usr/local/zookeeper/data
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Zookeeper集群搭建&#34;&gt;&lt;a href=&#34;#Zookeeper集群搭建&#34; class=&#34;headerlink&#34; title=&#34;Zookeeper集群搭建&#34;&gt;&lt;/a&gt;Zookeeper集群搭建&lt;/h2&gt;&lt;h3 id=&#34;——1-4&#34;&gt;&lt;a href=&#34;#——1-4&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;p&gt;1.上传压缩包到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp 下 并解压。&lt;/p&gt;
&lt;p&gt;2.在 &amp;#x2F;usr&amp;#x2F;local下新建文件夹 zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /usr/local/zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.把解压的所有文件复制到zookeeper下， 并命名为zk1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp -r /usr/local/temp/zookeeper-3.4.8 /usr/local/zookeeper/zk1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.在zk1下新建文件夹 data&lt;/p&gt;
&lt;p&gt;5.在data下新建文件 myid, 里面写上 1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim myid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6.进入到zk1&amp;#x2F;conf 下 把 zoo_sample.cfg 复制一份叫做 zoo.cfg&lt;/p&gt;
&lt;p&gt;7.编辑 zoo.cfg 内容，设置 dataDIR为 data文件夹， 并在文件最下面添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server.1=192.168.93.10:2688:3888
server.2=192.168.93.10:2689:3889
server.3=192.168.93.10:2690:3890
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 7.1 server.1中的1是myid的内容&lt;/p&gt;
&lt;p&gt; 7.2 2688 2689 2690 是 zookeeper内部端口&lt;/p&gt;
&lt;p&gt; 7.3 3888 3889 3890 是 leader端口&lt;/p&gt;
&lt;p&gt;8.把zk1复制两份，分部叫做 zk2  zk3  并修改 myid 的值为 2，3 修改zoo.cfg中 dataDIR和clientPort&lt;/p&gt;
&lt;p&gt;9.启动三个zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;10.查看状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;——2-4&#34;&gt;&lt;a href=&#34;#——2-4&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h3&gt;&lt;h4 id=&#34;1、准备docker-compose-yml文件&#34;&gt;&lt;a href=&#34;#1、准备docker-compose-yml文件&#34; class=&#34;headerlink&#34; title=&#34;1、准备docker-compose.yml文件&#34;&gt;&lt;/a&gt;&lt;strong&gt;1、准备&lt;/strong&gt;docker-compose.yml&lt;strong&gt;文件&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;version: &amp;#39;2&amp;#39;
services:
  zoo1:
    image: zookeeper:3.5
    restart: always
    container_name: zoo1
    ports:
      - &amp;quot;2182:2181&amp;quot;
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2688:3888 server.2=zoo2:2689:3888 server.3=zoo3:2690:3888

  zoo2:
    image: zookeeper:3.5
    restart: always
    container_name: zoo2
    ports:
      - &amp;quot;2183:2181&amp;quot;
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2688:3888 server.2=0.0.0.0:2689:3888 server.3=zoo3:2690:3888

  zoo3:
    image: zookeeper:3.5
    restart: always
    container_name: zoo3
    ports:
      - &amp;quot;2184:2181&amp;quot;
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2688:3888 server.2=zoo2:2689:3888 server.3=0.0.0.0:2690:3888

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、创建镜像&#34;&gt;&lt;a href=&#34;#2、创建镜像&#34; class=&#34;headerlink&#34; title=&#34;2、创建镜像&#34;&gt;&lt;/a&gt;&lt;strong&gt;2、创建镜像&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;要在创建的docker-compose.yml文件中使用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、进入容器&#34;&gt;&lt;a href=&#34;#3、进入容器&#34; class=&#34;headerlink&#34; title=&#34;3、进入容器&#34;&gt;&lt;/a&gt;&lt;strong&gt;3、进入容器&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo1 /bin/bash

#查看zoo1 的状态
cd bin
./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;如果出现，以下情况：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ZooKeeper JMX enabled by default
Using config: /conf/zoo.cfg
Client port not found in static config file. Looking in dynamic config file.
grep: : No such file or directory
Client port not found in the server configs
Client port not found. Looking for secureClientPort in the static config.
Unable to find either secure or unsecure client port in any configs. Terminating.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	通过阅读我们知道他在conf中的zoo.cfg文件中缺少 **clientPort **我们只需要自行添加即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#修改之前我们先装一下 vim
apt-get update

apt-get install -y vim 

#修改zoo.fcg文件
vim /conf/zoo.fcg

clientPort=2181
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;完事之后&lt;strong&gt;重启&lt;/strong&gt;zoo1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/tools-All%5C1645780920291.png&#34; alt=&#34;1645780920291&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功！！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4、查看所有zookeeper的状态&#34;&gt;&lt;a href=&#34;#4、查看所有zookeeper的状态&#34; class=&#34;headerlink&#34; title=&#34;4、查看所有zookeeper的状态&#34;&gt;&lt;/a&gt;4、查看所有zookeeper的状态&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo3 bash ./bin/zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、进去客户端&#34;&gt;&lt;a href=&#34;#5、进去客户端&#34; class=&#34;headerlink&#34; title=&#34;5、进去客户端&#34;&gt;&lt;/a&gt;5、进去客户端&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo3 zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;redis安装&#34;&gt;&lt;a href=&#34;#redis安装&#34; class=&#34;headerlink&#34; title=&#34;redis安装&#34;&gt;&lt;/a&gt;redis安装&lt;/h2&gt;&lt;h3 id=&#34;——1-5&#34;&gt;&lt;a href=&#34;#——1-5&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h4 id=&#34;1-安装依赖C语言依赖&#34;&gt;&lt;a href=&#34;#1-安装依赖C语言依赖&#34; class=&#34;headerlink&#34; title=&#34;1.安装依赖C语言依赖&#34;&gt;&lt;/a&gt;1.安装依赖C语言依赖&lt;/h4&gt;&lt;p&gt;​	redis使用C语言编写，所以需要安装C语言库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; yum install -y gcc-c++ automake autoconf libtool make tcl 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;h4 id=&#34;2-上传并解压&#34;&gt;&lt;a href=&#34;#2-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;2.上传并解压&#34;&gt;&lt;/a&gt;2.上传并解压&lt;/h4&gt;&lt;p&gt;​	把redis-5.0.5.tar.gz上传到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中，解压文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/tmp

 tar zxf redis-5.0.5.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-编译并安装-1&#34;&gt;&lt;a href=&#34;#3-编译并安装-1&#34; class=&#34;headerlink&#34; title=&#34;3.编译并安装&#34;&gt;&lt;/a&gt;3.编译并安装&lt;/h4&gt;&lt;p&gt;​	进入解压文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp/redis-5.0.5/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	编译&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	安装	（一定要干）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; make install PREFIX=/usr/local/redis
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-开启守护进程&#34;&gt;&lt;a href=&#34;#4-开启守护进程&#34; class=&#34;headerlink&#34; title=&#34;4.开启守护进程&#34;&gt;&lt;/a&gt;4.开启守护进程&lt;/h4&gt;&lt;p&gt;​	复制cd &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp&amp;#x2F;redis-5.0.5&amp;#x2F;中redis.conf配置文件	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cp redis.conf /usr/local/redis/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;strong&gt;修改配置文件&lt;/strong&gt;	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/redis/bin/

 vim redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	把daemonize的值由no修改为yes&lt;/p&gt;





&lt;h4 id=&#34;5-修改外部访问&#34;&gt;&lt;a href=&#34;#5-修改外部访问&#34; class=&#34;headerlink&#34; title=&#34;5.修改外部访问&#34;&gt;&lt;/a&gt;5.修改外部访问&lt;/h4&gt;&lt;p&gt;​	在redis5中需要修改配置文件redis.conf允许外部访问。需要修改两处。&lt;/p&gt;
&lt;p&gt;​	注释掉下面&lt;/p&gt;
&lt;p&gt;​	bind 127.0.0.1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; bind 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	protected-mode yes 改成 no&lt;/p&gt;





&lt;h4 id=&#34;6-启动并测试&#34;&gt;&lt;a href=&#34;#6-启动并测试&#34; class=&#34;headerlink&#34; title=&#34;6.启动并测试&#34;&gt;&lt;/a&gt;6.启动并测试&lt;/h4&gt;&lt;p&gt;​	启动redis&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./redis-server redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	重启redis&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./redis-cli shutdown
./redis-server redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	启动客户端工具&lt;/p&gt;
&lt;p&gt;​	在redis5中客户端工具对命令会有提供功能。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./redis-cli 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-增加自定义日志文件&#34;&gt;&lt;a href=&#34;#7-增加自定义日志文件&#34; class=&#34;headerlink&#34; title=&#34;7.增加自定义日志文件&#34;&gt;&lt;/a&gt;7.增加自定义日志文件&lt;/h4&gt;&lt;p&gt;​	打开redis.conf , 找到 logfile “” ，在引号中写入我们的日志文件目录，要写到文件，只写到日志目录是不行的，他无法打开， 而且这个文件你要先自己创建才能用，最好就是把文件的权限全部打开了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 日志文件输出目录/文件
touch /usr/local/redis/log/run.log
# 修改redis.conf
logfile &amp;quot;/usr/local/redis/log/run.log&amp;quot;
# 修改日志文件的权限
chmod 777 /usr/local/redis/log/run.log
# 启动服务
./redis-server redis.conf

# 即使没有报错，也要手动看一下日志文件是否采集到了日志信息
tail -f /usr/local/redis/log/run.log
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;——2-5&#34;&gt;&lt;a href=&#34;#——2-5&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h3&gt;&lt;h4 id=&#34;1、拉取镜像文件&#34;&gt;&lt;a href=&#34;#1、拉取镜像文件&#34; class=&#34;headerlink&#34; title=&#34;1、拉取镜像文件&#34;&gt;&lt;/a&gt;1、拉取镜像文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull redis[:(版本号)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】&#34;&gt;&lt;a href=&#34;#2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】&#34; class=&#34;headerlink&#34; title=&#34;2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】&#34;&gt;&lt;/a&gt;2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;建议看完，先别操作，再看三，看完三之后再决定如何操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后按照文章内容进行，忽略下载。&lt;/p&gt;
&lt;p&gt;文章地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yMDMyNzQuaHRt&#34;&gt;https://www.jb51.net/article/203274.htm&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;、&lt;/p&gt;









&lt;p&gt; &lt;strong&gt;docker 镜像中没有redis.conf文件，要自己配置&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;undefined&#34;&gt;git pull --rebase https://gitee.com/zjj3366/mydemo.git master
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、创建一个redis-服务容器&#34;&gt;&lt;a href=&#34;#3、创建一个redis-服务容器&#34; class=&#34;headerlink&#34; title=&#34;3、创建一个redis 服务容器&#34;&gt;&lt;/a&gt;3、创建一个redis 服务容器&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;第二步进行了的&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -p 6379:6379 \
--name myredis  \
-v /usr/local/docker/redis.conf:/etc/redis/redis.conf   \
-v /usr/local/docker/data:/data  \
-d redis  \
redis-server  /etc/redis/redis.conf  \
--appendonly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;第二步没有进行的&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -p 6379:6379  \
--name myredis  \
-v /root/myredis/data:/data \
-v /root/myredis/conf/redis.conf:/etc/redis/redis.conf  \
-d redis:4.0  \
redis-server /etc/redis/redis.conf  \
--appendonly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	其实也没有什么区别，只是映射的文件不同，也可以将第二步的文件直接创建到第二种创建服务容器的配置文件地址中去，这样也可使用第二个创建方式。&lt;/p&gt;


















&lt;h2 id=&#34;redis集群-Cluster-搭建&#34;&gt;&lt;a href=&#34;#redis集群-Cluster-搭建&#34; class=&#34;headerlink&#34; title=&#34;redis集群(Cluster)搭建&#34;&gt;&lt;/a&gt;redis集群(Cluster)搭建&lt;/h2&gt;&lt;h3 id=&#34;——1-6&#34;&gt;&lt;a href=&#34;#——1-6&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;p&gt;​	前提：已经安装好redis单机版。&lt;/p&gt;
&lt;p&gt;​	当集群中超过或等于1&amp;#x2F;2节点不可用时，整个集群不可用。为了搭建稳定集群，都采用奇数节点。&lt;/p&gt;
&lt;h4 id=&#34;1-复制redis配置文件&#34;&gt;&lt;a href=&#34;#1-复制redis配置文件&#34; class=&#34;headerlink&#34; title=&#34;1 .复制redis配置文件&#34;&gt;&lt;/a&gt;1 .&lt;strong&gt;复制redis配置文件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	从&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;redis&amp;#x2F;bin下把redis.conf复制到当前目录中，命名为redis-7001.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp /usr/local/redis/bin/redis.conf /usr/local/redis/bin/redis-7001.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-修改redis-7001-conf&#34;&gt;&lt;a href=&#34;#2-修改redis-7001-conf&#34; class=&#34;headerlink&#34; title=&#34;2. 修改redis-7001.conf&#34;&gt;&lt;/a&gt;2. &lt;strong&gt;修改redis-7001.conf&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/redis/bin
# vim redis-7001.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	需要修改如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;port 7001
cluster-enabled yes
cluster-config-file nodes-7001.conf
cluster-node-timeout 15000
# appendonly yes 如果开启aof默认，需要修改为yes。如果使用rdb，此处不需要修改
daemonize yes
protected-mode no
pidfile /var/run/redis_7001.pid
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-复制配置文件，并修改内容&#34;&gt;&lt;a href=&#34;#3-复制配置文件，并修改内容&#34; class=&#34;headerlink&#34; title=&#34;3 .复制配置文件，并修改内容&#34;&gt;&lt;/a&gt;3 .&lt;strong&gt;复制配置文件，并修改内容&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	把redis-7001.conf 复制5份，分别叫做redis-7002.conf、redis-7003.conf、redis-7004.conf、redis-7005.conf、redis-7006.conf &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp redis-7001.conf redis-7002.conf
# cp redis-7001.conf redis-7003.conf
# cp redis-7001.conf redis-7004.conf
# cp redis-7001.conf redis-7005.conf
# cp redis-7001.conf redis-7006.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 新复制的5个配置文件都需要需改三处。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	例如nodes-7002.conf中需要把所有7001都换成7002。&lt;/p&gt;
&lt;p&gt;​	可以使用 :%s&amp;#x2F;7001&amp;#x2F;7002&amp;#x2F;g 进行全局修改。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;port 7002
cluster-config-file nodes-7002.conf
pidfile /var/run/redis_7002.pid
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-启动6个redis&#34;&gt;&lt;a href=&#34;#4-启动6个redis&#34; class=&#34;headerlink&#34; title=&#34;4 .启动6个redis&#34;&gt;&lt;/a&gt;4 .&lt;strong&gt;启动6个redis&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	可以使用redis-server结合6个配置文件进行启动6个实例。&lt;/p&gt;
&lt;p&gt;​	执行之前一定要先删除dump.rdb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rm -f dump.rdb
# vim startup.sh

./redis-server redis-7001.conf
./redis-server redis-7002.conf
./redis-server redis-7003.conf
./redis-server redis-7004.conf
./redis-server redis-7005.conf
./redis-server redis-7006.conf


# chmod a+x startup.sh
# ./startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-查看启动状态&#34;&gt;&lt;a href=&#34;#5-查看启动状态&#34; class=&#34;headerlink&#34; title=&#34;5. 查看启动状态&#34;&gt;&lt;/a&gt;5. &lt;strong&gt;查看启动状态&lt;/strong&gt;&lt;/h4&gt;




&lt;h4 id=&#34;6-建立集群&#34;&gt;&lt;a href=&#34;#6-建立集群&#34; class=&#34;headerlink&#34; title=&#34;6. 建立集群&#34;&gt;&lt;/a&gt;6. &lt;strong&gt;建立集群&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	在redis3的时候需要借助ruby脚本实现集群。在redis5中可以使用自带的redis-cli实现集群功能，比redis3的时候更加方便了。&lt;/p&gt;
&lt;p&gt;​	建议配置静态ip，ip改变集群失效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./redis-cli --cluster create 192.168.93.10:7001 192.168.93.10:7002 192.168.93.10:7003 192.168.93.10:7004 192.168.93.10:7005 192.168.93.10:7006 --cluster-replicas 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-测试&#34;&gt;&lt;a href=&#34;#7-测试&#34; class=&#34;headerlink&#34; title=&#34;7. 测试&#34;&gt;&lt;/a&gt;7. &lt;strong&gt;测试&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	集群测试时，千万不要忘记最后一个-c参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./redis-cli -p 7001 -c
# set age 18
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-编写关闭脚本&#34;&gt;&lt;a href=&#34;#8-编写关闭脚本&#34; class=&#34;headerlink&#34; title=&#34;8 .编写关闭脚本&#34;&gt;&lt;/a&gt;8 .&lt;strong&gt;编写关闭脚本&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# vim stop.sh
# chmod a+x stop.sh

./redis-cli -p 7001 shutdown
./redis-cli -p 7002 shutdown
./redis-cli -p 7003 shutdown
./redis-cli -p 7004 shutdown
./redis-cli -p 7005 shutdown
./redis-cli -p 7006 shutdown
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;——2-6&#34;&gt;&lt;a href=&#34;#——2-6&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;注：&lt;/strong&gt;1.如果是配置修改之前&lt;strong&gt;已经创建过的集群时&lt;/strong&gt;，要先进行第七步操作。&lt;/p&gt;
&lt;p&gt;​			2.要是想重启集群可以省略第一步，但是得&lt;strong&gt;先删除已经创建的容器&lt;/strong&gt;，重新进行2、3（合并也行）&lt;/p&gt;
&lt;h4 id=&#34;0、创建网络&#34;&gt;&lt;a href=&#34;#0、创建网络&#34; class=&#34;headerlink&#34; title=&#34;0、创建网络&#34;&gt;&lt;/a&gt;0、创建网络&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目的：&lt;/strong&gt;让宿主机可以访问到自身&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker network create net-redis --subnet 172.38.0.0/16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;补充：关于虚拟机的三种网路连接方式区别&lt;/p&gt;
&lt;p&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlmZW5nbWlhb3podWFuL2FydGljbGUvZGV0YWlscy83OTg4NzY5Mj9zcG09MTAwMS4yMTAxLjMwMDEuNjY2MS4xJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnRfdDAubm9uZS10YXNrLWJsb2ctMn5kZWZhdWx0fkNUUkxJU1R+UmF0ZS0xLnBjX3JlbGV2YW50X2RlZmF1bHQmYW1wO2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX3JlbGV2YW50X3QwLm5vbmUtdGFzay1ibG9nLTJ+ZGVmYXVsdH5DVFJMSVNUflJhdGUtMS5wY19yZWxldmFudF9kZWZhdWx0JmFtcDt1dG1fcmVsZXZhbnRfaW5kZXg9MQ==&#34;&gt;http://blog.csdn.net/bifengmiaozhuan/article/details/79887692?spm=1001.2101.3001.6661.1&amp;amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;amp;utm_relevant_index=1&lt;/span&gt; &lt;/p&gt;







&lt;h4 id=&#34;1、创建并修改配置文件&#34;&gt;&lt;a href=&#34;#1、创建并修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;1、创建并修改配置文件&#34;&gt;&lt;/a&gt;1、创建并修改配置文件&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In certain deployments, Redis Cluster nodes address discovery fails, because addresses are NAT-ted or because ports are forwarded (the typical case is Docker and other containers).

在某些部署中，Redis群集节点地址发现失败，因为地址是NAT，或者端口是转发的（典型情况是Docker和其他容器）。

In order to make Redis Cluster working in such environments, a static configuration where each node knows its public address is needed. The following two options are used for this scope, and are:

为了让Redis集群在这样的环境中工作，需要一种静态配置，其中每个节点都知道自己的公共地址。以下两个选项用于此范围，分别是：

cluster-announce-ip

cluster-announce-port
---------------------------------------------------------------------------------------
你的docker内网是172，你宿主的IP是192网段

根据redis的配置文件中的解释

要在你的配置文件上加上上面的2个配置
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;参考上面的方法一样行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法二：&lt;/strong&gt;使用脚本&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#cat &amp;lt;&amp;lt;EOF EOF在这里没有特殊的含义，你可以使用FOE或000等;
#表示以cat &amp;lt;&amp;lt;EOF 开始输入以 EOF 结束结束输入
#cat&amp;gt;创建文件，并把标准输入输出到后面的filename文件


# * cluster-announce-ip					192.168.1.195	#*群集ip
# * cluster-announce-port				700$&amp;#123;port&amp;#125;		#*群集总线端口
# * cluster-announce-bus-port#*群集ip    1700$&amp;#123;port&amp;#125;	   #*群集公布端口
# 集群 ip 是固定+10000

# 可以使用 :  %s/7001/7002/g     进行全局修改。 ---将全局的7001修改成7002

for port in $(seq 1 6); \ 
do \
mkdir  -p  /root/myredis/conf700$&amp;#123;port&amp;#125;
touch  /root/myredis/conf700$&amp;#123;port&amp;#125;/redis.conf
cat &amp;lt;&amp;lt;TTT &amp;gt; /root/myredis/conf700$&amp;#123;port&amp;#125;/redis.conf port 6379
bind 0.0.0.0
port 700$&amp;#123;port&amp;#125;
cluster-enabled yes
cluster-config-file nodes-700$&amp;#123;port&amp;#125;.conf
cluster-node-timeout 15000
protected-mode no
pidfile /var/run/redis_ 700$&amp;#123;port&amp;#125;.pid
cluster-announce-ip  192.168.1.195 
cluster-announce-port  700$&amp;#123;port) 
cluster-announce-bus-port 1700$&amp;#123;port) 
appendonly yes 
TTT 
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、创建容器&#34;&gt;&lt;a href=&#34;#2、创建容器&#34; class=&#34;headerlink&#34; title=&#34;2、创建容器&#34;&gt;&lt;/a&gt;2、创建容器&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;手动创建容器，并启动&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -p 7001:7001   -p 17001:17001  --name redis7001  -v /root/myredis/conf7001/redis.conf:/etc/redis/redis.conf -v /root/myredis/data7001:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	7002 ~~~7006同上，自行修改参数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法二：&lt;/strong&gt;脚本一键启动，效果同上&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中要指定两个端口号**-p 1700${port}:1700${port}**不要忘记，否则会在创建几群的时候出现  **Waiting for the cluster to join   ** 。【具体原因，我还没查出来，后面补充】&lt;/li&gt;
&lt;li&gt;在docker创建集群容器的时候，&lt;strong&gt;一定要&lt;/strong&gt; 指定  ip&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;那肯定是你端口没有开启，不要质疑，这里的端口不是7000-7005，而是17000-17005，因为redis设置集群的端口号是”redis端口+10000“，这个非常重要。并且7001:7006也是必须打开的。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;for port in $(seq 1 6);  \
do \
docker run -p 700$&amp;#123;port&amp;#125;:700$&amp;#123;port&amp;#125;   -p 1700$&amp;#123;port&amp;#125;:1700$&amp;#123;port&amp;#125;  --name redis700$&amp;#123;port&amp;#125;  \
-v /root/redis/redis700$&amp;#123;port&amp;#125;.conf:/etc/redis/redis.conf \
-v /root/redis/data700$&amp;#123;port&amp;#125;:/data \
-d --ip 192.168.1.195 redis redis-server /etc/redis/redis.conf 
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、进入容器-1&#34;&gt;&lt;a href=&#34;#3、进入容器-1&#34; class=&#34;headerlink&#34; title=&#34;3、进入容器&#34;&gt;&lt;/a&gt;3、进入容器&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it redis7001 /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、创建集群&#34;&gt;&lt;a href=&#34;#4、创建集群&#34; class=&#34;headerlink&#34; title=&#34;4、创建集群&#34;&gt;&lt;/a&gt;4、创建集群&lt;/h4&gt;&lt;p&gt;​	&lt;strong&gt;注：&lt;/strong&gt;有一步操作，要自行进行确认，一定要输入 &lt;strong&gt;yes&lt;/strong&gt; 而不是 &lt;strong&gt;y&lt;/strong&gt; 或者其他之类的，除了 yes一律视为 &lt;strong&gt;no&lt;/strong&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;redis-cli --cluster create 192.168.1.195:7001 192.168.1.195:7002 192.168.1.195:7003 192.168.1.195:7004 192.168.1.195:7005 192.168.1.195:7006 --cluster-replicas 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、测试&#34;&gt;&lt;a href=&#34;#5、测试&#34; class=&#34;headerlink&#34; title=&#34;5、测试&#34;&gt;&lt;/a&gt;5、测试&lt;/h4&gt;&lt;p&gt;​	集群测试时，千万不要忘记最后一个-c参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shel&#34;&gt;redis-cli -p 7001 -c
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6、关闭集群&#34;&gt;&lt;a href=&#34;#6、关闭集群&#34; class=&#34;headerlink&#34; title=&#34;6、关闭集群&#34;&gt;&lt;/a&gt;6、关闭集群&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	自行手动一个一个停止，并且删除容器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker stop redis7001 #7002 ~~~7006

docker rm -f redis7001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;方法二：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	脚本程序，一劳永逸&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;for port in $(seq 1 6);  \
do \
docker stop redis700$&amp;#123;port&amp;#125;
docker rm -f redis700$&amp;#123;port&amp;#125;
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7、清空集群文件&#34;&gt;&lt;a href=&#34;#7、清空集群文件&#34; class=&#34;headerlink&#34; title=&#34;7、清空集群文件&#34;&gt;&lt;/a&gt;7、清空集群文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;for port in $(seq 1 6);  \
do \
rm  -rf  ./data700$&amp;#123;port&amp;#125;/* 
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Solr安装&#34;&gt;&lt;a href=&#34;#Solr安装&#34; class=&#34;headerlink&#34; title=&#34;Solr安装&#34;&gt;&lt;/a&gt;Solr安装&lt;/h2&gt;&lt;h3 id=&#34;——1-7&#34;&gt;&lt;a href=&#34;#——1-7&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;p&gt;​	Solr是使用Java编写，所以必选先安装JDK。&lt;/p&gt;
&lt;h4 id=&#34;1-上传并解压&#34;&gt;&lt;a href=&#34;#1-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;1.上传并解压&#34;&gt;&lt;/a&gt;1.上传并解压&lt;/h4&gt;&lt;p&gt;​	上传压缩包solr-7.7.2.tgz到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中。&lt;/p&gt;
&lt;p&gt;​	解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/tmp
 tar zxf solr-7.7.2.tgz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制到-x2F-usr-x2F-local中&#34;&gt;&lt;a href=&#34;#2-复制到-x2F-usr-x2F-local中&#34; class=&#34;headerlink&#34; title=&#34;2.复制到&amp;#x2F;usr&amp;#x2F;local中&#34;&gt;&lt;/a&gt;2.复制到&amp;#x2F;usr&amp;#x2F;local中&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; cp -r solr-7.7.2 ../solr
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-修改启动参数&#34;&gt;&lt;a href=&#34;#3-修改启动参数&#34; class=&#34;headerlink&#34; title=&#34;3.修改启动参数&#34;&gt;&lt;/a&gt;3.修改启动参数&lt;/h4&gt;&lt;p&gt;​	修改启动参数，否则启动时报警告。提示设置SOLR_ULIMIT_CHECKS&amp;#x3D;false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/solr/bin
 vim solr.in.sh
&lt;/code&gt;&lt;/pre&gt;





&lt;h4 id=&#34;4-启动Solr&#34;&gt;&lt;a href=&#34;#4-启动Solr&#34; class=&#34;headerlink&#34; title=&#34;4.启动Solr&#34;&gt;&lt;/a&gt;4.启动Solr&lt;/h4&gt;&lt;p&gt;​	Solr内嵌Jetty，直接启动即可。监听8983端口。&lt;/p&gt;
&lt;p&gt;​	solr默认不推荐root账户启动，如果是root账户启动需要添加-force参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、可视化管理界面&#34;&gt;&lt;a href=&#34;#5、可视化管理界面&#34; class=&#34;headerlink&#34; title=&#34;5、可视化管理界面&#34;&gt;&lt;/a&gt;5、可视化管理界面&lt;/h4&gt;&lt;p&gt;​	在关闭防火墙的前提下，可以在windows的浏览器中访问Solr。&lt;/p&gt;
&lt;p&gt;​	输入: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguOTMuMTA6ODk4My8=&#34;&gt;http://192.168.93.10:8983&lt;/span&gt; 就可以访问Solr的可视化管理界面。&lt;/p&gt;
&lt;p&gt;​	左侧有5个菜单。分别是：&lt;/p&gt;
&lt;p&gt;​	（1）Dashboard：面板显示Solr的总体信息。&lt;/p&gt;
&lt;p&gt;​	（2）Logging：日志&lt;/p&gt;
&lt;p&gt;​	（3）Core Admin：Solr的核心。类似于数据的Database&lt;/p&gt;
&lt;p&gt;​	（4）Java Perperties：所有Java相关属性。&lt;/p&gt;
&lt;p&gt;​	（5）Thread Dump：线程相关信息。&lt;/p&gt;
&lt;p&gt;​	（6）如果有Core，将显示在此处。&lt;/p&gt;





&lt;h4 id=&#34;6、新建核心&#34;&gt;&lt;a href=&#34;#6、新建核心&#34; class=&#34;headerlink&#34; title=&#34;6、新建核心&#34;&gt;&lt;/a&gt;6、新建核心&lt;/h4&gt;&lt;p&gt;​	Solr安装完成后默认是没有核心的。需要手动配置。&lt;/p&gt;
&lt;p&gt;​	需要在solr&amp;#x2F;server&amp;#x2F;solr下新建文件夹，并给定配置文件，否则无法建立。&lt;/p&gt;





&lt;h5 id=&#34;6-1-新建目录&#34;&gt;&lt;a href=&#34;#6-1-新建目录&#34; class=&#34;headerlink&#34; title=&#34;6.1.新建目录&#34;&gt;&lt;/a&gt;6.1.新建目录&lt;/h5&gt;&lt;p&gt;​	在&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr中新建自定义名称目录。此处示例名称为testcore。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/solr/server/solr
 mkdir testcore
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-2-复制配置文件&#34;&gt;&lt;a href=&#34;#6-2-复制配置文件&#34; class=&#34;headerlink&#34; title=&#34;6.2.复制配置文件&#34;&gt;&lt;/a&gt;6.2.复制配置文件&lt;/h5&gt;&lt;p&gt;​	在configsets里面包含了_default和sample_techproducts_configs。里面都是配置文件示例。_default属于默认配置，较纯净。sample_techproducts_configs是带有了一些配置示例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp -r configsets/_default/conf/ testcore/
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-3-填写Core信息&#34;&gt;&lt;a href=&#34;#6-3-填写Core信息&#34; class=&#34;headerlink&#34; title=&#34;6.3.填写Core信息&#34;&gt;&lt;/a&gt;6.3.填写Core信息&lt;/h5&gt;&lt;p&gt;​	在可视化管理界面中Core Admin中编写信息后点击Add Core后，短暂延迟后testcore就会创建成功。schema处不用更改。&lt;/p&gt;





&lt;h5 id=&#34;6-4-出现testcore&#34;&gt;&lt;a href=&#34;#6-4-出现testcore&#34; class=&#34;headerlink&#34; title=&#34;6.4.出现testcore&#34;&gt;&lt;/a&gt;6.4.出现testcore&lt;/h5&gt;&lt;p&gt;​	在客户端管理界面中，选择新建的Core后，就可以按照自己项目的需求进行操作了。&lt;/p&gt;





&lt;h4 id=&#34;7、分词Analysis&#34;&gt;&lt;a href=&#34;#7、分词Analysis&#34; class=&#34;headerlink&#34; title=&#34;7、分词Analysis&#34;&gt;&lt;/a&gt;7、分词Analysis&lt;/h4&gt;&lt;p&gt;​	在Solr可视化管理界面中，Core的管理菜单项中都会有Analysis。表示根据Scheme.xml(managed-schema)中配置要求进行解析。&lt;/p&gt;
&lt;p&gt;​	对英文解析就比较简单了，只要按照空格把英文语句拆分成英文单词即可。&lt;/p&gt;





&lt;p&gt;​	但是如果条件是中文时，把一句话按照字进行拆分就不是很合理了。正确的方式是按照合理的词组进行拆分。![](D:&amp;#x2F;马士兵&amp;#x2F;Java 课程&amp;#x2F;13_分布式资料&amp;#x2F;5_Solr&amp;#x2F;文档&amp;#x2F;Solr.assets&amp;#x2F;solr-08.jpg)&lt;/p&gt;
&lt;h5 id=&#34;7-1-配置步骤&#34;&gt;&lt;a href=&#34;#7-1-配置步骤&#34; class=&#34;headerlink&#34; title=&#34;7.1.配置步骤&#34;&gt;&lt;/a&gt;7.1.配置步骤&lt;/h5&gt;&lt;p&gt;​	上传ik-analyzer.jar到webapps中。&lt;/p&gt;
&lt;p&gt;​	去&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWFyY2gubWF2ZW4ub3JnL3NlYXJjaD9xPWNvbS5naXRodWIubWFnZXNlJUU0JUI4JThCJUU4JUJEJUJEJUU1JUFGJUI5JUU1JUJBJTk0JUU3JTg5JTg4JUU2JTlDJUFDJUU3JTlBJTg0aWstYW5hbHl6ZXIlRTMlODAlODIlRTUlOEYlQUYlRTQlQkIlQTUlRTUlOUMlQTglRTglQjUlODQlRTYlOTYlOTklRTQlQjglQUQlRTclOUIlQjQlRTYlOEUlQTUlRTglOEUlQjclRTUlOEYlOTYlRTMlODAlODI=&#34;&gt;https://search.maven.org/search?q=com.github.magese下载对应版本的ik-analyzer。可以在资料中直接获取。&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;7-1-1上传jar到指定目录&#34;&gt;&lt;a href=&#34;#7-1-1上传jar到指定目录&#34; class=&#34;headerlink&#34; title=&#34;7.1.1上传jar到指定目录&#34;&gt;&lt;/a&gt;7.1.1上传jar到指定目录&lt;/h5&gt;&lt;p&gt;​	上传ik-analyzer-7.7.0.jar到&lt;/p&gt;
&lt;p&gt;​	&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr-webapp&amp;#x2F;webapp&amp;#x2F;WEB-INF&amp;#x2F;lib目录中&lt;/p&gt;
&lt;h5 id=&#34;7-1-2修改配置文件&#34;&gt;&lt;a href=&#34;#7-1-2修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;7.1.2修改配置文件&#34;&gt;&lt;/a&gt;7.1.2修改配置文件&lt;/h5&gt;&lt;p&gt;​	修改&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr&amp;#x2F;testcore&amp;#x2F;conf&amp;#x2F;managed-schema&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim /usr/local/solr/server/solr/testcore/conf/managed-schema
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	添加下面内容。&lt;/p&gt;
&lt;p&gt;​	排版：Esc 退出编辑状态下：gg&amp;#x3D;G&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;field name=&amp;quot;myfield&amp;quot; type=&amp;quot;text_ik&amp;quot; indexed=&amp;quot;true&amp;quot; stored=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;fieldType name=&amp;quot;text_ik&amp;quot; class=&amp;quot;solr.TextField&amp;quot;&amp;gt;
            &amp;lt;analyzer type=&amp;quot;index&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;false&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
            &amp;lt;analyzer type=&amp;quot;query&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;true&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
    &amp;lt;/fieldType&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;7-1-3重启&#34;&gt;&lt;a href=&#34;#7-1-3重启&#34; class=&#34;headerlink&#34; title=&#34;7.1.3重启&#34;&gt;&lt;/a&gt;7.1.3重启&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/bin
# ./solr stop -all
# ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;7-1-4验证&#34;&gt;&lt;a href=&#34;#7-1-4验证&#34; class=&#34;headerlink&#34; title=&#34;7.1.4验证&#34;&gt;&lt;/a&gt;7.1.4验证&lt;/h5&gt;&lt;p&gt;​	可以在可视化管理界面中找到myfield属性进行验证。&lt;/p&gt;





&lt;h5 id=&#34;7-2-managed-schema配置说明&#34;&gt;&lt;a href=&#34;#7-2-managed-schema配置说明&#34; class=&#34;headerlink&#34; title=&#34;7.2.managed-schema配置说明&#34;&gt;&lt;/a&gt;7.2.managed-schema配置说明&lt;/h5&gt;&lt;h5 id=&#34;7-2-1-lt-fieldType-x2F-gt&#34;&gt;&lt;a href=&#34;#7-2-1-lt-fieldType-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;7.2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&lt;/h5&gt;&lt;p&gt;​	表示定义一个属性类型。在Solr中属性类型都是自定义的。在上面配置中name&amp;#x3D;”text_ik”为自定义类型。当某个属性取值为text_ik时IK Analyzer才能生效。&lt;/p&gt;
&lt;h5 id=&#34;7-2-2-lt-field-x2F-gt&#34;&gt;&lt;a href=&#34;#7-2-2-lt-field-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.2&amp;lt; field&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;7.2.2&amp;lt; field&amp;#x2F;&amp;gt;&lt;/h5&gt;&lt;p&gt;​	表示向Document中添加一个属性。&lt;/p&gt;
&lt;p&gt;​	常用属性：&lt;/p&gt;
&lt;p&gt;​		name: 属性名&lt;/p&gt;
&lt;p&gt;​		type:属性类型。所有类型都是solr使用&lt;fieldType&gt;配置的&lt;/p&gt;
&lt;p&gt;​		indexed: 是否建立索引&lt;/p&gt;
&lt;p&gt;​		stored: solr是否把该属性值响应给搜索用户。&lt;/p&gt;
&lt;p&gt;​		required：该属性是否是必须的。默认id是必须的。&lt;/p&gt;
&lt;p&gt;​		multiValued：如果为true，表示该属性为复合属性，此属性中包含了多个其他的属性。常用在多个列作为搜索条件时，把这些列定义定义成一个新的复合属性，通过搜索一个复合属性就可以实现搜索多个列。当设置为true时与&amp;lt; copyField source&amp;#x3D;”” dest&amp;#x3D;””&amp;#x2F;&amp;gt;结合使用&lt;/p&gt;
&lt;h5 id=&#34;7-2-3-lt-uniqueKey-gt&#34;&gt;&lt;a href=&#34;#7-2-3-lt-uniqueKey-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.3&amp;lt; uniqueKey&amp;gt;&#34;&gt;&lt;/a&gt;7.2.3&amp;lt; uniqueKey&amp;gt;&lt;/h5&gt;&lt;p&gt;​	唯一主键，Solr中默认定义id属性为唯一主键。ID的值是不允许重复的。&lt;/p&gt;
&lt;h5 id=&#34;7-2-4-lt-dynamicField-gt&#34;&gt;&lt;a href=&#34;#7-2-4-lt-dynamicField-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.4&amp;lt; dynamicField&amp;gt;&#34;&gt;&lt;/a&gt;7.2.4&amp;lt; dynamicField&amp;gt;&lt;/h5&gt;&lt;p&gt;​	名称中允许*进行通配。代表满足特定名称要求的一组属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; msb_java    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	msb_bigdata&lt;/p&gt;
&lt;p&gt;​	msb_UI&lt;/p&gt;
&lt;p&gt;​        msb_*&lt;/p&gt;
&lt;h4 id=&#34;8、Dataimport&#34;&gt;&lt;a href=&#34;#8、Dataimport&#34; class=&#34;headerlink&#34; title=&#34;8、Dataimport&#34;&gt;&lt;/a&gt;8、Dataimport&lt;/h4&gt;&lt;p&gt;​	可以使用Solr自带的Dataimport功能把数据库中数据快速导入到solr中.&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;必须保证managed-schema和数据库中表的列对应。，添加配置&lt;/strong&gt;&lt;/p&gt;
&lt;h5 id=&#34;8-1-修改配置文件&#34;&gt;&lt;a href=&#34;#8-1-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;8.1.修改配置文件&#34;&gt;&lt;/a&gt;8.1.修改配置文件&lt;/h5&gt;&lt;p&gt;​	修改solrconfig.xml，添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;!-- 配置数据导入的处理器 --&amp;gt;
  &amp;lt;requestHandler name=&amp;quot;/dataimport&amp;quot; class=&amp;quot;org.apache.solr.handler.dataimport.DataImportHandler&amp;quot;&amp;gt;
    &amp;lt;lst name=&amp;quot;defaults&amp;quot;&amp;gt;
      &amp;lt;!--  加载data-config.xml  --&amp;gt;
      &amp;lt;str name=&amp;quot;config&amp;quot;&amp;gt;data-config.xml&amp;lt;/str&amp;gt;
     &amp;lt;/lst&amp;gt;
  &amp;lt;/requestHandler&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8-2-新建data-config-xml&#34;&gt;&lt;a href=&#34;#8-2-新建data-config-xml&#34; class=&#34;headerlink&#34; title=&#34;8.2.新建data-config.xml&#34;&gt;&lt;/a&gt;8.2.新建data-config.xml&lt;/h5&gt;&lt;p&gt;​	和solrconfig.xml同一目录下新建data-config.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;dataConfig&amp;gt;
        &amp;lt;dataSource type=&amp;quot;JdbcDataSource&amp;quot;   
                driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot;   
                url=&amp;quot;jdbc:mysql://192.168.1.135:3306/mytest&amp;quot;   
                user=&amp;quot;root&amp;quot;   
                password=&amp;quot;root&amp;quot;/&amp;gt;
        &amp;lt;document&amp;gt;
            &amp;lt;entity name=&amp;quot;product&amp;quot; query=&amp;quot;SELECT id,name,price from t_product&amp;quot;&amp;gt;
                &amp;lt;!-- 
                 实现数据库的列和索引库的字段的映射
                 column 指定数据库的列表
                 name  指定索引库的字段名字，必须和schema.xml中定义的一样
                 --&amp;gt;
                 &amp;lt;field column=&amp;quot;id&amp;quot; name=&amp;quot;id&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;price&amp;quot; name=&amp;quot;price&amp;quot;/&amp;gt;
            &amp;lt;/entity&amp;gt;
         &amp;lt;/document&amp;gt;
&amp;lt;/dataConfig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8-3-添加jar&#34;&gt;&lt;a href=&#34;#8-3-添加jar&#34; class=&#34;headerlink&#34; title=&#34;8.3.添加jar&#34;&gt;&lt;/a&gt;8.3.添加jar&lt;/h5&gt;&lt;p&gt;​	向solr-webapp中添加&lt;strong&gt;三个jar&lt;/strong&gt;。在&lt;strong&gt;dist中两个还有一个数据库驱动。（自己去maven-repository里面找一个 mysql-connector-java ）&lt;/strong&gt;&lt;/p&gt;





&lt;h5 id=&#34;8-4-操作&#34;&gt;&lt;a href=&#34;#8-4-操作&#34; class=&#34;headerlink&#34; title=&#34;8.4.操作&#34;&gt;&lt;/a&gt;8.4.操作&lt;/h5&gt;&lt;p&gt;​	重启solr后，在可视化管理页面中进行数据导入。&lt;/p&gt;
&lt;p&gt;​	注意：&lt;/p&gt;
&lt;p&gt;​	点击导入按钮后，要记得点击刷新按钮。&lt;/p&gt;
&lt;h2 id=&#34;Erlang安装&#34;&gt;&lt;a href=&#34;#Erlang安装&#34; class=&#34;headerlink&#34; title=&#34;Erlang安装&#34;&gt;&lt;/a&gt;&lt;strong&gt;Erlang安装&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&#34;——1-8&#34;&gt;&lt;a href=&#34;#——1-8&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;p&gt;​	RabbitMQ是使用Erlang语言编写的，所以需要先配置Erlang&lt;/p&gt;
&lt;h4 id=&#34;1-修改主机名&#34;&gt;&lt;a href=&#34;#1-修改主机名&#34; class=&#34;headerlink&#34; title=&#34;1 修改主机名&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;修改主机名&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	RabbitMQ是通过主机名进行访问的，必须指定能访问的主机名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  vim /etc/sysconfig/network
  
  添加
  NETWORKING=yes
  HOSTNAME=node-1 #名字可以随意
&lt;/code&gt;&lt;/pre&gt;





&lt;pre&gt;&lt;code&gt;    vim /etc/hosts
  
    ip network_hostname
eg: 192.168.1.195 node-1  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	新添加了一行，前面为服务器ip，空格后面添加计算机主机名&lt;/p&gt;





&lt;h4 id=&#34;2-安装依赖&#34;&gt;&lt;a href=&#34;#2-安装依赖&#34; class=&#34;headerlink&#34; title=&#34;2 安装依赖&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;安装依赖&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC unixODBC-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-上传并解压&#34;&gt;&lt;a href=&#34;#3-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;3 上传并解压&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	上传otp_src_22.0.tar.gz到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp目录中，进入目录并解压。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 解压时注意，此压缩包不具有gzip属性，解压参数没有z，只有xf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  tar xf otp_src_22.0.tar.gz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-配置参数&#34;&gt;&lt;a href=&#34;#4-配置参数&#34; class=&#34;headerlink&#34; title=&#34;4 配置参数&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;配置参数&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	先新建&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;erlang文件夹，作为安装文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  mkdir -p /usr/local/erlang
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 进入文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd otp_src_22.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 配置参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-编译并安装&#34;&gt;&lt;a href=&#34;#5-编译并安装&#34; class=&#34;headerlink&#34; title=&#34;5 编译并安装&#34;&gt;&lt;/a&gt;5 &lt;strong&gt;编译并安装&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	编译 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-修改环境变量&#34;&gt;&lt;a href=&#34;#6-修改环境变量&#34; class=&#34;headerlink&#34; title=&#34;6 修改环境变量&#34;&gt;&lt;/a&gt;6 &lt;strong&gt;修改环境变量&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	修改&amp;#x2F;etc&amp;#x2F;profile文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 在文件中添加下面代码 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/erlang/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	运行文件，让修改内容生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-查看配置是否成功&#34;&gt;&lt;a href=&#34;#7-查看配置是否成功&#34; class=&#34;headerlink&#34; title=&#34;7 查看配置是否成功&#34;&gt;&lt;/a&gt;7 &lt;strong&gt;查看配置是否成功&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  erl -version
&lt;/code&gt;&lt;/pre&gt;











&lt;h2 id=&#34;RabbitMQ安装&#34;&gt;&lt;a href=&#34;#RabbitMQ安装&#34; class=&#34;headerlink&#34; title=&#34;RabbitMQ安装&#34;&gt;&lt;/a&gt;RabbitMQ&lt;strong&gt;安装&lt;/strong&gt;&lt;/h2&gt;&lt;h4 id=&#34;1-上传并解压-1&#34;&gt;&lt;a href=&#34;#1-上传并解压-1&#34; class=&#34;headerlink&#34; title=&#34;1 上传并解压&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	上传rabbitmq-server-generic-unix-3.7.18.tar.xz到&amp;#x2F;usr&amp;#x2F;loca&amp;#x2F;tmp中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  
  tar xf rabbitmq-server-generic-unix-3.7.18.tar.xz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制到local下&#34;&gt;&lt;a href=&#34;#2-复制到local下&#34; class=&#34;headerlink&#34; title=&#34;2 复制到local下&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;复制到local下&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	复制解压文件到&amp;#x2F;usr&amp;#x2F;local下，命名为rabbitmq&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cp -r rabbitmq_server-3.7.18 /usr/local/rabbitmq
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-配置环境变量&#34;&gt;&lt;a href=&#34;#3-配置环境变量&#34; class=&#34;headerlink&#34; title=&#34;3 配置环境变量&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;配置环境变量&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	在文件中添加 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	解析文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-开启web管理插件&#34;&gt;&lt;a href=&#34;#4-开启web管理插件&#34; class=&#34;headerlink&#34; title=&#34;4 开启web管理插件&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;开启web管理插件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	进入rabbitmq&amp;#x2F;sbin目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 查看插件列表
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  ./rabbitmq-plugins list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 生效管理插件
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  ./rabbitmq-plugins enable rabbitmq_management
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-后台运行&#34;&gt;&lt;a href=&#34;#5-后台运行&#34; class=&#34;headerlink&#34; title=&#34;5 后台运行&#34;&gt;&lt;/a&gt;5 &lt;strong&gt;后台运行&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	启动rabbitmq。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ./rabbitmq-server -detached
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	停止命令，如果无法停止，使用kill -9 进程号进行关闭&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./rabbitmqctl stop_app
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-查看web管理界面&#34;&gt;&lt;a href=&#34;#6-查看web管理界面&#34; class=&#34;headerlink&#34; title=&#34;6 查看web管理界面&#34;&gt;&lt;/a&gt;6 &lt;strong&gt;查看web管理界面&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	默认可以在安装rabbitmq的电脑上通过用户名：guest密码guest进行访问web管理界面&lt;/p&gt;
&lt;p&gt;​	端口号：15672（放行端口，或关闭防火墙）&lt;/p&gt;
&lt;p&gt;​	在虚拟机浏览器中输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDoxNTY3Mi8=&#34;&gt;http://localhost:15672&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;RabbitMq账户管理&#34;&gt;&lt;a href=&#34;#RabbitMq账户管理&#34; class=&#34;headerlink&#34; title=&#34;* RabbitMq账户管理&#34;&gt;&lt;/a&gt;* RabbitMq账户管理&lt;/h3&gt;&lt;h4 id=&#34;1-创建账户&#34;&gt;&lt;a href=&#34;#1-创建账户&#34; class=&#34;headerlink&#34; title=&#34;1 创建账户&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;创建账户&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	语法：.&amp;#x2F;rabbitmqctl add_user username password&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/rabbitmq/sbin
 
 ./rabbitmqctl add_user mashibing mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-给用户授予管理员角色&#34;&gt;&lt;a href=&#34;#2-给用户授予管理员角色&#34; class=&#34;headerlink&#34; title=&#34;2 给用户授予管理员角色&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;给用户授予管理员角色&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	其中smallming为新建用户的用户名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./rabbitmqctl set_user_tags mashibing administrator
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-给用户授权&#34;&gt;&lt;a href=&#34;#3-给用户授权&#34; class=&#34;headerlink&#34; title=&#34;3 给用户授权&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;给用户授权&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	“&amp;#x2F;” 表示虚拟机&lt;/p&gt;
&lt;p&gt;​	mashibing 表示用户名&lt;/p&gt;
&lt;p&gt;​	“.&lt;em&gt;“ “.&lt;/em&gt;“ “.*” 表示完整权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./rabbitmqctl set_permissions -p &amp;quot;/&amp;quot; mashibing &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-登录&#34;&gt;&lt;a href=&#34;#4-登录&#34; class=&#34;headerlink&#34; title=&#34;4 登录&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;登录&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	使用新建账户和密码在windows中访问rabbitmq并登录 &lt;/p&gt;
&lt;p&gt;​	在浏览器地址栏输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOjE1NjcyLw==&#34;&gt;http://ip:15672/&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 用户名：mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	密码：mashibing&lt;/p&gt;
&lt;h2 id=&#34;SolrCloud&#34;&gt;&lt;a href=&#34;#SolrCloud&#34; class=&#34;headerlink&#34; title=&#34;SolrCloud&#34;&gt;&lt;/a&gt;SolrCloud&lt;/h2&gt;&lt;p&gt;​	Solr可以搭建具备容错能力和高可用的Solr集群。集群中集群配置、自动负载均衡和查询故障转移、			Zookeeper集群实现集群协调管理，这些全部功能统称为SolrCloud。&lt;/p&gt;
&lt;p&gt;​	SolrCloud是基于Zookeeper进行管理的。在Solr中已经内置了Zookeeper相关内容，当执行集群创建命令会自动创建Zookeeper相关内容。这个使用的是Zookeeper的集群管理功能实现的。&lt;/p&gt;
&lt;h4 id=&#34;1-搭建&#34;&gt;&lt;a href=&#34;#1-搭建&#34; class=&#34;headerlink&#34; title=&#34;1.搭建&#34;&gt;&lt;/a&gt;1.搭建&lt;/h4&gt;&lt;h5 id=&#34;1-1创建&#34;&gt;&lt;a href=&#34;#1-1创建&#34; class=&#34;headerlink&#34; title=&#34;1.1创建&#34;&gt;&lt;/a&gt;1.1创建&lt;/h5&gt;&lt;p&gt;​	SolrCloud已经包含在了Solr中，可以直接启动Solr集群。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./solr -e cloud -noprompt -force
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	此命令等同于# .&amp;#x2F;solr -e cloud -force全部参数为默认值。&lt;/p&gt;
&lt;p&gt;​	运行成功后会在example文件夹多出cloud文件夹。&lt;/p&gt;
&lt;h5 id=&#34;1-2停止&#34;&gt;&lt;a href=&#34;#1-2停止&#34; class=&#34;headerlink&#34; title=&#34;1.2停止&#34;&gt;&lt;/a&gt;1.2停止&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; ./solr stop -all
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-3重新运行&#34;&gt;&lt;a href=&#34;#1-3重新运行&#34; class=&#34;headerlink&#34; title=&#34;1.3重新运行&#34;&gt;&lt;/a&gt;1.3重新运行&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; ./solr start -c -p 8983 -s ../example/cloud/node1/solr/ -force
 ./solr start -c -p 7574 -z localhost:9983 -s ../example/cloud/node2/solr/ -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;HDFS安装&#34;&gt;&lt;a href=&#34;#HDFS安装&#34; class=&#34;headerlink&#34; title=&#34;HDFS安装&#34;&gt;&lt;/a&gt;HDFS安装&lt;/h2&gt;&lt;h3 id=&#34;——1-9&#34;&gt;&lt;a href=&#34;#——1-9&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h3 id=&#34;——2-7&#34;&gt;&lt;a href=&#34;#——2-7&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h3&gt;&lt;p&gt;1.拉取Hadoop镜像（可以在docker hub上找合适的镜像）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull singularities/hadoop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.创建docker-compose.yml文件（可以在文本编辑器中写好后，复制），内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;
version: &amp;quot;2&amp;quot;

services:
  namenode:
    image: singularities/hadoop
    command: start-hadoop namenode
    environment:
      HDFS_USER: hdfsuser
    ports:
      - &amp;quot;8020:8020&amp;quot;
      - &amp;quot;14000:14000&amp;quot;
      - &amp;quot;50070:50070&amp;quot;
      - &amp;quot;10020:10020&amp;quot;
      - &amp;quot;13562:13562&amp;quot;
      - &amp;quot;19888:19888&amp;quot;
  datanode:
    image: singularities/hadoop
    command: start-hadoop datanode namenode
    environment:
      HDFS_USER: hdfsuser
    links:
      - namenode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.创建hadoop，执行如下命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose up -d
docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.开启多个datanode&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose scale datanode=3
docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.查看hadoop控制面板。由于服务刚初始化，可能需要等一会。访问类似如下url：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;http://192.168.1.195:50070/dfshealth.html#tab-datanode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6.进入任意hadoop相关容器，&lt;strong&gt;直接进行hdfs基础操作&lt;/strong&gt;&lt;br&gt;在任意datanode的容器中操作hdfs，会自动同步到其他的datanode容器中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# 查看所有命令
hadoop fs
# 创建目录
hadoop fs -mkdir /hdfs #在根目录下创建hdfs文件夹
# 查看目录
hadoop fs -ls  /   #列出根目录下的文件列表
# 创建多级目录
hadoop fs -mkdir -p /hdfs/d1/d2
# 上传文件到HDFS
echo &amp;quot;hello world&amp;quot; &amp;gt;&amp;gt; local.txt   #创建文件
hadoop fs -put local.txt /hdfs/   #上传文件到hdfs
# 下载hdfs文件
hadoop fs -get /hdfs/local.txt
# 删除hdfs中的文件
hadoop fs -rm /hdfs/local.txt
# 删除hdfs中的目录
hadoop fs -rmdir /hdfs/d1/d2
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Kafka-安装&#34;&gt;&lt;a href=&#34;#Kafka-安装&#34; class=&#34;headerlink&#34; title=&#34;Kafka 安装&#34;&gt;&lt;/a&gt;Kafka 安装&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;安装前提，kafka安装运行最低支持jdk7；本篇演示版本是基于jdk1.8；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方下载地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly9rYWZrYS5hcGFjaGUub3JnL2Rvd25sb2Fkcw==&#34;&gt;Apache Kafka&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;kafka 是由scala语言编写，下载稳定版本，即前一个版本&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-9f6503ade62cfa48df87cc9da984e87d_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击进入后，按如下方式点击下载&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-bd19bea83d1cb978fbeed614ee126da6_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;下载完成后进行解压缩&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;tar -zxvf kafka_2.12-2.8.0.tgz 
mv kafka_2.12-2.8.0 /usr/local/kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解压完成后进入kafka目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;cd /usr/local/kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-dfe360dfc7561953761f8ce69f782f4d_720w.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;kafka 是基于 Zookeeper 的消息管理系统，所以启动的时候是需要使用到 Zookeeper ，但其内置了Zookeeper ，所以只需要根据bin目录下的文件进行启动即可&lt;/p&gt;
&lt;p&gt;启动Zookeeper 服务端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;./bin/zookeeper-server-start.sh ./config/zookeeper.properties 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Zookeeper 启动成功后会出现 &lt;code&gt;binding to port 0.0.0.0/0.0.0.0:2181&lt;/code&gt; 所示结果表示启动成功；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic1.zhimg.com/80/v2-6be2f91cd4ec47d589d3c5b58584c4b8_720w.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;启动kafka服务端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt; ./bin/kafka-server-start.sh  ./config/server.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;MyCat-Server安装&#34;&gt;&lt;a href=&#34;#MyCat-Server安装&#34; class=&#34;headerlink&#34; title=&#34;MyCat(Server安装)&#34;&gt;&lt;/a&gt;MyCat(Server安装)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;前提：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、&lt;a href=&#34;#jdk_install&#34;&gt;jdk安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2、&lt;a href=&#34;#mysql_install&#34;&gt;mysql安装&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5teWNhdC5vcmcuY24v&#34;&gt;http://www.mycat.org.cn/&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先准备四台虚拟机，安装好mysql，方便后续做读写分离和主从复制。**(3.3内容)**&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;192.168.85.45 node01
192.168.85.46 node02
192.168.85.47 node03
192.168.85.48 node04
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1、下载MyCat&#34;&gt;&lt;a href=&#34;#1、下载MyCat&#34; class=&#34;headerlink&#34; title=&#34;1、下载MyCat&#34;&gt;&lt;/a&gt;1、下载MyCat&lt;/h4&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RsLm15Y2F0Lm9yZy5jbi8xLjYuNy42LzIwMjEwOTMwMjEzMDQ5L015Y2F0LXNlcnZlci0xLjYuNy42LXJlbGVhc2UtMjAyMTA5MzAyMTMwNDktbGludXgudGFyLmd6&#34;&gt;http://dl.mycat.org.cn/1.6.7.6/20210930213049/Mycat-server-1.6.7.6-release-20210930213049-linux.tar.gz&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;windows下载安装包
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、上传并解压压缩文件&#34;&gt;&lt;a href=&#34;#2、上传并解压压缩文件&#34; class=&#34;headerlink&#34; title=&#34;2、上传并解压压缩文件&#34;&gt;&lt;/a&gt;2、上传并解压压缩文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt; tar -zxvf Mycat-server-1.6.7.5-release-20200422133810-linux.tar.gz -C /usr/local/ 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、修改配置&#34;&gt;&lt;a href=&#34;#3、修改配置&#34; class=&#34;headerlink&#34; title=&#34;3、修改配置&#34;&gt;&lt;/a&gt;3、修改配置&lt;/h4&gt;&lt;p&gt;0、配置环境变量（可选）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim /etc/profile
# 添加如下配置信息：
export MYCAT_HOME=/usr/local/mycat
export PATH=$MYCAT_HOME/bin:$PATH:$JAVA_HOME/bin

# 生效
source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;修改server.xml schema.xml之前先备份&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/mycat

cd conf

cp server.xml server.xml.list
cp schema.xml schema.xml.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1、修改完成后的  &lt;strong&gt;server.xml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!-- - - Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); 
        - you may not use this file except in compliance with the License. - You 
        may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 
        - - Unless required by applicable law or agreed to in writing, software - 
        distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS, - WITHOUT 
        WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the 
        License for the specific language governing permissions and - limitations 
        under the License. --&amp;gt;
&amp;lt;!DOCTYPE mycat:server SYSTEM &amp;quot;server.dtd&amp;quot;&amp;gt;
&amp;lt;mycat:server xmlns:mycat=&amp;quot;http://io.mycat/&amp;quot;&amp;gt;
        &amp;lt;user name=&amp;quot;root&amp;quot; defaultAccount=&amp;quot;true&amp;quot;&amp;gt;
                &amp;lt;property name=&amp;quot;password&amp;quot;&amp;gt;root&amp;lt;/property&amp;gt;
                &amp;lt;property name=&amp;quot;schemas&amp;quot;&amp;gt;TESTDB&amp;lt;/property&amp;gt;
                &amp;lt;property name=&amp;quot;defaultSchema&amp;quot;&amp;gt;TESTDB&amp;lt;/property&amp;gt;
        &amp;lt;/user&amp;gt;
&amp;lt;/mycat:server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、修改完成后的 schema.xml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE mycat:schema SYSTEM &amp;quot;schema.dtd&amp;quot;&amp;gt;
&amp;lt;mycat:schema xmlns:mycat=&amp;quot;http://io.mycat/&amp;quot;&amp;gt;
        &amp;lt;schema name=&amp;quot;TESTDB&amp;quot; checkSQLschema=&amp;quot;false&amp;quot; sqlMaxLimit=&amp;quot;100&amp;quot; dataNode=&amp;quot;dn1&amp;quot;&amp;gt;
        &amp;lt;/schema&amp;gt;
        &amp;lt;dataNode name=&amp;quot;dn1&amp;quot; dataHost=&amp;quot;host1&amp;quot; database=&amp;quot;msb&amp;quot; /&amp;gt;
        &amp;lt;dataHost name=&amp;quot;host1&amp;quot; maxCon=&amp;quot;1000&amp;quot; minCon=&amp;quot;10&amp;quot; balance=&amp;quot;0&amp;quot;
                          writeType=&amp;quot;0&amp;quot; dbType=&amp;quot;mysql&amp;quot; dbDriver=&amp;quot;native&amp;quot; switchType=&amp;quot;1&amp;quot;  slaveThreshold=&amp;quot;100&amp;quot;&amp;gt;
                &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
                &amp;lt;writeHost host=&amp;quot;hostM1&amp;quot; url=&amp;quot;192.168.1.45:3306&amp;quot; user=&amp;quot;root&amp;quot;
                                   password=&amp;quot;root&amp;quot;&amp;gt;
                         &amp;lt;readHost host=&amp;quot;hostS1&amp;quot; url=&amp;quot;192.168.1.46:3306&amp;quot; user=&amp;quot;root&amp;quot; password=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/readHost&amp;gt;
                &amp;lt;/writeHost&amp;gt;
        &amp;lt;/dataHost&amp;gt;
&amp;lt;/mycat:schema&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3、修改 &lt;strong&gt;hosts&lt;/strong&gt;  文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim /etc/hosts

#添加
#ip name
192.168.1.164 node01
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、启动mycat&#34;&gt;&lt;a href=&#34;#4、启动mycat&#34; class=&#34;headerlink&#34; title=&#34;4、启动mycat&#34;&gt;&lt;/a&gt;4、启动mycat&lt;/h4&gt;&lt;p&gt;​		mycat的启动有两种方式，一种是控制台启动，一种是后台启动，在初学的时候建议大家使用控制台启动的方式，当配置文件写错之后，可以方便的看到错误，及时修改，但是在生产环境中，使用后台启动的方式比较稳妥。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;控制台启动：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usrlocal/mycat/bin
./mycat console

#加入环境变量后可直接启动
mycat console
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		&lt;strong&gt;后台启动：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usrlocal/mycat/bin
./mycat start

#加入环境变量后可直接启动
mycat start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		按照如上配置在安装的时候应该不会报错，如果出现错误，根据错误的提示解决即可。&lt;/p&gt;
&lt;h4 id=&#34;5、登录验证&#34;&gt;&lt;a href=&#34;#5、登录验证&#34; class=&#34;headerlink&#34; title=&#34;5、登录验证&#34;&gt;&lt;/a&gt;5、登录验证&lt;/h4&gt;&lt;p&gt;​		&lt;strong&gt;管理窗口的登录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		从另外的虚拟机去登录访问当前mycat，输入如下命令即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql -uroot -proot -P 9066 -h ip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		此时访问的是mycat的管理窗口，可以通过show @@help查看可以执行的命令&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;数据窗口的登录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		从另外的虚拟机去登录访问mycat，输入命令如下：【用户设置】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql -uroot -proot -P8066 -h ip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		当都能够成功的时候以为着mycat已经搭建完成。&lt;/p&gt;
&lt;h2 id=&#34;HAProxy安装&#34;&gt;&lt;a href=&#34;#HAProxy安装&#34; class=&#34;headerlink&#34; title=&#34;HAProxy安装&#34;&gt;&lt;/a&gt;HAProxy安装&lt;/h2&gt;&lt;h3 id=&#34;——1-10&#34;&gt;&lt;a href=&#34;#——1-10&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h4 id=&#34;1、准备好HAProxy的安装包&#34;&gt;&lt;a href=&#34;#1、准备好HAProxy的安装包&#34; class=&#34;headerlink&#34; title=&#34;1、准备好HAProxy的安装包&#34;&gt;&lt;/a&gt;1、准备好HAProxy的安装包&lt;/h4&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcmMuZmVkb3JhcHJvamVjdC5vcmcvcmVwby9wa2dzL2hhcHJveHkv&#34;&gt;https://src.fedoraproject.org/repo/pkgs/haproxy/&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;2、解压到-x2F-usr-x2F-local目录&#34;&gt;&lt;a href=&#34;#2、解压到-x2F-usr-x2F-local目录&#34; class=&#34;headerlink&#34; title=&#34;2、解压到&amp;#x2F;usr&amp;#x2F;local目录&#34;&gt;&lt;/a&gt;2、解压到&amp;#x2F;usr&amp;#x2F;local目录&lt;/h4&gt;&lt;h4 id=&#34;3、进入到解压后的目录，查看内核版本，进行编译&#34;&gt;&lt;a href=&#34;#3、进入到解压后的目录，查看内核版本，进行编译&#34; class=&#34;headerlink&#34; title=&#34;3、进入到解压后的目录，查看内核版本，进行编译&#34;&gt;&lt;/a&gt;3、进入到解压后的目录，查看内核版本，进行编译&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd cd /usr/local/haproxy-1.8.25/

# 查看内核版本3.10=31
uname -r

make TARGET=linux31
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、编译完成之后，开始进行安装&#34;&gt;&lt;a href=&#34;#4、编译完成之后，开始进行安装&#34; class=&#34;headerlink&#34; title=&#34;4、编译完成之后，开始进行安装&#34;&gt;&lt;/a&gt;4、编译完成之后，开始进行安装&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;make install PREFIX=/usr/local/haproxy
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、安装完成之后，创建目录，创建HAProxy配置文件&#34;&gt;&lt;a href=&#34;#5、安装完成之后，创建目录，创建HAProxy配置文件&#34; class=&#34;headerlink&#34; title=&#34;5、安装完成之后，创建目录，创建HAProxy配置文件&#34;&gt;&lt;/a&gt;5、安装完成之后，创建目录，创建HAProxy配置文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir -p /usr/data/haproxy
mkdir /usr/local/haproxy/conf
vi /usr/local/haproxy/conf、haproxy.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6、向配置文件中添加配置信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    global
        log 127.0.0.1 local0
        #log 127.0.0.1 local1 notice
        #log loghost local0 info
        maxconn 4096
        chroot /usr/local/haproxy
        pidfile /usr/data/haproxy/haproxy.pid
        uid 99
        gid 99
        daemon
        #debug
        #quiet
defaults
        log global
        mode tcp
        option abortonclose
        option redispatch
        retries 3
        maxconn 2000
        timeout connect 5000
        timeout client 50000
        timeout server 50000
listen proxy_status
    bind :48066
        mode tcp
        balance roundrobin
        server mycat_1 192.168.85.111:8066 check inter 10s
        server mycat_2 192.168.85.112:8066 check inter 10s
frontend admin_stats
    bind :7777
        mode http
        stats enable
        option httplog
        maxconn 10
        stats refresh 30s
        stats uri /admin
        stats auth admin:123123
        stats hide-version
        stats admin if TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;stats uri &amp;#x2F;admin                   		   &lt;strong&gt;账号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;stats auth admin:123123       	   &lt;strong&gt;密码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7、启动haproxy服务&#34;&gt;&lt;a href=&#34;#7、启动haproxy服务&#34; class=&#34;headerlink&#34; title=&#34;7、启动haproxy服务&#34;&gt;&lt;/a&gt;7、启动haproxy服务&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    /usr/local/haproxy/sbin/haproxy -f /usr/local/haproxy/conf/haproxy.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8、查看haproxy的进程，如果存在则说明没有问题&#34;&gt;&lt;a href=&#34;#8、查看haproxy的进程，如果存在则说明没有问题&#34; class=&#34;headerlink&#34; title=&#34;8、查看haproxy的进程，如果存在则说明没有问题&#34;&gt;&lt;/a&gt;8、查看haproxy的进程，如果存在则说明没有问题&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    ps -ef | grep haproxy
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;9、打开浏览器访问-用户名为admin，密码为123123&#34;&gt;&lt;a href=&#34;#9、打开浏览器访问-用户名为admin，密码为123123&#34; class=&#34;headerlink&#34; title=&#34;9、打开浏览器访问,用户名为admin，密码为123123&#34;&gt;&lt;/a&gt;9、打开浏览器访问,用户名为admin，密码为123123&lt;/h4&gt;&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMS4xNjQ6Nzc3Ny9hZG1pbg==&#34;&gt;http://192.168.1.164:7777/admin&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;Keepalived安装&#34;&gt;&lt;a href=&#34;#Keepalived安装&#34; class=&#34;headerlink&#34; title=&#34;Keepalived安装&#34;&gt;&lt;/a&gt;Keepalived安装&lt;/h2&gt;&lt;h3 id=&#34;——1-11&#34;&gt;&lt;a href=&#34;#——1-11&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h4 id=&#34;1、准备好Keepalived安装包&#34;&gt;&lt;a href=&#34;#1、准备好Keepalived安装包&#34; class=&#34;headerlink&#34; title=&#34;1、准备好Keepalived安装包&#34;&gt;&lt;/a&gt;1、准备好Keepalived安装包&lt;/h4&gt;&lt;h4 id=&#34;2、解压到-x2F-usr-x2F-local目录-1&#34;&gt;&lt;a href=&#34;#2、解压到-x2F-usr-x2F-local目录-1&#34; class=&#34;headerlink&#34; title=&#34;2、解压到&amp;#x2F;usr&amp;#x2F;local目录&#34;&gt;&lt;/a&gt;2、解压到&amp;#x2F;usr&amp;#x2F;local目录&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;tar -zxvf /usr/local/tmp/keepalived-1.4.5.tar.gz -C /usr/local/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、安装需要依赖的环境组件&#34;&gt;&lt;a href=&#34;#3、安装需要依赖的环境组件&#34; class=&#34;headerlink&#34; title=&#34;3、安装需要依赖的环境组件&#34;&gt;&lt;/a&gt;3、安装需要依赖的环境组件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;yum install gcc openssl-devel popt-devel -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、进入到解压目录，进行编译&#34;&gt;&lt;a href=&#34;#4、进入到解压目录，进行编译&#34; class=&#34;headerlink&#34; title=&#34;4、进入到解压目录，进行编译&#34;&gt;&lt;/a&gt;4、进入到解压目录，进行编译&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;cd /usr/local/keepalived-1.4.5
./configure --prefix=/usr/local/keepalived	
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、编译完成之后，进行安装&#34;&gt;&lt;a href=&#34;#5、编译完成之后，进行安装&#34; class=&#34;headerlink&#34; title=&#34;5、编译完成之后，进行安装&#34;&gt;&lt;/a&gt;5、编译完成之后，进行安装&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6、将keepalived的服务注册为系统服务&#34;&gt;&lt;a href=&#34;#6、将keepalived的服务注册为系统服务&#34; class=&#34;headerlink&#34; title=&#34;6、将keepalived的服务注册为系统服务&#34;&gt;&lt;/a&gt;6、将keepalived的服务注册为系统服务&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cp  -rf   /usr/local/keepalived-1.4.5/keepalived/etc/init.d/keepalived /etc/init.d/
mkdir /etc/keepalived
cp   -rf  /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/
cp   -rf  /usr/local/keepalived-1.4.5/keepalived/etc/sysconfig/keepalived /etc/sysconfig/
cp   -rf  /usr/local/keepalived/sbin/keepalived /usr/sbin/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7、修改配置文件&#34;&gt;&lt;a href=&#34;#7、修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;7、修改配置文件&#34;&gt;&lt;/a&gt;7、修改配置文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim  /etc/keepalived/keepalived.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CentOS-6   下的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;! Configuration File for keepalived
global_defs &amp;#123;
   notification_email &amp;#123;
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   &amp;#125;
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 127.0.0.1
   smtp_connect_timeout 30
   router_id LVS_DEVEL
   vrrp_skip_check_adv_addr
   vrrp_garp_interval 0
   vrrp_gna_interval 0
&amp;#125;

vrrp_instance VI_1 &amp;#123;
    # 配置为主
    state MASTER
    # 设置网卡
    interface eth0
     # 虚拟路由ID，全局唯一
    virtual_router_id 51
    # 优先级，权重值
    priority 100
    advert_int 1
    authentication &amp;#123;
        auth_type PASS
        auth_pass 1111
    &amp;#125;
    virtual_ipaddress &amp;#123;
         192.168.1.100/24  dev eth0 label eth0:3:
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CentOS-7   下的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;conf&#34;&gt;! Configuration File for keepalived
global_defs &amp;#123;
   notification_email &amp;#123;
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   &amp;#125;
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 127.0.0.1
   smtp_connect_timeout 30
   router_id LVS_DEVEL
   vrrp_skip_check_adv_addr
   vrrp_garp_interval 0
   vrrp_gna_interval 0
&amp;#125;

vrrp_instance VI_1 &amp;#123;
    # 配置为主
    state MASTER
    # 设置网卡
    interface ens33
     # 虚拟路由ID，全局唯一
    virtual_router_id 51
    # 优先级，权重值
    priority 100
    advert_int 1
    authentication &amp;#123;
        auth_type PASS
        auth_pass 1111
    &amp;#125;
    virtual_ipaddress &amp;#123;
        192.168.1.100/24 
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8、启动keepalived&#34;&gt;&lt;a href=&#34;#8、启动keepalived&#34; class=&#34;headerlink&#34; title=&#34;8、启动keepalived&#34;&gt;&lt;/a&gt;8、启动keepalived&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;service keepalived start
#或者
systemctl start keepalived.service
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;9、登录验证&#34;&gt;&lt;a href=&#34;#9、登录验证&#34; class=&#34;headerlink&#34; title=&#34;9、登录验证&#34;&gt;&lt;/a&gt;9、登录验证&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mysql -uroot -p123456 -h 192.168.1.100 -P 48066
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;mycat-web&#34;&gt;&lt;a href=&#34;#mycat-web&#34; class=&#34;headerlink&#34; title=&#34;mycat-web&#34;&gt;&lt;/a&gt;mycat-web&lt;/h2&gt;&lt;h3 id=&#34;——1-12&#34;&gt;&lt;a href=&#34;#——1-12&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h4 id=&#34;1、下载mycat-web安装包&#34;&gt;&lt;a href=&#34;#1、下载mycat-web安装包&#34; class=&#34;headerlink&#34; title=&#34;1、下载mycat-web安装包&#34;&gt;&lt;/a&gt;1、下载mycat-web安装包&lt;/h4&gt;&lt;p&gt;​	官方地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RsLm15Y2F0Lm9yZy5jbi8=&#34;&gt;http://dl.mycat.org.cn/&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;2、解压安装包到-x2F-usr-x2F-local目录&#34;&gt;&lt;a href=&#34;#2、解压安装包到-x2F-usr-x2F-local目录&#34; class=&#34;headerlink&#34; title=&#34;2、解压安装包到&amp;#x2F;usr&amp;#x2F;local目录&#34;&gt;&lt;/a&gt;2、解压安装包到&amp;#x2F;usr&amp;#x2F;local目录&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;tar -zxvf Mycat-web-1.0-SNAPSHOT-20170102153329-linux.tar.gz -C /usr/local/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、进入mycat-web的目录运行启动命令&#34;&gt;&lt;a href=&#34;#3、进入mycat-web的目录运行启动命令&#34; class=&#34;headerlink&#34; title=&#34;3、进入mycat-web的目录运行启动命令&#34;&gt;&lt;/a&gt;3、进入mycat-web的目录运行启动命令&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    ./start.sh &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、mycat-web的服务端口是8082，查看服务是否启动&#34;&gt;&lt;a href=&#34;#4、mycat-web的服务端口是8082，查看服务是否启动&#34; class=&#34;headerlink&#34; title=&#34;4、mycat-web的服务端口是8082，查看服务是否启动&#34;&gt;&lt;/a&gt;4、mycat-web的服务端口是8082，查看服务是否启动&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    netstat -nlpt | grep 8082
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、通过地址访问服务&#34;&gt;&lt;a href=&#34;#5、通过地址访问服务&#34; class=&#34;headerlink&#34; title=&#34;5、通过地址访问服务&#34;&gt;&lt;/a&gt;5、通过地址访问服务&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    192.168.1.164:8082/mycat/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6、mycat-web配置&#34;&gt;&lt;a href=&#34;#6、mycat-web配置&#34; class=&#34;headerlink&#34; title=&#34;6、mycat-web配置&#34;&gt;&lt;/a&gt;6、mycat-web配置&lt;/h4&gt;&lt;h5 id=&#34;6-1、配置zookeeper-可选&#34;&gt;&lt;a href=&#34;#6-1、配置zookeeper-可选&#34; class=&#34;headerlink&#34; title=&#34;6.1、配置zookeeper(可选)&#34;&gt;&lt;/a&gt;6.1、配置zookeeper(可选)&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/mycat-web/mycat-web/WEB-INF/classes

#修改mycat.properties文件，可以修改zookeeper的地址
vim mycat.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-2、添加mycat实例&#34;&gt;&lt;a href=&#34;#6-2、添加mycat实例&#34; class=&#34;headerlink&#34; title=&#34;6.2、添加mycat实例&#34;&gt;&lt;/a&gt;6.2、添加mycat实例&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;* 在页面的mycat配置

* mycat服务管理中添加mycat实例，需要填写相关的参数
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Nacos安装&#34;&gt;&lt;a href=&#34;#Nacos安装&#34; class=&#34;headerlink&#34; title=&#34;Nacos安装&#34;&gt;&lt;/a&gt;Nacos安装&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装之前必须 配置  &lt;a href=&#34;#jdk_install&#34;&gt;jdk&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装之前必须 配置  &lt;a href=&#34;#mysql_install&#34;&gt;mysql5.6.+&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div name=&#34;nacos_install_1&#34;&gt;

&lt;h3 id=&#34;——1-13&#34;&gt;&lt;a href=&#34;#——1-13&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;h4 id=&#34;1、准备安装包&#34;&gt;&lt;a href=&#34;#1、准备安装包&#34; class=&#34;headerlink&#34; title=&#34;1、准备安装包&#34;&gt;&lt;/a&gt;1、准备安装包&lt;/h4&gt;&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvcmVsZWFzZXM=&#34;&gt;https://github.com/alibaba/nacos/releases&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本篇我们选择version：2.0.3&lt;/p&gt;
&lt;h4 id=&#34;2、上传并解压&#34;&gt;&lt;a href=&#34;#2、上传并解压&#34; class=&#34;headerlink&#34; title=&#34;2、上传并解压&#34;&gt;&lt;/a&gt;2、上传并解压&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;tar -zxvf nacos-server-2.0.3 .tar.gz -C /usr/local/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、修改配置-1&#34;&gt;&lt;a href=&#34;#3、修改配置-1&#34; class=&#34;headerlink&#34; title=&#34;3、修改配置&#34;&gt;&lt;/a&gt;3、修改配置&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;1、使用nacos-mysql.sql&lt;/p&gt;
&lt;p&gt;​		为我们储存数据建立数据库、表&lt;/p&gt;
&lt;p&gt;2、&lt;code&gt;application.properties里面修改数据储存位置为mysql&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/nacos/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 1 建立数据库
create  database nacos_config;
use nacos_config;

CREATE TABLE `config_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(255) DEFAULT NULL,
  `content` longtext NOT NULL COMMENT &amp;#39;content&amp;#39;,
  `md5` varchar(32) DEFAULT NULL COMMENT &amp;#39;md5&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  `src_user` text COMMENT &amp;#39;source user&amp;#39;,
  `src_ip` varchar(50) DEFAULT NULL COMMENT &amp;#39;source ip&amp;#39;,
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;租户字段&amp;#39;,
  `c_desc` varchar(256) DEFAULT NULL,
  `c_use` varchar(64) DEFAULT NULL,
  `effect` varchar(64) DEFAULT NULL,
  `type` varchar(64) DEFAULT NULL,
  `c_schema` text,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;config_info&amp;#39;;


CREATE TABLE `config_info_aggr` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(255) NOT NULL COMMENT &amp;#39;group_id&amp;#39;,
  `datum_id` varchar(255) NOT NULL COMMENT &amp;#39;datum_id&amp;#39;,
  `content` longtext NOT NULL COMMENT &amp;#39;内容&amp;#39;,
  `gmt_modified` datetime NOT NULL COMMENT &amp;#39;修改时间&amp;#39;,
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;租户字段&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;增加租户字段&amp;#39;;



CREATE TABLE `config_info_beta` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(128) NOT NULL COMMENT &amp;#39;group_id&amp;#39;,
  `app_name` varchar(128) DEFAULT NULL COMMENT &amp;#39;app_name&amp;#39;,
  `content` longtext NOT NULL COMMENT &amp;#39;content&amp;#39;,
  `beta_ips` varchar(1024) DEFAULT NULL COMMENT &amp;#39;betaIps&amp;#39;,
  `md5` varchar(32) DEFAULT NULL COMMENT &amp;#39;md5&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  `src_user` text COMMENT &amp;#39;source user&amp;#39;,
  `src_ip` varchar(50) DEFAULT NULL COMMENT &amp;#39;source ip&amp;#39;,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;租户字段&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;config_info_beta&amp;#39;;


CREATE TABLE `config_info_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(128) NOT NULL COMMENT &amp;#39;group_id&amp;#39;,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;tenant_id&amp;#39;,
  `tag_id` varchar(128) NOT NULL COMMENT &amp;#39;tag_id&amp;#39;,
  `app_name` varchar(128) DEFAULT NULL COMMENT &amp;#39;app_name&amp;#39;,
  `content` longtext NOT NULL COMMENT &amp;#39;content&amp;#39;,
  `md5` varchar(32) DEFAULT NULL COMMENT &amp;#39;md5&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  `src_user` text COMMENT &amp;#39;source user&amp;#39;,
  `src_ip` varchar(50) DEFAULT NULL COMMENT &amp;#39;source ip&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;config_info_tag&amp;#39;;


CREATE TABLE `config_tags_relation` (
  `id` bigint(20) NOT NULL COMMENT &amp;#39;id&amp;#39;,
  `tag_name` varchar(128) NOT NULL COMMENT &amp;#39;tag_name&amp;#39;,
  `tag_type` varchar(64) DEFAULT NULL COMMENT &amp;#39;tag_type&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(128) NOT NULL COMMENT &amp;#39;group_id&amp;#39;,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;tenant_id&amp;#39;,
  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;config_tag_relation&amp;#39;;


CREATE TABLE `group_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键ID&amp;#39;,
  `group_id` varchar(128) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;Group ID，空字符表示整个集群&amp;#39;,
  `quota` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;配额，0表示使用默认值&amp;#39;,
  `usage` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;使用量&amp;#39;,
  `max_size` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;单个配置大小上限，单位为字节，0表示使用默认值&amp;#39;,
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;聚合子配置最大个数，，0表示使用默认值&amp;#39;,
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&amp;#39;,
  `max_history_count` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;最大变更历史数量&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;集群、各Group容量信息表&amp;#39;;


CREATE TABLE `his_config_info` (
  `id` bigint(64) unsigned NOT NULL,
  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) NOT NULL,
  `group_id` varchar(128) NOT NULL,
  `app_name` varchar(128) DEFAULT NULL COMMENT &amp;#39;app_name&amp;#39;,
  `content` longtext NOT NULL,
  `md5` varchar(32) DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text,
  `src_ip` varchar(50) DEFAULT NULL,
  `op_type` char(10) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;租户字段&amp;#39;,
  PRIMARY KEY (`nid`),
  KEY `idx_gmt_create` (`gmt_create`),
  KEY `idx_gmt_modified` (`gmt_modified`),
  KEY `idx_did` (`data_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;多租户改造&amp;#39;;


CREATE TABLE `tenant_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键ID&amp;#39;,
  `tenant_id` varchar(128) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;Tenant ID&amp;#39;,
  `quota` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;配额，0表示使用默认值&amp;#39;,
  `usage` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;使用量&amp;#39;,
  `max_size` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;单个配置大小上限，单位为字节，0表示使用默认值&amp;#39;,
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;聚合子配置最大个数&amp;#39;,
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&amp;#39;,
  `max_history_count` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;最大变更历史数量&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;租户容量信息表&amp;#39;;


CREATE TABLE `tenant_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `kp` varchar(128) NOT NULL COMMENT &amp;#39;kp&amp;#39;,
  `tenant_id` varchar(128) default &amp;#39;&amp;#39; COMMENT &amp;#39;tenant_id&amp;#39;,
  `tenant_name` varchar(128) default &amp;#39;&amp;#39; COMMENT &amp;#39;tenant_name&amp;#39;,
  `tenant_desc` varchar(256) DEFAULT NULL COMMENT &amp;#39;tenant_desc&amp;#39;,
  `create_source` varchar(32) DEFAULT NULL COMMENT &amp;#39;create_source&amp;#39;,
  `gmt_create` bigint(20) NOT NULL COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` bigint(20) NOT NULL COMMENT &amp;#39;修改时间&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;tenant_info&amp;#39;;

CREATE TABLE `users` (
    `username` varchar(50) NOT NULL PRIMARY KEY,
    `password` varchar(500) NOT NULL,
    `enabled` boolean NOT NULL
);

CREATE TABLE `roles` (
    `username` varchar(50) NOT NULL,
    `role` varchar(50) NOT NULL,
    UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE
);

CREATE TABLE `permissions` (
    `role` varchar(50) NOT NULL,
    `resource` varchar(255) NOT NULL,
    `action` varchar(8) NOT NULL,
    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
);

INSERT INTO users (username, password, enabled) VALUES (&amp;#39;nacos&amp;#39;, &amp;#39;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&amp;#39;, TRUE);

INSERT INTO roles (username, role) VALUES (&amp;#39;nacos&amp;#39;, &amp;#39;ROLE_ADMIN&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;
#2 先留取备份
cp application.properties application.properties.bk

vim application.properties

# 在application.properties最后添加以下内容
spring.datasource.platform=mysql

db.num=1
db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;serverTimezone=UTC
db.user=root
db.password=root
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、开启nacos&#34;&gt;&lt;a href=&#34;#4、开启nacos&#34; class=&#34;headerlink&#34; title=&#34;4、开启nacos&#34;&gt;&lt;/a&gt;4、开启nacos&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;/usr/local/nacos/bin/startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、查看&#34;&gt;&lt;a href=&#34;#5、查看&#34; class=&#34;headerlink&#34; title=&#34;5、查看&#34;&gt;&lt;/a&gt;5、查看&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;测试之前先关闭防火墙&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMS41Mjo4ODQ4L25hY29z&#34;&gt;http://192.168.1.52:8848/nacos&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;Nacos集群配置&#34;&gt;&lt;a href=&#34;#Nacos集群配置&#34; class=&#34;headerlink&#34; title=&#34;Nacos集群配置&#34;&gt;&lt;/a&gt;Nacos集群配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前提&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1、安装  &lt;a href=&#34;#jdk_install&#34;&gt;jdk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、安装之前必须 配置  &lt;a href=&#34;#mysql_install&#34;&gt;mysql5.6.+&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、配置 &lt;a href=&#34;#nginx_install_1&#34;&gt;nginx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、配置 &lt;a href=&#34;#nacos_install_1&#34;&gt;Nacos（单机版-1）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;懒加载&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我们启动nginx之后可能不会立即开始代理，打开日志等一会，没有结果的时候重配一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;——1-14&#34;&gt;&lt;a href=&#34;#——1-14&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;p&gt;​	* 此例中  &lt;code&gt;nginx:1.16&lt;/code&gt; 安装教程为： &lt;a href=&#34;#nacos_install_1&#34;&gt;Nacos（单机版-1）&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;1、修改集群配置文件&#34;&gt;&lt;a href=&#34;#1、修改集群配置文件&#34; class=&#34;headerlink&#34; title=&#34;1、修改集群配置文件&#34;&gt;&lt;/a&gt;1、修改集群配置文件&lt;/h4&gt;&lt;p&gt;​	这里开始正式配置集群，首先我们要更改   &lt;strong&gt;cluter.conf&lt;/strong&gt;   这个配置文件，当然我们也需要备份，但是这里它的&lt;strong&gt;原始名称&lt;/strong&gt;为：&lt;strong&gt;cluster.conf.example&lt;/strong&gt; ，我们需要把它保留同时复制出一个cluster.conf来进行更改&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/nacos/conf

# 先备份
cp cluster.conf.example cluster.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改cluster.conf&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;# 格式： ip地址:端口号
#
# Copyright 1999-2018 Alibaba Group Holding Ltd.
#
# Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#it is ip
#example
#192.168.16.101:8847
#192.168.16.102
#192.168.16.10

#ip:port
192.168.124.133:3333
192.168.124.133:4444
192.168.124.133:5555
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、编辑Nacos的启动脚本startup-sh&#34;&gt;&lt;a href=&#34;#2、编辑Nacos的启动脚本startup-sh&#34; class=&#34;headerlink&#34; title=&#34;2、编辑Nacos的启动脚本startup.sh&#34;&gt;&lt;/a&gt;2、编辑Nacos的启动脚本startup.sh&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/nacos/bin

# 先备份
cp startup.sh starup.sh.bk
vim  startup.sh 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#1  在while 的变量中添加 o 并且在case 中添加对应处理
        o)
            PORT=$OPTARG;;
        
#2  在nohup 和&amp;quot;$JAVA_OPT_EXT_FIX&amp;quot;之前配置这个
     $JAVA -Dserver.port=$&amp;#123;PORT&amp;#125;  
 
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/1648643016965.png&#34; class=&#34;&#34; width=&#34;1648643016965&#34;&gt;

&lt;img data-src=&#34;/2022/10/15/tools-All/1648643157451.png&#34; class=&#34;&#34; width=&#34;1648643157451&#34;&gt;





&lt;h4 id=&#34;3、配置nginx&#34;&gt;&lt;a href=&#34;#3、配置nginx&#34; class=&#34;headerlink&#34; title=&#34;3、配置nginx&#34;&gt;&lt;/a&gt;3、配置nginx&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    
    upstream  cluster&amp;#123;
    server 192.168.1.52:3333;
    server 192.168.1.52:4444;
    server 192.168.1.52:5555;
    &amp;#125;

    proxy_pass  http://cluter;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;图片中 &lt;code&gt;cluster&lt;/code&gt;写错了 少了一个&lt;code&gt;s&lt;/code&gt; ，其实问题也不大，但是要专业~~&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/1648643539716.png&#34; class=&#34;&#34; width=&#34;1648643539716&#34;&gt;



&lt;h4 id=&#34;4、启动Nginx&#34;&gt;&lt;a href=&#34;#4、启动Nginx&#34; class=&#34;headerlink&#34; title=&#34;4、启动Nginx&#34;&gt;&lt;/a&gt;4、启动Nginx&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、查看测试&#34;&gt;&lt;a href=&#34;#5、查看测试&#34; class=&#34;headerlink&#34; title=&#34;5、查看测试&#34;&gt;&lt;/a&gt;5、查看测试&lt;/h4&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMS41Mi9uYWNvcw==&#34;&gt;http://192.168.1.52:80/nacos&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;OpenSSL安装&#34;&gt;&lt;a href=&#34;#OpenSSL安装&#34; class=&#34;headerlink&#34; title=&#34;OpenSSL安装&#34;&gt;&lt;/a&gt;OpenSSL安装&lt;/h2&gt;&lt;h3 id=&#34;——1-15&#34;&gt;&lt;a href=&#34;#——1-15&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlY3Rvcl9kYXRhL2FydGljbGUvZGV0YWlscy8xMDc1NTc5NDE=&#34;&gt;https://blog.csdn.net/vector_data/article/details/107557941&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-安装依赖C语言依赖-1&#34;&gt;&lt;a href=&#34;#1-安装依赖C语言依赖-1&#34; class=&#34;headerlink&#34; title=&#34;1.安装依赖C语言依赖&#34;&gt;&lt;/a&gt;1.安装依赖C语言依赖&lt;/h4&gt;&lt;p&gt;​	redis使用C语言编写，所以需要安装C语言库&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install -y gcc zlib 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;h4 id=&#34;2-上传并解压-1&#34;&gt;&lt;a href=&#34;#2-上传并解压-1&#34; class=&#34;headerlink&#34; title=&#34;2.上传并解压&#34;&gt;&lt;/a&gt;2.上传并解压&lt;/h4&gt;&lt;p&gt;​	把 &lt;code&gt;openssl-1.1.1j.tar.gz&lt;/code&gt; 上传到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中，解压文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/tmp

 tar zxf openssl-1.1.1j.tar.gz 
 mv openssl-1.1.1j ../openssl
 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-编译并安装-2&#34;&gt;&lt;a href=&#34;#3-编译并安装-2&#34; class=&#34;headerlink&#34; title=&#34;3.编译并安装&#34;&gt;&lt;/a&gt;3.编译并安装&lt;/h4&gt;&lt;p&gt;​	进入解压文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;  cd /usr/local/openssl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 配置编译 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;./config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	编译安装	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make clean &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl version -a
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Kettle安装&#34;&gt;&lt;a href=&#34;#Kettle安装&#34; class=&#34;headerlink&#34; title=&#34;Kettle安装&#34;&gt;&lt;/a&gt;Kettle安装&lt;/h2&gt;&lt;p&gt; &lt;a href=&#34;#Windows_kettle&#34;&gt;他是java写的，所以跨平台，去看Windows里面的安装方法&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;未完成-！————Linux&#34;&gt;&lt;a href=&#34;#未完成-！————Linux&#34; class=&#34;headerlink&#34; title=&#34;未完成 ！————Linux&#34;&gt;&lt;/a&gt;未完成 ！————Linux&lt;/h1&gt;&lt;h1 id=&#34;PATH——-Windows&#34;&gt;&lt;a href=&#34;#PATH——-Windows&#34; class=&#34;headerlink&#34; title=&#34;PATH——-Windows&#34;&gt;&lt;/a&gt;PATH——-Windows&lt;/h1&gt;&lt;h2 id=&#34;MySQL安装&#34;&gt;&lt;a href=&#34;#MySQL安装&#34; class=&#34;headerlink&#34; title=&#34;MySQL安装&#34;&gt;&lt;/a&gt;MySQL安装&lt;/h2&gt;&lt;h3 id=&#34;【1】MySQL的版本：&#34;&gt;&lt;a href=&#34;#【1】MySQL的版本：&#34; class=&#34;headerlink&#34; title=&#34;【1】MySQL的版本：&#34;&gt;&lt;/a&gt;【1】MySQL的版本：&lt;/h3&gt;&lt;p&gt;近期主要历史版本有5.0&amp;#x2F;5.1&amp;#x2F;5.5&amp;#x2F;5.6&amp;#x2F;5.7，目前最新版本是MySQL8。6.0曾经是个内部试验版本，已取消了。&lt;/p&gt;
&lt;p&gt;MySQL8.0的版本历史&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2016-09-12第一个DM(development milestone)版本8.0.0发布&lt;/li&gt;
&lt;li&gt;2018-04-19第一个GA(General Availability)版本开始，8.0.11发布&lt;/li&gt;
&lt;li&gt;2018-07-27 8.0.12GA发布&lt;/li&gt;
&lt;li&gt;2018-10-22 8.0.13GA发布&lt;/li&gt;
&lt;li&gt;2019-01-21 8.0.14GA发布&lt;/li&gt;
&lt;li&gt;2019-02-01 8.0.15GA发布&lt;/li&gt;
&lt;li&gt;最新的版本是8.0.18,2019年10月14日正式发布&lt;/li&gt;
&lt;li&gt;….后续更新&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;【2】官方下载地址：&#34;&gt;&lt;a href=&#34;#【2】官方下载地址：&#34; class=&#34;headerlink&#34; title=&#34;【2】官方下载地址：&#34;&gt;&lt;/a&gt;【2】官方下载地址：&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy93aW5kb3dzL2luc3RhbGxlci84LjAuaHRtbA==&#34;&gt;https://dev.mysql.com/downloads/windows/installer/8.0.html&lt;/span&gt;&lt;/p&gt;







&lt;h3 id=&#34;【3】安装过程：&#34;&gt;&lt;a href=&#34;#【3】安装过程：&#34; class=&#34;headerlink&#34; title=&#34;【3】安装过程：&#34;&gt;&lt;/a&gt;【3】安装过程：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.双击MySQL安装文件mysql-installer-community-8.0.18.0.msi，出现安装类型选项。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Developer Default：开发者默认&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server only：只安装服务器端 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Client only：只安装客户端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full：安装全部选项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom：自定义安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;&lt;strong&gt;2.选择，然后继续：&lt;/strong&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;3.进入产品配置向导，配置多个安装细节，点击Next按钮即可。&lt;/strong&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;4.高可靠性High Availability，采用默认选项即可。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Standalone MySQL Server&amp;#x2F;Classic MySQL Replication:独立MySQL服务器&amp;#x2F;经典MySQL复制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;InnoDB Cluster:InnoDB集群&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;&lt;strong&gt;5.类型和网络 Type and Networking，采用默认选项即可。记住MySQL的监听端口默认是3306。&lt;/strong&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;6.身份验证方法Authentication Method，采用默认选项即可。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/tools-All%5C1646193956569.png&#34; alt=&#34;1646193956569&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7.账户和角色 Accounts and Roles。MySQL管理员账户名称是root，在此处指定root用户的密码。还可以在此处通过Add User按钮添加其他新账户，此处省略该操作。&lt;/strong&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;8.Windows服务：Windows Service。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Configure MySQL Server as a Windows Service:给MySQL服务器配置一个服务项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows Service Name:服务名称，采用默认名称MySQL80即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start the MySQL at System Startup：系统启动时开启MySQL服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;









&lt;p&gt;&lt;strong&gt;9.Apply Configuration：点击Execute按钮执行开始应用这些配置项。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Writing configuration file: 写配置文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updating Windows Firewall rules：更新Windows防火墙规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adjusting Windows services：调整Windows服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initializing database：初始化数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Starting the server： 启动服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applying security setting：应用安全设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updating the Start menu link：更新开始菜单快捷方式链接&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;





&lt;p&gt;&lt;strong&gt;PS：如果配置出错，查看右侧的log，查看对应错误信息。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;执行完成后，如下图所示。单击Finish完成安装，进入产品配置环节。&lt;/strong&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;10.产品配置Product Configuration到此结束：点击Next按钮。&lt;/strong&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;11.安装完成 Installation Complete。点击Finish按钮完成安装。&lt;/strong&gt;&lt;/p&gt;







&lt;h3 id=&#34;【4】MySQL配置、登录&#34;&gt;&lt;a href=&#34;#【4】MySQL配置、登录&#34; class=&#34;headerlink&#34; title=&#34;【4】MySQL配置、登录&#34;&gt;&lt;/a&gt;【4】MySQL配置、登录&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;【1】登录：&lt;/strong&gt;&lt;br&gt;访问MySQL服务器对应的命令：mysql.exe ,位置：C:\Program Files\MySQL\MySQL Server 8.0\bin&lt;/p&gt;







&lt;p&gt;（mysql.exe需要带参数执行，所以直接在图形界面下执行该命令会自动结束）&lt;/p&gt;
&lt;p&gt;打开控制命令台：win+r:&lt;/p&gt;





&lt;p&gt;执行mysql.exe命令的时候出现错误：&lt;/p&gt;





&lt;p&gt;需要配置环境变量path:&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;注意：控制命令台必须重启才会生效：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;登录的命令：mysql  -hlocalhost -uroot –p&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mysql：bin目录下的文件mysql.exe。mysql是MySQL的命令行工具，是一个客户端软件，可以对任何主机的mysql服务（即后台运行的mysqld）发起连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-h：host主机名。后面跟要访问的数据库服务器的地址；&lt;strong&gt;如果是登录本机，可以省略&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-u：user 用户名。后面跟登录数据的用户名，第一次安装后以root用户来登录，是MySQL的管理员用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-p:   password 密码。一般不直接输入，而是回车后以保密方式输入。 &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/tools-All%5C1646194262329.png&#34; alt=&#34;1646194262329&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;【2】访问数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;显示MySQL中的数据库列表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;show databases;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 默认有四个自带的数据库，每个数据库中可以有多个数据库表、视图等对象。&lt;/p&gt;
&lt;p&gt;切换当前数据库的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;use mysql;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL下可以有多个数据库，如果要访问哪个数据库，需要将其置为当前数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;该命令的作用就是将数据库mysql（默认提供的四个数据库之一的名字）置为当前数据库&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显示当前数据库的所有数据库表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;show tables;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MySQL 层次：不同项目对应不同的数据库组成 - 每个数据库中有很多表  - 每个表中有很多数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】退出数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;退出数据库可以使用quit或者exit命令完成，也可以用\q;  完成退出操作&lt;/p&gt;







&lt;h3 id=&#34;【5】卸载&#34;&gt;&lt;a href=&#34;#【5】卸载&#34; class=&#34;headerlink&#34; title=&#34;【5】卸载&#34;&gt;&lt;/a&gt;【5】卸载&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1)停止MySQL服务：在命令行模式下执行net stop mysql或者在Windows服务窗口下停止服务&lt;/strong&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;2)在控制面板中删除MySQL软件&lt;/strong&gt;&lt;/p&gt;





&lt;p&gt;&lt;strong&gt;3)删除软件文件夹：直接删除安装文件夹C:\Program Files\MySQL，其实此时该文件夹已经被删除或者剩下一个空文件夹。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4)删除数据文件夹：直接删除文件夹C:\ProgramData\MySQL。此步不要忘记，否则会影响MySQL的再次安装。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;（ProgramData文件夹可能是隐藏的，显示出来即可）&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;（MySQL文件下的内容才是真正的MySQL中数据）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5)删除path环境变量中关于MySQL安装路径的配置&lt;/strong&gt; &lt;/p&gt;
&lt;h2 id=&#34;Tomcat安装-1&#34;&gt;&lt;a href=&#34;#Tomcat安装-1&#34; class=&#34;headerlink&#34; title=&#34;Tomcat安装&#34;&gt;&lt;/a&gt;Tomcat安装&lt;/h2&gt;&lt;p&gt;下载&lt;/p&gt;
&lt;p&gt;下载地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RvbWNhdC5hcGFjaGUub3JnLw==&#34;&gt;http://tomcat.apache.org/&lt;/span&gt;&lt;/p&gt;





&lt;h3 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;tomcat由apache开源组织使用java开发的一款web容器,在使用之前需要安装JDK及配置JAVA_HOME.Tomcat是绿色软解，&lt;strong&gt;解压就可使用&lt;/strong&gt;。如果之前已经安装了其他tomcat并且还配置了CATALINA_HOME 不要忘记修改CATALINA_HOME指向我们现在使用的这个tomcat&lt;/p&gt;
&lt;h3 id=&#34;Tomcat启动&#34;&gt;&lt;a href=&#34;#Tomcat启动&#34; class=&#34;headerlink&#34; title=&#34;Tomcat启动&#34;&gt;&lt;/a&gt;Tomcat启动&lt;/h3&gt;&lt;p&gt;运行startup.bat文件。&lt;/p&gt;
&lt;p&gt;一定要配置JAVA_HOME   C:\Program Files\Java\jdk1.8.0_161&lt;br&gt;部分电脑需要配置CATALINA_HOME   D:&amp;#x2F;&lt;em&gt;&lt;strong&gt;&amp;#x2F;&lt;/strong&gt;&lt;/em&gt;&amp;#x2F;apache-tomcat-9.0.41&lt;br&gt;记住一个习惯:以后我们装任何一个软件路径都应该避免中文,空格和特殊符号,可以使用_&lt;/p&gt;
&lt;h3 id=&#34;Tomcat关闭&#34;&gt;&lt;a href=&#34;#Tomcat关闭&#34; class=&#34;headerlink&#34; title=&#34;Tomcat关闭&#34;&gt;&lt;/a&gt;Tomcat关闭&lt;/h3&gt;&lt;p&gt;  运行shutdown.bat文件或者直接关闭掉启动窗口。&lt;/p&gt;
&lt;h3 id=&#34;访问Tomcat&#34;&gt;&lt;a href=&#34;#访问Tomcat&#34; class=&#34;headerlink&#34; title=&#34;访问Tomcat&#34;&gt;&lt;/a&gt;访问Tomcat&lt;/h3&gt;&lt;p&gt;访问Tomcat的URL格式：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOnBvcnQ=&#34;&gt;http://ip:port&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;访问本机Tomcat的URL格式：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==&#34;&gt;http://localhost:8080&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;Git安装&#34;&gt;&lt;a href=&#34;#Git安装&#34; class=&#34;headerlink&#34; title=&#34;Git安装&#34;&gt;&lt;/a&gt;Git安装&lt;/h2&gt;&lt;p&gt;【1】Git官网：&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXQtc2NtLmNvbS8=&#34;&gt;https://git-scm.com/&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;【2】安装过程：&lt;/p&gt;
&lt;p&gt;一直下一步&lt;/p&gt;






































&lt;p&gt;点击Git Bash Here打开Git终端：&lt;/p&gt;














&lt;h2 id=&#34;OpenSSL安装教程&#34;&gt;&lt;a href=&#34;#OpenSSL安装教程&#34; class=&#34;headerlink&#34; title=&#34;OpenSSL安装教程&#34;&gt;&lt;/a&gt;OpenSSL安装教程&lt;/h2&gt;&lt;p&gt;openssl官网下载地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NscHJvd2ViLmNvbS9wcm9kdWN0cy9XaW4zMk9wZW5TU0wuaHRtbA==&#34;&gt;http://slproweb.com/products/Win32OpenSSL.html&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装环境&#34;&gt;&lt;a href=&#34;#安装环境&#34; class=&#34;headerlink&#34; title=&#34;安装环境:&#34;&gt;&lt;/a&gt;安装环境:&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;windows 10&lt;br&gt;Win64 OpenSSL v1.1.1i&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;一-下载openssl安装版&#34;&gt;&lt;a href=&#34;#一-下载openssl安装版&#34; class=&#34;headerlink&#34; title=&#34;一.下载openssl安装版&#34;&gt;&lt;/a&gt;一.下载openssl安装版&lt;/h3&gt;&lt;p&gt;​	我这里是win10 64位,所以选的中间那个&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://tools-all-blog.csdnimg.cn/20201222101342278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTUwOTY0,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;按照操作系统选择&#34;&gt; &lt;/p&gt;
&lt;h3 id=&#34;二-安装过程&#34;&gt;&lt;a href=&#34;#二-安装过程&#34; class=&#34;headerlink&#34; title=&#34;二.安装过程&#34;&gt;&lt;/a&gt;二.安装过程&lt;/h3&gt;&lt;p&gt;​	也没啥特殊的 ，一直next，只有两点注意：&lt;/p&gt;
&lt;p&gt;1、修改安装地址&lt;/p&gt;
&lt;p&gt;2、最后一步，不要勾选，会掏钱。&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://tools-all-blog.csdnimg.cn/20201222102601218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTUwOTY0,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt; &lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://tools-all-blog.csdnimg.cn/20201222102703276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTUwOTY0,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt; &lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://tools-all-blog.csdnimg.cn/20201222102703268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTUwOTY0,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt; &lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://tools-all-blog.csdnimg.cn/20201222102721958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ2NTUwOTY0,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt; &lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/1650347562395.png&#34; class=&#34;&#34; width=&#34;1650347562395&#34;&gt;

&lt;h3 id=&#34;三-配置环境变量&#34;&gt;&lt;a href=&#34;#三-配置环境变量&#34; class=&#34;headerlink&#34; title=&#34;三.配置环境变量&#34;&gt;&lt;/a&gt;三.配置环境变量&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/15/tools-All/1650351119292.png&#34; class=&#34;&#34; width=&#34;1650351119292&#34;&gt;

 &lt;img data-src=&#34;/2022/10/15/tools-All/1650351138506.png&#34; class=&#34;&#34; width=&#34;1650351138506&#34;&gt;



&lt;h3 id=&#34;四-测试&#34;&gt;&lt;a href=&#34;#四-测试&#34; class=&#34;headerlink&#34; title=&#34;四.测试&#34;&gt;&lt;/a&gt;四.测试&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;openssl -version
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/1650351011263.png&#34; class=&#34;&#34; width=&#34;1650351011263&#34;&gt;







&lt;h2 id=&#34;Kafka安装&#34;&gt;&lt;a href=&#34;#Kafka安装&#34; class=&#34;headerlink&#34; title=&#34;Kafka安装&#34;&gt;&lt;/a&gt;Kafka安装&lt;/h2&gt;&lt;p&gt;​	kafka 的安装包其实没有分window 还是 linux, 所以下载的安装包还是之前的安装包，直接解压出来即可；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic3.zhimg.com/80/v2-5ea0647a0e4acab3a7c6de90df11fe3e_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;启动Zookeeper 服务端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;./bin\windows\zookeeper-server-start.bat  ./config\zookeeper.properties 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这边会报一个奇葩的错误，命令行太长，直接将压缩包解压到根目录或者桌面进行操作&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic4.zhimg.com/80/v2-0f8d03dbe85bdf6f44e05a20d87bc60b_720w.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;启动成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-348c2d162934ac0844103a2cfcf2f16c_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;启动kafka服务端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt; ./bin\windows\kafka-server-start.bat  ./config\server.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-4f9527f5ed1fb0a09b90cd598b5c09c3_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;div name=&#34;Windows_kettle&#34;&gt;

&lt;h2 id=&#34;Kettle安装-1&#34;&gt;&lt;a href=&#34;#Kettle安装-1&#34; class=&#34;headerlink&#34; title=&#34;Kettle安装&#34;&gt;&lt;/a&gt;Kettle安装&lt;/h2&gt;&lt;p&gt;下载地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vc291cmNlZm9yZ2UubmV0L3Byb2plY3RzL3BlbnRhaG8vZmlsZXMvRGF0YSUyMEludGVncmF0aW9uLw==&#34;&gt;https://sourceforge.net/project&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;下载完成解压到任意路径&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-9b34b600471d87b624e1a355af5e1a77_720w.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开文件夹，找到Spoon.bat，创建桌面快捷方式，打开&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-304e8e08f977c9e1f6c3c1aef07d76ad_720w.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-5a6b50aa38075f30a80868319b57189a_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功打开，安装完成&lt;/p&gt;
&lt;p&gt;最后还要配置下oracle的驱动&lt;/p&gt;
&lt;p&gt;找到oracle的安装目录搜索关键字：ojdbc&lt;/p&gt;
&lt;p&gt;把ojdbc5.jar文件复制到ETL的lib目录下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-dd6bd35ae080600c32d3cf75ccc40389_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样就可以在kettle里连接到数据库了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/tools-All/v2-79043e230a5f8c040c429855c8766b9c_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;redis安装-1&#34;&gt;&lt;a href=&#34;#redis安装-1&#34; class=&#34;headerlink&#34; title=&#34;redis安装&#34;&gt;&lt;/a&gt;redis安装&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;下载地址：&lt;/strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Rwb3JhZG93c2tpL3JlZGlzL3JlbGVhc2Vz&#34;&gt;https://github.com/tporadowski/redis/releases&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/3B8D633F-14CE-42E3-B174-FCCD48B11FF3.jpg&#34; class=&#34;&#34; title=&#34;img&#34;&gt;



&lt;p&gt;打开文件夹，内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.runoob.com/wp-content/uploads/2014/11/C2CEBAA0-30B9-4340-8D23-78F6FEB8CBE2.png%22&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开一个 &lt;strong&gt;cmd&lt;/strong&gt; 窗口 使用 cd 命令切换目录到 &lt;strong&gt;C:\redis&lt;/strong&gt; 运行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;redis-server.exe redis.windows.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了，后面的那个 redis.windows.conf 可以省略，如果省略，会启用默认的。输入之后，会显示如下界面：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/tools-All/redis-install1.png&#34; class=&#34;&#34; title=&#34;Redis 安装&#34;&gt;



&lt;p&gt;这时候另启一个 cmd 窗口，原来的不要关闭，不然就无法访问服务端了。&lt;/p&gt;
&lt;p&gt;切换到 redis 目录下运行:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-cli.exe -h 127.0.0.1 -p 6379
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;未完成-！————-Windows&#34;&gt;&lt;a href=&#34;#未完成-！————-Windows&#34; class=&#34;headerlink&#34; title=&#34;未完成 ！———— Windows&#34;&gt;&lt;/a&gt;未完成 ！———— Windows&lt;/h1&gt;&lt;h1 id=&#34;———————————————-1&#34;&gt;&lt;a href=&#34;#———————————————-1&#34; class=&#34;headerlink&#34; title=&#34;———————————————&#34;&gt;&lt;/a&gt;———————————————&lt;/h1&gt;&lt;h1 id=&#34;问题-1&#34;&gt;&lt;a href=&#34;#问题-1&#34; class=&#34;headerlink&#34; title=&#34;问题&#34;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;h2 id=&#34;0、布置在服务器中的东西，通过URL-无法访问&#34;&gt;&lt;a href=&#34;#0、布置在服务器中的东西，通过URL-无法访问&#34; class=&#34;headerlink&#34; title=&#34;0、布置在服务器中的东西，通过URL 无法访问&#34;&gt;&lt;/a&gt;0、布置在服务器中的东西，通过URL 无法访问&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;​	1、防火墙问题&lt;/p&gt;
&lt;p&gt;​	2、端口 释放问题 ，&lt;strong&gt;·我们要手动去配置我们服务器的安全组·&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div name=&#34;perblem-1&#34;&gt;

&lt;h2 id=&#34;1、解决：CentOS-7-每次进入要重新加载环境变量&#34;&gt;&lt;a href=&#34;#1、解决：CentOS-7-每次进入要重新加载环境变量&#34; class=&#34;headerlink&#34; title=&#34;1、解决：CentOS 7 每次进入要重新加载环境变量&#34;&gt;&lt;/a&gt;1、解决：CentOS 7 每次进入要重新加载环境变量&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;1.进入系统配置文件
vim ~/.bashrc

2.末尾添加如下代码
source /etc/profile

保存即可
:wq
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2、端口占用、查看端口&#34;&gt;&lt;a href=&#34;#2、端口占用、查看端口&#34; class=&#34;headerlink&#34; title=&#34;2、端口占用、查看端口&#34;&gt;&lt;/a&gt;2、端口占用、查看端口&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;查看是否运行端口   
netstat -tln 8080

查看端口属于哪个程序？端口被哪个进程占用(得到PID)	
lsof -i :8080  

关闭PID对应的程序            
kill -9 (PID)
&lt;/code&gt;&lt;/pre&gt;
&lt;div name=&#34;preblem_2&#34;&gt;

&lt;h2 id=&#34;3、防火墙关闭、开启&#34;&gt;&lt;a href=&#34;#3、防火墙关闭、开启&#34; class=&#34;headerlink&#34; title=&#34;3、防火墙关闭、开启&#34;&gt;&lt;/a&gt;3、防火墙关闭、开启&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;关闭防火墙 ，重启失效(Linux系统一重启Linux中的防火墙又会被开起)
service firewalld stop

禁用防火墙，永久有效
systemctl disable firewalld
systemctl disable firewalld.service

启动防火墙 (对禁用的防火墙进行启动)
systemctl enable firewalld

防火墙相关命令：

1）查看防火墙状态：
service  iptables status或者systemctl status firewalld或者firewall-cmd --state

2）暂时关闭防火墙：
systemctl stop firewalld或者service  iptables stop或者systemctl stop firewalld.service

3）永久关闭防火墙：
systemctl disable firewalld或者chkconfig iptables off或者systemctl disable firewalld.service

4）重启防火墙：
systemctl enable firewalld或者service iptables restart  或者systemctl restart firewalld.service

5)永久关闭后重启：
chkconfig iptables on
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4、failure-repodata-x2F-repomd-xml-from-epel-Errno-256-No-more-mirrors-to-try&#34;&gt;&lt;a href=&#34;#4、failure-repodata-x2F-repomd-xml-from-epel-Errno-256-No-more-mirrors-to-try&#34; class=&#34;headerlink&#34; title=&#34;4、failure: repodata&amp;#x2F;repomd.xml from epel: [Errno 256] No more mirrors to try.&#34;&gt;&lt;/a&gt;4、failure: repodata&amp;#x2F;repomd.xml from epel: [Errno 256] No more mirrors to try.&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9lcGVsLzUveDg2XzY0L3JlcG9kYXRhL3JlcG9tZC54bWw=&#34;&gt;http://mirrors.aliyun.com/epel/5/x86_64/repodata/repomd.xml&lt;/span&gt;: [Errno 14] HTTP Error 404 - Not Found的解决办法：&lt;/p&gt;
&lt;p&gt;​	一直说那个XML文件不存在，以为是yum源是去读取xml当中的数据然后去下载。确实自己去访问也是404.还以	为是这阵子开会yum源都搞不能用了怎么。之前我用阿里用的挺好的。&lt;/p&gt;
&lt;p&gt;​	最简单的办法就是删除 &amp;#x2F;etc&amp;#x2F;yum.repos.d&amp;#x2F; 下所有的文件，重新来。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /etc/yum.repos.d/
mkdir repo_bak
mv *.repo repo_bak/
#下载缓存文件 版本自己控制
wget http://mirrors.aliyun.com/repo/Centos-7.repo
yum clean all
yum makecache
&lt;/code&gt;&lt;/pre&gt;
&lt;div name=&#34;problem-5&#34;&gt;&lt;/div&gt;

&lt;h2 id=&#34;5、Xshell连接centos7能连上但是连接过程很慢&#34;&gt;&lt;a href=&#34;#5、Xshell连接centos7能连上但是连接过程很慢&#34; class=&#34;headerlink&#34; title=&#34;5、Xshell连接centos7能连上但是连接过程很慢&#34;&gt;&lt;/a&gt;5、Xshell连接centos7能连上但是连接过程很慢&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;原因：因为在登录时，需要反向解析dns。
解决方法：修改linux配置文件，

vim /etc/ssh/sshd_config

将 # UseDNS yes 此处注释去掉
改为：UseDNS no
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;#Linux_minInstall_4&#34;&gt;跳转到Linux安装_4&lt;/a&gt;&lt;/p&gt;
&lt;div name=&#34;problem-6&#34;&gt;&lt;/div&gt;
## 6、Xshell 连接Centos7，root拒绝登录，而其他用户可登陆？———— root用户直接登录

&lt;p&gt;&lt;strong&gt;PermitRootLogin&lt;/strong&gt;  的值改成  yes  ，并保存 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;img data-src=&#34;https://tools-all-blog.csdnimg.cn/20210712112157753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdfeWFuZ3lhbmc=,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt; &lt;/p&gt;
&lt;p&gt; 重启sshd 服务 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;service sshd restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 如果上面命令提示文件不存在，可以用下面的命令 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;systemctl restart sshd.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 如果还不行，直接 重启服务器。。。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;意外的是，发现root依然不能登录。最后研究sshd_config的每一行意义，发现坑在这里： &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：有则看，无则跳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;https://tools-all-blog.csdnimg.cn/2021071211252989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1lhbmdfeWFuZ3lhbmc=,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt; &lt;/p&gt;
&lt;p&gt;文件的最后一行，有一行 ：AllowUsers &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOiYjeDc4OyYjeDc4OyYjeDc4OyYjeDQwOyYjNDk7JiN4Mzk7JiM1MDsmI3gyZTsmIzQ5OyYjNTQ7JiM1NjsmIzQ2OyYjNDk7&#34;&gt;&amp;#x78;&amp;#x78;&amp;#x78;&amp;#x40;&amp;#49;&amp;#x39;&amp;#50;&amp;#x2e;&amp;#49;&amp;#54;&amp;#56;&amp;#46;&amp;#49;&lt;/span&gt;.&lt;em&gt;。这是写死的了，即：能远程登录的 用户名、IP 信息。难怪，其他用户一直无法登录。&lt;br&gt;所以，在后面追加：&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOiYjMTE0OyYjeDZmOyYjMTExOyYjeDc0OyYjNjQ7JiN4MzE7JiN4Mzk7JiN4MzI7JiM0NjsmI3gzMTsmI3gzNjsmI3gzODsmI3gyZTsmIzQ5Ow==&#34;&gt;&amp;#114;&amp;#x6f;&amp;#111;&amp;#x74;&amp;#64;&amp;#x31;&amp;#x39;&amp;#x32;&amp;#46;&amp;#x31;&amp;#x36;&amp;#x38;&amp;#x2e;&amp;#49;&lt;/span&gt;.&lt;/em&gt;&lt;br&gt;修改完的代码为：&lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOiYjMTIwOyYjMTIwOyYjeDc4OyYjNjQ7JiN4MzE7JiN4Mzk7JiN4MzI7JiM0NjsmI3gzMTsmIzU0OyYjeDM4OyYjeDJlOyYjNDk7&#34;&gt;&amp;#120;&amp;#120;&amp;#x78;&amp;#64;&amp;#x31;&amp;#x39;&amp;#x32;&amp;#46;&amp;#x31;&amp;#54;&amp;#x38;&amp;#x2e;&amp;#49;&lt;/span&gt;.* &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOiYjeDcyOyYjMTExOyYjeDZmOyYjMTE2OyYjeDQwOyYjNDk7JiN4Mzk7JiN4MzI7JiM0NjsmIzQ5OyYjNTQ7JiN4Mzg7JiM0NjsmIzQ5Ow==&#34;&gt;&amp;#x72;&amp;#111;&amp;#x6f;&amp;#116;&amp;#x40;&amp;#49;&amp;#x39;&amp;#x32;&amp;#46;&amp;#49;&amp;#54;&amp;#x38;&amp;#46;&amp;#49;&lt;/span&gt;.*&lt;br&gt;然后再执行重启服务操作，然后发现root可以登录了！搞定！！！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;code&gt;xxx@192.168.1.* root@192.168.1.*&lt;/code&gt; 之间要有空格。&lt;/p&gt;
&lt;p&gt;或者直接将此行 代码直接注释掉，也可以。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;#Linux_minInstall_6&#34;&gt;跳转到Linux安装_最小化安装_6&lt;/a&gt;&lt;/p&gt;
&lt;div name=&#34;problem-7&#34;&gt;&lt;/div&gt;
## 7、yum直接安装docker-ce报错找不到安装包

&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#更换成阿里云镜像仓库

yum-config-manager --add-repo   http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;#docker_install_3&#34;&gt;回到Docker安装步骤3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;8、docker-查看日志&#34;&gt;&lt;a href=&#34;#8、docker-查看日志&#34; class=&#34;headerlink&#34; title=&#34;8、docker 查看日志&#34;&gt;&lt;/a&gt;8、docker 查看日志&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt; docker logs [OPTIONS] CONTAINER
  Options:
        --details        显示更多的信息
    -f, --follow         跟踪实时日志
        --since string   显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）
        --tail string    从日志末尾显示多少行日志， 默认是all
        
    -t, --timestamps     显示时间戳
        --until string   显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）		
        
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	查看指定时间后的日志，只显示最后100行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ docker logs -f -t --since=&amp;quot;2018-02-08&amp;quot; --tail=100 CONTAINER_ID
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	查看最近30分钟的日志:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ docker logs --since 30m CONTAINER_ID
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	查看某时间之后的日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ docker logs -t --since=&amp;quot;2018-02-08T13:23:37&amp;quot; CONTAINER_ID
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	查看某时间段日志：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;$ docker logs -t --since=&amp;quot;2018-02-08T13:23:37&amp;quot; --until &amp;quot;2018-02-09T12:23:37&amp;quot; CONTAINER_ID
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9-、如何解决error-failed-to-push-some-refs-to-‘https-gitee-com&#34;&gt;&lt;a href=&#34;#9-、如何解决error-failed-to-push-some-refs-to-‘https-gitee-com&#34; class=&#34;headerlink&#34; title=&#34;9 、如何解决error: failed to push some refs to ‘https://gitee.com/&#34;&gt;&lt;/a&gt;9 、如何解决error: failed to push some refs to ‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20v&#34;&gt;https://gitee.com/&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;​	出现错误的主要原因是gitee(github)中的README.md文件不在本地代码目录中&lt;/p&gt;
&lt;p&gt;​	此时我们要执行git pull –rebase origin master命令&lt;strong&gt;README.md&lt;/strong&gt;拉到本地&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;git pull --rebase origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后执行git push origin master&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就ok啦！&lt;/p&gt;
&lt;h2 id=&#34;10-、idea-官网下载插件过慢&#34;&gt;&lt;a href=&#34;#10-、idea-官网下载插件过慢&#34; class=&#34;headerlink&#34; title=&#34;10 、idea 官网下载插件过慢&#34;&gt;&lt;/a&gt;10 、idea 官网下载插件过慢&lt;/h2&gt;&lt;p&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfQ1NETl9Vc2VyL2FydGljbGUvZGV0YWlscy8xMTM5NDQ0OTY=&#34;&gt;(29条消息) Intellij IDEA下载插件太慢，怎么办？_Real_csdn_User的博客-CSDN博客_idea下载插件很慢&lt;/span&gt; &lt;/p&gt;
&lt;h3 id=&#34;（1）查询自己的网络服务提供商&#34;&gt;&lt;a href=&#34;#（1）查询自己的网络服务提供商&#34; class=&#34;headerlink&#34; title=&#34;（1）查询自己的网络服务提供商&#34;&gt;&lt;/a&gt;（1）查询自己的网络服务提供商&lt;/h3&gt;&lt;p&gt;访问&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaXAxMzguY29tLw==&#34;&gt;iP138查询网&lt;/span&gt;，查看自己的网络服务提供商并记下它。比如我访问该网站截图如下：&lt;br&gt;&lt;img data-src=&#34;https://tools-all-blog.csdnimg.cn/20210222191130433.png#pic_center&#34; alt=&#34;我的网络服务提供商是移动（为保护隐私，部分内容打码）&#34;&gt;&lt;br&gt;如果你已经知道自己的网络服务提供商就不需要这一步。&lt;/p&gt;
&lt;h3 id=&#34;（2）查找访问插件网站最快的IP&#34;&gt;&lt;a href=&#34;#（2）查找访问插件网站最快的IP&#34; class=&#34;headerlink&#34; title=&#34;（2）查找访问插件网站最快的IP&#34;&gt;&lt;/a&gt;（2）查找访问插件网站最快的IP&lt;/h3&gt;&lt;p&gt;Intellij IDEA的插件主页地址是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wbHVnaW5zLmpldGJyYWlucy5jb20v&#34;&gt;https://plugins.jetbrains.com&lt;/span&gt;。打开&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3Rvb2wuY2hpbmF6LmNvbS9zcGVlZHRlc3Qv&#34;&gt;网站测速 - 站长工具&lt;/span&gt;，将插件的主页地址填入输入框内，点击查看分析按钮。一段时间后，就可以看到全中国各个地区访问插件主页的速度。点击表头“总耗时”右侧的小按钮，令全国各地访问插件主页的总耗时按增长顺序排列，这样耗时最短、速度最快的行就在最上方。从表格中找到与自己网络服务提供商相同的行，记下对应的IP地址。下面是我测量的访问插件主页的速度的结果：&lt;br&gt;&lt;img data-src=&#34;https://tools-all-blog.csdnimg.cn/20210222193138206.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlYWxfQ1NETl9Vc2Vy,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;我的网络服务提供商是移动，我记下的IP是54.192.23.52&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;（3）在hosts文件中为plugins-jetbrains-com添加相关条目&#34;&gt;&lt;a href=&#34;#（3）在hosts文件中为plugins-jetbrains-com添加相关条目&#34; class=&#34;headerlink&#34; title=&#34;（3）在hosts文件中为plugins.jetbrains.com添加相关条目&#34;&gt;&lt;/a&gt;（3）在hosts文件中为plugins.jetbrains.com添加相关条目&lt;/h3&gt;&lt;p&gt;用文本编辑器打开C:\Windows\System32\drivers\etc\hosts文件。在文件最下方添加一行文字：&lt;br&gt;[你记下的IP地址] plugins.jetbrains.com&lt;br&gt;[你记下的IP地址]用你记下的IP地址代替，记住不要带上方括号，而且IP地址和plugins.jetbrains.com之间有空格。例如我在文件中添加的文字是：&lt;br&gt;13.225.160.7 plugins.jetbrains.com&lt;br&gt;注意：编辑hosts文件需要管理员权限。&lt;/p&gt;
&lt;h3 id=&#34;三、题外话&#34;&gt;&lt;a href=&#34;#三、题外话&#34; class=&#34;headerlink&#34; title=&#34;三、题外话&#34;&gt;&lt;/a&gt;三、题外话&lt;/h3&gt;&lt;p&gt;这种方法并不只限于加快下载IDEA插件的速度，只要你知道网络资源的网址，而且该网络资源使用了下载加速服务器，都可以用这种方法。&lt;/p&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&#34;未完成——问题&#34;&gt;&lt;a href=&#34;#未完成——问题&#34; class=&#34;headerlink&#34; title=&#34;未完成——问题&#34;&gt;&lt;/a&gt;未完成——问题&lt;/h1&gt;&lt;h1 id=&#34;未完成&#34;&gt;&lt;a href=&#34;#未完成&#34; class=&#34;headerlink&#34; title=&#34;未完成&#34;&gt;&lt;/a&gt;未完成&lt;/h1&gt;</content>
        <updated>2022-10-15T06:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Zookeeper-tool/</id>
        <title>Zookeeper</title>
        <link rel="alternate" href="http://example.com/2022/10/15/Zookeeper-tool/"/>
        <content type="html">&lt;h3 id=&#34;Zookeeper-linux安装&#34;&gt;&lt;a href=&#34;#Zookeeper-linux安装&#34; class=&#34;headerlink&#34; title=&#34;Zookeeper-linux安装&#34;&gt;&lt;/a&gt;Zookeeper-linux安装&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;h5 id=&#34;1-Zookeeper简介&#34;&gt;&lt;a href=&#34;#1-Zookeeper简介&#34; class=&#34;headerlink&#34; title=&#34;1     Zookeeper简介&#34;&gt;&lt;/a&gt;1     Zookeeper简介&lt;/h5&gt;&lt;p&gt;​	zookeeper分布式管理软件。常用它做注册中心（依赖zookeeper的发布&amp;#x2F;订阅功能）、配置文件中心、分布式锁配置、集群管理等。&lt;/p&gt;
&lt;p&gt;​	zookeeper一共就有两个版本。主要使用的是java语言写的。&lt;/p&gt;
&lt;h5 id=&#34;2-安装&#34;&gt;&lt;a href=&#34;#2-安装&#34; class=&#34;headerlink&#34; title=&#34;2     安装&#34;&gt;&lt;/a&gt;2     安装&lt;/h5&gt;&lt;h6 id=&#34;2-1-上传压缩文件&#34;&gt;&lt;a href=&#34;#2-1-上传压缩文件&#34; class=&#34;headerlink&#34; title=&#34;2.1   上传压缩文件&#34;&gt;&lt;/a&gt;2.1   上传压缩文件&lt;/h6&gt;&lt;p&gt;​	上传到 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中&lt;/p&gt;
&lt;h5 id=&#34;2-2-解压&#34;&gt;&lt;a href=&#34;#2-2-解压&#34; class=&#34;headerlink&#34; title=&#34;2.2   解压&#34;&gt;&lt;/a&gt;2.2   解压&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; tar zxf apache-zookeeper-3.5.5-bin.tar.gz
 cp -r apache-zookeeper-3.5.5-bin ../zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-3-新建data目录&#34;&gt;&lt;a href=&#34;#2-3-新建data目录&#34; class=&#34;headerlink&#34; title=&#34;2.3   新建data目录&#34;&gt;&lt;/a&gt;2.3   新建data目录&lt;/h5&gt;&lt;p&gt;进入到zookeeper中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/zookeeper
 mkdir data
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-4-修改配置文件&#34;&gt;&lt;a href=&#34;#2-4-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.4   修改配置文件&#34;&gt;&lt;/a&gt;2.4   修改配置文件&lt;/h5&gt;&lt;p&gt;进入conf中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd conf
 cp zoo_sample.cfg zoo.cfg
 vim zoo.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改dataDir为data文件夹路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dataDir=/usr/local/zookeeper/data
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-5-启动zookeeper&#34;&gt;&lt;a href=&#34;#2-5-启动zookeeper&#34; class=&#34;headerlink&#34; title=&#34;2.5   启动zookeeper&#34;&gt;&lt;/a&gt;2.5   启动zookeeper&lt;/h5&gt;&lt;p&gt;进入bin文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/zookeeper/bin
 ./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过status查看启动状态。稍微有个等待时间&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;  ./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;——2&#34;&gt;&lt;a href=&#34;#——2&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;资料：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2luZ2tvby9wLzg3MzI0NDguaHRtbA==&#34;&gt;https://www.cnblogs.com/kingkoo/p/8732448.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2ODA4NzQ2NjY/ZnJvbT1zZWFyY2gmYW1wO3NlaWQ9MTYyOTE0NTAyNTIxMTk5OTEwNCZhbXA7c3BtX2lkX2Zyb209MzMzLjMzNy4wLjA=&#34;&gt;https://www.bilibili.com/video/av80874666?from=search&amp;amp;seid=1629145025211999104&amp;amp;spm_id_from=333.337.0.0&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;1-Zookeeper简介-1&#34;&gt;&lt;a href=&#34;#1-Zookeeper简介-1&#34; class=&#34;headerlink&#34; title=&#34;1     Zookeeper简介&#34;&gt;&lt;/a&gt;1     Zookeeper简介&lt;/h5&gt;&lt;p&gt;​	zookeeper分布式管理软件。常用它做注册中心（依赖zookeeper的发布&amp;#x2F;订阅功能）、配置文件中心、分布式锁配置、集群管理等。&lt;/p&gt;
&lt;p&gt;​	zookeeper一共就有两个版本。主要使用的是java语言写的。&lt;/p&gt;
&lt;h5 id=&#34;2-安装-1&#34;&gt;&lt;a href=&#34;#2-安装-1&#34; class=&#34;headerlink&#34; title=&#34;2     安装&#34;&gt;&lt;/a&gt;2     安装&lt;/h5&gt;&lt;h6 id=&#34;2-1-拉取镜像&#34;&gt;&lt;a href=&#34;#2-1-拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;2.1   拉取镜像&#34;&gt;&lt;/a&gt;2.1   拉取镜像&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自定义zookeeper目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir /root/zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#mkdir &amp;#x2F;root&amp;#x2F;zookeeper&amp;#x2F;data #原因参照上面 -在docker中data其实也不用在宿主机行自己生成(目前如此)&lt;/p&gt;
&lt;p&gt;仓库官网查看版本或者用命令直接查&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker search zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拉取特定版本（3.5）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker pull zookeeper:3.5

```
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;2-2-创建并启动容器&#34;&gt;&lt;a href=&#34;#2-2-创建并启动容器&#34; class=&#34;headerlink&#34; title=&#34;2.2 创建并启动容器&#34;&gt;&lt;/a&gt;2.2 创建并启动容器&lt;/h6&gt;&lt;p&gt;​	&lt;strong&gt;注：就目前而且 好像直接在docker中使用 zookeeper 不需要过多的配置，直接用命令创建吧，下面的解释先不看，具体原因后面补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name zookeeper -v /root/zookeeper/data:/data -p 2181:2181 --restart always zookeeper:3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--restart always&lt;/code&gt;：始终重启&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWdlb3ZiL3AvMTUzMjg3OTYuaHRtbA==&#34;&gt;https://www.cnblogs.com/ageovb/p/15328796.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、这里为啥只挂载了 data 目录–》因为当我们 没有直接的安装压缩包时，我们的就没有配置文件，所以我们直接生成，容器中就回自动生成conf文件，其中就有我们需要的 一系列配置文件，我们第一次创建的时候就可以如此，我们在进&lt;strong&gt;行配置文件的修改完成&lt;/strong&gt;后，要将所有配置文件放到我们  bash 目录中的 conf 文件中去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、第一次进入容器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在bash目录下进入bin 目录然后输入开启客户端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、第二次进入容器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zookeeper /bin/bash  -p    端口号
或
docker exec -it zookeeper zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;只看到这就可*，容器创建成功就可以直接用了，还没有出现问题。有待补充&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;2-3-修改配置文件&#34;&gt;&lt;a href=&#34;#2-3-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.3   修改配置文件&#34;&gt;&lt;/a&gt;2.3   修改配置文件&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;配置文件来源&lt;ul&gt;
&lt;li&gt;1、可以去我们的资料中直接解压出&lt;strong&gt;conf&lt;/strong&gt;目录粘贴到我们的 zookeeper 目录中去&lt;/li&gt;
&lt;li&gt;2、可以直接进行第 3 步，完事之后直接会在容器中生成。找到conf文件，修改其中的 zoo.cfg文件，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入容器后，找到conf中的 **zoo.cfg文件，接下来就是修改 &lt;strong&gt;dataDir&lt;/strong&gt; 路径为容器中的 data文件目录。&lt;/p&gt;
&lt;p&gt;前提是要下载 vim ，因为容器中没有，命令是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get update

apt-get install -y vim

cd conf
### 没有zoo.cfg 就先拷贝 zoo_sample.cfg 两个其实是一个文件，内容相同
###cp zoo_sample.cfg zoo.cfg
vim zoo.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改dataDir为data文件夹路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dataDir=/usr/local/zookeeper/data
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Zookeeper集群搭建&#34;&gt;&lt;a href=&#34;#Zookeeper集群搭建&#34; class=&#34;headerlink&#34; title=&#34;Zookeeper集群搭建&#34;&gt;&lt;/a&gt;Zookeeper集群搭建&lt;/h3&gt;&lt;h4 id=&#34;——1-1&#34;&gt;&lt;a href=&#34;#——1-1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;p&gt;1.上传压缩包到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp 下 并解压。&lt;/p&gt;
&lt;p&gt;2.在 &amp;#x2F;usr&amp;#x2F;local下新建文件夹 zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### mkdir /usr/local/zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.把解压的所有文件复制到zookeeper下， 并命名为zk1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### cp -r /usr/local/temp/zookeeper-3.4.8 /usr/local/zookeeper/zk1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.在zk1下新建文件夹 data&lt;/p&gt;
&lt;p&gt;5.在data下新建文件 myid, 里面写上 1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### vim myid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6.进入到zk1&amp;#x2F;conf 下 把 zoo_sample.cfg 复制一份叫做 zoo.cfg&lt;/p&gt;
&lt;p&gt;7.编辑 zoo.cfg 内容，设置 dataDIR为 data文件夹， 并在文件最下面添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server.1=192.168.93.10:2688:3888
server.2=192.168.93.10:2689:3889
server.3=192.168.93.10:2690:3890
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 7.1 server.1中的1是myid的内容&lt;/p&gt;
&lt;p&gt; 7.2 2688 2689 2690 是 zookeeper内部端口&lt;/p&gt;
&lt;p&gt; 7.3 3888 3889 3890 是 leader端口&lt;/p&gt;
&lt;p&gt;8.把zk1复制两份，分部叫做 zk2  zk3  并修改 myid 的值为 2，3 修改zoo.cfg中 dataDIR和clientPort&lt;/p&gt;
&lt;p&gt;9.启动三个zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### ./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;10.查看状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### ./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;——2-1&#34;&gt;&lt;a href=&#34;#——2-1&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1、准备&lt;/strong&gt;docker-compose.yml&lt;strong&gt;文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;version: &amp;#39;2&amp;#39;
services:
  zoo1:
    image: zookeeper:3.5
    restart: always
    container_name: zoo1
    ports:
      - &amp;quot;2182:2181&amp;quot;
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2688:3888 server.2=zoo2:2689:3888 server.3=zoo3:2690:3888

  zoo2:
    image: zookeeper:3.5
    restart: always
    container_name: zoo2
    ports:
      - &amp;quot;2183:2181&amp;quot;
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2688:3888 server.2=0.0.0.0:2689:3888 server.3=zoo3:2690:3888

  zoo3:
    image: zookeeper:3.5
    restart: always
    container_name: zoo3
    ports:
      - &amp;quot;2184:2181&amp;quot;
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2688:3888 server.2=zoo2:2689:3888 server.3=0.0.0.0:2690:3888

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2、创建镜像&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要在创建的docker-compose.yml文件中使用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3、进入容器&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo1 /bin/bash

###查看zoo1 的状态
cd bin
./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;如果出现，以下情况：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ZooKeeper JMX enabled by default
Using config: /conf/zoo.cfg
Client port not found in static config file. Looking in dynamic config file.
grep: : No such file or directory
Client port not found in the server configs
Client port not found. Looking for secureClientPort in the static config.
Unable to find either secure or unsecure client port in any configs. Terminating.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	通过阅读我们知道他在conf中的zoo.cfg文件中缺少 **clientPort **我们只需要自行添加即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;###修改之前我们先装一下 vim
apt-get update

apt-get install -y vim 

###修改zoo.fcg文件
vim /conf/zoo.fcg

clientPort=2181
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;完事之后&lt;strong&gt;重启&lt;/strong&gt;zoo1&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/15/Zookeeper-tool/1645780920291.png&#34; class=&#34;&#34; width=&#34;1645780920291&#34;&gt;

&lt;p&gt;  成功！！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;4、查看所有zookeeper的状态&#34;&gt;&lt;a href=&#34;#4、查看所有zookeeper的状态&#34; class=&#34;headerlink&#34; title=&#34;4、查看所有zookeeper的状态&#34;&gt;&lt;/a&gt;4、查看所有zookeeper的状态&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo3 bash ./bin/zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;5、进去客户端&#34;&gt;&lt;a href=&#34;#5、进去客户端&#34; class=&#34;headerlink&#34; title=&#34;5、进去客户端&#34;&gt;&lt;/a&gt;5、进去客户端&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo3 zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.222Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/XShell-tool/</id>
        <title>XShell</title>
        <link rel="alternate" href="http://example.com/2022/10/15/XShell-tool/"/>
        <content type="html">&lt;h2 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;h2 id=&#34;配色&#34;&gt;&lt;a href=&#34;#配色&#34; class=&#34;headerlink&#34; title=&#34;配色&#34;&gt;&lt;/a&gt;配色&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所有资源都在网盘和仓库里面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;zk1&#34;&gt;&lt;a href=&#34;#zk1&#34; class=&#34;headerlink&#34; title=&#34;zk1&#34;&gt;&lt;/a&gt;zk1&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/15/XShell-tool/image-20220801173236598.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;Solarized-Dark&#34;&gt;&lt;a href=&#34;#Solarized-Dark&#34; class=&#34;headerlink&#34; title=&#34;Solarized Dark&#34;&gt;&lt;/a&gt;Solarized Dark&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/15/XShell-tool/image-20220801173040826.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;SolarizedDarkModify&#34;&gt;&lt;a href=&#34;#SolarizedDarkModify&#34; class=&#34;headerlink&#34; title=&#34;SolarizedDarkModify&#34;&gt;&lt;/a&gt;SolarizedDarkModify&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/15/XShell-tool/image-20220801173129171.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;isayme&#34;&gt;&lt;a href=&#34;#isayme&#34; class=&#34;headerlink&#34; title=&#34;isayme&#34;&gt;&lt;/a&gt;isayme&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/15/XShell-tool/image-20220801172922893.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;ubuntu&#34;&gt;&lt;a href=&#34;#ubuntu&#34; class=&#34;headerlink&#34; title=&#34;ubuntu&#34;&gt;&lt;/a&gt;ubuntu&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/15/XShell-tool/image-20220801173207482.png&#34; class=&#34;&#34;&gt;


















</content>
        <updated>2022-10-15T04:52:38.220Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Tomcat-tool/</id>
        <title>Tomcat</title>
        <link rel="alternate" href="http://example.com/2022/10/15/Tomcat-tool/"/>
        <content type="html">&lt;h3 id=&#34;Tomcat安装&#34;&gt;&lt;a href=&#34;#Tomcat安装&#34; class=&#34;headerlink&#34; title=&#34;Tomcat安装&#34;&gt;&lt;/a&gt;Tomcat安装&lt;/h3&gt;&lt;p&gt;下载&lt;/p&gt;
&lt;p&gt;下载地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3RvbWNhdC5hcGFjaGUub3JnLw==&#34;&gt;http://tomcat.apache.org/&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Tomcat-tool/1646193444708.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;tomcat由apache开源组织使用java开发的一款web容器,在使用之前需要安装JDK及配置JAVA_HOME.Tomcat是绿色软解，&lt;strong&gt;解压就可使用&lt;/strong&gt;。如果之前已经安装了其他tomcat并且还配置了CATALINA_HOME 不要忘记修改CATALINA_HOME指向我们现在使用的这个tomcat&lt;/p&gt;
&lt;h4 id=&#34;Tomcat启动&#34;&gt;&lt;a href=&#34;#Tomcat启动&#34; class=&#34;headerlink&#34; title=&#34;Tomcat启动&#34;&gt;&lt;/a&gt;Tomcat启动&lt;/h4&gt;&lt;p&gt;运行startup.bat文件。&lt;/p&gt;
&lt;p&gt;一定要配置JAVA_HOME   C:\Program Files\Java\jdk1.8.0_161&lt;br&gt;部分电脑需要配置CATALINA_HOME   D:&amp;#x2F;&lt;em&gt;&lt;strong&gt;&amp;#x2F;&lt;/strong&gt;&lt;/em&gt;&amp;#x2F;apache-tomcat-9.0.41&lt;br&gt;记住一个习惯:以后我们装任何一个软件路径都应该避免中文,空格和特殊符号,可以使用_&lt;/p&gt;
&lt;h4 id=&#34;Tomcat关闭&#34;&gt;&lt;a href=&#34;#Tomcat关闭&#34; class=&#34;headerlink&#34; title=&#34;Tomcat关闭&#34;&gt;&lt;/a&gt;Tomcat关闭&lt;/h4&gt;&lt;p&gt;  运行shutdown.bat文件或者直接关闭掉启动窗口。&lt;/p&gt;
&lt;h4 id=&#34;访问Tomcat&#34;&gt;&lt;a href=&#34;#访问Tomcat&#34; class=&#34;headerlink&#34; title=&#34;访问Tomcat&#34;&gt;&lt;/a&gt;访问Tomcat&lt;/h4&gt;&lt;p&gt;访问Tomcat的URL格式：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOnBvcnQ=&#34;&gt;http://ip:port&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;访问本机Tomcat的URL格式：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==&#34;&gt;http://localhost:8080&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Tomcat安装-1&#34;&gt;&lt;a href=&#34;#Tomcat安装-1&#34; class=&#34;headerlink&#34; title=&#34;Tomcat安装&#34;&gt;&lt;/a&gt;Tomcat安装&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;h5 id=&#34;1、下载Linux对应版本的Tomcat&#34;&gt;&lt;a href=&#34;#1、下载Linux对应版本的Tomcat&#34; class=&#34;headerlink&#34; title=&#34;1、下载Linux对应版本的Tomcat&#34;&gt;&lt;/a&gt;1、下载Linux对应版本的Tomcat&lt;/h5&gt;&lt;p&gt;​	  下载压缩文件     apache-tomcat-7.0.68.tar.gz         &lt;/p&gt;
&lt;h5 id=&#34;2、解压压缩文件&#34;&gt;&lt;a href=&#34;#2、解压压缩文件&#34; class=&#34;headerlink&#34; title=&#34;2、解压压缩文件&#34;&gt;&lt;/a&gt;2、解压压缩文件&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#tar -xvf   apache-tomcat-7.0.68.tar.gz -C /usr/local/  #解压到的路径 
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3、配置环境变量&#34;&gt;&lt;a href=&#34;#3、配置环境变量&#34; class=&#34;headerlink&#34; title=&#34;3、配置环境变量&#34;&gt;&lt;/a&gt;3、配置环境变量&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim  /etc/profile

###自己定义为位置
export CATALINA_BASE=/usr/local/apache-tomcat-7.0.68
export PATH=$CATALINA_BASE/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4、使用环境变量生效&#34;&gt;&lt;a href=&#34;#4、使用环境变量生效&#34; class=&#34;headerlink&#34; title=&#34;4、使用环境变量生效&#34;&gt;&lt;/a&gt;4、使用环境变量生效&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5、启动Tomcat服务&#34;&gt;&lt;a href=&#34;#5、启动Tomcat服务&#34; class=&#34;headerlink&#34; title=&#34;5、启动Tomcat服务&#34;&gt;&lt;/a&gt;5、启动Tomcat服务&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;注：要是远程访问你关注防火墙问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;启动Tomcat服务：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;启动Tomcat并输出启动日志 :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;  ./startup.sh &amp;amp; tail -f  ../logs/catalina.out
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.217Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Solr-tool/</id>
        <title>Solr</title>
        <link rel="alternate" href="http://example.com/2022/10/15/Solr-tool/"/>
        <content type="html">&lt;h3 id=&#34;Solr安装&#34;&gt;&lt;a href=&#34;#Solr安装&#34; class=&#34;headerlink&#34; title=&#34;Solr安装&#34;&gt;&lt;/a&gt;Solr安装&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;p&gt;​	Solr是使用Java编写，所以必选先安装JDK。&lt;/p&gt;
&lt;h5 id=&#34;1-上传并解压&#34;&gt;&lt;a href=&#34;#1-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;1.上传并解压&#34;&gt;&lt;/a&gt;1.上传并解压&lt;/h5&gt;&lt;p&gt;​	上传压缩包solr-7.7.2.tgz到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中。&lt;/p&gt;
&lt;p&gt;​	解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/tmp
 tar zxf solr-7.7.2.tgz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-复制到-x2F-usr-x2F-local中&#34;&gt;&lt;a href=&#34;#2-复制到-x2F-usr-x2F-local中&#34; class=&#34;headerlink&#34; title=&#34;2.复制到&amp;#x2F;usr&amp;#x2F;local中&#34;&gt;&lt;/a&gt;2.复制到&amp;#x2F;usr&amp;#x2F;local中&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; cp -r solr-7.7.2 ../solr
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-修改启动参数&#34;&gt;&lt;a href=&#34;#3-修改启动参数&#34; class=&#34;headerlink&#34; title=&#34;3.修改启动参数&#34;&gt;&lt;/a&gt;3.修改启动参数&lt;/h5&gt;&lt;p&gt;​	修改启动参数，否则启动时报警告。提示设置SOLR_ULIMIT_CHECKS&amp;#x3D;false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/solr/bin
 vim solr.in.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/Solr-tool/solr-02.jpg&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;4-启动Solr&#34;&gt;&lt;a href=&#34;#4-启动Solr&#34; class=&#34;headerlink&#34; title=&#34;4.启动Solr&#34;&gt;&lt;/a&gt;4.启动Solr&lt;/h5&gt;&lt;p&gt;​	Solr内嵌Jetty，直接启动即可。监听8983端口。&lt;/p&gt;
&lt;p&gt;​	solr默认不推荐root账户启动，如果是root账户启动需要添加-force参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5、可视化管理界面&#34;&gt;&lt;a href=&#34;#5、可视化管理界面&#34; class=&#34;headerlink&#34; title=&#34;5、可视化管理界面&#34;&gt;&lt;/a&gt;5、可视化管理界面&lt;/h5&gt;&lt;p&gt;​	在关闭防火墙的前提下，可以在windows的浏览器中访问Solr。&lt;/p&gt;
&lt;p&gt;​	输入: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguOTMuMTA6ODk4My8=&#34;&gt;http://192.168.93.10:8983&lt;/span&gt; 就可以访问Solr的可视化管理界面。&lt;/p&gt;
&lt;p&gt;​	左侧有5个菜单。分别是：&lt;/p&gt;
&lt;p&gt;​	（1）Dashboard：面板显示Solr的总体信息。&lt;/p&gt;
&lt;p&gt;​	（2）Logging：日志&lt;/p&gt;
&lt;p&gt;​	（3）Core Admin：Solr的核心。类似于数据的Database&lt;/p&gt;
&lt;p&gt;​	（4）Java Perperties：所有Java相关属性。&lt;/p&gt;
&lt;p&gt;​	（5）Thread Dump：线程相关信息。&lt;/p&gt;
&lt;p&gt;​	（6）如果有Core，将显示在此处。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Solr-tool/solr-03.JPG&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;6、新建核心&#34;&gt;&lt;a href=&#34;#6、新建核心&#34; class=&#34;headerlink&#34; title=&#34;6、新建核心&#34;&gt;&lt;/a&gt;6、新建核心&lt;/h5&gt;&lt;p&gt;​	Solr安装完成后默认是没有核心的。需要手动配置。&lt;/p&gt;
&lt;p&gt;​	需要在solr&amp;#x2F;server&amp;#x2F;solr下新建文件夹，并给定配置文件，否则无法建立。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Solr-tool/solr-04.JPG&#34; class=&#34;&#34;&gt;


&lt;h6 id=&#34;6-1-新建目录&#34;&gt;&lt;a href=&#34;#6-1-新建目录&#34; class=&#34;headerlink&#34; title=&#34;6.1.新建目录&#34;&gt;&lt;/a&gt;6.1.新建目录&lt;/h6&gt;&lt;p&gt;​	在&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr中新建自定义名称目录。此处示例名称为testcore。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/solr/server/solr
 mkdir testcore
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;6-2-复制配置文件&#34;&gt;&lt;a href=&#34;#6-2-复制配置文件&#34; class=&#34;headerlink&#34; title=&#34;6.2.复制配置文件&#34;&gt;&lt;/a&gt;6.2.复制配置文件&lt;/h6&gt;&lt;p&gt;​	在configsets里面包含了_default和sample_techproducts_configs。里面都是配置文件示例。_default属于默认配置，较纯净。sample_techproducts_configs是带有了一些配置示例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### cp -r configsets/_default/conf/ testcore/
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;6-3-填写Core信息&#34;&gt;&lt;a href=&#34;#6-3-填写Core信息&#34; class=&#34;headerlink&#34; title=&#34;6.3.填写Core信息&#34;&gt;&lt;/a&gt;6.3.填写Core信息&lt;/h6&gt;&lt;p&gt;​	在可视化管理界面中Core Admin中编写信息后点击Add Core后，短暂延迟后testcore就会创建成功。schema处不用更改。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Solr-tool/solr-05.JPG&#34; class=&#34;&#34;&gt;


&lt;h6 id=&#34;6-4-出现testcore&#34;&gt;&lt;a href=&#34;#6-4-出现testcore&#34; class=&#34;headerlink&#34; title=&#34;6.4.出现testcore&#34;&gt;&lt;/a&gt;6.4.出现testcore&lt;/h6&gt;&lt;p&gt;​	在客户端管理界面中，选择新建的Core后，就可以按照自己项目的需求进行操作了。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Solr-tool/solr-06.jpg&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;7、分词Analysis&#34;&gt;&lt;a href=&#34;#7、分词Analysis&#34; class=&#34;headerlink&#34; title=&#34;7、分词Analysis&#34;&gt;&lt;/a&gt;7、分词Analysis&lt;/h5&gt;&lt;p&gt;​	在Solr可视化管理界面中，Core的管理菜单项中都会有Analysis。表示根据Scheme.xml(managed-schema)中配置要求进行解析。&lt;/p&gt;
&lt;p&gt;​	对英文解析就比较简单了，只要按照空格把英文语句拆分成英文单词即可。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Solr-tool/solr-07.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	但是如果条件是中文时，把一句话按照字进行拆分就不是很合理了。正确的方式是按照合理的词组进行拆分。&lt;img data-src=&#34;/2022/10/15/Solr-tool/solr-08.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;7-1-配置步骤&#34;&gt;&lt;a href=&#34;#7-1-配置步骤&#34; class=&#34;headerlink&#34; title=&#34;7.1.配置步骤&#34;&gt;&lt;/a&gt;7.1.配置步骤&lt;/h6&gt;&lt;p&gt;​	上传ik-analyzer.jar到webapps中。&lt;/p&gt;
&lt;p&gt;​	去&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWFyY2gubWF2ZW4ub3JnL3NlYXJjaD9xPWNvbS5naXRodWIubWFnZXNlJUU0JUI4JThCJUU4JUJEJUJEJUU1JUFGJUI5JUU1JUJBJTk0JUU3JTg5JTg4JUU2JTlDJUFDJUU3JTlBJTg0aWstYW5hbHl6ZXIlRTMlODAlODIlRTUlOEYlQUYlRTQlQkIlQTUlRTUlOUMlQTglRTglQjUlODQlRTYlOTYlOTklRTQlQjglQUQlRTclOUIlQjQlRTYlOEUlQTUlRTglOEUlQjclRTUlOEYlOTYlRTMlODAlODI=&#34;&gt;https://search.maven.org/search?q=com.github.magese下载对应版本的ik-analyzer。可以在资料中直接获取。&lt;/span&gt;&lt;/p&gt;
&lt;h6 id=&#34;7-1-1上传jar到指定目录&#34;&gt;&lt;a href=&#34;#7-1-1上传jar到指定目录&#34; class=&#34;headerlink&#34; title=&#34;7.1.1上传jar到指定目录&#34;&gt;&lt;/a&gt;7.1.1上传jar到指定目录&lt;/h6&gt;&lt;p&gt;​	上传ik-analyzer-7.7.0.jar到&lt;/p&gt;
&lt;p&gt;​	&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr-webapp&amp;#x2F;webapp&amp;#x2F;WEB-INF&amp;#x2F;lib目录中&lt;/p&gt;
&lt;h6 id=&#34;7-1-2修改配置文件&#34;&gt;&lt;a href=&#34;#7-1-2修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;7.1.2修改配置文件&#34;&gt;&lt;/a&gt;7.1.2修改配置文件&lt;/h6&gt;&lt;p&gt;​	修改&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr&amp;#x2F;testcore&amp;#x2F;conf&amp;#x2F;managed-schema&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;### vim /usr/local/solr/server/solr/testcore/conf/managed-schema
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	添加下面内容。&lt;/p&gt;
&lt;p&gt;​	排版：Esc 退出编辑状态下：gg&amp;#x3D;G&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;field name=&amp;quot;myfield&amp;quot; type=&amp;quot;text_ik&amp;quot; indexed=&amp;quot;true&amp;quot; stored=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;fieldType name=&amp;quot;text_ik&amp;quot; class=&amp;quot;solr.TextField&amp;quot;&amp;gt;
            &amp;lt;analyzer type=&amp;quot;index&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;false&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
            &amp;lt;analyzer type=&amp;quot;query&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;true&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
    &amp;lt;/fieldType&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;7-1-3重启&#34;&gt;&lt;a href=&#34;#7-1-3重启&#34; class=&#34;headerlink&#34; title=&#34;7.1.3重启&#34;&gt;&lt;/a&gt;7.1.3重启&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;### cd /usr/local/solr/bin
### ./solr stop -all
### ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;7-1-4验证&#34;&gt;&lt;a href=&#34;#7-1-4验证&#34; class=&#34;headerlink&#34; title=&#34;7.1.4验证&#34;&gt;&lt;/a&gt;7.1.4验证&lt;/h6&gt;&lt;p&gt;​	可以在可视化管理界面中找到myfield属性进行验证。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Solr-tool/solr-09.jpg&#34; class=&#34;&#34;&gt;


&lt;h6 id=&#34;7-2-managed-schema配置说明&#34;&gt;&lt;a href=&#34;#7-2-managed-schema配置说明&#34; class=&#34;headerlink&#34; title=&#34;7.2.managed-schema配置说明&#34;&gt;&lt;/a&gt;7.2.managed-schema配置说明&lt;/h6&gt;&lt;h6 id=&#34;7-2-1-lt-fieldType-x2F-gt&#34;&gt;&lt;a href=&#34;#7-2-1-lt-fieldType-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;7.2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&lt;/h6&gt;&lt;p&gt;​	表示定义一个属性类型。在Solr中属性类型都是自定义的。在上面配置中name&amp;#x3D;”text_ik”为自定义类型。当某个属性取值为text_ik时IK Analyzer才能生效。&lt;/p&gt;
&lt;h6 id=&#34;7-2-2-lt-field-x2F-gt&#34;&gt;&lt;a href=&#34;#7-2-2-lt-field-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.2&amp;lt; field&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;7.2.2&amp;lt; field&amp;#x2F;&amp;gt;&lt;/h6&gt;&lt;p&gt;​	表示向Document中添加一个属性。&lt;/p&gt;
&lt;p&gt;​	常用属性：&lt;/p&gt;
&lt;p&gt;​		name: 属性名&lt;/p&gt;
&lt;p&gt;​		type:属性类型。所有类型都是solr使用&lt;fieldType&gt;配置的&lt;/p&gt;
&lt;p&gt;​		indexed: 是否建立索引&lt;/p&gt;
&lt;p&gt;​		stored: solr是否把该属性值响应给搜索用户。&lt;/p&gt;
&lt;p&gt;​		required：该属性是否是必须的。默认id是必须的。&lt;/p&gt;
&lt;p&gt;​		multiValued：如果为true，表示该属性为复合属性，此属性中包含了多个其他的属性。常用在多个列作为搜索条件时，把这些列定义定义成一个新的复合属性，通过搜索一个复合属性就可以实现搜索多个列。当设置为true时与&amp;lt; copyField source&amp;#x3D;”” dest&amp;#x3D;””&amp;#x2F;&amp;gt;结合使用&lt;/p&gt;
&lt;h6 id=&#34;7-2-3-lt-uniqueKey-gt&#34;&gt;&lt;a href=&#34;#7-2-3-lt-uniqueKey-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.3&amp;lt; uniqueKey&amp;gt;&#34;&gt;&lt;/a&gt;7.2.3&amp;lt; uniqueKey&amp;gt;&lt;/h6&gt;&lt;p&gt;​	唯一主键，Solr中默认定义id属性为唯一主键。ID的值是不允许重复的。&lt;/p&gt;
&lt;h6 id=&#34;7-2-4-lt-dynamicField-gt&#34;&gt;&lt;a href=&#34;#7-2-4-lt-dynamicField-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.4&amp;lt; dynamicField&amp;gt;&#34;&gt;&lt;/a&gt;7.2.4&amp;lt; dynamicField&amp;gt;&lt;/h6&gt;&lt;p&gt;​	名称中允许*进行通配。代表满足特定名称要求的一组属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; msb_java    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	msb_bigdata&lt;/p&gt;
&lt;p&gt;​	msb_UI&lt;/p&gt;
&lt;p&gt;​        msb_*&lt;/p&gt;
&lt;h5 id=&#34;8、Dataimport&#34;&gt;&lt;a href=&#34;#8、Dataimport&#34; class=&#34;headerlink&#34; title=&#34;8、Dataimport&#34;&gt;&lt;/a&gt;8、Dataimport&lt;/h5&gt;&lt;p&gt;​	可以使用Solr自带的Dataimport功能把数据库中数据快速导入到solr中.&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;必须保证managed-schema和数据库中表的列对应。，添加配置&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;8-1-修改配置文件&#34;&gt;&lt;a href=&#34;#8-1-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;8.1.修改配置文件&#34;&gt;&lt;/a&gt;8.1.修改配置文件&lt;/h6&gt;&lt;p&gt;​	修改solrconfig.xml，添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;!-- 配置数据导入的处理器 --&amp;gt;
  &amp;lt;requestHandler name=&amp;quot;/dataimport&amp;quot; class=&amp;quot;org.apache.solr.handler.dataimport.DataImportHandler&amp;quot;&amp;gt;
    &amp;lt;lst name=&amp;quot;defaults&amp;quot;&amp;gt;
      &amp;lt;!--  加载data-config.xml  --&amp;gt;
      &amp;lt;str name=&amp;quot;config&amp;quot;&amp;gt;data-config.xml&amp;lt;/str&amp;gt;
     &amp;lt;/lst&amp;gt;
  &amp;lt;/requestHandler&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;8-2-新建data-config-xml&#34;&gt;&lt;a href=&#34;#8-2-新建data-config-xml&#34; class=&#34;headerlink&#34; title=&#34;8.2.新建data-config.xml&#34;&gt;&lt;/a&gt;8.2.新建data-config.xml&lt;/h6&gt;&lt;p&gt;​	和solrconfig.xml同一目录下新建data-config.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;dataConfig&amp;gt;
        &amp;lt;dataSource type=&amp;quot;JdbcDataSource&amp;quot;   
                driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot;   
                url=&amp;quot;jdbc:mysql://192.168.1.135:3306/mytest&amp;quot;   
                user=&amp;quot;root&amp;quot;   
                password=&amp;quot;root&amp;quot;/&amp;gt;
        &amp;lt;document&amp;gt;
            &amp;lt;entity name=&amp;quot;product&amp;quot; query=&amp;quot;SELECT id,name,price from t_product&amp;quot;&amp;gt;
                &amp;lt;!-- 
                 实现数据库的列和索引库的字段的映射
                 column 指定数据库的列表
                 name  指定索引库的字段名字，必须和schema.xml中定义的一样
                 --&amp;gt;
                 &amp;lt;field column=&amp;quot;id&amp;quot; name=&amp;quot;id&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;price&amp;quot; name=&amp;quot;price&amp;quot;/&amp;gt;
            &amp;lt;/entity&amp;gt;
         &amp;lt;/document&amp;gt;
&amp;lt;/dataConfig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;8-3-添加jar&#34;&gt;&lt;a href=&#34;#8-3-添加jar&#34; class=&#34;headerlink&#34; title=&#34;8.3.添加jar&#34;&gt;&lt;/a&gt;8.3.添加jar&lt;/h6&gt;&lt;p&gt;​	向solr-webapp中添加&lt;strong&gt;三个jar&lt;/strong&gt;。在&lt;strong&gt;dist中两个还有一个数据库驱动。（自己去maven-repository里面找一个 mysql-connector-java ）&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Solr-tool/solr-10.jpg&#34; class=&#34;&#34;&gt;


&lt;h6 id=&#34;8-4-操作&#34;&gt;&lt;a href=&#34;#8-4-操作&#34; class=&#34;headerlink&#34; title=&#34;8.4.操作&#34;&gt;&lt;/a&gt;8.4.操作&lt;/h6&gt;&lt;p&gt;​	重启solr后，在可视化管理页面中进行数据导入。&lt;/p&gt;
&lt;p&gt;​	注意：&lt;/p&gt;
&lt;p&gt;​	点击导入按钮后，要记得点击刷新按钮。&lt;/p&gt;
</content>
        <updated>2022-10-15T04:52:38.211Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/redis-tool/</id>
        <title>redis</title>
        <link rel="alternate" href="http://example.com/2022/10/15/redis-tool/"/>
        <content type="html">&lt;h3 id=&#34;redis安装&#34;&gt;&lt;a href=&#34;#redis安装&#34; class=&#34;headerlink&#34; title=&#34;redis安装&#34;&gt;&lt;/a&gt;redis安装&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;h5 id=&#34;1-安装依赖C语言依赖&#34;&gt;&lt;a href=&#34;#1-安装依赖C语言依赖&#34; class=&#34;headerlink&#34; title=&#34;1.安装依赖C语言依赖&#34;&gt;&lt;/a&gt;1.安装依赖C语言依赖&lt;/h5&gt;&lt;p&gt;​	redis使用C语言编写，所以需要安装C语言库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; yum install -y gcc-c++ automake autoconf libtool make tcl 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;h5 id=&#34;2-上传并解压&#34;&gt;&lt;a href=&#34;#2-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;2.上传并解压&#34;&gt;&lt;/a&gt;2.上传并解压&lt;/h5&gt;&lt;p&gt;​	把redis-5.0.5.tar.gz上传到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中，解压文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/tmp

 tar zxf redis-5.0.5.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-编译并安装&#34;&gt;&lt;a href=&#34;#3-编译并安装&#34; class=&#34;headerlink&#34; title=&#34;3.编译并安装&#34;&gt;&lt;/a&gt;3.编译并安装&lt;/h5&gt;&lt;p&gt;​	进入解压文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp/redis-5.0.5/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	编译&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	安装	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; make install PREFIX=/usr/local/redis
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-开启守护进程&#34;&gt;&lt;a href=&#34;#4-开启守护进程&#34; class=&#34;headerlink&#34; title=&#34;4.开启守护进程&#34;&gt;&lt;/a&gt;4.开启守护进程&lt;/h5&gt;&lt;p&gt;​	复制cd &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp&amp;#x2F;redis-5.0.5&amp;#x2F;中redis.conf配置文件	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cp redis.conf /usr/local/redis/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; &lt;strong&gt;修改配置文件&lt;/strong&gt;	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/redis/bin/

 vim redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	把daemonize的值由no修改为yes&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/Redis-01.jpg&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;5-修改外部访问&#34;&gt;&lt;a href=&#34;#5-修改外部访问&#34; class=&#34;headerlink&#34; title=&#34;5.修改外部访问&#34;&gt;&lt;/a&gt;5.修改外部访问&lt;/h5&gt;&lt;p&gt;​	在redis5中需要修改配置文件redis.conf允许外部访问。需要修改两处。&lt;/p&gt;
&lt;p&gt;​	注释掉下面&lt;/p&gt;
&lt;p&gt;​	bind 127.0.0.1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; bind 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	protected-mode yes 改成 no&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/Redis-02.jpg&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;6-启动并测试&#34;&gt;&lt;a href=&#34;#6-启动并测试&#34; class=&#34;headerlink&#34; title=&#34;6.启动并测试&#34;&gt;&lt;/a&gt;6.启动并测试&lt;/h5&gt;&lt;p&gt;​	启动redis&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./redis-server redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	重启redis&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./redis-cli shutdown
./redis-server redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	启动客户端工具&lt;/p&gt;
&lt;p&gt;​	在redis5中客户端工具对命令会有提供功能。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./redis-cli 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;——2&#34;&gt;&lt;a href=&#34;#——2&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h4&gt;&lt;h5 id=&#34;1、拉取镜像文件&#34;&gt;&lt;a href=&#34;#1、拉取镜像文件&#34; class=&#34;headerlink&#34; title=&#34;1、拉取镜像文件&#34;&gt;&lt;/a&gt;1、拉取镜像文件&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull redis[:(版本号)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】&#34;&gt;&lt;a href=&#34;#2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】&#34; class=&#34;headerlink&#34; title=&#34;2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】&#34;&gt;&lt;/a&gt;2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;建议看完，先别操作，再看三，看完三之后再决定如何操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后按照文章内容进行，忽略下载。&lt;/p&gt;
&lt;p&gt;文章地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yMDMyNzQuaHRt&#34;&gt;https://www.jb51.net/article/203274.htm&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;、&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/1645177895314.png&#34; alt=&#34;1645177895314&#34;&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;docker 镜像中没有redis.conf文件，要自己配置&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;undefined&#34;&gt;git pull --rebase https://gitee.com/zjj3366/mydemo.git master
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3、创建一个redis-服务容器&#34;&gt;&lt;a href=&#34;#3、创建一个redis-服务容器&#34; class=&#34;headerlink&#34; title=&#34;3、创建一个redis 服务容器&#34;&gt;&lt;/a&gt;3、创建一个redis 服务容器&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;第二步进行了的&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -p 6379:6379 \
--name myredis  \
-v /usr/local/docker/redis.conf:/etc/redis/redis.conf   \
-v /usr/local/docker/data:/data  \
-d redis  \
redis-server  /etc/redis/redis.conf  \
--appendonly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;第二步没有进行的&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -p 6379:6379  \
--name myredis  \
-v /root/myredis/data:/data \
-v /root/myredis/conf/redis.conf:/etc/redis/redis.conf  \
-d redis:4.0  \
redis-server /etc/redis/redis.conf  \
--appendonly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	其实也没有什么区别，只是映射的文件不同，也可以将第二步的文件直接创建到第二种创建服务容器的配置文件地址中去，这样也可使用第二个创建方式。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/1645177877202.png&#34; alt=&#34;1645177877202&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/1645177918077.png&#34; alt=&#34;1645177918077&#34;&gt;&lt;/p&gt;
</content>
        <updated>2022-10-15T04:52:38.205Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/RabbitMQ-tool/</id>
        <title>RabbitMQ</title>
        <link rel="alternate" href="http://example.com/2022/10/15/RabbitMQ-tool/"/>
        <content type="html">&lt;h3 id=&#34;RabbitMQ安装&#34;&gt;&lt;a href=&#34;#RabbitMQ安装&#34; class=&#34;headerlink&#34; title=&#34;RabbitMQ安装&#34;&gt;&lt;/a&gt;RabbitMQ&lt;strong&gt;安装&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-上传并解压&#34;&gt;&lt;a href=&#34;#1-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;1 上传并解压&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	上传rabbitmq-server-generic-unix-3.7.18.tar.xz到&amp;#x2F;usr&amp;#x2F;loca&amp;#x2F;tmp中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  
  tar xf rabbitmq-server-generic-unix-3.7.18.tar.xz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制到local下&#34;&gt;&lt;a href=&#34;#2-复制到local下&#34; class=&#34;headerlink&#34; title=&#34;2 复制到local下&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;复制到local下&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	复制解压文件到&amp;#x2F;usr&amp;#x2F;local下，命名为rabbitmq&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cp -r rabbitmq_server-3.7.18 /usr/local/rabbitmq
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-配置环境变量&#34;&gt;&lt;a href=&#34;#3-配置环境变量&#34; class=&#34;headerlink&#34; title=&#34;3 配置环境变量&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;配置环境变量&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	在文件中添加 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	解析文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-开启web管理插件&#34;&gt;&lt;a href=&#34;#4-开启web管理插件&#34; class=&#34;headerlink&#34; title=&#34;4 开启web管理插件&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;开启web管理插件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	进入rabbitmq&amp;#x2F;sbin目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 查看插件列表
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  ./rabbitmq-plugins list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 生效管理插件
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  ./rabbitmq-plugins enable rabbitmq_management
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-后台运行&#34;&gt;&lt;a href=&#34;#5-后台运行&#34; class=&#34;headerlink&#34; title=&#34;5 后台运行&#34;&gt;&lt;/a&gt;5 &lt;strong&gt;后台运行&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	启动rabbitmq。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ./rabbitmq-server -detached
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	停止命令，如果无法停止，使用kill -9 进程号进行关闭&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./rabbitmqctl stop_app
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-查看web管理界面&#34;&gt;&lt;a href=&#34;#6-查看web管理界面&#34; class=&#34;headerlink&#34; title=&#34;6 查看web管理界面&#34;&gt;&lt;/a&gt;6 &lt;strong&gt;查看web管理界面&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	默认可以在安装rabbitmq的电脑上通过用户名：guest密码guest进行访问web管理界面&lt;/p&gt;
&lt;p&gt;​	端口号：15672（放行端口，或关闭防火墙）&lt;/p&gt;
&lt;p&gt;​	在虚拟机浏览器中输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDoxNTY3Mi8=&#34;&gt;http://localhost:15672&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;RabbitMq账户管理&#34;&gt;&lt;a href=&#34;#RabbitMq账户管理&#34; class=&#34;headerlink&#34; title=&#34;* RabbitMq账户管理&#34;&gt;&lt;/a&gt;* RabbitMq账户管理&lt;/h3&gt;&lt;h4 id=&#34;1-创建账户&#34;&gt;&lt;a href=&#34;#1-创建账户&#34; class=&#34;headerlink&#34; title=&#34;1 创建账户&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;创建账户&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	语法：.&amp;#x2F;rabbitmqctl add_user username password&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/rabbitmq/sbin
 
 ./rabbitmqctl add_user mashibing mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-给用户授予管理员角色&#34;&gt;&lt;a href=&#34;#2-给用户授予管理员角色&#34; class=&#34;headerlink&#34; title=&#34;2 给用户授予管理员角色&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;给用户授予管理员角色&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	其中smallming为新建用户的用户名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./rabbitmqctl set_user_tags mashibing administrator
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-给用户授权&#34;&gt;&lt;a href=&#34;#3-给用户授权&#34; class=&#34;headerlink&#34; title=&#34;3 给用户授权&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;给用户授权&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	“&amp;#x2F;” 表示虚拟机&lt;/p&gt;
&lt;p&gt;​	mashibing 表示用户名&lt;/p&gt;
&lt;p&gt;​	“.&lt;em&gt;“ “.&lt;/em&gt;“ “.*” 表示完整权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./rabbitmqctl set_permissions -p &amp;quot;/&amp;quot; mashibing &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-登录&#34;&gt;&lt;a href=&#34;#4-登录&#34; class=&#34;headerlink&#34; title=&#34;4 登录&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;登录&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	使用新建账户和密码在windows中访问rabbitmq并登录 &lt;/p&gt;
&lt;p&gt;​	在浏览器地址栏输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOjE1NjcyLw==&#34;&gt;http://ip:15672/&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 用户名：mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	密码：mashibing&lt;/p&gt;
</content>
        <updated>2022-10-15T04:52:38.201Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/python-tool/</id>
        <title>python</title>
        <link rel="alternate" href="http://example.com/2022/10/15/python-tool/"/>
        <content type="html">&lt;h3 id=&#34;Python升级&#34;&gt;&lt;a href=&#34;#Python升级&#34; class=&#34;headerlink&#34; title=&#34;Python升级&#34;&gt;&lt;/a&gt;Python升级&lt;/h3&gt;&lt;h4 id=&#34;一、查看当前python版本&#34;&gt;&lt;a href=&#34;#一、查看当前python版本&#34; class=&#34;headerlink&#34; title=&#34;一、查看当前python版本&#34;&gt;&lt;/a&gt;一、&lt;strong&gt;查看当前python版本&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;#[root@ansible ~]# python -V
Python 2.7.5
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;二、下载新的python包并安装&#34;&gt;&lt;a href=&#34;#二、下载新的python包并安装&#34; class=&#34;headerlink&#34; title=&#34;二、下载新的python包并安装&#34;&gt;&lt;/a&gt;二、&lt;strong&gt;下载新的python包并安装&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	进入python官网（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucHl0aG9uLm9yZyks6YCJ5oup6ZyA6KaB55qE54mI5pysLuatpOWkhOaIkemAieaLqeW9k+WJjeacgOaWsOeJiOacrHB5dGhvbjMuNi4xLw==&#34;&gt;https://www.python.org），选择需要的版本。此处我选择当前最新版本Python3.6.1&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install gcc gcc-c++ -y

wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz

tar xvf Python-3.7.3.tar.xz 

cd Python-3.7.3/

 ./configure
 
make

make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;三、验证&#34;&gt;&lt;a href=&#34;#三、验证&#34; class=&#34;headerlink&#34; title=&#34;三、验证&#34;&gt;&lt;/a&gt;三、&lt;strong&gt;验证&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;#python -V     #一个是旧版本，一个是新版本
Python 2.7.5
### python3 -V
Python 3.7.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;四、设置3-X为默认版本&#34;&gt;&lt;a href=&#34;#四、设置3-X为默认版本&#34; class=&#34;headerlink&#34; title=&#34;四、设置3.X为默认版本&#34;&gt;&lt;/a&gt;四、&lt;strong&gt;设置3.X为默认版本&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	查看 Python 的路径，在 &amp;#x2F;usr&amp;#x2F;bin 下面。可以看到 python 链接的是 python 2.7，所以，执行 python 就相当于执行 python 2.7。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#[root@ansible ~]# ls -al /usr/bin | grep python
-rwxr-xr-x.   1 root root       11232 Dec  2  2016 abrt-action-analyze-python
lrwxrwxrwx.   1 root root           7 May 26  2017 python -&amp;gt; python2
lrwxrwxrwx.   1 root root           9 May 26  2017 python2 -&amp;gt; python2.7
-rwxr-xr-x.   1 root root        7136 Nov  6  2016 python2.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将原来 python 的软链接重命名：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  mv /usr/bin/python /usr/bin/python.bak
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 python 链接至 python3：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ln -s /usr/local/bin/python3 /usr/bin/python
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;五、配置yum&#34;&gt;&lt;a href=&#34;#五、配置yum&#34; class=&#34;headerlink&#34; title=&#34;五、配置yum&#34;&gt;&lt;/a&gt;五、&lt;strong&gt;配置yum&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	升级 Python 之后，由于将默认的 python 指向了 python3，yum 不能正常使用，需要编辑 yum 的配置文件，此时：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#[root@ansible-admin Python-3.7.3]# yum list
  File &amp;quot;/usr/bin/yum&amp;quot;, line 30
    except KeyboardInterrupt, e:

SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	修改&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;yum和&amp;#x2F;usr&amp;#x2F;libexec&amp;#x2F;urlgrabber-ext-down，将 #!&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;python 改为 #!&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;python2.7，保存退出即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vim &amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;yum&lt;/p&gt;
&lt;p&gt;vim &amp;#x2F;usr&amp;#x2F;libexec&amp;#x2F;urlgrabber-ext-down&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <updated>2022-10-15T04:52:38.198Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/OpenSSL-tool/</id>
        <title>OpenSSL</title>
        <link rel="alternate" href="http://example.com/2022/10/15/OpenSSL-tool/"/>
        <content type="html">&lt;h3 id=&#34;OpenSSL安装教程（Windows）&#34;&gt;&lt;a href=&#34;#OpenSSL安装教程（Windows）&#34; class=&#34;headerlink&#34; title=&#34;OpenSSL安装教程（Windows）&#34;&gt;&lt;/a&gt;OpenSSL安装教程（Windows）&lt;/h3&gt;&lt;p&gt;openssl官网下载地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NscHJvd2ViLmNvbS9wcm9kdWN0cy9XaW4zMk9wZW5TU0wuaHRtbA==&#34;&gt;http://slproweb.com/products/Win32OpenSSL.html&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装环境&#34;&gt;&lt;a href=&#34;#安装环境&#34; class=&#34;headerlink&#34; title=&#34;安装环境:&#34;&gt;&lt;/a&gt;安装环境:&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;windows 10&lt;br&gt;Win64 OpenSSL v1.1.1i&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;一-下载openssl安装版&#34;&gt;&lt;a href=&#34;#一-下载openssl安装版&#34; class=&#34;headerlink&#34; title=&#34;一.下载openssl安装版&#34;&gt;&lt;/a&gt;一.下载openssl安装版&lt;/h4&gt;&lt;p&gt;​	我这里是win10 64位,所以选的中间那个&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/OpenSSL-tool/20201222101342278.png&#34; class=&#34;&#34; title=&#34;按照操作系统选择&#34;&gt; 



&lt;h4 id=&#34;二-安装过程&#34;&gt;&lt;a href=&#34;#二-安装过程&#34; class=&#34;headerlink&#34; title=&#34;二.安装过程&#34;&gt;&lt;/a&gt;二.安装过程&lt;/h4&gt;&lt;p&gt;​	也没啥特殊的 ，一直next，只有两点注意：&lt;/p&gt;
&lt;p&gt;1、修改安装地址&lt;/p&gt;
&lt;p&gt;2、最后一步，不要勾选，会掏钱。&lt;/p&gt;
 &lt;img data-src=&#34;/2022/10/15/OpenSSL-tool/20201222102601218.png&#34; class=&#34;&#34; title=&#34;在这里插入图片描述&#34;&gt; 

 &lt;img data-src=&#34;/2022/10/15/OpenSSL-tool/20201222102703276.png&#34; class=&#34;&#34; title=&#34;在这里插入图片描述&#34;&gt; 

 &lt;img data-src=&#34;/2022/10/15/OpenSSL-tool/20201222102703268.png&#34; class=&#34;&#34; title=&#34;在这里插入图片描述&#34;&gt; 

 &lt;img data-src=&#34;/2022/10/15/OpenSSL-tool/20201222102721958.png&#34; class=&#34;&#34; title=&#34;在这里插入图片描述&#34;&gt; 

&lt;img data-src=&#34;/2022/10/15/OpenSSL-tool/1650347562395.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;三-配置环境变量&#34;&gt;&lt;a href=&#34;#三-配置环境变量&#34; class=&#34;headerlink&#34; title=&#34;三.配置环境变量&#34;&gt;&lt;/a&gt;三.配置环境变量&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/15/OpenSSL-tool/1650351119292.png&#34; class=&#34;&#34;&gt;


 &lt;img data-src=&#34;/2022/10/15/OpenSSL-tool/1650351138506.png&#34; class=&#34;&#34; width=&#34;1650351138506&#34;&gt;



&lt;h4 id=&#34;四-测试&#34;&gt;&lt;a href=&#34;#四-测试&#34; class=&#34;headerlink&#34; title=&#34;四.测试&#34;&gt;&lt;/a&gt;四.测试&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;openssl -version
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/OpenSSL-tool/1650351011263.png&#34; class=&#34;&#34;&gt;




&lt;h3 id=&#34;OpenSSL安装（Linux）&#34;&gt;&lt;a href=&#34;#OpenSSL安装（Linux）&#34; class=&#34;headerlink&#34; title=&#34;OpenSSL安装（Linux）&#34;&gt;&lt;/a&gt;OpenSSL安装（Linux）&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZlY3Rvcl9kYXRhL2FydGljbGUvZGV0YWlscy8xMDc1NTc5NDE=&#34;&gt;https://blog.csdn.net/vector_data/article/details/107557941&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;1-安装依赖C语言依赖&#34;&gt;&lt;a href=&#34;#1-安装依赖C语言依赖&#34; class=&#34;headerlink&#34; title=&#34;1.安装依赖C语言依赖&#34;&gt;&lt;/a&gt;1.安装依赖C语言依赖&lt;/h5&gt;&lt;p&gt;​	redis使用C语言编写，所以需要安装C语言库&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install -y gcc zlib 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;h5 id=&#34;2-上传并解压&#34;&gt;&lt;a href=&#34;#2-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;2.上传并解压&#34;&gt;&lt;/a&gt;2.上传并解压&lt;/h5&gt;&lt;p&gt;​	把 &lt;code&gt;openssl-1.1.1j.tar.gz&lt;/code&gt; 上传到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中，解压文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/tmp

 tar zxf openssl-1.1.1j.tar.gz 
 mv openssl-1.1.1j ../openssl
 
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-编译并安装&#34;&gt;&lt;a href=&#34;#3-编译并安装&#34; class=&#34;headerlink&#34; title=&#34;3.编译并安装&#34;&gt;&lt;/a&gt;3.编译并安装&lt;/h5&gt;&lt;p&gt;​	进入解压文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;  cd /usr/local/openssl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 配置编译 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;./config
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	编译安装	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make clean &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	测试&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl version -a
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.193Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Nginx-tool/</id>
        <title>Nginx</title>
        <link rel="alternate" href="http://example.com/2022/10/15/Nginx-tool/"/>
        <content type="html">&lt;h3 id=&#34;nginx安装&#34;&gt;&lt;a href=&#34;#nginx安装&#34; class=&#34;headerlink&#34; title=&#34;nginx安装&#34;&gt;&lt;/a&gt;nginx安装&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;h5 id=&#34;安装：yum&#34;&gt;&lt;a href=&#34;#安装：yum&#34; class=&#34;headerlink&#34; title=&#34;安装：yum&#34;&gt;&lt;/a&gt;安装：yum&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; yum install yum-utils
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;切换目录：&#34;&gt;&lt;a href=&#34;#切换目录：&#34; class=&#34;headerlink&#34; title=&#34;切换目录：&#34;&gt;&lt;/a&gt;切换目录：&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;cd /etc/yum.repos.d/
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;创建文件：&#34;&gt;&lt;a href=&#34;#创建文件：&#34; class=&#34;headerlink&#34; title=&#34;创建文件：&#34;&gt;&lt;/a&gt;创建文件：&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;vim nginx.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;修改文件内容：&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;[nginx-stable]

name=nginx stable repo

baseurl=http://nginx.org/packages/centos/$releasever/$basearch/

gpgcheck=1

enabled=1

gpgkey=https://nginx.org/keys/nginx_signing.key

module_hotfixes=true

[nginx-mainline]

name=nginx mainline repo

baseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/

gpgcheck=1

enabled=0

gpgkey=https://nginx.org/keys/nginx_signing.key

module_hotfixes=true
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;Nginx的安装：&#34;&gt;&lt;a href=&#34;#Nginx的安装：&#34; class=&#34;headerlink&#34; title=&#34;Nginx的安装：&#34;&gt;&lt;/a&gt;Nginx的安装：&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装完成：我们的版本：nginx.x86_64 1:1.20.2-1.el7.ngx&lt;/p&gt;
&lt;div name=&#34;nginx_install_2&#34;&gt;

&lt;h4 id=&#34;——2&#34;&gt;&lt;a href=&#34;#——2&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h4&gt;&lt;h5 id=&#34;1、拉取镜像&#34;&gt;&lt;a href=&#34;#1、拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;1、拉取镜像&#34;&gt;&lt;/a&gt;1、拉取镜像&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull nginx:1.16.1
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2、创建挂载数据卷&#34;&gt;&lt;a href=&#34;#2、创建挂载数据卷&#34; class=&#34;headerlink&#34; title=&#34;2、创建挂载数据卷&#34;&gt;&lt;/a&gt;2、创建挂载数据卷&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir -p /root/nginx/conf
vim /root/nginx/conf/nginx.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;nginx.conf内容：&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;user  root;
worker_processes  1;
 
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
 
 
events &amp;#123;
    worker_connections  1024;
&amp;#125;
 
 
http &amp;#123;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
 
    log_format  main  &amp;#39;$remote_addr - $remote_user [$time_local] &amp;quot;$request&amp;quot; &amp;#39;
                      &amp;#39;$status $body_bytes_sent &amp;quot;$http_referer&amp;quot; &amp;#39;
                      &amp;#39;&amp;quot;$http_user_agent&amp;quot; &amp;quot;$http_x_forwarded_for&amp;quot;&amp;#39;;
 
    access_log  /var/log/nginx/access.log  main;
 
    sendfile        on;
#    #tcp_nopush     on;
 
    keepalive_timeout  65;
 
#    #gzip  on;
    
    
    server &amp;#123;
        listen       80;
        server_name  localhost;

#    	#charset koi8-r;
#    	#access_log  /var/log/nginx/host.access.log  main;

        location / &amp;#123;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
        &amp;#125;

#    	#error_page  404              /404.html;

#    	# redirect server error pages to the static page /50x.html

        error_page   500 502 503 504  /50x.html;
        location = /50x.html &amp;#123;
            root   /usr/share/nginx/html;
        &amp;#125;
   
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3、创建容器&#34;&gt;&lt;a href=&#34;#3、创建容器&#34; class=&#34;headerlink&#34; title=&#34;3、创建容器&#34;&gt;&lt;/a&gt;3、创建容器&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;### 注意ip一定要与检测ip相同
docker run \
-p 80:80 \
--name nginx  \
-v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \
-d nginx:1.16.1 
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4、查看&#34;&gt;&lt;a href=&#34;#4、查看&#34; class=&#34;headerlink&#34; title=&#34;4、查看&#34;&gt;&lt;/a&gt;4、查看&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker ps 
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.188Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Nacos-tool/</id>
        <title>Nacos</title>
        <link rel="alternate" href="http://example.com/2022/10/15/Nacos-tool/"/>
        <content type="html">&lt;h3 id=&#34;Nacos安装&#34;&gt;&lt;a href=&#34;#Nacos安装&#34; class=&#34;headerlink&#34; title=&#34;Nacos安装&#34;&gt;&lt;/a&gt;Nacos安装&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装之前必须 配置  &lt;a href=&#34;#jdk_install&#34;&gt;jdk&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装之前必须 配置  &lt;a href=&#34;#mysql_install&#34;&gt;mysql5.6.+&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div name=&#34;nacos_install_1&#34;&gt;

&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;h5 id=&#34;1、准备安装包&#34;&gt;&lt;a href=&#34;#1、准备安装包&#34; class=&#34;headerlink&#34; title=&#34;1、准备安装包&#34;&gt;&lt;/a&gt;1、准备安装包&lt;/h5&gt;&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvcmVsZWFzZXM=&#34;&gt;https://github.com/alibaba/nacos/releases&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;本篇我们选择version：2.0.3&lt;/p&gt;
&lt;h5 id=&#34;2、上传并解压&#34;&gt;&lt;a href=&#34;#2、上传并解压&#34; class=&#34;headerlink&#34; title=&#34;2、上传并解压&#34;&gt;&lt;/a&gt;2、上传并解压&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;tar -zxvf nacos-server-2.0.3 .tar.gz -C /usr/local/
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3、修改配置&#34;&gt;&lt;a href=&#34;#3、修改配置&#34; class=&#34;headerlink&#34; title=&#34;3、修改配置&#34;&gt;&lt;/a&gt;3、修改配置&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;1、使用nacos-mysql.sql&lt;/p&gt;
&lt;p&gt;​		为我们储存数据建立数据库、表&lt;/p&gt;
&lt;p&gt;2、&lt;code&gt;application.properties里面修改数据储存位置为mysql&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/nacos/conf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 1 建立数据库
create  database nacos_config;
use nacos_config;

CREATE TABLE `config_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(255) DEFAULT NULL,
  `content` longtext NOT NULL COMMENT &amp;#39;content&amp;#39;,
  `md5` varchar(32) DEFAULT NULL COMMENT &amp;#39;md5&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  `src_user` text COMMENT &amp;#39;source user&amp;#39;,
  `src_ip` varchar(50) DEFAULT NULL COMMENT &amp;#39;source ip&amp;#39;,
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;租户字段&amp;#39;,
  `c_desc` varchar(256) DEFAULT NULL,
  `c_use` varchar(64) DEFAULT NULL,
  `effect` varchar(64) DEFAULT NULL,
  `type` varchar(64) DEFAULT NULL,
  `c_schema` text,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;config_info&amp;#39;;


CREATE TABLE `config_info_aggr` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(255) NOT NULL COMMENT &amp;#39;group_id&amp;#39;,
  `datum_id` varchar(255) NOT NULL COMMENT &amp;#39;datum_id&amp;#39;,
  `content` longtext NOT NULL COMMENT &amp;#39;内容&amp;#39;,
  `gmt_modified` datetime NOT NULL COMMENT &amp;#39;修改时间&amp;#39;,
  `app_name` varchar(128) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;租户字段&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;增加租户字段&amp;#39;;



CREATE TABLE `config_info_beta` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(128) NOT NULL COMMENT &amp;#39;group_id&amp;#39;,
  `app_name` varchar(128) DEFAULT NULL COMMENT &amp;#39;app_name&amp;#39;,
  `content` longtext NOT NULL COMMENT &amp;#39;content&amp;#39;,
  `beta_ips` varchar(1024) DEFAULT NULL COMMENT &amp;#39;betaIps&amp;#39;,
  `md5` varchar(32) DEFAULT NULL COMMENT &amp;#39;md5&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  `src_user` text COMMENT &amp;#39;source user&amp;#39;,
  `src_ip` varchar(50) DEFAULT NULL COMMENT &amp;#39;source ip&amp;#39;,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;租户字段&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;config_info_beta&amp;#39;;


CREATE TABLE `config_info_tag` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(128) NOT NULL COMMENT &amp;#39;group_id&amp;#39;,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;tenant_id&amp;#39;,
  `tag_id` varchar(128) NOT NULL COMMENT &amp;#39;tag_id&amp;#39;,
  `app_name` varchar(128) DEFAULT NULL COMMENT &amp;#39;app_name&amp;#39;,
  `content` longtext NOT NULL COMMENT &amp;#39;content&amp;#39;,
  `md5` varchar(32) DEFAULT NULL COMMENT &amp;#39;md5&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  `src_user` text COMMENT &amp;#39;source user&amp;#39;,
  `src_ip` varchar(50) DEFAULT NULL COMMENT &amp;#39;source ip&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;config_info_tag&amp;#39;;


CREATE TABLE `config_tags_relation` (
  `id` bigint(20) NOT NULL COMMENT &amp;#39;id&amp;#39;,
  `tag_name` varchar(128) NOT NULL COMMENT &amp;#39;tag_name&amp;#39;,
  `tag_type` varchar(64) DEFAULT NULL COMMENT &amp;#39;tag_type&amp;#39;,
  `data_id` varchar(255) NOT NULL COMMENT &amp;#39;data_id&amp;#39;,
  `group_id` varchar(128) NOT NULL COMMENT &amp;#39;group_id&amp;#39;,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;tenant_id&amp;#39;,
  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`),
  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;config_tag_relation&amp;#39;;


CREATE TABLE `group_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键ID&amp;#39;,
  `group_id` varchar(128) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;Group ID，空字符表示整个集群&amp;#39;,
  `quota` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;配额，0表示使用默认值&amp;#39;,
  `usage` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;使用量&amp;#39;,
  `max_size` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;单个配置大小上限，单位为字节，0表示使用默认值&amp;#39;,
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;聚合子配置最大个数，，0表示使用默认值&amp;#39;,
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&amp;#39;,
  `max_history_count` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;最大变更历史数量&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_group_id` (`group_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;集群、各Group容量信息表&amp;#39;;


CREATE TABLE `his_config_info` (
  `id` bigint(64) unsigned NOT NULL,
  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) NOT NULL,
  `group_id` varchar(128) NOT NULL,
  `app_name` varchar(128) DEFAULT NULL COMMENT &amp;#39;app_name&amp;#39;,
  `content` longtext NOT NULL,
  `md5` varchar(32) DEFAULT NULL,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text,
  `src_ip` varchar(50) DEFAULT NULL,
  `op_type` char(10) DEFAULT NULL,
  `tenant_id` varchar(128) DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;租户字段&amp;#39;,
  PRIMARY KEY (`nid`),
  KEY `idx_gmt_create` (`gmt_create`),
  KEY `idx_gmt_modified` (`gmt_modified`),
  KEY `idx_did` (`data_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;多租户改造&amp;#39;;


CREATE TABLE `tenant_capacity` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键ID&amp;#39;,
  `tenant_id` varchar(128) NOT NULL DEFAULT &amp;#39;&amp;#39; COMMENT &amp;#39;Tenant ID&amp;#39;,
  `quota` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;配额，0表示使用默认值&amp;#39;,
  `usage` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;使用量&amp;#39;,
  `max_size` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;单个配置大小上限，单位为字节，0表示使用默认值&amp;#39;,
  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;聚合子配置最大个数&amp;#39;,
  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&amp;#39;,
  `max_history_count` int(10) unsigned NOT NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;最大变更历史数量&amp;#39;,
  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &amp;#39;修改时间&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;租户容量信息表&amp;#39;;


CREATE TABLE `tenant_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;id&amp;#39;,
  `kp` varchar(128) NOT NULL COMMENT &amp;#39;kp&amp;#39;,
  `tenant_id` varchar(128) default &amp;#39;&amp;#39; COMMENT &amp;#39;tenant_id&amp;#39;,
  `tenant_name` varchar(128) default &amp;#39;&amp;#39; COMMENT &amp;#39;tenant_name&amp;#39;,
  `tenant_desc` varchar(256) DEFAULT NULL COMMENT &amp;#39;tenant_desc&amp;#39;,
  `create_source` varchar(32) DEFAULT NULL COMMENT &amp;#39;create_source&amp;#39;,
  `gmt_create` bigint(20) NOT NULL COMMENT &amp;#39;创建时间&amp;#39;,
  `gmt_modified` bigint(20) NOT NULL COMMENT &amp;#39;修改时间&amp;#39;,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),
  KEY `idx_tenant_id` (`tenant_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&amp;#39;tenant_info&amp;#39;;

CREATE TABLE `users` (
    `username` varchar(50) NOT NULL PRIMARY KEY,
    `password` varchar(500) NOT NULL,
    `enabled` boolean NOT NULL
);

CREATE TABLE `roles` (
    `username` varchar(50) NOT NULL,
    `role` varchar(50) NOT NULL,
    UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE
);

CREATE TABLE `permissions` (
    `role` varchar(50) NOT NULL,
    `resource` varchar(255) NOT NULL,
    `action` varchar(8) NOT NULL,
    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
);

INSERT INTO users (username, password, enabled) VALUES (&amp;#39;nacos&amp;#39;, &amp;#39;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&amp;#39;, TRUE);

INSERT INTO roles (username, role) VALUES (&amp;#39;nacos&amp;#39;, &amp;#39;ROLE_ADMIN&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;###2 先留取备份
cp application.properties application.properties.bk

vim application.properties

### 在application.properties最后添加以下内容
spring.datasource.platform=mysql

db.num=1
db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;serverTimezone=UTC
db.user=root
db.password=root
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4、开启nacos&#34;&gt;&lt;a href=&#34;#4、开启nacos&#34; class=&#34;headerlink&#34; title=&#34;4、开启nacos&#34;&gt;&lt;/a&gt;4、开启nacos&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;/usr/local/nacos/bin/startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5、查看&#34;&gt;&lt;a href=&#34;#5、查看&#34; class=&#34;headerlink&#34; title=&#34;5、查看&#34;&gt;&lt;/a&gt;5、查看&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;测试之前先关闭防火墙&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMS41Mjo4ODQ4L25hY29z&#34;&gt;http://192.168.1.52:8848/nacos&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;Nacos集群配置&#34;&gt;&lt;a href=&#34;#Nacos集群配置&#34; class=&#34;headerlink&#34; title=&#34;Nacos集群配置&#34;&gt;&lt;/a&gt;Nacos集群配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前提&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#&amp;gt; 1、安装  &lt;a href=&#34;#jdk_install&#34;&gt;jdk&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;#&amp;gt; 2、安装之前必须 配置  &lt;a href=&#34;#mysql_install&#34;&gt;mysql5.6.+&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;#&amp;gt; 3、配置 &lt;a href=&#34;#nginx_install_1&#34;&gt;nginx&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;#&amp;gt; 4、配置 &lt;a href=&#34;#nacos_install_1&#34;&gt;Nacos（单机版-1）&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;懒加载&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我们启动nginx之后可能不会立即开始代理，打开日志等一会，没有结果的时候重配一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;——1-1&#34;&gt;&lt;a href=&#34;#——1-1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;p&gt;#​	* 此例中  &lt;code&gt;nginx:1.16&lt;/code&gt; 安装教程为： &lt;a href=&#34;#nacos_install_1&#34;&gt;Nacos（单机版-1）&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&#34;1、修改集群配置文件&#34;&gt;&lt;a href=&#34;#1、修改集群配置文件&#34; class=&#34;headerlink&#34; title=&#34;1、修改集群配置文件&#34;&gt;&lt;/a&gt;1、修改集群配置文件&lt;/h5&gt;&lt;p&gt;​	这里开始正式配置集群，首先我们要更改   &lt;strong&gt;cluter.conf&lt;/strong&gt;   这个配置文件，当然我们也需要备份，但是这里它的&lt;strong&gt;原始名称&lt;/strong&gt;为：&lt;strong&gt;cluster.conf.example&lt;/strong&gt; ，我们需要把它保留同时复制出一个cluster.conf来进行更改&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：对于要集群启动的所有nacos都要做这步操作&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/nacos/conf

### 先备份
cp cluster.conf.example cluster.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改&lt;code&gt;cluster.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;### 格式： ip地址:端口号
###
### Copyright 1999-2018 Alibaba Group Holding Ltd.
###
### Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
### you may not use this file except in compliance with the License.
### You may obtain a copy of the License at
###
###      http://www.apache.org/licenses/LICENSE-2.0
###
### Unless required by applicable law or agreed to in writing, software
### distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
### WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
### See the License for the specific language governing permissions and
### limitations under the License.
###

###it is ip
###example
###192.168.16.101:8847
###192.168.16.102
###192.168.16.10

###ip:port
192.168.124.133:3333
192.168.124.133:4444
192.168.124.133:5555
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2、编辑Nacos的启动脚本startup-sh&#34;&gt;&lt;a href=&#34;#2、编辑Nacos的启动脚本startup-sh&#34; class=&#34;headerlink&#34; title=&#34;2、编辑Nacos的启动脚本startup.sh&#34;&gt;&lt;/a&gt;2、编辑Nacos的启动脚本startup.sh&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/nacos/bin

### 先备份
cp startup.sh starup.sh.bk
vim  startup.sh 
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;###1  在while 的变量中添加 o 并且在case 中添加对应处理
        o)
            PORT=$OPTARG;;
        
###2  在nohup 和&amp;quot;$JAVA_OPT_EXT_FIX&amp;quot;之前配置这个
     $JAVA -Dserver.port=$&amp;#123;PORT&amp;#125;  
 
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/Nacos-tool/1648643016965.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/15/Nacos-tool/1648643157451.png&#34; class=&#34;&#34;&gt;






&lt;h5 id=&#34;3、配置nginx&#34;&gt;&lt;a href=&#34;#3、配置nginx&#34; class=&#34;headerlink&#34; title=&#34;3、配置nginx&#34;&gt;&lt;/a&gt;3、配置nginx&lt;/h5&gt;&lt;p&gt;下图是http的转发，但是还是TCP 的更好&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    
    upstream  cluster&amp;#123;
    server 192.168.1.52:3333;
    server 192.168.1.52:4444;
    server 192.168.1.52:5555;
    &amp;#125;

    proxy_pass  http://cluter;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;图片中 &lt;code&gt;cluster&lt;/code&gt;写错了 少了一个&lt;code&gt;s&lt;/code&gt; ，其实问题也不大，但是要专业~~&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Nacos-tool/1648643539716.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;TCP格式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;worker_processes  1;

events &amp;#123;
    worker_connections  1024;
&amp;#125;

stream &amp;#123;
      upstream nacos &amp;#123;
        server 192.168.1.52:8848;
        server 192.168.1.52:8868;
        server 192.168.1.52:8888;
      &amp;#125;


     server &amp;#123;
        listen  81;
        proxy_pass nacos;
     &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4、启动Nginx&#34;&gt;&lt;a href=&#34;#4、启动Nginx&#34; class=&#34;headerlink&#34; title=&#34;4、启动Nginx&#34;&gt;&lt;/a&gt;4、启动Nginx&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5、查看测试&#34;&gt;&lt;a href=&#34;#5、查看测试&#34; class=&#34;headerlink&#34; title=&#34;5、查看测试&#34;&gt;&lt;/a&gt;5、查看测试&lt;/h5&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMS41Mi9uYWNvcw==&#34;&gt;http://192.168.1.52:80/nacos&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;6、Nacos持久化&#34;&gt;&lt;a href=&#34;#6、Nacos持久化&#34; class=&#34;headerlink&#34; title=&#34;6、Nacos持久化&#34;&gt;&lt;/a&gt;6、Nacos持久化&lt;/h5&gt;&lt;p&gt;我们在配置的时候没有修改他的数据库，用的是自带的deery，如果是真的要部署要修改成mysql。这个熟悉&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Linux系统上执行SQL脚本，具体位置在nacos目录下的conf中，这里的操作和之前是一样的，我们可以直接打开这个文件然后拷贝到数据库中执行，当然也是要创建数据库使用数据库然后在复制脚本内容，执行即可&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;create database nacos_config;
use nacos_config;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/Nacos-tool/image-20210929175710498.png&#34; class=&#34;&#34;&gt;


&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;修改application.properties配置文件，但是修改之前我们最好做一个备份。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;cp application.properties application.properties.init
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;这里的修改和我们之间的在win上的修改是完全一样的，所以我们只要打开这个文件，加上对应的内容即可&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;spring.datasource.platform=mysql

db.num=1
db.url.0=jdbc:mysql://127.0.0.1:3306/nacos_config?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;serverTimezone=UTC
db.user=root
db.password=123456
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;还要注意一点，如果是一台机子上部署要修改服务端口&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;#*************** Spring Boot Related Configurations ***************#
##### Default web context path:
server.servlet.contextPath=/nacos
##### Default web server port:
###f服务端口
server.port=8888/8868
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.178Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/MySQL-tool/</id>
        <title>MySQL</title>
        <link rel="alternate" href="http://example.com/2022/10/15/MySQL-tool/"/>
        <content type="html">&lt;h3 id=&#34;MySQL安装（Windows）&#34;&gt;&lt;a href=&#34;#MySQL安装（Windows）&#34; class=&#34;headerlink&#34; title=&#34;MySQL安装（Windows）&#34;&gt;&lt;/a&gt;MySQL安装（Windows）&lt;/h3&gt;&lt;h4 id=&#34;【1】MySQL的版本：&#34;&gt;&lt;a href=&#34;#【1】MySQL的版本：&#34; class=&#34;headerlink&#34; title=&#34;【1】MySQL的版本：&#34;&gt;&lt;/a&gt;【1】MySQL的版本：&lt;/h4&gt;&lt;p&gt;近期主要历史版本有5.0&amp;#x2F;5.1&amp;#x2F;5.5&amp;#x2F;5.6&amp;#x2F;5.7，目前最新版本是MySQL8。6.0曾经是个内部试验版本，已取消了。&lt;/p&gt;
&lt;p&gt;MySQL8.0的版本历史&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;2016-09-12第一个DM(development milestone)版本8.0.0发布&lt;/li&gt;
&lt;li&gt;2018-04-19第一个GA(General Availability)版本开始，8.0.11发布&lt;/li&gt;
&lt;li&gt;2018-07-27 8.0.12GA发布&lt;/li&gt;
&lt;li&gt;2018-10-22 8.0.13GA发布&lt;/li&gt;
&lt;li&gt;2019-01-21 8.0.14GA发布&lt;/li&gt;
&lt;li&gt;2019-02-01 8.0.15GA发布&lt;/li&gt;
&lt;li&gt;最新的版本是8.0.18,2019年10月14日正式发布&lt;/li&gt;
&lt;li&gt;….后续更新&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;【2】官方下载地址：&#34;&gt;&lt;a href=&#34;#【2】官方下载地址：&#34; class=&#34;headerlink&#34; title=&#34;【2】官方下载地址：&#34;&gt;&lt;/a&gt;【2】官方下载地址：&lt;/h4&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy93aW5kb3dzL2luc3RhbGxlci84LjAuaHRtbA==&#34;&gt;https://dev.mysql.com/downloads/windows/installer/8.0.html&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646193598821.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;【3】安装过程：&#34;&gt;&lt;a href=&#34;#【3】安装过程：&#34; class=&#34;headerlink&#34; title=&#34;【3】安装过程：&#34;&gt;&lt;/a&gt;【3】安装过程：&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1.双击MySQL安装文件mysql-installer-community-8.0.18.0.msi，出现安装类型选项。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Developer Default：开发者默认&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Server only：只安装服务器端 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Client only：只安装客户端&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full：安装全部选项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom：自定义安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646193860553.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;2.选择，然后继续：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646193913998.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;3.进入产品配置向导，配置多个安装细节，点击Next按钮即可。&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646193920702.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;4.高可靠性High Availability，采用默认选项即可。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Standalone MySQL Server&amp;#x2F;Classic MySQL Replication:独立MySQL服务器&amp;#x2F;经典MySQL复制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;InnoDB Cluster:InnoDB集群&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646193926612.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;5.类型和网络 Type and Networking，采用默认选项即可。记住MySQL的监听端口默认是3306。&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646193950590.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;6.身份验证方法Authentication Method，采用默认选项即可。&lt;/strong&gt;&lt;/p&gt;
 &lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646193956569.png&#34; class=&#34;&#34; width=&#34;1646193956569&#34;&gt;

&lt;p&gt;&lt;strong&gt;7.账户和角色 Accounts and Roles。MySQL管理员账户名称是root，在此处指定root用户的密码。还可以在此处通过Add User按钮添加其他新账户，此处省略该操作。&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646193968510.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;8.Windows服务：Windows Service。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Configure MySQL Server as a Windows Service:给MySQL服务器配置一个服务项。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Windows Service Name:服务名称，采用默认名称MySQL80即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start the MySQL at System Startup：系统启动时开启MySQL服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646193985805.png&#34; class=&#34;&#34;&gt;






&lt;p&gt;&lt;strong&gt;9.Apply Configuration：点击Execute按钮执行开始应用这些配置项。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Writing configuration file: 写配置文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updating Windows Firewall rules：更新Windows防火墙规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adjusting Windows services：调整Windows服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initializing database：初始化数据库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Starting the server： 启动服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applying security setting：应用安全设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Updating the Start menu link：更新开始菜单快捷方式链接&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194015388.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;PS：如果配置出错，查看右侧的log，查看对应错误信息。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;执行完成后，如下图所示。单击Finish完成安装，进入产品配置环节。&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194023800.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;10.产品配置Product Configuration到此结束：点击Next按钮。&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194031356.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;11.安装完成 Installation Complete。点击Finish按钮完成安装。&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194038230.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;【4】MySQL配置、登录&#34;&gt;&lt;a href=&#34;#【4】MySQL配置、登录&#34; class=&#34;headerlink&#34; title=&#34;【4】MySQL配置、登录&#34;&gt;&lt;/a&gt;【4】MySQL配置、登录&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;【1】登录：&lt;/strong&gt;&lt;br&gt;访问MySQL服务器对应的命令：mysql.exe ,位置：C:\Program Files\MySQL\MySQL Server 8.0\bin&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194179663.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;（mysql.exe需要带参数执行，所以直接在图形界面下执行该命令会自动结束）&lt;/p&gt;
&lt;p&gt;打开控制命令台：win+r:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194204312.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;执行mysql.exe命令的时候出现错误：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194212295.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;需要配置环境变量path:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194221073.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;注意：控制命令台必须重启才会生效：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;登录的命令：mysql  -hlocalhost -uroot –p&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mysql：bin目录下的文件mysql.exe。mysql是MySQL的命令行工具，是一个客户端软件，可以对任何主机的mysql服务（即后台运行的mysqld）发起连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-h：host主机名。后面跟要访问的数据库服务器的地址；&lt;strong&gt;如果是登录本机，可以省略&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-u：user 用户名。后面跟登录数据的用户名，第一次安装后以root用户来登录，是MySQL的管理员用户&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;-p:   password 密码。一般不直接输入，而是回车后以保密方式输入。 &lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194262329.png&#34; class=&#34;&#34; width=&#34;1646194262329&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;【2】访问数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;显示MySQL中的数据库列表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;show databases;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 默认有四个自带的数据库，每个数据库中可以有多个数据库表、视图等对象。&lt;/p&gt;
&lt;p&gt;切换当前数据库的命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;use mysql;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL下可以有多个数据库，如果要访问哪个数据库，需要将其置为当前数据库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;该命令的作用就是将数据库mysql（默认提供的四个数据库之一的名字）置为当前数据库&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显示当前数据库的所有数据库表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;show tables;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MySQL 层次：不同项目对应不同的数据库组成 - 每个数据库中有很多表  - 每个表中有很多数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】退出数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;退出数据库可以使用quit或者exit命令完成，也可以用\q;  完成退出操作&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194349092.png&#34; class=&#34;&#34;&gt;






&lt;h4 id=&#34;【5】卸载&#34;&gt;&lt;a href=&#34;#【5】卸载&#34; class=&#34;headerlink&#34; title=&#34;【5】卸载&#34;&gt;&lt;/a&gt;【5】卸载&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;1)停止MySQL服务：在命令行模式下执行net stop mysql或者在Windows服务窗口下停止服务&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194422719.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;2)在控制面板中删除MySQL软件&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1646194431091.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;3)删除软件文件夹：直接删除安装文件夹C:\Program Files\MySQL，其实此时该文件夹已经被删除或者剩下一个空文件夹。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4)删除数据文件夹：直接删除文件夹C:\ProgramData\MySQL。此步不要忘记，否则会影响MySQL的再次安装。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;（ProgramData文件夹可能是隐藏的，显示出来即可）&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;（MySQL文件下的内容才是真正的MySQL中数据）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5)删除path环境变量中关于MySQL安装路径的配置&lt;/strong&gt; &lt;/p&gt;
&lt;h3 id=&#34;MySQL-安装（Linux）&#34;&gt;&lt;a href=&#34;#MySQL-安装（Linux）&#34; class=&#34;headerlink&#34; title=&#34;MySQL 安装（Linux）&#34;&gt;&lt;/a&gt;MySQL 安装（Linux）&lt;/h3&gt;&lt;h4 id=&#34;——1-1&#34;&gt;&lt;a href=&#34;#——1-1&#34; class=&#34;headerlink&#34; title=&#34;——1.1&#34;&gt;&lt;/a&gt;——1.1&lt;/h4&gt;&lt;p&gt;MySQL安装&lt;/p&gt;
&lt;h5 id=&#34;1、卸载原来的版本&#34;&gt;&lt;a href=&#34;#1、卸载原来的版本&#34; class=&#34;headerlink&#34; title=&#34;1、卸载原来的版本&#34;&gt;&lt;/a&gt;1、卸载原来的版本&lt;/h5&gt;&lt;h6 id=&#34;1、查看mysql的安装情况&#34;&gt;&lt;a href=&#34;#1、查看mysql的安装情况&#34; class=&#34;headerlink&#34; title=&#34;1、查看mysql的安装情况&#34;&gt;&lt;/a&gt;1、查看mysql的安装情况&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rpm -qa | grep -i mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1570605325400.png&#34; class=&#34;&#34;&gt;


&lt;h6 id=&#34;2、删除上图安装的软件&#34;&gt;&lt;a href=&#34;#2、删除上图安装的软件&#34; class=&#34;headerlink&#34; title=&#34;2、删除上图安装的软件&#34;&gt;&lt;/a&gt;2、删除上图安装的软件&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rpm -ev --nodeps mysql57-community-release-el5-7.noarch
rpm -ev --nodeps mysql-community-server-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-client-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-libs-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-common-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-libs-compat-5.7.18-1.el5.x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;3、都删除成功之后，查找相关的mysql的文件&#34;&gt;&lt;a href=&#34;#3、都删除成功之后，查找相关的mysql的文件&#34; class=&#34;headerlink&#34; title=&#34;3、都删除成功之后，查找相关的mysql的文件&#34;&gt;&lt;/a&gt;3、都删除成功之后，查找相关的mysql的文件&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;find / -name mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/1570605553095.png&#34; class=&#34;&#34;&gt;


&lt;h6 id=&#34;4、删除全部文件&#34;&gt;&lt;a href=&#34;#4、删除全部文件&#34; class=&#34;headerlink&#34; title=&#34;4、删除全部文件&#34;&gt;&lt;/a&gt;4、删除全部文件&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rm -rf /etc/selinux/targeted/active/modules/100/mysql
rm -rf /root/mysql
rm -rf /root/mysql/data/mysql
rm -rf /var/lib/mysql
rm -rf /var/lib/mysql/mysql
rm -rf /usr/share/mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;5、再次执行命令&#34;&gt;&lt;a href=&#34;#5、再次执行命令&#34; class=&#34;headerlink&#34; title=&#34;5、再次执行命令&#34;&gt;&lt;/a&gt;5、再次执行命令&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;rpm -qa | grep -i mysql
###如果没有显式则表示卸载完成
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2、删除mariadb-libs-不可省略&#34;&gt;&lt;a href=&#34;#2、删除mariadb-libs-不可省略&#34; class=&#34;headerlink&#34; title=&#34;2、删除mariadb-libs(不可省略)&#34;&gt;&lt;/a&gt;2、删除mariadb-libs(不可省略)&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;### 检查mariadb-libs
rpm -qa|grep mariadb
### 卸载mariadb-libs
yum remove mariadb-libs
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3、安装MySQL&#34;&gt;&lt;a href=&#34;#3、安装MySQL&#34; class=&#34;headerlink&#34; title=&#34;3、安装MySQL&#34;&gt;&lt;/a&gt;3、安装MySQL&lt;/h5&gt;&lt;h6 id=&#34;1，输入&#34;&gt;&lt;a href=&#34;#1，输入&#34; class=&#34;headerlink&#34; title=&#34;1，输入&#34;&gt;&lt;/a&gt;1，输入&lt;/h6&gt;&lt;p&gt;wegt &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2dldC9teXNxbCVFNyU4OSU4OCVFNiU5QyVBQyVFNSU4RiVCNy1jb21tdW5pdHktcmVsZWFzZS1lbCVFNSVBNCVBNyVFNyU4OSU4OCVFNiU5QyVBQy0lRTUlQjAlOEYlRTclODklODglRTYlOUMlQUMubm9hcmNoLnJwbQ==&#34;&gt;https://dev.mysql.com/get/mysql版本号-community-release-el大版本-小版本.noarch.rpm&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;wget https://dev.mysql.com/get/mysql57-community-release-el5-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;2、安装数据源&#34;&gt;&lt;a href=&#34;#2、安装数据源&#34; class=&#34;headerlink&#34; title=&#34;2、安装数据源&#34;&gt;&lt;/a&gt;2、安装数据源&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install mysql57-community-release-el5-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;3、查看mysql源是否安装成功&#34;&gt;&lt;a href=&#34;#3、查看mysql源是否安装成功&#34; class=&#34;headerlink&#34; title=&#34;3、查看mysql源是否安装成功&#34;&gt;&lt;/a&gt;3、查看mysql源是否安装成功&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum repolist enabled | grep &amp;quot;mysql.*-community.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;4、安装数据库&#34;&gt;&lt;a href=&#34;#4、安装数据库&#34; class=&#34;headerlink&#34; title=&#34;4、安装数据库&#34;&gt;&lt;/a&gt;4、安装数据库&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install mysql-community-server



### 如果过期可以在运行安装程序之前导入密钥
rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;5、启动mysql&#34;&gt;&lt;a href=&#34;#5、启动mysql&#34; class=&#34;headerlink&#34; title=&#34;5、启动mysql&#34;&gt;&lt;/a&gt;5、启动mysql&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;### centos7
systemctl restart mysqld
systemctl status mysqld


### centos6
service mysqld start

service mysqld status
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;6、显示mysql的随机密码&#34;&gt;&lt;a href=&#34;#6、显示mysql的随机密码&#34; class=&#34;headerlink&#34; title=&#34;6、显示mysql的随机密码&#34;&gt;&lt;/a&gt;6、显示mysql的随机密码&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;grep &amp;#39;temporary password&amp;#39; /var/log/mysqld.log
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/image-20220827193405451.png&#34; class=&#34;&#34;&gt;


&lt;h6 id=&#34;7、登录并修改mysql密码&#34;&gt;&lt;a href=&#34;#7、登录并修改mysql密码&#34; class=&#34;headerlink&#34; title=&#34;7、登录并修改mysql密码&#34;&gt;&lt;/a&gt;7、登录并修改mysql密码&lt;/h6&gt;&lt;p&gt;登录：mysql -u root -p   		然后输入上面生成的密码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;修改自定义密码，设置自己想要的密码&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;密码&amp;#39;;

ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;root&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;失败了的话就修改策略，将策略降低一下就可以了&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看密码策略：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHOW VARIABLES LIKE &amp;#39;validate_password%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改密码策略&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 修改密码长度：（长度）
set global validate_password.length=1;
-- 修改密码等级：（等级）
set global validate_password.policy=0;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4、其他配置&#34;&gt;&lt;a href=&#34;#4、其他配置&#34; class=&#34;headerlink&#34; title=&#34;4、其他配置&#34;&gt;&lt;/a&gt;4、其他配置&lt;/h5&gt;&lt;h6 id=&#34;1-开机自启&#34;&gt;&lt;a href=&#34;#1-开机自启&#34; class=&#34;headerlink&#34; title=&#34;1.开机自启&#34;&gt;&lt;/a&gt;1.开机自启&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;### 开机启动
systemctl enable mysql
### 关闭自动启动
systemctl disable mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;2-远程连接&#34;&gt;&lt;a href=&#34;#2-远程连接&#34; class=&#34;headerlink&#34; title=&#34;2.远程连接&#34;&gt;&lt;/a&gt;2.远程连接&lt;/h6&gt;&lt;h6 id=&#34;方法一、创建一个用户-支持远程连接&#34;&gt;&lt;a href=&#34;#方法一、创建一个用户-支持远程连接&#34; class=&#34;headerlink&#34; title=&#34;方法一、创建一个用户 支持远程连接&#34;&gt;&lt;/a&gt;方法一、创建一个用户 支持远程连接&lt;/h6&gt;&lt;p&gt;①登录 ：mysql -u root -p&lt;/p&gt;
&lt;p&gt;②创建用户： create user ‘aaa‘@’%’ identified by ‘123456’;&lt;/p&gt;
&lt;p&gt;③授权所有权限给user这个新用户 ：grant all on &lt;em&gt;.&lt;/em&gt; to ‘aaa‘@’%’;&lt;/p&gt;
&lt;p&gt;④退出mysql：quit;&lt;/p&gt;
&lt;h6 id=&#34;方法二、设置root用户支持远程连接&#34;&gt;&lt;a href=&#34;#方法二、设置root用户支持远程连接&#34; class=&#34;headerlink&#34; title=&#34;方法二、设置root用户支持远程连接&#34;&gt;&lt;/a&gt;方法二、设置root用户支持远程连接&lt;/h6&gt;&lt;p&gt;①登录：mysql -u root -p （ 注：系统提示输入数据库root用户的密码，输入完成后即进入mysql控制台，这个命令的第一个mysql是执行命令，第二个mysql是系统数据名称，不一样的。）&lt;/p&gt;
&lt;p&gt;②设置权限：&lt;/p&gt;
&lt;p&gt;赋予权限格式： grant 权限 on 数据库对象 to 用户@IP(或者相应正则)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 新建用户规则或者直接修改root用户的规则 ，2 选一
use mysql;

-- 这里表示赋予该用户所有数据库所有表（*.*表示所有表），%表示所有IP地址。
GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;123456&amp;#39; WITH GRANT OPTION;
-- 使root能再任何host访问
update user set host = &amp;#39;%&amp;#39; where user = &amp;#39;root&amp;#39;;      

-- 刷新
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;③查看：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;use mysql;
SELECT HOST,USER FROM USER;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/15/MySQL-tool/920952e9041b4af1a8a49eb64e0f4430.jpeg&#34; class=&#34;&#34;&gt;


&lt;p&gt; ④退出mysql：quit;&lt;/p&gt;
&lt;h4 id=&#34;——2&#34;&gt;&lt;a href=&#34;#——2&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h4&gt;&lt;h5 id=&#34;1、查询镜像&#34;&gt;&lt;a href=&#34;#1、查询镜像&#34; class=&#34;headerlink&#34; title=&#34;1、查询镜像&#34;&gt;&lt;/a&gt;1、查询镜像&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker search mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2、拉取镜像&#34;&gt;&lt;a href=&#34;#2、拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;2、拉取镜像&#34;&gt;&lt;/a&gt;2、拉取镜像&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3、构建容器&#34;&gt;&lt;a href=&#34;#3、构建容器&#34; class=&#34;headerlink&#34; title=&#34;3、构建容器&#34;&gt;&lt;/a&gt;3、构建容器&lt;/h5&gt;&lt;p&gt;先自己创建配置文件基础模板（&lt;strong&gt;要是后期要修改配置文件必须加入 模板中的两个元素，不然容器启动会出错&lt;/strong&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir -p /root/mysql/conf
vim  /root/mysql/conf/my.cnf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;模板内容：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;### Copyright (c) 2016, 2021, Oracle and/or its affiliates.
###
### This program is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License, version 2.0,
### as published by the Free Software Foundation.
###
### This program is also distributed with certain software (including
### but not limited to OpenSSL) that is licensed under separate terms,
### as designated in a particular file or component or in included license
### documentation.  The authors of MySQL hereby grant you an additional
### permission to link the program and your derivative works with the
### separately licensed software that they have included with MySQL.
###
### This program is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License, version 2.0, for more details.
###
### You should have received a copy of the GNU General Public License
### along with this program; if not, write to the Free Software
### Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA


!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mysql.conf.d/

[mysql]
default-character-set=utf8
[mysqld]
character_set_server=utf8
init_connect=&amp;#39;SET NAMES utf8&amp;#39;
lower_case_table_names = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;构建容器&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run \
-p 3306:3306 \
-v /root/mysql/data:/var/lib/mysql \
-v /root/mysql/logs:/logs \
-v /root/.bashrc:/root/.bashrc \
-v /root/mysql/conf/my.cnf:/etc/mysql/my.cnf \
-e MYSQL_ROOT_PASSWORD=root \
--name mysql \
--hostname node1 \
--restart=always \
-d mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：出错时将本地映射文件检查一下，要是不需要配置，只需映射直接删掉就可，以后再改配置文件&lt;/p&gt;
&lt;h5 id=&#34;4、进入容器&#34;&gt;&lt;a href=&#34;#4、进入容器&#34; class=&#34;headerlink&#34; title=&#34;4、进入容器&#34;&gt;&lt;/a&gt;4、进入容器&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it mysql /bin/bash
或者
docker exec -it mysql mysql -uroot -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5、查看远程连接&#34;&gt;&lt;a href=&#34;#5、查看远程连接&#34; class=&#34;headerlink&#34; title=&#34;5、查看远程连接&#34;&gt;&lt;/a&gt;5、查看远程连接&lt;/h5&gt;&lt;p&gt;还有一些方法也可以试一下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;1.赋予权限格式：grant 权限 on 数据库对象 to 用户@IP(或者相应正则)

　　　　注：可以赋予select,delete,update,insert,index等权限精确到某一个数据库某一个表。

　　　　GRANT ALL PRIVILEGES ON *.* TO &amp;#39;用户名&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;密码&amp;#39; WITH GRANT OPTION;
      GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;123456&amp;#39; WITH GRANT OPTION;

　　　　这里表示赋予该用户所有数据库所有表（*.*表示所有表），%表示所有IP地址。

2.刷新权限：FLUSH PRIVILEGES;

3.查看权限：select user,host from mysql.user;

二.意外
　　1.配置文件种指定了blind-address：
#　　　　查看Mysql配置文件种（一般是/etc/my.cnf种）是否指定了blind-address，这表示只能是某个或某几个ip能连接。如果有就将它注释了，前面加#号注释。然后从启mysql。
    　重启mysql：service mysqld restart,如果安装的是Mariadb（我的就是）,则需要使用systemctl restart mariadb.service
    　
    2.防火墙的原因：
　　　　可能会报：ERROR 2003 (HY000): Can&amp;#39;t connect to MySQL server on &amp;#39;你要连接的IP&amp;#39; (111)。

　　　　原因：1.可能是Mysql端口不对（默认是3306），只需加参数 -P 你的端口指定就行；
　　　　
　　　2.还有可能是有防火墙阻止，可以通过telnet来测试（可以直接关闭防火墙）。
　　　　　　　　　　防火墙相关命令：

　　　　　　　　　　　　（1）查看防火墙状态：service  iptables status或者systemctl status firewalld或者firewall-cmd --state

　　　　　　　　　　　　（2）暂时关闭防火墙：systemctl stop firewalld或者service  iptables stop或者systemctl stop firewalld.service

　　　　　　　　　　　　（3）永久关闭防火墙：systemctl disable firewalld或者chkconfig iptables off或者systemctl disable firewalld.service

　　　　　　　　　　　　（4）重启防火墙：systemctl enable firewalld或者service iptables restart  或者systemctl restart firewalld.service

 　　　　　　　　　　　　 (5)永久关闭后重启：chkconfig iptables on

　　

　　3.端口未开启：（我遇到的就是这个原因）
　　　　　　Mysql：ERROR 2003 (HY000) 110（连接超时）

　　　　　　查看你的服务器是否把对应端口打开，未打开启动就行了。　
　　　　　　
   4.Navicat连接MySQL，出现2059 - authentication plugin &amp;#39;caching_sha2_password&amp;#39;的解决方案
      
      0先进入容器，
      docker exec -it mysql mysql -uroot -p
      
#  	1#修改加密规则password是自己的密码，root也是登陆账户，下同。
      use mysql;
    ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;root&amp;#39; PASSWORD EXPIRE NEVER; 
    
##	2 #更新一下用户的密码 
    ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;root&amp;#39;;
    
##	3#刷新权限 
    FLUSH PRIVILEGES; 
    
##	4#更新一下用户的密码
    ALTER USER &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED WITH mysql_native_password BY &amp;#39;root&amp;#39;; 
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.166Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/MyCat-tool/</id>
        <title>MyCat</title>
        <link rel="alternate" href="http://example.com/2022/10/15/MyCat-tool/"/>
        <content type="html">&lt;h2 id=&#34;MyCat（Linux）&#34;&gt;&lt;a href=&#34;#MyCat（Linux）&#34; class=&#34;headerlink&#34; title=&#34;MyCat（Linux）&#34;&gt;&lt;/a&gt;MyCat（Linux）&lt;/h2&gt;&lt;h3 id=&#34;Server安装&#34;&gt;&lt;a href=&#34;#Server安装&#34; class=&#34;headerlink&#34; title=&#34;(Server安装)&#34;&gt;&lt;/a&gt;(Server安装)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;前提：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#* 1、&lt;a href=&#34;#jdk_install&#34;&gt;jdk安装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;#* 2、&lt;a href=&#34;#mysql_install&#34;&gt;mysql安装&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5teWNhdC5vcmcuY24v&#34;&gt;http://www.mycat.org.cn/&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先准备四台虚拟机，安装好mysql，方便后续做读写分离和主从复制。**(3.3内容)**&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;192.168.85.45 node01
192.168.85.46 node02
192.168.85.47 node03
192.168.85.48 node04
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;1、下载MyCat&#34;&gt;&lt;a href=&#34;#1、下载MyCat&#34; class=&#34;headerlink&#34; title=&#34;1、下载MyCat&#34;&gt;&lt;/a&gt;1、下载MyCat&lt;/h4&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RsLm15Y2F0Lm9yZy5jbi8xLjYuNy42LzIwMjEwOTMwMjEzMDQ5L015Y2F0LXNlcnZlci0xLjYuNy42LXJlbGVhc2UtMjAyMTA5MzAyMTMwNDktbGludXgudGFyLmd6&#34;&gt;http://dl.mycat.org.cn/1.6.7.6/20210930213049/Mycat-server-1.6.7.6-release-20210930213049-linux.tar.gz&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;windows下载安装包
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、上传并解压压缩文件&#34;&gt;&lt;a href=&#34;#2、上传并解压压缩文件&#34; class=&#34;headerlink&#34; title=&#34;2、上传并解压压缩文件&#34;&gt;&lt;/a&gt;2、上传并解压压缩文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt; tar -zxvf Mycat-server-1.6.7.5-release-20200422133810-linux.tar.gz -C /usr/local/ 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、修改配置&#34;&gt;&lt;a href=&#34;#3、修改配置&#34; class=&#34;headerlink&#34; title=&#34;3、修改配置&#34;&gt;&lt;/a&gt;3、修改配置&lt;/h4&gt;&lt;p&gt;0、配置环境变量（可选）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim /etc/profile
### 添加如下配置信息：
export MYCAT_HOME=/usr/local/mycat
export PATH=$MYCAT_HOME/bin:$PATH:$JAVA_HOME/bin

### 生效
source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;修改server.xml schema.xml之前先备份&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/mycat

cd conf

cp server.xml server.xml.list
cp schema.xml schema.xml.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1、修改完成后的  &lt;strong&gt;server.xml&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!-- - - Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;); 
        - you may not use this file except in compliance with the License. - You 
        may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0 
        - - Unless required by applicable law or agreed to in writing, software - 
        distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS, - WITHOUT 
        WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the 
        License for the specific language governing permissions and - limitations 
        under the License. --&amp;gt;
&amp;lt;!DOCTYPE mycat:server SYSTEM &amp;quot;server.dtd&amp;quot;&amp;gt;
&amp;lt;mycat:server xmlns:mycat=&amp;quot;http://io.mycat/&amp;quot;&amp;gt;
        &amp;lt;user name=&amp;quot;root&amp;quot; defaultAccount=&amp;quot;true&amp;quot;&amp;gt;
                &amp;lt;property name=&amp;quot;password&amp;quot;&amp;gt;root&amp;lt;/property&amp;gt;
                &amp;lt;property name=&amp;quot;schemas&amp;quot;&amp;gt;TESTDB&amp;lt;/property&amp;gt;
                &amp;lt;property name=&amp;quot;defaultSchema&amp;quot;&amp;gt;TESTDB&amp;lt;/property&amp;gt;
        &amp;lt;/user&amp;gt;
&amp;lt;/mycat:server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、修改完成后的 schema.xml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE mycat:schema SYSTEM &amp;quot;schema.dtd&amp;quot;&amp;gt;
&amp;lt;mycat:schema xmlns:mycat=&amp;quot;http://io.mycat/&amp;quot;&amp;gt;
        &amp;lt;schema name=&amp;quot;TESTDB&amp;quot; checkSQLschema=&amp;quot;false&amp;quot; sqlMaxLimit=&amp;quot;100&amp;quot; dataNode=&amp;quot;dn1&amp;quot;&amp;gt;
        &amp;lt;/schema&amp;gt;
        &amp;lt;dataNode name=&amp;quot;dn1&amp;quot; dataHost=&amp;quot;host1&amp;quot; database=&amp;quot;msb&amp;quot; /&amp;gt;
        &amp;lt;dataHost name=&amp;quot;host1&amp;quot; maxCon=&amp;quot;1000&amp;quot; minCon=&amp;quot;10&amp;quot; balance=&amp;quot;0&amp;quot;
                          writeType=&amp;quot;0&amp;quot; dbType=&amp;quot;mysql&amp;quot; dbDriver=&amp;quot;native&amp;quot; switchType=&amp;quot;1&amp;quot;  slaveThreshold=&amp;quot;100&amp;quot;&amp;gt;
                &amp;lt;heartbeat&amp;gt;select user()&amp;lt;/heartbeat&amp;gt;
                &amp;lt;writeHost host=&amp;quot;hostM1&amp;quot; url=&amp;quot;192.168.1.45:3306&amp;quot; user=&amp;quot;root&amp;quot;
                                   password=&amp;quot;root&amp;quot;&amp;gt;
                         &amp;lt;readHost host=&amp;quot;hostS1&amp;quot; url=&amp;quot;192.168.1.46:3306&amp;quot; user=&amp;quot;root&amp;quot; password=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/readHost&amp;gt;
                &amp;lt;/writeHost&amp;gt;
        &amp;lt;/dataHost&amp;gt;
&amp;lt;/mycat:schema&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3、修改 &lt;strong&gt;hosts&lt;/strong&gt;  文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim /etc/hosts

###添加
###ip name
192.168.1.164 node01
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、启动mycat&#34;&gt;&lt;a href=&#34;#4、启动mycat&#34; class=&#34;headerlink&#34; title=&#34;4、启动mycat&#34;&gt;&lt;/a&gt;4、启动mycat&lt;/h4&gt;&lt;p&gt;​		mycat的启动有两种方式，一种是控制台启动，一种是后台启动，在初学的时候建议大家使用控制台启动的方式，当配置文件写错之后，可以方便的看到错误，及时修改，但是在生产环境中，使用后台启动的方式比较稳妥。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;控制台启动：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usrlocal/mycat/bin
./mycat console

###加入环境变量后可直接启动
mycat console
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		&lt;strong&gt;后台启动：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usrlocal/mycat/bin
./mycat start

###加入环境变量后可直接启动
mycat start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		按照如上配置在安装的时候应该不会报错，如果出现错误，根据错误的提示解决即可。&lt;/p&gt;
&lt;h4 id=&#34;5、登录验证&#34;&gt;&lt;a href=&#34;#5、登录验证&#34; class=&#34;headerlink&#34; title=&#34;5、登录验证&#34;&gt;&lt;/a&gt;5、登录验证&lt;/h4&gt;&lt;p&gt;​		&lt;strong&gt;管理窗口的登录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		从另外的虚拟机去登录访问当前mycat，输入如下命令即可&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql -uroot -proot -P 9066 -h ip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		此时访问的是mycat的管理窗口，可以通过show @@help查看可以执行的命令&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;数据窗口的登录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		从另外的虚拟机去登录访问mycat，输入命令如下：【用户设置】&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql -uroot -proot -P8066 -h ip
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​		当都能够成功的时候以为着mycat已经搭建完成。&lt;/p&gt;
&lt;h3 id=&#34;mycat-web&#34;&gt;&lt;a href=&#34;#mycat-web&#34; class=&#34;headerlink&#34; title=&#34;mycat-web&#34;&gt;&lt;/a&gt;mycat-web&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;h5 id=&#34;1、下载mycat-web安装包&#34;&gt;&lt;a href=&#34;#1、下载mycat-web安装包&#34; class=&#34;headerlink&#34; title=&#34;1、下载mycat-web安装包&#34;&gt;&lt;/a&gt;1、下载mycat-web安装包&lt;/h5&gt;&lt;p&gt;​	官方地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RsLm15Y2F0Lm9yZy5jbi8=&#34;&gt;http://dl.mycat.org.cn/&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;2、解压安装包到-x2F-usr-x2F-local目录&#34;&gt;&lt;a href=&#34;#2、解压安装包到-x2F-usr-x2F-local目录&#34; class=&#34;headerlink&#34; title=&#34;2、解压安装包到&amp;#x2F;usr&amp;#x2F;local目录&#34;&gt;&lt;/a&gt;2、解压安装包到&amp;#x2F;usr&amp;#x2F;local目录&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;tar -zxvf Mycat-web-1.0-SNAPSHOT-20170102153329-linux.tar.gz -C /usr/local/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、进入mycat-web的目录运行启动命令&#34;&gt;&lt;a href=&#34;#3、进入mycat-web的目录运行启动命令&#34; class=&#34;headerlink&#34; title=&#34;3、进入mycat-web的目录运行启动命令&#34;&gt;&lt;/a&gt;3、进入mycat-web的目录运行启动命令&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    ./start.sh &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、mycat-web的服务端口是8082，查看服务是否启动&#34;&gt;&lt;a href=&#34;#4、mycat-web的服务端口是8082，查看服务是否启动&#34; class=&#34;headerlink&#34; title=&#34;4、mycat-web的服务端口是8082，查看服务是否启动&#34;&gt;&lt;/a&gt;4、mycat-web的服务端口是8082，查看服务是否启动&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    netstat -nlpt | grep 8082
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、通过地址访问服务&#34;&gt;&lt;a href=&#34;#5、通过地址访问服务&#34; class=&#34;headerlink&#34; title=&#34;5、通过地址访问服务&#34;&gt;&lt;/a&gt;5、通过地址访问服务&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    192.168.1.164:8082/mycat/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6、mycat-web配置&#34;&gt;&lt;a href=&#34;#6、mycat-web配置&#34; class=&#34;headerlink&#34; title=&#34;6、mycat-web配置&#34;&gt;&lt;/a&gt;6、mycat-web配置&lt;/h4&gt;&lt;h5 id=&#34;6-1、配置zookeeper-可选&#34;&gt;&lt;a href=&#34;#6-1、配置zookeeper-可选&#34; class=&#34;headerlink&#34; title=&#34;6.1、配置zookeeper(可选)&#34;&gt;&lt;/a&gt;6.1、配置zookeeper(可选)&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd /usr/local/mycat-web/mycat-web/WEB-INF/classes

###修改mycat.properties文件，可以修改zookeeper的地址
vim mycat.properties
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-2、添加mycat实例&#34;&gt;&lt;a href=&#34;#6-2、添加mycat实例&#34; class=&#34;headerlink&#34; title=&#34;6.2、添加mycat实例&#34;&gt;&lt;/a&gt;6.2、添加mycat实例&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;* 在页面的mycat配置

* mycat服务管理中添加mycat实例，需要填写相关的参数
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.160Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Keepalived-tool/</id>
        <title>Keepalived</title>
        <link rel="alternate" href="http://example.com/2022/10/15/Keepalived-tool/"/>
        <content type="html">&lt;h3 id=&#34;Keepalived安装&#34;&gt;&lt;a href=&#34;#Keepalived安装&#34; class=&#34;headerlink&#34; title=&#34;Keepalived安装&#34;&gt;&lt;/a&gt;Keepalived安装&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;h5 id=&#34;1、准备好Keepalived安装包&#34;&gt;&lt;a href=&#34;#1、准备好Keepalived安装包&#34; class=&#34;headerlink&#34; title=&#34;1、准备好Keepalived安装包&#34;&gt;&lt;/a&gt;1、准备好Keepalived安装包&lt;/h5&gt;&lt;h5 id=&#34;2、解压到-x2F-usr-x2F-local目录&#34;&gt;&lt;a href=&#34;#2、解压到-x2F-usr-x2F-local目录&#34; class=&#34;headerlink&#34; title=&#34;2、解压到&amp;#x2F;usr&amp;#x2F;local目录&#34;&gt;&lt;/a&gt;2、解压到&amp;#x2F;usr&amp;#x2F;local目录&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;tar -zxvf /usr/local/tmp/keepalived-1.4.5.tar.gz -C /usr/local/
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3、安装需要依赖的环境组件&#34;&gt;&lt;a href=&#34;#3、安装需要依赖的环境组件&#34; class=&#34;headerlink&#34; title=&#34;3、安装需要依赖的环境组件&#34;&gt;&lt;/a&gt;3、安装需要依赖的环境组件&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;yum install gcc openssl-devel popt-devel -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4、进入到解压目录，进行编译&#34;&gt;&lt;a href=&#34;#4、进入到解压目录，进行编译&#34; class=&#34;headerlink&#34; title=&#34;4、进入到解压目录，进行编译&#34;&gt;&lt;/a&gt;4、进入到解压目录，进行编译&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;cd /usr/local/keepalived-1.4.5
./configure --prefix=/usr/local/keepalived	
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5、编译完成之后，进行安装&#34;&gt;&lt;a href=&#34;#5、编译完成之后，进行安装&#34; class=&#34;headerlink&#34; title=&#34;5、编译完成之后，进行安装&#34;&gt;&lt;/a&gt;5、编译完成之后，进行安装&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6、将keepalived的服务注册为系统服务&#34;&gt;&lt;a href=&#34;#6、将keepalived的服务注册为系统服务&#34; class=&#34;headerlink&#34; title=&#34;6、将keepalived的服务注册为系统服务&#34;&gt;&lt;/a&gt;6、将keepalived的服务注册为系统服务&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cp  -rf   /usr/local/keepalived-1.4.5/keepalived/etc/init.d/keepalived /etc/init.d/
mkdir /etc/keepalived
cp   -rf  /usr/local/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/
cp   -rf  /usr/local/keepalived-1.4.5/keepalived/etc/sysconfig/keepalived /etc/sysconfig/
cp   -rf  /usr/local/keepalived/sbin/keepalived /usr/sbin/
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;7、修改配置文件&#34;&gt;&lt;a href=&#34;#7、修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;7、修改配置文件&#34;&gt;&lt;/a&gt;7、修改配置文件&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;vim  /etc/keepalived/keepalived.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CentOS-6   下的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;! Configuration File for keepalived
global_defs &amp;#123;
   notification_email &amp;#123;
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   &amp;#125;
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 127.0.0.1
   smtp_connect_timeout 30
   router_id LVS_DEVEL
   vrrp_skip_check_adv_addr
   vrrp_garp_interval 0
   vrrp_gna_interval 0
&amp;#125;

vrrp_instance VI_1 &amp;#123;
##	# 配置为主
    state MASTER
#    # 设置网卡
    interface eth0
#     # 虚拟路由ID，全局唯一
    virtual_router_id 51
#    # 优先级，权重值
    priority 100
    advert_int 1
    authentication &amp;#123;
        auth_type PASS
        auth_pass 1111
    &amp;#125;
    virtual_ipaddress &amp;#123;
         192.168.1.100/24  dev eth0 label eth0:3:
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;CentOS-7   下的配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;conf&#34;&gt;! Configuration File for keepalived
global_defs &amp;#123;
   notification_email &amp;#123;
     acassen@firewall.loc
     failover@firewall.loc
     sysadmin@firewall.loc
   &amp;#125;
   notification_email_from Alexandre.Cassen@firewall.loc
   smtp_server 127.0.0.1
   smtp_connect_timeout 30
   router_id LVS_DEVEL
   vrrp_skip_check_adv_addr
   vrrp_garp_interval 0
   vrrp_gna_interval 0
&amp;#125;

vrrp_instance VI_1 &amp;#123;
##	# 配置为主
    state MASTER
#    # 设置网卡
    interface ens33
#     # 虚拟路由ID，全局唯一
    virtual_router_id 51
#    # 优先级，权重值
    priority 100
    advert_int 1
    authentication &amp;#123;
        auth_type PASS
        auth_pass 1111
    &amp;#125;
    virtual_ipaddress &amp;#123;
        192.168.1.100/24 
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;8、启动keepalived&#34;&gt;&lt;a href=&#34;#8、启动keepalived&#34; class=&#34;headerlink&#34; title=&#34;8、启动keepalived&#34;&gt;&lt;/a&gt;8、启动keepalived&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;service keepalived start
###或者
systemctl start keepalived.service
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9、登录验证&#34;&gt;&lt;a href=&#34;#9、登录验证&#34; class=&#34;headerlink&#34; title=&#34;9、登录验证&#34;&gt;&lt;/a&gt;9、登录验证&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mysql -uroot -p123456 -h 192.168.1.100 -P 48066
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.149Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Kafka-tool/</id>
        <title>Kafka</title>
        <link rel="alternate" href="http://example.com/2022/10/15/Kafka-tool/"/>
        <content type="html">&lt;h3 id=&#34;Kafka-安装&#34;&gt;&lt;a href=&#34;#Kafka-安装&#34; class=&#34;headerlink&#34; title=&#34;Kafka 安装&#34;&gt;&lt;/a&gt;Kafka 安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;安装前提，kafka安装运行最低支持jdk7；本篇演示版本是基于jdk1.8；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;官方下载地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly9rYWZrYS5hcGFjaGUub3JnL2Rvd25sb2Fkcw==&#34;&gt;Apache Kafka&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;kafka 是由scala语言编写，下载稳定版本，即前一个版本&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/v2-9f6503ade62cfa48df87cc9da984e87d_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击进入后，按如下方式点击下载&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/v2-bd19bea83d1cb978fbeed614ee126da6_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;下载完成后进行解压缩&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;tar -zxvf kafka_2.12-2.8.0.tgz 
mv kafka_2.12-2.8.0 /usr/local/kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解压完成后进入kafka目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;cd /usr/local/kafka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/v2-dfe360dfc7561953761f8ce69f782f4d_720w.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;kafka 是基于 Zookeeper 的消息管理系统，所以启动的时候是需要使用到 Zookeeper ，但其内置了Zookeeper ，所以只需要根据bin目录下的文件进行启动即可&lt;/p&gt;
&lt;p&gt;启动Zookeeper 服务端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;./bin/zookeeper-server-start.sh ./config/zookeeper.properties 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Zookeeper 启动成功后会出现 &lt;code&gt;binding to port 0.0.0.0/0.0.0.0:2181&lt;/code&gt; 所示结果表示启动成功；&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://pic1.zhimg.com/80/v2-6be2f91cd4ec47d589d3c5b58584c4b8_720w.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;启动kafka服务端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt; ./bin/kafka-server-start.sh  ./config/server.properties
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.146Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/JRebel-tool/</id>
        <title>JRebel安装</title>
        <link rel="alternate" href="http://example.com/2022/10/15/JRebel-tool/"/>
        <content type="html">&lt;h3 id=&#34;资料在网盘里面&#34;&gt;&lt;a href=&#34;#资料在网盘里面&#34; class=&#34;headerlink&#34; title=&#34;资料在网盘里面&#34;&gt;&lt;/a&gt;资料在网盘里面&lt;/h3&gt;</content>
        <updated>2022-10-15T04:52:38.145Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/IDEA-tool/</id>
        <title>IDEA-tool</title>
        <link rel="alternate" href="http://example.com/2022/10/15/IDEA-tool/"/>
        <content type="html">&lt;h2 id=&#34;常用插件&#34;&gt;&lt;a href=&#34;#常用插件&#34; class=&#34;headerlink&#34; title=&#34;常用插件&#34;&gt;&lt;/a&gt;常用插件&lt;/h2&gt;&lt;h4 id=&#34;皮肤&#34;&gt;&lt;a href=&#34;#皮肤&#34; class=&#34;headerlink&#34; title=&#34;皮肤&#34;&gt;&lt;/a&gt;皮肤&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;所有Jetbrains全家桶都适用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;Cyan-Light-Theme&#34;&gt;&lt;a href=&#34;#Cyan-Light-Theme&#34; class=&#34;headerlink&#34; title=&#34;Cyan Light Theme&#34;&gt;&lt;/a&gt;Cyan Light Theme&lt;/h5&gt;&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220721202846958-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;Vuesion-Theme&#34;&gt;&lt;a href=&#34;#Vuesion-Theme&#34; class=&#34;headerlink&#34; title=&#34;Vuesion Theme&#34;&gt;&lt;/a&gt;Vuesion Theme&lt;/h5&gt;&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220721203729737-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;One-Dark-Theme&#34;&gt;&lt;a href=&#34;#One-Dark-Theme&#34; class=&#34;headerlink&#34; title=&#34;One Dark Theme&#34;&gt;&lt;/a&gt;One Dark Theme&lt;/h5&gt;&lt;img data-src=&#34;/2022/10/15/IDEA-tool/img-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;Atom-Material-ICons&#34;&gt;&lt;a href=&#34;#Atom-Material-ICons&#34; class=&#34;headerlink&#34; title=&#34;Atom Material ICons&#34;&gt;&lt;/a&gt;Atom Material ICons&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;文件夹图标修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220721202830248-1665745616515.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;Maven-Helper&#34;&gt;&lt;a href=&#34;#Maven-Helper&#34; class=&#34;headerlink&#34; title=&#34;Maven Helper ******&#34;&gt;&lt;/a&gt;Maven Helper ******&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;查看Maven依赖，如果存在依赖冲突会直接爆红，很方便。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220721203551163-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;MybatisX&#34;&gt;&lt;a href=&#34;#MybatisX&#34; class=&#34;headerlink&#34; title=&#34;MybatisX&#34;&gt;&lt;/a&gt;MybatisX&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这个不用多说懂的都懂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;Lombok&#34;&gt;&lt;a href=&#34;#Lombok&#34; class=&#34;headerlink&#34; title=&#34;Lombok&#34;&gt;&lt;/a&gt;Lombok&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;这个不用多说懂的都懂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;JRebel-and-XRebel&#34;&gt;&lt;a href=&#34;#JRebel-and-XRebel&#34; class=&#34;headerlink&#34; title=&#34;JRebel and XRebel&#34;&gt;&lt;/a&gt;JRebel and XRebel&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;热部署工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;RestfulToolkits&#34;&gt;&lt;a href=&#34;#RestfulToolkits&#34; class=&#34;headerlink&#34; title=&#34;RestfulToolkits&#34;&gt;&lt;/a&gt;RestfulToolkits&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;可以直接根据URL查看本地的对应Controller，也可以当做Postman用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220721203331392-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;GsonFormat&#34;&gt;&lt;a href=&#34;#GsonFormat&#34; class=&#34;headerlink&#34; title=&#34;GsonFormat&#34;&gt;&lt;/a&gt;GsonFormat&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;可以帮助我们快速的将JSON对象转换为Bean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;Rainbow-Brakets&#34;&gt;&lt;a href=&#34;#Rainbow-Brakets&#34; class=&#34;headerlink&#34; title=&#34;Rainbow Brakets&#34;&gt;&lt;/a&gt;Rainbow Brakets&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;彩虹括号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;arthas-idea&#34;&gt;&lt;a href=&#34;#arthas-idea&#34; class=&#34;headerlink&#34; title=&#34;arthas idea&#34;&gt;&lt;/a&gt;arthas idea&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Arthas阿里开源的一款强大的JAVA在线诊断工具&lt;/p&gt;
&lt;p&gt;缺点：需要输入一段很长的命令，如果有遗忘的话就去查看文档&lt;br&gt;这款插件就直接解决了这些问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;VisualGC&#34;&gt;&lt;a href=&#34;#VisualGC&#34; class=&#34;headerlink&#34; title=&#34;VisualGC&#34;&gt;&lt;/a&gt;VisualGC&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;诊断JVM堆栈工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;Zoolytic&#34;&gt;&lt;a href=&#34;#Zoolytic&#34; class=&#34;headerlink&#34; title=&#34;Zoolytic&#34;&gt;&lt;/a&gt;Zoolytic&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;一款Zookeeper结点查看分析插件。其实第三方也有一些工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;SequenceDiagram&#34;&gt;&lt;a href=&#34;#SequenceDiagram&#34; class=&#34;headerlink&#34; title=&#34;SequenceDiagram&#34;&gt;&lt;/a&gt;SequenceDiagram&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;作用：快速查看某个方法的时序图，作用就是在我们查看项目源码时，查看方法的流程&lt;/p&gt;
&lt;p&gt;注：只能查看我们自己写的源码，不能查看JDK的源码运行流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;具体步骤&#34;&gt;&lt;a href=&#34;#具体步骤&#34; class=&#34;headerlink&#34; title=&#34;具体步骤&#34;&gt;&lt;/a&gt;具体步骤&lt;/h5&gt;&lt;p&gt;1、点击&lt;strong&gt;方法名&lt;/strong&gt; ，然后右键点击 &lt;code&gt;SequenceDiagram&lt;/code&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220727211446055-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;2、配置我们的生成策略&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220727212313180-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220727211659767-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;除了策略配置我们最常用的就还是最后一个保存为 .plantUML 文件，配合 &lt;code&gt;PlantUML Integration&lt;/code&gt; 删除或者添加一下注解 更加完善我们的流程图&lt;/p&gt;
&lt;h4 id=&#34;PlantUML-Integration&#34;&gt;&lt;a href=&#34;#PlantUML-Integration&#34; class=&#34;headerlink&#34; title=&#34;PlantUML Integration&#34;&gt;&lt;/a&gt;PlantUML Integration&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;作用：通过代码形式来写时序图，主要还是配合 SquenceDiagram&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;插件下载成功之后我们可以右键直接new出来 .PlantUML文件，自己直接写时序图，但是效率低不推荐还是配合Sequence吧&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220727212819103-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;推荐一个 Sequence 和 PlantUML 二合一的应用：Sourcetrail ，有点难用，关键是英文，但是真的好用，等我死磕！！！&lt;/p&gt;
&lt;p&gt;具体操作百度一下就行了&lt;/p&gt;
&lt;h4 id=&#34;Easy-Code&#34;&gt;&lt;a href=&#34;#Easy-Code&#34; class=&#34;headerlink&#34; title=&#34;Easy Code&#34;&gt;&lt;/a&gt;Easy Code&lt;/h4&gt;&lt;p&gt; 自动生成作为为我自己常用的架构层次以及命名规则，在快速生产中没有他人硬性标准的情况下，不用额外配置，由于MybatisPlus的逆向工程(这老哥还要写那一套重复代码麻烦，我就鼠标点点！！！)&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;下载完成之后，修改一下原来的配置模板文档(无脑粘贴没毛病)&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220821181239253-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;controller&#34;&gt;&lt;a href=&#34;#controller&#34; class=&#34;headerlink&#34; title=&#34;controller&#34;&gt;&lt;/a&gt;controller&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;####导入宏定义
$!&amp;#123;define.vm&amp;#125;

####设置表后缀（宏定义）
####setTableSuffix(&amp;quot;Controller&amp;quot;)

####保存文件（宏定义）
####save(&amp;quot;/controller&amp;quot;, &amp;quot;Controller.java&amp;quot;)

####包路径（宏定义）
####setPackageSuffix(&amp;quot;controller&amp;quot;)

####定义服务名
####set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), &amp;quot;Service&amp;quot;))

####定义实体对象名
####set($entityName = $!tool.firstLowerCase($!tableInfo.name))

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.api.ApiController;
import com.baomidou.mybatisplus.extension.api.R;
import org.springframework.beans.factory.annotation.Autowired;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import $!&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!tableInfo.name;
import $!&amp;#123;tableInfo.savePackageName&amp;#125;.service.$!&amp;#123;tableInfo.name&amp;#125;Service;
import org.springframework.web.bind.annotation.*;

import java.io.Serializable;
import java.util.List;

####表注释（宏定义）
####tableComment(&amp;quot;表控制层&amp;quot;)
@RestController
@RequestMapping(&amp;quot;/$!tool.firstLowerCase($!tableInfo.name)&amp;quot;)
public class $!&amp;#123;tableName&amp;#125; &amp;#123;
    /**
     * 服务对象
     */
    @Autowired
    private $!&amp;#123;tableInfo.name&amp;#125;Service $!&amp;#123;serviceName&amp;#125;;

    
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;entity&#34;&gt;&lt;a href=&#34;#entity&#34; class=&#34;headerlink&#34; title=&#34;entity&#34;&gt;&lt;/a&gt;entity&lt;/h5&gt;&lt;p&gt;我的实体类一般都叫pojo， 其中要整合MybatisPlus因为我在模板里面加了一个他的注解@TableName&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;   &amp;lt;!--MybatisPlus--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;####导入宏定义
$!&amp;#123;define.vm&amp;#125;

####保存文件（宏定义）
####save(&amp;quot;/pojo&amp;quot;, &amp;quot;.java&amp;quot;)

####包路径（宏定义）
####setPackageSuffix(&amp;quot;pojo&amp;quot;)

####自动导入包（全局变量）
$!&amp;#123;autoImport.vm&amp;#125;
import com.baomidou.mybatisplus.extension.activerecord.Model;
import java.io.Serializable;
import lombok.*;
import com.baomidou.mybatisplus.annotation.TableName;
import com.baomidou.mybatisplus.annotation.TableField;

####表注释（宏定义）
####tableComment(&amp;quot;表实体类&amp;quot;)

@AllArgsConstructor
@NoArgsConstructor
@Date
@ToString
@TableName(value = &amp;quot;$!&amp;#123;tableInfo.name&amp;#125;&amp;quot;)
public class $!&amp;#123;tableInfo.name&amp;#125; implements Serializable &amp;#123;
####foreach($column in $tableInfo.fullColumn)
    /**
    * ##if($&amp;#123;column.comment&amp;#125;)$&amp;#123;column.comment&amp;#125;##end
    
    */ 
    @TableField($tool.hump2Underline($!&amp;#123;column.name&amp;#125;))
    private $!&amp;#123;tool.getClsNameByFullName($column.type)&amp;#125; $!&amp;#123;column.name&amp;#125;;
    
####end

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;Service&#34;&gt;&lt;a href=&#34;#Service&#34; class=&#34;headerlink&#34; title=&#34;Service&#34;&gt;&lt;/a&gt;Service&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;####导入宏定义
$!&amp;#123;define.vm&amp;#125;

####设置表后缀（宏定义）
####setTableSuffix(&amp;quot;Service&amp;quot;)

####保存文件（宏定义）
####save(&amp;quot;/service&amp;quot;, &amp;quot;Service.java&amp;quot;)

####包路径（宏定义）
####setPackageSuffix(&amp;quot;service&amp;quot;)

import com.baomidou.mybatisplus.extension.service.IService;
import $!&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!tableInfo.name;

####表注释（宏定义）
####tableComment(&amp;quot;表服务接口&amp;quot;)
public interface $!&amp;#123;tableName&amp;#125; extends IService&amp;lt;$!tableInfo.name&amp;gt; &amp;#123;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;ServiceImpl&#34;&gt;&lt;a href=&#34;#ServiceImpl&#34; class=&#34;headerlink&#34; title=&#34;ServiceImpl&#34;&gt;&lt;/a&gt;ServiceImpl&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;####导入宏定义
$!&amp;#123;define.vm&amp;#125;

####设置表后缀（宏定义）
####setTableSuffix(&amp;quot;ServiceImpl&amp;quot;)

####保存文件（宏定义）
####save(&amp;quot;/service/impl&amp;quot;, &amp;quot;ServiceImpl.java&amp;quot;)

####包路径（宏定义）
####setPackageSuffix(&amp;quot;service.impl&amp;quot;)

import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import $!&amp;#123;tableInfo.savePackageName&amp;#125;.mapper.$!&amp;#123;tableInfo.name&amp;#125;Mapper;
import $!&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!&amp;#123;tableInfo.name&amp;#125;;
import $!&amp;#123;tableInfo.savePackageName&amp;#125;.service.$!&amp;#123;tableInfo.name&amp;#125;Service;
import org.springframework.stereotype.Service;

####表注释（宏定义）
####tableComment(&amp;quot;表服务实现类&amp;quot;)
@Service(&amp;quot;$!tool.firstLowerCase($tableInfo.name)Service&amp;quot;)
public class $!&amp;#123;tableName&amp;#125; extends ServiceImpl&amp;lt;$!&amp;#123;tableInfo.name&amp;#125;Mapper, $!&amp;#123;tableInfo.name&amp;#125;&amp;gt; implements $!&amp;#123;tableInfo.name&amp;#125;Service &amp;#123;
    @Autowired
    private $!&amp;#123;tableInfo.name&amp;#125;Mapper $tool.firstLowerCase($!&amp;#123;tableInfo.name&amp;#125;)Mapper;
    
    
    
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;Dao-x2F-Mapper-java&#34;&gt;&lt;a href=&#34;#Dao-x2F-Mapper-java&#34; class=&#34;headerlink&#34; title=&#34;Dao  &amp;#x2F;  Mapper.java&#34;&gt;&lt;/a&gt;Dao  &amp;#x2F;  Mapper.java&lt;/h5&gt;&lt;p&gt;我习惯叫mapper层，文件也是以 *Mapper 结尾&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;####导入宏定义
$!&amp;#123;define.vm&amp;#125;

####设置表后缀（宏定义）
####setTableSuffix(&amp;quot;Mapper&amp;quot;)

####保存文件（宏定义）
####save(&amp;quot;/mapper&amp;quot;, &amp;quot;Mapper.java&amp;quot;)

####包路径（宏定义）
####setPackageSuffix(&amp;quot;mapper&amp;quot;)

import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import $!&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!tableInfo.name;
import org.apache.ibatis.annotations.Mapper;

####表注释（宏定义）
####tableComment(&amp;quot;表数据库访问层&amp;quot;)

@Mapper
public interface $!&amp;#123;tableName&amp;#125; extends BaseMapper&amp;lt;$!tableInfo.name&amp;gt; &amp;#123;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;Mapper-xml-映射文件，自己创建一下&#34;&gt;&lt;a href=&#34;#Mapper-xml-映射文件，自己创建一下&#34; class=&#34;headerlink&#34; title=&#34;Mapper.xml(映射文件，自己创建一下)&#34;&gt;&lt;/a&gt;Mapper.xml(映射文件，自己创建一下)&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;####引入mybatis支持
$!&amp;#123;mybatisSupport.vm&amp;#125;

####设置保存名称与保存位置
$!callback.setFileName($tool.append($!&amp;#123;tableInfo.name&amp;#125;, &amp;quot;Mapper.xml&amp;quot;))
$!callback.setSavePath($tool.append($modulePath, &amp;quot;/src/main/resources/mapper&amp;quot;))

####拿到主键
####if(!$tableInfo.pkColumn.isEmpty())
#    ##set($pk = $tableInfo.pkColumn.get(0))
####end
#### 拿到全索引列，用‘，’间隔
##set($sqlCloumn=&amp;quot;##foreach($column in $tableInfo.fullColumn)$!column.name##if($!foreach.hasNext) ,##end ##end&amp;quot;)

&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE mapper PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;$&amp;#123;tableInfo.savePackageName&amp;#125;.mapper.$!&amp;#123;tableInfo.name&amp;#125;Mapper&amp;quot;&amp;gt;

    &amp;lt;sql id=&amp;quot;All$!&amp;#123;tableInfo.name&amp;#125;Column&amp;quot;&amp;gt;$sqlCloumn&amp;lt;/sql&amp;gt;   
    &amp;lt;resultMap type=&amp;quot;$&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!&amp;#123;tableInfo.name&amp;#125;&amp;quot; id=&amp;quot;$!&amp;#123;tableInfo.name&amp;#125;Map&amp;quot;&amp;gt;
####foreach($column in $tableInfo.fullColumn)
        &amp;lt;result property=&amp;quot;$!column.name&amp;quot; column=&amp;quot;$!column.obj.name&amp;quot; /&amp;gt;
####end
    &amp;lt;/resultMap&amp;gt;
    
    

&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;设置快捷操作&#34;&gt;&lt;a href=&#34;#设置快捷操作&#34; class=&#34;headerlink&#34; title=&#34;设置快捷操作***&#34;&gt;&lt;/a&gt;设置快捷操作***&lt;/h5&gt;&lt;p&gt;直接导入我的JSON文件即可，将以下内容保存为.json文件并进行导入&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220823220304489-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;#123;
  &amp;quot;author&amp;quot; : &amp;quot;makejava&amp;quot;,
  &amp;quot;version&amp;quot; : &amp;quot;1.2.6&amp;quot;,
  &amp;quot;userSecure&amp;quot; : &amp;quot;&amp;quot;,
  &amp;quot;currTypeMapperGroupName&amp;quot; : &amp;quot;Default&amp;quot;,
  &amp;quot;currTemplateGroupName&amp;quot; : &amp;quot;MybatisPlus&amp;quot;,
  &amp;quot;currColumnConfigGroupName&amp;quot; : &amp;quot;Default&amp;quot;,
  &amp;quot;currGlobalConfigGroupName&amp;quot; : &amp;quot;Default&amp;quot;,
  &amp;quot;typeMapper&amp;quot; : &amp;#123; &amp;#125;,
  &amp;quot;template&amp;quot; : &amp;#123;
    &amp;quot;MybatisPlus&amp;quot; : &amp;#123;
      &amp;quot;name&amp;quot; : &amp;quot;MybatisPlus&amp;quot;,
      &amp;quot;elementList&amp;quot; : [ &amp;#123;
        &amp;quot;name&amp;quot; : &amp;quot;controller.java.vm&amp;quot;,
        &amp;quot;code&amp;quot; : &amp;quot;##导入宏定义\n$!&amp;#123;define.vm&amp;#125;\n\n##设置表后缀（宏定义）\n##setTableSuffix(\&amp;quot;Controller\&amp;quot;)\n\n##保存文件（宏定义）\n##save(\&amp;quot;/controller\&amp;quot;, \&amp;quot;Controller.java\&amp;quot;)\n\n##包路径（宏定义）\n##setPackageSuffix(\&amp;quot;controller\&amp;quot;)\n\n##定义服务名\n##set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \&amp;quot;Service\&amp;quot;))\n\n##定义实体对象名\n##set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.api.ApiController;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!tableInfo.name;\nimport $!&amp;#123;tableInfo.savePackageName&amp;#125;.service.$!&amp;#123;tableInfo.name&amp;#125;Service;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.io.Serializable;\nimport java.util.List;\n\n##表注释（宏定义）\n##tableComment(\&amp;quot;表控制层\&amp;quot;)\n@RestController\n@RequestMapping(\&amp;quot;/$!tool.firstLowerCase($!tableInfo.name)\&amp;quot;)\npublic class $!&amp;#123;tableName&amp;#125; &amp;#123;\n    /**\n     * 服务对象\n     */\n    @Autowired\n    private $!&amp;#123;tableInfo.name&amp;#125;Service $!&amp;#123;serviceName&amp;#125;;\n\n    \n&amp;#125;\n&amp;quot;
      &amp;#125;, &amp;#123;
        &amp;quot;name&amp;quot; : &amp;quot;entity.java.vm&amp;quot;,
        &amp;quot;code&amp;quot; : &amp;quot;##导入宏定义\n$!&amp;#123;define.vm&amp;#125;\n\n##保存文件（宏定义）\n##save(\&amp;quot;/pojo\&amp;quot;, \&amp;quot;.java\&amp;quot;)\n\n##包路径（宏定义）\n##setPackageSuffix(\&amp;quot;pojo\&amp;quot;)\n\n##自动导入包（全局变量）\n$!&amp;#123;autoImport.vm&amp;#125;\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\nimport lombok.*;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport com.baomidou.mybatisplus.annotation.TableField;\n\n##表注释（宏定义）\n##tableComment(\&amp;quot;表实体类\&amp;quot;)\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@ToString\n@TableName(value = \&amp;quot;$tool.hump2Underline($!&amp;#123;tableInfo.name&amp;#125;)\&amp;quot;)\npublic class $!&amp;#123;tableInfo.name&amp;#125; implements Serializable &amp;#123;\n##foreach($column in $tableInfo.fullColumn)\n    /**\n    * ##if($&amp;#123;column.comment&amp;#125;)$&amp;#123;column.comment&amp;#125;##end\n    \n    */ \n    @TableField(\&amp;quot;$tool.hump2Underline($!&amp;#123;column.name&amp;#125;)\&amp;quot;)\n    private $!&amp;#123;tool.getClsNameByFullName($column.type)&amp;#125; $!&amp;#123;column.name&amp;#125;;\n    \n##end\n\n&amp;#125;\n&amp;quot;
      &amp;#125;, &amp;#123;
        &amp;quot;name&amp;quot; : &amp;quot;service.java.vm&amp;quot;,
        &amp;quot;code&amp;quot; : &amp;quot;##导入宏定义\n$!&amp;#123;define.vm&amp;#125;\n\n##设置表后缀（宏定义）\n##setTableSuffix(\&amp;quot;Service\&amp;quot;)\n\n##保存文件（宏定义）\n##save(\&amp;quot;/service\&amp;quot;, \&amp;quot;Service.java\&amp;quot;)\n\n##包路径（宏定义）\n##setPackageSuffix(\&amp;quot;service\&amp;quot;)\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!tableInfo.name;\n\n##表注释（宏定义）\n##tableComment(\&amp;quot;表服务接口\&amp;quot;)\npublic interface $!&amp;#123;tableName&amp;#125; extends IService&amp;lt;$!tableInfo.name&amp;gt; &amp;#123;\n\n&amp;#125;\n&amp;quot;
      &amp;#125;, &amp;#123;
        &amp;quot;name&amp;quot; : &amp;quot;serviceImpl.java.vm&amp;quot;,
        &amp;quot;code&amp;quot; : &amp;quot;##导入宏定义\n$!&amp;#123;define.vm&amp;#125;\n\n##设置表后缀（宏定义）\n##setTableSuffix(\&amp;quot;ServiceImpl\&amp;quot;)\n\n##保存文件（宏定义）\n##save(\&amp;quot;/service/impl\&amp;quot;, \&amp;quot;ServiceImpl.java\&amp;quot;)\n\n##包路径（宏定义）\n##setPackageSuffix(\&amp;quot;service.impl\&amp;quot;)\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!&amp;#123;tableInfo.savePackageName&amp;#125;.mapper.$!&amp;#123;tableInfo.name&amp;#125;Mapper;\nimport $!&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!&amp;#123;tableInfo.name&amp;#125;;\nimport $!&amp;#123;tableInfo.savePackageName&amp;#125;.service.$!&amp;#123;tableInfo.name&amp;#125;Service;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n##tableComment(\&amp;quot;表服务实现类\&amp;quot;)\n@Service(\&amp;quot;$!tool.firstLowerCase($tableInfo.name)Service\&amp;quot;)\npublic class $!&amp;#123;tableName&amp;#125; extends ServiceImpl&amp;lt;$!&amp;#123;tableInfo.name&amp;#125;Mapper, $!&amp;#123;tableInfo.name&amp;#125;&amp;gt; implements $!&amp;#123;tableInfo.name&amp;#125;Service &amp;#123;\n    @Autowired\n    private $!&amp;#123;tableInfo.name&amp;#125;Mapper $tool.firstLowerCase($!&amp;#123;tableInfo.name&amp;#125;)Mapper;\n    \n    \n    \n&amp;#125;\n&amp;quot;
      &amp;#125;, &amp;#123;
        &amp;quot;name&amp;quot; : &amp;quot;mapper.java.vm&amp;quot;,
        &amp;quot;code&amp;quot; : &amp;quot;##导入宏定义\n$!&amp;#123;define.vm&amp;#125;\n\n##设置表后缀（宏定义）\n##setTableSuffix(\&amp;quot;Mapper\&amp;quot;)\n\n##保存文件（宏定义）\n##save(\&amp;quot;/mapper\&amp;quot;, \&amp;quot;Mapper.java\&amp;quot;)\n\n##包路径（宏定义）\n##setPackageSuffix(\&amp;quot;mapper\&amp;quot;)\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!tableInfo.name;\nimport org.apache.ibatis.annotations.Mapper;\n\n##表注释（宏定义）\n##tableComment(\&amp;quot;表数据库访问层\&amp;quot;)\n\n@Mapper\npublic interface $!&amp;#123;tableName&amp;#125; extends BaseMapper&amp;lt;$!tableInfo.name&amp;gt; &amp;#123;\n\n&amp;#125;\n&amp;quot;
      &amp;#125;, &amp;#123;
        &amp;quot;name&amp;quot; : &amp;quot;mapper.xml.vm&amp;quot;,
        &amp;quot;code&amp;quot; : &amp;quot;##引入mybatis支持\n$!&amp;#123;mybatisSupport.vm&amp;#125;\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!&amp;#123;tableInfo.name&amp;#125;, \&amp;quot;Mapper.xml\&amp;quot;))\n$!callback.setSavePath($tool.append($modulePath, \&amp;quot;/src/main/resources/mapper\&amp;quot;))\n\n##拿到主键\n##if(!$tableInfo.pkColumn.isEmpty())\n    ##set($pk = $tableInfo.pkColumn.get(0))\n##end\n## 拿到全索引列，用‘，’间隔\n##set($sqlCloumn=\&amp;quot;##foreach($column in $tableInfo.fullColumn)$tool.hump2Underline($!column.name)##if($!foreach.hasNext) ,##end ##end\&amp;quot;)\n\n&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;UTF-8\&amp;quot;?&amp;gt;\n&amp;lt;!DOCTYPE mapper PUBLIC \&amp;quot;-//mybatis.org//DTD Mapper 3.0//EN\&amp;quot; \&amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd\&amp;quot;&amp;gt;\n&amp;lt;mapper namespace=\&amp;quot;$&amp;#123;tableInfo.savePackageName&amp;#125;.mapper.$!&amp;#123;tableInfo.name&amp;#125;Mapper\&amp;quot;&amp;gt;\n\n    &amp;lt;sql id=\&amp;quot;All$!&amp;#123;tableInfo.name&amp;#125;Column\&amp;quot;&amp;gt;$sqlCloumn&amp;lt;/sql&amp;gt;   \n    &amp;lt;resultMap type=\&amp;quot;$&amp;#123;tableInfo.savePackageName&amp;#125;.pojo.$!&amp;#123;tableInfo.name&amp;#125;\&amp;quot; id=\&amp;quot;$!&amp;#123;tableInfo.name&amp;#125;Map\&amp;quot;&amp;gt;\n##foreach($column in $tableInfo.fullColumn)\n        &amp;lt;result property=\&amp;quot;$!column.name\&amp;quot; column=\&amp;quot;$!column.obj.name\&amp;quot; /&amp;gt;\n##end\n    &amp;lt;/resultMap&amp;gt;\n    \n    \n\n&amp;lt;/mapper&amp;gt;\n&amp;quot;
      &amp;#125; ]
    &amp;#125;
  &amp;#125;,
  &amp;quot;columnConfig&amp;quot; : &amp;#123; &amp;#125;,
  &amp;quot;globalConfig&amp;quot; : &amp;#123; &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;注意&#34;&gt;&lt;a href=&#34;#注意&#34; class=&#34;headerlink&#34; title=&#34;注意&#34;&gt;&lt;/a&gt;注意&lt;/h5&gt;&lt;p&gt;一定要选择你的Module、包路径、Path，因为它们分别对应的是你模板中的三个参数modulePath、tableInfo.savePackageName、我们所有的Save都是以Path的路径为根路径&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220823215323871-1665745616515.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;未完成&#34;&gt;&lt;a href=&#34;#未完成&#34; class=&#34;headerlink&#34; title=&#34;未完成&#34;&gt;&lt;/a&gt;未完成&lt;/h4&gt;&lt;h2 id=&#34;设置&#34;&gt;&lt;a href=&#34;#设置&#34; class=&#34;headerlink&#34; title=&#34;设置&#34;&gt;&lt;/a&gt;设置&lt;/h2&gt;&lt;h4 id=&#34;Service窗口&#34;&gt;&lt;a href=&#34;#Service窗口&#34; class=&#34;headerlink&#34; title=&#34;Service窗口&#34;&gt;&lt;/a&gt;Service窗口&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在微服务项目中，我们在创建多个模块后，想要启动特定的几个寻找起来非常麻烦我们这个时候就可以通过Service窗口快速找到我们的启动类&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/image-20220724161332641.png&#34; class=&#34;&#34; title=&#34;image-20220724161332641&#34;&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;具体步骤-1&#34;&gt;&lt;a href=&#34;#具体步骤-1&#34; class=&#34;headerlink&#34; title=&#34;具体步骤&#34;&gt;&lt;/a&gt;具体步骤&lt;/h5&gt;&lt;p&gt;1：开启idea，右下角会显示下图&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/726e3c50b51442839ca357fa23bef649.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;2、点击Show run configurations in Services&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/f90f6ac3965943209d1761bc12e3bd03.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;最终效果图如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/IDEA-tool/5649373054b74c3da30cc18febb3a01c.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;未完成-1&#34;&gt;&lt;a href=&#34;#未完成-1&#34; class=&#34;headerlink&#34; title=&#34;未完成&#34;&gt;&lt;/a&gt;未完成&lt;/h4&gt;</content>
        <updated>2022-10-15T04:52:38.136Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/HDFS-tool/</id>
        <title>HDFS安装</title>
        <link rel="alternate" href="http://example.com/2022/10/15/HDFS-tool/"/>
        <content type="html">&lt;h3 id=&#34;HDFS安装&#34;&gt;&lt;a href=&#34;#HDFS安装&#34; class=&#34;headerlink&#34; title=&#34;HDFS安装&#34;&gt;&lt;/a&gt;HDFS安装&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;h4 id=&#34;——2&#34;&gt;&lt;a href=&#34;#——2&#34; class=&#34;headerlink&#34; title=&#34;——2&#34;&gt;&lt;/a&gt;——2&lt;/h4&gt;&lt;p&gt;1.拉取Hadoop镜像（可以在docker hub上找合适的镜像）：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull singularities/hadoop
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.创建docker-compose.yml文件（可以在文本编辑器中写好后，复制），内容如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;version: &amp;quot;2&amp;quot;

services:
  namenode:
    image: singularities/hadoop
    command: start-hadoop namenode
    environment:
      HDFS_USER: hdfsuser
    ports:
      - &amp;quot;8020:8020&amp;quot;
      - &amp;quot;14000:14000&amp;quot;
      - &amp;quot;50070:50070&amp;quot;
      - &amp;quot;10020:10020&amp;quot;
      - &amp;quot;13562:13562&amp;quot;
      - &amp;quot;19888:19888&amp;quot;
  datanode:
    image: singularities/hadoop
    command: start-hadoop datanode namenode
    environment:
      HDFS_USER: hdfsuser
    links:
      - namenode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.创建hadoop，执行如下命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose up -d
docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.开启多个datanode&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose scale datanode=3
docker ps
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.查看hadoop控制面板。由于服务刚初始化，可能需要等一会。访问类似如下url：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;#http://192.168.1.195:50070/dfshealth.html#tab-datanode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6.进入任意hadoop相关容器，&lt;strong&gt;直接进行hdfs基础操作&lt;/strong&gt;&lt;br&gt;在任意datanode的容器中操作hdfs，会自动同步到其他的datanode容器中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;### 查看所有命令
hadoop fs
### 创建目录
#hadoop fs -mkdir /hdfs #在根目录下创建hdfs文件夹
### 查看目录
#hadoop fs -ls  /   #列出根目录下的文件列表
### 创建多级目录
hadoop fs -mkdir -p /hdfs/d1/d2
### 上传文件到HDFS
#echo &amp;quot;hello world&amp;quot; &amp;gt;&amp;gt; local.txt   #创建文件
#hadoop fs -put local.txt /hdfs/   #上传文件到hdfs
### 下载hdfs文件
hadoop fs -get /hdfs/local.txt
### 删除hdfs中的文件
hadoop fs -rm /hdfs/local.txt
### 删除hdfs中的目录
hadoop fs -rmdir /hdfs/d1/d2
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.132Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/HAProxy-tool/</id>
        <title>HAProxy安装</title>
        <link rel="alternate" href="http://example.com/2022/10/15/HAProxy-tool/"/>
        <content type="html">&lt;h4 id=&#34;HAProxy安装&#34;&gt;&lt;a href=&#34;#HAProxy安装&#34; class=&#34;headerlink&#34; title=&#34;HAProxy安装&#34;&gt;&lt;/a&gt;HAProxy安装&lt;/h4&gt;&lt;h5 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h5&gt;&lt;h6 id=&#34;1、准备好HAProxy的安装包&#34;&gt;&lt;a href=&#34;#1、准备好HAProxy的安装包&#34; class=&#34;headerlink&#34; title=&#34;1、准备好HAProxy的安装包&#34;&gt;&lt;/a&gt;1、准备好HAProxy的安装包&lt;/h6&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcmMuZmVkb3JhcHJvamVjdC5vcmcvcmVwby9wa2dzL2hhcHJveHkv&#34;&gt;https://src.fedoraproject.org/repo/pkgs/haproxy/&lt;/span&gt;&lt;/p&gt;
&lt;h6 id=&#34;2、解压到-x2F-usr-x2F-local目录&#34;&gt;&lt;a href=&#34;#2、解压到-x2F-usr-x2F-local目录&#34; class=&#34;headerlink&#34; title=&#34;2、解压到&amp;#x2F;usr&amp;#x2F;local目录&#34;&gt;&lt;/a&gt;2、解压到&amp;#x2F;usr&amp;#x2F;local目录&lt;/h6&gt;&lt;h6 id=&#34;3、进入到解压后的目录，查看内核版本，进行编译&#34;&gt;&lt;a href=&#34;#3、进入到解压后的目录，查看内核版本，进行编译&#34; class=&#34;headerlink&#34; title=&#34;3、进入到解压后的目录，查看内核版本，进行编译&#34;&gt;&lt;/a&gt;3、进入到解压后的目录，查看内核版本，进行编译&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;cd cd /usr/local/haproxy-1.8.25/

### 查看内核版本3.10=31
uname -r

make TARGET=linux31
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;4、编译完成之后，开始进行安装&#34;&gt;&lt;a href=&#34;#4、编译完成之后，开始进行安装&#34; class=&#34;headerlink&#34; title=&#34;4、编译完成之后，开始进行安装&#34;&gt;&lt;/a&gt;4、编译完成之后，开始进行安装&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;make install PREFIX=/usr/local/haproxy
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;5、安装完成之后，创建目录，创建HAProxy配置文件&#34;&gt;&lt;a href=&#34;#5、安装完成之后，创建目录，创建HAProxy配置文件&#34; class=&#34;headerlink&#34; title=&#34;5、安装完成之后，创建目录，创建HAProxy配置文件&#34;&gt;&lt;/a&gt;5、安装完成之后，创建目录，创建HAProxy配置文件&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir -p /usr/data/haproxy
mkdir /usr/local/haproxy/conf
vi /usr/local/haproxy/conf、haproxy.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6、向配置文件中添加配置信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    global
        log 127.0.0.1 local0
##		#log 127.0.0.1 local1 notice
##		#log loghost local0 info
        maxconn 4096
        chroot /usr/local/haproxy
        pidfile /usr/data/haproxy/haproxy.pid
        uid 99
        gid 99
        daemon
##		#debug
##		#quiet
defaults
        log global
        mode tcp
        option abortonclose
        option redispatch
        retries 3
        maxconn 2000
        timeout connect 5000
        timeout client 50000
        timeout server 50000
listen proxy_status
    bind :48066
        mode tcp
        balance roundrobin
        server mycat_1 192.168.85.111:8066 check inter 10s
        server mycat_2 192.168.85.112:8066 check inter 10s
frontend admin_stats
    bind :7777
        mode http
        stats enable
        option httplog
        maxconn 10
        stats refresh 30s
        stats uri /admin
        stats auth admin:123123
        stats hide-version
        stats admin if TRUE
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;stats uri &amp;#x2F;admin                   		   &lt;strong&gt;账号&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;stats auth admin:123123       	   &lt;strong&gt;密码&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;7、启动haproxy服务&#34;&gt;&lt;a href=&#34;#7、启动haproxy服务&#34; class=&#34;headerlink&#34; title=&#34;7、启动haproxy服务&#34;&gt;&lt;/a&gt;7、启动haproxy服务&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    /usr/local/haproxy/sbin/haproxy -f /usr/local/haproxy/conf/haproxy.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;8、查看haproxy的进程，如果存在则说明没有问题&#34;&gt;&lt;a href=&#34;#8、查看haproxy的进程，如果存在则说明没有问题&#34; class=&#34;headerlink&#34; title=&#34;8、查看haproxy的进程，如果存在则说明没有问题&#34;&gt;&lt;/a&gt;8、查看haproxy的进程，如果存在则说明没有问题&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;    ps -ef | grep haproxy
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9、打开浏览器访问-用户名为admin，密码为123123&#34;&gt;&lt;a href=&#34;#9、打开浏览器访问-用户名为admin，密码为123123&#34; class=&#34;headerlink&#34; title=&#34;9、打开浏览器访问,用户名为admin，密码为123123&#34;&gt;&lt;/a&gt;9、打开浏览器访问,用户名为admin，密码为123123&lt;/h6&gt;&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguMS4xNjQ6Nzc3Ny9hZG1pbg==&#34;&gt;http://192.168.1.164:7777/admin&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2022-10-15T04:52:38.129Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Erlang-tool/</id>
        <title>Erlang</title>
        <link rel="alternate" href="http://example.com/2022/10/15/Erlang-tool/"/>
        <content type="html">&lt;h3 id=&#34;Erlang安装&#34;&gt;&lt;a href=&#34;#Erlang安装&#34; class=&#34;headerlink&#34; title=&#34;Erlang安装&#34;&gt;&lt;/a&gt;&lt;strong&gt;Erlang安装&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h4&gt;&lt;p&gt;​	RabbitMQ是使用Erlang语言编写的，所以需要先配置Erlang&lt;/p&gt;
&lt;h5 id=&#34;1-修改主机名&#34;&gt;&lt;a href=&#34;#1-修改主机名&#34; class=&#34;headerlink&#34; title=&#34;1 修改主机名&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;修改主机名&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	RabbitMQ是通过主机名进行访问的，必须指定能访问的主机名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  vim /etc/sysconfig/network
  
  添加
  NETWORKING=yes
#  HOSTNAME=node-1 #名字可以随意
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/RabbitMQ-06.jpg&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    vim /etc/hosts
  
    ip network_hostname
eg: 192.168.1.195 node-1  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	新添加了一行，前面为服务器ip，空格后面添加计算机主机名&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/RabbitMQ-07.jpg&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;2-安装依赖&#34;&gt;&lt;a href=&#34;#2-安装依赖&#34; class=&#34;headerlink&#34; title=&#34;2 安装依赖&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;安装依赖&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;  yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC unixODBC-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-上传并解压&#34;&gt;&lt;a href=&#34;#3-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;3 上传并解压&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	上传otp_src_22.0.tar.gz到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp目录中，进入目录并解压。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 解压时注意，此压缩包不具有gzip属性，解压参数没有z，只有xf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  tar xf otp_src_22.0.tar.gz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-配置参数&#34;&gt;&lt;a href=&#34;#4-配置参数&#34; class=&#34;headerlink&#34; title=&#34;4 配置参数&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;配置参数&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	先新建&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;erlang文件夹，作为安装文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  mkdir -p /usr/local/erlang
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 进入文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd otp_src_22.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 配置参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;5-编译并安装&#34;&gt;&lt;a href=&#34;#5-编译并安装&#34; class=&#34;headerlink&#34; title=&#34;5 编译并安装&#34;&gt;&lt;/a&gt;5 &lt;strong&gt;编译并安装&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	编译 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-修改环境变量&#34;&gt;&lt;a href=&#34;#6-修改环境变量&#34; class=&#34;headerlink&#34; title=&#34;6 修改环境变量&#34;&gt;&lt;/a&gt;6 &lt;strong&gt;修改环境变量&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	修改&amp;#x2F;etc&amp;#x2F;profile文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 在文件中添加下面代码 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/erlang/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	运行文件，让修改内容生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;7-查看配置是否成功&#34;&gt;&lt;a href=&#34;#7-查看配置是否成功&#34; class=&#34;headerlink&#34; title=&#34;7 查看配置是否成功&#34;&gt;&lt;/a&gt;7 &lt;strong&gt;查看配置是否成功&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;  erl -version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/RabbitMQ-08.jpg&#34;&gt;&lt;/p&gt;
</content>
        <updated>2022-10-15T04:52:38.124Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/docker-tool/</id>
        <title>docker安装</title>
        <link rel="alternate" href="http://example.com/2022/10/15/docker-tool/"/>
        <content type="html">&lt;h3 id=&#34;Docker安装（Linux）&#34;&gt;&lt;a href=&#34;#Docker安装（Linux）&#34; class=&#34;headerlink&#34; title=&#34;Docker安装（Linux）&#34;&gt;&lt;/a&gt;Docker安装（Linux）&lt;/h3&gt;&lt;p&gt;docker官网，自己选定自己的Linux版本，按照官方文档配置即可，以下CentOS7的&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==&#34;&gt;https://docs.docker.com/engine/install/centos/&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;1、卸载原有的环境：&#34;&gt;&lt;a href=&#34;#1、卸载原有的环境：&#34; class=&#34;headerlink&#34; title=&#34;1、卸载原有的环境：&#34;&gt;&lt;/a&gt;1、卸载原有的环境：&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-selinux \
                  docker-engine-selinux \
                  docker-engine
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、安装对应的依赖环境和镜像地址&#34;&gt;&lt;a href=&#34;#2、安装对应的依赖环境和镜像地址&#34; class=&#34;headerlink&#34; title=&#34;2、安装对应的依赖环境和镜像地址&#34;&gt;&lt;/a&gt;2、安装对应的依赖环境和镜像地址&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum install -y yum-utils 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;官方安装(慢)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装过慢设置镜像 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum-config-manager \ --add-repo \ http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、直接安装docker-CE&#34;&gt;&lt;a href=&#34;#3、直接安装docker-CE&#34; class=&#34;headerlink&#34; title=&#34;3、直接安装docker CE&#34;&gt;&lt;/a&gt;3、直接安装docker CE&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo yum install -y docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;报错时，大概率为&lt;strong&gt;镜像仓库问题&lt;/strong&gt; ，直接执行 &lt;strong&gt;步骤五&lt;/strong&gt; 的补充，再安装&lt;/p&gt;
&lt;h4 id=&#34;4、启动docker服务&#34;&gt;&lt;a href=&#34;#4、启动docker服务&#34; class=&#34;headerlink&#34; title=&#34;4、启动docker服务&#34;&gt;&lt;/a&gt;4、启动docker服务&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo systemctl start docker 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、查看docker的版本&#34;&gt;&lt;a href=&#34;#5、查看docker的版本&#34; class=&#34;headerlink&#34; title=&#34;5、查看docker的版本&#34;&gt;&lt;/a&gt;5、查看docker的版本&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo docker version 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;**补充：通过官方的镜像地址下载docker会比较慢， **&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置阿里云的镜像地址： &lt;strong&gt;经历过3的镜像库问题也就是配置阿里云镜像地址&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;yum更新下即可：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;yum makecache fast 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6、开机启动docker&#34;&gt;&lt;a href=&#34;#6、开机启动docker&#34; class=&#34;headerlink&#34; title=&#34;6、开机启动docker&#34;&gt;&lt;/a&gt;6、开机启动docker&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;补充：docker pull 下载镜像太慢，更换源进行网络加速的解决方案&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;步骤1：
sudo mkdir -p /etc/docker

步骤2：
sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
&amp;#123;
  &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://glhlrb75.mirror.aliyuncs.com&amp;quot;]
&amp;#125;
EOF
或者（老师的）
sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
&amp;#123; 
    &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://v9j5rufo.mirror.aliyuncs.com&amp;quot;] 
&amp;#125;
EOF

步骤3：
sudo systemctl daemon-reload

步骤4：
sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7、使用&#34;&gt;&lt;a href=&#34;#7、使用&#34; class=&#34;headerlink&#34; title=&#34;7、使用&#34;&gt;&lt;/a&gt;7、使用&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_25760623/article/details/88657491&#34;&gt;&lt;strong&gt;阿里云安装docker：&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1NzYwNjIzL2FydGljbGUvZGV0YWlscy84ODY1NzQ5MQ==&#34;&gt;https://blog.csdn.net/qq_25760623/article/details/88657491&lt;/span&gt; &lt;/p&gt;
&lt;h3 id=&#34;Docker-Compose安装（Linux）&#34;&gt;&lt;a href=&#34;#Docker-Compose安装（Linux）&#34; class=&#34;headerlink&#34; title=&#34;Docker-Compose安装（Linux）&#34;&gt;&lt;/a&gt;Docker-Compose安装（Linux）&lt;/h3&gt;&lt;h4 id=&#34;方式一&#34;&gt;&lt;a href=&#34;#方式一&#34; class=&#34;headerlink&#34; title=&#34;方式一&#34;&gt;&lt;/a&gt;方式一&lt;/h4&gt;&lt;p&gt;官网地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZQ==&#34;&gt;https://docs.docker.com/compose&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;#&lt;strong&gt;推荐&lt;/strong&gt;： 国内地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dldC5kYW9jbG91ZC5pby8jaW5zdGFsbC1jb21wb3Nl&#34;&gt;http://get.daocloud.io/#install-compose&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo curl -L &amp;quot;https://github.com/docker/compose/releases/download/1.29.2/docker- compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;速度比较慢的话使用下面的地址： &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.0/docker- compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改文件夹权限 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;建立软连接 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;校验是否安装成功&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose --version
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;方式二&#34;&gt;&lt;a href=&#34;#方式二&#34; class=&#34;headerlink&#34; title=&#34;方式二&#34;&gt;&lt;/a&gt;方式二&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;手动下载 docker-compose 到本地，然后上传到 linux 服务器的 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;bin 路径下&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）百度网盘：链接: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMW9fMlhzSUxmd2NBN21Sbi1mN0Exd0E=&#34;&gt;https://pan.baidu.com/s/1o_2XsILfwcA7mRn-f7A1wA&lt;/span&gt; 提取码: qiue  —— 网盘中 docker-compose 版本：2.2.2&lt;/p&gt;
&lt;p&gt;（2）也可以去GitHub上下：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3JlbGVhc2Vz&#34;&gt;https://github.com/docker/compose/releases&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/docker-tool/1376119-20211222005944642-1364547608.png&#34; class=&#34;&#34;&gt;




&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;重命名：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;mv docker-compose-linux-x86_64 docker-compose&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;授权：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; chmod +x .&amp;#x2F;docker-compose &lt;/p&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;查看版本：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;docker-compose –version&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/docker-tool/1376119-20211222005757511-1189151957.png&#34; class=&#34;&#34;&gt;










&lt;h4 id=&#34;升级（方式三）&#34;&gt;&lt;a href=&#34;#升级（方式三）&#34; class=&#34;headerlink&#34; title=&#34;升级（方式三）&#34;&gt;&lt;/a&gt;升级（方式三）&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;下载，命令如下👇：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo curl -L https://get.daocloud.io/docker/compose/releases/download/1.26.2/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#&amp;gt; 因Github国内访问不太稳定所以使用DaoCloud提供加速：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dldC5kYW9jbG91ZC5pby8jaW5zdGFsbC1jb21wb3Nl&#34;&gt;链接&lt;/span&gt;，你&lt;strong&gt;可以通过URL中的版本号，自定义下载你所需要的版本文件。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对命令进行一个授权&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;查看compose版本命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose --version
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;卸载&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;sudo rm /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:52:38.118Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Maven-tool/</id>
        <title>Maven-tool</title>
        <link rel="alternate" href="http://example.com/2022/10/15/Maven-tool/"/>
        <content type="html">&lt;h3 id=&#34;Maven-安装&#34;&gt;&lt;a href=&#34;#Maven-安装&#34; class=&#34;headerlink&#34; title=&#34;Maven 安装&#34;&gt;&lt;/a&gt;Maven 安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;要是新版本 &lt;code&gt;IDEA&lt;/code&gt; 则不需要修改 &lt;code&gt;Maven&lt;/code&gt; , &lt;code&gt;IDEA&lt;/code&gt;中默认整合了 &lt;code&gt;Maven&lt;/code&gt;，只不过是版本问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/2022/10/15/Maven-tool/image-20220513150641401.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;下载地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL21hdmVuLmFwYWNoZS5vcmcv&#34;&gt;http://maven.apache.org/&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Maven-tool/image-20220513150648442.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/15/Maven-tool/image-20220513150655417.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;目录结构：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Maven-tool/image-20220513150703248.png&#34; class=&#34;&#34;&gt;



&lt;p&gt;bin：存放的是执行文件，命令&lt;br&gt;在IDEA中可以直接集成Maven:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/15/Maven-tool/image-20220513150710943.png&#34; class=&#34;&#34;&gt;



&lt;p&gt;conf目录：下面有一个非常重要的配置文件–》settings.xml—》maven的核心配置文件&amp;#x2F;全局配置文件。&lt;/p&gt;
&lt;div name=&#34;.m2_create&#34;&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;如果没有 &lt;code&gt;.m2&lt;/code&gt; 目录 ，自己手动执行mvn命令：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;mvn help:system
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;远程仓库&#34;&gt;&lt;a href=&#34;#远程仓库&#34; class=&#34;headerlink&#34; title=&#34;远程仓库&#34;&gt;&lt;/a&gt;远程仓库&lt;/h4&gt;&lt;p&gt;默认的远程仓库使用的Apache提供的中央仓库：&lt;br&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tdm5yZXBvc2l0b3J5LmNvbS8=&#34;&gt;https://mvnrepository.com/&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;仓库配置&#34;&gt;&lt;a href=&#34;#仓库配置&#34; class=&#34;headerlink&#34; title=&#34;仓库配置&#34;&gt;&lt;/a&gt;仓库配置&lt;/h4&gt;&lt;p&gt;#修改 &lt;a href=&#34;#.m2_create&#34;&gt;.m2&amp;#x2F;settings.xm（没有就戳我！！！！）&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般都在本地：C:\Users\Lenovo\.m2\settings.xml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;

&amp;lt;!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
&amp;quot;License&amp;quot;); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
&amp;quot;AS IS&amp;quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
--&amp;gt;

&amp;lt;!--
 | This is the configuration file for Maven. It can be specified at two levels:
 |
 |  1. User Level. This settings.xml file provides configuration for a single user,
 |                 and is normally provided in $&amp;#123;user.home&amp;#125;/.m2/settings.xml.
 |
 |                 NOTE: This location can be overridden with the CLI option:
 |
 |                 -s /path/to/user/settings.xml
 |
 |  2. Global Level. This settings.xml file provides configuration for all Maven
 |                 users on a machine (assuming they&amp;#39;re all using the same Maven
 |                 installation). It&amp;#39;s normally provided in
 |                 $&amp;#123;maven.home&amp;#125;/conf/settings.xml.
 |
 |                 NOTE: This location can be overridden with the CLI option:
 |
 |                 -gs /path/to/global/settings.xml
 |
 | The sections in this sample file are intended to give you a running start at
 | getting the most out of your Maven installation. Where appropriate, the default
 | values (values used when the setting is not specified) are provided.
 |
 |--&amp;gt;
&amp;lt;settings xmlns=&amp;quot;http://maven.apache.org/SETTINGS/1.0.0&amp;quot; 
          xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; 
          xsi:schemaLocation=&amp;quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&amp;quot;
          
          &amp;gt;
  &amp;lt;!-- localRepository
   | The path to the local repository maven will use to store artifacts.
   |
   | Default: $&amp;#123;user.home&amp;#125;/.m2/repository
  &amp;lt;localRepository&amp;gt;/path/to/local/repo&amp;lt;/localRepository&amp;gt;
  --&amp;gt;
   &amp;lt;!--Maven 本地仓库--&amp;gt;
  &amp;lt;localRepository&amp;gt;D:\_Porgram_IT\maven-repository&amp;lt;/localRepository&amp;gt;
  
  &amp;lt;!-- interactiveMode
   | This will determine whether maven prompts you when it needs input. If set to false,
   | maven will use a sensible default value, perhaps based on some other setting, for
   | the parameter in question.
   |
   | Default: true
  &amp;lt;interactiveMode&amp;gt;true&amp;lt;/interactiveMode&amp;gt;
  --&amp;gt;

  &amp;lt;!-- offline
   | Determines whether maven should attempt to connect to the network when executing a build.
   | This will have an effect on artifact downloads, artifact deployment, and others.
   |
   | Default: false
  &amp;lt;offline&amp;gt;false&amp;lt;/offline&amp;gt;
  --&amp;gt;

  &amp;lt;!-- pluginGroups
   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.
   | when invoking a command line like &amp;quot;mvn prefix:goal&amp;quot;. Maven will automatically add the group identifiers
   | &amp;quot;org.apache.maven.plugins&amp;quot; and &amp;quot;org.codehaus.mojo&amp;quot; if these are not already contained in the list.
   |--&amp;gt;
  &amp;lt;pluginGroups&amp;gt;
    &amp;lt;!-- pluginGroup
     | Specifies a further group identifier to use for plugin lookup.
    &amp;lt;pluginGroup&amp;gt;com.your.plugins&amp;lt;/pluginGroup&amp;gt;
    --&amp;gt;
  &amp;lt;/pluginGroups&amp;gt;

  &amp;lt;!-- proxies
   | This is a list of proxies which can be used on this machine to connect to the network.
   | Unless otherwise specified (by system property or command-line switch), the first proxy
   | specification in this list marked as active will be used.
   |--&amp;gt;
  &amp;lt;proxies&amp;gt;
    &amp;lt;!-- proxy
     | Specification for one proxy, to be used in connecting to the network.
     |
    &amp;lt;proxy&amp;gt;
      &amp;lt;id&amp;gt;optional&amp;lt;/id&amp;gt;
      &amp;lt;active&amp;gt;true&amp;lt;/active&amp;gt;
      &amp;lt;protocol&amp;gt;http&amp;lt;/protocol&amp;gt;
      &amp;lt;username&amp;gt;proxyuser&amp;lt;/username&amp;gt;
      &amp;lt;password&amp;gt;proxypass&amp;lt;/password&amp;gt;
      &amp;lt;host&amp;gt;proxy.host.net&amp;lt;/host&amp;gt;
      &amp;lt;port&amp;gt;80&amp;lt;/port&amp;gt;
      &amp;lt;nonProxyHosts&amp;gt;local.net|some.host.com&amp;lt;/nonProxyHosts&amp;gt;
    &amp;lt;/proxy&amp;gt;
    --&amp;gt;
  &amp;lt;/proxies&amp;gt;

  &amp;lt;!-- servers
   | This is a list of authentication profiles, keyed by the server-id used within the system.
   | Authentication profiles can be used whenever maven must make a connection to a remote server.
   |--&amp;gt;
   &amp;lt;servers&amp;gt;
    &amp;lt;!-- server
     | Specifies the authentication information to use when connecting to a particular server, identified by
     | a unique name within the system (referred to by the &amp;#39;id&amp;#39; attribute below).
     |
     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are
     |       used together.
     |
    &amp;lt;server&amp;gt;
      &amp;lt;id&amp;gt;deploymentRepo&amp;lt;/id&amp;gt;
      &amp;lt;username&amp;gt;repouser&amp;lt;/username&amp;gt;
      &amp;lt;password&amp;gt;repopwd&amp;lt;/password&amp;gt;
    &amp;lt;/server&amp;gt;
    --&amp;gt;

    &amp;lt;!-- Another sample, using keys to authenticate.
    &amp;lt;server&amp;gt;
      &amp;lt;id&amp;gt;siteServer&amp;lt;/id&amp;gt;
      &amp;lt;privateKey&amp;gt;/path/to/private/key&amp;lt;/privateKey&amp;gt;
      &amp;lt;passphrase&amp;gt;optional; leave empty if not used.&amp;lt;/passphrase&amp;gt;
    &amp;lt;/server&amp;gt;
    --&amp;gt;
  &amp;lt;/servers&amp;gt;

  &amp;lt;!-- mirrors
   | This is a list of mirrors to be used in downloading artifacts from remote repositories.
   |
   | It works like this: a POM may declare a repository to use in resolving certain artifacts.
   | However, this repository may have problems with heavy traffic at times, so people have mirrored
   | it to several places.
   |
   | That repository definition will have a unique id, so we can create a mirror reference for that
   | repository, to be used as an alternate download site. The mirror site will be the preferred
   | server for that repository.
   |--&amp;gt;
  &amp;lt;mirrors&amp;gt;
    &amp;lt;mirror&amp;gt; 
        &amp;lt;!-- 指定镜像ID（可自己改名） --&amp;gt;
        &amp;lt;id&amp;gt;nexus-aliyun&amp;lt;/id&amp;gt; 
        &amp;lt;!-- 匹配中央仓库（阿里云的仓库名称，不可以自己起名，必须这么写）--&amp;gt;
        &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;
        &amp;lt;!-- 指定镜像名称（可自己改名）  --&amp;gt;   
        &amp;lt;name&amp;gt;Nexus aliyun&amp;lt;/name&amp;gt; 
        &amp;lt;!-- 指定镜像路径（镜像地址） --&amp;gt;
        &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public&amp;lt;/url&amp;gt; 
    &amp;lt;/mirror&amp;gt;
    
    &amp;lt;mirror&amp;gt;  
      &amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt;  
      &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt;  
      &amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt;  
      &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/groups/public/&amp;lt;/url&amp;gt;  
    &amp;lt;/mirror&amp;gt;
    &amp;lt;!-- mirror
     | Specifies a repository mirror site to use instead of a given repository. The repository that
     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used
     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.
     |
    &amp;lt;mirror&amp;gt;
      &amp;lt;id&amp;gt;mirrorId&amp;lt;/id&amp;gt;
      &amp;lt;mirrorOf&amp;gt;repositoryId&amp;lt;/mirrorOf&amp;gt;
      &amp;lt;name&amp;gt;Human Readable Name for this Mirror.&amp;lt;/name&amp;gt;
      &amp;lt;url&amp;gt;http://my.repository.com/repo/path&amp;lt;/url&amp;gt;
    &amp;lt;/mirror&amp;gt;
     --&amp;gt;
     
  &amp;lt;/mirrors&amp;gt;

  &amp;lt;!-- profiles
   | This is a list of profiles which can be activated in a variety of ways, and which can modify
   | the build process. Profiles provided in the settings.xml are intended to provide local machine-
   | specific paths and repository locations which allow the build to work in the local environment.
   |
   | For example, if you have an integration testing plugin - like cactus - that needs to know where
   | your Tomcat instance is installed, you can provide a variable here such that the variable is
   | dereferenced during the build process to configure the cactus plugin.
   |
   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles
   | section of this document (settings.xml) - will be discussed later. Another way essentially
   | relies on the detection of a system property, either matching a particular value for the property,
   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a
   | value of &amp;#39;1.4&amp;#39; might activate a profile when the build is executed on a JDK version of &amp;#39;1.4.2_07&amp;#39;.
   | Finally, the list of active profiles can be specified directly from the command line.
   |
   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact
   |       repositories, plugin repositories, and free-form properties to be used as configuration
   |       variables for plugins in the POM.
   |
   |--&amp;gt;
  &amp;lt;profiles&amp;gt;
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;jdk-1.8&amp;lt;/id&amp;gt;
      &amp;lt;activation&amp;gt;
        &amp;lt;activeByDefault&amp;gt;true&amp;lt;/activeByDefault&amp;gt;
        &amp;lt;jdk&amp;gt;1.8&amp;lt;/jdk&amp;gt;
      &amp;lt;/activation&amp;gt;
      &amp;lt;properties&amp;gt;
        &amp;lt;maven.compiler.source&amp;gt;1.8&amp;lt;/maven.compiler.source&amp;gt;
        &amp;lt;maven.compiler.target&amp;gt;1.8&amp;lt;/maven.compiler.target&amp;gt;
        &amp;lt;maven.compiler.compilerVersion&amp;gt;1.8&amp;lt;/maven.compiler.compilerVersion&amp;gt;
      &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;

    &amp;lt;!-- profile
     | Specifies a set of introductions to the build process, to be activated using one or more of the
     | mechanisms described above. For inheritance purposes, and to activate profiles via &amp;lt;activatedProfiles/&amp;gt;
     | or the command line, profiles have to have an ID that is unique.
     |
     | An encouraged best practice for profile identification is to use a consistent naming convention
     | for profiles, such as &amp;#39;env-dev&amp;#39;, &amp;#39;env-test&amp;#39;, &amp;#39;env-production&amp;#39;, &amp;#39;user-jdcasey&amp;#39;, &amp;#39;user-brett&amp;#39;, etc.
     | This will make it more intuitive to understand what the set of introduced profiles is attempting
     | to accomplish, particularly when you only have a list of profile id&amp;#39;s for debug.
     |
     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;jdk-1.4&amp;lt;/id&amp;gt;

      &amp;lt;activation&amp;gt;
        &amp;lt;jdk&amp;gt;1.4&amp;lt;/jdk&amp;gt;
      &amp;lt;/activation&amp;gt;

      &amp;lt;repositories&amp;gt;
        &amp;lt;repository&amp;gt;
          &amp;lt;id&amp;gt;jdk14&amp;lt;/id&amp;gt;
          &amp;lt;name&amp;gt;Repository for JDK 1.4 builds&amp;lt;/name&amp;gt;
          &amp;lt;url&amp;gt;http://www.myhost.com/maven/jdk14&amp;lt;/url&amp;gt;
          &amp;lt;layout&amp;gt;default&amp;lt;/layout&amp;gt;
          &amp;lt;snapshotPolicy&amp;gt;always&amp;lt;/snapshotPolicy&amp;gt;
        &amp;lt;/repository&amp;gt;
      &amp;lt;/repositories&amp;gt;
    &amp;lt;/profile&amp;gt;
    --&amp;gt;

    &amp;lt;!--
     | Here is another profile, activated by the system property &amp;#39;target-env&amp;#39; with a value of &amp;#39;dev&amp;#39;,
     | which provides a specific path to the Tomcat instance. To use this, your plugin configuration
     | might hypothetically look like:
     |
     | ...
     | &amp;lt;plugin&amp;gt;
     |   &amp;lt;groupId&amp;gt;org.myco.myplugins&amp;lt;/groupId&amp;gt;
     |   &amp;lt;artifactId&amp;gt;myplugin&amp;lt;/artifactId&amp;gt;
     |
     |   &amp;lt;configuration&amp;gt;
     |     &amp;lt;tomcatLocation&amp;gt;$&amp;#123;tomcatPath&amp;#125;&amp;lt;/tomcatLocation&amp;gt;
     |   &amp;lt;/configuration&amp;gt;
     | &amp;lt;/plugin&amp;gt;
     | ...
     |
     | NOTE: If you just wanted to inject this configuration whenever someone set &amp;#39;target-env&amp;#39; to
     |       anything, you could just leave off the &amp;lt;value/&amp;gt; inside the activation-property.
     |
    &amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;env-dev&amp;lt;/id&amp;gt;

      &amp;lt;activation&amp;gt;
        &amp;lt;property&amp;gt;
          &amp;lt;name&amp;gt;target-env&amp;lt;/name&amp;gt;
          &amp;lt;value&amp;gt;dev&amp;lt;/value&amp;gt;
        &amp;lt;/property&amp;gt;
      &amp;lt;/activation&amp;gt;

      &amp;lt;properties&amp;gt;
        &amp;lt;tomcatPath&amp;gt;/path/to/tomcat/instance&amp;lt;/tomcatPath&amp;gt;
      &amp;lt;/properties&amp;gt;
    &amp;lt;/profile&amp;gt;
    --&amp;gt;
  &amp;lt;/profiles&amp;gt;

  &amp;lt;!-- activeProfiles
   | List of profiles that are active for all builds.
   |
  &amp;lt;activeProfiles&amp;gt;
    &amp;lt;activeProfile&amp;gt;alwaysActiveProfile&amp;lt;/activeProfile&amp;gt;
    &amp;lt;activeProfile&amp;gt;anotherAlwaysActiveProfile&amp;lt;/activeProfile&amp;gt;
  &amp;lt;/activeProfiles&amp;gt;
  --&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:44:33.394Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/CentOS-7-tool/</id>
        <title>CentOS-7安装</title>
        <link rel="alternate" href="http://example.com/2022/10/15/CentOS-7-tool/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;1.下载镜像文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuLw==&#34;&gt; 清华大学开源软件镜像站&lt;/span&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.开始安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489101763.png&#34; alt=&#34;1646489101763&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489187835.png&#34; alt=&#34;1646489187835&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489210450.png&#34; alt=&#34;1646489210450&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489375149.png&#34; alt=&#34;1646489375149&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489450527.png&#34; alt=&#34;1646489450527&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.开始进去虚拟机配置我们的软件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.1语言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489591914.png&#34; alt=&#34;1646489591914&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.2时区、软件选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;软件选择：按照自己的需求选，第一次多选也不要少选&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489600666.png&#34; alt=&#34;1646489600666&#34;&gt;&lt;/p&gt;
&lt;p&gt;4.硬、软配置完成，开始安装，同时要创建管理员Root 和 基础用户&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489605373.png&#34; alt=&#34;1646489605373&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489621243.png&#34; alt=&#34;1646489621243&#34;&gt;&lt;/p&gt;
&lt;p&gt;5.安装成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646489626446.png&#34; alt=&#34;1646489626446&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统配置&lt;/strong&gt;&lt;/p&gt;
&lt;div name=&#34;Linux_install_centos7&#34;&gt;进入系统后~&lt;/div&gt;

&lt;p&gt;1、首先配置网络&lt;/p&gt;
&lt;p&gt;要先切换到 root 用户上去，不然没权限。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;方式一
sudo -i
password:当前普通用户密码

方式二
su -
password：root用户密码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 将  **ONBOOT ** 改为 yes ： &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt; vim /etc/sysconfig/network-scripts/ifcfg-ens33
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646490152508.png&#34; alt=&#34;1646490152508&#34;&gt;&lt;/p&gt;
&lt;p&gt;重启网络&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;service network restart

### 检查是否通畅
ping 114.114.114.114
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、 安装net-tools 和 vim（&lt;strong&gt;有的话可直接跳过&lt;/strong&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;yum install -y net-tools vim
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;检查自己的ip&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;ifconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/1646490384192.png&#34; alt=&#34;1646490384192&#34;&gt;&lt;/p&gt;
&lt;p&gt;3 启动sshd服务&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;service sshd start
&lt;/code&gt;&lt;/pre&gt;
&lt;div name=&#34;Linux_minInstall_4&#34;&gt;&lt;/div &gt;

&lt;p&gt;4、修改登录，让Root用户直接登录&lt;/p&gt;
&lt;p&gt;#&lt;a href=&#34;#problem-6&#34;&gt;具体步骤&lt;/a&gt;   		&lt;/p&gt;
&lt;div name=&#34;Linux_minInstall_5&#34;&gt;&lt;/div &gt;

&lt;p&gt;5、修改DNS连接,让xshell访问快一点&lt;/p&gt;
&lt;p&gt;#&lt;a href=&#34;#problem-5&#34;&gt;具体步骤&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、 &lt;strong&gt;关闭指定端口防火墙：&lt;/strong&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;systemctl status firewalld  

###开启80端口

firewall-cmd --zone=public --add-port=80/tcp --permanent  

###开启3306端口

firewall-cmd --zone=public --add-port=3306/tcp --permanent  

###重启防火墙：

firewall-cmd --reload

关闭防火墙 ，重启失效(Linux系统一重启Linux中的防火墙又会被开起)
service firewalld stop
禁用防火墙，永久有效
systemctl disable firewalld 或者  systemctl disable firewalld.service
启动防火墙 (对禁用的防火墙进行启动)
systemctl enable firewalld
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2022-10-15T04:42:32.306Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/15/Solr-linux/</id>
        <title></title>
        <link rel="alternate" href="http://example.com/2022/10/15/Solr-linux/"/>
        <content type="html">&lt;h2 id=&#34;Solr安装&#34;&gt;&lt;a href=&#34;#Solr安装&#34; class=&#34;headerlink&#34; title=&#34;Solr安装&#34;&gt;&lt;/a&gt;Solr安装&lt;/h2&gt;&lt;h3 id=&#34;——1&#34;&gt;&lt;a href=&#34;#——1&#34; class=&#34;headerlink&#34; title=&#34;——1&#34;&gt;&lt;/a&gt;——1&lt;/h3&gt;&lt;p&gt;​	Solr是使用Java编写，所以必选先安装JDK。&lt;/p&gt;
&lt;h4 id=&#34;1-上传并解压&#34;&gt;&lt;a href=&#34;#1-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;1.上传并解压&#34;&gt;&lt;/a&gt;1.上传并解压&lt;/h4&gt;&lt;p&gt;​	上传压缩包solr-7.7.2.tgz到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中。&lt;/p&gt;
&lt;p&gt;​	解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/tmp
 tar zxf solr-7.7.2.tgz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制到-x2F-usr-x2F-local中&#34;&gt;&lt;a href=&#34;#2-复制到-x2F-usr-x2F-local中&#34; class=&#34;headerlink&#34; title=&#34;2.复制到&amp;#x2F;usr&amp;#x2F;local中&#34;&gt;&lt;/a&gt;2.复制到&amp;#x2F;usr&amp;#x2F;local中&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; cp -r solr-7.7.2 ../solr
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-修改启动参数&#34;&gt;&lt;a href=&#34;#3-修改启动参数&#34; class=&#34;headerlink&#34; title=&#34;3.修改启动参数&#34;&gt;&lt;/a&gt;3.修改启动参数&lt;/h4&gt;&lt;p&gt;​	修改启动参数，否则启动时报警告。提示设置SOLR_ULIMIT_CHECKS&amp;#x3D;false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/solr/bin
 vim solr.in.sh
&lt;/code&gt;&lt;/pre&gt;


&lt;h4 id=&#34;4-启动Solr&#34;&gt;&lt;a href=&#34;#4-启动Solr&#34; class=&#34;headerlink&#34; title=&#34;4.启动Solr&#34;&gt;&lt;/a&gt;4.启动Solr&lt;/h4&gt;&lt;p&gt;​	Solr内嵌Jetty，直接启动即可。监听8983端口。&lt;/p&gt;
&lt;p&gt;​	solr默认不推荐root账户启动，如果是root账户启动需要添加-force参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、可视化管理界面&#34;&gt;&lt;a href=&#34;#5、可视化管理界面&#34; class=&#34;headerlink&#34; title=&#34;5、可视化管理界面&#34;&gt;&lt;/a&gt;5、可视化管理界面&lt;/h4&gt;&lt;p&gt;​	在关闭防火墙的前提下，可以在windows的浏览器中访问Solr。&lt;/p&gt;
&lt;p&gt;​	输入: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguOTMuMTA6ODk4My8=&#34;&gt;http://192.168.93.10:8983&lt;/span&gt; 就可以访问Solr的可视化管理界面。&lt;/p&gt;
&lt;p&gt;​	左侧有5个菜单。分别是：&lt;/p&gt;
&lt;p&gt;​	（1）Dashboard：面板显示Solr的总体信息。&lt;/p&gt;
&lt;p&gt;​	（2）Logging：日志&lt;/p&gt;
&lt;p&gt;​	（3）Core Admin：Solr的核心。类似于数据的Database&lt;/p&gt;
&lt;p&gt;​	（4）Java Perperties：所有Java相关属性。&lt;/p&gt;
&lt;p&gt;​	（5）Thread Dump：线程相关信息。&lt;/p&gt;
&lt;p&gt;​	（6）如果有Core，将显示在此处。&lt;/p&gt;


&lt;h4 id=&#34;6、新建核心&#34;&gt;&lt;a href=&#34;#6、新建核心&#34; class=&#34;headerlink&#34; title=&#34;6、新建核心&#34;&gt;&lt;/a&gt;6、新建核心&lt;/h4&gt;&lt;p&gt;​	Solr安装完成后默认是没有核心的。需要手动配置。&lt;/p&gt;
&lt;p&gt;​	需要在solr&amp;#x2F;server&amp;#x2F;solr下新建文件夹，并给定配置文件，否则无法建立。&lt;/p&gt;


&lt;h5 id=&#34;6-1-新建目录&#34;&gt;&lt;a href=&#34;#6-1-新建目录&#34; class=&#34;headerlink&#34; title=&#34;6.1.新建目录&#34;&gt;&lt;/a&gt;6.1.新建目录&lt;/h5&gt;&lt;p&gt;​	在&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr中新建自定义名称目录。此处示例名称为testcore。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; cd /usr/local/solr/server/solr
 mkdir testcore
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-2-复制配置文件&#34;&gt;&lt;a href=&#34;#6-2-复制配置文件&#34; class=&#34;headerlink&#34; title=&#34;6.2.复制配置文件&#34;&gt;&lt;/a&gt;6.2.复制配置文件&lt;/h5&gt;&lt;p&gt;​	在configsets里面包含了_default和sample_techproducts_configs。里面都是配置文件示例。_default属于默认配置，较纯净。sample_techproducts_configs是带有了一些配置示例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## cp -r configsets/_default/conf/ testcore/
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-3-填写Core信息&#34;&gt;&lt;a href=&#34;#6-3-填写Core信息&#34; class=&#34;headerlink&#34; title=&#34;6.3.填写Core信息&#34;&gt;&lt;/a&gt;6.3.填写Core信息&lt;/h5&gt;&lt;p&gt;​	在可视化管理界面中Core Admin中编写信息后点击Add Core后，短暂延迟后testcore就会创建成功。schema处不用更改。&lt;/p&gt;


&lt;h6 id=&#34;6-4-出现testcore&#34;&gt;&lt;a href=&#34;#6-4-出现testcore&#34; class=&#34;headerlink&#34; title=&#34;6.4.出现testcore&#34;&gt;&lt;/a&gt;6.4.出现testcore&lt;/h6&gt;&lt;p&gt;​	在客户端管理界面中，选择新建的Core后，就可以按照自己项目的需求进行操作了。&lt;/p&gt;


&lt;h4 id=&#34;7、分词Analysis&#34;&gt;&lt;a href=&#34;#7、分词Analysis&#34; class=&#34;headerlink&#34; title=&#34;7、分词Analysis&#34;&gt;&lt;/a&gt;7、分词Analysis&lt;/h4&gt;&lt;p&gt;​	在Solr可视化管理界面中，Core的管理菜单项中都会有Analysis。表示根据Scheme.xml(managed-schema)中配置要求进行解析。&lt;/p&gt;
&lt;p&gt;​	对英文解析就比较简单了，只要按照空格把英文语句拆分成英文单词即可。&lt;/p&gt;


&lt;p&gt;​	但是如果条件是中文时，把一句话按照字进行拆分就不是很合理了。正确的方式是按照合理的词组进行拆分。&lt;/p&gt;
&lt;h6 id=&#34;7-1-配置步骤&#34;&gt;&lt;a href=&#34;#7-1-配置步骤&#34; class=&#34;headerlink&#34; title=&#34;7.1.配置步骤&#34;&gt;&lt;/a&gt;7.1.配置步骤&lt;/h6&gt;&lt;p&gt;​	上传ik-analyzer.jar到webapps中。&lt;/p&gt;
&lt;p&gt;​	去&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWFyY2gubWF2ZW4ub3JnL3NlYXJjaD9xPWNvbS5naXRodWIubWFnZXNlJUU0JUI4JThCJUU4JUJEJUJEJUU1JUFGJUI5JUU1JUJBJTk0JUU3JTg5JTg4JUU2JTlDJUFDJUU3JTlBJTg0aWstYW5hbHl6ZXIlRTMlODAlODIlRTUlOEYlQUYlRTQlQkIlQTUlRTUlOUMlQTglRTglQjUlODQlRTYlOTYlOTklRTQlQjglQUQlRTclOUIlQjQlRTYlOEUlQTUlRTglOEUlQjclRTUlOEYlOTYlRTMlODAlODI=&#34;&gt;https://search.maven.org/search?q=com.github.magese下载对应版本的ik-analyzer。可以在资料中直接获取。&lt;/span&gt;&lt;/p&gt;
&lt;h6 id=&#34;7-1-1上传jar到指定目录&#34;&gt;&lt;a href=&#34;#7-1-1上传jar到指定目录&#34; class=&#34;headerlink&#34; title=&#34;7.1.1上传jar到指定目录&#34;&gt;&lt;/a&gt;7.1.1上传jar到指定目录&lt;/h6&gt;&lt;p&gt;​	上传ik-analyzer-7.7.0.jar到&lt;/p&gt;
&lt;p&gt;​	&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr-webapp&amp;#x2F;webapp&amp;#x2F;WEB-INF&amp;#x2F;lib目录中&lt;/p&gt;
&lt;h6 id=&#34;7-1-2修改配置文件&#34;&gt;&lt;a href=&#34;#7-1-2修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;7.1.2修改配置文件&#34;&gt;&lt;/a&gt;7.1.2修改配置文件&lt;/h6&gt;&lt;p&gt;​	修改&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr&amp;#x2F;testcore&amp;#x2F;conf&amp;#x2F;managed-schema&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## vim /usr/local/solr/server/solr/testcore/conf/managed-schema
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	添加下面内容。&lt;/p&gt;
&lt;p&gt;​	排版：Esc 退出编辑状态下：gg&amp;#x3D;G&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;field name=&amp;quot;myfield&amp;quot; type=&amp;quot;text_ik&amp;quot; indexed=&amp;quot;true&amp;quot; stored=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;fieldType name=&amp;quot;text_ik&amp;quot; class=&amp;quot;solr.TextField&amp;quot;&amp;gt;
            &amp;lt;analyzer type=&amp;quot;index&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;false&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
            &amp;lt;analyzer type=&amp;quot;query&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;true&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
    &amp;lt;/fieldType&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;7-1-3重启&#34;&gt;&lt;a href=&#34;#7-1-3重启&#34; class=&#34;headerlink&#34; title=&#34;7.1.3重启&#34;&gt;&lt;/a&gt;7.1.3重启&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;## cd /usr/local/solr/bin
## ./solr stop -all
## ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;7-1-4验证&#34;&gt;&lt;a href=&#34;#7-1-4验证&#34; class=&#34;headerlink&#34; title=&#34;7.1.4验证&#34;&gt;&lt;/a&gt;7.1.4验证&lt;/h6&gt;&lt;p&gt;​	可以在可视化管理界面中找到myfield属性进行验证。&lt;/p&gt;


&lt;h6 id=&#34;7-2-managed-schema配置说明&#34;&gt;&lt;a href=&#34;#7-2-managed-schema配置说明&#34; class=&#34;headerlink&#34; title=&#34;7.2.managed-schema配置说明&#34;&gt;&lt;/a&gt;7.2.managed-schema配置说明&lt;/h6&gt;&lt;h6 id=&#34;7-2-1-lt-fieldType-x2F-gt&#34;&gt;&lt;a href=&#34;#7-2-1-lt-fieldType-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;7.2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&lt;/h6&gt;&lt;p&gt;​	表示定义一个属性类型。在Solr中属性类型都是自定义的。在上面配置中name&amp;#x3D;”text_ik”为自定义类型。当某个属性取值为text_ik时IK Analyzer才能生效。&lt;/p&gt;
&lt;h6 id=&#34;7-2-2-lt-field-x2F-gt&#34;&gt;&lt;a href=&#34;#7-2-2-lt-field-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.2&amp;lt; field&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;7.2.2&amp;lt; field&amp;#x2F;&amp;gt;&lt;/h6&gt;&lt;p&gt;​	表示向Document中添加一个属性。&lt;/p&gt;
&lt;p&gt;​	常用属性：&lt;/p&gt;
&lt;p&gt;​		name: 属性名&lt;/p&gt;
&lt;p&gt;​		type:属性类型。所有类型都是solr使用&lt;fieldType&gt;配置的&lt;/p&gt;
&lt;p&gt;​		indexed: 是否建立索引&lt;/p&gt;
&lt;p&gt;​		stored: solr是否把该属性值响应给搜索用户。&lt;/p&gt;
&lt;p&gt;​		required：该属性是否是必须的。默认id是必须的。&lt;/p&gt;
&lt;p&gt;​		multiValued：如果为true，表示该属性为复合属性，此属性中包含了多个其他的属性。常用在多个列作为搜索条件时，把这些列定义定义成一个新的复合属性，通过搜索一个复合属性就可以实现搜索多个列。当设置为true时与&amp;lt; copyField source&amp;#x3D;”” dest&amp;#x3D;””&amp;#x2F;&amp;gt;结合使用&lt;/p&gt;
&lt;h6 id=&#34;7-2-3-lt-uniqueKey-gt&#34;&gt;&lt;a href=&#34;#7-2-3-lt-uniqueKey-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.3&amp;lt; uniqueKey&amp;gt;&#34;&gt;&lt;/a&gt;7.2.3&amp;lt; uniqueKey&amp;gt;&lt;/h6&gt;&lt;p&gt;​	唯一主键，Solr中默认定义id属性为唯一主键。ID的值是不允许重复的。&lt;/p&gt;
&lt;h6 id=&#34;7-2-4-lt-dynamicField-gt&#34;&gt;&lt;a href=&#34;#7-2-4-lt-dynamicField-gt&#34; class=&#34;headerlink&#34; title=&#34;7.2.4&amp;lt; dynamicField&amp;gt;&#34;&gt;&lt;/a&gt;7.2.4&amp;lt; dynamicField&amp;gt;&lt;/h6&gt;&lt;p&gt;​	名称中允许*进行通配。代表满足特定名称要求的一组属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; msb_java    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	msb_bigdata&lt;/p&gt;
&lt;p&gt;​	msb_UI&lt;/p&gt;
&lt;p&gt;​        msb_*&lt;/p&gt;
&lt;h4 id=&#34;8、Dataimport&#34;&gt;&lt;a href=&#34;#8、Dataimport&#34; class=&#34;headerlink&#34; title=&#34;8、Dataimport&#34;&gt;&lt;/a&gt;8、Dataimport&lt;/h4&gt;&lt;p&gt;​	可以使用Solr自带的Dataimport功能把数据库中数据快速导入到solr中.&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;必须保证managed-schema和数据库中表的列对应。，添加配置&lt;/strong&gt;&lt;/p&gt;
&lt;h6 id=&#34;8-1-修改配置文件&#34;&gt;&lt;a href=&#34;#8-1-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;8.1.修改配置文件&#34;&gt;&lt;/a&gt;8.1.修改配置文件&lt;/h6&gt;&lt;p&gt;​	修改solrconfig.xml，添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;!-- 配置数据导入的处理器 --&amp;gt;
  &amp;lt;requestHandler name=&amp;quot;/dataimport&amp;quot; class=&amp;quot;org.apache.solr.handler.dataimport.DataImportHandler&amp;quot;&amp;gt;
    &amp;lt;lst name=&amp;quot;defaults&amp;quot;&amp;gt;
      &amp;lt;!--  加载data-config.xml  --&amp;gt;
      &amp;lt;str name=&amp;quot;config&amp;quot;&amp;gt;data-config.xml&amp;lt;/str&amp;gt;
     &amp;lt;/lst&amp;gt;
  &amp;lt;/requestHandler&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;8-2-新建data-config-xml&#34;&gt;&lt;a href=&#34;#8-2-新建data-config-xml&#34; class=&#34;headerlink&#34; title=&#34;8.2.新建data-config.xml&#34;&gt;&lt;/a&gt;8.2.新建data-config.xml&lt;/h6&gt;&lt;p&gt;​	和solrconfig.xml同一目录下新建data-config.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;dataConfig&amp;gt;
        &amp;lt;dataSource type=&amp;quot;JdbcDataSource&amp;quot;   
                driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot;   
                url=&amp;quot;jdbc:mysql://192.168.1.135:3306/mytest&amp;quot;   
                user=&amp;quot;root&amp;quot;   
                password=&amp;quot;root&amp;quot;/&amp;gt;
        &amp;lt;document&amp;gt;
            &amp;lt;entity name=&amp;quot;product&amp;quot; query=&amp;quot;SELECT id,name,price from t_product&amp;quot;&amp;gt;
                &amp;lt;!-- 
                 实现数据库的列和索引库的字段的映射
                 column 指定数据库的列表
                 name  指定索引库的字段名字，必须和schema.xml中定义的一样
                 --&amp;gt;
                 &amp;lt;field column=&amp;quot;id&amp;quot; name=&amp;quot;id&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;price&amp;quot; name=&amp;quot;price&amp;quot;/&amp;gt;
            &amp;lt;/entity&amp;gt;
         &amp;lt;/document&amp;gt;
&amp;lt;/dataConfig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;8-3-添加jar&#34;&gt;&lt;a href=&#34;#8-3-添加jar&#34; class=&#34;headerlink&#34; title=&#34;8.3.添加jar&#34;&gt;&lt;/a&gt;8.3.添加jar&lt;/h6&gt;&lt;p&gt;​	向solr-webapp中添加&lt;strong&gt;三个jar&lt;/strong&gt;。在&lt;strong&gt;dist中两个还有一个数据库驱动。（自己去maven-repository里面找一个 mysql-connector-java ）&lt;/strong&gt;&lt;/p&gt;


&lt;h6 id=&#34;8-4-操作&#34;&gt;&lt;a href=&#34;#8-4-操作&#34; class=&#34;headerlink&#34; title=&#34;8.4.操作&#34;&gt;&lt;/a&gt;8.4.操作&lt;/h6&gt;&lt;p&gt;​	重启solr后，在可视化管理页面中进行数据导入。&lt;/p&gt;
&lt;p&gt;​	注意：&lt;/p&gt;
&lt;p&gt;​	点击导入按钮后，要记得点击刷新按钮。&lt;/p&gt;
</content>
        <updated>2022-10-14T16:34:29.756Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/14/MySQL_Create/</id>
        <title>MySQL基础</title>
        <link rel="alternate" href="http://example.com/2022/10/14/MySQL_Create/"/>
        <content type="html">&lt;h1 id=&#34;MySQL安装&#34;&gt;&lt;a href=&#34;#MySQL安装&#34; class=&#34;headerlink&#34; title=&#34;MySQL安装&#34;&gt;&lt;/a&gt;MySQL安装&lt;/h1&gt;&lt;h2 id=&#34;1、卸载原来的版本&#34;&gt;&lt;a href=&#34;#1、卸载原来的版本&#34; class=&#34;headerlink&#34; title=&#34;1、卸载原来的版本&#34;&gt;&lt;/a&gt;1、卸载原来的版本&lt;/h2&gt;&lt;h3 id=&#34;1、查看mysql的安装情况&#34;&gt;&lt;a href=&#34;#1、查看mysql的安装情况&#34; class=&#34;headerlink&#34; title=&#34;1、查看mysql的安装情况&#34;&gt;&lt;/a&gt;1、查看mysql的安装情况&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rpm -qa | grep -i mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/1570605325400.png&#34; class=&#34;&#34; width=&#34;1570605325400&#34;&gt;

&lt;h3 id=&#34;2、删除上图安装的软件&#34;&gt;&lt;a href=&#34;#2、删除上图安装的软件&#34; class=&#34;headerlink&#34; title=&#34;2、删除上图安装的软件&#34;&gt;&lt;/a&gt;2、删除上图安装的软件&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rpm -ev --nodeps mysql57-community-release-el5-7.noarch
rpm -ev --nodeps mysql-community-server-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-client-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-libs-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-common-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-libs-compat-5.7.18-1.el5.x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3、都删除成功之后，查找相关的mysql的文件&#34;&gt;&lt;a href=&#34;#3、都删除成功之后，查找相关的mysql的文件&#34; class=&#34;headerlink&#34; title=&#34;3、都删除成功之后，查找相关的mysql的文件&#34;&gt;&lt;/a&gt;3、都删除成功之后，查找相关的mysql的文件&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;find / -name mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/1570605553095.png&#34; class=&#34;&#34; width=&#34;1570605553095&#34;&gt;

&lt;h3 id=&#34;4、删除全部文件&#34;&gt;&lt;a href=&#34;#4、删除全部文件&#34; class=&#34;headerlink&#34; title=&#34;4、删除全部文件&#34;&gt;&lt;/a&gt;4、删除全部文件&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rm -rf /etc/selinux/targeted/active/modules/100/mysql
rm -rf /root/mysql
rm -rf /root/mysql/data/mysql
rm -rf /var/lib/mysql
rm -rf /var/lib/mysql/mysql
rm -rf /usr/share/mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5、再次执行命令&#34;&gt;&lt;a href=&#34;#5、再次执行命令&#34; class=&#34;headerlink&#34; title=&#34;5、再次执行命令&#34;&gt;&lt;/a&gt;5、再次执行命令&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;rpm -qa | grep -i mysql
#如果没有显式则表示卸载完成
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2、删除mariadb-libs-不可省略&#34;&gt;&lt;a href=&#34;#2、删除mariadb-libs-不可省略&#34; class=&#34;headerlink&#34; title=&#34;2、删除mariadb-libs(不可省略)&#34;&gt;&lt;/a&gt;2、删除mariadb-libs(不可省略)&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 检查mariadb-libs
rpm -qa|grep mariadb
# 卸载mariadb-libs
yum remove -y mariadb-libs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3、安装MySQL&#34;&gt;&lt;a href=&#34;#3、安装MySQL&#34; class=&#34;headerlink&#34; title=&#34;3、安装MySQL&#34;&gt;&lt;/a&gt;3、安装MySQL&lt;/h2&gt;&lt;h3 id=&#34;1，输入&#34;&gt;&lt;a href=&#34;#1，输入&#34; class=&#34;headerlink&#34; title=&#34;1，输入&#34;&gt;&lt;/a&gt;1，输入&lt;/h3&gt;&lt;p&gt;wegt &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2dldC9teXNxbCVFNyU4OSU4OCVFNiU5QyVBQyVFNSU4RiVCNy1jb21tdW5pdHktcmVsZWFzZS1lbCVFNSVBNCVBNyVFNyU4OSU4OCVFNiU5QyVBQy0lRTUlQjAlOEYlRTclODklODglRTYlOUMlQUMubm9hcmNoLnJwbQ==&#34;&gt;https://dev.mysql.com/get/mysql版本号-community-release-el大版本-小版本.noarch.rpm&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;wget https://dev.mysql.com/get/mysql57-community-release-el5-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2、安装数据源&#34;&gt;&lt;a href=&#34;#2、安装数据源&#34; class=&#34;headerlink&#34; title=&#34;2、安装数据源&#34;&gt;&lt;/a&gt;2、安装数据源&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install -y mysql57-community-release-el5-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3、查看mysql源是否安装成功&#34;&gt;&lt;a href=&#34;#3、查看mysql源是否安装成功&#34; class=&#34;headerlink&#34; title=&#34;3、查看mysql源是否安装成功&#34;&gt;&lt;/a&gt;3、查看mysql源是否安装成功&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum repolist enabled | grep &amp;quot;mysql.*-community.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4、安装数据库&#34;&gt;&lt;a href=&#34;#4、安装数据库&#34; class=&#34;headerlink&#34; title=&#34;4、安装数据库&#34;&gt;&lt;/a&gt;4、安装数据库&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install -y  mysql-community-server



# 如果过期可以在运行安装程序之前导入密钥
rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5、启动mysql&#34;&gt;&lt;a href=&#34;#5、启动mysql&#34; class=&#34;headerlink&#34; title=&#34;5、启动mysql&#34;&gt;&lt;/a&gt;5、启动mysql&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# centos7
systemctl restart mysqld
systemctl status mysqld


# centos6
service mysqld start
service mysqld status
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6、显示mysql的随机密码&#34;&gt;&lt;a href=&#34;#6、显示mysql的随机密码&#34; class=&#34;headerlink&#34; title=&#34;6、显示mysql的随机密码&#34;&gt;&lt;/a&gt;6、显示mysql的随机密码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;grep &amp;#39;temporary password&amp;#39; /var/log/mysqld.log
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/image-20220827193405451.png&#34; class=&#34;&#34; title=&#34;image-20220827193405451&#34;&gt;

&lt;h3 id=&#34;7、登录并修改mysql密码&#34;&gt;&lt;a href=&#34;#7、登录并修改mysql密码&#34; class=&#34;headerlink&#34; title=&#34;7、登录并修改mysql密码&#34;&gt;&lt;/a&gt;7、登录并修改mysql密码&lt;/h3&gt;&lt;p&gt;登录：mysql -u root -p     然后输入上面生成的密码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;修改自定义密码，设置自己想要的密码&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;密码&amp;#39;;

ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;root&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;失败了的话就修改策略，将策略降低一下就可以了&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看密码策略：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHOW VARIABLES LIKE &amp;#39;%validate_password%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改密码策略&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 修改密码长度：（长度）
set global validate_password.length=1;
set global validate_password_length=1;
-- 修改密码等级：（等级）
set global validate_password.policy=0;
set global validate_password_policy=0;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4、其他配置&#34;&gt;&lt;a href=&#34;#4、其他配置&#34; class=&#34;headerlink&#34; title=&#34;4、其他配置&#34;&gt;&lt;/a&gt;4、其他配置&lt;/h2&gt;&lt;h3 id=&#34;1-开机自启&#34;&gt;&lt;a href=&#34;#1-开机自启&#34; class=&#34;headerlink&#34; title=&#34;1.开机自启&#34;&gt;&lt;/a&gt;1.开机自启&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 开机启动
systemctl enable mysql
# 关闭自动启动
systemctl disable mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-远程连接&#34;&gt;&lt;a href=&#34;#2-远程连接&#34; class=&#34;headerlink&#34; title=&#34;2.远程连接&#34;&gt;&lt;/a&gt;2.远程连接&lt;/h3&gt;&lt;h4 id=&#34;方法一、创建一个用户-支持远程连接&#34;&gt;&lt;a href=&#34;#方法一、创建一个用户-支持远程连接&#34; class=&#34;headerlink&#34; title=&#34;方法一、创建一个用户 支持远程连接&#34;&gt;&lt;/a&gt;方法一、创建一个用户 支持远程连接&lt;/h4&gt;&lt;p&gt;①登录 ：mysql -u root -p&lt;/p&gt;
&lt;p&gt;②创建用户： create user ‘aaa‘@’%’ identified by ‘123456’;&lt;/p&gt;
&lt;p&gt;③授权所有权限给user这个新用户 ：grant all on &lt;em&gt;.&lt;/em&gt; to ‘aaa‘@’%’;&lt;/p&gt;
&lt;p&gt;④退出mysql：quit;&lt;/p&gt;
&lt;h4 id=&#34;方法二、设置root用户支持远程连接&#34;&gt;&lt;a href=&#34;#方法二、设置root用户支持远程连接&#34; class=&#34;headerlink&#34; title=&#34;方法二、设置root用户支持远程连接&#34;&gt;&lt;/a&gt;方法二、设置root用户支持远程连接&lt;/h4&gt;&lt;p&gt;①登录：mysql -u root -p （ 注：系统提示输入数据库root用户的密码，输入完成后即进入mysql控制台，这个命令的第一个mysql是执行命令，第二个mysql是系统数据名称，不一样的。）&lt;/p&gt;
&lt;p&gt;②设置权限：&lt;/p&gt;
&lt;p&gt;赋予权限格式： grant 权限 on 数据库对象 to 用户@IP(或者相应正则)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 新建用户规则或者直接修改root用户的规则 ，2 选一
use mysql;

-- 这里表示赋予该用户所有数据库所有表（*.*表示所有表），%表示所有IP地址。
GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;123456&amp;#39; WITH GRANT OPTION;
-- 使root能再任何host访问
update user set host = &amp;#39;%&amp;#39; where user = &amp;#39;root&amp;#39;;      

-- 刷新
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;③查看：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;use mysql;
SELECT HOST,USER FROM USER;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/920952e9041b4af1a8a49eb64e0f4430.jpeg&#34; class=&#34;&#34; title=&#34;img&#34;&gt;

&lt;p&gt; ④退出mysql：quit;&lt;/p&gt;
&lt;h2 id=&#34;其他安装方式&#34;&gt;&lt;a href=&#34;#其他安装方式&#34; class=&#34;headerlink&#34; title=&#34;其他安装方式&#34;&gt;&lt;/a&gt;其他安装方式&lt;/h2&gt;&lt;h3 id=&#34;docker&#34;&gt;&lt;a href=&#34;#docker&#34; class=&#34;headerlink&#34; title=&#34;docker&#34;&gt;&lt;/a&gt;docker&lt;/h3&gt;&lt;h4 id=&#34;1、查询镜像&#34;&gt;&lt;a href=&#34;#1、查询镜像&#34; class=&#34;headerlink&#34; title=&#34;1、查询镜像&#34;&gt;&lt;/a&gt;1、查询镜像&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker search mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、拉取镜像&#34;&gt;&lt;a href=&#34;#2、拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;2、拉取镜像&#34;&gt;&lt;/a&gt;2、拉取镜像&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、构建容器&#34;&gt;&lt;a href=&#34;#3、构建容器&#34; class=&#34;headerlink&#34; title=&#34;3、构建容器&#34;&gt;&lt;/a&gt;3、构建容器&lt;/h4&gt;&lt;p&gt;先自己创建配置文件基础模板（&lt;strong&gt;要是后期要修改配置文件必须加入 模板中的两个元素，不然容器启动会出错&lt;/strong&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir -p /root/mysql/conf
vim  /root/mysql/conf/my.cnf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;模板内容：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mysql.conf.d/

[mysql]
default-character-set=utf8mb4
[mysqld]
character_set_server=utf8mb4
init_connect=&amp;#39;SET NAMES utf8&amp;#39;
lower_case_table_names = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;构建容器&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run \
-p 3306:3306 \
-v /root/mysql/data:/var/lib/mysql \
-v /root/mysql/logs:/logs \
-v /root/mysql/conf/my.cnf:/etc/mysql/my.cnf \
-e MYSQL_ROOT_PASSWORD=root \
--name mysql \
--hostname node1 \
--restart=always \
-d mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：出错时将本地映射文件检查一下，要是不需要配置，只需映射直接删掉就可，以后再改配置文件&lt;/p&gt;
&lt;h4 id=&#34;4、进入容器&#34;&gt;&lt;a href=&#34;#4、进入容器&#34; class=&#34;headerlink&#34; title=&#34;4、进入容器&#34;&gt;&lt;/a&gt;4、进入容器&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it mysql /bin/bash
或者
docker exec -it mysql mysql -uroot -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;docker-compose&#34;&gt;&lt;a href=&#34;#docker-compose&#34; class=&#34;headerlink&#34; title=&#34;docker-compose&#34;&gt;&lt;/a&gt;docker-compose&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;前提安装了 docker-compose&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;配置-docker-comose-yml-文件&#34;&gt;&lt;a href=&#34;#配置-docker-comose-yml-文件&#34; class=&#34;headerlink&#34; title=&#34;配置  docker-comose.yml 文件&#34;&gt;&lt;/a&gt;配置  docker-comose.yml 文件&lt;/h4&gt;&lt;p&gt;5.7：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;version: &amp;quot;3.0&amp;quot;
services:
  mysql8:
    image: mysql:5.7.32
    container_name: my_db57
    restart: always
    volumes:
      - ./db:/var/lib/mysql
      - ./conf/my.cnf:/etc/my.cnf
      # 数据库初始化脚本，当Mysql容器首次启动时，会在 /docker-entrypoint-initdb.d目录下扫描 .sh，.sql，.sql.gz类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库；
      - ./init/:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      # 指定初始化sql文件的数据库，简单来书就是新建一个数据库
      - MYSQL_DATABASE=my_db
      - TZ=Asia/Shanghai
    ports:
      - 3311:3306
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.0&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;version: &amp;quot;3.0&amp;quot;
services:
  mysql8:
    image: mysql:8.0.25
    container_name: my_db8
    restart: always
    volumes:
      - ./db:/var/lib/mysql
      - ./conf/my.cnf:/etc/my.cnf
      # 数据库初始化脚本，当Mysql容器首次启动时，会在 /docker-entrypoint-initdb.d目录下扫描 .sh，.sql，.sql.gz类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库；
      - ./init/:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      # 指定初始化sql文件的数据库，简单来书就是新建一个数据库
      - MYSQL_DATABASE=my_db
      - TZ=Asia/Shanghai
    ports:
      - 3301:3306
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;配置文件-my-cnf&#34;&gt;&lt;a href=&#34;#配置文件-my-cnf&#34; class=&#34;headerlink&#34; title=&#34;配置文件 my.cnf&#34;&gt;&lt;/a&gt;配置文件 my.cnf&lt;/h4&gt;&lt;p&gt;5.7：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4

[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

symbolic-links=0

log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8mb4

# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.0：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4
[mysqld]
# 允许最大连接数
max_connections=200

# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8mb4

# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;问题&#34;&gt;&lt;a href=&#34;#问题&#34; class=&#34;headerlink&#34; title=&#34;问题&#34;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;1、Can’t create&amp;#x2F;write to file ‘&amp;#x2F;var&amp;#x2F;run&amp;#x2F;mysqld&amp;#x2F;mysqld.pid&lt;/p&gt;
&lt;p&gt;去配置文件中找到 errorlog的地址，查看错误日志&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/20190602012200812.png&#34; class=&#34;&#34; title=&#34;img&#34;&gt;

&lt;p&gt;错误原因为：&amp;#x2F;var&amp;#x2F;run&amp;#x2F;mysqld&amp;#x2F;目录的拥有者为root，mysql不能在其中创建文件&lt;/p&gt;
&lt;p&gt;使用如下命令修改目录使用者&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;# 先查看目录是否存在
ls -ld /var/run/mysqld/
# 权限
chown mysql.mysql /var/run/mysqld/
# 修改后重启mysql服务
/etc/init.d/mysqld start
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="MySQL" />
        <category term="数据库基础" />
        <category term="数据库基本知识" />
        <updated>2022-10-14T09:50:50.743Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/14/Docsify/</id>
        <title>MySQL基础</title>
        <link rel="alternate" href="http://example.com/2022/10/14/Docsify/"/>
        <content type="html">&lt;h1 id=&#34;Docsify搭建&#34;&gt;&lt;a href=&#34;#Docsify搭建&#34; class=&#34;headerlink&#34; title=&#34;Docsify搭建&#34;&gt;&lt;/a&gt;Docsify搭建&lt;/h1&gt;&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuLw==&#34;&gt;https://docsify.js.org/#/zh-cn/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;前提&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要配置好 &lt;code&gt;nodeJs&lt;/code&gt; 、&lt;code&gt;npm&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;安装-Docsify-插件&#34;&gt;&lt;a href=&#34;#安装-Docsify-插件&#34; class=&#34;headerlink&#34; title=&#34;安装 Docsify 插件&#34;&gt;&lt;/a&gt;安装 Docsify 插件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;自己创建一个要下载到本地的文件夹，然后在这里直接利用命令下载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;推荐全局安装 &lt;code&gt;docsify-cli&lt;/code&gt; 工具，可以方便地创建及在本地预览生成的文档。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm i docsify-cli -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	下载完成之后，进入 &lt;code&gt;./node_modules/.bin&lt;/code&gt; 使用终端查看安装是否成功 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;docsify -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507180321976.png&#34; alt=&#34;image-20220507180321976&#34;&gt;&lt;/p&gt;
&lt;p&gt;出现版本号，表明安装成功，自己再将该路径定义为 &lt;strong&gt;系统环境变量&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;初始化项目&#34;&gt;&lt;a href=&#34;#初始化项目&#34; class=&#34;headerlink&#34; title=&#34;初始化项目&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL3F1aWNrc3RhcnQ/aWQ9JUU1JTg4JTlEJUU1JUE3JThCJUU1JThDJTk2JUU5JUExJUI5JUU3JTlCJUFF&#34;&gt;初始化项目&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;如果想在项目的 &lt;code&gt;./docs&lt;/code&gt; 目录里写文档，直接通过 &lt;code&gt;init&lt;/code&gt; 初始化项目。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;# init 初始化 + 初始化文件
docsify init ./docs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初始化成功：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507180556746.png&#34; alt=&#34;image-20220507180556746&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507180639225.png&#34; alt=&#34;image-20220507180639225&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;开始写文档&#34;&gt;&lt;a href=&#34;#开始写文档&#34; class=&#34;headerlink&#34; title=&#34;开始写文档&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL3F1aWNrc3RhcnQ/aWQ9JUU1JUJDJTgwJUU1JUE3JThCJUU1JTg2JTk5JUU2JTk2JTg3JUU2JUExJUEz&#34;&gt;开始写文档&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;初始化成功后，可以看到 &lt;code&gt;./docs&lt;/code&gt; 目录下创建的几个文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt; 入口文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;README.md&lt;/code&gt; 会做为主页内容渲染&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.nojekyll&lt;/code&gt; 用于阻止 GitHub Pages 忽略掉下划线开头的文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;直接编辑 &lt;code&gt;docs/README.md&lt;/code&gt; 就能更新文档内容，当然也可以&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL21vcmUtcGFnZXM=&#34;&gt;添加更多页面&lt;/span&gt;。&lt;/p&gt;
&lt;h2 id=&#34;本地预览&#34;&gt;&lt;a href=&#34;#本地预览&#34; class=&#34;headerlink&#34; title=&#34;本地预览&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL3F1aWNrc3RhcnQ/aWQ9JUU2JTlDJUFDJUU1JTlDJUIwJUU5JUEyJTg0JUU4JUE3JTg4&#34;&gt;本地预览&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;​	通过运行 &lt;code&gt;docsify serve&lt;/code&gt; 启动一个本地服务器，可以方便地实时预览效果。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;docsify serve docs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;默认访问地址：&lt;/strong&gt;   &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDozMDAwLw==&#34;&gt;http://localhost:3000&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;IDE&lt;/code&gt; 有可能遇到的问题。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507182733021.png&#34; alt=&#34;image-20220507182733021&#34;&gt;&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JraG9sZS9hcnRpY2xlL2RldGFpbHMvMTI0NjM2OTE2&#34;&gt;https://blog.csdn.net/Bkhole/article/details/124636916&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;访问结果：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507183235754.png&#34; alt=&#34;image-20220507183235754&#34;&gt;&lt;/p&gt;
&lt;p&gt;和 &lt;code&gt;README.md&lt;/code&gt; 文件内容一致。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们在开发的时候 所有内容都是动态更新的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;功能开发&#34;&gt;&lt;a href=&#34;#功能开发&#34; class=&#34;headerlink&#34; title=&#34;功能开发&#34;&gt;&lt;/a&gt;功能开发&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;主要内容还是参考 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuLw==&#34;&gt;官网 &lt;/span&gt;，这里只做简单描述。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;分页&#34;&gt;&lt;a href=&#34;#分页&#34; class=&#34;headerlink&#34; title=&#34;分页&#34;&gt;&lt;/a&gt;分页&lt;/h3&gt;&lt;p&gt;​	如果需要创建多个页面，或者需要多级路由的网站，在 docsify 里也能很容易的实现。例如创建一个 &lt;code&gt;guide.md&lt;/code&gt; 文件，那么对应的路由就是 &lt;code&gt;/#/guide&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;假设你的目录结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;.
└── docs
    ├── README.md
    ├── guide.md
    └── zh-cn
        ├── README.md
        └── guide.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么对应的访问页面将是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;text&#34;&gt;docs/README.md        =&amp;gt; http://domain.com
docs/guide.md         =&amp;gt; http://domain.com/guide
docs/zh-cn/README.md  =&amp;gt; http://domain.com/zh-cn/
docs/zh-cn/guide.md   =&amp;gt; http://domain.com/zh-cn/guide
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;定制侧边栏&#34;&gt;&lt;a href=&#34;#定制侧边栏&#34; class=&#34;headerlink&#34; title=&#34;定制侧边栏&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL21vcmUtcGFnZXM/aWQ9JUU1JUFFJTlBJUU1JTg4JUI2JUU0JUJFJUE3JUU4JUJFJUI5JUU2JUEwJThG&#34;&gt;定制侧边栏&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;为了获得侧边栏，您需要创建自己的 &lt;code&gt;_sidebar.md&lt;/code&gt;，你也可以自定义加载的文件名。默认情况下侧边栏会通过 Markdown 文件自动生成，效果如当前的文档的侧边栏。&lt;/p&gt;
&lt;p&gt;首先配置 &lt;code&gt;loadSidebar&lt;/code&gt; 选项，具体配置规则见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvbmZpZ3VyYXRpb24/aWQ9bG9hZHNpZGViYXI=&#34;&gt;配置项#loadSidebar&lt;/span&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!-- index.html --&amp;gt;

&amp;lt;script&amp;gt;
  window.$docsify = &amp;#123;
      &amp;lt;!-- 打开配置 --&amp;gt;
    loadSidebar: true
  &amp;#125;
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接着创建 &lt;code&gt;_sidebar.md&lt;/code&gt; 文件，内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;markdown&#34;&gt;&amp;lt;!-- docs/_sidebar.md --&amp;gt;

* [首页](zh-cn/)
* [指南](zh-cn/guide)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要在 &lt;code&gt;./docs&lt;/code&gt; 目录创建 &lt;code&gt;.nojekyll&lt;/code&gt; 命名的空文件，阻止 GitHub Pages 忽略命名是下划线开头的文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;###&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL21vcmUtcGFnZXM/aWQ9JUU2JTk4JUJFJUU3JUE0JUJBJUU3JTlCJUFFJUU1JUJEJTk1&#34;&gt;显示目录&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;自定义侧边栏同时也可以开启目录功能。设置 &lt;code&gt;subMaxLevel&lt;/code&gt; 配置项，具体介绍见 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvbmZpZ3VyYXRpb24/aWQ9c3VibWF4bGV2ZWw=&#34;&gt;配置项#subMaxLevel&lt;/span&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!-- index.html --&amp;gt;

&amp;lt;script&amp;gt;
  window.$docsify = &amp;#123;
    loadSidebar: true,
    subMaxLevel: 2
  &amp;#125;
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;自定义导航栏&#34;&gt;&lt;a href=&#34;#自定义导航栏&#34; class=&#34;headerlink&#34; title=&#34;自定义导航栏&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2N1c3RvbS1uYXZiYXI/aWQ9JUU4JTg3JUFBJUU1JUFFJTlBJUU0JUI5JTg5JUU1JUFGJUJDJUU4JTg4JUFBJUU2JUEwJThG&#34;&gt;自定义导航栏&lt;/span&gt;&lt;/h3&gt;&lt;h4 id=&#34;HTML&#34;&gt;&lt;a href=&#34;#HTML&#34; class=&#34;headerlink&#34; title=&#34;HTML&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2N1c3RvbS1uYXZiYXI/aWQ9aHRtbA==&#34;&gt;HTML&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;如果你需要定制导航栏，可以用 HTML 创建一个导航栏。&lt;/p&gt;
&lt;p&gt;注意：文档的链接都要以 &lt;code&gt;#/&lt;/code&gt; 开头。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!-- index.html --&amp;gt;

&amp;lt;body&amp;gt;
  &amp;lt;nav&amp;gt;
    &amp;lt;a href=&amp;quot;#/&amp;quot;&amp;gt;EN&amp;lt;/a&amp;gt;
    &amp;lt;a href=&amp;quot;#/zh-cn/&amp;quot;&amp;gt;中文&amp;lt;/a&amp;gt;
  &amp;lt;/nav&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;配置文件&#34;&gt;&lt;a href=&#34;#配置文件&#34; class=&#34;headerlink&#34; title=&#34;配置文件&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2N1c3RvbS1uYXZiYXI/aWQ9JUU5JTg1JThEJUU3JUJEJUFFJUU2JTk2JTg3JUU0JUJCJUI2&#34;&gt;配置文件&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;那我们可以通过 Markdown 文件来配置导航。首先配置 &lt;code&gt;loadNavbar&lt;/code&gt;，默认加载的文件为 &lt;code&gt;_navbar.md&lt;/code&gt;。具体配置规则见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL2NvbmZpZ3VyYXRpb24/aWQ9bG9hZG5hdmJhcg==&#34;&gt;配置项#loadNavbar&lt;/span&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!-- index.html --&amp;gt;

&amp;lt;script&amp;gt;
  window.$docsify = &amp;#123;
    loadNavbar: true
  &amp;#125;
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- _navbar.md --&amp;gt;

* [En](/)
* [中文](/zh-cn/)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你需要在 &lt;code&gt;./docs&lt;/code&gt; 目录下创建一个 &lt;code&gt;.nojekyll&lt;/code&gt; 文件，以防止 GitHub Pages 忽略下划线开头的文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;_navbar.md&lt;/code&gt; 加载逻辑和 &lt;code&gt;sidebar&lt;/code&gt; 文件一致，从每层目录下获取。例如当前路由为 &lt;code&gt;/zh-cn/custom-navbar&lt;/code&gt; 那么是从 &lt;code&gt;/zh-cn/_navbar.md&lt;/code&gt; 获取导航栏。&lt;/p&gt;
&lt;h3 id=&#34;封面&#34;&gt;&lt;a href=&#34;#封面&#34; class=&#34;headerlink&#34; title=&#34;封面&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvdmVyP2lkPSVFNSVCMCU4MSVFOSU5RCVBMg==&#34;&gt;封面&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;通过设置 &lt;code&gt;coverpage&lt;/code&gt; 参数，可以开启渲染封面的功能。具体用法见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL2NvbmZpZ3VyYXRpb24/aWQ9Y292ZXJwYWdl&#34;&gt;配置项#coverpage&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;基本用法&#34;&gt;&lt;a href=&#34;#基本用法&#34; class=&#34;headerlink&#34; title=&#34;基本用法&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvdmVyP2lkPSVFNSU5RiVCQSVFNiU5QyVBQyVFNyU5NCVBOCVFNiVCMyU5NQ==&#34;&gt;基本用法&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;封面的生成同样是从 markdown 文件渲染来的。开启渲染封面功能后在文档根目录创建 &lt;code&gt;_coverpage.md&lt;/code&gt; 文件。渲染效果如本文档。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;index.html&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!-- index.html --&amp;gt;

&amp;lt;script&amp;gt;
  window.$docsify = &amp;#123;
    coverpage: true
  &amp;#125;
&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;!-- techPage.md --&amp;gt;

&amp;#123;% asset_img icon.svg logo %&amp;#125;

# docsify &amp;lt;small&amp;gt;3.5&amp;lt;/small&amp;gt;

&amp;gt; 一个神奇的文档网站生成器。

- 简单、轻便 (压缩后 ~21kB)
- 无需生成 html 文件
- 众多主题

[GitHub](https://github.com/docsifyjs/docsify/)
[Get Started](#docsify)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;自定义背景&#34;&gt;&lt;a href=&#34;#自定义背景&#34; class=&#34;headerlink&#34; title=&#34;自定义背景&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvdmVyP2lkPSVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OSVFOCU4MyU4QyVFNiU5OSVBRg==&#34;&gt;自定义背景&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;目前的背景是随机生成的渐变色，我们自定义背景色或者背景图。在文档末尾用添加图片的 Markdown 语法设置背景。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;_coverpage.md
&amp;lt;!-- _coverpage.md --&amp;gt;

# docsify &amp;lt;small&amp;gt;3.5&amp;lt;/small&amp;gt;

[GitHub](https://github.com/docsifyjs/docsify/)
[Get Started](#quick-start)

&amp;lt;!-- 背景图片 --&amp;gt;

&amp;#123;% asset_img bg.png  %&amp;#125;

&amp;lt;!-- 背景色 --&amp;gt;

![color](#f0f0f0)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;封面作为首页&#34;&gt;&lt;a href=&#34;#封面作为首页&#34; class=&#34;headerlink&#34; title=&#34;封面作为首页&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvdmVyP2lkPSVFNSVCMCU4MSVFOSU5RCVBMiVFNCVCRCU5QyVFNCVCOCVCQSVFOSVBNiU5NiVFOSVBMSVCNQ==&#34;&gt;封面作为首页&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;通常封面和首页是同时出现的，当然你也是当封面独立出来通过设置&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2NvbmZpZ3VyYXRpb24/aWQ9b25seWNvdmVy&#34;&gt;onlyCover 选项&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;部署&#34;&gt;&lt;a href=&#34;#部署&#34; class=&#34;headerlink&#34; title=&#34;部署&#34;&gt;&lt;/a&gt;部署&lt;/h3&gt;&lt;p&gt;和 GitBook 生成的文档一样，我们可以直接把文档网站部署到 GitHub Pages 或者 VPS 上。&lt;/p&gt;
&lt;h4 id=&#34;GitHub-Pages&#34;&gt;&lt;a href=&#34;#GitHub-Pages&#34; class=&#34;headerlink&#34; title=&#34;GitHub Pages&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzaWZ5LmpzLm9yZy8jL3poLWNuL2RlcGxveT9pZD1naXRodWItcGFnZXM=&#34;&gt;GitHub Pages&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;GitHub Pages 支持从三个地方读取文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docs/&lt;/code&gt; 目录&lt;/li&gt;
&lt;li&gt;master 分支&lt;/li&gt;
&lt;li&gt;gh-pages 分支&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们推荐直接将文档放在 &lt;code&gt;docs/&lt;/code&gt; 目录下，在设置页面开启 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 功能并选择 &lt;code&gt;master branch /docs folder&lt;/code&gt; 选项。&lt;/p&gt;
&lt;h4 id=&#34;配置过程&#34;&gt;&lt;a href=&#34;#配置过程&#34; class=&#34;headerlink&#34; title=&#34;配置过程&#34;&gt;&lt;/a&gt;配置过程&lt;/h4&gt;&lt;p&gt;1、创建一个GitHub仓库&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要求：&lt;/p&gt;
&lt;p&gt;1、仓库名格式必须符合：github_username.github.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、配置 GithubPage&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;随便选一个主题，毕竟我们也不用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185116977.png&#34; alt=&#34;image-20220507185116977&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185152734.png&#34; alt=&#34;image-20220507185152734&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185320819.png&#34; alt=&#34;image-20220507185320819&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185336250.png&#34; alt=&#34;image-20220507185336250&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、上传项目&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直接将我们的项目上传到这个库中即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;–考虑到是保姆级教程我们将上传步骤也写一下&lt;/p&gt;
&lt;p&gt;（1）首先我们将仓库中的信息拉取下来&lt;/p&gt;
&lt;p&gt;​	这是第二步配置结束之后会产生&lt;code&gt;GitHubPage&lt;/code&gt;的配置文件&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507185418951.png&#34; alt=&#34;image-20220507185418951&#34;&gt;&lt;/p&gt;
&lt;p&gt;（2）将配置文件与我们的docs文件一起重新提交到仓库中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;git&#34;&gt;git add xx

git commit xx -m&amp;quot;注释&amp;quot;

git push xx 仓库地址 分支
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我这里直接使用工具 &lt;code&gt;Sourcetree&lt;/code&gt; 提交。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507190045839.png&#34; alt=&#34;image-20220507190045839&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、上传成功，部署成功&lt;/p&gt;
&lt;p&gt;直接访问：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9vbmx5bWFycnl1LmdpdGh1Yi5pby8jLw==&#34;&gt;https://onlymarryu.github.io/#/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cdn.jsdelivr.net/gh/onlymarryu/typora-ims-test@master/img/image-20220507184626485.png&#34; alt=&#34;image-20220507184626485&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	如果刷新不是想要的结果，只要确认之前所有本地测试结果正取，只是部署之后结果不对，这就是部署时间的问题，我们等一会刷新即可。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="博客" />
        <category term="环境搭建" />
        <updated>2022-10-14T09:50:50.721Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/DesignMode/</id>
        <title>设计模式</title>
        <link rel="alternate" href="http://example.com/2022/10/07/DesignMode/"/>
        <content type="html">&lt;h1 id=&#34;谈谈你对设计模式的理解&#34;&gt;&lt;a href=&#34;#谈谈你对设计模式的理解&#34; class=&#34;headerlink&#34; title=&#34;谈谈你对设计模式的理解&#34;&gt;&lt;/a&gt;谈谈你对设计模式的理解&lt;/h1&gt;&lt;p&gt;1.首先谈设计模式的作用：经验的传承，提高了软件复用的水平，最终达到提高软件开发效率&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五大原则&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;设计原则&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;简单说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;单一职责&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个类只负责一项职责&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;里氏替换原则&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;子类可以扩展父类的功能，但不能改变父类原有的功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;依赖倒置原则&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;要依赖于抽象，不要依赖于具体，核心思想是&lt;strong&gt;面向接口编程&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接口隔离原则&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;迪米特法则 （最少知道原则）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个对象应该对其他对象保持最少的了解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;开闭原则&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对扩展开放，对修改关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;2.设计模式的分类&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/2014caaf469649d1a3c84a582ef7319b.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;3.创建型模式：都是用来帮助我们创建对象的！&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/c6b87746e9884c22b56ca99bc265c496.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;4.结构性模式:关注对象和类的组织&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6b8dffa88b924af6ba3664386d6a9f0a.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;5.行为型模式:关注系统中对象之间的相互交换，研究系统在运行时对象之间的相互通信和协作，进一步明确对象的职责，共有11中模式&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/9bfe35ab4a494cc4ae84a20ee9e30a5c.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;一、创建型模式&#34;&gt;&lt;a href=&#34;#一、创建型模式&#34; class=&#34;headerlink&#34; title=&#34;一、创建型模式&#34;&gt;&lt;/a&gt;一、创建型模式&lt;/h1&gt;&lt;h2 id=&#34;1-单例模式&#34;&gt;&lt;a href=&#34;#1-单例模式&#34; class=&#34;headerlink&#34; title=&#34;1.单例模式&#34;&gt;&lt;/a&gt;1.单例模式&lt;/h2&gt;&lt;p&gt;作用：单例模式的核心是&lt;strong&gt;保证一个类只有一个实例，并且提供一个访问实例的全局访问点。&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;实现方式&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;优缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;饿汉式&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;线程安全，调用效率高 ，但是不能延迟加载&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;懒汉式&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;线程安全，调用效率不高，能延迟加载&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;双重检测锁式&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在懒汉式的基础上解决并发问题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;静态内部类式&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;线程安全，资源利用率高，可以延时加载&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;枚举单例&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;线程安全，调用效率高，但是不能延迟加载&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;饿汉式&#34;&gt;&lt;a href=&#34;#饿汉式&#34; class=&#34;headerlink&#34; title=&#34;饿汉式&#34;&gt;&lt;/a&gt;饿汉式&lt;/h3&gt;&lt;p&gt;也就是类加载的时候立即实例化对象，实现的步骤是先私有化构造方法，对外提供唯一的静态入口方法，实现如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 单例模式：饿汉式
 *
 */
public class SingletonInstance1 &amp;#123;
    // 声明此类型的变量，并实例化，当该类被加载的时候就完成了实例化并保存在了内存中
    private final static SingletonInstance1 instance = new SingletonInstance1();

    // 私有化所有的构造方法,防止直接通过new关键字实例化
    private SingletonInstance1()&amp;#123;&amp;#125;
    // 对外提供一个获取实例的静态方法
    public static SingletonInstance1 getInstance()&amp;#123;
        return instance;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;饿汉式单例模式代码中，static变量会在类装载时初始化，此时也不会涉及多个线程对象访问该对象的问题。虚拟机保证只会装载一次该类，肯定不会发生并发访问的问题。因此，可以省略synchronized关键字&lt;/p&gt;
&lt;p&gt;问题：如果只是加载本类，而不是要调用getInstance()，甚至永远没有调用，则会造成资源浪费！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 单例模式：饿汉式
 *
 */
public class SingletonInstance1 &amp;#123;
    private byte[] b1 = new byte[1024*1024];
    private byte[] b2 = new byte[1024*1024];
    private byte[] b3 = new byte[1024*1024];
    // 声明此类型的变量，并实例化，当该类被加载的时候就完成了实例化并保存在了内存中
    private final static SingletonInstance1 instance = new SingletonInstance1();

    // 私有化所有的构造方法,防止直接通过new关键字实例化
    private SingletonInstance1()&amp;#123;&amp;#125;
    // 对外提供一个获取实例的静态方法
    public static SingletonInstance1 getInstance()&amp;#123;
        return instance;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;懒汉式&#34;&gt;&lt;a href=&#34;#懒汉式&#34; class=&#34;headerlink&#34; title=&#34;懒汉式&#34;&gt;&lt;/a&gt;懒汉式&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 单例模式：懒汉式
 *
 */
public class SingletonInstance2 &amp;#123;
    // 声明此类型的变量,但没有实例化
    private static SingletonInstance2 instance = null;

    // 私有化所有的构造方法,防止直接通过new关键字实例化
    private SingletonInstance2()&amp;#123;&amp;#125;
    // 对外提供一个获取实例的静态方法，为了数据安全添加synchronized关键字
    public static synchronized SingletonInstance2 getInstance()&amp;#123;
        if(instance == null)&amp;#123;
            // 当instance不为空的时候才实例化
            instance = new SingletonInstance2();
        &amp;#125;
        return instance;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;此种方式在类加载后如果我们一直没有调用getInstance方法，那么就不会实例化对象。实现了延迟加载，但是因为在方法上添加了synchronized关键字，每次调用getInstance方法都会同步，所以对性能的影响比较大。&lt;/p&gt;
&lt;h3 id=&#34;双重检测锁&#34;&gt;&lt;a href=&#34;#双重检测锁&#34; class=&#34;headerlink&#34; title=&#34;双重检测锁&#34;&gt;&lt;/a&gt;双重检测锁&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 单例模式：懒汉式
 * 双重检测机制
 *
 */
public class SingletonInstance3 &amp;#123;
    // 声明此类型的变量,但没有实例化
    private static volatile  SingletonInstance3 instance = null;

    // 私有化所有的构造方法,防止直接通过new关键字实例化
    private SingletonInstance3()&amp;#123;&amp;#125;
    // 对外提供一个获取实例的静态方法，
    public static  SingletonInstance3 getInstance()&amp;#123;
        if(instance == null)&amp;#123;
            synchronized(SingletonInstance3.class)&amp;#123;
                if(instance == null)&amp;#123;
                    // 1.分配内存空间  2. 执行构造方法，实例化对象 3.把这个对象赋值给这个空间
                    // 如果不加volatile 会执行重排序 1 3 2 
                    instance = new SingletonInstance3();
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return instance;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不加volatile有指令重排序的问题。添加后可以解决。&lt;/p&gt;
&lt;h3 id=&#34;静态内部类&#34;&gt;&lt;a href=&#34;#静态内部类&#34; class=&#34;headerlink&#34; title=&#34;静态内部类&#34;&gt;&lt;/a&gt;静态内部类&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 静态内部类实现方式
 *
 */
public class SingletonInstance4 &amp;#123;
    // 静态内部类
    public static class SingletonClassInstance&amp;#123;
        // 声明外部类型的静态常量
        public static final SingletonInstance4 instance = new SingletonInstance4();
    &amp;#125;
    // 私有化构造方法
    private SingletonInstance4()&amp;#123;&amp;#125;

    // 对外提供的唯一获取实例的方法
    public static SingletonInstance4 getInstance()&amp;#123;
        return SingletonClassInstance.instance;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;枚举单例&#34;&gt;&lt;a href=&#34;#枚举单例&#34; class=&#34;headerlink&#34; title=&#34;枚举单例&#34;&gt;&lt;/a&gt;枚举单例&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 单例模式：枚举方式实现
 *
 */
public enum SingletonInstance5 &amp;#123;

    // 定义一个枚举元素，则这个元素就代表了SingletonInstance5的实例
    INSTANCE;

    public void singletonOperation()&amp;#123;
        // 功能处理
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-怎么解决反射爆破单例&#34;&gt;&lt;a href=&#34;#2-怎么解决反射爆破单例&#34; class=&#34;headerlink&#34; title=&#34;2.怎么解决反射爆破单例&#34;&gt;&lt;/a&gt;2.怎么解决反射爆破单例&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;在单例中我们定义的私有的构造器，但是我们知道反射是可以操作私有的属性和方法的，这时我们应该怎么处理？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) throws Exception, IllegalAccessException &amp;#123;
    SingletonInstance1 s1 = SingletonInstance1.getInstance();
    // 反射方式获取实例
    Class c1 = SingletonInstance1.class;
    Constructor constructor = c1.getDeclaredConstructor(null);
    constructor.setAccessible(true);
    SingletonInstance1 s2 = (SingletonInstance1)constructor.newInstance(null);
    System.out.println(s1);
    System.out.println(s2);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;txt&#34;&gt;com.dpb.single.SingletonInstance1@15db9742
com.dpb.single.SingletonInstance1@6d06d69c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;产生了两个对象，和单例的设计初衷违背了。&lt;br&gt;解决的方式是在无参构造方法中手动抛出异常控制,或者声明一个全局变量来控制。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// 私有化所有的构造方法,防止直接通过new关键字实例化
private SingletonInstance2()&amp;#123;
    if(instance != null)&amp;#123;
        // 只能有一个实例存在，如果再次调用该构造方法就抛出异常，防止反射方式实例化
        throw new RuntimeException(&amp;quot;单例模式只能创建一个对象&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面这种方式我们还可以通过反序列化的方式来破解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) throws Exception, IllegalAccessException &amp;#123;
    SingletonInstance2 s1 = SingletonInstance2.getInstance();
    // 将实例对象序列化到文件中
    ObjectOutputStream oos = new ObjectOutputStream(
            new FileOutputStream(&amp;quot;c:/tools/a.txt&amp;quot;));
    oos.writeObject(s1);
    oos.flush();
    oos.close();
    // 将实例从文件中反序列化出来
    ObjectInputStream ois = new ObjectInputStream(
            new FileInputStream(&amp;quot;c:/tools/a.txt&amp;quot;));
    SingletonInstance2 s2 = (SingletonInstance2) ois.readObject();
    ois.close();
    System.out.println(s1);
    System.out.println(s2);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们只需要在单例类中重写readResolve方法并在该方法中返回单例对象即可，如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.dpb.single;

import java.io.ObjectStreamException;
import java.io.Serializable;

/**
 * 单例模式：懒汉式
 *
 */
public class SingletonInstance2 implements Serializable&amp;#123;

    // 声明此类型的变量,但没有实例化
    private static SingletonInstance2 instance = null;

    // 私有化所有的构造方法,防止直接通过new关键字实例化
    private SingletonInstance2()&amp;#123;
        if(instance != null)&amp;#123;
            // 只能有一个实例存在，如果再次调用该构造方法就抛出异常，防止反射方式实例化
            throw new RuntimeException(&amp;quot;单例模式只能创建一个对象&amp;quot;);
        &amp;#125;
    &amp;#125;
    // 对外提供一个获取实例的静态方法，为了数据安全添加synchronized关键字
    public static synchronized SingletonInstance2 getInstance()&amp;#123;
        if(instance == null)&amp;#123;
            // 当instance不为空的时候才实例化
            instance = new SingletonInstance2();
        &amp;#125;
        return instance;
    &amp;#125;
    // 重写该方法，防止序列化和反序列化获取实例
    private Object readResolve() throws ObjectStreamException&amp;#123;
        return instance;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;说明:readResolve方法是基于回调的，反序列化时，如果定义了readResolve()则直接返回此方法指定的对象，而不需要在创建新的对象！&lt;/p&gt;
&lt;h2 id=&#34;3-说说你在哪些框架中看到了单例的设计&#34;&gt;&lt;a href=&#34;#3-说说你在哪些框架中看到了单例的设计&#34; class=&#34;headerlink&#34; title=&#34;3.说说你在哪些框架中看到了单例的设计&#34;&gt;&lt;/a&gt;3.说说你在哪些框架中看到了单例的设计&lt;/h2&gt;&lt;p&gt;1.Spring中的Bean对象，默认是单例模式&lt;/p&gt;
&lt;p&gt;2.相关的工厂对象都是单例，比如：MyBatis中的SqlSessionFactory，Spring中的BeanFactory&lt;/p&gt;
&lt;p&gt;3.保存相关配置信息的都是单例，比如：MyBatis中的Configuration对象，SpringBoot中的各个XXXAutoConfiguration对象等&lt;/p&gt;
&lt;p&gt;4.应用程序的日志应用，一般都会通过单例来实现&lt;/p&gt;
&lt;p&gt;5.数据库连接池的设计也是单例模式&lt;/p&gt;
&lt;h2 id=&#34;4-工厂模式&#34;&gt;&lt;a href=&#34;#4-工厂模式&#34; class=&#34;headerlink&#34; title=&#34;4.工厂模式&#34;&gt;&lt;/a&gt;4.工厂模式&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;工厂模式的作用是帮助我们创建对象，我们不用自己来创建，根据需要创建的对象的复杂度我们可以把工厂模式分为简单工厂，工厂方法和抽象工厂。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/95f501de57d3451faf9228414dc6f75f.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-1-简单工厂&#34;&gt;&lt;a href=&#34;#4-1-简单工厂&#34; class=&#34;headerlink&#34; title=&#34;4.1 简单工厂&#34;&gt;&lt;/a&gt;4.1 简单工厂&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;简单工厂模式又称为静态工厂方法，他可以根据不同的参数而返回不同的实例，简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。&lt;/p&gt;
&lt;p&gt;JDK中的简单工厂应用：DataFormat&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/4fdddcfbf8784080a3706158f6945e9a.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;自己写一个简单工厂的案例&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/de2237eb14fe491fbd38c5a815fa7c27.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 简单工厂
 */
public class SimpleFactory &amp;#123;

    public static void main(String[] args) &amp;#123;
        // 根据对应的类型返回相关产品
        CarFactory.createCar(&amp;quot;奥迪&amp;quot;).run();
        CarFactory.createCar(&amp;quot;Byd&amp;quot;).run();
    &amp;#125;
&amp;#125;

// 定义公共的接口
interface Car&amp;#123;
    void run();
&amp;#125;

class Audi implements Car&amp;#123;
    @Override
    public void run() &amp;#123;
        System.out.println(&amp;quot;奥迪在跑...&amp;quot;);
    &amp;#125;
&amp;#125;

class Byd implements Car&amp;#123;
    @Override
    public void run() &amp;#123;
        System.out.println(&amp;quot;Byd在跑...&amp;quot;);
    &amp;#125;
&amp;#125;

// 创建对应的简单工厂类
class CarFactory&amp;#123;
    public static Car createCar(String type)&amp;#123;
        if(&amp;quot;奥迪&amp;quot;.equals(type))&amp;#123;
            return new Audi();
        &amp;#125;else if(&amp;quot;Byd&amp;quot;.equals(type))&amp;#123;
            return new Byd();
        &amp;#125;else&amp;#123;
            throw new RuntimeException(&amp;quot;该产品不能生产&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以发现简单工厂对于新增产品是无能为力的！不修改原有代码根本就没办法扩展!!!&lt;/p&gt;
&lt;h3 id=&#34;4-2-工厂方法&#34;&gt;&lt;a href=&#34;#4-2-工厂方法&#34; class=&#34;headerlink&#34; title=&#34;4.2 工厂方法&#34;&gt;&lt;/a&gt;4.2 工厂方法&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;针对于简单工厂的短板，引出了工厂方法模式，定义一个用户创建对象的接口，让子类决定实例化哪个类，工厂方法使一个类的实例化延迟到了其子类中。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/cedbded5fc4543eb80dd3663bbe814c7.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 工厂方法模式
 */
public class FactoryMethod &amp;#123;

    public static void main(String[] args) &amp;#123;
        new AudiCarFactory().createCar().run();
        new BydCarFactory().createCar().run();
    &amp;#125;


    public static interface  Car&amp;#123;
        public void run();
    &amp;#125;

    public static class Byd implements Car&amp;#123;
        @Override
        public void run() &amp;#123;
            System.out.println(&amp;quot;比亚迪...&amp;quot;);
        &amp;#125;
    &amp;#125;

    public static class Audi implements Car&amp;#123;
        @Override
        public void run() &amp;#123;
            System.out.println(&amp;quot;奥迪...&amp;quot;);
        &amp;#125;
    &amp;#125;

    public static interface CarFactory&amp;#123;
        public Car createCar();
    &amp;#125;

    // 扩展的工厂
    public static class AudiCarFactory implements CarFactory&amp;#123;
        @Override
        public Car createCar() &amp;#123;
            return new Audi();
        &amp;#125;
    &amp;#125;

    public static class BydCarFactory implements CarFactory&amp;#123;
        @Override
        public Car createCar() &amp;#123;
            return new Byd();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简单工厂和工厂方法模式的对比&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单工厂只有一个工厂，而工厂方法有多个工厂&lt;/li&gt;
&lt;li&gt;简单工厂不支持扩展，而工厂方法支持扩展，扩展的方式就是添加对应的工厂类即可&lt;/li&gt;
&lt;li&gt;简单工厂代码复杂度低，工厂方法代码复杂度高&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;4-3-抽象工厂&#34;&gt;&lt;a href=&#34;#4-3-抽象工厂&#34; class=&#34;headerlink&#34; title=&#34;4.3 抽象工厂&#34;&gt;&lt;/a&gt;4.3 抽象工厂&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;上面的两种方式实现的工厂都是生产同一大类的产品，如果要实现生产不同类型的产品这时我们就可以用抽象工厂模式来实现。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/185ba2bc37394c47ae8f62390d019829.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;代码实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 抽象工厂：多个产品族
 */
public class AbstractFactory &amp;#123;

    public static void main(String[] args) &amp;#123;
        Car car = new LuxuryEngineCarFacory().createCar();
        Engine engine = new LuxuryEngineCarFacory().createEngine();
        car.run();
        engine.run();
    &amp;#125;

    // 抽象工厂
    public static interface AbstarctComponentFactory&amp;#123;
        Car createCar();
        Engine createEngine();
    &amp;#125;

    public static class LuxuryEngineCarFacory implements AbstarctComponentFactory&amp;#123;
        @Override
        public Engine createEngine() &amp;#123;
            return new LuxuryEngineFactory().createEngine();
        &amp;#125;

        @Override
        public Car createCar() &amp;#123;
            return new BydCarFactory().createCar();
        &amp;#125;
    &amp;#125;

    public static class LowEngineCarFacory implements AbstarctComponentFactory&amp;#123;
        @Override
        public Car createCar() &amp;#123;
            return new AudiCarFactory().createCar();
        &amp;#125;

        @Override
        public Engine createEngine() &amp;#123;
            return new LowEngineFactory().createEngine();
        &amp;#125;
    &amp;#125;

    // 汽车产品族
    public static interface  Car&amp;#123;
        public void run();
    &amp;#125;

    public static class Byd implements Car &amp;#123;
        @Override
        public void run() &amp;#123;
            System.out.println(&amp;quot;比亚迪...&amp;quot;);
        &amp;#125;
    &amp;#125;

    public static class Audi implements Car &amp;#123;
        @Override
        public void run() &amp;#123;
            System.out.println(&amp;quot;奥迪...&amp;quot;);
        &amp;#125;
    &amp;#125;

    public static interface CarFactory&amp;#123;
        public Car createCar();
    &amp;#125;

    // 扩展的工厂
    public static class AudiCarFactory implements CarFactory &amp;#123;
        @Override
        public Car createCar() &amp;#123;
            return new Audi();
        &amp;#125;
    &amp;#125;

    public static class BydCarFactory implements  CarFactory&amp;#123;
        @Override
        public Car createCar() &amp;#123;
            return new Byd();
        &amp;#125;
    &amp;#125;

    // 发动机产品族
    public static interface Engine&amp;#123;
        public void run();
    &amp;#125;

    public static class LuxuryEngine implements Engine&amp;#123;
        @Override
        public void run() &amp;#123;
            System.out.println(&amp;quot;豪华版发动机...&amp;quot;);
        &amp;#125;
    &amp;#125;

    public static class LowEngine implements Engine&amp;#123;
        @Override
        public void run() &amp;#123;
            System.out.println(&amp;quot;低配版发动机...&amp;quot;);
        &amp;#125;
    &amp;#125;

    public static interface EngineFactory&amp;#123;
        public Engine createEngine();
    &amp;#125;

    public static class LuxuryEngineFactory implements EngineFactory&amp;#123;
        @Override
        public Engine createEngine() &amp;#123;
            return new LuxuryEngine();
        &amp;#125;
    &amp;#125;

    public static class LowEngineFactory implements EngineFactory&amp;#123;
        @Override
        public Engine createEngine() &amp;#123;
            return new LowEngine();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;三者的对比：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;简单工厂模式(静态工厂模式) ：虽然某种程度不符合设计原则，但实际使用最多。&lt;/li&gt;
&lt;li&gt;工厂方法模式：不修改已有类的前提下，通过增加新的工厂类实现扩展。&lt;/li&gt;
&lt;li&gt;抽象工厂模式：不可以增加产品，可以增加产品族！&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;5-建造者模式&#34;&gt;&lt;a href=&#34;#5-建造者模式&#34; class=&#34;headerlink&#34; title=&#34;5.建造者模式&#34;&gt;&lt;/a&gt;5.建造者模式&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;实际开发中，我们所需要的对象构建时非常复杂，且有很多步骤需要处理时，这时建造者模式就很适合。比如MyBatis中的SqlSessionFactory对象的创建，我们不光要创建SqlSessionFactory本身的对象，还有完成MyBatis的全局配置文件和映射文件的加载解析操作，之后把解析出来的信息绑定在SqlSessionFactory对象中，&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/21221aa599f9428083bc92d81ac151d2.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;直接参考MyBatis的代码即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6d7aec1477204d9397cf5b59a1f2ad65.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以建造者模式的作用就是帮助我们解决了复杂对象的创建&lt;/p&gt;
&lt;p&gt;建造者模式和工厂模式的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关注的维度是不一样的&lt;/li&gt;
&lt;li&gt;工厂模式创建对象 new 出来&lt;/li&gt;
&lt;li&gt;建造者模式关注的是对象创建的本身&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-原型模式&#34;&gt;&lt;a href=&#34;#6-原型模式&#34; class=&#34;headerlink&#34; title=&#34;6.原型模式&#34;&gt;&lt;/a&gt;6.原型模式&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;在java中我们知道通过new关键字创建的对象是非常繁琐的(类加载判断，内存分配，初始化等)，在我们需要大量对象的情况下，原型模式就是我们可以考虑实现的方式。&lt;br&gt;&amp;amp;emsp;&amp;amp;emsp;原型模式我们也称为克隆模式，即一个某个对象为原型克隆出来一个一模一样的对象，该对象的属性和原型对象一模一样。而且对于原型对象没有任何影响。原型模式的克隆方式有两种：浅克隆和深度克隆.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;原型模式&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;浅克隆&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;只是拷贝本对象,其对象内部的数组、引用对象等都不拷贝，&amp;#96;&amp;#96;还是指向原生对象的内部元素地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;深度克隆&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;深复制把要复制的对象所引用的对象都复制了一遍&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;6-1-浅克隆&#34;&gt;&lt;a href=&#34;#6-1-浅克隆&#34; class=&#34;headerlink&#34; title=&#34;6.1 浅克隆&#34;&gt;&lt;/a&gt;6.1 浅克隆&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅复制仅仅复制所考虑的对象，而不复制它所引用的对象。 Object类提供的方法clone&amp;#x3D;只是拷贝本对象&amp;#x3D; ， &amp;#x3D;其对象内部的数组、引用对象等都不拷贝&amp;#x3D; ，还是指向原生对象的内部元素地址.&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;被克隆的对象必须Cloneable,Serializable这两个接口;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.bobo.prototype;

import java.io.Serializable;
import java.util.Date;

public class User implements Cloneable, Serializable &amp;#123;

    private String name;

    private Date birth;

    private int age;

    /**
     * 实现克隆的方法
     * @return
     * @throws CloneNotSupportedException
     */
    @Override
    protected Object clone() throws CloneNotSupportedException &amp;#123;
        return super.clone();
    &amp;#125;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public Date getBirth() &amp;#123;
        return birth;
    &amp;#125;

    public void setBirth(Date birth) &amp;#123;
        this.birth = birth;
    &amp;#125;

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public static void main(String[] args) throws Exception &amp;#123;
        // 创建一个普通对象
        Date date =  new Date(666666);
        User user = new User();
        user.setName(&amp;quot;波波烤鸭&amp;quot;);
        user.setAge(18);
        user.setBirth(date);
        System.out.println(&amp;quot;原型对象的属性：&amp;quot; + user);
        // 克隆对象
        User cloneUser = (User) user.clone();
        System.out.println(&amp;quot;克隆的对象的属性：&amp;quot; + cloneUser);
        // 修改原型对象的属性
        date.setTime(12345677);
        // 修改克隆对象的属性
        cloneUser.setName(&amp;quot;波哥&amp;quot;);
        System.out.println(&amp;quot;原型对象的属性：&amp;quot; + user);
        System.out.println(&amp;quot;克隆的对象的属性：&amp;quot; + cloneUser);
    &amp;#125;

    @Override
    public String toString() &amp;#123;
        return &amp;quot;User&amp;#123;&amp;quot; +
                &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;quot;, birth=&amp;quot; + birth +
                &amp;quot;, age=&amp;quot; + age +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6443e2d851514225a9253ca8d26de73f.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;浅克隆的问题:虽然产生了两个完全不同的对象，但是被复制的对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用都仍然指向原来的对象。&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/05ad80babac04b43956010b8244cd85b.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-2-深度克隆&#34;&gt;&lt;a href=&#34;#6-2-深度克隆&#34; class=&#34;headerlink&#34; title=&#34;6.2 深度克隆&#34;&gt;&lt;/a&gt;6.2 深度克隆&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;被复制对象的所有变量都含有与原来的对象相同的值，除去那些引用其他对象的变量。那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深复制把要复制的对象所引用的对象都复制了一遍。&lt;br&gt;实现的效果是:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/6fdf967a6fc74e8690b75e3bb3640b7c.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;深度克隆(deep clone)有两种实现方式，第一种是在浅克隆的基础上实现，第二种是通过序列化和反序列化实现，我们分别来介绍&lt;/p&gt;
&lt;p&gt;方式一：在浅克隆的基础上实现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    /**
     * 实现克隆的方法
     * @return
     * @throws CloneNotSupportedException
     */
    @Override
    protected Object clone() throws CloneNotSupportedException &amp;#123;
        User user = (User) super.clone();
        // 实现深度克隆
        user.birth = (Date) this.birth.clone();
        return user;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1462/1648123011000/1ba148deb0244a4dbfef33a8f1b3bcbd.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;方式二：序列化和反序列化&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;序列化&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把对象转换为字节序列的过程。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;反序列化&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把字节序列恢复为对象的过程。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) throws CloneNotSupportedException, Exception &amp;#123;
    Date date =  new Date(1231231231231l);
    User user = new User();
    user.setName(&amp;quot;波波烤鸭&amp;quot;);
    user.setAge(18);
    user.setBirth(date);
    System.out.println(&amp;quot;-----原型对象的属性------&amp;quot;);
    System.out.println(user);

    //使用序列化和反序列化实现深复制
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    ObjectOutputStream    oos = new ObjectOutputStream(bos);
    oos.writeObject(user);
    byte[] bytes = bos.toByteArray();

    ByteArrayInputStream  bis = new ByteArrayInputStream(bytes);
    ObjectInputStream	  ois = new ObjectInputStream(bis);

    //克隆好的对象！
    User user1 = (User) ois.readObject();   

    // 修改原型对象的值
    date.setTime(221321321321321l);
    System.out.println(user.getBirth());

    System.out.println(&amp;quot;------克隆对象的属性-------&amp;quot;);
    System.out.println(user1);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-谈谈你对创建型模式的理解&#34;&gt;&lt;a href=&#34;#7-谈谈你对创建型模式的理解&#34; class=&#34;headerlink&#34; title=&#34;7.谈谈你对创建型模式的理解&#34;&gt;&lt;/a&gt;7.谈谈你对创建型模式的理解&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;Java的23种设计模式分为3类，分别是&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/e7bfebaff043483eae41837038342d60.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;而创建型模式中有包含的如下的相关模式：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/370c67f33136431c8c3b4ab9f9e46445.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;而每个设计模式的作用如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/19e2c33ad56e4b2cb22b3447fcf0e6a5.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;二、结构性模式&#34;&gt;&lt;a href=&#34;#二、结构性模式&#34; class=&#34;headerlink&#34; title=&#34;二、结构性模式&#34;&gt;&lt;/a&gt;二、结构性模式&lt;/h1&gt;&lt;h2 id=&#34;1-代理模式&#34;&gt;&lt;a href=&#34;#1-代理模式&#34; class=&#34;headerlink&#34; title=&#34;1.代理模式&#34;&gt;&lt;/a&gt;1.代理模式&lt;/h2&gt;&lt;h3 id=&#34;1-1-代理模式的作用&#34;&gt;&lt;a href=&#34;#1-1-代理模式的作用&#34; class=&#34;headerlink&#34; title=&#34;1.1 代理模式的作用&#34;&gt;&lt;/a&gt;1.1 代理模式的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;代理模式的作用是通过代理对象来增强目标对象的功能。利用的是AOP横切的思想。&lt;/p&gt;
&lt;h3 id=&#34;1-2-代理模式的实现方式&#34;&gt;&lt;a href=&#34;#1-2-代理模式的实现方式&#34; class=&#34;headerlink&#34; title=&#34;1.2 代理模式的实现方式&#34;&gt;&lt;/a&gt;1.2 代理模式的实现方式&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;代理模式的实现方式有三种：静态代理，动态代理(JDK动态代理和CGLIB动态代理)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/ff3031b921b948338282ee57ee510c84.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-2-1-静态代理&#34;&gt;&lt;a href=&#34;#1-2-1-静态代理&#34; class=&#34;headerlink&#34; title=&#34;1.2.1 静态代理&#34;&gt;&lt;/a&gt;1.2.1 静态代理&lt;/h4&gt;&lt;p&gt;我们先声明接口和目标实现类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 定义公共接口
 */
public interface SomeService &amp;#123;
    String doSome();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;目标类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 目标对象 target
 */
public class SomeServiceImpl implements SomeService &amp;#123;
    @Override
    public String doSome() &amp;#123;
        System.out.println(&amp;quot;目标对象：doSome()&amp;quot; );
        return &amp;quot;hello ...&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后创建对应的代理类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 代理类
 *     增强实现类
 *     和实现类实现同一个接口
 */
public class SomeProxy implements SomeService&amp;#123;

    private SomeService target;

    public SomeProxy(SomeService target)&amp;#123;
        this.target = target;
    &amp;#125;

    /**
     * 增强的方法
     * @return
     */
    @Override
    public String doSome() &amp;#123;
        System.out.println(&amp;quot;目标方法执行之前...&amp;quot;);
        String s = target.doSome();
        System.out.println(&amp;quot;目标方法执行之后...&amp;quot;);
        return s.toUpperCase();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后测试实现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MainTest &amp;#123;
    public static void main(String[] args) &amp;#123;
        SomeService some = new SomeServiceImpl();
        SomeProxy proxy = new SomeProxy(some);
        System.out.println(proxy.doSome());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对应的输出结果&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;目标方法执行之前...
目标对象：doSome()
目标方法执行之后...
HELLO ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到代理对象实现了目标对象的调用，同时增强了目标对象的功能。&lt;/p&gt;
&lt;h4 id=&#34;1-2-2-JDK动态代理&#34;&gt;&lt;a href=&#34;#1-2-2-JDK动态代理&#34; class=&#34;headerlink&#34; title=&#34;1.2.2 JDK动态代理&#34;&gt;&lt;/a&gt;1.2.2 JDK动态代理&lt;/h4&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;上面的静态代理我们需要手动的创建一个对应的代理来实现，不是太灵活，针对目标对象有实现相关接口的情况，我们可以使用JDK动态代理。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class JdkDynamicProxy &amp;#123;

    /**
     * JDK动态代理：目标对象必须实现相关的接口
     * @param args
     */
    public static void main(String[] args) &amp;#123;
        SomeService target = new SomeServiceImpl();
        SomeService proxy = (SomeService) Proxy.newProxyInstance(JdkDynamicProxy.class.getClassLoader(), // 类加载器
                target.getClass().getInterfaces() // 目标对象实现的相关接口
                , new InvocationHandler() &amp;#123; // 代理对象的回调方法
                    @Override
                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &amp;#123;
                        System.out.println(&amp;quot;before...&amp;quot;);
                        Object invoke = method.invoke(target, args);
                        System.out.println(&amp;quot;end...&amp;quot;);
                        if (invoke != null) &amp;#123;
                            return invoke.toString().toUpperCase();
                        &amp;#125;
                        return null;
                    &amp;#125;
                &amp;#125;);
        // 通过代理对象来执行
        System.out.println(&amp;quot;proxy.doSome() = &amp;quot; + proxy.doSome());

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结构&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;before...
目标对象：doSome()
end...
proxy.doSome() = HELLO ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-2-3-CGLIB动态代理&#34;&gt;&lt;a href=&#34;#1-2-3-CGLIB动态代理&#34; class=&#34;headerlink&#34; title=&#34;1.2.3 CGLIB动态代理&#34;&gt;&lt;/a&gt;1.2.3 CGLIB动态代理&lt;/h4&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;如果目标对象实现了对应的接口我们可以通过JDK动态代理的方式来实现，但如果目标对象没有实现任何的接口，这时我们只能通过CGLIB动态代理来实现了，这时我们需要单独引入cglib的依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CGLIBDynamicProxy &amp;#123;

    /**
     * CGLIB动态代理
     * @param args
     */
    public static void main(String[] args) &amp;#123;
        SomeService target = new SomeServiceImpl();
        SomeServiceImpl proxy = new MethodInterceptor() &amp;#123;

            /**
             * 创建 CGLIB 代理对象的方法
             * @return
             */
            public SomeServiceImpl createProxy() &amp;#123;
                // 创建增强器
                Enhancer e = new Enhancer();
                // 指定父类
                e.setSuperclass(target.getClass());
                // 指定回调接口对象
                e.setCallback(this);
                // 创建CGLIB代理对象
                return (SomeServiceImpl) e.create();
            &amp;#125;

            /**
             * 拦截回调的方法
             */
            @Override
            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &amp;#123;
                System.out.println(&amp;quot;cglib -- befor&amp;quot; );
                Object res = method.invoke(target, args);
                System.out.println(&amp;quot;cglib -- end&amp;quot;);
                return res.toString().toUpperCase();
            &amp;#125;
        &amp;#125;.createProxy();
        System.out.println(&amp;quot;proxy.doSome() = &amp;quot; + proxy.doSome());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出的结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cglib -- befor
目标对象：doSome()
cglib -- end
proxy.doSome() = HELLO ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-适配器模式&#34;&gt;&lt;a href=&#34;#2-适配器模式&#34; class=&#34;headerlink&#34; title=&#34;2.适配器模式&#34;&gt;&lt;/a&gt;2.适配器模式&lt;/h2&gt;&lt;h3 id=&#34;2-1-适配器的作用&#34;&gt;&lt;a href=&#34;#2-1-适配器的作用&#34; class=&#34;headerlink&#34; title=&#34;2.1 适配器的作用&#34;&gt;&lt;/a&gt;2.1 适配器的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;适配器模式的作用是把两个不兼容的对象通过适配器能够连接起来工作。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/4f1b8160dfaf4de6816c2d7bc7c79ed3.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-具体案例分析&#34;&gt;&lt;a href=&#34;#2-2-具体案例分析&#34; class=&#34;headerlink&#34; title=&#34;2.2 具体案例分析&#34;&gt;&lt;/a&gt;2.2 具体案例分析&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;以MyBatis中的日志模块为例来介绍。常见的日志框架有log4j,log4j2,slf4j,logbak等，但是每种日志框架中的日志级别都有差异。&lt;/p&gt;
&lt;p&gt;log4j2的接口：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/97882ce34e7c45b38a242335fee35136.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;slf4j的接口&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/2e0b96e4f72b4d4cb1da9ef190e06f7e.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;也就是可以看到不同的日志框架里面所定义的日志级别和对应的方法都有区别，那么我们的框架怎么来统一使用这些日志框架呢？在MyBatis中通过定义了一个日志接口，定义了日志具有的级别和方法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/13b885d6a2e742c8902a41cca65a77f3.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;那这时候我们就发现具体的日志框架和这个接口其实是没有办法直接来使用的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/5394d7aab0b9407bb44e7a43b5a46c35.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这时我们就需要通过对应的适配器来处理这种情况，以Slf4J为例。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/cc1a1999be144995bbdfd0d52af15aa1.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-装饰者模式&#34;&gt;&lt;a href=&#34;#3-装饰者模式&#34; class=&#34;headerlink&#34; title=&#34;3.装饰者模式&#34;&gt;&lt;/a&gt;3.装饰者模式&lt;/h2&gt;&lt;h3 id=&#34;3-1-装饰者模式的作用&#34;&gt;&lt;a href=&#34;#3-1-装饰者模式的作用&#34; class=&#34;headerlink&#34; title=&#34;3.1 装饰者模式的作用&#34;&gt;&lt;/a&gt;3.1 装饰者模式的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;装饰者模式又称为包装模式(&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1XcmFwcGVyJnNwbT0xMDAxLjIxMDEuMzAwMS43MDIw&#34;&gt;Wrapper&lt;/span&gt;),作用是用来动态的为一个对象增加新的功能。装饰模式是一种用于代替继承的技术， 无须通过继承增加子类就能扩展对象的新功能 。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/3d6542b45adc4fc1954b5a32e0cefe0b.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-2-装饰者模式的应用&#34;&gt;&lt;a href=&#34;#3-2-装饰者模式的应用&#34; class=&#34;headerlink&#34; title=&#34;3.2 装饰者模式的应用&#34;&gt;&lt;/a&gt;3.2 装饰者模式的应用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;装饰者模式的应用场景还是非常多的，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IO流中的FileInputStream，FileOutputStream等&lt;/li&gt;
&lt;li&gt;Spring中的各种Wrapper&lt;/li&gt;
&lt;li&gt;MyBatis中的缓存设计&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们以MyBatis中的缓存实例为例来看看其具体的实现。&lt;/p&gt;
&lt;p&gt;首先是Cache接口&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/4fd123c411d44b9b9be4b6fc042cd1a0.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后是PerpetualCache实现：仅仅实现了数据基于内存的读写操作。功能单一。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/64a1d022065f46d5ad8f05fa0a884130.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;装饰类：然后在MyBatis中给我们提供了很多的装饰类。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/b6a6d87b24bb40d08c86267957622a18.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;每个装饰类都有自己的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BlockingCache：阻塞的&lt;/li&gt;
&lt;li&gt;LruCache:根据Lru规则来淘汰缓存数据&lt;/li&gt;
&lt;li&gt;FifoCache：根据FIFO规则来淘汰缓存数据&lt;/li&gt;
&lt;li&gt;….&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源码中的装饰：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/15cfb22ba61c4fc9a3c0ee7db595d8b7.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/7379277ae49d422cbfe571f0852af446.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;比较&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;优点&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1. 扩展对象功能，比继承灵活，不会导致类个数急剧增加&amp;amp;#x3c;br &amp;#x2F;&amp;gt;2. 可以对一个对象进行多次装饰,创造出不同行为的组合,得到功能更加强大的对象&amp;amp;#x3c;br &amp;#x2F;&amp;gt;3. 具体构建类和具体装饰类可以独立变化,&amp;amp;#x3c;br &amp;#x2F;&amp;gt;用户可以根据需要自己增加新的具体构件子类和具体装饰子类。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;缺点&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1.  产生很多小对象。大量小对象占据内存，一定程度上影响性能。&amp;amp;#x3c;br &amp;#x2F;&amp;gt;2. 装饰模式易于出错，调试排查比较麻烦。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;4-组合模式&#34;&gt;&lt;a href=&#34;#4-组合模式&#34; class=&#34;headerlink&#34; title=&#34;4.组合模式&#34;&gt;&lt;/a&gt;4.组合模式&lt;/h2&gt;&lt;h3 id=&#34;4-1-组合模式的作用&#34;&gt;&lt;a href=&#34;#4-1-组合模式的作用&#34; class=&#34;headerlink&#34; title=&#34;4.1 组合模式的作用&#34;&gt;&lt;/a&gt;4.1 组合模式的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;其实解决的是对象与对象之间的包含关系。也就是 部分-整体 的层次结构。&lt;/p&gt;
&lt;h3 id=&#34;4-2-组合模式的应用&#34;&gt;&lt;a href=&#34;#4-2-组合模式的应用&#34; class=&#34;headerlink&#34; title=&#34;4.2 组合模式的应用&#34;&gt;&lt;/a&gt;4.2 组合模式的应用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;组合模式在配置文件的加载解析中其实会用的相对比较多。以SpringSecurity的配置文件为例&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/451caf5510724dbdb8781edc504a3108.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面是具体的定义&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/225305de9e79499b9858fdf0954bee43.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;应用&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/f27879a6ed534ecda344e3c8033e8b66.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-门面模式&#34;&gt;&lt;a href=&#34;#5-门面模式&#34; class=&#34;headerlink&#34; title=&#34;5.门面模式&#34;&gt;&lt;/a&gt;5.门面模式&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;门面模式也称为外观模式，他隐藏了系统的复杂性，并向客户端提供了一个可以访问系统的接口。这种类型的设计模式属于结构性模式。为子系统中的一组接口提供了一个统一的访问接口，这个接口使得子系统更容易被访问或者使用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/d7cbb356c586445cbae588a9c6944c48.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;具体的例子比如：MyBatis中的SqlSession接口，对外提供了数据库操作的相关功能，具体的实现细节对调用者是隐藏的，这种模式在实际项目和框架中很频繁&lt;/p&gt;
&lt;h2 id=&#34;6-桥接模式&#34;&gt;&lt;a href=&#34;#6-桥接模式&#34; class=&#34;headerlink&#34; title=&#34;6.桥接模式&#34;&gt;&lt;/a&gt;6.桥接模式&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;桥接模式的出现是替代掉多层继承的问题。提高了系统的扩展性。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/689902586ed3400e808b3cdaf88a93de.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;具体的应用比如JDBC中的DriverManager其实有用到桥接模式，不同的数据库厂商对应不同的驱动和连接&lt;/p&gt;
&lt;h2 id=&#34;7-享元模式&#34;&gt;&lt;a href=&#34;#7-享元模式&#34; class=&#34;headerlink&#34; title=&#34;7.享元模式&#34;&gt;&lt;/a&gt;7.享元模式&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;这个问题相对来说比较冷门，用到的也比较少，主要是针对内存这块的节省处理，如果有很多个完全相同或相似的对象，我们可以通过享元模式，节省内存.&lt;/p&gt;
&lt;p&gt;享元模式以共享的方式高效地支持大量细粒度对象的重用。&lt;/p&gt;
&lt;p&gt;享元对象能做到共享的关键是区分了内部状态和外部状态。&lt;br&gt;•  &lt;strong&gt;内部状态&lt;/strong&gt; ：可以共享，不会随环境变化而改变&lt;br&gt;•  &lt;strong&gt;外部状态&lt;/strong&gt; ：不可以共享，会随环境变化而改变&lt;/p&gt;
&lt;p&gt;比如以围棋为例:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/ed27059ad63b4d408568033cd3d18998.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651200196055/d2cd6a9f545e4f09af78a4e4f3c09677.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;三、行为型模式&#34;&gt;&lt;a href=&#34;#三、行为型模式&#34; class=&#34;headerlink&#34; title=&#34;三、行为型模式&#34;&gt;&lt;/a&gt;三、行为型模式&lt;/h1&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;行为型模式关注的是对象之间的通信，也就是描述多个类或者对象之间，通过协作共同完成一个任务。主要涉及的是 &lt;strong&gt;对象&lt;/strong&gt; 和 &lt;strong&gt;算法&lt;/strong&gt;之间职责的分配。&lt;/p&gt;
&lt;p&gt;行为型模式分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类行为模式： 通过继承机制来在类间分派行为。 主要是通过多态来分配父类和子类的职责&lt;/li&gt;
&lt;li&gt;对象行为模式： 通过组合或聚合，在对象间分派行为。通过对象关联等方式来分配类的职责。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/44e5adf5c4a2487584f3b072b4a19d8a.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-解释器模式&#34;&gt;&lt;a href=&#34;#1-解释器模式&#34; class=&#34;headerlink&#34; title=&#34;1.解释器模式&#34;&gt;&lt;/a&gt;1.解释器模式&lt;/h2&gt;&lt;h3 id=&#34;1-1-解释器模式的作用&#34;&gt;&lt;a href=&#34;#1-1-解释器模式的作用&#34; class=&#34;headerlink&#34; title=&#34;1.1 解释器模式的作用&#34;&gt;&lt;/a&gt;1.1 解释器模式的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;解释器模式在业务开发面是很少接触到的。主要的作用是定义的解释器来解析各种表达式，比如SQL语句，SPEL表达式，权限注解中的表达式 hasAnyRole(‘ROLE_ADMIN’)等。&lt;/p&gt;
&lt;h3 id=&#34;1-2-解释器的应用&#34;&gt;&lt;a href=&#34;#1-2-解释器的应用&#34; class=&#34;headerlink&#34; title=&#34;1.2 解释器的应用&#34;&gt;&lt;/a&gt;1.2 解释器的应用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;比较常见的应用比如Spring中的针对SPEL表达式做的解析处理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    public static void main(String[] args) &amp;#123;
        SpelExpressionParser parser = new SpelExpressionParser();
        Expression expression = parser.parseExpression(&amp;quot;500-100*2+60&amp;quot;);
        Object value = expression.getValue();
        System.out.println(&amp;quot;value = &amp;quot; + value);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-模板模式&#34;&gt;&lt;a href=&#34;#2-模板模式&#34; class=&#34;headerlink&#34; title=&#34;2.模板模式&#34;&gt;&lt;/a&gt;2.模板模式&lt;/h2&gt;&lt;h3 id=&#34;2-1-模板模式的作用&#34;&gt;&lt;a href=&#34;#2-1-模板模式的作用&#34; class=&#34;headerlink&#34; title=&#34;2.1 模板模式的作用&#34;&gt;&lt;/a&gt;2.1 模板模式的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;模板模式是一种相对简单的设计模式。作用是在父类中固定程序的执行顺序，具体的实现在子类中实现。比如银行定义每个人去银行开户的流程，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;取号&lt;/li&gt;
&lt;li&gt;填写单子&lt;/li&gt;
&lt;li&gt;等待&lt;/li&gt;
&lt;li&gt;办理业务&lt;/li&gt;
&lt;li&gt;结束&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后每个人来开户都会走这个流程，只是每个人的具体操作内容会有区别&lt;/p&gt;
&lt;h3 id=&#34;2-2-模板模式的应用&#34;&gt;&lt;a href=&#34;#2-2-模板模式的应用&#34; class=&#34;headerlink&#34; title=&#34;2.2 模板模式的应用&#34;&gt;&lt;/a&gt;2.2 模板模式的应用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;模板模式的应用就比较多如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Servlet中的doGet和doPost方法&lt;/li&gt;
&lt;li&gt;Spring中的JdbcTemplate&lt;/li&gt;
&lt;li&gt;MyBatis中的Executor处理&lt;/li&gt;
&lt;li&gt;…..&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-责任链模式&#34;&gt;&lt;a href=&#34;#3-责任链模式&#34; class=&#34;headerlink&#34; title=&#34;3.责任链模式&#34;&gt;&lt;/a&gt;3.责任链模式&lt;/h2&gt;&lt;h3 id=&#34;3-1-责任链模式的作用&#34;&gt;&lt;a href=&#34;#3-1-责任链模式的作用&#34; class=&#34;headerlink&#34; title=&#34;3.1 责任链模式的作用&#34;&gt;&lt;/a&gt;3.1 责任链模式的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;将能够处理同一类请求的对象连成一条链，所提交的请求沿着链传递，链上的对象逐个判断是否有能力处理该请求，如果能则处理，如果不能则传递给链上的下一个对象处理。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/4c895e3c35f0466b8832bfaf6d4aa9f2.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-2-责任链模式的应用&#34;&gt;&lt;a href=&#34;#3-2-责任链模式的应用&#34; class=&#34;headerlink&#34; title=&#34;3.2 责任链模式的应用&#34;&gt;&lt;/a&gt;3.2 责任链模式的应用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;责任链模式的应用场景比较多，对大家来说印象比较深刻的应该是SpringSecurity中的处理请求的过滤器链了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/627ec42ef657483289810bcd60d202d4.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;可以和面试官具体聊下SpringSecurity中的这块设计。当然还有一些其他的也可聊比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Java中，异常机制就是一种责任链模式。一个try可以对应多个catch，当第一个catch不匹配类型，则自动跳到第二个catch.&lt;/li&gt;
&lt;li&gt;Javascript语言中，事件的冒泡和捕获机制。Java语言中，事件的处理采用观察者模式。&lt;/li&gt;
&lt;li&gt;SpringMVC中，拦截器的调用也是典型的责任链模式&lt;/li&gt;
&lt;li&gt;同样的Servlet中的过滤器链同样是责任链模式的实现。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-观察者模式&#34;&gt;&lt;a href=&#34;#4-观察者模式&#34; class=&#34;headerlink&#34; title=&#34;4.观察者模式&#34;&gt;&lt;/a&gt;4.观察者模式&lt;/h2&gt;&lt;h3 id=&#34;4-1-观察者模式的作用&#34;&gt;&lt;a href=&#34;#4-1-观察者模式的作用&#34; class=&#34;headerlink&#34; title=&#34;4.1 观察者模式的作用&#34;&gt;&lt;/a&gt;4.1 观察者模式的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;建立对象与对象之间的依赖关系，一个对象发生改变时，会自动通知其他对象。这个场景中，发生改变的对象被称为观察目标，被通知的对象称为观察者。一个观察目标可以有多个观察者，而这些观察者之间可以没有联系，可以根据需要增加或删除观察者。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/28ad3ed5e28f41a69a490ee02fa0bb25.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-2-观察者模式的应用&#34;&gt;&lt;a href=&#34;#4-2-观察者模式的应用&#34; class=&#34;headerlink&#34; title=&#34;4.2 观察者模式的应用&#34;&gt;&lt;/a&gt;4.2 观察者模式的应用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;观察者模式在Java编程中用到最多的可能就是事件模块的处理，可以和面试官详细的聊下Spring的事件管理机制或者SpringBoot的事件处理机制。我们以SpringBoot的事件机制为例来说明&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTI2NTczL2FydGljbGUvZGV0YWlscy8xMjIxNDMyNTg=&#34;&gt;https://blog.csdn.net/qq_38526573/article/details/122143258&lt;/span&gt; 单独通过一篇文章来说明事件的本质。&lt;/p&gt;
&lt;h2 id=&#34;5-策略模式&#34;&gt;&lt;a href=&#34;#5-策略模式&#34; class=&#34;headerlink&#34; title=&#34;5.策略模式&#34;&gt;&lt;/a&gt;5.策略模式&lt;/h2&gt;&lt;h3 id=&#34;5-1-策略模式的作用&#34;&gt;&lt;a href=&#34;#5-1-策略模式的作用&#34; class=&#34;headerlink&#34; title=&#34;5.1 策略模式的作用&#34;&gt;&lt;/a&gt;5.1 策略模式的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;策略模式的作用就是我们想要实现某个目的，实现的方式可以有很多种，那么这里的每一种实现方式都可以称为一种策略。比如：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/22ad4a07e93c4074ac60ae1c7924452a.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;我们可以将每一种交通方式都封装为一个独立的类，这就是一种策略。为了保证策略的一致性，还可以用一个抽象的交通方式类 来 做交通方式的定义。&lt;/p&gt;
&lt;h3 id=&#34;5-2-策略模式的应用&#34;&gt;&lt;a href=&#34;#5-2-策略模式的应用&#34; class=&#34;headerlink&#34; title=&#34;5.2 策略模式的应用&#34;&gt;&lt;/a&gt;5.2 策略模式的应用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;策略模式在实际开发中用到的同样会比较多。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AOP 中根据不同的策略可以通过JDK动态代理或者CGLIB代理来创建代理对象&lt;/li&gt;
&lt;li&gt;Spring框架中的Resources接口，资源访问的策略&lt;/li&gt;
&lt;li&gt;Servlet中的service方法，会根据客户端的不同提交方式来调用对应的doGet或者doPost方法来处理请求&lt;/li&gt;
&lt;li&gt;Shiro中的多Realm认证中，根据我们不同的配置可以使用所有Realm认证通过或者其中一个认证通过等&lt;/li&gt;
&lt;li&gt;SpringSecurity中的Authentication对象的存储方式&lt;/li&gt;
&lt;li&gt;…….&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;6-迭代器模式&#34;&gt;&lt;a href=&#34;#6-迭代器模式&#34; class=&#34;headerlink&#34; title=&#34;6.迭代器模式&#34;&gt;&lt;/a&gt;6.迭代器模式&lt;/h2&gt;&lt;h3 id=&#34;6-1-迭代器模式的作用&#34;&gt;&lt;a href=&#34;#6-1-迭代器模式的作用&#34; class=&#34;headerlink&#34; title=&#34;6.1 迭代器模式的作用&#34;&gt;&lt;/a&gt;6.1 迭代器模式的作用&lt;/h3&gt;&lt;p&gt;场景：访问聚合对象中的各个元素的时候，比如链表的遍历。我们一般是将遍历的方法也放在链表类中。但是如果需要修改遍历方法，就需要修改链表类的代码，违背了开闭原则。&lt;/p&gt;
&lt;p&gt;迭代器模式就是在客户访问和聚合类之间插入一个迭代器，这样就将&lt;strong&gt;聚合对象&lt;/strong&gt; 和 &lt;strong&gt;遍历方法&lt;/strong&gt;解耦了，并且对外隐藏其实现细节。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/8a9095d4fbe04245b476ca16250ab2eb.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-2-迭代器模式的应用&#34;&gt;&lt;a href=&#34;#6-2-迭代器模式的应用&#34; class=&#34;headerlink&#34; title=&#34;6.2 迭代器模式的应用&#34;&gt;&lt;/a&gt;6.2 迭代器模式的应用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;JDK中的List&amp;#x2F;Set集合中的迭代器&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7-中介者模式&#34;&gt;&lt;a href=&#34;#7-中介者模式&#34; class=&#34;headerlink&#34; title=&#34;7.中介者模式&#34;&gt;&lt;/a&gt;7.中介者模式&lt;/h2&gt;&lt;h3 id=&#34;7-1-中介则模式的作用&#34;&gt;&lt;a href=&#34;#7-1-中介则模式的作用&#34; class=&#34;headerlink&#34; title=&#34;7.1 中介则模式的作用&#34;&gt;&lt;/a&gt;7.1 中介则模式的作用&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;对象之间具有很强的关联性，而且有大量的相互调用，这种情况下，如果一个对象发生了变化，就需要追踪该对象关联的其他对象，并进行相应的处理，这就变得很复杂。而中介者模式，就是用一个中介者对象来封装一系列的对象交互，中介者使各对象不需要显式的相互引用，这就使得系统变得低耦合。比如：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/bfe0f0f3fbff44e7ad83bc64c9637758.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;假如没有总经理。下面三个部门：财务部、市场部、研发部。财务部要发工资，让大家核对公司需要跟市场部和研发部都通气；市场部要接个新项目，需要研发部处理技术、需要财务部出资金。市场部跟各个部门打交道。 虽然只有三个部门，但是关系非常乱。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1462/1651992608037/af819fcb665d4aacacc4af386c9b3f8e.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;实际上，公司都有总经理。各个部门有什么事情都通报到总经理这里，总经理再通知各个相关部门。&lt;/p&gt;
&lt;h3 id=&#34;7-2-中介则模式的应用&#34;&gt;&lt;a href=&#34;#7-2-中介则模式的应用&#34; class=&#34;headerlink&#34; title=&#34;7.2 中介则模式的应用&#34;&gt;&lt;/a&gt;7.2 中介则模式的应用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;MVC模式中的C，控制器就是一个中介者对象，M和V都和C打交道&lt;/li&gt;
&lt;li&gt;代理对象中的invoke方法，客户端和目标对象都是通过invoke来打交到的。&lt;/li&gt;
&lt;li&gt;…..&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-状态模式&#34;&gt;&lt;a href=&#34;#8-状态模式&#34; class=&#34;headerlink&#34; title=&#34;8.状态模式&#34;&gt;&lt;/a&gt;8.状态模式&lt;/h2&gt;&lt;p&gt;场景： 如果一个对象的行为会根据 其某个属性的变化而不同，那这个属性就可以被称为该对象的状态。这样的对象也被称为有状态对象（stateful）。如果这样的对象因为某些事件，其内部状态发生了改变，那么系统的行为也要随之发生变化的话，就可以使用状态模式。&lt;/p&gt;
&lt;h2 id=&#34;9-命令模式&#34;&gt;&lt;a href=&#34;#9-命令模式&#34; class=&#34;headerlink&#34; title=&#34;9.命令模式&#34;&gt;&lt;/a&gt;9.命令模式&lt;/h2&gt;&lt;p&gt;场景：请求的发送者和接收者之间解耦，让对象之间的调用关系更加灵活。发送者和接收者之间没有直接的引用关系，发送请求的对象只需要知道如何发送，而不必关心如何完成请求。&lt;/p&gt;
&lt;h2 id=&#34;10-备忘录模式&#34;&gt;&lt;a href=&#34;#10-备忘录模式&#34; class=&#34;headerlink&#34; title=&#34;10.备忘录模式&#34;&gt;&lt;/a&gt;10.备忘录模式&lt;/h2&gt;&lt;p&gt;场景：记录一个对象的内部状态，当用户后悔时能撤销当前的操作，是数据恢复到它原来的状态。比如我们编程的时候，ctrl+z 就是撤销当前操作，恢复到修改前的状态。又叫快照模式。&lt;/p&gt;
&lt;h2 id=&#34;11-访问者模式&#34;&gt;&lt;a href=&#34;#11-访问者模式&#34; class=&#34;headerlink&#34; title=&#34;11.访问者模式&#34;&gt;&lt;/a&gt;11.访问者模式&lt;/h2&gt;&lt;p&gt;场景：有些集合对象中会有多种不同的元素，每种元素都有不同的访问者 和 处理方式。这种被处理的数据元素相对稳定，但是处理方式比较多样的情况，可以用访问者模式来处理。&lt;/p&gt;
&lt;p&gt;访问者模式将数据结构中的各元素的操作分离出来，封装成独立的类，使其在不改变数据结构的前提下，可以添加作用于这些元素的新操作。为数据结构中的每个元素提供多种访问方式。&lt;/p&gt;
</content>
        <updated>2022-10-07T15:52:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/Dubbo/</id>
        <title>Dubbo</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Dubbo/"/>
        <content type="html">&lt;h1 id=&#34;Dubbo&#34;&gt;&lt;a href=&#34;#Dubbo&#34; class=&#34;headerlink&#34; title=&#34;Dubbo&#34;&gt;&lt;/a&gt;Dubbo&lt;/h1&gt;&lt;h3 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;主要内容&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Dubbo简介&lt;/li&gt;
&lt;li&gt;Dubbo架构讲解&lt;/li&gt;
&lt;li&gt;Dubbo支持的协议&lt;/li&gt;
&lt;li&gt;Dubbo支持的注册中心&lt;/li&gt;
&lt;li&gt;第一个Dubbo的Provider&lt;/li&gt;
&lt;li&gt;Admin管理界面搭建&lt;/li&gt;
&lt;li&gt;成Dubbo的Consumer&lt;/li&gt;
&lt;li&gt;负载均衡&lt;/li&gt;
&lt;li&gt;完整Dubbo项目演示&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;学习目标&#34;&gt;&lt;a href=&#34;#学习目标&#34; class=&#34;headerlink&#34; title=&#34;学习目标&#34;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Dubbo简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dubbo架构讲解&lt;/td&gt;
&lt;td&gt;精通&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dubbo支持的协议&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dubbo支持的注册中心&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;第一个Dubbo的Provider&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Admin管理界面搭建&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;完成Dubbo的Consumer&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;负载均衡&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;完整Dubbo项目演示&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;一、Dubbo简介&#34;&gt;&lt;a href=&#34;#一、Dubbo简介&#34; class=&#34;headerlink&#34; title=&#34;一、Dubbo简介&#34;&gt;&lt;/a&gt;一、Dubbo简介&lt;/h3&gt;&lt;h4 id=&#34;1-官方说明&#34;&gt;&lt;a href=&#34;#1-官方说明&#34; class=&#34;headerlink&#34; title=&#34;1,官方说明&#34;&gt;&lt;/a&gt;1,官方说明&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/Dubbo/Dubbo-1.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	Apache Dubbo 是一个高可用的，基于Java的开源RPC框架。&lt;/p&gt;
&lt;p&gt;​	Dubbo框架不仅仅是具备RPC访问功能，还包含服务治理功能。&lt;/p&gt;
&lt;h4 id=&#34;2-发展历史&#34;&gt;&lt;a href=&#34;#2-发展历史&#34; class=&#34;headerlink&#34; title=&#34;2.发展历史&#34;&gt;&lt;/a&gt;2.发展历史&lt;/h4&gt;&lt;p&gt;​	Dubbo是最开始是阿里巴巴内部使用的RPC框架。&lt;/p&gt;
&lt;p&gt;​	2011年对外提供。&lt;/p&gt;
&lt;p&gt;​	2012年停止更新。&lt;/p&gt;
&lt;p&gt;​	2017年开始继续更新。&lt;/p&gt;
&lt;p&gt;​	2019年捐献给Apache，由Apache维护2.7以上版本。&lt;/p&gt;
&lt;h4 id=&#34;3-Dubbo架构讲解&#34;&gt;&lt;a href=&#34;#3-Dubbo架构讲解&#34; class=&#34;headerlink&#34; title=&#34;3.Dubbo架构讲解&#34;&gt;&lt;/a&gt;3.Dubbo架构讲解&lt;/h4&gt;&lt;h5 id=&#34;3-1架构图&#34;&gt;&lt;a href=&#34;#3-1架构图&#34; class=&#34;headerlink&#34; title=&#34;3.1架构图&#34;&gt;&lt;/a&gt;3.1架构图&lt;/h5&gt;&lt;img data-src=&#34;/2022/10/07/Dubbo/Dubbo-2.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;3-2架构说明&#34;&gt;&lt;a href=&#34;#3-2架构说明&#34; class=&#34;headerlink&#34; title=&#34;3.2架构说明&#34;&gt;&lt;/a&gt;3.2架构说明&lt;/h4&gt;&lt;h5 id=&#34;3-2-1虚线&#34;&gt;&lt;a href=&#34;#3-2-1虚线&#34; class=&#34;headerlink&#34; title=&#34;3.2.1虚线&#34;&gt;&lt;/a&gt;3.2.1虚线&lt;/h5&gt;&lt;p&gt;​	虚线表示异步，实线表示同步。异步不阻塞线程性能高，同步阻塞线程必须等待响应结果才能继续执行，相对性能低。&lt;/p&gt;
&lt;h5 id=&#34;3-2-2Provider&#34;&gt;&lt;a href=&#34;#3-2-2Provider&#34; class=&#34;headerlink&#34; title=&#34;3.2.2Provider&#34;&gt;&lt;/a&gt;3.2.2Provider&lt;/h5&gt;&lt;p&gt;​	提供者。编写持久层和事务代码。&lt;/p&gt;
&lt;h5 id=&#34;3-2-3Container&#34;&gt;&lt;a href=&#34;#3-2-3Container&#34; class=&#34;headerlink&#34; title=&#34;3.2.3Container&#34;&gt;&lt;/a&gt;3.2.3Container&lt;/h5&gt;&lt;p&gt;​	容器（Spring容器），Dubbo完全基于Spring实现的。&lt;/p&gt;
&lt;h5 id=&#34;3-2-4Registry&#34;&gt;&lt;a href=&#34;#3-2-4Registry&#34; class=&#34;headerlink&#34; title=&#34;3.2.4Registry&#34;&gt;&lt;/a&gt;3.2.4Registry&lt;/h5&gt;&lt;p&gt;​	注册中心。放置所有Provider对外提供的信息。包含Provider的IP，访问端口，访问遵守的协议，对外提供的接口，接口中有哪些方法等相关信息。&lt;/p&gt;
&lt;h5 id=&#34;3-2-5Consumer&#34;&gt;&lt;a href=&#34;#3-2-5Consumer&#34; class=&#34;headerlink&#34; title=&#34;3.2.5Consumer&#34;&gt;&lt;/a&gt;3.2.5Consumer&lt;/h5&gt;&lt;p&gt;​	消费者（RPC调用者，SOA调用服务的项目）开发中也是一个项目，编写service和controller（还可以报页面等）。调用XXXXServiceImpl中的方法。&lt;/p&gt;
&lt;h5 id=&#34;3-2-6Monitor&#34;&gt;&lt;a href=&#34;#3-2-6Monitor&#34; class=&#34;headerlink&#34; title=&#34;3.2.6Monitor&#34;&gt;&lt;/a&gt;3.2.6Monitor&lt;/h5&gt;&lt;p&gt;​	监控中心。监控Provider的压力情况等。每隔2分钟Consumer和Provider会把调用次数发送给Monitor，由Monitor进行统计。&lt;/p&gt;
&lt;h4 id=&#34;4-执行流程&#34;&gt;&lt;a href=&#34;#4-执行流程&#34; class=&#34;headerlink&#34; title=&#34;4.执行流程&#34;&gt;&lt;/a&gt;4.执行流程&lt;/h4&gt;&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;start：启动Spring容器时会把Provider启动。 &lt;/li&gt;
&lt;li&gt;register：把Provider相关信息注册到Registry里&lt;/li&gt;
&lt;li&gt;subscribe：Consumer从Registry中订阅Provider的信息&lt;/li&gt;
&lt;li&gt;notify：通知给Consumer&lt;/li&gt;
&lt;li&gt;invoke：Consumer根据Registry通知的信息进行调用Provider中方法。&lt;/li&gt;
&lt;li&gt;count:Consumer和Provider把调用次数信息异步发送给Monitor进行统计。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;二、Dubbo支持的协议&#34;&gt;&lt;a href=&#34;#二、Dubbo支持的协议&#34; class=&#34;headerlink&#34; title=&#34;二、Dubbo支持的协议&#34;&gt;&lt;/a&gt;二、Dubbo支持的协议&lt;/h3&gt;&lt;h4 id=&#34;1-Dubbo协议-官方推荐协议&#34;&gt;&lt;a href=&#34;#1-Dubbo协议-官方推荐协议&#34; class=&#34;headerlink&#34; title=&#34;1.Dubbo协议(官方推荐协议)&#34;&gt;&lt;/a&gt;1.Dubbo协议(官方推荐协议)&lt;/h4&gt;&lt;p&gt;​	优点：&lt;/p&gt;
&lt;p&gt;​		采用NIO复用单一长连接，并使用线程池并发处理请求，减少握手和加大并发效率，性能较好（推荐使用）&lt;/p&gt;
&lt;p&gt;​	缺点：&lt;/p&gt;
&lt;p&gt;​		大文件上传时,可能出现问题(不使用Dubbo文件上传)&lt;/p&gt;
&lt;h4 id=&#34;2-RMI-Remote-Method-Invocation-协议&#34;&gt;&lt;a href=&#34;#2-RMI-Remote-Method-Invocation-协议&#34; class=&#34;headerlink&#34; title=&#34;2.RMI(Remote Method Invocation)协议&#34;&gt;&lt;/a&gt;2.RMI(Remote Method Invocation)协议&lt;/h4&gt;&lt;p&gt;​	优点:&lt;/p&gt;
&lt;p&gt;​		JDK自带的能力。&lt;/p&gt;
&lt;p&gt;​	缺点:&lt;/p&gt;
&lt;p&gt;​		偶尔连接失败.&lt;/p&gt;
&lt;h4 id=&#34;3-Hessian协议&#34;&gt;&lt;a href=&#34;#3-Hessian协议&#34; class=&#34;headerlink&#34; title=&#34;3.Hessian协议&#34;&gt;&lt;/a&gt;3.Hessian协议&lt;/h4&gt;&lt;p&gt;​	优点:&lt;/p&gt;
&lt;p&gt;​		可与原生Hessian互操作，基于HTTP协议&lt;/p&gt;
&lt;p&gt;​	缺点:&lt;/p&gt;
&lt;p&gt;​		需hessian.jar支持，http短连接的开销大&lt;/p&gt;
&lt;h3 id=&#34;三、Dubbo支持的注册中心&#34;&gt;&lt;a href=&#34;#三、Dubbo支持的注册中心&#34; class=&#34;headerlink&#34; title=&#34;三、Dubbo支持的注册中心&#34;&gt;&lt;/a&gt;三、Dubbo支持的注册中心&lt;/h3&gt;&lt;h4 id=&#34;1-Zookeeper-官方推荐&#34;&gt;&lt;a href=&#34;#1-Zookeeper-官方推荐&#34; class=&#34;headerlink&#34; title=&#34;1.Zookeeper(官方推荐)&#34;&gt;&lt;/a&gt;1.Zookeeper(官方推荐)&lt;/h4&gt;&lt;p&gt;​	1) 优点:&lt;/p&gt;
&lt;p&gt;​		支持分布式.很多周边产品.&lt;/p&gt;
&lt;p&gt;​	2) 缺点: &lt;/p&gt;
&lt;p&gt;​		受限于Zookeeper软件的稳定性.Zookeeper专门分布式辅助软件,稳定较优&lt;/p&gt;
&lt;h4 id=&#34;2-Multicast&#34;&gt;&lt;a href=&#34;#2-Multicast&#34; class=&#34;headerlink&#34; title=&#34;2.Multicast&#34;&gt;&lt;/a&gt;2.Multicast&lt;/h4&gt;&lt;p&gt;​	1) 优点:&lt;/p&gt;
&lt;p&gt;​		去中心化,不需要单独安装软件.&lt;/p&gt;
&lt;p&gt;​	2) 缺点:&lt;/p&gt;
&lt;p&gt;​		2.2.1 Provider和Consumer和Registry不能跨机房(路由)&lt;/p&gt;
&lt;h4 id=&#34;3-Redis&#34;&gt;&lt;a href=&#34;#3-Redis&#34; class=&#34;headerlink&#34; title=&#34;3.Redis&#34;&gt;&lt;/a&gt;3.Redis&lt;/h4&gt;&lt;p&gt;​	1) 优点:&lt;/p&gt;
&lt;p&gt;​		支持集群,性能高&lt;/p&gt;
&lt;p&gt;​	2) 缺点:&lt;/p&gt;
&lt;p&gt;​		要求服务器时间同步.否则可能出现集群失败问题.&lt;/p&gt;
&lt;h4 id=&#34;4-Simple&#34;&gt;&lt;a href=&#34;#4-Simple&#34; class=&#34;headerlink&#34; title=&#34;4.Simple&#34;&gt;&lt;/a&gt;4.Simple&lt;/h4&gt;&lt;p&gt;​	1) 优点: &lt;/p&gt;
&lt;p&gt;​		标准RPC服务.没有兼容问题&lt;/p&gt;
&lt;p&gt;​	2) 缺点: &lt;/p&gt;
&lt;p&gt;​		不支持集群.&lt;/p&gt;
&lt;h3 id=&#34;四、第一个Dubbo的Provider&#34;&gt;&lt;a href=&#34;#四、第一个Dubbo的Provider&#34; class=&#34;headerlink&#34; title=&#34;四、第一个Dubbo的Provider&#34;&gt;&lt;/a&gt;四、第一个Dubbo的Provider&lt;/h3&gt;&lt;p&gt;​	新建父项目Parent1。最终结构如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Dubbo/Dubbo-3.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	编写pom.xml继承SpringBoot父项目。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/parent&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-新建api项目&#34;&gt;&lt;a href=&#34;#1-新建api项目&#34; class=&#34;headerlink&#34; title=&#34;1.新建api项目&#34;&gt;&lt;/a&gt;1.新建api项目&lt;/h4&gt;&lt;h5 id=&#34;1-1创建接口&#34;&gt;&lt;a href=&#34;#1-1创建接口&#34; class=&#34;headerlink&#34; title=&#34;1.1创建接口&#34;&gt;&lt;/a&gt;1.1创建接口&lt;/h5&gt;&lt;p&gt;​	创建com.msb.&lt;strong&gt;dubbo&lt;/strong&gt;.service.Demo&lt;strong&gt;Dubbo&lt;/strong&gt;Service接口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface DemoDubboService &amp;#123;
    String demo();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-新建provider项目&#34;&gt;&lt;a href=&#34;#2-新建provider项目&#34; class=&#34;headerlink&#34; title=&#34;2.新建provider项目&#34;&gt;&lt;/a&gt;2.新建provider项目&lt;/h4&gt;&lt;h5 id=&#34;2-1编写pom-xml&#34;&gt;&lt;a href=&#34;#2-1编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;2.1编写pom.xml&#34;&gt;&lt;/a&gt;2.1编写pom.xml&lt;/h5&gt;&lt;p&gt;​	注意：不需要依赖web，如果依赖spring-boot-start-web还需要考虑端口问题。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.7.3&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-2编写配置文件&#34;&gt;&lt;a href=&#34;#2-2编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.2编写配置文件&#34;&gt;&lt;/a&gt;2.2编写配置文件&lt;/h5&gt;&lt;p&gt;​	新建application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-provider
  registry:
    address: zookeeper://192.168.32.128:2181
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-3新建实现类&#34;&gt;&lt;a href=&#34;#2-3新建实现类&#34; class=&#34;headerlink&#34; title=&#34;2.3新建实现类&#34;&gt;&lt;/a&gt;2.3新建实现类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.dubbo.service.impl.DemoDubboServiceImpl&lt;/p&gt;
&lt;p&gt;​	注意：注解是apache的注解。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import com.msb.dubbo.service.DemoDubboService;
import org.apache.dubbo.config.annotation.Service;

@Service
public class DemoDubboServiceImpl implements DemoDubboService &amp;#123;
    @Override
    public String demo() &amp;#123;
        System.out.println(&amp;quot;demo方法&amp;quot;);
        return &amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-4新建启动类&#34;&gt;&lt;a href=&#34;#2-4新建启动类&#34; class=&#34;headerlink&#34; title=&#34;2.4新建启动类&#34;&gt;&lt;/a&gt;2.4新建启动类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.ProviderApplication。&lt;/p&gt;
&lt;p&gt;​	必须要有@EnableDubbo注解，否则Dubbo不生效。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDubbo
public class ProviderApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(ProviderApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;五、完成Dubbo的Consumer&#34;&gt;&lt;a href=&#34;#五、完成Dubbo的Consumer&#34; class=&#34;headerlink&#34; title=&#34;五、完成Dubbo的Consumer&#34;&gt;&lt;/a&gt;五、完成Dubbo的Consumer&lt;/h3&gt;&lt;p&gt;​	创建consumer项目&lt;/p&gt;
&lt;h4 id=&#34;1-编写pom-xml&#34;&gt;&lt;a href=&#34;#1-编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;1.编写pom.xml&#34;&gt;&lt;/a&gt;1.编写pom.xml&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.7.3&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-新建配置文件&#34;&gt;&lt;a href=&#34;#2-新建配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.新建配置文件&#34;&gt;&lt;/a&gt;2.新建配置文件&lt;/h4&gt;&lt;p&gt;​	新建application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-consumer
  registry:
    address: zookeeper://192.168.32.128:2181
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-新建service及实现类&#34;&gt;&lt;a href=&#34;#3-新建service及实现类&#34; class=&#34;headerlink&#34; title=&#34;3.新建service及实现类&#34;&gt;&lt;/a&gt;3.新建service及实现类&lt;/h4&gt;&lt;p&gt;​	新建com.msb.service.DemoService&lt;/p&gt;
&lt;p&gt;​	新建com.msb.service.impl.DemoServiceImpl&lt;/p&gt;
&lt;p&gt;​	调用服务使用@Reference注解，不要倒错包了，有两个。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface DemoService &amp;#123;
    String consumerDemo();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;import com.msb.dubbo.service.DemoDubboService;
import com.msb.service.DemoService;
import org.apache.dubbo.config.annotation.Reference;
import org.springframework.stereotype.Service;

@Service
public class DemoServiceImpl implements DemoService &amp;#123;

    @Reference
    private DemoDubboService demoDubboService;

    @Override
    public String consumerDemo() &amp;#123;
        return demoDubboService.demo();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-新建控制器&#34;&gt;&lt;a href=&#34;#4-新建控制器&#34; class=&#34;headerlink&#34; title=&#34;4.新建控制器&#34;&gt;&lt;/a&gt;4.新建控制器&lt;/h4&gt;&lt;p&gt;​	新建控制器com.msb.controller.DemoController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Controller
public class DemoController &amp;#123;
    @Autowired
    private DemoService demoService;

    @RequestMapping(&amp;quot;/demo&amp;quot;)
    @ResponseBody
    public String demo()&amp;#123;
        return demoService.consumerDemo();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-新建启动器&#34;&gt;&lt;a href=&#34;#5-新建启动器&#34; class=&#34;headerlink&#34; title=&#34;5.新建启动器&#34;&gt;&lt;/a&gt;5.新建启动器&lt;/h4&gt;&lt;p&gt;​	新建com.msb.ConsumerApplication&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDubbo
public class ConsumerApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(ConsumerApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;六、Admin管理界面搭建&#34;&gt;&lt;a href=&#34;#六、Admin管理界面搭建&#34; class=&#34;headerlink&#34; title=&#34;六、Admin管理界面搭建&#34;&gt;&lt;/a&gt;六、Admin管理界面搭建&lt;/h3&gt;&lt;p&gt;​	资料中把dubbo-admin-0.2.0.jar\BOOT-INF\classes 中application.properties里面注册中心的ip设置正确&lt;/p&gt;
&lt;p&gt;​	使用java -jar dubbo-admin-0.2.0.jar运行即可。&lt;/p&gt;
&lt;p&gt;​	注意：占用8080端口，不要冲突了。&lt;/p&gt;
&lt;h3 id=&#34;七、负载均衡&#34;&gt;&lt;a href=&#34;#七、负载均衡&#34; class=&#34;headerlink&#34; title=&#34;七、负载均衡&#34;&gt;&lt;/a&gt;七、负载均衡&lt;/h3&gt;&lt;p&gt;​	集群：一个内容，部署多次，形成的整体称为集群。集群中每个个体应该部署到不同的服务器上。&lt;/p&gt;
&lt;p&gt;​	伪集群：集群中内容部署到同一台服务器上，通过不同端口区分不同个体。&lt;/p&gt;
&lt;p&gt;​	负载均衡是在集群前提下，当访问整个集群时，集群中每个节点被访问次数或频率的规则。&lt;/p&gt;
&lt;p&gt;​	Dubbo 内置了四个负载均衡策略。默认为Random&lt;/p&gt;
&lt;h4 id=&#34;1-内置策略&#34;&gt;&lt;a href=&#34;#1-内置策略&#34; class=&#34;headerlink&#34; title=&#34;1.内置策略&#34;&gt;&lt;/a&gt;1.内置策略&lt;/h4&gt;&lt;h5 id=&#34;1-1Random&#34;&gt;&lt;a href=&#34;#1-1Random&#34; class=&#34;headerlink&#34; title=&#34;1.1Random&#34;&gt;&lt;/a&gt;1.1Random&lt;/h5&gt;&lt;p&gt;​	随机。随机访问集群中节点。访问概率和权重有关。&lt;/p&gt;
&lt;h5 id=&#34;1-2RoundRobin&#34;&gt;&lt;a href=&#34;#1-2RoundRobin&#34; class=&#34;headerlink&#34; title=&#34;1.2RoundRobin&#34;&gt;&lt;/a&gt;1.2RoundRobin&lt;/h5&gt;&lt;p&gt;​	轮询。访问频率和权重有关。&lt;/p&gt;
&lt;p&gt;​	权重（weight）：占有比例。集群中每个项目部署的服务器的性能可能是不同，性能好的服务器权重应该高一些。&lt;/p&gt;
&lt;h5 id=&#34;1-3LeastActive&#34;&gt;&lt;a href=&#34;#1-3LeastActive&#34; class=&#34;headerlink&#34; title=&#34;1.3LeastActive&#34;&gt;&lt;/a&gt;1.3LeastActive&lt;/h5&gt;&lt;p&gt;​	活跃数相同的随机，不同的活跃数高的放前面。&lt;/p&gt;
&lt;h5 id=&#34;1-4ConsistentHash&#34;&gt;&lt;a href=&#34;#1-4ConsistentHash&#34; class=&#34;headerlink&#34; title=&#34;1.4ConsistentHash&#34;&gt;&lt;/a&gt;1.4ConsistentHash&lt;/h5&gt;&lt;p&gt;​	一致性Hash。相同参数请求总是发到一个提供者。&lt;/p&gt;
&lt;h4 id=&#34;2-Provider集群&#34;&gt;&lt;a href=&#34;#2-Provider集群&#34; class=&#34;headerlink&#34; title=&#34;2.Provider集群&#34;&gt;&lt;/a&gt;2.Provider集群&lt;/h4&gt;&lt;p&gt;​	新建四个启动类。&lt;/p&gt;
&lt;p&gt;​	每次启动启动类修改配置文件dubbo.protocal.port&lt;/p&gt;
&lt;h4 id=&#34;3-设置负载均衡&#34;&gt;&lt;a href=&#34;#3-设置负载均衡&#34; class=&#34;headerlink&#34; title=&#34;3.设置负载均衡&#34;&gt;&lt;/a&gt;3.设置负载均衡&lt;/h4&gt;&lt;h5 id=&#34;3-1-Reference&#34;&gt;&lt;a href=&#34;#3-1-Reference&#34; class=&#34;headerlink&#34; title=&#34;3.1@Reference&#34;&gt;&lt;/a&gt;3.1@Reference&lt;/h5&gt;&lt;p&gt;​	调用的服务采用的负载均衡&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Reference(loadbalance = &amp;quot;roundrobin&amp;quot;)
private DemoDubboService demoDubboService;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-2-Service&#34;&gt;&lt;a href=&#34;#3-2-Service&#34; class=&#34;headerlink&#34; title=&#34;3.2 @Service&#34;&gt;&lt;/a&gt;3.2 @Service&lt;/h5&gt;&lt;p&gt;​	当前服务采用的负载均衡算法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Service(loadbalance = &amp;quot;random&amp;quot;)
public class DemoDubboServiceImpl implements DemoDubboService &amp;#123;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	设置权重&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Service(weight = 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-3配置文件&#34;&gt;&lt;a href=&#34;#3-3配置文件&#34; class=&#34;headerlink&#34; title=&#34;3.3配置文件&#34;&gt;&lt;/a&gt;3.3配置文件&lt;/h5&gt;&lt;p&gt;​			全局设置所有provider和consumer的负载均衡效果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-provider
  registry:
    address: zookeeper://192.168.32.128:2181
  protocol:
    port: 20884
  provider:
    loadbalance: random
  consumer:
    loadbalance: random
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;八、完整Dubbo项目演示&#34;&gt;&lt;a href=&#34;#八、完整Dubbo项目演示&#34; class=&#34;headerlink&#34; title=&#34;八、完整Dubbo项目演示&#34;&gt;&lt;/a&gt;八、完整Dubbo项目演示&lt;/h3&gt;&lt;h4 id=&#34;1-原型&#34;&gt;&lt;a href=&#34;#1-原型&#34; class=&#34;headerlink&#34; title=&#34;1.原型&#34;&gt;&lt;/a&gt;1.原型&lt;/h4&gt;&lt;h5 id=&#34;1-1部门显示&#34;&gt;&lt;a href=&#34;#1-1部门显示&#34; class=&#34;headerlink&#34; title=&#34;1.1部门显示&#34;&gt;&lt;/a&gt;1.1部门显示&lt;/h5&gt;&lt;p&gt;​	显示全部部门信息&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Dubbo/Dubbo-4.png&#34; class=&#34;&#34;&gt;




&lt;h5 id=&#34;1-2员工新增&#34;&gt;&lt;a href=&#34;#1-2员工新增&#34; class=&#34;headerlink&#34; title=&#34;1.2员工新增&#34;&gt;&lt;/a&gt;1.2员工新增&lt;/h5&gt;&lt;img data-src=&#34;/2022/10/07/Dubbo/Dubbo-5.png&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;1-3查看部门员工&#34;&gt;&lt;a href=&#34;#1-3查看部门员工&#34; class=&#34;headerlink&#34; title=&#34;1.3查看部门员工&#34;&gt;&lt;/a&gt;1.3查看部门员工&lt;/h5&gt;&lt;img data-src=&#34;/2022/10/07/Dubbo/Dubbo-6.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-按照分布式架构进行设计项目&#34;&gt;&lt;a href=&#34;#2-按照分布式架构进行设计项目&#34; class=&#34;headerlink&#34; title=&#34;2.按照分布式架构进行设计项目&#34;&gt;&lt;/a&gt;2.按照分布式架构进行设计项目&lt;/h4&gt;&lt;p&gt;​		设定员工管理和部门管理不在同一个模块中，需要有一个员工管理项目和一个部门管理项目。&lt;/p&gt;
&lt;p&gt;​	为了方便，不去每个项目使用一个窗口，而是使用聚合项目。      &lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Dubbo/Dubbo-7.png&#34; class=&#34;&#34;&gt;








&lt;h4 id=&#34;3-创建数据库表&#34;&gt;&lt;a href=&#34;#3-创建数据库表&#34; class=&#34;headerlink&#34; title=&#34;3.创建数据库表&#34;&gt;&lt;/a&gt;3.创建数据库表&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;create table dept(
id int(11) primary key auto_increment,
name varchar(20)
);

insert into dept values(default,&amp;#39;开发部&amp;#39;);
insert into dept values(default,&amp;#39;产品部&amp;#39;);

create table emp(
id int(11) primary key auto_increment,
name varchar(20),
photo varchar(200),
did int(11),
CONSTRAINT fk_emp_dept FOREIGN key (did) REFERENCES dept(id)
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-创建父项目&#34;&gt;&lt;a href=&#34;#4-创建父项目&#34; class=&#34;headerlink&#34; title=&#34;4.创建父项目&#34;&gt;&lt;/a&gt;4.创建父项目&lt;/h4&gt;&lt;p&gt;​	创建项目parent。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Dubbo/Dubbo-8.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;编写pom.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/parent&amp;gt;
&amp;lt;dependencyManagement&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.10.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.7.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.2.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.1.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;commons-io&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;commons-io&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.6&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
         &amp;lt;dependency&amp;gt;
             &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
             &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
             &amp;lt;version&amp;gt;1.18.12&amp;lt;/version&amp;gt;
             &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
         &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-创建pojo项目&#34;&gt;&lt;a href=&#34;#5-创建pojo项目&#34; class=&#34;headerlink&#34; title=&#34;5.创建pojo项目&#34;&gt;&lt;/a&gt;5.创建pojo项目&lt;/h4&gt;&lt;h4 id=&#34;6-创建mapper项目&#34;&gt;&lt;a href=&#34;#6-创建mapper项目&#34; class=&#34;headerlink&#34; title=&#34;6.创建mapper项目&#34;&gt;&lt;/a&gt;6.创建mapper项目&lt;/h4&gt;&lt;h5 id=&#34;6-1编写pom-xml&#34;&gt;&lt;a href=&#34;#6-1编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;6.1编写pom.xml&#34;&gt;&lt;/a&gt;6.1编写pom.xml&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;pojo&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;6-2新建配置文件&#34;&gt;&lt;a href=&#34;#6-2新建配置文件&#34; class=&#34;headerlink&#34; title=&#34;6.2新建配置文件&#34;&gt;&lt;/a&gt;6.2新建配置文件&lt;/h5&gt;&lt;p&gt;​	新建application-mybatis.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/maven
    username: root
    password: root

mybatis:
  mapper-locations: classpath:mybatis/*.xml
  type-aliases-package: com.msb.pojo
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-新建api项目&#34;&gt;&lt;a href=&#34;#7-新建api项目&#34; class=&#34;headerlink&#34; title=&#34;7.新建api项目&#34;&gt;&lt;/a&gt;7.新建api项目&lt;/h4&gt;&lt;h5 id=&#34;7-1编写pom-xml&#34;&gt;&lt;a href=&#34;#7-1编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;7.1编写pom.xml&#34;&gt;&lt;/a&gt;7.1编写pom.xml&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;pojo&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.bjsxt&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-新建provider&#34;&gt;&lt;a href=&#34;#8-新建provider&#34; class=&#34;headerlink&#34; title=&#34;8.新建provider&#34;&gt;&lt;/a&gt;8.新建provider&lt;/h4&gt;&lt;h5 id=&#34;8-1编写pom-xml&#34;&gt;&lt;a href=&#34;#8-1编写pom-xml&#34; class=&#34;headerlink&#34; title=&#34;8.1编写pom.xml&#34;&gt;&lt;/a&gt;8.1编写pom.xml&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;mapper&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8-2新建配置文件&#34;&gt;&lt;a href=&#34;#8-2新建配置文件&#34; class=&#34;headerlink&#34; title=&#34;8.2新建配置文件&#34;&gt;&lt;/a&gt;8.2新建配置文件&lt;/h5&gt;&lt;p&gt;​	新建application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-provider
  registry:
    address: zookeeper://192.168.52.128:2181

# 加载其他配置文件,加载其他application-*.yml文件，多个名称之间使用逗号分隔
spring:
  profiles:
    active: mybatis
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;8-3新建启动类&#34;&gt;&lt;a href=&#34;#8-3新建启动类&#34; class=&#34;headerlink&#34; title=&#34;8.3新建启动类&#34;&gt;&lt;/a&gt;8.3新建启动类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.ProviderApplication&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDubbo
@MapperScan(&amp;quot;com.msb.mapper&amp;quot;)
public class ProviderApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(ProviderApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;9-完成Dept查询功能&#34;&gt;&lt;a href=&#34;#9-完成Dept查询功能&#34; class=&#34;headerlink&#34; title=&#34;9.完成Dept查询功能&#34;&gt;&lt;/a&gt;9.完成Dept查询功能&lt;/h4&gt;&lt;h5 id=&#34;9-1在api中新建接口&#34;&gt;&lt;a href=&#34;#9-1在api中新建接口&#34; class=&#34;headerlink&#34; title=&#34;9.1在api中新建接口&#34;&gt;&lt;/a&gt;9.1在api中新建接口&lt;/h5&gt;&lt;p&gt;​	com.msb.dubbo.service.DeptDubboService&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface DeptDubboService &amp;#123;
    List&amp;lt;Dept&amp;gt; selectAll();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;9-2在provider中新建实现类&#34;&gt;&lt;a href=&#34;#9-2在provider中新建实现类&#34; class=&#34;headerlink&#34; title=&#34;9.2在provider中新建实现类&#34;&gt;&lt;/a&gt;9.2在provider中新建实现类&lt;/h5&gt;&lt;p&gt;​	com.msb.dubbo.service.impl.DeptDubboServiceImpl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Service
public class DeptDubboServiceImpl implements DeptDubboService &amp;#123;
    @Autowired
    private DeptMapper deptMapper;
    @Override
    public List&amp;lt;Dept&amp;gt; selectAll() &amp;#123;
        return deptMapper.selectByExample(null);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;9-3新建项目dept&#34;&gt;&lt;a href=&#34;#9-3新建项目dept&#34; class=&#34;headerlink&#34; title=&#34;9.3新建项目dept&#34;&gt;&lt;/a&gt;9.3新建项目dept&lt;/h5&gt;&lt;h6 id=&#34;9-3-1添加依赖&#34;&gt;&lt;a href=&#34;#9-3-1添加依赖&#34; class=&#34;headerlink&#34; title=&#34;9.3.1添加依赖&#34;&gt;&lt;/a&gt;9.3.1添加依赖&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;api&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.dubbo&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;dubbo-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-recipes&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.curator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;curator-framework&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;   
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9-3-2编写配置文件&#34;&gt;&lt;a href=&#34;#9-3-2编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;9.3.2编写配置文件&#34;&gt;&lt;/a&gt;9.3.2编写配置文件&lt;/h6&gt;&lt;p&gt;​	新建application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dubbo:
  application:
    name: dubbo-dept-consumer
  registry:
    address: zookeeper://192.168.52.128:2181
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9-3-3新建启动类&#34;&gt;&lt;a href=&#34;#9-3-3新建启动类&#34; class=&#34;headerlink&#34; title=&#34;9.3.3新建启动类&#34;&gt;&lt;/a&gt;9.3.3新建启动类&lt;/h6&gt;&lt;p&gt;​	com.msb.DeptApplication&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootApplication
@EnableDubbo
public class DeptApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(DeptApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9-3-4新建接口及实现类&#34;&gt;&lt;a href=&#34;#9-3-4新建接口及实现类&#34; class=&#34;headerlink&#34; title=&#34;9.3.4新建接口及实现类&#34;&gt;&lt;/a&gt;9.3.4新建接口及实现类&lt;/h6&gt;&lt;p&gt;​	接口：com.msb.service.DeptService&lt;/p&gt;
&lt;p&gt;​	实现类：com.msb.service.impl.DeptServiceImpl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface DeptService &amp;#123;
    List&amp;lt;Dept&amp;gt; showAll();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;@Service
public class DeptServiceImpl implements DeptService &amp;#123;
    @Reference
    private DeptDubboService deptDubboService;
    @Override
    public List&amp;lt;Dept&amp;gt; showAll() &amp;#123;
        return deptDubboService.selectAll();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;9-3-5新建控制器&#34;&gt;&lt;a href=&#34;#9-3-5新建控制器&#34; class=&#34;headerlink&#34; title=&#34;9.3.5新建控制器&#34;&gt;&lt;/a&gt;9.3.5新建控制器&lt;/h6&gt;&lt;p&gt;​	com.msb.controller.DeptController&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Controller
public class DeptController &amp;#123;

    @Autowired
    private DeptService deptService;

    @GetMapping(&amp;quot;/dept&amp;quot;)
    public String shwoDept(Model model)&amp;#123;
        model.addAttribute(&amp;quot;list&amp;quot;,deptService.showAll());
        return &amp;quot;dept&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;9-3-6-新建页面&#34;&gt;&lt;a href=&#34;#9-3-6-新建页面&#34; class=&#34;headerlink&#34; title=&#34;9.3.6  新建页面&#34;&gt;&lt;/a&gt;9.3.6  新建页面&lt;/h5&gt;&lt;p&gt;​	在resources &amp;#x2F;templates新建dept.html&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot; xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;table border=&amp;quot;1&amp;quot; width=&amp;quot;500&amp;quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;编号&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;部门名称&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;查看&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr th:each=&amp;quot;dept : $&amp;#123;list&amp;#125;&amp;quot;&amp;gt;
            &amp;lt;td th:text=&amp;quot;$&amp;#123;dept.id&amp;#125;&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td th:text=&amp;quot;$&amp;#123;dept.name&amp;#125;&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt; &amp;lt;a th:href=&amp;quot;@&amp;#123;/showEmp(did=$&amp;#123;dept.id&amp;#125;)&amp;#125;&amp;quot;&amp;gt;查看&amp;lt;/a&amp;gt; &amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;             
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="分布式" />
        <category term="Dubbo" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/FastDFS/</id>
        <title>FastDFS</title>
        <link rel="alternate" href="http://example.com/2022/10/07/FastDFS/"/>
        <content type="html">&lt;h1 id=&#34;分布式文件存储系统FastDFS&#34;&gt;&lt;a href=&#34;#分布式文件存储系统FastDFS&#34; class=&#34;headerlink&#34; title=&#34;分布式文件存储系统FastDFS&#34;&gt;&lt;/a&gt;分布式文件存储系统FastDFS&lt;/h1&gt;&lt;h1 id=&#34;一、分布式文件存储&#34;&gt;&lt;a href=&#34;#一、分布式文件存储&#34; class=&#34;headerlink&#34; title=&#34;一、分布式文件存储&#34;&gt;&lt;/a&gt;一、分布式文件存储&lt;/h1&gt;&lt;h2 id=&#34;1-分布式文件存储的由来&#34;&gt;&lt;a href=&#34;#1-分布式文件存储的由来&#34; class=&#34;headerlink&#34; title=&#34;1.分布式文件存储的由来&#34;&gt;&lt;/a&gt;1.分布式文件存储的由来&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;在我们的项目中有很多需要存储的内容出现，比如图片，视频，文件等等，在早期的时候用户量不大，产生的文件也不是很多，这时我们可以把文件和服务程序放在一个服务器中。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/66d2beee9a4e47c08aa9552530a9c996.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;后面随着文件越来越多，服务器的资源会被文件资源大量占据，从而影响到服务器的稳定，这时我们可以单独的把文件服务器拆出来。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/8097b0f16465452b9f9b460e2149aa0d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;拆解出来后，文件服务的使用不会影响到我们的系统服务的稳定，但是当用户量越来越大，存储的文件就会越来越多，这时如果还是单台的文件服务，比如100T的文件，这时是存储不下去的，这时就产生了我们将的分布式文件存储，&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/fff16a09675d40ac926d42be9385d461.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;也就是我们解决如何将这100T的文件分散的存储到各个节点上，然后当我们需要读取文件的时候又能非常快的帮我们把文件找到。这个就是分布式文件系统帮我们解决的问题了。&lt;/p&gt;
&lt;h2 id=&#34;2-常见的分布式存储框架&#34;&gt;&lt;a href=&#34;#2-常见的分布式存储框架&#34; class=&#34;headerlink&#34; title=&#34;2.常见的分布式存储框架&#34;&gt;&lt;/a&gt;2.常见的分布式存储框架&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;接下来我们看看在国内常用的分布式存储的框架选择有哪些&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分布式框架&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;FastDFS&lt;/td&gt;
&lt;td&gt;我们介绍的主角，国产&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HDFS&lt;/td&gt;
&lt;td&gt;Hadoop组件中分布式存储框架&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MinIO&lt;/td&gt;
&lt;td&gt;MinIO是在Apache下的产品，最适合存储非结构化的数据，&lt;br /&gt;比如照片，视频，日志文件，备份和容器等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;阿里云对象存储&lt;/td&gt;
&lt;td&gt;当然我们还可以花费一点费用来使用其他厂商提供的对象存储服务&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;好了就介绍这么几个，其他的我们也用不到了。&lt;/p&gt;
&lt;h1 id=&#34;二、FastDFS介绍&#34;&gt;&lt;a href=&#34;#二、FastDFS介绍&#34; class=&#34;headerlink&#34; title=&#34;二、FastDFS介绍&#34;&gt;&lt;/a&gt;二、FastDFS介绍&lt;/h1&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;FastDFS是余庆国人开发的一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。&lt;/p&gt;
&lt;p&gt;FastDFS的特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FastDFS是一个轻量级的开源分布式文件系统&lt;/li&gt;
&lt;li&gt;FastDFS主要解决了大容量的文件存储和高并发访问的问题，文件存取时实现了负载均衡&lt;/li&gt;
&lt;li&gt;FastDFS实现了软件方式的RAID，可以使用廉价的IDE硬盘进行存储&lt;/li&gt;
&lt;li&gt;支持存储服务器在线扩容&lt;/li&gt;
&lt;li&gt;支持相同内容的文件只保存一份，节约磁盘空间&lt;/li&gt;
&lt;li&gt;FastDFS只能通过Client API访问，不支持POSIX访问方式&lt;/li&gt;
&lt;li&gt;FastDFS特别适合大中型网站使用，用来存储资源文件（如：图片、文档、音频、视频等等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;架构图：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/92362218a5024b7c9e9141b754756b79.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;相关术语讲解：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名词&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Tracker Server&lt;/td&gt;
&lt;td&gt;跟踪服务器，主要做调度工作，在访问上起负载均衡的作用。&lt;br /&gt;记录storage server的状态，是连接Client和Storage server的枢纽&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Storage Server&lt;/td&gt;
&lt;td&gt;存储服务器，文件和meta data都保存到存储服务器上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;group&lt;/td&gt;
&lt;td&gt;组，也可称为卷。同组内服务器上的文件是完全相同的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;文件标识&lt;/td&gt;
&lt;td&gt;包括两部分：组名和文件名（包含路径）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;meta-data&lt;/td&gt;
&lt;td&gt;文件相关属性，键值对（Key Value Pair）方式，如：width&amp;#x3D;1024,heigth&amp;#x3D;768&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;架构解读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只有两个角色，tracker server和storage server，不需要存储文件索引信息。&lt;/li&gt;
&lt;li&gt;所有服务器都是对等的，不存在Master-Slave关系。&lt;/li&gt;
&lt;li&gt;存储服务器采用分组方式，同组内存储服务器上的文件完全相同（RAID 1）。&lt;/li&gt;
&lt;li&gt;不同组的storage server之间不会相互通信。&lt;/li&gt;
&lt;li&gt;由storage server主动向tracker server报告状态信息，tracker server之间不会相互通信。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;三、FastDFS安装&#34;&gt;&lt;a href=&#34;#三、FastDFS安装&#34; class=&#34;headerlink&#34; title=&#34;三、FastDFS安装&#34;&gt;&lt;/a&gt;三、FastDFS安装&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/FastDFS/b60ca697c06d4425b7cd228b98dc3d19.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;FastDFS的安装我们还是通过Docker来安装实现吧，直接在Linux上还装还是比较繁琐的，但就学习而言Docker安装还是非常高效的。Docker环境请自行安装哦，不清楚的可以看看我的Docker专题的内容。&lt;a href=&#34;Docker%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99&#34; title=&#34;Docker学习资料&#34;&gt;https://blog.csdn.net/qq_38526573&amp;#x2F;category_9619681.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-拉取镜像文件&#34;&gt;&lt;a href=&#34;#1-拉取镜像文件&#34; class=&#34;headerlink&#34; title=&#34;1.拉取镜像文件&#34;&gt;&lt;/a&gt;1.拉取镜像文件&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先我们可以通过 &lt;code&gt;docker search fastdfs&lt;/code&gt; 来查询下有哪些镜像文件。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/5a06a59eb24d4f9e847a4badeef871ac.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;我们看到搜索到的镜像还是蛮多的，这里我们使用 &lt;code&gt;delron/fastdfs&lt;/code&gt; 你也可以尝试使用其他的镜像来安装，你也可以制作自己的镜像来给别人使用哦，只是不同的镜像在使用的时候配置会有一些不一样，有些镜像没有提供Nginx的相关配置，使用的时候会繁琐一点。接下来通过 &lt;code&gt;docker pull delron/fastdfs&lt;/code&gt;命令把镜像拉取下来。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull delron/fastdfs
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/5e5b85b3dc9a432abf615b27868fc7bf.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;2-构建Tracker服务&#34;&gt;&lt;a href=&#34;#2-构建Tracker服务&#34; class=&#34;headerlink&#34; title=&#34;2.构建Tracker服务&#34;&gt;&lt;/a&gt;2.构建Tracker服务&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先我们需要通过Docker命令来创建Tracker服务。命令为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name tracker --network=host -v /mydata/fastdfs/tracker:/var/fdfs delron/fastdfs tracker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;tracker服务默认的端口为22122，-v 实现了容器和本地目录的挂载操作。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/694d42632bf6410a806df9aa43e836c0.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;3-构建Storage服务&#34;&gt;&lt;a href=&#34;#3-构建Storage服务&#34; class=&#34;headerlink&#34; title=&#34;3.构建Storage服务&#34;&gt;&lt;/a&gt;3.构建Storage服务&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;接下来创建Storage服务，具体的执行命令如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name storage --network=host  -e TRACKER_SERVER=192.168.1.195:22122 -v /mydata/fastdfs/storage:/var/fdfs -e GROUP_NAME=group1 delron/fastdfs storage
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;在执行上面命令的时候要注意对应的修改下，其中TRACKER_SERVER中的ip要修改为你的Tracker服务所在的服务IP地址。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/dc2bdf85d0f24fe18a32efbe4caa2d27.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;默认情况下在Storage服务中是帮我们安装了Nginx服务的，相关的端口为&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;服务&lt;/th&gt;
&lt;th&gt;默认端口&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;tracker&lt;/td&gt;
&lt;td&gt;22122&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;storage&lt;/td&gt;
&lt;td&gt;23000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nginx&lt;/td&gt;
&lt;td&gt;8888&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;当然如果你发现这些相关的端口被占用了，或者想要对应的修改端口信息也可以的。要修改你可以先进入容器中查看下相关的配置文件信息。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/da5cc21445e840baa85580ba420db94d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后查看storage.conf文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/63862499980b408195291de047048566.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;这个是storage监听的Nginx的端口8888，如果要修改那么我们还需要修改Nginx中的服务配置，这块的配置在 &lt;code&gt;/usr/local/nginx/conf&lt;/code&gt;目录下&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/f866c08177be4fd48bfd9a582ec78779.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;查看下文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/dc7c5888363a400b9308f3ba64cca9ac.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;所以要修改端口号的话，这两个位置都得修改了。当然本文我们就使用默认的端口号来使用了。&lt;/p&gt;
&lt;h2 id=&#34;4-测试图片上传&#34;&gt;&lt;a href=&#34;#4-测试图片上传&#34; class=&#34;headerlink&#34; title=&#34;4.测试图片上传&#34;&gt;&lt;/a&gt;4.测试图片上传&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;好了，安装我们已经完成了，那么到底是否可以使用呢？我们来测试下。首先在虚拟机的&amp;#x2F;mydata&amp;#x2F;fastdfs&amp;#x2F;storage下保存一张图片。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/ff2ea2626bb34acd810fbb8d9438129a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后我们再进入到storage容器中。并且进入到 &lt;code&gt;/var/fdfs&lt;/code&gt;目录下,可以看到我们挂载的文件了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/cb8a96fb9bb644328880ca70378a7fc2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后执行如下命令即可完成图片的上传操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;/usr/bin/fdfs_upload_file /etc/fdfs/client.conf 1.jpg
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/0fd0e82898bb45178eca4eef9a412745.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;通过上面的提示我们看到文件上传成功了，而且返回了文件在storage中存储的信息。这时我们就可以通过这个信息来拼接访问的地址在浏览器中访问了：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguNTYuMTAwOjg4ODgvZ3JvdXAxL00wMC8wMC8wMC93S2c0WkdIY0tMU0FYaWJhQUFlek11VXJsUzgyMzUuanBn&#34;&gt;http://192.168.56.100:8888/group1/M00/00/00/wKg4ZGHcKLSAXibaAAezMuUrlS8235.jpg&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/b34e823e956f410297bfd1218ebc0231.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;好了到这儿FastDFS的服务安装成功了。&lt;/p&gt;
&lt;h1 id=&#34;四、客户端操作&#34;&gt;&lt;a href=&#34;#四、客户端操作&#34; class=&#34;headerlink&#34; title=&#34;四、客户端操作&#34;&gt;&lt;/a&gt;四、客户端操作&lt;/h1&gt;&lt;h2 id=&#34;1-Fastdfs-java-client&#34;&gt;&lt;a href=&#34;#1-Fastdfs-java-client&#34; class=&#34;headerlink&#34; title=&#34;1.Fastdfs-java-client&#34;&gt;&lt;/a&gt;1.Fastdfs-java-client&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先我们来看下如何实现FastDFS中提供的JavaAPI来直接实现对应的文件上传和下载操作。&lt;/p&gt;
&lt;h3 id=&#34;1-1-文件上传&#34;&gt;&lt;a href=&#34;#1-1-文件上传&#34; class=&#34;headerlink&#34; title=&#34;1.1 文件上传&#34;&gt;&lt;/a&gt;1.1 文件上传&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;先来看下文件上传的流程&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/c1da19dbbe994f55b20371ba0806d694.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;上传流程的文字梳理为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端访问Tracker&lt;/li&gt;
&lt;li&gt;Tracker 返回Storage的ip和端口&lt;/li&gt;
&lt;li&gt;客户端直接访问Storage，把文件内容和元数据发送过去。&lt;/li&gt;
&lt;li&gt;Storage返回文件存储id。包含了组名和文件名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;首先创建一个普通的maven项目，然后引入对应的依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;cn.bestwu&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;fastdfs-client-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.27&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.commons&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;commons-lang3&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.4&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后编写FastDFS的配置文件，内容如下：注意ip修改为你自己对应的ip即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;connect_timeout = 10
network_timeout = 30
charset = UTF-8
http.tracker_http_port = 8080
tracker_server = 192.168.56.100:22122
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/3c54c7b41f2a4ac2b420b65beafd10d2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后导入对应的工具类，在工具类中完成了StorageClient的实例化，并提供了相关的上传和下载的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.bobo.fastdfs.config;

import org.apache.commons.lang3.StringUtils;
import org.csource.common.NameValuePair;
import org.csource.fastdfs.*;

import java.io.*;

public class FastDFSClient &amp;#123;
    private static final String CONF_FILENAME = Thread.currentThread().getContextClassLoader().getResource(&amp;quot;&amp;quot;).getPath() + &amp;quot;fdfs_client.conf&amp;quot;;

    private static StorageClient storageClient = null;

    /**
     * 只加载一次.
     */
    static &amp;#123;
        try &amp;#123;
            ClientGlobal.init(CONF_FILENAME);
            TrackerClient trackerClient = new TrackerClient(ClientGlobal.g_tracker_group);
            TrackerServer trackerServer = trackerClient.getConnection();
            StorageServer storageServer = trackerClient.getStoreStorage(trackerServer);
            storageClient = new StorageClient(trackerServer, storageServer);
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;

    /**
     *
     * @param inputStream
     *    上传的文件输入流
     * @param fileName
     *    上传的文件原始名
     * @return
     */
    public static String[] uploadFile(InputStream inputStream, String fileName) &amp;#123;
        try &amp;#123;
            // 文件的元数据
            NameValuePair[] meta_list = new NameValuePair[2];
            // 第一组元数据，文件的原始名称
            meta_list[0] = new NameValuePair(&amp;quot;file name&amp;quot;, fileName);
            // 第二组元数据
            meta_list[1] = new NameValuePair(&amp;quot;file length&amp;quot;, inputStream.available()+&amp;quot;&amp;quot;);
            // 准备字节数组
            byte[] file_buff = null;
            if (inputStream != null) &amp;#123;
                // 查看文件的长度
                int len = inputStream.available();
                // 创建对应长度的字节数组
                file_buff = new byte[len];
                // 将输入流中的字节内容，读到字节数组中。
                inputStream.read(file_buff);
            &amp;#125;
            // 上传文件。参数含义：要上传的文件的内容（使用字节数组传递），上传的文件的类型（扩展名），元数据
            String[] fileids = storageClient.upload_file(file_buff, getFileExt(fileName), meta_list);
            return fileids;
        &amp;#125; catch (Exception ex) &amp;#123;
            ex.printStackTrace();
            return null;
        &amp;#125;
    &amp;#125;

    /**
     *
     * @param file
     *            文件
     * @param fileName
     *            文件名
     * @return 返回Null则为失败
     */
    public static String[] uploadFile(File file, String fileName) &amp;#123;
        FileInputStream fis = null;
        try &amp;#123;
            NameValuePair[] meta_list = null; // new NameValuePair[0];
            fis = new FileInputStream(file);
            byte[] file_buff = null;
            if (fis != null) &amp;#123;
                int len = fis.available();
                file_buff = new byte[len];
                fis.read(file_buff);
            &amp;#125;

            String[] fileids = storageClient.upload_file(file_buff, getFileExt(fileName), meta_list);
            return fileids;
        &amp;#125; catch (Exception ex) &amp;#123;
            return null;
        &amp;#125;finally&amp;#123;
            if (fis != null)&amp;#123;
                try &amp;#123;
                    fis.close();
                &amp;#125; catch (IOException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;

    /**
     * 根据组名和远程文件名来删除一个文件
     *
     * @param groupName
     *            例如 &amp;quot;group1&amp;quot; 如果不指定该值，默认为group1
     * @param remoteFileName
     *            例如&amp;quot;M00/00/00/wKgxgk5HbLvfP86RAAAAChd9X1Y736.jpg&amp;quot;
     * @return 0为成功，非0为失败，具体为错误代码
     */
    public static int deleteFile(String groupName, String remoteFileName) &amp;#123;
        try &amp;#123;
            int result = storageClient.delete_file(groupName == null ? &amp;quot;group1&amp;quot; : groupName, remoteFileName);
            return result;
        &amp;#125; catch (Exception ex) &amp;#123;
            return 0;
        &amp;#125;
    &amp;#125;

    /**
     * 修改一个已经存在的文件
     *
     * @param oldGroupName
     *            旧的组名
     * @param oldFileName
     *            旧的文件名
     * @param file
     *            新文件
     * @param fileName
     *            新文件名
     * @return 返回空则为失败
     */
    public static String[] modifyFile(String oldGroupName, String oldFileName, File file, String fileName) &amp;#123;
        String[] fileids = null;
        try &amp;#123;
            // 先上传
            fileids = uploadFile(file, fileName);
            if (fileids == null) &amp;#123;
                return null;
            &amp;#125;
            // 再删除
            int delResult = deleteFile(oldGroupName, oldFileName);
            if (delResult != 0) &amp;#123;
                return null;
            &amp;#125;
        &amp;#125; catch (Exception ex) &amp;#123;
            return null;
        &amp;#125;
        return fileids;
    &amp;#125;

    /**
     * 文件下载
     *
     * @param groupName 卷名
     * @param remoteFileName 文件名
     * @return 返回一个流
     */
    public static InputStream downloadFile(String groupName, String remoteFileName) &amp;#123;
        try &amp;#123;
            byte[] bytes = storageClient.download_file(groupName, remoteFileName);
            InputStream inputStream = new ByteArrayInputStream(bytes);
            return inputStream;
        &amp;#125; catch (Exception ex) &amp;#123;
            return null;
        &amp;#125;
    &amp;#125;

    public static NameValuePair[] getMetaDate(String groupName, String remoteFileName)&amp;#123;
        try&amp;#123;
            NameValuePair[] nvp = storageClient.get_metadata(groupName, remoteFileName);
            return nvp;
        &amp;#125;catch(Exception ex)&amp;#123;
            ex.printStackTrace();
            return null;
        &amp;#125;
    &amp;#125;

    /**
     * 获取文件后缀名（不带点）.
     *
     * @return 如：&amp;quot;jpg&amp;quot; or &amp;quot;&amp;quot;.
     */
    private static String getFileExt(String fileName) &amp;#123;
        if (StringUtils.isBlank(fileName) || !fileName.contains(&amp;quot;.&amp;quot;)) &amp;#123;
            return &amp;quot;&amp;quot;;
        &amp;#125; else &amp;#123;
            return fileName.substring(fileName.lastIndexOf(&amp;quot;.&amp;quot;) + 1); // 不带最后的点
        &amp;#125;
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后我们就可以来测试上传的操作了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            File file = new File(&amp;quot;D:/2.jpg&amp;quot;);
            InputStream is = new FileInputStream(file);
            String fileName = UUID.randomUUID().toString()+&amp;quot;.jpg&amp;quot;;
            String[] result = FastDFSClient.uploadFile(is, fileName);
            System.out.println(Arrays.toString(result));
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/6d7d9ff0b42e4e1daae06e47dab3793f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;访问即可：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguNTYuMTAwOjg4ODgvZ3JvdXAxL00wMC8wMC8wMC93S2c0WkdIY1VFNkFaQTJVQUFXOGRJWDVwNTAzNzQuanBn&#34;&gt;http://192.168.56.100:8888/group1/M00/00/00/wKg4ZGHcUE6AZA2UAAW8dIX5p50374.jpg&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;返回后的字符串的结构说明&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/5cec7e1344324b8dbd8050715d40b32f.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;1-2-文件下载&#34;&gt;&lt;a href=&#34;#1-2-文件下载&#34; class=&#34;headerlink&#34; title=&#34;1.2 文件下载&#34;&gt;&lt;/a&gt;1.2 文件下载&lt;/h3&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;文件下载的流程，如下&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/04cba11544044479996f178ed8e41768.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;文件下载的流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;client询问tracker需要下载的文件的storage，参数为文件的标识(group加文件名)。&lt;/li&gt;
&lt;li&gt;tracker根据客户端的参数返回一台可用的storage。&lt;/li&gt;
&lt;li&gt;client根据返回的storage直接完成对应的文件的下载。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;有了上面的基础，文件下载就非常简单了，我们只需要根据前面上传的文件的group和文件的存储路径就可以通过StorageClient中提供的downloadFile方法把对应的文件下载下来了，具体的代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    /**
     * 文件下载
     */
    public static void downloadFile()&amp;#123;
        try &amp;#123;
            InputStream is = FastDFSClient
                    .downloadFile(&amp;quot;group1&amp;quot;, &amp;quot;M00/00/00/wKg4ZGHcUE6AZA2UAAW8dIX5p50374.jpg&amp;quot;);
            OutputStream os = new FileOutputStream(new File(&amp;quot;D:/12.jpg&amp;quot;));
            int index = 0 ;
            while((index = is.read())!=-1)&amp;#123;
                os.write(index);
            &amp;#125;
            os.flush();
            os.close();
            is.close();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：StorageClient是线程不安全的。那么我们的解决方案&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对文件的操作的每个方法我们做同步处理&lt;/li&gt;
&lt;li&gt;每次操作文件的时候我们都获取一个新的StorageClient对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种方式效率肯定是最低的，第二种方式每次都要建立新的连接效率同样的会受到影响，这时最好的方式其实是把StorageClient交给我们自定义的连接池来管理&lt;/p&gt;
&lt;h2 id=&#34;2-SpringBoot整合&#34;&gt;&lt;a href=&#34;#2-SpringBoot整合&#34; class=&#34;headerlink&#34; title=&#34;2.SpringBoot整合&#34;&gt;&lt;/a&gt;2.SpringBoot整合&lt;/h2&gt;&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;我们在实际工作中基本都是和SpringBoot整合在一起来使用的，那么我们就来看看FastDFS是如何在SpringBoot项目中来使用的。首先创建一个普通的SpringBoot项目，然后导入fastdfs-spring-boot-starter这个依赖。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.luhuiguo&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;fastdfs-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.2.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;既然是一个starter，那么必然会在spring.factories文件中提供对应的自动配置类。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/807e18ab743d4dcea0128bfc9f967a22.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;可以看到给我们提供的配置类为FdfsAutoConfiguration进入后可以看到帮我们注入了很多的核心对象。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/74a13becccb94ff8841c542cf0b9ce98.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后可以看到系统提供的配置信息，前缀为 &lt;code&gt;fdfs&lt;/code&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/ef9e211d1145444c8b8348d2e73a6a76.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;然后我们就可以在application.properties中配置FastDFS的配置信息了。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/aa2dde964afc4909a7214239a269b65b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&amp;amp;emsp;&amp;amp;emsp;配置完成后我们就可以测试文件的上传下载操作了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootTest
class FastDfsSpringBootApplicationTests &amp;#123;

    @Autowired
    public FastFileStorageClient storageClient;


    @Test
    void contextLoads() throws Exception&amp;#123;
        File file = new File(&amp;quot;d:\\2.jpg&amp;quot;);
        StorePath path = storageClient.uploadFile(null,new FileInputStream(file),file.length(),file.getName());
        System.out.println(path.getFullPath());
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;文件操作成功&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/FastDFS/781603ff01b4486c8775ee45639420f4.png&#34; class=&#34;&#34;&gt;

</content>
        <category term="分布式" />
        <category term="FastDFS" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/MySQL_Super/</id>
        <title>MySQL高级部分</title>
        <link rel="alternate" href="http://example.com/2022/10/07/MySQL_Super/"/>
        <content type="html">&lt;h1 id=&#34;MySQL性能调优&#34;&gt;&lt;a href=&#34;#MySQL性能调优&#34; class=&#34;headerlink&#34; title=&#34;MySQL性能调优&#34;&gt;&lt;/a&gt;MySQL性能调优&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;环境：CentOS7.5					 Version：MySQL57.39&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;主要内容&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;#MySQL%E7%9A%84%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D&#34;&gt;1、MySQL的架构介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90&#34;&gt;2、索引优化分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96%E5%88%86%E6%9E%90&#34;&gt;3、查询截取分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6&#34;&gt;4、MySQL的锁机制&lt;/a&gt;&lt;/p&gt;
&lt;div name=MySQL的架构介绍 &gt;


&lt;h1 id=&#34;MySQL文件目录结构&#34;&gt;&lt;a href=&#34;#MySQL文件目录结构&#34; class=&#34;headerlink&#34; title=&#34;MySQL文件目录结构&#34;&gt;&lt;/a&gt;MySQL文件目录结构&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;路径&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;解释&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;var&amp;#x2F;lib&amp;#x2F;mysql&amp;#x2F;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mysql数据库文件的存放路径&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;var&amp;#x2F;lib&amp;#x2F;mysql&amp;#x2F;atguidgu.cloud.pid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;mysql&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;配置文件目录&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mysql.server命令及配置及文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;相关命令目录&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mysqladmin 、mysqldump等相关命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;ect&amp;#x2F;init.d&amp;#x2F;mysql&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;启停相关脚本&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;主要配置文件&#34;&gt;&lt;a href=&#34;#主要配置文件&#34; class=&#34;headerlink&#34; title=&#34;主要配置文件&#34;&gt;&lt;/a&gt;主要配置文件&lt;/h1&gt;&lt;p&gt;1、二进制日志 log-bin ：主从复制&lt;/p&gt;
&lt;p&gt;2、错误日志 log-error ：默认是关闭的，记录严重的警告和错误信息，每次启动和关闭的详细信息等&lt;/p&gt;
&lt;p&gt;3、查询日志 log ：默认关闭，记录查询的SQL语句，如果开启就会降低mysql的整体性能&lt;/p&gt;
&lt;p&gt;4、数据文件 : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：本地安装的目录下&amp;#x2F;data  目录下可以挑选很多库&lt;/li&gt;
&lt;li&gt;Windows：本地安装的目录下&amp;#x2F;data  目录下可以挑选很多库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;frm文件： 存放表结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;myd文件：存放表数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;myi文件： 存放表索引&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;逻辑架构&#34;&gt;&lt;a href=&#34;#逻辑架构&#34; class=&#34;headerlink&#34; title=&#34;逻辑架构&#34;&gt;&lt;/a&gt;逻辑架构&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220816182921842-1660960902142.png&#34; class=&#34;&#34;&gt;




&lt;h2 id=&#34;1-连接层&#34;&gt;&lt;a href=&#34;#1-连接层&#34; class=&#34;headerlink&#34; title=&#34;1.连接层&#34;&gt;&lt;/a&gt;1.连接层&lt;/h2&gt;&lt;p&gt;​	最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端&amp;#x2F;服务端工具实现的类似于tcplip的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。&lt;/p&gt;
&lt;h2 id=&#34;⒉服务层&#34;&gt;&lt;a href=&#34;#⒉服务层&#34; class=&#34;headerlink&#34; title=&#34;⒉服务层&#34;&gt;&lt;/a&gt;⒉服务层&lt;/h2&gt;&lt;p&gt;​	第二层架构主要完成大多少的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。&lt;/p&gt;
&lt;h2 id=&#34;3-引擎层&#34;&gt;&lt;a href=&#34;#3-引擎层&#34; class=&#34;headerlink&#34; title=&#34;3.引擎层&#34;&gt;&lt;/a&gt;3.引擎层&lt;/h2&gt;&lt;p&gt;​	存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。后面介绍MylSAM和InnoDB&lt;/p&gt;
&lt;p&gt;常用的存储引擎：MyISAM、InnoDB(最常用)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;对比项&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;MylSAM&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;InnoDB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;主外键&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不支持&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;事务&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不馳&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;行表锁&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;表锁，即使操作一条记录也会锁住整 个表，不适合高并发的操作&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;行锁,操作时只锁某一行，不对其它 行有影响， 适合高并发的操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;緩存&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;只緩存索引，不缓存真实数据&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不仅缓存索引还要缓存真实数据，对 内存要求较高，而且内存大小对性能 有决定性的影响&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;表空间&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;小&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;关注点&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;性能&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;事务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;默认安装&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;4-存储层&#34;&gt;&lt;a href=&#34;#4-存储层&#34; class=&#34;headerlink&#34; title=&#34;4.存储层&#34;&gt;&lt;/a&gt;4.存储层&lt;/h2&gt;&lt;p&gt;​	数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220816181915861-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;连接器&#34;&gt;&lt;a href=&#34;#连接器&#34; class=&#34;headerlink&#34; title=&#34;连接器&#34;&gt;&lt;/a&gt;连接器&lt;/h2&gt;&lt;p&gt;▪  连接器负责跟客户端建立连接，获取权限、维持和管理连接&lt;br&gt;– 用户名密码验证&lt;br&gt;– 查询权限信息，分配对应的权限&lt;br&gt;– 可以使用show processlist查看现在的连接&lt;br&gt;– 如果太长时间没有动静，  就会自动断开，通过wait_timeout控制，默认8小时&lt;br&gt;▪  连接可以分为两类：&lt;br&gt;– 长连接：推荐使用，但是要周期性的断开长连接&lt;/p&gt;
&lt;p&gt;– 短链接：&lt;/p&gt;
&lt;h2 id=&#34;查询缓存&#34;&gt;&lt;a href=&#34;#查询缓存&#34; class=&#34;headerlink&#34; title=&#34;查询缓存&#34;&gt;&lt;/a&gt;查询缓存&lt;/h2&gt;&lt;p&gt;▪  当执行查询语句的时候，会先去查询缓存中查看结果，之前执行 过的sql语句及其结果可能以key-value的形式存储在缓存中，如 果能找到则直接返回，如果找不到，就继续执行后续的阶段。&lt;br&gt;&amp;#x3D;&amp;#x3D;▪  但是，不推荐使用查询缓存：&amp;#x3D;&amp;#x3D;&lt;br&gt;– 1、查询缓存的失效比较频繁，只要表更新，缓存就会清空&lt;/p&gt;
&lt;p&gt;– 2、缓存对应新更新的数据命中率比较低&lt;/p&gt;
&lt;h2 id=&#34;分析器&#34;&gt;&lt;a href=&#34;#分析器&#34; class=&#34;headerlink&#34; title=&#34;分析器&#34;&gt;&lt;/a&gt;分析器&lt;/h2&gt;&lt;p&gt;▪  词法分析：  Mysql需要把输入的字符串进行识别每个部分代表什 么意思&lt;br&gt;– 把字符串 T 识别成 表名 T&lt;br&gt;– 把字符串 ID 识别成 列ID&lt;br&gt;▪  语法分析：&lt;/p&gt;
&lt;p&gt;▪  根据语法规则判断这个sql语句是否满足mysql的语法，如果不符 合就会报错“You have an error in your SQL synta”&lt;/p&gt;
&lt;h2 id=&#34;优化器&#34;&gt;&lt;a href=&#34;#优化器&#34; class=&#34;headerlink&#34; title=&#34;优化器&#34;&gt;&lt;/a&gt;优化器&lt;/h2&gt;&lt;p&gt;▪  在具体执行SQL语句之前，要先经过优化器的处理&lt;br&gt;– 当表中有多个索引的时候，决定用哪个索引&lt;br&gt;– 当sql语句需要做多表关联的时候，  决定表的连接顺序&lt;br&gt;– 等等&lt;br&gt;▪ 不同的执行方式对SQL语句的执行效率影响很大&lt;br&gt;– RBO:基于规则的优化&lt;/p&gt;
&lt;p&gt;– CBO:基于成本的优化&lt;/p&gt;
&lt;h1 id=&#34;SQL性能下降原因&#34;&gt;&lt;a href=&#34;#SQL性能下降原因&#34; class=&#34;headerlink&#34; title=&#34;SQL性能下降原因&#34;&gt;&lt;/a&gt;SQL性能下降原因&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;查询语句写的烂&lt;/li&gt;
&lt;li&gt;索引失效&lt;/li&gt;
&lt;li&gt;关联查询太多 join &lt;/li&gt;
&lt;li&gt;服务器调优及各个参数设置（缓冲、线程数）&lt;/li&gt;
&lt;li&gt;……….etc&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;SQL语句机读过程&#34;&gt;&lt;a href=&#34;#SQL语句机读过程&#34; class=&#34;headerlink&#34; title=&#34;SQL语句机读过程&#34;&gt;&lt;/a&gt;SQL语句机读过程&lt;/h1&gt;&lt;p&gt;人工：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;    SELECT DISTINCT
        &amp;lt;SELECT_list&amp;gt;
    FROM
        &amp;lt;left_table&amp;gt; &amp;lt;join_type&amp;gt;
    Join &amp;lt;right_table&amp;gt; on &amp;lt;join_condition&amp;gt;
    WHERE 
        &amp;lt;WHERE_Condition&amp;gt;
    GROUP BY
        &amp;lt;group_by_list&amp;gt;
    HAVING
        &amp;lt;having_condition&amp;gt;
    ORDER BY
        &amp;lt;order_by_condition&amp;gt;
    LIMIT &amp;lt;limit_num&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;机器：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220816200725202-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;注意第一步是 from –&amp;gt; on –&amp;gt; join –&amp;gt;where –&amp;gt;group by –&amp;gt;having –&amp;gt;select –&amp;gt;order by –&amp;gt;limit&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;    from &amp;lt;left table&amp;gt;
        on &amp;lt;on_condition&amp;gt;
    &amp;lt;join_type&amp;gt; join &amp;lt;join_table&amp;gt;
    where &amp;lt;where_condition&amp;gt;
    group by &amp;lt;group_by_list&amp;gt;
        &amp;lt;sum()avg()等聚合函数&amp;gt;
    having &amp;lt;having_condition&amp;gt;
    select &amp;lt;select_list&amp;gt;
    distinct
    order by &amp;lt;order_by_condition&amp;gt;
    limit &amp;lt;limit_number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;on和where的区别？&#34;&gt;&lt;a href=&#34;#on和where的区别？&#34; class=&#34;headerlink&#34; title=&#34;on和where的区别？&#34;&gt;&lt;/a&gt;on和where的区别？&lt;/h2&gt;&lt;p&gt;​	简单地说，当有外关联表时，on主要是针对外关联表进行筛选，主表保留，当没有关联表时，二者作用相同。&lt;/p&gt;
&lt;p&gt;例如在左外连时，首先执行on，筛选掉外连表中不符合on表达式的数据，而where的筛选是对主表的筛选。&lt;/p&gt;
&lt;h1 id=&#34;MySql执行顺序理解&#34;&gt;&lt;a href=&#34;#MySql执行顺序理解&#34; class=&#34;headerlink&#34; title=&#34;MySql执行顺序理解&#34;&gt;&lt;/a&gt;MySql执行顺序理解&lt;/h1&gt;&lt;p&gt;第一步：加载from子句的前两个表计算笛卡尔积，生成虚拟表vt1；&lt;/p&gt;
&lt;p&gt;第二步：筛选关联表符合on表达式的数据，保留主表，生成虚拟表vt2；&lt;/p&gt;
&lt;p&gt;第三步：如果使用的是外连接，执行on的时候，会将主表中不符合on条件的数据也加载进来，做为外部行&lt;/p&gt;
&lt;p&gt;第四步：如果from子句中的表数量大于2，则重复第一步到第三步，直至所有的表都加载完毕，更新vt3；&lt;/p&gt;
&lt;p&gt;第五步：执行where表达式，筛选掉不符合条件的数据生成vt4；&lt;/p&gt;
&lt;p&gt;第六步：执行group by子句。group by 子句执行过后，会对子句组合成唯一值并且对每个唯一值只包含一行，生成vt5,。一旦执行group by，后面的所有步骤只能得到vt5中的列（group by的子句包含的列）和聚合函数。&lt;/p&gt;
&lt;p&gt;第七步：执行聚合函数，生成vt6；&lt;/p&gt;
&lt;p&gt;第八步：执行having表达式，筛选vt6中的数据。having是唯一一个在分组后的条件筛选，生成vt7;&lt;/p&gt;
&lt;p&gt;第九步：从vt7中筛选列，生成vt8；&lt;/p&gt;
&lt;p&gt;第十步：执行distinct，对vt8去重，生成vt9。其实执行过group by后就没必要再去执行distinct，因为分组后，每组只会有一条数据，并且每条数据都不相同。&lt;/p&gt;
&lt;p&gt;第十一步：对vt9进行排序，此处返回的不是一个虚拟表，而是一个游标，记录了数据的排序顺序，此处可以使用别名；&lt;/p&gt;
&lt;p&gt;第十二步：执行limit语句，将结果返回给客户端&lt;/p&gt;
&lt;div name=索引优化分析 &gt;


&lt;h1 id=&#34;索引&#34;&gt;&lt;a href=&#34;#索引&#34; class=&#34;headerlink&#34; title=&#34;索引&#34;&gt;&lt;/a&gt;索引&lt;/h1&gt;&lt;p&gt;​	MySQL官方对索引的定义为：索引(Index）是帮助MySQL高效获取数据的数据结构。可以得到索引的本质:&amp;#x3D;&amp;#x3D;索引是数据结构&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;p&gt;&lt;font color=red &gt;可以简单理解为 “排好序的快速查找数据结构”&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上&lt;/p&gt;
&lt;p&gt;我们平常所说的&amp;#x3D;&amp;#x3D;索引，如果没有特别指明，都是指B树(多路搜索树，并不一定是二叉的)结构组织的索引&amp;#x3D;&amp;#x3D;。其中聚集索引，次要索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。当然，除了B+树这种类型的索引之外还有哈稀索引(hash，index)等。&lt;/p&gt;
&lt;p&gt;简单来说&amp;#x3D;&amp;#x3D;最大的作用&amp;#x3D;&amp;#x3D;就是 &amp;#x3D;&amp;#x3D;排序&amp;#x3D;&amp;#x3D; 和 &amp;#x3D;&amp;#x3D;查询&amp;#x3D;&amp;#x3D; &lt;/p&gt;
&lt;h2 id=&#34;目的&#34;&gt;&lt;a href=&#34;#目的&#34; class=&#34;headerlink&#34; title=&#34;目的&#34;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;提高查询效率，可以类比字典，&lt;br&gt;如果要查“mysql”这个单询，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。&lt;br&gt;如果没有索引，那么你可能需要a—-z，如果我想找到Java开头的单词呢?或者Oracle开头的单词呢?&lt;br&gt;是不是觉得如果没有索引，这个事情根本无法完成?&lt;/p&gt;
&lt;h2 id=&#34;详解&#34;&gt;&lt;a href=&#34;#详解&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h2&gt;&lt;p&gt;​	在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。&lt;/p&gt;
&lt;p&gt;下图就是一种可能的索引方式示例:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220816211711261-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​				左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址&lt;/p&gt;
&lt;p&gt;​	为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到相应数据，从而快速的检索出符合条件的记录.&lt;/p&gt;
&lt;h2 id=&#34;优劣&#34;&gt;&lt;a href=&#34;#优劣&#34; class=&#34;headerlink&#34; title=&#34;优劣&#34;&gt;&lt;/a&gt;优劣&lt;/h2&gt;&lt;p&gt;优势：&lt;/p&gt;
&lt;p&gt;​	类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的IO成本&lt;/p&gt;
&lt;p&gt;​	 通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗&lt;/p&gt;
&lt;p&gt;劣势：&lt;/p&gt;
&lt;p&gt;​	1、实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间&lt;/p&gt;
&lt;p&gt;​	2、虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，&lt;br&gt;都会调整因为更新所带来的键值变化后的索引信息&lt;br&gt;​	3、索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引&lt;/p&gt;
&lt;h2 id=&#34;分类&#34;&gt;&lt;a href=&#34;#分类&#34; class=&#34;headerlink&#34; title=&#34;分类&#34;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单值索引：即一个索引只包含单个列，一个表可以有多个单列索引&lt;/li&gt;
&lt;li&gt;唯一索引：索引列的值必须唯一，但允许有空值&lt;/li&gt;
&lt;li&gt;复合索引：即一个索引包含多个列&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本语法&#34;&gt;&lt;a href=&#34;#基本语法&#34; class=&#34;headerlink&#34; title=&#34;基本语法&#34;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CREATE	 [UNIQUE ]INDEX  	indexName   	ON   	mytable(columnname(length));&lt;/li&gt;
&lt;li&gt;CREATE	 [UNIQUE ]INDEX      indexName   	ON   	mytable(columnname(length));&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;	&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DROP 	INDEX 	[indexName] 	ON 	mytable;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHOW 		INDEX 		FROM 		table_name\G&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用ALTER命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;MySQL索引结构&#34;&gt;&lt;a href=&#34;#MySQL索引结构&#34; class=&#34;headerlink&#34; title=&#34;MySQL索引结构&#34;&gt;&lt;/a&gt;MySQL索引结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;BTree索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hash索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full-Text全文索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R-Tree索引&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;哪些情况下需要创建索引&#34;&gt;&lt;a href=&#34;#哪些情况下需要创建索引&#34; class=&#34;headerlink&#34; title=&#34;哪些情况下需要创建索引&#34;&gt;&lt;/a&gt;哪些情况下需要创建索引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;主键自动建立唯一索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;频繁作为查询条件的字段应该创建索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询中与其它表关联的字段，外键关系建立索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;频繁更新的字段不适合创建索引or因为每次更新不单单是更新了记录还会更新索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where条件里用不到的字段不创建索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单键&amp;#x2F;组合索引的选择问题，who?(在高并发下倾向创建组合索引)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询中统计或者分组字段&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;哪些情况不建索引&#34;&gt;&lt;a href=&#34;#哪些情况不建索引&#34; class=&#34;headerlink&#34; title=&#34;哪些情况不建索引&#34;&gt;&lt;/a&gt;哪些情况不建索引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;表记录太少&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;经常增删改的表&lt;/p&gt;
&lt;p&gt; Why:提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据重复且分布平均的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;性能分析&#34;&gt;&lt;a href=&#34;#性能分析&#34; class=&#34;headerlink&#34; title=&#34;性能分析&#34;&gt;&lt;/a&gt;性能分析&lt;/h1&gt;&lt;h2 id=&#34;MySql-Query-Optimizer&#34;&gt;&lt;a href=&#34;#MySql-Query-Optimizer&#34; class=&#34;headerlink&#34; title=&#34;MySql Query Optimizer&#34;&gt;&lt;/a&gt;MySql Query Optimizer&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mysql中有专门负责优化SELECT语句的优化器模块，主要功能:通过计算分析系统中收集到的统计信息，为客户端请求的Query提供他认为最优的执行计划（他认为最优的数据检索方式，但不见得是DBA认为是最优的，这部分最耗费时间)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当客户端向MySQL请求一条Query，命令解析器模块完成请求分类，区别出是SELECT并转发给MySQLQuery Optimizer时，MySQL Query Optimizer首先会对整条Query进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对Query中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析Query 中的Hint信息(如果有），看显示Hint信息是否可以完全确定该Query 的执行计划。如果没有Hint 或Hint 信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据Query进行写相应的计算分析，然后再得出最后的执行计划。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;MysQL常见瓶颈&#34;&gt;&lt;a href=&#34;#MysQL常见瓶颈&#34; class=&#34;headerlink&#34; title=&#34;MysQL常见瓶颈&#34;&gt;&lt;/a&gt;MysQL常见瓶颈&lt;/h2&gt;&lt;p&gt;CPU:CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候&lt;/p&gt;
&lt;p&gt;IO:磁盘I&amp;#x2F;O瓶颈发生在装入数据远大于内存容量的时候&lt;/p&gt;
&lt;p&gt;服务器硬件的性能瓶颈: top,free, iostat和vmstat来查看系统的性能状态&lt;/p&gt;
&lt;h2 id=&#34;Explain&#34;&gt;&lt;a href=&#34;#Explain&#34; class=&#34;headerlink&#34; title=&#34;Explain&#34;&gt;&lt;/a&gt;Explain&lt;/h2&gt;&lt;h3 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h3&gt;&lt;p&gt;​	查看执行计划&lt;/p&gt;
&lt;p&gt;​	使用EXPLAIN关键字可以模拟优化器执行sQL查询语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈&lt;/p&gt;
&lt;h3 id=&#34;作用范围&#34;&gt;&lt;a href=&#34;#作用范围&#34; class=&#34;headerlink&#34; title=&#34;作用范围&#34;&gt;&lt;/a&gt;作用范围&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;表的读取顺序   __ id__&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据读取操作的操作类型哪些索引可以使用  &lt;strong&gt;possible key&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;哪些索引被实际使用表之间的引用  &lt;strong&gt;key&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每张表有多少行被优化器查询    &lt;strong&gt;rows&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表之间的引用 &lt;strong&gt;table&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每张表有多少行被优化     &lt;strong&gt;rows&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用方法&#34;&gt;&lt;a href=&#34;#使用方法&#34; class=&#34;headerlink&#34; title=&#34;使用方法&#34;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;explain + SQL语句&lt;/p&gt;
&lt;h3 id=&#34;执行计划包含的信息&#34;&gt;&lt;a href=&#34;#执行计划包含的信息&#34; class=&#34;headerlink&#34; title=&#34;执行计划包含的信息&#34;&gt;&lt;/a&gt;执行计划包含的信息&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2V4cGxhaW4tb3V0cHV0Lmh0bWwjZXhwbGFpbl9zZWxlY3RfdHlwZQ==&#34;&gt;MySQL ：： MySQL 5.7 参考手册 ：： 8.8.2 EXPLAIN 输出格式&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;列&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;JSON名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;select_id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;标识符SELECT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#select_type&#34;&gt;select type&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;类型SELECT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;table&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;table_name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输出行的表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;partitions&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;partitions&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;匹配的分区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2V4cGxhaW4tb3V0cHV0Lmh0bWwjZXhwbGFpbi1qb2luLXR5cGVz&#34;&gt;type&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;access_type&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;联接頰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;possible keys&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;possible_keys&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;可供选择的可能索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;key&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;key&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;实际选择的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;key 丄en&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;key_length&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;所选密钥的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;与索引相比的列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;rows&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;rows&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;要检查的行的估计值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;filtered&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;filtered&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;符合某条件的记录数百分比。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Extra&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;None&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;附加信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;字段解释&#34;&gt;&lt;a href=&#34;#字段解释&#34; class=&#34;headerlink&#34; title=&#34;字段解释&#34;&gt;&lt;/a&gt;字段解释&lt;/h3&gt;&lt;h4 id=&#34;id&#34;&gt;&lt;a href=&#34;#id&#34; class=&#34;headerlink&#34; title=&#34;id&#34;&gt;&lt;/a&gt;id&lt;/h4&gt;&lt;p&gt;id相同，执行顺序由上至下&lt;/p&gt;
&lt;p&gt;id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行&lt;/p&gt;
&lt;p&gt;null 为结果集的整合&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id如果相同，可以认为是一组，从上往下顺序执行;&lt;/li&gt;
&lt;li&gt;id值越大，优先级越高，越先执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;select-type&#34;&gt;&lt;a href=&#34;#select-type&#34; class=&#34;headerlink&#34; title=&#34;select_type&#34;&gt;&lt;/a&gt;select_type&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;#select_type&#34;&gt;见下方附录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;type&#34;&gt;&lt;a href=&#34;#type&#34; class=&#34;headerlink&#34; title=&#34;type&#34;&gt;&lt;/a&gt;type&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;性能&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;system&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;表只有一行记录&amp;#x3D;&amp;#x3D;(等于系统表),这是const类型的特例，平时不会出现，可忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;const&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td&gt;表示该表最多有一个匹配行通过索引一次就找到了,const用于比较primary key或者&lt;br/&gt;unique索引。因为只匹配一行数据，所以很快如将主键置于where列表中&lt;br/&gt;MySQL就能将该查询转换为一个常量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eq_ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;唯一性索引&amp;#x3D;&amp;#x3D;扫描，对于&amp;#x3D;&amp;#x3D;每个索引键，表中只有一条记录与之匹配&amp;#x3D;&amp;#x3D;。常见于主键或唯一索引扫描&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;非唯一性索引&amp;#x3D;&amp;#x3D;扫描，&amp;#x3D;&amp;#x3D;返回匹配某个单独值的所有行&amp;#x3D;&amp;#x3D;.&lt;br/&gt;本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而， &lt;br/&gt;它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;range&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;只检索给定范围的行,使用一个索引来选择行&amp;#x3D;&amp;#x3D;。key列显示使用了哪个索引，&lt;br/&gt;一般就是在你的where语句中出现了between、&amp;lt;、&amp;gt;、in等的查询  &lt;br/&gt;这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，&lt;br/&gt;而结束语另一点，不用扫描全部索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;index&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td&gt;联接类型与 &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_all&#34;&gt;&lt;code&gt;ALL&lt;/code&gt;&lt;/a&gt; 相同，只是扫描了索引树。这以两种方式发生：&lt;code&gt;index&lt;/code&gt; &lt;br/&gt;Full Index Scan，index与ALL区别为index类型只遍历索引树。这通常比ALL快，&lt;br/&gt;因为索引文件通常比数据文件小。(也就是说虽然all和Index都是读全表，&lt;br/&gt;但index是从索引中读取的，而all是从硬盘中读的)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;all&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td&gt;将遍历全表以找到匹配的行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;font color=red&gt;一般来说，得保证查询至少要达到 range 级别，最好能达到 ref &lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;possible-key&#34;&gt;&lt;a href=&#34;#possible-key&#34; class=&#34;headerlink&#34; title=&#34;possible_key&#34;&gt;&lt;/a&gt;possible_key&lt;/h4&gt;&lt;p&gt;显示可能应用在这张表中的索引，一个或多个&lt;/p&gt;
&lt;p&gt;查询涉及到的字段上若存在索引，则该索引将被列出，&lt;font color=red&gt;但不一定被查询实际使用&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;key&#34;&gt;&lt;a href=&#34;#key&#34; class=&#34;headerlink&#34; title=&#34;key&#34;&gt;&lt;/a&gt;key&lt;/h4&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;实际使用的索引。如果为NULL，则没有使用索引&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;查询中若使用了覆盖索引，则该索引仅出现在key列表中&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;引申：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;覆盖索引：简单来说就是你查询到的字段数目和你建立索引所对应字段相同且数量相同&lt;/p&gt;
&lt;h4 id=&#34;key-len&#34;&gt;&lt;a href=&#34;#key-len&#34; class=&#34;headerlink&#34; title=&#34;key_len&#34;&gt;&lt;/a&gt;key_len&lt;/h4&gt;&lt;p&gt;​	表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，&amp;#x3D;&amp;#x3D;长度越短越好&amp;#x3D;&amp;#x3D;&lt;br&gt;​	key_len显示的值为索刳字段的最大可能长度，&lt;font color=red&gt;并非实际使用长度&lt;/font&gt;，即key_len是根据表定义计算而得，不是通过表内检索出的&lt;/p&gt;
&lt;h4 id=&#34;ref&#34;&gt;&lt;a href=&#34;#ref&#34; class=&#34;headerlink&#34; title=&#34;ref&#34;&gt;&lt;/a&gt;ref&lt;/h4&gt;&lt;p&gt;​	显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值&lt;/p&gt;
&lt;h4 id=&#34;rows&#34;&gt;&lt;a href=&#34;#rows&#34; class=&#34;headerlink&#34; title=&#34;rows&#34;&gt;&lt;/a&gt;rows&lt;/h4&gt;&lt;p&gt;​	根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数&lt;/p&gt;
&lt;h4 id=&#34;extra&#34;&gt;&lt;a href=&#34;#extra&#34; class=&#34;headerlink&#34; title=&#34;extra&#34;&gt;&lt;/a&gt;extra&lt;/h4&gt;&lt;p&gt;包含不适合在其他列中显示但十分重要的额外信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using filesort(&lt;font color=red&gt;索引本来就是排序和查找,这种等于只用了一半,而且排序本身就比较耗时&lt;/font&gt;)&lt;/p&gt;
&lt;p&gt;  说明mysq|会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。&lt;/p&gt;
&lt;p&gt;  MySQL中无法利用索引完成的排序操作称为“文件排序”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using temporay(&lt;font color=red&gt;严重影响性能&lt;/font&gt;)&lt;/p&gt;
&lt;p&gt;  使了用临时表保存中间结果,MySQL在对查询结果排序时使用临时表。&lt;/p&gt;
&lt;p&gt;  常见于排序orderby和分组查询groupby。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using  index&lt;/p&gt;
&lt;p&gt;  表示相应的select操作中使用了覆盖索引(Covering Index)，避免访问了表的数据行，效率不错!如果同时出现&lt;/p&gt;
&lt;p&gt;  using where，表明索引被用来执行索引键值的查找;&lt;/p&gt;
&lt;p&gt;  如果没有同时出现using where，表明索引用来读取数据而非执行查找动作。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;&amp;#x3D;&amp;#x3D;覆盖索引(Covering Index)&amp;#x3D;&amp;#x3D;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  理解方式：就是select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可 以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件,换句话说查询列要被所建的索引覆盖。&lt;/p&gt;
&lt;p&gt;  &amp;#x3D;&amp;#x3D;&lt;strong&gt;注意:&lt;/strong&gt;&amp;#x3D;&amp;#x3D;&lt;br&gt;  如果要使用覆盖索引，一-定 要注意select列表中只取出需要的列，不可   **&amp;#x3D;&amp;#x3D;Select   &lt;em&gt;&amp;#x3D;&amp;#x3D;&lt;/em&gt;*&lt;br&gt;  因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;索引优化&#34;&gt;&lt;a href=&#34;#索引优化&#34; class=&#34;headerlink&#34; title=&#34;索引优化&#34;&gt;&lt;/a&gt;索引优化&lt;/h1&gt;&lt;h2 id=&#34;单表优化&#34;&gt;&lt;a href=&#34;#单表优化&#34; class=&#34;headerlink&#34; title=&#34;单表优化&#34;&gt;&lt;/a&gt;单表优化&lt;/h2&gt;&lt;p&gt;准备&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE TABLE IF NOT EXISTS article (
id INT(10) UNSIGNED NOT NULL PRIMARY KEY auto_INCREMENT,
author_id INT(10) UNSIGNED NOT NULL,
category_id INT(10) UNSIGNED NOT NULL,
views INT(10) UNSIGNED NOT NULL,
comments INT(10) UNSIGNED NOT NULL,
title VARBINARY(255) NOT NULL,
content TEXT NOT NULL
);

INSERT INTO article ( author_id ,category_id ,views ,comments ,title,content ) VALUES
(1, 1, 1, 1,&amp;#39;1&amp;#39;,&amp;#39;1&amp;#39;),
(2,2, 2,2, &amp;#39;2&amp;#39;,&amp;#39;2&amp;#39;),
(1, 1,3,3, &amp;#39;3&amp;#39;,&amp;#39;3&amp;#39;);


-- ----------------------------------------------
-- 01
explain select id,author_id
from article 
where category_id =1 and comments &amp;gt;1 
order by views desc 
limit 1\G
-- 01-1
create index idx_id_article_ccv on article(category_id,comments,views);
drop index idx_id_article_ccv on article;
create index idx_id_article_cv on article(category_id,views);
drop index idx_id_article_cv on article;
-- 查看之后发现因为 &amp;gt; 1 的原因导致我们索引失效 我们直接放弃这个字段从三个改为两个字段的索引，性能更优
explain select id,author_id from article where category_id =1 and comments &amp;gt;1  order by views desc limit 1 ;
explain select id,author_id from article where category_id =1 and comments =1  order by views desc limit 1 ;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;双表优化&#34;&gt;&lt;a href=&#34;#双表优化&#34; class=&#34;headerlink&#34; title=&#34;双表优化&#34;&gt;&lt;/a&gt;双表优化&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE TABLE IF NOT EXISTS `class`(
`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
`card`INT(10) UNSIGNED NOT NULL,
 PRIMARY KEY (id)
 );
create TABLE IF NOT EXISTS `book` (
`bookid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
`card`  INT(10) UNSIGNED NOT NULL,
 PRIMARY KEY (bookid)
);
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
-- ----------------------------------------------
select * from book;
select * from class;

-- type=all
show index from book;
show index from class;

create index idx_card on  book(card);
create index idx_card on  class(card);
drop index idx_card on  book;
drop index idx_card on  class;

explain select * from  book left join class on class.card=book.card;

explain select * from  class left join book on class.card=book.card;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;左连接&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818221306990-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;结果显示，在没有用索引的状况下我们的索引类型均为ALL。&lt;/p&gt;
&lt;p&gt;因为是&amp;#x3D;&amp;#x3D;左连接&amp;#x3D;&amp;#x3D;的缘故我们的&amp;#x3D;&amp;#x3D;左表是根据右表搜索行&amp;#x3D;&amp;#x3D;的，&amp;#x3D;&amp;#x3D;左边一定都有&amp;#x3D;&amp;#x3D;,所以&amp;#x3D;&amp;#x3D;右边是我们的关键点&amp;#x3D;&amp;#x3D;，一定需要建立索引。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818221831192-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;可以看到第二行的type变为了ref，rows 也变成了优化比较明显。这是由左连接特性决定的。LEFT  JOIN条件用于确定如何从右表搜索行。所以右边是我们的关键点,-定需要建立索引。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同理可证右连接&lt;/strong&gt;&lt;br&gt;因为RIGHTJOIN条件用于确定如何从左表搜索行，右边一定都有,所以左边是我们的关键点，一定需要建立索引。&lt;/p&gt;
&lt;h2 id=&#34;三表优化&#34;&gt;&lt;a href=&#34;#三表优化&#34; class=&#34;headerlink&#34; title=&#34;三表优化&#34;&gt;&lt;/a&gt;三表优化&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE TABLE IF NOT EXISTS phone(
    phoneid INT(10) UNSIGNED NOT null AUTO_INCREMENT,
    card INT(10) UNSIGNED NOT NULL,
    PRIMARY KEY (phoneid)
) ENGINE = INNODB;
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
-- --------===============================================
select * from phone;

alter table class add index X (card); 
alter table phone add index Y (card); 
drop index X on class;
drop index Y on phone;

explain select * from class left join book on class.card = book.card join phone on book.card = phone.card;

show index from phone;
show index from book;
show index from class;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初始结果&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818222159241-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;优化后&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818222905733-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;后2行的type都是ref且总rows优化很好效果不错。&lt;/p&gt;
&lt;p&gt;因此索引最好设置在需要经常查询的字段中&lt;/p&gt;
&lt;p&gt;解释：不论是class还是phone都是需要book.card来确定而且在第二个join中还需要全部扫描book所以尽管他是一个与class的左连接，理论上要给book建立一个索引，但是因为phone的关系我们倒不如给phone和class做索引，减少可以减少的，book反正要全表无所谓。&lt;/p&gt;
&lt;p&gt;总结就是&amp;#x3D;&amp;#x3D;小结果集推动大结果集&amp;#x3D;&amp;#x3D;就可以起到优化作用&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;&lt;a href=&#34;#结论&#34; class=&#34;headerlink&#34; title=&#34;[结论]&#34;&gt;&lt;/a&gt;[结论]&lt;/h2&gt;&lt;p&gt;Join语句的优化&lt;/p&gt;
&lt;p&gt;尽可能减少Join语句中的NestedL oop的循环总次数;“ 永远用小结果集驱动大的结果集”。&lt;/p&gt;
&lt;p&gt;优先优化Nested L oop的内层循环;&lt;/p&gt;
&lt;p&gt;保证Join语句中被驱动表上Join条件 字段已经被索引;&lt;/p&gt;
&lt;p&gt;当无法保证被驱动表的Join条件字段被索引且内存资源充足的前提下，不要太吝惜JoinBuffer的设置;&lt;/p&gt;
&lt;h1 id=&#34;索引失效&#34;&gt;&lt;a href=&#34;#索引失效&#34; class=&#34;headerlink&#34; title=&#34;索引失效&#34;&gt;&lt;/a&gt;索引失效&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;全值匹配我最爱&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;​	每个索引字段都存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;最佳左前缀法则(&amp;#x3D;&amp;#x3D;where条件&amp;#x3D;&amp;#x3D;)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;​	如果索引了多列(&amp;#x3D;&amp;#x3D;3个及以上&amp;#x3D;&amp;#x3D;)，要遵守最左前缀法则。指的是查询&amp;#x3D;&amp;#x3D;从索引的最左前列开始&amp;#x3D;&amp;#x3D;并且&amp;#x3D;&amp;#x3D;不跳过索引中的列&amp;#x3D;&amp;#x3D;。&lt;br&gt;​	简单来说就是&amp;#x3D;&amp;#x3D;每个字段的带头大哥不能丢，中间兄弟不能断&amp;#x3D;&amp;#x3D; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;drop table if exists tbl_user;
create table if not exists tbl_user(
id int(10) primary key auto_increment,
name varchar(20) not null,
age int(10),
    sex int(2) check( sex in (1,2)),
email varchar(20)
);
-- 添加测试数据
delete from  tbl_user;
insert into tbl_user(name,age,sex,email) values 
(&amp;#39;aa11aa&amp;#39;,12,1,&amp;#39;123@qq.com&amp;#39;),(&amp;#39;aa22aa&amp;#39;,22,2,&amp;#39;456@qq.com&amp;#39;),(&amp;#39;aa33aa&amp;#39;,32,2,&amp;#39;789@qq.com&amp;#39;);
(&amp;#39;aa11aa&amp;#39;,22,1,&amp;#39;123@qq.com&amp;#39;),(&amp;#39;aa22aa&amp;#39;,22,1,&amp;#39;456@qq.com&amp;#39;),(&amp;#39;aa33aa&amp;#39;,32,1,&amp;#39;789@qq.com&amp;#39;);
-- 走索引且key_len越来越长
explain select * from tbl_user where name = &amp;#39;aa11aa&amp;#39;;
explain select * from tbl_user where name = &amp;#39;aa11aa&amp;#39; and age = 11;
explain select * from tbl_user where name = &amp;#39;aa11aa&amp;#39; and age = 11 and sex = 1;

-- 走索引
explain select * from tbl_user where name = &amp;#39;aa11aa&amp;#39;  and sex = 1;
-- 不走索引带头大哥没了
explain select * from tbl_user where age = 11 and sex = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;p&gt;不在索引列上做任何操作(计算、函数(自动or手动)类型转换)，会导致索引失效而转向全表扫描 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存储引擎 &amp;#x3D;&amp;#x3D;不能使用索引中范围条件&amp;#x3D;&amp;#x3D;&lt;font color=red&gt;右边的列&lt;/font&gt; (&amp;#x3D;&amp;#x3D;自己是最后一个&amp;#x3D;&amp;#x3D;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 范围条件
alter table tbl_user add index idx_tbl_user_age_sex_email (age,sex,email);
-- 全部走了索引
explain select age from tbl_user ;
explain select age,sex from tbl_user ;
explain select age,sex,email from tbl_user ;
-- 部分走了索引
explain select age from tbl_user where sex &amp;gt; 1;
explain select age,sex from tbl_user where sex &amp;gt; 1;
explain select age,sex,email from tbl_user where sex &amp;gt; 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;尽量使用覆盖索引&amp;#x3D;&amp;#x3D;(只访问索引的查询(索引列和查询列一致))， 减少 select  *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mysql在&amp;#x3D;&amp;#x3D;使用不等于(!&amp;#x3D;或者&amp;lt;&amp;gt; )&amp;#x3D;&amp;#x3D;的时候&amp;#x3D;&amp;#x3D;无法使用索引&amp;#x3D;&amp;#x3D;会导致&amp;#x3D;&amp;#x3D;全表扫描团&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is null ,is not null也无法使用索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;like&amp;#x3D;&amp;#x3D;以通配符开头(&amp;#x3D;&amp;#x3D;’%abc…)mysq|&amp;#x3D;&amp;#x3D;索引失效&amp;#x3D;&amp;#x3D;会变成全表扫描的操作。(&amp;#x3D;&amp;#x3D;放右边可以&amp;#x3D;&amp;#x3D;)&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;问题:解决like’%字符串%’时索引不被使用的方法??&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 建立索引
alter table tbl_user add index idx_tbl_user_name_age (name,age);

-- 测试
select * from tbl_user;
-- 走索引
explain select id from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select name from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select age from tbl_user where name like &amp;#39;%aa%&amp;#39;;
-- 走索引
explain select id,name from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select id,name,age from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select name,age from tbl_user where name like &amp;#39;%aa%&amp;#39;;
-- 不走索引
explain select * from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select id,name,email from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select id,name,age,email from tbl_user where name like &amp;#39;%aa%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;字符串不加单引号索引失效&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;少用or，用它来连接时会索引失效&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;面试题&#34;&gt;&lt;a href=&#34;#面试题&#34; class=&#34;headerlink&#34; title=&#34;面试题&#34;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- indexc1234
select * from test03 where c1=&amp;#39;a1&amp;#39; and c2=&amp;#39;a2&amp;#39; and c5=&amp;#39;a5&amp;#39; order by c3,c2;
select * from test03 where c1=&amp;#39;a1&amp;#39; and c5=&amp;#39;a5&amp;#39; order by c3,c2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;这两种SQL的区别在哪？&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;都走了索引，但是在第2条SQL会产生文件的内排序，为什么呢？这是因为本来应该是自动的顺序排列，即c1,c2,c3…..默认，但是我们写了 order by 所以产生了内排。但是同样第1条SQL为什么没有呢？因为我们在where 条件中使用了他让他固定成了一个常量 constant ，即 c3虽然一直在动，但是c2已经固定没有了排序的过程所以不会产生内排的步骤&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;drop table if exists t1;
create table t1(
    id int(10) primary key auto_increment,
    c1 int(10),
    c2 int(10),
    c3 int(10),
    c4 int(10),
    c5 int(10)
);
insert into t1(c1,c2,c3,c4,c5) values
(1,1,1,1,1)
(2,2,2,2,2),
(3,3,3,3,3),
(4,4,4,4,4),
(5,5,5,5,5);

alter table t1 add index idx_c1234 (c1,c2,c3,c4); 
explain select * from t1 where c1 =1 and c2 = 1 and c4 = 1 ORDER BY c3,c2 desc;
explain select * from t1 where c1 =1 and c4 = 1 ORDER BY c3,c2 ;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818213253106-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;em&gt;&lt;strong&gt;同理论证gourp by&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分组之前比排序，可能会产生临时表的产生&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818213434892-1660960902143.png&#34; class=&#34;&#34;&gt;




&lt;h2 id=&#34;建议&#34;&gt;&lt;a href=&#34;#建议&#34; class=&#34;headerlink&#34; title=&#34;建议&#34;&gt;&lt;/a&gt;建议&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于单键索引，尽量选择针对当前query过滤性更好的索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在选择组合索引的时候，尽量选择可以能够包含当前query中的where字句中更多字段的索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;口诀&#34;&gt;&lt;a href=&#34;#口诀&#34; class=&#34;headerlink&#34; title=&#34;口诀&#34;&gt;&lt;/a&gt;口诀&lt;/h2&gt;&lt;p&gt;全值匹配我最爱	，最左前缀要遵守;&lt;/p&gt;
&lt;p&gt;帶头大哥不能死	，中间兄弟不能断;&lt;/p&gt;
&lt;p&gt;索引列上少计算	，范围之后全失效;&lt;/p&gt;
&lt;p&gt;LIKE百分写最右	，覆盖索引不写星;&lt;/p&gt;
&lt;p&gt;不等空值还有or     ，索引失效要少用;&lt;/p&gt;
&lt;p&gt;VAR的引号不可丢，SQL高级也不难 !&lt;/p&gt;
&lt;div name=查询截取分析 &gt;


&lt;h1 id=&#34;查询截取分析&#34;&gt;&lt;a href=&#34;#查询截取分析&#34; class=&#34;headerlink&#34; title=&#34;查询截取分析&#34;&gt;&lt;/a&gt;查询截取分析&lt;/h1&gt;&lt;h2 id=&#34;内容：&#34;&gt;&lt;a href=&#34;#内容：&#34; class=&#34;headerlink&#34; title=&#34;内容：&#34;&gt;&lt;/a&gt;内容：&lt;/h2&gt;&lt;p&gt;​	查询优化&lt;/p&gt;
&lt;p&gt;​	慢查询日志&lt;/p&gt;
&lt;p&gt;​	批量数据脚本&lt;/p&gt;
&lt;p&gt;​	show profile&lt;/p&gt;
&lt;p&gt;​	全局查询日志&lt;/p&gt;
&lt;h2 id=&#34;工作一般流程-分析过程&#34;&gt;&lt;a href=&#34;#工作一般流程-分析过程&#34; class=&#34;headerlink&#34; title=&#34;工作一般流程(分析过程)&#34;&gt;&lt;/a&gt;工作一般流程(分析过程)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;观察，至少跑1天，看看生产的慢SQL情况。&lt;/li&gt;
&lt;li&gt;开启慢查询日志，设置阙值，比如超过5秒钟的就是慢SQL，并将它抓取出来。&lt;/li&gt;
&lt;li&gt;explain+慢SQL分析&lt;/li&gt;
&lt;li&gt;show profile&lt;/li&gt;
&lt;li&gt;运维经理or DBA，进行SQL数据库服务器的参数调优。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;总结&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;慢查询的开启并捕获&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;explain+慢SQL分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;show profile查询SQL在Mysql服务器里面的执行细节和生命周期情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL数据库服务器的参数调优。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;查询优化&#34;&gt;&lt;a href=&#34;#查询优化&#34; class=&#34;headerlink&#34; title=&#34;查询优化&#34;&gt;&lt;/a&gt;查询优化&lt;/h2&gt;&lt;h3 id=&#34;永远小表驱动大表-即小的数据集驱动大的数据集&#34;&gt;&lt;a href=&#34;#永远小表驱动大表-即小的数据集驱动大的数据集&#34; class=&#34;headerlink&#34; title=&#34;永远小表驱动大表,即小的数据集驱动大的数据集&#34;&gt;&lt;/a&gt;永远小表驱动大表,即小的数据集驱动大的数据集&lt;/h3&gt;&lt;p&gt;小表驱动大表，类似嵌套循环 Nested Loop&lt;/p&gt;
&lt;h4 id=&#34;Case-1：&#34;&gt;&lt;a href=&#34;#Case-1：&#34; class=&#34;headerlink&#34; title=&#34;Case 1：&#34;&gt;&lt;/a&gt;Case 1：&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;for(int i =5;;)&amp;#123;
    for(int j = 1000;;)&amp;#123;
        
    &amp;#125;
&amp;#125;
for(int i =1000;;)&amp;#123;
    for(int j = 5;;)&amp;#123;
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;两个简单的 for循环，但是在SQL中我们就应该选择 第一个循环而不是第二个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小的循环在外层,表连接需要5次&lt;/li&gt;
&lt;li&gt;大的循环在外层,表连接需要1000次,浪费数据库资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总结:&lt;/strong&gt; 小表驱动大表的主要目的是通过减少表连接创建的次数,加快查询速度.&lt;/p&gt;
&lt;h4 id=&#34;Case-2&#34;&gt;&lt;a href=&#34;#Case-2&#34; class=&#34;headerlink&#34; title=&#34;Case 2&#34;&gt;&lt;/a&gt;Case 2&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select * from A where  id in (select id from B)
-- 等价于
for select id from B
for select * from A where A.id = B.id
for（B)&amp;#123;
    for(A)&amp;#123;
        A.id=B.id
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当B表的数据集小于A表的数据集时，用in优于exists。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select * from A where exists (select 1 from B where B.id = A.id)
-- 等价于
for select* from A
for select * from B where B.id = A.id
for（A)&amp;#123;
    for(B)&amp;#123;
        A.id=B.id
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当A表的数据集小于B表的数据集时，用exists优于in。&lt;/p&gt;
&lt;p&gt;注意:A表与B表的ID字段应建立索引。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EXISTS&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：SELECT .….. FROM table WHERE EXISTS (subquery)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	该语法可以理解为。&amp;#x3D;&amp;#x3D;将主查询的数据，放到子查询中做条件验证，根据验证结果（TRUE或FALSE)来决定主查询的数据结果是否得以保留&amp;#x3D;&amp;#x3D;。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提示&lt;ol&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;EXSTS (stbuey)只返回TRUE或FALSE，因此子查询中的 SELECT *也可以是 SELECT  1或是 SELECT ‘X’。官方说法是：实际执行时会忽略SELECT清单，因此没有区别&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;EXSTS子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比，如果担忧效率问题，可进行实际检验以确定是否有效率问题。&lt;/li&gt;
&lt;li&gt;EXISTS子查询往往也可以用条件表达式、其他子查询或者JOIN来替代，&amp;#x3D;&amp;#x3D;何种最优需要具体问题具体分析&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为排序使用索引OrdeBy优化&#34;&gt;&lt;a href=&#34;#为排序使用索引OrdeBy优化&#34; class=&#34;headerlink&#34; title=&#34;为排序使用索引OrdeBy优化&#34;&gt;&lt;/a&gt;为排序使用索引OrdeBy优化&lt;/h3&gt;&lt;p&gt;MySQL支持&amp;#x3D;&amp;#x3D;二种方式的排序&amp;#x3D;&amp;#x3D;，&amp;#x3D;&amp;#x3D;FileSort&amp;#x3D;&amp;#x3D;和&amp;#x3D;&amp;#x3D;Index&amp;#x3D;&amp;#x3D;，&amp;#x3D;&amp;#x3D;Index效率高。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;它指MySQL扫描索引本身完成排序。FileSort方式效率较低。&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;ORDER BY满足两情况，会使用Index方式排序：&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ORDER BY语句使用索引最左前列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用where 字句与Order By字句条件列组合满足&amp;#x3D;&amp;#x3D;索引最左前列&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建议：&lt;/p&gt;
&lt;p&gt;​	尽量使用Index方式排序，避免使用FileSort方式排序尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;如果不在索引列上，filesort有两种算法：mysql就要启动双路排序和单路排序&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;em&gt;双路排序&lt;/em&gt;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL 4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据，&lt;br&gt;读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出&lt;/p&gt;
&lt;p&gt;从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段。&lt;/p&gt;
&lt;p&gt;取一批数据， 要对磁盘进行了两次扫描，众所周知，I\O是很耗时的，所以在mysql4.1之后，出现了第二种改进的算法，就是单路排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;em&gt;单路排序&lt;/em&gt;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序I0,但是它会使用更多的空间，因为它把每一行都保存在内存中了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结论：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;由于单路是后出的，总体而言好过双路!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;引申出来的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	在sort_buffer中，方法B比方法A要多占用很多空间，因为方法B是把所有字段都取出,所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并〉，排完再取取 sort_buffer 容量大小，再排……从而多次I&amp;#x2F;O。本来想省一次I&amp;#x2F;O操作，反而导致了大量的I&amp;#x2F;O操作，反而得不偿失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优化策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增大sort_buffer_size参数的设置&lt;/li&gt;
&lt;li&gt;增大max_length_for_sort_data参数的设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=red&gt;提高Order By的速度&lt;/font&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Order by时select是一个大忌只Query需要的字段，这点非常重要。在这里的影响是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当Query的字段共小总和小于max_length_for_sort_data而且排序字段不是TEXTIBLOB类型时，会用改进后的算法——单路排序，否则用老算法——多路排序。&lt;/li&gt;
&lt;li&gt;两种算法的数据都有可能超出sort_buffer的容量，超出之后，会创建tmp文件进行合并排序，导致多次IO，但是用单路排序算法的风险会更大一些,所以要提高sort_buffer_size.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尝试提高sort_buffer_size&lt;br&gt; 不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尝试提高max_length_for_sort_data&lt;br&gt; 提高这个参数，会增加用改进算法的概率。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I&amp;#x2F;O活动和低的处理器使用率.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Group-By&#34;&gt;&lt;a href=&#34;#Group-By&#34; class=&#34;headerlink&#34; title=&#34;Group By&#34;&gt;&lt;/a&gt;Group By&lt;/h3&gt;&lt;p&gt; group by实质是&amp;#x3D;&amp;#x3D;先排序&amp;#x3D;&amp;#x3D;后进行&amp;#x3D;&amp;#x3D;分组&amp;#x3D;&amp;#x3D;，&amp;#x3D;&amp;#x3D;遵照索引建的最佳左前缀&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;当无法使用索引列，增大max_length_for_sort_data参数的设置+增大sort_buffer_size参数的设置&lt;/p&gt;
&lt;p&gt;where高于having，能写在where限定的条件就不要去having限定了。&lt;/p&gt;
&lt;p&gt;其余均和Order by相同&lt;/p&gt;
&lt;h2 id=&#34;慢查询日志&#34;&gt;&lt;a href=&#34;#慢查询日志&#34; class=&#34;headerlink&#34; title=&#34;慢查询日志&#34;&gt;&lt;/a&gt;慢查询日志&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句, 具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10秒以上的语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由他来查看哪些SQL超出了我们的最大忍耐时间值，比如一条sql执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒的sql，结合之前explain进行全面分析。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;操作说明&#34;&gt;&lt;a href=&#34;#操作说明&#34; class=&#34;headerlink&#34; title=&#34;操作说明&#34;&gt;&lt;/a&gt;操作说明&lt;/h3&gt;&lt;p&gt;&lt;font color=red&gt;默认情况下，MySQL数据库没有开启慢查询日志&lt;/font&gt;，需要我们手动来设置这个参数。&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;当然，如果不是调优需要的话，一般不建议启动该参数&lt;/font&gt;，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件&lt;/p&gt;
&lt;h3 id=&#34;查看是否开启及开启&#34;&gt;&lt;a href=&#34;#查看是否开启及开启&#34; class=&#34;headerlink&#34; title=&#34;查看是否开启及开启&#34;&gt;&lt;/a&gt;查看是否开启及开启&lt;/h3&gt;&lt;p&gt;默认：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show variables like &amp;#39;%slow_query_log%&amp;#39;; -- OFF关闭
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819170427373-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;开启&lt;/p&gt;
&lt;p&gt;开启了慢查询日志只对当前数据库生效，如果MySQL重启后则会失效。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;set global slow_query_log=1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要永久生效，就必须修改配置文件my.cnf（其它系统变量也是如此)&lt;/p&gt;
&lt;p&gt;修改my.cnf文件，[mysqld]下增加或修改参数&lt;br&gt;slow_query_log和slow_query_log_file后，然后重启MySQL服务器。也即将如下两行配置进my.cnf文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;slow_query_log =1
slow_query_log_file=/var/lib/mysqlslow-slow.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关于慢查询的参数slow_query_log_file，它指定慢查询日志文件的存放路径，&lt;font color=red&gt;系统默认会给一个缺省的文件host_name-slow.log&lt;/font&gt;(如果没有指定参数slow_query_log_file的话)&lt;/p&gt;
&lt;h3 id=&#34;那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢&#34;&gt;&lt;a href=&#34;#那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢&#34; class=&#34;headerlink&#34; title=&#34;那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢?&#34;&gt;&lt;/a&gt;那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢?&lt;/h3&gt;&lt;p&gt;这个是由参数long_query_time控制，默认情况下long_query_time的值为10秒，命令:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHoW VARIABLES LIKE &amp;#39;long_query_time%;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819171026557-1660960902143.png&#34; class=&#34;&#34;&gt;



&lt;p&gt;可以使用命令修改，也可以在my.cnf参数里面修改。&lt;/p&gt;
&lt;p&gt;假如运行时间正好等于long_query_time的情况，并不会被记录下来。也就是说，在mysql源码里是&lt;font color=red&gt;判断大于long_query_time，而非大于等于&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;Case&#34;&gt;&lt;a href=&#34;#Case&#34; class=&#34;headerlink&#34; title=&#34;Case&#34;&gt;&lt;/a&gt;Case&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;查看当前多少秒算慢&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHOW VARIABLES LIKE &amp;#39;long_query_time%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;设置慢的阙值时间&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;set global long_query_time=3;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819171344450-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;为什么设置后看不出变化?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要&amp;#x3D;&amp;#x3D;重新连接或新开一个会话&amp;#x3D;&amp;#x3D;才能看到修改值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHow VARIABLES LIKE &amp;#39;long _query_time%&amp;#39;;

show global variables like &amp;#39;long_query_time&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;记录慢SQL并后续分析R&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select sleep(4);-- 睡4s
-- 查看日志
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819171955968-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;查询当前系统中有多少条慢查询记录冒R&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show global status like &amp;#39;%Slow_queries%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819172043683-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;配置版&#34;&gt;&lt;a href=&#34;#配置版&#34; class=&#34;headerlink&#34; title=&#34;配置版&#34;&gt;&lt;/a&gt;配置版&lt;/h3&gt;&lt;p&gt;【mysqld】下配置:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 开启查询日志
slow_query_log=1;
# 日志地址
slow_query_log_file=/var/lib/mysql/atguigu-slow.log
# 最大的查询时间，超过就算是慢查询
long_query_time=3;
# 日志输出
log_output=FILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;日志分析工具—mysqldumpslow&#34;&gt;&lt;a href=&#34;#日志分析工具—mysqldumpslow&#34; class=&#34;headerlink&#34; title=&#34;日志分析工具—mysqldumpslow&#34;&gt;&lt;/a&gt;日志分析工具—mysqldumpslow&lt;/h3&gt;&lt;p&gt;​	在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow &lt;/p&gt;
&lt;p&gt;查看mysqldumpslow的帮助信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;mysqldumpslow --help
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;常用参数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;注解&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是表示按照何种方式排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;访问次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;l&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;锁定时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;r&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;返回记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;t&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查询时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;al&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均锁定时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ar&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均返回记录数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;at&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均查询时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;t&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;即为返回前面多少条的数据;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;g&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;后边搭配一个正则匹配模式，大小写不敏感的;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;得到返回记录集最多的10个SQL
mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log

得到访问次数最多的10个SQL
mysqldumpslow -s c -t 10 /var/lib/mysql/atguigu-slow.log

得到按照时间排序的前10条里面含有左连接的查询语句
mysqldumpslow -s t -t 10 -g &amp;quot;left join&amp;quot;lar/lib/mysql/atguigu-slow.log

另外建议在使用这些命令时结合|和more使用，否则有可能出现爆屏情况
mysqldumpslow -s r -t 10 /ar/lib/mysql/atguigu-slow.log | more
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;批量数据脚本&#34;&gt;&lt;a href=&#34;#批量数据脚本&#34; class=&#34;headerlink&#34; title=&#34;批量数据脚本&#34;&gt;&lt;/a&gt;批量数据脚本&lt;/h2&gt;&lt;p&gt;1.建表(dept,emp)&lt;/p&gt;
&lt;p&gt;2.设置参数log_bin_trust_function_creatorst&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 创建函数，假如报错:This function has none of DETERMINISTIC

-- 由于开启过慢查询日志，因为我们开启了bin-log,我们就必须为我们的function指定一个参数。
show variables like &amp;#39;log_bin_trust_function_creators&amp;#39;;
set global log_bin_trust_function_creators=1;
-- 这样添加了参数以后，如果mysqld重启，上述参数又会消失，永久方法:
I
windows下my.ini[mysqld]加上log_bin_trust_function_creators=1
linux下letc/my.cnf 下my.cnf[mysqld]加上log_bin_trust_function_creators=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.创建函数,保证每条数据都不同&lt;/p&gt;
&lt;p&gt;随机产生字符串&lt;/p&gt;
&lt;p&gt;随机产生部门编号&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;DELIMITER $$
CREATE FUNCTION rand_string(n lNT) RETURNS VARCHAR(255）
BEGIN
    DECLARE chars_str VARCHAR(100) DEFAULT &amp;#39;abcdefghijlklmnoparstuvwxyABCDEFJHIJKLMNOPQRSTUWWXYZ&amp;#39;;
    DECLARE return_str VARCHAR(255) DEFAULT &amp;#39;&amp;#39; ;
    DECLARE i INT DEFAULT 0;
    WHILE i &amp;lt; n DO
        SET return_str =CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1);
        SET i =i+ 1;
    END WHILE;
    RETURN return_str;
END
$$
DFLIMITER ;
                               
delimiter $$
CREATE FUNCTLON rand_num( )RETURNS INT(5)
BEGIN
    DECLARE i int default 0;
    SET i = FLOOR(100+RAND()*10);
    RETURN i;
END 
delimiter $$
DFLIMITER ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.创建存储过程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;创建往emp表中插入数据的存储过程
DELIMITER $$
CREATE PROCEDURE insert_emp(IN START INT(10),IN max_num INT(10))
BEGIN
    DECLARE i INT DEFAULT 0;
    #set autocomnit = 0 把autocommit设置成0
    SET autocommit =0;
    REPEAT
    SET i=i+ 1;
    INSERT INTo emp(empno，ename , job ,mgr ,hiredate ,sal ,comm ,deptno ) values((SEAR+i) ,rand_string(6), &amp;#39;sAESLsy&amp;#39;,0001,now(),1000,0,10);
    UNTIL i = max_num;
    END REPEAT;
    COMMIT;
END 
$$
DFLIMITER ;

创建往dept表中插入数据的存储过程
DFLIMITER $$
CREATE PROCEDURE insert_dept(IN START INT(10),IN max_num lNT(10))
BEGIN
    DECLARE i lNT DEFAULT 0;
    SET autocommit = 0;
    REPEAT
    SETi= i+1;
    INSERT INTO dept (deptno ,dname,loc ) VALUES((START+i) ,rand_string(10),rand_string(8);
    UNTIL i = max_num;
    END REPEAT;COMMIT;
END $$
DFLIMITER ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.调用存储过程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;call insert_emp(10001,50000);
call inser_dept(100,10);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Show-profile&#34;&gt;&lt;a href=&#34;#Show-profile&#34; class=&#34;headerlink&#34; title=&#34;Show profile&#34;&gt;&lt;/a&gt;Show profile&lt;/h2&gt;&lt;p&gt;是什么:是mysql提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量&lt;/p&gt;
&lt;p&gt;官网: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Rldi5teXNxbC5jb20vZG9jL3JlZm1hbi81LjUvZW4vc2hvdy1wcm9maWxlLmh0bWw=&#34;&gt;http://dev.mysql.com/doc/refman/5.5/en/show-profile.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，参数处于关闭状态，并保存最近15次的运行结果&lt;/p&gt;
&lt;p&gt;分析步骤&lt;/p&gt;
&lt;p&gt;1.是否支持，看看当前的mysql版本是否支持&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show variables like &amp;#39;profiling&amp;#39;;
-- 默认是关闭，使用前需要开启
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.开启功能，默认是关闭，使用前需要开启&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;set profiling=on;
show variables like &amp;#39;profiling&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.运行SQL&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select * from emp;

select * from emp e join dept d on e.deptno =d.deptno;

select * from emp group by id%10 limit 1500;

select * from emp group by id%20 order by 5;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.查看结果，show profiles;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show profiles;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819180736190-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;5.诊断SQL， &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show profile cpu,block io for query 3;-- 最后数字是上一步前面的SQL的Id;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;常用参数&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ALL&lt;/td&gt;
&lt;td&gt;显示所有的开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;BLOCK IO&lt;/td&gt;
&lt;td&gt;显示块IO相关开销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONTEXT SWITCHES&lt;/td&gt;
&lt;td&gt;上下文切换相关开销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CPU&lt;/td&gt;
&lt;td&gt;显示CPU相关开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;IPC&lt;/td&gt;
&lt;td&gt;显示发送和接收相关开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MEMORY&lt;/td&gt;
&lt;td&gt;显示内存相关开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PAGE FAULTS&lt;/td&gt;
&lt;td&gt;显示页面错误相关开销信息|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SOURCE&lt;/td&gt;
&lt;td&gt;显示和Source_function，Source_file，Source_line相关的开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SWAPS&lt;/td&gt;
&lt;td&gt;显示交换次数相关开销的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819182050124-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;6.日常开发需要注意的结论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;converting HEAP to MyISAM     查询结果太大，内存都不够用了往磁盘上搬了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating tmp table       创建临时表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拷贝数据到临时表&lt;/li&gt;
&lt;li&gt;用完再删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copying to tmp table on disk      把内存中临时表复制到磁盘，危险!! !&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;locked    (死锁)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;全局查询日志&#34;&gt;&lt;a href=&#34;#全局查询日志&#34; class=&#34;headerlink&#34; title=&#34;全局查询日志&#34;&gt;&lt;/a&gt;全局查询日志&lt;/h2&gt;&lt;p&gt;&lt;font color=red&gt;&lt;strong&gt;永远不要在生产环境开启这个功能&lt;/strong&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;配置启用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;#在mysql的my.cnf中，设置如下:
#开启
general_log=1
#记录日志文件的路径
general_log_file=/path/logfile
#输出格式
log_output=FILE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编码启用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 命令
set global general_log=1;
set global log_output=&amp;#39;TABLE&amp;#39;;

-- 此后，你所编写的sql语句，将会记录到mysql库里的general_log表，可以用下面的命令查看
select * from mysql.general_lpg;
&lt;/code&gt;&lt;/pre&gt;
&lt;div name=MySQL的锁机制&gt;


&lt;h1 id=&#34;MySQL锁机制&#34;&gt;&lt;a href=&#34;#MySQL锁机制&#34; class=&#34;headerlink&#34; title=&#34;MySQL锁机制&#34;&gt;&lt;/a&gt;MySQL锁机制&lt;/h1&gt;&lt;p&gt;概述：锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源〈如CPU、RAM、V&amp;#x2F;O等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。[&lt;/p&gt;
&lt;p&gt;打个比方，我们到淘宝上买一件商品，商品只有一件库存，这个时候如果还有另一个人买，那么如何解决是你买到还是另一个人买到的问题?&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819183900802-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;这里肯定要用到事务，我们先从库存表中取出物品数量，然后插入订单，付款后插入付款表信息，然后更新商品数量。在这个过程中，使用锁可以对有限的资源进行保护，解决隔离和并发的矛盾。&lt;/p&gt;
&lt;h2 id=&#34;锁的分类&#34;&gt;&lt;a href=&#34;#锁的分类&#34; class=&#34;headerlink&#34; title=&#34;锁的分类&#34;&gt;&lt;/a&gt;锁的分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从对数据操作的粒度分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表锁(偏读，解决幻读(一个事务中对数据添加、删除，并且多次查询，每次结果不都相同))&lt;/li&gt;
&lt;li&gt;行锁(偏写，解决重复读(一个事务中对一条数据多次修改，并且多次查询，每次结果不都相同))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从对数据操作的类型（读\写)分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;读锁(共享锁)&amp;#x3D;&amp;#x3D;：针对同一份数据，多个读操作可以同时进行而不会互相影响。&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;写锁(排它锁)&amp;#x3D;&amp;#x3D;：当前写操作没有完成前，它会阻断其他写锁和读锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;读锁-案例介绍&#34;&gt;&lt;a href=&#34;#读锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;读锁(案例介绍)&#34;&gt;&lt;/a&gt;读锁(案例介绍)&lt;/h2&gt;&lt;p&gt;准备：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create table mylock(
id int not null primary key auto_increment,
name varchar(20)
)engine myisam;

insert into mylock(name) values(&amp;#39;a&amp;#39;);
insert into mylock(name) values(&amp;#39;b&amp;#39;);
insert into mylock(name) values(&amp;#39;c&amp;#39;);
insert into mylock(name) values(&amp;#39;d&amp;#39;);
insert into mylock(name) values(&amp;#39;e&amp;#39;);
select * from mylock;

CREATE TABLE `book` ( 
    `bookid` int(10) unsigned NOT NULL AUTO_INCREMENT,
    `card` int(10) unsigned NOT NULL,
    PRIMARY KEY (`bookid`),
    KEY `idx_card` (`card`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
insert into book(card) values(1);
insert into book(card) values(2);
insert into book(card) values(3);
insert into book(card) values(4);
insert into book(card) values(5);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 手动添加表锁
-- 语法：lock table Table_1_Name  read/write,Table_2_name read/write,..;
lock table mylock read ;

-- 查看锁
show open tables;

-- 释放锁
unlock tables;
    
select * from mylock;	
-- 读锁没有释放之前这个回话只能读取这个读锁表，其他回话可以查询或者更新未锁定的表
-- 其他回话插入或者更新表的时候会进入阻塞状态，直至锁的释放
update mylock set name = &amp;#39;aa&amp;#39; where id =1;
select * from book;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;写锁-案例介绍&#34;&gt;&lt;a href=&#34;#写锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;写锁(案例介绍)&#34;&gt;&lt;/a&gt;写锁(案例介绍)&lt;/h2&gt;&lt;p&gt;Session 1(产生锁)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;lock table mylock write;

select * from mylock; --ok

update mylock set name =&amp;#39;aa&amp;#39; where  id =1; -- ok

select * from book;
/*
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &amp;#39;uplock tables&amp;#39; at line 1
*/

unlock tables; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Session 2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt; select * from mylock; -- block 阻塞住了 ,直至锁的释放才看到了
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;读写结论&#34;&gt;&lt;a href=&#34;#读写结论&#34; class=&#34;headerlink&#34; title=&#34;读写结论&#34;&gt;&lt;/a&gt;读写结论&lt;/h2&gt;&lt;p&gt;MyISAM在执行查询语句〈SELECT)前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。&lt;/p&gt;
&lt;p&gt;MySQL的表级锁有两种模式:&lt;/p&gt;
&lt;p&gt;​	表共享读锁(Table Read Lock)&lt;/p&gt;
&lt;p&gt;​	表独享读锁(Table Write Lock)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;lock_type&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;是否共享&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;读锁&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;写锁&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;读锁&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;写锁&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;结论:&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;结合上表，所以对MyISAM表进行操作，会有以下情况:&lt;/p&gt;
&lt;p&gt;1、对MyISAM表的读操作〈加读锁)，不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。&lt;/p&gt;
&lt;p&gt;2、对MyISAM表的写操作（加写锁)，会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;strong&gt;简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞&lt;/strong&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;表锁-案例介绍&#34;&gt;&lt;a href=&#34;#表锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;表锁(案例介绍)&#34;&gt;&lt;/a&gt;表锁(案例介绍)&lt;/h2&gt;&lt;p&gt;【如何分析表锁定】&lt;br&gt;可以通过检查table_locks_waited和table_locks_immedlate状态变量来分析系统上的表锁定:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show status like &amp;#39;table%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819205444832-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;这里有两个状态变量记录MySQL内部表级锁定的情况，两个变量说明如下:&lt;/p&gt;
&lt;p&gt;&lt;font color=blue&gt;T&lt;strong&gt;able_locks_immediate:产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=blue&gt;&lt;strong&gt;Table_locks_waited:出现表级锁定争用而发生等待的次数(不能立即获取锁的次数，每等待一次锁值加1),&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;此值高则说明存在着较严重的表级锁争用情况;&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;strong&gt;此外，&lt;u&gt;&lt;em&gt;&lt;strong&gt;Myisam&lt;/strong&gt;&lt;/em&gt;&lt;/u&gt;的读写锁调度是写优先，这也是&lt;u&gt;&lt;em&gt;&lt;strong&gt;myisam&lt;/strong&gt;&lt;/em&gt;&lt;/u&gt;不适合做写为主表的引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;行锁-案例介绍&#34;&gt;&lt;a href=&#34;#行锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;行锁(案例介绍)&#34;&gt;&lt;/a&gt;行锁(案例介绍)&lt;/h2&gt;&lt;h3 id=&#34;特点&#34;&gt;&lt;a href=&#34;#特点&#34; class=&#34;headerlink&#34; title=&#34;特点&#34;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;​	偏向InnoDB存储引擎，开销大，加锁慢;会出现死锁;锁定粒度最小，发生锁冲突的概率最低,并发度也最高。&lt;/p&gt;
&lt;p&gt;​	InnoDB与MyISAM的最大不同有两点:&lt;/p&gt;
&lt;p&gt;​	一、是支持事务（TRANSACTION);&lt;/p&gt;
&lt;p&gt;​	二、是采用了行级锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;事务知识复习&#34;&gt;&lt;a href=&#34;#事务知识复习&#34; class=&#34;headerlink&#34; title=&#34;事务知识复习&#34;&gt;&lt;/a&gt;事务知识复习&lt;/h3&gt;&lt;h4 id=&#34;四大特性&#34;&gt;&lt;a href=&#34;#四大特性&#34; class=&#34;headerlink&#34; title=&#34;四大特性&#34;&gt;&lt;/a&gt;四大特性&lt;/h4&gt;&lt;p&gt;事务是由一组SQL语句组成的逻辑处理单元，事务具有以下4个属性，通常简称为事务的ACID属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;原子性（Atomicity)&lt;/font&gt;﹔事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;一致性（Consistent)&lt;/font&gt;:在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性;事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;隔离性（lsolation)&lt;/font&gt;:数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;持久性（Durable)&lt;/font&gt;:事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;并发带来的问题&#34;&gt;&lt;a href=&#34;#并发带来的问题&#34; class=&#34;headerlink&#34; title=&#34;并发带来的问题&#34;&gt;&lt;/a&gt;并发带来的问题&lt;/h4&gt;&lt;p&gt;更新丢失(Lost Update)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题――最后的更新覆盖了由其他事务所做的更新。&lt;br&gt;例如，两个程序员修改同一java文件。每程序员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改。&lt;br&gt;如果在一个程序员完成并提交事务之前，另一个程序员不能访问同一文件，则可避免此问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;脏读(Dirty Reads)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说就是 读了未提交的，此时事务级别在最低，改善方法就是提高级别即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不可重复读(Non-Repeatable Reads)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说就是在一个事务中多次读取某些数据，数据的条数没有变，但是数据却变了。&lt;/p&gt;
&lt;p&gt;重在修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;幻读(Phantom Reads)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说就是在一个事务中多次读取某些数据，数据的条数变了&lt;/p&gt;
&lt;p&gt;重在添加、删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;事务的隔离级别&#34;&gt;&lt;a href=&#34;#事务的隔离级别&#34; class=&#34;headerlink&#34; title=&#34;事务的隔离级别&#34;&gt;&lt;/a&gt;事务的隔离级别&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819211429410-1660960902143.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;面试题-1&#34;&gt;&lt;a href=&#34;#面试题-1&#34; class=&#34;headerlink&#34; title=&#34;面试题&#34;&gt;&lt;/a&gt;面试题&lt;/h4&gt;&lt;p&gt;不可重复读和幻读的区别？如何解决？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	他们都是在一个事务中对某些数据进行多次读取，但是不可重复读的问题重在多次读取的数据不都一致；幻读重在多次读取确得到不一样数据量的数据&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;​	重复读加行数&lt;/p&gt;
&lt;p&gt;​	幻读加表锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;案例分析&#34;&gt;&lt;a href=&#34;#案例分析&#34; class=&#34;headerlink&#34; title=&#34;案例分析&#34;&gt;&lt;/a&gt;案例分析&lt;/h3&gt;&lt;p&gt;准备&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create table test_innodb_lock (
a int(11),
b varchar(16)
)engine=innodb;I

insert into test_innodb_lock values(1,&amp;#39;b2&amp;#39;);
insert into test_innodb_lock values(3,&amp;#39;3&amp;#39;);
insert into test_innodb_lock values(4,&amp;#39;4000&amp;#39;);
insert into test_innodb_lock values(5,&amp;#39;5000&amp;#39;);
insert into test_innodb_lock values(6,&amp;#39;6000&amp;#39;);
insert into test_innodb_lock values(7,&amp;#39;7000&amp;#39;);
insert into test_innodb_lock values(8,&amp;#39;80O0&amp;#39;);
insert into test_innodb_lock values(9,&amp;#39;9000&amp;#39;);
insert into test_innodb_lock values(10,&amp;#39;b1&amp;#39;);

create index test_innodb_a_ind  on test_innodb_lock(a);
create index test_innodb_b_ind  on test_innodb_lock(b);
-- 打开两个会话 并且都关闭自动提交
set autocommit=0;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;行锁演示&#34;&gt;&lt;a href=&#34;#行锁演示&#34; class=&#34;headerlink&#34; title=&#34;行锁演示&#34;&gt;&lt;/a&gt;行锁演示&lt;/h4&gt;&lt;table  border=&#34;1px solid red;&#34; &gt;
    &lt;tr &gt;
        &lt;th&gt;Session 1&lt;/th&gt;
        &lt;th&gt;Session 2&lt;/th&gt;
        &lt;th&gt;explain  &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th style=&#34;text-align:center; &#34; colspan=&#39;3&#39;&gt;case 1&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819233537212.png&#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                关闭 Session 1 的自动提交
            &lt;/p&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819230937872.png&#34;/&gt;&lt;br/&gt;
            &lt;p&gt;
                关闭 Session 2 的自动提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
             &lt;p style=&#34;text-align:center; &#34;&gt;
                目的是:模拟高并发的情况下事务的处理情况，就好比一个SQL在修改但是没又被提交
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                在Innodb引擎作用下默认行锁，可以自动锁住我们当行数据保证数据的准确性
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; style=&#34;text-align:center;&#34;  &gt;case 2&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819234521630.png&#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 修改a=4的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819233807979.png &#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 无法查询到原有数据
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p&gt;
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34;  style=&#34;text-align:center;&#34; &gt;case 3&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819234824459.png&#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 提交事务
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819234803742.png &#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 提交事务()
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;&gt;
                Session 2 这里也可以当做是清除之前数据库累计事务
            &lt;/p&gt;
            &lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
               如果不提交，我们的Session 2 还是原来的数据
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; style=&#34;text-align:center;&#34; &gt;case 4&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235205871.png &#34;/&gt;
            &lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 修改a=4的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235132716.png&#34;/&gt;&lt;br/&gt;            
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 修改a=9的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                两个 Session 操作不同的数据，互补影响，充分的体现了行锁的作用
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; style=&#34;text-align:center;&#34; &gt;case 5&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820093552303.png &#34;/&gt;
            &lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 修改a=1的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820093614653.png&#34;/&gt;&lt;br/&gt;            
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 修改a=1的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                两个 Session 操作相同的数据，互相影响
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session2 在 Session1 没有提交之前，直接处于阻塞状态
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; style=&#34;text-align:center;&#34; &gt;case 5&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235205871.png &#34;/&gt;
            &lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 修改a=4的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235132716.png&#34;/&gt;&lt;br/&gt;            
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 修改a=9的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                两个 Session 操作不同的数据，互补影响，充分的体现了行锁的作用
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;






&lt;h4 id=&#34;索引失效导致行锁变成表锁&#34;&gt;&lt;a href=&#34;#索引失效导致行锁变成表锁&#34; class=&#34;headerlink&#34; title=&#34;索引失效导致行锁变成表锁&#34;&gt;&lt;/a&gt;索引失效导致行锁变成表锁&lt;/h4&gt;&lt;table  border=&#34;1px solid red;&#34; &gt;
    &lt;tr &gt;
        &lt;th&gt;Session 1&lt;/th&gt;
        &lt;th&gt;Session 2&lt;/th&gt;
        &lt;th&gt;explain  &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000724418.png&#34;/&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000816926.png&#34;/&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                我们在最开始准备阶段，就创建了关于a ,b 的索引(单索引)
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                我们之前说过，在where上不要进行隐式转换，这样会导致索引失效
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                从这个例子中我们左边进行了隐式操作，导致索引失效，第二个 Session
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                直接进入到了阻塞状态，&lt;a font=&#34;color:&#39;red&#39;&#34;&gt;表明了我们的索引失效让行锁变成了表锁&lt;/a&gt;
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000801075.png&#34;/&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000837775.png&#34;/&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
               上面的例子中直至Session 1 回话结束，这时候释放了锁
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
              我们的 Session 2 才接受到了锁，进入了表
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
               这个例子充分的表明了，我们在操作中一定要注意索引失效的问题
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                他有可能会导致我们效率更低
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;





&lt;h4 id=&#34;间隙锁的危害&#34;&gt;&lt;a href=&#34;#间隙锁的危害&#34; class=&#34;headerlink&#34; title=&#34;间隙锁的危害&#34;&gt;&lt;/a&gt;间隙锁的危害&lt;/h4&gt;&lt;p&gt;【概念】&lt;/p&gt;
&lt;p&gt;​	当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁;对于键值在条件范围内但并木存在的记录，叫做“间隙（GAP)”，&lt;/p&gt;
&lt;p&gt;InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。&lt;/p&gt;
&lt;p&gt;【危害】&lt;br&gt;因为Query执行过程中通过过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，&lt;br&gt;而造成在锁定的时候无&lt;br&gt;法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- session 1
update t1 set b=&amp;#39;12312&amp;#39; where a&amp;gt;1 and a&amp;lt;8;

-- session 2
insert into t1 values(5,&amp;#39;asda&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220820001444127-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;明显的看到在Session 1执行结束之后，执行Session 2 即使他们操作的不是同一行也会因为间隙锁的缘故锁定这一行，即使不存在也是如此，直到commit之后 Session 2才反应&lt;/p&gt;
&lt;h4 id=&#34;如何锁定一行&#34;&gt;&lt;a href=&#34;#如何锁定一行&#34; class=&#34;headerlink&#34; title=&#34;如何锁定一行&#34;&gt;&lt;/a&gt;如何锁定一行&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;/*
select xoo.... for update锁定某一行后，其它的操作会械阻塞，直到锁定行的会话提交commit
*/
begin;
select * from test_innodb_lock where a = 8 for update;
commit;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;案例结论&#34;&gt;&lt;a href=&#34;#案例结论&#34; class=&#34;headerlink&#34; title=&#34;案例结论&#34;&gt;&lt;/a&gt;案例结论&lt;/h3&gt;&lt;p&gt;​	Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。当系统并发量较高的时候，Innodb的整体性能和MyIlSAM相比就会有比较明显的优势了。&lt;/p&gt;
&lt;p&gt;​	但是，Innodb的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差。(索引失效行锁变表锁)&lt;/p&gt;
&lt;h3 id=&#34;如何分析行锁定&#34;&gt;&lt;a href=&#34;#如何分析行锁定&#34; class=&#34;headerlink&#34; title=&#34;如何分析行锁定&#34;&gt;&lt;/a&gt;如何分析行锁定&lt;/h3&gt;&lt;p&gt;通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show status like &amp;#39;innodb_row_lock%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220820002244586-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;对各个状态量的说明如下:&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_current_waits：当前正在等待锁定的数量;&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_time：队系统启动到现在锁定总时间长度;&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_time_avg：每次等待所花平均时间;&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间;&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_waits：系统启动后到现在总共等待的次数;&lt;/p&gt;
&lt;p&gt;对于这5个状态变量，比较重要的主要是&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;Innodb_row_lock_time_avg（等待平均时长）&lt;/font&gt;，&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;Innodb_row_lock_waits（等待总次数)&lt;/font&gt; ，&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;lnnodb_row_lock_time（等待总时长）这三项&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;尤其是当等踌次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待&lt;br&gt;然后根据分析结果着手指定优化计划。&lt;/p&gt;
&lt;h3 id=&#34;优化意见&#34;&gt;&lt;a href=&#34;#优化意见&#34; class=&#34;headerlink&#34; title=&#34;优化意见&#34;&gt;&lt;/a&gt;优化意见&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合理设计索引，尽量缩小锁的范围&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽可能较少检索条件，避免间隙锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽量控制事务大小，减少锁定资源量和时间长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽可能低级别事务隔离&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;页锁-案例介绍&#34;&gt;&lt;a href=&#34;#页锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;页锁(案例介绍)&#34;&gt;&lt;/a&gt;页锁(案例介绍)&lt;/h2&gt;&lt;p&gt;开销和加锁时间界于表锁和行锁之间;会出现死锁;锁定粒度界于表锁和行锁之间，并发度一般。&lt;/p&gt;
&lt;h1 id=&#34;附录&#34;&gt;&lt;a href=&#34;#附录&#34; class=&#34;headerlink&#34; title=&#34;附录&#34;&gt;&lt;/a&gt;附录&lt;/h1&gt;&lt;div name=select_type&gt;
    &lt;a style=&#34;color:red; &#34; &gt;Select_Type&lt;/a&gt;
&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;select_type价值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;JSON名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SIMPLE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;简单选择（不使用UNION或子查询）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PRIMARY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;多层子查询中最外层选择&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UNION&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;联盟中的第二个或稍后的SELECT语句&lt;br/&gt;若第二个SELECT出现在UNION之后，则被标记为UNION;&lt;br/&gt;若UNION包含在FROM子句的子查询中,外层SELECT将被标记为:DERIVED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DEPENDENT UNION&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;dependent(true)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;UNION中的第二个或更高版本的SELECT语句，依赖于外部查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UNION RESULT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;union_result&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;从UNION表获取结果的SELECT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SUBQUERY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;子查询中的第一个SELECT&lt;br/&gt;在SELECT 或 WHERE列表中包含了子查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DEPENDENT SUBQUERY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;dependent(true)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;子查询中的第一个SELECT,依赖于外部查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DERIVED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;派生表&lt;br/&gt;在FROM列表中包含的子查询被标记为DERIVED(衍生)MySQL会递归执行这些子查询，把结果放在临时表里。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MATERIALIZED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;material!zed_from_subquery&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;实例化子查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UNCACHEABLE SU3QUERY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;cacheable(false)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无法缓存其结果并且必须为外部查询的每一行重新计算其结果的子查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UNCACHEABLE UNION&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;cacheable(false)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;在属于不可缓存子查询的UNION中的第二个或更高版本选择（请参见UNCACHEABLE SUBQUERY）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
        <category term="MySQL" />
        <category term="数据库" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/MybatisPlus/</id>
        <title>MybatisPlus</title>
        <link rel="alternate" href="http://example.com/2022/10/07/MybatisPlus/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==&#34;&gt;MyBatis-Plus (opens new window)&lt;/span&gt;（简称 MP）是一个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubXliYXRpcy5vcmcvbXliYXRpcy0zLw==&#34;&gt;MyBatis (opens new window)&lt;/span&gt;的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愿景&lt;/p&gt;
&lt;p&gt;我们的愿景是成为 MyBatis 最好的搭档，就像 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vaW1nL2NvbnRyYS5qcGc=&#34;&gt;魂斗罗&lt;/span&gt; 中的 1P、2P，基友搭配，效率翻倍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;特性&#34;&gt;&lt;a href=&#34;#特性&#34; class=&#34;headerlink&#34; title=&#34;特性&#34;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无侵入&lt;/strong&gt;：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;损耗小&lt;/strong&gt;：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强大的 CRUD 操作&lt;/strong&gt;：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 Lambda 形式调用&lt;/strong&gt;：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持主键自动生成&lt;/strong&gt;：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 ActiveRecord 模式&lt;/strong&gt;：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持自定义全局通用操作&lt;/strong&gt;：支持全局通用方法注入（ Write once, use anywhere ）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置代码生成器&lt;/strong&gt;：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置分页插件&lt;/strong&gt;：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分页插件支持多种数据库&lt;/strong&gt;：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置性能分析插件&lt;/strong&gt;：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置全局拦截插件&lt;/strong&gt;：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支持数据库&#34;&gt;&lt;a href=&#34;#支持数据库&#34; class=&#34;headerlink&#34; title=&#34;支持数据库&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlOTQlQUYlRTYlOEMlODElRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTM=&#34;&gt;&lt;/span&gt;支持数据库&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;任何能使用 &lt;code&gt;MyBatis&lt;/code&gt; 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb&lt;/li&gt;
&lt;li&gt;达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;框架结构&#34;&gt;&lt;a href=&#34;#框架结构&#34; class=&#34;headerlink&#34; title=&#34;框架结构&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlQTElODYlRTYlOUUlQjYlRTclQkIlOTMlRTYlOUUlODQ=&#34;&gt;&lt;/span&gt;框架结构&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/MybatisPlus/mybatis-plus-framework.jpg&#34; class=&#34;&#34; title=&#34;framework&#34;&gt;



&lt;h1 id=&#34;快速使用&#34;&gt;&lt;a href=&#34;#快速使用&#34; class=&#34;headerlink&#34; title=&#34;快速使用&#34;&gt;&lt;/a&gt;快速使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用的mybatis 3.5之前版本，也就是官方的旧版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;初始化工程&#34;&gt;&lt;a href=&#34;#初始化工程&#34; class=&#34;headerlink&#34; title=&#34;初始化工程&#34;&gt;&lt;/a&gt;初始化工程&lt;/h2&gt;&lt;p&gt;创建一个空的 Spring Boot 工程（工程将以 H2 作为默认数据库进行演示）&lt;/p&gt;
&lt;p&gt;提示&lt;/p&gt;
&lt;p&gt;可以使用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v&#34;&gt;Spring Initializer (opens new window)&lt;/span&gt;快速初始化一个 Spring Boot 工程&lt;/p&gt;
&lt;h2 id=&#34;pom-添加依赖&#34;&gt;&lt;a href=&#34;#pom-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;pom 添加依赖&#34;&gt;&lt;/a&gt;&lt;code&gt;pom&lt;/code&gt; 添加依赖&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;        &amp;lt;!--模板引擎,也可使用freemarker--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.velocity&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;velocity-engine-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!--代码生成器 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-generator&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!--内嵌mybatis，不需要在添加--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;


        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.1.10&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.junit.vintage&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;junit-vintage-engine&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;逆向工程&#34;&gt;&lt;a href=&#34;#逆向工程&#34; class=&#34;headerlink&#34; title=&#34;逆向工程&#34;&gt;&lt;/a&gt;逆向工程&lt;/h2&gt;&lt;p&gt;测试用例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.baomidou.mybatisplus.core.toolkit.StringPool;
import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.InjectionConfig;
import com.baomidou.mybatisplus.generator.config.*;
import com.baomidou.mybatisplus.generator.config.po.TableInfo;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;


public class Generator &amp;#123;

    public static void main(String[] args) &amp;#123;
        //0自动生成
        AutoGenerator autoGenerator = new AutoGenerator();

        //1 数据源配置
        DataSourceConfig datasource = new DataSourceConfig();
        datasource.setUrl(&amp;quot;jdbc:mysql://127.0.0.1:3306/xhshixun?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai&amp;quot;);
        // dsc.setSchemaName(&amp;quot;public&amp;quot;);
        datasource.setDriverName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;);
        datasource.setUsername(&amp;quot;root&amp;quot;);
        datasource.setPassword(&amp;quot;root&amp;quot;);

        autoGenerator.setDataSource(datasource);

        // 2全局配置
        GlobalConfig gc = new GlobalConfig();
        /**
         * System.getProperty(key)
         * getProperty()这个方法是获取指定键指示的系统属性的。
         * 如果key不是系统属性本来系统自带的，需要用户自己设定采用。如果不设定，则为null
         */
        String projectPath = System.getProperty(&amp;quot;user.dir&amp;quot;);
        //与其等同  ||
        // String projectPath = &amp;quot;E:\\code\\java\\test&amp;quot;;

        //生成在那个目录下
        gc.setOutputDir(projectPath + &amp;quot;/src/main/java&amp;quot;);
        gc.setOpen(false);//生成之后打开目录？是在资源管理器中打开的
        gc.setAuthor(&amp;quot;zjj&amp;quot;);//作者
        gc.setFileOverride(true);//是否覆盖原来文件
        //gc.setMapperName(&amp;quot;%sDao&amp;quot;);//设置数据层接口名，%s指代模块名,默认是*Mapper
        gc.setMapperName(&amp;quot;%sMapper&amp;quot;);
        // ,,,其余自行探索
//        gc.setSwagger2(true);// 实体属性 Swagger2 注解
        autoGenerator.setGlobalConfig(gc);

        //3 包配置
        PackageConfig pc = new PackageConfig();
        //pc.setModuleName(null); //模块名
        pc.setParent(&amp;quot;com.aaa&amp;quot;);
        pc.setEntity(&amp;quot;pojo&amp;quot;);   //设置实体类包名
        pc.setMapper(&amp;quot;mapper&amp;quot;); //设置mapper层包名
        //,,,其余自行探索
        autoGenerator.setPackageInfo(pc);

        //4自定义配置
        // 如果模板引擎是 freemarker
        //String templatePath = &amp;quot;/templates/mapper.xml.ftl&amp;quot;;
        // 如果模板引擎是 velocity
        //String templatePath = &amp;quot;/templates/mapper.xml.vm&amp;quot;;
        String templatePath = &amp;quot;/templates/service.java.vm&amp;quot;;



        // 4自定义配置
        InjectionConfig cfg = new InjectionConfig() &amp;#123;
            @Override
            public void initMap() &amp;#123;
                // to do nothing
            &amp;#125;
        &amp;#125;;
        // 自定义输出配置
        List&amp;lt;FileOutConfig&amp;gt; focList = new ArrayList&amp;lt;&amp;gt;();
        // 自定义配置会被优先输出
        focList.add(new FileOutConfig(templatePath) &amp;#123;
            @Override
            public String outputFile(TableInfo tableInfo) &amp;#123;
                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！
                return projectPath + &amp;quot;/src/main/resources/mapper/&amp;quot; + pc.getModuleName()
                        + &amp;quot;/&amp;quot; + tableInfo.getEntityName() + &amp;quot;Mapper&amp;quot; + StringPool.DOT_XML;
            &amp;#125;
        &amp;#125;);
        cfg.setFileOutConfigList(focList);
        autoGenerator.setCfg(cfg);

        // 5配置模板
        TemplateConfig templateConfig = new TemplateConfig();

        // 配置自定义输出模板
        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别
        // templateConfig.setEntity(&amp;quot;templates/entity2.java&amp;quot;);
        // templateConfig.setService();
        // templateConfig.setController();

        templateConfig.setXml(null);
        autoGenerator.setTemplate(templateConfig);

        //提交配置
        autoGenerator.setPackageInfo(pc);


        //6策略设置
        StrategyConfig strategyConfig = new StrategyConfig();

        //strategyConfig.setInclude(&amp;quot;tbl_user&amp;quot;);//设置当前参与生成的表名，参数为可变参数
        strategyConfig.setTablePrefix(&amp;quot;tbl_&amp;quot;);//设置数据库表的前缀，模块名=数振库表名+前缀名

//        strategyConfig.setRestControllerStyle(true);//设置是否启用Rest风格
//        strategyConfig.setVersionFieldName(&amp;quot;version&amp;quot;);//设置乐观锁宁段名
//        strategyConfig.setLogicDelet  eFieldName(&amp;quot;deleted&amp;quot;);//设置逻辑删除字段将
//        strategyConfig.setEntityLombokModel(true);//设置是否启用Lombok
//        strategyConfig.setControllerMappingHyphenStyle(true); //url中驼峰转连字符

        autoGenerator.setStrategy(strategyConfig);

        //执行生成操作
        autoGenerator.execute();
    &amp;#125;

    @Test
    public void test()&amp;#123;
        //获取所有的属性
        Properties properties = System.getProperties();
        //为了看看系统的属性有几个，加了一个计数器
        int count = 0;
        //遍历所有的属性
        for (String key : properties.stringPropertyNames()) &amp;#123;
            System.out.println(key + &amp;quot;=&amp;quot; + properties.getProperty(key));
            count++;
            if (key.equalsIgnoreCase(&amp;quot;jdbc.drivers&amp;quot;))&amp;#123;
                System.out.println(&amp;quot;YES&amp;quot;);
                return ;
            &amp;#125;

        &amp;#125;
        System.out.println(count);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="框架" />
        <category term="ORM" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/Mybatis/</id>
        <title>Mybatis</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Mybatis/"/>
        <content type="html">&lt;h1 id=&#34;1-Mybatis入门&#34;&gt;&lt;a href=&#34;#1-Mybatis入门&#34; class=&#34;headerlink&#34; title=&#34;1 Mybatis入门&#34;&gt;&lt;/a&gt;1 Mybatis入门&lt;/h1&gt;&lt;p&gt;原生JDBC实现CURD的问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 编码繁琐&lt;br&gt;2 需要我们自己将结果集映射成对象&lt;br&gt;3 性能不太好  连接池 缓存&lt;br&gt;4 SQL语句和java代码的耦合度特别高&lt;br&gt;5 … …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MyBatis 本是Apache的一个开源项目iBatis, 2010年这个项目由Apache Software Foundation 迁移到了Google Code，且改名为MyBatis 。2013年11月迁移到GitHub。iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。&lt;br&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617191731748.png&#34; class=&#34;&#34; title=&#34;image-20220617191731748&#34;&gt;





&lt;h2 id=&#34;1-认识框架&#34;&gt;&lt;a href=&#34;#1-认识框架&#34; class=&#34;headerlink&#34; title=&#34;1 认识框架&#34;&gt;&lt;/a&gt;1 认识框架&lt;/h2&gt;&lt;p&gt;框架（Framework）是一个框子——指其约束性，也是一个架子——指其支撑性。是一个基本概念上的结构，用于去解决或者处理复杂的问题。框架这个广泛的定义使用的十分流行，尤其在软件概念。&lt;br&gt;框架( Framework )对于java来说,就是一系列为了解决特定问题而定义的一系列接口和实现类,在组织框架代码时,使用了一系列优秀的设计模式,使代码无论在性能上还是API操作上得到很大提升.框架可以看做是项目开发的半成品,基本的底层操作已经封装完毕,通过框架,程序员可以从底层代码中解脱出来,专注于业务逻辑的完成和性能的优化。框架规定了你的应用的体系结构。它定义了整体结构，类和对象的分割，各部分的主要责任，类和对象怎么协作，以及控制流程。框架预定义了这些设计参数，以便于应用设计者或实现者能集中精力于应用本身的特定细节。&lt;/p&gt;
&lt;p&gt;如果将开发完成的软件比作是一套已经装修完毕的新房，那框架就好比是一套已经修建好的毛坯房。用户直接购买毛坯房，建筑质量和户型合理有保证，还省去了自己建造房屋的时间，一举多得。&lt;br&gt;在开发过程是使用框架，同样可以保证减少开发时间、降低开发难度，并且还保证设计质量。好比和世界上最优秀的软件工程师是一个项目的，并且他们完成的还是基础、全局的工作。想想是不是很嗨的一件事情。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617191818381.png&#34; class=&#34;&#34; title=&#34;image-20220617191818381&#34;&gt;





&lt;p&gt;框架还有一个作用是约束。莎士比亚说,”一千个观众眼中有一千个哈姆雷特” 即仁者见仁,智者见智.说每个人都会对作品有不同的理解，每个人对待任何事物都有自己的看法，一千个人就有可能有一千种不同的看法1000人心中有1000个哈姆雷特。同样的技术解决同样的问题会产生不同流程和风格的解决方案，而采用一种框架其实就是限制用户必须使用其规定的方案来实现，&lt;strong&gt;可以降低程序员之间沟通以及日后维护的成本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常用的基于JavaEE的三大开源框架，已经从SSH、SSH2过渡到了SSM：SpringMVC、Spring、MyBatis &amp;gt;&amp;gt;&amp;gt; springBoot&lt;/p&gt;
&lt;p&gt;&lt;font face=&#34;微软雅黑&#34; size=6 color=#FF0000&gt;总之，框架是一个半成品，已经对基础的代码进行了封装并提供相应的API，开发者在使用框架是直接调用封装好的API可以省去很多代码编写，从而提高工作效率和开发速度。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-认识ORM&#34;&gt;&lt;a href=&#34;#2-认识ORM&#34; class=&#34;headerlink&#34; title=&#34;2 认识ORM&#34;&gt;&lt;/a&gt;2 认识ORM&lt;/h2&gt;&lt;p&gt;DBC的缺点：&lt;/p&gt;
&lt;p&gt;需要手动的完成面向对象的Java语言、面向关系的数据库之间数据的转换，代码繁琐无技术含量，影响了开发效率。&lt;/p&gt;
&lt;p&gt;如图所示，查询是需要手动的将结果集的列数据转换为Java对象的属性；而添加操作时需要手动将Java对象的属性转换为数据库表的列字段。&lt;/p&gt;
&lt;p&gt;关于面向对象的Java语言、面向关系的数据库之间数据的转换必须要做，问题在于这个转换是否可以不由开发者来做。可以的。ORM框架就是专门来做这个问题的，相当于在面向对象语言和关系数据库之间搭建一个桥梁。&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;ORM，Object-Relationl Mapping，对象关系映射，它的作用是在关系型数据库和对象之间作一个映射，这样我们在具体的操作数据库的时候，只要像平时操作对象一样操作它就可以了，ORM框架会根据映射完成对数据库的操作，就不需要再去和复杂的SQL语句打交道了&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192304044.png&#34; class=&#34;&#34; title=&#34;image-20220617192304044&#34;&gt;


&lt;p&gt;另外学习ORM必须知道两个概念：持久化、持久层&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是“持久化”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持久（Persistence），&lt;font color=#FF0000&gt;即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）&lt;/font&gt;。持久化的主要应用是将内存中的数据存储在关系型的数据库中，当然也可以存储在磁盘文件中、XML数据文件中等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是 “持久层”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持久层（Persistence Layer），即专注于实现数据持久化应用领域的某个特定系统的一个逻辑层面，将数据使用者和数据实体相关联。之前使用JDBC访问数据库的DAO层，后面采用MyBatis访问数据库的mapper层，就是持久层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mybatis是一持久层的款半自动的ORM映射框架&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-认识MyBatis&#34;&gt;&lt;a href=&#34;#3-认识MyBatis&#34; class=&#34;headerlink&#34; title=&#34;3 认识MyBatis&#34;&gt;&lt;/a&gt;3 认识MyBatis&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatis 本是Apache的一个开源项目iBatis, 2010年这个项目由Apache Software Foundation 迁移到了Google Code，且改名为MyBatis 。2013年11月迁移到GitHub。iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192446302.png&#34; class=&#34;&#34; title=&#34;image-20220617192446302&#34;&gt;

&lt;p&gt;精简解释：MyBatis是一个半自动ORM框架，其本质是对JDBC的封装。使用MyBatis重点需要程序员编写SQL命令，不需要写一行JDBC代码&lt;/p&gt;
&lt;h1 id=&#34;2-MyBatis初次使用&#34;&gt;&lt;a href=&#34;#2-MyBatis初次使用&#34; class=&#34;headerlink&#34; title=&#34;2 MyBatis初次使用&#34;&gt;&lt;/a&gt;2 MyBatis初次使用&lt;/h1&gt;&lt;h2 id=&#34;1-创建maven项目导入相关依赖&#34;&gt;&lt;a href=&#34;#1-创建maven项目导入相关依赖&#34; class=&#34;headerlink&#34; title=&#34;1 创建maven项目导入相关依赖&#34;&gt;&lt;/a&gt;1 创建maven项目导入相关依赖&lt;/h2&gt;&lt;p&gt;但凡是框架,使用都是分三步走&lt;/p&gt;
&lt;p&gt;1导入jar文件,maven&lt;/p&gt;
&lt;p&gt;2处理配置文件&lt;/p&gt;
&lt;p&gt;3开发业务代码&lt;/p&gt;
&lt;p&gt;先创建一个空项目,用于存放后面Mybatis相关项目模块&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192550409.png&#34; class=&#34;&#34; title=&#34;image-20220617192550409&#34;&gt;


&lt;p&gt;项目名为mybatisAll即可&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192555641.png&#34; class=&#34;&#34; title=&#34;image-20220617192555641&#34;&gt;




&lt;p&gt;这里不显示项目名 没关系,如果想看到项目名,可以close项目后,再次open即可&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192604832.png&#34; class=&#34;&#34; title=&#34;image-20220617192604832&#34;&gt;




&lt;p&gt;关闭项目&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192611548.png&#34; class=&#34;&#34; title=&#34;image-20220617192611548&#34;&gt;


&lt;p&gt;再次open&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192630884.png&#34; class=&#34;&#34; title=&#34;image-20220617192630884&#34;&gt;






&lt;p&gt;项目名就显示了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192636190.png&#34; class=&#34;&#34; title=&#34;image-20220617192636190&#34;&gt;


&lt;p&gt;接下来设置maven为我们自己安装的,不用idea自带的(当然用自带的也行)&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192641520.png&#34; class=&#34;&#34; title=&#34;image-20220617192641520&#34;&gt;



&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192647200.png&#34; class=&#34;&#34; title=&#34;image-20220617192647200&#34;&gt;


&lt;p&gt;在当前项目中创建模块&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192652567.png&#34; class=&#34;&#34; title=&#34;image-20220617192652567&#34;&gt;


&lt;p&gt;选择maven项目 next&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192703265.png&#34; class=&#34;&#34; title=&#34;image-20220617192703265&#34;&gt;






&lt;p&gt;输入groupid和aitifactid  然后finish&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192713221.png&#34; class=&#34;&#34; title=&#34;image-20220617192713221&#34;&gt;


&lt;p&gt;检查项目目前在磁盘上的存放路径 然后next&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192719403.png&#34; class=&#34;&#34; title=&#34;image-20220617192719403&#34;&gt;




&lt;p&gt;检查项目目录结构是否有缺失&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192723928.png&#34; class=&#34;&#34; title=&#34;image-20220617192723928&#34;&gt;


&lt;p&gt;MyBatis官网说明文档   &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvaW5kZXguaHRtbA==&#34;&gt;https://mybatis.org/mybatis-3/zh/index.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在pom.xml中导入MyBatis相关依赖jar文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatisTest01&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;!--mysqlConnector--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;8.0.16&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--mybatis 核心jar包--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.5.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--junit--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.13.1&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--lombok --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.18.12&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装lombok插件后,重启idea&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192808470.png&#34; class=&#34;&#34; title=&#34;image-20220617192808470&#34;&gt;




&lt;p&gt;导入lombok依赖后,单独设置启用注解处理&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192814365.png&#34; class=&#34;&#34; title=&#34;image-20220617192814365&#34;&gt;



&lt;h2 id=&#34;2-准备数据库-包结构和实体类&#34;&gt;&lt;a href=&#34;#2-准备数据库-包结构和实体类&#34; class=&#34;headerlink&#34; title=&#34;2  准备数据库_包结构和实体类&#34;&gt;&lt;/a&gt;2  准备数据库_包结构和实体类&lt;/h2&gt;&lt;p&gt;数据库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../spring/img/image-20220617192857161.png&#34; alt=&#34;image-20220617192857161&#34;&gt;&lt;/p&gt;
&lt;p&gt;项目结构&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617192901785.png&#34; class=&#34;&#34; title=&#34;image-20220617192901785&#34;&gt;

&lt;p&gt; 实体类Dept&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; package com.msb.pojo;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.io.Serializable;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class Dept implements Serializable &amp;#123;
    private Integer deptno;
    private String dname;
    private String loc;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-准备Mapper映射文件和核心配置文件&#34;&gt;&lt;a href=&#34;#3-准备Mapper映射文件和核心配置文件&#34; class=&#34;headerlink&#34; title=&#34;3 准备Mapper映射文件和核心配置文件&#34;&gt;&lt;/a&gt;3 准备Mapper映射文件和核心配置文件&lt;/h2&gt;&lt;p&gt;resources目录下 创建 com&amp;#x2F;msb&amp;#x2F;mapper目录,然后添加DeptMapper.xml映射文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617193030929.png&#34; class=&#34;&#34; title=&#34;image-20220617193030929&#34;&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;aaa&amp;quot;&amp;gt;
    &amp;lt;!--public List&amp;lt;Dept&amp;gt; findAll()&amp;#123;    &amp;#125;--&amp;gt;
    &amp;lt;select id=&amp;quot;findAll&amp;quot; resultType=&amp;quot;com.msb.pojo.Dept&amp;quot; &amp;gt;
        select * from dept
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;resources目录下准备sqlMapConfig.xml 核心配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE configuration
        PUBLIC &amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;environments default=&amp;quot;development&amp;quot;&amp;gt;
        &amp;lt;environment id=&amp;quot;development&amp;quot;&amp;gt;
            &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot;/&amp;gt;
            &amp;lt;dataSource type=&amp;quot;POOLED&amp;quot;&amp;gt;
                &amp;lt;property name=&amp;quot;driver&amp;quot; value=&amp;quot;com.mysql.cj.jdbc.Driver&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://127.0.0.1:3306/mydb?useSSL=false&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=UTF-8&amp;amp;amp;serverTimezone=Asia/Shanghai&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
            &amp;lt;/dataSource&amp;gt;
        &amp;lt;/environment&amp;gt;
    &amp;lt;/environments&amp;gt;
    &amp;lt;!--加载mapper映射文件--&amp;gt;
    &amp;lt;mappers&amp;gt;
        &amp;lt;mapper resource=&amp;quot;com/msb/mapper/DeptMapper.xml&amp;quot;/&amp;gt;
    &amp;lt;/mappers&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-运行测试&#34;&gt;&lt;a href=&#34;#4-运行测试&#34; class=&#34;headerlink&#34; title=&#34;4 运行测试&#34;&gt;&lt;/a&gt;4 运行测试&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617193244713.png&#34; class=&#34;&#34; title=&#34;image-20220617193244713&#34;&gt;

&lt;p&gt;在test目录下开发测试代码并运行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../spring/img/image-20220617193259351.png&#34; alt=&#34;image-20220617193259351&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; package com.msb.test;
import com.msb.pojo.Dept;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    public class Test1 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testFindAll()&amp;#123;
        // 调用SQL语句
        List&amp;lt;Dept&amp;gt; list = sqlSession.selectList(&amp;quot;findAll&amp;quot;);
        for (Dept dept : list) &amp;#123;
            System.out.println(dept);
        &amp;#125;
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3-MyBatis配置详解&#34;&gt;&lt;a href=&#34;#3-MyBatis配置详解&#34; class=&#34;headerlink&#34; title=&#34;3 MyBatis配置详解&#34;&gt;&lt;/a&gt;3 MyBatis配置详解&lt;/h1&gt;&lt;h3 id=&#34;1-log4j1和log4j2的简单配置&#34;&gt;&lt;a href=&#34;#1-log4j1和log4j2的简单配置&#34; class=&#34;headerlink&#34; title=&#34;1_log4j1和log4j2的简单配置&#34;&gt;&lt;/a&gt;1_log4j1和log4j2的简单配置&lt;/h3&gt;&lt;p&gt;项目中添加依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!-- log4j2 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.12.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- log4j1 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2.17&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;在mybatis.cfg.xml中配置MyBatis所使用的具体日志实现。如果不指定将自动搜索。可能会搜到log4j，但是如果优先搜到了其他的日志实现呢，所以还是设置为好。这一来log4j就跑不了了。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;log4j 1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;将log4j.properties文件负责到src下。另外在其中可以将全局的日志级别调高，避免大量debug信息的干扰。同时将对映射文件的操作调低，可以用来显示SQL语句的调试信息。开发阶段，建议启动控制的日志。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; #定义全局日志级别调试阶段推荐debug&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;properties&#34;&gt;log4j.rootLogger=debug,stdout 
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.err
log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout
log4j.appender.logfile=org.apache.log4j.FileAppender
log4j.appender.logfile.File=d:/msb.log
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d&amp;#123;yyyy-MM-dd HH:mm:ss&amp;#125; %l %F %p %m%n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在核心配置文件中可以选择的其他日志处理方式&lt;/p&gt;
&lt;p&gt;log4j 2&lt;/p&gt;
&lt;p&gt;将log4j2.xml文件负责到resources下。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;Configuration status=&amp;quot;DEBUG&amp;quot;&amp;gt;
    &amp;lt;Appenders&amp;gt;
        &amp;lt;Console name=&amp;quot;Console&amp;quot; target=&amp;quot;SYSTEM_ERR&amp;quot;&amp;gt;
            &amp;lt;PatternLayout pattern=&amp;quot;%d&amp;#123;YYYY-MM-dd HH:mm:ss&amp;#125; [%t] %-5p %c&amp;#123;1&amp;#125;:%L - %msg%n&amp;quot; /&amp;gt;
        &amp;lt;/Console&amp;gt;
        &amp;lt;RollingFile name=&amp;quot;RollingFile&amp;quot; filename=&amp;quot;log/test.log&amp;quot;
                     filepattern=&amp;quot;$&amp;#123;logPath&amp;#125;/%d&amp;#123;YYYYMMddHHmmss&amp;#125;-fargo.log&amp;quot;&amp;gt;
            &amp;lt;PatternLayout pattern=&amp;quot;%d&amp;#123;YYYY-MM-dd HH:mm:ss&amp;#125; [%t] %-5p %c&amp;#123;1&amp;#125;:%L - %msg%n&amp;quot; /&amp;gt;
            &amp;lt;Policies&amp;gt;
                &amp;lt;SizeBasedTriggeringPolicy size=&amp;quot;10 MB&amp;quot; /&amp;gt;
            &amp;lt;/Policies&amp;gt;
            &amp;lt;DefaultRolloverStrategy max=&amp;quot;20&amp;quot; /&amp;gt;
        &amp;lt;/RollingFile&amp;gt;
    &amp;lt;/Appenders&amp;gt;
    &amp;lt;Loggers&amp;gt;
        &amp;lt;Root level=&amp;quot;INFO&amp;quot;&amp;gt;
            &amp;lt;AppenderRef ref=&amp;quot;Console&amp;quot; /&amp;gt;
        &amp;lt;/Root&amp;gt;
    &amp;lt;/Loggers&amp;gt;
&amp;lt;/Configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;核心配置文件中可以指定日志打印方式&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617193736735.png&#34; class=&#34;&#34; title=&#34;image-20220617193736735&#34;&gt;



&lt;h2 id=&#34;2-关于事务配置&#34;&gt;&lt;a href=&#34;#2-关于事务配置&#34; class=&#34;headerlink&#34; title=&#34;2_关于事务配置&#34;&gt;&lt;/a&gt;2_关于事务配置&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617193831478.png&#34; class=&#34;&#34; title=&#34;image-20220617193831478&#34;&gt;

&lt;p&gt;在mybatis核心配置文件中 envirment中 通过transactionManager配置事务的处理策略&lt;/p&gt;
&lt;p&gt;&lt;font color=#FF000&gt;JDBC&lt;/font&gt; – 这个配置直接简单使用了 JDBC 的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围。&lt;/p&gt;
&lt;p&gt;&lt;font color=#FF000&gt;MANAGED &lt;/font&gt;– 这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期(比如 Spring 或 JEE 应用服务器的上下文) 默认情况下它会关闭连接。然而一些容器并不希望这样, 因此如果你需要从连接中停止它,将closeConnection 属性设置为 false. mybatis本身并不做事务的处理,交给其他框架去处理事务,如spring&lt;/p&gt;
&lt;h2 id=&#34;3-关于映射文件的加载方式&#34;&gt;&lt;a href=&#34;#3-关于映射文件的加载方式&#34; class=&#34;headerlink&#34; title=&#34;3_关于映射文件的加载方式&#34;&gt;&lt;/a&gt;3_关于映射文件的加载方式&lt;/h2&gt;&lt;p&gt;1.mapper映射文件的文件路径导入 使用的mapper标签的resource属性&lt;/p&gt;
&lt;p&gt;2.网络资源路径 使用的mapper标签的url属性&lt;/p&gt;
&lt;p&gt;3.接口的全限定名导入 使用的是mapper标签的class属性 (基于接口的代理模式开发)&lt;/p&gt;
&lt;p&gt;4.包扫描形式加载所有的mapper映射文件 使用的是 package标签&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617193946594.png&#34; class=&#34;&#34; title=&#34;image-20220617193946594&#34;&gt;

&lt;h2 id=&#34;4-关于实体类别名处理&#34;&gt;&lt;a href=&#34;#4-关于实体类别名处理&#34; class=&#34;headerlink&#34; title=&#34;4_关于实体类别名处理&#34;&gt;&lt;/a&gt;4_关于实体类别名处理&lt;/h2&gt;&lt;p&gt;在mybatis核心配置文件中使用别名处理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;!--设置实体类别名--&amp;gt;
&amp;lt;typeAliases&amp;gt;
    &amp;lt;!--
    通过包扫描给所有的实体类起别名
    给指定报名下的所有类起别名
    默认每个实体类的别名是首字母小写的类名
    Dept   dept
    Emp    emp
    --&amp;gt;
    &amp;lt;package name=&amp;quot;com.msb.pojo&amp;quot;/&amp;gt;
&amp;lt;/typeAliases&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在映射文件的resultType 返回值类型  和paramterType 上就可以使用别名了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;select id=&amp;quot;selectByEmpno&amp;quot;  resultType=&amp;quot;emp&amp;quot;&amp;gt;
    select * from emp where empno = 7566
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-关于外部属性配置文件存储数据库连接信息&#34;&gt;&lt;a href=&#34;#5-关于外部属性配置文件存储数据库连接信息&#34; class=&#34;headerlink&#34; title=&#34;5_关于外部属性配置文件存储数据库连接信息&#34;&gt;&lt;/a&gt;5_关于外部属性配置文件存储数据库连接信息&lt;/h2&gt;&lt;p&gt;在resources下准备jdbc.properties属性配置文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617194131042.png&#34; class=&#34;&#34; title=&#34;image-20220617194131042&#34;&gt;


&lt;p&gt;配置文件中的内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;properties&#34;&gt;jdbc_driver=com.mysql.cj.jdbc.Driver
jdbc_url=jdbc:mysql://127.0.0.1:3306/mydb?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai
jdbc_username=root
jdbc_password=root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在核心配置文件中引入db.properties属性文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!-- xml文档约束 约束xml文档中可以有哪些标签,哪些属性,以及标签的包含关系和顺序....
dtd 约束
schema 约束
--&amp;gt;

&amp;lt;!DOCTYPE configuration
        PUBLIC &amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;properties resource=&amp;quot;jdbc.properties&amp;quot;&amp;gt;&amp;lt;/properties&amp;gt;
    &amp;lt;settings&amp;gt;
        &amp;lt;!--设置日志处理方式--&amp;gt;
        &amp;lt;setting name=&amp;quot;logImpl&amp;quot; value=&amp;quot;LOG4J&amp;quot;/&amp;gt;
    &amp;lt;/settings&amp;gt;
    &amp;lt;!--设置实体类别名--&amp;gt;
    &amp;lt;typeAliases&amp;gt;
        &amp;lt;!--
        通过包扫描给所有的实体类起别名
        给指定报名下的所有类起别名
        默认每个实体类的别名是首字母小写的类名
        Dept   dept
        Emp    emp
        --&amp;gt;
        &amp;lt;package name=&amp;quot;com.msb.pojo&amp;quot;/&amp;gt;
    &amp;lt;/typeAliases&amp;gt;
    &amp;lt;!--配置数据库链接信息--&amp;gt;
    &amp;lt;environments default=&amp;quot;mysql&amp;quot;&amp;gt;
        &amp;lt;!--数据源1--&amp;gt;
        &amp;lt;environment id=&amp;quot;mysql&amp;quot;&amp;gt;
            &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot;/&amp;gt;
            &amp;lt;!--一个数据源--&amp;gt;
            &amp;lt;dataSource type=&amp;quot;POOLED&amp;quot;&amp;gt;
                &amp;lt;property name=&amp;quot;driver&amp;quot; value=&amp;quot;$&amp;#123;jdbc_driver&amp;#125;&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;$&amp;#123;jdbc_url&amp;#125;&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;$&amp;#123;jdbc_username&amp;#125;&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;$&amp;#123;jdbc_password&amp;#125;&amp;quot;/&amp;gt;
            &amp;lt;/dataSource&amp;gt;
        &amp;lt;/environment&amp;gt;
    &amp;lt;/environments&amp;gt;
    &amp;lt;!--加载映射文件的--&amp;gt;
    &amp;lt;mappers&amp;gt;
        &amp;lt;mapper resource=&amp;quot;com/msb/mapper/DeptMapper.xml&amp;quot;/&amp;gt;
    &amp;lt;/mappers&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;4-MyBatis传统DAO模式开发&#34;&gt;&lt;a href=&#34;#4-MyBatis传统DAO模式开发&#34; class=&#34;headerlink&#34; title=&#34;4 MyBatis传统DAO模式开发&#34;&gt;&lt;/a&gt;4 MyBatis传统DAO模式开发&lt;/h1&gt;&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;普通模式,也称为传统DAO模式,就是在传统DAO模式下,定义接口和实现类,如 interface EmpDao  class EmpDaoImpl implements EmpDao.  在实现类中,用SQLSession对象调用select insert delete update 等方法实现.目前极为少见.在传统模式下,我们需要知道SqlSession对象 实现CURD和 参数传递的处理
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-sqlSession查询的三种方式&#34;&gt;&lt;a href=&#34;#1-sqlSession查询的三种方式&#34; class=&#34;headerlink&#34; title=&#34;1_sqlSession查询的三种方式&#34;&gt;&lt;/a&gt;1_sqlSession查询的三种方式&lt;/h2&gt;&lt;p&gt;SqlSession对象本身的API中就有三个查询方法,分别能够实现如下查询方式&lt;/p&gt;
&lt;p&gt;1返回单个对象 selectOne&lt;/p&gt;
&lt;p&gt;2返回对象List集合 selectList&lt;/p&gt;
&lt;p&gt;3返回对象Map集合 selectMap&lt;/p&gt;
&lt;p&gt;接下来我们就对这三个方法进行一个快速的学习&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617194257643.png&#34; class=&#34;&#34; title=&#34;image-20220617194257643&#34;&gt;


&lt;p&gt;创建Emp实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@AllArgsConstructor
@NoArgsConstructor
@Data
public class Emp implements Serializable &amp;#123;
    private Integer empno;
    private String ename;
    private String job;
    private Integer mgr;
    private Date hiredate;
    private Double sal;
    private Double comm;
    private Integer deptno;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;准备Mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--
    返回单个对象
    public Emp findOne();
    id 相当于方法名
    resultType 相当于返回值类型
        sql语句的查询结果用哪个类来进行封装 如果返回值类型是集合,这里写的也是集合中的元素对应的类,不是集合本身作为类型
    paramaterType 参数类型
    SQL语句就是具体的方法体的实现
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findOne&amp;quot; resultType=&amp;quot;emp&amp;quot; &amp;gt;
        select * from emp where empno = 7499
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    返回多个对象List集合
    查询全部的员工信息
    public List&amp;lt;Emp&amp;gt; findAll()
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findAll&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
        select * from emp
    &amp;lt;/select&amp;gt;
    &amp;lt;!--返回多个对象的Map集合
    把查询出来的数据中的某一列作为键,整条数据封装的对象作为值
    public Map&amp;lt;key,Emp&amp;gt; findEmpMap()
    &amp;lt;empno,Emp&amp;gt;
    &amp;lt;key,Emp&amp;gt;
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpMap&amp;quot; resultType=&amp;quot;map&amp;quot;&amp;gt;
        select * from emp
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sqlMapConfig中导入EmpMapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!--加载mapper映射文件--&amp;gt;
&amp;lt;mappers&amp;gt;
    &amp;lt;mapper resource=&amp;quot;com/msb/mapper/DeptMapper.xml&amp;quot;/&amp;gt;
    &amp;lt;mapper resource=&amp;quot;com/msb/mapper/EmpMapper.xml&amp;quot;/&amp;gt;
&amp;lt;/mappers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.pojo.Dept;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.Set;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    public class Test2 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testSelectOne()&amp;#123;
        // 查询单个对象
        System.out.println(&amp;quot;sqlSession查询单个对象&amp;quot;);
        Emp emp = sqlSession.selectOne(&amp;quot;findOne&amp;quot;);
        System.out.println(emp);
    &amp;#125;
    @Test
    public void testSelectList()&amp;#123;
        // 查询多个对象的List集合
        System.out.println(&amp;quot;sqlSession查询对象List集合&amp;quot;);
        List&amp;lt;Emp&amp;gt; emps = sqlSession.selectList(&amp;quot;EmpMapper.findAll&amp;quot;);
        emps.forEach(System.out::println);
    &amp;#125;
    @Test
    public void testSelectMap()&amp;#123;
        // 查询多个对象的Map集合
        System.out.println(&amp;quot;sqlSession查询对象Map集合&amp;quot;);
        Map&amp;lt;Integer, Emp&amp;gt; empMap = sqlSession.selectMap(&amp;quot;findEmpMap&amp;quot;, &amp;quot;EMPNO&amp;quot;);
        Set&amp;lt;Integer&amp;gt; empnos = empMap.keySet();
        for (Integer empno : empnos) &amp;#123;
            System.out.println(empno+&amp;quot; :&amp;quot; +empMap.get(empno));
        &amp;#125;
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-sqlSession传递参数的三种方式&#34;&gt;&lt;a href=&#34;#2-sqlSession传递参数的三种方式&#34; class=&#34;headerlink&#34; title=&#34;2_sqlSession传递参数的三种方式&#34;&gt;&lt;/a&gt;2_sqlSession传递参数的三种方式&lt;/h2&gt;&lt;p&gt;1 单个基础数据类型作为参数&lt;/p&gt;
&lt;p&gt;2 多个基础数据类型的map 集合作为参数&lt;/p&gt;
&lt;p&gt;3 引用类型作为参数&lt;/p&gt;
&lt;p&gt;Mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;EmpMapper2&amp;quot;&amp;gt;
    &amp;lt;!--
    参数为一个基本数据类型
    根据员工工号查询员工的全部信息,返回单个员工对象
    public Emp findByEmpno(int empno);
    parameterType 在有参数情况下也是可以省略不写  mybatis 可以根据实际情况自动判断
    如果要写parameterType 那么就要写对
    在SQL语句上可以使用$&amp;#123;&amp;#125;  #&amp;#123;&amp;#125; 代表参数的占位
    如果参数是单个基本数据类型,&amp;#123;&amp;#125;中名字可以随便写,见名知意
    $&amp;#123;&amp;#125; 代表mybatis底层使用Statment语句对象,参数是以字符串拼接的形式设置
    #&amp;#123;&amp;#125; 代表mybatis底层使用的preparedStatment语句对象,参数使用?作为占位符处理
    #&amp;#123;&amp;#125; 以后常用
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;int&amp;quot;&amp;gt;
        select  * from emp where empno = #&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    参数为map集合
    查询指定部门号和指定最低薪资的员工信息
    20 号部门 且工资在1500以上的员工信息
    public List&amp;lt;Emp&amp;gt; findEmpByDeptnoAndSal(int deptno,double sal);
    &amp;lt;  &amp;gt;  最好要进行转译处理,参照HTML转译  w3school在线文档中有转译符号对应规则
     Map&amp;lt;String,Object&amp;gt; args=new HashMap&amp;lt;&amp;gt;();
        args.put(&amp;quot;deptno&amp;quot;, 20);
        args.put(&amp;quot;sal&amp;quot;, 1500.0);
    #&amp;#123;&amp;#125;中写的是map集合中,参数的键
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpByDeptnoAndSal&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;map&amp;quot;&amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
   参数为对象
   emp &amp;gt;&amp;gt;&amp;gt;  deptno   sal
   参数是我们自定义的类型,那么 #&amp;#123;&amp;#125;中写的是参数的属性名
   --&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpByDeptnoAndSal2&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; package com.msb.test;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    public class Test3 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testSingleArg()&amp;#123;
        // 测试单个基本数据类型作为参数
        Emp emp = sqlSession.selectOne(&amp;quot;findByEmpno&amp;quot;, 7499);
        System.out.println(emp);
    &amp;#125;
    @Test
    public void testMapArg()&amp;#123;
        // 测试Map集合作为参数
        Map&amp;lt;String,Object&amp;gt; args=new HashMap&amp;lt;&amp;gt;();
        args.put(&amp;quot;deptno&amp;quot;, 20);
        args.put(&amp;quot;sal&amp;quot;, 3000.0);
        List&amp;lt;Emp&amp;gt; emps = sqlSession.selectList(&amp;quot;findEmpByDeptnoAndSal&amp;quot;, args);
        emps.forEach(System.out::println);
    &amp;#125;
    @Test
    public void testEmpArg()&amp;#123;
        // 测试Map集合作为参数
        Emp arg =new Emp();
        arg.setDeptno(10);
        arg.setSal(2000.0);
        List&amp;lt;Emp&amp;gt; emps = sqlSession.selectList(&amp;quot;findEmpByDeptnoAndSal2&amp;quot;, arg);
        emps.forEach(System.out::println);
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-sqlSession完成DML所有操作&#34;&gt;&lt;a href=&#34;#3-sqlSession完成DML所有操作&#34; class=&#34;headerlink&#34; title=&#34;3_sqlSession完成DML所有操作&#34;&gt;&lt;/a&gt;3_sqlSession完成DML所有操作&lt;/h2&gt;&lt;p&gt;Mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;EmpMapper3&amp;quot;&amp;gt;
    &amp;lt;!--
    增删方法的返回值类型都是int
    resultType就无需指定了
    insert update delete 标签中没有resultType
    但是仍然可以有paramaterType
    --&amp;gt;
    &amp;lt;!-- 增加方法
    public int addEmp(Emp emp);
    --&amp;gt;
    &amp;lt;insert id=&amp;quot;addEmp&amp;quot; parameterType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;/insert&amp;gt;
    &amp;lt;!--修改
    根据工号修改员工姓名
    public int updateEmp(Emp emp);
    --&amp;gt;
    &amp;lt;update id=&amp;quot;updateEmp&amp;quot; parameterType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;/update&amp;gt;
    &amp;lt;!-- 删除
    删除大于给定工号的员工信息
    public int deleteEmp(int empno)
    --&amp;gt;
    &amp;lt;delete id=&amp;quot;deleteEmp&amp;quot; parameterType=&amp;quot;int&amp;quot;&amp;gt;
        delete from emp where empno &amp;gt;= #&amp;#123;empno&amp;#125;
    &amp;lt;/delete&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public class Test4 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession(true);
    &amp;#125;
    @Test
    public void testInsert()&amp;#123;
        Emp emp =new Emp(null,&amp;quot;按住啦Baby&amp;quot;,&amp;quot;SALESMAN&amp;quot;,7839,new Date(),3100.0, 200.0,10 );
        int rows = sqlSession.insert(&amp;quot;addEmp&amp;quot;, emp);
        System.out.println(rows);
        // 手动提交事务
        //sqlSession.commit();
        /*增删改 要提交事务
        * sqlSession.commit();手动提交事务
        * sqlSession=factory.openSession(true); 设置事务自动提交
        * */
    &amp;#125;
    @Test
    public void testUpdate()&amp;#123;
        Emp emp =new Emp( );
        emp.setEname(&amp;quot;晓明&amp;quot;);
        emp.setEmpno(7937);
        int rows = sqlSession.update(&amp;quot;updateEmp&amp;quot;, emp);
        System.out.println(rows);
    &amp;#125;
    @Test
    public void testDelete()&amp;#123;
        int rows = sqlSession.delete(&amp;quot;deleteEmp&amp;quot;, 7936);
        System.out.println(rows);
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;5-MyBatis代理模式开发&#34;&gt;&lt;a href=&#34;#5-MyBatis代理模式开发&#34; class=&#34;headerlink&#34; title=&#34;5 MyBatis代理模式开发&#34;&gt;&lt;/a&gt;5 MyBatis代理模式开发&lt;/h1&gt;&lt;p&gt;前面已经使用MyBatis完成了对Emp表的CRUD操作，都是由SqlSession调用自身方法发送SQL命令并得到结果的，实现了MyBatis的入门。&lt;/p&gt;
&lt;p&gt;但是却存在如下缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不管是selectList()、selectOne()、selectMap()，都是通过SQLSession对象的API完成增删改查,都只能提供一个查询参数。如果要多个参数，需要封装到JavaBean或者Map中，并不一定永远是一个好办法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回值类型较固定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只提供了映射文件，没有提供数据库操作的接口，不利于后期的维护扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在MyBatis中提供了另外一种成为&lt;strong&gt;Mapper代理（或称为接口绑定）&lt;/strong&gt;的操作方式。在实际开发中也使用该方式。下面我们就是要Mapper代理的方式来实现对Emp表的CRUD操作吧，还有完成多个参数传递、模糊查询、自增主键回填等更多的技能实现。搭建好的项目框架如图所示，相比而言，增加了接口EmployeeMapper。但是却会引起映射文件和测试类的变化。&lt;/p&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;p&gt;1有接口 模块之间有规范了&lt;/p&gt;
&lt;p&gt;2参数的处理多样了,接口中的方法参数列表由我们自己决定&lt;/p&gt;
&lt;p&gt;3通过代理模式由mybatis提供接口的实现类对象 我们不用写实现类了&lt;/p&gt;
&lt;p&gt;项目结构:注意文件路径和文件位置!!!&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617195010768.png&#34; class=&#34;&#34; title=&#34;image-20220617195010768&#34;&gt;


&lt;p&gt;准备接口和mapper映射文件&lt;/p&gt;
&lt;p&gt;EmpMapper接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.mapper;
import com.msb.pojo.Emp;
import java.util.List;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
public interface EmpMapper &amp;#123;
    /**
     * 该方法用于查询全部的员工信息
     * @return 全部员工信息封装的Emp对象的List集合
        */
    List&amp;lt;Emp&amp;gt; findAll();
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EmpMapper.xml映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--
    1 接口的名字和Mapper映射为文件名字必须保持一致(不包含拓展名)
    2 Mapper映射文件的namespace必须是接口的全路径名
    3 sql语句的id必须是对应方法的名
    4 DeptMapper映射文件应该和接口编译之后放在同一个目录下
    --&amp;gt;
    &amp;lt;!--List&amp;lt;Emp&amp;gt; findAll();--&amp;gt;
    &amp;lt;select id=&amp;quot;findAll&amp;quot; resultType=&amp;quot;emp&amp;quot; &amp;gt;
        select * from emp
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在sqlMapConfig.xml核心配置文件中使用包扫描形式加载所有的映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;!--加载mapper映射文件--&amp;gt;
&amp;lt;mappers&amp;gt;
    &amp;lt;!--通过类的全路径去找mapper映射文件--&amp;gt;
    &amp;lt;mapper class=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;/&amp;gt;
&amp;lt;/mappers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.mapper.EmpMapper;
import com.msb.pojo.Dept;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    public class Test1 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testFindAll()&amp;#123;
        EmpMapper empMapper=sqlSession.getMapper(EmpMapper.class);
        List&amp;lt;Emp&amp;gt; emps = empMapper.findAll();
        emps.forEach(System.out::println);
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;代理模式浅析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mybatis是如何通过代理模式实现查询的&lt;/p&gt;
&lt;p&gt;这条语句的底层使用了动态代理模式，动态创建一个EmployeeMapper的一个代理对象并赋给接口引用。所以在MyBatis中不需要显式提供Mapper接口的实现类，这也是简单的地方。&lt;/p&gt;
&lt;h1 id=&#34;6-代理模式下开发各种功能&#34;&gt;&lt;a href=&#34;#6-代理模式下开发各种功能&#34; class=&#34;headerlink&#34; title=&#34;6 代理模式下开发各种功能&#34;&gt;&lt;/a&gt;6 代理模式下开发各种功能&lt;/h1&gt;&lt;h2 id=&#34;1-多种参数传递问题&#34;&gt;&lt;a href=&#34;#1-多种参数传递问题&#34; class=&#34;headerlink&#34; title=&#34;1_多种参数传递问题&#34;&gt;&lt;/a&gt;1_多种参数传递问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1单个基本数据类型&lt;/p&gt;
&lt;p&gt;2多个基本数据类型&lt;/p&gt;
&lt;p&gt;3单个引用数据类型&lt;/p&gt;
&lt;p&gt;4map集合数据类型&lt;/p&gt;
&lt;p&gt;5多个引用数据类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.mapper;
import com.msb.pojo.Emp;
import org.apache.ibatis.annotations.Param;
import java.util.List;
import java.util.Map;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public interface EmpMapper &amp;#123;
    /**
     * 该方法用于查询全部的员工信息
     * @return 全部员工信息封装的Emp对象的List集合
     */
    List&amp;lt;Emp&amp;gt; findAll();
    /**
     * 根据员工编号查询单个员工信息的方法
     * @param empno 员工编号
     * @return 如果找到了返回Emp对象,找不到返回null
     */
    Emp findByEmpno(int empno);
    /**
     * 根据员工编号和薪资下限去查询员工信息
     * @param empno 员工编号
     * @param sal 薪资下限
     * @return 多个Emp对象的List集合
     */
    List&amp;lt;Emp&amp;gt; findByDeptnoAndSal(@Param(&amp;quot;deptno&amp;quot;) int deptno,@Param(&amp;quot;sal&amp;quot;) double sal);
    List&amp;lt;Emp&amp;gt; findByDeptnoAndSal2(Map&amp;lt;String,Object&amp;gt; map);
    List&amp;lt;Emp&amp;gt; findByDeptnoAndSal3(Emp emp);
    List&amp;lt;Emp&amp;gt; findByDeptnoAndSal4(@Param(&amp;quot;empa&amp;quot;) Emp empa,@Param(&amp;quot;empb&amp;quot;) Emp empb);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--
    1 接口的名字和Mapper映射为文件名字必须保持一致(不包含拓展名)
    2 Mapper映射文件的namespace必须是接口的全路径名
    3 sql语句的id必须是对应方法的名
    4 DeptMapper映射文件应该和接口编译之后放在同一个目录下
    --&amp;gt;
    &amp;lt;!--List&amp;lt;Emp&amp;gt; findAll();--&amp;gt;
    &amp;lt;select id=&amp;quot;findAll&amp;quot; resultType=&amp;quot;emp&amp;quot; &amp;gt;
        select * from emp
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    单个基本数据类型作为方法参数
    #&amp;#123;&amp;#125;中可以随便写,遵循见名知意
    Emp findByEmpno(int empno);
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultType=&amp;quot;emp&amp;quot; &amp;gt;
        select * from emp where empno =#&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
     多个基本数据类型作为方法参数
     List&amp;lt;Emp&amp;gt; findByDeptnoAndSal(@Param(&amp;quot;detpno&amp;quot;) int deptno,@Param(&amp;quot;sal&amp;quot;) double sal);
     方式1 arg*     arg0 arg1 arg2 数字是索引,从0开始
     方式2 param*   param1 param2 param3 数字是编号,从1开始
     使用别名
     List&amp;lt;Emp&amp;gt; findByDeptnoAndSal(@Param(&amp;quot;detpno&amp;quot;) int deptno,@Param(&amp;quot;sal&amp;quot;) double sal);
     通过@Param注解使用别名之后,就不能再使用arg* 但是可以继续使用param*
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByDeptnoAndSal&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    参数是map,&amp;#123;&amp;#125;写键的名字
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByDeptnoAndSal2&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;map&amp;quot; &amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--单个引用类型,&amp;#123;&amp;#125;中写的使用对象的属性名--&amp;gt;
    &amp;lt;select id=&amp;quot;findByDeptnoAndSal3&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;emp&amp;quot; &amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    多个引用类型作为方法参数
     List&amp;lt;Emp&amp;gt; findByDeptnoAndSal4(@Param(&amp;quot;empa&amp;quot;) Emp empa,@Param(&amp;quot;empb&amp;quot;) Emp empb);
     如果用@Param定义了别名,那么就不能使用arg*.属性名,但是可以使用param*.属性名和别名.属性名
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByDeptnoAndSal4&amp;quot; resultType=&amp;quot;emp&amp;quot;  &amp;gt;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试 代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.testDemo;
import com.msb.mapper.EmpMapper;
import com.msb.pojo.Emp;
import com.msb.util.SqlSessionUtil;
import org.apache.ibatis.session.SqlSession;
import java.util.List;
public class Test1 &amp;#123;
    public static void main(String[] args) &amp;#123;
        SqlSession sqlSession = SqlSessionUtil.getSqlSession(true);
        /*
        * 帮助我们生成一个接口下的实现类对象的
        *
        * */
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        List&amp;lt;Emp&amp;gt; emps = mapper.getAllEmp();
        for(Emp emp:emps) &amp;#123;
            System.out.println(emp);
        &amp;#125;
        // 1单个基本数据类型作为方法参数
        Emp emp = mapper.getByEmpno(7902);
        System.out.println(emp);
        // 2多个基本数据类型作为方法参数
        List&amp;lt;Emp&amp;gt; emps2 = mapper.getByDeptnoAndSal(10, 1500);
        for(Emp em:emps2) &amp;#123;
            System.out.println(em);
        &amp;#125;
        // 3单个引用类型作为方法参数
        Emp condition=new Emp();
        condition.setDeptno(10);
        condition.setSal(1500.0);
        List&amp;lt;Emp&amp;gt; emps3 = mapper.getByDeptnoAndSal2(condition);
        for(Emp em:emps3) &amp;#123;
            System.out.println(em);
        &amp;#125;
        // 4多个引用类型作为方法参数
        Emp condition1=new Emp();
        condition1.setDeptno(10);
        Emp condition2=new Emp();
        condition2.setSal(1500.0);
        List&amp;lt;Emp&amp;gt; emps4 = mapper.getByDeptnoAndSal3(condition1,condition2);
        for(Emp em:emps4) &amp;#123;
            System.out.println(em);
        &amp;#125;
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-模糊查询功能&#34;&gt;&lt;a href=&#34;#2-模糊查询功能&#34; class=&#34;headerlink&#34; title=&#34;2 模糊查询功能&#34;&gt;&lt;/a&gt;2 模糊查询功能&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;在进行模糊查询时，在映射文件中可以使用concat()函数来连接参数和通配符。另外注意对于特殊字符，比如&amp;lt;，不能直接书写，应该使用字符实体替换。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 根据名字做模糊查询
 * @param name 模糊查询的文字
 * @return  Emp对象List集合
 */
List&amp;lt;Emp&amp;gt; findByEname( String name);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!--List&amp;lt;Emp&amp;gt; getByName(String name);--&amp;gt;
&amp;lt;select id=&amp;quot;findByEname&amp;quot;  resultType=&amp;quot;emp&amp;quot; &amp;gt;
    select * from emp where ename like concat(&amp;#39;%&amp;#39;,#&amp;#123;name&amp;#125;,&amp;#39;%&amp;#39;)
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-主键自增回填&#34;&gt;&lt;a href=&#34;#3-主键自增回填&#34; class=&#34;headerlink&#34; title=&#34;3_主键自增回填&#34;&gt;&lt;/a&gt;3_主键自增回填&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;MySQL支持主键自增。有时候完成添加后需要立刻获取刚刚自增的主键，由下一个操作来使用。比如结算构造车后，主订单的主键确定后，需要作为后续订单明细项的外键存在。如何拿到主键呢，MyBatis提供了支持，可以非常简单的获取。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface DeptMapper &amp;#123;
    int addDept(Dept dept);
    int addDept2(Dept dept);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.DeptMapper&amp;quot;&amp;gt;
   &amp;lt;!-- int addDept(Dept dept);
   useGeneratedKeys=&amp;quot;true&amp;quot; 返回数据库帮我们生成的主键
   keyProperty=&amp;quot;deptno&amp;quot; 生成的主键值用我们dept对象那个属性存储
   --&amp;gt;
    &amp;lt;insert id=&amp;quot;addDept&amp;quot; parameterType=&amp;quot;dept&amp;quot; useGeneratedKeys=&amp;quot;true&amp;quot; keyProperty=&amp;quot;deptno&amp;quot;&amp;gt;
    &amp;lt;/insert&amp;gt;
    &amp;lt;insert id=&amp;quot;addDept2&amp;quot; parameterType=&amp;quot;dept&amp;quot;&amp;gt;
        &amp;lt;selectKey order=&amp;quot;AFTER&amp;quot; keyProperty=&amp;quot;deptno&amp;quot;  resultType=&amp;quot;int&amp;quot;&amp;gt;
            select @@identity
        &amp;lt;/selectKey&amp;gt;
    &amp;lt;/insert&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;SqlSession sqlSession = SqlSessionUtil.getSqlSession(true);
DeptMapper mapper = sqlSession.getMapper(DeptMapper.class);
Dept dept =new Dept(null,&amp;quot;AI学院&amp;quot;,&amp;quot;北京&amp;quot;);
int i = mapper.addDept2(dept);
System.out.println(i);
System.out.println(dept.getDeptno());
sqlSession.close();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方式1&lt;/p&gt;
&lt;p&gt;useGeneratedKeys：表示要使用自增的主键&lt;/p&gt;
&lt;p&gt;keyProperty：表示把自增的主键赋给JavaBean的哪个成员变量。&lt;/p&gt;
&lt;p&gt;以添加Dept对象为例，添加前Dept对象的deptno是空的，添加完毕后可以通过getDeptno() 获取自增的主键。&lt;/p&gt;
&lt;p&gt;方式2&lt;/p&gt;
&lt;p&gt;order：取值AFTER|BEFORE，表示在新增之后|之前执行&lt;selectKey&gt;中的SQL命令&lt;/p&gt;
&lt;p&gt;keyProperty：执行select @@identity后结果填充到哪个属性中&lt;/p&gt;
&lt;p&gt;resultType：结果类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术扩展&lt;/strong&gt;&lt;br&gt;在很多应用场景中需要新增数据后获取到新增数据的主键值，针对这样的需求一般由三种解决方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主键自定义，用户通过UUID或时间戳等方式生成唯一主键，把这个值当做主键值。在分布式场景中应用较多。&lt;/li&gt;
&lt;li&gt;查询后通过select max(主键) from 表获取主键最大值。这种方式在多线程访问情况下可能出现问题。&lt;/li&gt;
&lt;li&gt;查询后通过select @@identity获取最新生成主键。要求这条SQL必须在insert操作之后，且数据库连接没有关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-实现DML操作&#34;&gt;&lt;a href=&#34;#4-实现DML操作&#34; class=&#34;headerlink&#34; title=&#34;4_实现DML操作&#34;&gt;&lt;/a&gt;4_实现DML操作&lt;/h2&gt;&lt;p&gt;EmpMapper接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 增加员工信息
 * @param emp 存储新增员工信息的Emp对象
 * @return 对数据库数据产生影响的行数
 */
int addEmp(Emp emp);
/**
 * 根据员工编号修改员工姓名的方法
 * @param empno 要修改的员工编号
 * @param ename 修改之后的新的员工名字
 * @return 对数据库数据产生影响的行数
 */
int updateEnameByEmpno(@Param(&amp;quot;empno&amp;quot;) int empno,@Param(&amp;quot;ename&amp;quot;) String ename);
/**
 * 根据员工编号删除员工信息
 * @param empno 要删除的员工编号
 * @return 对数据库数据产生影响的行数
 */
int deleteByEmpno(int empno);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EmpMapper映射 文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!--int addEmp(Emp emp);--&amp;gt;
&amp;lt;insert id=&amp;quot;addEmp&amp;quot; &amp;gt;
&amp;lt;/insert&amp;gt;
&amp;lt;!--int updateEnameByEmpno(@Param(&amp;quot;empno&amp;quot;) int empno,@Param(&amp;quot;ename&amp;quot;) String ename);--&amp;gt;
&amp;lt;update id=&amp;quot;updateEnameByEmpno&amp;quot; &amp;gt;
&amp;lt;/update&amp;gt;
&amp;lt;!--int deleteByEmpno(int empno);--&amp;gt;
&amp;lt;update id=&amp;quot;deleteByEmpno&amp;quot; &amp;gt;
    delete from emp where empno =#&amp;#123;empno&amp;#125;
&amp;lt;/update&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.mapper.DeptMapper;
import com.msb.mapper.EmpMapper;
import com.msb.pojo.Dept;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public class Test3 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testAddEmp()&amp;#123;
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        mapper.addEmp(new Emp(null, &amp;quot;TOM&amp;quot;, &amp;quot;SALESMAN&amp;quot;, 7521, new Date(), 2314.0, 100.0, 10));
        sqlSession.commit();
    &amp;#125;
    @Test
    public void testUpdateEnameByEmpno()&amp;#123;
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        mapper.updateEnameByEmpno(7938, &amp;quot;TOM&amp;quot;);
        sqlSession.commit();
    &amp;#125;
    @Test
    public void testDeletByEmpno()&amp;#123;
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        mapper.deleteByEmpno(7938);
        sqlSession.commit();
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;7-动态SQL&#34;&gt;&lt;a href=&#34;#7-动态SQL&#34; class=&#34;headerlink&#34; title=&#34;7 动态SQL&#34;&gt;&lt;/a&gt;7 动态SQL&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;经常遇到很多按照很多查询条件进行查询的情况，比如京东根据不同的条件筛选商品。其中经常出现很多条件不取值的情况，在后台应该如何完成最终的SQL语句呢？









如果采用JDBC进行处理，需要根据条件是否取值进行SQL语句的拼接，一般情况下是使用StringBuilder类及其append方法实现，还是有些繁琐的。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。

MyBatis在简化操作方法提出了动态SQL功能，将使用Java代码拼接SQL语句，改变为在XML映射文件中截止标签拼接SQL语句。相比而言，大大减少了代码量，更灵活、高度可配置、利于后期维护。

MyBatis中动态SQL是编写在mapper.xml中的，其语法和JSTL类似，但是却是基于强大的OGNL表达式实现的。

MyBatis也可以在注解中配置SQL，但是由于注解功能受限，尤其是对于复杂的SQL语句，可读性很差，所以较少使用。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-if标签&#34;&gt;&lt;a href=&#34;#1-if标签&#34; class=&#34;headerlink&#34; title=&#34;1_if标签&#34;&gt;&lt;/a&gt;1_if标签&lt;/h2&gt;&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface EmpMapper2 &amp;#123;
  List&amp;lt;Emp&amp;gt; findByCondition(Emp emp);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper2&amp;quot;&amp;gt;
&amp;lt;!--List&amp;lt;Emp&amp;gt; findByCondition(Emp emp);--&amp;gt;
    &amp;lt;select id=&amp;quot;findByCondition&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
        select * from emp where 1=1
        &amp;lt;if test=&amp;quot;empno != null&amp;quot;&amp;gt;
            and empno =#&amp;#123;empno&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and ename like concat(&amp;#39;%&amp;#39;,#&amp;#123;ename&amp;#125;,&amp;#39;%&amp;#39;)
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and job =#&amp;#123;job&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null&amp;quot;&amp;gt;
            and mgr =#&amp;#123;mgr&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null&amp;quot;&amp;gt;
            and hiredate =#&amp;#123;hiredate&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
            and sal =#&amp;#123;sal&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null&amp;quot;&amp;gt;
            and comm =#&amp;#123;comm&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null&amp;quot;&amp;gt;
            and deptno =#&amp;#123;deptno&amp;#125;
        &amp;lt;/if&amp;gt;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
    SqlSession sqlSession = MyBatisUtil.getSqlSession(false);
    EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class);
    Emp condition =new Emp();
   /* condition.setDeptno(20);*/
   /* condition.setSal(3000.0);*/
   /*condition.setHiredate(new java.sql.Date(81,1,22));*/
   condition.setComm(0.0);
   condition.setDeptno(20);
    List&amp;lt;Emp&amp;gt; emps = mapper.findEmpByCondition(condition);
    for (Emp e:emps
         ) &amp;#123;
        System.out.println(e);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-where标签&#34;&gt;&lt;a href=&#34;#2-where标签&#34; class=&#34;headerlink&#34; title=&#34;2_where标签&#34;&gt;&lt;/a&gt;2_where标签&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用于处理where关键字和and&lt;/p&gt;
&lt;p&gt;默认删除第一个and逻辑连接符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;select id=&amp;quot;findEmpByCondition&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
    select * from emp
    &amp;lt;where&amp;gt;
        &amp;lt;if test=&amp;quot;empno != null&amp;quot;&amp;gt;
            and empno= #&amp;#123;empno&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and ename= #&amp;#123;ename&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and job= #&amp;#123;job&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null &amp;quot;&amp;gt;
            and mgr= #&amp;#123;mgr&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null &amp;quot;&amp;gt;
            and hiredate= #&amp;#123;hiredate&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
            and sal= #&amp;#123;sal&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null &amp;quot;&amp;gt;
             and comm =#&amp;#123;comm&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null &amp;quot;&amp;gt;
            and deptno= #&amp;#123;deptno&amp;#125;
        &amp;lt;/if&amp;gt;
    &amp;lt;/where&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-choose标签&#34;&gt;&lt;a href=&#34;#3-choose标签&#34; class=&#34;headerlink&#34; title=&#34;3_choose标签&#34;&gt;&lt;/a&gt;3_choose标签&lt;/h2&gt;&lt;p&gt;前面的when条件成立 后面的 when就不再判断了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;select id=&amp;quot;findEmpByCondition2&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
    select * from emp
    &amp;lt;where&amp;gt;
        &amp;lt;choose&amp;gt;
            &amp;lt;when test=&amp;quot;empno != null&amp;quot;&amp;gt;
                and empno= #&amp;#123;empno&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
                and ename= #&amp;#123;ename&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
                and job= #&amp;#123;job&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;mgr != null &amp;quot;&amp;gt;
                and mgr= #&amp;#123;mgr&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;hiredate != null &amp;quot;&amp;gt;
                and hiredate= #&amp;#123;hiredate&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;sal != null&amp;quot;&amp;gt;
                and sal= #&amp;#123;sal&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;comm != null &amp;quot;&amp;gt;
                and comm =#&amp;#123;comm&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;deptno != null &amp;quot;&amp;gt;
                and deptno= #&amp;#123;deptno&amp;#125;
            &amp;lt;/when&amp;gt;
        &amp;lt;/choose&amp;gt;
    &amp;lt;/where&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-set标签&#34;&gt;&lt;a href=&#34;#4-set标签&#34; class=&#34;headerlink&#34; title=&#34;4_set标签&#34;&gt;&lt;/a&gt;4_set标签&lt;/h2&gt;&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; int updateEmpByCondtion(Emp emp);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;!--int updateEmpByCondtion(Emp emp);--&amp;gt;
&amp;lt;update id=&amp;quot;updateEmpByCondtion&amp;quot; &amp;gt;
    update emp
    &amp;lt;set&amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39; &amp;quot;&amp;gt;
            , ename =#&amp;#123;ename&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and ename != &amp;#39;&amp;#39; &amp;quot;&amp;gt;
            , job =#&amp;#123;job&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null &amp;quot;&amp;gt;
            , mgr =#&amp;#123;mgr&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null &amp;quot;&amp;gt;
            , hiredate =#&amp;#123;hiredate&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null &amp;quot;&amp;gt;
            , sal =#&amp;#123;sal&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null &amp;quot;&amp;gt;
            , comm =#&amp;#123;comm&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null &amp;quot;&amp;gt;
            , deptno =#&amp;#123;deptno&amp;#125;
        &amp;lt;/if&amp;gt;
    &amp;lt;/set&amp;gt;
    where empno =#&amp;#123;empno&amp;#125;
&amp;lt;/update&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-trim标签&#34;&gt;&lt;a href=&#34;#5-trim标签&#34; class=&#34;headerlink&#34; title=&#34;5_trim标签&#34;&gt;&lt;/a&gt;5_trim标签&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Trim 标签处理 set  ，可以为他包裹起来的SQL语句前后 增加&amp;#x2F;删除 关键词&amp;#x2F;固定字符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;update id=&amp;quot;updateEmpByCondition2&amp;quot; &amp;gt;
    update emp
    &amp;lt;!--prefix 要增加什么前缀
    prefixOverrides 要去除什么前缀
    suffix 要增加什么后缀
    suffixOverrides 要去除什么后缀
    set 是trim的一种特殊情况
    --&amp;gt;
    &amp;lt;trim prefix=&amp;quot;set&amp;quot;  suffixOverrides=&amp;quot;,&amp;quot; &amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            ename= #&amp;#123;ename&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            job= #&amp;#123;job&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null &amp;quot;&amp;gt;
            mgr= #&amp;#123;mgr&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null &amp;quot;&amp;gt;
            hiredate= #&amp;#123;hiredate&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
            sal= #&amp;#123;sal&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null &amp;quot;&amp;gt;
            comm =#&amp;#123;comm&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null &amp;quot;&amp;gt;
            deptno= #&amp;#123;deptno&amp;#125;,
        &amp;lt;/if&amp;gt;
    &amp;lt;/trim&amp;gt;
    where  empno = #&amp;#123;empno&amp;#125;
&amp;lt;/update&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trim标签  处理where&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;select id=&amp;quot;findByCondition&amp;quot; resultMap=&amp;quot;EmpMap&amp;quot;&amp;gt;
        select * from emp 
        &amp;lt;trim prefix=&amp;quot;where&amp;quot; prefixOverrides=&amp;quot;and&amp;quot;&amp;gt;
            &amp;lt;if test=&amp;quot;empno != null&amp;quot;&amp;gt;
                and empno =#&amp;#123;empno&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
                &amp;lt;bind name=&amp;quot;likePattern&amp;quot; value=&amp;quot;&amp;#39;%&amp;#39;+ename+&amp;#39;%&amp;#39;&amp;quot;/&amp;gt;
                and ename like #&amp;#123;likePattern&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
                and job =#&amp;#123;job&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;mgr != null&amp;quot;&amp;gt;
                and mgr =#&amp;#123;mgr&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;hiredate != null&amp;quot;&amp;gt;
                and hiredate =#&amp;#123;hiredate&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
                and sal =#&amp;#123;sal&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;comm != null&amp;quot;&amp;gt;
                and comm =#&amp;#123;comm&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;deptno != null&amp;quot;&amp;gt;
                and deptno =#&amp;#123;deptno&amp;#125;
            &amp;lt;/if&amp;gt;
        &amp;lt;/trim&amp;gt;
    &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-bind标签&#34;&gt;&lt;a href=&#34;#6-bind标签&#34; class=&#34;headerlink&#34; title=&#34;6_bind标签&#34;&gt;&lt;/a&gt;6_bind标签&lt;/h2&gt;&lt;p&gt;一般用于处理模糊查询的模板&lt;/p&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617200421440.png&#34; class=&#34;&#34; title=&#34;image-20220617200421440&#34;&gt;


&lt;p&gt;SQL语句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!-- bind 写一个局部SQL模板，模糊 like 常用--&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpByEname&amp;quot; resultMap=&amp;quot;EmpMap&amp;quot;&amp;gt;
        &amp;lt;bind name=&amp;quot;likePatten&amp;quot; value=&amp;quot;&amp;#39;%&amp;#39;+param1+&amp;#39;%&amp;#39;&amp;quot;/&amp;gt;
        select * from emp where ename like #&amp;#123;likePatten&amp;#125;;
    &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-nclude&#34;&gt;&lt;a href=&#34;#7-nclude&#34; class=&#34;headerlink&#34; title=&#34;7_nclude&#34;&gt;&lt;/a&gt;7_nclude&lt;/h2&gt;&lt;p&gt;引用提前写好的 SQL 标签的SQL语句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;sql id=&amp;quot;empColumn&amp;quot;&amp;gt;empno,ename,job,mgr,hiredate,sal,comm,deptno&amp;lt;/sql&amp;gt;
    &amp;lt;sql id=&amp;quot;baseSelect&amp;quot;&amp;gt;
        select &amp;lt;include refid=&amp;quot;empColumn&amp;quot;&amp;gt;&amp;lt;/include&amp;gt; from emp
    &amp;lt;/sql&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;8-sql标签&#34;&gt;&lt;a href=&#34;#8-sql标签&#34; class=&#34;headerlink&#34; title=&#34;8_sql标签&#34;&gt;&lt;/a&gt;8_sql标签&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;sql id=&amp;quot;empColumn&amp;quot;&amp;gt;empno,ename,job,mgr,hiredate,sal,comm,deptno&amp;lt;/sql&amp;gt;
&amp;lt;sql id=&amp;quot;baseSelect&amp;quot;&amp;gt;select &amp;lt;include refid=&amp;quot;empColumn&amp;quot;&amp;gt;&amp;lt;/include&amp;gt; from emp&amp;lt;/sql&amp;gt;
&amp;lt;!--List&amp;lt;Emp&amp;gt; findByCondition(Emp emp);--&amp;gt;
&amp;lt;select id=&amp;quot;findByCondition&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;include refid=&amp;quot;baseSelect&amp;quot;&amp;gt;&amp;lt;/include&amp;gt;
    &amp;lt;trim prefix=&amp;quot;where&amp;quot; prefixOverrides=&amp;quot;and&amp;quot;&amp;gt;
        &amp;lt;if test=&amp;quot;empno != null&amp;quot;&amp;gt;
            and empno =#&amp;#123;empno&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            &amp;lt;bind name=&amp;quot;likePattern&amp;quot; value=&amp;quot;&amp;#39;%&amp;#39;+ename+&amp;#39;%&amp;#39;&amp;quot;/&amp;gt;
            and ename like #&amp;#123;likePattern&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and job =#&amp;#123;job&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null&amp;quot;&amp;gt;
            and mgr =#&amp;#123;mgr&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null&amp;quot;&amp;gt;
            and hiredate =#&amp;#123;hiredate&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
            and sal =#&amp;#123;sal&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null&amp;quot;&amp;gt;
            and comm =#&amp;#123;comm&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null&amp;quot;&amp;gt;
            and deptno =#&amp;#123;deptno&amp;#125;
        &amp;lt;/if&amp;gt;
    &amp;lt;/trim&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9-foreach标签&#34;&gt;&lt;a href=&#34;#9-foreach标签&#34; class=&#34;headerlink&#34; title=&#34;9_foreach标签&#34;&gt;&lt;/a&gt;9_foreach标签&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;!--List&amp;lt;Emp&amp;gt; findByEmpnos1(int[] empnos);
 collection=&amp;quot;&amp;quot;  遍历的集合或者是数组
                 参数是数组,collection中名字指定为array
                 参数是List集合,collection中名字指定为list
 separator=&amp;quot;&amp;quot;   多个元素取出的时候 用什么文字分隔
 open=&amp;quot;&amp;quot;        以什么开头
 close=&amp;quot;&amp;quot;       以什么结尾
 item=&amp;quot;&amp;quot;        中间变量名
 for(Person per:PersonList)
 --&amp;gt;
 &amp;lt;select id=&amp;quot;findByEmpnos1&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
     select * from emp  where empno in
     &amp;lt;foreach collection=&amp;quot;array&amp;quot; separator=&amp;quot;,&amp;quot; open=&amp;quot;(&amp;quot; close=&amp;quot;)&amp;quot; item=&amp;quot;deptno&amp;quot;&amp;gt;
         #&amp;#123;deptno&amp;#125;
     &amp;lt;/foreach&amp;gt;
 &amp;lt;/select&amp;gt;
&amp;lt;!-- List&amp;lt;Emp&amp;gt; findByEmpnos2(List&amp;lt;Integer&amp;gt; empnos);--&amp;gt;
 &amp;lt;select id=&amp;quot;findByEmpnos2&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
     select * from emp  where empno in
     &amp;lt;foreach collection=&amp;quot;list&amp;quot; separator=&amp;quot;,&amp;quot; open=&amp;quot;(&amp;quot; close=&amp;quot;)&amp;quot; item=&amp;quot;deptno&amp;quot;&amp;gt;
         #&amp;#123;deptno&amp;#125;
     &amp;lt;/foreach&amp;gt;
 &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;8-MyBatis实现多表查询&#34;&gt;&lt;a href=&#34;#8-MyBatis实现多表查询&#34; class=&#34;headerlink&#34; title=&#34;8 MyBatis实现多表查询&#34;&gt;&lt;/a&gt;8 MyBatis实现多表查询&lt;/h1&gt;&lt;p&gt;前面已经使用MyBatis完成了对Emp表的CRUD操作，不管是使用SqlSession直接操作，还是使用Mapper代理方式，都只是完成了对单个数据库表的操作。这肯定是远远不够的。&lt;/p&gt;
&lt;p&gt;在实际开发中，经常会将来自多张表的数据在一个位置显示。比如查询并显示的员工信息中会有来自部门表、岗位表的数据，而后台一般是定义一个方法&lt;/p&gt;
&lt;h2 id=&#34;1-关联查询&#34;&gt;&lt;a href=&#34;#1-关联查询&#34; class=&#34;headerlink&#34; title=&#34;1 关联查询&#34;&gt;&lt;/a&gt;1 关联查询&lt;/h2&gt;&lt;h3 id=&#34;1-手动处理映射关系&#34;&gt;&lt;a href=&#34;#1-手动处理映射关系&#34; class=&#34;headerlink&#34; title=&#34;1 手动处理映射关系&#34;&gt;&lt;/a&gt;1 手动处理映射关系&lt;/h3&gt;&lt;p&gt;实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Emp  implements Serializable &amp;#123;
    private Integer empno;
    private String name;
    private String job;
    private Integer mgr;
    private Date hiredate;
    private Double sal;
    private Double comm;
    private Integer deptno;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--手动处理数据库查询字段和封装实体类属性之间的映射关系
    1 主键一般使用id属性
    2 当属性名和查询出的数据表字段名相同 可以不写映射关系
    --&amp;gt;
    &amp;lt;resultMap id=&amp;quot;empMap&amp;quot; type=&amp;quot;emp&amp;quot;&amp;gt;
        &amp;lt;!--&amp;lt;id property=&amp;quot;empno&amp;quot; column=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;--&amp;gt;
        &amp;lt;result property=&amp;quot;name&amp;quot; column=&amp;quot;ename&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;!--&amp;lt;result property=&amp;quot;job&amp;quot; column=&amp;quot;job&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;sal&amp;quot; column=&amp;quot;sal&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;hiredate&amp;quot; column=&amp;quot;hiredate&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;mgr&amp;quot; column=&amp;quot;mgr&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;comm&amp;quot; column=&amp;quot;comm&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;deptno&amp;quot; column=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;--&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultMap=&amp;quot;empMap&amp;quot; &amp;gt;
        select * from emp where empno =#&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-一对一关联查询&#34;&gt;&lt;a href=&#34;#2-一对一关联查询&#34; class=&#34;headerlink&#34; title=&#34;2 一对一关联查询&#34;&gt;&lt;/a&gt;2 一对一关联查询&lt;/h3&gt;&lt;p&gt;数据准备: 创建项目表和项目记录表&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617200808312.png&#34; class=&#34;&#34; title=&#34;image-20220617200808312&#34;&gt;



&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE TABLE `projects`  (
  `pid` int(2) NOT NULL AUTO_INCREMENT,
  `pname` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `money` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`pid`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;
INSERT INTO `projects` VALUES (1, &amp;#39; ***大学OA&amp;#39;, 500000);
INSERT INTO `projects` VALUES (2, &amp;#39;学生选课系统&amp;#39;, 100000);
INSERT INTO `projects` VALUES (3, &amp;#39;讲师测评系统&amp;#39;, 20000);
INSERT INTO `projects` VALUES (4, &amp;#39;线上问答系统 &amp;#39;, 20000);
CREATE TABLE `projectrecord`  (
  `empno` int(4) NOT NULL,
  `pid` int(2) NOT NULL,
  PRIMARY KEY (`empno`, `pid`) USING BTREE,
  INDEX `fk_project_pro`(`pid`) USING BTREE,
  CONSTRAINT `fk_emp_pro` FOREIGN KEY (`empno`) REFERENCES `emp` (`EMPNO`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_project_pro` FOREIGN KEY (`pid`) REFERENCES `projects` (`pid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;
INSERT INTO `projectrecord` VALUES (7369, 1);
INSERT INTO `projectrecord` VALUES (7521, 1);
INSERT INTO `projectrecord` VALUES (7369, 2);
INSERT INTO `projectrecord` VALUES (7499, 2);
INSERT INTO `projectrecord` VALUES (7521, 2);
INSERT INTO `projectrecord` VALUES (7369, 3);
INSERT INTO `projectrecord` VALUES (7499, 3);
INSERT INTO `projectrecord` VALUES (7521, 3);
INSERT INTO `projectrecord` VALUES (7369, 4);
INSERT INTO `projectrecord` VALUES (7499, 4);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需求:根据编号查询员工信息及所在的部门信息&lt;/p&gt;
&lt;p&gt;实体类添加一个部门作为属性&lt;/p&gt;
&lt;p&gt;实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@AllArgsConstructor
@NoArgsConstructor
@Data
public class Emp implements Serializable &amp;#123;
    private Integer empno;
    private String ename;
    private String job;
    private Integer mgr;
    private Date hiredate;
    private Double sal;
    private Double comm;
    private Integer deptno;
    // 组合一个Dept对象作为自己的属性
    private Dept dept;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface EmpMapper &amp;#123;
    /**
     * 根据员工编号查询员工的所有信息并携带所在的部门信息
     * @param empno 要查询的员工编号
     * @return Emp对象,组合了Dept对象作为属性,对部门信息进行存储
     */
    Emp findEmpJoinDeptByEmpno(int empno);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--Emp findEmpJoinDeptByEmpno(int empno);--&amp;gt;
    &amp;lt;resultMap id=&amp;quot;empJoinDept&amp;quot; type=&amp;quot;emp&amp;quot;&amp;gt;
        &amp;lt;!--设置emp本身的八个属性的映射关系--&amp;gt;
        &amp;lt;id property=&amp;quot;empno&amp;quot; column=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
        &amp;lt;result property=&amp;quot;ename&amp;quot; column=&amp;quot;ename&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;job&amp;quot; column=&amp;quot;job&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;sal&amp;quot; column=&amp;quot;sal&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;hiredate&amp;quot; column=&amp;quot;hiredate&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;mgr&amp;quot; column=&amp;quot;mgr&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;comm&amp;quot; column=&amp;quot;comm&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;deptno&amp;quot; column=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;!--
        association 处理一对一
        封装一对一信息关系的标签
        property  emp类的属性名
        javaType  用哪个类的对象给属性赋值
        --&amp;gt;
        &amp;lt;association property=&amp;quot;dept&amp;quot; javaType=&amp;quot;dept&amp;quot;&amp;gt;
            &amp;lt;id column=&amp;quot;deptno&amp;quot; property=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
            &amp;lt;result column=&amp;quot;dname&amp;quot; property=&amp;quot;dname&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result column=&amp;quot;loc&amp;quot; property=&amp;quot;loc&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;/association&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpJoinDeptByEmpno&amp;quot; resultMap=&amp;quot;empJoinDept&amp;quot; &amp;gt;
        select * from
        emp e
        left join dept  d
        on e.deptno =d.deptno
        where empno = #&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Test
public void testOneToOne() throws ParseException &amp;#123;
    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
    Emp emp = mapper.findEmpJoinDeptByEmpno(7499);
    System.out.println(emp);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3 一对多关联查询&lt;/p&gt;
&lt;p&gt;根据部门号查询部门信息及该部门的所有员工信息&lt;/p&gt;
&lt;p&gt;实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Data
@AllArgsConstructor
@NoArgsConstructor
public class Dept implements Serializable &amp;#123;
    private Integer deptno;
    private String dname;
    private String loc;
    // 组合一个Emp的List集合作为属性
    private List&amp;lt;Emp&amp;gt; empList;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.mapper;
import com.msb.pojo.Dept;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public interface DeptMapper &amp;#123;
    /**
     * 根据部门编号查询部门信息及该部分的所有员工信息
     * @param deptno 要查询的部门编号
     * @return Dept对象,内部组合了一个Emp的List属性用于封装部门的所有员工信息
     */
    Dept findDeptJoinEmpsByDeptno(int deptno);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.DeptMapper&amp;quot;&amp;gt;
    &amp;lt;!--Dept findDeptJoinEmpsByDeptno(int deptno);--&amp;gt;
    &amp;lt;resultMap id=&amp;quot;deptJoinEmps&amp;quot; type=&amp;quot;dept&amp;quot;&amp;gt;
        &amp;lt;id column=&amp;quot;deptno&amp;quot; property=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
        &amp;lt;result column=&amp;quot;dname&amp;quot; property=&amp;quot;dname&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result column=&amp;quot;loc&amp;quot; property=&amp;quot;loc&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;!--处理一对多关系的标签--&amp;gt;
        &amp;lt;collection property=&amp;quot;empList&amp;quot; ofType=&amp;quot;emp&amp;quot; &amp;gt;
            &amp;lt;!--设置emp本身的八个属性的映射关系--&amp;gt;
            &amp;lt;id property=&amp;quot;empno&amp;quot; column=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
            &amp;lt;result property=&amp;quot;ename&amp;quot; column=&amp;quot;ename&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;job&amp;quot; column=&amp;quot;job&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;sal&amp;quot; column=&amp;quot;sal&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;hiredate&amp;quot; column=&amp;quot;hiredate&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;mgr&amp;quot; column=&amp;quot;mgr&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;comm&amp;quot; column=&amp;quot;comm&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;deptno&amp;quot; column=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;/collection&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findDeptJoinEmpsByDeptno&amp;quot; resultMap=&amp;quot;deptJoinEmps&amp;quot;&amp;gt;
        select * from dept d left join emp e on d.deptno =e.deptno where d.deptno =#&amp;#123;deptno&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Test
public void testOneToMany() throws ParseException &amp;#123;
    DeptMapper mapper = sqlSession.getMapper(DeptMapper.class);
    Dept dept = mapper.findDeptJoinEmpsByDeptno(20);
    System.out.println(dept);
    System.out.println(&amp;quot;---------&amp;quot;);
    List&amp;lt;Emp&amp;gt; empList = dept.getEmpList();
    empList.forEach(System.out::println);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4 多对多关联查询&lt;/p&gt;
&lt;p&gt;根据项目编号查询项目信息,以及参与到该项目之中的所有的员工信息&lt;/p&gt;
&lt;p&gt;实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@NoArgsConstructor
@AllArgsConstructor
@Data
public class Project  implements Serializable &amp;#123;
    private Integer pid;
    private String pname;
    private Integer money;
    // 组合一个ProjectRecord对象集合作为属性
    private List&amp;lt;ProjectRecord&amp;gt; projectRecords;
&amp;#125;
@Data
@AllArgsConstructor
@NoArgsConstructor
public class ProjectRecord implements Serializable &amp;#123;
    private Integer empno;
    private Integer pid;
    // 组合一个Emp对象作为属性
    private Emp emp;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.mapper;
import com.msb.pojo.Emp;
import com.msb.pojo.Project;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public interface ProjectMapper &amp;#123;
    /**
     * 根据项目编号查询一个项目信息及参与该项目的所有员工信息
     * @param pid 项目编号
     * @return 所有信息封装的Project对象
     */
    Project findProjectJoinEmpsByPid(int pid);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.ProjectMapper&amp;quot;&amp;gt;
    &amp;lt;!--Project findProjectJoinEmpsByPid(int pid);--&amp;gt;
    &amp;lt;resultMap id=&amp;quot;projectJoinEmps&amp;quot; type=&amp;quot;project&amp;quot;&amp;gt;
        &amp;lt;id column=&amp;quot;pid&amp;quot; property=&amp;quot;pid&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
        &amp;lt;result column=&amp;quot;pname&amp;quot; property=&amp;quot;pname&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result column=&amp;quot;money&amp;quot; property=&amp;quot;money&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;!--一对多 集合属性 collection--&amp;gt;
        &amp;lt;collection property=&amp;quot;projectRecords&amp;quot; ofType=&amp;quot;projectRecord&amp;quot;&amp;gt;
            &amp;lt;id column=&amp;quot;empno&amp;quot; property=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
            &amp;lt;id column=&amp;quot;pid&amp;quot; property=&amp;quot;pid&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
            &amp;lt;!--一对一 --&amp;gt;
            &amp;lt;association property=&amp;quot;emp&amp;quot; javaType=&amp;quot;emp&amp;quot;&amp;gt;
                &amp;lt;id property=&amp;quot;empno&amp;quot; column=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
                &amp;lt;result property=&amp;quot;ename&amp;quot; column=&amp;quot;ename&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;job&amp;quot; column=&amp;quot;job&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;sal&amp;quot; column=&amp;quot;sal&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;hiredate&amp;quot; column=&amp;quot;hiredate&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;mgr&amp;quot; column=&amp;quot;mgr&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;comm&amp;quot; column=&amp;quot;comm&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;deptno&amp;quot; column=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;/association&amp;gt;
        &amp;lt;/collection&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findProjectJoinEmpsByPid&amp;quot;  resultMap=&amp;quot;projectJoinEmps&amp;quot;&amp;gt;
        select * from
        project p
        left join projectrecord pr
        on p.pid = pr.pid
        left join emp e
        on e.empno = pr.empno
        where p.pid= #&amp;#123;pid&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Test
public void testManyToMany() throws ParseException &amp;#123;
    ProjectMapper mapper = sqlSession.getMapper(ProjectMapper.class);
    Project project = mapper.findProjectJoinEmpsByPid(2);
    System.out.println(project.getPid());
    System.out.println(project.getPname());
    System.out.println(project.getMoney());
    List&amp;lt;ProjectRecord&amp;gt; projectRecords = project.getProjectRecords();
    for (ProjectRecord projectRecord : projectRecords) &amp;#123;
        Emp emp = projectRecord.getEmp();
        System.out.println(emp);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-级联查询&#34;&gt;&lt;a href=&#34;#2-级联查询&#34; class=&#34;headerlink&#34; title=&#34;2 级联查询&#34;&gt;&lt;/a&gt;2 级联查询&lt;/h2&gt;&lt;p&gt;级联查询，顾名思义，就是利于数据库表间的外键关联关系进行自动的级联查询操作。使用MyBatis实现级联查询，除了实体类增加关联属性外，还需要在映射文件中进行配置。&lt;/p&gt;
&lt;h3 id=&#34;1-立即加载&#34;&gt;&lt;a href=&#34;#1-立即加载&#34; class=&#34;headerlink&#34; title=&#34;1 立即加载&#34;&gt;&lt;/a&gt;1 立即加载&lt;/h3&gt;&lt;h3 id=&#34;2-延迟加载&#34;&gt;&lt;a href=&#34;#2-延迟加载&#34; class=&#34;headerlink&#34; title=&#34;2 延迟加载&#34;&gt;&lt;/a&gt;2 延迟加载&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;延迟加载，又称按需加载&lt;/strong&gt;。延迟加载的内容等到真正使用时才去进行加载（查询）。多用在关联对象或集合中。&lt;/p&gt;
&lt;p&gt;延迟加载的好处：先从单表查询、需要时再从关联表去关联查询，大大降低数据库在单位时间内的查询工作量,将工作在时间上的分配更加均匀，而且单表要比关联查询多张表速度要快。&lt;/p&gt;
&lt;p&gt;延迟加载的设置&lt;/p&gt;
&lt;p&gt;第一步：全局开关：在sqlMapConfig.xml中打开延迟加载的开关。配置完成后所有的association和collection元素都生效&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;  &amp;lt;settings&amp;gt;
      &amp;lt;setting name=&amp;quot;lazyLoadingEnabled&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
      &amp;lt;setting name=&amp;quot;aggressiveLazyLoading&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
  &amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;font color=#008000&gt;lazyLoadingEnabled&lt;/font&gt;:是否开启延迟加载。是Mybatis是否启用懒加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000 &gt;aggressiveLazyLoading&lt;/font&gt;：当开启时，任何方法的调用都会懒加载对象的所有属性。否则，每个属性会按需加载,&lt;/p&gt;
&lt;p&gt;第二步：分开关：指定的association和collection元素中配置&lt;font color=#0000FF&gt;fetchType&lt;/font&gt;属性。eager：表示立刻加载；lazy：表示延迟加载。&lt;strong&gt;将覆盖全局延迟设置。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-总结&#34;&gt;&lt;a href=&#34;#3-总结&#34; class=&#34;headerlink&#34; title=&#34;3 总结&#34;&gt;&lt;/a&gt;3 总结&lt;/h2&gt;&lt;h4 id=&#34;resultMap中的常见属性&#34;&gt;&lt;a href=&#34;#resultMap中的常见属性&#34; class=&#34;headerlink&#34; title=&#34;resultMap中的常见属性&#34;&gt;&lt;/a&gt;resultMap中的常见属性&lt;/h4&gt;&lt;table style=&#34;text-align: center;&#34; cellpadding=&#34;30&#34; &gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;property&lt;/td&gt;
            &lt;td&gt;需要映射到JavaBean 的属性名称&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td &gt;javaType&lt;/td&gt;
            &lt;td&gt;property的类型，一个完整的类名，或者是一个类型别名。如果你匹配的是一个JavaBean，那MyBatis 通常会自行检测到&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;column&lt;/td&gt;
            &lt;td&gt;数据表的列名或者列别名&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;jdbcType&lt;/td&gt;
            &lt;td&gt;column在数据库表中的类型。这个属性只在insert,update   或delete 的时候针对允许空的列有用。JDBC 需要这项，但MyBatis 不需要&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;typeHandler&lt;/td&gt;
            &lt;td&gt;使用这个属性可以覆写类型处理器，实现javaType、jdbcType之间的相互转换。一般可以省略，会探测到使用的什么类型的typeHandler进行处理&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;fetchType&lt;/td&gt;
            &lt;td&gt;自动延迟加载&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;select&lt;/td&gt;
            &lt;td&gt;association、collection的属性，使用哪个查询查询属性的值，要求指定namespace+id的全名称&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;ofType&lt;/td&gt;
            &lt;td&gt;collection的属性，指明集合中元素的类型（即泛型类型）&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;




&lt;h4 id=&#34;级联查询和多表查询的比较及其选择&#34;&gt;&lt;a href=&#34;#级联查询和多表查询的比较及其选择&#34; class=&#34;headerlink&#34; title=&#34;级联查询和多表查询的比较及其选择&#34;&gt;&lt;/a&gt;级联查询和多表查询的比较及其选择&lt;/h4&gt;&lt;table style=&#34;text-align: center;&#34; cellpadding=&#34;30&#34; &gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;SQL语句数量&lt;/td&gt;
        &lt;td&gt;多条&lt;/td&gt;
        &lt;td&gt;一条&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td &gt;性能&lt;/td&gt;
        &lt;td&gt;性能低&lt;/td&gt;
        &lt;td&gt;性能高&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
        &lt;td&gt;延迟加载&lt;/td&gt;
        &lt;td&gt;立即加载、延迟加载&lt;/td&gt;
        &lt;td&gt;只有立即加载&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;灵活性&lt;/td&gt;
        &lt;td&gt;更灵活&lt;/td&gt;
        &lt;td&gt;不灵活&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
        &lt;td&gt;SQL难易度&lt;/td&gt;
        &lt;td&gt;简单&lt;/td&gt;
        &lt;td&gt;复杂&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;选择依据&lt;/td&gt;
        &lt;td&gt;简单、灵活&lt;/td&gt;
        &lt;td&gt;高性能&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;




&lt;p&gt;&lt;strong&gt;ResultType和ResultMap使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;如果你做的是单表的查询并且封装的实体和数据库的字段一一对应   resultType
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;如果实体封装的属性和数据库的字段不一致  resultMap
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; 使用N+1级联查询的时候  resultMap
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;使用的是多表的连接查询  resultMap
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;一对一关联映射的实现&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;实例：学生和学生证、雇员和工牌
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;数据库层次：主键关联或者外键关联（参看之前内容）
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; MyBatis层次：在映射文件的设置双方均使用association即可，用法相同
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;多对多映射的实现&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;实例：学生和课程、用户和角色
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; 数据库层次：引入一个中间表将一个多对多转为两个一对多
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; MyBatis层次
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法1：在映射文件的设置双方均使用collection即可，不用引入中间类&lt;/p&gt;
&lt;p&gt;方法2：引入中间类和中间类的映射文件，按照两个一对多处理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自关联映射&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;实例：Emp表中的员工和上级。一般是一对多关联
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;数据库层次：外键参考当前表的主键（比如mgr参考empno）
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MyBatis层次：按照一对多处理，但是增加的属性都写到一个实体类中，增加的映射也都写到一个映射文件中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;9-MyBatis注解开发&#34;&gt;&lt;a href=&#34;#9-MyBatis注解开发&#34; class=&#34;headerlink&#34; title=&#34;9 MyBatis注解开发&#34;&gt;&lt;/a&gt;9 MyBatis注解开发&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface DeptMapper &amp;#123;
    Dept findDeptByDeptno(int deptno);
    @Select(&amp;quot;select * from dept where deptno =#&amp;#123;deptno&amp;#125;&amp;quot;)
    Dept findByDeptno(int deptno);
    int updateDept(Dept dept);
    int addDept(Dept dept);
    @Delete(&amp;quot;delete from dept where deptno =#&amp;#123;deptno&amp;#125;&amp;quot;)
    int removeDept(int deptno);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1.使用注解没有实现Java代码和SQL语句的解耦&lt;/p&gt;
&lt;p&gt;2.无法实现SQL语句的动态拼接&lt;/p&gt;
&lt;p&gt;3.进行多表的查询时定制ResultMap比较麻烦&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注解和XML的优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;table style=&#34;text-align: center;&#34; cellpadding=&#34;30&#34; &gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;优点&lt;/td&gt;
        &lt;td&gt;类和类之间的解耦&lt;/td&gt;
        &lt;td&gt;简化配置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td &gt; &lt;/td&gt;
        &lt;td&gt;利于修改。直接修改XML文件，无需到源代码中修改。&lt;/td&gt;
        &lt;td&gt;使用起来直观且容易，提升开发效率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;配置集中在XML中，对象间关系一目了然，利于快速了解项目和维护&lt;/td&gt;
        &lt;td&gt;类型安全，编译器进行校验，不用等到运行期才会发现错误&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;容易和其他系统进行数据交交换&lt;/td&gt;
        &lt;td&gt;注解的解析可以不依赖于第三方库，可以直接使用Java自带的反射&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;






&lt;h1 id=&#34;10-缓存&#34;&gt;&lt;a href=&#34;#10-缓存&#34; class=&#34;headerlink&#34; title=&#34;10 缓存&#34;&gt;&lt;/a&gt;10 缓存&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617211853352.png&#34; class=&#34;&#34; title=&#34;image-20220617211853352&#34;&gt;

&lt;blockquote&gt;
&lt;p&gt;​	是一种临时存储少量数据至内存或者是磁盘的一种技术.减少数据的加载次数,可以降低工作量,提高程序响应速度&lt;/p&gt;
&lt;p&gt;​	缓存的重要性是不言而喻的。mybatis的缓存将相同查询条件的SQL语句执行一遍后所得到的结果存在内存或者某种缓存介质当中，当下次遇到一模一样的查询SQL时候不在执行SQL与数据库交互，而是直接从缓存中获取结果，减少服务器的压力；尤其是在查询越多、缓存命中率越高的情况下，使用缓存对性能的提高更明显。&lt;/p&gt;
&lt;p&gt;​	MyBatis允许使用缓存，缓存一般放置在高速读&amp;#x2F;写的存储器上，比如服务器的内存，能够有效的提供系统性能。MyBatis分为&lt;font color=#FF0000&gt;一级缓存和二级缓存&lt;/font&gt;，同时也可配置关于缓存设置。&lt;/p&gt;
&lt;p&gt;​	一级存储是SqlSession上的缓存，二级缓存是在SqlSessionFactory(namespace)上的缓存。默认情况下，MyBatis开启一级缓存，没有开启二级缓存。当数据量大的时候可以借助一些第三方缓存框架或Redis缓存来协助保存Mybatis的二级缓存数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617211938471.png&#34; class=&#34;&#34; title=&#34;image-20220617211938471&#34;&gt;



&lt;h2 id=&#34;1-一级缓存&#34;&gt;&lt;a href=&#34;#1-一级缓存&#34; class=&#34;headerlink&#34; title=&#34;1 一级缓存&#34;&gt;&lt;/a&gt;1 一级缓存&lt;/h2&gt;&lt;p&gt;一级存储是SqlSession上的缓存，默认开启，是一种内存型缓存,不要求实体类对象实现Serializable接口。&lt;/p&gt;
&lt;p&gt;缓存中的数据使用键值对形式存储数据&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;namespace + sqlid + args + offset     &amp;gt;&amp;gt;&amp;gt;   hash 值作为键,查询出的结果作为值&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617212008075.png&#34; class=&#34;&#34; title=&#34;image-20220617212008075&#34;&gt;

&lt;p&gt;测试 代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Test
public void testFindDeptByDetpno()   &amp;#123;
    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
    Emp emp = mapper.findByEmpno(7521);
    System.out.println(emp);
    // 中间发生了增删改或者是调用了SqlSession调用了commit,会自动清空缓存
    sqlSession.commit();// 增删改的时候调用
    EmpMapper mapper2 = sqlSession.getMapper(EmpMapper.class);
    Emp emp2 = mapper2.findByEmpno(7521);
    System.out.println(emp2); 
    
    System.out.println(emp==emp2);// 没有commit之前为True
    System.out.println(mapper==mapper2);// false 表示确实产生了两个代理对象
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-二级缓存&#34;&gt;&lt;a href=&#34;#2-二级缓存&#34; class=&#34;headerlink&#34; title=&#34;2 二级缓存&#34;&gt;&lt;/a&gt;2 二级缓存&lt;/h2&gt;&lt;p&gt;二级缓存是以namespace为标记的缓存，可以是由一个SqlSessionFactory创建的SqlSession之间共享缓存数据。默认并不开启。下面的代码中创建了两个SqlSession，执行相同的SQL语句，尝试让第二个SqlSession使用第一个SqlSession查询后缓存的数据。要求实体类必须实现序列化接口&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617212052512.png&#34; class=&#34;&#34; title=&#34;image-20220617212052512&#34;&gt;



&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface EmpMapper &amp;#123;
    Emp findByEmpno(int empno);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;cache/&amp;gt;
    &amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultType=&amp;quot;emp&amp;quot; useCache=&amp;quot;true&amp;quot; flushCache=&amp;quot;false&amp;quot;&amp;gt;
        select * from emp where empno =#&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试 代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.mapper.EmpMapper;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public class Test3 &amp;#123;
    private SqlSession sqlSession;
    private SqlSession sqlSession2;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
        sqlSession2=factory.openSession();
    &amp;#125;
    @Test
    public void testFindDeptByDetpno()   &amp;#123;
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        Emp emp = mapper.findByEmpno(7521);
        System.out.println(emp);
        // SqlSession提交之后,才会将查询的结果放入二级缓存
        sqlSession.commit();
        EmpMapper mapper2 = sqlSession2.getMapper(EmpMapper.class);
        Emp emp2 = mapper2.findByEmpno(7521);
        System.out.println(emp2);
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
        sqlSession2.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	其中的commit()，执行该命令后才会将该SqlSession的查询结果从一级缓存中放入二级缓存，供其他SqlSession使用。另外执行SqlSession的close()也会将该SqlSession的查询结果从一级缓存中放入二级缓存。两种方式区别在当前SqlSession是否关闭了。&lt;/p&gt;
&lt;p&gt;执行结果显示进行了两次对数据库的SQL查询，说明二级缓存并没有开启。需要进行如下步骤完成开启。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局开关：在sqlMapConfig.xml文件中的&lt;font color=blue&gt;&lt;settings&gt;&lt;/font&gt;标签配置开启二级缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;settings&amp;gt;
    &amp;lt;setting name=&amp;quot;cacheEnabled&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cacheEnabled的默认值就是true，所以这步的设置可以省略。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;分开关：在要开启二级缓存的mapper文件中开启缓存：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmployeeMapper&amp;quot;&amp;gt;
    &amp;lt;cache/&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;二级缓存未必完全使用内存,有可能占用硬盘存储,缓存中存储的JavaBean对象必须实现序列化接口,&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Emp implements  Serializable &amp;#123;  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;经过设置后，查询结果如图所示。发现第一个SqlSession会首先去二级缓存中查找，如果不存在，就查询数据库，&lt;font color=#FF0000&gt;在commit()或者close()的时候将数据放入到二级缓存&lt;/font&gt;。第二个SqlSession执行相同SQL语句查询时就直接从二级缓存中获取了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	1)    MyBatis的二级缓存的缓存介质有多种多样，而并不一定是在内存中，所以需要对JavaBean对象实现序列化接口。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;二级缓存是以 namespace 为单位的，不同 namespace 下的操作互不影响&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	3)    加入Cache元素后，会对相应命名空间所有的select元素查询结果进行缓存，而其中的insert、update、delete在操作是会清空整个namespace的缓存。&lt;/p&gt;
&lt;p&gt;​	4)    cache 有一些可选的属性 type, eviction, flushInterval, size, readOnly, blocking。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;cache type=&amp;quot;&amp;quot; readOnly=&amp;quot;&amp;quot; eviction=&amp;quot;&amp;quot;flushInterval=&amp;quot;&amp;quot;size=&amp;quot;&amp;quot;blocking=&amp;quot;&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;cache type&amp;#x3D;”” readOnly&amp;#x3D;”” eviction&amp;#x3D;””flushInterval&amp;#x3D;””size&amp;#x3D;””blocking&amp;#x3D;””&amp;#x2F;&amp;gt;&lt;/p&gt;
&lt;table style=&#34;text-align: center;&#34; cellpadding=&#34;30&#34; &gt;
    &lt;style&gt;
        td {
            text-align:center;
        }
        p {
          text-align:center;
        }
    &lt;/style&gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;type&lt;/td&gt;
         &lt;td&gt;&lt;p&gt;自定义缓存类，要求实现org.apache.ibatis.cache.Cache接口&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;readOnly&lt;/td&gt;
            &lt;td &gt;&lt;p&gt;是否只读&lt;/p&gt;
                &lt;p&gt; true:给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。 &lt;/p&gt;
                &lt;span&gt; 这提供了很重要的性能优势。&lt;/span&gt;
                &lt;p&gt;false:会返回缓存对象的拷贝(通过序列化)。&lt;/p&gt;
                &lt;p&gt; 这会慢一些,但是安全&lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;eviction&lt;/td&gt;
            &lt;td&gt;	 
                &lt;p&gt;缓存策略&lt;br&gt;LRU（默认） – 最近最少使用：移除最长时间不被使用的对象。&lt;/p&gt;
                &lt;p&gt;FIFO – 先进先出：按对象进入缓存的顺序来移除它们。&lt;/p&gt;
                &lt;p&gt;SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。&lt;/p&gt;
                &lt;p&gt;WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。&lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;LRU&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;flushInterval&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;
                    刷新间隔，毫秒为单位。默认为null，也就是没有刷新间隔，
                &lt;/p&gt;
                &lt;p&gt;
                    只有执行update、insert、delete语句才会刷新
                &lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
             &lt;td&gt;size&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;缓存对象个数&lt;p&gt;&lt;/td&gt;
            &lt;td&gt;1024&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;blocking&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;是否使用阻塞性缓存BlockingCache&lt;/p&gt;
                &lt;p&gt;true：在查询缓存时锁住对应的Key，如果缓存命中了则会释放对应的锁，&lt;/p&gt;
                &lt;span&gt;否则会在查询数据库以后再释放锁，&lt;/span&gt;
                &lt;p&gt;保证只有一个线程到数据库中查找指定key对应的数据&lt;/p&gt;
                &lt;p&gt;false：不使用阻塞性缓存，性能更好&lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
        &lt;/tr&gt;
&lt;/table&gt;





&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;如果在加入Cache元素的前提下让个别select 元素不使用缓存，可以使用useCache属性，设置为false。useCache控制当前sql语句是否启用缓存  flushCache控制当前sql执行一次后是否刷新缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultType=&amp;quot;emp&amp;quot; useCache=&amp;quot;true&amp;quot; flushCache=&amp;quot;false&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-三方缓存&#34;&gt;&lt;a href=&#34;#3-三方缓存&#34; class=&#34;headerlink&#34; title=&#34;3 三方缓存&#34;&gt;&lt;/a&gt;3 三方缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;分布式缓存框架：我们系统为了提高系统并发和性能，一般对系统进行分布式部署（集群部署方式）不适用分布缓存， 缓存的数据在各个服务单独存储，不方便系统开发。所以要使用分布式缓存对缓存数据进行集中管理.ehcache,redis ,memcache缓存框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ehcache：是一种广泛使用的开源java分布式缓存。主要面向通用缓存，javaEE 和 轻量级容器。它具有内存和磁盘存储功能。被用于大型复杂分布式web application的&lt;/p&gt;
&lt;p&gt;这里的三方缓存是作为二级缓存使用的&lt;/p&gt;
&lt;p&gt;导入依赖的jar文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mybatis.caches&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatis-ehcache&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;net.sf.ehcache&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;ehcache&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.10.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;slf4j-nop&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;去各自的sql映射文件里,开启二级缓存,并把缓存类型指定为EhcacheCache&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;cache type=&amp;quot;org.mybatis.caches.ehcache.EhcacheCache&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在资源目录下放置一个缓存配置文件,文件名为: ehcache.xml 内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;ehcache xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:noNamespaceSchemaLocation=&amp;quot;ehcache.xsd&amp;quot;
         updateCheck=&amp;quot;true&amp;quot; monitoring=&amp;quot;autodetect&amp;quot;
         dynamicConfig=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;diskStore path=&amp;quot;D:\msb\ehcache&amp;quot; /&amp;gt;
    &amp;lt;defaultCache
            maxElementsInMemory=&amp;quot;1000&amp;quot;
            maxElementsOnDisk=&amp;quot;10000000&amp;quot;
            eternal=&amp;quot;false&amp;quot;
            overflowToDisk=&amp;quot;true&amp;quot;
            timeToIdleSeconds=&amp;quot;120&amp;quot;
            timeToLiveSeconds=&amp;quot;120&amp;quot;
            diskExpiryThreadIntervalSeconds=&amp;quot;120&amp;quot;
            memoryStoreEvictionPolicy=&amp;quot;LRU&amp;quot;&amp;gt;
    &amp;lt;/defaultCache&amp;gt;
&amp;lt;/ehcache&amp;gt;
        &amp;lt;!--  Cache配置
        ·           name：Cache的唯一标识
        ·           maxElementsInMemory：内存中最大缓存对象数。
        ·           maxElementsOnDisk：磁盘中最大缓存对象数，若是0表示无穷大。
        ·           eternal：Element是否永久有效，一但设置了，timeout将不起作用。
        ·           overflowToDisk：配置此属性，当内存中Element数量达到maxElementsInMemory时，Ehcache将会Element写到磁盘中。
        ·           timeToIdleSeconds：设置Element在失效前的允许闲置时间。仅当element不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。
        ·           timeToLiveSeconds：设置Element在失效前允许存活时间。最大时间介于创建时间和失效时间之间。仅当element不是永久有效时使用，默认是0.，也就是element存活时间无穷大。
        ·           diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。
        ·           diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。
        ·           memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。     --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;11-逆向工程&#34;&gt;&lt;a href=&#34;#11-逆向工程&#34; class=&#34;headerlink&#34; title=&#34;11 逆向工程&#34;&gt;&lt;/a&gt;11 逆向工程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatisPlus 内容，简略分析，可以参考后面具体内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MyBatis的一个主要的特点就是需要程序员自己编写SQL，那么如果表太多的话，难免会很麻烦，所以MyBatis官方提供了一个逆向工程，可以针对单表自动生成MyBatis执行所需要的代码（包括mapper.xml，mapper.java，pojo）。一般在开发中，常用的逆向工程方式是通过数据库的表生成代码。&lt;/p&gt;
&lt;p&gt;创建maven项目导入逆向工程依赖&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617221042957.png&#34; class=&#34;&#34; title=&#34;image-20220617221042957&#34;&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependencies&amp;gt;
  
    &amp;lt;!-- mysql驱动包 --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;8.0.16&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!-- 日志包，方便查看执行信息--&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.6.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!-- 代码生成工具jar --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mybatis.generator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mybatis-generator-core&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置逆向工程配置文件 在resources目录下放置一个名为generatorConfig.xml的配置文件,文件内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE generatorConfiguration
  PUBLIC &amp;quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&amp;quot;
  &amp;quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&amp;quot;&amp;gt;
&amp;lt;generatorConfiguration&amp;gt;
   &amp;lt;context id=&amp;quot;testTables&amp;quot; targetRuntime=&amp;quot;MyBatis3&amp;quot;&amp;gt;
      &amp;lt;commentGenerator&amp;gt;
         &amp;lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&amp;gt;
         &amp;lt;property name=&amp;quot;suppressAllComments&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;/commentGenerator&amp;gt;
      &amp;lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&amp;gt;
      &amp;lt;!-- &amp;lt;jdbcConnection driverClass=&amp;quot;com.mysql.jdbc.Driver&amp;quot;
         connectionURL=&amp;quot;jdbc:mysql://localhost:3306/mybatis&amp;quot; userId=&amp;quot;root&amp;quot;
         password=&amp;quot;123&amp;quot;&amp;gt;
      &amp;lt;/jdbcConnection&amp;gt; --&amp;gt;
       &amp;lt;jdbcConnection driverClass=&amp;quot;com.mysql.cj.jdbc.Driver&amp;quot;
         connectionURL=&amp;quot;jdbc:mysql://127.0.0.1:3306/mydb?useSSL=false&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=UTF-8&amp;amp;amp;serverTimezone=Asia/Shanghai&amp;amp;amp;allowPublicKeyRetrieval=true&amp;quot;
         userId=&amp;quot;root&amp;quot;
         password=&amp;quot;root&amp;quot;&amp;gt;
      &amp;lt;/jdbcConnection&amp;gt; 
      &amp;lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 
         NUMERIC 类型解析为java.math.BigDecimal --&amp;gt;
      &amp;lt;javaTypeResolver&amp;gt;
         &amp;lt;property name=&amp;quot;forceBigDecimals&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
      &amp;lt;/javaTypeResolver&amp;gt;
      &amp;lt;!-- targetProject:生成PO类的位置 --&amp;gt;
      &amp;lt;javaModelGenerator targetPackage=&amp;quot;com.msb.pojo&amp;quot;
         targetProject=&amp;quot;.\src&amp;quot;&amp;gt;
         &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
         &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
         &amp;lt;!-- 从数据库返回的值被清理前后的空格 --&amp;gt;
         &amp;lt;property name=&amp;quot;trimStrings&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;/javaModelGenerator&amp;gt;
        &amp;lt;!-- targetProject:mapper映射文件生成的位置 --&amp;gt;
      &amp;lt;sqlMapGenerator targetPackage=&amp;quot;com.msb.mapper&amp;quot;
         targetProject=&amp;quot;.\src&amp;quot;&amp;gt;
         &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
         &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
      &amp;lt;/sqlMapGenerator&amp;gt;
      &amp;lt;!-- targetPackage：mapper接口生成的位置 --&amp;gt;
      &amp;lt;javaClientGenerator type=&amp;quot;XMLMAPPER&amp;quot;
         targetPackage=&amp;quot;com.msb.mapper&amp;quot;
         targetProject=&amp;quot;.\src&amp;quot;&amp;gt;
         &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
         &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
      &amp;lt;/javaClientGenerator&amp;gt;
      &amp;lt;!-- 指定数据库表 --&amp;gt;
      
      &amp;lt;table tableName=&amp;quot;dept&amp;quot; domainObjectName=&amp;quot;Dept&amp;quot;
       enableCountByExample=&amp;quot;false&amp;quot; enableUpdateByExample=&amp;quot;false&amp;quot; enableDeleteByExample=&amp;quot;false&amp;quot;    
               enableSelectByExample=&amp;quot;false&amp;quot; selectByExampleQueryId=&amp;quot;false&amp;quot; &amp;gt;
               &amp;lt;columnOverride column=&amp;quot;id&amp;quot; javaType=&amp;quot;Integer&amp;quot; /&amp;gt;
         &amp;lt;/table&amp;gt;
      
   &amp;lt;/context&amp;gt;
&amp;lt;/generatorConfiguration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在resources目录下放置一个名为log4j.properties的配置文件,文件内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;properties&#34;&gt;log4j.rootLogger=debug,stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.err
log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout
log4j.appender.logfile=org.apache.log4j.FileAppender
log4j.appender.logfile.File=d:/msb.log
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d&amp;#123;yyyy-MM-dd HH:mm:ss&amp;#125; %l %F %p %m%n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行逆向工程代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.gennerator;
import org.mybatis.generator.api.MyBatisGenerator;
import org.mybatis.generator.config.Configuration;
import org.mybatis.generator.config.xml.ConfigurationParser;
import org.mybatis.generator.internal.DefaultShellCallback;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
/**
 *
 */
public class GeneratorSqlmap &amp;#123;
    public void generator() throws Exception&amp;#123;
        List&amp;lt;String&amp;gt; warnings = new ArrayList&amp;lt;String&amp;gt;();
        boolean overwrite = true;
        File configFile = new File(&amp;quot;D:\\ideaProjects\\reverse\\target\\classes\\generatorConfig.xml&amp;quot;);
        ConfigurationParser cp = new ConfigurationParser(warnings);
        Configuration config = cp.parseConfiguration(configFile);
        DefaultShellCallback callback = new DefaultShellCallback(overwrite);
        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,
                callback, warnings);
        myBatisGenerator.generate(null);
    &amp;#125;
    public static void main(String[] args) throws Exception &amp;#123;
        try &amp;#123;
            GeneratorSqlmap generatorSqlmap = new GeneratorSqlmap();
            generatorSqlmap.generator();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成的实体类和Mapper接口和Mapper映射文件,包含了基本的CURD功能,哪里需要文件就放哪里&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Mybatis/image-20220617221208040-1665157666426.png&#34; class=&#34;&#34; title=&#34;image-20220617221208040&#34;&gt;

&lt;h1 id=&#34;12-main目录下配置文件打包问题&#34;&gt;&lt;a href=&#34;#12-main目录下配置文件打包问题&#34; class=&#34;headerlink&#34; title=&#34;12 main目录下配置文件打包问题&#34;&gt;&lt;/a&gt;12 main目录下配置文件打包问题&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;build&amp;gt;
    &amp;lt;!--告诉maven将项目源码中的xml文件也进行编译，并放到编译目录中--&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/*.xml&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
        &amp;lt;/resource&amp;gt;
    &amp;lt;/resources&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="框架" />
        <category term="ORM" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/RPC/</id>
        <title>RPC</title>
        <link rel="alternate" href="http://example.com/2022/10/07/RPC/"/>
        <content type="html">&lt;h1 id=&#34;【RPC】&#34;&gt;&lt;a href=&#34;#【RPC】&#34; class=&#34;headerlink&#34; title=&#34;【RPC】&#34;&gt;&lt;/a&gt;【RPC】&lt;/h1&gt;&lt;h2 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;项目结构变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RPC简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RMI实现RPC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HttpClient实现RPC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zookeeper安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zookeeper客户端常用命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;向Zookeeper中注册内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从Zookeeper中发现内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;手写RPC框架&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学习目标&#34;&gt;&lt;a href=&#34;#学习目标&#34; class=&#34;headerlink&#34; title=&#34;学习目标&#34;&gt;&lt;/a&gt;学习目标&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;项目架构变化&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RPC简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RMI实现RPC&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HttpClient实现RPC&lt;/td&gt;
&lt;td&gt;了解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zookeeper安装&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Zookeeper客户端常用命令&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;向Zookeeper中注册内容&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;从zookeeper中发现内容&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;手写RPC框架&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;一、今天学什么？为什么讲？&#34;&gt;&lt;a href=&#34;#一、今天学什么？为什么讲？&#34; class=&#34;headerlink&#34; title=&#34;一、今天学什么？为什么讲？&#34;&gt;&lt;/a&gt;一、今天学什么？为什么讲？&lt;/h3&gt;&lt;p&gt;​	 现在学习RPC。后期学习的Dubbo是一个RPC框架，学习好现在的内容，学习Dubbo将会变得容易一些。&lt;/p&gt;
&lt;h3 id=&#34;二、项目架构变化&#34;&gt;&lt;a href=&#34;#二、项目架构变化&#34; class=&#34;headerlink&#34; title=&#34;二、项目架构变化&#34;&gt;&lt;/a&gt;二、项目架构变化&lt;/h3&gt;&lt;h4 id=&#34;1-单体架构&#34;&gt;&lt;a href=&#34;#1-单体架构&#34; class=&#34;headerlink&#34; title=&#34;1     单体架构&#34;&gt;&lt;/a&gt;1     单体架构&lt;/h4&gt;&lt;h5 id=&#34;1-1-架构图&#34;&gt;&lt;a href=&#34;#1-1-架构图&#34; class=&#34;headerlink&#34; title=&#34;1.1   架构图&#34;&gt;&lt;/a&gt;1.1   架构图&lt;/h5&gt;&lt;p&gt;​	单体架构就是一个项目里面包含这个项目中全部代码。一个应用搞定全部功能。&lt;/p&gt;
&lt;p&gt;​	DNS 服务器可以是单映射，也可以配置多个映射。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/RPC/rpc-01.png&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;1-2-软件代码结构&#34;&gt;&lt;a href=&#34;#1-2-软件代码结构&#34; class=&#34;headerlink&#34; title=&#34;1.2   软件代码结构&#34;&gt;&lt;/a&gt;1.2   软件代码结构&lt;/h5&gt;&lt;p&gt;​	在单体架构项目中，团队都是通过包(package)进行区分每个模块。&lt;/p&gt;
&lt;p&gt;​	总体包结构：com.msb.*.分层包。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;项目名：
  -- com
    --msb
      -- common
        -- utils
      --user
        -- controller
        -- service
        -- mapper
      -- sys
        -- controller
        -- service
        -- mapper
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-3-优缺点&#34;&gt;&lt;a href=&#34;#1-3-优缺点&#34; class=&#34;headerlink&#34; title=&#34;1.3   优缺点&#34;&gt;&lt;/a&gt;1.3   优缺点&lt;/h4&gt;&lt;h5 id=&#34;1-3-1-优点&#34;&gt;&lt;a href=&#34;#1-3-1-优点&#34; class=&#34;headerlink&#34; title=&#34;1.3.1    优点&#34;&gt;&lt;/a&gt;1.3.1    优点&lt;/h5&gt;&lt;p&gt;​	部署简单&lt;/p&gt;
&lt;p&gt;​	维护方便&lt;/p&gt;
&lt;p&gt;​	成本低&lt;/p&gt;
&lt;h5 id=&#34;1-3-2-缺点&#34;&gt;&lt;a href=&#34;#1-3-2-缺点&#34; class=&#34;headerlink&#34; title=&#34;1.3.2    缺点&#34;&gt;&lt;/a&gt;1.3.2    缺点&lt;/h5&gt;&lt;p&gt;​	当项目规模大、用户访问频率高、并发量大、数据量大时，会大大降低程序执行效率，甚至出现服务器宕机等情况。&lt;/p&gt;
&lt;h4 id=&#34;1-4-适用项目&#34;&gt;&lt;a href=&#34;#1-4-适用项目&#34; class=&#34;headerlink&#34; title=&#34;1.4   适用项目&#34;&gt;&lt;/a&gt;1.4   适用项目&lt;/h4&gt;&lt;p&gt;传统管理项目，小型互联网项目。&lt;/p&gt;
&lt;h4 id=&#34;2-分布式架构&#34;&gt;&lt;a href=&#34;#2-分布式架构&#34; class=&#34;headerlink&#34; title=&#34;2     分布式架构&#34;&gt;&lt;/a&gt;2     分布式架构&lt;/h4&gt;&lt;h5 id=&#34;2-1-架构图（简易版）&#34;&gt;&lt;a href=&#34;#2-1-架构图（简易版）&#34; class=&#34;headerlink&#34; title=&#34;2.1   架构图（简易版）&#34;&gt;&lt;/a&gt;2.1   架构图（简易版）&lt;/h5&gt;&lt;p&gt;​	分布式架构会把一个项目按照特定要求（多按照模块或功能）拆分成多个项目，每个项目分别部署到不同的服务器上。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/RPC/rpc-02.png&#34; class=&#34;&#34;&gt;


&lt;h5 id=&#34;2-2-软件代码结构&#34;&gt;&lt;a href=&#34;#2-2-软件代码结构&#34; class=&#34;headerlink&#34; title=&#34;2.2   软件代码结构&#34;&gt;&lt;/a&gt;2.2   软件代码结构&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;项目1：
  --com.msb.xxx
    -- controller
    -- service
    -- mapper
项目2
  --com.msb.mmm
    -- controller
    -- service
    -- mapper
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-3-优缺点&#34;&gt;&lt;a href=&#34;#2-3-优缺点&#34; class=&#34;headerlink&#34; title=&#34;2.3   优缺点&#34;&gt;&lt;/a&gt;2.3   优缺点&lt;/h4&gt;&lt;h5 id=&#34;2-3-1-优点&#34;&gt;&lt;a href=&#34;#2-3-1-优点&#34; class=&#34;headerlink&#34; title=&#34;2.3.1    优点&#34;&gt;&lt;/a&gt;2.3.1    优点&lt;/h5&gt;&lt;p&gt;​	增大了系统可用性。减少单点故障，导致整个应用不可用。&lt;/p&gt;
&lt;p&gt;​	增加重用性。因为模块化，所以重用性更高。&lt;/p&gt;
&lt;p&gt;​	增加可扩展性。有新的模块增加新的项目即可。&lt;/p&gt;
&lt;p&gt;​	增加每个模块的负载能力。因为每个模块都是一个项目，所以每个模块的负载能力更强。&lt;/p&gt;
&lt;h5 id=&#34;2-3-2-缺点&#34;&gt;&lt;a href=&#34;#2-3-2-缺点&#34; class=&#34;headerlink&#34; title=&#34;2.3.2    缺点&#34;&gt;&lt;/a&gt;2.3.2    缺点&lt;/h5&gt;&lt;p&gt;​	成本更高。&lt;/p&gt;
&lt;p&gt;​	架构更加复杂。&lt;/p&gt;
&lt;p&gt;​	整体响应之间变长，一些业务需要多项目通信后给出结果。&lt;/p&gt;
&lt;p&gt;​	吞吐量更大。吞吐量&amp;#x3D; 请求数&amp;#x2F;秒。&lt;/p&gt;
&lt;h4 id=&#34;2-4-待解决问题&#34;&gt;&lt;a href=&#34;#2-4-待解决问题&#34; class=&#34;headerlink&#34; title=&#34;2.4   待解决问题&#34;&gt;&lt;/a&gt;2.4   待解决问题&lt;/h4&gt;&lt;p&gt;​	分布式架构中各个模块如何进行通信？&lt;/p&gt;
&lt;p&gt;​	可以使用Http协议，也可以使用RPC协议通信，也可以使用其他的通信方式。我们本阶段使用的是RPC协议，因为它比HTTP更适合项目内部通信。&lt;/p&gt;
&lt;h3 id=&#34;三、RPC简介&#34;&gt;&lt;a href=&#34;#三、RPC简介&#34; class=&#34;headerlink&#34; title=&#34;三、RPC简介&#34;&gt;&lt;/a&gt;三、RPC简介&lt;/h3&gt;&lt;h4 id=&#34;1-RFC&#34;&gt;&lt;a href=&#34;#1-RFC&#34; class=&#34;headerlink&#34; title=&#34;1     RFC&#34;&gt;&lt;/a&gt;1     RFC&lt;/h4&gt;&lt;p&gt;​	RFC(Request For Comments) 是由互联网工程任务组(IETF)发布的文件集。文件集中每个文件都有自己唯一编号，例如：rfc1831。目前RFC文件由互联网协会(Internet Society，ISOC)赞助发型。&lt;/p&gt;
&lt;p&gt;​	RPC就收集到了rfc 1831中。可以通过下面网址查看：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kYXRhdHJhY2tlci5pZXRmLm9yZy9kb2MvcmZjMTgzMS8=&#34;&gt;https://datatracker.ietf.org/doc/rfc1831/&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-RPC&#34;&gt;&lt;a href=&#34;#2-RPC&#34; class=&#34;headerlink&#34; title=&#34;2     RPC&#34;&gt;&lt;/a&gt;2     RPC&lt;/h4&gt;&lt;p&gt;​	RPC在rfc 1831中收录 ，RPC（Remote Procedure Call） 远程过程调用协议&lt;/p&gt;
&lt;p&gt;​	RPC协议规定允许互联网中一台主机程序调用另一台主机程序，而程序员无需对这个交互过程进行编程。在RPC协议中强调当A程序调用B程序中功能或方法时，A是不知道B中方法具体实现的。&lt;/p&gt;
&lt;p&gt;​	RPC是上层协议，底层可以基于TCP协议，也可以基于HTTP协议。一般我们说RPC都是基于RPC的具体实现，如：Dubbo框架。从广义上讲只要是满足网络中进行通讯调用都统称为RPC，甚至HTTP协议都可以说是RPC的具体实现，但是具体分析看来RPC协议要比HTTP协议更加高效，基于RPC的框架功能更多。&lt;/p&gt;
&lt;p&gt;​	RPC协议是基于分布式架构而出现的，所以RPC在分布式项目中有着得天独厚的优势。&lt;/p&gt;
&lt;h4 id=&#34;3-RPC和HTTP对比&#34;&gt;&lt;a href=&#34;#3-RPC和HTTP对比&#34; class=&#34;headerlink&#34; title=&#34;3     RPC和HTTP对比&#34;&gt;&lt;/a&gt;3     RPC和HTTP对比&lt;/h4&gt;&lt;h5 id=&#34;3-1-具体实现&#34;&gt;&lt;a href=&#34;#3-1-具体实现&#34; class=&#34;headerlink&#34; title=&#34;3.1   具体实现&#34;&gt;&lt;/a&gt;3.1   具体实现&lt;/h5&gt;&lt;p&gt;​	RPC：可以基于TCP协议，也可以基于HTTP协议。&lt;/p&gt;
&lt;p&gt;​	HTTP：基于HTTP协议&lt;/p&gt;
&lt;h5 id=&#34;3-2-效率&#34;&gt;&lt;a href=&#34;#3-2-效率&#34; class=&#34;headerlink&#34; title=&#34;3.2   效率&#34;&gt;&lt;/a&gt;3.2   效率&lt;/h5&gt;&lt;p&gt;​	RPC：自定义具体实现可以减少很多无用的报文内容，使得报文体积更小。&lt;/p&gt;
&lt;p&gt;​	HTTP：如果是HTTP 1.1 报文中很多内容都是无用的。如果是HTTP2.0以后和RPC相差不大，比RPC少的可能就是一些服务治理等功能。&lt;/p&gt;
&lt;h5 id=&#34;3-3-连接方式&#34;&gt;&lt;a href=&#34;#3-3-连接方式&#34; class=&#34;headerlink&#34; title=&#34;3.3   连接方式&#34;&gt;&lt;/a&gt;3.3   连接方式&lt;/h5&gt;&lt;p&gt;​	RPC：长连接支持。&lt;/p&gt;
&lt;p&gt;​	HTTP：每次连接都是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbmV2ZXJtb3Jld2FuZy9wLzg5MDY4MzMuaHRtbA==&#34;&gt;三次握手四次挥手&lt;/span&gt;。&lt;/p&gt;
&lt;h5 id=&#34;3-4-性能&#34;&gt;&lt;a href=&#34;#3-4-性能&#34; class=&#34;headerlink&#34; title=&#34;3.4   性能&#34;&gt;&lt;/a&gt;3.4   性能&lt;/h5&gt;&lt;p&gt;​	RPC可以基于很多序列化方式。如：thrift&lt;/p&gt;
&lt;p&gt;​	HTTP 主要是通过JSON，序列化和反序列效率更低。&lt;/p&gt;
&lt;h5 id=&#34;3-5-注册中心&#34;&gt;&lt;a href=&#34;#3-5-注册中心&#34; class=&#34;headerlink&#34; title=&#34;3.5   注册中心&#34;&gt;&lt;/a&gt;3.5   注册中心&lt;/h5&gt;&lt;p&gt;​	RPC ：一般RPC框架都带有注册中心。&lt;/p&gt;
&lt;p&gt;​	HTTP：都是直连。&lt;/p&gt;
&lt;h5 id=&#34;3-6-负载均衡&#34;&gt;&lt;a href=&#34;#3-6-负载均衡&#34; class=&#34;headerlink&#34; title=&#34;3.6   负载均衡&#34;&gt;&lt;/a&gt;3.6   负载均衡&lt;/h5&gt;&lt;p&gt;​	RPC：绝大多数RPC框架都带有负载均衡测量。&lt;/p&gt;
&lt;p&gt;​	HTTP：一般都需要借助第三方工具。如：nginx&lt;/p&gt;
&lt;h5 id=&#34;3-7-综合结论&#34;&gt;&lt;a href=&#34;#3-7-综合结论&#34; class=&#34;headerlink&#34; title=&#34;3.7   综合结论&#34;&gt;&lt;/a&gt;3.7   综合结论&lt;/h5&gt;&lt;p&gt;​	RPC框架一般都带有丰富的服务治理等功能，更适合企业内部接口调用。而HTTP更适合多平台之间相互调用。&lt;/p&gt;
&lt;h3 id=&#34;四、HttpClient实现RPC&#34;&gt;&lt;a href=&#34;#四、HttpClient实现RPC&#34; class=&#34;headerlink&#34; title=&#34;四、HttpClient实现RPC&#34;&gt;&lt;/a&gt;四、HttpClient实现RPC&lt;/h3&gt;&lt;h4 id=&#34;1-HttpClient简介&#34;&gt;&lt;a href=&#34;#1-HttpClient简介&#34; class=&#34;headerlink&#34; title=&#34;1     HttpClient简介&#34;&gt;&lt;/a&gt;1     HttpClient简介&lt;/h4&gt;&lt;p&gt;​	在JDK中java.net包下提供了用户HTTP访问的基本功能，但是它缺少灵活性或许多应用所需要的功能。&lt;/p&gt;
&lt;p&gt;​	HttpClient起初是Apache Jakarta Common 的子项目。用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本。2007年成为顶级项目。&lt;/p&gt;
&lt;p&gt;​	通俗解释：HttpClient可以实现使用Java代码完成标准HTTP请求及响应。&lt;/p&gt;
&lt;h4 id=&#34;2-代码实现&#34;&gt;&lt;a href=&#34;#2-代码实现&#34; class=&#34;headerlink&#34; title=&#34;2     代码实现&#34;&gt;&lt;/a&gt;2     代码实现&lt;/h4&gt;&lt;h5 id=&#34;2-1-服务端&#34;&gt;&lt;a href=&#34;#2-1-服务端&#34; class=&#34;headerlink&#34; title=&#34;2.1   服务端&#34;&gt;&lt;/a&gt;2.1   服务端&lt;/h5&gt;&lt;p&gt;​	新建项目HttpClientServer&lt;/p&gt;
&lt;h5 id=&#34;2-1-1-新建控制器&#34;&gt;&lt;a href=&#34;#2-1-1-新建控制器&#34; class=&#34;headerlink&#34; title=&#34;2.1.1    新建控制器&#34;&gt;&lt;/a&gt;2.1.1    新建控制器&lt;/h5&gt;&lt;p&gt;com.msb.controller.DemoController&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class DemoController &amp;#123;
    @RequestMapping(&amp;quot;/demo&amp;quot;)
    @ResponseBody
    public String demo(String param)&amp;#123;
        return &amp;quot;demo&amp;quot;+param;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-1-2-新建启动器&#34;&gt;&lt;a href=&#34;#2-1-2-新建启动器&#34; class=&#34;headerlink&#34; title=&#34;2.1.2    新建启动器&#34;&gt;&lt;/a&gt;2.1.2    新建启动器&lt;/h5&gt;&lt;p&gt;​	新建启动器&lt;/p&gt;
&lt;p&gt;com.msb.HttpClientServerApplication&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
public class HttpClientServerApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
    SpringApplication.run(HttpClientServerApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-2-客户端&#34;&gt;&lt;a href=&#34;#2-2-客户端&#34; class=&#34;headerlink&#34; title=&#34;2.2   客户端&#34;&gt;&lt;/a&gt;2.2   客户端&lt;/h4&gt;&lt;p&gt;​	新建HttpClientDemo项目&lt;/p&gt;
&lt;h5 id=&#34;2-2-1-添加依赖&#34;&gt;&lt;a href=&#34;#2-2-1-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;2.2.1    添加依赖&#34;&gt;&lt;/a&gt;2.2.1    添加依赖&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.5.10&amp;lt;/version&amp;gt;
 &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-2-2-新建类&#34;&gt;&lt;a href=&#34;#2-2-2-新建类&#34; class=&#34;headerlink&#34; title=&#34;2.2.2    新建类&#34;&gt;&lt;/a&gt;2.2.2    新建类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.HttpClientDemo，编写主方法。&lt;/p&gt;
&lt;h6 id=&#34;2-2-2-1-使用GET方法访问&#34;&gt;&lt;a href=&#34;#2-2-2-1-使用GET方法访问&#34; class=&#34;headerlink&#34; title=&#34;2.2.2.1 使用GET方法访问&#34;&gt;&lt;/a&gt;2.2.2.1 使用GET方法访问&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
    try &amp;#123;
        //创建http工具（理解成:浏览器） 发起请求，解析响应
        CloseableHttpClient httpClient = HttpClients.createDefault();
        //请求路径
        URIBuilder uriBuilder = new URIBuilder(&amp;quot;http://localhost:8080/demo&amp;quot;);
        uriBuilder.addParameter(&amp;quot;param&amp;quot;, &amp;quot;get123&amp;quot;);
        //创建HttpGet请求对象
        HttpGet get = new HttpGet(uriBuilder.build());
        //创建响应对象
        CloseableHttpResponse response = httpClient.execute(get);
        //由于响应体是字符串，因此把HttpEntity类型转换为字符串类型，并设置字符编码
        String result = EntityUtils.toString(response.getEntity(), &amp;quot;utf-8&amp;quot;);
        //输出结果
        System.out.println(result);
        //释放资源
        response.close();
        httpClient.close();
    &amp;#125; catch (URISyntaxException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (IOException e) &amp;#123;
        e.printStackTrace();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;2-2-2-2-使用POST方式访问&#34;&gt;&lt;a href=&#34;#2-2-2-2-使用POST方式访问&#34; class=&#34;headerlink&#34; title=&#34;2.2.2.2 使用POST方式访问&#34;&gt;&lt;/a&gt;2.2.2.2 使用POST方式访问&lt;/h6&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class HttpClientDemo &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            //创建http工具（理解成:浏览器） 发起请求，解析响应
            CloseableHttpClient httpClient = HttpClients.createDefault();
            //创建HttpPOST请求对象
            HttpPost post = new HttpPost(&amp;quot;http://localhost:8080/demo&amp;quot;);
            //所有请求参数
            List&amp;lt;NameValuePair&amp;gt; params = new ArrayList&amp;lt;&amp;gt;();
            params.add(new BasicNameValuePair(&amp;quot;param&amp;quot;,&amp;quot;123&amp;quot;));
            //创建HttpEntity接口的文本实现类的对象，放入参数并设置编码
            HttpEntity httpEntity = new UrlEncodedFormEntity(params,&amp;quot;utf-8&amp;quot;);
            //放入到HttpPost对象中
            post.setEntity(httpEntity);            
            //创建响应对象
            CloseableHttpResponse response = httpClient.execute(post);
            //由于响应体是字符串，因此把HttpEntity类型转换为字符串类型
            String result = EntityUtils.toString(response.getEntity());
            //输出结果
            System.out.println(result);
            //释放资源
            response.close();
            httpClient.close();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-Jackson用法&#34;&gt;&lt;a href=&#34;#3-Jackson用法&#34; class=&#34;headerlink&#34; title=&#34;3. Jackson用法&#34;&gt;&lt;/a&gt;3. Jackson用法&lt;/h4&gt;&lt;h5 id=&#34;3-1-把对象转换为json字符串&#34;&gt;&lt;a href=&#34;#3-1-把对象转换为json字符串&#34; class=&#34;headerlink&#34; title=&#34;3.1   把对象转换为json字符串&#34;&gt;&lt;/a&gt;3.1   把对象转换为json字符串&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;ObjectMapper objectMapper = new ObjectMapper();
People peo = new People();
objectMapper.writeValueAsString(peo);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-2-把json字符串转换为对象&#34;&gt;&lt;a href=&#34;#3-2-把json字符串转换为对象&#34; class=&#34;headerlink&#34; title=&#34;3.2   把json字符串转换为对象&#34;&gt;&lt;/a&gt;3.2   把json字符串转换为对象&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;ObjectMapper objectMapper = new ObjectMapper();
People peo = objectMapper.readValue(content, People.class);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;3-3-把json字符串转换为List集合&#34;&gt;&lt;a href=&#34;#3-3-把json字符串转换为List集合&#34; class=&#34;headerlink&#34; title=&#34;3.3   把json字符串转换为List集合&#34;&gt;&lt;/a&gt;3.3   把json字符串转换为List集合&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;ObjectMapper objectMapper = new ObjectMapper();
JavaType javaType = objectMapper.getTypeFactory().constructParametricType(List.class, People.class);
List&amp;lt;People&amp;gt; list = objectMapper.readValue(content, javaType);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-HttpClient请求包含JSON&#34;&gt;&lt;a href=&#34;#4-HttpClient请求包含JSON&#34; class=&#34;headerlink&#34; title=&#34;4     HttpClient请求包含JSON&#34;&gt;&lt;/a&gt;4     HttpClient请求包含JSON&lt;/h4&gt;&lt;h5 id=&#34;4-1-java代码实现&#34;&gt;&lt;a href=&#34;#4-1-java代码实现&#34; class=&#34;headerlink&#34; title=&#34;4.1   java代码实现&#34;&gt;&lt;/a&gt;4.1   java代码实现&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class HttpClientDemo &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            CloseableHttpClient httpClient = HttpClients.createDefault();
            HttpPost post = new HttpPost(&amp;quot;http://localhost:8080/demo&amp;quot;);
            HttpEntity httpEntity= null;
            String json = &amp;quot;&amp;#123;&amp;#125;&amp;quot;;
            StringEntity entity = new StringEntity(json, ContentType.APPLICATION_JSON);
            post.setEntity(entity);
            CloseableHttpResponse response = httpClient.execute(post);
            String result = EntityUtils.toString(response.getEntity());
            System.out.println(result);
            response.close();
            httpClient.close();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;

 @Test
    public void testInputSteam()&amp;#123;
        try &amp;#123;

            CloseableHttpClient httpClient = HttpClients.createDefault();

            URIBuilder uriBuilder = new URIBuilder(&amp;quot;http://localhost:8080/demo4&amp;quot;);

            HttpPost httpPost = new HttpPost(uriBuilder.build());
            //创建集合
            List&amp;lt;User&amp;gt; users = new ArrayList&amp;lt;&amp;gt;();
            users.add(new User(2,&amp;quot;李四&amp;quot;));
            users.add(new User(1,&amp;quot;张三&amp;quot;));
            //将集合对象转化成JSON字符串
            ObjectMapper objectMapper = new ObjectMapper();
            String UserJson = objectMapper.writeValueAsString(users);
            System.out.println(UserJson);
            StringEntity stringEntity = new StringEntity(UserJson, 		  ContentType.APPLICATION_JSON);
            //设置请求体
            httpPost.setEntity(stringEntity);
            CloseableHttpResponse response= httpClient.execute(httpPost);
            String result = EntityUtils.toString(response.getEntity());
            System.out.println(result);

            response.close();
            httpClient.close();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-控制器接口参数&#34;&gt;&lt;a href=&#34;#5-控制器接口参数&#34; class=&#34;headerlink&#34; title=&#34;5     控制器接口参数&#34;&gt;&lt;/a&gt;5     控制器接口参数&lt;/h4&gt;&lt;p&gt;​	@RequestBody把请求体中流数据转换为指定的对象。多用在请求参数是json数据且请求的Content-Type&amp;#x3D;”application&amp;#x2F;json”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;/demo4&amp;quot;)
@ResponseBody
public String demo4(@RequestBody List&amp;lt;People&amp;gt; list) &amp;#123;
    System.out.println(list);
    return list.toString();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-Ajax发送json参数写法&#34;&gt;&lt;a href=&#34;#6-Ajax发送json参数写法&#34; class=&#34;headerlink&#34; title=&#34;6   Ajax发送json参数写法&#34;&gt;&lt;/a&gt;6   Ajax发送json参数写法&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;var json = &amp;#39;[&amp;#123;&amp;quot;id&amp;quot;:123,&amp;quot;name&amp;quot;:&amp;quot;msb&amp;quot;&amp;#125;,&amp;#123;&amp;quot;id&amp;quot;:123,&amp;quot;name&amp;quot;:&amp;quot;mashibing&amp;quot;&amp;#125;]&amp;#39;;
 $.ajax(&amp;#123;
     url:&amp;#39;/demo5&amp;#39;,
     type:&amp;#39;post&amp;#39;,
     success:function(data)&amp;#123;
         alert(data);
         for(var i = 0 ;i&amp;lt;data.length;i++)&amp;#123;

             alert(data[i].id +&amp;quot;  &amp;quot;+data[i].name);
         &amp;#125;
     &amp;#125;,
     contentType:&amp;#39;application/json&amp;#39;,//请求体中内容类型
     dataType:&amp;#39;json&amp;#39;,//响应内容类型。
     data:json
 &amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-跨域&#34;&gt;&lt;a href=&#34;#7-跨域&#34; class=&#34;headerlink&#34; title=&#34;7     跨域&#34;&gt;&lt;/a&gt;7     跨域&lt;/h4&gt;&lt;p&gt;​	跨域：协议、ip、端口中只要有一个不同就是跨域请求。&lt;/p&gt;
&lt;p&gt;​	同源策略：浏览器默认只允许ajax访问同源(协议、ip、端口都相同)内容。&lt;/p&gt;
&lt;p&gt;​	解决同源策略：&lt;/p&gt;
&lt;p&gt;​	在控制器接口上添加@CrossOrigin。表示允许跨域。本质在响应头中添加Access-Control-Allow-Origin: *&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;var json = &amp;#39;[&amp;#123;&amp;quot;id&amp;quot;:123,&amp;quot;name&amp;quot;:&amp;quot;msb&amp;quot;&amp;#125;,&amp;#123;&amp;quot;id&amp;quot;:456,&amp;quot;name&amp;quot;:&amp;quot;mashibing&amp;quot;&amp;#125;]&amp;#39;;
 $.ajax(&amp;#123;
     url:&amp;#39;/demo5&amp;#39;,
     type:&amp;#39;post&amp;#39;,
     success:function(data)&amp;#123;
         alert(data);
         for(var i = 0 ;i&amp;lt;data.length;i++)&amp;#123;

             alert(data[i].id +&amp;quot;  &amp;quot;+data[i].name);
         &amp;#125;
     &amp;#125;,
     contentType:&amp;#39;application/json&amp;#39;,//请求体中内容类型
     dataType:&amp;#39;json&amp;#39;,//响应内容类型。
     data:json
 &amp;#125;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;五、RMI实现RPC&#34;&gt;&lt;a href=&#34;#五、RMI实现RPC&#34; class=&#34;headerlink&#34; title=&#34;五、RMI实现RPC&#34;&gt;&lt;/a&gt;五、RMI实现RPC&lt;/h3&gt;&lt;h4 id=&#34;1-RMI简-介&#34;&gt;&lt;a href=&#34;#1-RMI简-介&#34; class=&#34;headerlink&#34; title=&#34;1     RMI简 介&#34;&gt;&lt;/a&gt;1     RMI简 介&lt;/h4&gt;&lt;p&gt;​	RMI(Remote Method Invocation) 远程方法调用。&lt;/p&gt;
&lt;p&gt;​	RMI是从JDK1.2推出的功能，它可以实现在一个Java应用中可以像调用本地方法一样调用另一个服务器中Java应用（JVM）中的内容。&lt;/p&gt;
&lt;p&gt;​	RMI 是Java语言的远程调用，无法实现跨语言。&lt;/p&gt;
&lt;h4 id=&#34;2-执行流程&#34;&gt;&lt;a href=&#34;#2-执行流程&#34; class=&#34;headerlink&#34; title=&#34;2     执行流程&#34;&gt;&lt;/a&gt;2     执行流程&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/RPC/rpc-03.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	Registry(注册表)是放置所有服务器对象的命名空间。 每次服务端创建一个对象时，它都会使用bind()或rebind()方法注册该对象。 这些是使用称为绑定名称的唯一名称注册的。 &lt;/p&gt;
&lt;p&gt;​	要调用远程对象，客户端需要该对象的引用。即通过服务端绑定的名称从注册表中获取对象(lookup()方法)。&lt;/p&gt;
&lt;h4 id=&#34;3-API介绍&#34;&gt;&lt;a href=&#34;#3-API介绍&#34; class=&#34;headerlink&#34; title=&#34;3     API介绍&#34;&gt;&lt;/a&gt;3     API介绍&lt;/h4&gt;&lt;h5 id=&#34;3-1-Remote&#34;&gt;&lt;a href=&#34;#3-1-Remote&#34; class=&#34;headerlink&#34; title=&#34;3.1   Remote&#34;&gt;&lt;/a&gt;3.1   Remote&lt;/h5&gt;&lt;p&gt;​	java.rmi.Remote 定义了此接口为远程调用接口。如果接口被外部调用，需要继承此接口。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface Remote&amp;#123;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-2-RemoteException&#34;&gt;&lt;a href=&#34;#3-2-RemoteException&#34; class=&#34;headerlink&#34; title=&#34;3.2   RemoteException&#34;&gt;&lt;/a&gt;3.2   RemoteException&lt;/h4&gt;&lt;p&gt;​	java.rmi.RemoteException&lt;/p&gt;
&lt;p&gt;​	继承了Remote接口的接口中，如果方法是允许被远程调用的，需要抛出此异常。&lt;/p&gt;
&lt;h4 id=&#34;3-3-UnicastRemoteObject&#34;&gt;&lt;a href=&#34;#3-3-UnicastRemoteObject&#34; class=&#34;headerlink&#34; title=&#34;3.3   UnicastRemoteObject&#34;&gt;&lt;/a&gt;3.3   UnicastRemoteObject&lt;/h4&gt;&lt;p&gt;​	java.rmi.server.UnicastRemoteObject&lt;/p&gt;
&lt;p&gt;​	此类实现了Remote接口和Serializable接口。&lt;/p&gt;
&lt;p&gt;​	自定义接口实现类除了实现自定义接口还需要继承此类。&lt;/p&gt;
&lt;h4 id=&#34;3-4-LocateRegistry&#34;&gt;&lt;a href=&#34;#3-4-LocateRegistry&#34; class=&#34;headerlink&#34; title=&#34;3.4   LocateRegistry&#34;&gt;&lt;/a&gt;3.4   LocateRegistry&lt;/h4&gt;&lt;p&gt;​	java.rmi.registry.LocateRegistry&lt;/p&gt;
&lt;p&gt;​	可以通过LocateRegistry在本机上创建Registry，通过特定的端口就可以访问这个Registry。&lt;/p&gt;
&lt;h4 id=&#34;3-5-Naming&#34;&gt;&lt;a href=&#34;#3-5-Naming&#34; class=&#34;headerlink&#34; title=&#34;3.5   Naming&#34;&gt;&lt;/a&gt;3.5   Naming&lt;/h4&gt;&lt;p&gt;​	java.rmi.Naming&lt;/p&gt;
&lt;p&gt;​	Naming定义了发布内容可访问RMI名称。也是通过Naming获取到指定的远程方法。&lt;/p&gt;
&lt;h4 id=&#34;4-代码实现&#34;&gt;&lt;a href=&#34;#4-代码实现&#34; class=&#34;headerlink&#34; title=&#34;4     代码实现&#34;&gt;&lt;/a&gt;4     代码实现&lt;/h4&gt;&lt;h5 id=&#34;4-1-服务端创建&#34;&gt;&lt;a href=&#34;#4-1-服务端创建&#34; class=&#34;headerlink&#34; title=&#34;4.1   服务端创建&#34;&gt;&lt;/a&gt;4.1   服务端创建&lt;/h5&gt;&lt;p&gt;​	创建RmiServer项目&lt;/p&gt;
&lt;h5 id=&#34;4-1-1-编写接口&#34;&gt;&lt;a href=&#34;#4-1-1-编写接口&#34; class=&#34;headerlink&#34; title=&#34;4.1.1    编写接口&#34;&gt;&lt;/a&gt;4.1.1    编写接口&lt;/h5&gt;&lt;p&gt;​	com.msb.service.DemoService 编写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface DemoService extends Remote &amp;#123;
    String demo(String demo) throws RemoteException;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-1-2-编写实现类&#34;&gt;&lt;a href=&#34;#4-1-2-编写实现类&#34; class=&#34;headerlink&#34; title=&#34;4.1.2    编写实现类&#34;&gt;&lt;/a&gt;4.1.2    编写实现类&lt;/h5&gt;&lt;p&gt;​	com.msb.service.impl.DemoServiceImpl 编写。&lt;/p&gt;
&lt;p&gt;​	注意：构造方法是public的。默认生成protected&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoServiceImpl extends UnicastRemoteObject implements DemoService &amp;#123;
    public DemoServiceImpl() throws RemoteException &amp;#123;
    &amp;#125;
    @Override
    public String demo(String demo) throws RemoteException &amp;#123;
        return demo+&amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-1-3-编写主方法&#34;&gt;&lt;a href=&#34;#4-1-3-编写主方法&#34; class=&#34;headerlink&#34; title=&#34;4.1.3    编写主方法&#34;&gt;&lt;/a&gt;4.1.3    编写主方法&lt;/h5&gt;&lt;p&gt;​	编写com.msb.DemoServer类，生成主方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoServiceImpl extends UnicastRemoteObject implements DemoService &amp;#123;
    public DemoServiceImpl() throws RemoteException &amp;#123;
    &amp;#125;
    @Override
    public String demo(String demo) throws RemoteException &amp;#123;
        return demo+&amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoStart &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            //1创建接口实现类
            RmiDemo rmiDemo = new RmiDemoImpl();
            //2创建注册表
            LocateRegistry.createRegistry(8099);
            //3绑定服务
            Naming.bind(&amp;quot;rmi://localhost:8099/rmiDemo&amp;quot;,rmiDemo);

            System.out.println(&amp;quot;服务器启动！&amp;quot;);
        &amp;#125; catch (RemoteException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (AlreadyBoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (MalformedURLException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-1-4-运行项目&#34;&gt;&lt;a href=&#34;#4-1-4-运行项目&#34; class=&#34;headerlink&#34; title=&#34;4.1.4    运行项目&#34;&gt;&lt;/a&gt;4.1.4    运行项目&lt;/h5&gt;&lt;p&gt;​	运行后项目，项目一直处于启动状态，表示可以远程访问此项目中的远程方法。&lt;/p&gt;
&lt;h4 id=&#34;4-2-创建客户端代码&#34;&gt;&lt;a href=&#34;#4-2-创建客户端代码&#34; class=&#34;headerlink&#34; title=&#34;4.2   创建客户端代码&#34;&gt;&lt;/a&gt;4.2   创建客户端代码&lt;/h4&gt;&lt;p&gt;​	创建项目RmiClient&lt;/p&gt;
&lt;h5 id=&#34;4-2-1-复制服务端接口&#34;&gt;&lt;a href=&#34;#4-2-1-复制服务端接口&#34; class=&#34;headerlink&#34; title=&#34;4.2.1    复制服务端接口&#34;&gt;&lt;/a&gt;4.2.1    复制服务端接口&lt;/h5&gt;&lt;p&gt;​	把服务端com.msb.service.DemoService粘贴到项目中&lt;/p&gt;
&lt;h5 id=&#34;4-2-2-创建主方法类&#34;&gt;&lt;a href=&#34;#4-2-2-创建主方法类&#34; class=&#34;headerlink&#34; title=&#34;4.2.2    创建主方法类&#34;&gt;&lt;/a&gt;4.2.2    创建主方法类&lt;/h5&gt;&lt;p&gt;​	新建com.msb.DemoClient&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoServiceImpl extends UnicastRemoteObject implements DemoService &amp;#123;
    public DemoServiceImpl() throws RemoteException &amp;#123;
    &amp;#125;
    @Override
    public String demo(String demo) throws RemoteException &amp;#123;
        return demo+&amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;六、Zookeeper安装&#34;&gt;&lt;a href=&#34;#六、Zookeeper安装&#34; class=&#34;headerlink&#34; title=&#34;六、Zookeeper安装&#34;&gt;&lt;/a&gt;六、Zookeeper安装&lt;/h3&gt;&lt;h4 id=&#34;1-Zookeeper简介&#34;&gt;&lt;a href=&#34;#1-Zookeeper简介&#34; class=&#34;headerlink&#34; title=&#34;1     Zookeeper简介&#34;&gt;&lt;/a&gt;1     Zookeeper简介&lt;/h4&gt;&lt;p&gt;​	zookeeper分布式管理软件。常用它做注册中心（依赖zookeeper的发布&amp;#x2F;订阅功能）、配置文件中心、分布式锁配置、集群管理等。&lt;/p&gt;
&lt;p&gt;​	zookeeper一共就有两个版本。主要使用的是java语言写的。&lt;/p&gt;
&lt;h4 id=&#34;2-安装&#34;&gt;&lt;a href=&#34;#2-安装&#34; class=&#34;headerlink&#34; title=&#34;2     安装&#34;&gt;&lt;/a&gt;2     安装&lt;/h4&gt;&lt;h5 id=&#34;2-1-上传压缩文件&#34;&gt;&lt;a href=&#34;#2-1-上传压缩文件&#34; class=&#34;headerlink&#34; title=&#34;2.1   上传压缩文件&#34;&gt;&lt;/a&gt;2.1   上传压缩文件&lt;/h5&gt;&lt;p&gt;​	上传到 &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中&lt;/p&gt;
&lt;h4 id=&#34;2-2-解压&#34;&gt;&lt;a href=&#34;#2-2-解压&#34; class=&#34;headerlink&#34; title=&#34;2.2   解压&#34;&gt;&lt;/a&gt;2.2   解压&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;tar zxf apache-zookeeper-3.5.5-bin.tar.gz
cp -r apache-zookeeper-3.5.5-bin ../zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-3-新建data目录&#34;&gt;&lt;a href=&#34;#2-3-新建data目录&#34; class=&#34;headerlink&#34; title=&#34;2.3   新建data目录&#34;&gt;&lt;/a&gt;2.3   新建data目录&lt;/h4&gt;&lt;p&gt;进入到zookeeper中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;cd /usr/local/zookeeper
mkdir data
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-4-修改配置文件&#34;&gt;&lt;a href=&#34;#2-4-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.4   修改配置文件&#34;&gt;&lt;/a&gt;2.4   修改配置文件&lt;/h4&gt;&lt;p&gt;进入conf中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;cd conf
cp zoo_sample.cfg zoo.cfg
vim zoo.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改dataDir为data文件夹路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;dataDir=/usr/local/zookeeper/data
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-5-启动zookeeper&#34;&gt;&lt;a href=&#34;#2-5-启动zookeeper&#34; class=&#34;headerlink&#34; title=&#34;2.5   启动zookeeper&#34;&gt;&lt;/a&gt;2.5   启动zookeeper&lt;/h4&gt;&lt;p&gt;进入bin文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;cd /usr/local/zookeeper/bin
./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过status查看启动状态。稍微有个等待时间&lt;/p&gt;
&lt;p&gt;# .&amp;#x2F;zkServer.sh status&lt;/p&gt;
&lt;h3 id=&#34;六、Zookeeper安装-Docker&#34;&gt;&lt;a href=&#34;#六、Zookeeper安装-Docker&#34; class=&#34;headerlink&#34; title=&#34;六、Zookeeper安装(Docker)&#34;&gt;&lt;/a&gt;六、Zookeeper安装(Docker)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;资料：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2luZ2tvby9wLzg3MzI0NDguaHRtbA==&#34;&gt;https://www.cnblogs.com/kingkoo/p/8732448.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2ODA4NzQ2NjY/ZnJvbT1zZWFyY2gmYW1wO3NlaWQ9MTYyOTE0NTAyNTIxMTk5OTEwNCZhbXA7c3BtX2lkX2Zyb209MzMzLjMzNy4wLjA=&#34;&gt;https://www.bilibili.com/video/av80874666?from=search&amp;amp;seid=1629145025211999104&amp;amp;spm_id_from=333.337.0.0&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-Zookeeper简介-1&#34;&gt;&lt;a href=&#34;#1-Zookeeper简介-1&#34; class=&#34;headerlink&#34; title=&#34;1     Zookeeper简介&#34;&gt;&lt;/a&gt;1     Zookeeper简介&lt;/h4&gt;&lt;p&gt;​	zookeeper分布式管理软件。常用它做注册中心（依赖zookeeper的发布&amp;#x2F;订阅功能）、配置文件中心、分布式锁配置、集群管理等。&lt;/p&gt;
&lt;p&gt;​	zookeeper一共就有两个版本。主要使用的是java语言写的。&lt;/p&gt;
&lt;h4 id=&#34;2-安装-1&#34;&gt;&lt;a href=&#34;#2-安装-1&#34; class=&#34;headerlink&#34; title=&#34;2     安装&#34;&gt;&lt;/a&gt;2     安装&lt;/h4&gt;&lt;h5 id=&#34;2-1-拉取镜像&#34;&gt;&lt;a href=&#34;#2-1-拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;2.1   拉取镜像&#34;&gt;&lt;/a&gt;2.1   拉取镜像&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自定义zookeeper目录&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir /root/zookeeper

mkdir /root/zookeeper/data #原因参照上面 -在docker中data其实也不用在宿主机行自己生成(目前如此)

#仓库官网查看版本或者用命令直接查
docker search zookeeper

#拉取特定版本（3.5）
docker pull zookeeper:3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-2-创建并启动容器&#34;&gt;&lt;a href=&#34;#2-2-创建并启动容器&#34; class=&#34;headerlink&#34; title=&#34;2.2 创建并启动容器&#34;&gt;&lt;/a&gt;2.2 创建并启动容器&lt;/h4&gt;&lt;p&gt;​	&lt;strong&gt;注：就目前而且 好像直接在docker中使用 zookeeper 不需要过多的配置，直接用命令创建吧，下面的解释先不看，具体原因后面补充&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -d --name zookeeper -v /root/zookeeper/data:/data -p 2181:2181 --restart always zookeeper:3.5
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--restart always&lt;/code&gt;：始终重启&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWdlb3ZiL3AvMTUzMjg3OTYuaHRtbA==&#34;&gt;https://www.cnblogs.com/ageovb/p/15328796.html&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;解释&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、这里为啥只挂载了 data 目录–》因为当我们 没有直接的安装压缩包时，我们的就没有配置文件，所以我们直接生成，容器中就回自动生成conf文件，其中就有我们需要的 一系列配置文件，我们第一次创建的时候就可以如此，我们在进&lt;strong&gt;行配置文件的修改完成&lt;/strong&gt;后，要将所有配置文件放到我们  bash 目录中的 conf 文件中去。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、第一次进入容器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在bash目录下进入bin 目录然后输入开启客户端命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、第二次进入容器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zookeeper /bin/bash  -p    端口号
或
docker exec -it zookeeper zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;只看到这就可*，容器创建成功就可以直接用了，还没有出现问题。有待补充&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-3-修改配置文件&#34;&gt;&lt;a href=&#34;#2-3-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.3   修改配置文件&#34;&gt;&lt;/a&gt;2.3   修改配置文件&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;配置文件来源&lt;ul&gt;
&lt;li&gt;1、可以去我们的资料中直接解压出&lt;strong&gt;conf&lt;/strong&gt;目录粘贴到我们的 zookeeper 目录中去&lt;/li&gt;
&lt;li&gt;2、可以直接进行第 3 步，完事之后直接会在容器中生成。找到conf文件，修改其中的 zoo.cfg文件，&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入容器后，找到conf中的 **zoo.cfg文件，接下来就是修改 &lt;strong&gt;dataDir&lt;/strong&gt; 路径为容器中的 data文件目录。&lt;/p&gt;
&lt;p&gt;前提是要下载 vim ，因为容器中没有，命令是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;apt-get update

apt-get install -y vim

cd conf
# 没有zoo.cfg 就先拷贝 zoo_sample.cfg 两个其实是一个文件，内容相同
#cp zoo_sample.cfg zoo.cfg
vim zoo.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改dataDir为data文件夹路径&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;dataDir=/usr/local/zookeeper/data
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;注：docker集群搭建在solr笔记中&#34;&gt;&lt;a href=&#34;#注：docker集群搭建在solr笔记中&#34; class=&#34;headerlink&#34; title=&#34;注：docker集群搭建在solr笔记中&#34;&gt;&lt;/a&gt;注：docker集群搭建在solr笔记中&lt;/h3&gt;&lt;h3 id=&#34;七、Zookeeper客户端常用命令&#34;&gt;&lt;a href=&#34;#七、Zookeeper客户端常用命令&#34; class=&#34;headerlink&#34; title=&#34;七、Zookeeper客户端常用命令&#34;&gt;&lt;/a&gt;七、Zookeeper客户端常用命令&lt;/h3&gt;&lt;p&gt;​	进入到.&amp;#x2F;zkCli.sh命令行工具后，可以使用下面常用命令&lt;/p&gt;
&lt;h4 id=&#34;1-ls&#34;&gt;&lt;a href=&#34;#1-ls&#34; class=&#34;headerlink&#34; title=&#34;1    ls&#34;&gt;&lt;/a&gt;1    ls&lt;/h4&gt;&lt;p&gt;​	ls [-s][-R] &amp;#x2F;path&lt;/p&gt;
&lt;p&gt;​	-s 详细信息，替代老版的ls2&lt;/p&gt;
&lt;p&gt;​	-R 当前目录和子目录中内容都罗列出来&lt;/p&gt;
&lt;p&gt;​	例如：ls -R &amp;#x2F; 显示根目录下所有内容&lt;/p&gt;
&lt;h4 id=&#34;2-create&#34;&gt;&lt;a href=&#34;#2-create&#34; class=&#34;headerlink&#34; title=&#34;2     create&#34;&gt;&lt;/a&gt;2     create&lt;/h4&gt;&lt;p&gt;​	create &amp;#x2F;path [data]&lt;/p&gt;
&lt;p&gt;​	[data] 包含内容&lt;/p&gt;
&lt;p&gt;​	创建指定路径信息&lt;/p&gt;
&lt;p&gt;​	例如：create &amp;#x2F;demo 创建&amp;#x2F;demo&lt;/p&gt;
&lt;h4 id=&#34;3-get&#34;&gt;&lt;a href=&#34;#3-get&#34; class=&#34;headerlink&#34; title=&#34;3     get&#34;&gt;&lt;/a&gt;3     get&lt;/h4&gt;&lt;p&gt;​	get [-s] &amp;#x2F;path&lt;/p&gt;
&lt;p&gt;​	[-s] 详细信息&lt;/p&gt;
&lt;p&gt;​	查看指定路径下内容。&lt;/p&gt;
&lt;p&gt;​	例如： get -s &amp;#x2F;demo&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/RPC/rpc-04.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	null:存放的数据&lt;/p&gt;
&lt;p&gt;​	cZxid:创建时zxid(znode每次改变时递增的事务id)&lt;/p&gt;
&lt;p&gt;​	ctime:创建时间戳&lt;/p&gt;
&lt;p&gt;​	mZxid:最近一次更新的zxid&lt;/p&gt;
&lt;p&gt;​	mtime:最近一次更新的时间戳&lt;/p&gt;
&lt;p&gt;​	pZxid:子节点的zxid&lt;/p&gt;
&lt;p&gt;​	cversion:子节点更新次数&lt;/p&gt;
&lt;p&gt;​	dataversion:节点数据更新次数&lt;/p&gt;
&lt;p&gt;​	aclVersion:节点ACL(授权信息)的更新次数&lt;/p&gt;
&lt;p&gt;​	ephemeralOwner:如果该节点为ephemeral节点(临时，生命周期与session一样), ephemeralOwner值表示与该节点绑定的session id. 如果该节点不是ephemeral节点, ephemeralOwner值为0.&lt;/p&gt;
&lt;p&gt;​	dataLength:节点数据字节数&lt;/p&gt;
&lt;p&gt;​	numChildren:子节点数量&lt;/p&gt;
&lt;h4 id=&#34;4-set&#34;&gt;&lt;a href=&#34;#4-set&#34; class=&#34;headerlink&#34; title=&#34;4     set&#34;&gt;&lt;/a&gt;4     set&lt;/h4&gt;&lt;p&gt;​	set &amp;#x2F;path data&lt;/p&gt;
&lt;p&gt;​	设置节点内容&lt;/p&gt;
&lt;h4 id=&#34;5-delete&#34;&gt;&lt;a href=&#34;#5-delete&#34; class=&#34;headerlink&#34; title=&#34;5     delete&#34;&gt;&lt;/a&gt;5     delete&lt;/h4&gt;&lt;p&gt;​	delete &amp;#x2F;path&lt;/p&gt;
&lt;p&gt;​	删除节点&lt;/p&gt;
&lt;h3 id=&#34;八、向Zookeeper中注册内容&#34;&gt;&lt;a href=&#34;#八、向Zookeeper中注册内容&#34; class=&#34;headerlink&#34; title=&#34;八、向Zookeeper中注册内容&#34;&gt;&lt;/a&gt;八、向Zookeeper中注册内容&lt;/h3&gt;&lt;p&gt;​	新建项目ZookeeperClient&lt;/p&gt;
&lt;h4 id=&#34;1-创建-x2F-demo&#34;&gt;&lt;a href=&#34;#1-创建-x2F-demo&#34; class=&#34;headerlink&#34; title=&#34;1     创建&amp;#x2F;demo&#34;&gt;&lt;/a&gt;1     创建&amp;#x2F;demo&lt;/h4&gt;&lt;p&gt;​	使用zookeeper的客户端命令工具创建&amp;#x2F;demo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;./zkCli.sh
create /demos
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-添加依赖&#34;&gt;&lt;a href=&#34;#2-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;2     添加依赖&#34;&gt;&lt;/a&gt;2     添加依赖&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.zookeeper&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;zookeeper&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.5.5&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-编写代码&#34;&gt;&lt;a href=&#34;#3-编写代码&#34; class=&#34;headerlink&#34; title=&#34;3     编写代码&#34;&gt;&lt;/a&gt;3     编写代码&lt;/h4&gt;&lt;p&gt;​	创建类com.msb.MyApp。&lt;/p&gt;
&lt;p&gt;​	ZooDefs.Ids.OPEN_ACL_UNSAFE 表示权限。&lt;/p&gt;
&lt;p&gt;​	CreateMode.PERSISTENT_SEQUENTIAL 永久存储，文件内容编号递增。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class SendContent &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            /**
             * 创建ZooKeeper对象
             * param1: zookeeper_IP+端口号
             * param2: 访问超时设置---时间设置长一点
             * param3: 通过观察者模式发出访问回复，当连接成功后，编写成功信息
             */
            ZooKeeper zooKeeper = new ZooKeeper(
                    &amp;quot;192.168.88.128:2181&amp;quot;,
                    1000000,
                    new Watcher() &amp;#123;
                        @Override
                        public void process(WatchedEvent watchedEvent) &amp;#123;
                            System.out.println(&amp;quot;获取链接&amp;quot;);
                        &amp;#125;
                    &amp;#125;
            );

            /**
             * 发送内容  向zookeeper服务器中
             * param1: 发送的文件
             * param2: 发送的内容(要转变成Bytes[])
             * param3: 权限
             * param4: 内容的模式
             */
            String result = zooKeeper.create(
                    &amp;quot;/demos/rmi_address&amp;quot;,
                    &amp;quot;rmi:localhost:8080/demoService&amp;quot;.getBytes(),
                    ZooDefs.Ids.OPEN_ACL_UNSAFE,
                    CreateMode.PERSISTENT_SEQUENTIAL
            );

            System.out.println(&amp;quot;result  -&amp;gt; &amp;quot;+result);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (KeeperException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-查看上传数据&#34;&gt;&lt;a href=&#34;#4-查看上传数据&#34; class=&#34;headerlink&#34; title=&#34;4     查看上传数据&#34;&gt;&lt;/a&gt;4     查看上传数据&lt;/h4&gt;&lt;p&gt;​	ls -R &amp;#x2F;            :查看列表&lt;/p&gt;
&lt;p&gt;​	get  &amp;#x2F;demo&amp;#x2F;nn0000000002     :查看内容&lt;/p&gt;
&lt;h3 id=&#34;九、-从zookeeper中发现内容&#34;&gt;&lt;a href=&#34;#九、-从zookeeper中发现内容&#34; class=&#34;headerlink&#34; title=&#34;九、    从zookeeper中发现内容&#34;&gt;&lt;/a&gt;九、    从zookeeper中发现内容&lt;/h3&gt;&lt;p&gt;​	在原有项目中新建一个类，类中编写主方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
    try &amp;#123;
        ZooKeeper zookeeper = new ZooKeeper(&amp;quot;192.168.32.128:2181&amp;quot;, 10000, new Watcher() &amp;#123;
            @Override
            public void process(WatchedEvent watchedEvent) &amp;#123;
                System.out.println(&amp;quot;获取连接&amp;quot;);
            &amp;#125;
        &amp;#125;);
        //获取列表
        List&amp;lt;String&amp;gt; list = zookeeper.getChildren(&amp;quot;/demo&amp;quot;, false);
        for (String child : list) &amp;#123;
            byte[] result = zookeeper.getData(&amp;quot;/demo/&amp;quot; + child, false, null);
            System.out.println(new String(result));
        &amp;#125;
    &amp;#125; catch (IOException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (KeeperException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (InterruptedException e) &amp;#123;
        e.printStackTrace();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十、手写RPC框架&#34;&gt;&lt;a href=&#34;#十、手写RPC框架&#34; class=&#34;headerlink&#34; title=&#34;十、手写RPC框架&#34;&gt;&lt;/a&gt;十、手写RPC框架&lt;/h3&gt;&lt;p&gt;​	使用Zookeeper作为注册中心，RMI作为连接技术，手写RPC框架。&lt;/p&gt;
&lt;h4 id=&#34;1-创建项目ParentDemo&#34;&gt;&lt;a href=&#34;#1-创建项目ParentDemo&#34; class=&#34;headerlink&#34; title=&#34;1     创建项目ParentDemo&#34;&gt;&lt;/a&gt;1     创建项目ParentDemo&lt;/h4&gt;&lt;p&gt;​	创建父项目ParentDemo。&lt;/p&gt;
&lt;p&gt;​	包含3个聚合子项目。&lt;/p&gt;
&lt;p&gt;​	pojo: service中需要的实体类&lt;/p&gt;
&lt;p&gt;​	service：包含被serviceimpl和consumer依赖的接口。&lt;/p&gt;
&lt;p&gt;​	serviceimpl:provider提供的服务内容&lt;/p&gt;
&lt;p&gt;​	consumer：消费者，调用服务内容。&lt;/p&gt;
&lt;h4 id=&#34;2-在父项目中添加依赖&#34;&gt;&lt;a href=&#34;#2-在父项目中添加依赖&#34; class=&#34;headerlink&#34; title=&#34;2     在父项目中添加依赖&#34;&gt;&lt;/a&gt;2     在父项目中添加依赖&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
    try &amp;#123;
        ZooKeeper zookeeper = new ZooKeeper(&amp;quot;192.168.32.128:2181&amp;quot;, 10000, new Watcher() &amp;#123;
            @Override
            public void process(WatchedEvent watchedEvent) &amp;#123;
                System.out.println(&amp;quot;获取连接&amp;quot;);
            &amp;#125;
        &amp;#125;);
        //获取列表
        List&amp;lt;String&amp;gt; list = zookeeper.getChildren(&amp;quot;/demo&amp;quot;, false);
        for (String child : list) &amp;#123;
            byte[] result = zookeeper.getData(&amp;quot;/demo/&amp;quot; + child, false, null);
            System.out.println(new String(result));
        &amp;#125;
    &amp;#125; catch (IOException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (KeeperException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (InterruptedException e) &amp;#123;
        e.printStackTrace();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-创建service项目&#34;&gt;&lt;a href=&#34;#3-创建service项目&#34; class=&#34;headerlink&#34; title=&#34;3     创建service项目&#34;&gt;&lt;/a&gt;3     创建service项目&lt;/h4&gt;&lt;h4 id=&#34;4-创建DemoService接口&#34;&gt;&lt;a href=&#34;#4-创建DemoService接口&#34; class=&#34;headerlink&#34; title=&#34;4     创建DemoService接口&#34;&gt;&lt;/a&gt;4     创建DemoService接口&lt;/h4&gt;&lt;p&gt;​	创建com.msb.DemoService&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface DemoService extends Remote &amp;#123;
    String demo(String param) throws RemoteException;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-创建serviceimpl项目&#34;&gt;&lt;a href=&#34;#5-创建serviceimpl项目&#34; class=&#34;headerlink&#34; title=&#34;5     创建serviceimpl项目&#34;&gt;&lt;/a&gt;5     创建serviceimpl项目&lt;/h4&gt;&lt;p&gt;​	此项目编写接口具体实现，RMI服务发布和把信息发送到Zookeeper中。&lt;/p&gt;
&lt;p&gt;​	项目结构如下：&lt;/p&gt;
&lt;p&gt;​	在pom.xml中添加对service项目的依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;service&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-创建DemoServiceImpl&#34;&gt;&lt;a href=&#34;#6-创建DemoServiceImpl&#34; class=&#34;headerlink&#34; title=&#34;6     创建DemoServiceImpl&#34;&gt;&lt;/a&gt;6     创建DemoServiceImpl&lt;/h4&gt;&lt;p&gt;​	创建com.bjsxt.service.impl.DemoServiceImpl&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class DemoServiceImpl extends UnicastRemoteObject implements DemoService &amp;#123;
    public DemoServiceImpl() throws RemoteException &amp;#123;
    &amp;#125;

    @Override
    public String demo(String param) throws RemoteException&amp;#123;
        return param+&amp;quot;123&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-创建RmiRun&#34;&gt;&lt;a href=&#34;#7-创建RmiRun&#34; class=&#34;headerlink&#34; title=&#34;7     创建RmiRun&#34;&gt;&lt;/a&gt;7     创建RmiRun&lt;/h4&gt;&lt;p&gt;​	创建com.msb.RmiRun。实现RMI服务的发布和Zookeeper消息的发布。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class RmiRun &amp;#123;
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            DemoService demoService = new DemoServiceImpl();
            LocateRegistry.createRegistry(8888);
            String url = &amp;quot;rmi://localhost:8888/demoService&amp;quot;;
            Naming.bind(url,demoService);
            ZooKeeper zookeeper = new ZooKeeper(&amp;quot;192.168.32.128:2181&amp;quot;, 10000, new Watcher() &amp;#123;
                @Override
                public void process(WatchedEvent watchedEvent) &amp;#123;
                    System.out.println(&amp;quot;获取连接&amp;quot;);
                &amp;#125;
            &amp;#125;);
            String content = zookeeper.create(&amp;quot;/demo/demoService&amp;quot;,url.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
            System.out.println(&amp;quot;服务发布成功。。。。&amp;quot;);
        &amp;#125; catch (AlreadyBoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (KeeperException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-创建Consumer项目&#34;&gt;&lt;a href=&#34;#8-创建Consumer项目&#34; class=&#34;headerlink&#34; title=&#34;8     创建Consumer项目&#34;&gt;&lt;/a&gt;8     创建Consumer项目&lt;/h4&gt;&lt;p&gt;​	新建consumer项目，此项目需要从zookeeper中获取rmi信息，并调用rmi服务&lt;/p&gt;
&lt;p&gt;​	在pom.xml中添加对service项目的依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;artifactId&amp;gt;service&amp;lt;/artifactId&amp;gt;
        &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
        &amp;lt;version&amp;gt;1.0.0&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;9-创建接口和实现类&#34;&gt;&lt;a href=&#34;#9-创建接口和实现类&#34; class=&#34;headerlink&#34; title=&#34;9     创建接口和实现类&#34;&gt;&lt;/a&gt;9     创建接口和实现类&lt;/h4&gt;&lt;p&gt;​	创建com.msb.service.ConsumerService接口&lt;/p&gt;
&lt;p&gt;​	创建com.msb.service.impl.ConsumerServiceImpl实现类 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface ConsumerService &amp;#123;
    String consumerService(String param);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Service
public class ConsumerServiceImpl implements ConsumerService &amp;#123;
    @Override
    public String consumerService(String param) &amp;#123;
        try &amp;#123;
            ZooKeeper zookeeper = new ZooKeeper(&amp;quot;192.168.32.128:2181&amp;quot;, 10000, new Watcher() &amp;#123;
                @Override
                public void process(WatchedEvent watchedEvent) &amp;#123;
                    System.out.println(&amp;quot;获取连接&amp;quot;);
                &amp;#125;
            &amp;#125;);
            byte[] urlByte = zookeeper.getData(&amp;quot;/demo/demoService&amp;quot;, false, null);
            DemoService demoService =(DemoService) Naming.lookup(new String(urlByte));
            String result = demoService.demo(param);
            System.out.println(result);
            return result;
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (KeeperException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (NotBoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        return null;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;10-创建控制器&#34;&gt;&lt;a href=&#34;#10-创建控制器&#34; class=&#34;headerlink&#34; title=&#34;10  创建控制器&#34;&gt;&lt;/a&gt;10  创建控制器&lt;/h4&gt;&lt;p&gt;​	创建com.msb.controller.DemoController控制器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class DemoController &amp;#123;

    @Autowired
    private ConsumerService consumerService;

    @RequestMapping(&amp;quot;/demo&amp;quot;)
    @ResponseBody
    public String demo(String param)&amp;#123;
        return consumerService.consumerService(param);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;11-创建启动器&#34;&gt;&lt;a href=&#34;#11-创建启动器&#34; class=&#34;headerlink&#34; title=&#34;11  创建启动器&#34;&gt;&lt;/a&gt;11  创建启动器&lt;/h4&gt;&lt;p&gt;​	创建com.msb.ConsumerApplication&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
public class ConsumerApplication &amp;#123;
    public static void main(String[] args) &amp;#123;
        SpringApplication.run(ConsumerApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;12-测试&#34;&gt;&lt;a href=&#34;#12-测试&#34; class=&#34;headerlink&#34; title=&#34;12  测试&#34;&gt;&lt;/a&gt;12  测试&lt;/h4&gt;&lt;p&gt;​	在浏览器输入：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlbW8/cGFyYW09ZGVtbw==&#34;&gt;http://localhost:8080/demo?param=demo&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;​	观察结果是否是：demo123&lt;/p&gt;
</content>
        <category term="分布式" />
        <category term="RPC" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/RabbitMQ/</id>
        <title>RabbitMQ</title>
        <link rel="alternate" href="http://example.com/2022/10/07/RabbitMQ/"/>
        <content type="html">&lt;h2 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;&lt;strong&gt;主要内容&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;AMQP简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RabbitMQ简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RabbitMQ原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Erlang安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装RabbitMQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RabbitMQ账户管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交换器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学习目标&#34;&gt;&lt;a href=&#34;#学习目标&#34; class=&#34;headerlink&#34; title=&#34;学习目标&#34;&gt;&lt;/a&gt;&lt;strong&gt;学习目标&lt;/strong&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;AMQP简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbmitMQ简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbitMQ原理&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Erlang安装&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安装RabbitMQ&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbitMQ账户管理&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换器&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;一、-AMQP简介&#34;&gt;&lt;a href=&#34;#一、-AMQP简介&#34; class=&#34;headerlink&#34; title=&#34;一、 AMQP简介&#34;&gt;&lt;/a&gt;一、 &lt;strong&gt;AMQP简介&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-AMQP是什么&#34;&gt;&lt;a href=&#34;#1-AMQP是什么&#34; class=&#34;headerlink&#34; title=&#34;1 AMQP是什么?&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;AMQP是什么?&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	AMQP(Advanced Message Queuing Protocol,高级消息队列协议)是进程之间传递异步消息的网络协议。&lt;/p&gt;
&lt;h3 id=&#34;2-AMQP工作过程&#34;&gt;&lt;a href=&#34;#2-AMQP工作过程&#34; class=&#34;headerlink&#34; title=&#34;2 AMQP工作过程&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;AMQP工作过程&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	发布者(Publisher)发布消息(Message),经过交换机(Exchange)，交换机根据路由规则将收到消息分发给交换机绑定的队列(Queue)，最后AMQP代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/RabbitMQ/RabbitMQ-01.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;3-队列&#34;&gt;&lt;a href=&#34;#3-队列&#34; class=&#34;headerlink&#34; title=&#34;3 队列&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;队列&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	队列是数据结构中概念。数据存储在一个队列中，数据是有顺序的，先进的先出，后进后出。其中一侧负责进数据，另一侧负责出数据。&lt;/p&gt;
&lt;p&gt;MQ（消息队列）很多功能都是基于此队列结构实现的!&lt;/p&gt;
&lt;h3 id=&#34;二、-RabbitMQ简介&#34;&gt;&lt;a href=&#34;#二、-RabbitMQ简介&#34; class=&#34;headerlink&#34; title=&#34;二、 RabbitMQ简介&#34;&gt;&lt;/a&gt;二、 &lt;strong&gt;RabbitMQ简介&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-RabbitMQ介绍&#34;&gt;&lt;a href=&#34;#1-RabbitMQ介绍&#34; class=&#34;headerlink&#34; title=&#34;1 RabbitMQ介绍&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;RabbitMQ介绍&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	RabbitMQ是由Erlang语言编写的基于AMQP的消息中间件。而消息中间件作为分布式系统重要组件之一，可以解决应用耦合，异步消息，流量削峰等问题。&lt;/p&gt;
&lt;h5 id=&#34;1-1-解决应用耦合&#34;&gt;&lt;a href=&#34;#1-1-解决应用耦合&#34; class=&#34;headerlink&#34; title=&#34;1.1 解决应用耦合&#34;&gt;&lt;/a&gt;1.1 &lt;strong&gt;解决应用耦合&lt;/strong&gt;&lt;/h5&gt;&lt;h6 id=&#34;1-1-1-不使用MQ时&#34;&gt;&lt;a href=&#34;#1-1-1-不使用MQ时&#34; class=&#34;headerlink&#34; title=&#34;1.1.1 不使用MQ时&#34;&gt;&lt;/a&gt;1.1.1 &lt;strong&gt;不使用MQ时&lt;/strong&gt;&lt;/h6&gt;&lt;img data-src=&#34;/2022/10/07/RabbitMQ/RabbitMQ-03.jpg&#34; class=&#34;&#34;&gt;


&lt;h6 id=&#34;1-1-2-使用MQ解决耦合&#34;&gt;&lt;a href=&#34;#1-1-2-使用MQ解决耦合&#34; class=&#34;headerlink&#34; title=&#34;1.1.2 使用MQ解决耦合&#34;&gt;&lt;/a&gt;1.1.2 &lt;strong&gt;使用MQ解决耦合&lt;/strong&gt;&lt;/h6&gt;&lt;img data-src=&#34;/2022/10/07/RabbitMQ/RabbitMQ-04.jpg&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-RabbitMQ适用场景&#34;&gt;&lt;a href=&#34;#2-RabbitMQ适用场景&#34; class=&#34;headerlink&#34; title=&#34;2 RabbitMQ适用场景&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;RabbitMQ适用场景&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	排队算法 : 使用消息队列特性&lt;/p&gt;
&lt;p&gt;​	秒杀活动 : 使用消息队列特性&lt;/p&gt;
&lt;p&gt;​	消息分发 : 使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	异步处理 : 使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	数据同步 : 使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	处理耗时任务 : 使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	流量销峰&lt;/p&gt;
&lt;h3 id=&#34;三、-RabbitMQ原理&#34;&gt;&lt;a href=&#34;#三、-RabbitMQ原理&#34; class=&#34;headerlink&#34; title=&#34;三、 RabbitMQ原理&#34;&gt;&lt;/a&gt;三、 &lt;strong&gt;RabbitMQ原理&lt;/strong&gt;&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/RabbitMQ/RabbitMQ-05.jpg&#34; class=&#34;&#34;&gt;


&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1.Message&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;消息。消息是不具名的，它由消息头消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括：routing-key(路由键)、priority(相对于其他消息的优先权)、delivery-mode(指出消息可能持久性存储)等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;.&lt;strong&gt;Publisher&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息的生产者。也是一个向交换器发布消息的客户端应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;.&lt;strong&gt;Consumer&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息的消费者。表示一个从消息队列中取得消息的客户端应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4.Exchange&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换器。用来接收生产者发送的消息并将这些消息路由给服务器中的队列。三种常用的交换器类型1. direct(发布与订阅 完全匹配)2. fanout(广播)3. topic(主题，规则匹配)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5.Binding&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;绑定。用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;6.Queue&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息队列。用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者链接到这个队列将其取走。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;7.Routing-key&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路由键。RabbitMQ决定消息该投递到哪个队列的规则。（也可以理解为队列的名称，路由键是key，队列是value）队列通过路由键绑定到交换器。消息发送到MQ服务器时，消息将拥有一个路由键，即便是空的，RabbitMQ也会将其和绑定使用的路由键进行匹配。如果相匹配，消息将会投递到该队列。如果不匹配，消息将会进入黑洞。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;8.Connection&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;链接。指rabbit服务器和服务建立的TCP链接。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;9.Channel&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信道。1，Channel中文叫做信道，是TCP里面的虚拟链接。例如：电缆相当于TCP，信道是一个独立光纤束，一条TCP连接上创建多条信道是没有问题的。2，TCP一旦打开，就会创建AMQP信道。3，无论是发布消息、接收消息、订阅队列，这些动作都是通过信道完成的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;10.Virtual Host&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;虚拟主机。表示一批交换器，消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个vhost本质上就是一个mini版的RabbitMQ服务器，拥有自己的队列、交换器、绑定和权限机制。vhost是AMQP概念的基础，必须在链接时指定，RabbitMQ默认的vhost是**&amp;#x2F;**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;11.Borker&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表示消息队列服务器实体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;12.交换器和队列的关系&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换器是通过路由键和队列绑定在一起的，如果消息拥有的路由键跟队列和交换器的路由键匹配，那么消息就会被路由到该绑定的队列中。     也就是说，消息到队列的过程中，消息首先会经过交换器，接下来交换器在通过路由键匹配分发消息到具体的队列中。     路由键可以理解为匹配的规则。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;13.RabbitMQ为什么需要信道？为什么不是TCP直接通信？&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1. TCP的创建和销毁开销特别大。创建需要3次握手，销毁需要4次分手。2. 如果不用信道，那应用程序就会以TCP链接Rabbit，高峰时每秒成千上万条链接会造成资源巨大的浪费，而且操作系统每秒处理TCP链接数也是有限制的，必定造成性能瓶颈。3. 信道的原理是一条线程一条通道，多条线程多条通道同用一条TCP链接。一条TCP链接可以容纳无限的信道，即使每秒成千上万的请求也不会成为性能的瓶颈。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;四、-Erlang安装&#34;&gt;&lt;a href=&#34;#四、-Erlang安装&#34; class=&#34;headerlink&#34; title=&#34;四、 Erlang安装&#34;&gt;&lt;/a&gt;四、 &lt;strong&gt;Erlang安装&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	RabbitMQ是使用Erlang语言编写的，所以需要先配置Erlang&lt;/p&gt;
&lt;h4 id=&#34;1-修改主机名&#34;&gt;&lt;a href=&#34;#1-修改主机名&#34; class=&#34;headerlink&#34; title=&#34;1 修改主机名&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;修改主机名&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	RabbitMQ是通过主机名进行访问的，必须指定能访问的主机名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  vim /etc/sysconfig/network
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/RabbitMQ/RabbitMQ-06.jpg&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code&gt;  vim /etc/hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	新添加了一行，前面为服务器ip，空格后面添加计算机主机名&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/RabbitMQ/RabbitMQ-07.jpg&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-安装依赖&#34;&gt;&lt;a href=&#34;#2-安装依赖&#34; class=&#34;headerlink&#34; title=&#34;2 安装依赖&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;安装依赖&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC unixODBC-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-上传并解压&#34;&gt;&lt;a href=&#34;#3-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;3 上传并解压&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	上传otp_src_22.0.tar.gz到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp目录中，进入目录并解压。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 解压时注意，此压缩包不具有gzip属性，解压参数没有z，只有xf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  tar xf otp_src_22.0.tar.gz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-配置参数&#34;&gt;&lt;a href=&#34;#4-配置参数&#34; class=&#34;headerlink&#34; title=&#34;4 配置参数&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;配置参数&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	先新建&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;erlang文件夹，作为安装文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  mkdir -p /usr/local/erlang
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 进入文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd otp_src_22.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 配置参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-编译并安装&#34;&gt;&lt;a href=&#34;#5-编译并安装&#34; class=&#34;headerlink&#34; title=&#34;5 编译并安装&#34;&gt;&lt;/a&gt;5 &lt;strong&gt;编译并安装&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	编译 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-修改环境变量&#34;&gt;&lt;a href=&#34;#6-修改环境变量&#34; class=&#34;headerlink&#34; title=&#34;6 修改环境变量&#34;&gt;&lt;/a&gt;6 &lt;strong&gt;修改环境变量&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	修改&amp;#x2F;etc&amp;#x2F;profile文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 在文件中添加下面代码 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/erlang/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	运行文件，让修改内容生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-查看配置是否成功&#34;&gt;&lt;a href=&#34;#7-查看配置是否成功&#34; class=&#34;headerlink&#34; title=&#34;7 查看配置是否成功&#34;&gt;&lt;/a&gt;7 &lt;strong&gt;查看配置是否成功&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  erl -version
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/RabbitMQ/RabbitMQ-08.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;五、-安装RabbitMQ&#34;&gt;&lt;a href=&#34;#五、-安装RabbitMQ&#34; class=&#34;headerlink&#34; title=&#34;五、 安装RabbitMQ&#34;&gt;&lt;/a&gt;五、 &lt;strong&gt;安装RabbitMQ&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-上传并解压&#34;&gt;&lt;a href=&#34;#1-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;1 上传并解压&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	上传rabbitmq-server-generic-unix-3.7.18.tar.xz到&amp;#x2F;usr&amp;#x2F;loca&amp;#x2F;tmp中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  tar xf rabbitmq-server-generic-unix-3.7.18.tar.xz
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制到local下&#34;&gt;&lt;a href=&#34;#2-复制到local下&#34; class=&#34;headerlink&#34; title=&#34;2 复制到local下&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;复制到local下&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	复制解压文件到&amp;#x2F;usr&amp;#x2F;local下，命名为rabbitmq&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cp -r rabbitmq_server-3.7.18 /usr/local/rabbitmq
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-配置环境变量&#34;&gt;&lt;a href=&#34;#3-配置环境变量&#34; class=&#34;headerlink&#34; title=&#34;3 配置环境变量&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;配置环境变量&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;  vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	在文件中添加 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	解析文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-开启web管理插件&#34;&gt;&lt;a href=&#34;#4-开启web管理插件&#34; class=&#34;headerlink&#34; title=&#34;4 开启web管理插件&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;开启web管理插件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	进入rabbitmq&amp;#x2F;sbin目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 查看插件列表
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmq-plugins list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 生效管理插件
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmq-plugins enable rabbitmq_management
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-后台运行&#34;&gt;&lt;a href=&#34;#5-后台运行&#34; class=&#34;headerlink&#34; title=&#34;5 后台运行&#34;&gt;&lt;/a&gt;5 &lt;strong&gt;后台运行&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	启动rabbitmq。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmq-server -detached
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	停止命令，如果无法停止，使用kill -9 进程号进行关闭&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmqctl stop_app
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-查看web管理界面&#34;&gt;&lt;a href=&#34;#6-查看web管理界面&#34; class=&#34;headerlink&#34; title=&#34;6 查看web管理界面&#34;&gt;&lt;/a&gt;6 &lt;strong&gt;查看web管理界面&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	默认可以在安装rabbitmq的电脑上通过用户名：guest密码guest进行访问web管理界面&lt;/p&gt;
&lt;p&gt;​	端口号：15672（放行端口，或关闭防火墙）&lt;/p&gt;
&lt;p&gt;​	在虚拟机浏览器中输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDoxNTY3Mi8=&#34;&gt;http://localhost:15672&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;六、-RabbitMq账户管理&#34;&gt;&lt;a href=&#34;#六、-RabbitMq账户管理&#34; class=&#34;headerlink&#34; title=&#34;六、 RabbitMq账户管理&#34;&gt;&lt;/a&gt;六、 &lt;strong&gt;RabbitMq账户管理&lt;/strong&gt;&lt;/h3&gt;&lt;h4 id=&#34;1-创建账户&#34;&gt;&lt;a href=&#34;#1-创建账户&#34; class=&#34;headerlink&#34; title=&#34;1 创建账户&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;创建账户&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	语法：.&amp;#x2F;rabbitmqctl add_user username password&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/rabbitmq/sbin
# ./rabbitmqctl add_user mashibing mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-给用户授予管理员角色&#34;&gt;&lt;a href=&#34;#2-给用户授予管理员角色&#34; class=&#34;headerlink&#34; title=&#34;2 给用户授予管理员角色&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;给用户授予管理员角色&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	其中smallming为新建用户的用户名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmqctl set_user_tags mashibing administrator
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-给用户授权&#34;&gt;&lt;a href=&#34;#3-给用户授权&#34; class=&#34;headerlink&#34; title=&#34;3 给用户授权&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;给用户授权&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	“&amp;#x2F;” 表示虚拟机&lt;/p&gt;
&lt;p&gt;​	mashibing 表示用户名&lt;/p&gt;
&lt;p&gt;​	“.&lt;em&gt;“ “.&lt;/em&gt;“ “.*” 表示完整权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmqctl set_permissions -p &amp;quot;/&amp;quot; mashibing &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-登录&#34;&gt;&lt;a href=&#34;#4-登录&#34; class=&#34;headerlink&#34; title=&#34;4 登录&#34;&gt;&lt;/a&gt;4 &lt;strong&gt;登录&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	使用新建账户和密码在windows中访问rabbitmq并登录 &lt;/p&gt;
&lt;p&gt;​	在浏览器地址栏输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOjE1NjcyLw==&#34;&gt;http://ip:15672/&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 用户名：mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	密码：mashibing&lt;/p&gt;
&lt;h3 id=&#34;七、-交换器（交换机）&#34;&gt;&lt;a href=&#34;#七、-交换器（交换机）&#34; class=&#34;headerlink&#34; title=&#34;七、 交换器（交换机）&#34;&gt;&lt;/a&gt;七、 &lt;strong&gt;交换器（交换机）&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	交换器负责接收客户端传递过来的消息，并转发到对应的队列中。在RabbitMQ中支持四种交换器&lt;/p&gt;
&lt;p&gt;​	1.Direct Exchange：直连交换器（默认）&lt;/p&gt;
&lt;p&gt;​	2.Fanout Exchange：扇形交换器&lt;/p&gt;
&lt;p&gt;​	3.Topic Exchange：主题交换器&lt;/p&gt;
&lt;p&gt;​	4.Header Exchange：首部交换器。&lt;/p&gt;
&lt;p&gt;​	在RabbitMq的Web管理界面中Exchanges选项卡就可以看见这四个交换器。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/RabbitMQ/RabbitMQ-09.jpg&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;1-direct交换器&#34;&gt;&lt;a href=&#34;#1-direct交换器&#34; class=&#34;headerlink&#34; title=&#34;1 direct交换器&#34;&gt;&lt;/a&gt;1 &lt;strong&gt;direct交换器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	direct交换器是RabbitMQ默认交换器。默认会进行公平调度。所有接受者依次从消息队列中获取值。Publisher给哪个队列发消息，就一定是给哪个队列发送消息。对交换器绑定的其他队列没有任何影响。&lt;/p&gt;
&lt;p&gt;​	（代码演示）一个队列需要绑定多个消费者&lt;/p&gt;
&lt;p&gt;​	需要使用注解&amp;#x2F;API：&lt;/p&gt;
&lt;p&gt;​	org.springframework.amqp.core.Queue:队列&lt;/p&gt;
&lt;p&gt;​	AmqpTemplate：操作RabbitMQ的接口。负责发送或接收消息&lt;/p&gt;
&lt;p&gt;​	@RabbitListener(queues &amp;#x3D; “”) 注解某个方法为接收消息方法&lt;/p&gt;
&lt;h4 id=&#34;1-1-代码实现&#34;&gt;&lt;a href=&#34;#1-1-代码实现&#34; class=&#34;headerlink&#34; title=&#34;1.1 代码实现&#34;&gt;&lt;/a&gt;1.1 &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;1-1-1-新建项目Publisher&#34;&gt;&lt;a href=&#34;#1-1-1-新建项目Publisher&#34; class=&#34;headerlink&#34; title=&#34;1.1.1 新建项目Publisher&#34;&gt;&lt;/a&gt;1.1.1 &lt;strong&gt;新建项目Publisher&lt;/strong&gt;&lt;/h5&gt;&lt;h6 id=&#34;1-1-1-1-添加依赖&#34;&gt;&lt;a href=&#34;#1-1-1-1-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.1 添加依赖&#34;&gt;&lt;/a&gt;1.1.1.1 &lt;strong&gt;添加依赖&lt;/strong&gt;&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.2.2.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/parent&amp;gt;

&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-amqp&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1-1-1-2-编写配置文件&#34;&gt;&lt;a href=&#34;#1-1-1-2-编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.2 编写配置文件&#34;&gt;&lt;/a&gt;1.1.1.2 &lt;strong&gt;编写配置文件&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	新建application.yml.&lt;/p&gt;
&lt;p&gt;​	host:默认值localhost&lt;/p&gt;
&lt;p&gt;​	username默认值：guest&lt;/p&gt;
&lt;p&gt;​	password默认值：guest	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring:
  rabbitmq:
    host: 192.168.1.195
    username: mashibing
    password: mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1-1-1-3-编写配置类&#34;&gt;&lt;a href=&#34;#1-1-1-3-编写配置类&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.3 编写配置类&#34;&gt;&lt;/a&gt;1.1.1.3 &lt;strong&gt;编写配置类&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;新建com.config.RabbitmqConfig&lt;/p&gt;
&lt;p&gt;​	队列的创建只有没有这个队列的时候需要编写。以后没有这个queue()方法也可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Configuration
public class RabbitmqConfig &amp;#123;
    @Bean
    protected Queue queue()&amp;#123;
        Queue queue = new Queue(&amp;quot;myqueue&amp;quot;);
        return queue;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1-1-1-4-编写启动类&#34;&gt;&lt;a href=&#34;#1-1-1-4-编写启动类&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.4 编写启动类&#34;&gt;&lt;/a&gt;1.1.1.4 &lt;strong&gt;编写启动类&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;略&lt;/p&gt;
&lt;h6 id=&#34;1-1-1-5-编写测试类&#34;&gt;&lt;a href=&#34;#1-1-1-5-编写测试类&#34; class=&#34;headerlink&#34; title=&#34;1.1.1.5 编写测试类&#34;&gt;&lt;/a&gt;1.1.1.5 &lt;strong&gt;编写测试类&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;SpringBoot整合Spring-AMQP后包含内置对象AmqpTemplate&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootTest(classes = PublisherApplication.class)
@RunWith(SpringJUnit4ClassRunner.class)
public class MyTest &amp;#123;
    @Autowired
    private AmqpTemplate amqpTemplate;

    @Test
    public void test()&amp;#123;
        amqpTemplate.convertAndSend(&amp;quot;myqueue&amp;quot;,&amp;quot;这是内容1&amp;quot;);
        System.out.println(&amp;quot;发送成功&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-1-2-创建Consumer&#34;&gt;&lt;a href=&#34;#1-1-2-创建Consumer&#34; class=&#34;headerlink&#34; title=&#34;1.1.2 创建Consumer&#34;&gt;&lt;/a&gt;1.1.2 &lt;strong&gt;创建Consumer&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	新建项目consumer&lt;/p&gt;
&lt;h6 id=&#34;1-1-2-1-添加依赖&#34;&gt;&lt;a href=&#34;#1-1-2-1-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;1.1.2.1 添加依赖&#34;&gt;&lt;/a&gt;1.1.2.1 &lt;strong&gt;添加依赖&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	和Publisher一样&lt;/p&gt;
&lt;h6 id=&#34;1-1-2-2-编写配置文件&#34;&gt;&lt;a href=&#34;#1-1-2-2-编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;1.1.2.2 编写配置文件&#34;&gt;&lt;/a&gt;1.1.2.2 &lt;strong&gt;编写配置文件&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	和Publisher一样&lt;/p&gt;
&lt;h6 id=&#34;1-1-2-3-编写监听器方法&#34;&gt;&lt;a href=&#34;#1-1-2-3-编写监听器方法&#34; class=&#34;headerlink&#34; title=&#34;1.1.2.3 编写监听器方法&#34;&gt;&lt;/a&gt;1.1.2.3 &lt;strong&gt;编写监听器方法&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	注意：&lt;/p&gt;
&lt;p&gt;​	类上要有@Componet，项目启动时此类生效。&lt;/p&gt;
&lt;p&gt;​	@RabbitListener 监听指定队列。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Component
public class DemoReceive &amp;#123;

    @RabbitListener(queues = &amp;quot;myqueue&amp;quot;)
    public void demo(String msg)&amp;#123;
        System.out.println(&amp;quot;获取到的消息1111：&amp;quot;+msg);
    &amp;#125;

    @RabbitListener(queues = &amp;quot;myqueue&amp;quot;)
    public void demo2(String msg)&amp;#123;
        System.out.println(&amp;quot;获取到的消息2222：&amp;quot;+msg);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1-1-2-4-新建启动类&#34;&gt;&lt;a href=&#34;#1-1-2-4-新建启动类&#34; class=&#34;headerlink&#34; title=&#34;1.1.2.4 新建启动类&#34;&gt;&lt;/a&gt;1.1.2.4 &lt;strong&gt;新建启动类&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	略。启动后此项目一直处于运行状态。属于长连接。&lt;/p&gt;
&lt;h4 id=&#34;2-fanout交换器&#34;&gt;&lt;a href=&#34;#2-fanout交换器&#34; class=&#34;headerlink&#34; title=&#34;2 fanout交换器&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;fanout交换器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	扇形交换器，实际上做的事情就是广播，fanout会把消息发送给所有的绑定在当前交换器上的队列。且每个队列消息中第一个Consumer能收到消息。&lt;/p&gt;
&lt;p&gt;​	（代码演示）一个交换器需要绑定多个队列&lt;/p&gt;
&lt;p&gt;​	需要使用注解&amp;#x2F;API：&lt;/p&gt;
&lt;p&gt;​	FanoutExchange：fanout交换器&lt;/p&gt;
&lt;p&gt;​	Binding：绑定交换器和队列&lt;/p&gt;
&lt;p&gt;​	BindingBuilder：Binding的构建器&lt;/p&gt;
&lt;p&gt;​	amq.fanout:内置fanout交换器名称&lt;/p&gt;
&lt;h4 id=&#34;2-1-代码&#34;&gt;&lt;a href=&#34;#2-1-代码&#34; class=&#34;headerlink&#34; title=&#34;2.1 代码&#34;&gt;&lt;/a&gt;2.1 &lt;strong&gt;代码&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;2-1-1-Publisher&#34;&gt;&lt;a href=&#34;#2-1-1-Publisher&#34; class=&#34;headerlink&#34; title=&#34;2.1.1 Publisher&#34;&gt;&lt;/a&gt;2.1.1 &lt;strong&gt;Publisher&lt;/strong&gt;&lt;/h5&gt;&lt;h6 id=&#34;2-1-1-1-修改配置类&#34;&gt;&lt;a href=&#34;#2-1-1-1-修改配置类&#34; class=&#34;headerlink&#34; title=&#34;2.1.1.1 修改配置类&#34;&gt;&lt;/a&gt;2.1.1.1 &lt;strong&gt;修改配置类&lt;/strong&gt;&lt;/h6&gt;&lt;pre&gt;&lt;code&gt;@Bean
protected Queue fanoutQuque1()&amp;#123;
    return new Queue(&amp;quot;fanout1&amp;quot;);
&amp;#125;

@Bean
protected Queue fanoutQuque2()&amp;#123;
    return new Queue(&amp;quot;fanout2&amp;quot;);
&amp;#125;

@Bean
protected FanoutExchange fanoutExchange()&amp;#123;
    return new FanoutExchange(&amp;quot;amq.fanout&amp;quot;);
&amp;#125;

@Bean
protected Binding fanoutBinding(Queue fanoutQuque1,FanoutExchange fanoutExchange)&amp;#123;
    return BindingBuilder.bind(fanoutQuque1).to(fanoutExchange);
&amp;#125;

@Bean
protected Binding fanoutBinding2(Queue fanoutQuque2,FanoutExchange fanoutExchange)&amp;#123;
    return BindingBuilder.bind(fanoutQuque2).to(fanoutExchange);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-1-2-编写发送方法&#34;&gt;&lt;a href=&#34;#2-1-2-编写发送方法&#34; class=&#34;headerlink&#34; title=&#34;2.1.2 编写发送方法****&#34;&gt;&lt;/a&gt;2.1.2 &lt;strong&gt;编写发送方法&lt;/strong&gt;****&lt;/h5&gt;&lt;p&gt;​	第二个参数routingKey对于fanout没有意义的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Test
public void test2()&amp;#123;
    amqpTemplate.convertAndSend(&amp;quot;amq.fanout&amp;quot;,&amp;quot;asdfadsf&amp;quot;,&amp;quot;fanout msg&amp;quot;);
    System.out.println(&amp;quot;发送成功&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-1-3-Consumer&#34;&gt;&lt;a href=&#34;#2-1-3-Consumer&#34; class=&#34;headerlink&#34; title=&#34;2.1.3 Consumer&#34;&gt;&lt;/a&gt;2.1.3 &lt;strong&gt;Consumer&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	Consumer代码和Direct完全相同。一个队列给一个监听方法即可。&lt;/p&gt;
&lt;h4 id=&#34;3-topic交换器&#34;&gt;&lt;a href=&#34;#3-topic交换器&#34; class=&#34;headerlink&#34; title=&#34;3 topic交换器&#34;&gt;&lt;/a&gt;3 &lt;strong&gt;topic交换器&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	允许在路由键（RoutingKey）中出现匹配规则。&lt;/p&gt;
&lt;p&gt;​	路由键的写法和包写法相同。com.msb.xxxx.xxx格式。&lt;/p&gt;
&lt;p&gt;​	在绑定时可以带有下面特殊符号，中间可以出现:&lt;/p&gt;
&lt;p&gt;​	* : 代表一个单词（两个.之间内容）&lt;/p&gt;
&lt;p&gt;​	# : 0个或多个字符&lt;/p&gt;
&lt;p&gt;​	接收方依然是公平调度，同一个队列中内容轮换获取值。&lt;/p&gt;
&lt;p&gt;​	需要使用注解&amp;#x2F;API：&lt;/p&gt;
&lt;p&gt;​	TopicExchange：Topic交换器&lt;/p&gt;
&lt;p&gt;​	amq.topic:内置topic交换器名称&lt;/p&gt;
&lt;h4 id=&#34;3-1-代码&#34;&gt;&lt;a href=&#34;#3-1-代码&#34; class=&#34;headerlink&#34; title=&#34;3.1 代码&#34;&gt;&lt;/a&gt;3.1 &lt;strong&gt;代码&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;3-1-1-Publisher&#34;&gt;&lt;a href=&#34;#3-1-1-Publisher&#34; class=&#34;headerlink&#34; title=&#34;3.1.1 Publisher&#34;&gt;&lt;/a&gt;3.1.1 &lt;strong&gt;Publisher&lt;/strong&gt;&lt;/h5&gt;&lt;h6 id=&#34;3-1-1-1-配置类。&#34;&gt;&lt;a href=&#34;#3-1-1-1-配置类。&#34; class=&#34;headerlink&#34; title=&#34;3.1.1.1 配置类。&#34;&gt;&lt;/a&gt;3.1.1.1 &lt;strong&gt;配置类。&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	之所以建立两个队列目的是为了演示使用Topic完成Fanout效果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Bean
protected Queue topicQueue() &amp;#123;
    return new Queue(&amp;quot;topic1&amp;quot;);
&amp;#125;

@Bean
protected Queue topicQueue2() &amp;#123;
    return new Queue(&amp;quot;topic2&amp;quot;);
&amp;#125;

@Bean
protected TopicExchange topicExchange() &amp;#123;
    return new TopicExchange(&amp;quot;amq.topic&amp;quot;);
&amp;#125;

@Bean
protected Binding topicBinding(Queue topicQueue, TopicExchange topicExchange) &amp;#123;
    return BindingBuilder.bind(topicQueue).to(topicExchange).with(&amp;quot;com.a&amp;quot;);
&amp;#125;

@Bean
protected Binding topicBinding2(Queue topicQueue2, TopicExchange topicExchange) &amp;#123;
    return BindingBuilder.bind(topicQueue2).to(topicExchange).with(&amp;quot;com.#&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;3-1-1-2-发送消息&#34;&gt;&lt;a href=&#34;#3-1-1-2-发送消息&#34; class=&#34;headerlink&#34; title=&#34;3.1.1.2 发送消息&#34;&gt;&lt;/a&gt;3.1.1.2 &lt;strong&gt;发送消息&lt;/strong&gt;&lt;/h6&gt;&lt;p&gt;​	第二个参数为路由键，匹配配置类中绑定时的路由规则。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Test
public void test3()&amp;#123;
    amqpTemplate.convertAndSend(&amp;quot;amq.topic&amp;quot;,&amp;quot;com.bjsxt.a.b&amp;quot;,&amp;quot;topic msg&amp;quot;);
    System.out.println(&amp;quot;发送成功&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 3.1.2 &lt;strong&gt;Consumer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	Consumer代码与以前一样，注意队列名称topic1,topic2不要写路由键名称。( queues取值)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@RabbitListener(queues = &amp;quot;topic2&amp;quot;)
public void demo10(String msg)&amp;#123;
    System.out.println(&amp;quot;topic2-2:&amp;quot;+msg);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;八、-传递对象类型参数&#34;&gt;&lt;a href=&#34;#八、-传递对象类型参数&#34; class=&#34;headerlink&#34; title=&#34;八、 传递对象类型参数&#34;&gt;&lt;/a&gt;八、 &lt;strong&gt;传递对象类型参数&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	如果消息是对象类型，此对象的类型必须进行序列化，且需要给定序列化值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class People implements Serializable 
&amp;#123;
    public static final long serialVersionUID=1L;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="分布式" />
        <category term="中间件" />
        <category term="RabbitMQ" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/Solr/</id>
        <title>Solr</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Solr/"/>
        <content type="html">&lt;h1 id=&#34;Solr&#34;&gt;&lt;a href=&#34;#Solr&#34; class=&#34;headerlink&#34; title=&#34;Solr&#34;&gt;&lt;/a&gt;Solr&lt;/h1&gt;&lt;h3 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;主要内容&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Solr简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solr搜索原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solr单机版安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可视化管理界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;新建核心&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dataimport&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用SolrJ操作Solr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring Data for Apache Solr&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;SolrCloud&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;学习目标&#34;&gt;&lt;a href=&#34;#学习目标&#34; class=&#34;headerlink&#34; title=&#34;学习目标&#34;&gt;&lt;/a&gt;学习目标&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Solr简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solr搜索原理&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solr单机版安装&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可视化管理界面&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新建核心&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分词&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dataimport&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用SolrJ操作Solr&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SolrCloud&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Data for Apache Solr&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;一、Solr简介&#34;&gt;&lt;a href=&#34;#一、Solr简介&#34; class=&#34;headerlink&#34; title=&#34;一、Solr简介&#34;&gt;&lt;/a&gt;一、Solr简介&lt;/h3&gt;&lt;h4 id=&#34;1-为什么使用Solr&#34;&gt;&lt;a href=&#34;#1-为什么使用Solr&#34; class=&#34;headerlink&#34; title=&#34;1.为什么使用Solr&#34;&gt;&lt;/a&gt;1.为什么使用Solr&lt;/h4&gt;&lt;p&gt;​	在海量数据下，对MySQL或Oracle进行模糊查询或条件查询的效率是很低的。而搜索功能在绝大多数项目中都是必须的，如何提升搜索效率是很多互联网项目必须要考虑的问题。&lt;/p&gt;
&lt;p&gt;​	既然使用关系型数据库进行搜索效率比较低，最直接的解决方案就是使用专用搜索工具进行搜索，从而提升搜索效率。&lt;/p&gt;
&lt;h4 id=&#34;2-常见搜索解决方案&#34;&gt;&lt;a href=&#34;#2-常见搜索解决方案&#34; class=&#34;headerlink&#34; title=&#34;2.常见搜索解决方案&#34;&gt;&lt;/a&gt;2.常见搜索解决方案&lt;/h4&gt;&lt;p&gt;​	基于Apache Lucene（全文检索工具库）实现搜索。但是Lucene的使用对于绝大多数的程序员都是“噩梦级”的。&lt;/p&gt;
&lt;p&gt;​	基于谷歌API实现搜索。&lt;/p&gt;
&lt;p&gt;​	基于百度API实现搜索。&lt;/p&gt;
&lt;h4 id=&#34;3-Solr简介&#34;&gt;&lt;a href=&#34;#3-Solr简介&#34; class=&#34;headerlink&#34; title=&#34;3.Solr简介&#34;&gt;&lt;/a&gt;3.Solr简介&lt;/h4&gt;&lt;p&gt;​	Solr是基于Apache Lucene构建的用于搜索和分析的开源解决方案。可提供可扩展索引、搜索功能、高亮显示和文字解析功能。&lt;/p&gt;
&lt;p&gt;​	Solr本质就是一个Java web 项目，且内嵌了Jetty服务器，所以安装起来非常方便。客户端操作Solr的过程和平时我们所写项目一样，就是请求Solr中控制器，处理完数据后把结果响应给客户端。&lt;/p&gt;
&lt;h4 id=&#34;4-正向索引和反向索引&#34;&gt;&lt;a href=&#34;#4-正向索引和反向索引&#34; class=&#34;headerlink&#34; title=&#34;4.正向索引和反向索引&#34;&gt;&lt;/a&gt;4.正向索引和反向索引&lt;/h4&gt;&lt;p&gt;​	只要讨论搜索就不得不提的两个概念：正向索引（forward index）和反向索引(inverted index)。&lt;/p&gt;
&lt;p&gt;​	正向索引：从文档内容到词组的过程。每次搜索的实收需要搜索所有文档，每个文档比较搜索条件和词组。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文档&lt;/th&gt;
&lt;th&gt;词组&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;I am a chinese&lt;/td&gt;
&lt;td&gt;I,am,a,chinese&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;​	反向索引：是正向索引的逆向。建立词组和文档的映射关系。通过找到词组就能找到文档内容。（和新华字典找字很像）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;词组&lt;/th&gt;
&lt;th&gt;文档&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;I,am,a,chinese&lt;/td&gt;
&lt;td&gt;I am a chinese&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;二、Solr搜索原理&#34;&gt;&lt;a href=&#34;#二、Solr搜索原理&#34; class=&#34;headerlink&#34; title=&#34;二、Solr搜索原理&#34;&gt;&lt;/a&gt;二、Solr搜索原理&lt;/h3&gt;&lt;h4 id=&#34;1-搜索原理&#34;&gt;&lt;a href=&#34;#1-搜索原理&#34; class=&#34;headerlink&#34; title=&#34;1.搜索原理&#34;&gt;&lt;/a&gt;1.搜索原理&lt;/h4&gt;&lt;p&gt;​	Solr能够提升检索效率的主要原因就是分词和索引（反向索引，通过）。&lt;/p&gt;
&lt;p&gt;​	分词：会对搜索条件&amp;#x2F;存储内容进行分词，分成日常所使用的词语。&lt;/p&gt;
&lt;p&gt;​	索引：存储在Solr中内容会按照程序员的要求来是否建立索引。如果要求建立索引会把存储内容中关键字（分词）建立索引。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Solr/solr-01.JPG&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;2-Solr中数据存储说明&#34;&gt;&lt;a href=&#34;#2-Solr中数据存储说明&#34; class=&#34;headerlink&#34; title=&#34;2.Solr中数据存储说明&#34;&gt;&lt;/a&gt;2.Solr中数据存储说明&lt;/h4&gt;&lt;p&gt;​	Solr为了给内容建立索引，所以Solr就必须具备数据存储能力。所有需要被搜索的内容都需要存储在Solr中，在开发中需要把数据库中数据添加到Solr中进行初始化，每次修改数据库中数据还需要同步Solr中的数据。&lt;/p&gt;
&lt;p&gt;​	Solr中数据存储是存储在Document对象中，对象中可以包含的属性和属性类型都定义在scheme.xml中。如果需要自定义属性或自定义属性类型都需要修改scheme.xml配置文件。从Solr5开始schema.xml更改名称为managed-scheme(没有扩展名)&lt;/p&gt;
&lt;h3 id=&#34;三、Solr单机版安装&#34;&gt;&lt;a href=&#34;#三、Solr单机版安装&#34; class=&#34;headerlink&#34; title=&#34;三、Solr单机版安装&#34;&gt;&lt;/a&gt;三、Solr单机版安装&lt;/h3&gt;&lt;p&gt;​	Solr是使用Java编写，所以必选先安装JDK。&lt;/p&gt;
&lt;h4 id=&#34;1-上传并解压&#34;&gt;&lt;a href=&#34;#1-上传并解压&#34; class=&#34;headerlink&#34; title=&#34;1.上传并解压&#34;&gt;&lt;/a&gt;1.上传并解压&lt;/h4&gt;&lt;p&gt;​	上传压缩包solr-7.7.2.tgz到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中。&lt;/p&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/tmp
# tar zxf solr-7.7.2.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制到-x2F-usr-x2F-local中&#34;&gt;&lt;a href=&#34;#2-复制到-x2F-usr-x2F-local中&#34; class=&#34;headerlink&#34; title=&#34;2.复制到&amp;#x2F;usr&amp;#x2F;local中&#34;&gt;&lt;/a&gt;2.复制到&amp;#x2F;usr&amp;#x2F;local中&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# cp -r solr-7.7.2 ../solr
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-修改启动参数&#34;&gt;&lt;a href=&#34;#3-修改启动参数&#34; class=&#34;headerlink&#34; title=&#34;3.修改启动参数&#34;&gt;&lt;/a&gt;3.修改启动参数&lt;/h4&gt;&lt;p&gt;​	修改启动参数，否则启动时报警告。提示设置SOLR_ULIMIT_CHECKS&amp;#x3D;false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/bin
# vim solr.in.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Solr/solr-02.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;4-启动Solr&#34;&gt;&lt;a href=&#34;#4-启动Solr&#34; class=&#34;headerlink&#34; title=&#34;4.启动Solr&#34;&gt;&lt;/a&gt;4.启动Solr&lt;/h4&gt;&lt;p&gt;​	Solr内嵌Jetty，直接启动即可。监听8983端口。&lt;/p&gt;
&lt;p&gt;​	solr默认不推荐root账户启动，如果是root账户启动需要添加-force参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;四、可视化管理界面&#34;&gt;&lt;a href=&#34;#四、可视化管理界面&#34; class=&#34;headerlink&#34; title=&#34;四、可视化管理界面&#34;&gt;&lt;/a&gt;四、可视化管理界面&lt;/h3&gt;&lt;p&gt;​	在关闭防火墙的前提下，可以在windows的浏览器中访问Solr。&lt;/p&gt;
&lt;p&gt;​	输入: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguOTMuMTA6ODk4My8=&#34;&gt;http://192.168.93.10:8983&lt;/span&gt; 就可以访问Solr的可视化管理界面。&lt;/p&gt;
&lt;p&gt;​	左侧有5个菜单。分别是：&lt;/p&gt;
&lt;p&gt;​	（1）Dashboard：面板显示Solr的总体信息。&lt;/p&gt;
&lt;p&gt;​	（2）Logging：日志&lt;/p&gt;
&lt;p&gt;​	（3）Core Admin：Solr的核心。类似于数据的Database&lt;/p&gt;
&lt;p&gt;​	（4）Java Perperties：所有Java相关属性。&lt;/p&gt;
&lt;p&gt;​	（5）Thread Dump：线程相关信息。&lt;/p&gt;
&lt;p&gt;​	（6）如果有Core，将显示在此处。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Solr/solr-03.JPG&#34; class=&#34;&#34;&gt;

&lt;h3 id=&#34;五、新建核心&#34;&gt;&lt;a href=&#34;#五、新建核心&#34; class=&#34;headerlink&#34; title=&#34;五、新建核心&#34;&gt;&lt;/a&gt;五、新建核心&lt;/h3&gt;&lt;p&gt;​	Solr安装完成后默认是没有核心的。需要手动配置。&lt;/p&gt;
&lt;p&gt;​	需要在solr&amp;#x2F;server&amp;#x2F;solr下新建文件夹，并给定配置文件，否则无法建立。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Solr/solr-04.JPG&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;1-新建目录&#34;&gt;&lt;a href=&#34;#1-新建目录&#34; class=&#34;headerlink&#34; title=&#34;1.新建目录&#34;&gt;&lt;/a&gt;1.新建目录&lt;/h4&gt;&lt;p&gt;​	在&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr中新建自定义名称目录。此处示例名称为testcore。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/server/solr
# mkdir testcore
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制配置文件&#34;&gt;&lt;a href=&#34;#2-复制配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.复制配置文件&#34;&gt;&lt;/a&gt;2.复制配置文件&lt;/h4&gt;&lt;p&gt;​	在configsets里面包含了_default和sample_techproducts_configs。里面都是配置文件示例。_default属于默认配置，较纯净。sample_techproducts_configs是带有了一些配置示例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp -r configsets/_default/conf/ testcore/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-填写Core信息&#34;&gt;&lt;a href=&#34;#3-填写Core信息&#34; class=&#34;headerlink&#34; title=&#34;3.填写Core信息&#34;&gt;&lt;/a&gt;3.填写Core信息&lt;/h4&gt;&lt;p&gt;​	在可视化管理界面中Core Admin中编写信息后点击Add Core后，短暂延迟后testcore就会创建成功。schema处不用更改。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Solr/solr-05.JPG&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;4-出现testcore&#34;&gt;&lt;a href=&#34;#4-出现testcore&#34; class=&#34;headerlink&#34; title=&#34;4.出现testcore&#34;&gt;&lt;/a&gt;4.出现testcore&lt;/h4&gt;&lt;p&gt;​	在客户端管理界面中，选择新建的Core后，就可以按照自己项目的需求进行操作了。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Solr/solr-06.jpg&#34; class=&#34;&#34;&gt;

&lt;h3 id=&#34;六、分词Analysis&#34;&gt;&lt;a href=&#34;#六、分词Analysis&#34; class=&#34;headerlink&#34; title=&#34;六、分词Analysis&#34;&gt;&lt;/a&gt;六、分词Analysis&lt;/h3&gt;&lt;p&gt;​	在Solr可视化管理界面中，Core的管理菜单项中都会有Analysis。表示根据Scheme.xml(managed-schema)中配置要求进行解析。&lt;/p&gt;
&lt;p&gt;​	对英文解析就比较简单了，只要按照空格把英文语句拆分成英文单词即可。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Solr/solr-07.jpg&#34; class=&#34;&#34;&gt;

&lt;p&gt;​	但是如果条件是中文时，把一句话按照字进行拆分就不是很合理了。正确的方式是按照合理的词组进行拆分。&lt;img data-src=&#34;/2022/10/07/Solr/solr-08.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-配置步骤&#34;&gt;&lt;a href=&#34;#1-配置步骤&#34; class=&#34;headerlink&#34; title=&#34;1.配置步骤&#34;&gt;&lt;/a&gt;1.配置步骤&lt;/h4&gt;&lt;p&gt;​	上传ik-analyzer.jar到webapps中。&lt;/p&gt;
&lt;p&gt;​	去&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWFyY2gubWF2ZW4ub3JnL3NlYXJjaD9xPWNvbS5naXRodWIubWFnZXNlJUU0JUI4JThCJUU4JUJEJUJEJUU1JUFGJUI5JUU1JUJBJTk0JUU3JTg5JTg4JUU2JTlDJUFDJUU3JTlBJTg0aWstYW5hbHl6ZXIlRTMlODAlODIlRTUlOEYlQUYlRTQlQkIlQTUlRTUlOUMlQTglRTglQjUlODQlRTYlOTYlOTklRTQlQjglQUQlRTclOUIlQjQlRTYlOEUlQTUlRTglOEUlQjclRTUlOEYlOTYlRTMlODAlODI=&#34;&gt;https://search.maven.org/search?q=com.github.magese下载对应版本的ik-analyzer。可以在资料中直接获取。&lt;/span&gt;&lt;/p&gt;
&lt;h5 id=&#34;1-1上传jar到指定目录&#34;&gt;&lt;a href=&#34;#1-1上传jar到指定目录&#34; class=&#34;headerlink&#34; title=&#34;1.1上传jar到指定目录&#34;&gt;&lt;/a&gt;1.1上传jar到指定目录&lt;/h5&gt;&lt;p&gt;​	上传ik-analyzer-7.7.0.jar到&lt;/p&gt;
&lt;p&gt;​	&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr-webapp&amp;#x2F;webapp&amp;#x2F;WEB-INF&amp;#x2F;lib目录中&lt;/p&gt;
&lt;h5 id=&#34;1-2修改配置文件&#34;&gt;&lt;a href=&#34;#1-2修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;1.2修改配置文件&#34;&gt;&lt;/a&gt;1.2修改配置文件&lt;/h5&gt;&lt;p&gt;​	修改&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;solr&amp;#x2F;server&amp;#x2F;solr&amp;#x2F;testcore&amp;#x2F;conf&amp;#x2F;managed-schema&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;vim /usr/local/solr/server/solr/testcore/conf/managed-schema
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	添加下面内容。&lt;/p&gt;
&lt;p&gt;​	排版：Esc 退出编辑状态下：gg&amp;#x3D;G&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;field name=&amp;quot;myfield&amp;quot; type=&amp;quot;text_ik&amp;quot; indexed=&amp;quot;true&amp;quot; stored=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;fieldType name=&amp;quot;text_ik&amp;quot; class=&amp;quot;solr.TextField&amp;quot;&amp;gt;
            &amp;lt;analyzer type=&amp;quot;index&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;false&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
            &amp;lt;analyzer type=&amp;quot;query&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;true&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
    &amp;lt;/fieldType&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-3重启&#34;&gt;&lt;a href=&#34;#1-3重启&#34; class=&#34;headerlink&#34; title=&#34;1.3重启&#34;&gt;&lt;/a&gt;1.3重启&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/bin
# ./solr stop -all
# ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-4验证&#34;&gt;&lt;a href=&#34;#1-4验证&#34; class=&#34;headerlink&#34; title=&#34;1.4验证&#34;&gt;&lt;/a&gt;1.4验证&lt;/h5&gt;&lt;p&gt;​	可以在可视化管理界面中找到myfield属性进行验证。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Solr/solr-09.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;2-managed-schema配置说明&#34;&gt;&lt;a href=&#34;#2-managed-schema配置说明&#34; class=&#34;headerlink&#34; title=&#34;2.managed-schema配置说明&#34;&gt;&lt;/a&gt;2.managed-schema配置说明&lt;/h4&gt;&lt;h5 id=&#34;2-1-lt-fieldType-x2F-gt&#34;&gt;&lt;a href=&#34;#2-1-lt-fieldType-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;2.1&amp;lt; fieldType&amp;#x2F;&amp;gt;&lt;/h5&gt;&lt;p&gt;​	表示定义一个属性类型。在Solr中属性类型都是自定义的。在上面配置中name&amp;#x3D;”text_ik”为自定义类型。当某个属性取值为text_ik时IK Analyzer才能生效。&lt;/p&gt;
&lt;h5 id=&#34;2-2-lt-field-x2F-gt&#34;&gt;&lt;a href=&#34;#2-2-lt-field-x2F-gt&#34; class=&#34;headerlink&#34; title=&#34;2.2&amp;lt; field&amp;#x2F;&amp;gt;&#34;&gt;&lt;/a&gt;2.2&amp;lt; field&amp;#x2F;&amp;gt;&lt;/h5&gt;&lt;p&gt;​	表示向Document中添加一个属性。&lt;/p&gt;
&lt;p&gt;​	常用属性：&lt;/p&gt;
&lt;p&gt;​		name: 属性名&lt;/p&gt;
&lt;p&gt;​		type:属性类型。所有类型都是solr使用&lt;fieldType&gt;配置的&lt;/p&gt;
&lt;p&gt;​		indexed: 是否建立索引&lt;/p&gt;
&lt;p&gt;​		stored: solr是否把该属性值响应给搜索用户。&lt;/p&gt;
&lt;p&gt;​		required：该属性是否是必须的。默认id是必须的。&lt;/p&gt;
&lt;p&gt;​		multiValued：如果为true，表示该属性为复合属性，此属性中包含了多个其他的属性。常用在多个列作为搜索条件时，把这些列定义定义成一个新的复合属性，通过搜索一个复合属性就可以实现搜索多个列。当设置为true时与&amp;lt; copyField source&amp;#x3D;”” dest&amp;#x3D;””&amp;#x2F;&amp;gt;结合使用&lt;/p&gt;
&lt;h5 id=&#34;2-3-lt-uniqueKey-gt&#34;&gt;&lt;a href=&#34;#2-3-lt-uniqueKey-gt&#34; class=&#34;headerlink&#34; title=&#34;2.3&amp;lt; uniqueKey&amp;gt;&#34;&gt;&lt;/a&gt;2.3&amp;lt; uniqueKey&amp;gt;&lt;/h5&gt;&lt;p&gt;​	唯一主键，Solr中默认定义id属性为唯一主键。ID的值是不允许重复的。&lt;/p&gt;
&lt;h5 id=&#34;2-4-lt-dynamicField-gt&#34;&gt;&lt;a href=&#34;#2-4-lt-dynamicField-gt&#34; class=&#34;headerlink&#34; title=&#34;2.4&amp;lt; dynamicField&amp;gt;&#34;&gt;&lt;/a&gt;2.4&amp;lt; dynamicField&amp;gt;&lt;/h5&gt;&lt;p&gt;​	名称中允许*进行通配。代表满足特定名称要求的一组属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; msb_java    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	msb_bigdata&lt;/p&gt;
&lt;p&gt;​	msb_UI&lt;/p&gt;
&lt;p&gt;​        msb_*&lt;/p&gt;
&lt;h3 id=&#34;七、Dataimport&#34;&gt;&lt;a href=&#34;#七、Dataimport&#34; class=&#34;headerlink&#34; title=&#34;七、Dataimport&#34;&gt;&lt;/a&gt;七、Dataimport&lt;/h3&gt;&lt;p&gt;​	可以使用Solr自带的Dataimport功能把数据库中数据快速导入到solr中.&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;必须保证managed-schema和数据库中表的列对应。，添加配置&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-修改配置文件&#34;&gt;&lt;a href=&#34;#1-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;1.修改配置文件&#34;&gt;&lt;/a&gt;1.修改配置文件&lt;/h4&gt;&lt;p&gt;​	修改solrconfig.xml，添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;!-- 配置数据导入的处理器 --&amp;gt;
  &amp;lt;requestHandler name=&amp;quot;/dataimport&amp;quot; class=&amp;quot;org.apache.solr.handler.dataimport.DataImportHandler&amp;quot;&amp;gt;
    &amp;lt;lst name=&amp;quot;defaults&amp;quot;&amp;gt;
      &amp;lt;!--  加载data-config.xml  --&amp;gt;
      &amp;lt;str name=&amp;quot;config&amp;quot;&amp;gt;data-config.xml&amp;lt;/str&amp;gt;
     &amp;lt;/lst&amp;gt;
  &amp;lt;/requestHandler&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-新建data-config-xml&#34;&gt;&lt;a href=&#34;#2-新建data-config-xml&#34; class=&#34;headerlink&#34; title=&#34;2.新建data-config.xml&#34;&gt;&lt;/a&gt;2.新建data-config.xml&lt;/h4&gt;&lt;p&gt;​	和solrconfig.xml同一目录下新建data-config.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;dataConfig&amp;gt;
        &amp;lt;dataSource type=&amp;quot;JdbcDataSource&amp;quot;   
                driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot;   
                url=&amp;quot;jdbc:mysql://192.168.1.135:3306/mytest&amp;quot;   
                user=&amp;quot;root&amp;quot;   
                password=&amp;quot;root&amp;quot;/&amp;gt;
        &amp;lt;document&amp;gt;
            &amp;lt;entity name=&amp;quot;product&amp;quot; query=&amp;quot;SELECT id,name,price from t_product&amp;quot;&amp;gt;
                &amp;lt;!-- 
                 实现数据库的列和索引库的字段的映射
                 column 指定数据库的列表
                 name  指定索引库的字段名字，必须和schema.xml中定义的一样
                 --&amp;gt;
                 &amp;lt;field column=&amp;quot;id&amp;quot; name=&amp;quot;id&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;price&amp;quot; name=&amp;quot;price&amp;quot;/&amp;gt;
            &amp;lt;/entity&amp;gt;
         &amp;lt;/document&amp;gt;
&amp;lt;/dataConfig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-添加jar&#34;&gt;&lt;a href=&#34;#3-添加jar&#34; class=&#34;headerlink&#34; title=&#34;3.添加jar&#34;&gt;&lt;/a&gt;3.添加jar&lt;/h4&gt;&lt;p&gt;​	向solr-webapp中添加三个jar。在dist中两个还有一个数据库驱动。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Solr/solr-10.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;4-操作&#34;&gt;&lt;a href=&#34;#4-操作&#34; class=&#34;headerlink&#34; title=&#34;4.操作&#34;&gt;&lt;/a&gt;4.操作&lt;/h4&gt;&lt;p&gt;​	重启solr后，在可视化管理页面中进行数据导入。&lt;/p&gt;
&lt;p&gt;​	注意：&lt;/p&gt;
&lt;p&gt;​	点击导入按钮后，要记得点击刷新按钮。&lt;/p&gt;
&lt;h3 id=&#34;八、菜单项目Documents使用办法&#34;&gt;&lt;a href=&#34;#八、菜单项目Documents使用办法&#34; class=&#34;headerlink&#34; title=&#34;八、菜单项目Documents使用办法&#34;&gt;&lt;/a&gt;八、菜单项目Documents使用办法&lt;/h3&gt;&lt;p&gt;​	以XML格式举例&lt;/p&gt;
&lt;h4 id=&#34;1-新增-x2F-修改&#34;&gt;&lt;a href=&#34;#1-新增-x2F-修改&#34; class=&#34;headerlink&#34; title=&#34;1.新增&amp;#x2F;修改&#34;&gt;&lt;/a&gt;1.新增&amp;#x2F;修改&lt;/h4&gt;&lt;p&gt;​	当id不存在时新增，当id存在修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;doc&amp;gt;
&amp;lt;field name=&amp;quot;id&amp;quot;&amp;gt;8&amp;lt;/field&amp;gt;
&amp;lt;field name=&amp;quot;name&amp;quot;&amp;gt;明天更大卖&amp;lt;/field&amp;gt;
&amp;lt;field name=&amp;quot;price&amp;quot;&amp;gt;98&amp;lt;/field&amp;gt;
&amp;lt;/doc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-删除&#34;&gt;&lt;a href=&#34;#2-删除&#34; class=&#34;headerlink&#34; title=&#34;2.删除&#34;&gt;&lt;/a&gt;2.删除&lt;/h4&gt;&lt;h5 id=&#34;2-1根据主键删除&#34;&gt;&lt;a href=&#34;#2-1根据主键删除&#34; class=&#34;headerlink&#34; title=&#34;2.1根据主键删除&#34;&gt;&lt;/a&gt;2.1根据主键删除&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;delete&amp;gt;
    &amp;lt;id&amp;gt;8&amp;lt;/id&amp;gt;
&amp;lt;/delete&amp;gt;
&amp;lt;commit/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-2根据条件删除&#34;&gt;&lt;a href=&#34;#2-2根据条件删除&#34; class=&#34;headerlink&#34; title=&#34;2.2根据条件删除&#34;&gt;&lt;/a&gt;2.2根据条件删除&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;delete&amp;gt;
    &amp;lt;query&amp;gt;*:*&amp;lt;/query&amp;gt;
&amp;lt;/delete&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-solr可视化界面使用（QUERY）&#34;&gt;&lt;a href=&#34;#3-solr可视化界面使用（QUERY）&#34; class=&#34;headerlink&#34; title=&#34;3.solr可视化界面使用（QUERY）&#34;&gt;&lt;/a&gt;3.solr可视化界面使用（QUERY）&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645693120964.png&#34; alt=&#34;1645693120964&#34;&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;q：&lt;/strong&gt;query，等于。格式  ——&amp;gt; parameter&amp;#x2F;columns : value	&lt;strong&gt;具有分词时，相当于模糊查询–like&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;fq：&lt;/strong&gt;【在 q 的情况下再加条件】（要有分词功能）注意这里的keyword是用来检索的字段，他包含name、address、gender、expert_skill，这几个属性，所以我搜索“海”能够查询出来有海字的记录。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;sort：&lt;/strong&gt;排序 。 parameter&amp;#x2F;columns    desc逆序&amp;#x2F;asc&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;start,rows：&lt;/strong&gt;从查询结果的start开始，显示到rows结束【下标】&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;fl：&lt;/strong&gt;想显示的属性。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;df：&lt;/strong&gt;不想显示的属性。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;wt：&lt;/strong&gt;返回值类型&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;hl：&lt;/strong&gt;高亮&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    *  hl.fl						 value
    *  hl.simple.pre        &amp;lt;font color=&amp;#39;red&amp;#39;&amp;gt;
    *  hl.simple.post     &amp;lt;/font&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;h3 id=&#34;九、使用SolrJ操作Solr&#34;&gt;&lt;a href=&#34;#九、使用SolrJ操作Solr&#34; class=&#34;headerlink&#34; title=&#34;九、使用SolrJ操作Solr&#34;&gt;&lt;/a&gt;九、使用SolrJ操作Solr&lt;/h3&gt;&lt;p&gt;​	SolrJ是Solr提供的Java客户端API。通过SolrJ可以实现Java程序对Solr中数据的操作。&lt;/p&gt;
&lt;p&gt;​	大前提：添加SolrJ依赖。依赖版本和Solr版本严格对应&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.solr&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;solr-solrj&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;7.7.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-新增-x2F-修改实现&#34;&gt;&lt;a href=&#34;#1-新增-x2F-修改实现&#34; class=&#34;headerlink&#34; title=&#34;1.新增&amp;#x2F;修改实现&#34;&gt;&lt;/a&gt;1.新增&amp;#x2F;修改实现&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;String url = &amp;quot;http://192.168.93.10:8983/solr/testcore&amp;quot;;
HttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();
SolrInputDocument inputDocument = new SolrInputDocument();
inputDocument.addField(&amp;quot;id&amp;quot;,&amp;quot;3&amp;quot;);
inputDocument.addField(&amp;quot;myfield&amp;quot;,&amp;quot;myfield3&amp;quot;);
solrClient.add(inputDocument);
solrClient.commit();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;使用solrj进行索引的添加&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每个索引的添加必须要ID&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;添加key值要和schema.xml文件内的field域保持一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加数据后一定要提交数据，不然是不存在数据的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接Solr的对象需要连接到项目名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个document是一组Json数据对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-删除实现&#34;&gt;&lt;a href=&#34;#2-删除实现&#34; class=&#34;headerlink&#34; title=&#34;2.删除实现&#34;&gt;&lt;/a&gt;2.删除实现&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;String url = &amp;quot;http://192.168.93.10:8983/solr/testcore&amp;quot;;
HttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();
solrClient.deleteById(&amp;quot;3&amp;quot;);
solrClient.commit();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;删除支持两种删除方式&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1.根据ID&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;2.执行查询删除&lt;ul&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询删除的格式：查询的域:值&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-查询实现&#34;&gt;&lt;a href=&#34;#3-查询实现&#34; class=&#34;headerlink&#34; title=&#34;3.查询实现&#34;&gt;&lt;/a&gt;3.查询实现&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public void testQuery()&amp;#123;
    try &amp;#123;
        String url = &amp;quot;http://192.168.93.10:8983/solr/testcore&amp;quot;;
        HttpSolrClient solrClient = new HttpSolrClient.Builder(url).build();

        //封装了所有查询条件
        SolrQuery params = new SolrQuery();
        params.setQuery(&amp;quot;name:丰富的&amp;quot;);
        //排序
        params.setSort(&amp;quot;price&amp;quot;, SolrQuery.ORDER.desc);
        //分页
        params.setStart(0);
 params.setRows(1);
        //高亮
        params.setHighlight(true);
        params.addHighlightField(&amp;quot;name&amp;quot;);
        params.setHighlightSimplePre(&amp;quot;&amp;lt;span&amp;gt;&amp;quot;);
        params.setHighlightSimplePost(&amp;quot;&amp;lt;/span&amp;gt;&amp;quot;);

        QueryResponse response = solrClient.query(params);
        SolrDocumentList list = response.getResults();
        System.out.println(&amp;quot;总条数：&amp;quot;+list.getNumFound());

        //高亮数据
        Map&amp;lt;String, Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&amp;gt; highlighting = response.getHighlighting();

        for(SolrDocument doc :list)&amp;#123;
            System.out.println(doc.get(&amp;quot;id&amp;quot;));
            Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; map = highlighting.get(doc.get(&amp;quot;id&amp;quot;));
            List&amp;lt;String&amp;gt; HLList = map.get(&amp;quot;name&amp;quot;);
            if(HLList!=null&amp;amp;&amp;amp;HLList.size()&amp;gt;0)&amp;#123;//显示高亮数据
                System.out.println(HLList.get(0));
            &amp;#125;else&amp;#123;
                System.out.println(doc.get(&amp;quot;name&amp;quot;));
            &amp;#125;
            System.out.println(doc.get(&amp;quot;price&amp;quot;));
            System.out.println(&amp;quot;===================&amp;quot;);
        &amp;#125;
        solrClient.close();
    &amp;#125; catch (SolrServerException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (IOException e) &amp;#123;
        e.printStackTrace();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用到的对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.SolrQuery查询对象&lt;ul&gt;
&lt;li&gt;1.setQuery()：设置查询的关键字&lt;br&gt;  2.set（）:设置查询的域&lt;br&gt;  3.setStart():设置开始&lt;br&gt;  4.setRows（）：设置结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2.QueryResponse：响应结果集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.getNumFound():返回查询到的数量&lt;br&gt;  2.getResults（）；返回封装的list集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3.SolrDocumentList：结果集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.get():获取指定域的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;十、Spring-Data-for-Apache-Solr&#34;&gt;&lt;a href=&#34;#十、Spring-Data-for-Apache-Solr&#34; class=&#34;headerlink&#34; title=&#34;十、Spring Data for Apache Solr&#34;&gt;&lt;/a&gt;十、Spring Data for Apache Solr&lt;/h3&gt;&lt;h4 id=&#34;1-Spring-Data简介&#34;&gt;&lt;a href=&#34;#1-Spring-Data简介&#34; class=&#34;headerlink&#34; title=&#34;1.Spring Data简介&#34;&gt;&lt;/a&gt;1.Spring Data简介&lt;/h4&gt;&lt;p&gt;​	Spring Data 是Spring的顶级项目。里面包含了N多个二级子项目，每个子项目对应一种技术或工具。其目的为了让数据访问更加简单，更加方便的和Spring进行整合。&lt;/p&gt;
&lt;p&gt;​	Spring Data 项目如果单独使用是还需要配置XML配置文件的，当和Spring Boot整合后使用起来非常方便。spring-boot-starter-data-xx就是对应的启动器。&lt;/p&gt;
&lt;h4 id=&#34;2-实现步骤&#34;&gt;&lt;a href=&#34;#2-实现步骤&#34; class=&#34;headerlink&#34; title=&#34;2.实现步骤&#34;&gt;&lt;/a&gt;2.实现步骤&lt;/h4&gt;&lt;h5 id=&#34;2-1添加依赖&#34;&gt;&lt;a href=&#34;#2-1添加依赖&#34; class=&#34;headerlink&#34; title=&#34;2.1添加依赖&#34;&gt;&lt;/a&gt;2.1添加依赖&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-solr&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-2编写配置文件&#34;&gt;&lt;a href=&#34;#2-2编写配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.2编写配置文件&#34;&gt;&lt;/a&gt;2.2编写配置文件&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;spring:
  data:
    solr:
      host: http://192.168.9.132:8080/solr
      # zk-host: 192.168.9.132:2181,192.168.9.132:2182,192.168.9.132:2183
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-3编写测试类&#34;&gt;&lt;a href=&#34;#2-3编写测试类&#34; class=&#34;headerlink&#34; title=&#34;2.3编写测试类&#34;&gt;&lt;/a&gt;2.3编写测试类&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = MyApplication.class)
public class MyTest &amp;#123;
    @Autowired
    private SolrTemplate solrTemplate;

    public void testInsert()&amp;#123;
        SolrInputDocument doc = new SolrInputDocument();
        doc.setField(&amp;quot;id&amp;quot;,&amp;quot;002&amp;quot;);
        doc.setField(&amp;quot;item_title&amp;quot;,&amp;quot;这是一个手机3&amp;quot;);
        UpdateResponse ur = solrTemplate.saveBean(&amp;quot;collection1&amp;quot;, doc);
        if(ur.getStatus()==0)&amp;#123;
            System.out.println(&amp;quot;成功&amp;quot;);
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;失败&amp;quot;);
        &amp;#125;
        solrTemplate.commit(&amp;quot;collection1&amp;quot;);
    &amp;#125;

    public void testDelete()&amp;#123;
        UpdateResponse ur = solrTemplate.deleteByIds(&amp;quot;collection1&amp;quot;, &amp;quot;change.me&amp;quot;);
        if(ur.getStatus()==0)&amp;#123;
            System.out.println(&amp;quot;成功&amp;quot;);
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;失败&amp;quot;);
        &amp;#125;
        solrTemplate.commit(&amp;quot;collection1&amp;quot;);
    &amp;#125;


    public void query()&amp;#123;
        SimpleQuery query = new SimpleQuery();
        Criteria c = new Criteria(&amp;quot;item_keywords&amp;quot;);
        c.is(&amp;quot;手机&amp;quot;);
        query.addCriteria(c);
        query.setOffset(1L);
        query.setRows(1);
        ScoredPage&amp;lt;DemoPojo&amp;gt; sp = solrTemplate.queryForPage(&amp;quot;collection1&amp;quot;, query, DemoPojo.class);
        System.out.println(sp.getContent());
    &amp;#125;

    @Test
    public void queryHL()&amp;#123;

        List&amp;lt;DemoPojo&amp;gt; listResult = new ArrayList&amp;lt;&amp;gt;();
        SimpleHighlightQuery query = new SimpleHighlightQuery();
        //设置查询条件
        Criteria c = new Criteria(&amp;quot;item_keywords&amp;quot;);
        c.is(&amp;quot;手机&amp;quot;);
        query.addCriteria(c);
        //分页
        query.setOffset(0L);
        query.setRows(10);
        //排序
        Sort sort = new Sort(Sort.Direction.DESC,&amp;quot;id&amp;quot;);
        query.addSort(sort);
        //高亮设置
        HighlightOptions hlo = new HighlightOptions();
        hlo.addField(&amp;quot;item_title item_sell_point&amp;quot;);
        hlo.setSimplePrefix(&amp;quot;&amp;lt;span style=&amp;#39;color:red;&amp;#39;&amp;gt;&amp;quot;);
        hlo.setSimplePostfix(&amp;quot;&amp;lt;/span&amp;gt;&amp;quot;);
        query.setHighlightOptions(hlo);
        HighlightPage&amp;lt;DemoPojo&amp;gt; hl = solrTemplate.queryForHighlightPage(&amp;quot;collection1&amp;quot;, query, DemoPojo.class);
//        System.out.println(hl.getContent());
        List&amp;lt;HighlightEntry&amp;lt;DemoPojo&amp;gt;&amp;gt; highlighted = hl.getHighlighted();
        for(HighlightEntry&amp;lt;DemoPojo&amp;gt; hle : highlighted)&amp;#123;
            List&amp;lt;HighlightEntry.Highlight&amp;gt; list = hle.getHighlights();
            DemoPojo dp = hle.getEntity();
            for (HighlightEntry.Highlight h : list)&amp;#123;//一个对象里面可能多个属性是高亮属性
                if(h.getField().getName().equals(&amp;quot;item_title&amp;quot;))&amp;#123;
                    dp.setItem_title( h.getSnipplets().get(0));
                &amp;#125;
            &amp;#125;
            listResult.add(dp);
        &amp;#125;
        System.out.println(listResult);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十一-使用zookeepr管理solr集群&#34;&gt;&lt;a href=&#34;#十一-使用zookeepr管理solr集群&#34; class=&#34;headerlink&#34; title=&#34;十一. 使用zookeepr管理solr集群&#34;&gt;&lt;/a&gt;十一. 使用zookeepr管理solr集群&lt;/h3&gt;&lt;p&gt;1.上传压缩包到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp 下 并解压。&lt;/p&gt;
&lt;p&gt;2.在 &amp;#x2F;usr&amp;#x2F;local下新建文件夹 zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /usr/local/zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.把解压的所有文件复制到zookeeper下， 并命名为zk1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp -r /usr/local/temp/zookeeper-3.4.8 /usr/local/zookeeper/zk1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.在zk1下新建文件夹 data&lt;/p&gt;
&lt;p&gt;5.在data下新建文件 myid, 里面写上 1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim myid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6.进入到zk1&amp;#x2F;conf 下 把 zoo_sample.cfg 复制一份叫做 zoo.cfg&lt;/p&gt;
&lt;p&gt;7.编辑 zoo.cfg 内容，设置 dataDIR为 data文件夹， 并在文件最下面添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server.1=192.168.93.10:2688:3888
server.2=192.168.93.10:2689:3889
server.3=192.168.93.10:2690:3890
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 7.1 server.1中的1是myid的内容&lt;/p&gt;
&lt;p&gt; 7.2 2688 2689 2690 是 zookeeper内部端口&lt;/p&gt;
&lt;p&gt; 7.3 3888 3889 3890 是 leader端口&lt;/p&gt;
&lt;p&gt;8.把zk1复制两份，分部叫做 zk2  zk3  并修改 myid 的值为 2，3 修改zoo.cfg中 dataDIR和clientPort&lt;/p&gt;
&lt;p&gt;9.启动三个zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;10.查看状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十一-使用zookeepr管理solr集群-Dokcer&#34;&gt;&lt;a href=&#34;#十一-使用zookeepr管理solr集群-Dokcer&#34; class=&#34;headerlink&#34; title=&#34;十一. 使用zookeepr管理solr集群(Dokcer )&#34;&gt;&lt;/a&gt;十一. 使用zookeepr管理solr集群(Dokcer )&lt;/h3&gt;&lt;h4 id=&#34;1、准备docker-compose-yml文件&#34;&gt;&lt;a href=&#34;#1、准备docker-compose-yml文件&#34; class=&#34;headerlink&#34; title=&#34;1、准备docker-compose.yml文件&#34;&gt;&lt;/a&gt;&lt;strong&gt;1、准备&lt;/strong&gt;docker-compose.yml&lt;strong&gt;文件&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;version: &amp;#39;2&amp;#39;
services:
  zoo1:
    image: zookeeper:3.5
    restart: always
    container_name: zoo1
    ports:
      - &amp;quot;2181:2181&amp;quot;
    environment:
      ZOO_MY_ID: 1
      ZOO_SERVERS: server.1=0.0.0.0:2688:3888 server.2=zoo2:2689:3888 server.3=zoo3:2690:3888

  zoo2:
    image: zookeeper:3.5
    restart: always
    container_name: zoo2
    ports:
      - &amp;quot;2182:2181&amp;quot;
    environment:
      ZOO_MY_ID: 2
      ZOO_SERVERS: server.1=zoo1:2688:3888 server.2=0.0.0.0:2689:3888 server.3=zoo3:2690:3888

  zoo3:
    image: zookeeper:3.5
    restart: always
    container_name: zoo3
    ports:
      - &amp;quot;2183:2181&amp;quot;
    environment:
      ZOO_MY_ID: 3
      ZOO_SERVERS: server.1=zoo1:2688:3888 server.2=zoo2:2689:3888 server.3=0.0.0.0:2690:3888

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、创建镜像&#34;&gt;&lt;a href=&#34;#2、创建镜像&#34; class=&#34;headerlink&#34; title=&#34;2、创建镜像&#34;&gt;&lt;/a&gt;&lt;strong&gt;2、创建镜像&lt;/strong&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;要在创建的docker-compose.yml文件中使用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、进入容器&#34;&gt;&lt;a href=&#34;#3、进入容器&#34; class=&#34;headerlink&#34; title=&#34;3、进入容器&#34;&gt;&lt;/a&gt;&lt;strong&gt;3、进入容器&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo1 /bin/bash

#查看zoo1 的状态
cd bin
./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;如果出现，以下情况：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ZooKeeper JMX enabled by default
Using config: /conf/zoo.cfg
Client port not found in static config file. Looking in dynamic config file.
grep: : No such file or directory
Client port not found in the server configs
Client port not found. Looking for secureClientPort in the static config.
Unable to find either secure or unsecure client port in any configs. Terminating.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	通过阅读我们知道他在conf中的zoo.cfg文件中缺少 **clientPort **我们只需要自行添加即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#修改之前我们先装一下 vim
apt-get update

apt-get install -y vim 

#修改zoo.fcg文件
vim /conf/zoo.fcg

clientPort=2181
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;完事之后&lt;strong&gt;重启&lt;/strong&gt;zoo1&lt;/p&gt;
&lt;p&gt;  &lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645780920291.png&#34; alt=&#34;1645780920291&#34;&gt;&lt;/p&gt;
&lt;p&gt;  成功！！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4、查看所有zookeeper的状态&#34;&gt;&lt;a href=&#34;#4、查看所有zookeeper的状态&#34; class=&#34;headerlink&#34; title=&#34;4、查看所有zookeeper的状态&#34;&gt;&lt;/a&gt;4、查看所有zookeeper的状态&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo3 bash ./bin/zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、进去客户端&#34;&gt;&lt;a href=&#34;#5、进去客户端&#34; class=&#34;headerlink&#34; title=&#34;5、进去客户端&#34;&gt;&lt;/a&gt;5、进去客户端&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it zoo3 zkCli.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十二、SolrCloud&#34;&gt;&lt;a href=&#34;#十二、SolrCloud&#34; class=&#34;headerlink&#34; title=&#34;十二、SolrCloud&#34;&gt;&lt;/a&gt;十二、SolrCloud&lt;/h3&gt;&lt;p&gt;​	Solr可以搭建具备容错能力和高可用的Solr集群。集群中集群配置、自动负载均衡和查询故障转移、			Zookeeper集群实现集群协调管理，这些全部功能统称为SolrCloud。&lt;/p&gt;
&lt;p&gt;​	SolrCloud是基于Zookeeper进行管理的。在Solr中已经内置了Zookeeper相关内容，当执行集群创建命令会自动创建Zookeeper相关内容。这个使用的是Zookeeper的集群管理功能实现的。&lt;/p&gt;
&lt;h4 id=&#34;1-搭建&#34;&gt;&lt;a href=&#34;#1-搭建&#34; class=&#34;headerlink&#34; title=&#34;1.搭建&#34;&gt;&lt;/a&gt;1.搭建&lt;/h4&gt;&lt;h5 id=&#34;1-1创建&#34;&gt;&lt;a href=&#34;#1-1创建&#34; class=&#34;headerlink&#34; title=&#34;1.1创建&#34;&gt;&lt;/a&gt;1.1创建&lt;/h5&gt;&lt;p&gt;​	SolrCloud已经包含在了Solr中，可以直接启动Solr集群。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./solr -e cloud -noprompt -force
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	此命令等同于# .&amp;#x2F;solr -e cloud -force全部参数为默认值。&lt;/p&gt;
&lt;p&gt;​	运行成功后会在example文件夹多出cloud文件夹。&lt;/p&gt;
&lt;h5 id=&#34;1-2停止&#34;&gt;&lt;a href=&#34;#1-2停止&#34; class=&#34;headerlink&#34; title=&#34;1.2停止&#34;&gt;&lt;/a&gt;1.2停止&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; ./solr stop -all
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-3重新运行&#34;&gt;&lt;a href=&#34;#1-3重新运行&#34; class=&#34;headerlink&#34; title=&#34;1.3重新运行&#34;&gt;&lt;/a&gt;1.3重新运行&lt;/h5&gt;&lt;pre&gt;&lt;code&gt; ./solr start -c -p 8983 -s ../example/cloud/node1/solr/ -force
 ./solr start -c -p 7574 -z localhost:9983 -s ../example/cloud/node2/solr/ -force
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="分布式" />
        <category term="中间件" />
        <category term="Solr" />
        <category term="快速搜索" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/Redis/</id>
        <title>Redis基础</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Redis/"/>
        <content type="html">&lt;h1 id=&#34;Redis&#34;&gt;&lt;a href=&#34;#Redis&#34; class=&#34;headerlink&#34; title=&#34;Redis&#34;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;h3 id=&#34;一-Redis简介&#34;&gt;&lt;a href=&#34;#一-Redis简介&#34; class=&#34;headerlink&#34; title=&#34;一.Redis简介&#34;&gt;&lt;/a&gt;一.Redis简介&lt;/h3&gt;&lt;h4 id=&#34;1-NoSQL简介&#34;&gt;&lt;a href=&#34;#1-NoSQL简介&#34; class=&#34;headerlink&#34; title=&#34;1.NoSQL简介&#34;&gt;&lt;/a&gt;1.NoSQL简介&lt;/h4&gt;&lt;p&gt;​	目前市场主流数据存储都是使用关系型数据库。每次操作关系型数据库时都是I&amp;#x2F;O操作，I&amp;#x2F;O操作是主要影响程序执行性能原因之一，连接数据库关闭数据库都是消耗性能的过程。尽量减少对数据库的操作，能够明显的提升程序运行效率。&lt;/p&gt;
&lt;p&gt;​	针对上面的问题，市场上就出现了各种NoSQL(Not Only SQL,不仅仅可以使用关系型数据库)数据库，它们的宣传口号：不是什么样的场景都必须使用关系型数据库，一些特定的场景使用NoSQL数据库更好。&lt;/p&gt;
&lt;p&gt;常见NoSQL数据库：&lt;/p&gt;
&lt;p&gt;​	memcached ：键值对，内存型数据库，所有数据都在内存中。&lt;/p&gt;
&lt;p&gt;​	Redis:和Memcached类似，还具备持久化能力。&lt;/p&gt;
&lt;p&gt;​	HBase：以列作为存储。&lt;/p&gt;
&lt;p&gt;​	MongoDB：以Document做存储。&lt;/p&gt;
&lt;h4 id=&#34;2-Redis简介&#34;&gt;&lt;a href=&#34;#2-Redis简介&#34; class=&#34;headerlink&#34; title=&#34;2.Redis简介&#34;&gt;&lt;/a&gt;2.&lt;strong&gt;Redis简介&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	Redis是以Key-Value形式进行存储的NoSQL数据库。&lt;/p&gt;
&lt;p&gt;​	Redis是使用C语言进行编写的。&lt;/p&gt;
&lt;p&gt;​	平时操作的数据都在内存中，效率特高，读的效率110000&amp;#x2F;s，写81000&amp;#x2F;s，所以多把Redis当做缓存工具使用。&lt;/p&gt;
&lt;p&gt;​	Redis以solt（槽）作为数据存储单元，每个槽中可以存储N多个键值对。Redis中固定具有16384。理论上可以实现一个槽是一个Redis。每个向Redis存储数据的key都会进行crc16算法得出一个值后对16384取余就是这个key存放的solt位置。&lt;/p&gt;
&lt;p&gt;​	同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。&lt;/p&gt;
&lt;h3 id=&#34;二-Redis单机版安装&#34;&gt;&lt;a href=&#34;#二-Redis单机版安装&#34; class=&#34;headerlink&#34; title=&#34;二. Redis单机版安装&#34;&gt;&lt;/a&gt;二. Redis单机版安装&lt;/h3&gt;&lt;p&gt;​	1.安装依赖C语言依赖&lt;/p&gt;
&lt;p&gt;​	redis使用C语言编写，所以需要安装C语言库&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# yum install -y gcc-c++ automake autoconf libtool make tcl 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;p&gt;​	2.上传并解压&lt;/p&gt;
&lt;p&gt;​	把redis-5.0.5.tar.gz上传到&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp中&lt;/p&gt;
&lt;p&gt;​	解压文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/tmp

# tar zxf redis-5.0.5.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	3.编译并安装&lt;/p&gt;
&lt;p&gt;​	进入解压文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/tmp/redis-5.0.5/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	编译&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	安装	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# make install PREFIX=/usr/local/redis
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	4.开启守护进程&lt;/p&gt;
&lt;p&gt;​	复制cd &amp;#x2F;usr&amp;#x2F;local&amp;#x2F;tmp&amp;#x2F;redis-5.0.5&amp;#x2F;中redis.conf配置文件	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp redis.conf /usr/local/redis/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	修改配置文件	&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/redis/bin/

# vim redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	把daemonize的值由no修改为yes&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-01.jpg&#34; class=&#34;&#34;&gt;

&lt;p&gt;​	5.修改外部访问&lt;/p&gt;
&lt;p&gt;​	在redis5中需要修改配置文件redis.conf允许外部访问。需要修改两处。&lt;/p&gt;
&lt;p&gt;​	注释掉下面&lt;/p&gt;
&lt;p&gt;​	bind 127.0.0.1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#bind 127.0.0.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	protected-mode yes 改成 no&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-02.jpg&#34; class=&#34;&#34;&gt;

&lt;p&gt;​	6.启动并测试&lt;/p&gt;
&lt;p&gt;​	启动redis&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./redis-server redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	重启redis&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./redis-cli shutdown
./redis-server redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	启动客户端工具&lt;/p&gt;
&lt;p&gt;​	在redis5中客户端工具对命令会有提供功能。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;./redis-cli 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;二-、docker安装Redis&#34;&gt;&lt;a href=&#34;#二-、docker安装Redis&#34; class=&#34;headerlink&#34; title=&#34;二.、docker安装Redis&#34;&gt;&lt;/a&gt;二.、docker安装Redis&lt;/h3&gt;&lt;p&gt;1、拉取镜像文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull redis[:(版本号)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议看完，先别操作，再看三，看完三之后再决定如何操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后按照文章内容进行，忽略下载。&lt;/p&gt;
&lt;p&gt;文章地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yMDMyNzQuaHRt&#34;&gt;https://www.jb51.net/article/203274.htm&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;、&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645177895314.png&#34; alt=&#34;1645177895314&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、创建一个redis 服务容器 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步进行了的&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -p 6379:6379 --name myredis -v /usr/local/docker/redis.conf:/etc/redis/redis.conf -v /usr/local/docker/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;第二步没有进行的&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -p 6379:6379 --name myredis -v /root/myredis/data:/data -v /root/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	其实也没有什么区别，只是映射的文件不同，也可以将第二步的文件直接创建到第二种创建服务容器的配置文件地址中去，这样也可使用第二个创建方式。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645177877202.png&#34; alt=&#34;1645177877202&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645177918077.png&#34; alt=&#34;1645177918077&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;三-Redis常用的五大类型&#34;&gt;&lt;a href=&#34;#三-Redis常用的五大类型&#34; class=&#34;headerlink&#34; title=&#34;三.Redis常用的五大类型&#34;&gt;&lt;/a&gt;三.Redis常用的五大类型&lt;/h3&gt;&lt;p&gt;​	 Redis不仅仅支持简单的k&amp;#x2F;v类型的数据，同时还提供list，set，zset，hash等数据结构的存储，它还支持数据的备份，即master-slave模式的数据备份，同样Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。&lt;/p&gt;
&lt;p&gt;​        Redis支持的五大数据类型包括String（字符串  用法： 键  值），Hash（哈希 类似Java中的 map  用法： 键  键值对），List（列表  用法：键 集合 不可以重复），Set（集合 用法：键 集合 可以重复），Zset（sorted set 有序集合    用法： 键  值 值）&lt;/p&gt;
&lt;h4 id=&#34;String（字符串）&#34;&gt;&lt;a href=&#34;#String（字符串）&#34; class=&#34;headerlink&#34; title=&#34;String（字符串）&#34;&gt;&lt;/a&gt;String（字符串）&lt;/h4&gt;&lt;p&gt;​	string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。&lt;/p&gt;
&lt;p&gt;应用场景：  &lt;/p&gt;
&lt;p&gt;​	String是最常用的一种数据类型，普通的key&amp;#x2F;value存储都可以归为此类，value其实不仅是String，  &lt;/p&gt;
&lt;p&gt;也可以是数字：比如想知道什么时候封锁一个IP地址(访问超过几次)。&lt;/p&gt;
&lt;h4 id=&#34;Hash（哈希）&#34;&gt;&lt;a href=&#34;#Hash（哈希）&#34; class=&#34;headerlink&#34; title=&#34;Hash（哈希）&#34;&gt;&lt;/a&gt;Hash（哈希）&lt;/h4&gt;&lt;p&gt;​	Redis hash 是一个键值(key&amp;#x3D;&amp;gt;value)对集合。&lt;/p&gt;
&lt;p&gt;​	Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。&lt;/p&gt;
&lt;p&gt;​	使用场景：存储、读取、修改用户属性&lt;/p&gt;
&lt;p&gt;​	我们简单举个实例来描述下Hash的应用场景，比如我们要存储一个用户信息对象数据，包含以下信息：    用户ID，为查找的key，  &lt;/p&gt;
&lt;p&gt;​    	存储的value用户对象包含姓名name，年龄age，生日birthday 等信息，  如果用普通的key&amp;#x2F;value结构来存储，主要有以下2种存储方式：  &lt;/p&gt;
&lt;p&gt;​    	第一种方式将用户ID作为查找key,把其他信息封装成一个对象以序列化的方式存储，  &lt;/p&gt;
&lt;p&gt;​           如：set u001 “李三,18,20010101”  &lt;/p&gt;
&lt;p&gt;​     	这种方式的缺点是，增加了序列化&amp;#x2F;反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入CAS等复杂问题。  &lt;/p&gt;
&lt;p&gt;​     	第二种方法是这个用户信息对象有多少成员就存成多少个key-value对儿，用用户ID+对应属性的名称作为唯一标识来取得对应属性的值，  &lt;/p&gt;
&lt;p&gt;​       	如：mset user:001:name “李三 “user:001:age18 user:001:birthday “20010101”  虽然省去了序列化开销和并发问题，但是用户ID为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。  &lt;/p&gt;
&lt;p&gt;​    	那么Redis提供的Hash很好的解决了这个问题。&lt;/p&gt;
&lt;h4 id=&#34;List（列表）&#34;&gt;&lt;a href=&#34;#List（列表）&#34; class=&#34;headerlink&#34; title=&#34;List（列表）&#34;&gt;&lt;/a&gt;List（列表）&lt;/h4&gt;&lt;p&gt;​	Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。&lt;/p&gt;
&lt;p&gt;应用场景：  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Redis list的应用场景非常多，也是Redis最重要的数据结构之一。  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​    	我们可以轻松地实现最新消息排行等功能。  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。  
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;Set（集合）&#34;&gt;&lt;a href=&#34;#Set（集合）&#34; class=&#34;headerlink&#34; title=&#34;Set（集合）&#34;&gt;&lt;/a&gt;Set（集合）&lt;/h4&gt;&lt;p&gt;​	Redis的Set是string类型的无序集合。&lt;/p&gt;
&lt;p&gt;​	使用场景：1.共同好友、二度好友 &lt;/p&gt;
&lt;p&gt;​			   2. 利用唯一性，可以统计访问网站的所有独立 IP &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。  
 
  比如在微博应用中，每个人的好友存在一个集合（set）中，这样求两个人的共同好友的操作，可能就只需要用求交集命令即可。  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​    	Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  实现方式：  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​    	set 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。 &lt;/p&gt;
&lt;h4 id=&#34;zset-sorted-set：有序集合&#34;&gt;&lt;a href=&#34;#zset-sorted-set：有序集合&#34; class=&#34;headerlink&#34; title=&#34;zset(sorted set：有序集合)&#34;&gt;&lt;/a&gt;zset(sorted set：有序集合)&lt;/h4&gt;&lt;pre&gt;&lt;code&gt; Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用场景：1.带有权重的元素，比如一个游戏的用户得分排行榜 &lt;/p&gt;
&lt;p&gt;​		   2.比较复杂的数据结构，一般用到的场景不算太多&lt;/p&gt;
&lt;h3 id=&#34;四-Redis常用命令&#34;&gt;&lt;a href=&#34;#四-Redis常用命令&#34; class=&#34;headerlink&#34; title=&#34;四. Redis常用命令&#34;&gt;&lt;/a&gt;四. Redis常用命令&lt;/h3&gt;&lt;p&gt;Redis命令相关手册有很多，下面为其中比较好用的两个&lt;/p&gt;
&lt;p&gt;  1.&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmVkaXMubmV0LmNuL29yZGVyLw==&#34;&gt;https://www.redis.net.cn/order/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;  2.&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvYy5yZWRpc2ZhbnMuY29tL3RleHQtaW4=&#34;&gt;http://doc.redisfans.com/text-in&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-Key操作&#34;&gt;&lt;a href=&#34;#1-Key操作&#34; class=&#34;headerlink&#34; title=&#34;1. Key操作&#34;&gt;&lt;/a&gt;1. Key操作&lt;/h4&gt;&lt;h5 id=&#34;1-1-exists&#34;&gt;&lt;a href=&#34;#1-1-exists&#34; class=&#34;headerlink&#34; title=&#34;1.1  exists&#34;&gt;&lt;/a&gt;1.1  exists&lt;/h5&gt;&lt;p&gt;​	判断key是否存在。&lt;/p&gt;
&lt;p&gt;​	语法：exists key名称&lt;/p&gt;
&lt;p&gt;​	返回值：存在返回数字，不存在返回0&lt;/p&gt;
&lt;h5 id=&#34;1-2-expire&#34;&gt;&lt;a href=&#34;#1-2-expire&#34; class=&#34;headerlink&#34; title=&#34;1.2 expire&#34;&gt;&lt;/a&gt;1.2 expire&lt;/h5&gt;&lt;p&gt;​	设置key的过期时间，单位秒&lt;/p&gt;
&lt;p&gt;​	语法：expire key 秒数&lt;/p&gt;
&lt;p&gt;​	返回值：成功返回1，失败返回0&lt;/p&gt;
&lt;h5 id=&#34;1-3-ttl&#34;&gt;&lt;a href=&#34;#1-3-ttl&#34; class=&#34;headerlink&#34; title=&#34;1.3 ttl&#34;&gt;&lt;/a&gt;1.3 ttl&lt;/h5&gt;&lt;p&gt;​	查看key的剩余过期时间&lt;/p&gt;
&lt;p&gt;​	语法：ttl key&lt;/p&gt;
&lt;p&gt;​	返回值：返回剩余时间，如果不过期返回-1&lt;/p&gt;
&lt;h5 id=&#34;1-4-del&#34;&gt;&lt;a href=&#34;#1-4-del&#34; class=&#34;headerlink&#34; title=&#34;1.4 del&#34;&gt;&lt;/a&gt;1.4 del&lt;/h5&gt;&lt;p&gt;​	根据key删除键值对。&lt;/p&gt;
&lt;p&gt;​	语法：del key&lt;/p&gt;
&lt;p&gt;​	返回值：被删除key的数量&lt;/p&gt;
&lt;h4 id=&#34;2-字符串值-String&#34;&gt;&lt;a href=&#34;#2-字符串值-String&#34; class=&#34;headerlink&#34; title=&#34;2. 字符串值(String)&#34;&gt;&lt;/a&gt;2. &lt;strong&gt;字符串值(String)&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;2-1-set&#34;&gt;&lt;a href=&#34;#2-1-set&#34; class=&#34;headerlink&#34; title=&#34;2.1 set&#34;&gt;&lt;/a&gt;2.1 &lt;strong&gt;set&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	设置指定key的值&lt;/p&gt;
&lt;p&gt;​	语法：set key value&lt;/p&gt;
&lt;p&gt;​	返回值：成功OK&lt;/p&gt;
&lt;h5 id=&#34;2-2-get&#34;&gt;&lt;a href=&#34;#2-2-get&#34; class=&#34;headerlink&#34; title=&#34;2.2 get&#34;&gt;&lt;/a&gt;2.2 &lt;strong&gt;get&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	获取指定key的值&lt;/p&gt;
&lt;p&gt;​	语法：get key&lt;/p&gt;
&lt;p&gt;​	返回值：key的值。不存在返回nil&lt;/p&gt;
&lt;h5 id=&#34;2-3-setnx&#34;&gt;&lt;a href=&#34;#2-3-setnx&#34; class=&#34;headerlink&#34; title=&#34;2.3 setnx&#34;&gt;&lt;/a&gt;2.3 &lt;strong&gt;setnx&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	当且仅当key不存在时才新增。&lt;/p&gt;
&lt;p&gt;​	语法：setnx key value&lt;/p&gt;
&lt;p&gt;​	返回值：不存在时返回1，存在返回0&lt;/p&gt;
&lt;h5 id=&#34;2-4-setex&#34;&gt;&lt;a href=&#34;#2-4-setex&#34; class=&#34;headerlink&#34; title=&#34;2.4 setex&#34;&gt;&lt;/a&gt;2.4 &lt;strong&gt;setex&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	设置key的存活时间，无论是否存在指定key都能新增，如果存在key覆盖旧值。同时必须指定过期时间。&lt;/p&gt;
&lt;p&gt;​	语法：setex key seconds value&lt;/p&gt;
&lt;p&gt;​	返回值：OK&lt;/p&gt;
&lt;h4 id=&#34;3-哈希表-Hash&#34;&gt;&lt;a href=&#34;#3-哈希表-Hash&#34; class=&#34;headerlink&#34; title=&#34;3.哈希表(Hash)&#34;&gt;&lt;/a&gt;3.&lt;strong&gt;哈希表(Hash)&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	Hash类型的值中包含多组field value。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-03.jpg&#34; class=&#34;&#34;&gt;

&lt;h5 id=&#34;3-1-hset&#34;&gt;&lt;a href=&#34;#3-1-hset&#34; class=&#34;headerlink&#34; title=&#34;3.1 hset&#34;&gt;&lt;/a&gt;3.1 &lt;strong&gt;hset&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	给key中field设置值。&lt;/p&gt;
&lt;p&gt;​	语法：hset key field value&lt;/p&gt;
&lt;p&gt;​	返回值：成功1，失败0&lt;/p&gt;
&lt;h5 id=&#34;3-2-hget&#34;&gt;&lt;a href=&#34;#3-2-hget&#34; class=&#34;headerlink&#34; title=&#34;3.2 hget&#34;&gt;&lt;/a&gt;3.2 &lt;strong&gt;hget&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	获取key中某个field的值&lt;/p&gt;
&lt;p&gt;​	语法：hget key field &lt;/p&gt;
&lt;p&gt;​	返回值：返回field的内容&lt;/p&gt;
&lt;h5 id=&#34;3-3-hmset&#34;&gt;&lt;a href=&#34;#3-3-hmset&#34; class=&#34;headerlink&#34; title=&#34;3.3 hmset&#34;&gt;&lt;/a&gt;3.3 &lt;strong&gt;hmset&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	给key中多个filed设置值&lt;/p&gt;
&lt;p&gt;​	语法：hmset key field value field value&lt;/p&gt;
&lt;p&gt;​	返回值：成功OK&lt;/p&gt;
&lt;h5 id=&#34;3-4-hmget&#34;&gt;&lt;a href=&#34;#3-4-hmget&#34; class=&#34;headerlink&#34; title=&#34;3.4 hmget&#34;&gt;&lt;/a&gt;3.4 &lt;strong&gt;hmget&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	一次获取key中多个field的值&lt;/p&gt;
&lt;p&gt;​	语法：hmget key field field&lt;/p&gt;
&lt;p&gt;​	返回值：value列表&lt;/p&gt;
&lt;h5 id=&#34;3-5-hvals&#34;&gt;&lt;a href=&#34;#3-5-hvals&#34; class=&#34;headerlink&#34; title=&#34;3.5 hvals&#34;&gt;&lt;/a&gt;3.5 &lt;strong&gt;hvals&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	获取key中所有field的值&lt;/p&gt;
&lt;p&gt;​	语法：hvals key&lt;/p&gt;
&lt;p&gt;​	返回值：value列表&lt;/p&gt;
&lt;h5 id=&#34;3-6-hgetall&#34;&gt;&lt;a href=&#34;#3-6-hgetall&#34; class=&#34;headerlink&#34; title=&#34;3.6 hgetall&#34;&gt;&lt;/a&gt;3.6 &lt;strong&gt;hgetall&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	获取所有field和value&lt;/p&gt;
&lt;p&gt;​	语法：hgetall key&lt;/p&gt;
&lt;p&gt;​	返回值：field和value交替显示列表&lt;/p&gt;
&lt;h5 id=&#34;3-7-hdel&#34;&gt;&lt;a href=&#34;#3-7-hdel&#34; class=&#34;headerlink&#34; title=&#34;3.7 hdel&#34;&gt;&lt;/a&gt;3.7 &lt;strong&gt;hdel&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	删除key中任意个field&lt;/p&gt;
&lt;p&gt;​	语法：hdel key field field&lt;/p&gt;
&lt;p&gt;​	返回值：成功删除field的数量&lt;/p&gt;
&lt;h4 id=&#34;4-列表（List）&#34;&gt;&lt;a href=&#34;#4-列表（List）&#34; class=&#34;headerlink&#34; title=&#34;4. 列表（List）&#34;&gt;&lt;/a&gt;4. &lt;strong&gt;列表（List）&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;4-1-Rpush&#34;&gt;&lt;a href=&#34;#4-1-Rpush&#34; class=&#34;headerlink&#34; title=&#34;4.1 Rpush&#34;&gt;&lt;/a&gt;4.1 &lt;strong&gt;Rpush&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	向列表末尾中插入一个或多个值&lt;/p&gt;
&lt;p&gt;​	语法；rpush key value value&lt;/p&gt;
&lt;p&gt;​	返回值：列表长度&lt;/p&gt;
&lt;h5 id=&#34;4-2-lrange&#34;&gt;&lt;a href=&#34;#4-2-lrange&#34; class=&#34;headerlink&#34; title=&#34;4.2 lrange&#34;&gt;&lt;/a&gt;4.2 &lt;strong&gt;lrange&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	返回列表中指定区间内的值。可以使用-1代表列表末尾&lt;/p&gt;
&lt;p&gt;​	语法：lrange list 0 -1&lt;/p&gt;
&lt;p&gt;​	返回值：查询到的值&lt;/p&gt;
&lt;h5 id=&#34;4-3-lpush&#34;&gt;&lt;a href=&#34;#4-3-lpush&#34; class=&#34;headerlink&#34; title=&#34;4.3 lpush&#34;&gt;&lt;/a&gt;4.3 &lt;strong&gt;lpush&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	将一个或多个值插入到列表前面&lt;/p&gt;
&lt;p&gt;​	语法：lpush key value value&lt;/p&gt;
&lt;p&gt;​	返回值：列表长度&lt;/p&gt;
&lt;h5 id=&#34;4-4-llen&#34;&gt;&lt;a href=&#34;#4-4-llen&#34; class=&#34;headerlink&#34; title=&#34;4.4 llen&#34;&gt;&lt;/a&gt;4.4 &lt;strong&gt;llen&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	获取列表长度&lt;/p&gt;
&lt;p&gt;​	语法：llen key&lt;/p&gt;
&lt;p&gt;​	返回值：列表长度&lt;/p&gt;
&lt;h5 id=&#34;4-5-lrem&#34;&gt;&lt;a href=&#34;#4-5-lrem&#34; class=&#34;headerlink&#34; title=&#34;4.5 lrem&#34;&gt;&lt;/a&gt;4.5 &lt;strong&gt;lrem&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	删除列表中元素。count为正数表示从左往右删除的数量。负数从右往左删除的数量。&lt;/p&gt;
&lt;p&gt;​	语法：lrem key count value&lt;/p&gt;
&lt;p&gt;​	返回值：删除数量。&lt;/p&gt;
&lt;h4 id=&#34;5-集合-Set&#34;&gt;&lt;a href=&#34;#5-集合-Set&#34; class=&#34;headerlink&#34; title=&#34;5 集合(Set)&#34;&gt;&lt;/a&gt;5 &lt;strong&gt;集合(Set)&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	set和java中集合一样。&lt;/p&gt;
&lt;h5 id=&#34;5-1-sadd&#34;&gt;&lt;a href=&#34;#5-1-sadd&#34; class=&#34;headerlink&#34; title=&#34;5.1 sadd&#34;&gt;&lt;/a&gt;5.1 &lt;strong&gt;sadd&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	向集合中添加内容。不允许重复。&lt;/p&gt;
&lt;p&gt;​	语法：sadd key value value value&lt;/p&gt;
&lt;p&gt;​	返回值：集合长度&lt;/p&gt;
&lt;h5 id=&#34;5-2-scard&#34;&gt;&lt;a href=&#34;#5-2-scard&#34; class=&#34;headerlink&#34; title=&#34;5.2 scard&#34;&gt;&lt;/a&gt;5.2 &lt;strong&gt;scard&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	返回集合元素数量&lt;/p&gt;
&lt;p&gt;​	语法：scard key&lt;/p&gt;
&lt;p&gt;​	返回值：集合长度&lt;/p&gt;
&lt;h5 id=&#34;5-3-smembers&#34;&gt;&lt;a href=&#34;#5-3-smembers&#34; class=&#34;headerlink&#34; title=&#34;5.3 **smembers **&#34;&gt;&lt;/a&gt;5.3 **smembers **&lt;/h5&gt;&lt;p&gt;​	查看集合中元素内容&lt;/p&gt;
&lt;p&gt;​	语法：smembers key&lt;/p&gt;
&lt;p&gt;​	返回值：集合中元素&lt;/p&gt;
&lt;h4 id=&#34;6-有序集合（Sorted-Set）&#34;&gt;&lt;a href=&#34;#6-有序集合（Sorted-Set）&#34; class=&#34;headerlink&#34; title=&#34;6 .有序集合（Sorted Set）&#34;&gt;&lt;/a&gt;6 .&lt;strong&gt;有序集合（Sorted Set）&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	有序集合中每个value都有一个分数（score），根据分数进行排序。&lt;/p&gt;
&lt;h5 id=&#34;6-1-zadd&#34;&gt;&lt;a href=&#34;#6-1-zadd&#34; class=&#34;headerlink&#34; title=&#34;6.1 zadd&#34;&gt;&lt;/a&gt;6.1 &lt;strong&gt;zadd&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	向有序集合中添加数据&lt;/p&gt;
&lt;p&gt;​	语法：zadd key score value score value&lt;/p&gt;
&lt;p&gt;​	返回值：长度&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645195960858.png&#34; alt=&#34;1645195960858&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;6-2-zrange&#34;&gt;&lt;a href=&#34;#6-2-zrange&#34; class=&#34;headerlink&#34; title=&#34;6.2 zrange&#34;&gt;&lt;/a&gt;6.2 &lt;strong&gt;zrange&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	返回区间内容想·，withscores表示带有分数&lt;/p&gt;
&lt;p&gt;​	语法：zrange key 区间 [withscores]&lt;/p&gt;
&lt;p&gt;​	返回值：值列表&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645195940696.png&#34; alt=&#34;1645195940696&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645195926902.png&#34; alt=&#34;1645195926902&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;五、-Redis持久化策略&#34;&gt;&lt;a href=&#34;#五、-Redis持久化策略&#34; class=&#34;headerlink&#34; title=&#34;五、 Redis持久化策略&#34;&gt;&lt;/a&gt;五、 &lt;strong&gt;Redis持久化策略&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	Redis不仅仅是一个内存型数据库，还具备持久化能力。&lt;/p&gt;
&lt;h4 id=&#34;1-RDB&#34;&gt;&lt;a href=&#34;#1-RDB&#34; class=&#34;headerlink&#34; title=&#34;1. RDB&#34;&gt;&lt;/a&gt;1. &lt;strong&gt;RDB&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	rdb模式是默认模式，可以在指定的时间间隔内生成数据快照（snapshot），默认保存到dump.rdb文件中。当redis重启后会自动加载dump.rdb文件中内容到内存中。&lt;/p&gt;
&lt;p&gt;​	用户可以使用SAVE（同步）或BGSAVE（异步）手动保存数据。&lt;/p&gt;
&lt;p&gt;​	可以设置服务器配置的save选项，让服务器每隔一段时间自动执行一次BGSAVE命令，可以通过save选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行BGSAVE命令。&lt;br&gt;　　	例如：&lt;br&gt;　　	save 900 1&lt;br&gt;　　	save 300 10&lt;br&gt;　　	save 60 10000&lt;br&gt;　　那么只要满足以下三个条件中的任意一个，BGSAVE命令就会被执行&lt;br&gt;　　服务器在900秒之内，对数据库进行了至少1次修改&lt;br&gt;　　服务器在300秒之内，对数据库进行了至少10次修改&lt;br&gt;　　服务器在60秒之内，对数据库进行了至少10000次修改&lt;/p&gt;
&lt;h5 id=&#34;1-1-优点&#34;&gt;&lt;a href=&#34;#1-1-优点&#34; class=&#34;headerlink&#34; title=&#34;1.1 优点&#34;&gt;&lt;/a&gt;1.1 &lt;strong&gt;优点&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	rdb文件是一个紧凑文件，直接使用rdb文件就可以还原数据。&lt;/p&gt;
&lt;p&gt;​	数据保存会由一个子进程进行保存，不影响父进程。&lt;/p&gt;
&lt;p&gt;​	恢复数据的效率要高于aof&lt;/p&gt;
&lt;h5 id=&#34;1-2-缺点&#34;&gt;&lt;a href=&#34;#1-2-缺点&#34; class=&#34;headerlink&#34; title=&#34;1.2 缺点&#34;&gt;&lt;/a&gt;1.2 &lt;strong&gt;缺点&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	每次保存点之间导致redis不可意料的关闭，可能会丢失数据。&lt;/p&gt;
&lt;p&gt;​	由于每次保存数据都需要fork()子进程，在数据量比较大时可能会比较耗费性能。&lt;/p&gt;
&lt;h4 id=&#34;2-AOF&#34;&gt;&lt;a href=&#34;#2-AOF&#34; class=&#34;headerlink&#34; title=&#34;2 AOF&#34;&gt;&lt;/a&gt;2 &lt;strong&gt;AOF&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	AOF默认是关闭的，需要在配置文件中开启AOF。Redis支持AOF和RDB同时生效，如果同时存在，AOF优先级高于RDB（Redis重新启动时会使用AOF进行数据恢复）&lt;/p&gt;
&lt;p&gt;​	监听执行的命令，如果发现执行了修改数据的操作，同时直接同步到数据库文件中。&lt;/p&gt;
&lt;h5 id=&#34;2-1-优点&#34;&gt;&lt;a href=&#34;#2-1-优点&#34; class=&#34;headerlink&#34; title=&#34;2.1 优点&#34;&gt;&lt;/a&gt;2.1 &lt;strong&gt;优点&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	相对RDB数据更加安全。&lt;/p&gt;
&lt;h5 id=&#34;2-2-缺点&#34;&gt;&lt;a href=&#34;#2-2-缺点&#34; class=&#34;headerlink&#34; title=&#34;2.2 缺点&#34;&gt;&lt;/a&gt;2.2 &lt;strong&gt;缺点&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	相同数据集AOF要大于RDB。&lt;/p&gt;
&lt;p&gt;​	相对RDB可能会慢一些。&lt;/p&gt;
&lt;h5 id=&#34;2-3-开启办法&#34;&gt;&lt;a href=&#34;#2-3-开启办法&#34; class=&#34;headerlink&#34; title=&#34;2.3 开启办法&#34;&gt;&lt;/a&gt;2.3 &lt;strong&gt;开启办法&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	修改redis.conf中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 默认no
appendonly yes
# aof文件名
appendfilename &amp;quot;appendonly.aof&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;六-Redis主从复制&#34;&gt;&lt;a href=&#34;#六-Redis主从复制&#34; class=&#34;headerlink&#34; title=&#34;六. Redis主从复制&#34;&gt;&lt;/a&gt;六. &lt;strong&gt;Redis主从复制&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	Redis支持集群功能。为了保证单一节点可用性，redis支持主从复制功能。每个节点有N个复制品（replica），其中一个复制品是主（master），另外N-1个复制品是从（Slave），也就是说Redis支持一主多从。&lt;/p&gt;
&lt;p&gt;​	一个主可有多个从，而一个从又可以看成主，它还可以有多个从。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-04.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;1-主从优点&#34;&gt;&lt;a href=&#34;#1-主从优点&#34; class=&#34;headerlink&#34; title=&#34;1. 主从优点&#34;&gt;&lt;/a&gt;1. &lt;strong&gt;主从优点&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	增加单一节点的健壮性，从而提升整个集群的稳定性。（Redis中当超过1&amp;#x2F;2节点不可用时，整个集群不可用）&lt;/p&gt;
&lt;p&gt;​	从节点可以对主节点数据备份，提升容灾能力。&lt;/p&gt;
&lt;p&gt;​	读写分离。在redis主从中，主节点一般用作写（具备读的能力），从节点只能读，利用这个特性实现读写分离，写用主，读用从。&lt;/p&gt;
&lt;h5 id=&#34;1-1-一主多从搭建&#34;&gt;&lt;a href=&#34;#1-1-一主多从搭建&#34; class=&#34;headerlink&#34; title=&#34;1.1 一主多从搭建&#34;&gt;&lt;/a&gt;1.1 &lt;strong&gt;一主多从搭建&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	在已经搭建的单机版redis基础上进行操作。&lt;/p&gt;
&lt;p&gt;​	并且关闭redis单机版&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./redis-cli shutdown
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-2-新建目录&#34;&gt;&lt;a href=&#34;#1-2-新建目录&#34; class=&#34;headerlink&#34; title=&#34;1.2 新建目录&#34;&gt;&lt;/a&gt;1.2 &lt;strong&gt;新建目录&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# mkdir /usr/local/replica
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-3-复制目录&#34;&gt;&lt;a href=&#34;#1-3-复制目录&#34; class=&#34;headerlink&#34; title=&#34;1.3 复制目录&#34;&gt;&lt;/a&gt;1.3 &lt;strong&gt;复制目录&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	把之前安装的redis单机版中bin目录复制三份，分别叫做：master、slave1、slave2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp -r /usr/local/redis/bin /usr/local/replica/master
# cp -r /usr/local/redis/bin /usr/local/replica/slave1
# cp -r /usr/local/redis/bin /usr/local/replica/slave2
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-4-修改从的配置文件&#34;&gt;&lt;a href=&#34;#1-4-修改从的配置文件&#34; class=&#34;headerlink&#34; title=&#34;1.4 修改从的配置文件&#34;&gt;&lt;/a&gt;1.4 &lt;strong&gt;修改从的配置文件&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	修改2个从的redis.conf，指定主节点ip和端口。并修改自身端口号防止和其他redis冲突。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim /usr/local/replica/slave1/redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	指定主节点ip和端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;replicaof 192.168.93.10 6379
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	修改自己端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;port 6380
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# vim /usr/local/replica/slave2/redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	指定主节点ip和端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;replicaof 192.168.93.10 6379
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	修改自己端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;port 6381
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-5-启动三个redis实例&#34;&gt;&lt;a href=&#34;#1-5-启动三个redis实例&#34; class=&#34;headerlink&#34; title=&#34;1.5 启动三个redis实例&#34;&gt;&lt;/a&gt;1.5 &lt;strong&gt;启动三个redis实例&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	注意：一定要关闭单机的redis，否则端口冲突。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/replica
# vim startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	在文件中添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/local/replica/master/
./redis-server redis.conf
  cd /usr/local/replica/slave1
./redis-server redis.conf
  cd /usr/local/replica/slave2
./redis-server redis.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 赋予权限
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# chmod a+x startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	开启&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1-6-查看启动状态&#34;&gt;&lt;a href=&#34;#1-6-查看启动状态&#34; class=&#34;headerlink&#34; title=&#34;1.6 查看启动状态&#34;&gt;&lt;/a&gt;1.6 &lt;strong&gt;查看启动状态&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# ps aux|grep redis
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-05.jpg&#34; class=&#34;&#34;&gt;

&lt;h5 id=&#34;1-7-测试&#34;&gt;&lt;a href=&#34;#1-7-测试&#34; class=&#34;headerlink&#34; title=&#34;1.7 测试*&#34;&gt;&lt;/a&gt;1.7 &lt;strong&gt;测试&lt;/strong&gt;*&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/replica/master/
# ./redis-cli 
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-06.jpg&#34; class=&#34;&#34;&gt;

&lt;p&gt;​	在客户端命令行模式下，添加一条数据：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-07.jpg&#34; class=&#34;&#34;&gt;

&lt;p&gt;​	进去slave查看数据是否同步。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/replica/slave1
# ./redis-cli -p 6380
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-08.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;2、docker下操作&#34;&gt;&lt;a href=&#34;#2、docker下操作&#34; class=&#34;headerlink&#34; title=&#34;2、docker下操作&#34;&gt;&lt;/a&gt;2、docker下操作&lt;/h4&gt;&lt;p&gt;​	可以自定义&lt;strong&gt;redis.conf&lt;/strong&gt;文件只写要修改的，不改的就别写，这里主要是要书写&lt;strong&gt;新的端口号&lt;/strong&gt;以及&lt;strong&gt;父节点&lt;/strong&gt;的&lt;strong&gt;ip和端口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;所有修改必须在容器外，容器内修改无效，在退出重启的那一刻就已经还原了&lt;/p&gt;
&lt;p&gt;我们通常使用  CP 来修改&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker  cp  本机文件路径   容器id: 容器内文件路径
#所有路径是所在文件夹路径，并不是文件的路径，简单来说就是写到文件夹所在路径即可，不需要指定特定文件
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;1、修改端口号&#34;&gt;&lt;a href=&#34;#1、修改端口号&#34; class=&#34;headerlink&#34; title=&#34;1、修改端口号&#34;&gt;&lt;/a&gt;1、修改端口号&lt;/h5&gt;&lt;p&gt;同上&lt;/p&gt;
&lt;h5 id=&#34;2、指定父节点&#34;&gt;&lt;a href=&#34;#2、指定父节点&#34; class=&#34;headerlink&#34; title=&#34;2、指定父节点&#34;&gt;&lt;/a&gt;2、指定父节点&lt;/h5&gt;&lt;p&gt;同上&lt;/p&gt;
&lt;h5 id=&#34;3、重启&#34;&gt;&lt;a href=&#34;#3、重启&#34; class=&#34;headerlink&#34; title=&#34;3、重启&#34;&gt;&lt;/a&gt;3、重启&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;（如果在启动前修改不需要，这里是指已经启动了的容器，在修改之后的操作）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker restart 容器id
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4、测试并查看&#34;&gt;&lt;a href=&#34;#4、测试并查看&#34; class=&#34;headerlink&#34; title=&#34;4、测试并查看&#34;&gt;&lt;/a&gt;4、测试并查看&lt;/h5&gt;&lt;p&gt;·同上&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;role

或者

info replication
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;七-哨兵（Sentinel）&#34;&gt;&lt;a href=&#34;#七-哨兵（Sentinel）&#34; class=&#34;headerlink&#34; title=&#34;七.  哨兵（Sentinel）&#34;&gt;&lt;/a&gt;七.  &lt;strong&gt;哨兵（Sentinel）&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	在redis主从默认是只有主具备写的能力，而从只能读。如果主宕机，整个节点不具备写能力。但是如果这是让一个从变成主，整个节点就可以继续工作。即使之前的主恢复过来也当做这个节点的从即可。&lt;/p&gt;
&lt;p&gt;​	Redis的哨兵就是帮助监控整个节点的，当节点主宕机等情况下，帮助重新选取主。&lt;/p&gt;
&lt;p&gt;​	Redis中哨兵支持单哨兵和多哨兵。单哨兵是只要这个哨兵发现master宕机了，就直接选取另一个master。而多哨兵是根据我们设定，达到一定数量哨兵认为master宕机后才会进行重新选取主。我们以多哨兵演示。&lt;/p&gt;
&lt;h4 id=&#34;1-没有哨兵下主从效果&#34;&gt;&lt;a href=&#34;#1-没有哨兵下主从效果&#34; class=&#34;headerlink&#34; title=&#34;1. 没有哨兵下主从效果&#34;&gt;&lt;/a&gt;1. &lt;strong&gt;没有哨兵下主从效果&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	只要杀掉主，整个节点无法在写数据，从身份不会变化，主的信息还是以前的信息。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-09.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;2-搭建多哨兵&#34;&gt;&lt;a href=&#34;#2-搭建多哨兵&#34; class=&#34;headerlink&#34; title=&#34;2.搭建多哨兵&#34;&gt;&lt;/a&gt;2.&lt;strong&gt;搭建多哨兵&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	前提：安装了单机的redis&lt;/p&gt;
&lt;h5 id=&#34;2-1-新建目录&#34;&gt;&lt;a href=&#34;#2-1-新建目录&#34; class=&#34;headerlink&#34; title=&#34;2.1 新建目录&#34;&gt;&lt;/a&gt;2.1 &lt;strong&gt;新建目录&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# mkdir /usr/local/sentinel
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-2-复制redis&#34;&gt;&lt;a href=&#34;#2-2-复制redis&#34; class=&#34;headerlink&#34; title=&#34;2.2 复制redis&#34;&gt;&lt;/a&gt;2.2 &lt;strong&gt;复制redis&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# cp -r /usr/local/redis/bin/* /usr/local/sentinel
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-3-复制配置文件&#34;&gt;&lt;a href=&#34;#2-3-复制配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.3 复制配置文件&#34;&gt;&lt;/a&gt;2.3 &lt;strong&gt;复制配置文件&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	从redis解压目录中复制sentinel配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/tmp/redis-5.0.5/
# cp sentinel.conf /usr/local/sentinel/
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-4-修改配置文件&#34;&gt;&lt;a href=&#34;#2-4-修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;2.4 修改配置文件&#34;&gt;&lt;/a&gt;2.4 &lt;strong&gt;修改配置文件&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/sentinel
# vim sentinel.conf

port 26379
daemonize yes
#这个提示里面的/var/log/redis/redis.log日志文件指的是容器中的文件，千万别理解为宿主机中的路径，如果你在宿主机创建此文件并授权，最后结果也是一样的，理解这一点很重要。
logfile “/usr/local/sentinel/26379.log”

sentinel monitor mymaster 192.168.93.10 6379 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	复制sentinel.conf，命名为sentinel-26380.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp sentinel.conf sentinel-26380.conf
# vim sentinel-26380.conf

port 26380
daemonize yes
logfile “/usr/local/sentinel/26380.log”
sentinel monitor mymaster 192.168.93.10 6379 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;复制sentinel.conf，命名为sentinel-26381.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp sentinel.conf sentinel-26381.conf
# vim sentinel-26381.conf

port 26381
daemonize yes
logfile “/usr/local/sentinel/26381.log”
sentinel monitor mymaster 192.168.93.10 6379 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-5-启动主从&#34;&gt;&lt;a href=&#34;#2-5-启动主从&#34; class=&#34;headerlink&#34; title=&#34;2.5 启动主从&#34;&gt;&lt;/a&gt;2.5 &lt;strong&gt;启动主从&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	如果已经启动状态，忽略下面命令。如果启动部分，全部kill后重新启动。&lt;/p&gt;
&lt;p&gt;​	使用kill杀死全部redis&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ps aux|grep redis
# kill -9 进程号
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	启动redis主从&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/replica
# ./startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-6-启动三个哨兵&#34;&gt;&lt;a href=&#34;#2-6-启动三个哨兵&#34; class=&#34;headerlink&#34; title=&#34;2.6 启动三个哨兵&#34;&gt;&lt;/a&gt;2.6 &lt;strong&gt;启动三个哨兵&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/sentinel
# ./redis-sentinel sentinel.conf
# ./redis-sentinel sentinel-26380.conf
# ./redis-sentinel sentinel-26381.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-7-查看日志&#34;&gt;&lt;a href=&#34;#2-7-查看日志&#34; class=&#34;headerlink&#34; title=&#34;2.7 查看日志&#34;&gt;&lt;/a&gt;2.7 &lt;strong&gt;查看日志&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;# cat 26379.log
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;2-8-测试宕机&#34;&gt;&lt;a href=&#34;#2-8-测试宕机&#34; class=&#34;headerlink&#34; title=&#34;2.8 测试宕机&#34;&gt;&lt;/a&gt;2.8 &lt;strong&gt;测试宕机&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;​	查看redis进程号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ps aux|grep redis
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	杀死主进程号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# kill -9 进程号
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	查看日志，短暂延迟后会发现，出现新的主。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cat 26379.log
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;八-集群-Cluster-–nt-have-doc&#34;&gt;&lt;a href=&#34;#八-集群-Cluster-–nt-have-doc&#34; class=&#34;headerlink&#34; title=&#34;八. 集群(Cluster)–nt have doc&#34;&gt;&lt;/a&gt;八. 集群(Cluster)–nt have doc&lt;/h3&gt;&lt;p&gt;​	前提：已经安装好redis单机版。&lt;/p&gt;
&lt;p&gt;​	当集群中超过或等于1&amp;#x2F;2节点不可用时，整个集群不可用。为了搭建稳定集群，都采用奇数节点。&lt;/p&gt;
&lt;h4 id=&#34;1-复制redis配置文件&#34;&gt;&lt;a href=&#34;#1-复制redis配置文件&#34; class=&#34;headerlink&#34; title=&#34;1 .复制redis配置文件&#34;&gt;&lt;/a&gt;1 .&lt;strong&gt;复制redis配置文件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	从&amp;#x2F;usr&amp;#x2F;local&amp;#x2F;redis&amp;#x2F;bin下把redis.conf复制到当前目录中，命名为redis-7001.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp /usr/local/redis/bin/redis.conf /usr/local/redis/bin/redis-7001.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-修改redis-7001-conf&#34;&gt;&lt;a href=&#34;#2-修改redis-7001-conf&#34; class=&#34;headerlink&#34; title=&#34;2. 修改redis-7001.conf&#34;&gt;&lt;/a&gt;2. &lt;strong&gt;修改redis-7001.conf&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# cd /usr/local/redis/bin
# vim redis-7001.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	需要修改如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;port 7001
cluster-enabled yes
cluster-config-file nodes-7001.conf
cluster-node-timeout 15000
# appendonly yes 如果开启aof默认，需要修改为yes。如果使用rdb，此处不需要修改
daemonize yes
protected-mode no
pidfile /var/run/redis_7001.pid
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;3-复制配置文件，并修改内容&#34;&gt;&lt;a href=&#34;#3-复制配置文件，并修改内容&#34; class=&#34;headerlink&#34; title=&#34;3 .复制配置文件，并修改内容&#34;&gt;&lt;/a&gt;3 .&lt;strong&gt;复制配置文件，并修改内容&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	把redis-7001.conf 复制5份，分别叫做redis-7002.conf、redis-7003.conf、redis-7004.conf、redis-7005.conf、redis-7006.conf &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp redis-7001.conf redis-7002.conf
# cp redis-7001.conf redis-7003.conf
# cp redis-7001.conf redis-7004.conf
# cp redis-7001.conf redis-7005.conf
# cp redis-7001.conf redis-7006.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt; 新复制的5个配置文件都需要需改三处。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	例如nodes-7002.conf中需要把所有7001都换成7002。&lt;/p&gt;
&lt;p&gt;​	可以使用 :%s&amp;#x2F;7001&amp;#x2F;7002&amp;#x2F;g 进行全局修改。 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;port 7002
cluster-config-file nodes-7002.conf
pidfile /var/run/redis_7002.pid
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-启动6个redis&#34;&gt;&lt;a href=&#34;#4-启动6个redis&#34; class=&#34;headerlink&#34; title=&#34;4 .启动6个redis&#34;&gt;&lt;/a&gt;4 .&lt;strong&gt;启动6个redis&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	可以使用redis-server结合6个配置文件进行启动6个实例。&lt;/p&gt;
&lt;p&gt;​	执行之前一定要先删除dump.rdb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rm -f dump.rdb
# vim startup.sh

./redis-server redis-7001.conf
./redis-server redis-7002.conf
./redis-server redis-7003.conf
./redis-server redis-7004.conf
./redis-server redis-7005.conf
./redis-server redis-7006.conf


# chmod a+x startup.sh
# ./startup.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-查看启动状态&#34;&gt;&lt;a href=&#34;#5-查看启动状态&#34; class=&#34;headerlink&#34; title=&#34;5. 查看启动状态&#34;&gt;&lt;/a&gt;5. &lt;strong&gt;查看启动状态&lt;/strong&gt;&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/Redis/Redis-10.jpg&#34; class=&#34;&#34;&gt;

&lt;h4 id=&#34;6-建立集群&#34;&gt;&lt;a href=&#34;#6-建立集群&#34; class=&#34;headerlink&#34; title=&#34;6. 建立集群&#34;&gt;&lt;/a&gt;6. &lt;strong&gt;建立集群&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	在redis3的时候需要借助ruby脚本实现集群。在redis5中可以使用自带的redis-cli实现集群功能，比redis3的时候更加方便了。&lt;/p&gt;
&lt;p&gt;​	建议配置静态ip，ip改变集群失效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./redis-cli --cluster create 192.168.93.10:7001 192.168.93.10:7002 192.168.93.10:7003 192.168.93.10:7004 192.168.93.10:7005 192.168.93.10:7006 --cluster-replicas 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-测试&#34;&gt;&lt;a href=&#34;#7-测试&#34; class=&#34;headerlink&#34; title=&#34;7. 测试&#34;&gt;&lt;/a&gt;7. &lt;strong&gt;测试&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;​	集群测试时，千万不要忘记最后一个-c参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./redis-cli -p 7001 -c
# set age 18
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-编写关闭脚本&#34;&gt;&lt;a href=&#34;#8-编写关闭脚本&#34; class=&#34;headerlink&#34; title=&#34;8 .编写关闭脚本&#34;&gt;&lt;/a&gt;8 .&lt;strong&gt;编写关闭脚本&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;# vim stop.sh
# chmod a+x stop.sh

./redis-cli -p 7001 shutdown
./redis-cli -p 7002 shutdown
./redis-cli -p 7003 shutdown
./redis-cli -p 7004 shutdown
./redis-cli -p 7005 shutdown
./redis-cli -p 7006 shutdown
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;八-集群-Cluster-PATH-docker&#34;&gt;&lt;a href=&#34;#八-集群-Cluster-PATH-docker&#34; class=&#34;headerlink&#34; title=&#34;八. 集群(Cluster)-PATH:docker&#34;&gt;&lt;/a&gt;八. 集群(Cluster)-PATH:docker&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;注：&lt;/strong&gt;1.如果是配置修改之前&lt;strong&gt;已经创建过的集群时&lt;/strong&gt;，要先进行第七步操作。&lt;/p&gt;
&lt;p&gt;​			2.要是想重启集群可以省略第一步，但是得&lt;strong&gt;先删除已经创建的容器&lt;/strong&gt;，重新进行2、3（合并也行）&lt;/p&gt;
&lt;h4 id=&#34;0、创建网络&#34;&gt;&lt;a href=&#34;#0、创建网络&#34; class=&#34;headerlink&#34; title=&#34;0、创建网络&#34;&gt;&lt;/a&gt;0、创建网络&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;目的：&lt;/strong&gt;让宿主机可以访问到自身&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker network create net-redis --subnet 172.38.0.0/16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;补充：关于虚拟机的三种网路连接方式区别&lt;/p&gt;
&lt;p&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlmZW5nbWlhb3podWFuL2FydGljbGUvZGV0YWlscy83OTg4NzY5Mj9zcG09MTAwMS4yMTAxLjMwMDEuNjY2MS4xJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnRfdDAubm9uZS10YXNrLWJsb2ctMn5kZWZhdWx0fkNUUkxJU1R+UmF0ZS0xLnBjX3JlbGV2YW50X2RlZmF1bHQmYW1wO2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX3JlbGV2YW50X3QwLm5vbmUtdGFzay1ibG9nLTJ+ZGVmYXVsdH5DVFJMSVNUflJhdGUtMS5wY19yZWxldmFudF9kZWZhdWx0JmFtcDt1dG1fcmVsZXZhbnRfaW5kZXg9MQ==&#34;&gt;http://blog.csdn.net/bifengmiaozhuan/article/details/79887692?spm=1001.2101.3001.6661.1&amp;amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;amp;utm_relevant_index=1&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\1645532994890.png&#34; alt=&#34;1645532994890&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1、创建并修改配置文件&#34;&gt;&lt;a href=&#34;#1、创建并修改配置文件&#34; class=&#34;headerlink&#34; title=&#34;1、创建并修改配置文件&#34;&gt;&lt;/a&gt;1、创建并修改配置文件&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;In certain deployments, Redis Cluster nodes address discovery fails, because addresses are NAT-ted or because ports are forwarded (the typical case is Docker and other containers).

在某些部署中，Redis群集节点地址发现失败，因为地址是NAT，或者端口是转发的（典型情况是Docker和其他容器）。

In order to make Redis Cluster working in such environments, a static configuration where each node knows its public address is needed. The following two options are used for this scope, and are:

为了让Redis集群在这样的环境中工作，需要一种静态配置，其中每个节点都知道自己的公共地址。以下两个选项用于此范围，分别是：

cluster-announce-ip

cluster-announce-port
---------------------------------------------------------------------------------------
你的docker内网是172，你宿主的IP是192网段

根据redis的配置文件中的解释

要在你的配置文件上加上上面的2个配置
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;参考上面的方法一样行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法二：&lt;/strong&gt;使用脚本&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;#cat &amp;lt;&amp;lt;EOF EOF在这里没有特殊的含义，你可以使用FOE或000等;
#表示以cat &amp;lt;&amp;lt;EOF 开始输入以 EOF 结束结束输入
#cat&amp;gt;创建文件，并把标准输入输出到后面的filename文件


# * cluster-announce-ip					192.168.1.195	#*群集ip
# * cluster-announce-port				700$&amp;#123;port&amp;#125;		#*群集总线端口
# * cluster-announce-bus-port#*群集ip    1700$&amp;#123;port&amp;#125;	   #*群集公布端口
# 集群 ip 是固定+10000

# 可以使用 :  %s/7001/7002/g     进行全局修改。 ---将全局的7001修改成7002

for port in $(seq 1 6); \ 
do \
mkdir  -p  /root/myredis/conf700$&amp;#123;port&amp;#125;
touch  /root/myredis/conf700$&amp;#123;port&amp;#125;/redis.conf
cat &amp;lt;&amp;lt;TTT &amp;gt; /root/myredis/conf700$&amp;#123;port&amp;#125;/redis.conf port 6379
bind 0.0.0.0
port 700$&amp;#123;port&amp;#125;
cluster-enabled yes
cluster-config-file nodes-700$&amp;#123;port&amp;#125;.conf
cluster-node-timeout 15000
protected-mode no
pidfile /var/run/redis_ 700$&amp;#123;port&amp;#125;.pid
cluster-announce-ip  192.168.1.195 
cluster-announce-port  700$&amp;#123;port) 
cluster-announce-bus-port 1700$&amp;#123;port) 
appendonly yes 
TTT 
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、创建容器&#34;&gt;&lt;a href=&#34;#2、创建容器&#34; class=&#34;headerlink&#34; title=&#34;2、创建容器&#34;&gt;&lt;/a&gt;2、创建容器&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;手动创建容器，并启动&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run -p 7001:7001   -p 17001:17001  --name redis7001  -v /root/myredis/conf7001/redis.conf:/etc/redis/redis.conf -v /root/myredis/data7001:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	7002 ~~~7006同上，自行修改参数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法二：&lt;/strong&gt;脚本一键启动，效果同上&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中要指定两个端口号**-p 1700${port}:1700${port}**不要忘记，否则会在创建几群的时候出现  **Waiting for the cluster to join   ** 。【具体原因，我还没查出来，后面补充】&lt;/li&gt;
&lt;li&gt;在docker创建集群容器的时候，&lt;strong&gt;一定要&lt;/strong&gt; 指定  ip&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;那肯定是你端口没有开启，不要质疑，这里的端口不是7000-7005，而是17000-17005，因为redis设置集群的端口号是”redis端口+10000“，这个非常重要。并且7001:7006也是必须打开的。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;for port in $(seq 1 6);  \
do \
docker run -p 700$&amp;#123;port&amp;#125;:700$&amp;#123;port&amp;#125;   -p 1700$&amp;#123;port&amp;#125;:1700$&amp;#123;port&amp;#125;  --name redis700$&amp;#123;port&amp;#125;  \
-v /root/redis/redis700$&amp;#123;port&amp;#125;.conf:/etc/redis/redis.conf \
-v /root/redis/data700$&amp;#123;port&amp;#125;:/data \
-d --ip 192.168.1.195 redis redis-server /etc/redis/redis.conf 
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、进入容器&#34;&gt;&lt;a href=&#34;#3、进入容器&#34; class=&#34;headerlink&#34; title=&#34;3、进入容器&#34;&gt;&lt;/a&gt;3、进入容器&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it redis7001 /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4、创建集群&#34;&gt;&lt;a href=&#34;#4、创建集群&#34; class=&#34;headerlink&#34; title=&#34;4、创建集群&#34;&gt;&lt;/a&gt;4、创建集群&lt;/h4&gt;&lt;p&gt;​	&lt;strong&gt;注：&lt;/strong&gt;有一步操作，要自行进行确认，一定要输入 &lt;strong&gt;yes&lt;/strong&gt; 而不是 &lt;strong&gt;y&lt;/strong&gt; 或者其他之类的，除了 yes一律视为 &lt;strong&gt;no&lt;/strong&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;redis-cli --cluster create 192.168.1.195:7001 192.168.1.195:7002 192.168.1.195:7003 192.168.1.195:7004 192.168.1.195:7005 192.168.1.195:7006 --cluster-replicas 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5、测试&#34;&gt;&lt;a href=&#34;#5、测试&#34; class=&#34;headerlink&#34; title=&#34;5、测试&#34;&gt;&lt;/a&gt;5、测试&lt;/h4&gt;&lt;p&gt;​	集群测试时，千万不要忘记最后一个-c参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shel&#34;&gt;redis-cli -p 7001 -c
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6、关闭集群&#34;&gt;&lt;a href=&#34;#6、关闭集群&#34; class=&#34;headerlink&#34; title=&#34;6、关闭集群&#34;&gt;&lt;/a&gt;6、关闭集群&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	自行手动一个一个停止，并且删除容器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker stop redis7001 #7002 ~~~7006

docker rm -f redis7001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;方法二：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	脚本程序，一劳永逸&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;for port in $(seq 1 6);  \
do \
docker stop redis700$&amp;#123;port&amp;#125;
docker rm -f redis700$&amp;#123;port&amp;#125;
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7、清空集群文件&#34;&gt;&lt;a href=&#34;#7、清空集群文件&#34; class=&#34;headerlink&#34; title=&#34;7、清空集群文件&#34;&gt;&lt;/a&gt;7、清空集群文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;for port in $(seq 1 6);  \
do \
rm  -rf  ./data700$&amp;#123;port&amp;#125;/* 
done
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;九-Jedis&#34;&gt;&lt;a href=&#34;#九-Jedis&#34; class=&#34;headerlink&#34; title=&#34;九. Jedis&#34;&gt;&lt;/a&gt;九. &lt;strong&gt;Jedis&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	Redis给Java语言提供了客户端API，称之为Jedis。&lt;/p&gt;
&lt;p&gt;​	Jedis API和Redis 命令几乎是一样的。&lt;/p&gt;
&lt;p&gt;​	例如：Redis对String值新增时set命令，Jedis中也是set方法。所以本课程中没有重点把所有方法进行演示，重要演示Jedis如何使用。&lt;/p&gt;
&lt;p&gt;​	Jedis API特别简单，基本上都是创建对象调用方法即可。&lt;/p&gt;
&lt;h4 id=&#34;1-单机版&#34;&gt;&lt;a href=&#34;#1-单机版&#34; class=&#34;headerlink&#34; title=&#34;1. 单机版&#34;&gt;&lt;/a&gt;1. &lt;strong&gt;单机版&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public void testStandalone()&amp;#123;
    Jedis jedis = new Jedis(&amp;quot;192.168.93.10&amp;quot;,6379);
    jedis.set(&amp;quot;name&amp;quot;,&amp;quot;msb-standalone&amp;quot;);
    String value = jedis.get(&amp;quot;name&amp;quot;);
    System.out.println(value);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-带有连接池&#34;&gt;&lt;a href=&#34;#2-带有连接池&#34; class=&#34;headerlink&#34; title=&#34;2. 带有连接池&#34;&gt;&lt;/a&gt;2. &lt;strong&gt;带有连接池&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public void testPool()&amp;#123;
    JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();
    jedisPoolConfig.setMaxTotal(20);
    jedisPoolConfig.setMaxIdle(5);
    jedisPoolConfig.setMinIdle(3);
    JedisPool jedisPool = new JedisPool(jedisPoolConfig,&amp;quot;192.168.93.10&amp;quot;,6379);
    Jedis jedis = jedisPool.getResource();
    jedis.set(&amp;quot;name&amp;quot;,&amp;quot;msb-pool&amp;quot;);
    String value = jedis.get(&amp;quot;name&amp;quot;);
    System.out.println(value);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-集群&#34;&gt;&lt;a href=&#34;#3-集群&#34; class=&#34;headerlink&#34; title=&#34;3. 集群&#34;&gt;&lt;/a&gt;3. &lt;strong&gt;集群&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;public void testCluster()&amp;#123;
    Set&amp;lt;HostAndPort&amp;gt; set = new HashSet&amp;lt;&amp;gt;();
    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7001));
    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7002));
    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7003));
    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7004));
    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7005));
    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7006));
    JedisCluster jedisCluster = new JedisCluster(set);
    jedisCluster.set(&amp;quot;name&amp;quot;,&amp;quot;bjmsb&amp;quot;);
    String value = jedisCluster.get(&amp;quot;name&amp;quot;);
    System.out.println(value);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十-使用SpringBoot整合SpringDataRedis操作redis&#34;&gt;&lt;a href=&#34;#十-使用SpringBoot整合SpringDataRedis操作redis&#34; class=&#34;headerlink&#34; title=&#34;十. 使用SpringBoot整合SpringDataRedis操作redis&#34;&gt;&lt;/a&gt;十. &lt;strong&gt;使用SpringBoot整合SpringDataRedis操作redis&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	Spring Data是Spring公司的顶级项目，里面包含了N多个二级子项目，这些子项目都是相对独立的项目。每个子项目是对不同API的封装。&lt;/p&gt;
&lt;p&gt;​	所有Spring Boot整合Spring Data xxxx的启动器都叫做spring-boot-starter-data-xxxx&lt;/p&gt;
&lt;p&gt;​	Spring Data 好处很方便操作对象类型。&lt;/p&gt;
&lt;p&gt;​	把Redis不同值得类型放到一个opsForXXX方法中。&lt;/p&gt;
&lt;p&gt;​		opsForValue : String值&lt;/p&gt;
&lt;p&gt;​		opsForList : 列表List&lt;/p&gt;
&lt;p&gt;​		opsForHash: 哈希表Hash&lt;/p&gt;
&lt;p&gt;​		opsForZSet: 有序集合Sorted Set&lt;/p&gt;
&lt;p&gt;​		opsForSet : 集合&lt;/p&gt;
&lt;h4 id=&#34;1-添加依赖&#34;&gt;&lt;a href=&#34;#1-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;1. 添加依赖&#34;&gt;&lt;/a&gt;1. &lt;strong&gt;添加依赖&lt;/strong&gt;&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;     &amp;lt;parent&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.2.2.RELEASE&amp;lt;/version&amp;gt;
    &amp;lt;/parent&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.2.5.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;5.1.47&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.2.2.RELEASE&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.18.20&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-配置配置文件&#34;&gt;&lt;a href=&#34;#2-配置配置文件&#34; class=&#34;headerlink&#34; title=&#34;2. 配置配置文件&#34;&gt;&lt;/a&gt;2. &lt;strong&gt;配置配置文件&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;spring.redis.host&amp;#x3D;localhost 默认值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;spring.redis.port&amp;#x3D;6379 端口号默认值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;mybatis:
  mapper-locations: classpath:mybatis/*
  type-aliases-package: com.msb.pojo
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/mydb
    username: root
    password: root
    driver-class-name: com.mysql.jdbc.Driver
  redis:
    host: 192.168.1.195
    cluster:
      nodes: 192.168.1.195:7001,192.168.1.195:7002,192.168.1.195:7003,192.168.1.195:7004,192.168.1.195:7005,192.168.1.195:7006
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-编写配置类（可直接复制）&#34;&gt;&lt;a href=&#34;#3-编写配置类（可直接复制）&#34; class=&#34;headerlink&#34; title=&#34;3.编写配置类（可直接复制）&#34;&gt;&lt;/a&gt;3.&lt;strong&gt;编写配置类&lt;/strong&gt;（可直接复制）&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;@Configuration
public class RedisConfig &amp;#123;
    @Bean
    public RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate(RedisConnectionFactory 		  factory)&amp;#123;
        RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate = new RedisTemplate&amp;lt;&amp;gt;();
        redisTemplate.setConnectionFactory(factory);
        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&amp;lt;Object&amp;gt;(Object.class));
        return redisTemplate;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-编写代码&#34;&gt;&lt;a href=&#34;#4-编写代码&#34; class=&#34;headerlink&#34; title=&#34;4. 编写代码&#34;&gt;&lt;/a&gt;4. &lt;strong&gt;编写代码&lt;/strong&gt;&lt;/h4&gt;&lt;h5 id=&#34;4-1-编写对象新增&#34;&gt;&lt;a href=&#34;#4-1-编写对象新增&#34; class=&#34;headerlink&#34; title=&#34;4.1 编写对象新增&#34;&gt;&lt;/a&gt;4.1 &lt;strong&gt;编写对象新增&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;@Autowired
private RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate;

@Test
public void testString() &amp;#123;
    People peo = new People(1, &amp;quot;张三&amp;quot;);
    redisTemplate.opsForValue().set(&amp;quot;peo1&amp;quot;, peo);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-2-编写对象获取&#34;&gt;&lt;a href=&#34;#4-2-编写对象获取&#34; class=&#34;headerlink&#34; title=&#34;4.2 编写对象获取&#34;&gt;&lt;/a&gt;4.2 &lt;strong&gt;编写对象获取&lt;/strong&gt;&lt;/h5&gt;&lt;p&gt;此处必须编写值序列化器。不指定时返回类型为LinkedHashMap&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Test
public void testGetString() &amp;#123;
    redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&amp;lt;People&amp;gt;(People.class));
    People peo = (People) redisTemplate.opsForValue().get(&amp;quot;peo1&amp;quot;);
    System.out.println(peo);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-3-编写List&#34;&gt;&lt;a href=&#34;#4-3-编写List&#34; class=&#34;headerlink&#34; title=&#34;4.3 编写List&#34;&gt;&lt;/a&gt;4.3 &lt;strong&gt;编写List&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;@Test
public void testList() &amp;#123;
    List&amp;lt;People&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
    list.add(new People(1, &amp;quot;张三&amp;quot;));
    list.add(new People(2, &amp;quot;李四&amp;quot;));
    redisTemplate.opsForValue().set(&amp;quot;list2&amp;quot;, list);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;4-4-编写List取值&#34;&gt;&lt;a href=&#34;#4-4-编写List取值&#34; class=&#34;headerlink&#34; title=&#34;4.4 编写List取值&#34;&gt;&lt;/a&gt;4.4 &lt;strong&gt;编写List取值&lt;/strong&gt;&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;@Test
public void testGetList()&amp;#123;
    redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&amp;lt;List&amp;gt;(List.class));
    List&amp;lt;People&amp;gt; list2 = (List&amp;lt;People&amp;gt;) redisTemplate.opsForValue().get(&amp;quot;list2&amp;quot;);
    System.out.println(list2);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十一-使用Redis效果&#34;&gt;&lt;a href=&#34;#十一-使用Redis效果&#34; class=&#34;headerlink&#34; title=&#34;十一. 使用Redis效果&#34;&gt;&lt;/a&gt;十一. &lt;strong&gt;使用Redis效果&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;​	使用缓存流程&lt;/p&gt;
&lt;p&gt;​	1. 先判断缓存中是否存在。如果存在直接从缓存中取出数据。不执行2，3步骤&lt;/p&gt;
&lt;p&gt;​	2. 如果不存在，从mysql中获取数据&lt;/p&gt;
&lt;p&gt;​	3. 获取数据后，把数据缓存到redis中&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Redis/Redis-11.jpg&#34; class=&#34;&#34;&gt;</content>
        <category term="分布式" />
        <category term="中间件" />
        <category term="Redis基础" />
        <category term="NoSQL数据库" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/Spring/</id>
        <title>Spring</title>
        <link rel="alternate" href="http://example.com/2022/10/07/Spring/"/>
        <content type="html">&lt;h1 id=&#34;概念：&#34;&gt;&lt;a href=&#34;#概念：&#34; class=&#34;headerlink&#34; title=&#34;概念：&#34;&gt;&lt;/a&gt;概念：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Spring是**一个轻量级 **Java开发框架，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE&amp;#x2F;JavaEE full-stack（一站式）轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring最根本的使命是&lt;strong&gt;解决企业级应用开发的复杂性，&lt;/strong&gt;即简化&lt;em&gt;Java&lt;/em&gt;开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能的底层都依赖于它的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个核心特性，也就是&lt;strong&gt;依赖注入（dependency injection，DI&lt;/strong&gt;）和&lt;strong&gt;面向切面编程&lt;/strong&gt;（&lt;strong&gt;aspect-&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;oriented programming，AOP）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了降低Java开发的复杂性，Spring采取了以下4种关键策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于POJO的轻量级和最小侵入性编程；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过依赖注入和面向接口实现松耦合；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于切面和惯例进行声明式编程；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过切面和模板减少样板式代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Spring的俩大核心概念&#34;&gt;&lt;a href=&#34;#Spring的俩大核心概念&#34; class=&#34;headerlink&#34; title=&#34;Spring的俩大核心概念&#34;&gt;&lt;/a&gt;Spring的俩大核心概念&lt;/h1&gt;&lt;h2 id=&#34;IOC（控制翻转）：&#34;&gt;&lt;a href=&#34;#IOC（控制翻转）：&#34; class=&#34;headerlink&#34; title=&#34;IOC（控制翻转）：&#34;&gt;&lt;/a&gt;IOC（控制翻转）：&lt;/h2&gt;&lt;p&gt;控制翻转，也叫依赖注入，他就是不会直接创建对象，只是把对象声明出来，在代码 中不直&lt;/p&gt;
&lt;p&gt;接与对象和服务进行连接，但是在配置文件中描述了哪一项组件需要哪一项服 务，容器将他&lt;/p&gt;
&lt;p&gt;们组件起来。在一般的IOC场景中容器创建了所有的对象，并设置了必 要的属性将他们联系&lt;/p&gt;
&lt;p&gt;在一起，等到需要使用的时候才把他们声明出来，使用注解就跟 方便了，容器会自动根据注&lt;/p&gt;
&lt;p&gt;解把对象组合起来&lt;/p&gt;
&lt;h2 id=&#34;其中还有一个点DI-依赖注入&#34;&gt;&lt;a href=&#34;#其中还有一个点DI-依赖注入&#34; class=&#34;headerlink&#34; title=&#34;其中还有一个点DI(依赖注入)&#34;&gt;&lt;/a&gt;其中还有一个点DI(依赖注入)&lt;/h2&gt;&lt;h2 id=&#34;AOP（面对切面编程）&#34;&gt;&lt;a href=&#34;#AOP（面对切面编程）&#34; class=&#34;headerlink&#34; title=&#34;AOP（面对切面编程）&#34;&gt;&lt;/a&gt;AOP（面对切面编程）&lt;/h2&gt;&lt;p&gt;面对切面编程，这是一种编程模式，他允许程序员通过自定义的横切点进行模块 化，将那些&lt;/p&gt;
&lt;p&gt;影响多个类的行为封装到课重用的模块中。 例子：比如日志输出，不使用AOP的话就需要把&lt;/p&gt;
&lt;p&gt;日志的输出语句放在所有类中，方法 中，但是有了AOP就可以把日志输出语句封装一个可重&lt;/p&gt;
&lt;p&gt;用模块，在以声明的方式将他 们放在类中，每次使用类就自动完成了日志输出。&lt;/p&gt;
&lt;h1 id=&#34;Bean的生命周期&#34;&gt;&lt;a href=&#34;#Bean的生命周期&#34; class=&#34;headerlink&#34; title=&#34;Bean的生命周期&#34;&gt;&lt;/a&gt;Bean的生命周期&lt;/h1&gt;&lt;p&gt;1 通过构造器创建bean实例           执行构造器&lt;br&gt;2 为bean属性赋值                         执行set方法&lt;br&gt;3 初始化bean                                调用bean的初始化方法,需要配置指定调用的方法&lt;br&gt;4 bean的获取                                容器对象 getBean方法&lt;br&gt;5 容器关闭销毁bean                      调用销毁方法,需要配置指定调用的方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class User &amp;#123;
    private Integer userid;
    private String username;
    private String password;
    public void initUser()&amp;#123;
        System.out.println(&amp;quot;第三步:User初始化&amp;quot;);
    &amp;#125;
    public User() &amp;#123;
        System.out.println(&amp;quot;第一步:User构造&amp;quot;);
    &amp;#125;
    public void destoryUser()&amp;#123;
        System.out.println(&amp;quot;第五步:User销毁&amp;quot;);
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;User&amp;#123;&amp;quot; +
                &amp;quot;userid=&amp;quot; + userid +
                &amp;quot;, username=&amp;#39;&amp;quot; + username + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;quot;, password=&amp;#39;&amp;quot; + password + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
    public User(Integer userid, String username, String password) &amp;#123;
        this.userid = userid;
        this.username = username;
        this.password = password;
    &amp;#125;
    public void setUserid(Integer userid) &amp;#123;
        System.out.println(&amp;quot;setUserid&amp;quot;);
        this.userid = userid;
    &amp;#125;
    public void setUsername(String username) &amp;#123;
        System.out.println(&amp;quot;第二步:User属性赋值&amp;quot;);
        this.username = username;
    &amp;#125;
    public void setPassword(String password) &amp;#123;
        this.password = password;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置Bean&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
       xmlns:c=&amp;quot;http://www.springframework.org/schema/c&amp;quot;
       xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;
    &amp;lt;!--  --&amp;gt;
    &amp;lt;bean id=&amp;quot;user&amp;quot; class=&amp;quot;com.msb.bean.User&amp;quot; init-method=&amp;quot;initUser&amp;quot; destroy-method=&amp;quot;destoryUser&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;xiaoming&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据 Class、property 通过反射去找构造器创建实例，然后对property属性根据 set 方法注入依赖也叫赋值，&lt;/p&gt;
&lt;p&gt;通过指定 init-method(初始化方法) 来对我们的对象再次进行操作，第四步获取 Bean 对象，第五步项目结束Context销毁，调用销毁方法销毁Bean&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;以上我们是对一般的过程其实在这个基础上我们还可以再次增加两步，这个叫后置处理器，处理后的顺序：&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;1 通过构造器创建bean实例           执行构造器&lt;br&gt;2 为bean属性赋值                         执行set方法&lt;br&gt;&lt;font color=red&gt;3 把bean实例传递给bean的后置处理器的方法&lt;/font&gt;&lt;br&gt;4 初始化bean                                调用bean的初始化方法,需要配置指定调用的方法&lt;br&gt;&lt;font color=red&gt;5 把bean实例传递给bean的后置处理器的方法&lt;/font&gt;&lt;br&gt;6 bean的获取                                容器对象 getBean方法&lt;br&gt;7 容器关闭销毁bean                      调用销毁方法,需要配置指定调用的方法&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;添加后置处理器&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 创建后置处理器 实现 BeanPostProcesser  重写两个方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
// 1 创建后置处理器 实现 BeanPostProcesser  重写两个方法
public class MyBeanProcesser implements BeanPostProcessor &amp;#123;
    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &amp;#123;
        //Object bean      实例化的bean
        //String beanName  bean的id
        System.out.println(&amp;quot;bean:初始化方法之前&amp;quot;);
        return bean;// 这里必须return bean
    &amp;#125;
    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &amp;#123;
        System.out.println(&amp;quot;bean:初始化方法之后&amp;quot;);
        return bean;// 这里必须returnbean
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2 配置后置处理器,对容器中的所有bean添加后置处理器的生命周期&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
       xmlns:c=&amp;quot;http://www.springframework.org/schema/c&amp;quot;
       xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;
    &amp;lt;bean id=&amp;quot;user&amp;quot; class=&amp;quot;com.msb.bean.User&amp;quot; init-method=&amp;quot;initUser&amp;quot; destroy-method=&amp;quot;destoryUser&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;xiaoming&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    
    &amp;lt;bean id=&amp;quot;myBeanProcesser&amp;quot; class=&amp;quot;com.msb.beanProcesser.MyBeanProcesser&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;BeanPostProcessor接口作用：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们想在Spring容器中完成bean实例化、配置以及其他初始化方法前后要添加一些自己逻辑处理。我们需要定义一个或多个BeanPostProcessor接口实现类，然后注册到Spring IoC容器中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、接口中的两个方法都要将传入的bean返回，而不能返回null，如果返回的是null那么我们通过getBean方法将得不到目标。&lt;br&gt;2、ApplicationContext会自动检测在配置文件中实现了BeanPostProcessor接口的所有bean，并把它们注册为后置处理器，然后在容器创建bean的适当时候调用它，因此部署一个后置处理器同部署其他的bean并没有什么区别。而使用BeanFactory实现的时候，bean 后置处理器必须通过代码显式地去注册，在IoC容器继承体系中的ConfigurableBeanFactory接口中定义了注册方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完整的过程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创建实例 –&amp;gt; set赋值 –&amp;gt; 再次初始化对象–&amp;gt; 获取Bean对象–&amp;gt; 销毁Bean对象&lt;/p&gt;
&lt;p&gt;创建实例 –&amp;gt; set赋值 –&amp;gt;把bean实例传递给bean的后置处理器的方法 –&amp;gt; 再次初始化对象 –&amp;gt; 把bean实例传递给bean的后置处理器的方法 —&amp;gt; 获取Bean对象–&amp;gt; 销毁Bean对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Bean自动装配&#34;&gt;&lt;a href=&#34;#Bean自动装配&#34; class=&#34;headerlink&#34; title=&#34;Bean自动装配&#34;&gt;&lt;/a&gt;Bean自动装配&lt;/h1&gt;&lt;p&gt;通过property标签可以手动指定给属性进行注入&lt;br&gt;我们也可以通过自动转配,完成&amp;#x3D;&amp;#x3D;属性的自动注入&amp;#x3D;&amp;#x3D;,就是自动装配,可以简化DI的配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
       xmlns:c=&amp;quot;http://www.springframework.org/schema/c&amp;quot;
       xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;
    &amp;lt;bean id=&amp;quot;dept&amp;quot; class=&amp;quot;com.msb.bean.Dept&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
    &amp;lt;!--
    autowire 属性控制自动将容器中的对象注入到当前对象的属性上
    byName 根据目标id值和属性值注入,要保证当前对象的属性值和目标对象的id值一致
    byType 根据类型注入,要保证相同类型的目标对象在容器中只有一个实例
    --&amp;gt;
    &amp;lt;bean id=&amp;quot;emp&amp;quot; class=&amp;quot;com.msb.bean.Emp&amp;quot; autowire=&amp;quot;byName&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Spring注解管理Bean&#34;&gt;&lt;a href=&#34;#Spring注解管理Bean&#34; class=&#34;headerlink&#34; title=&#34;Spring注解管理Bean&#34;&gt;&lt;/a&gt;Spring注解管理Bean&lt;/h1&gt;&lt;h2 id=&#34;1注解方式创建对象IOC&#34;&gt;&lt;a href=&#34;#1注解方式创建对象IOC&#34; class=&#34;headerlink&#34; title=&#34;1注解方式创建对象IOC&#34;&gt;&lt;/a&gt;1注解方式创建对象IOC&lt;/h2&gt;&lt;p&gt;导入依赖 aop&lt;/p&gt;
&lt;p&gt;@Component    放在类上,用于标记,告诉spring当前类需要由容器实例化bean并放入容器中&lt;br&gt;  该注解有三个子注解&lt;br&gt;  @Controller   用于实例化controller层bean&lt;br&gt;        @Service        用于实例化service层bean&lt;br&gt;        @Repository  用于实例化持久层bean&lt;br&gt;  当不确定是哪一层,就用Component&lt;br&gt;这几个注解互相混用其实也可以,但是不推荐&lt;/p&gt;
&lt;h2 id=&#34;2注解方式依赖注入DI&#34;&gt;&lt;a href=&#34;#2注解方式依赖注入DI&#34; class=&#34;headerlink&#34; title=&#34;2注解方式依赖注入DI&#34;&gt;&lt;/a&gt;2注解方式依赖注入DI&lt;/h2&gt;&lt;p&gt;@Autowired   根据属性数据类型自动装配&lt;br&gt;@Qualifier      根据属性名称注入依赖&lt;br&gt;@Resources   可以根据类型,也可以根据名称注入&lt;br&gt;@Value           注入普通数据类型(8+String)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// 详解 
/*
    * @Autowired
    * 根据类型到容器中去寻找对应的对象,找到后给当前属性赋值
    * 不需要依赖 set方法
    * 属性类型可以是接口,会自动匹配对应的实现类对象
    * @Autowired配合 @Qualifier,可以通过名称指定注入的对象
    *
    * @Resource 如果不配置name 那么就是根据类型注入
    * @Resource(name=&amp;quot;userDaoImplB&amp;quot;) 配置name,就是根据名称注入
    *
    *
    * @Resource  是JDK中javax包的注解
    * @Autowired 和 @Qualifier 是spring中的注解
    *
    * @Value 可以个普通属性赋值
    * @Value 可以使用$&amp;#123;&amp;#125;这种表达式获取系统的变量值
    *        或者是.properties属性配置文件中的值
    *
    * */
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;代理&#34;&gt;&lt;a href=&#34;#代理&#34; class=&#34;headerlink&#34; title=&#34;代理&#34;&gt;&lt;/a&gt;代理&lt;/h1&gt;&lt;p&gt;&lt;em&gt;概念&lt;/em&gt;：在使用对象的时候，不直接使用用一个代理对象代理他，这样可以在目标&lt;strong&gt;对象基础上增强额外的功能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;分类&lt;/em&gt;：静态代理，动态代理&lt;/p&gt;
&lt;h2 id=&#34;静态代理&#34;&gt;&lt;a href=&#34;#静态代理&#34; class=&#34;headerlink&#34; title=&#34;静态代理&#34;&gt;&lt;/a&gt;静态代理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;​	静态代理中&lt;strong&gt;代理类&lt;/strong&gt;与&lt;strong&gt;被代理类&lt;/strong&gt;都&lt;strong&gt;需要实现同一个接口&lt;/strong&gt;，这就说明我们的&lt;strong&gt;一个静态代理类只能代理一个类&lt;/strong&gt;，并且还要事先知道我们&lt;strong&gt;要代理哪个类才能写代理类&lt;/strong&gt;，如果我们&lt;strong&gt;有其他类还想使用代理那就必须再写一个代理类&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	然而在实际开发中我们是可能是有非常多的类是需要被代理的，并且事先我们可能并不知道我们要代理哪个类。所以如果继续使用静态代理反而会增加许多的工作量，并且&lt;strong&gt;效率低下&lt;/strong&gt;，&lt;strong&gt;代码复用率也不好&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test1 &amp;#123;
    public static void main(String[] args) &amp;#123;
        /**
        lawyer律师代替Person张三打官司，不用张三直接打，可以更加清楚
        */
        Person person =new Person(&amp;quot;张三&amp;quot;);
        Court court=new Lawyer(person);
        court.doCourt();
    &amp;#125;
&amp;#125;
// 接口
interface Court&amp;#123;
    void doCourt();
&amp;#125;
// 代理类
class Lawyer implements Court&amp;#123;
    private Person person;
    public Lawyer(Person person) &amp;#123;
        this.person = person;
    &amp;#125;
    @Override
    public void doCourt() &amp;#123;
        System.out.println(&amp;quot;律师取证:视频证明张三当时正在旅游,不在案发现场&amp;quot;);
        System.out.println(&amp;quot;律师总结:张三不可能去杀人&amp;quot;);
        person.doCourt();
    &amp;#125;
&amp;#125;
// 被代理的类
class Person implements Court&amp;#123;
    private String name;
    public Person(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    @Override
    public void doCourt() &amp;#123;
        System.out.println(name+&amp;quot;说:我没有杀人&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;动态代理&#34;&gt;&lt;a href=&#34;#动态代理&#34; class=&#34;headerlink&#34; title=&#34;动态代理&#34;&gt;&lt;/a&gt;动态代理&lt;/h2&gt;&lt;p&gt;&lt;em&gt;概念&lt;/em&gt;：动态代理可以&lt;strong&gt;针对&lt;/strong&gt;于一些&lt;strong&gt;不特定的类&lt;/strong&gt;或者一些&lt;strong&gt;不特定的方法&lt;/strong&gt;进行代理,我们可以在程序运行时动态的变化代理的规则，&lt;strong&gt;代理类在程序运行时才创建的代理模式成为动态代理&lt;/strong&gt;。这种情况下，代理类并不是在Java代码中定义好的，而是在程序运行时根据我们的在Java代码中的“指示”动态生成的&lt;/p&gt;
&lt;p&gt;实现方法：JDK自带的Proxy、CJlib&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Proxy&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;JDK动态代理&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;面向接口&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;&lt;strong&gt;cglib&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;&lt;strong&gt;第三方动态代理&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;&lt;strong&gt;面向父类&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;实现案例：&lt;/p&gt;
&lt;p&gt;Proxy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ProxyTest1 &amp;#123;

    public static void main(String[] args) &amp;#123;
        Dinner dinner = new Person(&amp;quot;张三&amp;quot;);
        ClassLoader loader = dinner.getClass().getClassLoader();
        Class&amp;lt;?&amp;gt;[] interfaces = dinner.getClass().getInterfaces();
        /*
           Object proxy, 代理对象
           Method method,被代理的方法
           Object[] args,被代理方法运行时的实参
         */
        /*InvocationHandler invocationHandler = (proxy,
                                              method,
                                              params)-&amp;gt;&amp;#123;
            System.out.println(&amp;quot;invoked 方法执行&amp;quot;);

            return null;
        &amp;#125;;*/
        InvocationHandler invocationHandler = new InvocationHandler() &amp;#123;
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &amp;#123;
                Object res = new Object();

                if (method.getName().equals(&amp;quot;eat&amp;quot;)) &amp;#123;
                    System.out.println(&amp;quot;饭前洗手&amp;quot;);
                    // 让原有的eat的方法去运行
                    res =method.invoke(dinner, args);
                    System.out.println(&amp;quot;饭后刷碗&amp;quot;);
                &amp;#125;
                else&amp;#123;
                    // 如果是其他方法,那么正常执行就可以了
                    res =method.invoke(dinner, args);
                &amp;#125;
                return res;
            &amp;#125;
        &amp;#125;;

        /**
         * 动态代理
         * 需要三次个参数 loader代理类，增强的对象，
         *              interfaces 实现的接口，
         *              增强方法 invoke()
         */
        Dinner dinner1 = (Dinner) Proxy.newProxyInstance(loader,interfaces,invocationHandler);
        dinner1.eat(&amp;quot;包子&amp;quot;);
    &amp;#125;
&amp;#125;
interface Dinner&amp;#123;
    void eat(String foodName);
    void drink();
&amp;#125;

class Person implements Dinner&amp;#123;
    private String name;
    public Person(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    @Override
    public void eat(String foodName) &amp;#123;
        System.out.println(name+&amp;quot;正在吃&amp;quot;+foodName);
    &amp;#125;
    @Override
    public void drink( ) &amp;#123;
        System.out.println(name+&amp;quot;正在喝茶&amp;quot;);
    &amp;#125;
&amp;#125;
class Student implements Dinner&amp;#123;
    private String name;
    public Student(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    @Override
    public void eat(String foodName) &amp;#123;
        System.out.println(name+&amp;quot;正在食堂吃&amp;quot;+foodName);
    &amp;#125;
    @Override
    public void drink( ) &amp;#123;
        System.out.println(name+&amp;quot;正在喝可乐&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cglib&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ProxyTest2 &amp;#123;

    public static void main(String[] args) &amp;#123;
        // 获取一个Person的代理对象
        Person person = new Person();
        // 1 获得一个Enhancer对象
        Enhancer enhancer = new Enhancer();
        // 2 设置父类字节码
        enhancer.setSuperclass(Person.class);
        // 3 获取MethodIntercepter对象 用于定义增强规则
        MethodInterceptor methodInterceptor = new MethodInterceptor() &amp;#123;
            /*
            * Object o 生成之后的代理对象 personProxy
            * Method method 父类中原本要执行的方法  Person&amp;gt;&amp;gt;&amp;gt; eat()要增强的方法（还没有被增强，父类方法）
            * Object[] objects 实际传入的参数
            * MethodProxy methodProxy 子类中重写父类的方法 personProxy &amp;gt;&amp;gt;&amp;gt; eat()代理对象增强的方法（增强的方法，子类对象）
            * */
            @Override
            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &amp;#123;
                Object res = null;

                if (method.getName().equals(&amp;quot;eat&amp;quot;)) &amp;#123;
                    System.out.println(&amp;quot;饭前洗手&amp;quot;);
                    res=methodProxy.invokeSuper(o,objects);
                    System.out.println(&amp;quot;饭后刷碗&amp;quot;);
                &amp;#125;else&amp;#123;
                    // 如果是其他方法 不增强运行
                    res=methodProxy.invokeSuper(o,objects); // 子类对象方法在执行,默认会调用父类对应被重写的方法
                &amp;#125;
                return res;
            &amp;#125;
        &amp;#125;;
        // 4 设置methodInterceptor
        enhancer.setCallback(methodInterceptor);
        // 5 获得代理对象
        Person personProxy = (Person)enhancer.create();
        // 6 使用代理对象完成功能
        personProxy.eat(&amp;quot;包子&amp;quot;);
    &amp;#125;
&amp;#125;

class Person  &amp;#123;
    public Person( ) &amp;#123;
    &amp;#125;
    public void eat(String foodName) &amp;#123;
        System.out.println(&amp;quot;张三正在吃&amp;quot;+foodName);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;不修改原有代码&lt;/strong&gt;的 或者没有办法修改原有代码的情况下  &lt;strong&gt;增强对象功能&lt;/strong&gt;  &lt;strong&gt;使用代理对象&lt;/strong&gt; 代替原来的对象去完成功能进而达到拓展功能的目的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JDK Proxy 动态代理面向接口的动态代理&lt;/strong&gt;  一定&lt;strong&gt;要有接口&lt;/strong&gt;和&lt;strong&gt;实现类&lt;/strong&gt;的存在 代理对象&lt;strong&gt;增强的是实现类&lt;/strong&gt; 在实现接口的方法重写的方法   生成的代理对象只能转换成 接口的不能转换成 被代理类代理对象只能增强接口中定义的方法  &lt;strong&gt;实现类中其他和接口无关的方法是无法增强的代理对象只能读取到接口中方法上的注解 不能读取到实现类方法上的注解&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;AOP&#34;&gt;&lt;a href=&#34;#AOP&#34; class=&#34;headerlink&#34; title=&#34;AOP&#34;&gt;&lt;/a&gt;AOP&lt;/h1&gt;&lt;p&gt;全名：Aspect Oriented Programmings，面向切面编程，通过&lt;strong&gt;预编译&lt;/strong&gt;和&lt;strong&gt;运行时生成动态代理&lt;/strong&gt;实现程序功能的统一维护的一种技术。AOP是OOP的延续，是Spring框架的一个重要内容，是函数式编程的一种衍生范式。利用AOP可以对业务逻辑的各个部分进行隔离，从而使各个部分的耦合性降低，提高程序的可重用行，提高开发效率。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;AOP切面编程一般可以帮助我们在不修改现有代码的情况下,对程序的功能进行拓展,往往用于实现 日志处理,权限控制,性能检测,事务控制等&lt;br&gt;AOP实现的原理就是动态代理,在有接口的情况下,使用JDK动态代理,在没有接口的情况下使用cglib动态代理&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring/image-20220716162550876.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;AOP中的术语辨析&lt;/p&gt;
&lt;p&gt;1 连接点 Joint point：类里面那些可以被增强的方法&lt;/p&gt;
&lt;p&gt;2 切入点 Pointcu：实际被增强的方法,称之为切入点&lt;/p&gt;
&lt;p&gt;3 通知 Advice:：实际增强的逻辑部分称为通知 (增加的功能)&lt;/p&gt;
&lt;p&gt;4 目标对象 Target：被增强功能的对象(被代理的对象)&lt;/p&gt;
&lt;p&gt;5 切面Aspect： 表现为功能相关的一些advice方法放在一起声明成的一个Java类&lt;/p&gt;
&lt;p&gt;6 织入 Weaving：创建代理对象并实现功能增强的声明并运行过程&lt;/p&gt;
&lt;p&gt;具体操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/*
事先准备 dao 以及他的实现类
我们直接编写 Aspect 层的代码
*/

@Component
@Aspect
public class DaoAspect &amp;#123;
    /*
    切入点表达式: 通过一个表达式来确定AOP要增强的是哪个或者那些方法
    语法结构:execution([权限修饰符][返回值类型][类的全路径名][方法名](参数 列表) )
    execution(* com.msb.dao.UserDaoImpl.add(..))   //指定切点为UserDaoImpl.add方法
    execution(* com.msb.dao.UserDaoImpl.*(..))     //指定切点为UserDaoImpl.所有的方法
    execution(* com.msb.dao.*.*(..))               //指定切点为dao包下所有的类中的所有的方法
    execution(* com.msb.dao.*.add(..))             // 指定切点为dao包下所有的类中的add的方法
    execution(* com.msb.dao.*.add*(..))            // 指定切点为dao包下所有的类中的add开头的方法
    *  */
    //定义公共切点
    @Pointcut(&amp;quot;execution( * com.zjj.aop.dao.*.add*(..) )&amp;quot;)
    public void addPointCut()&amp;#123;

    &amp;#125;

    /*
     * 前置通知: 切点方法执行之前先执行的功能
     * 参数列表可以用JoinPoint接收切点对象
     * 可以获取方法执行的参数
     * */
    @Before(&amp;quot;addPointCut()&amp;quot;) // 这里用了公共切点，不然又要写一次公共切点上的 @PointCut()
    public void methodBefore(JoinPoint joinPoint) &amp;#123;
        System.out.println(&amp;quot;Before invoked&amp;quot;);
    &amp;#125;


    /*
     * 后置通知:方法执行之后要增强的功能
     * 无论切点方法是否出现异常都会执行的方法
     * 参数列表可以用JoinPoint接收切点对象
     * */
    @After(&amp;quot;addPointCut()&amp;quot;)
    public void methodAfter(JoinPoint joinPoint)&amp;#123;
        System.out.println(&amp;quot;After invoked&amp;quot;);
    &amp;#125;

    /*
     * 返回通知:切点方法正常运行结束后增强的功能
     * 如果方法运行过程中出现异常,则该功能不运行
     * 参数列表可以用 JoinPoint joinPoint接收切点对象
     * 可以用Object res接收方法返回值,需要用returning指定返回值名称
     * */
    @AfterReturning( value = &amp;quot;addPointCut()&amp;quot;,returning = &amp;quot;res&amp;quot;)
    public void methodAfterReturning(JoinPoint joinPoint,Object res)&amp;#123;
        System.out.println(&amp;quot;AfterReturning invoked&amp;quot;);
    &amp;#125;
    /*
     * 异常通知:切点方法出现异常时运行的增强功能
     * 如果方法运行没有出现异常,则该功能不运行
     * 参数列表可以用Exception ex接收异常对象 需要通过throwing指定异常名称
     * */
    @AfterThrowing( value = &amp;quot;addPointCut()&amp;quot;,throwing = &amp;quot;ex&amp;quot;)
    public void methodAfterThrowing(Exception ex)&amp;#123;
        System.out.println(&amp;quot;AfterThrowing invoked&amp;quot;);
    &amp;#125;

    /*环绕通知:在切点方法之前和之后都进行功能的增强
     * 需要在通知中定义方法执行的位置,并在执行位置之前和之后自定义增强的功能
     * 方法列表可以通过ProceedingJoinPoint获取执行的切点
     * 通过proceedingJoinPoint.proceed()方法控制切点方法的执行位置
     * proceedingJoinPoint.proceed()方法会将切点方法的返回值获取到,并交给我们,可以做后续处理
     * 我们在环绕通知的最后需要将切点方法的返回值继续向上返回,否则切点方法在执行时接收不到返回值
     * */
    @Around(&amp;quot;addPointCut()&amp;quot;)
    public Object methodAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &amp;#123;
        System.out.println(&amp;quot;aroundA invoked&amp;quot;);
        Object proceed = proceedingJoinPoint.proceed();
        System.out.println(&amp;quot;aroundB invoked&amp;quot;);
        return proceed;
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootTest(classes = MyAOPSpringApplication.class)
public class SpringAOPTests &amp;#123;
    @Resource
    ApplicationContext context;
    @Test
    public void t1() &amp;#123;
        UserService userService = context.getBean(UserService.class);
        userService.addUser(10, &amp;quot;小明&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;aroundA invoked&lt;/p&gt;
&lt;p&gt;Before invoked&lt;/p&gt;
&lt;p&gt;userDao add … …&lt;/p&gt;
&lt;p&gt;AfterReturning invoked&lt;/p&gt;
&lt;p&gt;After invoked&lt;/p&gt;
&lt;p&gt;aroundB invoked&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试题&lt;/p&gt;
&lt;p&gt;如果在不使用框架的前提下你要做权限的校验你会怎么做?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我会在要鉴权的方法加入环绕通知，在请求到方法前先进行一次查找，一般这些数据我们会在redis中也会存储一个，第一次查过来我们去redis中找，找到直接让他操作并且在之后提交事务，但是没找到的时候我们先让他去操作，但是不提交事务，同时去数据库中查找他的信息，找到后添加redis，提交事务，没找到就回滚事务即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;事务&#34;&gt;&lt;a href=&#34;#事务&#34; class=&#34;headerlink&#34; title=&#34;事务&#34;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;h2 id=&#34;事务的概念&#34;&gt;&lt;a href=&#34;#事务的概念&#34; class=&#34;headerlink&#34; title=&#34;事务的概念&#34;&gt;&lt;/a&gt;事务的概念&lt;/h2&gt;&lt;p&gt;事务（Transaction）指的是一个操作序列，该操作序列中的多个操作要么都做，要么都不做，是一个不可分割的工作单位，是数据库环境中的逻辑工作单位，由DBMS中的事务管理子系统负责事务的处理。&lt;/p&gt;
&lt;p&gt;目前常用的存储引擎有InnoDB（MySQL5.5以后默认的存储引擎）和MyISAM（MySQL5.5之前默认的存储引擎），其中InnoDB支持事务处理机制，而MyISAM不支持。&lt;/p&gt;
&lt;h2 id=&#34;事务的特性&#34;&gt;&lt;a href=&#34;#事务的特性&#34; class=&#34;headerlink&#34; title=&#34;事务的特性&#34;&gt;&lt;/a&gt;事务的特性&lt;/h2&gt;&lt;p&gt;事务处理可以确保除非事务性序列内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的序列，可以简化错误恢复并使应用程序更加可靠。&lt;/p&gt;
&lt;p&gt;但并不是所有的操作序列都可以称为事务，这是因为一个操作序列要成为事务，必须满足事务的原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。这四个特性简称为ACID特性。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring/image-20220716210341261.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;原子性
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原子是自然界最小的颗粒，具有不可再分的特性。事务中的所有操作可以看做一个原子，事务是应用中不可再分的最小的逻辑执行体。&lt;/p&gt;
&lt;p&gt;使用事务对数据进行修改的操作序列，要么全部执行，要么全不执行。通常，某个事务中的操作都具有共同的目标，并且是相互依赖的。如果数据库系统只执行这些操作中的一部分，则可能会破坏事务的总体目标，而原子性消除了系统只处理部分操作的可能性。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; 一致性
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一致性是指事务执行的结果必须使数据库从一个一致性状态，变到另一个一致性状态。当数据库中只包含事务成功提交的结果时，数据库处于一致性状态。一致性是通过原子性来保证的。&lt;/p&gt;
&lt;p&gt;例如：在转账时，只有保证转出和转入的金额一致才能构成事务。也就是说事务发生前和发生后，数据的总额依然匹配。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; 隔离性
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;隔离性是指各个事务的执行互不干扰，任意一个事务的内部操作对其他并发的事务，都是隔离的。也就是说：并发执行的事务之间既不能看到对方的中间状态，也不能相互影响。&lt;/p&gt;
&lt;p&gt;例如：在转账时，只有当A账户中的转出和B账户中转入操作都执行成功后才能看到A账户中的金额减少以及B账户中的金额增多。并且其他的事务对于转账操作的事务是不能产生任何影响的。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;持久性
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;持久性指事务一旦提交，对数据所做的任何改变，都要记录到永久存储器中，通常是保存进物理数据库，即使数据库出现故障，提交的数据也应该能够恢复。但如果是由于外部原因导致的数据库故障，如硬盘被损坏，那么之前提交的数据则有可能会丢失。&lt;/p&gt;
&lt;h2 id=&#34;事务的并发问题&#34;&gt;&lt;a href=&#34;#事务的并发问题&#34; class=&#34;headerlink&#34; title=&#34;事务的并发问题&#34;&gt;&lt;/a&gt;事务的并发问题&lt;/h2&gt;&lt;p&gt;脏读（Dirty read）&lt;/p&gt;
&lt;p&gt;当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring/image-20220716210633569.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;不可重复读&lt;/p&gt;
&lt;p&gt;（Unrepeatableread）: 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring/image-20220716210640447.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;幻读&lt;/p&gt;
&lt;p&gt;（Phantom read）: 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring/image-20220716210646452.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;不可重复度和幻读区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不可重复读的重点是修改，幻读的重点在于新增或者删除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为 1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导 致A再读自己的工资时工资变为 2000；这就是不可重复读。&lt;/p&gt;
&lt;p&gt;例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读&lt;/p&gt;
&lt;h2 id=&#34;事务的隔离级别&#34;&gt;&lt;a href=&#34;#事务的隔离级别&#34; class=&#34;headerlink&#34; title=&#34;事务的隔离级别&#34;&gt;&lt;/a&gt;事务的隔离级别&lt;/h2&gt;&lt;p&gt;事务的隔离级别用于决定如何控制并发用户读写数据的操作。数据库是允许多用户并发访问的，如果多个用户同时开启事务并对同一数据进行读写操作的话，有可能会出现脏读、不可重复读和幻读问题，所以MySQL中提供了四种隔离级别来解决上述问题。&lt;/p&gt;
&lt;p&gt;事务的隔离级别从低到高依次为READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ以及SERIALIZABLE，隔离级别越低，越能支持高并发的数据库操作。&lt;/p&gt;
&lt;p&gt;​                                   &lt;/p&gt;
&lt;h2 id=&#34;spring中可以使用如下方式实现事务的控制&#34;&gt;&lt;a href=&#34;#spring中可以使用如下方式实现事务的控制&#34; class=&#34;headerlink&#34; title=&#34;spring中可以使用如下方式实现事务的控制&#34;&gt;&lt;/a&gt;spring中可以使用如下方式实现事务的控制&lt;/h2&gt;&lt;p&gt;1 编程式(不推荐)&lt;/p&gt;
&lt;p&gt;2 声明式(掌握)&lt;/p&gt;
&lt;p&gt;​	1) 注解(简单,必会)&lt;/p&gt;
&lt;p&gt;​	2) XML配置(繁琐,了解)&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;Spring声明式事务的实现方式,底层就是AOP,AOP的底层就是动态代理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring事务管理相关的API&lt;/p&gt;
&lt;p&gt;事务管理器接口: PlatformTransactionManager  针对不同的框架,提供了不同的实现类&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring/image-20220716210813110.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;注解方式实现事务控制&lt;br&gt;在applicationContext.xml配置事务相关的配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
       xmlns:c=&amp;quot;http://www.springframework.org/schema/c&amp;quot;
       xmlns:util=&amp;quot;http://www.springframework.org/schema/util&amp;quot;
       xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
       xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot;
       xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot;
       xsi:schemaLocation=&amp;quot;
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
&amp;quot;&amp;gt;
    &amp;lt;!--spring 注解扫描--&amp;gt;
    &amp;lt;context:component-scan base-package=&amp;quot;com.msb&amp;quot;/&amp;gt;
    &amp;lt;!--读取jdbc配置文件--&amp;gt;
    &amp;lt;context:property-placeholder location=&amp;quot;classpath:jdbc.properties&amp;quot;/&amp;gt;
    &amp;lt;!--配置德鲁伊连接池--&amp;gt;
    &amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;com.alibaba.druid.pool.DruidDataSource&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;$&amp;#123;jdbc_username&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;$&amp;#123;jdbc_password&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;$&amp;#123;jdbc_url&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;$&amp;#123;jdbc_driver&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--配置JDBCTemplate对象,并向里面注入DataSource--&amp;gt;
    &amp;lt;bean id=&amp;quot;jdbcTemplate&amp;quot; class=&amp;quot;org.springframework.jdbc.core.JdbcTemplate&amp;quot;&amp;gt;
        &amp;lt;!--通过set方法注入连接池--&amp;gt;
        &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--配置一个事务管理器--&amp;gt;
    &amp;lt;bean id=&amp;quot;transactionManager&amp;quot; class=&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&amp;gt;
        &amp;lt;!--将数据源注入事务管理器--&amp;gt;
        &amp;lt;property name=&amp;quot;dataSource&amp;quot;  ref=&amp;quot;dataSource&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--开启事务注解--&amp;gt;
    &amp;lt;tx:annotation-driven transaction-manager=&amp;quot;transactionManager&amp;quot;/&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Service
//@Transactional //加在类上,代表类中的所有方法都添加了事务控制
public class AccountServiceImpl implements AccountService &amp;#123;
    @Autowired
    private AccountDao accountDao;
    @Override
    @Transactional// 放在方法上,就是仅仅对当前方法增加了事务控制
    public int transMoney(int from, int to, int money) &amp;#123;
        int rows=0;
        rows+=accountDao.transMoney(from, 0 - money);
        int i =1/0;
        rows+=accountDao.transMoney(to, money);
        return rows;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次测试,就算是service方法运行出现异常,自动会回滚,如果没有,那么自动提交&lt;/p&gt;
&lt;p&gt;@Transactional 注解的一些参数和参数的含义&lt;br&gt;@Transactional(propagation &amp;#x3D; Propagation.REQUIRED,isolation &amp;#x3D; Isolation.READ_UNCOMMITTED,readOnly &amp;#x3D; true,rollbackFor &amp;#x3D; ClassCastException.class,noRollbackFor &amp;#x3D; NullPointerException.class,timeout &amp;#x3D; 10)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Target(&amp;#123;ElementType.TYPE, ElementType.METHOD&amp;#125;)
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Transactional &amp;#123;
    @AliasFor(&amp;quot;transactionManager&amp;quot;)
    String value() default &amp;quot;&amp;quot;;
    @AliasFor(&amp;quot;value&amp;quot;)
    String transactionManager() default &amp;quot;&amp;quot;;
    String[] label() default &amp;#123;&amp;#125;;
    Propagation propagation() default Propagation.REQUIRED;
    Isolation isolation() default Isolation.DEFAULT;
    int timeout() default -1;
    String timeoutString() default &amp;quot;&amp;quot;;
    boolean readOnly() default false;
    Class&amp;lt;? extends Throwable&amp;gt;[] rollbackFor() default &amp;#123;&amp;#125;;
    String[] rollbackForClassName() default &amp;#123;&amp;#125;;
    Class&amp;lt;? extends Throwable&amp;gt;[] noRollbackFor() default &amp;#123;&amp;#125;;
    String[] noRollbackForClassName() default &amp;#123;&amp;#125;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;propagation-事务的传播行为-面试&#34;&gt;&lt;a href=&#34;#propagation-事务的传播行为-面试&#34; class=&#34;headerlink&#34; title=&#34;propagation  事务的传播行为(面试)&#34;&gt;&lt;/a&gt;propagation  事务的传播行为(面试)&lt;/h2&gt;&lt;p&gt;多事务方法之间调用,事务是如何管理的&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;事务传播行为类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_REQUIRED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择(默认)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_SUPPORTS&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;支持当前事务，如果当前没有事务，就以非事务方式执行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_MANDATORY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;使用当前的事务，如果当前没有事务，就抛出异常。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_REQUIRES_NEW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;新建事务，如果当前存在事务，把当前事务挂起。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_NOT_SUPPORTED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_NEVER&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;以非事务方式执行，如果当前存在事务，则抛出异常。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_NESTED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如果service层  add方法调用了 addDept和addEmp两个方法&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;em&gt;&lt;strong&gt;PROPAGATION_REQUIRED&lt;/strong&gt;&lt;/em&gt;&amp;#x3D;&amp;#x3D;&lt;br&gt;如果add方法有事务,那么addDept和addEmp就加入到add方法里的事务&lt;br&gt;如果add方法没有事务,那么就新建一个事务,将addDept和addEmp加入到这个新的事务中&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;em&gt;&lt;strong&gt;PROPAGATION_REQUIRES_NEW&lt;/strong&gt;&lt;/em&gt;&amp;#x3D;&amp;#x3D;&lt;br&gt;无论add是否有事务,都建立一个新的事务,所有的方法都加入到新的事务中,add原来的事务就不用了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;isolation 事务的隔离级别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;DEFAULT （默认）&lt;br&gt;这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应。&lt;br&gt;MySQL默认REPEATABLE_READ&lt;br&gt;Oracle默认READ_COMMITTED&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;READ_UNCOMMITTED （读未提交）&lt;br&gt;这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;READ_COMMITTED （读已提交）&lt;br&gt;保证一个事务修改的数据提交后才能被另外一个事务读取，另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;REPEATABLE_READ （可重复读）&lt;br&gt;这种事务隔离级别可以防止脏读、不可重复读，但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了不可重复读。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SERIALIZABLE（串行化）&lt;br&gt;这是花费最高代价但是最可靠的事务隔离级别，事务被处理为顺序执行。除了防止脏读、不可重复读外，还避免了幻像读。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;timeout 超时时间&lt;/em&gt;&lt;br&gt;事务一定要在多长时间之内提交,如果不提交就会回滚&lt;/p&gt;
&lt;p&gt;&lt;em&gt;readOnly 只读事务&lt;/em&gt;&lt;br&gt;事务是否只能读取数据库的数据,如果为true,则不允许进行增删改&lt;/p&gt;
&lt;p&gt;&lt;em&gt;rollbackFor 指定发生回滚的异常&lt;/em&gt;&lt;br&gt;当方法发生哪些异常时才会回滚&lt;/p&gt;
&lt;p&gt;&lt;em&gt;noRollbackFor 指定不发生回滚的异常&lt;/em&gt;&lt;br&gt;当方法发生哪些异常时,不会回滚&lt;/p&gt;
&lt;h1 id=&#34;面试题&#34;&gt;&lt;a href=&#34;#面试题&#34; class=&#34;headerlink&#34; title=&#34;面试题&#34;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;h2 id=&#34;spring的循环依赖是什么？怎么解决&#34;&gt;&lt;a href=&#34;#spring的循环依赖是什么？怎么解决&#34; class=&#34;headerlink&#34; title=&#34;spring的循环依赖是什么？怎么解决?&#34;&gt;&lt;/a&gt;spring的循环依赖是什么？怎么解决?&lt;/h2&gt;&lt;p&gt;循环依赖：&lt;/p&gt;
&lt;p&gt;​	指循环引用，是两个或多个Bean之间相互持有对方的引用&lt;/p&gt;
&lt;p&gt;三种依赖方式：&lt;/p&gt;
&lt;p&gt;​	1、A依赖B ,B依赖A 	   					——&amp;gt; 直接依赖&lt;/p&gt;
&lt;p&gt;​	2、A依赖C，C依赖B，B依赖A	   ——&amp;gt; 间接依赖&lt;/p&gt;
&lt;p&gt;​	3、A依赖A 											——&amp;gt; 自我依赖&lt;/p&gt;
&lt;p&gt;为什么会产生这个问题呢？&lt;/p&gt;
&lt;p&gt;​	因为我们的 Spring 其中一大特点就是Spring IOC 、DI，Spring会自动帮我们创建对象和对对象赋值，而一旦产生循环依赖问题就会导致我们初始化的时候陷入阻塞状态，最终导致Spring容器都无法启动&lt;/p&gt;
&lt;p&gt;解决办法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	使用缓存，缓存就是将所有缓存好的Bean，全部放在一个容器中缓存起来，并且呢，将已经完全实例化，但是没有完成赋值的Bean标记起来。然后呢，再Bean第一次实例化完成后，在扫描一次容器将没有完成赋值的Bean的属性完成赋值就可以了。(@Autowriter的对象)&lt;/p&gt;
&lt;p&gt;目前循环依赖只在属性&amp;#x3D;&amp;#x3D;set注入&amp;#x3D;&amp;#x3D;且&amp;#x3D;&amp;#x3D;单例&amp;#x3D;&amp;#x3D;的情况下才能解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解决循环依赖问题一定要使用二级缓存吗？&#34;&gt;&lt;a href=&#34;#解决循环依赖问题一定要使用二级缓存吗？&#34; class=&#34;headerlink&#34; title=&#34;解决循环依赖问题一定要使用二级缓存吗？&#34;&gt;&lt;/a&gt;解决循环依赖问题一定要使用二级缓存吗？&lt;/h2&gt;&lt;p&gt;不一定，但是为什么又要设计二级缓存？假设我们只有一个缓存容器，并且缓存是直接开放给用户可以调用的，未完成赋值的Bean和已完成赋值的Bean全部放入一个容器的话，调用者就有可能会拿到未赋值的Bean，这对于用户来说是没有意义的，可能会造成空指针异常。所以基于这样的考虑，Spring将能够直接提供给用户使用的Bean放在了一级缓存中，这样的Bean称之为终态Bean；将已经完成初始化，但还不能提供给用户使用的Bean放在了二级缓存，称之为临时Bean。&lt;/p&gt;
&lt;h2 id=&#34;为什么在二级缓存的基础上还要创建三级缓存&#34;&gt;&lt;a href=&#34;#为什么在二级缓存的基础上还要创建三级缓存&#34; class=&#34;headerlink&#34; title=&#34;为什么在二级缓存的基础上还要创建三级缓存&#34;&gt;&lt;/a&gt;为什么在二级缓存的基础上还要创建三级缓存&lt;/h2&gt;&lt;p&gt;Spring中的有很多的注入的Bean需要去创建代理的Bean，但是不是所有的Bean都需要去实例化之后就立马要创建代理Bean，是要等到Bean初始化之后，完成之后才能够去创建代理Bean，因此的循环依赖呢Spring又不得不去提前的创建代理Bean，如果不创建代理Bean，注入原始的Bean就会产生错误。所以Spring设计三级缓存专门存储这些代理Bean，但是每个代理Bean的Bean的创建规则他又不一样，因此呢，Spring的三级缓存中并不是直接去保存代理Bean的引用，而是保存了创建代理Bean的Factory&lt;/p&gt;
&lt;h2 id=&#34;什么是-Spring-三级缓存？&#34;&gt;&lt;a href=&#34;#什么是-Spring-三级缓存？&#34; class=&#34;headerlink&#34; title=&#34;什么是 Spring 三级缓存？&#34;&gt;&lt;/a&gt;什么是 Spring 三级缓存？&lt;/h2&gt;&lt;p&gt;singletonObjects   		 		&amp;lt;ConCurrentHashMap&amp;lt;&amp;gt; 	  ——&amp;gt;   	 一级缓存&lt;/p&gt;
&lt;p&gt;earlySingletonObjects	 	&amp;lt;HashMap&amp;lt;&amp;gt;				  			——&amp;gt;   	 二级缓存&lt;/p&gt;
&lt;p&gt;singletonFactories				&amp;lt;HashMap&amp;lt;&amp;gt;						 	 ——&amp;gt;   	 三级缓存&lt;/p&gt;
&lt;p&gt;一级缓存就是终态缓存；二级缓存就是临时缓存；三级缓存就是代理工厂的缓存&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring/image-20220821162504894.png&#34; class=&#34;&#34;&gt;




&lt;h2 id=&#34;什么情况下循环依赖无法解决？&#34;&gt;&lt;a href=&#34;#什么情况下循环依赖无法解决？&#34; class=&#34;headerlink&#34; title=&#34;什么情况下循环依赖无法解决？&#34;&gt;&lt;/a&gt;什么情况下循环依赖无法解决？&lt;/h2&gt;&lt;p&gt;1、多实例Bean 通过 set注入无法解决&lt;/p&gt;
&lt;p&gt;2、构造器注入注入的Bean无法解决&lt;/p&gt;
&lt;p&gt;3、单里的代理Bean通过 set注入无法解决&lt;/p&gt;
&lt;p&gt;4、设置@DependsOn注解的Bean注入无法解决&lt;/p&gt;
&lt;h2 id=&#34;后序补充……&#34;&gt;&lt;a href=&#34;#后序补充……&#34; class=&#34;headerlink&#34; title=&#34;后序补充…….&#34;&gt;&lt;/a&gt;后序补充…….&lt;/h2&gt;</content>
        <category term="框架" />
        <category term="Spring" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/SpringBoot/</id>
        <title>SpringBoot</title>
        <link rel="alternate" href="http://example.com/2022/10/07/SpringBoot/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&#34;原有Spring优缺点分析&#34;&gt;&lt;a href=&#34;#原有Spring优缺点分析&#34; class=&#34;headerlink&#34; title=&#34;原有Spring优缺点分析&#34;&gt;&lt;/a&gt;原有Spring优缺点分析&lt;/h2&gt;&lt;p&gt;优点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring是Java企业版（JAVAEE)开发的一种相对简单的方法，通过依赖注入和面向切面编程，用简单 的Java对象实现了EJB&amp;#x3D;&amp;#x3D;(Enterprise Java Beans技术的简称, 又被称为企业Java Beans)&amp;#x3D;&amp;#x3D;的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然Spring的组件&lt;strong&gt;代码是轻量级&lt;/strong&gt;的，但它的&lt;strong&gt;配置却是重量级&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖管理&lt;/strong&gt;也是一件耗时耗力的事情，会产生版本不兼容的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;SpringBoot概念简介&#34;&gt;&lt;a href=&#34;#SpringBoot概念简介&#34; class=&#34;headerlink&#34; title=&#34;SpringBoot概念简介&#34;&gt;&lt;/a&gt;SpringBoot概念简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Boot是Spring公司的一个顶级项目，和Spring Framework是一个级别的。&lt;br&gt;Spring Boot实际上是利用Spring Framework 4 自动配置特性完成。编写项目时不需要编写xml文件。发展到现在，Spring Boot已经具有很很大的生态圈，各种主流技术已经都提供了Spring Boot的启动器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;什么是启动器&#34;&gt;&lt;a href=&#34;#什么是启动器&#34; class=&#34;headerlink&#34; title=&#34;什么是启动器&#34;&gt;&lt;/a&gt;什么是启动器&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Spring框架在项目中作用是Spring整合各种其他技术，让其他技术使用更加方便。Spring Boot的启动器&lt;strong&gt;实际上就是一个依赖&lt;/strong&gt;。这个依赖中包含了整个这个技术的相关jar包，还包含了这个技术的自动配置，以前绝大多数XML配置都不需要配置了。当然了，启动器中自动配置无法实现所有内容的自动配置，在使用Spring Boot时还需要进行少量的配置（这个配置不是在xml中了，而是在properties或yml中即可）。如果是&lt;strong&gt;Spring自己封装的启动器&lt;/strong&gt;的artifact id&lt;strong&gt;名字满足：spring-boot-starter-&lt;em&gt;xxxx&lt;/em&gt;&lt;/strong&gt;，如果是&lt;strong&gt;第三方公司提供的启动&lt;/strong&gt;满足：&lt;strong&gt;&lt;em&gt;xxxx&lt;/em&gt;-spring-boot-starter&lt;/strong&gt;。以后每次使用Spring Boot整合其他技术时首先需要考虑导入启动器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Spring-Boot优点&#34;&gt;&lt;a href=&#34;#Spring-Boot优点&#34; class=&#34;headerlink&#34; title=&#34;Spring Boot优点&#34;&gt;&lt;/a&gt;Spring Boot优点&lt;/h1&gt;&lt;p&gt;①　使用Spring Boot可以创建独立的Spring应用程序&lt;br&gt;②　在Spring Boot中&lt;strong&gt;直接嵌入了Tomcat&lt;/strong&gt;、Jetty、Undertow等Web  容器，在使用SpringBoot做Web开发时&lt;strong&gt;不需要部署WAR文件&lt;/strong&gt;&lt;br&gt;③　通过提供自己的启动器(Starter)依赖，简化项目构建配置&lt;br&gt;④　尽量的自动配置Spring和第三方库&lt;br&gt;⑤　绝对没有代码生成，也不需要XML配置文件&lt;/p&gt;
&lt;h1 id=&#34;Spring-Boot的核心&#34;&gt;&lt;a href=&#34;#Spring-Boot的核心&#34; class=&#34;headerlink&#34; title=&#34;Spring Boot的核心&#34;&gt;&lt;/a&gt;Spring Boot的核心&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;起步依赖&lt;/strong&gt;：起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。 简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动配置&lt;/strong&gt; ：Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定 Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。&lt;/p&gt;
&lt;h1 id=&#34;启动原理分析&#34;&gt;&lt;a href=&#34;#启动原理分析&#34; class=&#34;headerlink&#34; title=&#34;启动原理分析&#34;&gt;&lt;/a&gt;启动原理分析&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/SpringBoot/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE.jpg&#34; class=&#34;&#34;&gt;




&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;static class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports &amp;#123;
    @Override
    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) &amp;#123;
        register(registry, new PackageImports(metadata).getPackageNames().toArray(new String[0]));
    &amp;#125;
    @Override
    public Set&amp;lt;Object&amp;gt; determineImports(AnnotationMetadata metadata) &amp;#123;
        return Collections.singleton(new PackageImports(metadata));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将配置类@SpringBootApplication标注的类所在包及下面所有子包里的所有组件扫描到spring容器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;protected List&amp;lt;String&amp;gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &amp;#123;
        List&amp;lt;String&amp;gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),
                getBeanClassLoader());
        Assert.notEmpty(configurations, &amp;quot;No auto configuration classes found in META-INF/spring.factories. If you &amp;quot;
                + &amp;quot;are using a custom packaging, make sure that file is correct.&amp;quot;);
        return configurations;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;通过 getCandidateConfigurations读取自带的配置文件，得到他们的全路径名，通过反射创建他们&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;异常处理和拦截器&#34;&gt;&lt;a href=&#34;#异常处理和拦截器&#34; class=&#34;headerlink&#34; title=&#34;异常处理和拦截器&#34;&gt;&lt;/a&gt;异常处理和拦截器&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;均与SpringMVC中处理一致&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;分页&#34;&gt;&lt;a href=&#34;#分页&#34; class=&#34;headerlink&#34; title=&#34;分页&#34;&gt;&lt;/a&gt;分页&lt;/h1&gt;&lt;p&gt;主要参数：&lt;/p&gt;
&lt;p&gt;当前页 、一页n个(每页的数量)、 总条数&lt;/p&gt;
&lt;h2 id=&#34;属性介绍&#34;&gt;&lt;a href=&#34;#属性介绍&#34; class=&#34;headerlink&#34; title=&#34;属性介绍&#34;&gt;&lt;/a&gt;属性介绍&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;属性名&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;默认值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;overflow&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;溢出总页数后是否进行处理&lt;br/&gt;(默认不处理,参见 &lt;code&gt;插件#continuePage&lt;/code&gt; 方法)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;maxLimit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Long&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;单页分页条数限制&lt;br/&gt;(默认无限制,参见 &lt;code&gt;插件#handlerLimit&lt;/code&gt; 方法)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;dbType&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DbType&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数据库类型&lt;br/&gt;(根据类型获取应使用的分页方言,参见 &lt;code&gt;插件#findIDialect&lt;/code&gt; 方法)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;dialect&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;IDialect&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;方言实现类&lt;br/&gt;(参见 &lt;code&gt;插件#findIDialect&lt;/code&gt; 方法)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;建议单一数据库类型的均设置 dbType&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @GetMapping(&amp;quot;/test&amp;quot;)
    public Response test()&amp;#123;
        Page&amp;lt;Produce&amp;gt; producePage = new Page&amp;lt;&amp;gt;(1,1);
        Page&amp;lt;Produce&amp;gt; page = produceService.page(producePage);
        System.out.println(producePage == page);
        List&amp;lt;Produce&amp;gt; records = page.getRecords();
        for (Produce record : records) &amp;#123;
            System.out.println(record);
        &amp;#125;
        return new Response&amp;lt;&amp;gt;(records, ResultEnum.SUCCESS);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/SpringBoot/656c18aaaf9ed11fee9b9f1576cc840f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;默认是会查询总条数，都有get、set方法，可以根据自己的需求设置（点开Page类看看）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringBoot/d0e0280ca8a9d46a4a41c4a1de89ab3c.png&#34; class=&#34;&#34;&gt;










&lt;h1 id=&#34;项目打包和部署&#34;&gt;&lt;a href=&#34;#项目打包和部署&#34; class=&#34;headerlink&#34; title=&#34;项目打包和部署&#34;&gt;&lt;/a&gt;项目打包和部署&lt;/h1&gt;&lt;h2 id=&#34;打包&#34;&gt;&lt;a href=&#34;#打包&#34; class=&#34;headerlink&#34; title=&#34;打包&#34;&gt;&lt;/a&gt;打包&lt;/h2&gt;&lt;p&gt;SpringBoot项目打包在linux服务器中运行:&lt;br&gt;    ①jar类型项目会打成jar包:&lt;br&gt;    jar类型项目使用SpringBoot打包插件打包时，会在打成的jar中内置一个tomcat的jar。所以我们可以使用jdk直接运行该jar项目可，jar项目中有一个功能，将功能代码放到其内置的tomcat中运行。我们直接使用浏览器访问即可。&lt;br&gt;    ②war类型项目会打成war包:&lt;br&gt;    在打包时需要将内置的tomcat插件排除，配置servlet的依赖。将war正常的放到tomcat服务器中运行即可。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringBoot/image-20220718170542347.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;部署&#34;&gt;&lt;a href=&#34;#部署&#34; class=&#34;headerlink&#34; title=&#34;部署&#34;&gt;&lt;/a&gt;部署&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注：这里是部署到Tomcat（war），jar直接编译启动&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;第一步：&#34;&gt;&lt;a href=&#34;#第一步：&#34; class=&#34;headerlink&#34; title=&#34;第一步：&#34;&gt;&lt;/a&gt;第一步：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;在部署到Tomcat 之前我们要将我们项目中的Tomcat(==它在Web中==)去掉，但是我们在项目中又有可能要使用他提供的jar包 HttpServlet 之类的，所以我们还需要再将它手动导入，但是他不需要他打包。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!--配置SpringBoot的web启动器--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
    &amp;lt;!--排除web启动中自动依赖的tomcat插件--&amp;gt;
    &amp;lt;exclusions&amp;gt;
        &amp;lt;exclusion&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
        &amp;lt;/exclusion&amp;gt;
    &amp;lt;/exclusions&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;!--
    手动依赖tomcat插件，但是表明项目打包时该依赖不会被打进去，目的主要是保证开发阶段本地SpringBoot
    项目可以正常运行
--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
    &amp;lt;!--打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。
        相当于compile，但是打包阶段做了exclude操作--&amp;gt;
    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;第二步：&#34;&gt;&lt;a href=&#34;#第二步：&#34; class=&#34;headerlink&#34; title=&#34;第二步：&#34;&gt;&lt;/a&gt;第二步：&lt;/h3&gt;&lt;p&gt;SpringBoot的&lt;strong&gt;启动类继承SpringBootServletInitializer&lt;/strong&gt;，并&lt;strong&gt;重写configure&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
public class MyApplication extends SpringBootServletInitializer &amp;#123;
    //重写配置方法
    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &amp;#123;
        return application.sources(MyApplication.class);
    &amp;#125;
    public static void main(String[] args) &amp;#123;
        //启动SpringBoot
        SpringApplication.run(MyApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用package命令打包项目，并将war包放到tomcat下的webapps下，启动tomcat即可。&lt;/p&gt;
&lt;h3 id=&#34;注：&#34;&gt;&lt;a href=&#34;#注：&#34; class=&#34;headerlink&#34; title=&#34;注：&#34;&gt;&lt;/a&gt;注：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;部署到tomcat之后我们的URL就会变化，tomcat会自动编译war包，我们的&lt;strong&gt;项目名和war包同名&lt;/strong&gt;，所以不想改变提前修改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口号也是tomcat的端口号&lt;/strong&gt;（tomcat&amp;#x2F;conf&amp;#x2F;server.xml）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;面试题&#34;&gt;&lt;a href=&#34;#面试题&#34; class=&#34;headerlink&#34; title=&#34;面试题&#34;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;h2 id=&#34;SpringBoot约定大于配置理解&#34;&gt;&lt;a href=&#34;#SpringBoot约定大于配置理解&#34; class=&#34;headerlink&#34; title=&#34;SpringBoot约定大于配置理解&#34;&gt;&lt;/a&gt;SpringBoot约定大于配置理解&lt;/h2&gt;&lt;p&gt;约定大于配置是一种开发原则，就是减少人为的配置，直接用默认的配置就能获得我们想要的结果。&lt;br&gt;　　SpringBoot的约定大于配置，按我的理解是：对比SpringMVC，需要在web.xml里面配置前端控制器，还需要在核心配置文件（*-servlet.xml）中配置视图解析器啥的，更要配置第三方的Tomcat服务器。而SpringBoot就不需要我们配置这些，他内嵌了Tomcat服务器，我们只需要在Maven配置文件（Pom.xml）里面导入SpringMVC所需要的依赖就可以了。&lt;br&gt;　　这就是SpringBoot的优势，在传统所需要配置的地方，SpringBoot都进行了约定（配置好了），开发人员能配置得更少，更直接地开发项目，写业务逻辑代码。&lt;br&gt;spring boot和maven的约定大于配置体现 点：&lt;br&gt;　　1.maven的目录文件结构&lt;br&gt;　　1）默认有resources文件夹,存放资源配置文件。src-main-resources,src-main-java&lt;br&gt;默认的编译生成的类都在targetwen。&lt;br&gt;　　2）默认有target文件夹，将生成class文件盒编程生成的jar存放在target文件夹下&lt;/p&gt;
&lt;p&gt;2.spring boot默认的配置文件必须是，也只能是application.命名的yml文件或者properties文件，且唯一&lt;/p&gt;
&lt;p&gt;1）spring boot默认只会去src-main-resources文件夹下去找application配置文件&lt;/p&gt;
&lt;p&gt;这个问题呢，我从四个方面来回答。&lt;/p&gt;
&lt;p&gt;首先，约定优于配置是一种软件设计的范式，它的核心思想，是减少软件开发人员对于配置项的。从而让开发人员更加聚焦在业务逻辑上&lt;/p&gt;
&lt;p&gt;第二个呢，Spring boot就是约定优于配置这一理念下的产物，它类似于spring框架下的一个脚手架，通过spring boot，我们可以快速开发基于spring生态下的应用程序。基于传统的spring框架开发web应用的时候，我们需要做很多和业务无关，并且只需要做一次的配置项，比如&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;管理架包的依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web.xml的维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;spring MVC中的一个叫 Dispatch-Servlet.x ml 配置项的一个维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用需要自己手动去部署到web容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三方组件集成到spring IOC容器中，我们需要做配置项的维护&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而在SpringBoot中，我们不再需要去做这些繁琐的配置，因为SpringBoot已经帮我们自动完成了，而完成这样一个动作的前提就是基于&amp;#x3D;&amp;#x3D;约定优于配置&amp;#x3D;&amp;#x3D;这样一个思想。&lt;/p&gt;
&lt;p&gt;最后呢，Spring boot约定优于配置的体现有很多，&lt;/p&gt;
&lt;p&gt;比如第一个spring boat start启动依赖，它能够帮助我们管理所有的jar包版本。&lt;/p&gt;
&lt;p&gt;第二个，如果当前的应用依赖了web这样一个 jar 包，那么spring boot会自动内置Tomcat，他们看着容器来去运行web应用，我们不再需要去单独进行应用部署。&lt;/p&gt;
&lt;p&gt;第三，Spring boot的自动装配机制的实现中，通过扫描约定路径下的spring.factory文件去进行识别配置类，从而去实现类的自动装载&lt;/p&gt;
&lt;p&gt;第四，Spring boot？默认会加载resource目录下的application.property文件。总的来说啊，约定优于配置呢，是一个比较常见的软件设计思想，它的核心本质都是为了去更加高效，以及更加便捷的去实现软件系统的开发和维护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自我总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	约定大于配置，不是说我们要设定啥，原来规定的是什么就不能改变，不是这个意思。他真正的意思是说当我们配置某个选项时，springboot会自动帮我们加载可能会与其相关的配置，就好比我们应用依赖了 web，那么spring boot会自动内置Tomcat，他们看着容器来去运行web应用，我们不再需要去单独进行应用部署。&lt;/p&gt;
&lt;p&gt;​	总的来说啊，约定优于配置呢，是一个比较常见的软件设计思想，它的核心本质都是为了去更加高效，以及更加便捷的去实现软件系统的开发和维护。&lt;/p&gt;
</content>
        <category term="框架" />
        <category term="Spring" />
        <category term="SpringBoot" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/SpringMVC/</id>
        <title>SpringMVC</title>
        <link rel="alternate" href="http://example.com/2022/10/07/SpringMVC/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220716212203883.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;M   model      模型层   DAO封装        &amp;gt;&amp;gt;&amp;gt; Mybatis&lt;br&gt;V    view         视图层   html css js  jsp&lt;br&gt;C    controller 控制层   Servlet封装    &amp;gt;&amp;gt;&amp;gt; springMVC &lt;/p&gt;
&lt;p&gt;SpringMVC是spring为展现层提供的基于MVC设计理念的优秀WEB框架,是目前最主流的MVC框架之一&lt;br&gt;SpringMVC通过一套注解,可以让普通的JAVA类成为contrllor控制器,无需继承Servlet,实现了控制层和Servlet之间的解耦&lt;br&gt;SpringMVC支持Rest风格的URL写法&lt;br&gt;SpringMVC采用了松耦合,可热插的主键结构,比其他的框架更具扩展性和灵活性&lt;/p&gt;
&lt;h1 id=&#34;执行流程&#34;&gt;&lt;a href=&#34;#执行流程&#34; class=&#34;headerlink&#34; title=&#34;执行流程&#34;&gt;&lt;/a&gt;执行流程&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717190437596.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717190445738.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;1DispatcherServlet：前端控制器&lt;br&gt;用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由 它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 HandlerMapping：处理器映射器&lt;/strong&gt;&lt;br&gt;HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等。&lt;/p&gt;
&lt;p&gt;3 Handler：处理器 (自己定义的Controller处理单元)&lt;br&gt;它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 HandlAdapter：处理器适配器&lt;/strong&gt;&lt;br&gt;通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行&lt;/p&gt;
&lt;p&gt;5 View Resolver：视图解析器&lt;br&gt;View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。&lt;/p&gt;
&lt;p&gt;6 View：视图&lt;br&gt;SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开 发具体的页面。&lt;/p&gt;
&lt;p&gt;7 &lt;span class=&#34;exturl&#34; data-url=&#34;bXZjOmFubm90YXRpb24tZHJpdmVu&#34;&gt;mvc:annotation-driven&lt;/span&gt;说明&lt;br&gt;在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。&lt;br&gt;使 用 &lt;span class=&#34;exturl&#34; data-url=&#34;bXZjOmFubm90YXRpb24tZHJpdmVu&#34;&gt;mvc:annotation-driven&lt;/span&gt; 自动加载 RequestMappingHandlerMapping （处理映射器） 和 RequestMappingHandlerAdapter （ 处 理 适 配 器 ） ， 可 用 在 SpringMVC.xml 配 置 文 件 中 使 用 &lt;span class=&#34;exturl&#34; data-url=&#34;bXZjOmFubm90YXRpb24tZHJpdmVu&#34;&gt;mvc:annotation-driven&lt;/span&gt;替代注解处理器和适配器的配置。&lt;/p&gt;
&lt;p&gt;HandlerMapping的实现类的作用&lt;br&gt;实现类RequestMappingHandlerMapping，它会处理@RequestMapping 注解，并将其注册到请求映射表中。&lt;/p&gt;
&lt;p&gt;HandlerAdapter的实现类的作用&lt;br&gt;实现类RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。&lt;/p&gt;
&lt;p&gt;当配置了mvc:annotation-driven&amp;#x2F;后，Spring就知道了我们启用注解驱动。然后Spring通过context:component-scan&amp;#x2F;标签的配置，会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求,这个时候接收返回json数据、参数验证、统一异常等功能。&lt;/p&gt;
&lt;h1 id=&#34;重要注解&#34;&gt;&lt;a href=&#34;#重要注解&#34; class=&#34;headerlink&#34; title=&#34;重要注解&#34;&gt;&lt;/a&gt;重要注解&lt;/h1&gt;&lt;h2 id=&#34;1、RequestMapping&#34;&gt;&lt;a href=&#34;#1、RequestMapping&#34; class=&#34;headerlink&#34; title=&#34;1、RequestMapping&#34;&gt;&lt;/a&gt;1、RequestMapping&lt;/h2&gt;&lt;p&gt;紧耦合方式(了解)&lt;br&gt;DispatcherServlet中的service方法直接将此次请求的request对象传递给调用的单元方法即可。同时在单元方法上声明形参HttpServletRequest来接收request实参即可。&lt;br&gt;&lt;strong&gt;解耦合方式(熟练)&lt;/strong&gt;&lt;br&gt;DispatcherServlet在其service方法中将请求数据根据需求从request对象中获取出来后，将数据直接传递给对应的单元方法使用。同时在单元方法上直接声明对应的形参接收请求数据即可。在单元方法上声明形参来接收请求数据时，形参名必须和请求数据的键名一致，DispatcherServlet会将调用单元方法的形参名作为请求数据的键名获取请求数据，然后传递给单元方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RestController
public class TestDataController &amp;#123;
    /*紧耦合方式参数注入
    * 使用传统的HttpServletRequest对象获取参数  javax.servlet
    * */
    @RequestMapping(&amp;quot;/getParamByRequest.do&amp;quot;)
    public String getParam1(HttpServletRequest req, HttpServletResponse resp)&amp;#123;
        String username = req.getParameter(&amp;quot;username&amp;quot;);
        String password = req.getParameter(&amp;quot;password&amp;quot;);
        System.out.println(&amp;quot;username:&amp;quot;+username+&amp;quot;   password:&amp;quot;+password);
        return &amp;quot;getParamSuccess&amp;quot;;
    &amp;#125;
    /*解耦合方式参数注入
    * HttpServletRequest对象获取参数 通过SpringMVC框架功能,自动转换参数
    * 处理单元参数列表中参数名必须和请求中的参数名一致
                                        * 如不一致,可以通过@RequestParma注解进行转换
    * */
    @RequestMapping(&amp;quot;/getParamByArgName.do&amp;quot;)
    public String getParam2(String username,@RequestParam(&amp;quot;pwd&amp;quot;) int password)&amp;#123;
        System.out.println(&amp;quot;username:&amp;quot;+username+&amp;quot;   password:&amp;quot;+password);
        return &amp;quot;getParamSuccess&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2、PathVariable注解和RESTful风格的支持&#34;&gt;&lt;a href=&#34;#2、PathVariable注解和RESTful风格的支持&#34; class=&#34;headerlink&#34; title=&#34;2、PathVariable注解和RESTful风格的支持&#34;&gt;&lt;/a&gt;2、PathVariable注解和RESTful风格的支持&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;普通形式的url&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;*/contextPath/aaa.do
*/contextPath/aaa.jsp
*/contextPath/aaa.html
*/contextPath/css/aaa.css
*/contextPath/js/aaa.js
*/contextPath/aaa.do?id=10&amp;amp;username=root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;restFul风格的url&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;*/contextPath/aaa/10/root
*/contextPath/aaa
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class PathController &amp;#123;
    @RequestMapping(&amp;quot;/testPathVariable/&amp;#123;id&amp;#125;/&amp;#123;username&amp;#125;&amp;quot;)
    public String testPathVariable(@PathVariable(&amp;quot;id&amp;quot;) Integer id, @PathVariable(&amp;quot;username&amp;quot;) String username)&amp;#123;
        System.out.println(&amp;quot;id:&amp;quot;+id);
        System.out.println(&amp;quot;username:&amp;quot;+username);
        System.out.println(&amp;quot;testPathVariable1&amp;quot;);
        return &amp;quot;success&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191056216.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191104583-1661419340091.png&#34; class=&#34;&#34;&gt;






&lt;h1 id=&#34;响应处理&#34;&gt;&lt;a href=&#34;#响应处理&#34; class=&#34;headerlink&#34; title=&#34;响应处理&#34;&gt;&lt;/a&gt;响应处理&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191212189-1661419342477.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;1、单元方法返回值为void&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191318663-1661419344199.png&#34; class=&#34;&#34;&gt;


&lt;blockquote&gt;
&lt;p&gt;在SpringMVC中如果对于当前的控制单元，没有写对应的返回值，这个时候&lt;strong&gt;SpringMVC就会找和自己控制单元名称一致的页面展示&lt;/strong&gt;，&lt;strong&gt;如果没有配置视图解析器的前缀和后缀是没有产生404&lt;/strong&gt;,需要注意控制单元仍然可以进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、转发和重定向ServletAPI 实现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;demo1&amp;quot;)
    public void testDemo1(HttpServletRequest request, HttpServletResponse response) throws Exception &amp;#123;
        // 请求转发
        //request.getRequestDispatcher(&amp;quot;/forward.jsp&amp;quot;).forward(request,response);
        // 响应重定向
        response.sendRedirect(request.getContextPath()+&amp;quot;/redirect.jsp&amp;quot;);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;单元方法的返回值类型设置void。因为使用response对象在单元方法中直接对此次请求进行了响应，不再通过DispatcherServlet了，既然已经响应了，就不需要再给DispatcherServlet返回值了。在单元方法上声明HttpServletResponse形参，来接收此次请求的response对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、使用forward关键字完成响应&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; /*
    * 返回字符串告诉DispatcherServlet跳转的路径
    * 在路径之前放上一个forward: 关键字,就是请求转发
    * 如果路径前的关键字是forward,那么可以省略不写
    * */
    @RequestMapping(&amp;quot;demo2&amp;quot;)
    public String testDemo2() throws Exception &amp;#123;
        //return &amp;quot;forward:/forwardPage.jsp&amp;quot;;
        return &amp;quot;/forwardPage.jsp&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用通过单元方法的返回值来告诉DispatcherServlet请求转发指定的资源,如果是请求转发，&lt;strong&gt;forward关键字可以&lt;em&gt;省略不写&lt;/em&gt;的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、使用redirect关键字完成响应&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/*
     * 返回字符串告诉DispatcherServlet跳转的路径
     * 在路径之前放上一个redirect: 关键字,就是重定向
     * 如果路径前的关键字是redirect,那么不可以省略
     * /表示当前项目下.这里不需要项目的上下文路径
     * */
    @RequestMapping(&amp;quot;demo3&amp;quot;)
    public String testDemo3() throws Exception &amp;#123;
        return &amp;quot;redirect:/redirectPage.jsp&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用通过单元方法的返回值来告诉DispatcherServlet重定向指定的资源，注意这个&lt;strong&gt;redirect关键字&lt;em&gt;不可以省去&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5、使用View视图转发和重定向&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; @RequestMapping(&amp;quot;demo4&amp;quot;)
    public View testDemo4(HttpServletRequest req)   &amp;#123;
        View  view =null;
        // 请求转发
        //view =new InternalResourceView(&amp;quot;/forwardPage.jsp&amp;quot;);
        // 重定向
        view=new RedirectView(req.getContextPath()+&amp;quot;/redirectPage.jsp&amp;quot;);
        return view;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RedirectView中所做的操作，最终的实现是在renderMergedOutputModel中完成实现的，简单来说RedirectView实现了链接的重定向，并且将数据保存到FlashMap中，这样在跳转后的链接中可以获取一些数据.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6、使用ModelAndView转发重定向&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;demo5&amp;quot;)
    public ModelAndView testDemo5(HttpServletRequest req)   &amp;#123;
        ModelAndView mv=new ModelAndView();
        // 请求转发
        //mv.setViewName(&amp;quot;forward:/forwardPage.jsp&amp;quot;);
        //mv.setView(new InternalResourceView(&amp;quot;/forwardPage.jsp&amp;quot;));
        // 重定向
        //mv.setViewName(&amp;quot;redirect:/redirectPage.jsp&amp;quot;);
        mv.setView(new RedirectView(req.getContextPath()+&amp;quot;/redirectPage.jsp&amp;quot;));
        return mv;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	ModelAndView中的Model代表模型，View代表视图，这个名字就很好地解释了该类的作用。业务处理器调用模型层处理完用户请求后，把结果数据存储在该类的model属性中，把要返回的视图信息存储在该类的view属性中，然后让该ModelAndView返回该Spring MVC框架。&lt;/p&gt;
&lt;h1 id=&#34;作用域传参&#34;&gt;&lt;a href=&#34;#作用域传参&#34; class=&#34;headerlink&#34; title=&#34;作用域传参&#34;&gt;&lt;/a&gt;作用域传参&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191751516-1661419352934.png&#34; class=&#34;&#34;&gt;


&lt;blockquote&gt;
&lt;p&gt;PageContext对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:当前jsp页面内有效&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;request对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:一次请求内。&lt;/p&gt;
&lt;p&gt;作用: 解决了一次请求内的资源的数据共享问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;session对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:一次会话内有效。&lt;/p&gt;
&lt;p&gt;说明:浏览器不关闭,并且后台的session不失效，在任意请求中都可以获取到同一个session对象。&lt;/p&gt;
&lt;p&gt;作用:解决了一个用户不同请求的数据共享问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;application(ServletContext)对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:整个项目内有效。&lt;/p&gt;
&lt;p&gt;特点:一个项目只有一个，在服务器启动的时候即完成初始化创建无论如何获取都是同一个项目。&lt;/p&gt;
&lt;p&gt;作用:解决了不同用户的数据共享问题。&lt;/p&gt;
&lt;h1 id=&#34;拦截器&#34;&gt;&lt;a href=&#34;#拦截器&#34; class=&#34;headerlink&#34; title=&#34;拦截器&#34;&gt;&lt;/a&gt;拦截器&lt;/h1&gt;&lt;h2 id=&#34;引入&#34;&gt;&lt;a href=&#34;#引入&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;过滤器的作用是保护请求的服务器资源，在请求资源被执行之前&amp;#x3D;&amp;#x3D;，如果请求地址符合拦截范围，则会先执行过滤器。&amp;#x3D;&amp;#x3D;过滤器的执行时机，是在Servlet之前执行的&amp;#x3D;&amp;#x3D;。但是在使用了SpringMVC后，Servlet只有一个了，也就是DisptcherServlet。那么，如果我们仍然使用过滤器来完成请求的拦截，因为过滤器是在Servlet之前执行的，就会造成，&amp;#x3D;&amp;#x3D;过滤器会拦截DispatcherServlet所有的请求&amp;#x3D;&amp;#x3D;。那么，如果我们有&amp;#x3D;&amp;#x3D;部分请求不想被拦截&amp;#x3D;&amp;#x3D;，怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;拦截器使用&#34;&gt;&lt;a href=&#34;#拦截器使用&#34; class=&#34;headerlink&#34; title=&#34;拦截器使用&#34;&gt;&lt;/a&gt;拦截器使用&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717191927439-1661419356594.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;Spring MVC中的拦截器（Interceptor）类似于Servlet中的过滤器（Filter），它主要用于拦截用户请求并作相应的处理。例如通过拦截器可以进行权限验证、记录请求信息的日志、判断用户是否登录等。&lt;br&gt;    要使用Spring MVC中的拦截器，就需要对拦截器类进行定义和配置。通常拦截器类可以通过两种方式来定义。&lt;br&gt;    1.通过实现HandlerInterceptor接口，或继承HandlerInterceptor接口的实现类（如HandlerInterceptorAdapter）来定义。&lt;br&gt;    2.通过实现WebRequestInterceptor接口，或继承WebRequestInterceptor接口的实现类来定义。&lt;/p&gt;
&lt;h2 id=&#34;拦截器和过滤器的区别&#34;&gt;&lt;a href=&#34;#拦截器和过滤器的区别&#34; class=&#34;headerlink&#34; title=&#34;拦截器和过滤器的区别&#34;&gt;&lt;/a&gt;拦截器和过滤器的区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;拦截器SpringMVC的，而过滤器是servlet的。	&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器不依赖与servlet容器,由spring容器初始化，过滤器依赖与servlet容器,由servlet容器初始化。. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器可以获取IOC容器中的各个bean，而过滤器就不太方便，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyInterceptor implements HandlerInterceptor &amp;#123;
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &amp;#123;
        /*在请求到达我们定义的handler之前工作的*/
        System.out.println(&amp;quot;MyInterceptor preHandle&amp;quot;);
        /*返回的是true,代表放行,可以继续到达handler*/
        return true;
    &amp;#125;
    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &amp;#123;
        System.out.println(&amp;quot;MyInterceptor postHandle&amp;quot;);
        /*handler 处理单元返回ModelAndView 时候进行 拦截*/
    &amp;#125;
    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &amp;#123;
        /*
        页面渲染完毕,但是还没有给浏览器响应数据的时候
         */
        System.out.println(&amp;quot;MyInterceptor afterCompletion&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;多个拦截器执行顺序&#34;&gt;&lt;a href=&#34;#多个拦截器执行顺序&#34; class=&#34;headerlink&#34; title=&#34;多个拦截器执行顺序&#34;&gt;&lt;/a&gt;多个拦截器执行顺序&lt;/h2&gt;&lt;p&gt;多个拦截器同时存在时,执行的顺序由配置顺序决定. 先配置谁, 谁就先执行.多个拦截器可以理解为拦截器栈, 先进后出(后进先出), 如图所示:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringMVC/image-20220717192103889-1661419360360.png&#34; class=&#34;&#34;&gt;




&lt;h1 id=&#34;异常处理&#34;&gt;&lt;a href=&#34;#异常处理&#34; class=&#34;headerlink&#34; title=&#34;异常处理&#34;&gt;&lt;/a&gt;异常处理&lt;/h1&gt;&lt;h2 id=&#34;SpringMVC异常简介&#34;&gt;&lt;a href=&#34;#SpringMVC异常简介&#34; class=&#34;headerlink&#34; title=&#34;SpringMVC异常简介&#34;&gt;&lt;/a&gt;SpringMVC异常简介&lt;/h2&gt;&lt;p&gt;​	系统中异常包括两类：预期异常(检查型异常)和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息， 后者主要通过规范代码开发、测试通过手段减少运行时异常的发生&lt;/p&gt;
&lt;h2 id=&#34;具体实现&#34;&gt;&lt;a href=&#34;#具体实现&#34; class=&#34;headerlink&#34; title=&#34;具体实现&#34;&gt;&lt;/a&gt;具体实现&lt;/h2&gt;&lt;h3 id=&#34;1使用-ExceptionHandler注解处理异常&#34;&gt;&lt;a href=&#34;#1使用-ExceptionHandler注解处理异常&#34; class=&#34;headerlink&#34; title=&#34;1使用@ExceptionHandler注解处理异常&#34;&gt;&lt;/a&gt;1使用@ExceptionHandler注解处理异常&lt;/h3&gt;&lt;p&gt;缺点：只能处理当前Controller中的异常。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; @ExceptionHandler(value =&amp;#123;ArithmeticException.class,NullPointerException.class&amp;#125; )
    public ModelAndView handelException()&amp;#123;
        ModelAndView mv =new ModelAndView();
        mv.setViewName(&amp;quot;error1.jsp&amp;quot;);
        return mv;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2使用：-ControllerAdvice-ExceptionHandler&#34;&gt;&lt;a href=&#34;#2使用：-ControllerAdvice-ExceptionHandler&#34; class=&#34;headerlink&#34; title=&#34;2使用：@ControllerAdvice+@ExceptionHandler&#34;&gt;&lt;/a&gt;2使用：@ControllerAdvice+@ExceptionHandler&lt;/h3&gt;&lt;p&gt;此处优先级低于局部异常处理器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@ControllerAdvice
public class GloableExceptionHandler1 &amp;#123;
    @ExceptionHandler(value =&amp;#123;ArithmeticException.class,NullPointerException.class&amp;#125; )
    public ModelAndView handelException()&amp;#123;
        ModelAndView mv =new ModelAndView();
        mv.setViewName(&amp;quot;error1.jsp&amp;quot;);
        return mv;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3使用：SimpleMappingExceptionResolver&#34;&gt;&lt;a href=&#34;#3使用：SimpleMappingExceptionResolver&#34; class=&#34;headerlink&#34; title=&#34;3使用：SimpleMappingExceptionResolver&#34;&gt;&lt;/a&gt;3使用：SimpleMappingExceptionResolver&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 全局异常
 */
  @Configuration
  public class GloableException2 &amp;#123;
    @Bean
    public SimpleMappingExceptionResolver getSimpleMappingExceptionResolver()&amp;#123;
        SimpleMappingExceptionResolver resolver = new SimpleMappingExceptionResolver();
        Properties prop = new Properties();
        prop.put(&amp;quot;java.lang.NullPointerException&amp;quot;,&amp;quot;error1.jsp&amp;quot;);
        prop.put(&amp;quot;java.lang.ArithmeticException&amp;quot;,&amp;quot;error2.jsp&amp;quot;);
        resolver.setExceptionMappings(prop);
        return resolver;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4自定义的HandlerExceptionResolver&#34;&gt;&lt;a href=&#34;#4自定义的HandlerExceptionResolver&#34; class=&#34;headerlink&#34; title=&#34;4自定义的HandlerExceptionResolver&#34;&gt;&lt;/a&gt;4自定义的HandlerExceptionResolver&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 全局异常
 * HandlerExceptionResolve
 */
  @Configuration
  public class GloableException3 implements HandlerExceptionResolver &amp;#123;
    @Override
    public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &amp;#123;
        ModelAndView mv = new ModelAndView();
        if(e instanceof NullPointerException)&amp;#123;
                mv.setViewName(&amp;quot;error1&amp;quot;);
        &amp;#125;
        if(e instanceof ArithmeticException)&amp;#123;
                mv.setViewName(&amp;quot;error2&amp;quot;);
        &amp;#125;
        mv.addObject(&amp;quot;msg&amp;quot;,e);
        return mv;
    &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;其他注解&#34;&gt;&lt;a href=&#34;#其他注解&#34; class=&#34;headerlink&#34; title=&#34;其他注解&#34;&gt;&lt;/a&gt;其他注解&lt;/h1&gt;&lt;h2 id=&#34;RequestBody&#34;&gt;&lt;a href=&#34;#RequestBody&#34; class=&#34;headerlink&#34; title=&#34;@RequestBody&#34;&gt;&lt;/a&gt;@RequestBody&lt;/h2&gt;&lt;p&gt;作用：&lt;/p&gt;
&lt;p&gt;​	用于获取请求体json格式的字符串内容。直接使用得到是 key&amp;#x3D;value&amp;amp;key&amp;#x3D;value…结构的数据，get 请求方式不适用。&lt;/p&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;p&gt;​	required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值 为 false，get 请求得到是null。&lt;/p&gt;
&lt;h2 id=&#34;CrossOrigin&#34;&gt;&lt;a href=&#34;#CrossOrigin&#34; class=&#34;headerlink&#34; title=&#34;@CrossOrigin&#34;&gt;&lt;/a&gt;@CrossOrigin&lt;/h2&gt;&lt;p&gt;作用：&lt;/p&gt;
&lt;p&gt;​	解决ajax请求之间的跨域问题&lt;/p&gt;
&lt;p&gt;属性:&lt;/p&gt;
&lt;p&gt;origins  ： 允许可访问的域列表IP&lt;/p&gt;
&lt;p&gt;maxAge：准备响应前的缓存持续的最大时间（以秒为单位）。&lt;/p&gt;
</content>
        <category term="框架" />
        <category term="Spring" />
        <category term="SpringMVC" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/SpringSecurity/</id>
        <title>SpringSecurity</title>
        <link rel="alternate" href="http://example.com/2022/10/07/SpringSecurity/"/>
        <content type="html">&lt;hr/&gt;
&lt;p style=&#34;font-size:70px; color:red;background-color:66FF66&#34;&gt;Spring Security&lt;/p&gt;&lt;br/&gt;&lt;hr/&gt;

&lt;h1 id=&#34;一、简介&#34;&gt;&lt;a href=&#34;#一、简介&#34; class=&#34;headerlink&#34; title=&#34;一、简介&#34;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;​		&lt;strong&gt;Spring Security&lt;/strong&gt; 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架&lt;strong&gt;Shiro&lt;/strong&gt;，它提供了更丰富的功能，社区资源也比Shiro丰富。&lt;/p&gt;
&lt;p&gt;​	一般来说中大型的项目都是使用&lt;strong&gt;SpringSecurity&lt;/strong&gt; 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。&lt;/p&gt;
&lt;p&gt;​	 一般Web应用的需要进行&lt;strong&gt;认证&lt;/strong&gt;和&lt;strong&gt;授权&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;授权：经过认证后判断当前用户是否有权限进行某个操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	而&lt;strong&gt;认证&lt;/strong&gt;和&lt;strong&gt;授权&lt;/strong&gt;也是SpringSecurity作为安全框架的&lt;strong&gt;核心功能&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;二、第一个Spring-Security项目&#34;&gt;&lt;a href=&#34;#二、第一个Spring-Security项目&#34; class=&#34;headerlink&#34; title=&#34;二、第一个Spring Security项目&#34;&gt;&lt;/a&gt;二、第一个Spring Security项目&lt;/h1&gt;&lt;h2 id=&#34;1-导入依赖&#34;&gt;&lt;a href=&#34;#1-导入依赖&#34; class=&#34;headerlink&#34; title=&#34;1.导入依赖&#34;&gt;&lt;/a&gt;1.导入依赖&lt;/h2&gt;&lt;p&gt;​	Spring Security已经被Spring boot进行集成，使用时直接引入启动器即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;properties&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
        &amp;lt;spring-boot.version&amp;gt;2.3.7.RELEASE&amp;lt;/spring-boot.version&amp;gt;
    &amp;lt;/properties&amp;gt;	

    &amp;lt;dependencies&amp;gt;
        &amp;lt;!--thymeleaf--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--druid--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.8&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--mysql--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--mybatis-plus--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--redis依赖--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--fastjson依赖--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.33&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--jwt依赖--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jjwt&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.9.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--spring-security--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--lombok--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--spring-web--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--Spring test--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.junit.vintage&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;junit-vintage-engine&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-写一个控制器&#34;&gt;&lt;a href=&#34;#2-写一个控制器&#34; class=&#34;headerlink&#34; title=&#34;2.写一个控制器&#34;&gt;&lt;/a&gt;2.写一个控制器&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController &amp;#123;

    @RequestMapping(&amp;quot;/hello&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-访问页面&#34;&gt;&lt;a href=&#34;#3-访问页面&#34; class=&#34;headerlink&#34; title=&#34;3.访问页面&#34;&gt;&lt;/a&gt;3.访问页面&lt;/h2&gt;&lt;p&gt;​	导入spring-boot-starter-security启动器后，Spring Security已经生效，默认拦截全部请求，如果用户没有登录，跳转到内置登录页面。&lt;/p&gt;
&lt;p&gt;​	在项目中新建login.html页面后&lt;/p&gt;
&lt;p&gt;​	在浏览器输入：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwL2xvZ2luLmh0bWwlRTUlOTAlOEUlRTQlQkMlOUElRTYlOTglQkUlRTclQTQlQkElRTQlQjglOEIlRTklOUQlQTIlRTklQTElQjUlRTklOUQlQTI=&#34;&gt;http://localhost:8080/login.html后会显示下面页面&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-01.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	默认的username为user，password打印在控制台中。当然了，每个人的显示的肯定和我的不一样。&lt;/p&gt;
&lt;p&gt;​		在浏览器中输入账号和密码后会显示login.html页面内容。&lt;/p&gt;
&lt;h1 id=&#34;三、用户认证&#34;&gt;&lt;a href=&#34;#三、用户认证&#34; class=&#34;headerlink&#34; title=&#34;三、用户认证&#34;&gt;&lt;/a&gt;三、用户认证&lt;/h1&gt;&lt;h2 id=&#34;3-1-登陆校验流程&#34;&gt;&lt;a href=&#34;#3-1-登陆校验流程&#34; class=&#34;headerlink&#34; title=&#34;3.1 登陆校验流程&#34;&gt;&lt;/a&gt;3.1 登陆校验流程&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20211215094003288.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;3-2-原理初探&#34;&gt;&lt;a href=&#34;#3-2-原理初探&#34; class=&#34;headerlink&#34; title=&#34;3.2 原理初探&#34;&gt;&lt;/a&gt;3.2 原理初探&lt;/h2&gt;&lt;p&gt;​	想要知道如何实现自己的登陆流程就必须要先知道入门案例中SpringSecurity的流程。&lt;/p&gt;
&lt;h3 id=&#34;3-2-1-SpringSecurity完整流程&#34;&gt;&lt;a href=&#34;#3-2-1-SpringSecurity完整流程&#34; class=&#34;headerlink&#34; title=&#34;3.2.1 SpringSecurity完整流程&#34;&gt;&lt;/a&gt;3.2.1 SpringSecurity完整流程&lt;/h3&gt;&lt;p&gt;​	SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20211214144425527.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UsernamePasswordAuthenticationFilter&lt;/strong&gt;:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ExceptionTranslationFilter：&lt;/strong&gt;处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FilterSecurityInterceptor：&lt;/strong&gt;负责权限校验的过滤器。&lt;/p&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;p&gt;​	我们可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20211214145824903.png&#34; class=&#34;&#34;&gt;




&lt;h3 id=&#34;3-2-2-认证流程详解&#34;&gt;&lt;a href=&#34;#3-2-2-认证流程详解&#34; class=&#34;headerlink&#34; title=&#34;3.2.2 认证流程详解&#34;&gt;&lt;/a&gt;3.2.2 认证流程详解&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20211214151515385.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;概念速查:&lt;/p&gt;
&lt;p&gt;Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。&lt;/p&gt;
&lt;p&gt;AuthenticationManager接口：定义了认证Authentication的方法 &lt;/p&gt;
&lt;p&gt;UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。&lt;/p&gt;
&lt;p&gt;UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。&lt;/p&gt;
&lt;h2 id=&#34;3-3-实现方式&#34;&gt;&lt;a href=&#34;#3-3-实现方式&#34; class=&#34;headerlink&#34; title=&#34;3.3 实现方式&#34;&gt;&lt;/a&gt;3.3 实现方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前后端不分离，登录页面由自己提供——3.1(不推荐)&lt;/li&gt;
&lt;li&gt;前后端分离，登录页面由前端提供     ——3.2(推荐，后序我们其他授权和别的操作，均以这个为主)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在第二部分的基础上，进行操作&lt;/p&gt;
&lt;h3 id=&#34;3-3-1-前后端不分离&#34;&gt;&lt;a href=&#34;#3-3-1-前后端不分离&#34; class=&#34;headerlink&#34; title=&#34;3.3.1 前后端不分离&#34;&gt;&lt;/a&gt;3.3.1 前后端不分离&lt;/h3&gt;&lt;h4 id=&#34;1-准备工作&#34;&gt;&lt;a href=&#34;#1-准备工作&#34; class=&#34;headerlink&#34; title=&#34;1 准备工作&#34;&gt;&lt;/a&gt;1 准备工作&lt;/h4&gt;&lt;h5 id=&#34;application-yml&#34;&gt;&lt;a href=&#34;#application-yml&#34; class=&#34;headerlink&#34; title=&#34;application.yml&#34;&gt;&lt;/a&gt;application.yml&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;spring:
  application:
    name: msb-spring-security
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/mydb?characterEncoding=utf-8&amp;amp;serverTimezone=UTC
      username: root
      password: root
      driver-class-name: com.mysql.cj.jdbc.Driver

mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
logging:
  level:
    com:
      zjj:
        mapper: debug
server:
  port: 8081
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;数据库准备&#34;&gt;&lt;a href=&#34;#数据库准备&#34; class=&#34;headerlink&#34; title=&#34;数据库准备&#34;&gt;&lt;/a&gt;数据库准备&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;
SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for sys_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `menu_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;NULL&amp;#39; COMMENT &amp;#39;菜单名&amp;#39;,
  `path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;路由地址&amp;#39;,
  `component` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;组件路径&amp;#39;,
  `visible` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;菜单状态（0显示 1隐藏）&amp;#39;,
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;菜单状态（0正常 1停用）&amp;#39;,
  `perms` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;权限标识&amp;#39;,
  `icon` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;#&amp;#39; COMMENT &amp;#39;菜单图标&amp;#39;,
  `create_by` bigint(20) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(11) NULL DEFAULT 0 COMMENT &amp;#39;是否删除（0未删除 1已删除）&amp;#39;,
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;备注&amp;#39;,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &amp;#39;菜单表&amp;#39; ROW_FORMAT = Dynamic;

DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `role_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;角色权限字符串&amp;#39;,
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;角色状态（0正常 1停用）&amp;#39;,
  `del_flag` int(1) NULL DEFAULT 0 COMMENT &amp;#39;del_flag&amp;#39;,
  `create_by` bigint(200) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(200) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;备注&amp;#39;,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &amp;#39;角色表&amp;#39; ROW_FORMAT = Dynamic;

DROP TABLE IF EXISTS `sys_role_menu`;
CREATE TABLE `sys_role_menu`  (
  `role_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;角色ID&amp;#39;,
  `menu_id` bigint(200) NOT NULL DEFAULT 0 COMMENT &amp;#39;菜单id&amp;#39;,
  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键&amp;#39;,
  `user_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;NULL&amp;#39; COMMENT &amp;#39;用户名&amp;#39;,
  `nick_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;NULL&amp;#39; COMMENT &amp;#39;昵称&amp;#39;,
  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;NULL&amp;#39; COMMENT &amp;#39;密码&amp;#39;,
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;账号状态（0正常 1停用）&amp;#39;,
  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;邮箱&amp;#39;,
  `phonenumber` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;手机号&amp;#39;,
  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;用户性别（0男，1女，2未知）&amp;#39;,
  `avatar` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;头像&amp;#39;,
  `user_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;1&amp;#39; COMMENT &amp;#39;用户类型（0管理员，1普通用户）&amp;#39;,
  `create_by` bigint(20) NULL DEFAULT NULL COMMENT &amp;#39;创建人的用户id&amp;#39;,
  `create_time` datetime NULL DEFAULT NULL COMMENT &amp;#39;创建时间&amp;#39;,
  `update_by` bigint(20) NULL DEFAULT NULL COMMENT &amp;#39;更新人&amp;#39;,
  `update_time` datetime NULL DEFAULT NULL COMMENT &amp;#39;更新时间&amp;#39;,
  `del_flag` int(11) NULL DEFAULT 0 COMMENT &amp;#39;删除标志（0代表未删除，1代表已删除）&amp;#39;,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &amp;#39;用户表&amp;#39; ROW_FORMAT = Dynamic;


DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role`  (
  `user_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;用户id&amp;#39;,
  `role_id` bigint(200) NOT NULL DEFAULT 0 COMMENT &amp;#39;角色id&amp;#39;,
  PRIMARY KEY (`user_id`, `role_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;



INSERT INTO `sys_menu` VALUES (2, &amp;#39;demo:select&amp;#39;, NULL, NULL, &amp;#39;0&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;#&amp;#39;, NULL, NULL, NULL, NULL, 0, NULL);
INSERT INTO `sys_menu` VALUES (3, &amp;#39;demo:update&amp;#39;, NULL, NULL, &amp;#39;0&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;#&amp;#39;, NULL, NULL, NULL, NULL, 0, NULL);
INSERT INTO `sys_menu` VALUES (4, &amp;#39;demo:insert&amp;#39;, NULL, NULL, &amp;#39;0&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;#&amp;#39;, NULL, NULL, NULL, NULL, 0, NULL);
INSERT INTO `sys_menu` VALUES (5, &amp;#39;demo:delete&amp;#39;, NULL, NULL, &amp;#39;0&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;#&amp;#39;, NULL, NULL, NULL, NULL, 0, NULL);

INSERT INTO `sys_role` VALUES (3, &amp;#39;管理员&amp;#39;, NULL, &amp;#39;0&amp;#39;, 0, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role` VALUES (4, &amp;#39;员工&amp;#39;, NULL, &amp;#39;0&amp;#39;, 0, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role` VALUES (5, &amp;#39;普通用户&amp;#39;, NULL, &amp;#39;0&amp;#39;, 0, NULL, NULL, NULL, NULL, NULL);

INSERT INTO `sys_role_menu` VALUES (1, 1);
INSERT INTO `sys_role_menu` VALUES (1, 2);
INSERT INTO `sys_role_menu` VALUES (1, 3);
INSERT INTO `sys_role_menu` VALUES (1, 4);
INSERT INTO `sys_role_menu` VALUES (2, 1);
INSERT INTO `sys_role_menu` VALUES (2, 4);
INSERT INTO `sys_role_menu` VALUES (3, 1);

INSERT INTO `sys_user` VALUES (1, &amp;#39;zhangsan&amp;#39;, &amp;#39;zhangsan&amp;#39;, &amp;#39;$2a$10$CFr1dsdBA3XDNrNRtsfX3ezUj/pUVsEhkg6cpKa9QG0oraGBMOZ5u&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;12@qq.com&amp;#39;, &amp;#39;123&amp;#39;, &amp;#39;1&amp;#39;, NULL, &amp;#39;0&amp;#39;, NULL, &amp;#39;2022-08-03 08:51:48&amp;#39;, NULL, &amp;#39;2022-08-27 08:51:54&amp;#39;, 0);
INSERT INTO `sys_user` VALUES (2, &amp;#39;lisi&amp;#39;, &amp;#39;lisi&amp;#39;, &amp;#39;$2a$10$GRjbaR73zd9c9tCnj0BnnexqGSbQzXCVrXTPVEiOJqaypwCijbe4O&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;65.@126.com&amp;#39;, &amp;#39;456&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;0&amp;#39;, NULL, &amp;#39;2022-08-19 08:51:51&amp;#39;, NULL, &amp;#39;2022-08-27 08:51:59&amp;#39;, 0);
INSERT INTO `sys_user` VALUES (3, &amp;#39;wangwu&amp;#39;, &amp;#39;wangwu&amp;#39;, &amp;#39;$2a$10$PsFb4a4bn0A.5pf4Rq5kheKaOkrhJOaz6hlu2WmBnkE8H9wZOoNXS&amp;#39;, &amp;#39;0&amp;#39;, NULL, NULL, NULL, NULL, &amp;#39;1&amp;#39;, NULL, NULL, NULL, NULL, 0);

INSERT INTO `sys_user_role` VALUES (1, 1);
INSERT INTO `sys_user_role` VALUES (2, 2);
INSERT INTO `sys_user_role` VALUES (3, 3);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;实体类1&#34;&gt;&lt;a href=&#34;#实体类1&#34; class=&#34;headerlink&#34; title=&#34;实体类1&#34;&gt;&lt;/a&gt;实体类1&lt;/h5&gt;&lt;p&gt;​	这里目前只提供了登录所需要的User对象，以及我们自己封装的 USerDetails 对象，其余对象自己后续生成。（easycode 、 mybatisX、….都行）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.pojo;

import java.util.Date;
import com.baomidou.mybatisplus.extension.activerecord.Model;
import java.io.Serializable;
import lombok.*;
import com.baomidou.mybatisplus.annotation.TableName;
import com.baomidou.mybatisplus.annotation.TableField;

/**
 * 用户表(User)表实体类
 *
 * @author makejava
 * @since 2022-08-24 21:09:13
 */

@AllArgsConstructor
@NoArgsConstructor
@Data
@ToString
@TableName(value = &amp;quot;sys_user&amp;quot;)
public class User implements Serializable &amp;#123;
    /**
    * 主键    
    */ 
    @TableField(&amp;quot;id&amp;quot;)
    private Long id;
    
    /**
    * 用户名    
    */ 
    @TableField(&amp;quot;user_name&amp;quot;)
    private String username;
    
    /**
    * 昵称    
    */ 
    @TableField(&amp;quot;nick_name&amp;quot;)
    private String nickName;
    
    /**
    * 密码    
    */ 
    @TableField(&amp;quot;password&amp;quot;)
    private String password;
    
    /**
    * 账号状态（0正常 1停用）    
    */ 
    @TableField(&amp;quot;status&amp;quot;)
    private String status;
    
    /**
    * 邮箱    
    */ 
    @TableField(&amp;quot;email&amp;quot;)
    private String email;
    
    /**
    * 手机号    
    */ 
    @TableField(&amp;quot;phonenumber&amp;quot;)
    private String phonenumber;
    
    /**
    * 用户性别（0男，1女，2未知）    
    */ 
    @TableField(&amp;quot;sex&amp;quot;)
    private String sex;
    
    /**
    * 头像    
    */ 
    @TableField(&amp;quot;avatar&amp;quot;)
    private String avatar;
    
    /**
    * 用户类型（0管理员，1普通用户）    
    */ 
    @TableField(&amp;quot;user_type&amp;quot;)
    private String userType;
    
    /**
    * 创建人的用户id    
    */ 
    @TableField(&amp;quot;create_by&amp;quot;)
    private Long createBy;
    
    /**
    * 创建时间    
    */ 
    @TableField(&amp;quot;create_time&amp;quot;)
    private Date createTime;
    
    /**
    * 更新人    
    */ 
    @TableField(&amp;quot;update_by&amp;quot;)
    private Long updateBy;
    
    /**
    * 更新时间    
    */ 
    @TableField(&amp;quot;update_time&amp;quot;)
    private Date updateTime;
    
    /**
    * 删除标志（0代表未删除，1代表已删除）    
    */ 
    @TableField(&amp;quot;del_flag&amp;quot;)
    private Integer delFlag;
    

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;实体类2&#34;&gt;&lt;a href=&#34;#实体类2&#34; class=&#34;headerlink&#34; title=&#34;实体类2&#34;&gt;&lt;/a&gt;实体类2&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.alibaba.fastjson.annotation.JSONField;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@AllArgsConstructor
@NoArgsConstructor
@Data
@ToString
public class LoginUser implements UserDetails &amp;#123;
    private User user;

    private List&amp;lt;String&amp;gt; permission;

    public LoginUser(User user, List&amp;lt;String&amp;gt; permission) &amp;#123;
        this.user = user;
        this.permission = permission;
    &amp;#125;

    @JSONField(serialize = false) //redis存储的话会出现问题，不让他序列化，主要为了安全
    List&amp;lt;SimpleGrantedAuthority&amp;gt; authorities ;
    @Override
    public Collection&amp;lt;? extends GrantedAuthority&amp;gt; getAuthorities() &amp;#123;
        // 把permission中的String类型的权限信息封装成 SimpleGrantedAuthority 对象
        if (null != authorities) return authorities;//要是有信息就不用再授权了
        authorities = permission.stream()
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());
        return authorities;
    &amp;#125;

    @Override
    public String getPassword() &amp;#123;
        return user.getPassword();
    &amp;#125;

    @Override
    public String getUsername() &amp;#123;
        return user.getUsername();
    &amp;#125;

    @Override
    public boolean isAccountNonExpired() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isAccountNonLocked() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isCredentialsNonExpired() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isEnabled() &amp;#123;
        return true;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-重写一个登录服务-ServiceImpl&#34;&gt;&lt;a href=&#34;#2-重写一个登录服务-ServiceImpl&#34; class=&#34;headerlink&#34; title=&#34;2 重写一个登录服务(ServiceImpl)&#34;&gt;&lt;/a&gt;2 重写一个登录服务(ServiceImpl)&lt;/h4&gt;&lt;p&gt;​	这里要实现一个实现 UserDetailsService ，重写loadUserByUsername，因为这里是我们认证的地方，在下一个章节我们会具体说明&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.zjj.mapper.UserMapper;
import com.zjj.pojo.LoginUser;
import com.zjj.pojo.User;
import com.zjj.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * 用户表(User)表服务实现类
 * @author makejava
 * @since 2022-08-24 21:09:13
 */
@Service(&amp;quot;userService&amp;quot;)
public class UserServiceImpl extends ServiceImpl&amp;lt;UserMapper, User&amp;gt;
        implements UserService, UserDetailsService &amp;#123;
    @Autowired
    private UserMapper userMapper;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &amp;#123;
        LambdaQueryWrapper&amp;lt;User&amp;gt; qw = new LambdaQueryWrapper&amp;lt;&amp;gt;();
        qw.eq(User::getUsername, username);
        User user = userMapper.selectOne(qw);
        if (Objects.isNull(user)) &amp;#123;
            throw new UsernameNotFoundException(&amp;quot;没有该用户&amp;quot;);
        &amp;#125;

        // TODO 权限信息后序添加
        List&amp;lt;String&amp;gt; menus = userMapper.findMenuByUserId(user.getId());
        List&amp;lt;String&amp;gt; roles = userMapper.findRoleByUserId(user.getId());
        List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();

        for (String menu : menus) &amp;#123;
            res.add(menu);
        &amp;#125;
        for (String role : roles) &amp;#123;
            res.add(&amp;quot;ROLE_&amp;quot;+role);
        &amp;#125;
        // 用户的权限和角色直接赋值 的话 要注意写法
        /*
        1、我们没有user对象直接往回 new UserDetails(username,password,Authorities) 对象时，
            要注意Authorities手动String转化可以用 AuthorityUtils.commaSeparatedStringToAuthorityList(String str)
                但是里面的 str里面包含了权限以及角色，每个要用 “,” 间隔，而且角色开头要要拼接 ROLE_

        2、我们自定义了user 实现了 UserDetails 对象 我们重写了 getAuthorities属性，具体看这个类的注释
            他在初始化值的时候我们传参传递的是一个list对象，这个时候我们不需要用 “，” 间隔，但是角色前要加 ROLE_
         */
        return new LoginUser(user,res);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-重写mapper层和对应的映射文件&#34;&gt;&lt;a href=&#34;#3-重写mapper层和对应的映射文件&#34; class=&#34;headerlink&#34; title=&#34;3 重写mapper层和对应的映射文件&#34;&gt;&lt;/a&gt;3 重写mapper层和对应的映射文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.zjj.pojo.User;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

/**
 * 用户表(User)表数据库访问层
 *
 * @author makejava
 * @since 2022-08-24 21:09:13
 */

@Mapper
public interface UserMapper extends BaseMapper&amp;lt;User&amp;gt; &amp;#123;
    public List&amp;lt;String&amp;gt; findMenuByUserId(Long id);
    public List&amp;lt;String&amp;gt; findRoleByUserId(Long id);

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE mapper PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.zjj.mapper.UserMapper&amp;quot;&amp;gt;

    &amp;lt;sql id=&amp;quot;AllUserColumn&amp;quot;&amp;gt;id , user_name , nick_name , password , status , email , phonenumber , sex , avatar , user_type , create_by , create_time , update_by , update_time , del_flag &amp;lt;/sql&amp;gt;   
    &amp;lt;resultMap type=&amp;quot;com.zjj.pojo.User&amp;quot; id=&amp;quot;UserMap&amp;quot;&amp;gt;
        &amp;lt;result property=&amp;quot;id&amp;quot; column=&amp;quot;id&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;userName&amp;quot; column=&amp;quot;user_name&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;nickName&amp;quot; column=&amp;quot;nick_name&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;password&amp;quot; column=&amp;quot;password&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;status&amp;quot; column=&amp;quot;status&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;email&amp;quot; column=&amp;quot;email&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;phonenumber&amp;quot; column=&amp;quot;phonenumber&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;sex&amp;quot; column=&amp;quot;sex&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;avatar&amp;quot; column=&amp;quot;avatar&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;userType&amp;quot; column=&amp;quot;user_type&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;createBy&amp;quot; column=&amp;quot;create_by&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;createTime&amp;quot; column=&amp;quot;create_time&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;updateBy&amp;quot; column=&amp;quot;update_by&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;updateTime&amp;quot; column=&amp;quot;update_time&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;delFlag&amp;quot; column=&amp;quot;del_flag&amp;quot; /&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findMenuByUserId&amp;quot; resultType=&amp;quot;java.lang.String&amp;quot;&amp;gt;
        SELECT
            distinct(m.menu_name)
        FROM
            sys_user_role ur
                LEFT JOIN sys_user u on u.id = ur.user_id
                LEFT JOIN sys_role r ON ur.role_id = r.id
                LEFT JOIN sys_role_menu rm ON ur.role_id = rm.role_id
                LEFT JOIN sys_menu m ON m.id = rm.menu_id
        WHERE
            u.id = #&amp;#123;args1&amp;#125;
          AND r.status = 0
          AND m.status = 0
    &amp;lt;/select&amp;gt;
    &amp;lt;select id=&amp;quot;findRoleByUserId&amp;quot; resultType=&amp;quot;java.lang.String&amp;quot;&amp;gt;
        SELECT
            distinct(r.name)
        FROM
            sys_user_role ur
                LEFT JOIN sys_user u on u.id = ur.user_id
                LEFT JOIN sys_role r ON ur.role_id = r.id
                LEFT JOIN sys_role_menu rm ON ur.role_id = rm.role_id
                LEFT JOIN sys_menu m ON m.id = rm.menu_id
        WHERE
            u.id = #&amp;#123;args1&amp;#125;
          AND r.status = 0
          AND m.status = 0
    &amp;lt;/select&amp;gt;
    

&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-导入我们的登录页面&#34;&gt;&lt;a href=&#34;#4-导入我们的登录页面&#34; class=&#34;headerlink&#34; title=&#34;4 导入我们的登录页面&#34;&gt;&lt;/a&gt;4 导入我们的登录页面&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;内容&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;form action=&amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
            username:&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
            password:&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
            &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;提交&amp;quot;/&amp;gt;
        &amp;lt;/form&amp;gt;

    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-提供登录接口&#34;&gt;&lt;a href=&#34;#5-提供登录接口&#34; class=&#34;headerlink&#34; title=&#34;5 提供登录接口&#34;&gt;&lt;/a&gt;5 提供登录接口&lt;/h4&gt;&lt;p&gt;​	就是一个页面的跳转指定我们的登录页面(&amp;#x3D;&amp;#x3D;要配置的&amp;#x3D;&amp;#x3D;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.zjj.pojo.User;
import com.zjj.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
@Controller
public class LoginController &amp;#123;
    @Autowired
    private UserService userService;

    @RequestMapping(&amp;quot;/demo&amp;quot;)
    @ResponseBody
    public String demo() &amp;#123;
        return &amp;quot;demo&amp;quot;;
    &amp;#125;

    // 登录页面
    @RequestMapping(&amp;quot;/showLogin&amp;quot;)
    public String logint() &amp;#123;
        System.out.println(&amp;quot;logint invoked&amp;quot;);
        return &amp;quot;login&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-修改配置类&#34;&gt;&lt;a href=&#34;#6-修改配置类&#34; class=&#34;headerlink&#34; title=&#34;6 修改配置类&#34;&gt;&lt;/a&gt;6 修改配置类&lt;/h4&gt;&lt;p&gt;​	主要内容和细节，在formLogin里面，一定仔细查看注释，小细节很多&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class MySecurityCore extends WebSecurityConfigurerAdapter &amp;#123;
    @Bean
    public PasswordEncoder getPasswordEncoder()&amp;#123;
        return new BCryptPasswordEncoder();
    &amp;#125;

    @Override
    protected void configure(HttpSecurity http) throws Exception &amp;#123;

        // http.formLogin() 所有和表单有关系的
        http.formLogin()
                // 登录页面，走一个controller
                // 注意要和，LoginProcessingUrl 配合使用，不然在表单中的action中 url 失效
                // 因为只配置loginPage()， 会导致在初始化的时候将loginProcessingUrl的配置相同化，可以自己debug 在AbstractAuthenticationFilterConfigurer 的 updateAuthenticationDefaults 方法
                // 也就是说loginPage(&amp;quot;/login&amp;quot;)  loginProcessingUrl(&amp;quot;/login&amp;quot;),导致提交信息失败最终导致认证失败
                .loginPage(&amp;quot;/showLogin&amp;quot;)
                // 当发现什么URL时，把请求转发给自定义登录逻辑
                // 表单提交的地址 action ,他就会直接去认证进入到 UserDetailsServiceImpl
                // 去这里进行用户的验证 和 用户权限信息的集体封装
                .loginProcessingUrl(&amp;quot;/login&amp;quot;)
                // 登录成功的操作
                // 下面两种方法都可以，推荐第二种，两种同时写第一个直接失效
                // 第一种写法，要注意在写映射的时候要注意请求的方法 get/post
                .successForwardUrl(&amp;quot;/showMain&amp;quot;)
                .successHandler((request, response, authentication) -&amp;gt; &amp;#123;
                    System.out.println(&amp;quot;successHandler invoked&amp;quot;);
                    // 我们在每次请求同一个页面尽量使用重定向，要是请求转发
                    // 因为请求转发是浏览器的行为，每次都要请求服务器并且重复提交表单，不好
                    // response.sendRedirect(&amp;quot;/fail&amp;quot;);
                    LoginUser loginUser = (LoginUser) authentication.getPrincipal();
                    for (String s : loginUser.getPermission()) &amp;#123;
                        System.out.println(s);
                    &amp;#125;
                &amp;#125;)
                // 登录失败的操作
                // 内容和上述情况相同，只是一个成功的一个失败的
                .failureForwardUrl(&amp;quot;/fail&amp;quot;)
                // 当前端表单传递过来的用户名参数、密码参数名和后端不对应，可以利用下列方法
                // 指定前端传递过来的用户名参数名称，默认 username
                //.usernameParameter(&amp;quot;MyuserName&amp;quot;)
                // 指定前端传递过来的密码参数名称，默认 password
                //.passwordParameter(&amp;quot;MypassWord&amp;quot;)
        ;

        // http.authorizeRequests() 所有和授权相关
        http.authorizeRequests()
                // 这里面支持 正则 和 ant表达式
                .antMatchers(&amp;quot;/showLogin&amp;quot;).anonymous()
                .antMatchers(&amp;quot;/js/**&amp;quot;).permitAll()
                .anyRequest().authenticated();


        // http.csrf
        http.csrf().disable()
                // 不通过Session获取SecurityContext
                // 因为我们使用了前后端分离的思想，在session中不存在参数，要用让东西存在它里面，所以不让他生成
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-启动测试&#34;&gt;&lt;a href=&#34;#7-启动测试&#34; class=&#34;headerlink&#34; title=&#34;7 启动测试&#34;&gt;&lt;/a&gt;7 启动测试&lt;/h4&gt;&lt;p&gt;这个时候我们的用户名、密码都是我们在数据库中存储的（&amp;#x3D;&amp;#x3D;密码必须使我们提供的加密方式加密之后的&amp;#x3D;&amp;#x3D;）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20220825114004014.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;登录是否成功，一方面看是否请求被阻拦&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20220825114855873.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;另一方面，我在配置中设置了认证成功之后的操作 successHandler(request,response.authentication) 我在里面将我们获得认证的用户权限信息全部打印在了控制台，如果错误了也可同样配置一些信息，具体配置将在后序章节详细总结我们的配置类中的配置，现在主要目的是理清逻辑即可&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20220825114558928.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;8-补充——密码加密&#34;&gt;&lt;a href=&#34;#8-补充——密码加密&#34; class=&#34;headerlink&#34; title=&#34;8 补充——密码加密&#34;&gt;&lt;/a&gt;8 补充——密码加密&lt;/h4&gt;&lt;p&gt;实际项目中我们不会把密码明文存储在数据库中。&lt;/p&gt;
&lt;p&gt;​	默认使用的PasswordEncoder要求数据库中的密码格式为：{id}password 。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换PasswordEncoder。&lt;/p&gt;
&lt;p&gt;​	我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder。&lt;/p&gt;
&lt;p&gt;​	我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。&lt;/p&gt;
&lt;p&gt;​	我们可以定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter &amp;#123;
    
    @Bean
    public PasswordEncoder passwordEncoder()&amp;#123;
        return new BCryptPasswordEncoder();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-3-2-前后端分离&#34;&gt;&lt;a href=&#34;#3-3-2-前后端分离&#34; class=&#34;headerlink&#34; title=&#34;3.3.2  前后端分离&#34;&gt;&lt;/a&gt;3.3.2  前后端分离&lt;/h3&gt;&lt;h4 id=&#34;1-准备工作-1&#34;&gt;&lt;a href=&#34;#1-准备工作-1&#34; class=&#34;headerlink&#34; title=&#34;1 准备工作&#34;&gt;&lt;/a&gt;1 准备工作&lt;/h4&gt;&lt;p&gt;数据库、实体类均和3.3.1中相同&lt;/p&gt;
&lt;p&gt;application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;spring:
  application:
    name: spring-security
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/mydb?characterEncoding=utf-8&amp;amp;serverTimezone=UTC
      username: root
      password: root
      driver-class-name: com.mysql.cj.jdbc.Driver
  redis:
    host: localhost
    port: 6379
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
logging:
  level:
    com:
      zjj:
        mapper: debug
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;统一返回类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.common;

import com.fasterxml.jackson.annotation.JsonInclude;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class ResponseResult&amp;lt;T&amp;gt; &amp;#123;
    /**
     * 状态码
     */
    private Integer code;
    /**
     * 提示信息，如果有错误时，前端可以获取该字段进行提示
     */
    private String msg;
    /**
     * 查询到的结果数据，
     */
    private T data;

    public ResponseResult(Integer code, String msg) &amp;#123;
        this.code = code;
        this.msg = msg;
    &amp;#125;

    public ResponseResult(Integer code, T data) &amp;#123;
        this.code = code;
        this.data = data;
    &amp;#125;

    public Integer getCode() &amp;#123;
        return code;
    &amp;#125;

    public void setCode(Integer code) &amp;#123;
        this.code = code;
    &amp;#125;

    public String getMsg() &amp;#123;
        return msg;
    &amp;#125;

    public void setMsg(String msg) &amp;#123;
        this.msg = msg;
    &amp;#125;

    public T getData() &amp;#123;
        return data;
    &amp;#125;

    public void setData(T data) &amp;#123;
        this.data = data;
    &amp;#125;

    public ResponseResult(Integer code, String msg, T data) &amp;#123;
        this.code = code;
        this.msg = msg;
        this.data = data;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;工具类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.SerializationException;
import com.alibaba.fastjson.parser.ParserConfig;
import org.springframework.util.Assert;
import java.nio.charset.Charset;

/**
 * Redis使用FastJson序列化
 * 
 * @author sg
 */
public class FastJsonRedisSerializer&amp;lt;T&amp;gt; implements RedisSerializer&amp;lt;T&amp;gt;
&amp;#123;

    public static final Charset DEFAULT_CHARSET = Charset.forName(&amp;quot;UTF-8&amp;quot;);

    private Class&amp;lt;T&amp;gt; clazz;

    static
    &amp;#123;
        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
    &amp;#125;

    public FastJsonRedisSerializer(Class&amp;lt;T&amp;gt; clazz)
    &amp;#123;
        super();
        this.clazz = clazz;
    &amp;#125;

    @Override
    public byte[] serialize(T t) throws SerializationException
    &amp;#123;
        if (t == null)
        &amp;#123;
            return new byte[0];
        &amp;#125;
        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);
    &amp;#125;

    @Override
    public T deserialize(byte[] bytes) throws SerializationException
    &amp;#123;
        if (bytes == null || bytes.length &amp;lt;= 0)
        &amp;#123;
            return null;
        &amp;#125;
        String str = new String(bytes, DEFAULT_CHARSET);

        return JSON.parseObject(str, clazz);
    &amp;#125;


    protected JavaType getJavaType(Class&amp;lt;?&amp;gt; clazz)
    &amp;#123;
        return TypeFactory.defaultInstance().constructType(clazz);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.util.Date;
import java.util.UUID;

/**
 * JWT工具类
 */
public class JwtUtil &amp;#123;

    //有效期为
    public static final Long JWT_TTL = 60 * 60 *1000L;// 60 * 60 *1000  一个小时
    //设置秘钥明文
    public static final String JWT_KEY = &amp;quot;sangeng&amp;quot;;

    public static String getUUID()&amp;#123;
        String token = UUID.randomUUID().toString().replaceAll(&amp;quot;-&amp;quot;, &amp;quot;&amp;quot;);
        return token;
    &amp;#125;
    
    /**
     * 生成jtw
     * @param subject token中要存放的数据（json格式）
     * @return
     */
    public static String createJWT(String subject) &amp;#123;
        JwtBuilder builder = getJwtBuilder(subject, null, getUUID());// 设置过期时间
        return builder.compact();
    &amp;#125;

    /**
     * 生成jtw
     * @param subject token中要存放的数据（json格式）
     * @param ttlMillis token超时时间
     * @return
     */
    public static String createJWT(String subject, Long ttlMillis) &amp;#123;
        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, getUUID());// 设置过期时间
        return builder.compact();
    &amp;#125;

    private static JwtBuilder getJwtBuilder(String subject, Long ttlMillis, String uuid) &amp;#123;
        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;
        SecretKey secretKey = generalKey();
        long nowMillis = System.currentTimeMillis();
        Date now = new Date(nowMillis);
        if(ttlMillis==null)&amp;#123;
            ttlMillis=JwtUtil.JWT_TTL;
        &amp;#125;
        long expMillis = nowMillis + ttlMillis;
        Date expDate = new Date(expMillis);
        return Jwts.builder()
                .setId(uuid)              //唯一的ID
                .setSubject(subject)   // 主题  可以是JSON数据
                .setIssuer(&amp;quot;sg&amp;quot;)     // 签发者
                .setIssuedAt(now)      // 签发时间
                .signWith(signatureAlgorithm, secretKey) //使用HS256对称加密算法签名, 第二个参数为秘钥
                .setExpiration(expDate);
    &amp;#125;

    /**
     * 创建token
     * @param id
     * @param subject
     * @param ttlMillis
     * @return
     */
    public static String createJWT(String id, String subject, Long ttlMillis) &amp;#123;
        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, id);// 设置过期时间
        return builder.compact();
    &amp;#125;

    public static void main(String[] args) throws Exception &amp;#123;
        String token = &amp;quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg&amp;quot;;
        Claims claims = parseJWT(token);
        System.out.println(claims);
    &amp;#125;

    /**
     * 生成加密后的秘钥 secretKey
     * @return
     */
    public static SecretKey generalKey() &amp;#123;
        byte[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);
        SecretKey key = new SecretKeySpec(encodedKey, 0, encodedKey.length, &amp;quot;AES&amp;quot;);
        return key;
    &amp;#125;
    
    /**
     * 解析
     *
     * @param jwt
     * @return
     * @throws Exception
     */
    public static Claims parseJWT(String jwt) throws Exception &amp;#123;
        SecretKey secretKey = generalKey();
        return Jwts.parser()
                .setSigningKey(secretKey)
                .parseClaimsJws(jwt)
                .getBody();
    &amp;#125;


&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.util;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.BoundSetOperations;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.concurrent.TimeUnit;

@SuppressWarnings(value = &amp;#123; &amp;quot;unchecked&amp;quot;, &amp;quot;rawtypes&amp;quot; &amp;#125;)
@Component
public class RedisCache
&amp;#123;
    @Autowired
    public RedisTemplate redisTemplate;

    /**
     * 缓存基本的对象，Integer、String、实体类等
     *
     * @param key 缓存的键值
     * @param value 缓存的值
     */
    public &amp;lt;T&amp;gt; void setCacheObject(final String key, final T value)
    &amp;#123;
        redisTemplate.opsForValue().set(key, value);
    &amp;#125;

    /**
     * 缓存基本的对象，Integer、String、实体类等
     *
     * @param key 缓存的键值
     * @param value 缓存的值
     * @param timeout 时间
     * @param timeUnit 时间颗粒度
     */
    public &amp;lt;T&amp;gt; void setCacheObject(final String key, final T value, final Integer timeout, final TimeUnit timeUnit)
    &amp;#123;
        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);
    &amp;#125;

    /**
     * 设置有效时间
     *
     * @param key Redis键
     * @param timeout 超时时间
     * @return true=设置成功；false=设置失败
     */
    public boolean expire(final String key, final long timeout)
    &amp;#123;
        return expire(key, timeout, TimeUnit.SECONDS);
    &amp;#125;

    /**
     * 设置有效时间
     *
     * @param key Redis键
     * @param timeout 超时时间
     * @param unit 时间单位
     * @return true=设置成功；false=设置失败
     */
    public boolean expire(final String key, final long timeout, final TimeUnit unit)
    &amp;#123;
        return redisTemplate.expire(key, timeout, unit);
    &amp;#125;

    /**
     * 获得缓存的基本对象。
     *
     * @param key 缓存键值
     * @return 缓存键值对应的数据
     */
    public &amp;lt;T&amp;gt; T getCacheObject(final String key)
    &amp;#123;
        ValueOperations&amp;lt;String, T&amp;gt; operation = redisTemplate.opsForValue();
        return operation.get(key);
    &amp;#125;

    /**
     * 删除单个对象
     *
     * @param key
     */
    public boolean deleteObject(final String key)
    &amp;#123;
        return redisTemplate.delete(key);
    &amp;#125;

    /**
     * 删除集合对象
     *
     * @param collection 多个对象
     * @return
     */
    public long deleteObject(final Collection collection)
    &amp;#123;
        return redisTemplate.delete(collection);
    &amp;#125;

    /**
     * 缓存List数据
     *
     * @param key 缓存的键值
     * @param dataList 待缓存的List数据
     * @return 缓存的对象
     */
    public &amp;lt;T&amp;gt; long setCacheList(final String key, final List&amp;lt;T&amp;gt; dataList)
    &amp;#123;
        Long count = redisTemplate.opsForList().rightPushAll(key, dataList);
        return count == null ? 0 : count;
    &amp;#125;

    /**
     * 获得缓存的list对象
     *
     * @param key 缓存的键值
     * @return 缓存键值对应的数据
     */
    public &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; getCacheList(final String key)
    &amp;#123;
        return redisTemplate.opsForList().range(key, 0, -1);
    &amp;#125;

    /**
     * 缓存Set
     *
     * @param key 缓存键值
     * @param dataSet 缓存的数据
     * @return 缓存数据的对象
     */
    public &amp;lt;T&amp;gt; BoundSetOperations&amp;lt;String, T&amp;gt; setCacheSet(final String key, final Set&amp;lt;T&amp;gt; dataSet)
    &amp;#123;
        BoundSetOperations&amp;lt;String, T&amp;gt; setOperation = redisTemplate.boundSetOps(key);
        Iterator&amp;lt;T&amp;gt; it = dataSet.iterator();
        while (it.hasNext())
        &amp;#123;
            setOperation.add(it.next());
        &amp;#125;
        return setOperation;
    &amp;#125;

    /**
     * 获得缓存的set
     *
     * @param key
     * @return
     */
    public &amp;lt;T&amp;gt; Set&amp;lt;T&amp;gt; getCacheSet(final String key)
    &amp;#123;
        return redisTemplate.opsForSet().members(key);
    &amp;#125;

    /**
     * 缓存Map
     *
     * @param key
     * @param dataMap
     */
    public &amp;lt;T&amp;gt; void setCacheMap(final String key, final Map&amp;lt;String, T&amp;gt; dataMap)
    &amp;#123;
        if (dataMap != null) &amp;#123;
            redisTemplate.opsForHash().putAll(key, dataMap);
        &amp;#125;
    &amp;#125;

    /**
     * 获得缓存的Map
     *
     * @param key
     * @return
     */
    public &amp;lt;T&amp;gt; Map&amp;lt;String, T&amp;gt; getCacheMap(final String key)
    &amp;#123;
        return redisTemplate.opsForHash().entries(key);
    &amp;#125;

    /**
     * 往Hash中存入数据
     *
     * @param key Redis键
     * @param hKey Hash键
     * @param value 值
     */
    public &amp;lt;T&amp;gt; void setCacheMapValue(final String key, final String hKey, final T value)
    &amp;#123;
        redisTemplate.opsForHash().put(key, hKey, value);
    &amp;#125;

    /**
     * 获取Hash中的数据
     *
     * @param key Redis键
     * @param hKey Hash键
     * @return Hash中的对象
     */
    public &amp;lt;T&amp;gt; T getCacheMapValue(final String key, final String hKey)
    &amp;#123;
        HashOperations&amp;lt;String, String, T&amp;gt; opsForHash = redisTemplate.opsForHash();
        return opsForHash.get(key, hKey);
    &amp;#125;

    /**
     * 删除Hash中的数据
     * 
     * @param key
     * @param hkey
     */
    public void delCacheMapValue(final String key, final String hkey)
    &amp;#123;
        HashOperations hashOperations = redisTemplate.opsForHash();
        hashOperations.delete(key, hkey);
    &amp;#125;

    /**
     * 获取多个Hash中的数据
     *
     * @param key Redis键
     * @param hKeys Hash键集合
     * @return Hash对象集合
     */
    public &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; getMultiCacheMapValue(final String key, final Collection&amp;lt;Object&amp;gt; hKeys)
    &amp;#123;
        return redisTemplate.opsForHash().multiGet(key, hKeys);
    &amp;#125;

    /**
     * 获得缓存的基本对象列表
     *
     * @param pattern 字符串前缀
     * @return 对象列表
     */
    public Collection&amp;lt;String&amp;gt; keys(final String pattern)
    &amp;#123;
        return redisTemplate.keys(pattern);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.util;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class WebUtils
&amp;#123;
    /**
     * 将字符串渲染到客户端
     * 
     * @param response 渲染对象
     * @param string 待渲染的字符串
     * @return null
     */
    public static String renderString(HttpServletResponse response, String string) &amp;#123;
        try
        &amp;#123;
            response.setStatus(200);
            response.setContentType(&amp;quot;application/json&amp;quot;);
            response.setCharacterEncoding(&amp;quot;utf-8&amp;quot;);
            response.getWriter().print(string);
        &amp;#125;
        catch (IOException e)
        &amp;#123;
            e.printStackTrace();
        &amp;#125;
        return null;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.config;

import com.zjj.util.FastJsonRedisSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
public class RedisConfig &amp;#123;

    @Bean
    @SuppressWarnings(value = &amp;#123; &amp;quot;unchecked&amp;quot;, &amp;quot;rawtypes&amp;quot; &amp;#125;)
    public RedisTemplate&amp;lt;Object, Object&amp;gt; redisTemplate(RedisConnectionFactory connectionFactory)
    &amp;#123;
        RedisTemplate&amp;lt;Object, Object&amp;gt; template = new RedisTemplate&amp;lt;&amp;gt;();
        template.setConnectionFactory(connectionFactory);

        FastJsonRedisSerializer serializer = new FastJsonRedisSerializer(Object.class);

        // 使用StringRedisSerializer来序列化和反序列化redis的key值
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(serializer);

        // Hash的key也采用StringRedisSerializer的序列化方式
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(serializer);

        template.afterPropertiesSet();
        return template;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-重写登录服务-ServiceImpl&#34;&gt;&lt;a href=&#34;#2-重写登录服务-ServiceImpl&#34; class=&#34;headerlink&#34; title=&#34;2  重写登录服务(ServiceImpl)&#34;&gt;&lt;/a&gt;2  重写登录服务(ServiceImpl)&lt;/h4&gt;&lt;p&gt;​	这里我们需要写一个LoginService 、LoginServiceImpl 以及&amp;#x3D;&amp;#x3D;认证服务&amp;#x3D;&amp;#x3D;  UserDetailServiceImpl (后续会详细解释)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.zjj.mapper.UserMapper;
import com.zjj.pojo.LoginUser;
import com.zjj.pojo.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

@Service
public class UserDetailServiceImpl implements UserDetailsService &amp;#123;
    @Autowired
    private UserMapper userMapper;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &amp;#123;
        LambdaQueryWrapper&amp;lt;User&amp;gt; qw = new LambdaQueryWrapper&amp;lt;&amp;gt;();
        qw.eq(User::getUserName, username);
        User user = userMapper.selectOne(qw);
        if (Objects.isNull(user)) &amp;#123;
            throw new UsernameNotFoundException(&amp;quot;没有该用户&amp;quot;);
        &amp;#125;

        // TODO 权限信息后序添加
        List&amp;lt;String&amp;gt; menus = userMapper.findMenuByUserId(user.getId());
        List&amp;lt;String&amp;gt; roles = userMapper.findRoleByUserId(user.getId());
        List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();

        
        for (String menu : menus) &amp;#123;
            res.add(menu);
        &amp;#125;
        for (String role : roles) &amp;#123;
            res.add(&amp;quot;ROLE_&amp;quot;+role);
        &amp;#125;
        // 用户的权限和角色直接赋值 的话 要注意写法
        /*
        1、我们没有user对象直接往回 new UserDetails(username,password,Authorities) 对象时，
            要注意Authorities手动String转化可以用 AuthorityUtils.commaSeparatedStringToAuthorityList(String str)
                但是里面的 str里面包含了权限以及角色，每个要用 “,” 间隔，而且角色开头要要拼接 ROLE_

        2、我们自定义了user 实现了 UserDetails 对象 我们重写了 getAuthorities属性，具体看这个类的注释
            他在初始化值的时候我们传参传递的是一个list对象，这个时候我们不需要用 “，” 间隔，但是角色前要加 ROLE_
         */
        return new LoginUser(user,res);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface LoginService &amp;#123;
    public ResponseResult login(User user);

    ResponseResult logout();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.zjj.mapper.UserMapper;
import com.zjj.pojo.LoginUser;
import com.zjj.pojo.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Service
public class UserDetailServiceImpl implements UserDetailsService &amp;#123;
    @Autowired
    private UserMapper userMapper;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &amp;#123;
        LambdaQueryWrapper&amp;lt;User&amp;gt; qw = new LambdaQueryWrapper&amp;lt;&amp;gt;();
        qw.eq(User::getUserName, username);
        User user = userMapper.selectOne(qw);
        if (Objects.isNull(user)) &amp;#123;
            throw new UsernameNotFoundException(&amp;quot;没有该用户&amp;quot;);
        &amp;#125;

        // TODO 权限信息后序添加
        List&amp;lt;String&amp;gt; menus = userMapper.findMenuByUserId(user.getId());
        List&amp;lt;String&amp;gt; roles = userMapper.findRoleByUserId(user.getId());
        List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();

        for (String menu : menus) &amp;#123;
            res.add(menu);
        &amp;#125;
        for (String role : roles) &amp;#123;
            res.add(&amp;quot;ROLE_&amp;quot;+role);
        &amp;#125;
        // 用户的权限和角色直接赋值 的话 要注意写法
        /*
        1、我们没有user对象直接往回 new UserDetails(username,password,Authorities) 对象时，
            要注意Authorities手动String转化可以用 AuthorityUtils.commaSeparatedStringToAuthorityList(String str)
                但是里面的 str里面包含了权限以及角色，每个要用 “,” 间隔，而且角色开头要要拼接 ROLE_

        2、我们自定义了user 实现了 UserDetails 对象 我们重写了 getAuthorities属性，具体看这个类的注释
            他在初始化值的时候我们传参传递的是一个list对象，这个时候我们不需要用 “，” 间隔，但是角色前要加 ROLE_
         */
        return new LoginUser(user,res);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-重写mapper层和对应的映射文件-1&#34;&gt;&lt;a href=&#34;#3-重写mapper层和对应的映射文件-1&#34; class=&#34;headerlink&#34; title=&#34;3 重写mapper层和对应的映射文件&#34;&gt;&lt;/a&gt;3 重写mapper层和对应的映射文件&lt;/h4&gt;&lt;p&gt;和3.3.1的准备相同&lt;/p&gt;
&lt;h4 id=&#34;4-配置类配置&#34;&gt;&lt;a href=&#34;#4-配置类配置&#34; class=&#34;headerlink&#34; title=&#34;4 配置类配置&#34;&gt;&lt;/a&gt;4 配置类配置&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter &amp;#123;


    @Bean
    public PasswordEncoder passwordEncoder()&amp;#123;
        return new BCryptPasswordEncoder();
    &amp;#125;

    @Override
    protected void configure(HttpSecurity http) throws Exception &amp;#123;
        http
                //关闭csrf
                .csrf().disable()
                //不通过Session获取SecurityContext
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeRequests()
                // 对于登录接口 允许匿名访问
                .antMatchers(&amp;quot;/user/login&amp;quot;).anonymous()
                // 除上面外的所有请求全部需要鉴权认证
                .anyRequest().authenticated();
    &amp;#125;

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception &amp;#123;
        return super.authenticationManagerBean();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-对接登录接口&#34;&gt;&lt;a href=&#34;#5-对接登录接口&#34; class=&#34;headerlink&#34; title=&#34;5 对接登录接口&#34;&gt;&lt;/a&gt;5 对接登录接口&lt;/h4&gt;&lt;p&gt;假定登录接口为	“&amp;#x2F;user&amp;#x2F;login”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class LoginController &amp;#123;

    @Autowired
    private LoginService loginService;

    @RequestMapping(&amp;quot;/user/login&amp;quot;)
    @ResponseBody
    public ResponseResult login(@RequestBody User user)&amp;#123;
        return loginService.login(user);
    &amp;#125;
    @RequestMapping(&amp;quot;/user/logout&amp;quot;)
    @ResponseBody
    public ResponseResult logout() &amp;#123;
        return loginService.logout();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5 测试接口&lt;/p&gt;
&lt;p&gt;这里用接口测试工具即可，我们没有登录页面，页面是前端提供的，所以我们只需要确保接口测试正确即可&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwL3VzZXIvbG9naW4=&#34;&gt;http://localhost:8080/user/login&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;#123;
    &amp;quot;userName&amp;quot;:&amp;quot;zhangsan&amp;quot;,
    &amp;quot;password&amp;quot;:&amp;quot;zhangsan&amp;quot;
    // &amp;quot;userName&amp;quot;:&amp;quot;lisi&amp;quot;,
    // &amp;quot;password&amp;quot;:&amp;quot;lisi&amp;quot;
    // &amp;quot;userName&amp;quot;:&amp;quot;wangwu&amp;quot;,
    // &amp;quot;password&amp;quot;:&amp;quot;wangwu&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20220825120818298.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;6-优化认证——引入Redis&#34;&gt;&lt;a href=&#34;#6-优化认证——引入Redis&#34; class=&#34;headerlink&#34; title=&#34;6 优化认证——引入Redis&#34;&gt;&lt;/a&gt;6 优化认证——引入Redis&lt;/h4&gt;&lt;p&gt;​	我们在项目中，不可能每次这种常用数据都去数据库访问，这样会给数据库造成极大的负担，导致我们的数据库宕机。因此我们引入的NoSQL数据库、缓存数据库 Redis 用来存储我们短期常用数据。但是问题又来了。怎么存储呢？&lt;/p&gt;
&lt;p&gt;​	引入 3.2.1SpringSecurity完整流程 &lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20211214144425527.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	我们每次的登录验证都需要经过 UsernamePasswordAuthenticationFilter ，在这个过滤器下我们必须得到一个认证的用户，所以我们在这里为了得到用户的认证信息我们老办法就是去数据库中查找，但是我们现在不想让他老去数据库中找，在他之前我们要是直接能得到这个认证过的用户岂不皆大欢喜，所以我们在他之前也加上一个过滤器用来查找每次请求是否有这个认证用户有的话我们就可以省略掉去数据库中查找他的信息的过程。&lt;/p&gt;
&lt;p&gt;​	那么问题又来了我们如何存储一个用户的信息呢？&lt;/p&gt;
&lt;p&gt;这里我们可以利用JWT根据我们的用户ID生成一个Token，以他为键值存储到redis中&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA3MDE3NS9hcnRpY2xlL2RldGFpbHMvMTE4NTU5Mjcy&#34;&gt;JWT详解&lt;/span&gt; ：除了讲解JWT，还很好的帮忙回顾了Token的优势&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.filter;

import com.zjj.pojo.LoginUser;
import com.zjj.util.JwtUtil;
import com.zjj.util.RedisCache;
import io.jsonwebtoken.Claims;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Objects;

@Component
public class JwtAuthenticationTokenFilter extends OncePerRequestFilter &amp;#123;

    @Autowired
    private RedisCache redisCache;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &amp;#123;
        //获取token
        String token = request.getHeader(&amp;quot;token&amp;quot;);
        if (!StringUtils.hasText(token)) &amp;#123;
            //放行
            /*
            * 解释一下，为什么没有Token还放行，因为没有token可以但是可能他是登录请求
            * 我们还是要放行的，不然所有人都登录不了，但是问题是如果不是为什么还要放行
            * 这里不用担心，如果不是登录请求他就可能会存在User对象的账户和密码，就无法完成第一步的认证工作，跟别说后面的鉴权了，所以他会直接被挡住
            * 其次我们倒数第二个过滤器就是为我们处理我们出现的问题的过滤器，出了问题让他解决就行了，这里的问题其实大多数都是token错误，需要重新认证
            * */
            filterChain.doFilter(request, response);
            return;
        &amp;#125;
        //解析token
        String userid;
        try &amp;#123;
            Claims claims = JwtUtil.parseJWT(token);
            userid = claims.getSubject();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
            throw new RuntimeException(&amp;quot;token非法&amp;quot;);
        &amp;#125;
        //从redis中获取用户信息
        String redisKey = &amp;quot;login:&amp;quot; + userid;
        LoginUser loginUser = redisCache.getCacheObject(redisKey);
        if(Objects.isNull(loginUser))&amp;#123;
            throw new RuntimeException(&amp;quot;用户未登录&amp;quot;);
        &amp;#125;
        //存入SecurityContextHolder ——&amp;gt; 认证成功的对象都在这
        //TODO 获取权限信息封装到Authentication中
        /*
        * 三参构造可以获取该对象是否是以认证状态
        *  */
        UsernamePasswordAuthenticationToken authenticationToken =
                new UsernamePasswordAuthenticationToken(loginUser,null,loginUser.getAuthorities());
        SecurityContextHolder.getContext().setAuthentication(authenticationToken);
        //放行
        filterChain.doFilter(request, response);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-修改配置类&#34;&gt;&lt;a href=&#34;#7-修改配置类&#34; class=&#34;headerlink&#34; title=&#34;7 修改配置类&#34;&gt;&lt;/a&gt;7 修改配置类&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.config;

import com.zjj.filter.JwtAuthenticationTokenFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;


@Configuration
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter &amp;#123;

    @Autowired
    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;
    @Autowired
    private AuthenticationEntryPoint authenticationEntryPoint;
    @Autowired
    private AccessDeniedHandler accessDeniedHandler;

    @Override
    protected void configure(HttpSecurity http) throws Exception &amp;#123;

        // 认证、授权错误处理
        http.exceptionHandling()
                .authenticationEntryPoint(authenticationEntryPoint)
                .accessDeniedHandler(accessDeniedHandler);
        // 认证过滤器添加
        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);

        // url拦截
        http.authorizeRequests()
                // anonymous 匿名 没有认证的才可以访问，permitALL 谁都能访问，不需要认证
                .antMatchers(&amp;quot;/user/login&amp;quot;,&amp;quot;/login&amp;quot;,&amp;quot;/loginPage&amp;quot;).anonymous()
                .antMatchers(&amp;quot;/login.html&amp;quot;,&amp;quot;/fail.html&amp;quot;).permitAll()
                // authenticated 认证了才能访问
                .anyRequest().authenticated();

        //关闭CSRF
        http.csrf().disable()
                // 不通过Session获取SecurityContext
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
        // Cors
        http.cors();
    &amp;#125;

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception &amp;#123;
        return super.authenticationManagerBean();
    &amp;#125;


    @Bean
    public PasswordEncoder getPasswordEncoder()&amp;#123;
        return new BCryptPasswordEncoder();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-测试&#34;&gt;&lt;a href=&#34;#8-测试&#34; class=&#34;headerlink&#34; title=&#34;8 测试&#34;&gt;&lt;/a&gt;8 测试&lt;/h4&gt;&lt;p&gt;这里要打开你的 redis服务端 ，如果不是本地的，你要去配置中添加配置&lt;/p&gt;
&lt;p&gt;最后根据 步骤5 再次测试，成功后你的redis 中会多出一组数据，这就是我们的Token，具体步骤不再演示！&lt;/p&gt;
&lt;h1 id=&#34;四、UserDetailsService详解&#34;&gt;&lt;a href=&#34;#四、UserDetailsService详解&#34; class=&#34;headerlink&#34; title=&#34;四、UserDetailsService详解&#34;&gt;&lt;/a&gt;四、UserDetailsService详解&lt;/h1&gt;&lt;p&gt;​	当什么也没有配置的时候，账号和密码是由Spring Security定义生成的。而在实际项目中账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制**&amp;#x3D;&amp;#x3D;认证逻辑&amp;#x3D;&amp;#x3D;**。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20211214151515385.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	如果需要自定义逻辑时，只需要实现UserDetailsService接口即可。接口定义如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-03.jpg&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;1-返回值&#34;&gt;&lt;a href=&#34;#1-返回值&#34; class=&#34;headerlink&#34; title=&#34;1.返回值&#34;&gt;&lt;/a&gt;1.返回值&lt;/h2&gt;&lt;p&gt;​	返回值UserDetails是一个接口，定义如下&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-04.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	要想返回UserDetails的实例就只能返回接口的实现类。Spring Security中提供了如下的实例。对于我们只需要使用里面的User类即可。注意User的全限定路径是：&lt;/p&gt;
&lt;p&gt;​	org.springframework.security.core.userdetails.User&lt;/p&gt;
&lt;p&gt;​	此处经常和系统中自己开发的User类弄混。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-05.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	在User类中提供了很多方法和属性。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-06.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	其中构造方法有两个，调用其中任何一个都可以实例化UserDetails实现类User类的实例。而三个参数的构造方法实际上也是调用7个参数的构造方法。&lt;/p&gt;
&lt;p&gt;​	username:用户名&lt;/p&gt;
&lt;p&gt;​	password:密码&lt;/p&gt;
&lt;p&gt;​	authorities：用户具有的权限。此处不允许为null&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-07.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	此处的用户名应该是客户端传递过来的用户名。而密码应该是从数据库中查询出来的密码。Spring Security会根据User中的password和客户端传递过来的password进行比较。如果相同则表示认证通过，如果不相同表示认证失败。&lt;/p&gt;
&lt;p&gt;​	authorities里面的权限对于后面学习授权是很有必要的，包含的所有内容为此用户具有的权限，如有里面没有包含某个权限，而在做某个事情时必须包含某个权限则会出现403。&amp;#x3D;&amp;#x3D;通常都是通过AuthorityUtils.commaSeparatedStringToAuthorityList(“”)来创建authorities集合对象的&amp;#x3D;&amp;#x3D;。参数是一个字符串，&amp;#x3D;&amp;#x3D;多个权限使用逗号分隔，角色信息前要加&lt;font color=blue&gt;  ROLE_  &lt;/font&gt;来标识不然会当成权限信息处理&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	我们的项目中对于用户信息的表，肯定是不同的，我们可以利用这个类，对于用来认证的UserDetails对象进行进一步封装，自定义我们的认证对象。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.pojo;

import com.alibaba.fastjson.annotation.JSONField;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@AllArgsConstructor
@NoArgsConstructor
@Data
@ToString
public class LoginUser implements UserDetails &amp;#123;
    private User user;

    private List&amp;lt;String&amp;gt; permission;

    public LoginUser(User user, List&amp;lt;String&amp;gt; permission) &amp;#123;
        this.user = user;
        this.permission = permission;
    &amp;#125;

    @JSONField(serialize = false) //redis存储的话会出现问题，不让他序列化，主要为了安全
    List&amp;lt;SimpleGrantedAuthority&amp;gt; authorities ;
    @Override
    public Collection&amp;lt;? extends GrantedAuthority&amp;gt; getAuthorities() &amp;#123;
        // 把permission中的String类型的权限信息封装成 SimpleGrantedAuthority 对象
        if (null != authorities) return authorities;//要是有信息就不用再授权了
        authorities = permission.stream()
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());
        return authorities;
    &amp;#125;

    @Override
    public String getPassword() &amp;#123;
        return user.getPassword();
    &amp;#125;

    @Override
    public String getUsername() &amp;#123;
        return user.getUsername();
    &amp;#125;

    @Override
    public boolean isAccountNonExpired() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isAccountNonLocked() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isCredentialsNonExpired() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isEnabled() &amp;#123;
        return true;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	这里只是一个例子，我重写了getAuthorities() ，其他的信息我们可以根据我们自己的数据库的User信息进行初始化，这里我为了测试方便其余都事 TRUE 打开了他们的权限&lt;/p&gt;
&lt;p&gt;​	这里我自定义个 permission 用来存储我们查询到的权限信息，用它来对authorities来初始化 以及对getAuthorities() 的重写，authorities 是我们根据SpringSecurity 要求封装的权限集合 ，但是要注意，不要让他存储到redis中，redis存储的话会出现问题，不要让他序列化，主要为了安全。&lt;/p&gt;
&lt;p&gt;​	这样我们每次认证的时候就直接可以利用这个认证对象，而我们的原生User还可以进行别的操作，这样做更加灵活。&amp;#x3D;&amp;#x3D;推荐********&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-方法参数&#34;&gt;&lt;a href=&#34;#2-方法参数&#34; class=&#34;headerlink&#34; title=&#34;2.方法参数&#34;&gt;&lt;/a&gt;2.方法参数&lt;/h2&gt;&lt;p&gt;​	方法参数表示用户名。此值是客户端表单传递过来的数据。默认情况下必须叫username，否则无法接收。&lt;/p&gt;
&lt;h2 id=&#34;3-异常&#34;&gt;&lt;a href=&#34;#3-异常&#34; class=&#34;headerlink&#34; title=&#34;3.异常&#34;&gt;&lt;/a&gt;3.异常&lt;/h2&gt;&lt;p&gt;​	UsernameNotFoundException 用户名没有发现异常。在loadUserByUsername中是需要通过自己的逻辑从数据库中取值的。如果通过用户名没有查询到对应的数据，应该抛出UsernameNotFoundException，系统就知道用户名没有查询到。&lt;/p&gt;
&lt;h1 id=&#34;五、配置类说明-1-—-认证配置&#34;&gt;&lt;a href=&#34;#五、配置类说明-1-—-认证配置&#34; class=&#34;headerlink&#34; title=&#34;五、配置类说明 1 — 认证配置&#34;&gt;&lt;/a&gt;五、配置类说明 1 — 认证配置&lt;/h1&gt;&lt;h2 id=&#34;1-失败跳转&#34;&gt;&lt;a href=&#34;#1-失败跳转&#34; class=&#34;headerlink&#34; title=&#34;1.失败跳转&#34;&gt;&lt;/a&gt;1.失败跳转&lt;/h2&gt;&lt;p&gt;​	表单处理中成功会跳转到一个地址，失败也可以跳转到一个地址中。&lt;/p&gt;
&lt;h3 id=&#34;1-1编写页面&#34;&gt;&lt;a href=&#34;#1-1编写页面&#34; class=&#34;headerlink&#34; title=&#34;1.1编写页面&#34;&gt;&lt;/a&gt;1.1编写页面&lt;/h3&gt;&lt;p&gt;​	在src&amp;#x2F;main&amp;#x2F;resources&amp;#x2F;static下新建fail.html并编写如下内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        操作失败，请重新登录. &amp;lt;a href=&amp;quot;/login.html&amp;quot;&amp;gt;跳转&amp;lt;/a&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-2修改表单配置&#34;&gt;&lt;a href=&#34;#1-2修改表单配置&#34; class=&#34;headerlink&#34; title=&#34;1.2修改表单配置&#34;&gt;&lt;/a&gt;1.2修改表单配置&lt;/h3&gt;&lt;p&gt;​	在配置方法中表单认证部分添加failureForwardUrl()方法，表示登录失败跳转的url。此处依然是POST请求，所以跳转到可以接收POST请求的控制器&amp;#x2F;fail中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// 表单认证
http.formLogin()
    .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
    .successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
    .failureForwardUrl(&amp;quot;/fail&amp;quot;)     //登录失败跳转地址
    .loginPage(&amp;quot;/login.html&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-3添加控制器方法&#34;&gt;&lt;a href=&#34;#1-3添加控制器方法&#34; class=&#34;headerlink&#34; title=&#34;1.3添加控制器方法&#34;&gt;&lt;/a&gt;1.3添加控制器方法&lt;/h3&gt;&lt;p&gt;​	在控制器类中添加控制器方法，方法映射路径&amp;#x2F;fail。此处要注意：由于是POST请求访问&amp;#x2F;fail。所以如果返回值直接转发到fail.html中，及时有效果，控制台也会报警告，提示fail.html不支持POST访问方式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@PostMapping(&amp;quot;/fail&amp;quot;)
public String fail()&amp;#123;
    return &amp;quot;redirect:/fail.html&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-4设置fail-html不需要认证&#34;&gt;&lt;a href=&#34;#1-4设置fail-html不需要认证&#34; class=&#34;headerlink&#34; title=&#34;1.4设置fail.html不需要认证&#34;&gt;&lt;/a&gt;1.4设置fail.html不需要认证&lt;/h3&gt;&lt;p&gt;​	认证失败跳转到fail.html页面中，所以必须配置fail.html不需要被认证。需要修改配置类中内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// url 拦截
http.authorizeRequests()
        .antMatchers(&amp;quot;/login.html&amp;quot;).permitAll() //login.html不需要被认证
        .antMatchers(&amp;quot;/fail.html&amp;quot;).permitAll()  //fail.html不需要被认证
        .anyRequest().authenticated();//所有的请求都必须被认证。必须登录后才能访问。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-设置请求账户和密码的参数名&#34;&gt;&lt;a href=&#34;#2-设置请求账户和密码的参数名&#34; class=&#34;headerlink&#34; title=&#34;2.设置请求账户和密码的参数名&#34;&gt;&lt;/a&gt;2.设置请求账户和密码的参数名&lt;/h2&gt;&lt;h3 id=&#34;2-1源码简介&#34;&gt;&lt;a href=&#34;#2-1源码简介&#34; class=&#34;headerlink&#34; title=&#34;2.1源码简介&#34;&gt;&lt;/a&gt;2.1源码简介&lt;/h3&gt;&lt;p&gt;​	当进行登录时会执行UsernamePasswordAuthenticationFilter过滤器。&lt;/p&gt;
&lt;p&gt;​	usernamePasrameter:账户参数名&lt;/p&gt;
&lt;p&gt;​	passwordParameter:密码参数名&lt;/p&gt;
&lt;p&gt;​	postOnly&amp;#x3D;true:默认情况下只允许POST请求。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-10-1661413396371.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;2-2修改配置&#34;&gt;&lt;a href=&#34;#2-2修改配置&#34; class=&#34;headerlink&#34; title=&#34;2.2修改配置&#34;&gt;&lt;/a&gt;2.2修改配置&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// 表单认证
http.formLogin()
        .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
        .successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
        .failureForwardUrl(&amp;quot;/fail&amp;quot;)     //登录失败跳转地址
        .loginPage(&amp;quot;/login.html&amp;quot;)
        .usernameParameter(&amp;quot;myusername&amp;quot;)
        .passwordParameter(&amp;quot;mypassword&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-3修改页面&#34;&gt;&lt;a href=&#34;#2-3修改页面&#34; class=&#34;headerlink&#34; title=&#34;2.3修改页面&#34;&gt;&lt;/a&gt;2.3修改页面&lt;/h3&gt;&lt;p&gt;​	修改login.html&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;form action = &amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    用户名：&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;myusername&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    密码:&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;mypassword&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;登录&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-自定义登录成功处理器&#34;&gt;&lt;a href=&#34;#3-自定义登录成功处理器&#34; class=&#34;headerlink&#34; title=&#34;3.自定义登录成功处理器&#34;&gt;&lt;/a&gt;3.自定义登录成功处理器&lt;/h2&gt;&lt;h3 id=&#34;3-1源码分析&#34;&gt;&lt;a href=&#34;#3-1源码分析&#34; class=&#34;headerlink&#34; title=&#34;3.1源码分析&#34;&gt;&lt;/a&gt;3.1源码分析&lt;/h3&gt;&lt;p&gt;​	使用successForwardUrl()时表示成功后转发请求到地址。内部是通过successHandler（）方法进行控制成功后交给哪个类进行处理&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-11-1661413396370.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	ForwardAuthenticationSuccessHandler内部就是最简单的请求转发。由于是请求转发，当遇到需要跳转到站外或在前后端分离的项目中就无法使用了。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-12-1661413396371.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	当需要控制登录成功后去做一些事情时，可以进行自定义认证成功控制器。&lt;/p&gt;
&lt;h3 id=&#34;3-2代码实现&#34;&gt;&lt;a href=&#34;#3-2代码实现&#34; class=&#34;headerlink&#34; title=&#34;3.2代码实现&#34;&gt;&lt;/a&gt;3.2代码实现&lt;/h3&gt;&lt;h4 id=&#34;3-2-1自定义类&#34;&gt;&lt;a href=&#34;#3-2-1自定义类&#34; class=&#34;headerlink&#34; title=&#34;3.2.1自定义类&#34;&gt;&lt;/a&gt;3.2.1自定义类&lt;/h4&gt;&lt;p&gt;​	新建类MyAuthenticationSuccessHandler 实现 AuthenticationSuccessHandler ，编写如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyAuthenticationSuccessHandler implements AuthenticationSuccessHandler &amp;#123;
    @Override
    public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException &amp;#123;
        //Principal 主体，存放了登录用户的信息
        User user = (User)authentication.getPrincipal();
        System.out.println(user.getUsername());
        System.out.println(user.getPassword());//密码输出为null
        System.out.println(user.getAuthorities());
        //重定向到百度。这只是一个示例，具体需要看项目业务需求
        httpServletResponse.sendRedirect(&amp;quot;http://www.baidu.com&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-2-2修改配置项&#34;&gt;&lt;a href=&#34;#3-2-2修改配置项&#34; class=&#34;headerlink&#34; title=&#34;3.2.2修改配置项&#34;&gt;&lt;/a&gt;3.2.2修改配置项&lt;/h4&gt;&lt;p&gt;使用successHandler()方法设置成功后交给哪个对象进行处理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// 表单认证
http.formLogin()
        .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
        .successHandler(new MyAuthenticationSuccessHandler())
        //.successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
        .failureForwardUrl(&amp;quot;/fail&amp;quot;)     //登录失败跳转地址
        .loginPage(&amp;quot;/login.html&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-自定义登录失败处理器&#34;&gt;&lt;a href=&#34;#4-自定义登录失败处理器&#34; class=&#34;headerlink&#34; title=&#34;4.自定义登录失败处理器&#34;&gt;&lt;/a&gt;4.自定义登录失败处理器&lt;/h2&gt;&lt;h3 id=&#34;4-1源码分析&#34;&gt;&lt;a href=&#34;#4-1源码分析&#34; class=&#34;headerlink&#34; title=&#34;4.1源码分析&#34;&gt;&lt;/a&gt;4.1源码分析&lt;/h3&gt;&lt;p&gt;​	failureForwardUrl()内部调用的是failureHandler()方法&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;ForwardAuthenticationFailureHandler&lt;/strong&gt;中也是一个请求转发，并在request作用域中设置			 SPRING_SECURITY_LAST_EXCEPTION的key，内容为异常对象。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-14.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;4-2代码实现&#34;&gt;&lt;a href=&#34;#4-2代码实现&#34; class=&#34;headerlink&#34; title=&#34;4.2代码实现&#34;&gt;&lt;/a&gt;4.2代码实现&lt;/h3&gt;&lt;h4 id=&#34;4-2-1新建控制器&#34;&gt;&lt;a href=&#34;#4-2-1新建控制器&#34; class=&#34;headerlink&#34; title=&#34;4.2.1新建控制器&#34;&gt;&lt;/a&gt;4.2.1新建控制器&lt;/h4&gt;&lt;p&gt;​	新建MyForwardAuthenticationFailureHandler实现 AuthenticationFailureHandler 。在方法中添加重定向语句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyForwardAuthenticationFailureHandler implements AuthenticationFailureHandler &amp;#123;
    @Override
    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException &amp;#123;
        httpServletResponse.sendRedirect(&amp;quot;/fail.html&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-2-2修改配置类&#34;&gt;&lt;a href=&#34;#4-2-2修改配置类&#34; class=&#34;headerlink&#34; title=&#34;4.2.2修改配置类&#34;&gt;&lt;/a&gt;4.2.2修改配置类&lt;/h4&gt;&lt;p&gt;​	修改配置类中表单登录部分。设置失败时交给失败处理器进行操作。failureForwardUrl和failureHandler不可共存。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;        // 表单认证
        http.formLogin()
                .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
                .successHandler(new MyAuthenticationSuccessHandler())
                //.successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
                .failureHandler(new MyForwardAuthenticationFailureHandler())
//                .failureForwardUrl(&amp;quot;/fail&amp;quot;)     //登录失败跳转地址
                .loginPage(&amp;quot;/login.html&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-总结&#34;&gt;&lt;a href=&#34;#5-总结&#34; class=&#34;headerlink&#34; title=&#34;5 总结&#34;&gt;&lt;/a&gt;5 总结&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;        // http.formLogin() 所有和表单有关系的
        http.formLogin()
                // 登录页面，走一个controller
                // 注意要和，LoginProcessingUrl 配合使用，不然在表单中的action中 url 失效
                // 因为只配置loginPage()， 会导致在初始化的时候将loginProcessingUrl的配置相同化，可以自己debug 在AbstractAuthenticationFilterConfigurer 的 updateAuthenticationDefaults 方法
                // 也就是说loginPage(&amp;quot;/login&amp;quot;)  loginProcessingUrl(&amp;quot;/login&amp;quot;),导致提交信息失败最终导致认证失败
                .loginPage(&amp;quot;/showLogin&amp;quot;)
                // 当发现什么URL时，把请求转发给自定义登录逻辑
                // 表单提交的地址 action ,他就会直接去认证进入到 UserDetailsServiceImpl
                // 去这里进行用户的验证 和 用户权限信息的集体封装
                .loginProcessingUrl(&amp;quot;/login&amp;quot;)
            
                // 登录成功的操作
                // 下面两种方法都可以，推荐第二种，两种同时写第一个直接失效
                // 第一种写法，要注意在写映射的时候要注意请求的方法 get/post
                .successForwardUrl(&amp;quot;/showMain&amp;quot;)
                .successHandler((request, response, authentication) -&amp;gt; &amp;#123;
                    System.out.println(&amp;quot;successHandler invoked&amp;quot;);
                    // 我们在每次请求同一个页面尽量使用重定向，要是请求转发
                    // 因为请求转发是浏览器的行为，每次都要请求服务器并且重复提交表单，不好
                    // response.sendRedirect(&amp;quot;/fail&amp;quot;);
                    LoginUser loginUser = (LoginUser) authentication.getPrincipal();
                    for (String s : loginUser.getPermission()) &amp;#123;
                        System.out.println(s);
                    &amp;#125;
                &amp;#125;)
                // 登录失败的操作
                // 内容和上述情况相同，只是一个成功的一个失败的
                .failureForwardUrl(&amp;quot;/fail&amp;quot;)
                // 当前端表单传递过来的用户名参数、密码参数名和后端不对应，可以利用下列方法
                // 指定前端传递过来的用户名参数名称
                //.usernameParameter(&amp;quot;MyuserName&amp;quot;)
                // 指定前端传递过来的密码参数名称
                // .passwordParameter(&amp;quot;MypassWord&amp;quot;)
        ;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;六、用户授权&#34;&gt;&lt;a href=&#34;#六、用户授权&#34; class=&#34;headerlink&#34; title=&#34;六、用户授权&#34;&gt;&lt;/a&gt;六、用户授权&lt;/h1&gt;&lt;h2 id=&#34;1-权限系统的作用&#34;&gt;&lt;a href=&#34;#1-权限系统的作用&#34; class=&#34;headerlink&#34; title=&#34;1 权限系统的作用&#34;&gt;&lt;/a&gt;1 权限系统的作用&lt;/h2&gt;&lt;p&gt;​	例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。&lt;/p&gt;
&lt;p&gt;​	总结起来就是&lt;a&gt;&lt;strong&gt;不同的用户可以使用不同的功能&lt;/strong&gt;&lt;/a&gt;。这就是权限系统要去实现的效果。&lt;/p&gt;
&lt;h2 id=&#34;2-授权基本流程&#34;&gt;&lt;a href=&#34;#2-授权基本流程&#34; class=&#34;headerlink&#34; title=&#34;2 授权基本流程&#34;&gt;&lt;/a&gt;2 授权基本流程&lt;/h2&gt;&lt;p&gt;​	在SpringSecurity中，会使用默认的&lt;strong&gt;FilterSecurityInterceptor&lt;/strong&gt;来进行权限校验。在 &lt;strong&gt;FilterSecurityInterceptor&lt;/strong&gt;中会从&lt;strong&gt;SecurityContextHolder&lt;/strong&gt;获取其&lt;strong&gt;Authentication&lt;/strong&gt;，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。&lt;/p&gt;
&lt;p&gt;​	&lt;a&gt;所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication。&lt;/a&gt;然后设置我们的资源所需要的权限即可。&lt;/p&gt;
&lt;h2 id=&#34;3-RBAC权限模型&#34;&gt;&lt;a href=&#34;#3-RBAC权限模型&#34; class=&#34;headerlink&#34; title=&#34;3 RBAC权限模型&#34;&gt;&lt;/a&gt;3 RBAC权限模型&lt;/h2&gt;&lt;p&gt;参考博客：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F6dzc1Mjg5MDkxMy9hcnRpY2xlL2RldGFpbHMvMTI0NDYxOTUy&#34;&gt;https://blog.csdn.net/qzw752890913/article/details/124461952&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;​	RBAC（Role Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联，而不是直接将权限赋予用户。&lt;/p&gt;
&lt;p&gt;​	一个用户拥有若干个角色，每个角色拥有若干个权限，这样就构成了“用户-角色-权限”的授权模型。这种授权模型的好处在于，不必每次创建用户时都进行权限分配的操作，只要分配用户相应的角色即可，而且角色的权限变更比用户的权限变更要少得多，减少频繁设置。&lt;/p&gt;
&lt;p&gt;RBAC模型中，用户与角色之间、角色与权限之间，一般是多对多的关系。&lt;/p&gt;
&lt;p&gt;所谓“多对多”，就是双向的一对多。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20220825151716381.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	&lt;/p&gt;
&lt;h2 id=&#34;4-授权实现&#34;&gt;&lt;a href=&#34;#4-授权实现&#34; class=&#34;headerlink&#34; title=&#34;4 授权实现&#34;&gt;&lt;/a&gt;4 授权实现&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于配置——在SpringSecurity的配置类中和登录页一样进行权限配置(&lt;font color=red&gt;不推荐，过程繁琐，开发麻烦&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;基于注解——直接可以对我们次处理，也就是对我们的控制层进行权限的设置(&lt;font color=red&gt;强烈推荐&lt;/font&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-1-基于配置授权&#34;&gt;&lt;a href=&#34;#4-1-基于配置授权&#34; class=&#34;headerlink&#34; title=&#34;4.1 基于配置授权&#34;&gt;&lt;/a&gt;4.1 基于配置授权&lt;/h3&gt;&lt;p&gt;这里没什么好说的，从刚开始我们就开始写了权限的认证，就是我们重写的配置类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// http.authorizeRequests() 所有和授权相关
http.authorizeRequests()
    // 这里面支持 正则 和 ant表达式	
    // anonymous 匿名 没有认证的才可以访问，permitALL 谁都能访问，不需要认证
    .antMatchers(&amp;quot;/user/login&amp;quot;,&amp;quot;/login&amp;quot;,&amp;quot;/loginPage&amp;quot;).anonymous()
    .antMatchers(&amp;quot;/js/**&amp;quot;).permitAll()
    // authenticated 认证了才能访问
    .anyRequest().authenticated();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样写，除了静态资源权限需要这么写，其余请求折磨写太麻烦，我们的业务众多，这样写极大的增加了业务开发的负担，再加上静态资源我们都已经前后端分离也就涉及不到他的权限问题，所以这种方式了解就好。主要重点放在注解学习上。&lt;/p&gt;
&lt;h3 id=&#34;4-2-基于注解授权&#34;&gt;&lt;a href=&#34;#4-2-基于注解授权&#34; class=&#34;headerlink&#34; title=&#34;4.2 基于注解授权&#34;&gt;&lt;/a&gt;4.2 基于注解授权&lt;/h3&gt;&lt;h4 id=&#34;准备阶段&#34;&gt;&lt;a href=&#34;#准备阶段&#34; class=&#34;headerlink&#34; title=&#34;准备阶段&#34;&gt;&lt;/a&gt;准备阶段&lt;/h4&gt;&lt;p&gt;​	SpringSecurity为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。&lt;/p&gt;
&lt;p&gt;​	&amp;#x3D;&amp;#x3D;但是要使用它我们需要先开启相关配置。&amp;#x3D;&amp;#x3D;，&amp;#x3D;&amp;#x3D;不打开直接用会 500&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@EnableGlobalMethodSecurity(prePostEnabled = true)//启动类上添加注解
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;找到对应的接口&#34;&gt;&lt;a href=&#34;#找到对应的接口&#34; class=&#34;headerlink&#34; title=&#34;找到对应的接口&#34;&gt;&lt;/a&gt;找到对应的接口&lt;/h4&gt;&lt;p&gt;这里我们找到需要授权的接口，对他们进行授权，主要有3个主要注解 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Secured&lt;/li&gt;
&lt;li&gt;@PerAuthorize() 、@PostAuthorize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要对我们的接口上添加相对应的注解即可，例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class loginController&amp;#123;
    @Secured(&amp;quot;ROLE_abc&amp;quot;) //专门用于判断是否具有角色的。能写在方法或类上。参数要以ROLE_开头。
    @RequestMapping(&amp;quot;/toMain&amp;quot;)
    public String toMain()&amp;#123;
        return &amp;quot;redirect:/main.html&amp;quot;;
    &amp;#125;
    
    @RequestMapping(&amp;quot;/hello3&amp;quot;)
    @ResponseBody
    // 是方法或类级别注解。
    @PreAuthorize(&amp;quot;hasAnyAuthority(&amp;#39;demo:delete&amp;#39;)&amp;quot;)
    public String testThree()&amp;#123;
        return &amp;quot;success!&amp;quot;;
    &amp;#125;

    @RequestMapping(&amp;quot;/hello4&amp;quot;)
    @ResponseBody
    //  是方法或类级别注解。
    @PostAuthorize(&amp;quot;hasAnyRole(&amp;#39;ROLE_管理员&amp;#39;)&amp;quot;)
    public String testFour()&amp;#123;
        return &amp;quot;success!&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;七、配置类说明-2-—访问控制&#34;&gt;&lt;a href=&#34;#七、配置类说明-2-—访问控制&#34; class=&#34;headerlink&#34; title=&#34;七、配置类说明 2 —访问控制&#34;&gt;&lt;/a&gt;七、配置类说明 2 —访问控制&lt;/h1&gt;&lt;p&gt;在前面讲解了认证中所有常用配置，主要是对http.formLogin()进行操作。而在配置类中		http.authorizeRequests()主要是对url进行控制，也就是我们所说的授权（访问控制）。http.authorizeRequests()也支持连缀写法，总体公式为：&lt;/p&gt;
&lt;p&gt;​	url匹配规则.权限控制方法&lt;/p&gt;
&lt;p&gt;通过上面的公式可以有很多url匹配规则和很多权限控制方法。这些内容进行各种组合就形成了Spring Security中的授权。&lt;/p&gt;
&lt;p&gt;​	在所有匹配规则中取所有规则的交集。配置顺序影响了之后授权效果，越是具体的应该放在前面，越是笼统的应该放到后面。	&lt;/p&gt;
&lt;h2 id=&#34;1-anyRequest&#34;&gt;&lt;a href=&#34;#1-anyRequest&#34; class=&#34;headerlink&#34; title=&#34;1.anyRequest()&#34;&gt;&lt;/a&gt;1.anyRequest()&lt;/h2&gt;&lt;p&gt;​	在之前认证过程中我们就已经使用过anyRequest()，表示匹配所有的请求。一般情况下此方法都会使用，设置全部内容都需要进行认证。&lt;/p&gt;
&lt;p&gt;​	代码示例:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;anyRequest().authenticated();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-antMatcher&#34;&gt;&lt;a href=&#34;#2-antMatcher&#34; class=&#34;headerlink&#34; title=&#34;2.antMatcher()&#34;&gt;&lt;/a&gt;2.antMatcher()&lt;/h2&gt;&lt;p&gt;​	方法定义如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public C antMatchers(String... antPatterns)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	参数是不定向参数，每个参数是一个 正则&amp;#x2F;ant表达式，用于匹配URL规则。&lt;/p&gt;
&lt;p&gt;​	规则如下：&lt;/p&gt;
&lt;p&gt;​	? 匹配一个字符&lt;/p&gt;
&lt;p&gt;​	* 匹配0个或多个字符&lt;/p&gt;
&lt;p&gt;​	** 匹配0个或多个目录&lt;/p&gt;
&lt;p&gt;​	在实际项目中经常需要放行所有静态资源，下面演示放行js文件夹下所有脚本文件。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;.antMatchers(&amp;quot;/js/**&amp;quot;).permitAll()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还有一种配置方式是只要是.js文件都放行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;antMatchers(&amp;quot;/**/*.js&amp;quot;).permitAll()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-regexMatchers&#34;&gt;&lt;a href=&#34;#3-regexMatchers&#34; class=&#34;headerlink&#34; title=&#34;3.regexMatchers()&#34;&gt;&lt;/a&gt;3.regexMatchers()&lt;/h2&gt;&lt;h3 id=&#34;3-1介绍&#34;&gt;&lt;a href=&#34;#3-1介绍&#34; class=&#34;headerlink&#34; title=&#34;3.1介绍&#34;&gt;&lt;/a&gt;3.1介绍&lt;/h3&gt;&lt;p&gt;使用正则表达式进行匹配。和antMatchers()主要的区别就是参数，antMatchers()参数是ant表达式，regexMatchers()参数是正则表达式。&lt;/p&gt;
&lt;p&gt;演示所有以.js结尾的文件都被放行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;.regexMatchers(&amp;quot;.+[.]js&amp;quot;).permitAll()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-2两个参数时使用方式&#34;&gt;&lt;a href=&#34;#3-2两个参数时使用方式&#34; class=&#34;headerlink&#34; title=&#34;3.2两个参数时使用方式&#34;&gt;&lt;/a&gt;3.2两个参数时使用方式&lt;/h3&gt;&lt;p&gt;无论是antMatchers()还是regexMatchers()都具有两个参数的方法，其中第一个参数都是HttpMethod，表示请求方式，当设置了HttpMethod后表示只有设定的特定的请求方式才执行对应的权限设置。&lt;/p&gt;
&lt;p&gt;枚举类型HttpMethod内置属性如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-15.jpg&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;4-内置访问控制方法介绍&#34;&gt;&lt;a href=&#34;#4-内置访问控制方法介绍&#34; class=&#34;headerlink&#34; title=&#34;4 内置访问控制方法介绍&#34;&gt;&lt;/a&gt;4 内置访问控制方法介绍&lt;/h2&gt;&lt;p&gt;​	Spring Security匹配了URL后调用了permitAll()表示不需要认证，随意访问。在Spring Security中提供了多种内置控制。&lt;/p&gt;
&lt;h3 id=&#34;1-permitAll&#34;&gt;&lt;a href=&#34;#1-permitAll&#34; class=&#34;headerlink&#34; title=&#34;1.permitAll()&#34;&gt;&lt;/a&gt;1.permitAll()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;permitAll()表示所匹配的URL任何人都允许访问。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-authenticated&#34;&gt;&lt;a href=&#34;#2-authenticated&#34; class=&#34;headerlink&#34; title=&#34;2.authenticated()&#34;&gt;&lt;/a&gt;2.authenticated()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;authenticated()表示所匹配的URL都需要被认证才能访问。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-anonymous&#34;&gt;&lt;a href=&#34;#3-anonymous&#34; class=&#34;headerlink&#34; title=&#34;3.anonymous()&#34;&gt;&lt;/a&gt;3.anonymous()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;anonymous()表示可以匿名访问匹配的URL。和permitAll()效果类似，只是设置为anonymous()的url会执行filter 链中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	官方源码定义如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-18.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;4-denyAll&#34;&gt;&lt;a href=&#34;#4-denyAll&#34; class=&#34;headerlink&#34; title=&#34;4.denyAll()&#34;&gt;&lt;/a&gt;4.denyAll()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;denyAll()表示所匹配的URL都不允许被访问。&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-19.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;5-rememberMe&#34;&gt;&lt;a href=&#34;#5-rememberMe&#34; class=&#34;headerlink&#34; title=&#34;5.rememberMe()&#34;&gt;&lt;/a&gt;5.rememberMe()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;被“remember me”的用户允许访问&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-20.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;6-fullyAuthenticated&#34;&gt;&lt;a href=&#34;#6-fullyAuthenticated&#34; class=&#34;headerlink&#34; title=&#34;6.fullyAuthenticated()&#34;&gt;&lt;/a&gt;6.fullyAuthenticated()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;如果用户不是被remember me的，才可以访问&lt;/strong&gt;。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-21.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;7-hasIpAddress-String&#34;&gt;&lt;a href=&#34;#7-hasIpAddress-String&#34; class=&#34;headerlink&#34; title=&#34;7.hasIpAddress(String)&#34;&gt;&lt;/a&gt;7.hasIpAddress(String)&lt;/h3&gt;&lt;p&gt;如果请求是指定的IP就运行访问。&lt;/p&gt;
&lt;p&gt;​	可以通过request.getRemoteAddr()获取ip地址。&lt;/p&gt;
&lt;p&gt;​	需要注意的是在本机进行测试时localhost和127.0.0.1输出的ip地址是不一样的。&lt;/p&gt;
&lt;p&gt;​	当浏览器中通过localhost进行访问时控制台打印的内容：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-25-1661415211434.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	当浏览器中通过127.0.0.1访问时控制台打印的内容：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-26-1661415211434.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	当浏览器中通过具体ip进行访问时控制台打印内容：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-27-1606734864126-1661415211434.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	使用Spring Security时经常会看见403（无权限），默认情况下显示的效果如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-28-1661415211434.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	而在实际项目中可能都是一个异步请求，显示上述效果对于用户就不是特别友好了。Spring Security支持自定义权限受限。&lt;/p&gt;
&lt;h4 id=&#34;1-新建类&#34;&gt;&lt;a href=&#34;#1-新建类&#34; class=&#34;headerlink&#34; title=&#34;1.新建类&#34;&gt;&lt;/a&gt;1.新建类&lt;/h4&gt;&lt;p&gt;​	新建类实现&lt;strong&gt;AccessDeniedHandler&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component
public class MyAccessDeniedHandler implements AccessDeniedHandler &amp;#123;
    @Override
    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e) throws IOException, ServletException &amp;#123;
        httpServletResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);
        httpServletResponse.setHeader(&amp;quot;Content-Type&amp;quot;,&amp;quot;application/json;charset=utf-8&amp;quot;);
        PrintWriter out = httpServletResponse.getWriter();
        out.write(&amp;quot;&amp;#123;\&amp;quot;status\&amp;quot;:\&amp;quot;error\&amp;quot;,\&amp;quot;msg\&amp;quot;:\&amp;quot;权限不足，请联系管理员!\&amp;quot;&amp;#125;&amp;quot;);
        out.flush();
        out.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-修改配置类&#34;&gt;&lt;a href=&#34;#2-修改配置类&#34; class=&#34;headerlink&#34; title=&#34;2.修改配置类&#34;&gt;&lt;/a&gt;2.修改配置类&lt;/h4&gt;&lt;p&gt;​	配置类中重点添加异常处理器。设置访问受限后交给哪个对象进行处理。&lt;/p&gt;
&lt;p&gt;​	myAccessDeniedHandler是在配置类中进行自动注入的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//异常处理
http.exceptionHandling()
        .accessDeniedHandler(myAccessDeniedHandler);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-总结-1&#34;&gt;&lt;a href=&#34;#5-总结-1&#34; class=&#34;headerlink&#34; title=&#34;5 总结&#34;&gt;&lt;/a&gt;5 总结&lt;/h2&gt;&lt;p&gt;在选择特定请求时 2&amp;#x2F;3 任选其一 效果相同，主要注意内置访问控制方法的选择&lt;/p&gt;
&lt;h1 id=&#34;八、配置类说明-3-—基于表达式的访问控制&#34;&gt;&lt;a href=&#34;#八、配置类说明-3-—基于表达式的访问控制&#34; class=&#34;headerlink&#34; title=&#34;八、配置类说明 3 —基于表达式的访问控制&#34;&gt;&lt;/a&gt;八、配置类说明 3 —基于表达式的访问控制&lt;/h1&gt;&lt;h2 id=&#34;1-access-方法使用&#34;&gt;&lt;a href=&#34;#1-access-方法使用&#34; class=&#34;headerlink&#34; title=&#34;1.access()方法使用&#34;&gt;&lt;/a&gt;1.access()方法使用&lt;/h2&gt;&lt;p&gt;​	之前学习的登录用户权限判断实际上底层实现都是调用access(表达式)&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-29.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	可以通过access()实现和之前学习的权限控制完成相同的功能。&lt;/p&gt;
&lt;h3 id=&#34;1-1以hasRole和permitAll举例&#34;&gt;&lt;a href=&#34;#1-1以hasRole和permitAll举例&#34; class=&#34;headerlink&#34; title=&#34;1.1以hasRole和permitAll举例&#34;&gt;&lt;/a&gt;1.1以hasRole和permitAll举例&lt;/h3&gt;&lt;p&gt;​	下面代码和直接使用permitAll()和hasRole()是等效的。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-30.jpg&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;2-自定义权限验证方法&#34;&gt;&lt;a href=&#34;#2-自定义权限验证方法&#34; class=&#34;headerlink&#34; title=&#34;2.自定义权限验证方法&#34;&gt;&lt;/a&gt;2.自定义权限验证方法&lt;/h2&gt;&lt;p&gt;​	虽然这里面已经包含了很多的表达式(方法)但是在实际项目中很有可能出现需要自己自定义逻辑的情况。&lt;/p&gt;
&lt;p&gt;​	判断登录用户是否具有访问当前URL权限。&lt;/p&gt;
&lt;h3 id=&#34;2-1新建接口及实现类&#34;&gt;&lt;a href=&#34;#2-1新建接口及实现类&#34; class=&#34;headerlink&#34; title=&#34;2.1新建接口及实现类&#34;&gt;&lt;/a&gt;2.1新建接口及实现类&lt;/h3&gt;&lt;p&gt;​	新建接口com.msb.service.MyService后新建实现类。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface MyService &amp;#123;
    boolean hasPermission(HttpServletRequest request, Authentication authentication);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component
public class MyServiceImpl implements MyService &amp;#123;
    @Override
    public boolean hasPermission(HttpServletRequest request, Authentication authentication) &amp;#123;
        Object obj = authentication.getPrincipal();
        if(obj instanceof UserDetails)&amp;#123;
            UserDetails user = (UserDetails) obj;
            Collection&amp;lt;? extends GrantedAuthority&amp;gt; authorities = user.getAuthorities();
            return authorities.contains(new SimpleGrantedAuthority(request.getRequestURI()));
        &amp;#125;
        return false;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2修改配置类&#34;&gt;&lt;a href=&#34;#2-2修改配置类&#34; class=&#34;headerlink&#34; title=&#34;2.2修改配置类&#34;&gt;&lt;/a&gt;2.2修改配置类&lt;/h3&gt;&lt;p&gt;​	在access中通过@bean的id名.方法(参数)的形式进行调用&lt;/p&gt;
&lt;p&gt;​	配置类中修改如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; // url 拦截 (授权)
http.authorizeRequests()
        .antMatchers(&amp;quot;/login.html&amp;quot;).access(&amp;quot;permitAll&amp;quot;)
        .antMatchers(&amp;quot;/fail.html&amp;quot;).permitAll()
        // @Bean的名字，表示引入某个Bean，我们的Bean在主动命名的情况下，都是以首字母小写命名
        .anyRequest().access(&amp;quot;@myServiceImpl.hasPermission(request,authentication)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;九、基于注解的访问控制&#34;&gt;&lt;a href=&#34;#九、基于注解的访问控制&#34; class=&#34;headerlink&#34; title=&#34;九、基于注解的访问控制&#34;&gt;&lt;/a&gt;九、基于注解的访问控制&lt;/h1&gt;&lt;p&gt;​	在Spring Security中提供了一些访问控制的注解。这些注解都是默认是都不可用的，需要通过@EnableGlobalMethodSecurity进行开启后使用。&lt;/p&gt;
&lt;p&gt;​	&amp;#x3D;&amp;#x3D;如果设置的条件允许，程序正常执行。如果不允许会报500&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;​	这些注解可以写到Service接口或方法上上也可以写到Controller或Controller的方法上。通常情况下都是写在控制器方法上的，控制接口URL是否允许被访问。&lt;/p&gt;
&lt;h2 id=&#34;1-Secured&#34;&gt;&lt;a href=&#34;#1-Secured&#34; class=&#34;headerlink&#34; title=&#34;1.@Secured&#34;&gt;&lt;/a&gt;1.@Secured&lt;/h2&gt;&lt;p&gt;​	@Secured是&amp;#x3D;&amp;#x3D;专门用于判断是否具有角色的&amp;#x3D;&amp;#x3D;。能写在&amp;#x3D;&amp;#x3D;方法或类&amp;#x3D;&amp;#x3D;上。&amp;#x3D;&amp;#x3D;参数要以ROLE_开头&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-32-1661416083118.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;1-1实现步骤&#34;&gt;&lt;a href=&#34;#1-1实现步骤&#34; class=&#34;headerlink&#34; title=&#34;1.1实现步骤&#34;&gt;&lt;/a&gt;1.1实现步骤&lt;/h3&gt;&lt;h4 id=&#34;1-1-1-开启注解&#34;&gt;&lt;a href=&#34;#1-1-1-开启注解&#34; class=&#34;headerlink&#34; title=&#34;1.1.1 开启注解&#34;&gt;&lt;/a&gt;1.1.1 开启注解&lt;/h4&gt;&lt;p&gt;​	在启动类(也可以在配置类等能够扫描的类上)上添加@EnableGlobalMethodSecurity(securedEnabled &amp;#x3D; true)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
@EnableGlobalMethodSecurity(securedEnabled = true)
public class MyApp &amp;#123;
    public static void main(String [] args)&amp;#123;
        SpringApplication.run(MyApp.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-1-2在控制器方法上添加-Secured注解&#34;&gt;&lt;a href=&#34;#1-1-2在控制器方法上添加-Secured注解&#34; class=&#34;headerlink&#34; title=&#34;1.1.2在控制器方法上添加@Secured注解&#34;&gt;&lt;/a&gt;1.1.2在控制器方法上添加@Secured注解&lt;/h4&gt;&lt;p&gt;​	在LoginController中方法上添加注解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Secured(&amp;quot;ROLE_abc&amp;quot;)
@RequestMapping(&amp;quot;/toMain&amp;quot;)
public String toMain()&amp;#123;
    return &amp;quot;redirect:/main.html&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-1-3配置类&#34;&gt;&lt;a href=&#34;#1-1-3配置类&#34; class=&#34;headerlink&#34; title=&#34;1.1.3配置类&#34;&gt;&lt;/a&gt;1.1.3配置类&lt;/h4&gt;&lt;p&gt;​	配置类中方法配置保留最基本的配置即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;protected void configure(HttpSecurity http) throws Exception &amp;#123;
    // 表单认证
    http.formLogin()
            .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
            .successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
            .loginPage(&amp;quot;/login.html&amp;quot;);

    // url 拦截
    http.authorizeRequests()
            .antMatchers(&amp;quot;/login.html&amp;quot;).permitAll() //login.html不需要被认证
            .anyRequest().authenticated();//所有的请求都必须被认证。必须登录后才能访问。

    //关闭csrf防护
    http.csrf().disable();

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-PreAuthorize-x2F-PostAuthorize&#34;&gt;&lt;a href=&#34;#2-PreAuthorize-x2F-PostAuthorize&#34; class=&#34;headerlink&#34; title=&#34;2.@PreAuthorize&amp;#x2F;@PostAuthorize&#34;&gt;&lt;/a&gt;2.@PreAuthorize&amp;#x2F;@PostAuthorize&lt;/h2&gt;&lt;p&gt;​	@PreAuthorize和@PostAuthorize都是方法或类级别注解。&lt;/p&gt;
&lt;p&gt;​	**@PreAuthorize ** 表示访问方法或类在&amp;#x3D;&amp;#x3D;执行之前先判断权限&amp;#x3D;&amp;#x3D;，大多情况下都是使用这个注解，注解的参数和access()方法参数取值相同，都是权限表达式。&lt;/p&gt;
&lt;p&gt;​	@&lt;strong&gt;PostAuthorize&lt;/strong&gt; 表示&amp;#x3D;&amp;#x3D;方法或类执行结束后判断权限&amp;#x3D;&amp;#x3D;，此注解很少被使用到。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/image-20220825155542682.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;2-1实现步骤&#34;&gt;&lt;a href=&#34;#2-1实现步骤&#34; class=&#34;headerlink&#34; title=&#34;2.1实现步骤&#34;&gt;&lt;/a&gt;2.1实现步骤&lt;/h3&gt;&lt;h4 id=&#34;2-1-1开启注解&#34;&gt;&lt;a href=&#34;#2-1-1开启注解&#34; class=&#34;headerlink&#34; title=&#34;2.1.1开启注解&#34;&gt;&lt;/a&gt;2.1.1开启注解&lt;/h4&gt;&lt;p&gt;​	在启动类中开启@PreAuthorize注解。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class MyApp &amp;#123;
    public static void main(String [] args)&amp;#123;
        SpringApplication.run(MyApp.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-1-2添加-PreAuthorize&#34;&gt;&lt;a href=&#34;#2-1-2添加-PreAuthorize&#34; class=&#34;headerlink&#34; title=&#34;2.1.2添加@PreAuthorize&#34;&gt;&lt;/a&gt;2.1.2添加@PreAuthorize&lt;/h4&gt;&lt;p&gt;​	在控制器方法上添加@PreAuthorize，参数可以是任何access()支持的表达式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@PreAuthorize(&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;)
@RequestMapping(&amp;quot;/toMain&amp;quot;)
public String toMain()&amp;#123;
    return &amp;quot;redirect:/main.html&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-自定义权限校验方法-针对Pre注解&#34;&gt;&lt;a href=&#34;#3-自定义权限校验方法-针对Pre注解&#34; class=&#34;headerlink&#34; title=&#34;3.自定义权限校验方法(针对Pre注解)&#34;&gt;&lt;/a&gt;3.自定义权限校验方法(针对Pre注解)&lt;/h2&gt;&lt;p&gt;我们如果觉得单纯验证不合适，或者说不符合我们的业务我们也可以自定义方法&lt;/p&gt;
&lt;h3 id=&#34;其它权限校验方法&#34;&gt;&lt;a href=&#34;#其它权限校验方法&#34; class=&#34;headerlink&#34; title=&#34;其它权限校验方法&#34;&gt;&lt;/a&gt;其它权限校验方法&lt;/h3&gt;&lt;p&gt;​	我们前面都是使用@PreAuthorize注解，然后在在其中使用的是hasAuthority方法进行校验。SpringSecurity还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole等。&lt;/p&gt;
&lt;p&gt;​	这里我们先不急着去介绍这些方法，我们先去理解hasAuthority的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;hasAuthority&lt;/strong&gt;方法实际是执行到了&lt;strong&gt;SecurityExpressionRoot&lt;/strong&gt;的&lt;strong&gt;hasAuthority&lt;/strong&gt;，大家只要断点调试既可知道它内部的校验原理。&lt;/p&gt;
&lt;p&gt;​	它内部其实是调用&lt;strong&gt;authentication&lt;/strong&gt;的&lt;strong&gt;getAuthorities&lt;/strong&gt;方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;hasAnyAuthority&lt;/strong&gt;方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @PreAuthorize(&amp;quot;hasAnyAuthority(&amp;#39;admin&amp;#39;,&amp;#39;test&amp;#39;,&amp;#39;system:dept:list&amp;#39;)&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;strong&gt;hasRole&lt;/strong&gt;要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 &lt;strong&gt;ROLE_&lt;/strong&gt; 后再去比较。所以这种情况下要用用户对应的权限也要有 &lt;strong&gt;ROLE_&lt;/strong&gt; 这个前缀才可以。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @PreAuthorize(&amp;quot;hasRole(&amp;#39;system:dept:list&amp;#39;)&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;strong&gt;hasAnyRole&lt;/strong&gt; 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 &lt;strong&gt;ROLE_&lt;/strong&gt; 后再去比较。所以这种情况下要用用户对应的权限也要有 &lt;strong&gt;ROLE_&lt;/strong&gt; 这个前缀才可以。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @PreAuthorize(&amp;quot;hasAnyRole(&amp;#39;admin&amp;#39;,&amp;#39;system:dept:list&amp;#39;)&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;自定义权限校验方法&#34;&gt;&lt;a href=&#34;#自定义权限校验方法&#34; class=&#34;headerlink&#34; title=&#34;自定义权限校验方法&#34;&gt;&lt;/a&gt;自定义权限校验方法&lt;/h3&gt;&lt;p&gt;​	我们也可以定义自己的权限校验方法，在@PreAuthorize注解中使用我们的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component(&amp;quot;ex&amp;quot;)
public class MyExpressionRoot &amp;#123;
    // 一定要返回一个Bool值
    public boolean hasAuthority(String authority)&amp;#123;
        //获取当前用户的权限
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        LoginUser loginUser = (LoginUser) authentication.getPrincipal();
        List&amp;lt;String&amp;gt; permissions = loginUser.getPermissions();
        //判断用户权限集合中是否存在authority
        return permissions.contains(authority);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 &lt;strong&gt;在SPEL表达式中使用 @ex相当于获取容器中bean的名字为ex的对象。然后再调用这个对象的hasAuthority方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @RequestMapping(&amp;quot;/hello&amp;quot;)
    @PreAuthorize(&amp;quot;@ex.hasAuthority(&amp;#39;system:dept:list&amp;#39;)&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十、自定义失败处理&#34;&gt;&lt;a href=&#34;#十、自定义失败处理&#34; class=&#34;headerlink&#34; title=&#34;十、自定义失败处理&#34;&gt;&lt;/a&gt;十、自定义失败处理&lt;/h1&gt;&lt;p&gt;​	我们还希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道SpringSecurity的异常处理机制。&lt;/p&gt;
&lt;p&gt;​	在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。&lt;/p&gt;
&lt;p&gt;​	如果是&amp;#x3D;&amp;#x3D;认证过程中出现的异常&amp;#x3D;&amp;#x3D;会被封装成&lt;strong&gt;AuthenticationException&lt;/strong&gt;然后调用&lt;strong&gt;AuthenticationEntryPoint&lt;/strong&gt;对象的方法去进行异常处理。&lt;/p&gt;
&lt;p&gt;​	如果是&amp;#x3D;&amp;#x3D;授权过程中出现的异常&amp;#x3D;&amp;#x3D;会被封装成&lt;strong&gt;AccessDeniedException&lt;/strong&gt;然后调用&lt;strong&gt;AccessDeniedHandler&lt;/strong&gt;对象的方法去进行异常处理。&lt;/p&gt;
&lt;p&gt;​	所以如果我们&amp;#x3D;&amp;#x3D;需要自定义异常处理&amp;#x3D;&amp;#x3D;，我们只需要&amp;#x3D;&amp;#x3D;自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity即可&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;h2 id=&#34;①自定义实现类&#34;&gt;&lt;a href=&#34;#①自定义实现类&#34; class=&#34;headerlink&#34; title=&#34;①自定义实现类&#34;&gt;&lt;/a&gt;①自定义实现类&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component
public class AccessDeniedHandlerImpl implements AccessDeniedHandler &amp;#123;
    @Override
    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException &amp;#123;
        ResponseResult result = new ResponseResult(HttpStatus.FORBIDDEN.value(), &amp;quot;权限不足&amp;quot;);
        String json = JSON.toJSONString(result);
        WebUtils.renderString(response,json);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component
public class AuthenticationEntryPointImpl implements AuthenticationEntryPoint &amp;#123;
    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException &amp;#123;
        ResponseResult result = new ResponseResult(HttpStatus.UNAUTHORIZED.value(), &amp;quot;认证失败请重新登录&amp;quot;);
        String json = JSON.toJSONString(result);
        WebUtils.renderString(response,json);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;②配置给SpringSecurity&#34;&gt;&lt;a href=&#34;#②配置给SpringSecurity&#34; class=&#34;headerlink&#34; title=&#34;②配置给SpringSecurity&#34;&gt;&lt;/a&gt;②配置给SpringSecurity&lt;/h2&gt;&lt;p&gt;​	先注入对应的处理器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @Autowired
    private AuthenticationEntryPoint authenticationEntryPoint;

    @Autowired
    private AccessDeniedHandler accessDeniedHandler;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	然后我们可以使用HttpSecurity对象的方法去配置。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;        http.exceptionHandling()
            .authenticationEntryPoint(authenticationEntryPoint)
            .accessDeniedHandler(accessDeniedHandler);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十一、Remember-Me功能实现&#34;&gt;&lt;a href=&#34;#十一、Remember-Me功能实现&#34; class=&#34;headerlink&#34; title=&#34;十一、Remember Me功能实现&#34;&gt;&lt;/a&gt;十一、Remember Me功能实现&lt;/h1&gt;&lt;p&gt;​	Spring Security 中Remember Me为“记住我”功能，用户只需要在登录时添加remember-me复选框，取值为true。Spring Security会自动把用户信息存储到数据源中，以后就可以不登录进行访问。&lt;/p&gt;
&lt;h2 id=&#34;1-添加依赖&#34;&gt;&lt;a href=&#34;#1-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;1.添加依赖&#34;&gt;&lt;/a&gt;1.添加依赖&lt;/h2&gt;&lt;p&gt;​	Spring Security实现Remember Me 功能时底层实现依赖Spring-JDBC，所以需要导入Spring-JDBC。以后多使用MyBatis框架而很少直接导入spring-jdbc，所以此处导入mybatis启动器&lt;/p&gt;
&lt;p&gt;同时还需要添加MySQL驱动&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.1.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-配置数据源&#34;&gt;&lt;a href=&#34;#2-配置数据源&#34; class=&#34;headerlink&#34; title=&#34;2.配置数据源&#34;&gt;&lt;/a&gt;2.配置数据源&lt;/h2&gt;&lt;p&gt;​	在application.properties中配置数据源。请确保数据库中已经存在security数据库&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;properties&#34;&gt;spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mashibing
spring.datasource.username=root
spring.datasource.password=root
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-编写配置&#34;&gt;&lt;a href=&#34;#3-编写配置&#34; class=&#34;headerlink&#34; title=&#34;3.编写配置&#34;&gt;&lt;/a&gt;3.编写配置&lt;/h2&gt;&lt;p&gt;​	新建com.msb.config.RememberMeConfig类，并创建Bean对象&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Configuration
public class RememberMeConfig &amp;#123;
    @Autowired
    private DataSource dataSource;
    @Bean
    public PersistentTokenRepository getPersistentTokenRepository() &amp;#123;
        JdbcTokenRepositoryImpl jdbcTokenRepositoryImpl=new JdbcTokenRepositoryImpl();
        jdbcTokenRepositoryImpl.setDataSource(dataSource);
        //自动建表，第一次启动时需要，第二次启动时注释掉
//        jdbcTokenRepositoryImpl.setCreateTableOnStartup(true);
        return jdbcTokenRepositoryImpl;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-修改SecurityConfig&#34;&gt;&lt;a href=&#34;#4-修改SecurityConfig&#34; class=&#34;headerlink&#34; title=&#34;4.修改SecurityConfig&#34;&gt;&lt;/a&gt;4.修改SecurityConfig&lt;/h2&gt;&lt;p&gt;​	在SecurityConfig中添加RememberMeConfig和UserDetailsService实现类对象，并自动注入。&lt;/p&gt;
&lt;p&gt;​	在configure中添加下面配置内容。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;http.rememberMe()
    .userDetailsService(userDetailsService) //登录逻辑交给哪个对象
    .tokenRepository(repository);   //持久层对象
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-在客户端页面中添加复选框&#34;&gt;&lt;a href=&#34;#5-在客户端页面中添加复选框&#34; class=&#34;headerlink&#34; title=&#34;5.在客户端页面中添加复选框&#34;&gt;&lt;/a&gt;5.在客户端页面中添加复选框&lt;/h2&gt;&lt;p&gt;​	在客户端登录页面中添加remember-me的复选框，只要用户勾选了复选框下次就不需要进行登录了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;form action = &amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    用户名：&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    密码:&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;password&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;remember-me&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;br/&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;登录&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-有效时间&#34;&gt;&lt;a href=&#34;#6-有效时间&#34; class=&#34;headerlink&#34; title=&#34;6.有效时间&#34;&gt;&lt;/a&gt;6.有效时间&lt;/h2&gt;&lt;p&gt;​	默认情况下重启项目后登录状态失效了。但是可以通过设置状态有效时间，即使项目重新启动下次也可以正常登录。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//remember Me
http.rememberMe()
        .tokenValiditySeconds(120)//单位：秒
        .tokenRepository(repository)
        .userDetailsService(userDetailsServiceImpl);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十二、Thymeleaf中Spring-Security的使用&#34;&gt;&lt;a href=&#34;#十二、Thymeleaf中Spring-Security的使用&#34; class=&#34;headerlink&#34; title=&#34;十二、Thymeleaf中Spring Security的使用&#34;&gt;&lt;/a&gt;十二、Thymeleaf中Spring Security的使用&lt;/h1&gt;&lt;p&gt;​	Spring Security可以在一些视图技术中进行控制显示效果。例如：JSP或Thymeleaf。在非前后端分离且使用Spring Boot的项目中多使用Thymeleaf作为视图展示技术。&lt;/p&gt;
&lt;p&gt;​	Thymeleaf对Spring Security的支持都放在thymeleaf-extras-springsecurityX中，目前最新版本为5。所以需要在项目中添加此jar包的依赖和thymeleaf的依赖。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.thymeleaf.extras&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;thymeleaf-extras-springsecurity5&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.0.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	在html页面中引入thymeleaf命名空间和security命名空间&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;
      xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;
xmlns:sec=&amp;quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-获取属性&#34;&gt;&lt;a href=&#34;#1-获取属性&#34; class=&#34;headerlink&#34; title=&#34;1.获取属性&#34;&gt;&lt;/a&gt;1.获取属性&lt;/h2&gt;&lt;p&gt;​	可以在html页面中通过 sec:authentication&amp;#x3D;””获取UsernamePasswordAuthenticationToken中所有getXXX的内容，包含父类中的getXXX的内容。&lt;/p&gt;
&lt;p&gt;​	根据源码得出下面属性：&lt;/p&gt;
&lt;p&gt;​	l name：登录账号名称&lt;/p&gt;
&lt;p&gt;​	l principal：登录主体，在自定义登录逻辑中是UserDet ails&lt;/p&gt;
&lt;p&gt;​	l credentials：凭证&lt;/p&gt;
&lt;p&gt;​	l authorities：权限和角色&lt;/p&gt;
&lt;p&gt;​	l details：实际上是WebAuthenticationDetails的实例。可以获取remoteAddress(客户端ip)和sessionId(当	前sessionId)&lt;/p&gt;
&lt;h3 id=&#34;1-1实现步骤：&#34;&gt;&lt;a href=&#34;#1-1实现步骤：&#34; class=&#34;headerlink&#34; title=&#34;1.1实现步骤：&#34;&gt;&lt;/a&gt;1.1实现步骤：&lt;/h3&gt;&lt;h4 id=&#34;1-1-1新建demo-html&#34;&gt;&lt;a href=&#34;#1-1-1新建demo-html&#34; class=&#34;headerlink&#34; title=&#34;1.1.1新建demo.html&#34;&gt;&lt;/a&gt;1.1.1新建demo.html&lt;/h4&gt;&lt;p&gt;​	在项目resources中新建templates文件夹，在templates中新建demo.html页面&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-34.jpg&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;1-1-2编写demo-html&#34;&gt;&lt;a href=&#34;#1-1-2编写demo-html&#34; class=&#34;headerlink&#34; title=&#34;1.1.2编写demo.html&#34;&gt;&lt;/a&gt;1.1.2编写demo.html&lt;/h4&gt;&lt;p&gt;​	在demo.html中编写下面内容，测试获取到的值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;
      xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;
      xmlns:sec=&amp;quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    登录账号:&amp;lt;span sec:authentication=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    登录账号:&amp;lt;span sec:authentication=&amp;quot;principal.username&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    凭证：&amp;lt;span sec:authentication=&amp;quot;credentials&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    权限和角色：&amp;lt;span sec:authentication=&amp;quot;authorities&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    客户端地址：&amp;lt;span sec:authentication=&amp;quot;details.remoteAddress&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    sessionId：&amp;lt;span sec:authentication=&amp;quot;details.sessionId&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-1-3编写控制器&#34;&gt;&lt;a href=&#34;#1-1-3编写控制器&#34; class=&#34;headerlink&#34; title=&#34;1.1.3编写控制器&#34;&gt;&lt;/a&gt;1.1.3编写控制器&lt;/h4&gt;&lt;p&gt;​	thymeleaf页面需要控制转发，在控制器类中编写下面方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;/demo&amp;quot;)
public String demo()&amp;#123;
    return &amp;quot;demo&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-权限判断&#34;&gt;&lt;a href=&#34;#2-权限判断&#34; class=&#34;headerlink&#34; title=&#34;2.权限判断&#34;&gt;&lt;/a&gt;2.权限判断&lt;/h2&gt;&lt;p&gt;​	在html页面中可以使用sec:authorize&amp;#x3D;”表达式”进行权限控制，判断是否显示某些内容。表达式的内容和access(表达式)的用法相同。如果用户具有指定的权限，则显示对应的内容；如果表达式不成立，则不显示对应的元素。&lt;/p&gt;
&lt;h3 id=&#34;2-1不同权限的用户显示不同的按钮&#34;&gt;&lt;a href=&#34;#2-1不同权限的用户显示不同的按钮&#34; class=&#34;headerlink&#34; title=&#34;2.1不同权限的用户显示不同的按钮&#34;&gt;&lt;/a&gt;2.1不同权限的用户显示不同的按钮&lt;/h3&gt;&lt;h4 id=&#34;2-1-1设置用户角色和权限&#34;&gt;&lt;a href=&#34;#2-1-1设置用户角色和权限&#34; class=&#34;headerlink&#34; title=&#34;2.1.1设置用户角色和权限&#34;&gt;&lt;/a&gt;2.1.1设置用户角色和权限&lt;/h4&gt;&lt;p&gt;​	设定用户具有admin，&amp;#x2F;insert，&amp;#x2F;delete权限ROLE_abc角色。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;return new User(username,password, 
                AuthorityUtils.commaSeparatedStringToAuthorityList(&amp;quot;admin,ROLE_abc,/insert,/delete&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-1-2控制页面显示效果&#34;&gt;&lt;a href=&#34;#2-1-2控制页面显示效果&#34; class=&#34;headerlink&#34; title=&#34;2.1.2控制页面显示效果&#34;&gt;&lt;/a&gt;2.1.2控制页面显示效果&lt;/h4&gt;&lt;p&gt;在页面中根据用户权限和角色判断页面中显示的内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;通过权限判断：
&amp;lt;button sec:authorize=&amp;quot;hasAuthority(&amp;#39;/insert&amp;#39;)&amp;quot;&amp;gt;新增&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasAuthority(&amp;#39;/delete&amp;#39;)&amp;quot;&amp;gt;删除&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasAuthority(&amp;#39;/update&amp;#39;)&amp;quot;&amp;gt;修改&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasAuthority(&amp;#39;/select&amp;#39;)&amp;quot;&amp;gt;查看&amp;lt;/button&amp;gt;
&amp;lt;br/&amp;gt;
通过角色判断：
&amp;lt;button sec:authorize=&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;&amp;gt;新增&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;&amp;gt;删除&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;&amp;gt;修改&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;&amp;gt;查看&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十三、SpringSecurity-的”跨域”问题&#34;&gt;&lt;a href=&#34;#十三、SpringSecurity-的”跨域”问题&#34; class=&#34;headerlink&#34; title=&#34;十三、SpringSecurity 的”跨域”问题&#34;&gt;&lt;/a&gt;十三、SpringSecurity 的”跨域”问题&lt;/h1&gt;&lt;p&gt;​	浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。 &lt;/p&gt;
&lt;p&gt;​	前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。&lt;/p&gt;
&lt;p&gt;​	所以我们就要处理一下，让前端能进行跨域请求。&lt;/p&gt;
&lt;h2 id=&#34;①先对SpringBoot配置，运行跨域请求&#34;&gt;&lt;a href=&#34;#①先对SpringBoot配置，运行跨域请求&#34; class=&#34;headerlink&#34; title=&#34;①先对SpringBoot配置，运行跨域请求&#34;&gt;&lt;/a&gt;①先对SpringBoot配置，运行跨域请求&lt;/h2&gt;&lt;p&gt;这里的方式多种多想可以 配置类，也可以对跨域的请求直接加注解 ，自己视情况而定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Configuration
public class CorsConfig implements WebMvcConfigurer &amp;#123;

    @Override
    public void addCorsMappings(CorsRegistry registry) &amp;#123;
      // 设置允许跨域的路径
        registry.addMapping(&amp;quot;/**&amp;quot;)
                // 设置允许跨域请求的域名
                .allowedOriginPatterns(&amp;quot;*&amp;quot;)
                // 是否允许cookie
                .allowCredentials(true)
                // 设置允许的请求方式
                .allowedMethods(&amp;quot;GET&amp;quot;, &amp;quot;POST&amp;quot;, &amp;quot;DELETE&amp;quot;, &amp;quot;PUT&amp;quot;)
                // 设置允许的header属性
                .allowedHeaders(&amp;quot;*&amp;quot;)
                // 跨域允许时间
                .maxAge(3600);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;②开启SpringSecurity的跨域访问&#34;&gt;&lt;a href=&#34;#②开启SpringSecurity的跨域访问&#34; class=&#34;headerlink&#34; title=&#34;②开启SpringSecurity的跨域访问&#34;&gt;&lt;/a&gt;②开启SpringSecurity的跨域访问&lt;/h2&gt;&lt;p&gt;由于我们的资源都会收到SpringSecurity的保护，所以想要跨域访问还要让SpringSecurity运行跨域访问。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @Override
    protected void configure(HttpSecurity http) throws Exception &amp;#123;
        http
                //关闭csrf
                .csrf().disable()
                //不通过Session获取SecurityContext
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeRequests()
                // 对于登录接口 允许匿名访问
                .antMatchers(&amp;quot;/user/login&amp;quot;).anonymous()
                // 除上面外的所有请求全部需要鉴权认证
                .anyRequest().authenticated();

        //添加过滤器
        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);

        //配置异常处理器
        http.exceptionHandling()
                //配置认证失败处理器
                .authenticationEntryPoint(authenticationEntryPoint)
                .accessDeniedHandler(accessDeniedHandler);

        //允许跨域
        http.cors();
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十三、退出登录&#34;&gt;&lt;a href=&#34;#十三、退出登录&#34; class=&#34;headerlink&#34; title=&#34;十三、退出登录&#34;&gt;&lt;/a&gt;十三、退出登录&lt;/h1&gt;&lt;p&gt;​	用户只需要向Spring Security项目中发送&amp;#x2F;logout退出请求即可。&lt;/p&gt;
&lt;h2 id=&#34;1-退出实现&#34;&gt;&lt;a href=&#34;#1-退出实现&#34; class=&#34;headerlink&#34; title=&#34;1.退出实现&#34;&gt;&lt;/a&gt;1.退出实现&lt;/h2&gt;&lt;p&gt;实现退出非常简单，只要在页面中添加&amp;#x2F;logout的超链接即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;a href=&amp;quot;/logout&amp;quot;&amp;gt;退出登录&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	为了实现更好的效果，通常添加退出的配置。默认的退出url为&amp;#x2F;logout，退出成功后跳转到&amp;#x2F;login?logout&lt;/p&gt;
&lt;p&gt;​	如果不希望使用默认值，可以通过下面的方法进行修改。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;http.logout()     
    .logoutUrl(**&amp;quot;/logout&amp;quot;**)     
    .logoutSuccessUrl(**&amp;quot;/login.html&amp;quot;**);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-logout其他常用配置源码解读&#34;&gt;&lt;a href=&#34;#2-logout其他常用配置源码解读&#34; class=&#34;headerlink&#34; title=&#34;2.logout其他常用配置源码解读&#34;&gt;&lt;/a&gt;2.logout其他常用配置源码解读&lt;/h2&gt;&lt;h3 id=&#34;2-1-addLogoutHandler-LogoutHandler&#34;&gt;&lt;a href=&#34;#2-1-addLogoutHandler-LogoutHandler&#34; class=&#34;headerlink&#34; title=&#34;2.1.addLogoutHandler(LogoutHandler)&#34;&gt;&lt;/a&gt;2.1.addLogoutHandler(LogoutHandler)&lt;/h3&gt;&lt;p&gt;​	默认是contextLogoutHandler&lt;/p&gt;
&lt;p&gt;​	默认实例内容&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/SpringSecurity/springSecurity-37.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;2-2clearAuthentication-boolean&#34;&gt;&lt;a href=&#34;#2-2clearAuthentication-boolean&#34; class=&#34;headerlink&#34; title=&#34;2.2clearAuthentication(boolean)&#34;&gt;&lt;/a&gt;2.2clearAuthentication(boolean)&lt;/h3&gt;&lt;p&gt;​	是否清除认证状态，默认为true&lt;/p&gt;
&lt;h5 id=&#34;2-3invalidateHttpSession-boolean&#34;&gt;&lt;a href=&#34;#2-3invalidateHttpSession-boolean&#34; class=&#34;headerlink&#34; title=&#34;2.3invalidateHttpSession(boolean)&#34;&gt;&lt;/a&gt;2.3invalidateHttpSession(boolean)&lt;/h5&gt;&lt;p&gt;​	是否销毁HttpSession对象，默认为true&lt;/p&gt;
&lt;h3 id=&#34;2-4logoutSuccessHandler-LogoutSuccessHandler&#34;&gt;&lt;a href=&#34;#2-4logoutSuccessHandler-LogoutSuccessHandler&#34; class=&#34;headerlink&#34; title=&#34;2.4logoutSuccessHandler(LogoutSuccessHandler)&#34;&gt;&lt;/a&gt;2.4logoutSuccessHandler(LogoutSuccessHandler)&lt;/h3&gt;&lt;p&gt;​	退出成功处理器。&lt;/p&gt;
&lt;p&gt;​	也可以自己进行定义退出成功处理器。只要实现了LogoutSuccessHandler接口。与之前讲解的登录成功处理器和登录失败处理器极其类似。&lt;/p&gt;
&lt;h1 id=&#34;十四、Spring-Security-中-CSRF&#34;&gt;&lt;a href=&#34;#十四、Spring-Security-中-CSRF&#34; class=&#34;headerlink&#34; title=&#34;十四、Spring Security 中 CSRF&#34;&gt;&lt;/a&gt;十四、Spring Security 中 CSRF&lt;/h1&gt;&lt;p&gt;​	从刚开始学习Spring Security时，在配置类中一直存在这样一行代码：http.csrf().disable();如果没有这行代码导致用户无法被认证。这行代码的含义是：关闭csrf防护。&lt;/p&gt;
&lt;h2 id=&#34;1-什么是CSRF&#34;&gt;&lt;a href=&#34;#1-什么是CSRF&#34; class=&#34;headerlink&#34; title=&#34;1.什么是CSRF&#34;&gt;&lt;/a&gt;1.什么是CSRF&lt;/h2&gt;&lt;p&gt;​	CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack” 或者Session Riding。通过伪造用户请求访问受信任站点的非法请求访问。&lt;/p&gt;
&lt;p&gt;​	跨域：只要网络协议，ip地址，端口中任何一个不相同就是跨域请求。&lt;/p&gt;
&lt;p&gt;​	客户端与服务进行交互时，由于http协议本身是无状态协议，所以引入了cookie进行记录客户端身份。在cookie中会存放session id用来识别客户端身份的。在跨域的情况下，session id可能被第三方恶意劫持，通过这个session id向服务端发起请求时，服务端会认为这个请求是合法的，可能发生很多意想不到的事情。&lt;/p&gt;
&lt;h2 id=&#34;2-Spring-Security中CSRF&#34;&gt;&lt;a href=&#34;#2-Spring-Security中CSRF&#34; class=&#34;headerlink&#34; title=&#34;2.Spring Security中CSRF&#34;&gt;&lt;/a&gt;2.Spring Security中CSRF&lt;/h2&gt;&lt;p&gt;​	从Spring Security4开始CSRF防护默认开启。默认会拦截请求。进行CSRF处理。CSRF为了保证不是其他第三方网站访问，要求访问时携带参数名为_csrf值为token(token在服务端产生)的内容，如果token和服务端的token匹配成功，则正常访问。 &lt;/p&gt;
&lt;h3 id=&#34;2-1实现步骤-1&#34;&gt;&lt;a href=&#34;#2-1实现步骤-1&#34; class=&#34;headerlink&#34; title=&#34;2.1实现步骤&#34;&gt;&lt;/a&gt;2.1实现步骤&lt;/h3&gt;&lt;h4 id=&#34;2-1-1-编写控制器方法&#34;&gt;&lt;a href=&#34;#2-1-1-编写控制器方法&#34; class=&#34;headerlink&#34; title=&#34;2.1.1 编写控制器方法&#34;&gt;&lt;/a&gt;2.1.1 编写控制器方法&lt;/h4&gt;&lt;p&gt;​	编写控制器方法，跳转到templates中login.html页面。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@GetMapping(&amp;quot;/showLogin&amp;quot;)
public String showLogin() &amp;#123;
    return &amp;quot;login&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-1-2新建login-html&#34;&gt;&lt;a href=&#34;#2-1-2新建login-html&#34; class=&#34;headerlink&#34; title=&#34;2.1.2新建login.html&#34;&gt;&lt;/a&gt;2.1.2新建login.html&lt;/h4&gt;&lt;p&gt;在项目resources下新建templates文件夹，并在文件夹中新建login.html页面。红色部分是必须存在的否则无法正常登录。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;
      xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;form action = &amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;hidden&amp;quot; th:value=&amp;quot;$&amp;#123;_csrf.token&amp;#125;&amp;quot; name=&amp;quot;_csrf&amp;quot; th:if=&amp;quot;$&amp;#123;_csrf&amp;#125;&amp;quot;/&amp;gt;
    用户名：&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    密码:&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;登录&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;     
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-1-3修改配置类&#34;&gt;&lt;a href=&#34;#2-1-3修改配置类&#34; class=&#34;headerlink&#34; title=&#34;2.1.3修改配置类&#34;&gt;&lt;/a&gt;2.1.3修改配置类&lt;/h4&gt;&lt;p&gt;在配置类中注释掉CSRF防护失效&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//关闭csrf防护
//http.csrf().disable();
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="框架" />
        <category term="Spring" />
        <category term="SpringSecurity" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC10%E7%AB%A0_%E5%B8%B8%E7%94%A8%E7%B1%BB/</id>
        <title>第10章_常用类</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC10%E7%AB%A0_%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
        <content type="html"></content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/</id>
        <title>第11章集合</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/"/>
        <content type="html">&lt;h1 id=&#34;11-集合&#34;&gt;&lt;a href=&#34;#11-集合&#34; class=&#34;headerlink&#34; title=&#34;11 集合&#34;&gt;&lt;/a&gt;11 集合&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180112196.png&#34; class=&#34;&#34;&gt;




&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618170703735.png&#34; class=&#34;&#34;&gt;




&lt;h1 id=&#34;Colletion接口&#34;&gt;&lt;a href=&#34;#Colletion接口&#34; class=&#34;headerlink&#34; title=&#34;Colletion接口&#34;&gt;&lt;/a&gt;Colletion接口&lt;/h1&gt;&lt;h2 id=&#34;1-1-常用方法&#34;&gt;&lt;a href=&#34;#1-1-常用方法&#34; class=&#34;headerlink&#34; title=&#34;1.1 常用方法&#34;&gt;&lt;/a&gt;1.1 常用方法&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test01;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
/**
 * @author : msb-zhaoss
 */
public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        /*
        Collection接口的常用方法：
        增加：add(E e) addAll(Collection&amp;lt;? extends E&amp;gt; c)
        删除：clear() remove(Object o)
        修改：
        查看：iterator() size()
        判断：contains(Object o)  equals(Object o) isEmpty()
         */
        //创建对象：接口不能创建对象，利用实现类创建对象：
        Collection col = new ArrayList();
        //调用方法：
        //集合有一个特点：只能存放引用数据类型的数据，不能是基本数据类型
        //基本数据类型自动装箱，对应包装类。int---&amp;gt;Integer
        col.add(18);
        col.add(12);
        col.add(11);
        col.add(17);
        System.out.println(col/*.toString()*/);
        List list = Arrays.asList(new Integer[]&amp;#123;11, 15, 3, 7, 1&amp;#125;);
        col.addAll(list);//将另一个集合添加入col中
        System.out.println(col);
        //col.clear();清空集合
        System.out.println(col);
        System.out.println(&amp;quot;集合中元素的数量为：&amp;quot;+col.size());
        System.out.println(&amp;quot;集合是否为空：&amp;quot;+col.isEmpty());
        boolean isRemove = col.remove(15);
        System.out.println(col);
        System.out.println(&amp;quot;集合中数据是否被删除：&amp;quot;+isRemove);
        Collection col2 = new ArrayList();
        col2.add(18);
        col2.add(12);
        col2.add(11);
        col2.add(17);
        Collection col3 = new ArrayList();
        col3.add(18);
        col3.add(12);
        col3.add(11);
        col3.add(17);
        System.out.println(col2.equals(col3));
        System.out.println(col2==col3);//地址一定不相等  false
        System.out.println(&amp;quot;是否包含元素：&amp;quot;+col3.contains(117));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-2-Collection集合的遍历&#34;&gt;&lt;a href=&#34;#1-2-Collection集合的遍历&#34; class=&#34;headerlink&#34; title=&#34;1.2 Collection集合的遍历&#34;&gt;&lt;/a&gt;1.2 Collection集合的遍历&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;迭代器简要原理图：



package com.msb.test01;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
/**
 * @author : msb-zhaoss
 */
public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        Collection col = new ArrayList();
        col.add(18);
        col.add(12);
        col.add(11);
        col.add(17);
        col.add(&amp;quot;abc&amp;quot;);
        col.add(9.8);
        //对集合遍历（对集合中元素进行查看）
        //方式1：普通for循环
        /*for(int i= 0;i&amp;lt;col.size();i++)&amp;#123;
            col.
        &amp;#125;*/
        //方式2：增强for循环
        for(Object o:col)&amp;#123;
            System.out.println(o);
        &amp;#125;
        System.out.println(&amp;quot;------------------------&amp;quot;);
        //方式3：iterator()
        Iterator it = col.iterator();
        while(it.hasNext())&amp;#123;
            System.out.println(it.next());
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-List接口&#34;&gt;&lt;a href=&#34;#2-List接口&#34; class=&#34;headerlink&#34; title=&#34;2 List接口&#34;&gt;&lt;/a&gt;2 List接口&lt;/h2&gt;&lt;h3 id=&#34;2-1-常用方法和遍历方式&#34;&gt;&lt;a href=&#34;#2-1-常用方法和遍历方式&#34; class=&#34;headerlink&#34; title=&#34;2.1 常用方法和遍历方式&#34;&gt;&lt;/a&gt;2.1 常用方法和遍历方式&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test01;
import com.sun.org.apache.xerces.internal.dom.PSVIAttrNSImpl;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
/**
 * @author : msb-zhaoss
 */
public class Test03 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        /*
        List接口中常用方法：
        增加：add(int index, E element)
        删除：remove(int index)  remove(Object o)
        修改：set(int index, E element)
        查看：get(int index)
        判断：
         */
        List list = new ArrayList();
        list.add(13);
        list.add(17);
        list.add(6);
        list.add(-1);
        list.add(2);
        list.add(&amp;quot;abc&amp;quot;);
        System.out.println(list);
        list.add(3,66);
        System.out.println(list);
        list.set(3,77);
        System.out.println(list);
        list.remove(2);//在集合中存入的是Integer类型数据的时候，调用remove方法调用的是：remove(int index)
        System.out.println(list);
        list.remove(&amp;quot;abc&amp;quot;);
        System.out.println(list);
        Object o = list.get(0);
        System.out.println(o);
        //List集合 遍历：
        //方式1：普通for循环：
        System.out.println(&amp;quot;---------------------&amp;quot;);
        for(int i = 0;i&amp;lt;list.size();i++)&amp;#123;
            System.out.println(list.get(i));
        &amp;#125;
        //方式2：增强for循环：
        System.out.println(&amp;quot;---------------------&amp;quot;);
        for(Object obj:list)&amp;#123;
            System.out.println(obj);
        &amp;#125;
        //方式3：迭代器：
        System.out.println(&amp;quot;---------------------&amp;quot;);
        Iterator it = list.iterator();
        while(it.hasNext())&amp;#123;
            System.out.println(it.next());
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2-ArrayList实现类（JDK1-7）&#34;&gt;&lt;a href=&#34;#2-2-ArrayList实现类（JDK1-7）&#34; class=&#34;headerlink&#34; title=&#34;2.2 ArrayList实现类（JDK1.7）&#34;&gt;&lt;/a&gt;2.2 ArrayList实现类（JDK1.7）&lt;/h3&gt;&lt;p&gt;底层重要属性：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172028655.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;在JDK1.7中：在调用构造器的时候给底层数组elementData初始化，&lt;font color=#FF0000&gt;数组初始化长度为10&lt;/font&gt;：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172107247.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;对应内存：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172121579.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;调用add方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;         ArrayList al = new ArrayList();
        System.out.println(al.add(&amp;quot;abc&amp;quot;));
        System.out.println(al.add(&amp;quot;def&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172152471.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;当数组中的10个位置都满了的时候就开始进行数组的扩容，扩容长度为 &lt;font color=#FF0000&gt;原数组的1.5倍&lt;/font&gt;：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172227199.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172231517.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172235705.png&#34; class=&#34;&#34;&gt;








&lt;h3 id=&#34;2-3-ArrayList实现类（JDK1-8）&#34;&gt;&lt;a href=&#34;#2-3-ArrayList实现类（JDK1-8）&#34; class=&#34;headerlink&#34; title=&#34;2.3 ArrayList实现类（JDK1.8）&#34;&gt;&lt;/a&gt;2.3 ArrayList实现类（JDK1.8）&lt;/h3&gt;&lt;p&gt;【1】JDK1.8底层依旧是Object类型的数组，size:数组中有效长度：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172252320.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】ArrayList al &amp;#x3D; new ArrayList();调用空构造器：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172303832.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】add方法：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172316929.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172324585.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172335841.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172340839.png&#34; class=&#34;&#34;&gt;




&lt;h3 id=&#34;2-4-Vector实现类&#34;&gt;&lt;a href=&#34;#2-4-Vector实现类&#34; class=&#34;headerlink&#34; title=&#34;2.4 Vector实现类&#34;&gt;&lt;/a&gt;2.4 Vector实现类&lt;/h3&gt;&lt;p&gt;【1】底层Object数组，int类型属性表示数组中有效长度：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172455343.png&#34; class=&#34;&#34;&gt;



&lt;p&gt;【2】Vector v&amp;#x3D;new Vector();调用构造器：&lt;/p&gt;
&lt;p&gt;【3】add方法：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172507015.png&#34; class=&#34;&#34;&gt;




&lt;h3 id=&#34;2-5-泛型&#34;&gt;&lt;a href=&#34;#2-5-泛型&#34; class=&#34;headerlink&#34; title=&#34;2.5 泛型&#34;&gt;&lt;/a&gt;2.5 泛型&lt;/h3&gt;&lt;p&gt;【1】什么是泛型（Generic）：&lt;br&gt;泛型就相当于标签&lt;br&gt;形式：&amp;lt;&amp;gt;&lt;br&gt;集合容器类在设计阶段&amp;#x2F;声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，&lt;br&gt;JDK1.5之 后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，这个类型参数叫做泛型。&lt;br&gt;Collection&lt;E&gt;, List&lt;E&gt;， ArrayList&lt;E&gt; 这个&lt;E&gt;就是类型参数，即泛型。&lt;/p&gt;
&lt;p&gt;【2】没有泛型的时候使用集合：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test01;
import java.util.ArrayList;
/**
 * @author : msb-zhaoss
 */
public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个ArrayList集合，向这个集合中存入学生的成绩：
        ArrayList al = new ArrayList();
        al.add(98);
        al.add(18);
        al.add(39);
        al.add(60);
        al.add(83);
        al.add(&amp;quot;丽丽&amp;quot;);
        //对集合遍历查看：
        for(Object obj:al)&amp;#123;
            System.out.println(obj);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不使用泛型的话，有缺点：&lt;br&gt;一般我们在使用的时候基本上往集合中存入的都是相同类型的数据–》便于管理，所以现在什么引用数据类型都可以存入集合，不方便！&lt;/p&gt;
&lt;p&gt;【3】JDK1.5以后开始使用泛型，集合中使用泛型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test01;
import java.util.ArrayList;
/**
 * @author : msb-zhaoss
 */
public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个ArrayList集合，向这个集合中存入学生的成绩：
        //加入泛型的优点：在编译时期就会对类型进行检查，不是泛型对应的类型就不可以添加入这个集合。
        ArrayList&amp;lt;Integer&amp;gt; al = new ArrayList&amp;lt;Integer&amp;gt;();
        al.add(98);
        al.add(18);
        al.add(39);
        al.add(60);
        al.add(83);
        /*al.add(&amp;quot;丽丽&amp;quot;);
        al.add(9.8);*/
        //对集合遍历查看：
        /*for(Object obj:al)&amp;#123;
            System.out.println(obj);
        &amp;#125;*/
        for(Integer i:al)&amp;#123;
            System.out.println(i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】泛型总结：&lt;br&gt;（1）JDK1.5以后&lt;br&gt;（2）泛型实际就是 一个&amp;lt;&amp;gt;引起来的 参数类型，这个参数类型  具体在使用的时候才会确定具体的类型。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618172646571.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（3）使用了泛型以后，可以确定集合中存放数据的类型，在编译时期就可以检查出来。&lt;br&gt;（4）使用泛型你可能觉得麻烦，实际使用了泛型才会简单，后续的遍历等操作简单。&lt;br&gt;（5）泛型的类型：都是引用数据类型，不能是基本数据类型。&lt;br&gt;（6）ArrayList&lt;Integer&gt; al &amp;#x3D; new ArrayList&lt;Integer&gt;();在JDK1.7以后可以写为：&lt;br&gt;ArrayList&lt;Integer&gt; al &amp;#x3D; new ArrayList&amp;lt;&amp;gt;();  –&amp;lt;&amp;gt;  —钻石运算符&lt;/p&gt;
&lt;h4 id=&#34;2-5-1-自定义泛型结构&#34;&gt;&lt;a href=&#34;#2-5-1-自定义泛型结构&#34; class=&#34;headerlink&#34; title=&#34;2.5.1 自定义泛型结构&#34;&gt;&lt;/a&gt;2.5.1 自定义泛型结构&lt;/h4&gt;&lt;p&gt;泛型类，泛型接口&lt;/p&gt;
&lt;p&gt;【1】泛型类的定义和实例化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test02;
/**
 * @author : msb-zhaoss
 * GenericTes就是一个普通的类
 * GenericTest&amp;lt;E&amp;gt; 就是一个泛型类
 * &amp;lt;&amp;gt;里面就是一个参数类型，但是这个类型是什么呢？这个类型现在是不确定的，相当于一个占位
 * 但是现在确定的是这个类型一定是一个引用数据类型，而不是基本数据类型
 */
public class GenericTest&amp;lt;E&amp;gt; &amp;#123;
    int age;
    String name;
    E sex;
    public void a(E n)&amp;#123;
    &amp;#125;
    public void b(E[] m)&amp;#123;
    &amp;#125;
&amp;#125;
class Test&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //GenericTest进行实例化：
        //(1)实例化的时候不指定泛型：如果实例化的时候不明确的指定类的泛型，那么认为此泛型为Object类型
        GenericTest gt1 = new GenericTest();
        gt1.a(&amp;quot;abc&amp;quot;);
        gt1.a(17);
        gt1.a(9.8);
        gt1.b(new String[]&amp;#123;&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;&amp;#125;);
        //（2）实例化的时候指定泛型：---》推荐方式
        GenericTest&amp;lt;String&amp;gt; gt2 = new GenericTest&amp;lt;&amp;gt;();
        gt2.sex = &amp;quot;男&amp;quot;;
        gt2.a(&amp;quot;abc&amp;quot;);
        gt2.b(new String[]&amp;#123;&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;&amp;#125;);
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】继承情况：&lt;br&gt;（1）父类指定泛型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;class SubGenericTest extends GenericTest&amp;lt;Integer&amp;gt;&amp;#123;
&amp;#125;
class Demo&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //指定父类泛型，那么子类就不需要再指定泛型了，可以直接使用
        SubGenericTest sgt = new SubGenericTest();
        sgt.a(19);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）父类不指定泛型：&lt;br&gt;如果父类不指定泛型，那么子类也会变成一个泛型类，那这个E的类型可以在创建子类对象的时候确定：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;class SubGenericTest2&amp;lt;E&amp;gt; extends GenericTest&amp;lt;E&amp;gt;&amp;#123;
&amp;#125;

class Demo2&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        SubGenericTest2&amp;lt;String&amp;gt; s = new  SubGenericTest2&amp;lt;&amp;gt;();
        s.a(&amp;quot;abc&amp;quot;);
        s.sex = &amp;quot;女&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】应用场合：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173037582.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】细节：&lt;br&gt;（1）泛型类可以定义多个参数类型&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173045431.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（2）泛型类的构造器的写法：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173057556.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（3）不同的泛型的引用类型不可以相互赋值：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173104251.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（4）泛型如果不指定，那么就会被擦除，反应对应的类型为Object类型：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173116539.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（5）反省类中的静态方法不能使用类的泛型：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173123924.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（6）不能直接使用E[]的创建：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173130213.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-5-2-泛型方法&#34;&gt;&lt;a href=&#34;#2-5-2-泛型方法&#34; class=&#34;headerlink&#34; title=&#34;2.5.2 泛型方法&#34;&gt;&lt;/a&gt;2.5.2 泛型方法&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test04;
/**
 * @author : msb-zhaoss
 * 1.什么是泛型方法：
 * 不是带泛型的方法就是泛型方法
 * 泛型方法有要求：这个方法的泛型的参数类型要和当前的类的泛型无关
 * 换个角度：
 * 泛型方法对应的那个泛型参数类型 和  当前所在的这个类 是否是泛型类，泛型是啥  无关
 * 2.泛型方法定义的时候，前面要加上&amp;lt;T&amp;gt;
 *     原因：如果不加的话，会把T当做一种数据类型，然而代码中没有T类型那么就会报错
 * 3.T的类型是在调用方法的时候确定的
 * 4.泛型方法可否是静态方法？可以是静态方法
 */
public class TestGeneric&amp;lt;E&amp;gt; &amp;#123;
    //不是泛型方法 （不能是静态方法）
    public static void a(E e)&amp;#123;
    &amp;#125;
    //是泛型方法
    public static &amp;lt;T&amp;gt;  void b(T t)&amp;#123;
    &amp;#125;
&amp;#125;
class Demo&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        TestGeneric&amp;lt;String&amp;gt; tg = new TestGeneric&amp;lt;&amp;gt;();
        tg.a(&amp;quot;abc&amp;quot;);
        tg.b(&amp;quot;abc&amp;quot;);
        tg.b(19);
        tg.b(true);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-5-3-泛型参数存在继承关系的情况&#34;&gt;&lt;a href=&#34;#2-5-3-泛型参数存在继承关系的情况&#34; class=&#34;headerlink&#34; title=&#34;2.5.3 泛型参数存在继承关系的情况&#34;&gt;&lt;/a&gt;2.5.3 泛型参数存在继承关系的情况&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173213265.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-5-4-通配符&#34;&gt;&lt;a href=&#34;#2-5-4-通配符&#34; class=&#34;headerlink&#34; title=&#34;2.5.4 通配符&#34;&gt;&lt;/a&gt;2.5.4 通配符&lt;/h4&gt;&lt;p&gt;【1】在没有通配符的时候：&lt;br&gt;下面的a方法，相当于方法的重复定义，报错&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    /*public void a(List&amp;lt;Object&amp;gt; list)&amp;#123;
    &amp;#125;
    public void a(List&amp;lt;String&amp;gt; list)&amp;#123;
    &amp;#125;
    public void a(List&amp;lt;Integer&amp;gt; list)&amp;#123;
    &amp;#125;*/
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】引入通配符：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        List&amp;lt;Object&amp;gt; list1 = new ArrayList&amp;lt;&amp;gt;();
        List&amp;lt;String&amp;gt; list2 = new ArrayList&amp;lt;&amp;gt;();
        List&amp;lt;Integer&amp;gt; list3 = new ArrayList&amp;lt;&amp;gt;();
        List&amp;lt;?&amp;gt; list = null;
        list = list1;
        list = list2;
        list = list3;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发现： A 和 B是子类父类的关系，G&lt;A&gt;和G&lt;B&gt;不存在子类父类关系，是并列的&lt;br&gt;加入通配符？后，G&amp;lt;?&amp;gt;就变成了 G&lt;A&gt;和G&lt;B&gt;的父类&lt;/p&gt;
&lt;p&gt;【3】使用通配符：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test06;
import java.util.ArrayList;
import java.util.List;
/**
 * @author : msb-zhaoss
 */
public class Test &amp;#123;
    /*public void a(List&amp;lt;Object&amp;gt; list)&amp;#123;
    &amp;#125;
    public void a(List&amp;lt;String&amp;gt; list)&amp;#123;
    &amp;#125;
    public void a(List&amp;lt;Integer&amp;gt; list)&amp;#123;
    &amp;#125;*/
    public void a(List&amp;lt;?&amp;gt; list)&amp;#123;
        //内部遍历的时候用Object即可，不用？
        for(Object a:list)&amp;#123;
            System.out.println(a);
        &amp;#125;
    &amp;#125;
&amp;#125;
class T&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        Test t = new Test();
        t.a(new ArrayList&amp;lt;Integer&amp;gt;());
        t.a(new ArrayList&amp;lt;String&amp;gt;());
        t.a(new ArrayList&amp;lt;Object&amp;gt;());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】查看API中应用位置：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173333503.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-5-5-使用通配符后的细节&#34;&gt;&lt;a href=&#34;#2-5-5-使用通配符后的细节&#34; class=&#34;headerlink&#34; title=&#34;2.5.5 使用通配符后的细节&#34;&gt;&lt;/a&gt;2.5.5 使用通配符后的细节&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    public void a(List&amp;lt;?&amp;gt; list)&amp;#123;
        //1.遍历：
        for(Object a:list)&amp;#123;
            System.out.println(a);
        &amp;#125;
        //2.数据的写入操作 ：
        //list.add(&amp;quot;abc&amp;quot;);--&amp;gt;出错，不能随意的添加数据
        list.add(null);
        //3.数据的读取操作：
        Object s = list.get(0);
    &amp;#125;
&amp;#125;
class T&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        Test t = new Test();
        t.a(new ArrayList&amp;lt;Integer&amp;gt;());
        t.a(new ArrayList&amp;lt;String&amp;gt;());
        t.a(new ArrayList&amp;lt;Object&amp;gt;());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-5-6-泛型受限&#34;&gt;&lt;a href=&#34;#2-5-6-泛型受限&#34; class=&#34;headerlink&#34; title=&#34;2.5.6 泛型受限&#34;&gt;&lt;/a&gt;2.5.6 泛型受限&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test07;
import java.util.ArrayList;
import java.util.List;

public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //a,b,c三个集合是并列的关系：
        List&amp;lt;Object&amp;gt; a = new ArrayList&amp;lt;&amp;gt;();
        List&amp;lt;Person&amp;gt; b = new ArrayList&amp;lt;&amp;gt;();
        List&amp;lt;Student&amp;gt; c = new ArrayList&amp;lt;&amp;gt;();
        /*开始使用泛型受限：泛型的上限
        List&amp;lt;? extends Person&amp;gt;:
        就相当于：
        List&amp;lt;? extends Person&amp;gt;是List&amp;lt;Person&amp;gt;的父类，是List&amp;lt;Person的子类&amp;gt;的父类
         */
        List&amp;lt;? extends Person&amp;gt; list1 = null;
        /*list1 = a;
        list1 = b;
        list1 = c;*/
        /*开始使用泛型受限：泛型的下限
        List&amp;lt;? super Person&amp;gt;
        就相当于：
        List&amp;lt;? super Person&amp;gt;是List&amp;lt;Person&amp;gt;的父类，是List&amp;lt;Person的父类&amp;gt;的父类
         */
        List&amp;lt;? super Person&amp;gt; list2 = null;
        list2 = a;
        list2 = b;
        list3 = c;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-6-LinkedList实现类&#34;&gt;&lt;a href=&#34;#2-6-LinkedList实现类&#34; class=&#34;headerlink&#34; title=&#34;2.6 LinkedList实现类&#34;&gt;&lt;/a&gt;2.6 LinkedList实现类&lt;/h3&gt;&lt;h4 id=&#34;2-6-1-基本方法使用&#34;&gt;&lt;a href=&#34;#2-6-1-基本方法使用&#34; class=&#34;headerlink&#34; title=&#34;2.6.1 基本方法使用&#34;&gt;&lt;/a&gt;2.6.1 基本方法使用&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test04;
import java.util.Iterator;
import java.util.LinkedList;
/**
 * @author : msb-zhaoss
 */
public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        /*
        LinkedList常用方法：
        增加 addFirst(E e) addLast(E e)
             offer(E e) offerFirst(E e) offerLast(E e)
        删除 poll()
            pollFirst() pollLast()  ---》JDK1.6以后新出的方法，提高了代码的健壮性
            removeFirst() removeLast()
        修改
        查看 element()
             getFirst()  getLast()
             indexOf(Object o)   lastIndexOf(Object o)
             peek()
             peekFirst() peekLast()
        判断
         */
        //创建一个LinkedList集合对象：
        LinkedList&amp;lt;String&amp;gt; list = new LinkedList&amp;lt;&amp;gt;();
        list.add(&amp;quot;aaaaa&amp;quot;);
        list.add(&amp;quot;bbbbb&amp;quot;);
        list.add(&amp;quot;ccccc&amp;quot;);
        list.add(&amp;quot;ddddd&amp;quot;);
        list.add(&amp;quot;eeeee&amp;quot;);
        list.add(&amp;quot;bbbbb&amp;quot;);
        list.add(&amp;quot;fffff&amp;quot;);
        list.addFirst(&amp;quot;jj&amp;quot;);
        list.addLast(&amp;quot;hh&amp;quot;);
        list.offer(&amp;quot;kk&amp;quot;);//添加元素在尾端
        list.offerFirst(&amp;quot;pp&amp;quot;);
        list.offerLast(&amp;quot;rr&amp;quot;);
        System.out.println(list);//LinkedList可以添加重复数据
        System.out.println(list.poll());//删除头上的元素并且将元素输出
        System.out.println(list.pollFirst());
        System.out.println(list.pollLast());
        System.out.println(list.removeFirst());
        System.out.println(list.removeLast());
        System.out.println(list);//LinkedList可以添加重复数据
        /*list.clear();//清空集合
        System.out.println(list);*/
        /*System.out.println(list.pollFirst());*/
        /*System.out.println(list.removeFirst());报错：Exception in thread &amp;quot;main&amp;quot; java.util.NoSuchElementException*/
        //集合的遍历：
        System.out.println(&amp;quot;---------------------&amp;quot;);
        //普通for循环：
        for(int i = 0;i&amp;lt;list.size();i++)&amp;#123;
            System.out.println(list.get(i));
        &amp;#125;
        System.out.println(&amp;quot;---------------------&amp;quot;);
        //增强for：
        for(String s:list)&amp;#123;
            System.out.println(s);
        &amp;#125;
        System.out.println(&amp;quot;---------------------&amp;quot;);
        //迭代器：
        /*Iterator&amp;lt;String&amp;gt; it = list.iterator();
        while(it.hasNext())&amp;#123;
            System.out.println(it.next());
        &amp;#125;*/
        //下面这种方式好，节省内存
        for(Iterator&amp;lt;String&amp;gt; it = list.iterator();it.hasNext();)&amp;#123;
            System.out.println(it.next());
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-6-2-简要底层原理图&#34;&gt;&lt;a href=&#34;#2-6-2-简要底层原理图&#34; class=&#34;headerlink&#34; title=&#34;2.6.2 简要底层原理图&#34;&gt;&lt;/a&gt;2.6.2 简要底层原理图&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173515599.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;2-6-3-模拟LinkedList源码&#34;&gt;&lt;a href=&#34;#2-6-3-模拟LinkedList源码&#34; class=&#34;headerlink&#34; title=&#34;2.6.3 模拟LinkedList源码&#34;&gt;&lt;/a&gt;2.6.3 模拟LinkedList源码&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test05;
/**
 * @author : msb-zhaoss
 */
public class MyLinkedList &amp;#123;
    //链中一定有一个首节点：
    Node first;
    //链中一定有一个尾节点：
    Node last;
    //计数器：
    int count = 0;
    //提供一个构造器：
    public MyLinkedList()&amp;#123;
    &amp;#125;
    //添加元素方法：
    public void add(Object o)&amp;#123;
        if(first == null)&amp;#123;//证明你添加的元素是第一个节点：
            //将添加的元素封装为一个Node对象：
            Node n = new Node();
            n.setPre(null);
            n.setObj(o);
            n.setNext(null);
            //当前链中第一个节点变为n
            first = n;
            //当前链中最后一个节点变为n
            last = n;
        &amp;#125;else&amp;#123;//证明已经不是链中第一个节点了
            //将添加的元素封装为一个Node对象：
            Node n = new Node();
            n.setPre(last);//n的上一个节点一定是当前链中的最后一个节点last
            n.setObj(o);
            n.setNext(null);
            //当前链中的最后一个节点的下一个元素 要指向n
            last.setNext(n);
            //将最后一个节点变为n
            last = n;
        &amp;#125;
        //链中元素数量加1
        count++;
    &amp;#125;
    //得到集合中元素的数量：
    public int getSize()&amp;#123;
        return count;
    &amp;#125;
    //通过下标得到元素：
    public Object get(int index)&amp;#123;
        //获取链表的头元素：
        Node n = first;
        //一路next得到想要的元素
        for(int i=0;i&amp;lt;index;i++)&amp;#123;
            n = n.getNext();
        &amp;#125;
        return n.getObj();
    &amp;#125;
&amp;#125;
class Test&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个MyLinkedList集合对象：
        MyLinkedList ml = new MyLinkedList();
        ml.add(&amp;quot;aa&amp;quot;);
        ml.add(&amp;quot;bb&amp;quot;);
        ml.add(&amp;quot;cc&amp;quot;);
        System.out.println(ml.getSize());
        System.out.println(ml.get(0));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-6-4-LinkedList源码解析&#34;&gt;&lt;a href=&#34;#2-6-4-LinkedList源码解析&#34; class=&#34;headerlink&#34; title=&#34;2.6.4 LinkedList源码解析&#34;&gt;&lt;/a&gt;2.6.4 LinkedList源码解析&lt;/h4&gt;&lt;p&gt;【1】JDK1.7和JDK1.8的LinkedList的源码是一致的&lt;br&gt;【2】源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class LinkedList&amp;lt;E&amp;gt;&amp;#123;//E是一个泛型，具体的类型要在实例化的时候才会最终确定
        transient int size = 0;//集合中元素的数量
        //Node的内部类
        private static class Node&amp;lt;E&amp;gt; &amp;#123;
        E item;//当前元素
        Node&amp;lt;E&amp;gt; next;//指向下一个元素地址
        Node&amp;lt;E&amp;gt; prev;//上一个元素地址
        Node(Node&amp;lt;E&amp;gt; prev, E element, Node&amp;lt;E&amp;gt; next) &amp;#123;
            this.item = element;
            this.next = next;
            this.prev = prev;
        &amp;#125;
    &amp;#125;
        transient Node&amp;lt;E&amp;gt; first;//链表的首节点
        transient Node&amp;lt;E&amp;gt; last;//链表的尾节点
        //空构造器：
        public LinkedList() &amp;#123;
    &amp;#125;
        //添加元素操作：
        public boolean add(E e) &amp;#123;
        linkLast(e);
        return true;
    &amp;#125;
        void linkLast(E e) &amp;#123;//添加的元素e
        final Node&amp;lt;E&amp;gt; l = last;//将链表中的last节点给l 如果是第一个元素的话 l为null
                //将元素封装为一个Node具体的对象：
        final Node&amp;lt;E&amp;gt; newNode = new Node&amp;lt;&amp;gt;(l, e, null);
                //将链表的last节点指向新的创建的对象：
        last = newNode;
                
        if (l == null)//如果添加的是第一个节点
            first = newNode;//将链表的first节点指向为新节点
        else//如果添加的不是第一个节点 
            l.next = newNode;//将l的下一个指向为新的节点
        size++;//集合中元素数量加1操作
        modCount++;
    &amp;#125;
        //获取集合中元素数量
        public int size() &amp;#123;
        return size;
    &amp;#125;
        //通过索引得到元素：
        public E get(int index) &amp;#123;
        checkElementIndex(index);//健壮性考虑
        return node(index).item;
    &amp;#125;
        
    Node&amp;lt;E&amp;gt; node(int index) &amp;#123;
        //如果index在链表的前半段，那么从前往后找
        if (index &amp;lt; (size &amp;gt;&amp;gt; 1)) &amp;#123;
            Node&amp;lt;E&amp;gt; x = first;
            for (int i = 0; i &amp;lt; index; i++)
                x = x.next;
            return x;
        &amp;#125; else &amp;#123;//如果index在链表的后半段，那么从后往前找
            Node&amp;lt;E&amp;gt; x = last;
            for (int i = size - 1; i &amp;gt; index; i--)
                x = x.prev;
            return x;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;面试题：&#34;&gt;&lt;a href=&#34;#面试题：&#34; class=&#34;headerlink&#34; title=&#34;面试题：&#34;&gt;&lt;/a&gt;面试题：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;iterator(),Iterator,Iterable关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;【1】面试题：对应的关系：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173707713.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】hasNext(),next()的具体实现：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173654976.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;ListIterator迭代器&lt;/p&gt;
&lt;p&gt;【1】加入字符串：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test06;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
/**
 * @author : msb-zhaoss
 */
public class Test2 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        ArrayList&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        list.add(&amp;quot;aa&amp;quot;);
        list.add(&amp;quot;bb&amp;quot;);
        list.add(&amp;quot;cc&amp;quot;);
        list.add(&amp;quot;dd&amp;quot;);
        list.add(&amp;quot;ee&amp;quot;);
        //在&amp;quot;cc&amp;quot;之后添加一个字符串&amp;quot;kk&amp;quot;
        Iterator&amp;lt;String&amp;gt; it = list.iterator();
        while(it.hasNext())&amp;#123;
            if(&amp;quot;cc&amp;quot;.equals(it.next()))&amp;#123;
                list.add(&amp;quot;kk&amp;quot;);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发现报错：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173818117.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;出错原因：就是迭代器和list同时对集合进行操作：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173826503.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;解决办法：事情让一个“人”做 –》引入新的迭代器：ListIterator&lt;br&gt;迭代和添加操作都是靠ListIterator来完成的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test06;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
/**
 * @author : msb-zhaoss
 */
public class Test2 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        ArrayList&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        list.add(&amp;quot;aa&amp;quot;);
        list.add(&amp;quot;bb&amp;quot;);
        list.add(&amp;quot;cc&amp;quot;);
        list.add(&amp;quot;dd&amp;quot;);
        list.add(&amp;quot;ee&amp;quot;);
        //在&amp;quot;cc&amp;quot;之后添加一个字符串&amp;quot;kk&amp;quot;
        ListIterator&amp;lt;String&amp;gt; it = list.listIterator();
        while(it.hasNext())&amp;#123;
            if(&amp;quot;cc&amp;quot;.equals(it.next()))&amp;#123;
                it.add(&amp;quot;kk&amp;quot;);
            &amp;#125;
        &amp;#125;
        System.out.println(it.hasNext());
        System.out.println(it.hasPrevious());
        //逆向遍历：
        while(it.hasPrevious())&amp;#123;
            System.out.println(it.previous());
        &amp;#125;
        System.out.println(it.hasNext());
        System.out.println(it.hasPrevious());
        System.out.println(list);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-Set接口&#34;&gt;&lt;a href=&#34;#3-Set接口&#34; class=&#34;headerlink&#34; title=&#34;3 Set接口&#34;&gt;&lt;/a&gt;3 Set接口&lt;/h2&gt;&lt;h3 id=&#34;3-1-HashSet实现类的使用&#34;&gt;&lt;a href=&#34;#3-1-HashSet实现类的使用&#34; class=&#34;headerlink&#34; title=&#34;3.1 HashSet实现类的使用&#34;&gt;&lt;/a&gt;3.1 HashSet实现类的使用&lt;/h3&gt;&lt;p&gt;【1】放入Integer类型数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test07;
import java.util.HashSet;
/**
 * @author : msb-zhaoss
 */
public class TestInteger &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个HashSet集合：
        HashSet&amp;lt;Integer&amp;gt; hs = new HashSet&amp;lt;&amp;gt;();
        System.out.println(hs.add(19));//true
        hs.add(5);
        hs.add(20);
        System.out.println(hs.add(19));//false 这个19没有放入到集合中
        hs.add(41);
        hs.add(0);
        System.out.println(hs.size());//唯一，无序
        System.out.println(hs);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】放入String类型数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test07;
import java.util.HashSet;
/**
 * @author : msb-zhaoss
 */
public class TestString &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个HashSet集合：
        HashSet&amp;lt;String&amp;gt; hs = new HashSet&amp;lt;&amp;gt;();
        hs.add(&amp;quot;hello&amp;quot;);
        hs.add(&amp;quot;apple&amp;quot;);
        hs.add(&amp;quot;banana&amp;quot;);
        hs.add(&amp;quot;html&amp;quot;);
        hs.add(&amp;quot;apple&amp;quot;);
        hs.add(&amp;quot;css&amp;quot;);
        System.out.println(hs.size());
        System.out.println(hs);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】放入自定义的引用数据类型的数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test07;
import java.util.HashSet;
/**
 * @author : msb-zhaoss
 */
public class TestStudent &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个HashSet集合：
        HashSet&amp;lt;Student&amp;gt; hs = new HashSet&amp;lt;&amp;gt;();
        hs.add(new Student(19,&amp;quot;lili&amp;quot;));
        hs.add(new Student(20,&amp;quot;lulu&amp;quot;));
        hs.add(new Student(18,&amp;quot;feifei&amp;quot;));
        hs.add(new Student(19,&amp;quot;lili&amp;quot;));
        hs.add(new Student(10,&amp;quot;nana&amp;quot;));
        System.out.println(hs.size());
        System.out.println(hs);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面自定义的类型不满足 唯一，无序的特点。为什么呢？&lt;/p&gt;
&lt;p&gt;【4】HashSet原理图：（简要原理图）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618173954231.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【5】疑问：&lt;br&gt;1.数组的长度是多少。&lt;br&gt;2.数组的类型是什么？&lt;br&gt;3.hashCode，equals方法真的调用了吗？验证&lt;br&gt;4.底层表达式是什么？&lt;br&gt;5.同一个位置的数据 向前放  还是 向后放？&lt;br&gt;6.放入数组中的数据，是直接放的吗？是否封装为对象了？&lt;/p&gt;
&lt;h3 id=&#34;3-2LinkedHashSet使用&#34;&gt;&lt;a href=&#34;#3-2LinkedHashSet使用&#34; class=&#34;headerlink&#34; title=&#34;3.2LinkedHashSet使用&#34;&gt;&lt;/a&gt;3.2LinkedHashSet使用&lt;/h3&gt;&lt;p&gt;其实就是在HashSet的基础上，多了一个总的链表，这个总链表将放入的元素串在一起，方便有序的遍历：&lt;br&gt;（可以看到LinkedHashMap.Entry 继承自HashMap.Node 除了Node 本身有的几个属性外，额外增加了before after 用于指向前一个Entry 后一个Entry。也就是说，元素之间维持着一条总的链表数据结构。）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174059591.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test07;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
/**
 * @author : msb-zhaoss
 */
public class TestInteger &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个HashSet集合：
        LinkedHashSet&amp;lt;Integer&amp;gt; hs = new LinkedHashSet&amp;lt;&amp;gt;();
        System.out.println(hs.add(19));//true
        hs.add(5);
        hs.add(20);
        System.out.println(hs.add(19));//false 这个19没有放入到集合中
        hs.add(41);
        hs.add(0);
        System.out.println(hs.size());//唯一，无序
        System.out.println(hs);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-3-比较器的使用&#34;&gt;&lt;a href=&#34;#3-3-比较器的使用&#34; class=&#34;headerlink&#34; title=&#34;3.3 比较器的使用&#34;&gt;&lt;/a&gt;3.3 比较器的使用&lt;/h3&gt;&lt;p&gt;【1】以int类型为案例：&lt;br&gt;比较的思路：将比较的数据做差，然后返回一个int类型的数据，将这个int类型的数值  按照 &amp;#x3D;0  &amp;gt;0  &amp;lt;0&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;          int a = 10;
        int b = 20;
        System.out.println(a-b); // =0  &amp;gt;0  &amp;lt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】比较String类型数据：&lt;br&gt;String类实现了Comparable接口，这个接口中有一个抽象方法compareTo，String类中重写这个方法即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;          String a = &amp;quot;A&amp;quot;;
        String b = &amp;quot;B&amp;quot;;
        System.out.println(a.compareTo(b));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】比较double类型数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;         double a = 9.6;
        double b = 9.3;
       /* System.out.println((int)(a-b));*/
        System.out.println(((Double) a).compareTo((Double) b));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】比较自定义的数据类型：&lt;br&gt;（1）内部比较器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student implements Comparable&amp;lt;Student&amp;gt;&amp;#123;
    private int age;
    private double height;
    private String name;
    public int getAge() &amp;#123;
        return age;
    &amp;#125;
    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;
    public double getHeight() &amp;#123;
        return height;
    &amp;#125;
    public void setHeight(double height) &amp;#123;
        this.height = height;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public Student(int age, double height, String name) &amp;#123;
        this.age = age;
        this.height = height;
        this.name = name;
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
                &amp;quot;age=&amp;quot; + age +
                &amp;quot;, height=&amp;quot; + height +
                &amp;quot;, name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
    @Override
    public int compareTo(Student o) &amp;#123;
        //按照年龄进行比较：
        /*return this.getAge() - o.getAge();*/
        //按照身高比较
        /*return ((Double)(this.getHeight())).compareTo((Double)(o.getHeight()));*/
        //按照名字比较：
        return this.getName().compareTo(o.getName());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //比较两个学生：
        Student s1 = new Student(14,160.5,&amp;quot;alili&amp;quot;);
        Student s2 = new Student(14,170.5,&amp;quot;bnana&amp;quot;);
        System.out.println(s1.compareTo(s2));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）外部比较器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student&amp;#123;
    private int age;
    private double height;
    private String name;
    public int getAge() &amp;#123;
        return age;
    &amp;#125;
    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;
    public double getHeight() &amp;#123;
        return height;
    &amp;#125;
    public void setHeight(double height) &amp;#123;
        this.height = height;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public Student(int age, double height, String name) &amp;#123;
        this.age = age;
        this.height = height;
        this.name = name;
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
                &amp;quot;age=&amp;quot; + age +
                &amp;quot;, height=&amp;quot; + height +
                &amp;quot;, name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;
class BiJiao01 implements Comparator&amp;lt;Student&amp;gt; &amp;#123;
    @Override
    public int compare(Student o1, Student o2) &amp;#123;
        //比较年龄：
        return o1.getAge()-o2.getAge();
    &amp;#125;
&amp;#125;
class BiJiao02 implements Comparator&amp;lt;Student&amp;gt; &amp;#123;
    @Override
    public int compare(Student o1, Student o2) &amp;#123;
        //比较姓名：
        return o1.getName().compareTo(o2.getName());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;class BiJiao03 implements Comparator&amp;lt;Student&amp;gt; &amp;#123;
    @Override
    public int compare(Student o1, Student o2) &amp;#123;
        //在年龄相同的情况下 比较身高  年龄不同比较年龄
        if((o1.getAge()-o2.getAge())==0)&amp;#123;
            return ((Double)(o1.getHeight())).compareTo((Double)(o2.getHeight()));
        &amp;#125;else&amp;#123;//年龄不一样
            return o1.getAge()-o2.getAge();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //比较两个学生：
        Student s1 = new Student(9,160.5,&amp;quot;alili&amp;quot;);
        Student s2 = new Student(14,170.5,&amp;quot;bnana&amp;quot;);
        //获取外部比较器：
        Comparator bj1 = new BiJiao03();
        System.out.println(bj1.compare(s1, s2));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【5】外部比较器和内部比较器 谁好呀？&lt;br&gt;答案：外部比较器，多态，扩展性好&lt;/p&gt;
&lt;h3 id=&#34;3-4-TreeSet实现类的使用&#34;&gt;&lt;a href=&#34;#3-4-TreeSet实现类的使用&#34; class=&#34;headerlink&#34; title=&#34;3.4 TreeSet实现类的使用&#34;&gt;&lt;/a&gt;3.4 TreeSet实现类的使用&lt;/h3&gt;&lt;p&gt;【1】存入Integer类型数据：（底层利用的是内部比较器）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test10;
import java.util.TreeSet;
/**
 * @author : msb-zhaoss
 */
public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个TreeSet:
        TreeSet&amp;lt;Integer&amp;gt; ts = new TreeSet&amp;lt;&amp;gt;();
        ts.add(12);
        ts.add(3);
        ts.add(7);
        ts.add(9);
        ts.add(3);
        ts.add(16);
        System.out.println(ts.size());
        System.out.println(ts);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特点：唯一，无序（没有按照输入顺序进行输出）， 有序（按照升序进行遍历）&lt;/p&gt;
&lt;p&gt;【2】原理：底层：二叉树（数据结构中的一个逻辑结构）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174503614.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】放入String类型数据：（底层实现类内部比较器）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个TreeSet:
        TreeSet&amp;lt;String&amp;gt; ts = new TreeSet&amp;lt;&amp;gt;();
        ts.add(&amp;quot;elili&amp;quot;);
        ts.add(&amp;quot;blili&amp;quot;);
        ts.add(&amp;quot;alili&amp;quot;);
        ts.add(&amp;quot;elili&amp;quot;);
        ts.add(&amp;quot;clili&amp;quot;);
        ts.add(&amp;quot;flili&amp;quot;);
        ts.add(&amp;quot;glili&amp;quot;);
        System.out.println(ts.size());
        System.out.println(ts);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】想放入自定义的Student类型的数据：&lt;br&gt;（1）利用内部比较器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student implements Comparable&amp;lt;Student&amp;gt; &amp;#123;
    private int age;
    private String name;
    public int getAge() &amp;#123;
        return age;
    &amp;#125;
    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public Student(int age, String name) &amp;#123;
        this.age = age;
        this.name = name;
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
                &amp;quot;age=&amp;quot; + age +
                &amp;quot;, name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
    @Override
    public int compareTo(Student o) &amp;#123;
        return this.getAge()-o.getAge();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个TreeSet:
        TreeSet&amp;lt;Student&amp;gt; ts = new TreeSet&amp;lt;&amp;gt;();
        ts.add(new Student(10,&amp;quot;elili&amp;quot;));
        ts.add(new Student(8,&amp;quot;blili&amp;quot;));
        ts.add(new Student(4,&amp;quot;alili&amp;quot;));
        ts.add(new Student(9,&amp;quot;elili&amp;quot;));
        ts.add(new Student(10,&amp;quot;flili&amp;quot;));
        ts.add(new Student(1,&amp;quot;dlili&amp;quot;));
        System.out.println(ts.size());
        System.out.println(ts);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）通过外部比较器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student  &amp;#123;
    private int age;
    private String name;
    public int getAge() &amp;#123;
        return age;
    &amp;#125;
    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public Student(int age, String name) &amp;#123;
        this.age = age;
        this.name = name;
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
                &amp;quot;age=&amp;quot; + age +
                &amp;quot;, name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;
class BiJiao implements Comparator&amp;lt;Student&amp;gt;&amp;#123;
    @Override
    public int compare(Student o1, Student o2) &amp;#123;
        return o1.getName().compareTo(o2.getName());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个TreeSet:
        //利用外部比较器，必须自己制定：
        Comparator&amp;lt;Student&amp;gt; com = new BiJiao();
        TreeSet&amp;lt;Student&amp;gt; ts = new TreeSet&amp;lt;&amp;gt;(com);//一旦指定外部比较器，那么就会按照外部比较器来比较
        ts.add(new Student(10,&amp;quot;elili&amp;quot;));
        ts.add(new Student(8,&amp;quot;blili&amp;quot;));
        ts.add(new Student(4,&amp;quot;alili&amp;quot;));
        ts.add(new Student(9,&amp;quot;elili&amp;quot;));
        ts.add(new Student(10,&amp;quot;flili&amp;quot;));
        ts.add(new Student(1,&amp;quot;dlili&amp;quot;));
        System.out.println(ts.size());
        System.out.println(ts);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;实际开发中利用外部比较器多，因为扩展性好（多态）&lt;/p&gt;
&lt;p&gt;换一种写法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个TreeSet:
        //利用外部比较器，必须自己制定：
        /*Comparator&amp;lt;Student&amp;gt; com = new Comparator&amp;lt;Student&amp;gt;() &amp;#123;
            @Override
            public int compare(Student o1, Student o2) &amp;#123;
                return o1.getName().compareTo(o2.getName());
            &amp;#125;
        &amp;#125;;*/
        TreeSet&amp;lt;Student&amp;gt; ts = new TreeSet&amp;lt;&amp;gt;(new Comparator&amp;lt;Student&amp;gt;() &amp;#123;
            @Override
            public int compare(Student o1, Student o2) &amp;#123;
                return o1.getName().compareTo(o2.getName());
            &amp;#125;
        &amp;#125;);//一旦指定外部比较器，那么就会按照外部比较器来比较
        ts.add(new Student(10,&amp;quot;elili&amp;quot;));
        ts.add(new Student(8,&amp;quot;blili&amp;quot;));
        ts.add(new Student(4,&amp;quot;alili&amp;quot;));
        ts.add(new Student(9,&amp;quot;elili&amp;quot;));
        ts.add(new Student(10,&amp;quot;flili&amp;quot;));
        ts.add(new Student(1,&amp;quot;dlili&amp;quot;));
        System.out.println(ts.size());
        System.out.println(ts);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【5】TreeSet底层的二叉树的遍历是按照升序的结果出现的，这个升序是靠中序遍历得到的：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174642838.png&#34; class=&#34;&#34;&gt;






&lt;h3 id=&#34;3-5-Collection部分整体结构图&#34;&gt;&lt;a href=&#34;#3-5-Collection部分整体结构图&#34; class=&#34;headerlink&#34; title=&#34;3.5 Collection部分整体结构图&#34;&gt;&lt;/a&gt;3.5 Collection部分整体结构图&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174657969.png&#34; class=&#34;&#34;&gt;






&lt;h1 id=&#34;Map接口&#34;&gt;&lt;a href=&#34;#Map接口&#34; class=&#34;headerlink&#34; title=&#34;Map接口&#34;&gt;&lt;/a&gt;Map接口&lt;/h1&gt;&lt;h2 id=&#34;1-常用方法&#34;&gt;&lt;a href=&#34;#1-常用方法&#34; class=&#34;headerlink&#34; title=&#34;1 常用方法&#34;&gt;&lt;/a&gt;1 常用方法&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test11;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
/**
 * @author : msb-zhaoss
 */
public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        /*
        增加：put(K key, V value)
        删除：clear() remove(Object key)
        修改：
        查看：entrySet() get(Object key) keySet() size() values()
        判断：containsKey(Object key) containsValue(Object value)
            equals(Object o) isEmpty()
         */
        //创建一个Map集合：无序，唯一
        Map&amp;lt;String,Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
        System.out.println(map.put(&amp;quot;lili&amp;quot;, 10101010));
        map.put(&amp;quot;nana&amp;quot;,12345234);
        map.put(&amp;quot;feifei&amp;quot;,34563465);
        System.out.println(map.put(&amp;quot;lili&amp;quot;, 34565677));
        map.put(&amp;quot;mingming&amp;quot;,12323);
        /*map.clear();清空*/
        /*map.remove(&amp;quot;feifei&amp;quot;);移除*/
        System.out.println(map.size());
        System.out.println(map);
        System.out.println(map.containsKey(&amp;quot;lili&amp;quot;));
        System.out.println(map.containsValue(12323));
        Map&amp;lt;String,Integer&amp;gt; map2 = new HashMap&amp;lt;&amp;gt;();
        System.out.println(map2.put(&amp;quot;lili&amp;quot;, 10101010));
        map2.put(&amp;quot;nana&amp;quot;,12345234);
        map2.put(&amp;quot;feifei&amp;quot;,34563465);
        System.out.println(map2.put(&amp;quot;lili&amp;quot;, 34565677));
        map2.put(&amp;quot;mingming2&amp;quot;,12323);
        System.out.println(map==map2);
        System.out.println(map.equals(map2));//equals进行了重写，比较的是集合中的值是否一致
        System.out.println(&amp;quot;判断是否为空：&amp;quot;+map.isEmpty());
        System.out.println(map.get(&amp;quot;nana&amp;quot;));
        System.out.println(&amp;quot;-----------------------------------&amp;quot;);
        //keySet()对集合中的key进行遍历查看：
        Set&amp;lt;String&amp;gt; set = map.keySet();
        for(String s:set)&amp;#123;
            System.out.println(s);
        &amp;#125;
        System.out.println(&amp;quot;-----------------------------------&amp;quot;);
        //values()对集合中的value进行遍历查看：
        Collection&amp;lt;Integer&amp;gt; values = map.values();
        for(Integer i:values)&amp;#123;
            System.out.println(i);
        &amp;#125;
        System.out.println(&amp;quot;-----------------------------------&amp;quot;);
        //get(Object key) keySet()
        Set&amp;lt;String&amp;gt; set2 = map.keySet();
        for(String s:set2)&amp;#123;
            System.out.println(map.get(s));
        &amp;#125;
        System.out.println(&amp;quot;-----------------------------------&amp;quot;);
        //entrySet()
        Set&amp;lt;Map.Entry&amp;lt;String, Integer&amp;gt;&amp;gt; entries = map.entrySet();
        for(Map.Entry&amp;lt;String, Integer&amp;gt; e:entries)&amp;#123;
            System.out.println(e.getKey()+&amp;quot;----&amp;quot;+e.getValue());
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-TreeMap&#34;&gt;&lt;a href=&#34;#2-TreeMap&#34; class=&#34;headerlink&#34; title=&#34;2 TreeMap&#34;&gt;&lt;/a&gt;2 TreeMap&lt;/h2&gt;&lt;p&gt;【1】key的类型为String类型：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        Map&amp;lt;String,Integer&amp;gt; map = new TreeMap&amp;lt;&amp;gt;();
        map.put(&amp;quot;blili&amp;quot;,1234);
        map.put(&amp;quot;alili&amp;quot;,2345);
        map.put(&amp;quot;blili&amp;quot;,5467);
        map.put(&amp;quot;clili&amp;quot;,5678);
        map.put(&amp;quot;dlili&amp;quot;,2345);
        System.out.println(map.size());
        System.out.println(map);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】key的类型是一个自定义的引用数据类型：&lt;br&gt;（1）内部比较器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        Map&amp;lt;Student,Integer&amp;gt; map = new TreeMap&amp;lt;&amp;gt;();
        map.put(new Student(19,&amp;quot;blili&amp;quot;,170.5),1001);
        map.put(new Student(18,&amp;quot;blili&amp;quot;,150.5),1003);
        map.put(new Student(19,&amp;quot;alili&amp;quot;,180.5),1023);
        map.put(new Student(17,&amp;quot;clili&amp;quot;,140.5),1671);
        map.put(new Student(10,&amp;quot;dlili&amp;quot;,160.5),1891);
        System.out.println(map);
        System.out.println(map.size());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student implements Comparable&amp;lt;Student&amp;gt;&amp;#123;
    private int age;
    private String name;
    private double height;
    public int getAge() &amp;#123;
        return age;
    &amp;#125;
    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public double getHeight() &amp;#123;
        return height;
    &amp;#125;
    public void setHeight(double height) &amp;#123;
        this.height = height;
    &amp;#125;
    public Student(int age, String name, double height) &amp;#123;
        this.age = age;
        this.name = name;
        this.height = height;
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
                &amp;quot;age=&amp;quot; + age +
                &amp;quot;, name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;quot;, height=&amp;quot; + height +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
    @Override
    public int compareTo(Student o) &amp;#123;
       /* return this.getAge()-o.getAge();*/
        return this.getName().compareTo(o.getName());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）外部比较器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        Map&amp;lt;Student,Integer&amp;gt; map = new TreeMap&amp;lt;&amp;gt;(new Comparator&amp;lt;Student&amp;gt;() &amp;#123;
            @Override
            public int compare(Student o1, Student o2) &amp;#123;
                return ((Double)(o1.getHeight())).compareTo((Double)(o2.getHeight()));
            &amp;#125;
        &amp;#125;);
        map.put(new Student(19,&amp;quot;blili&amp;quot;,170.5),1001);
        map.put(new Student(18,&amp;quot;blili&amp;quot;,150.5),1003);
        map.put(new Student(19,&amp;quot;alili&amp;quot;,180.5),1023);
        map.put(new Student(17,&amp;quot;clili&amp;quot;,140.5),1671);
        map.put(new Student(10,&amp;quot;dlili&amp;quot;,160.5),1891);
        System.out.println(map);
        System.out.println(map.size());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-Map部分整体结构图&#34;&gt;&lt;a href=&#34;#3-Map部分整体结构图&#34; class=&#34;headerlink&#34; title=&#34;3 Map部分整体结构图&#34;&gt;&lt;/a&gt;3 Map部分整体结构图&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618174919194.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;4-源码部分&#34;&gt;&lt;a href=&#34;#4-源码部分&#34; class=&#34;headerlink&#34; title=&#34;4 源码部分&#34;&gt;&lt;/a&gt;4 源码部分&lt;/h2&gt;&lt;h3 id=&#34;4-1-HashMap&#34;&gt;&lt;a href=&#34;#4-1-HashMap&#34; class=&#34;headerlink&#34; title=&#34;4.1 HashMap&#34;&gt;&lt;/a&gt;4.1 HashMap&lt;/h3&gt;&lt;h4 id=&#34;4-1-1-代码展示特性&#34;&gt;&lt;a href=&#34;#4-1-1-代码展示特性&#34; class=&#34;headerlink&#34; title=&#34;4.1.1 代码展示特性&#34;&gt;&lt;/a&gt;4.1.1 代码展示特性&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //JDK1.7以后支持后面的&amp;lt;&amp;gt;中内容可以不写
        HashMap&amp;lt;Integer,String&amp;gt; hm = new HashMap&amp;lt;&amp;gt;();
        System.out.println(hm.put(12,&amp;quot;丽丽&amp;quot;));
        System.out.println(hm.put(7,&amp;quot;菲菲&amp;quot;));
        System.out.println(hm.put(19,&amp;quot;露露&amp;quot;));
        System.out.println(hm.put(12,&amp;quot;明明&amp;quot;));
        System.out.println(hm.put(6,&amp;quot;莹莹&amp;quot;));
        System.out.println(&amp;quot;集合的长度：&amp;quot;+hm.size());
        System.out.println(&amp;quot;集合中内容查看：&amp;quot;+hm);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果展示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175455959.png&#34; class=&#34;&#34;&gt;






&lt;h4 id=&#34;4-1-2-先演示原理&#34;&gt;&lt;a href=&#34;#4-1-2-先演示原理&#34; class=&#34;headerlink&#34; title=&#34;4.1.2 先演示原理&#34;&gt;&lt;/a&gt;4.1.2 先演示原理&lt;/h4&gt;&lt;p&gt;先演示原理图，再看源码，直接看的话，有的人接不上就蒙了：&lt;br&gt;相当于先看原理，然后从源码中验证这个原理是否正确：把图搞懂了，就是事倍功半的效果&lt;br&gt;原理如下：(JDK1.7)&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175512371.png&#34; class=&#34;&#34;&gt;






&lt;h4 id=&#34;4-1-3-源码（JDK1-7版本）&#34;&gt;&lt;a href=&#34;#4-1-3-源码（JDK1-7版本）&#34; class=&#34;headerlink&#34; title=&#34;4.1.3 源码（JDK1.7版本）&#34;&gt;&lt;/a&gt;4.1.3 源码（JDK1.7版本）&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class HashMap&amp;lt;K,V&amp;gt;
    extends AbstractMap&amp;lt;K,V&amp;gt; //【1】继承的AbstractMap中，已经实现了Map接口
        //【2】又实现了这个接口，多余，但是设计者觉得没有必要删除，就这么地了
    implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable&amp;#123;
                
                
        //【3】后续会用到的重要属性：先粘贴过来：
    static final int DEFAULT_INITIAL_CAPACITY = 16;//哈希表主数组的默认长度
        //定义了一个float类型的变量，以后作为：默认的装填因子，加载因子是表示Hsah表中元素的填满的程度
        //太大容易引起哈西冲突，太小容易浪费  0.75是经过大量运算后得到的最好值
        //这个值其实可以自己改，但是不建议改，因为这个0.75是大量运算得到的
        static final float DEFAULT_LOAD_FACTOR = 0.75f;
        transient Entry&amp;lt;K,V&amp;gt;[] table;//主数组,每个元素为Entry类型
        transient int size;
        int threshold;//数组扩容的界限值,门槛值   16*0.75=12 
        final float loadFactor;//用来接收装填因子的变量
        
        //【4】查看构造器：内部相当于：this(16,0.75f);调用了当前类中的带参构造器
        public HashMap() &amp;#123;
        this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);
    &amp;#125;
        //【5】本类中带参数构造器：--》作用给一些数值进行初始化的！
        public HashMap(int initialCapacity, float loadFactor) &amp;#123;
        //【6】给capacity赋值，capacity的值一定是 大于你传进来的initialCapacity 的 最小的 2的倍数
        int capacity = 1;
        while (capacity &amp;lt; initialCapacity)
            capacity &amp;lt;&amp;lt;= 1;
                //【7】给loadFactor赋值，将装填因子0.75赋值给loadFactor
        this.loadFactor = loadFactor;
                //【8】数组扩容的界限值,门槛值
        threshold = (int)Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);
                
                //【9】给table数组赋值，初始化数组长度为16
        table = new Entry[capacity];
                   
    &amp;#125;
        //【10】调用put方法：
        public V put(K key, V value) &amp;#123;
                //【11】对空值的判断
        if (key == null)
            return putForNullKey(value);
                //【12】调用hash方法，获取哈希码
        int hash = hash(key);
                //【14】得到key对应在数组中的位置
        int i = indexFor(hash, table.length);
                //【16】如果你放入的元素，在主数组那个位置上没有值，e==null  那么下面这个循环不走
                //当在同一个位置上放入元素的时候
        for (Entry&amp;lt;K,V&amp;gt; e = table[i]; e != null; e = e.next) &amp;#123;
            Object k;
                        //哈希值一样  并且  equals相比一样   
                        //(k = e.key) == key  如果是一个对象就不用比较equals了
            if (e.hash == hash &amp;amp;&amp;amp; ((k = e.key) == key || key.equals(k))) &amp;#123;
                V oldValue = e.value;
                e.value = value;
                e.recordAccess(this);
                return oldValue;
            &amp;#125;
        &amp;#125;
        modCount++;
                //【17】走addEntry添加这个节点的方法：
        addEntry(hash, key, value, i);
        return null;
    &amp;#125;
        
        //【13】hash方法返回这个key对应的哈希值，内部进行二次散列，为了尽量保证不同的key得到不同的哈希码！
        final int hash(Object k) &amp;#123;
        int h = 0;
        if (useAltHashing) &amp;#123;
            if (k instanceof String) &amp;#123;
                return sun.misc.Hashing.stringHash32((String) k);
            &amp;#125;
            h = hashSeed;
        &amp;#125;
                //k.hashCode()函数调用的是key键值类型自带的哈希函数，
                //由于不同的对象其hashCode()有可能相同，所以需对hashCode()再次哈希，以降低相同率。
        h ^= k.hashCode();
        // This function ensures that hashCodes that differ only by
        // constant multiples at each bit position have a bounded
        // number of collisions (approximately 8 at default load factor).
                /*
                接下来的一串与运算和异或运算，称之为“扰动函数”，
                扰动的核心思想在于使计算出来的值在保留原有相关特性的基础上，
                增加其值的不确定性，从而降低冲突的概率。
                不同的版本实现的方式不一样，但其根本思想是一致的。
                往右移动的目的，就是为了将h的高位利用起来，减少哈西冲突
                */
        h ^= (h &amp;gt;&amp;gt;&amp;gt; 20) ^ (h &amp;gt;&amp;gt;&amp;gt; 12);
        return h ^ (h &amp;gt;&amp;gt;&amp;gt; 7) ^ (h &amp;gt;&amp;gt;&amp;gt; 4);
    &amp;#125;
        //【15】返回int类型数组的坐标
        static int indexFor(int h, int length) &amp;#123;
                //其实这个算法就是取模运算：h%length，取模效率不如位运算
        return h &amp;amp; (length-1);
    &amp;#125;
        //【18】调用addEntry
        void addEntry(int hash, K key, V value, int bucketIndex) &amp;#123;
                //【25】size的大小  大于 16*0.75=12的时候，比如你放入的是第13个，这第13个你打算放在没有元素的位置上的时候
        if ((size &amp;gt;= threshold) &amp;amp;&amp;amp; (null != table[bucketIndex])) &amp;#123;
                        //【26】主数组扩容为2倍
            resize(2 * table.length);
                        //【30】重新调整当前元素的hash码
            hash = (null != key) ? hash(key) : 0;
                        //【31】重新计算元素位置
            bucketIndex = indexFor(hash, table.length);
        &amp;#125;
                //【19】将hash,key,value,bucketIndex位置  封装为一个Entry对象：
        createEntry(hash, key, value, bucketIndex);
    &amp;#125;
        //【20】
        void createEntry(int hash, K key, V value, int bucketIndex) &amp;#123;
                //【21】获取bucketIndex位置上的元素给e
        Entry&amp;lt;K,V&amp;gt; e = table[bucketIndex];
                //【22】然后将hash, key, value封装为一个对象，然后将下一个元素的指向为e （链表的头插法）
                //【23】将新的Entry放在table[bucketIndex]的位置上
        table[bucketIndex] = new Entry&amp;lt;&amp;gt;(hash, key, value, e);
                //【24】集合中加入一个元素 size+1
        size++;
    &amp;#125;
    //【27】
        void resize(int newCapacity) &amp;#123;
        Entry[] oldTable = table;
        int oldCapacity = oldTable.length;
        if (oldCapacity == MAXIMUM_CAPACITY) &amp;#123;
            threshold = Integer.MAX_VALUE;
            return;
        &amp;#125;
                //【28】创建长度为newCapacity的数组
        Entry[] newTable = new Entry[newCapacity];
        boolean oldAltHashing = useAltHashing;
        useAltHashing |= sun.misc.VM.isBooted() &amp;amp;&amp;amp;
                (newCapacity &amp;gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);
        boolean rehash = oldAltHashing ^ useAltHashing;
                //【28.5】转让方法：将老数组中的东西都重新放入新数组中
        transfer(newTable, rehash);
                //【29】老数组替换为新数组
        table = newTable;
                //【29.5】重新计算
        threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);
    &amp;#125;
        //【28.6】
        void transfer(Entry[] newTable, boolean rehash) &amp;#123;
        int newCapacity = newTable.length;
        for (Entry&amp;lt;K,V&amp;gt; e : table) &amp;#123;
            while(null != e) &amp;#123;
                Entry&amp;lt;K,V&amp;gt; next = e.next;
                if (rehash) &amp;#123;
                    e.hash = null == e.key ? 0 : hash(e.key);
                &amp;#125;
                                //【28.7】将哈希值，和新的数组容量传进去，重新计算key在新数组中的位置
                int i = indexFor(e.hash, newCapacity);
                                //【28.8】头插法
                e.next = newTable[i];//获取链表上元素给e.next
                newTable[i] = e;//然后将e放在i位置 
                e = next;//e再指向下一个节点继续遍历
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-1-4-细节讲解：主数组的长度为2的倍数&#34;&gt;&lt;a href=&#34;#4-1-4-细节讲解：主数组的长度为2的倍数&#34; class=&#34;headerlink&#34; title=&#34;4.1.4  细节讲解：主数组的长度为2的倍数&#34;&gt;&lt;/a&gt;4.1.4  细节讲解：主数组的长度为2的倍数&lt;/h4&gt;&lt;p&gt;【1】主数组的长度为2的倍数，&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175628889.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;因为这个length的长度，会影响 key的位置：&lt;br&gt;key的位置的计算：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175638657.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;实际上这个算法就是：  h%length   ,但是取模的话  效率太低，所以用位运算效率会很高。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原因1：&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;/img/image-20220618175703663.png&#34; alt=&#34;image-20220618175703663&#34;&gt;和&lt;img data-src=&#34;/img/image-20220618175712379.png&#34; alt=&#34;image-20220618175712379&#34;&gt;等效的前提就是  length必须是2的整数倍&lt;br&gt;&lt;strong&gt;原因2：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果不是2的整数倍，那么 哈西碰撞 哈西冲突的概率就高了很多&lt;/p&gt;
&lt;p&gt;位运算 就  涉及  到  length是不是2的整数倍：&lt;br&gt;比如是2的整数倍：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175753914.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175800521.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;并且这个得到的索引值，一定在 0-15之间（数组是16的时候）：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175840905.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;当然如果你扩容后数组长度为 32，那么这个索引就在0-31之间&lt;/p&gt;
&lt;p&gt;比如如果不是2的整数倍：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175850530.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;发现：如果不是2的整数倍，那么 哈西碰撞 哈西冲突的概率就高了很多&lt;/p&gt;
&lt;h4 id=&#34;4-1-5-细节讲解：装填因子0-75的原因&#34;&gt;&lt;a href=&#34;#4-1-5-细节讲解：装填因子0-75的原因&#34; class=&#34;headerlink&#34; title=&#34;4.1.5 细节讲解：装填因子0.75的原因&#34;&gt;&lt;/a&gt;4.1.5 细节讲解：装填因子0.75的原因&lt;/h4&gt;&lt;p&gt;如果装填因子是1， 那么数组满了再扩容，可以做到  最大的空间利用率&lt;br&gt;但是这是一个理想状态，元素不可能完全的均匀分布，很可能就哈西碰撞产生链表了。产生链表的话 查询时间就长了。&lt;br&gt;—》空间好，时间不好&lt;/p&gt;
&lt;p&gt;那么有人说 ，把装填因子搞小一点，0.5，  如果是0.5的话，就浪费空间，但是可以做到 到0.5就扩容 ，然后哈西碰撞就少，&lt;br&gt;不产生链表的话，那么查询效率很高&lt;br&gt;—》时间好，空间不好&lt;/p&gt;
&lt;p&gt;所以在空间和时间中，&lt;br&gt;取中间值，平衡这个因素 就取值为 0.75&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175921895.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;1.8版本&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-8底层遵照-哈希表结构-红黑树&#34;&gt;&lt;a href=&#34;#1-8底层遵照-哈希表结构-红黑树&#34; class=&#34;headerlink&#34; title=&#34;1.8底层遵照 哈希表结构 + 红黑树&#34;&gt;&lt;/a&gt;1.8底层遵照 &lt;font color=red &gt;哈希表结构 + 红黑树&lt;/font&gt;&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// HashMap&amp;lt;String,Integer&amp;gt; map = new HashMap&amp;lt;&amp;gt;(); --&amp;gt;JDK 1.7开始类型推断，后面用钻石运算符即可。
public class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; 		//【1】继承的AbstractMap中，已经实现了Map接口
    implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable &amp;#123; //【2】又实现了这个接口，多余，但是集合的设计者觉得没有必要删除，就这么地了

    //------------------属性部分：
    final float loadFactor;//【3-2】用来接收装填因子的变量
    /*
        【3-3】
        定义了一个float类型的变量，以后作为：默认的装填因子，加载因子是表示Hsah表中元素的填满的程度
        太大容易引起哈西冲突，太小容易浪费  0.75是经过大量运算后得到的最好值
        这个值其实可以自己改，但是不建议改，因为这个0.75是大量运算得到的
    */
    static final float DEFAULT_LOAD_FACTOR = 0.75f;
    int threshold;//【6-3】数组扩容的界限值,门槛值
    transient Node&amp;lt;K,V&amp;gt;[] table;//【7-5】底层主数组
    //------------------构造器：
    //【3】调用空构造器
    public HashMap() &amp;#123;
        //【3-1】给装填因子loadFactor赋值
        this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted
    &amp;#125;
    
    //【4】调用有参构造器：
    public HashMap(int initialCapacity) &amp;#123;
        //【5】调用两个参数构造器
        this(initialCapacity, DEFAULT_LOAD_FACTOR);
    &amp;#125;
    //【6】
    public HashMap(int initialCapacity, float loadFactor) &amp;#123;
        //【6-1】健壮性考虑，传入的数据过小不行，过大不行
        if (initialCapacity &amp;lt; 0)
            throw new IllegalArgumentException(&amp;quot;Illegal initial capacity: &amp;quot; +
                                               initialCapacity);
        if (initialCapacity &amp;gt; MAXIMUM_CAPACITY)
            initialCapacity = MAXIMUM_CAPACITY;
        if (loadFactor &amp;lt;= 0 || Float.isNaN(loadFactor))
            throw new IllegalArgumentException(&amp;quot;Illegal load factor: &amp;quot; +
                                               loadFactor);
        //【6-2】给装填因子loadFactor赋值，赋值为0.75，这个值可以单独传入改变，但是不建议改变，一般都用默认的0.75
        this.loadFactor = loadFactor;
        //【6-3】给threshold赋值 
        this.threshold = tableSizeFor(initialCapacity);
    &amp;#125;
    //【6-4】返回的是大于initialCapacity的最接近的2的整数倍  ，比如initialCapacity传入10，这个方法返回16
    static final int tableSizeFor(int cap) &amp;#123;//（内部内容讲源码时候不用管，面试题中详讲）
        int n = cap - 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 2;
        n |= n &amp;gt;&amp;gt;&amp;gt; 4;
        n |= n &amp;gt;&amp;gt;&amp;gt; 8;
        n |= n &amp;gt;&amp;gt;&amp;gt; 16;
        return (n &amp;lt; 0) ? 1 : (n &amp;gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
    &amp;#125;
    
    //------------------方法：
    //【7】调用put方法
    public V put(K key, V value) &amp;#123;
        //【7-1】首先调用hash方法计算哈希值：
        //【7-3】调用putVal方法传入五个参数：
        return putVal(hash(key), key, value, false, true);
    &amp;#125;
    //【7-2】计算hash值
    static final int hash(Object key) &amp;#123;
        int h;
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16);
    &amp;#125;
    //【7-4】调用
    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) &amp;#123;
        Node&amp;lt;K,V&amp;gt;[] tab;
        Node&amp;lt;K,V&amp;gt; p; 
        int n, i;
        //【7-6】将底层主数组table给tab，判断是否为null，第一次放数据一定是null
        if ((tab = table) == null || (n = tab.length) == 0)
            //【7-7】走入if分支：table是null，就对table进行扩容，走进resize方法
            n = (tab = resize()).length;//【7-21】table的length为16 ，n为16
        /*
        【7-22】
        i = (n - 1) &amp;amp; hash 根据哈希值和n计算放入数组的位置
        取出这个位置上的元素，看是否为空，如果是第一个元素，一定是null
        */
        if ((p = tab[i = (n - 1) &amp;amp; hash]) == null)
            //【7-23】在这个位置上将元素封装为Node对象，放入对应位置
            tab[i] = newNode(hash, key, value, null);//封装Node节点new Node&amp;lt;&amp;gt;(hash, key, value, null);
        else &amp;#123;
            Node&amp;lt;K,V&amp;gt; e; K k;
            if (p.hash == hash &amp;amp;&amp;amp;
                ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                e = p;
            else if (p instanceof TreeNode)
                e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(this, tab, hash, key, value);
            else &amp;#123;
                for (int binCount = 0; ; ++binCount) &amp;#123;
                    if ((e = p.next) == null) &amp;#123;
                        p.next = newNode(hash, key, value, null);
                        if (binCount &amp;gt;= TREEIFY_THRESHOLD - 1)  
                            treeifyBin(tab, hash);
                        break;
                    &amp;#125;
                    if (e.hash == hash &amp;amp;&amp;amp;
                        ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                        break;
                    p = e;
                &amp;#125;
            &amp;#125;
            if (e != null) &amp;#123;  
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            &amp;#125;
        &amp;#125;
        ++modCount;
        //【7-25】size指的是放入集合的键值总数，size++操作，不大于threshold，resize方法不走
        if (++size &amp;gt; threshold)
            resize();
        afterNodeInsertion(evict);
        return null;
    &amp;#125;
    //【7-8】resize方法：---》假设最开始走的是HashMap的空构造器：
    final Node&amp;lt;K,V&amp;gt;[] resize() &amp;#123;
        Node&amp;lt;K,V&amp;gt;[] oldTab = table;//【7-9】table 是null
        int oldCap = (oldTab == null) ? 0 : oldTab.length; //【7-10】oldCap:0
        int oldThr = threshold;//【7-11】threshold为16，oldThr：16
        int newCap, newThr = 0;
        if (oldCap &amp;gt; 0) &amp;#123;//【7-12】不走
            if (oldCap &amp;gt;= MAXIMUM_CAPACITY) &amp;#123;
                threshold = Integer.MAX_VALUE;
                return oldTab;
            &amp;#125;
            else if ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
                     oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)
                newThr = oldThr &amp;lt;&amp;lt; 1;
        &amp;#125;
        else if (oldThr &amp;gt; 0)  //【7-13】走
            newCap = oldThr;//newCap=16
        else &amp;#123;               //【7-14】不走
             
            newCap = DEFAULT_INITIAL_CAPACITY;
             
            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
        &amp;#125;
        if (newThr == 0) &amp;#123;//【7-15】走
            float ft = (float)newCap * loadFactor;//【7-16】ft: 16*0.75=12
            newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (float)MAXIMUM_CAPACITY ?
                      (int)ft : Integer.MAX_VALUE); //【7-17】newThr = 12
        &amp;#125;
        //【7-18】threshold赋值为newThr为12， ---》所以走空构造器这里threshold赋值为12，走有参构造器里面threshold赋值为12？？？？
        threshold = newThr;
        @SuppressWarnings(&amp;#123;&amp;quot;rawtypes&amp;quot;,&amp;quot;unchecked&amp;quot;&amp;#125;)
        //【7-19】创建Node数组，长度为newCap16
            Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])new Node[newCap];
        //【7-20】table赋值为newTab
        table = newTab;
        if (oldTab != null) &amp;#123;
            for (int j = 0; j &amp;lt; oldCap; ++j) &amp;#123;
                Node&amp;lt;K,V&amp;gt; e;
                if ((e = oldTab[j]) != null) &amp;#123;
                    oldTab[j] = null;
                    if (e.next == null)
                        newTab[e.hash &amp;amp; (newCap - 1)] = e;
                    else if (e instanceof TreeNode)
                        ((TreeNode&amp;lt;K,V&amp;gt;)e).split(this, newTab, j, oldCap);
                    else &amp;#123; 
                        Node&amp;lt;K,V&amp;gt; loHead = null, loTail = null;
                        Node&amp;lt;K,V&amp;gt; hiHead = null, hiTail = null;
                        Node&amp;lt;K,V&amp;gt; next;
                        do &amp;#123;
                            next = e.next;
                            if ((e.hash &amp;amp; oldCap) == 0) &amp;#123;
                                if (loTail == null)
                                    loHead = e;
                                else
                                    loTail.next = e;
                                loTail = e;
                            &amp;#125;
                            else &amp;#123;
                                if (hiTail == null)
                                    hiHead = e;
                                else
                                    hiTail.next = e;
                                hiTail = e;
                            &amp;#125;
                        &amp;#125; while ((e = next) != null);
                        if (loTail != null) &amp;#123;
                            loTail.next = null;
                            newTab[j] = loHead;
                        &amp;#125;
                        if (hiTail != null) &amp;#123;
                            hiTail.next = null;
                            newTab[j + oldCap] = hiHead;
                        &amp;#125;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return newTab;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; 
    implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable &amp;#123; 
    final float loadFactor;
    static final float DEFAULT_LOAD_FACTOR = 0.75f;
    int threshold;
    transient Node&amp;lt;K,V&amp;gt;[] table;
    public HashMap() &amp;#123;
        this.loadFactor = DEFAULT_LOAD_FACTOR; 
    &amp;#125;
    
    public HashMap(int initialCapacity) &amp;#123;
        this(initialCapacity, DEFAULT_LOAD_FACTOR);
    &amp;#125;
    public HashMap(int initialCapacity, float loadFactor) &amp;#123;
        if (initialCapacity &amp;lt; 0)
            throw new IllegalArgumentException(&amp;quot;Illegal initial capacity: &amp;quot; +
                                               initialCapacity);
        if (initialCapacity &amp;gt; MAXIMUM_CAPACITY)
            initialCapacity = MAXIMUM_CAPACITY;
        if (loadFactor &amp;lt;= 0 || Float.isNaN(loadFactor))
            throw new IllegalArgumentException(&amp;quot;Illegal load factor: &amp;quot; +
                                               loadFactor);
        this.loadFactor = loadFactor;
        this.threshold = tableSizeFor(initialCapacity);
    &amp;#125;
    static final int tableSizeFor(int cap) &amp;#123;
        int n = cap - 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 2;
        n |= n &amp;gt;&amp;gt;&amp;gt; 4;
        n |= n &amp;gt;&amp;gt;&amp;gt; 8;
        n |= n &amp;gt;&amp;gt;&amp;gt; 16;
        return (n &amp;lt; 0) ? 1 : (n &amp;gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
    &amp;#125;
    
    //【8-1】put方法
    public V put(K key, V value) &amp;#123;
        //计算hash值
        return putVal(hash(key), key, value, false, true);
    &amp;#125;

    static final int hash(Object key) &amp;#123;
        int h;
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16);
    &amp;#125;
    //【8-2】调用putVal方法
    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) &amp;#123;
        Node&amp;lt;K,V&amp;gt;[] tab;
        Node&amp;lt;K,V&amp;gt; p; 
        int n, i;
        
        //【8-3】table不空了，不走if		
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        //【8-4】tab[i]不null，不走if
        if ((p = tab[i = (n - 1) &amp;amp; hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else &amp;#123;
            Node&amp;lt;K,V&amp;gt; e; K k;
            /*
                【8-5】
                判断p.hash == hash哈希值是否相等，即使hash相等也要做&amp;amp;&amp;amp;后续的判断，因为两个对象哈希值相等是有可能的
                (k = p.key) == key   == 比较地址值，String的话一样，不是字符串地址也不一样，
                Animal a1 = new Animal(19);		和 	Animal a2 = new Animal(19);	地址一定不同，就需要用后面的equals进行比较
            */
            if (p.hash == hash &amp;amp;&amp;amp;
                ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))   //----》哈希值相等，出现哈西碰撞
                //【8-6】将该数组位置的数据给e
                e = p;
            else if (p instanceof TreeNode)
                e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(this, tab, hash, key, value);
            else &amp;#123;
                for (int binCount = 0; ; ++binCount) &amp;#123;
                    if ((e = p.next) == null) &amp;#123;
                        p.next = newNode(hash, key, value, null);
                        if (binCount &amp;gt;= TREEIFY_THRESHOLD - 1)  
                            treeifyBin(tab, hash);
                        break;
                    &amp;#125;
                    if (e.hash == hash &amp;amp;&amp;amp;
                        ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                        break;
                    p = e;
                &amp;#125;
            &amp;#125;
            if (e != null) &amp;#123;  
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;//【8-7】新value替换老value
                afterNodeAccess(e);
                return oldValue;//【8-8】返回老value
            &amp;#125;
        &amp;#125;
        ++modCount;

        if (++size &amp;gt; threshold)
            resize();
        afterNodeInsertion(evict);
        return null;
    &amp;#125;

    final Node&amp;lt;K,V&amp;gt;[] resize() &amp;#123;
        Node&amp;lt;K,V&amp;gt;[] oldTab = table;
        int oldCap = (oldTab == null) ? 0 : oldTab.length; 
        int oldThr = threshold;
        int newCap, newThr = 0;
        if (oldCap &amp;gt; 0) &amp;#123;
            if (oldCap &amp;gt;= MAXIMUM_CAPACITY) &amp;#123;
                threshold = Integer.MAX_VALUE;
                return oldTab;
            &amp;#125;
            else if ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
                     oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)
                newThr = oldThr &amp;lt;&amp;lt; 1;
        &amp;#125;
        else if (oldThr &amp;gt; 0) 
            newCap = oldThr;
        else &amp;#123;    
            newCap = DEFAULT_INITIAL_CAPACITY;
            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
        &amp;#125;
        if (newThr == 0) &amp;#123;
            float ft = (float)newCap * loadFactor;
            newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (float)MAXIMUM_CAPACITY ?
                      (int)ft : Integer.MAX_VALUE);
        &amp;#125;
        threshold = newThr;
        @SuppressWarnings(&amp;#123;&amp;quot;rawtypes&amp;quot;,&amp;quot;unchecked&amp;quot;&amp;#125;)
            Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])new Node[newCap];
        table = newTab;
        if (oldTab != null) &amp;#123;
            for (int j = 0; j &amp;lt; oldCap; ++j) &amp;#123;
                Node&amp;lt;K,V&amp;gt; e;
                if ((e = oldTab[j]) != null) &amp;#123;
                    oldTab[j] = null;
                    if (e.next == null)
                        newTab[e.hash &amp;amp; (newCap - 1)] = e;
                    else if (e instanceof TreeNode)
                        ((TreeNode&amp;lt;K,V&amp;gt;)e).split(this, newTab, j, oldCap);
                    else &amp;#123; 
                        Node&amp;lt;K,V&amp;gt; loHead = null, loTail = null;
                        Node&amp;lt;K,V&amp;gt; hiHead = null, hiTail = null;
                        Node&amp;lt;K,V&amp;gt; next;
                        do &amp;#123;
                            next = e.next;
                            if ((e.hash &amp;amp; oldCap) == 0) &amp;#123;
                                if (loTail == null)
                                    loHead = e;
                                else
                                    loTail.next = e;
                                loTail = e;
                            &amp;#125;
                            else &amp;#123;
                                if (hiTail == null)
                                    hiHead = e;
                                else
                                    hiTail.next = e;
                                hiTail = e;
                            &amp;#125;
                        &amp;#125; while ((e = next) != null);
                        if (loTail != null) &amp;#123;
                            loTail.next = null;
                            newTab[j] = loHead;
                        &amp;#125;
                        if (hiTail != null) &amp;#123;
                            hiTail.next = null;
                            newTab[j + oldCap] = hiHead;
                        &amp;#125;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return newTab;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class HashMap&amp;lt;K,V&amp;gt; extends AbstractMap&amp;lt;K,V&amp;gt; 
    implements Map&amp;lt;K,V&amp;gt;, Cloneable, Serializable &amp;#123; 
    final float loadFactor;
    static final float DEFAULT_LOAD_FACTOR = 0.75f;
    int threshold;
    transient Node&amp;lt;K,V&amp;gt;[] table;
    public HashMap() &amp;#123;
        this.loadFactor = DEFAULT_LOAD_FACTOR; 
    &amp;#125;
    
    public HashMap(int initialCapacity) &amp;#123;
        this(initialCapacity, DEFAULT_LOAD_FACTOR);
    &amp;#125;
    public HashMap(int initialCapacity, float loadFactor) &amp;#123;
        if (initialCapacity &amp;lt; 0)
            throw new IllegalArgumentException(&amp;quot;Illegal initial capacity: &amp;quot; +
                                               initialCapacity);
        if (initialCapacity &amp;gt; MAXIMUM_CAPACITY)
            initialCapacity = MAXIMUM_CAPACITY;
        if (loadFactor &amp;lt;= 0 || Float.isNaN(loadFactor))
            throw new IllegalArgumentException(&amp;quot;Illegal load factor: &amp;quot; +
                                               loadFactor);
        this.loadFactor = loadFactor;
        this.threshold = tableSizeFor(initialCapacity);
    &amp;#125;
    static final int tableSizeFor(int cap) &amp;#123;
        int n = cap - 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 1;
        n |= n &amp;gt;&amp;gt;&amp;gt; 2;
        n |= n &amp;gt;&amp;gt;&amp;gt; 4;
        n |= n &amp;gt;&amp;gt;&amp;gt; 8;
        n |= n &amp;gt;&amp;gt;&amp;gt; 16;
        return (n &amp;lt; 0) ? 1 : (n &amp;gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
    &amp;#125;
    
    //【9-1】put方法
    public V put(K key, V value) &amp;#123;
        //计算hash值
        return putVal(hash(key), key, value, false, true);
    &amp;#125;

    static final int hash(Object key) &amp;#123;
        int h;
        return (key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16);
    &amp;#125;
    //【9-2】调用putVal方法
    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) &amp;#123;
        Node&amp;lt;K,V&amp;gt;[] tab;
        Node&amp;lt;K,V&amp;gt; p; 
        int n, i;
        
        //【9-3】table不空了，不走if		
        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
        //【9-4】tab[i]不null，不走if
        if ((p = tab[i = (n - 1) &amp;amp; hash]) == null)
            tab[i] = newNode(hash, key, value, null);
        else &amp;#123;
            Node&amp;lt;K,V&amp;gt; e; K k;
            /*
                【9-5】
                判断p.hash == hash哈希值是否相等，即使hash相等也要做&amp;amp;&amp;amp;后续的判断，因为两个对象哈希值相等是有可能的
                此时“通话”和“重地”的哈希值一致，但是key不一致，if不走
            */
            if (p.hash == hash &amp;amp;&amp;amp;
                ((k = p.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                e = p;
            else if (p instanceof TreeNode)//【9-6】p也不是红黑树，不走if
                e = ((TreeNode&amp;lt;K,V&amp;gt;)p).putTreeVal(this, tab, hash, key, value);
            else &amp;#123;
                //【9-7】走到这里，证明数组的这个位置是个链表了
                for (int binCount = 0; ; ++binCount) &amp;#123;//【9-8】无条件的死循环   binCount 链表上节点的个数
                    //随着循环  p.next就是一路找链上元素
                    //p.next要是没有元素，就要开始追加了呗
                    if ((e = p.next) == null) &amp;#123;//【9-10】一路next比较都没有key相同的数据
                    
                        p.next = newNode(hash, key, value, null);//【9-11】追加在链表尾部 ---》 前七后八
                        //【9-12】如果节点个数大于8，进行树化：要从链表转为红黑树
                        if (binCount &amp;gt;= TREEIFY_THRESHOLD - 1)  
                            treeifyBin(tab, hash);//【9-13】这里还涉及 剪枝 问题，树节点在6个以下，就又变成链表了
                        break;
                    &amp;#125;
                    //【9-9】比较过程中：如果比较链表某个key相同，就break结束了，不用继续走了
                    if (e.hash == hash &amp;amp;&amp;amp;
                        ((k = e.key) == key || (key != null &amp;amp;&amp;amp; key.equals(k))))
                        break;
                    p = e;
                &amp;#125;
            &amp;#125;
            if (e != null) &amp;#123;  
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;//【8-7】新value替换老value
                afterNodeAccess(e);
                return oldValue;//【8-8】返回老value
            &amp;#125;
        &amp;#125;
        ++modCount;

        if (++size &amp;gt; threshold)
            resize();
        afterNodeInsertion(evict);
        return null;
    &amp;#125;

    final Node&amp;lt;K,V&amp;gt;[] resize() &amp;#123;
        Node&amp;lt;K,V&amp;gt;[] oldTab = table;
        int oldCap = (oldTab == null) ? 0 : oldTab.length; 
        int oldThr = threshold;
        int newCap, newThr = 0;
        if (oldCap &amp;gt; 0) &amp;#123;
            if (oldCap &amp;gt;= MAXIMUM_CAPACITY) &amp;#123;
                threshold = Integer.MAX_VALUE;
                return oldTab;
            &amp;#125;
            else if ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;
                     oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)
                newThr = oldThr &amp;lt;&amp;lt; 1;
        &amp;#125;
        else if (oldThr &amp;gt; 0) 
            newCap = oldThr;
        else &amp;#123;    
            newCap = DEFAULT_INITIAL_CAPACITY;
            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
        &amp;#125;
        if (newThr == 0) &amp;#123;
            float ft = (float)newCap * loadFactor;
            newThr = (newCap &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp; ft &amp;lt; (float)MAXIMUM_CAPACITY ?
                      (int)ft : Integer.MAX_VALUE);
        &amp;#125;
        threshold = newThr;
        @SuppressWarnings(&amp;#123;&amp;quot;rawtypes&amp;quot;,&amp;quot;unchecked&amp;quot;&amp;#125;)
            Node&amp;lt;K,V&amp;gt;[] newTab = (Node&amp;lt;K,V&amp;gt;[])new Node[newCap];
        table = newTab;
        if (oldTab != null) &amp;#123;
            for (int j = 0; j &amp;lt; oldCap; ++j) &amp;#123;
                Node&amp;lt;K,V&amp;gt; e;
                if ((e = oldTab[j]) != null) &amp;#123;
                    oldTab[j] = null;
                    if (e.next == null)
                        newTab[e.hash &amp;amp; (newCap - 1)] = e;
                    else if (e instanceof TreeNode)
                        ((TreeNode&amp;lt;K,V&amp;gt;)e).split(this, newTab, j, oldCap);
                    else &amp;#123; 
                        Node&amp;lt;K,V&amp;gt; loHead = null, loTail = null;
                        Node&amp;lt;K,V&amp;gt; hiHead = null, hiTail = null;
                        Node&amp;lt;K,V&amp;gt; next;
                        do &amp;#123;
                            next = e.next;
                            if ((e.hash &amp;amp; oldCap) == 0) &amp;#123;
                                if (loTail == null)
                                    loHead = e;
                                else
                                    loTail.next = e;
                                loTail = e;
                            &amp;#125;
                            else &amp;#123;
                                if (hiTail == null)
                                    hiHead = e;
                                else
                                    hiTail.next = e;
                                hiTail = e;
                            &amp;#125;
                        &amp;#125; while ((e = next) != null);
                        if (loTail != null) &amp;#123;
                            loTail.next = null;
                            newTab[j] = loHead;
                        &amp;#125;
                        if (hiTail != null) &amp;#123;
                            hiTail.next = null;
                            newTab[j + oldCap] = hiHead;
                        &amp;#125;
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return newTab;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;默认&lt;strong&gt;数组长度为16&lt;/strong&gt;，&lt;strong&gt;最大程度${2^{30}}$&lt;/strong&gt;,&lt;strong&gt;负载因子为0.75&lt;/strong&gt;，扩容时&lt;strong&gt;扩大2倍&lt;/strong&gt;，&lt;/p&gt;
&lt;p&gt;1.8比1.7改变了底层数据结构而已&lt;/p&gt;
&lt;h4 id=&#34;4-1-6-HashSet底层原理&#34;&gt;&lt;a href=&#34;#4-1-6-HashSet底层原理&#34; class=&#34;headerlink&#34; title=&#34;4.1.6 HashSet底层原理&#34;&gt;&lt;/a&gt;4.1.6 HashSet底层原理&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class HashSet&amp;lt;E&amp;gt;&amp;#123;
    //重要属性：
    private transient HashMap&amp;lt;E,Object&amp;gt; map;
    private static final Object PRESENT = new Object();
    //构造器：
    public HashSet() &amp;#123;
        map = new HashMap&amp;lt;&amp;gt;();//HashSet底层就是利用HashMap来完成的
    &amp;#125;
        
    public boolean add(E e) &amp;#123;
        return map.put(e, PRESENT)==null;
    &amp;#125;      
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-2TreeMap&#34;&gt;&lt;a href=&#34;#4-2TreeMap&#34; class=&#34;headerlink&#34; title=&#34;4.2TreeMap&#34;&gt;&lt;/a&gt;4.2TreeMap&lt;/h3&gt;&lt;p&gt;【1】原理大致介绍：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618175955956.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TreeMap&amp;lt;K,V&amp;gt;&amp;#123;
        //重要属性：
        //外部比较器：
        private final Comparator&amp;lt;? super K&amp;gt; comparator;
        //树的根节点：
        private transient Entry&amp;lt;K,V&amp;gt; root = null;
        //集合中元素的数量：
        private transient int size = 0;
        //空构造器:
        public TreeMap() &amp;#123;
        comparator = null;//如果使用空构造器，那么底层就不使用外部比较器
    &amp;#125;
        //有参构造器：
        public TreeMap(Comparator&amp;lt;? super K&amp;gt; comparator) &amp;#123;
        this.comparator = comparator;//如果使用有参构造器，那么就相当于指定了外部比较器
    &amp;#125;
        
        public V put(K key, V value) &amp;#123;//k,V的类型在创建对象的时候确定了
        //如果放入的是第一对元素，那么t的值为null
        Entry&amp;lt;K,V&amp;gt; t = root;//在放入第二个节点的时候，root已经是根节点了
                //如果放入的是第一个元素的话，走入这个if中：
        if (t == null) &amp;#123;
                        //自己跟自己比
            compare(key, key); // type (and possibly null) check
                        //根节点确定为root
            root = new Entry&amp;lt;&amp;gt;(key, value, null);
                        //size值变为1
            size = 1;
            modCount++;
            return null;
        &amp;#125;
                
        int cmp;
        Entry&amp;lt;K,V&amp;gt; parent;
        // split comparator and comparable paths
                //将外部比较器赋给cpr:
        Comparator&amp;lt;? super K&amp;gt; cpr = comparator;
                //cpr不等于null，意味着你刚才创建对象的时候调用了有参构造器，指定了外部比较器
        if (cpr != null) &amp;#123;
            do &amp;#123;
                parent = t;
                cmp = cpr.compare(key, t.key);//将元素的key值做比较
                                //cmp返回的值就是int类型的数据：
                                //要是这个值《0 =0  》0
                if (cmp &amp;lt; 0)
                    t = t.left;
                else if (cmp &amp;gt; 0)
                    t = t.right;
                else//cpm==0
                                //如果key的值一样，那么新的value替换老的value  但是key不变 因为key是唯一的
                    return t.setValue(value);
            &amp;#125; while (t != null);
        &amp;#125;
                //cpr等于null，意味着你刚才创建对象的时候调用了空构造器，没有指定外部比较器，使用内部比较器
        else &amp;#123;
            if (key == null)
                throw new NullPointerException();
            Comparable&amp;lt;? super K&amp;gt; k = (Comparable&amp;lt;? super K&amp;gt;) key;
            do &amp;#123;
                parent = t;
                cmp = k.compareTo(t.key);//将元素的key值做比较
                if (cmp &amp;lt; 0)
                    t = t.left;
                else if (cmp &amp;gt; 0)
                    t = t.right;
                else
                    return t.setValue(value);
            &amp;#125; while (t != null);
        &amp;#125;
        Entry&amp;lt;K,V&amp;gt; e = new Entry&amp;lt;&amp;gt;(key, value, parent);
        if (cmp &amp;lt; 0)
            parent.left = e;
        else
            parent.right = e;
        fixAfterInsertion(e);
        size++;//size加1 操作
        modCount++;
        return null;
    &amp;#125;
        
        
&amp;#125;
 static final class Entry&amp;lt;K,V&amp;gt; implements Map.Entry&amp;lt;K,V&amp;gt; &amp;#123;
        K key;
        V value;
        Entry&amp;lt;K,V&amp;gt; left = null;
        Entry&amp;lt;K,V&amp;gt; right = null;
        Entry&amp;lt;K,V&amp;gt; parent;
        boolean color = BLACK;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;TreeSet源码&#34;&gt;&lt;a href=&#34;#TreeSet源码&#34; class=&#34;headerlink&#34; title=&#34;TreeSet源码&#34;&gt;&lt;/a&gt;TreeSet源码&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TreeSet&amp;lt;E&amp;gt; extends AbstractSet&amp;lt;E&amp;gt;
    implements NavigableSet&amp;lt;E&amp;gt;, Cloneable, java.io.Serializable&amp;#123;
                //重要属性：
                private transient NavigableMap&amp;lt;E,Object&amp;gt; m;
                private static final Object PRESENT = new Object();
                
                //在调用空构造器的时候，底层创建了一个TreeMap
                public TreeSet() &amp;#123;
                        this(new TreeMap&amp;lt;E,Object&amp;gt;());
                &amp;#125;
                
                TreeSet(NavigableMap&amp;lt;E,Object&amp;gt; m) &amp;#123;
                        this.m = m;
                &amp;#125;
                
                public boolean add(E e) &amp;#123;
        return m.put(e, PRESENT)==null;
    &amp;#125;
                
                
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Collections工具类&#34;&gt;&lt;a href=&#34;#Collections工具类&#34; class=&#34;headerlink&#34; title=&#34;Collections工具类&#34;&gt;&lt;/a&gt;Collections工具类&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //Collections不支持创建对象，因为构造器私有化了
        /*Collections cols = new Collections();*/
        //里面的属性和方法都是被static修饰，我们可以直接用类名.去调用即可：
        //常用方法：
        //addAll：
        ArrayList&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();
        list.add(&amp;quot;cc&amp;quot;);
        list.add(&amp;quot;bb&amp;quot;);
        list.add(&amp;quot;aa&amp;quot;);
        Collections.addAll(list,&amp;quot;ee&amp;quot;,&amp;quot;dd&amp;quot;,&amp;quot;ff&amp;quot;);
        Collections.addAll(list,new String[]&amp;#123;&amp;quot;gg&amp;quot;,&amp;quot;oo&amp;quot;,&amp;quot;pp&amp;quot;&amp;#125;);
        System.out.println(list);
        //binarySearch必须在有序的集合中查找：--》排序：
        Collections.sort(list);//sort提供的是升序排列
        System.out.println(list);
        //binarySearch
        System.out.println(Collections.binarySearch(list, &amp;quot;cc&amp;quot;));
        //copy:替换方法
        ArrayList&amp;lt;String&amp;gt; list2 = new ArrayList&amp;lt;&amp;gt;();
        Collections.addAll(list2,&amp;quot;tt&amp;quot;,&amp;quot;ss&amp;quot;);
        Collections.copy(list,list2);//将list2的内容替换到list上去
        System.out.println(list);
        System.out.println(list2);
        //fill 填充
        Collections.fill(list2,&amp;quot;yyy&amp;quot;);
        System.out.println(list2);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;数据结构&#34;&gt;&lt;a href=&#34;#数据结构&#34; class=&#34;headerlink&#34; title=&#34;数据结构&#34;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&#34;栈&#34;&gt;&lt;a href=&#34;#栈&#34; class=&#34;headerlink&#34; title=&#34;栈&#34;&gt;&lt;/a&gt;栈&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        /*
        Stack是Vector的子类，Vector里面两个重要的属性：
        Object[] elementData;底层依然是一个数组
        int elementCount;数组中的容量
         */
        Stack s = new Stack();
        s.add(&amp;quot;A&amp;quot;);
        s.add(&amp;quot;B&amp;quot;);
        s.add(&amp;quot;C&amp;quot;);
        s.add(&amp;quot;D&amp;quot;);
        System.out.println(s);//[A, B, C, D]
        System.out.println(&amp;quot;栈是否为空：&amp;quot; + s.empty());
        System.out.println(&amp;quot;查看栈顶的数据，但是不移除：&amp;quot; + s.peek());
        System.out.println(s);
        System.out.println(&amp;quot;查看栈顶的数据，并且不移除：&amp;quot; + s.pop());
        System.out.println(s);
        s.push(&amp;quot;D&amp;quot;);//和add方法执行的功能一样，就是返回值不同
        System.out.println(s);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;同步类容器&#34;&gt;&lt;a href=&#34;#同步类容器&#34; class=&#34;headerlink&#34; title=&#34;同步类容器&#34;&gt;&lt;/a&gt;同步类容器&lt;/h2&gt;&lt;p&gt;比如ArrayList，HashMap，线程不安全，现在想把线程不安全的集合转换为线程安全的集合：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //ArrayList为案例：从线程不安全  转为线程安全：
        List list = Collections.synchronizedList(new ArrayList());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;试试ArrayList的线程不安全：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个ArrayList集合：
        ArrayList list = new ArrayList();
        //创建一个线程池：线程池定长100
        ExecutorService es = Executors.newFixedThreadPool(100);
        //并发向集合中添加10000个数据：
        for (int i = 0; i &amp;lt; 10000; i++) &amp;#123;
            //每个线程处理任务：run方法中的内容就是线程单元，任务，实际线程执行的部分
            es.execute(new Runnable() &amp;#123;
                @Override
                public void run() &amp;#123;
                    list.add(&amp;quot;aaa&amp;quot;);
                &amp;#125;
            &amp;#125;);
        &amp;#125;
        //关闭线程池：
        es.shutdown();
        //监控线程是否执行完毕：
        while(true)&amp;#123;
            //线程都执行完以后返回true
            if(es.isTerminated())&amp;#123;
                System.out.println(&amp;quot;所有的子线程都执行完毕了！&amp;quot;);
                //执行完毕以后看一下集合中元素的数量：
                System.out.println(list.size());
                if(list.size() == 10000)&amp;#123;
                    System.out.println(&amp;quot;线程安全！&amp;quot;);
                &amp;#125;else&amp;#123;
                    System.out.println(&amp;quot;线程不安全！&amp;quot;);
                &amp;#125;
                //线程执行完以后，while循环可以停止：
                break;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180549466.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;利用同步类容器解决：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个ArrayList集合：
        ArrayList oldlist = new ArrayList();
        List list = Collections.synchronizedList(oldlist);
        //创建一个线程池：线程池定长100
        ExecutorService es = Executors.newFixedThreadPool(100);
        //并发向集合中添加10000个数据：
        for (int i = 0; i &amp;lt; 10000; i++) &amp;#123;
            //每个线程处理任务：run方法中的内容就是线程单元，任务，实际线程执行的部分
            es.execute(new Runnable() &amp;#123;
                @Override
                public void run() &amp;#123;
                    list.add(&amp;quot;aaa&amp;quot;);
                &amp;#125;
            &amp;#125;);
        &amp;#125;
        //关闭线程池：
        es.shutdown();
        //监控线程是否执行完毕：
        while(true)&amp;#123;
            //线程都执行完以后返回true
            if(es.isTerminated())&amp;#123;
                System.out.println(&amp;quot;所有的子线程都执行完毕了！&amp;quot;);
                //执行完毕以后看一下集合中元素的数量：
                System.out.println(list.size());
                if(list.size() == 10000)&amp;#123;
                    System.out.println(&amp;quot;线程安全！&amp;quot;);
                &amp;#125;else&amp;#123;
                    System.out.println(&amp;quot;线程不安全！&amp;quot;);
                &amp;#125;
                //线程执行完以后，while循环可以停止：
                break;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180623443.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;源码解析：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180635090.png&#34; class=&#34;&#34;&gt;




&lt;h2 id=&#34;ConcurrentMap并发容器&#34;&gt;&lt;a href=&#34;#ConcurrentMap并发容器&#34; class=&#34;headerlink&#34; title=&#34;ConcurrentMap并发容器&#34;&gt;&lt;/a&gt;ConcurrentMap并发容器&lt;/h2&gt;&lt;p&gt;JDK5.0之后提供了多种并发类容器可以替代同步类容器，提升性能、吞吐量&lt;br&gt;ConcurrentHashMap替代HashMap、HashTable&lt;br&gt;ConcurrentSkipListMap替代TreeMap&lt;/p&gt;
&lt;p&gt;简单原理：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180711631.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;并发情况下，验证提高性能：&lt;/p&gt;
&lt;p&gt;ConcunrrentHashMap :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //选择一个容器：
        ConcurrentHashMap&amp;lt;String,Integer&amp;gt; map = new ConcurrentHashMap&amp;lt;&amp;gt;();
        
        //创建10个线程：
        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;
            new Thread(new Runnable() &amp;#123;
                @Override
                public void run() &amp;#123;
                    long startTime = System.currentTimeMillis();
                    for (int j = 0; j &amp;lt; 1000000; j++) &amp;#123;
                        map.put(&amp;quot;test&amp;quot; + j , j);
                    &amp;#125;
                    long endTime = System.currentTimeMillis();
                    System.out.println(&amp;quot;一共需要的时间：&amp;quot; + (endTime - startTime));
                &amp;#125;
            &amp;#125;).start();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180735265.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;Hashtable：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //选择一个容器：
        //ConcurrentHashMap&amp;lt;String,Integer&amp;gt; map = new ConcurrentHashMap&amp;lt;&amp;gt;();
        Hashtable map = new Hashtable();
        //创建10个线程：
        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;
            new Thread(new Runnable() &amp;#123;
                @Override
                public void run() &amp;#123;
                    long startTime = System.currentTimeMillis();
                    for (int j = 0; j &amp;lt; 1000000; j++) &amp;#123;
                        map.put(&amp;quot;test&amp;quot; + j , j);
                    &amp;#125;
                    long endTime = System.currentTimeMillis();
                    System.out.println(&amp;quot;一共需要的时间：&amp;quot; + (endTime - startTime));
                &amp;#125;
            &amp;#125;).start();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180757516.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;HashMap：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //选择一个容器：
        //ConcurrentHashMap&amp;lt;String,Integer&amp;gt; map = new ConcurrentHashMap&amp;lt;&amp;gt;();
        //Hashtable map = new Hashtable();
        HashMap map = new HashMap();
        //创建10个线程：
        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;
            new Thread(new Runnable() &amp;#123;
                @Override
                public void run() &amp;#123;
                    long startTime = System.currentTimeMillis();
                    for (int j = 0; j &amp;lt; 1000000; j++) &amp;#123;
                        map.put(&amp;quot;test&amp;quot; + j , j);
                    &amp;#125;
                    long endTime = System.currentTimeMillis();
                    System.out.println(&amp;quot;一共需要的时间：&amp;quot; + (endTime - startTime));
                &amp;#125;
            &amp;#125;).start();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180824896.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;线程安全的HashMap：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //选择一个容器：
        //ConcurrentHashMap&amp;lt;String,Integer&amp;gt; map = new ConcurrentHashMap&amp;lt;&amp;gt;();
        //Hashtable map = new Hashtable();
        HashMap oldmap = new HashMap();
        Map map = Collections.synchronizedMap(oldmap);
        //创建10个线程：
        for (int i = 0; i &amp;lt; 10; i++) &amp;#123;
            new Thread(new Runnable() &amp;#123;
                @Override
                public void run() &amp;#123;
                    long startTime = System.currentTimeMillis();
                    for (int j = 0; j &amp;lt; 1000000; j++) &amp;#123;
                        map.put(&amp;quot;test&amp;quot; + j , j);
                    &amp;#125;
                    long endTime = System.currentTimeMillis();
                    System.out.println(&amp;quot;一共需要的时间：&amp;quot; + (endTime - startTime));
                &amp;#125;
            &amp;#125;).start();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618180846459.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;总结：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;ConcurrentHashMap&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;性能高，线程安全&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Hashtable: 线程安全&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;性能低&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;HashMap:线程不安全&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;性能高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;线程安全的HashMap：线程安全，性能低&lt;/p&gt;
&lt;h2 id=&#34;COW并发容器&#34;&gt;&lt;a href=&#34;#COW并发容器&#34; class=&#34;headerlink&#34; title=&#34;COW并发容器&#34;&gt;&lt;/a&gt;COW并发容器&lt;/h2&gt;&lt;p&gt;【1】COW类并发容器，全称：Copy  On  Write容器，写时复制容器。（读写分离容器）&lt;/p&gt;
&lt;p&gt;【2】原理：&lt;br&gt;向容器中添加元素时，先将容器进行Copy复制出一个新容器，然后将元素添加到新容器中，再将原容器的引用指向新容器。&lt;br&gt;并发读的时候不需要锁定容器，因为原容器没有变化，所以可以读取原容器中的值，使用的是一种读写分离的思想。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181056593.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;【3】这种设计的好处是什么呢？&lt;br&gt;注意上面的操作arr数组本身是无锁的，没有锁，在添加数据的时候，做了额外的复制，&lt;br&gt;此时如果有线程来读数据，那么读取的是老arr的数据，此时arr的地址还没有改呢，在我添加元素的过程中，&lt;br&gt;无论有多少个线程来读数据，都是读的原来的arr，不是新的arr&lt;br&gt;所以性能很高，读写分离。提高了并发的性能。如果再读再复制…&lt;/p&gt;
&lt;p&gt;【4】注意：&lt;br&gt;CopyOnWrite容器只能保证数据的最终一致性，不能保证数据实时一致性。&lt;br&gt;所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。&lt;/p&gt;
&lt;p&gt;【5】适合特定场合：&lt;br&gt;这个应用场景显而易见，适合读多写少的情况。如果一万个线程都添加操作，都在集合中添加数据，那数组不断复制，长度不断+1，&lt;br&gt;那JVM肯定一直往上飙升，你用的时候肯定要评估使用场景的。&lt;br&gt;由于每次更新都会复制新容器，所以如果数据量较大并且更新操作频繁则对内存消耗很高，建议在高并发读的场景下使用。&lt;/p&gt;
&lt;p&gt;【6】主要讲解：&lt;br&gt;COW容器有两种一种是CopyonWriteArrayList，一种是CopyOnWriteArraySet&lt;br&gt;一个是替代ArrayList，一个是代替Set&lt;/p&gt;
&lt;h3 id=&#34;CopyOnWriteArrayList&#34;&gt;&lt;a href=&#34;#CopyOnWriteArrayList&#34; class=&#34;headerlink&#34; title=&#34;CopyOnWriteArrayList&#34;&gt;&lt;/a&gt;CopyOnWriteArrayList&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        CopyOnWriteArrayList&amp;lt;Integer&amp;gt; list = new CopyOnWriteArrayList&amp;lt;&amp;gt;();
        //添加方法：
        list.add(1);
        list.add(2);
        list.add(3);
        list.add(4);
        System.out.println(list);//[1, 2, 3, 4]
        list.add(3);//add方法无论元素是否存在，都可以添加进去--》添加重复的元素
        System.out.println(list);//[1, 2, 3, 4, 3]
        //adj. 缺席的；缺少的；心不在焉的；茫然的
        list.addIfAbsent(33);//添加不存在的元素--》不可以添加重复的数据
        System.out.println(list);//[1, 2, 3, 4, 3, 33]
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;源码分析：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CopyOnWriteArrayList&amp;lt;E&amp;gt;&amp;#123;
        //底层基于数组实现的
        private transient volatile Object[] array;
        
        public CopyOnWriteArrayList() &amp;#123;
        setArray(new Object[0]);
    &amp;#125;
        
        final void setArray(Object[] a) &amp;#123;
        array = a; // array = new Object[0]
    &amp;#125;
        //add方法：
        public boolean add(E e) &amp;#123;
        final ReentrantLock lock = this.lock;
        lock.lock();
        try &amp;#123;
                        //返回底层array数组,给了elements
            Object[] elements = getArray();
                        //获取elements的长度---》获取老数组的长度
            int len = elements.length;
                        //完成数组的复制，将老数组中的元素复制到新数组中，并且新数组的长度加1操作
            Object[] newElements = Arrays.copyOf(elements, len + 1);
                        //将e元素放入新数组最后位置
            newElements[len] = e;
                        //array数组的指向从老数组变为新数组
            setArray(newElements);
            return true;
        &amp;#125; finally &amp;#123;
            lock.unlock();
        &amp;#125;
    &amp;#125;
        
        
        final Object[] getArray() &amp;#123;
        return array;//返回底层数组
    &amp;#125;
        
        
        private boolean addIfAbsent(E e, Object[] snapshot) &amp;#123;
        final ReentrantLock lock = this.lock;
        lock.lock();
        try &amp;#123;
                        //取出array数组给current
            Object[] current = getArray();
            int len = current.length;
            if (snapshot != current) &amp;#123;
                // Optimize for lost race to another addXXX operation
                int common = Math.min(snapshot.length, len);
                                //遍历老数组：
                for (int i = 0; i &amp;lt; common; i++)
                                        //eq(e, current[i])将放入的元素和老数组的每一个元素进行比较，如果有重复的元素，就返回false，不添加了
                    if (current[i] != snapshot[i] &amp;amp;&amp;amp; eq(e, current[i]))
                        return false;
                if (indexOf(e, current, common, len) &amp;gt;= 0)
                        return false;
            &amp;#125;
                        //完成数组的复制，将老数组中的元素复制到新数组中，并且新数组的长度加1操作
            Object[] newElements = Arrays.copyOf(current, len + 1);
                        //将e元素放入新数组最后位置
            newElements[len] = e;
                        //array数组的指向从老数组变为新数组
            setArray(newElements);
            return true;
        &amp;#125; finally &amp;#123;
            lock.unlock();
        &amp;#125;
    &amp;#125;             
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;CopyOnWriteArraySet&#34;&gt;&lt;a href=&#34;#CopyOnWriteArraySet&#34; class=&#34;headerlink&#34; title=&#34;CopyOnWriteArraySet&#34;&gt;&lt;/a&gt;CopyOnWriteArraySet&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建一个集合：
        CopyOnWriteArraySet&amp;lt;Integer&amp;gt; set = new CopyOnWriteArraySet&amp;lt;&amp;gt;();
        //在这里也体现出Set和List的本质区别，就在于是否重复
        //所以add方法直接不可以添加重复数据进去
        set.add(1);
        set.add(2);
        set.add(2);
        set.add(7);
        System.out.println(set);//[1, 2, 7]
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CopyOnWriteArraySet&amp;lt;E&amp;gt;&amp;#123;
        //CopyOnWriteArraySet底层基于CopyOnWriteArrayList
        private final CopyOnWriteArrayList&amp;lt;E&amp;gt; al;
        
        public CopyOnWriteArraySet() &amp;#123;
        al = new CopyOnWriteArrayList&amp;lt;E&amp;gt;();
    &amp;#125;
        
        //添加方法：
        public boolean add(E e) &amp;#123;
        return al.addIfAbsent(e);//底层调用的还是CopyOnWriteArrayList的addIfAbsent
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;由上面的源码看出，每次调用CopyOnWriteArraySet的add方法时候，其实底层是基于CopyOnWriteArrayList的addIfAbsent，&lt;br&gt;每次在addIfAbsent方法中每次都要对数组进行遍历，所以CopyOnWriteArraySet的性能低于CopyOnWriteArrayList&lt;/p&gt;
&lt;h2 id=&#34;队列&#34;&gt;&lt;a href=&#34;#队列&#34; class=&#34;headerlink&#34; title=&#34;队列&#34;&gt;&lt;/a&gt;队列&lt;/h2&gt;&lt;p&gt;数据结构分为：&lt;br&gt;（1）逻辑结构 ：–》思想上的结构–》卧室，厨房，卫生间 —》线性表（数组，链表），图，树，栈，队列&lt;br&gt;（2）物理结构 ：–》真实结构–》钢筋混凝土+牛顿力学——》紧密结构（顺序结构），跳转结构（链式结构）&lt;/p&gt;
&lt;p&gt;队列：特点：先进先出 （FIFO）（first in first out）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181454201.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181504415.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;他有两端，一端是让新元素进去，一端是让老元素出去&lt;/p&gt;
&lt;p&gt;在需要公平且经济地对各种自然或社会资源做管理或分配的场合，无论是调度银行和医院的服务窗口，还是管理轮耕的田地和轮伐的森林，队列都可大显身手。&lt;/p&gt;
&lt;p&gt;甚至计算机及其网络自身内部的各种计算资源，无论是多进程共享的 CPU 时间，还是多用户共享的打印机，也都需要借助队列结构实现合理和优化的分配。&lt;/p&gt;
&lt;p&gt;双端队列：两端都可以进行进队，出队的队列：&lt;/p&gt;
&lt;p&gt;（1）前端，后端都可以进出：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181511902.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;（2）进行限制：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181516928.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;（3）特殊情况，双端队列实现栈操作:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181522040.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;栈和队列的物理结构实现 可以用线性表的数组，链表都可以&lt;/p&gt;
&lt;h2 id=&#34;队列Queue&#34;&gt;&lt;a href=&#34;#队列Queue&#34; class=&#34;headerlink&#34; title=&#34;队列Queue&#34;&gt;&lt;/a&gt;队列Queue&lt;/h2&gt;&lt;h3 id=&#34;阻塞队列&#34;&gt;&lt;a href=&#34;#阻塞队列&#34; class=&#34;headerlink&#34; title=&#34;阻塞队列&#34;&gt;&lt;/a&gt;阻塞队列&lt;/h3&gt;&lt;h4 id=&#34;BlockingQueue介绍&#34;&gt;&lt;a href=&#34;#BlockingQueue介绍&#34; class=&#34;headerlink&#34; title=&#34;BlockingQueue介绍&#34;&gt;&lt;/a&gt;BlockingQueue介绍&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181740905.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;总结：BlockingQueue继承Queue，Queue继承自Collection&lt;br&gt;所以Collection最基础的增删改查操作是有的，在这个基础上，多了Queue的特点，在这个基础上又多了阻塞的特点，最终形成了BlockingQueue&lt;/p&gt;
&lt;p&gt;什么叫阻塞？&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181750078.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181756012.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;常用的API：&lt;br&gt;添加：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181825630.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181805698.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181833424.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;put是阻塞的&lt;/p&gt;
&lt;p&gt;查询：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181839103.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181845214.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;take是阻塞的&lt;/p&gt;
&lt;p&gt;删除：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181852391.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;常见子类&#34;&gt;&lt;a href=&#34;#常见子类&#34; class=&#34;headerlink&#34; title=&#34;常见子类&#34;&gt;&lt;/a&gt;常见子类&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;#queue_impl1&#34;&gt;ArrayBlockingQueue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#queue_impl2&#34;&gt;LinkedBlockingQueue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#queue_impl3&#34;&gt;SynchronousQueue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#queue_impl4&#34;&gt;PriorityBlockingQueue&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#queue_impl5&#34;&gt;DelayQueue&lt;/a&gt;&lt;/p&gt;
&lt;div name=queue_impl1&gt;



&lt;blockquote&gt;
&lt;p&gt;ArrayBlockingQueue&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;源码中的注释的解释说明：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618181949074.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;【1】添加元素：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) throws InterruptedException &amp;#123;
        //创建一个队列，队列可以指定容量指定长度3：
        ArrayBlockingQueue aq = new ArrayBlockingQueue(3);
        //添加元素：
        //【1】添加null元素：不可以添加null元素，会报空指针异常：NullPointerException
        //aq.add(null);
        //aq.offer(null);
        //aq.put(null);
        //【2】正常添加元素：
        aq.add(&amp;quot;aaa&amp;quot;);
        aq.offer(&amp;quot;bbb&amp;quot;);
        aq.put(&amp;quot;ccc&amp;quot;);
        System.out.println(aq);//[aaa, bbb, ccc]
        //【3】在队列满的情况下，再添加元素：
        //aq.add(&amp;quot;ddd&amp;quot;);//在队列满的情况下，添加元素 出现异常：Queue full
        //System.out.println(aq.offer(&amp;quot;ddd&amp;quot;));//没有添加成功，返回false
        //设置最大阻塞时间，如果时间到了，队列还是满的，就不再阻塞了
        //aq.offer(&amp;quot;ddd&amp;quot;,2, TimeUnit.SECONDS);
        //真正阻塞的方法： put ,如果队列满，就永远阻塞 
        aq.put(&amp;quot;ddd&amp;quot;);
        System.out.println(aq);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】获取元素：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) throws InterruptedException &amp;#123;
        //创建一个队列，队列可以指定容量指定长度3：
        ArrayBlockingQueue aq = new ArrayBlockingQueue(3);
        aq.add(&amp;quot;aaa&amp;quot;);
        aq.add(&amp;quot;bbb&amp;quot;);
        aq.add(&amp;quot;ccc&amp;quot;);
        //得到头元素但是不移除
        System.out.println(aq.peek());
        System.out.println(aq);
        //得到头元素并且移除
        System.out.println(aq.poll());
        System.out.println(aq);
        //得到头元素并且移除
        System.out.println(aq.take());
        System.out.println(aq);
        //清空元素：
        aq.clear();
        System.out.println(aq);
        System.out.println(aq.peek());//null
        System.out.println(aq.poll());//null
        //设置阻塞事件，如果队列为空，返回null，时间到了以后就不阻塞了
        //System.out.println(aq.poll(2, TimeUnit.SECONDS));
        //真正阻塞：队列为空，永远阻塞
        System.out.println(aq.take());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】源码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ArrayBlockingQueue&amp;lt;E&amp;gt; &amp;#123;
        //底层就是一个数组：
        final Object[] items;
        //取元素用到的索引，初始结果为0
        int takeIndex;
        //放元素用到的索引，初始结果为0
        int putIndex;
        //数组中元素的个数：
        int count;
        
        //一把锁：这个锁肯定很多方法中用到了，所以定义为属性，初始化以后可以随时使用
    final ReentrantLock lock;
    //锁伴随的一个等待吃：notEmpty
    private final Condition notEmpty;
    //锁伴随的一个等待吃：notFull
    private final Condition notFull;
        
        //构造器：
        public ArrayBlockingQueue(int capacity) &amp;#123;//传入队列指定的容量
        this(capacity, false);
    &amp;#125;
        
        public ArrayBlockingQueue(int capacity, boolean fair) &amp;#123;//传入队列指定的容量
                //健壮性考虑
        if (capacity &amp;lt;= 0)
            throw new IllegalArgumentException();
                //初始化底层数组
        this.items = new Object[capacity];
                //初始化锁 和  等待队列
        lock = new ReentrantLock(fair);
        notEmpty = lock.newCondition();
        notFull =  lock.newCondition();
    &amp;#125;
        
        //两个基本方法：一个是入队，一个是出队  ，是其他方法的基础：
        //入队：
        private void enqueue(E x) &amp;#123;
        // assert lock.getHoldCount() == 1;
        // assert items[putIndex] == null;
        final Object[] items = this.items;//底层数组赋给items
                //在对应的下标位置放入元素
        items[putIndex] = x;
        if (++putIndex == items.length) //++putIndex putIndex 索引 加1 
            putIndex = 0;
                //每放入一个元素，count加1操作
        count++;
        notEmpty.signal();
    &amp;#125;
        
        
        //出队：
        private E dequeue() &amp;#123;
        // assert lock.getHoldCount() == 1;
        // assert items[takeIndex] != null;
        final Object[] items = this.items;//底层数组赋给items
        @SuppressWarnings(&amp;quot;unchecked&amp;quot;)
        E x = (E) items[takeIndex];//在对应的位置取出元素
        items[takeIndex] = null;//对应位置元素取出后就置为null
        if (++takeIndex == items.length)//++takeIndex 加1操作
            takeIndex = 0;
        count--;//每取出一个元素，count减1操作
        if (itrs != null)
            itrs.elementDequeued();
        notFull.signal();
        return x;//将取出的元素作为方法的返回值
    &amp;#125;       
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;takeIndex和putIndex置为0的原因：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182045354.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】其他的添加或者获取的方法都是依托与这个入队和出队的基础方法&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182053419.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【5】感受一下put和take的阻塞：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182101129.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;上面的while不可以换为if，因为如果notFull中的线程被激活的瞬间，有其他线程放入元素，那么队列就又满了&lt;br&gt;那么沿着await后面继续执行就不可以，所以一定要反复确定队列是否满的，才能放入元素&lt;/p&gt;
&lt;div name=queue_impl2&gt;



&lt;blockquote&gt;
&lt;p&gt;LinkedBlockingQueue&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个可选择的有边界的队列：意思就是队列的长度可以指定，也可以不指定&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182251224.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【1】添加元素：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) throws InterruptedException &amp;#123;
        //创建一个队列，队列可以指定容量指定长度3：
        LinkedBlockingQueue aq = new LinkedBlockingQueue(3);
        //添加元素：
        //【1】添加null元素：不可以添加null元素，会报空指针异常：NullPointerException
        //aq.add(null);
        //aq.offer(null);
        aq.put(null);
        //【2】正常添加元素：
        aq.add(&amp;quot;aaa&amp;quot;);
        aq.offer(&amp;quot;bbb&amp;quot;);
        aq.put(&amp;quot;ccc&amp;quot;);
        System.out.println(aq);//[aaa, bbb, ccc]
        //【3】在队列满的情况下，再添加元素：
        //aq.add(&amp;quot;ddd&amp;quot;);//在队列满的情况下，添加元素 出现异常：Queue full
        //System.out.println(aq.offer(&amp;quot;ddd&amp;quot;));//没有添加成功，返回false
        //设置最大阻塞时间，如果时间到了，队列还是满的，就不再阻塞了
        //aq.offer(&amp;quot;ddd&amp;quot;,2, TimeUnit.SECONDS);
        //真正阻塞的方法： put ,如果队列满，就永远阻塞
        aq.put(&amp;quot;ddd&amp;quot;);
        System.out.println(aq);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】取出元素：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) throws InterruptedException &amp;#123;
        //创建一个队列，队列可以指定容量指定长度3：
        LinkedBlockingQueue aq = new LinkedBlockingQueue();
        aq.add(&amp;quot;aaa&amp;quot;);
        aq.add(&amp;quot;bbb&amp;quot;);
        aq.add(&amp;quot;ccc&amp;quot;);
        //得到头元素但是不移除
        System.out.println(aq.peek());
        System.out.println(aq);
        //得到头元素并且移除
        System.out.println(aq.poll());
        System.out.println(aq);
        //得到头元素并且移除
        System.out.println(aq.take());
        System.out.println(aq);
        //清空元素：
        aq.clear();
        System.out.println(aq);
        System.out.println(aq.peek());//null
        System.out.println(aq.poll());//null
        //设置阻塞事件，如果队列为空，返回null，时间到了以后就不阻塞了
        //System.out.println(aq.poll(2, TimeUnit.SECONDS));
        //真正阻塞：队列为空，永远阻塞
        System.out.println(aq.take());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】特点：&lt;br&gt;ArrayBlockingQueue ： 不支持读写同时操作，底层基于数组的。&lt;br&gt;LinkedBlockingQueue：支持读写同时操作，并发情况下，效率高。底层基于链表。&lt;/p&gt;
&lt;p&gt;【4】源码：&lt;br&gt;入队操作：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182330212.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;出队操作：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182341368.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class LinkedBlockingQueue&amp;lt;E&amp;gt;&amp;#123;
        //内部类Node就是链表的节点的对象对应的类：
        static class Node&amp;lt;E&amp;gt; &amp;#123;
        E item;//封装你要装的那个元素
        
        Node&amp;lt;E&amp;gt; next;//下一个Node节点的地址
        Node(E x) &amp;#123; item = x; &amp;#125;//构造器
    &amp;#125;
        //链表的长度
        private final int capacity;
        //计数器：
        private final AtomicInteger count = new AtomicInteger();
        //链表的头结点
        transient Node&amp;lt;E&amp;gt; head;
        //链表的尾结点
        private transient Node&amp;lt;E&amp;gt; last;
        //取元素用的锁
        private final ReentrantLock takeLock = new ReentrantLock();
        //等待池
    private final Condition notEmpty = takeLock.newCondition();
    //放元素用的锁
    private final ReentrantLock putLock = new ReentrantLock();
    //等待池
    private final Condition notFull = putLock.newCondition();
        
        public LinkedBlockingQueue() &amp;#123;
        this(Integer.MAX_VALUE);//调用类本类的空构造器，传入正21亿
    &amp;#125;
        
        public LinkedBlockingQueue(int capacity) &amp;#123;
                //健壮性考虑
        if (capacity &amp;lt;= 0) throw new IllegalArgumentException();
                //给队列指定长度  
        this.capacity = capacity;
                //last，head指向一个新的节点，新的节点中 元素为null 
        last = head = new Node&amp;lt;E&amp;gt;(null);
    &amp;#125;
        
        
        //入队：
        private void enqueue(Node&amp;lt;E&amp;gt; node) &amp;#123;
        last = last.next = node;
    &amp;#125;
        
        //出队：
        private E dequeue() &amp;#123;
        Node&amp;lt;E&amp;gt; h = head;//h指向了head
        Node&amp;lt;E&amp;gt; first = h.next;//first 指向head的next
        h.next = h; // help GC   h.next指向自己，更容易被GC发现 被GC
        head = first;//head的指向指为first
        E x = first.item;//取出链中第一个元素，给了x
        first.item = null;
        return x;//把x作为方法的返回值
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【5】put的阻塞：&lt;/p&gt;
&lt;p&gt;阻塞的前提是  队列是固定长度的&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182407325.png&#34; class=&#34;&#34;&gt;




&lt;div name=queue_impl3&gt;



&lt;blockquote&gt;
&lt;p&gt;SynchronousQueue&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182455703.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;这个特殊的队列设计的意义：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182515070.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;测试1：先添加元素：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        SynchronousQueue sq = new SynchronousQueue();
        sq.add(&amp;quot;aaa&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直接报错：说队列满了，因为队列没有容量，理解为满也是正常的：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182535474.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;测试2：put方法  阻塞：队列是空的，可以理解为队列满了，满的话放入元素 put 一定会阻塞：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) throws InterruptedException &amp;#123;
        SynchronousQueue sq = new SynchronousQueue();
        sq.put(&amp;quot;aaa&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182600030.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;测试3：先取  再放：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        SynchronousQueue sq = new SynchronousQueue();
        //创建一个线程，取数据：
        new Thread(new Runnable() &amp;#123;
            @Override
            public void run() &amp;#123;
                while(true)&amp;#123;
                    try &amp;#123;
                        System.out.println(sq.take());
                    &amp;#125; catch (InterruptedException e) &amp;#123;
                        e.printStackTrace();
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;).start();
        //搞一个线程，往里面放数据：
        new Thread(new Runnable() &amp;#123;
            @Override
            public void run() &amp;#123;
                try &amp;#123;
                    sq.put(&amp;quot;aaa&amp;quot;);
                    sq.put(&amp;quot;bbb&amp;quot;);
                    sq.put(&amp;quot;ccc&amp;quot;);
                    sq.put(&amp;quot;ddd&amp;quot;);
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
            &amp;#125;
        &amp;#125;).start();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182625271.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;测试4：poll方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        SynchronousQueue sq = new SynchronousQueue();
        //创建一个线程，取数据：
        new Thread(new Runnable() &amp;#123;
            @Override
            public void run() &amp;#123;
                while(true)&amp;#123;
                    try &amp;#123;
                        //设置一个阻塞事件：超出事件就不阻塞了
                        Object result = sq.poll(5, TimeUnit.SECONDS);
                        System.out.println(result);
                        if(result == null)&amp;#123;
                            break;
                        &amp;#125;
                    &amp;#125; catch (InterruptedException e) &amp;#123;
                        e.printStackTrace();
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;).start();
        //搞一个线程，往里面放数据：
        new Thread(new Runnable() &amp;#123;
            @Override
            public void run() &amp;#123;
                try &amp;#123;
                    sq.put(&amp;quot;aaa&amp;quot;);
                    sq.put(&amp;quot;bbb&amp;quot;);
                    sq.put(&amp;quot;ccc&amp;quot;);
                    sq.put(&amp;quot;ddd&amp;quot;);
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
            &amp;#125;
        &amp;#125;).start();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618182647289.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;注意：取出元素 不能用peek，因为peek不会将元素从队列中拿走，只是查看的效果；&lt;/p&gt;
&lt;div name=queue_impl4&gt;



&lt;blockquote&gt;
&lt;p&gt;PriorityBlockingQueue&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;带有优先级的阻塞队列。&lt;br&gt;优先级队列，意味着队列有先后顺序的，数据有不同的权重。&lt;/p&gt;
&lt;p&gt;无界的队列，没有长度限制，但是在你不指定长度的时候，默认初始长度为11，也可以手动指定，&lt;br&gt;当然随着数据不断的加入，底层（底层是数组Object[]）会自动扩容，直到内存全部消耗殆尽了，导致 OutOfMemoryError内存溢出 程序才会结束。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183001941.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;不可以放入null元素的，不允许放入不可比较的对象（导致抛出ClassCastException），对象必须实现内部比较器或者外部比较器。&lt;/p&gt;
&lt;p&gt;测试1：添加null数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        PriorityBlockingQueue pq = new PriorityBlockingQueue();
        pq.put(null);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183016134.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;测试2：添加四个数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student implements Comparable&amp;lt;Student&amp;gt; &amp;#123;
    String name;
    int age;
    public Student() &amp;#123;
    &amp;#125;
    public Student(String name, int age) &amp;#123;
        this.name = name;
        this.age = age;
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
                &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;quot;, age=&amp;quot; + age +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
    @Override
    public int compareTo(Student o) &amp;#123;
        return this.age - o.age;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        PriorityBlockingQueue&amp;lt;Student&amp;gt; pq = new PriorityBlockingQueue&amp;lt;&amp;gt;();
        pq.put(new Student(&amp;quot;nana&amp;quot;,18));
        pq.put(new Student(&amp;quot;lulu&amp;quot;,11));
        pq.put(new Student(&amp;quot;feifei&amp;quot;,6));
        pq.put(new Student(&amp;quot;mingming&amp;quot;,21));
        System.out.println(pq);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183048547.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;发现结果并没有按照优先级顺序排列&lt;/p&gt;
&lt;p&gt;测试3：取出数据：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) throws InterruptedException &amp;#123;
        PriorityBlockingQueue&amp;lt;Student&amp;gt; pq = new PriorityBlockingQueue&amp;lt;&amp;gt;();
        pq.put(new Student(&amp;quot;nana&amp;quot;,18));
        pq.put(new Student(&amp;quot;lulu&amp;quot;,11));
        pq.put(new Student(&amp;quot;feifei&amp;quot;,6));
        pq.put(new Student(&amp;quot;mingming&amp;quot;,21));
        System.out.println(&amp;quot;------------------------------------------&amp;quot;);
        System.out.println(pq.take());
        System.out.println(pq.take());
        System.out.println(pq.take());
        System.out.println(pq.take());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183114429.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;从结果证明，这个优先级队列，并不是在put数据的时候计算谁在前谁在后&lt;br&gt;而是取数据的时候，才真正判断谁在前 谁在后&lt;/p&gt;
&lt;p&gt;优先级 –》取数据的优先级&lt;/p&gt;
&lt;div name=queue_impl5&gt;



&lt;blockquote&gt;
&lt;p&gt;DelayQueue&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一、DelayQueue是什么&lt;br&gt;DelayQueue是一个无界的BlockingQueue，用于放置实现了Delayed接口的对象，其中的对象只能在其到期时才能从队列中取走。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183216715.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	 当生产者线程调用put之类的方法加入元素时，会触发Delayed接口中的compareTo方法进行排序，也就是说队列中元素的顺序是按到期时间排序的，而非它们进入队列的顺序。排在队列头部的元素是最早到期的，越往后到期时间赿晚。&lt;/p&gt;
&lt;p&gt;消费者线程查看队列头部的元素，注意是查看不是取出。然后调用元素的getDelay方法，如果此方法返回的值小０或者等于０，则消费者线程会从队列中取出此元素，并进行处理。如果getDelay方法返回的值大于0，则消费者线程wait返回的时间值后，再从队列头部取出元素，此时元素应该已经到期。&lt;/p&gt;
&lt;p&gt;​	注意：不能将null元素放置到这种队列中。&lt;/p&gt;
&lt;p&gt;二、DelayQueue能做什么&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;淘宝订单业务:下单之后如果三十分钟之内没有付款就自动取消订单。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;饿了吗订餐通知:下单成功后60s之后给用户发送短信通知。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关闭空闲连接。服务器中，有很多客户端的连接，空闲一段时间之后需要关闭之。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缓存。缓存中的对象，超过了空闲时间，需要从缓存中移出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任务超时处理。在网络协议滑动窗口请求应答式交互时，处理超时未响应的请求等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class User implements Delayed &amp;#123;
    private int id;//用户id
    private String name;//用户名字
    private long endTime;//结束时间
    public int getId() &amp;#123;
        return id;
    &amp;#125;
    public void setId(int id) &amp;#123;
        this.id = id;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public long getEndTime() &amp;#123;
        return endTime;
    &amp;#125;
    public void setEndTime(long endTime) &amp;#123;
        this.endTime = endTime;
    &amp;#125;
    public User(int id, String name, long endTime) &amp;#123;
        this.id = id;
        this.name = name;
        this.endTime = endTime;
    &amp;#125;
    //只包装用户名字就可以
    @Override
    public String toString() &amp;#123;
        return &amp;quot;User&amp;#123;&amp;quot; +
                &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
    @Override
    public long getDelay(TimeUnit unit) &amp;#123;
        //计算剩余时间 剩余时间小于0 &amp;lt;=0  证明已经到期
        return this.getEndTime() - System.currentTimeMillis();
    &amp;#125;
    @Override
    public int compareTo(Delayed o) &amp;#123;
        //队列中数据 到期时间的比较
        User other = (User)o;
        return ((Long)(this.getEndTime())).compareTo((Long)(other.getEndTime()));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;compareTo：看谁先被移除&lt;br&gt;getDelay ：看剩余时间&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestDelayQueue &amp;#123;
    //创建一个队列：
    DelayQueue&amp;lt;User&amp;gt; dq = new DelayQueue&amp;lt;&amp;gt;();
    //登录游戏：
    public void login(User user)&amp;#123;
        dq.add(user);
        System.out.println(&amp;quot;用户：[&amp;quot; + user.getId() +&amp;quot;],[&amp;quot; + user.getName() + &amp;quot;]已经登录，预计下机时间为：&amp;quot; + user.getEndTime() );
    &amp;#125;
    //时间到，退出游戏，队列中移除：
    public void logout()&amp;#123;
        //打印队列中剩余的人：
        System.out.println(dq);
        try &amp;#123;
            User user = dq.take();
            System.out.println(&amp;quot;用户：[&amp;quot; + user.getId() +&amp;quot;],[&amp;quot; + user.getName() + &amp;quot;]上机时间到，自动退出游戏&amp;quot;);
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
    //获取在线人数：
    public int onlineSize()&amp;#123;
        return dq.size();
    &amp;#125;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建测试类对象：
        TestDelayQueue test = new TestDelayQueue();
        //添加登录的用户：
        test.login(new User(1,&amp;quot;张三&amp;quot;,System.currentTimeMillis()+5000));
        test.login(new User(2,&amp;quot;李四&amp;quot;,System.currentTimeMillis()+2000));
        test.login(new User(3,&amp;quot;王五&amp;quot;,System.currentTimeMillis()+10000));
        //一直监控
        while(true)&amp;#123;
            //到期的话，就自动下线：
            test.logout();
            //队列中元素都被移除了的话，那么停止监控，停止程序即可
            if(test.onlineSize() == 0)&amp;#123;
                break;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC11%E7%AB%A0%E9%9B%86%E5%90%88/image-20220618183342855.png&#34; class=&#34;&#34;&gt;






&lt;h3 id=&#34;双端队列Deque&#34;&gt;&lt;a href=&#34;#双端队列Deque&#34; class=&#34;headerlink&#34; title=&#34;双端队列Deque&#34;&gt;&lt;/a&gt;双端队列Deque&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        /*
        双端队列：
        Deque&amp;lt;E&amp;gt; extends Queue
        Queue一端放 一端取的基本方法  Deque是具备的
        在此基础上 又扩展了 一些 头尾操作（添加，删除，获取）的方法
         */
        Deque&amp;lt;String&amp;gt; d = new LinkedList&amp;lt;&amp;gt;() ;
        d.offer(&amp;quot;A&amp;quot;);
        d.offer(&amp;quot;B&amp;quot;);
        d.offer(&amp;quot;C&amp;quot;);
        System.out.println(d);//[A, B, C]
        d.offerFirst(&amp;quot;D&amp;quot;);
        d.offerLast(&amp;quot;E&amp;quot;);
        System.out.println(d);//[D, A, B, C, E]
        System.out.println(d.poll());
        System.out.println(d);//[A, B, C, E]
        System.out.println(d.pollFirst());
        System.out.println(d.pollLast());
        System.out.println(d);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
        <title>第13章多线程</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;【1】程序，进程，线程&lt;br&gt;➢程序(program)：是为完成特定任务、用某种语言编写的一组指令的集合,是一段静态的代码。 （程序是静态的）&lt;/p&gt;
&lt;p&gt;➢进程(process)：是程序的一次执行过程。正在运行的一个程序，进程作为资源分配的单位，在内存中会为每个进程分配不同的内存区域。 （进程是动态的）是一个动的过程 ，进程的生命周期  :  有它自身的产生、存在和消亡的过程&lt;/p&gt;
&lt;p&gt;➢线程(thread)，进程可进一步细化为线程， 是一个程序内部的一条执行路径。&lt;br&gt;若一个进程同一时间并行执行多个线程，就是支持多线程的。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194135831.png&#34; class=&#34;&#34;&gt;



&lt;p&gt;【2】单核CPU与多核CPU的任务执行：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194141865.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194149206.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;【3】并行和并发：&lt;br&gt;并行：多个CPU同时执行多个任务&lt;br&gt;并发：一个CPU“同时”执行多个任务（采用时间片切换）&lt;/p&gt;
&lt;h1 id=&#34;1-创建线程的三种方式&#34;&gt;&lt;a href=&#34;#1-创建线程的三种方式&#34; class=&#34;headerlink&#34; title=&#34;1 创建线程的三种方式&#34;&gt;&lt;/a&gt;1 创建线程的三种方式&lt;/h1&gt;&lt;h2 id=&#34;第一种：继承Thread类&#34;&gt;&lt;a href=&#34;#第一种：继承Thread类&#34; class=&#34;headerlink&#34; title=&#34;第一种：继承Thread类&#34;&gt;&lt;/a&gt;第一种：继承Thread类&lt;/h2&gt;&lt;p&gt;【1】在学习多线程一章之前，以前的代码是单线程的吗？不是，以前也是有三个线程同时执行的。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194435926.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】现在我想自己制造多线程—》创建线程 ？？&lt;br&gt;线程类–》线程对象&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194442238.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 线程类叫：TestThread，不是说你名字中带线程单词你就具备多线程能力了（争抢资源能力）
 * 现在想要具备能力，继承一个类：Thread，具备了争抢资源的能力
 */
public class TestThread extends Thread&amp;#123;
    /*
    一会线程对象就要开始争抢资源了，这个线程要执行的任务到底是啥？这个任务你要放在方法中
    但是这个方法不能是随便写的一个方法，必须是重写Thread类中的run方法
    然后线程的任务/逻辑写在run方法中
     */
    @Override
    public void run() &amp;#123;
        //输出1-10
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //主线程中也要输出十个数：
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(&amp;quot;main1-----&amp;quot;+i);
        &amp;#125;
        //制造其他线程，要跟主线程争抢资源：
        //具体的线程对象：子线程
        TestThread tt = new TestThread();
        //tt.run();//调用run方法，想要执行线程中的任务 --&amp;gt;这个run方法不能直接调用，直接调用就会被当做一个普通方法
        //想要tt子线程真正起作用比如要启动线程：
        tt.start();//start()是Thread类中的方法
        //主线程中也要输出十个数：
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(&amp;quot;main2-----&amp;quot;+i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194526775.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;设置读取线程名字&#34;&gt;&lt;a href=&#34;#设置读取线程名字&#34; class=&#34;headerlink&#34; title=&#34;设置读取线程名字&#34;&gt;&lt;/a&gt;设置读取线程名字&lt;/h3&gt;&lt;p&gt;【1】setName,getName方法来进行设置读取：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 线程类叫：TestThread，不是说你名字中带线程单词你就具备多线程能力了（争抢资源能力）
 * 现在想要具备能力，继承一个类：Thread，具备了争抢资源的能力
 */
public class TestThread extends Thread&amp;#123;
    /*
    一会线程对象就要开始争抢资源了，这个线程要执行的任务到底是啥？这个任务你要放在方法中
    但是这个方法不能是随便写的一个方法，必须是重写Thread类中的run方法
    然后线程的任务/逻辑写在run方法中
     */
    @Override
    public void run() &amp;#123;
        //输出1-10
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(this.getName()+i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //给main方法这个主线程设置名字：
        //Thread.currentThread()作用获取当前正在执行的线程
        Thread.currentThread().setName(&amp;quot;主线程&amp;quot;);
        //主线程中也要输出十个数：
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(Thread.currentThread().getName()+&amp;quot;1-------&amp;quot;+i);
        &amp;#125;
        //制造其他线程，要跟主线程争抢资源：
        //具体的线程对象：子线程
        TestThread tt = new TestThread();
        tt.setName(&amp;quot;子线程&amp;quot;);
        //tt.run();//调用run方法，想要执行线程中的任务 --&amp;gt;这个run方法不能直接调用，直接调用就会被当做一个普通方法
        //想要tt子线程真正起作用比如要启动线程：
        tt.start();//start()是Thread类中的方法
        //主线程中也要输出十个数：
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(Thread.currentThread().getName()+&amp;quot;2-------&amp;quot;+i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】通过构造器设置 名字：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 线程类叫：TestThread，不是说你名字中带线程单词你就具备多线程能力了（争抢资源能力）
 * 现在想要具备能力，继承一个类：Thread，具备了争抢资源的能力
 */
public class TestThread extends Thread&amp;#123;
    public TestThread(String name)&amp;#123;
        super(name);//调用父类的有参构造器
    &amp;#125;
    /*
    一会线程对象就要开始争抢资源了，这个线程要执行的任务到底是啥？这个任务你要放在方法中
    但是这个方法不能是随便写的一个方法，必须是重写Thread类中的run方法
    然后线程的任务/逻辑写在run方法中
     */
    @Override
    public void run() &amp;#123;
        //输出1-10
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(this.getName()+i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;习题：买火车票&#34;&gt;&lt;a href=&#34;#习题：买火车票&#34; class=&#34;headerlink&#34; title=&#34;习题：买火车票&#34;&gt;&lt;/a&gt;习题：买火车票&lt;/h3&gt;&lt;p&gt;【1】原理：每个窗口都是一个线程对象：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194717605.png&#34; class=&#34;&#34;&gt;





&lt;p&gt;【2】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class BuyTicketThread extends Thread &amp;#123;
    public BuyTicketThread(String name)&amp;#123;
        super(name);
    &amp;#125;
    //一共10张票：
    static int ticketNum = 10;//多个对象共享10张票
    //每个窗口都是一个线程对象：每个对象执行的代码放入run方法中
    @Override
    public void run() &amp;#123;
        //每个窗口后面有100个人在抢票：
        for (int i = 1; i &amp;lt;= 100 ; i++) &amp;#123;
            if(ticketNum &amp;gt; 0)&amp;#123;//对票数进行判断，票数大于零我们才抢票
                System.out.println(&amp;quot;我在&amp;quot;+this.getName()+&amp;quot;买到了从北京到哈尔滨的第&amp;quot; + ticketNum-- + &amp;quot;张车票&amp;quot;);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    public static void main(String[] args) &amp;#123;
        //多个窗口抢票：三个窗口三个线程对象：
        BuyTicketThread t1 = new BuyTicketThread(&amp;quot;窗口1&amp;quot;);
        t1.start();
        BuyTicketThread t2 = new BuyTicketThread(&amp;quot;窗口2&amp;quot;);
        t2.start();
        BuyTicketThread t3 = new BuyTicketThread(&amp;quot;窗口3&amp;quot;);
        t3.start();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;第二种：实现Runnable接口&#34;&gt;&lt;a href=&#34;#第二种：实现Runnable接口&#34; class=&#34;headerlink&#34; title=&#34;第二种：实现Runnable接口&#34;&gt;&lt;/a&gt;第二种：实现Runnable接口&lt;/h2&gt;&lt;p&gt;【1】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * TestThread实现了这个接口，才会变成一个线程类
 */
public class TestThread implements Runnable&amp;#123;
    @Override
    public void run() &amp;#123;
        //输出1-10数字：
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(Thread.currentThread().getName()+&amp;quot;----&amp;quot;+i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    public static void main(String[] args) &amp;#123;
        //创建子线程对象：
        TestThread tt = new TestThread();
        Thread t = new Thread(tt,&amp;quot;子线程&amp;quot;);
        t.start();
        //主线程里面也是打印1-10数字：
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(Thread.currentThread().getName()+&amp;quot;---&amp;quot;+i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618194854683.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;习题：买火车票-1&#34;&gt;&lt;a href=&#34;#习题：买火车票-1&#34; class=&#34;headerlink&#34; title=&#34;习题：买火车票&#34;&gt;&lt;/a&gt;习题：买火车票&lt;/h3&gt;&lt;p&gt;【1】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class BuyTicketThread implements Runnable &amp;#123;
    int ticketNum = 10;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 100 ; i++) &amp;#123;
            if(ticketNum &amp;gt; 0)&amp;#123;
                System.out.println(&amp;quot;我在&amp;quot;+Thread.currentThread().getName()+&amp;quot;买到了北京到哈尔滨的第&amp;quot; + ticketNum-- + &amp;quot;张车票&amp;quot;);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //定义一个线程对象：
        BuyTicketThread t = new BuyTicketThread();
        //窗口1买票：
        Thread t1 = new Thread(t,&amp;quot;窗口1&amp;quot;);
        t1.start();
        //窗口2买票：
        Thread t2 = new Thread(t,&amp;quot;窗口2&amp;quot;);
        t2.start();
        //窗口3买票：
        Thread t3 = new Thread(t,&amp;quot;窗口3&amp;quot;);
        t3.start();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】实际开发中，方式1 继承Thread类   还是  方式2 实现Runnable接口这种方式多呢？–》方式2&lt;/p&gt;
&lt;p&gt;（1）方式1的话有 Java单继承的局限性，因为继承了Thread类，就不能再继承其它的类了&lt;/p&gt;
&lt;p&gt;（2）方式2的共享资源的能力也会强一些，不需要非得加个static来修饰&lt;/p&gt;
&lt;p&gt;【3】Thread类 Runnable接口 有联系吗？&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195007939.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;对比第一种和第二种创建线程的方式发现，无论第一种继承Thread类的方式还是第二种实现Runnable接口的方式，都需要有一个run方法，&lt;br&gt;但是这个run方法有不足：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195022846.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（1）没有返回值&lt;br&gt;（2）不能抛出异常&lt;/p&gt;
&lt;p&gt;基于上面的两个不足，在JDK1.5以后出现了第三种创建线程的方式：实现Callable接口：&lt;/p&gt;
&lt;p&gt;实现Callable接口好处：（1）有返回值  （2）能抛出异常&lt;br&gt;缺点：线程创建比较麻烦&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestRandomNum implements Callable&amp;lt;Integer&amp;gt; &amp;#123;
    /*
    1.实现Callable接口，可以不带泛型，如果不带泛型，那么call方式的返回值就是Object类型
    2.如果带泛型，那么call的返回值就是泛型对应的类型
    3.从call方法看到：方法有返回值，可以跑出异常
     */
    @Override
    public Integer call() throws Exception &amp;#123;
        return new Random().nextInt(10);//返回10以内的随机数
    &amp;#125;
&amp;#125;
class Test&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) throws ExecutionException, InterruptedException &amp;#123;
        //定义一个线程对象：
        TestRandomNum trn = new TestRandomNum();
        FutureTask ft = new FutureTask(trn);
        Thread t = new Thread(ft);
        t.start();
        //获取线程得到的返回值：
        Object obj = ft.get();
        System.out.println(obj);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2-线程的生命周期&#34;&gt;&lt;a href=&#34;#2-线程的生命周期&#34; class=&#34;headerlink&#34; title=&#34;2 线程的生命周期&#34;&gt;&lt;/a&gt;2 线程的生命周期&lt;/h1&gt;&lt;p&gt;【1】线程声明周期：线程开始–》线程消亡&lt;br&gt;【2】线程经历哪些阶段：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195248025.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;3-线程常见方法&#34;&gt;&lt;a href=&#34;#3-线程常见方法&#34; class=&#34;headerlink&#34; title=&#34;3 线程常见方法&#34;&gt;&lt;/a&gt;3 线程常见方法&lt;/h1&gt;&lt;p&gt;（1）start() :  启动当前线程，表面上调用start方法，实际在调用线程里面的run方法&lt;/p&gt;
&lt;p&gt;（2）run() : 线程类 继承 Thread类 或者 实现Runnable接口的时候，都要重新实现这个run方法，run方法里面是线程要执行的内容&lt;/p&gt;
&lt;p&gt;（3）currentThread :Thread类中一个静态方法：获取当前正在执行的线程&lt;/p&gt;
&lt;p&gt;（4）setName 设置线程名字&lt;/p&gt;
&lt;p&gt;（5）getName 读取线程名字&lt;/p&gt;
&lt;h2 id=&#34;设置优先级&#34;&gt;&lt;a href=&#34;#设置优先级&#34; class=&#34;headerlink&#34; title=&#34;设置优先级&#34;&gt;&lt;/a&gt;设置优先级&lt;/h2&gt;&lt;p&gt;【1】同优先级别的线程，采取的策略就是先到先服务，使用时间片策略&lt;/p&gt;
&lt;p&gt;【2】如果优先级别高，被CPU调度的概率就高&lt;/p&gt;
&lt;p&gt;【3】级别：1-10   默认的级别为5&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195340695.png&#34; class=&#34;&#34;&gt;





&lt;p&gt;【4】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestThread01 extends Thread &amp;#123;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 10; i++) &amp;#123;
            System.out.println(i);
        &amp;#125;
    &amp;#125;
&amp;#125;
class TestThread02 extends Thread&amp;#123;
    @Override
    public void run() &amp;#123;
        for (int i = 20; i &amp;lt;= 30 ; i++) &amp;#123;
            System.out.println(i);
        &amp;#125;
    &amp;#125;
&amp;#125;
class Test&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建两个子线程，让这两个子线程争抢资源：
        TestThread01 t1 = new TestThread01();
        t1.setPriority(10);//优先级别高
        t1.start();
        TestThread02 t2 = new TestThread02();
        t2.setPriority(1);//优先级别低
        t2.start();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;join&#34;&gt;&lt;a href=&#34;#join&#34; class=&#34;headerlink&#34; title=&#34;join&#34;&gt;&lt;/a&gt;join&lt;/h2&gt;&lt;p&gt;join方法：当一个线程调用了join方法，这个线程就会先被执行，它执行结束以后才可以去执行其余的线程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：必须先start，再join才有效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestThread extends Thread &amp;#123;
    public TestThread(String name)&amp;#123;
        super(name);
    &amp;#125;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(this.getName()+&amp;quot;----&amp;quot;+i);
        &amp;#125;
    &amp;#125;
&amp;#125;
class Test&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) throws InterruptedException &amp;#123;
        for (int i = 1; i &amp;lt;= 100 ; i++) &amp;#123;
            System.out.println(&amp;quot;main-----&amp;quot;+i);
            if(i == 6)&amp;#123;
                //创建子线程：
                TestThread tt = new TestThread(&amp;quot;子线程&amp;quot;);
                tt.start();
                tt.join();//“半路杀出个程咬金”
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;sleep&#34;&gt;&lt;a href=&#34;#sleep&#34; class=&#34;headerlink&#34; title=&#34;sleep&#34;&gt;&lt;/a&gt;sleep&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9nby56YmouY29tL25ld3MvMjAxNDYuaHRtbA==&#34;&gt;https://go.zbj.com/news/20146.html&lt;/span&gt; （段子）&lt;/p&gt;
&lt;p&gt;【1】sleep : 人为的制造阻塞事件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        try &amp;#123;
            Thread.sleep(3000);
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        System.out.println(&amp;quot;00000000000000&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】案例：完成秒表功能：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //2.定义一个时间格式：
        DateFormat df = new SimpleDateFormat(&amp;quot;HH:mm:ss&amp;quot;);
        while(true)&amp;#123;
            //1.获取当前时间：
            Date d = new Date();
            //3.按照上面定义的格式将Date类型转为指定格式的字符串：
            System.out.println(df.format(d));
            try &amp;#123;
                Thread.sleep(1000);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;setDaemon&#34;&gt;&lt;a href=&#34;#setDaemon&#34; class=&#34;headerlink&#34; title=&#34;setDaemon&#34;&gt;&lt;/a&gt;setDaemon&lt;/h2&gt;&lt;p&gt;【1】设置伴随线程&lt;br&gt;将子线程设置为主线程的伴随线程，主线程停止的时候，子线程也不要继续执行了&lt;br&gt;案例：皇上 –》驾崩 —》妃子陪葬&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestThread extends Thread &amp;#123;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 1000 ; i++) &amp;#123;
            System.out.println(&amp;quot;子线程----&amp;quot;+i);
        &amp;#125;
    &amp;#125;
&amp;#125;
class Test&amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        //创建并启动子线程：
        TestThread tt = new TestThread();
        tt.setDaemon(true);//设置伴随线程  注意：先设置，再启动
        tt.start();
        //主线程中还要输出1-10的数字：
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;
            System.out.println(&amp;quot;main---&amp;quot;+i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618195552686.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;stop&#34;&gt;&lt;a href=&#34;#stop&#34; class=&#34;headerlink&#34; title=&#34;stop&#34;&gt;&lt;/a&gt;stop&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    //这是main方法，程序的入口
    public static void main(String[] args) &amp;#123;
        for (int i = 1; i &amp;lt;= 100 ; i++) &amp;#123;
            if(i == 6)&amp;#123;
                Thread.currentThread().stop();//过期方法，不建议使用
            &amp;#125;
            System.out.println(i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;4-线程安全问题&#34;&gt;&lt;a href=&#34;#4-线程安全问题&#34; class=&#34;headerlink&#34; title=&#34;4 线程安全问题&#34;&gt;&lt;/a&gt;4 线程安全问题&lt;/h1&gt;&lt;h2 id=&#34;方法1：同步代码块&#34;&gt;&lt;a href=&#34;#方法1：同步代码块&#34; class=&#34;headerlink&#34; title=&#34;方法1：同步代码块&#34;&gt;&lt;/a&gt;方法1：同步代码块&lt;/h2&gt;&lt;p&gt;【1】同步代码块演示1：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test04;
/**
 * @author : msb-zhaoss
 */
public class BuyTicketThread implements Runnable &amp;#123;
    int ticketNum = 10;
    @Override
    public void run() &amp;#123;
        //此处有1000行代码
        for (int i = 1; i &amp;lt;= 100 ; i++) &amp;#123;
            synchronized (this)&amp;#123;//把具有安全隐患的代码锁住即可，如果锁多了就会效率低 --》this就是这个锁
                if(ticketNum &amp;gt; 0)&amp;#123;
                    System.out.println(&amp;quot;我在&amp;quot;+Thread.currentThread().getName()+&amp;quot;买到了北京到哈尔滨的第&amp;quot; + ticketNum-- + &amp;quot;张车票&amp;quot;);
                &amp;#125;
            &amp;#125;
        &amp;#125;
        //此处有1000行代码
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】同步代码块演示2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class BuyTicketThread extends Thread &amp;#123;
    public BuyTicketThread(String name)&amp;#123;
        super(name);
    &amp;#125;
    //一共10张票：
    static int ticketNum = 10;//多个对象共享10张票
    //每个窗口都是一个线程对象：每个对象执行的代码放入run方法中
    @Override
    public void run() &amp;#123;
        //每个窗口后面有100个人在抢票：
        for (int i = 1; i &amp;lt;= 100 ; i++) &amp;#123;
            synchronized (BuyTicketThread.class)&amp;#123;//锁必须多个线程用的是同一把锁！！！
                if(ticketNum &amp;gt; 0)&amp;#123;//对票数进行判断，票数大于零我们才抢票
                    System.out.println(&amp;quot;我在&amp;quot;+this.getName()+&amp;quot;买到了从北京到哈尔滨的第&amp;quot; + ticketNum-- + &amp;quot;张车票&amp;quot;);
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;方法2：同步方法&#34;&gt;&lt;a href=&#34;#方法2：同步方法&#34; class=&#34;headerlink&#34; title=&#34;方法2：同步方法&#34;&gt;&lt;/a&gt;方法2：同步方法&lt;/h2&gt;&lt;p&gt;【1】代码展示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class BuyTicketThread implements Runnable &amp;#123;
    int ticketNum = 10;
    @Override
    public void run() &amp;#123;
        //此处有1000行代码
        for (int i = 1; i &amp;lt;= 100 ; i++) &amp;#123;
            buyTicket();
        &amp;#125;
        //此处有1000行代码
    &amp;#125;
    public synchronized void buyTicket()&amp;#123;//锁住的是this
        if(ticketNum &amp;gt; 0)&amp;#123;
            System.out.println(&amp;quot;我在&amp;quot;+Thread.currentThread().getName()+&amp;quot;买到了北京到哈尔滨的第&amp;quot; + ticketNum-- + &amp;quot;张车票&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class BuyTicketThread extends Thread &amp;#123;
    public BuyTicketThread(String name)&amp;#123;
        super(name);
    &amp;#125;
    //一共10张票：
    static int ticketNum = 10;//多个对象共享10张票
    //每个窗口都是一个线程对象：每个对象执行的代码放入run方法中
    @Override
    public void run() &amp;#123;
        //每个窗口后面有100个人在抢票：
        for (int i = 1; i &amp;lt;= 100 ; i++) &amp;#123;
            buyTicket();
        &amp;#125;
    &amp;#125;
    public static synchronized void buyTicket()&amp;#123;//锁住的  同步监视器： BuyTicketThread.class
        if(ticketNum &amp;gt; 0)&amp;#123;//对票数进行判断，票数大于零我们才抢票
            System.out.println(&amp;quot;我在&amp;quot;+Thread.currentThread().getName()+&amp;quot;买到了从北京到哈尔滨的第&amp;quot; + ticketNum-- + &amp;quot;张车票&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】总结：&lt;br&gt;总结1：&lt;br&gt;多线程在争抢资源，就要实现线程的同步（就要进行加锁，并且这个锁必须是共享的，必须是唯一的。&lt;br&gt;咱们的锁一般都是引用数据类型的。&lt;/p&gt;
&lt;p&gt;目的：解决了线程安全问题。&lt;/p&gt;
&lt;p&gt;总结2：关于同步方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不要将run()定义为同步方法&lt;/li&gt;
&lt;li&gt;非静态同步方法的同步监视器是this&lt;br&gt;静态同步方法的同步监视器是 类名.class 字节码信息对象&lt;/li&gt;
&lt;li&gt;同步代码块的效率要高于同步方法&lt;br&gt;原因：同步方法是将线程挡在了方法的外部，而同步代码块锁将线程挡在了代码块的外部，但是却是方法的内部&lt;/li&gt;
&lt;li&gt;同步方法的锁是this，一旦锁住一个方法，就锁住了所有的同步方法；同步代码块只是锁住使用该同步监视器的代码块，而没有锁住使用其他监视器的代码块&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;方法3：Lock锁&#34;&gt;&lt;a href=&#34;#方法3：Lock锁&#34; class=&#34;headerlink&#34; title=&#34;方法3：Lock锁&#34;&gt;&lt;/a&gt;方法3：Lock锁&lt;/h2&gt;&lt;p&gt;【1】Lock锁引入：&lt;br&gt;JDK1.5后新增新一代的线程同步方式:Lock锁&lt;br&gt;与采用synchronized相比，lock可提供多种锁方案，更灵活&lt;/p&gt;
&lt;p&gt;synchronized是Java中的关键字，这个关键字的识别是靠JVM来识别完成的呀。是虚拟机级别的。&lt;br&gt;但是Lock锁是API级别的，提供了相应的接口和对应的实现类，这个方式更灵活，表现出来的性能优于之前的方式。&lt;/p&gt;
&lt;p&gt;【2】代码演示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class BuyTicketThread implements Runnable &amp;#123;
    int ticketNum = 10;
    //拿来一把锁：
    Lock lock = new ReentrantLock();//多态  接口=实现类  可以使用不同的实现类
    @Override
    public void run() &amp;#123;
        //此处有1000行代码
        for (int i = 1; i &amp;lt;= 100 ; i++) &amp;#123;
            //打开锁：
            lock.lock();
            try&amp;#123;
                if(ticketNum &amp;gt; 0)&amp;#123;
                    System.out.println(&amp;quot;我在&amp;quot;+Thread.currentThread().getName()+&amp;quot;买到了北京到哈尔滨的第&amp;quot; + ticketNum-- + &amp;quot;张车票&amp;quot;);
                &amp;#125;
            &amp;#125;catch (Exception ex)&amp;#123;
                ex.printStackTrace();
            &amp;#125;finally &amp;#123;
                //关闭锁：---&amp;gt;即使有异常，这个锁也可以得到释放
                lock.unlock();
            &amp;#125;
        &amp;#125;
        //此处有1000行代码
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】 Lock和synchronized的区别&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    1.Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁
    2.Lock只有代码块锁，synchronized有代码块锁和方法锁
    3.使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】优先使用顺序：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Lock----同步代码块（已经进入了方法体，分配了相应资源）----同步方法（在方法体之外）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;线程同步的优缺点&#34;&gt;&lt;a href=&#34;#线程同步的优缺点&#34; class=&#34;headerlink&#34; title=&#34;线程同步的优缺点&#34;&gt;&lt;/a&gt;线程同步的优缺点&lt;/h2&gt;&lt;p&gt;【1】对比：&lt;br&gt;线程安全，效率低&lt;br&gt;线程不安全，效率高&lt;/p&gt;
&lt;p&gt;【2】可能造成死锁：&lt;br&gt;死锁&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁&lt;br&gt;出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;【3】代码演示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestDeadLock implements Runnable &amp;#123;
    public int flag = 1;
    static Object o1 = new Object(),o2 = new Object();
        
        
    public void run()&amp;#123;
        System.out.println(&amp;quot;flag=&amp;quot; + flag);
        // 当flag==1锁住o1
        if (flag == 1) &amp;#123;
            synchronized (o1) &amp;#123;
                try &amp;#123;
                    Thread.sleep(500);
                &amp;#125; catch (Exception e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
                // 只要锁住o2就完成
                synchronized (o2) &amp;#123;
                    System.out.println(&amp;quot;2&amp;quot;);
                &amp;#125;
            &amp;#125;
        &amp;#125;
        // 如果flag==0锁住o2
        if (flag == 0) &amp;#123;
            synchronized (o2) &amp;#123;
                try &amp;#123;
                    Thread.sleep(500);
                &amp;#125; catch (Exception e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
                // 只要锁住o1就完成
                synchronized (o1) &amp;#123;
                    System.out.println(&amp;quot;3&amp;quot;);
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
        
        
    public static void main(String[] args) &amp;#123;
        // 实例2个线程类
        TestDeadLock td1 = new TestDeadLock();
        TestDeadLock td2 = new TestDeadLock();
        td1.flag = 1;
        td2.flag = 0;
        // 开启2个线程
        Thread t1 = new Thread(td1);
        Thread t2 = new Thread(td2);
        t1.start();
        t2.start();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】解决方法： 减少同步资源的定义，避免嵌套同步&lt;/p&gt;
&lt;h1 id=&#34;5-线程通信问题&#34;&gt;&lt;a href=&#34;#5-线程通信问题&#34; class=&#34;headerlink&#34; title=&#34;5 线程通信问题&#34;&gt;&lt;/a&gt;5 线程通信问题&lt;/h1&gt;&lt;p&gt;应用场景：生产者和消费者问题&lt;br&gt;假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中产品取走消费&lt;br&gt;如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止&lt;br&gt;如果仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200150740.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;代码结果展示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200157334.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;代码：&lt;br&gt;1.商品：属性：品牌 ，名字&lt;br&gt;2.线程1：生产者&lt;br&gt;3.线程2：消费者&lt;/p&gt;
&lt;h2 id=&#34;分解1&#34;&gt;&lt;a href=&#34;#分解1&#34; class=&#34;headerlink&#34; title=&#34;分解1&#34;&gt;&lt;/a&gt;分解1&lt;/h2&gt;&lt;p&gt;出现问题：&lt;br&gt;1.生产者和消费者没有交替输出&lt;/p&gt;
&lt;p&gt;2.打印数据错乱&lt;br&gt;哈尔滨 - null&lt;br&gt;费列罗啤酒&lt;br&gt;哈尔滨巧克力&lt;br&gt;—-没有加同步&lt;/p&gt;
&lt;p&gt;代码展示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Product &amp;#123;//商品类
    //品牌
    private String brand;
    //名字
    private String name;
    //setter,getter方法；
    public String getBrand() &amp;#123;
        return brand;
    &amp;#125;
    public void setBrand(String brand) &amp;#123;
        this.brand = brand;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ProducerThread extends Thread&amp;#123;//生产者线程
    //共享商品：
    private Product p;
    public ProducerThread(Product p) &amp;#123;
        this.p = p;
    &amp;#125;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;//生产十个商品 i:生产的次数
            if(i % 2 == 0)&amp;#123;
                //生产费列罗巧克力
                p.setBrand(&amp;quot;费列罗&amp;quot;);
                try &amp;#123;
                    Thread.sleep(100);
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
                p.setName(&amp;quot;巧克力&amp;quot;);
            &amp;#125;else&amp;#123;
                //生产哈尔滨啤酒
                p.setBrand(&amp;quot;哈尔滨&amp;quot;);
                try &amp;#123;
                    Thread.sleep(100);
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
                p.setName(&amp;quot;啤酒&amp;quot;);
            &amp;#125;
            //将生产信息做一个打印：
            System.out.println(&amp;quot;生产者生产了：&amp;quot; + p.getBrand() + &amp;quot;---&amp;quot; + p.getName());
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CustomerThread extends Thread&amp;#123;//消费者线程
    //共享商品：
    private Product p;
    public CustomerThread(Product p) &amp;#123;
        this.p = p;
    &amp;#125;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;//i:消费次数
            System.out.println(&amp;quot;消费者消费了：&amp;quot; + p.getBrand() + &amp;quot;---&amp;quot; + p.getName());
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;分解2&#34;&gt;&lt;a href=&#34;#分解2&#34; class=&#34;headerlink&#34; title=&#34;分解2&#34;&gt;&lt;/a&gt;分解2&lt;/h2&gt;&lt;p&gt;【1】利用同步代码块解决问题：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ProducerThread extends Thread&amp;#123;//生产者线程
    //共享商品：
    private Product p;
    public ProducerThread(Product p) &amp;#123;
        this.p = p;
    &amp;#125;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;//生产十个商品 i:生产的次数
            synchronized (p)&amp;#123;
                if(i % 2 == 0)&amp;#123;
                    //生产费列罗巧克力
                    p.setBrand(&amp;quot;费列罗&amp;quot;);
                    try &amp;#123;
                        Thread.sleep(100);
                    &amp;#125; catch (InterruptedException e) &amp;#123;
                        e.printStackTrace();
                    &amp;#125;
                    p.setName(&amp;quot;巧克力&amp;quot;);
                &amp;#125;else&amp;#123;
                    //生产哈尔滨啤酒
                    p.setBrand(&amp;quot;哈尔滨&amp;quot;);
                    try &amp;#123;
                        Thread.sleep(100);
                    &amp;#125; catch (InterruptedException e) &amp;#123;
                        e.printStackTrace();
                    &amp;#125;
                    p.setName(&amp;quot;啤酒&amp;quot;);
                &amp;#125;
                //将生产信息做一个打印：
                System.out.println(&amp;quot;生产者生产了：&amp;quot; + p.getBrand() + &amp;quot;---&amp;quot; + p.getName());
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CustomerThread extends Thread&amp;#123;//消费者线程
    //共享商品：
    private Product p;
    public CustomerThread(Product p) &amp;#123;
        this.p = p;
    &amp;#125;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;//i:消费次数
            synchronized (p)&amp;#123;
                System.out.println(&amp;quot;消费者消费了：&amp;quot; + p.getBrand() + &amp;quot;---&amp;quot; + p.getName());
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】利用同步方法解决问题：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Product &amp;#123;//商品类
    //品牌
    private String brand;
    //名字
    private String name;
    //setter,getter方法；
    public String getBrand() &amp;#123;
        return brand;
    &amp;#125;
    public void setBrand(String brand) &amp;#123;
        this.brand = brand;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    //生产商品
    public synchronized void setProduct(String brand,String name)&amp;#123;
        this.setBrand(brand);
        try &amp;#123;
            Thread.sleep(100);
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        this.setName(name);
        //将生产信息做一个打印：
        System.out.println(&amp;quot;生产者生产了：&amp;quot; + this.getBrand() + &amp;quot;---&amp;quot; + this.getName());
    &amp;#125;
    //消费商品：
    public synchronized void getProduct()&amp;#123;
        System.out.println(&amp;quot;消费者消费了：&amp;quot; + this.getBrand() + &amp;quot;---&amp;quot; + this.getName());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CustomerThread extends Thread&amp;#123;//消费者线程
    //共享商品：
    private Product p;
    public CustomerThread(Product p) &amp;#123;
        this.p = p;
    &amp;#125;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;//i:消费次数
            p.getProduct();;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ProducerThread extends Thread&amp;#123;//生产者线程
    //共享商品：
    private Product p;
    public ProducerThread(Product p) &amp;#123;
        this.p = p;
    &amp;#125;
    @Override
    public void run() &amp;#123;
        for (int i = 1; i &amp;lt;= 10 ; i++) &amp;#123;//生产十个商品 i:生产的次数
            if(i % 2 == 0)&amp;#123;
                p.setProduct(&amp;quot;费列罗&amp;quot;,&amp;quot;巧克力&amp;quot;);
            &amp;#125;else&amp;#123;
                p.setProduct(&amp;quot;哈尔滨&amp;quot;,&amp;quot;啤酒&amp;quot;);
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（这个else中的代码在分解3中 演示了错误）&lt;/p&gt;
&lt;h2 id=&#34;分解3&#34;&gt;&lt;a href=&#34;#分解3&#34; class=&#34;headerlink&#34; title=&#34;分解3&#34;&gt;&lt;/a&gt;分解3&lt;/h2&gt;&lt;p&gt;【1】原理：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200412158.png&#34; class=&#34;&#34;&gt;



&lt;p&gt;【2】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Product &amp;#123;//商品类
    //品牌
    private String brand;
    //名字
    private String name;
    //引入一个灯：true:红色  false 绿色
    boolean flag = false;//默认情况下没有商品 让生产者先生产  然后消费者再消费
    //setter,getter方法；
    public String getBrand() &amp;#123;
        return brand;
    &amp;#125;
    public void setBrand(String brand) &amp;#123;
        this.brand = brand;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    //生产商品
    public synchronized void setProduct(String brand,String name)&amp;#123;
        if(flag == true)&amp;#123;//灯是红色，证明有商品，生产者不生产，等着消费者消费
            try &amp;#123;
                wait();
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
        //灯是绿色的，就生产：
        this.setBrand(brand);
        try &amp;#123;
            Thread.sleep(100);
        &amp;#125; catch (InterruptedException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        this.setName(name);
        //将生产信息做一个打印：
        System.out.println(&amp;quot;生产者生产了：&amp;quot; + this.getBrand() + &amp;quot;---&amp;quot; + this.getName());
        //生产完以后，灯变色：变成红色：
        flag = true;
        //告诉消费者赶紧来消费：
        notify();
    &amp;#125;
    //消费商品：
    public synchronized void getProduct()&amp;#123;
        if(!flag)&amp;#123;//flag == false没有商品，等待生产者生产：
            try &amp;#123;
                wait();
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
        //有商品，消费：
        System.out.println(&amp;quot;消费者消费了：&amp;quot; + this.getBrand() + &amp;quot;---&amp;quot; + this.getName());
        //消费完：灯变色：
        flag = false;
        //通知生产者生产：
        notify();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】原理：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200442747.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;注意：wait方法和notify方法  是必须放在同步方法或者同步代码块中才生效的 （因为在同步的基础上进行线程的通信才是有效的）&lt;br&gt;注意：sleep和wait的区别：sleep进入阻塞状态没有释放锁，wait进入阻塞状态但是同时释放了锁&lt;br&gt;【4】线程生命周期完整图：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200450798.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;Loc锁情况下的线程通信&#34;&gt;&lt;a href=&#34;#Loc锁情况下的线程通信&#34; class=&#34;headerlink&#34; title=&#34;Loc锁情况下的线程通信&#34;&gt;&lt;/a&gt;Loc锁情况下的线程通信&lt;/h2&gt;&lt;p&gt;Condition是在Java 1.5中才出现的，它用来替代传统的Object的wait()、notify()实现线程间的协作，相比使用Object的wait()、notify()，使用Condition1的await()、signal()这种方式实现线程间协作更加安全和高效。&lt;/p&gt;
&lt;p&gt;它的更强大的地方在于：能够更加精细的控制多线程的休眠与唤醒。对于同一个锁，我们可以创建多个Condition，在不同的情况下使用不同的Condition&lt;/p&gt;
&lt;p&gt;一个Condition包含一个等待队列。一个Lock可以产生多个Condition，所以可以有多个等待队列。&lt;/p&gt;
&lt;p&gt;在Object的监视器模型上，一个对象拥有一个同步队列和等待队列，&lt;font color=&#34;red&#34;&gt;而Lock（同步器）拥有一个同步队列和多个等待队列&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;Object中的wait(),notify(),notifyAll()方法是和”同步锁”(synchronized关键字)捆绑使用的；而Condition是需要与”互斥锁”&amp;#x2F;“共享锁”捆绑使用的。&lt;/p&gt;
&lt;p&gt;调用Condition的await()、signal()、signalAll()方法，都必须在lock保护之内，&lt;font color=&#34;red&#34;&gt;就是说必须在lock.lock()和lock.unlock之间才可以使用 &lt;/font&gt;&lt;/p&gt;
&lt;p&gt;· Conditon中的await()对应Object的wait()；&lt;/p&gt;
&lt;p&gt;· Condition中的signal()对应Object的notify()；&lt;br&gt;· Condition中的signalAll()对应Object的notifyAll()。&lt;/p&gt;
&lt;p&gt;void await()  throws InterruptedException&lt;/p&gt;
&lt;p&gt;造成当前线程在接到信号或被中断之前一直处于等待状态。&lt;/p&gt;
&lt;p&gt;与此 Condition 相关的锁以原子方式释放，并且出于线程调度的目的，将禁用当前线程，且在发生以下四种情况之一 以前，当前线程将一直处于休眠状态：&lt;/p&gt;
&lt;p&gt;· 其他某个线程调用此 Condition 的 signal() 方法，并且碰巧将当前线程选为被唤醒的线程；或者&lt;br&gt;· 其他某个线程调用此 Condition 的 signalAll() 方法；或者&lt;br&gt;· 其他某个线程中断当前线程，且支持中断线程的挂起；或者&lt;br&gt;· 发生“虚假唤醒”&lt;/p&gt;
&lt;p&gt;在所有情况下，在此方法可以返回当前线程之前，都必须重新获取与此条件有关的锁。在线程返回时，可以保证它保持此锁。&lt;/p&gt;
&lt;p&gt;void &lt;strong&gt;signal()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;唤醒一个等待线程。&lt;/p&gt;
&lt;p&gt;如果所有的线程都在等待此条件，则选择其中的一个唤醒。在从 await 返回之前，该线程必须重新获取锁。&lt;/p&gt;
&lt;p&gt;void &lt;strong&gt;signalAll()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;唤醒所有等待线程。&lt;/p&gt;
&lt;p&gt;如果所有的线程都在等待此条件，则唤醒所有线程。在从 await 返回之前，每个线程都必须重新获取锁。&lt;/p&gt;
&lt;p&gt;更改代码：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC13%E7%AB%A0%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20220618200641119.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Product &amp;#123;//商品类
    //品牌
    private String brand;
    //名字
    private String name;
    //声明一个Lock锁：
    Lock lock = new ReentrantLock();
    //搞一个生产者的等待队列：
    Condition produceCondition = lock.newCondition();
    //搞一个消费者的等待队列：
    Condition consumeCondition = lock.newCondition();
    //引入一个灯：true:红色  false 绿色
    boolean flag = false;//默认情况下没有商品 让生产者先生产  然后消费者再消费
    //setter,getter方法；
    public String getBrand() &amp;#123;
        return brand;
    &amp;#125;
    public void setBrand(String brand) &amp;#123;
        this.brand = brand;
    &amp;#125;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    //生产商品
    public void setProduct(String brand,String name)&amp;#123;
        lock.lock();
        try&amp;#123;
            if(flag == true)&amp;#123;//灯是红色，证明有商品，生产者不生产，等着消费者消费
                try &amp;#123;
                    //wait();
                    //生产者阻塞，生产者进入等待队列中
                    produceCondition.await();
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
            &amp;#125;
            //灯是绿色的，就生产：
            this.setBrand(brand);
            try &amp;#123;
                Thread.sleep(100);
            &amp;#125; catch (InterruptedException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            this.setName(name);
            //将生产信息做一个打印：
            System.out.println(&amp;quot;生产者生产了：&amp;quot; + this.getBrand() + &amp;quot;---&amp;quot; + this.getName());
            //生产完以后，灯变色：变成红色：
            flag = true;
            //告诉消费者赶紧来消费：
            //notify();
            consumeCondition.signal();
        &amp;#125;finally &amp;#123;
            lock.unlock();
        &amp;#125;
    &amp;#125;
    //消费商品：
    public void getProduct()&amp;#123;
        lock.lock();
        try&amp;#123;
            if(!flag)&amp;#123;//flag == false没有商品，等待生产者生产：
                try &amp;#123;
                   // wait();
                    //消费者等待，消费者线程进入等待队列：
                    consumeCondition.await();
                &amp;#125; catch (InterruptedException e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;
            &amp;#125;
            //有商品，消费：
            System.out.println(&amp;quot;消费者消费了：&amp;quot; + this.getBrand() + &amp;quot;---&amp;quot; + this.getName());
            //消费完：灯变色：
            flag = false;
            //通知生产者生产：
            //notify();
            produceCondition.signal();
        &amp;#125;finally &amp;#123;
            lock.unlock();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;未完成！！！！！！！！！！&#34;&gt;&lt;a href=&#34;#未完成！！！！！！！！！！&#34; class=&#34;headerlink&#34; title=&#34;未完成！！！！！！！！！！&#34;&gt;&lt;/a&gt;未完成！！！！！！！！！！&lt;/h1&gt;</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/</id>
        <title>第12章IO</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/"/>
        <content type="html">&lt;h1 id=&#34;12-IO流&#34;&gt;&lt;a href=&#34;#12-IO流&#34; class=&#34;headerlink&#34; title=&#34;12 IO流&#34;&gt;&lt;/a&gt;12 IO流&lt;/h1&gt;&lt;h1 id=&#34;File类&#34;&gt;&lt;a href=&#34;#File类&#34; class=&#34;headerlink&#34; title=&#34;File类&#34;&gt;&lt;/a&gt;File类&lt;/h1&gt;&lt;h2 id=&#34;1-对文件进行操作&#34;&gt;&lt;a href=&#34;#1-对文件进行操作&#34; class=&#34;headerlink&#34; title=&#34;1 对文件进行操作&#34;&gt;&lt;/a&gt;1 对文件进行操作&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //将文件封装为一个File类的对象：
        File f = new File(&amp;quot;d:\\test.txt&amp;quot;);
        File f1 = new File(&amp;quot;d:\\test.txt&amp;quot;);
        File f2 = new File(&amp;quot;d:/test.txt&amp;quot;);
        //File.separator属性帮我们获取当前操作系统的路径拼接符号
       //在windows，dos下，系统默认用“\”作为路径分隔符 ，在unix，url中，使用“/”作为路径分隔符。
        File f3 = new File(&amp;quot;d:&amp;quot;+File.separator+&amp;quot;test.txt&amp;quot;);//建议使用这种
        //常用方法：
        System.out.println(&amp;quot;文件是否可读：&amp;quot;+f.canRead());
        System.out.println(&amp;quot;文件是否可写：&amp;quot;+f.canWrite());
        System.out.println(&amp;quot;文件的名字：&amp;quot;+f.getName());
        System.out.println(&amp;quot;上级目录：&amp;quot;+f.getParent());
        System.out.println(&amp;quot;是否是一个目录：&amp;quot;+f.isDirectory());
        System.out.println(&amp;quot;是否是一个文件：&amp;quot;+f.isFile());
        System.out.println(&amp;quot;是否隐藏：&amp;quot;+f.isHidden());
        System.out.println(&amp;quot;文件的大小：&amp;quot;+f.length());
        System.out.println(&amp;quot;是否存在：&amp;quot;+f.exists());
        /*if(f.exists())&amp;#123;//如果文件存在，将文件删除操作
            f.delete();
        &amp;#125;else&amp;#123;//如果不存在，就创建这个文件
            f.createNewFile();
        &amp;#125;*/
        System.out.println(f == f1);//比较两个对象的地址
        System.out.println(f.equals(f1));//比较两个对象对应的文件的路径
        //跟路径相关的：
        System.out.println(&amp;quot;绝对路径：&amp;quot;+f.getAbsolutePath());
        System.out.println(&amp;quot;相对路径：&amp;quot;+f.getPath());
        System.out.println(&amp;quot;toString:&amp;quot;+f.toString());
        System.out.println(&amp;quot;----------------------&amp;quot;);
        File f5 = new File(&amp;quot;demo.txt&amp;quot;);
        if(!f5.exists())&amp;#123;
            f5.createNewFile();
        &amp;#125;
        //绝对路径指的就是：真实的一个精准的，完整的路径
        System.out.println(&amp;quot;绝对路径：&amp;quot;+f5.getAbsolutePath());
        //相对路径：有一个参照物，相对这个参照物的路径。
        //在main方法中，相对位置指的就是：D:\IDEA_workspace\TestJavaSE
        //在junit的测试方法中，相对路径指的就是模块位置
        System.out.println(&amp;quot;相对路径：&amp;quot;+f5.getPath());
        //toString的效果永远是  相对路径
        System.out.println(&amp;quot;toString:&amp;quot;+f5.toString());
        File f6 = new File(&amp;quot;a/b/c/demo.txt&amp;quot;);
        if(!f5.exists())&amp;#123;
            f5.createNewFile();
        &amp;#125;
        System.out.println(&amp;quot;绝对路径：&amp;quot;+f6.getAbsolutePath());
        System.out.println(&amp;quot;相对路径：&amp;quot;+f6.getPath());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-对目录进行操作&#34;&gt;&lt;a href=&#34;#2-对目录进行操作&#34; class=&#34;headerlink&#34; title=&#34;2 对目录进行操作&#34;&gt;&lt;/a&gt;2 对目录进行操作&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //将目录封装为File类的对象：
        File f = new File(&amp;quot;D:\\IDEA_workspace&amp;quot;);
        System.out.println(&amp;quot;文件是否可读：&amp;quot;+f.canRead());
        System.out.println(&amp;quot;文件是否可写：&amp;quot;+f.canWrite());
        System.out.println(&amp;quot;文件的名字：&amp;quot;+f.getName());
        System.out.println(&amp;quot;上级目录：&amp;quot;+f.getParent());
        System.out.println(&amp;quot;是否是一个目录：&amp;quot;+f.isDirectory());
        System.out.println(&amp;quot;是否是一个文件：&amp;quot;+f.isFile());
        System.out.println(&amp;quot;是否隐藏：&amp;quot;+f.isHidden());
        System.out.println(&amp;quot;文件的大小：&amp;quot;+f.length());
        System.out.println(&amp;quot;是否存在：&amp;quot;+f.exists());
        System.out.println(&amp;quot;绝对路径：&amp;quot;+f.getAbsolutePath());
        System.out.println(&amp;quot;相对路径：&amp;quot;+f.getPath());
        System.out.println(&amp;quot;toString:&amp;quot;+f.toString());
        //跟目录相关的方法：
        File f2 = new File(&amp;quot;D:\\a\\b\\c&amp;quot;);
        //创建目录：
        //f2.mkdir();//创建单层目录
        //f2.mkdirs();//创建多层目录
        //删除：如果是删除目录的话，只会删除一层，并且前提：这层目录是空的，里面没有内容，如果内容就不会被删除
        f2.delete();
        //查看：
        String[] list = f.list();//文件夹下目录/文件对应的名字的数组
        for(String s:list)&amp;#123;
            System.out.println(s);
        &amp;#125;
        System.out.println(&amp;quot;=========================&amp;quot;);
        File[] files = f.listFiles();//作用更加广泛
        for(File file:files)&amp;#123;
            System.out.println(file.getName()+&amp;quot;,&amp;quot;+file.getAbsolutePath());
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;IO流&#34;&gt;&lt;a href=&#34;#IO流&#34; class=&#34;headerlink&#34; title=&#34;IO流&#34;&gt;&lt;/a&gt;IO流&lt;/h1&gt;&lt;h2 id=&#34;1-引入&#34;&gt;&lt;a href=&#34;#1-引入&#34; class=&#34;headerlink&#34; title=&#34;1 引入&#34;&gt;&lt;/a&gt;1 引入&lt;/h2&gt;&lt;p&gt;【1】File类：封装文件&amp;#x2F;目录的各种信息，对目录&amp;#x2F;文件进行操作，但是我们不可以获取到文件&amp;#x2F;目录中的内容。&lt;br&gt;【2】引入：IO流：&lt;br&gt;I&amp;#x2F;O ： Input&amp;#x2F;Output的缩写，用于处理设备之间的数据的传输。&lt;br&gt;【3】形象理解：IO流 当做一根 “管”：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618184436805.png&#34; class=&#34;&#34;&gt;





&lt;p&gt;【4】IO流的体系结构：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618184443031.png&#34; class=&#34;&#34;&gt;






&lt;h2 id=&#34;2-案例：通过java程序完成文件的复制操作&#34;&gt;&lt;a href=&#34;#2-案例：通过java程序完成文件的复制操作&#34; class=&#34;headerlink&#34; title=&#34;2 案例：通过java程序完成文件的复制操作&#34;&gt;&lt;/a&gt;2 案例：通过java程序完成文件的复制操作&lt;/h2&gt;&lt;h3 id=&#34;功能分解1：文件–》程序：FileReader&#34;&gt;&lt;a href=&#34;#功能分解1：文件–》程序：FileReader&#34; class=&#34;headerlink&#34; title=&#34;功能分解1：文件–》程序：FileReader&#34;&gt;&lt;/a&gt;功能分解1：文件–》程序：FileReader&lt;/h3&gt;&lt;p&gt;一个字符一个字符的将文件中的内容读取到程序中了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //文件--》程序：
        //1.有一个文件：----》创建一个File类的对象
        File f = new File(&amp;quot;d:\\Test.txt&amp;quot;);
        //2.利用FileReader这个流，这个“管”怼到源文件上去   ---》创建一个FileReader的流的对象
        FileReader fr = new FileReader(f);
        //3.进行操作“吸”的动作  ---》读取动作
        /*下面的代码我们验证了：如果到了文件的结尾处，那么读取的内容为-1
        int n1 = fr.read();
        int n2 = fr.read();
        int n3 = fr.read();
        int n4 = fr.read();
        int n5 = fr.read();
        int n6 = fr.read();
        System.out.println(n1);
        System.out.println(n2);
        System.out.println(n3);
        System.out.println(n4);
        System.out.println(n5);
        System.out.println(n6);*/
        //方式1：
        /*int n = fr.read();
        while(n!=-1)&amp;#123;
            System.out.println(n);
            n = fr.read();
        &amp;#125;*/
        //方式2：
        int n;
        while((n = fr.read())!=-1)&amp;#123;
            System.out.println((char)n);
        &amp;#125;
        //4.“管”不用了，就要关闭  ---》关闭流
        //流，数据库，网络资源，靠jvm本身没有办法帮我们关闭，此时必须程序员手动关闭：
        fr.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;想一次性读取五个字符，不够的话下次再读五个字符：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //文件--》程序：
        //1.创建一个File类的对象
        File f = new File(&amp;quot;d:\\Test.txt&amp;quot;);
        //2.创建一个FileReader的流的对象
        FileReader fr = new FileReader(f);
        //3.读取动作
        //引入一个“快递员的小车”，这个“小车”一次拉5个快递：
        char[] ch = new char[5];//缓冲数组
        int len = fr.read(ch);//一次读取五个:返回值是这个数组中 的有效长度
        while(len!=-1)&amp;#123;
            //System.out.println(len);
            //错误方式：
            /*for (int i = 0 ;i &amp;lt; ch.length;i++)&amp;#123;
                System.out.println(ch[i]);
            &amp;#125;*/
            //正确方式：
            /*for (int i = 0 ;i &amp;lt; len;i++)&amp;#123;
                System.out.println(ch[i]);
            &amp;#125;*/
            //正确方式2：将数组转为String：
            String str = new String(ch,0,len);
            System.out.print(str);
            len = fr.read(ch);
        &amp;#125;
        //4.关闭流
        fr.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解2：程序–》文件：FileWriter&#34;&gt;&lt;a href=&#34;#功能分解2：程序–》文件：FileWriter&#34; class=&#34;headerlink&#34; title=&#34;功能分解2：程序–》文件：FileWriter&#34;&gt;&lt;/a&gt;功能分解2：程序–》文件：FileWriter&lt;/h3&gt;&lt;p&gt;一个字符一个字符的向外输出：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.有个目标文件：
        File f = new File(&amp;quot;d:\\demo.txt&amp;quot;);
        //2.FileWriter管怼到文件上去：
        FileWriter fw = new FileWriter(f);
        //3.开始动作：输出动作：
        //一个字符一个字符的往外输出：
        String str = &amp;quot;hello你好&amp;quot;;
        for (int i = 0 ;i &amp;lt; str.length();i++)&amp;#123;
            fw.write(str.charAt(i));
        &amp;#125;
        //4.关闭流：
        fw.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;发现：&lt;br&gt;如果目标文件不存在的话，那么会自动创建此文件。&lt;br&gt;如果目标文件存在的话：&lt;br&gt;new FileWriter(f)   相当于对原文件进行覆盖操作。&lt;br&gt;new FileWriter(f,false)  相当于对源文件进行覆盖操作。不是追加。&lt;br&gt;new FileWriter(f,true)   对原来的文件进行追加，而不是覆盖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用缓冲数组：向外输出（利用缓冲数组：）&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.有个目标文件：
        File f = new File(&amp;quot;d:\\demo.txt&amp;quot;);
        //2.FileWriter管怼到文件上去：
        FileWriter fw = new FileWriter(f,true);
        //3.开始动作：输出动作：
        //一个字符一个字符的往外输出：
        String str = &amp;quot;你好中国&amp;quot;;
        char[] chars = str.toCharArray();
        fw.write(chars);
        //4.关闭流：
        fw.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解3：利用FileReader，FileWriter文件复制&#34;&gt;&lt;a href=&#34;#功能分解3：利用FileReader，FileWriter文件复制&#34; class=&#34;headerlink&#34; title=&#34;功能分解3：利用FileReader，FileWriter文件复制&#34;&gt;&lt;/a&gt;功能分解3：利用FileReader，FileWriter文件复制&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test04 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.有一个源文件
        File f1 = new File(&amp;quot;d:\\Test.txt&amp;quot;);
        //2.有一个目标文件：
        File f2 = new File(&amp;quot;d:\\Demo.txt&amp;quot;);
        //3.搞一个输入的管 怼到源文件上：
        FileReader fr = new FileReader(f1);
        //4.搞一个输出的管，怼到目标文件上：
        FileWriter fw = new FileWriter(f2);
        //5.开始动作：
        //方式1：一个字符一个字符的复制：
        /*int n = fr.read();
        while(n!=-1)&amp;#123;
            fw.write(n);
            n = fr.read();
        &amp;#125;*/
        //方式2：利用缓冲字符数组：
        /*char[] ch = new char[5];
        int len = fr.read(ch);
        while(len!=-1)&amp;#123;
            fw.write(ch,0,len);//将缓冲数组中有效长度写出
            len = fr.read(ch);
        &amp;#125;*/
        //方式3：利用缓冲字符数组，将数组转为String写出。
        char[] ch = new char[5];
        int len = fr.read(ch);
        while(len!=-1)&amp;#123;
            String s = new String(ch,0,len);
            fw.write(s);
            len = fr.read(ch);
        &amp;#125;
        //6.关闭流：(关闭流的时候，倒着关闭，后用先关)
        fw.close();
        fr.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-警告：不要用字符流去操作非文本文件&#34;&gt;&lt;a href=&#34;#3-警告：不要用字符流去操作非文本文件&#34; class=&#34;headerlink&#34; title=&#34;3 警告：不要用字符流去操作非文本文件&#34;&gt;&lt;/a&gt;3 警告：不要用字符流去操作非文本文件&lt;/h2&gt;&lt;p&gt;文本文件：.txt   .java  .c  .cpp  —》建议使用字符流操作&lt;br&gt;非文本文件：.jpg,  .mp3  ,   .mp4 , .doc  , .ppt  —》建议使用字节流操作&lt;/p&gt;
&lt;h2 id=&#34;4-用try-catch-finally处理异常方式&#34;&gt;&lt;a href=&#34;#4-用try-catch-finally处理异常方式&#34; class=&#34;headerlink&#34; title=&#34;4 用try-catch-finally处理异常方式&#34;&gt;&lt;/a&gt;4 用try-catch-finally处理异常方式&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test04 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args)  &amp;#123;
        //1.有一个源文件
        File f1 = new File(&amp;quot;d:\\Test.txt&amp;quot;);
        //2.有一个目标文件：
        File f2 = new File(&amp;quot;d:\\Demo.txt&amp;quot;);
        //3.搞一个输入的管 怼到源文件上：
        FileReader fr = null;
        FileWriter fw = null;
        try &amp;#123;
            fr = new FileReader(f1);
            //4.搞一个输出的管，怼到目标文件上：
            fw = new FileWriter(f2);
            //5.开始动作：
            char[] ch = new char[5];
            int len = fr.read(ch);
            while(len!=-1)&amp;#123;
                String s = new String(ch,0,len);
                fw.write(s);
                len = fr.read(ch);
            &amp;#125;
        &amp;#125; catch (FileNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //6.关闭流：(关闭流的时候，倒着关闭，后用先关)
            try &amp;#123;
                if(fw!=null)&amp;#123;//防止空指针异常
                    fw.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(fr!=null)&amp;#123;
                    fr.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-FileInputStream读取文件中内容&#34;&gt;&lt;a href=&#34;#5-FileInputStream读取文件中内容&#34; class=&#34;headerlink&#34; title=&#34;5 FileInputStream读取文件中内容&#34;&gt;&lt;/a&gt;5 FileInputStream读取文件中内容&lt;/h2&gt;&lt;p&gt;【1】读取文本文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //功能：利用字节流将文件中内容读到程序中来：
        //1.有一个源文件：
        File f = new File(&amp;quot;D:\\Test.txt&amp;quot;);
        //2.将一个字节流这个管 怼  到 源文件上：
        FileInputStream fis = new FileInputStream(f);
        //3.开始读取动作
        /*
        细节1：
        文件是utf-8进行存储的，所以英文字符 底层实际占用1个字节
        但是中文字符，底层实际占用3个字节。
        细节2：
        如果文件是文本文件，那么就不要使用字节流读取了，建议使用字符流。
        细节3：
        read()读取一个字节，但是你有没有发现返回值是 int类型，而不是byte类型？
        read方法底层做了处理，让返回的数据都是“正数”
        就是为了避免如果字节返回的是-1的话，那到底是读入的字节，还是到文件结尾呢。
         */
        int n = fis.read();
        while(n!=-1)&amp;#123;
            System.out.println(n);
            n = fis.read();
        &amp;#125;
        //4.关闭流：
        fis.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】利用字节流读取非文本文件：（以图片为案例：）–》一个字节一个字节的读取：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //功能：利用字节流将文件中内容读到程序中来：
        //1.有一个源文件：
        File f = new File(&amp;quot;D:\\LOL.jpg&amp;quot;);
        //2.将一个字节流这个管 怼  到 源文件上：
        FileInputStream fis = new FileInputStream(f);
        //3.开始读取动作
        int count = 0;//定义一个计数器，用来计读入的字节的个数
        int n = fis.read();
        while(n!=-1)&amp;#123;
            count++;
            System.out.println(n);
            n = fis.read();
        &amp;#125;
        System.out.println(&amp;quot;count=&amp;quot;+count);
        //4.关闭流：
        fis.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】利用字节类型的缓冲数组：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //功能：利用字节流将文件中内容读到程序中来：
        //1.有一个源文件：
        File f = new File(&amp;quot;D:\\LOL.jpg&amp;quot;);
        //2.将一个字节流这个管 怼  到 源文件上：
        FileInputStream fis = new FileInputStream(f);
        //3.开始读取动作
        //利用缓冲数组：（快递员的小车）
        byte[] b = new byte[1024*6];
        int len = fis.read(b);//len指的就是读取的数组中的有效长度
        while(len!=-1)&amp;#123;
            //System.out.println(len);
            for(int i = 0;i&amp;lt;len;i++)&amp;#123;
                System.out.println(b[i]);
            &amp;#125;
            len = fis.read(b);
        &amp;#125;
        //4.关闭流：
        fis.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-FileInputStream-FileOutputStream完成非文本文件的复制&#34;&gt;&lt;a href=&#34;#6-FileInputStream-FileOutputStream完成非文本文件的复制&#34; class=&#34;headerlink&#34; title=&#34;6 FileInputStream,FileOutputStream完成非文本文件的复制&#34;&gt;&lt;/a&gt;6 FileInputStream,FileOutputStream完成非文本文件的复制&lt;/h2&gt;&lt;p&gt;【1】读入一个字节，写出一个字节：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test04 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //功能：完成图片的复制：
        //1.有一个源图片
        File f1 = new File(&amp;quot;d:\\LOL.jpg&amp;quot;);
        //2.有一个目标图片：
        File f2 = new File(&amp;quot;d:\\LOL2.jpg&amp;quot;);
        //3.有一个输入的管道 怼 到 源文件：
        FileInputStream fis = new FileInputStream(f1);
        //4.有一个输出的管道 怼到  目标文件上：
        FileOutputStream fos = new FileOutputStream(f2);
        //5.开始复制：（边读边写）
        int n = fis.read();
        while(n!=-1)&amp;#123;
            fos.write(n);
            n = fis.read();
        &amp;#125;
        //6.关闭流：(倒着关闭流，先用后关)
        fos.close();
        fis.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】利用缓冲字节数组：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test05 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //功能：完成图片的复制：
        //1.有一个源图片
        File f1 = new File(&amp;quot;d:\\LOL.jpg&amp;quot;);
        //2.有一个目标图片：
        File f2 = new File(&amp;quot;d:\\LOL2.jpg&amp;quot;);
        //3.有一个输入的管道 怼 到 源文件：
        FileInputStream fis = new FileInputStream(f1);
        //4.有一个输出的管道 怼到  目标文件上：
        FileOutputStream fos = new FileOutputStream(f2);
        //5.开始复制：（边读边写）
        //利用缓冲数组：
        byte[] b = new byte[1024*8];
        int len = fis.read(b);
        while(len!=-1)&amp;#123;
            fos.write(b,0,len);
            len = fis.read(b);
        &amp;#125;
        //6.关闭流：(倒着关闭流，先用后关)
        fos.close();
        fis.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-缓冲字节流-处理流-BufferedInputStream-BufferedOutputStream&#34;&gt;&lt;a href=&#34;#7-缓冲字节流-处理流-BufferedInputStream-BufferedOutputStream&#34; class=&#34;headerlink&#34; title=&#34;7 缓冲字节流(处理流)-BufferedInputStream ,BufferedOutputStream&#34;&gt;&lt;/a&gt;7 缓冲字节流(处理流)-BufferedInputStream ,BufferedOutputStream&lt;/h2&gt;&lt;p&gt;【1】读入一个字节，写出一个字节：&lt;/p&gt;
&lt;p&gt;【2】利用缓冲字节数组：&lt;/p&gt;
&lt;p&gt;【3】利用缓冲区：&lt;/p&gt;
&lt;p&gt;想要完成上面的效果，单纯的靠FileInputStream,FileOutputStream是不可以完成的，这个时候就需要功能的加强，&lt;br&gt;这个加强就需要引入新的流（在FileInputStream,FileOutputStream外面再套一层流）：BufferedInputStream ,BufferedOutputStream. —–&amp;gt;处理流&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test06 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.有一个源图片
        File f1 = new File(&amp;quot;d:\\LOL.jpg&amp;quot;);
        //2.有一个目标图片：
        File f2 = new File(&amp;quot;d:\\LOL2.jpg&amp;quot;);
        //3.有一个输入的管道 怼 到 源文件：
        FileInputStream fis = new FileInputStream(f1);
        //4.有一个输出的管道 怼到  目标文件上：
        FileOutputStream fos = new FileOutputStream(f2);
        //5.功能加强，在FileInputStream外面套一个管：BufferedInputStream:
        BufferedInputStream bis = new BufferedInputStream(fis);
        //6.功能加强，在FileOutputStream外面套一个管：BufferedOutputStream:
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        //7.开始动作 ：
        byte[] b = new byte[1024*6];
        int len = bis.read(b);
        while(len!=-1)&amp;#123;
            bos.write(b,0,len);
           /* bos.flush(); 底层已经帮我们做了刷新缓冲区的操作，不用我们手动完成：底层调用flushBuffer()*/
            len = bis.read(b);
        &amp;#125;
        //8.关闭流：
        //倒着关：
        //如果处理流包裹着节点流的话，那么其实只要关闭高级流（处理流），那么里面的字节流也会随之被关闭。
        bos.close();
        bis.close();
        /*fos.close();
        fis.close();*/
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;8-比对非文本文件复制的三种方法的效率&#34;&gt;&lt;a href=&#34;#8-比对非文本文件复制的三种方法的效率&#34; class=&#34;headerlink&#34; title=&#34;8 比对非文本文件复制的三种方法的效率&#34;&gt;&lt;/a&gt;8 比对非文本文件复制的三种方法的效率&lt;/h2&gt;&lt;p&gt;【1】读入一个字节，写出一个字节：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618184948658.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】利用缓冲字节数组：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618184953685.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】利用缓冲区：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618184958715.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test06 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.有一个源图片
        File f1 = new File(&amp;quot;d:\\LOL.jpg&amp;quot;);
        //2.有一个目标图片：
        File f2 = new File(&amp;quot;d:\\LOL2.jpg&amp;quot;);
        //3.有一个输入的管道 怼 到 源文件：
        FileInputStream fis = new FileInputStream(f1);
        //4.有一个输出的管道 怼到  目标文件上：
        FileOutputStream fos = new FileOutputStream(f2);
        //5.功能加强，在FileInputStream外面套一个管：BufferedInputStream:
        BufferedInputStream bis = new BufferedInputStream(fis);
        //6.功能加强，在FileOutputStream外面套一个管：BufferedOutputStream:
        BufferedOutputStream bos = new BufferedOutputStream(fos);
        //7.开始动作 ：
        long startTime = System.currentTimeMillis();
        byte[] b = new byte[1024];
        int len = bis.read(b);
        while(len!=-1)&amp;#123;
            bos.write(b,0,len);
           /* bos.flush(); 底层已经帮我们做了刷新缓冲区的操作，不用我们手动完成：底层调用flushBuffer()*/
            len = bis.read(b);
        &amp;#125;
        long endTime = System.currentTimeMillis();
        System.out.println(&amp;quot;复制完成的时间为：&amp;quot;+(endTime-startTime));
        //8.关闭流：
        //倒着关：
        //如果处理流包裹着节点流的话，那么其实只要关闭高级流（处理流），那么里面的字节流也会随之被关闭。
        bos.close();
        bis.close();
        /*fos.close();
        fis.close();*/
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9-缓冲字符流-处理流-BufferedReader-BufferedWriter完成文本文件的复制&#34;&gt;&lt;a href=&#34;#9-缓冲字符流-处理流-BufferedReader-BufferedWriter完成文本文件的复制&#34; class=&#34;headerlink&#34; title=&#34;9 缓冲字符流(处理流)-BufferedReader,BufferedWriter完成文本文件的复制&#34;&gt;&lt;/a&gt;9 缓冲字符流(处理流)-BufferedReader,BufferedWriter完成文本文件的复制&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test07 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.有一个源文件：
        File f1 = new File(&amp;quot;d:\\Test.txt&amp;quot;);
        //2.有一个目标文件：
        File f2 = new File(&amp;quot;d:\\Demo.txt&amp;quot;);
        //3.需要一个管 怼到 源文件：
        FileReader fr = new FileReader(f1);
        //4.需要一根管怼到目标文件：
        FileWriter fw = new FileWriter(f2);
        //5.套一根管在输入字符流外面：
        BufferedReader br = new BufferedReader(fr);
        //6.套一根管在输出字符流外面：
        BufferedWriter bw = new BufferedWriter(fw);
        //7.开始动作：
        //方式1：读取一个字符，输出一个字符：
        /*int n = br.read();
        while(n!=-1)&amp;#123;
            bw.write(n);
            n = br.read();
        &amp;#125;*/
        //方式2:利用缓冲数组：
        /*char[] ch = new char[30];
        int len = br.read(ch);
        while(len!=-1)&amp;#123;
            bw.write(ch,0,len);
            len = br.read(ch);
        &amp;#125;*/
        //方式3：读取String：
        String str = br.readLine();//每次读取文本文件中一行，返回字符串
        while(str!=null)&amp;#123;
            bw.write(str);
            //在文本文件中应该再写出一个换行：
            bw.newLine();//新起一行
            str = br.readLine();
        &amp;#125;
        //8.关闭流
        bw.close();
        br.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;10-转换流-InputStreamReader-OutputStreamWriter&#34;&gt;&lt;a href=&#34;#10-转换流-InputStreamReader-OutputStreamWriter&#34; class=&#34;headerlink&#34; title=&#34;10 转换流-InputStreamReader,OutputStreamWriter&#34;&gt;&lt;/a&gt;10 转换流-InputStreamReader,OutputStreamWriter&lt;/h2&gt;&lt;p&gt;【1】转换流：作用：将字节流和字符流进行转换。&lt;br&gt;【2】转换流  属于 字节流还是字符流？属于字符流&lt;br&gt;InputStreamReader  ：字节输入流 —》字符的输入流&lt;br&gt;OutputStreamWriter  ： 字符输出流 –》字节的输出流&lt;/p&gt;
&lt;p&gt;【3】图解：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185049182.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】将输入的字节流转换为输入的字符流，然后完成文件–》程序 ：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //文件---》程序：
        //1.有一个源文件：
        File f = new File(&amp;quot;d:\\Test.txt&amp;quot;);
        //2.需要一个输入的字节流接触文件：
        FileInputStream fis = new FileInputStream(f);
        //3.加入一个转换流，将字节流转换为字符流：（转换流属于一个处理流）
        //将字节转换为字符的时候，需要指定一个编码，这个编码跟文件本身的编码格式统一
        //如果编码格式不统一的话，那么在控制台上展示的效果就会出现乱码
        //InputStreamReader isr = new InputStreamReader(fis,&amp;quot;utf-8&amp;quot;);
        //获取程序本身的编码--》utf-8
        InputStreamReader isr = new InputStreamReader(fis);
        //4.开始动作，将文件中内容显示在控制台：
        char[] ch = new char[20];
        int len = isr.read(ch);
        while(len!=-1)&amp;#123;
            //将缓冲数组转为字符串在控制台上打印出来
            System.out.print(new String(ch,0,len));
            len = isr.read(ch);
        &amp;#125;
        //5.关闭流：
        isr.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;11-转换流-InputStreamReader-OutputStreamWriter实现文本文件的复制&#34;&gt;&lt;a href=&#34;#11-转换流-InputStreamReader-OutputStreamWriter实现文本文件的复制&#34; class=&#34;headerlink&#34; title=&#34;11 转换流-InputStreamReader,OutputStreamWriter实现文本文件的复制&#34;&gt;&lt;/a&gt;11 转换流-InputStreamReader,OutputStreamWriter实现文本文件的复制&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.有一个源文件
        File f1 = new File(&amp;quot;d:\\Test.txt&amp;quot;);
        //2.有一个目标文件：
        File f2 = new File(&amp;quot;d:\\Demo.txt&amp;quot;);
        //3.输入方向：
        FileInputStream fis = new FileInputStream(f1);
        InputStreamReader isr = new InputStreamReader(fis,&amp;quot;utf-8&amp;quot;);
        //4.输出方向：
        FileOutputStream fos = new FileOutputStream(f2);
        OutputStreamWriter osw = new OutputStreamWriter(fos,&amp;quot;gbk&amp;quot;);
        //5.开始动作：
        char[] ch = new char[20];
        int len = isr.read(ch);
        while(len!=-1)&amp;#123;
            osw.write(ch,0,len);
            len = isr.read(ch);
        &amp;#125;
        //6.关闭流：
        osw.close();
        isr.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;12-System类对IO流的支持&#34;&gt;&lt;a href=&#34;#12-System类对IO流的支持&#34; class=&#34;headerlink&#34; title=&#34;12 System类对IO流的支持&#34;&gt;&lt;/a&gt;12 System类对IO流的支持&lt;/h2&gt;&lt;p&gt;【1】System的属性：&lt;br&gt;System.in  : “标准”输入流。—》默认情况下  从键盘输入&lt;br&gt;System.out  :“标准”输出流。 —》默认情况下，输出到控制台。&lt;/p&gt;
&lt;p&gt;【2】System.in ：“标准”输入流。—》默认情况下  从键盘输入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //得到的是标准的输入流：--》从键盘输入：
        //InputStream in = System.in;
        //调用方法：
        //int n = in.read();//read方法等待键盘的录入，所以这个方法是一个阻塞方法。
        //System.out.println(n);
        //以前案例：从键盘录入一个int类型的数据：
        //从上面的代码证明，键盘录入实际上是：System.in
        //形象的理解：System.in管，这个管怼到键盘上去了，所以你从键盘录入的话，就从这个管到程序中了
        //Scanner的作用：扫描器：起扫描作用的，扫键盘的从这根管出来的数据
        /*Scanner sc = new Scanner(System.in);
        int i = sc.nextInt();
        System.out.println(i);*/
        //既然Scanner是扫描的作用，不一定非得扫 System.in进来的东西，还可以扫描其他管的内容：
        Scanner sc = new Scanner(new FileInputStream(new File(&amp;quot;d:\\Test.txt&amp;quot;)));
        while(sc.hasNext())&amp;#123;
            System.out.println(sc.next());
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】System.out  : 返回的输出流 、 打印流（PrintStream）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //写到控制台：
        PrintStream out = System.out;
        //调用方法：
        out.print(&amp;quot;你好1&amp;quot;);//直接在控制台写出，但是不换行
        out.print(&amp;quot;你好2&amp;quot;);
        out.print(&amp;quot;你好3&amp;quot;);
        out.print(&amp;quot;你好4&amp;quot;);
        out.println(&amp;quot;我是中国人1&amp;quot;);//直接在控制台写出，并且换行操作
        out.println(&amp;quot;我是中国人2&amp;quot;);
        out.println(&amp;quot;我是中国人3&amp;quot;);
        out.println(&amp;quot;我是中国人4&amp;quot;);
        System.out.println(&amp;quot;你是&amp;quot;);
        System.out.print(&amp;quot;中国人&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;13-练习：键盘录入内容输出到文件中&#34;&gt;&lt;a href=&#34;#13-练习：键盘录入内容输出到文件中&#34; class=&#34;headerlink&#34; title=&#34;13 练习：键盘录入内容输出到文件中&#34;&gt;&lt;/a&gt;13 练习：键盘录入内容输出到文件中&lt;/h2&gt;&lt;p&gt;【1】解决思路：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185310964.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.先准备输入方向：
        //键盘录入：
        InputStream in = System.in;//属于字节流
        //字节流--》字符流：
        InputStreamReader isr = new InputStreamReader(in);
        //在isr外面再套一个缓冲流：
        BufferedReader br = new BufferedReader(isr);
        //2.再准备输出方向：
        //准备目标文件
        File f = new File(&amp;quot;d:\\Demo1.txt&amp;quot;);
        FileWriter fw = new FileWriter(f);
        BufferedWriter bw = new BufferedWriter(fw);
        //3.开始动作：
        String s = br.readLine();
        while(!s.equals(&amp;quot;exit&amp;quot;))&amp;#123;
            bw.write(s);
            bw.newLine();//文件中换行
            s = br.readLine();
        &amp;#125;
        //4.关闭流：
        bw.close();
        br.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;14-数据流-DataInputStream-DataOutputStream&#34;&gt;&lt;a href=&#34;#14-数据流-DataInputStream-DataOutputStream&#34; class=&#34;headerlink&#34; title=&#34;14 数据流-DataInputStream,DataOutputStream&#34;&gt;&lt;/a&gt;14 数据流-DataInputStream,DataOutputStream&lt;/h2&gt;&lt;p&gt;【1】数据流：用来操作基本数据类型和字符串的&lt;br&gt;【2】&lt;br&gt;DataInputStream:将文件中存储的基本数据类型和字符串  写入  内存的变量中&lt;br&gt;DataOutputStream:  将内存中的基本数据类型和字符串的变量 写出  文件中&lt;/p&gt;
&lt;p&gt;【3】代码：&lt;/p&gt;
&lt;p&gt;利用DataOutputStream向外写出变量：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //DataOutputStream:  将内存中的基本数据类型和字符串的变量 写出  文件中
        /*File f = new File(&amp;quot;d:\\Demo2.txt&amp;quot;);
        FileOutputStream fos = new FileOutputStream(f);
        DataOutputStream dos = new DataOutputStream(fos);*/
        DataOutputStream dos = new DataOutputStream(new FileOutputStream(new File(&amp;quot;d:\\Demo2.txt&amp;quot;)));
        //向外将变量写到文件中去：
        dos.writeUTF(&amp;quot;你好&amp;quot;);
        dos.writeBoolean(false);
        dos.writeDouble(6.9);
        dos.writeInt(82);
        //关闭流：
        dos.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在Demo2.txt文件中，我们看到：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185411994.png&#34; class=&#34;&#34;&gt;





&lt;p&gt;发现：这个内容我们看不懂，是给程序看的&lt;/p&gt;
&lt;p&gt;所以下面我们开始读取的程序：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //DataInputStream:将文件中存储的基本数据类型和字符串  写入  内存的变量中
        DataInputStream dis = new DataInputStream(new FileInputStream(new File(&amp;quot;d:\\Demo2.txt&amp;quot;)));
        //将文件中内容读取到程序中来：
        System.out.println(dis.readUTF());
        System.out.println(dis.readBoolean());
        System.out.println(dis.readDouble());
        System.out.println(dis.readInt());
        //关闭流：
        dis.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185431650.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;验证：那个文件，我们看不懂，程序看得懂&lt;br&gt;要求：&lt;br&gt;写出的类型跟读入的类型 必须 要匹配！&lt;/p&gt;
&lt;h2 id=&#34;15-对象流-ObjectInputStream-ObjectOutputStream&#34;&gt;&lt;a href=&#34;#15-对象流-ObjectInputStream-ObjectOutputStream&#34; class=&#34;headerlink&#34; title=&#34;15 对象流-ObjectInputStream,ObjectOutputStream&#34;&gt;&lt;/a&gt;15 对象流-ObjectInputStream,ObjectOutputStream&lt;/h2&gt;&lt;p&gt;【1】对象流：ObjectInputStream，ObjectInputStream&lt;br&gt;用于存储和读取基本数据类型数据或对象的处理流。&lt;br&gt;它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。&lt;/p&gt;
&lt;p&gt;【2】序列化和反序列化：&lt;br&gt;ObjectOutputStream 类 ： 把内存中的Java对象转换成平台无关的二进制数据，从而允许把这种二进制数据持久地保存在磁盘上，或通过网络将这种二进制数据传输到另一个网络节点。—-》序列化&lt;br&gt;用ObjectInputStream类 ： 当其它程序获取了这种二进制数据，就可以恢复成原来的Java对象。—-》反序列化&lt;/p&gt;
&lt;p&gt;【3】代码：操作字符串对象：&lt;br&gt;首先将一个字符串对象写到文件中去：—-》序列化&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(&amp;quot;d:\\Demo3.txt&amp;quot;)));
        //将内存中的字符串写出到文件中：
        oos.writeObject(&amp;quot;你好&amp;quot;);
        //关闭流：
        oos.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看文件：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185509008.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;我们看不懂文件的内容，但是程序是可以看懂的，所以可以写一个程序读文件中内容：—-》反序列化&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException, ClassNotFoundException &amp;#123;
        //将文件中保存的字符串 读入到 内存：
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&amp;quot;d:\\Demo3.txt&amp;quot;)));
        //读取：
        String s = (String)(ois.readObject());
        System.out.println(s);
        //关闭流：
        ois.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185547246.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】代码：操作自定义类的对象：&lt;br&gt;自定义的Person类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    private String name;
    private int age;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public int getAge() &amp;#123;
        return age;
    &amp;#125;
    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;
    public Person() &amp;#123;
    &amp;#125;
    public Person(String name, int age) &amp;#123;
        this.name = name;
        this.age = age;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //序列化：将内存中对象 ---》 文件：
        //有一个对象：
        Person p = new Person(&amp;quot;lili&amp;quot;,19);
        //有对象流：
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(new File(&amp;quot;d:\\Demo4.txt&amp;quot;)));
        //向外写：
        oos.writeObject(p);
        //关闭流：
        oos.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行的时候发现出现异常：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185638520.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;出现异常的原因：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185644074.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;起到标识作用，标识什么呢？只要实现这个接口的类的对象才能序列化，否则不可以。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;解决办法：将Person 实现这个标识接口就可以：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person implements Serializable &amp;#123;
    private String name;
    private int age;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public int getAge() &amp;#123;
        return age;
    &amp;#125;
    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;
    public Person() &amp;#123;
    &amp;#125;
    public Person(String name, int age) &amp;#123;
        this.name = name;
        this.age = age;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试：发现序列化成功，Person具备了序列化的能力。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185843749.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;这个二进制数据我们看不懂，但是程序可以看懂，所以我们可以用程序实现 反序列化操作：&lt;br&gt;将这个对象 恢复到内存中来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException, ClassNotFoundException &amp;#123;
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(new File(&amp;quot;d:\\Demo4.txt&amp;quot;)));
        //读入内存：
        Person p = (Person)(ois.readObject());
        System.out.println(p/*.toString()*/);
        //关闭流：
        ois.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：&lt;br&gt;因为我们没有重写toString方法，所以结果为：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618185906147.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;证明了反序列化成功：   将二进制数据 –》内存&lt;/p&gt;
&lt;p&gt;【5】serialVersionUID：&lt;br&gt;凡是实现Serializable接口（标识接口）的类都有一个表示序列化版本标识符的静态常量:&lt;br&gt;➢private static final long serialVersionUID;&lt;br&gt;➢serialVersionUID用来表明类的不同版本间的兼容性。简言之，其目的是以序列化对象进行版本控制，有关各版本反序加化时是否兼容。&lt;br&gt;➢如果类没有显示定义这个静态变量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的实例变量做了修改，serialVersionUID 可能发生变化。故建议，显式声明。&lt;/p&gt;
&lt;p&gt;➢简单来说，Java的序列化机制是通过在运行时判断类的serialVersionUID来验证版本一致性的。在进行反序列化时，JVM会把传来的字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化，否则就会出现序列化版本不一致的异常。(InvalidCastException)&lt;/p&gt;
&lt;p&gt;我现在在Person类中加入toString方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person implements Serializable &amp;#123;
    private String name;
    private int age;
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public int getAge() &amp;#123;
        return age;
    &amp;#125;
    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;
    public Person() &amp;#123;
    &amp;#125;
    public Person(String name, int age) &amp;#123;
        this.name = name;
        this.age = age;
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;Person&amp;#123;&amp;quot; +
                &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;quot;, age=&amp;quot; + age +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次运行测试类：&lt;br&gt;出现异常：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618193403947.png&#34; class=&#34;&#34;&gt;



&lt;p&gt;出现异常的原因：&lt;/p&gt;
&lt;p&gt;解决：给这个类 加入一个 序列号：serialVersionUID&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618193411439.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;【6】IDEA中配置序列化版本号：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618193419904.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;在Person类上：alt+enter:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618193429703.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;回车即可生成&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618193434654.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【7】序列化细节：&lt;br&gt;（1）被序列化的类的内部的所有属性，必须是可序列化的 （基本数据类型都是可序列化的）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618193446336.png&#34; class=&#34;&#34;&gt;



&lt;p&gt;（2）static，transient修饰的属性 不可以被序列化。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person implements Serializable &amp;#123;
    private static final long serialVersionUID = 8027651838638826533L;
    private transient String name;
    private static int age;
    private Famaily f = new Famaily();
    public String getName() &amp;#123;
        return name;
    &amp;#125;
    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    public int getAge() &amp;#123;
        return age;
    &amp;#125;
    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;
    public Person() &amp;#123;
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;Person&amp;#123;&amp;quot; +
                &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;quot;, f=&amp;quot; + f + &amp;quot;,age=&amp;quot; + age +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC12%E7%AB%A0IO/image-20220618193501694.png&#34; class=&#34;&#34;&gt;




</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
        <title>第14章_网络编程</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;引入&#34;&gt;&lt;a href=&#34;#引入&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;【1】网络编程：&lt;/p&gt;
&lt;p&gt;把分布在不同地理区域的计算机与专门的外部设备用通信线路互连成一个规模大、功能强的网络系统，从而使众多的计算机可以方便地互相传递信息、共享硬件、软件、数据信息等资源。&lt;/p&gt;
&lt;p&gt;设备之间在网络中进行数据的传输，发送&amp;#x2F;接收数据。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/1a93dfa9d1c3ca81040d0cc18afb4aba.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】通信两个重要的要素：IP+PORT&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/c79c4973d3a3792ab9aef4710b01f370.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;域名：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20v&#34;&gt;www.baidu.com&lt;/span&gt; ——&amp;gt;DNS服务器解析 —-&amp;gt; IP地址&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5tYXNoaWJpbmcuY29tLw==&#34;&gt;www.mashibing.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5zaW5hLmNvbS8=&#34;&gt;www.sina.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy53YW5kYS5jb20v&#34;&gt;www.wanda.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYmJiLmNvbS8=&#34;&gt;www.bbbb.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;【3】设备之间进行传输的时候，必须遵照一定的规则 —》通信协议：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/7dc2fafdf26997c871032c7bc7a91256.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/ae2d4c32ffafe3daac392da2ffcb1c5f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】TCP协议：可靠的&lt;/p&gt;
&lt;p&gt;建立连接： 三次握手&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/fc9427567eb4c9d54c08677d02e4ccfe.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;释放连接：四次挥手&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/bb485bb37ea12a870dcb3ba2799c07d9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【5】UDP协议：不可靠的&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/5e71f2ea6eb08ea6a59c1853accb6681.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;InetAddress-InetSocketAddress&#34;&gt;&lt;a href=&#34;#InetAddress-InetSocketAddress&#34; class=&#34;headerlink&#34; title=&#34;InetAddress,InetSocketAddress&#34;&gt;&lt;/a&gt;InetAddress,InetSocketAddress&lt;/h1&gt;&lt;p&gt;前情提要：File —》 封装盘符一个文件&lt;/p&gt;
&lt;p&gt;【1】InetAddress —》 封装了IP&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws UnknownHostException &amp;#123;
        //封装IP：
        //InetAddress ia = new InetAddress();不能直接创建对象，因为InetAddress()被default修饰了。
        InetAddress ia = InetAddress.getByName(&amp;quot;192.168.199.217&amp;quot;);
        System.out.println(ia);
        InetAddress ia2 = InetAddress.getByName(&amp;quot;localhost&amp;quot;);//localhost指代的是本机的ip地址
        System.out.println(ia2);
        InetAddress ia3 = InetAddress.getByName(&amp;quot;127.0.0.1&amp;quot;);//127.0.0.1指代的是本机的ip地址
        System.out.println(ia3);
        InetAddress ia4 = InetAddress.getByName(&amp;quot;LAPTOP-CRIVSRRU&amp;quot;);//封装计算机名
        System.out.println(ia4);
        InetAddress ia5 = InetAddress.getByName(&amp;quot;www.mashibing.com&amp;quot;);//封装域名
        System.out.println(ia5);

        System.out.println(ia5.getHostName());//获取域名
        System.out.println(ia5.getHostAddress());//获取ip地址
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】InetSocketAddress —》封装了IP，端口号&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        InetSocketAddress isa = new InetSocketAddress(&amp;quot;192.168.199.217&amp;quot;,8080);
        System.out.println(isa);
        System.out.println(isa.getHostName());
        System.out.println(isa.getPort());

        InetAddress ia = isa.getAddress();
        System.out.println(ia.getHostName());
        System.out.println(ia.getHostAddress());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;网络通信原理–套接字&#34;&gt;&lt;a href=&#34;#网络通信原理–套接字&#34; class=&#34;headerlink&#34; title=&#34;网络通信原理–套接字&#34;&gt;&lt;/a&gt;网络通信原理–套接字&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/62ac948054889d710868c47aea8165d8.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;基于TCP的网络编程&#34;&gt;&lt;a href=&#34;#基于TCP的网络编程&#34; class=&#34;headerlink&#34; title=&#34;基于TCP的网络编程&#34;&gt;&lt;/a&gt;基于TCP的网络编程&lt;/h2&gt;&lt;p&gt;功能：模拟网站的登录，客户端录入账号密码，然后服务器端进行验证。&lt;/p&gt;
&lt;h3 id=&#34;功能分解1：单向通信&#34;&gt;&lt;a href=&#34;#功能分解1：单向通信&#34; class=&#34;headerlink&#34; title=&#34;功能分解1：单向通信&#34;&gt;&lt;/a&gt;功能分解1：单向通信&lt;/h3&gt;&lt;p&gt;功能：客户端发送一句话到服务器：&lt;/p&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestClient &amp;#123;//客户端

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.创建套接字：指定服务器的ip和端口号：
        Socket s = new Socket(&amp;quot;192.168.199.217&amp;quot;,8888);
        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：
        OutputStream os = s.getOutputStream();
        DataOutputStream dos = new DataOutputStream(os);
        //利用这个OutputStream就可以向外发送数据了，但是没有直接发送String的方法
        //所以我们又在OutputStream外面套了一个处理流：DataOutputStream
        dos.writeUTF(&amp;quot;你好&amp;quot;);

        //3.关闭流 + 关闭网络资源：
        dos.close();
        os.close();
        s.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestServer &amp;#123;//服务器

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.创建套接字： 指定服务器的端口号
        ServerSocket ss = new ServerSocket(8888);
        //2.等着客户端发来的信息：
        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
        //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了
        //3.感受到的操作流：
        InputStream is = s.getInputStream();
        DataInputStream dis = new DataInputStream(is);

        //4.读取客户端发来的数据：
        String str = dis.readUTF();
        System.out.println(&amp;quot;客户端发来的数据为：&amp;quot;+str);

        //5.关闭流+关闭网络资源：
        dis.close();
        is.close();
        s.close();
        ss.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试：&lt;/p&gt;
&lt;p&gt;（1）先开启客户端还是先开启服务器：先开服务器，再开启客户端&lt;/p&gt;
&lt;p&gt;侧面验证：先开客户端：出错：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/8de05d3a78c633604b764ff81cf5c54c.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&#34;功能分解2：双向通信&#34;&gt;&lt;a href=&#34;#功能分解2：双向通信&#34; class=&#34;headerlink&#34; title=&#34;功能分解2：双向通信&#34;&gt;&lt;/a&gt;功能分解2：双向通信&lt;/h3&gt;&lt;p&gt;服务器端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.ServerSocket;
import java.net.Socket;

/\*\*
    \* @author : msb-zhaoss
        \*/
        public class TestServer &amp;#123;//服务器

            //这是一个main方法，是程序的入口：
            public static void main(String[] args) throws IOException &amp;#123;
                //1.创建套接字： 指定服务器的端口号
                ServerSocket ss = new ServerSocket(8888);
                //2.等着客户端发来的信息：
                Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
                //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
                //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了
                //3.感受到的操作流：
                InputStream is = s.getInputStream();
                DataInputStream dis = new DataInputStream(is);

                //4.读取客户端发来的数据：
                String str = dis.readUTF();
                System.out.println(&amp;quot;客户端发来的数据为：&amp;quot;+str);

                //向客户端输出一句话：---》操作流---》输出流
                OutputStream os = s.getOutputStream();
                DataOutputStream dos = new DataOutputStream(os);
                dos.writeUTF(&amp;quot;你好，我是服务器端，我接受到你的请求了&amp;quot;);


                //5.关闭流+关闭网络资源：
                dos.close();
                os.close();
                dis.close();
                is.close();
                s.close();
                ss.close();
            &amp;#125;
        &amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.Socket;

public class TestClient &amp;#123;//客户端

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.创建套接字：指定服务器的ip和端口号：
        Socket s = new Socket(&amp;quot;192.168.199.217&amp;quot;,8888);
        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：
        OutputStream os = s.getOutputStream();
        DataOutputStream dos = new DataOutputStream(os);
        //利用这个OutputStream就可以向外发送数据了，但是没有直接发送String的方法
        //所以我们又在OutputStream外面套了一个处理流：DataOutputStream
        dos.writeUTF(&amp;quot;你好&amp;quot;);

        //接收服务器端的回话--》利用输入流：
        InputStream is = s.getInputStream();
        DataInputStream dis = new DataInputStream(is);
        String str = dis.readUTF();
        System.out.println(&amp;quot;服务器端对我说：&amp;quot;+str);

        //3.关闭流 + 关闭网络资源：
        dis.close();
        is.close();
        dos.close();
        os.close();
        s.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：关闭防火墙&lt;/p&gt;
&lt;h3 id=&#34;功能分解3：对象流传送&#34;&gt;&lt;a href=&#34;#功能分解3：对象流传送&#34; class=&#34;headerlink&#34; title=&#34;功能分解3：对象流传送&#34;&gt;&lt;/a&gt;功能分解3：对象流传送&lt;/h3&gt;&lt;p&gt;封装的User类：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.Serializable;


public class User implements Serializable &amp;#123;
    private static final long serialVersionUID = 9050691344308365540L;
    private String name;
    private String pwd;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public String getPwd() &amp;#123;
        return pwd;
    &amp;#125;

    public void setPwd(String pwd) &amp;#123;
        this.pwd = pwd;
    &amp;#125;

    public User(String name, String pwd) &amp;#123;
        this.name = name;
        this.pwd = pwd;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.Socket;
import java.util.Scanner;

public class TestClient &amp;#123;//客户端

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        //1.创建套接字：指定服务器的ip和端口号：
        Socket s = new Socket(&amp;quot;192.168.199.217&amp;quot;,8888);

        //录入用户的账号和密码：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入您的账号：&amp;quot;);
        String name = sc.next();
        System.out.println(&amp;quot;请录入您的密码：&amp;quot;);
        String pwd = sc.next();
        //将账号和密码封装为一个User的对象：
        User user = new User(name,pwd);


        //2.对于程序员来说，向外发送数据 感受 --》利用输出流：
        OutputStream os = s.getOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(os);
        oos.writeObject(user);


        //接收服务器端的回话--》利用输入流：
        InputStream is = s.getInputStream();
        DataInputStream dis = new DataInputStream(is);
        boolean b = dis.readBoolean();
        if(b)&amp;#123;
            System.out.println(&amp;quot;恭喜，登录成功&amp;quot;);
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;对不起，登录失败&amp;quot;);
        &amp;#125;

        //3.关闭流 + 关闭网络资源：
        dis.close();
        is.close();
        oos.close();
        os.close();
        s.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;服务器：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.ServerSocket;
import java.net.Socket;


public class TestServer &amp;#123;//服务器

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException, ClassNotFoundException &amp;#123;
        //1.创建套接字： 指定服务器的端口号
        ServerSocket ss = new ServerSocket(8888);
        //2.等着客户端发来的信息：
        Socket s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
        //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
        //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了
        //3.感受到的操作流：
        InputStream is = s.getInputStream();
        ObjectInputStream ois = new ObjectInputStream(is);

        //4.读取客户端发来的数据：
        User user = (User)(ois.readObject());

        //对对象进行验证：
        boolean flag = false;
        if(user.getName().equals(&amp;quot;娜娜&amp;quot;)&amp;amp;&amp;amp;user.getPwd().equals(&amp;quot;123123&amp;quot;))&amp;#123;
            flag = true;
        &amp;#125;

        //向客户端输出结果：---》操作流---》输出流
        OutputStream os = s.getOutputStream();
        DataOutputStream dos = new DataOutputStream(os);
        dos.writeBoolean(flag);


        //5.关闭流+关闭网络资源：
        dos.close();
        os.close();
        ois.close();
        is.close();
        s.close();
        ss.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解4：加入完整的处理异常方式&#34;&gt;&lt;a href=&#34;#功能分解4：加入完整的处理异常方式&#34; class=&#34;headerlink&#34; title=&#34;功能分解4：加入完整的处理异常方式&#34;&gt;&lt;/a&gt;功能分解4：加入完整的处理异常方式&lt;/h3&gt;&lt;p&gt;服务器端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.ServerSocket;
import java.net.Socket;


public class TestServer &amp;#123;//服务器

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //1.创建套接字： 指定服务器的端口号
        ServerSocket ss = null;
        Socket s = null;
        InputStream is = null;
        ObjectInputStream ois = null;
        OutputStream os = null;
        DataOutputStream dos = null;
        try &amp;#123;
            ss = new ServerSocket(8888);
            //2.等着客户端发来的信息：
            s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
            //accept()返回值为一个Socket，这个Socket其实就是客户端的Socket
            //接到这个Socket以后，客户端和服务器才真正产生了连接，才真正可以通信了
            //3.感受到的操作流：
            is = s.getInputStream();
            ois = new ObjectInputStream(is);

            //4.读取客户端发来的数据：
            User user = (User)(ois.readObject());

            //对对象进行验证：
            boolean flag = false;
            if(user.getName().equals(&amp;quot;娜娜&amp;quot;)&amp;amp;&amp;amp;user.getPwd().equals(&amp;quot;123123&amp;quot;))&amp;#123;
                flag = true;
            &amp;#125;

            //向客户端输出结果：---》操作流---》输出流
            os = s.getOutputStream();
            dos = new DataOutputStream(os);
            dos.writeBoolean(flag);
        &amp;#125; catch (IOException \| ClassNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //5.关闭流+关闭网络资源：
            try &amp;#123;
                if(dos!=null)&amp;#123;
                    dos.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(os!=null)&amp;#123;
                    os.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(ois!=null)&amp;#123;
                    ois.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(is!=null)&amp;#123;
                    is.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(s!=null)&amp;#123;
                    s.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(ss!=null)&amp;#123;
                    ss.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;




    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;客户端：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.Socket;
import java.util.Scanner;


public class TestClient &amp;#123;//客户端

    //这是一个main方法，是程序的入口：
    public static void main(String[] args)&amp;#123;
        //1.创建套接字：指定服务器的ip和端口号：
        Socket s = null;
        OutputStream os = null;
        ObjectOutputStream oos = null;
        InputStream is = null;
        DataInputStream dis = null;
        try &amp;#123;
            s = new Socket(&amp;quot;192.168.199.217&amp;quot;,8888);
            //录入用户的账号和密码：
            Scanner sc = new Scanner(System.in);
            System.out.println(&amp;quot;请录入您的账号：&amp;quot;);
            String name = sc.next();
            System.out.println(&amp;quot;请录入您的密码：&amp;quot;);
            String pwd = sc.next();
            //将账号和密码封装为一个User的对象：
            User user = new User(name,pwd);
            //2.对于程序员来说，向外发送数据 感受 --》利用输出流：
            os = s.getOutputStream();
            oos = new ObjectOutputStream(os);
            oos.writeObject(user);
            //接收服务器端的回话--》利用输入流：
            is = s.getInputStream();
            dis = new DataInputStream(is);
            boolean b = dis.readBoolean();
            if(b)&amp;#123;
                System.out.println(&amp;quot;恭喜，登录成功&amp;quot;);
            &amp;#125;else&amp;#123;
                System.out.println(&amp;quot;对不起，登录失败&amp;quot;);
            &amp;#125;
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally&amp;#123;
            //3.关闭流 + 关闭网络资源：
            try &amp;#123;
                if(dis!=null)&amp;#123;
                    dis.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(is!=null)&amp;#123;
                    is.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(oos!=null)&amp;#123;
                    oos.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(os!=null)&amp;#123;
                    os.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(s!=null)&amp;#123;
                    s.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;




    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解5：多线程接收用户请求&#34;&gt;&lt;a href=&#34;#功能分解5：多线程接收用户请求&#34; class=&#34;headerlink&#34; title=&#34;功能分解5：多线程接收用户请求&#34;&gt;&lt;/a&gt;功能分解5：多线程接收用户请求&lt;/h3&gt;&lt;p&gt;遗留问题：服务器针对一个请求服务，之后服务器就关闭了（程序自然结束了）&lt;/p&gt;
&lt;p&gt;现在需要解决：服务器必须一直在监听 ，一直开着，等待客户端的请求&lt;/p&gt;
&lt;p&gt;在当前代码中，客户端不用动了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC14%E7%AB%A0_%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/55e902e4e9bedbb725045b7b82e8a9d8.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;更改服务器代码：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.Socket;


public class ServerThread extends Thread &amp;#123;//线程：专门处理客户端的请求
    InputStream is = null;
    ObjectInputStream ois = null;
    OutputStream os = null;
    DataOutputStream dos = null;
    Socket s = null;
    public ServerThread(Socket s)&amp;#123;
        this.s = s;
    &amp;#125;
    @Override
    public void run() &amp;#123;
        try&amp;#123;
            //2.等着客户端发来的信息：

            is = s.getInputStream();
            ois = new ObjectInputStream(is);

            //4.读取客户端发来的数据：
            User user = (User)(ois.readObject());

            //对对象进行验证：
            boolean flag = false;
            if(user.getName().equals(&amp;quot;娜娜&amp;quot;)&amp;amp;&amp;amp;user.getPwd().equals(&amp;quot;123123&amp;quot;))&amp;#123;
                flag = true;
            &amp;#125;

            //向客户端输出结果：---》操作流---》输出流
            os = s.getOutputStream();
            dos = new DataOutputStream(os);
            dos.writeBoolean(flag);
        &amp;#125;catch (IOException \| ClassNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;finally &amp;#123;
            try &amp;#123;
                if(dos!=null)&amp;#123;
                    dos.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(os!=null)&amp;#123;
                    os.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(ois!=null)&amp;#123;
                    ois.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
            try &amp;#123;
                if(is!=null)&amp;#123;
                    is.close();
                &amp;#125;
            &amp;#125; catch (IOException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.\*;
import java.net.ServerSocket;
import java.net.Socket;

public class TestServer &amp;#123;//服务器

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        System.out.println(&amp;quot;服务器启动了&amp;quot;);
        //1.创建套接字： 指定服务器的端口号
        ServerSocket ss = null;
        Socket s = null;
        int count = 0;//定义一个计数器，用来计数 客户端的请求
        try &amp;#123;
            ss = new ServerSocket(8888);
            while(true)&amp;#123;//加入死循环，服务器一直监听客户端是否发送数据
                s = ss.accept();//阻塞方法:等待接收客户端的数据，什么时候接收到数据，什么时候程序继续向下执行。
                //每次过来的客户端的请求 靠 线程处理：
                new ServerThread(s).start();
                count++;
                //输入请求的客户端的信息：
                System.out.println(&amp;quot;当前是第&amp;quot;+count+&amp;quot;个用户访问我们的服务器,对应的用户是：&amp;quot;+s.getInetAddress());
            &amp;#125;
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;基于UDP的网络编程&#34;&gt;&lt;a href=&#34;#基于UDP的网络编程&#34; class=&#34;headerlink&#34; title=&#34;基于UDP的网络编程&#34;&gt;&lt;/a&gt;基于UDP的网络编程&lt;/h2&gt;&lt;p&gt;TCP:&lt;/p&gt;
&lt;p&gt;客户端：Socket&lt;/p&gt;
&lt;p&gt;程序感受到的 使用流 ：输出流&lt;/p&gt;
&lt;p&gt;服务器端： ServerSocket —&amp;gt;Socket 程序感受到的 使用流 ：输入流&lt;/p&gt;
&lt;p&gt;（客户端和服务器端地位不平等。）&lt;/p&gt;
&lt;p&gt;UDP:&lt;/p&gt;
&lt;p&gt;发送方：DatagramSocket 发送：数据包 DatagramPacket&lt;/p&gt;
&lt;p&gt;接收方：DatagramSocket 接收：数据包 DatagramPacket&lt;/p&gt;
&lt;p&gt;（发送方和接收方的地址是平等的。）&lt;/p&gt;
&lt;p&gt;UDP案例： 完成网站的咨询聊天&lt;/p&gt;
&lt;h3 id=&#34;功能分解1：单向通信-1&#34;&gt;&lt;a href=&#34;#功能分解1：单向通信-1&#34; class=&#34;headerlink&#34; title=&#34;功能分解1：单向通信&#34;&gt;&lt;/a&gt;功能分解1：单向通信&lt;/h3&gt;&lt;p&gt;发送方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;


public class TestSend &amp;#123;//发送方：

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        System.out.println(&amp;quot;学生上线。。。&amp;quot;);
        //1.准备套接字： 指定发送方的端口号
        DatagramSocket ds = new DatagramSocket(8888);
        //2.准备数据包
        String str = &amp;quot;你好&amp;quot;;
        byte[] bytes = str.getBytes();
        /\*
            需要四个参数：
            1.指的是传送数据转为字节数组
            2.字节数组的长度
            3.封装接收方的ip
            4.指定接收方的端口号
            \*/
            DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),9999);
        //发送：
        ds.send(dp);

        //关闭资源
        ds.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接收方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;


public class TestReceive &amp;#123;//接收方

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        System.out.println(&amp;quot;老师上线了。。&amp;quot;);
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = new DatagramSocket(9999);
        //2.有一个空的数据包，打算用来接收 对方传过来的数据包：
        byte[] b = new byte[1024];
        DatagramPacket dp = new DatagramPacket(b,b.length);
        //3.接收对方的数据包，然后放入我们的dp数据包中填充
        ds.receive(dp);//接收完以后 dp里面就填充好内容了

        //4.取出数据：
        byte[] data = dp.getData();
        String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度
        System.out.println(&amp;quot;学生对我说：&amp;quot;+s);

        //5.关闭资源：
        ds.close();


    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;-1&#34;&gt;&lt;a href=&#34;#-1&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h3 id=&#34;功能分解2：双向通信-1&#34;&gt;&lt;a href=&#34;#功能分解2：双向通信-1&#34; class=&#34;headerlink&#34; title=&#34;功能分解2：双向通信&#34;&gt;&lt;/a&gt;功能分解2：双向通信&lt;/h3&gt;&lt;p&gt;发送方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;

public class TestSend &amp;#123;//发送方：

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        System.out.println(&amp;quot;学生上线。。。&amp;quot;);
        //1.准备套接字： 指定发送方的端口号
        DatagramSocket ds = new DatagramSocket(8888);
        //2.准备数据包
        Scanner sc = new Scanner(System.in);
        System.out.print(&amp;quot;学生：&amp;quot;);
        String str = sc.next();
        byte[] bytes = str.getBytes();
        /\*
            需要四个参数：
            1.指的是传送数据转为Z字节数组
            2.字节数组的长度
            3.封装接收方的ip
            4.指定接收方的端口号
            \*/
            DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),9999);
        //发送：
        ds.send(dp);

        //接收老师发送回来的信息：
        byte[] b = new byte[1024];
        DatagramPacket dp2 = new DatagramPacket(b,b.length);
        ds.receive(dp2);//接收完以后 dp2里面就填充好内容了

        //取出数据：
        byte[] data = dp2.getData();
        String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度
        System.out.println(&amp;quot;老师对我说：&amp;quot;+s);

        //关闭资源
        ds.close();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接收方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.Scanner;


public class TestReceive &amp;#123;//接收方

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws IOException &amp;#123;
        System.out.println(&amp;quot;老师上线了。。&amp;quot;);
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = new DatagramSocket(9999);
        //2.有一个空的数据包，打算用来接收 对方传过来的数据包：
        byte[] b = new byte[1024];
        DatagramPacket dp = new DatagramPacket(b,b.length);
        //3.接收对方的数据包，然后放入我们的dp数据包中填充
        ds.receive(dp);//接收完以后 dp里面就填充好内容了

        //4.取出数据：
        byte[] data = dp.getData();
        String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度
        System.out.println(&amp;quot;学生对我说：&amp;quot;+s);

        //老师进行回复：
        Scanner sc = new Scanner(System.in);
        System.out.print(&amp;quot;老师：&amp;quot;);
        String str = sc.next();
        byte[] bytes = str.getBytes();
        //封装数据，并且指定学生的ip和端口号
        DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),8888);
        //发送：
        ds.send(dp2);
        //5.关闭资源：
        ds.close();


    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解3：加入完整的处理异常方式&#34;&gt;&lt;a href=&#34;#功能分解3：加入完整的处理异常方式&#34; class=&#34;headerlink&#34; title=&#34;功能分解3：加入完整的处理异常方式&#34;&gt;&lt;/a&gt;功能分解3：加入完整的处理异常方式&lt;/h3&gt;&lt;p&gt;发送方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;


public class TestSend &amp;#123;//发送方：

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        System.out.println(&amp;quot;学生上线。。。&amp;quot;);
        //1.准备套接字： 指定发送方的端口号
        DatagramSocket ds = null;
        try &amp;#123;
            ds = new DatagramSocket(8888);
            //2.准备数据包
            Scanner sc = new Scanner(System.in);
            System.out.print(&amp;quot;学生：&amp;quot;);
            String str = sc.next();
            byte[] bytes = str.getBytes();
            /\*
                需要四个参数：
                1.指的是传送数据转为Z字节数组
                2.字节数组的长度
                3.封装接收方的ip
                4.指定接收方的端口号
                \*/
                DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),9999);
            //发送：
            ds.send(dp);

            //接收老师发送回来的信息：
            byte[] b = new byte[1024];
            DatagramPacket dp2 = new DatagramPacket(b,b.length);
            ds.receive(dp2);//接收完以后 dp2里面就填充好内容了

            //取出数据：
            byte[] data = dp2.getData();
            String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度
            System.out.println(&amp;quot;老师对我说：&amp;quot;+s);
        &amp;#125; catch (SocketException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (UnknownHostException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //关闭资源
            ds.close();
        &amp;#125;



    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接收方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;

public class TestReceive &amp;#123;//接收方

    //这是一个main方法，是程序的入口：
    public static void main(String[] args)&amp;#123;
        System.out.println(&amp;quot;老师上线了。。&amp;quot;);
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = null;
        try &amp;#123;
            ds = new DatagramSocket(9999);
            //2.有一个空的数据包，打算用来接收 对方传过来的数据包：
            byte[] b = new byte[1024];
            DatagramPacket dp = new DatagramPacket(b,b.length);
            //3.接收对方的数据包，然后放入我们的dp数据包中填充
            ds.receive(dp);//接收完以后 dp里面就填充好内容了

            //4.取出数据：
            byte[] data = dp.getData();
            String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度
            System.out.println(&amp;quot;学生对我说：&amp;quot;+s);

            //老师进行回复：
            Scanner sc = new Scanner(System.in);
            System.out.print(&amp;quot;老师：&amp;quot;);
            String str = sc.next();
            byte[] bytes = str.getBytes();
            //封装数据，并且指定学生的ip和端口号
            DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),8888);
            //发送：
            ds.send(dp2);
        &amp;#125; catch (SocketException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (UnknownHostException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //5.关闭资源：
            ds.close();
        &amp;#125;




    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;功能分解4：正常通信&#34;&gt;&lt;a href=&#34;#功能分解4：正常通信&#34; class=&#34;headerlink&#34; title=&#34;功能分解4：正常通信&#34;&gt;&lt;/a&gt;功能分解4：正常通信&lt;/h3&gt;&lt;p&gt;发送方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;

public class TestSend &amp;#123;//发送方：

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        System.out.println(&amp;quot;学生上线。。。&amp;quot;);
        //1.准备套接字： 指定发送方的端口号
        DatagramSocket ds = null;
        try &amp;#123;
            ds = new DatagramSocket(8888);
            while(true)&amp;#123;
                //2.准备数据包
                Scanner sc = new Scanner(System.in);
                System.out.print(&amp;quot;学生：&amp;quot;);
                String str = sc.next();

                byte[] bytes = str.getBytes();
                /\*
                    需要四个参数：
                    1.指的是传送数据转为Z字节数组
                    2.字节数组的长度
                    3.封装接收方的ip
                    4.指定接收方的端口号
                    \*/
                    DatagramPacket dp = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),9999);
                //发送：
                ds.send(dp);
                if(str.equals(&amp;quot;byebye&amp;quot;))&amp;#123;
                    System.out.println(&amp;quot;学生下线。。&amp;quot;);
                    break;
                &amp;#125;
                //接收老师发送回来的信息：
                byte[] b = new byte[1024];
                DatagramPacket dp2 = new DatagramPacket(b,b.length);
                ds.receive(dp2);//接收完以后 dp2里面就填充好内容了

                //取出数据：
                byte[] data = dp2.getData();
                String s = new String(data,0,dp2.getLength());//dp.getLength()数组包中的有效长度
                System.out.println(&amp;quot;老师对我说：&amp;quot;+s);
            &amp;#125;
        &amp;#125; catch (SocketException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (UnknownHostException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //关闭资源
            ds.close();
        &amp;#125;



    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接收方：&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.io.IOException;
import java.net.\*;
import java.util.Scanner;


public class TestReceive &amp;#123;//接收方

    //这是一个main方法，是程序的入口：
    public static void main(String[] args)&amp;#123;
        System.out.println(&amp;quot;老师上线了。。&amp;quot;);
        //1.创建套接字：指定接收方的端口
        DatagramSocket ds = null;
        try &amp;#123;
            ds = new DatagramSocket(9999);
            while(true)&amp;#123;
                //2.有一个空的数据包，打算用来接收 对方传过来的数据包：
                byte[] b = new byte[1024];
                DatagramPacket dp = new DatagramPacket(b,b.length);
                //3.接收对方的数据包，然后放入我们的dp数据包中填充
                ds.receive(dp);//接收完以后 dp里面就填充好内容了

                //4.取出数据：
                byte[] data = dp.getData();
                String s = new String(data,0,dp.getLength());//dp.getLength()数组包中的有效长度
                System.out.println(&amp;quot;学生对我说：&amp;quot;+s);
                if(s.equals(&amp;quot;byebye&amp;quot;))&amp;#123;
                    System.out.println(&amp;quot;学生已经下线了，老师也下线。。。&amp;quot;);
                    break;
                &amp;#125;

                //老师进行回复：
                Scanner sc = new Scanner(System.in);
                System.out.print(&amp;quot;老师：&amp;quot;);
                String str = sc.next();
                byte[] bytes = str.getBytes();
                //封装数据，并且指定学生的ip和端口号
                DatagramPacket dp2 = new DatagramPacket(bytes,bytes.length, InetAddress.getByName(&amp;quot;localhost&amp;quot;),8888);
                //发送：
                ds.send(dp2);
            &amp;#125;
        &amp;#125; catch (SocketException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (UnknownHostException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125; finally &amp;#123;
            //5.关闭资源：
            ds.close();
        &amp;#125;




    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/</id>
        <title>第15章Junit注解_枚举</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/"/>
        <content type="html">&lt;h1 id=&#34;第15章-Junit-注解-枚举&#34;&gt;&lt;a href=&#34;#第15章-Junit-注解-枚举&#34; class=&#34;headerlink&#34; title=&#34;第15章_Junit_注解_枚举&#34;&gt;&lt;/a&gt;第15章_Junit_注解_枚举&lt;/h1&gt;&lt;h1 id=&#34;Junit单元测试&#34;&gt;&lt;a href=&#34;#Junit单元测试&#34; class=&#34;headerlink&#34; title=&#34;Junit单元测试&#34;&gt;&lt;/a&gt;Junit单元测试&lt;/h1&gt;&lt;h2 id=&#34;引入&#34;&gt;&lt;a href=&#34;#引入&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;【1】软件测试的目的：&lt;/p&gt;
&lt;p&gt;软件测试的目的是在规定的条件下对程序进行操作,以发现程序错误,衡量软件质量,并对其是否能满足设计要求进行评估的过程。&lt;/p&gt;
&lt;p&gt;【2】测试分类：&lt;/p&gt;
&lt;p&gt;（1）黑盒测试：&lt;/p&gt;
&lt;p&gt;软件的黑盒测试意味着测试要在软件的接口处进行。这种方法是把测试对象看做一个黑盒子,测试人员完全不考虑程序内部的逻辑结构和内部特性,只依据程序的需求规格说明书,检查程序的功能是否符合它的功能说明。因此黑盒测试又叫功能测试。&lt;/p&gt;
&lt;p&gt;（2）白盒测试：—》Junit属于白盒测试。&lt;/p&gt;
&lt;p&gt;软件的白盒测试是对软件的过程性细节做细致的检查。这种方法是把测试对象看做一个打开的盒子,它允许测试人员利用程序内部的逻辑结构及有关信息,设计或选择测试用例,对程序的所有逻辑路径进行测试,通过在不同点检查程序状态,确定实际状态是否与预期的状态一致。因此白盒测试又称为结构测试。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/42a7ac6afb1bc65c1526524fb22c0cf6.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;没有Junit的情况下如何测试&#34;&gt;&lt;a href=&#34;#没有Junit的情况下如何测试&#34; class=&#34;headerlink&#34; title=&#34;没有Junit的情况下如何测试&#34;&gt;&lt;/a&gt;没有Junit的情况下如何测试&lt;/h2&gt;&lt;p&gt;在没有使用Junit的时候，缺点：&lt;/p&gt;
&lt;p&gt;（1）测试一定走main方法，是程序的入口，main方法的格式必须不能写错。&lt;/p&gt;
&lt;p&gt;（2）要是在同一个main方法中测试的话，那么不需要测试的东西必须注释掉。&lt;/p&gt;
&lt;p&gt;（3）测试逻辑如果分开的话，需要定义多个测试类，麻烦。&lt;/p&gt;
&lt;p&gt;（4）业务逻辑和测试代码，都混淆了。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Calculator &amp;#123;
    //加法：
    public int add(int a,int b)&amp;#123;
        return a+b;
    &amp;#125;

    //减法：
    public int sub(int a,int b)&amp;#123;
        return a-b;
    &amp;#125;
&amp;#125;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //测试加法：
        Calculator cal = new Calculator();
        int result = cal.add(10, 20);
        System.out.println(result);
        //测试减法：
        /\* int result = cal.sub(30, 10);
        System.out.println(result);\*/
    &amp;#125;
&amp;#125;
public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Calculator cal = new Calculator();
        //测试减法：
        int result = cal.sub(30, 10);
        System.out.println(result);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Junit的使用&#34;&gt;&lt;a href=&#34;#Junit的使用&#34; class=&#34;headerlink&#34; title=&#34;Junit的使用&#34;&gt;&lt;/a&gt;Junit的使用&lt;/h2&gt;&lt;p&gt;【1】一般测试和业务做一个分离，分离为不同的包：&lt;/p&gt;
&lt;p&gt;建议起名：公司域名倒着写+test&lt;/p&gt;
&lt;p&gt;以后测试类就单独放在这个包下&lt;/p&gt;
&lt;p&gt;【2】测试类的名字：****Test —&amp;gt;见名知意&lt;/p&gt;
&lt;p&gt;【3】测试方法的定义–》这个方法可以独立运行，不依托于main方法&lt;/p&gt;
&lt;p&gt;建议：&lt;/p&gt;
&lt;p&gt;名字：testAdd() testSub() 见名知意&lt;/p&gt;
&lt;p&gt;参数：无参&lt;/p&gt;
&lt;p&gt;返回值：void&lt;/p&gt;
&lt;p&gt;【4】测试方法定义完以后，不能直接就独立运行了，必须要在方法前加入一个注解： @Test&lt;/p&gt;
&lt;p&gt;【5】导入Junit的依赖的环境：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/46fb99bb996eae46795d2c8db94485f6.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【6】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CalculatorTest &amp;#123;
    //测试add方法
    @Test
    public void testAdd()&amp;#123;
        System.out.println(&amp;quot;测试add方法&amp;quot;);
        Calculator cal = new Calculator();
        int result = cal.add(10, 30);
        System.out.println(result);
    &amp;#125;

    //测试sub方法
    @Test
    public void testSub()&amp;#123;
        System.out.println(&amp;quot;测试sub方法&amp;quot;);
        Calculator cal = new Calculator();
        int result = cal.sub(10, 30);
        System.out.println(result);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【7】判定结果：&lt;/p&gt;
&lt;p&gt;绿色：正常结果&lt;/p&gt;
&lt;p&gt;红色：出现异常&lt;/p&gt;
&lt;p&gt;【8】即使出现绿色效果，也不意味着你的测试就通过了，因为代码中逻辑也可能出现问题，这种情况怎么解决呢？&lt;/p&gt;
&lt;p&gt;加入断言&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CalculatorTest &amp;#123;
    //测试add方法
    @Test
    public void testAdd()&amp;#123;
        System.out.println(&amp;quot;测试add方法&amp;quot;);
        Calculator cal = new Calculator();
        int result = cal.add(10, 30);
        //System.out.println(result);--》程序的运行结果可以不关注
        //加入断言：预测一下结果，判断一下我预测的结果和 实际的结果是否一致：
        Assert.assertEquals(40,result);//第一个参数：预测结果 第二个参数：实际结果
    &amp;#125;

    //测试sub方法
    @Test
    public void testSub()&amp;#123;
        System.out.println(&amp;quot;测试sub方法&amp;quot;);
        Calculator cal = new Calculator();
        int result = cal.sub(10, 30);
        System.out.println(result);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/f28545eda706a96a1dc81a62bd94b0b6.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;Before-After&#34;&gt;&lt;a href=&#34;#Before-After&#34; class=&#34;headerlink&#34; title=&#34;@Before_@After&#34;&gt;&lt;/a&gt;@Before_@After&lt;/h2&gt;&lt;p&gt;@Before:&lt;/p&gt;
&lt;p&gt;某一个方法中，加入了@Before注解以后，那么这个方法中的功能会在测试方法执行前先执行&lt;/p&gt;
&lt;p&gt;一般会在@Beforer修饰的那个方法中加入：加入一些申请资源的代码：申请数据库资源，申请IO资源，申请网络资源。。。&lt;/p&gt;
&lt;p&gt;@After:&lt;/p&gt;
&lt;p&gt;某一个方法中，加入了@After注解以后，那么这个方法中的功能会在测试方法执行后先执行&lt;/p&gt;
&lt;p&gt;一般会在@After修饰的那个方法中加入：加入释放资源的代码：释放数据库资源，释放IO资源，释放网络资源。。。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class CalculatorTest &amp;#123;
    @Before
    public void init()&amp;#123;
        System.out.println(&amp;quot;方法执行开始了。。。&amp;quot;);
    &amp;#125;
    @After
    public void close()&amp;#123;
        System.out.println(&amp;quot;方法执行结束了。。。&amp;quot;);
    &amp;#125;
    //测试add方法
    @Test
    public void testAdd()&amp;#123;
        System.out.println(&amp;quot;测试add方法&amp;quot;);
        Calculator cal = new Calculator();
        int result = cal.add(10, 30);
        //System.out.println(result);--》程序的运行结果可以不关注
        //加入断言：预测一下结果，判断一下我预测的结果和 实际的结果是否一致：
        Assert.assertEquals(40,result);//第一个参数：预测结果 第二个参数：实际结果
    &amp;#125;

    //测试sub方法
    @Test
    public void testSub()&amp;#123;
        System.out.println(&amp;quot;测试sub方法&amp;quot;);
        Calculator cal = new Calculator();
        int result = cal.sub(10, 30);
        System.out.println(result);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;注解&#34;&gt;&lt;a href=&#34;#注解&#34; class=&#34;headerlink&#34; title=&#34;注解&#34;&gt;&lt;/a&gt;注解&lt;/h1&gt;&lt;h2 id=&#34;引入-1&#34;&gt;&lt;a href=&#34;#引入-1&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;【1】历史：&lt;/p&gt;
&lt;p&gt;JDK5.0 新增 — 注解（Annotation）,也叫元数据&lt;/p&gt;
&lt;p&gt;【2】什么是注解？&lt;/p&gt;
&lt;p&gt;注解其实就是代码里的特殊标记，这些标记可以在编译,类加载,运行时被读取,并执行相应的处理。通过使用注解,程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。代码分析工具、开发工具和部署工具可以通过这些补充信息进行验证或者进行部署。&lt;/p&gt;
&lt;p&gt;使用注解时要在其前面增加@符号,并把该注解当成一个修饰符使用。用于修饰它支持的程序元素。&lt;/p&gt;
&lt;p&gt;【3】注解的重要性：&lt;/p&gt;
&lt;p&gt;Annotation 可以像修饰符一样被使用，可用于修饰包，类，构造器,方法，成员变量,参数，局部变量的声明，这些信息被保存在Annotation的”name&amp;#x3D;value”对中。在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在JavaEE&amp;#x2F;ArIdroid中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。未来的开发模式都是基于注解的，JPA(java的持久化API)是基于注解的，Spring2.5以. E都是基于注解的，Hibernate3.x以后也是基于注解的，现在的Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说 ：框架&amp;#x3D;注解+反射+设计模式。&lt;/p&gt;
&lt;h2 id=&#34;注解的使用实例&#34;&gt;&lt;a href=&#34;#注解的使用实例&#34; class=&#34;headerlink&#34; title=&#34;注解的使用实例&#34;&gt;&lt;/a&gt;注解的使用实例&lt;/h2&gt;&lt;h3 id=&#34;Junit的注解&#34;&gt;&lt;a href=&#34;#Junit的注解&#34; class=&#34;headerlink&#34; title=&#34;Junit的注解&#34;&gt;&lt;/a&gt;Junit的注解&lt;/h3&gt;&lt;p&gt;@Test&lt;/p&gt;
&lt;p&gt;@Before&lt;/p&gt;
&lt;p&gt;@After&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;

 public class CalculatorTest &amp;#123;
 @Before
 public void init()&amp;#123;
 System.out.println(&amp;quot;方法执行开始了。。。&amp;quot;);
 &amp;#125;
 @After
 public void close()&amp;#123;
 System.out.println(&amp;quot;方法执行结束了。。。&amp;quot;);
 &amp;#125;
 @Test
 public void testAdd()&amp;#123;
 System.out.println(&amp;quot;测试add方法&amp;quot;);
 Calculator cal = new Calculator();
 int result = cal.add(10, 30);
 Assert.assertEquals(40,result);//第一个参数：预测结果 第二个参数：实际结果
 &amp;#125;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;文档相关的注解&#34;&gt;&lt;a href=&#34;#文档相关的注解&#34; class=&#34;headerlink&#34; title=&#34;文档相关的注解&#34;&gt;&lt;/a&gt;文档相关的注解&lt;/h3&gt;&lt;p&gt;说明注释允许你在程序中嵌入关于程序的信息。你可以使用 javadoc 工具软件来生成信息，并输出到HTML文件中。&lt;/p&gt;
&lt;p&gt;说明注释，使你更加方便的记录你的程序信息。&lt;/p&gt;
&lt;p&gt;文档注解我们一般使用在文档注释中，配合javadoc工具&lt;/p&gt;
&lt;p&gt;javadoc 工具软件识别以下标签：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/23874004c970e81a5f5e4f59177c0a6f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;其中注意：&lt;/p&gt;
&lt;p&gt;Ø @param @return和@exception这三个标记都是只用于方法的。&lt;/p&gt;
&lt;p&gt;Ø @param的格式要求: @param 形参名 形参类型 形参说明&lt;/p&gt;
&lt;p&gt;Ø @return的格式要求: @return 返回值类型返回值说明，如果方法的返回值类型是void就不能写&lt;/p&gt;
&lt;p&gt;Ø @exception的格式要求: @exception 异常类型异常说明&lt;/p&gt;
&lt;p&gt;Ø @param和@exception可以并列多个&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    /**
 * 下面是eat方法，实现了XXX功能。
 * @param num1 就餐人数
 * @param num2 点了几个菜
 */
    public void eat(int num1,int num2)&amp;#123;

    &amp;#125;

    /\*\*
        \* @param age 年龄
        \* @return int
        \* @exception RuntimeException 当年龄过大的时候
        \* @exception IndexOutOfBoundsException 当年龄过小的时候
        \* @see Student
        \*/
        public int sleep(int age)&amp;#123;
        new Student();
        if(age\&amp;gt;100)&amp;#123;
            throw new RuntimeException();
        &amp;#125;
        if(age\&amp;lt;0)&amp;#123;
            throw new IndexOutOfBoundsException();
        &amp;#125;
        return 10;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;IDEA中的javadoc使用：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/1887cd6739c2f89c5a4ef2d33ec03b55.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;防止乱码：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/7fe5daf476aadfa53d22106b5979d514.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/010eb501804b4f0f6a550a3a3c8617a2.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;JDK内置的3个注解&#34;&gt;&lt;a href=&#34;#JDK内置的3个注解&#34; class=&#34;headerlink&#34; title=&#34;JDK内置的3个注解&#34;&gt;&lt;/a&gt;JDK内置的3个注解&lt;/h3&gt;&lt;p&gt;@Override:限定重写父类方法，该注解只能用于方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| ———————————————————— |&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;@Deprecated:用于表示所修饰的元素(类,方法，构造器，属性等)已过时。通常是因为所修饰的结构危险或存在更好的选择&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student extends Person &amp;#123;
    /\*
        @Override的作用：限定重写的方法，只要重写方法有问题，就有错误提示。
        \*/
        @Override
        public void eat()&amp;#123;
        System.out.println(&amp;quot;子类eat..&amp;quot;);
    &amp;#125;
    /\*
        在方法前加入@Deprecated，这个方法就会变成一个废弃方法/过期方法/过时方法
        \*/

        @Deprecated
        public void study()&amp;#123;
        System.out.println(&amp;quot;学习。。&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/e87bd738286630379a4436ddeb991a7f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;@SuppressWarnings:抑制编译器警告&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        @SuppressWarnings(&amp;quot;unused&amp;quot;)
        int age = 10;

        int num = 10;
        System.out.println(num);
        @SuppressWarnings(&amp;#123;&amp;quot;unused&amp;quot;,&amp;quot;rwatypes&amp;quot;&amp;#125;)
        ArrayList al = new ArrayList();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;实现替代配置文件功能的注解&#34;&gt;&lt;a href=&#34;#实现替代配置文件功能的注解&#34; class=&#34;headerlink&#34; title=&#34;实现替代配置文件功能的注解&#34;&gt;&lt;/a&gt;实现替代配置文件功能的注解&lt;/h3&gt;&lt;p&gt;在servlet3.0之前的配置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&amp;lt;?xml version&amp;#x3D;”1.0” encoding&amp;#x3D;”UTF-8”?&amp;gt;  &amp;lt;web-app xmlns&amp;#x3D;”&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3htbG5zLmpjcC5vcmcveG1sL25zL2phdmFlZSZxdW90Ow==&#34;&gt;http://xmlns.jcp.org/xml/ns/javaee&amp;quot;&lt;/span&gt;   xmlns:xsi&amp;#x3D;”&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UmcXVvdDs=&#34;&gt;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;   xsi:schemaLocation&amp;#x3D;”&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3htbG5zLmpjcC5vcmcveG1sL25zL2phdmFlZQ==&#34;&gt;http://xmlns.jcp.org/xml/ns/javaee&lt;/span&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3htbG5zLmpjcC5vcmcveG1sL25zL2phdmFlZS93ZWItYXBwXzRfMC54c2QmcXVvdDs=&#34;&gt;http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&amp;quot;&lt;/span&gt;   version&amp;#x3D;”4.0”&amp;gt;   &amp;lt;!–配置Servlet–&amp;gt;   &amp;lt;!–配置Servlet的信息–&amp;gt;   &amp;lt;servlet&amp;gt;   &amp;lt;servlet-name&amp;gt;HelloServlet&amp;lt;&amp;#x2F;servlet-name&amp;gt;   &amp;lt;servlet-class&amp;gt;com.bjsxt.servlet.HelloServlet&amp;lt;&amp;#x2F;servlet-class&amp;gt;   &amp;lt;&amp;#x2F;servlet&amp;gt;   &amp;lt;!–配置Servlet的映射路径–&amp;gt;   &amp;lt;servlet-mapping&amp;gt;   &amp;lt;servlet-name&amp;gt;HelloServlet&amp;lt;&amp;#x2F;servlet-name&amp;gt;   &amp;lt;!–&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwLzAxLWhlbGxvLXNlcnZsZXQvaGVsbG8tLS8mZ3Q7&#34;&gt;http://localhost:8080/01-hello-servlet/hello--\&amp;gt;&lt;/span&gt;   &amp;lt;url-pattern&amp;gt;&amp;#x2F;hello&amp;lt;&amp;#x2F;url-pattern&amp;gt;   &amp;lt;&amp;#x2F;servlet-mapping&amp;gt;  &amp;lt;&amp;#x2F;web-app&amp;gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;在servlet3.0之后使用注解：替代配置文件。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;|——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————–|&lt;/p&gt;
&lt;h2 id=&#34;自定义注解&#34;&gt;&lt;a href=&#34;#自定义注解&#34; class=&#34;headerlink&#34; title=&#34;自定义注解&#34;&gt;&lt;/a&gt;自定义注解&lt;/h2&gt;&lt;p&gt;【1】自定义注解使用很少，一般情况下都是用现成的注解。&lt;/p&gt;
&lt;p&gt;【2】如何自定义注解：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/4b5d48a592cbac3d289f687d5e9ec1e7.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/1f30647690be446463b91286618f3176.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;发现定义的注解的声明使用的关键字：&lt;span class=&#34;exturl&#34; data-url=&#34;ZmlsZTovLy9EOlzkuIvovb1AaW50ZXJmYWNl&#34;&gt;@interface&lt;/span&gt;，跟接口没有一点关系。&lt;/p&gt;
&lt;p&gt;【3】注解的内部：&lt;/p&gt;
&lt;p&gt;以&lt;span class=&#34;exturl&#34; data-url=&#34;ZmlsZTovLy9EOlzkuIvovb1AU3VwcHJlc3NXYXJuaW5ncw==&#34;&gt;@SuppressWarnings&lt;/span&gt;为例，发现内部：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/258a1b996f98d74fa67f5511b0957b01.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;这value是属性还是方法？&lt;/p&gt;
&lt;p&gt;答案：看上去是无参数方法，实际上理解为一个成员变量，一个属性&lt;/p&gt;
&lt;p&gt;无参数方法名字–》成员变量的名字&lt;/p&gt;
&lt;p&gt;无参数方法的返回值–》成员变量的类型&lt;/p&gt;
&lt;p&gt;这个参数叫 配置参数&lt;/p&gt;
&lt;p&gt;无参数方法的类型：基本数据类型（八种），String，枚举，注解类型，还可以是以上类型对应的数组。&lt;/p&gt;
&lt;p&gt;PS：注意：如果只有一个成员变量的话，名字尽量叫value。&lt;/p&gt;
&lt;p&gt;【4】使用注解：&lt;/p&gt;
&lt;p&gt;（1）使用注解的话，如果你定义了配置参数，就必须给配置参数进行赋值操作：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@MyAnnotation(value=&amp;#123;&amp;quot;abc&amp;quot;,&amp;quot;def&amp;quot;,&amp;quot;hij&amp;quot;&amp;#125;)
public class Person &amp;#123;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）如果只有一个参数，并且这个参数的名字为value的话，那么value&amp;#x3D;可以省略不写。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@MyAnnotation(&amp;#123;&amp;quot;abc&amp;quot;,&amp;quot;def&amp;quot;,&amp;quot;hij&amp;quot;&amp;#125;)
public class Person &amp;#123;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（3）如果你给配置参数设置默认的值了，那么使用的时候可以无需传值：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;public @interface MyAnnotation2 {&lt;/li&gt;
&lt;li&gt;String value() default “abc”;&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@MyAnnotation2
@MyAnnotation(&amp;#123;&amp;quot;abc&amp;quot;,&amp;quot;def&amp;quot;,&amp;quot;hij&amp;quot;&amp;#125;)
public class Person &amp;#123;
    
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（4）一个注解的内部是可以不定义配置参数的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;  public @interface MyAnnotation3 &amp;#123;
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内部没有定义配置参数的注解–》可以叫做标记&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/5a3c24803c3f8ed92d3272ac78b52ce7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;内部定义配置参数的注解–》元数据&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/0f6376fb4928988abc36de912ae6e857.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【5】注解的使用：&lt;/p&gt;
&lt;p&gt;现在只学习注解的大致技能点，具体怎么应用 后面慢慢学习。&lt;/p&gt;
&lt;h2 id=&#34;元注解&#34;&gt;&lt;a href=&#34;#元注解&#34; class=&#34;headerlink&#34; title=&#34;元注解&#34;&gt;&lt;/a&gt;元注解&lt;/h2&gt;&lt;p&gt;元注解是用于修饰其它注解的注解。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/34f66e3c7b9665d0d116172ef2d023e3.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;JDK5.0提供了四种元注解：Retention, Target, Documented, Inherited&lt;/p&gt;
&lt;h3 id=&#34;Retention&#34;&gt;&lt;a href=&#34;#Retention&#34; class=&#34;headerlink&#34; title=&#34;Retention&#34;&gt;&lt;/a&gt;Retention&lt;/h3&gt;&lt;p&gt;@Retention:用于修饰注解，用于指定修饰的那个注解的生命周期，@Rentention包含一个RetentionPolicy枚举类型的成员变量,使用@Rentention时必须为该value成员变量指定值:&lt;/p&gt;
&lt;p&gt;➢RetentionPolicy.SOURCE:在源文件中有效(即源文件保留),编译器直接丢弃这种策略的注释，在.class文件中不会保留注解信息&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/d3e2e82ebd228e73e7c31cc574e94c62.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/4d2c3bc743b41c72b97faabb8603e63d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;反编译查看字节码文件：发现字节码文件中没有MyAnnotation这个注解：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/ef82a6553de8c7049479945ca1d4435e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;➢RetentionPolicy.CLASS:在class文件中有效(即class保留)，保留在.class文件中，但是当运行Java程序时，他就不会继续加载了，不会保留在内存中，JVM不会保留注解。如果注解没有加Retention元注解，那么相当于默认的注解就是这种状态。&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/f23af522879c92eb18b5b6a6de68eb92.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/b6d188929cf9db1376241c79683d1e86.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;反编译看字节码文件，字节码文件中带有MyAnnotation注解：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/ce86fb17bc2a2f453556cdbac9a35524.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;➢RetentionPolicy.RUNTIME:在运行时有效(即运行时保留),当运行 Java程序时，JVM会保留注释，加载在内存中了，那么程序可以通过反射获取该注释。&lt;/p&gt;
&lt;h3 id=&#34;Target&#34;&gt;&lt;a href=&#34;#Target&#34; class=&#34;headerlink&#34; title=&#34;Target&#34;&gt;&lt;/a&gt;Target&lt;/h3&gt;&lt;p&gt;用于修饰注解的注解，用于指定被修饰的注解能用于修饰哪些程序元素。@Target也包含一个名为value的成员变量。&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Target(&amp;#123;TYPE,CONSTRUCTOR,METHOD&amp;#125;)
public @interface MyAnnotation4 &amp;#123;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/f7fc8775a65c517683db05e1714142d4.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;Documented（很少）&#34;&gt;&lt;a href=&#34;#Documented（很少）&#34; class=&#34;headerlink&#34; title=&#34;Documented（很少）&#34;&gt;&lt;/a&gt;Documented（很少）&lt;/h3&gt;&lt;p&gt;用于指定被该元注解修饰的注解类将被javadoc工具提取成文档。默认情况下，javadoc是 不包括注解的，但是加上了这个注解生成的文档中就会带着注解了&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;如果：Documented注解修饰了Deprecated注解，&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/2c2e47e5817fc9dce848588c74c99fca.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;那么Deprecated注解就会在javadoc提取的时候，提取到API中：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/eaffd4880e967c3b2924741f4ce2213c.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;Inherited（极少）&#34;&gt;&lt;a href=&#34;#Inherited（极少）&#34; class=&#34;headerlink&#34; title=&#34;Inherited（极少）&#34;&gt;&lt;/a&gt;Inherited（极少）&lt;/h3&gt;&lt;p&gt;被它修饰的Annotation将具有继承性。如果某个类使用了被&lt;/p&gt;
&lt;p&gt;@Inherited修饰的Annotation,则其子类将自动具有该注解。&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;注解：如果MyAnno注解使用了@Inherited之后，就具备了继承性，那么相当于子类Student也使用了这个MyAnno&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/30e71681fd1e8664b949a536691dc82f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;父类：  &lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/2a385f34e462174022fc8abb73112b4f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;子类：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/0f863775e4fc46e421d2a5189572c538.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;枚举&#34;&gt;&lt;a href=&#34;#枚举&#34; class=&#34;headerlink&#34; title=&#34;枚举&#34;&gt;&lt;/a&gt;枚举&lt;/h1&gt;&lt;h2 id=&#34;引入-2&#34;&gt;&lt;a href=&#34;#引入-2&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;p&gt;【1】数学：枚举法：&lt;/p&gt;
&lt;p&gt;1&amp;lt;x&amp;lt;4&lt;/p&gt;
&lt;p&gt;2&amp;lt;y&amp;lt;5&lt;/p&gt;
&lt;p&gt;求x+y&amp;#x3D;6&lt;/p&gt;
&lt;p&gt;枚举法：一枚一枚的列举出来。前提：有限，确定&lt;/p&gt;
&lt;p&gt;【2】在java中，类的对象是有限个，确定的。这个类我们可以定义为枚举类。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;星期：一二三四五六日&lt;/p&gt;
&lt;p&gt;性别：男女&lt;/p&gt;
&lt;p&gt;季节：春夏秋冬&lt;/p&gt;
&lt;p&gt;【3】自定义枚举类：（JDK1.5之前自定义枚举类）&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;**&lt;/li&gt;
&lt;li&gt;* @author : msb-zhaoss&lt;/li&gt;
&lt;li&gt;* 定义枚举类：季节&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Season &amp;#123;
    //属性：
    private final String seasonName ;//季节名字
    private final String seasonDesc ;//季节描述
    //利用构造器对属性进行赋值操作：
    //构造器私有化，外界不能调用这个构造器，只能Season内部自己调用
    private Season(String seasonName,String seasonDesc)&amp;#123;
        this.seasonName = seasonName;
        this.seasonDesc = seasonDesc;
    &amp;#125;

    //提供枚举类的有限的 确定的对象：
    public static final Season SPRING = new Season(&amp;quot;春天&amp;quot;,&amp;quot;春暖花开&amp;quot;);
    public static final Season SUMMER = new Season(&amp;quot;夏天&amp;quot;,&amp;quot;烈日炎炎&amp;quot;);
    public static final Season AUTUMN = new Season(&amp;quot;秋天&amp;quot;,&amp;quot;硕果累累&amp;quot;);
    public static final Season WINTER = new Season(&amp;quot;冬天&amp;quot;,&amp;quot;冰天雪地&amp;quot;);

    //额外因素：

    public String getSeasonName() &amp;#123;
        return seasonName;
    &amp;#125;

    public String getSeasonDesc() &amp;#123;
        return seasonDesc;
    &amp;#125;

    //toString();

    @Override
    public String toString() &amp;#123;
        return &amp;quot;Season&amp;#123;&amp;quot; +
            &amp;quot;seasonName=&amp;#39;&amp;quot; + seasonName + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;quot;, seasonDesc=&amp;#39;&amp;quot; + seasonDesc + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestSeason &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Season summer = Season.SUMMER;
        System.out.println(summer/\*.toString()\*/);
        System.out.println(summer.getSeasonName());
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;JDK1-5之后使用enum关键字来创建枚举类&#34;&gt;&lt;a href=&#34;#JDK1-5之后使用enum关键字来创建枚举类&#34; class=&#34;headerlink&#34; title=&#34;JDK1_5之后使用enum关键字来创建枚举类&#34;&gt;&lt;/a&gt;JDK1_5之后使用enum关键字来创建枚举类&lt;/h2&gt;&lt;p&gt;JDK1.5以后使用enum关键字创建枚举类：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/657e63e35654f2386483ef6f014c3be2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;变为下面的枚举类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public enum Season &amp;#123;
    //提供枚举类的有限的 确定的对象：---\&amp;gt;enum枚举类要求对象（常量）必须放在最开始位置
    //多个对象之间用，进行连接，最后一个对象后面用;结束
    SPRING(&amp;quot;春天&amp;quot;,&amp;quot;春暖花开&amp;quot;),
    SUMMER(&amp;quot;夏天&amp;quot;,&amp;quot;烈日炎炎&amp;quot;),
    AUTUMN(&amp;quot;秋天&amp;quot;,&amp;quot;硕果累累&amp;quot;),
    WINTER(&amp;quot;冬天&amp;quot;,&amp;quot;冰天雪地&amp;quot;);
    //属性：
    private final String seasonName ;//季节名字
    private final String seasonDesc ;//季节描述
    //利用构造器对属性进行赋值操作：
    //构造器私有化，外界不能调用这个构造器，只能Season内部自己调用
    private Season(String seasonName, String seasonDesc)&amp;#123;
        this.seasonName = seasonName;
        this.seasonDesc = seasonDesc;
    &amp;#125;



    //额外因素：

    public String getSeasonName() &amp;#123;
        return seasonName;
    &amp;#125;

    public String getSeasonDesc() &amp;#123;
        return seasonDesc;
    &amp;#125;

    //toString();

    @Override
    public String toString() &amp;#123;
        return &amp;quot;Season&amp;#123;&amp;quot; +
            &amp;quot;seasonName=&amp;#39;&amp;quot; + seasonName + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;quot;, seasonDesc=&amp;#39;&amp;quot; + seasonDesc + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用枚举类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestSeason &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Season winter = Season.WINTER;
        System.out.println(winter);
        //enum关键字对应的枚举类的上层父类是 ：java.lang.Enum
        //但是我们自定义的枚举类的上层父类：Object
        System.out.println(Season.class.getSuperclass().getName());//java.lang.Enum
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在源码中经常看到别人定义的枚举类形态：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public enum Season &amp;#123;
    SPRING,
    SUMMER,
    AUTUMN,
    WINTER;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为什么这么简单：因为这个枚举类底层没有属性，属性，构造器，toString，get方法都删掉不写了，然后案例来说应该&lt;/p&gt;
&lt;p&gt;写为：SPRING() 现在连（）可以省略 就变成 SPRING&lt;/p&gt;
&lt;p&gt;看到的形态就剩：常量名（对象名）&lt;/p&gt;
&lt;p&gt;案例：Thread中的枚举类：State&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public enum State &amp;#123;
    /\*\*
        \* Thread state for a thread which has not yet started.
            \*/
            NEW,

    /\*\*
        \* Thread state for a runnable thread. A thread in the runnable
            \* state is executing in the Java virtual machine but it may
            \* be waiting for other resources from the operating system
                \* such as processor.
                \*/
                RUNNABLE,

    /\*\*
        \* Thread state for a thread blocked waiting for a monitor lock.
            \* A thread in the blocked state is waiting for a monitor lock
                \* to enter a synchronized block/method or
                \* reenter a synchronized block/method after calling
                \* &amp;#123;@link Object\#wait() Object.wait&amp;#125;.
                \*/
                BLOCKED,

    /\*\*
        \* Thread state for a waiting thread.
            \* A thread is in the waiting state due to calling one of the
            \* following methods:
    \* \&amp;lt;ul\&amp;gt;
        \* \&amp;lt;li\&amp;gt;&amp;#123;@link Object\#wait() Object.wait&amp;#125; with no timeout\&amp;lt;/li\&amp;gt;
        \* \&amp;lt;li\&amp;gt;&amp;#123;@link \#join() Thread.join&amp;#125; with no timeout\&amp;lt;/li\&amp;gt;
        \* \&amp;lt;li\&amp;gt;&amp;#123;@link LockSupport\#park() LockSupport.park&amp;#125;\&amp;lt;/li\&amp;gt;
        \* \&amp;lt;/ul\&amp;gt;
        \*
        \* \&amp;lt;p\&amp;gt;A thread in the waiting state is waiting for another thread to
            \* perform a particular action.
            \*
            \* For example, a thread that has called \&amp;lt;tt\&amp;gt;Object.wait()\&amp;lt;/tt\&amp;gt;
            \* on an object is waiting for another thread to call
                \* \&amp;lt;tt\&amp;gt;Object.notify()\&amp;lt;/tt\&amp;gt; or \&amp;lt;tt\&amp;gt;Object.notifyAll()\&amp;lt;/tt\&amp;gt; on
                \* that object. A thread that has called \&amp;lt;tt\&amp;gt;Thread.join()\&amp;lt;/tt\&amp;gt;
                \* is waiting for a specified thread to terminate.
                    \*/
                    WAITING,

    /\*\*
        \* Thread state for a waiting thread with a specified waiting time.
            \* A thread is in the timed waiting state due to calling one of
            \* the following methods with a specified positive waiting time:
    \* \&amp;lt;ul\&amp;gt;
        \* \&amp;lt;li\&amp;gt;&amp;#123;@link \#sleep Thread.sleep&amp;#125;\&amp;lt;/li\&amp;gt;
        \* \&amp;lt;li\&amp;gt;&amp;#123;@link Object\#wait(long) Object.wait&amp;#125; with timeout\&amp;lt;/li\&amp;gt;
        \* \&amp;lt;li\&amp;gt;&amp;#123;@link \#join(long) Thread.join&amp;#125; with timeout\&amp;lt;/li\&amp;gt;
        \* \&amp;lt;li\&amp;gt;&amp;#123;@link LockSupport\#parkNanos LockSupport.parkNanos&amp;#125;\&amp;lt;/li\&amp;gt;
        \* \&amp;lt;li\&amp;gt;&amp;#123;@link LockSupport\#parkUntil LockSupport.parkUntil&amp;#125;\&amp;lt;/li\&amp;gt;
        \* \&amp;lt;/ul\&amp;gt;
        \*/
        TIMED_WAITING,

    /\*\*
        \* Thread state for a terminated thread.
            \* The thread has completed execution.
            \*/
            TERMINATED;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Enum类的常用方法&#34;&gt;&lt;a href=&#34;#Enum类的常用方法&#34; class=&#34;headerlink&#34; title=&#34;Enum类的常用方法&#34;&gt;&lt;/a&gt;Enum类的常用方法&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestSeason &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //用enum关键字创建的Season枚举类上面的父类是：java.lang.Enum,常用方法子类Season可以直接拿过来使用：
        //toString();---\&amp;gt;获取对象的名字
        Season autumn = Season.AUTUMN;
        System.out.println(autumn/\*.toString()\*/);//AUTUMN

        System.out.println(&amp;quot;--------------------&amp;quot;);
        //values:返回枚举类对象的数组
        Season[] values = Season.values();
        for(Season s:values)&amp;#123;
            System.out.println(s/\*.toString()\*/);
        &amp;#125;

        System.out.println(&amp;quot;--------------------&amp;quot;);
        //valueOf：通过对象名字获取这个枚举对象
        //注意：对象的名字必须传正确，否则抛出异常
        Season autumn1 = Season.valueOf(&amp;quot;AUTUMN&amp;quot;);
        System.out.println(autumn1);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;枚举类实现接口&#34;&gt;&lt;a href=&#34;#枚举类实现接口&#34; class=&#34;headerlink&#34; title=&#34;枚举类实现接口&#34;&gt;&lt;/a&gt;枚举类实现接口&lt;/h2&gt;&lt;p&gt;定义一个接口：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface TestInterface &amp;#123;
    void show();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;枚举类实现接口，并且重写show方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public enum Season implements TestInterface &amp;#123;
    SPRING,
    SUMMER,
    AUTUMN,
    WINTER;

    @Override
    public void show() &amp;#123;
        System.out.println(&amp;quot;这是Season....&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Season autumn = Season.AUTUMN;
        autumn.show();
        Season summer = Season.SUMMER;
        summer.show();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面发现所有的枚举对象，调用这个show方法的时候走的都是同一个方法，结果都一样：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/1f3767921901f0bdaab9e90f542d92ee.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;但是现在我想要：不同的对象 调用的show方法也不同：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public enum Season implements TestInterface &amp;#123;
    SPRING&amp;#123;
        @Override
        public void show() &amp;#123;
            System.out.println(&amp;quot;这是春天。。。&amp;quot;);
        &amp;#125;
    &amp;#125;,
    SUMMER&amp;#123;
        @Override
        public void show() &amp;#123;
            System.out.println(&amp;quot;这是夏天。。&amp;quot;);
        &amp;#125;
    &amp;#125;,
    AUTUMN&amp;#123;
        @Override
        public void show() &amp;#123;
            System.out.println(&amp;quot;这是秋天&amp;quot;);
        &amp;#125;
    &amp;#125;,
    WINTER&amp;#123;
        @Override
        public void show() &amp;#123;
            System.out.println(&amp;quot;这是冬天&amp;quot;);
        &amp;#125;
    &amp;#125;;

    /\*@Override
        public void show() &amp;#123;
        System.out.println(&amp;quot;这是Season....&amp;quot;);
    &amp;#125;\*/
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Season autumn = Season.AUTUMN;
        autumn.show();
        Season summer = Season.SUMMER;
        summer.show();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC15%E7%AB%A0Junit%E6%B3%A8%E8%A7%A3_%E6%9E%9A%E4%B8%BE/5739ebe7587a21e7d7144b96ec7a5833.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;实际应用&#34;&gt;&lt;a href=&#34;#实际应用&#34; class=&#34;headerlink&#34; title=&#34;实际应用&#34;&gt;&lt;/a&gt;实际应用&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //属性：
    private int age;
    private String name;
    private Gender sex;

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public Gender getSex() &amp;#123;
        return sex;
    &amp;#125;

    public void setSex(Gender sex) &amp;#123;
        this.sex = sex;
    &amp;#125;

    @Override
    public String toString() &amp;#123;
        return &amp;quot;Person&amp;#123;&amp;quot; +
            &amp;quot;age=&amp;quot; + age +
            &amp;quot;, name=&amp;#39;&amp;quot; + name + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;quot;, sex=&amp;#39;&amp;quot; + sex + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;

public enum Gender &amp;#123;
    男,
    女;
&amp;#125;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Person p = new Person();
        p.setAge(19);
        p.setName(&amp;quot;lili&amp;quot;);
        p.setSex(Gender.男);//传入枚举类Gender的对象：--\&amp;gt;在入口处对参数进行了限制
        System.out.println(p);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以通过枚举结合switch处理：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Gender sex = Gender.男;
        //switch后面的（）中可以传入枚举类型
        //switch后面的（）:int,short,byte,char,String ,枚举
        switch (sex)&amp;#123;
            case 女:
                System.out.println(&amp;quot;是个女孩&amp;quot;);
                break;
            case 男:
                System.out.println(&amp;quot;是个男孩&amp;quot;);
                break;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/</id>
        <title>第16章_反射</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/"/>
        <content type="html">&lt;h1 id=&#34;通过案例体会反射的好处&#34;&gt;&lt;a href=&#34;#通过案例体会反射的好处&#34; class=&#34;headerlink&#34; title=&#34;通过案例体会反射的好处&#34;&gt;&lt;/a&gt;通过案例体会反射的好处&lt;/h1&gt;&lt;p&gt;案例：美团外卖 —&amp;gt;付款 —》要么用微信支付 要么用支付宝支付&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//接口的制定方：美团外卖
public interface Mtwm &amp;#123;
    //在线支付功能：
    void payOnline();
&amp;#125;

public class WeChat implements Mtwm&amp;#123;
    @Override
    public void payOnline() &amp;#123;
        //具体实现微信支付的功能：
        System.out.println(&amp;quot;我已经点了外卖，正在使用微信支付&amp;quot;);
    &amp;#125;
&amp;#125;
public class AliPay implements Mtwm &amp;#123;
    @Override
    public void payOnline() &amp;#123;
        //具体的支付宝支付：
        System.out.println(&amp;quot;我已经点了外卖，我正在使用支付宝进行支付&amp;quot;);
    &amp;#125;
&amp;#125;
public class BankCard implements Mtwm&amp;#123;
    @Override
    public void payOnline() &amp;#123;
        System.out.println(&amp;quot;我已经定了外卖，我正在用招商银行信用卡支付&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; public class Test &amp;#123;
 public static void main(String[] args) &amp;#123;
 //定义一个字符串，用来模拟前台的支付方式：
 String str = &amp;quot;微信&amp;quot;;
 if(&amp;quot;微信&amp;quot;.equals(str))&amp;#123;//str.equals(&amp;quot;微信&amp;quot;)---？避免空指针异常
 //微信支付：
 //new WeChat().payOnline();
 pay(new WeChat());
 &amp;#125;

 if(&amp;quot;支付宝&amp;quot;.equals(str))&amp;#123;
 //支付宝支付：
 //new AliPay().payOnline();
 pay(new AliPay());
 &amp;#125;

 if(&amp;quot;招商银行&amp;quot;.equals(str))&amp;#123;
 pay(new BankCard());
 &amp;#125;
 &amp;#125;
 //微信支付
 public static void pay(WeChat wc)&amp;#123;
 wc.payOnline();
 &amp;#125;
 //支付宝支付
 public static void pay(AliPay ap)&amp;#123;
 ap.payOnline();
 &amp;#125;

 //招商银行支付
 public static void pay(BankCard bc)&amp;#123;
 bc.payOnline();
 &amp;#125;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为了提高代码的扩展性—》面向对象特性：多态：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    public static void main(String[] args) &amp;#123;
        //定义一个字符串，用来模拟前台的支付方式：
        String str = &amp;quot;微信&amp;quot;;
        if(&amp;quot;微信&amp;quot;.equals(str))&amp;#123;//str.equals(&amp;quot;微信&amp;quot;)---？避免空指针异常
            //微信支付：
            pay(new WeChat());
        &amp;#125;

        if(&amp;quot;支付宝&amp;quot;.equals(str))&amp;#123;
            //支付宝支付：
            pay(new AliPay());
        &amp;#125;

        if(&amp;quot;招商银行&amp;quot;.equals(str))&amp;#123;
            pay(new BankCard());
        &amp;#125;
    &amp;#125;
    //方法形参是接口，具体传入的是接口的实现类的对象---》多态的一种形式
    public static void pay(Mtwm m)&amp;#123;
        m.payOnline();
    &amp;#125;
&amp;#125;


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多态确实可以提高代码的扩展性，但是：扩展性没有达到最好。&lt;/p&gt;
&lt;p&gt;怎么没有达到最好：上面的分支，还是需要手动的删除或者添加。&lt;/p&gt;
&lt;p&gt;解决办法：反射机制&lt;/p&gt;
&lt;p&gt;利用反射实现上述功能：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    public static void main(String[] args) throws Exception &amp;#123;
        //定义一个字符串，用来模拟前台的支付方式：
        String str = &amp;quot;com.zhaoss.test01.AliPay&amp;quot;; //字符串：实际上：就是微信类的全限定路径

        //下面的代码就是利用反射：
        Class cls = Class.forName(str);//cls--\&amp;gt;Class类具体的对象--》AliPay字节码信息
        Object o = cls.newInstance();
        Method method = cls.getMethod(&amp;quot;payOnline&amp;quot;);
        method.invoke(o);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;通过概念再体会反射&#34;&gt;&lt;a href=&#34;#通过概念再体会反射&#34; class=&#34;headerlink&#34; title=&#34;通过概念再体会反射&#34;&gt;&lt;/a&gt;通过概念再体会反射&lt;/h1&gt;&lt;p&gt;JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，&lt;/p&gt;
&lt;p&gt;都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。&lt;/p&gt;
&lt;p&gt;在编译后产生字节码文件的时候，类加载器子系统通过二进制字节流，负责从文件系统加载class文件。&lt;/p&gt;
&lt;p&gt;在执行程序（java.exe）时候，将字节码文件读入JVM中—&amp;gt;这个过程叫做类的加载。然后在内存中对应创建一个java.lang.Class对象–&amp;gt;这个对象会被放入字节码信息中,这个Class对象,就对应加载那个字节码信息,这个对象将被作为程序访问方法区中的这个类的各种数据的外部接口。&lt;/p&gt;
&lt;p&gt;所以：我们可以通过这个对象看到类的结构，这个对象就好像是一面镜子，透过镜子看到类的各种信息，我们形象的称之为反射&lt;/p&gt;
&lt;p&gt;这种“看透”class的能力（the ability of the program to examine itself）被称为introspection（内省、内观、反省）。Reflection和introspection是常被并提的两个术语。&lt;/p&gt;
&lt;p&gt;说明：在运行期间，如果我们要产生某个类的对象，Java虚拟机(JVM)会检查该类型的Class对象是否已被加载。&lt;/p&gt;
&lt;p&gt;如果没有被加载，JVM会根据类的名称找到.class文件并加载它。一旦某个类型的Class对象已被加载到内存，就可以用它来产生该类型的所有对象。&lt;/p&gt;
&lt;p&gt;补充:&lt;/p&gt;
&lt;p&gt;动态语膏vs静态语言&lt;/p&gt;
&lt;p&gt;1、动态语言&lt;/p&gt;
&lt;p&gt;是一类在运行时可以改变其结构的语言:例如新的函数、对象、甚至代码可以&lt;/p&gt;
&lt;p&gt;被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运&lt;/p&gt;
&lt;p&gt;行时代码可以根据某些条件改变自身结构。&lt;/p&gt;
&lt;p&gt;主要动态语言: Object-C、 C#、JavaScript、 PHP、 Python、 Erlang 。&lt;/p&gt;
&lt;p&gt;2、静态语言&lt;/p&gt;
&lt;p&gt;与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、&lt;/p&gt;
&lt;p&gt;C++。&lt;/p&gt;
&lt;p&gt;所以Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动&lt;/p&gt;
&lt;p&gt;态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。&lt;/p&gt;
&lt;p&gt;Java的动态性让编程的时候更加灵活!&lt;/p&gt;
&lt;p&gt;Class类的理解&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC16%E7%AB%A0_%E5%8F%8D%E5%B0%84/6d8b0c266d2a65f30295f32185c3256c.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;提供丰富的类&#34;&gt;&lt;a href=&#34;#提供丰富的类&#34; class=&#34;headerlink&#34; title=&#34;提供丰富的类&#34;&gt;&lt;/a&gt;提供丰富的类&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//作为一个父类
public class Person &amp;#123;
    //属性
    private int age;
    public String name;

    //方法
    private void eat()&amp;#123;
        System.out.println(&amp;quot;Person---eat&amp;quot;);
    &amp;#125;
    public void sleep()&amp;#123;
        System.out.println(&amp;quot;Person---sleep&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//Student作为子类
public class Student extends Person &amp;#123;
    //属性：
    private int sno;//学号
    double height;//身高
    protected double weight;//体重
    public double score;//成绩

    //方法：
    public String showInfo()&amp;#123;
        return &amp;quot;我是一名三好学生&amp;quot;;
    &amp;#125;
    private void work()&amp;#123;
        System.out.println(&amp;quot;我以后会找工作--》成为码农 程序员 程序猿 程序媛&amp;quot;);
    &amp;#125;

    //构造器
    public Student()&amp;#123;
        System.out.println(&amp;quot;空参构造器&amp;quot;);
    &amp;#125;
    private Student(int sno)&amp;#123;
        this.sno = sno;
    &amp;#125;
    Student(int sno,double weight)&amp;#123;
        this.sno = sno;
        this.weight = weight;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;获取字节码信息的四种形式&#34;&gt;&lt;a href=&#34;#获取字节码信息的四种形式&#34; class=&#34;headerlink&#34; title=&#34;获取字节码信息的四种形式&#34;&gt;&lt;/a&gt;获取字节码信息的四种形式&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public class Test &amp;#123;
    public static void main(String[] args) throws ClassNotFoundException &amp;#123;
        //案例：以Person的字节码信息为案例
        //方式1：通过getClass()方法获取
        Person p = new Person();
        Class c1 = p.getClass();
        System.out.println(c1);

        //方式2：通过内置class属性：
        Class c2 = Person.class;
        System.out.println(c2);

        System.out.println(c1==c2);

        //注意：方式1和方式2 不常用

        //方式3：--》用的最多：调用Class类提供的静态方法forName
        Class c3 = Class.forName(&amp;quot;com.zhaoss.test02.Person&amp;quot;);
        //方式4：利用类的加载器(了解技能点)
        ClassLoader loader = Test.class.getClassLoader();
        Class c4 = loader.loadClass(&amp;quot;com.zhaoss.test02.Person&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;可以作为Class类的实例的种类&#34;&gt;&lt;a href=&#34;#可以作为Class类的实例的种类&#34; class=&#34;headerlink&#34; title=&#34;可以作为Class类的实例的种类&#34;&gt;&lt;/a&gt;可以作为Class类的实例的种类&lt;/h1&gt;&lt;p&gt;Class类的具体的实例：&lt;/p&gt;
&lt;p&gt;（1）类：外部类，内部类&lt;/p&gt;
&lt;p&gt;（2）接口&lt;/p&gt;
&lt;p&gt;（3）注解&lt;/p&gt;
&lt;p&gt;（4）数组&lt;/p&gt;
&lt;p&gt;（5）基本数据类型&lt;/p&gt;
&lt;p&gt;（6）void&lt;/p&gt;
&lt;p&gt;验证：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;

public class Demo &amp;#123;
    public static void main(String[] args) &amp;#123;
        /\*
            Class类的具体的实例：
            （1）类：外部类，内部类
            （2）接口
            （3）注解
            （4）数组
            （5）基本数据类型
            （6）void
            \*/
            Class c1 = Person.class;
        Class c2 = Comparable.class;
        Class c3 = Override.class;

        int[] arr1 = &amp;#123;1,2,3&amp;#125;;
        Class c4 = arr1.getClass();
        int[] arr2 = &amp;#123;5,6,7&amp;#125;;
        Class c5 = arr2.getClass();
        System.out.println(c4==c5);//结果：true .同一个维度，同一个元素类型,得到的字节码就是同一个

        Class c6 = int.class;
        Class c7 = void.class;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;获取运行时类的完整结构&#34;&gt;&lt;a href=&#34;#获取运行时类的完整结构&#34; class=&#34;headerlink&#34; title=&#34;获取运行时类的完整结构&#34;&gt;&lt;/a&gt;获取运行时类的完整结构&lt;/h1&gt;&lt;h2 id=&#34;补充完善上面提供的丰富的类&#34;&gt;&lt;a href=&#34;#补充完善上面提供的丰富的类&#34; class=&#34;headerlink&#34; title=&#34;补充完善上面提供的丰富的类&#34;&gt;&lt;/a&gt;补充完善上面提供的丰富的类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;作为一个父类&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person implements Serializable &amp;#123;
    //属性
    private int age;
    public String name;

    //方法
    private void eat()&amp;#123;
        System.out.println(&amp;quot;Person---eat&amp;quot;);
    &amp;#125;
    public void sleep()&amp;#123;
        System.out.println(&amp;quot;Person---sleep&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//Student作为子类
@MyAnnotation(value=&amp;quot;hello&amp;quot;)
public class Student extends Person implements MyInterface&amp;#123;
    //属性：
    private int sno;//学号
    double height;//身高
    protected double weight;//体重
    public double score;//成绩

    //方法：
    @MyAnnotation(value=&amp;quot;himethod&amp;quot;)
    public String showInfo()&amp;#123;
        return &amp;quot;我是一名三好学生&amp;quot;;
    &amp;#125;
    public String showInfo(int a,int b)&amp;#123;
        return &amp;quot;重载方法====我是一名三好学生&amp;quot;;
    &amp;#125;
    private void work()&amp;#123;
        System.out.println(&amp;quot;我以后会找工作--》成为码农 程序员 程序猿 程序媛&amp;quot;);
    &amp;#125;
    void happy()&amp;#123;
        System.out.println(&amp;quot;做人最重要的就是开心每一天&amp;quot;);
    &amp;#125;
    protected int getSno()&amp;#123;
        return sno;
    &amp;#125;

    //构造器
    public Student()&amp;#123;
        System.out.println(&amp;quot;空参构造器&amp;quot;);
    &amp;#125;
    private Student(int sno)&amp;#123;
        this.sno = sno;
    &amp;#125;
    Student(int sno,double weight)&amp;#123;
        this.sno = sno;
        this.weight = weight;
    &amp;#125;
    protected Student(int sno,double height,double weight)&amp;#123;
        this.sno = sno;
    &amp;#125;

    @Override
    @MyAnnotation(value=&amp;quot;hellomyMethod&amp;quot;)
    public void myMethod() &amp;#123;
        System.out.println(&amp;quot;我重写了myMethod方法。。&amp;quot;);
    &amp;#125;

    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
            &amp;quot;sno=&amp;quot; + sno +
            &amp;quot;, height=&amp;quot; + height +
            &amp;quot;, weight=&amp;quot; + weight +
            &amp;quot;, score=&amp;quot; + score +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/\*
    @Target:定义当前注解能够修饰程序中的哪些元素
        @Retention:定义注解的声明周期
            \*/
@Target(&amp;#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&amp;#125;)
            @Retention(RetentionPolicy.RUNTIME)
            public @interface MyAnnotation &amp;#123;
            String value();//属性
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; public interface MyInterface &amp;#123;//自定义的接口
 //随便定义一个抽象方法：
 void myMethod();
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取构造器和创建对象&#34;&gt;&lt;a href=&#34;#获取构造器和创建对象&#34; class=&#34;headerlink&#34; title=&#34;获取构造器和创建对象&#34;&gt;&lt;/a&gt;获取构造器和创建对象&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test01 &amp;#123;
    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &amp;#123;
        //获取字节码信息：
        Class cls = Student.class;

        //通过字节码信息可以获取构造器：
        //getConstructors只能获取当前运行时类的被public修饰的构造器
        Constructor[] c1 = cls.getConstructors();
        for(Constructor c:c1)&amp;#123;
            System.out.println(c);
        &amp;#125;

        System.out.println(&amp;quot;-------------------&amp;quot;);
        //getDeclaredConstructors:获取运行时类的全部修饰符的构造器
        Constructor[] c2 = cls.getDeclaredConstructors();
        for(Constructor c:c2)&amp;#123;
            System.out.println(c);
        &amp;#125;
        System.out.println(&amp;quot;-------------------&amp;quot;);
        //获取指定的构造器：
        //得到空构造器
        Constructor con1 = cls.getConstructor();
        System.out.println(con1);

        //得到两个参数的有参构造器：
        Constructor con2 = cls.getConstructor(double.class, double.class);
        System.out.println(con2);

        //得到一个参数的有参构造器：并且是private修饰的
        Constructor con3 = cls.getDeclaredConstructor(int.class);
        System.out.println(con3);

        //有了构造器以后我就可以创建对象：
        Object o1 = con1.newInstance();
        System.out.println(o1);

        Object o2 = con2.newInstance(180.5, 170.6);
        System.out.println(o2);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取属性和对属性进行赋值&#34;&gt;&lt;a href=&#34;#获取属性和对属性进行赋值&#34; class=&#34;headerlink&#34; title=&#34;获取属性和对属性进行赋值&#34;&gt;&lt;/a&gt;获取属性和对属性进行赋值&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test02 &amp;#123;
    public static void main(String[] args) throws NoSuchFieldException, IllegalAccessException, InstantiationException &amp;#123;
        //获取运行时类的字节码信息：
        Class cls = Student.class;
        //获取属性：
        //getFields：获取运行时类和父类中被public修饰的属性
        Field[] fields = cls.getFields();
        for(Field f:fields)&amp;#123;
            System.out.println(f);
        &amp;#125;
        System.out.println(&amp;quot;---------------------&amp;quot;);
        //getDeclaredFields：获取运行时类中的所有属性
        Field[] declaredFields = cls.getDeclaredFields();
        for(Field f:declaredFields)&amp;#123;
            System.out.println(f);
        &amp;#125;
        System.out.println(&amp;quot;---------------------&amp;quot;);
        //获取指定的属性：
        Field score = cls.getField(&amp;quot;score&amp;quot;);
        System.out.println(score);
        Field sno = cls.getDeclaredField(&amp;quot;sno&amp;quot;);
        System.out.println(sno);

        System.out.println(&amp;quot;---------------------&amp;quot;);
        //属性的具体结构：
        //获取修饰符
        /\*int modifiers = sno.getModifiers();
        System.out.println(modifiers);
        System.out.println(Modifier.toString(modifiers));\*/
            System.out.println(Modifier.toString(sno.getModifiers()));
        //获取属性的数据类型：
        Class clazz = sno.getType();
        System.out.println(clazz.getName());

        //获取属性的名字：
        String name = sno.getName();
        System.out.println(name);
        System.out.println(&amp;quot;-------------------------------&amp;quot;);
        //给属性赋值：(给属性设置值，必须要有对象)
        Field sco = cls.getField(&amp;quot;score&amp;quot;);
        Object obj = cls.newInstance();
        sco.set(obj,98);//给obj这个对象的score属性设置具体的值，这个值为98
        System.out.println(obj);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取方法和调用方法&#34;&gt;&lt;a href=&#34;#获取方法和调用方法&#34; class=&#34;headerlink&#34; title=&#34;获取方法和调用方法&#34;&gt;&lt;/a&gt;获取方法和调用方法&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test03 &amp;#123;
    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &amp;#123;
        //获取字节码信息：
        Class cls = Student.class;
        //获取方法：
        //getMethods:获取运行时类的方法还有所有父类中的方法（被public修饰）
        Method[] methods = cls.getMethods();
        for(Method m:methods)&amp;#123;
            System.out.println(m);
        &amp;#125;
        System.out.println(&amp;quot;-----------------------&amp;quot;);
        //getDeclaredMethods:获取运行时类中的所有方法：
        Method[] declaredMethods = cls.getDeclaredMethods();
        for(Method m:declaredMethods)&amp;#123;
            System.out.println(m);
        &amp;#125;
        System.out.println(&amp;quot;-----------------------&amp;quot;);
        //获取指定的方法：
        Method showInfo1 = cls.getMethod(&amp;quot;showInfo&amp;quot;);
        System.out.println(showInfo1);
        Method showInfo2 = cls.getMethod(&amp;quot;showInfo&amp;quot;, int.class, int.class);
        System.out.println(showInfo2);
        Method work = cls.getDeclaredMethod(&amp;quot;work&amp;quot;,int.class);
        System.out.println(work);
        System.out.println(&amp;quot;-----------------------&amp;quot;);
        //获取方法的具体结构：
        /\*
            @注解
            修饰符 返回值类型 方法名(参数列表) throws XXXXX&amp;#123;&amp;#125;
        \*/
            //名字：
            System.out.println(work.getName());
        //修饰符：
        int modifiers = work.getModifiers();
        System.out.println(Modifier.toString(modifiers));
        //返回值：
        System.out.println(work.getReturnType());
        //参数列表：
        Class[] parameterTypes = work.getParameterTypes();
        for(Class c:parameterTypes)&amp;#123;
            System.out.println(c);
        &amp;#125;

        //获取注解：
        Method myMethod = cls.getMethod(&amp;quot;myMethod&amp;quot;);
        Annotation[] annotations = myMethod.getAnnotations();
        for(Annotation a:annotations)&amp;#123;
            System.out.println(a);
        &amp;#125;

        //获取异常：
        Class[] exceptionTypes = myMethod.getExceptionTypes();
        for(Class c:exceptionTypes)&amp;#123;
            System.out.println(c);
        &amp;#125;


        //调用方法：
        Object o = cls.newInstance();
        myMethod.invoke(o);//调用o对象的mymethod方法

        System.out.println(showInfo2.invoke(o,12,45));;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;获取类的接口，所在包，注解&#34;&gt;&lt;a href=&#34;#获取类的接口，所在包，注解&#34; class=&#34;headerlink&#34; title=&#34;获取类的接口，所在包，注解&#34;&gt;&lt;/a&gt;获取类的接口，所在包，注解&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;

public class Test04 &amp;#123;
    public static void main(String[] args) &amp;#123;
        //获取字节码信息：
        Class cls = Student.class;
        //获取运行时类的接口：
        Class[] interfaces = cls.getInterfaces();
        for(Class c:interfaces)&amp;#123;
            System.out.println(c);
        &amp;#125;

        //得到父类的接口：
        //先得到父类的字节码信息：
        Class superclass = cls.getSuperclass();

        //得到接口：
        Class[] interfaces1 = superclass.getInterfaces();
        for(Class c:interfaces1)&amp;#123;
            System.out.println(c);
        &amp;#125;

        //获取运行时类所在的包：
        Package aPackage = cls.getPackage();
        System.out.println(aPackage);
        System.out.println(aPackage.getName());

        //获取运行类的注解：
        Annotation[] annotations = cls.getAnnotations();
        for(Annotation a:annotations)&amp;#123;
            System.out.println(a);
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;关于反射的面试题&#34;&gt;&lt;a href=&#34;#关于反射的面试题&#34; class=&#34;headerlink&#34; title=&#34;关于反射的面试题&#34;&gt;&lt;/a&gt;关于反射的面试题&lt;/h2&gt;&lt;p&gt;【1】问题1：创建Person的对象，以后用new Person()创建,还是用反射创建？&lt;/p&gt;
&lt;p&gt;【2】问题2：反射是否破坏了面向对象的封装性？&lt;/p&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/</id>
        <title>第1章初识JAVA</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/"/>
        <content type="html">&lt;h1 id=&#34;计算机语言的发展历史&#34;&gt;&lt;a href=&#34;#计算机语言的发展历史&#34; class=&#34;headerlink&#34; title=&#34;计算机语言的发展历史&#34;&gt;&lt;/a&gt;计算机语言的发展历史&lt;/h1&gt;&lt;p&gt;计算机编程语言的发展，是随着计算机本身硬件发展而发展的。硬件速度越快、体积越小、成本越低，应用到人类社会的场景就会越多，那么所需要的算法就会越复杂，也就要求计算机编程语言越高级。最初重达几十吨但一秒只能运算5000次的ENIAC(世界上第一台计算机)，只能做非常小的应用，比如：某些情况的弹道计算。现在任何一个人的手机运算能力都可以秒杀那个年代地球上所有计算机运算能力的总和。计算机编程语言的发展历经了从低级到高级发展。发展的核心思想就是“让人更容易编程”。越容易使用的语言，就有越多人使用；越多人使用，就有越多协作；越多协作，就可以创造越复杂的物体；计算机语言经历了三代：第一代是机器语言，第二代是汇编语言，第三代是高级语言。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/df224ffde641b2f50849b0d7ced03e3a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【1】第一代：机器语言（相当于人类的原始阶段）&lt;/p&gt;
&lt;p&gt;机器语言是机器指令的集合，机器指令展开来讲就是一台机器可以正确执行的命令。电子计算机的机器指令是一列二进制数字。计算机将之转变为一列高低电平，以使计算机的电子器件受到驱动，从而进行运算。上面所说的计算机，指的是可以执行机器指令，进行运算的机器。这是早期计算机的概念。早期的程序设计均使用机器语言。程序员们将用 0、1 数字编程的程序代码打在纸袋或卡片上，1打孔，0不打孔，再将程序通过纸带机或卡片机输入计算机，从而进行运算。&lt;/p&gt;
&lt;p&gt;应用8086CPU完成运算s&amp;#x3D;768+12288-1280，机器码如下:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/cabe563631cd20b0be237288f14a60fd.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;假如将程序错写成以下的错误，请你找出错误:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/f3810a59f77dc88b809a08882fdbf11b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;书写和阅读机器码程序不是一件简单的工作，要记住所有抽象的二进制码。上面只是一个非常简单的小程序，就暴露出机器码的晦涩难懂和不易查错。写如此小的一个程序尚且如此，实际上一个有用的程序至少要有几十行的机器码。那么，情况将会怎么样呢？&lt;/p&gt;
&lt;p&gt;在显示器输出“welcome to masm”，机器码如下：&lt;/p&gt;
&lt;p&gt;看到这样的程序，你有什么感想？如果程序里有一个“1”被误写成为“0”，又如何去查找错误呢？&lt;/p&gt;
&lt;p&gt;【2】第二代：汇编语言（相当于人类的手工业阶段）&lt;/p&gt;
&lt;p&gt;为了编程的方便，以及解决更加复杂的问题。程序员开始改进机器语言，使用英文缩写的助记符来表示基本的计算机操作。这些助记符构成了汇编语言的基础。如下是一些常见的汇编语言助记符(单词)比如：mov，add，sub之类，这样人更容易使用了。识别几百、几千个单词，感觉要比几百几千个数字，美妙多了。汇编语言相当于人类的手工业社会，需要技术极其娴熟的工匠，但是开发效率也非常低。汇编语言虽然能编写高效率的程序，但是学习和使用都不是易事，并且很难调试。另一个复杂的问题，汇编语言以及早期的计算机语言（Basic、Fortran等）没有考虑结构化设计原则，而是使用goto语句来作为程序流程控制的主要方法。这样做的后果是：一大堆混乱的调转语句使得程序几乎不可能被读懂。对于那个时代的程序员，能读懂上个月自己写的代码都成为一种挑战。 汇编语言仍然应用于工业电子编程领域、软件的加密解密、计算机病毒分析等。&lt;/p&gt;
&lt;p&gt;下面以Masm软件为例，编写一个简单的“hello world!”程序。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/25f4d0464a08bc680d211dc16e3fbdea.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】第三代：高级语言（相当于人类的工业阶段）&lt;/p&gt;
&lt;p&gt;对于简单的任务，汇编语言可以胜任。但是随着计算机的发展，渗透到了工作生活的更多的方面，一些复杂的任务出现了，汇编语言就显得力不从心（应该说是程序员使用汇编语言解决复杂问题出现了瓶颈）。于是，出现了高级语言。像我们熟知的C、C++、Java等等都是高级语言。&lt;/p&gt;
&lt;p&gt;高级语言允许程序员使用接近日常英语的指令来编写程序。例如下图所示:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/087eeecede8f63fad58301244c34660a.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;JAVA简史&#34;&gt;&lt;a href=&#34;#JAVA简史&#34; class=&#34;headerlink&#34; title=&#34;JAVA简史&#34;&gt;&lt;/a&gt;JAVA简史&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】SUN公司&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;美国SUN(Stanford University Network)公司在中国大陆的正式中文名为“太阳计算机系统（中国）有限公司” ，在台湾中文名为“升 阳电脑公司”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】Java为什么被发明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Green项目。&lt;/p&gt;
&lt;p&gt;应用环境：像电视盒这样的消费类电子产品&lt;/p&gt;
&lt;p&gt;要求： 语言本身是中立的，也就是跨平台&lt;/p&gt;
&lt;p&gt;1996年Java第一次发布就引起了人们的极大兴趣。关注Java的人士不仅限于计算机出版界， 还有诸如《纽约时报》《华盛顿邮报》《商业周刊》这样的主流媒体。Java 是第一种也是唯一种在National Public Radio上占用了10分钟时间来进行介绍的程序设计语言，并且还得到了$100000000的风险投资基金。这些基金全部用来支持用这种特别的计算机语言开发的产品。重温那些令人兴奋的日子是很有意思的。我们将简要地介绍一下Java语言的发展历史：&lt;/p&gt;
&lt;p&gt;Java的历史要追溯到1991年，由Patrick Naughton 及其伙伴James Gosling (一个全能的计算机奇才)带领的Sun公同的工程师小组想要设计一种小型的计算机语言，主要用于像有线电视转换盒这类的消费设备。由于这些消费设备的处理能力和内存都很有限，所以语言必须非常小且能够生成非常紧凑的代码。另外，由于不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是不能与任何特定的体系结构捆绑在一起。这个项目被命名为”Green”。&lt;/p&gt;
&lt;p&gt;所有就要求有这样的一种代码： 代码短小、紧凑且与平台无关。但是，Sun公司的人都有UNIX的应用背景。因此，所开发的语言以C++为基础。 是Gosling率先创造了这个语言，把这种语言称为“Oak”(这么起名的原因大概是因为他非常喜欢自己办公室外的橡树)。Sun 公司的人后来发现Oak是一种已有的计算机语言的名字，于是，将其改名为Java。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/b777a728d94309940fcfe8684bcc3f1b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【3】Java的发明人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;James Gosling &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4】经历阶段&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1991年，James Gosling在SUN公司的工程师小组想要设计这样一种小型计算机语言。该语言主要用于像电视盒这样的消费类电子产品。另外，由于不同的厂商选择不同的CPU和操作系统，因此，要求该语言不能和特定的体系结构绑在一起，要求语言本身是中立的，也就是跨平台的。所以，将这个语言命名为“Green”，类似于绿色软件的意思。后来，改名为Oak，橡树的意思。改名后发现已经有一种语言叫这个名字了，再改名叫Java。Java语言发展到今天经历了一系列的过程：&lt;/p&gt;
&lt;p&gt; 1991年，SUN公司的Green项目，Oak&lt;/p&gt;
&lt;p&gt; 1995年，推出Java测试版&lt;/p&gt;
&lt;p&gt; 1996年，JDK1.0&lt;/p&gt;
&lt;p&gt; 1997年，JDK1.1&lt;/p&gt;
&lt;p&gt; 1998年，JDK1.2，大大改进了早期版本缺陷，是一个革命性的版本，更名为Java2。&lt;/p&gt;
&lt;p&gt; 2004年，J2SE 5.0 (1.5.0) Tiger老虎 成为Java语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5更名为Java SE 5.0&lt;/p&gt;
&lt;p&gt; 2005年，Java的各种版本已经更名，以取消其中的数字”2”： J2ME更名为Java ME， J2SE更名为Java SE， J2EE更名为Java EE；&lt;/p&gt;
&lt;p&gt; 2006年，J2SE 6.0 (1.6.0) Mustang野马&lt;/p&gt;
&lt;p&gt; 2009年，甲骨文(oracle)收购SUN，交易高达价格74亿&lt;/p&gt;
&lt;p&gt; 2011年，JavaSE7.0 Dolphin海豚&lt;/p&gt;
&lt;p&gt; 2014年，JavaSE8.0&lt;/p&gt;
&lt;p&gt;2017年，JAVA 9.0&lt;/p&gt;
&lt;p&gt; 2018年3月，JAVA 10&lt;/p&gt;
&lt;p&gt; 2018年9月，JAVA 11&lt;/p&gt;
&lt;p&gt; 2019年3月，JAVA 12&lt;/p&gt;
&lt;p&gt; 2019年9月，JAVA 13&lt;/p&gt;
&lt;p&gt; 2020年3月，JAVA 14&lt;/p&gt;
&lt;p&gt;注意：SUN公司已经被oracle公司收购，目前每半年更新一次java的版本。但是，企业中的主流仍然以7和8为主。对于初学者，应该以企业主流应用版本为核心进行学习，没有必须在此处追求最新版本。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/e1e4acc66aa1b1f2c1e46059b1421c38.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【5】不同版本JDK说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JDK Version 1.1&lt;/p&gt;
&lt;p&gt;于1997-02-19发行。&lt;/p&gt;
&lt;p&gt;引入的新特性包括：&lt;/p&gt;
&lt;p&gt;引入JDBC（Java Database Connectivity）；&lt;/p&gt;
&lt;p&gt;支持内部类；&lt;/p&gt;
&lt;p&gt;引入Java Bean；&lt;/p&gt;
&lt;p&gt;引入RMI（Remote Method Invocation）；&lt;/p&gt;
&lt;p&gt;引入反射（仅用于内省）。&lt;/p&gt;
&lt;p&gt;J2SE Version 1.2&lt;/p&gt;
&lt;p&gt;开发代号为Playground（操场），于1998-12-08发行。&lt;/p&gt;
&lt;p&gt;引入的新特性包括：&lt;/p&gt;
&lt;p&gt;引入集合（Collection）框架；&lt;/p&gt;
&lt;p&gt;对字符串常量做内存映射；&lt;/p&gt;
&lt;p&gt;引入JIT（Just In Time）编译器；&lt;/p&gt;
&lt;p&gt;引入对打包的Java文件进行数字签名；&lt;/p&gt;
&lt;p&gt;引入控制授权访问系统资源的策略工具；&lt;/p&gt;
&lt;p&gt;引入JFC（Java Foundation Classes），包括Swing 1.0、拖放和Java 2D类库；&lt;/p&gt;
&lt;p&gt;引入Java 插件；&lt;/p&gt;
&lt;p&gt;在JDBC中引入可滚动结果集、BLOB、CLOB、批量更新和用户自定义类型；&lt;/p&gt;
&lt;p&gt;在Applet中添加声音支持。&lt;/p&gt;
&lt;p&gt;J2SE Version 1.3&lt;/p&gt;
&lt;p&gt;开发代号为Kestrel（红隼），于2000-05-08发行。&lt;/p&gt;
&lt;p&gt;引入的新特性包括：&lt;/p&gt;
&lt;p&gt;引入Java Sound API；&lt;/p&gt;
&lt;p&gt;jar文件索引；&lt;/p&gt;
&lt;p&gt;对Java的各个方面都做了大量优化和增强。&lt;/p&gt;
&lt;p&gt;J2SE Version 1.4&lt;/p&gt;
&lt;p&gt;开发代号为Merlin（隼），于2004-02-06发行（首次在JCP下发行）。&lt;/p&gt;
&lt;p&gt;引入的新特性包括:&lt;/p&gt;
&lt;p&gt;XML处理；&lt;/p&gt;
&lt;p&gt;Java打印服务；&lt;/p&gt;
&lt;p&gt;引入Logging API；&lt;/p&gt;
&lt;p&gt;引入Java Web Start；&lt;/p&gt;
&lt;p&gt;引入JDBC 3.0 API；&lt;/p&gt;
&lt;p&gt;引入断言；&lt;/p&gt;
&lt;p&gt;引入Preferences API；&lt;/p&gt;
&lt;p&gt;引入链式异常处理；&lt;/p&gt;
&lt;p&gt;支持IPv6；&lt;/p&gt;
&lt;p&gt;支持正则表达式；&lt;/p&gt;
&lt;p&gt;引入Image I&amp;#x2F;O slot machine API。&lt;/p&gt;
&lt;p&gt;Java Version SE 5.0&lt;/p&gt;
&lt;p&gt;开发代号为Tiger（老虎），于2004-09-30发行。&lt;/p&gt;
&lt;p&gt;引入的新特性包括:&lt;/p&gt;
&lt;p&gt;引入泛型；&lt;/p&gt;
&lt;p&gt;增强循环，可以使用迭代方式；&lt;/p&gt;
&lt;p&gt;自动装箱与自动拆箱；&lt;/p&gt;
&lt;p&gt;类型安全的枚举；&lt;/p&gt;
&lt;p&gt;可变参数；&lt;/p&gt;
&lt;p&gt;静态引入；&lt;/p&gt;
&lt;p&gt;元数据（注解）；&lt;/p&gt;
&lt;p&gt;引入Instrumentation。&lt;/p&gt;
&lt;p&gt;Java Version SE 6&lt;/p&gt;
&lt;p&gt;开发代号为Mustang（野马），于2006-12-11发行。&lt;/p&gt;
&lt;p&gt;引入的新特性包括：&lt;/p&gt;
&lt;p&gt;支持脚本语言；&lt;/p&gt;
&lt;p&gt;引入JDBC 4.0 API；&lt;/p&gt;
&lt;p&gt;引入Java Compiler API；&lt;/p&gt;
&lt;p&gt;可插拔注解；&lt;/p&gt;
&lt;p&gt;增加对Native PKI(Public Key Infrastructure)、Java GSS(Generic Security Service)、Kerberos和LDAP(Lightweight Directory Access Protocol)的支持；&lt;/p&gt;
&lt;p&gt;继承Web Services；&lt;/p&gt;
&lt;p&gt;做了很多优化。&lt;/p&gt;
&lt;p&gt;Java Version SE 7&lt;/p&gt;
&lt;p&gt;开发代号是Dolphin（海豚），于2011-07-28发行。&lt;/p&gt;
&lt;p&gt;引入的新特性包括：&lt;/p&gt;
&lt;p&gt;switch语句块中允许以字符串作为分支条件；&lt;/p&gt;
&lt;p&gt;在创建泛型对象时应用类型推断；&lt;/p&gt;
&lt;p&gt;在一个语句块中捕获多种异常；&lt;/p&gt;
&lt;p&gt;支持动态语言；&lt;/p&gt;
&lt;p&gt;支持try-with-resources；&lt;/p&gt;
&lt;p&gt;引入Java NIO.2开发包；&lt;/p&gt;
&lt;p&gt;数值类型可以用2进制字符串表示，并且可以在字符串表示中添加下划线；&lt;/p&gt;
&lt;p&gt;钻石型语法；&lt;/p&gt;
&lt;p&gt;null值的自动处理。&lt;/p&gt;
&lt;p&gt;Java Version SE 8&lt;/p&gt;
&lt;p&gt;开发代号是Spider（蜘蛛），于2014-03-18发行。&lt;/p&gt;
&lt;p&gt;支持 lambda支持；&lt;/p&gt;
&lt;p&gt;增强日期与时间API的功能；&lt;/p&gt;
&lt;p&gt;对垃圾回收的性能也进行了改进；&lt;/p&gt;
&lt;p&gt;并且移除了permgen区。&lt;/p&gt;
&lt;p&gt;Lambdas表达式与Functional接口&lt;/p&gt;
&lt;p&gt;接口的默认与静态方法&lt;/p&gt;
&lt;p&gt;方法引用&lt;/p&gt;
&lt;p&gt;重复注解&lt;/p&gt;
&lt;p&gt;更好的类型推测机制&lt;/p&gt;
&lt;p&gt;扩展注解的支持&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/cc266d289e8e3cb0c93696162df2eb73.png&#34; class=&#34;&#34;&gt;




&lt;h1 id=&#34;JAVA体系结构&#34;&gt;&lt;a href=&#34;#JAVA体系结构&#34; class=&#34;headerlink&#34; title=&#34;JAVA体系结构&#34;&gt;&lt;/a&gt;JAVA体系结构&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;JavaSE（Java Standard Edition）：标准版，定位在个人计算机上的应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个版本是Java平台的核心，它提供了非常丰富的API来开发一般个人计算机上的应用程序，包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。在上世纪90年代末互联网上大放异彩的Applet也属于这个版本。Applet后来为Flash取代，Flash即将被HTML5取代。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JavaEE（Java Enterprise Edition）：企业版，定位在服务器端的应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：JDBC是让程序员能直接在Java内使用的SQL的语法来访问数据库内的数据；Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JavaME（Java Micro Edition）：微型版，定位在消费性电子产品的应用上&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaME是JavaSE的内伸，包含J2SE的一部分核心类，也有自己的扩展类,增加了适合微小装置的类库：javax.microedition.io.*等。该版本针对资源有限的电子消费产品的需求精简核心类库，并提供了模块化的架构让不同类型产品能够随时增加支持的能力。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/4eac508d70b7f6ffc64ed3fdcfc23406.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;JAVA的特性和优势&#34;&gt;&lt;a href=&#34;#JAVA的特性和优势&#34; class=&#34;headerlink&#34; title=&#34;JAVA的特性和优势&#34;&gt;&lt;/a&gt;JAVA的特性和优势&lt;/h1&gt;&lt;p&gt; &lt;strong&gt;跨平台&amp;#x2F;可移植性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是Java的核心优势。Java在设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。这样的话程序的移植就会非常麻烦。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;安全性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java适合于网络&amp;#x2F;分布式环境，为了达到这个目标，在安全性方面投入了很大的精力，使Java可以很容易构建防病毒，防篡改的系统。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;面向对象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面向对象是一种程序设计技术，非常适合大型软件的设计和开发。由于C++为了照顾大量C语言使用者而兼容了C，使得自身仅仅成为了带类的C语言，多少影响了其面向对象的彻底性！Java则是完全的面向对象语言。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;简单性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java就是C++语法的简化版，我们也可以将Java称之为“C++-”。跟我念“C加加减”，指的就是将C++的一些内容去掉；比如：头文件，指针运算，结构，联合，操作符重载，虚基类等等。同时，由于语法基于C语言，因此学习起来完全不费力。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;高性能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java最初发展阶段，总是被人诟病“性能低”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了几十倍运行效率。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。 将一些“热点”字节码编译成本地机器码，并将结果缓存起来，在需要的时候重新调用。这样的话，使Java程序的执行效率大大提高，某些代码甚至接待C++的效率。&lt;/p&gt;
&lt;p&gt;因此，Java低性能的短腿，已经被完全解决了。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;分布式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java是为Internet的分布式环境设计的，因为它能够处理TCP&amp;#x2F;IP协议。事实上，通过URL访问一个网络资源和访问本地文件是一样简单的。Java还支持远程方法调用(RMI,Remote Method Invocation)，使程序能够通过网络调用方法。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;多线程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;多线程的使用可以带来更好的交互响应和实时行为。 Java多线程的简单性是Java成为主流服务器端开发语言的主要原因之一。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;健壮性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Java是一种健壮的语言，吸收了C&amp;#x2F;C++ 语言的优点，但去掉了其影响程序健壮性的部分（如：指针、内存的申请与释放等）。Java程序不可能造成计算机崩溃。即使Java程序也可能有错误。如果出现某种出乎意料之事，程序也不会崩溃，而是把该异常抛出，再通过异常处理机制加以处理。&lt;/p&gt;
&lt;p&gt;总结：一句话：java很好！&lt;/p&gt;
&lt;p&gt;但是，并不是说学习了java，以后所有的东西都要用java开发了：某些领域其他语言有更出色的表现，比如，Objective C和后来的Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。&lt;/p&gt;
&lt;p&gt;只能说，不同的语言之间，平分秋色！&lt;/p&gt;
&lt;h1 id=&#34;核心机制&#34;&gt;&lt;a href=&#34;#核心机制&#34; class=&#34;headerlink&#34; title=&#34;核心机制&#34;&gt;&lt;/a&gt;核心机制&lt;/h1&gt;&lt;h2 id=&#34;垃圾收集机制&#34;&gt;&lt;a href=&#34;#垃圾收集机制&#34; class=&#34;headerlink&#34; title=&#34;垃圾收集机制&#34;&gt;&lt;/a&gt;垃圾收集机制&lt;/h2&gt;&lt;p&gt;垃圾收集的目的在除不再使用的对象，当对象建立的时候垃圾收集期，就开始监控对象的动态情况，垃圾收集主要是对内存的释放。创建对象的时候申请一个空间&lt;/p&gt;
&lt;p&gt;1.不再使用的内存空间应回收—》垃圾收集；&lt;/p&gt;
&lt;p&gt;2.Java消除了程序员回收无用内存空间的职责；提供一种系统级线程跟踪存储空间的分配情况。在JVM的空闲时，检查并释放可被释放的存储器空间；相比c++,开发人员负责要自己收回无用内存。&lt;/p&gt;
&lt;p&gt;3.垃圾收集在Java程序运行过程中自动进行，程序员无法精确控制和干预；&lt;/p&gt;
&lt;p&gt;4.GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上减少了因为没有释放空间而导致的内存泄露。&lt;/p&gt;
&lt;p&gt;后续：&lt;/p&gt;
&lt;p&gt;更高级：&lt;/p&gt;
&lt;p&gt;1.垃圾收集器有几种&lt;/p&gt;
&lt;p&gt;2.垃圾收集器底层原理剖析&lt;/p&gt;
&lt;p&gt;3.垃圾收集器算法，优化&lt;/p&gt;
&lt;h2 id=&#34;跨平台原理&#34;&gt;&lt;a href=&#34;#跨平台原理&#34; class=&#34;headerlink&#34; title=&#34;跨平台原理&#34;&gt;&lt;/a&gt;跨平台原理&lt;/h2&gt;&lt;p&gt;JAVA跨平台原理的解释：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/c9214cebbc48ea99d832cf9899a52a8d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;C语言的跨平台解释：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/66913892f5b4f71e30d054375cccb7c9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;JVM(Java Virtual Machine)就是一个虚拟的用于执行bytecode字节码的”虚拟计算机”。他也定义了指令集、寄存器集、结构栈、垃圾收集堆、内存区域。JVM负责将Java字节码解释运行，边解释边运行，这样，速度就会受到一定的影响。&lt;/p&gt;
&lt;p&gt;不同的操作系统有不同的虚拟机。Java 虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，随处运行”。 Java虚拟机是实现跨平台的核心机制。如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/9f86e99d761144f8e5f1025c263d727d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;我们说的语言跨平台是编译后的文件跨平台，而不是源程序跨平台。&lt;/p&gt;
&lt;p&gt;接下来我们再比较下两种方式的差异：第一，C语言是编译执行的，编译器与平台相关，编译生成的可执行文件与平台相关；第二，Java是解释执行的，编译为中间码的编译器与平台无关，编译生成的中间码也与平台无关（一次编译，到处运行），中间码再由解释器解释执行，解释器是与平台相关的，也就是不同的平台需要不同的解释器.&lt;/p&gt;
&lt;h1 id=&#34;常用DOS命令&#34;&gt;&lt;a href=&#34;#常用DOS命令&#34; class=&#34;headerlink&#34; title=&#34;常用DOS命令&#34;&gt;&lt;/a&gt;常用DOS命令&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】DOS操作系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;--Microsoft公司推出的操作系统。（在windows之前的操作系统）&lt;/p&gt;
&lt;p&gt;--DOS是英文”Disk Operating System”的缩写,其中文含意是”磁盘操作系统”.&lt;/p&gt;
&lt;p&gt;--DOS是单用户、单任务的操作系统.（只能执行一个任务）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/b5c2c79cb5570c6e91dabc56e2eb2d91.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【2】DOS命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;--在windows中，我们通过鼠标菜单等来操作系统，而在dos操作系统中，要通过dos命令来操作系统。&lt;/p&gt;
&lt;p&gt;--是DOS操作系统的命令，是一种面向磁盘的操作命令，&lt;/p&gt;
&lt;p&gt;--不区分大小写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】命令学习：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;windows给我们保留了类似dos系统的操作界面，可以直接操作磁盘！&lt;/p&gt;
&lt;p&gt;dos 也是一种&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/d2Q9JUU2JTkzJThEJUU0JUJEJTlDJUU3JUIzJUJCJUU3JUJCJTlGJnRuPVNFX1BjWmhpZGFvbndoY19uZ3BhZ21qeiZyc3ZfZGw9Z2hfcGNfemhpZGFv&#34;&gt;操作系统&lt;/span&gt;，是在windows出现以前用的，后来windows出来后基本没人用了，但是当windows崩溃的时候，还是要的dos方式解决，它是一种纯命令方式，cmd其实就是在windows状态下进入dos方式。&lt;/p&gt;
&lt;p&gt;控制命令台：win+r—&amp;gt;cmd&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/3b0f71b42623023480dda23aabe8aee4.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【4】具体dos命令：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）切换盘符： c: d: e: 大小写没有区分&lt;/p&gt;
&lt;p&gt;（2）显示详细信息：dir&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1740909b2c155106334ed54298cadda0.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（3）改变当前目录：cd&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/362c58e6a0f56fc1ace0bd31f0b741c2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（4）&lt;/p&gt;
&lt;p&gt;. 当前目录&lt;/p&gt;
&lt;p&gt;.. 代表上一层目录&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/5c967bca035c35add1b2104ca5649d38.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/acefdb41934d2aab97dfa5e969eff0cb.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（5）清屏：cls&lt;/p&gt;
&lt;p&gt;（6）切换历史命令：上下箭头&lt;/p&gt;
&lt;p&gt;（7）补全命令： tab按键&lt;/p&gt;
&lt;p&gt;（8）创建目录：md&lt;/p&gt;
&lt;p&gt;删除目录：rd&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/09422f27f704dcbf9dae20fd1c3f6084.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（9）复制文件命令：copy:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/0626fb05c5350a48f3194a4612623a9d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（10）删除文件：del&lt;/p&gt;
&lt;p&gt;del后面如果接的是文件夹&amp;#x2F;目录：那么删除的就是这个文件夹下的文件，而不是文件夹&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/d5a261b9a18b4a7c852e02a84d2143bc.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;JAVA环境准备–-gt-JDK&#34;&gt;&lt;a href=&#34;#JAVA环境准备–-gt-JDK&#34; class=&#34;headerlink&#34; title=&#34;JAVA环境准备–&amp;gt;JDK&#34;&gt;&lt;/a&gt;JAVA环境准备–&amp;gt;JDK&lt;/h1&gt;&lt;h2 id=&#34;【1】下载JDK&#34;&gt;&lt;a href=&#34;#【1】下载JDK&#34; class=&#34;headerlink&#34; title=&#34;【1】下载JDK&#34;&gt;&lt;/a&gt;&lt;strong&gt;【1】下载JDK&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5vcmFjbGUuY29tL3RlY2huZXR3b3JrL2phdmEvamF2YXNlL2Rvd25sb2Fkcy9pbmRleC5odG1s&#34;&gt;www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/f5e306fff865e78e7cf4b3e0853d0a46.jpeg&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【2】安装JDK&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/76e9d157917264af13c9a2457ad03b0f.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/7d3e5ef356992506ea31a463b166089a.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/febc26a8ad5ca5d7a450a55ddd7c62d1.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;【3】卸载JDK&#34;&gt;&lt;a href=&#34;#【3】卸载JDK&#34; class=&#34;headerlink&#34; title=&#34;【3】卸载JDK&#34;&gt;&lt;/a&gt;&lt;strong&gt;【3】卸载JDK&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;控制面板卸载即可&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/f697774350b18624b56bed0f6254a517.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;【4】-验证JDK是否安装成功&#34;&gt;&lt;a href=&#34;#【4】-验证JDK是否安装成功&#34; class=&#34;headerlink&#34; title=&#34;【4】 验证JDK是否安装成功&#34;&gt;&lt;/a&gt;&lt;strong&gt;【4】 验证JDK是否安装成功&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;（1）方式1：去安装目录下看一眼：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/ac22249991f5294b4a9d223d5fcf5268.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（2）方式2：通过控制命令台查看：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/39ae7561d4f131368eae9a9ccb2af553.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（3）方式3：通过控制面板查看：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/261ebbcb3bc9cd8f43196c2baa4634c9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【5】JDK和JRE：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JDK： Java Development kit —-&amp;gt;编写Java程序的程序员使用的软件&lt;/p&gt;
&lt;p&gt;JRE : Java Runtime Enviroment —-》运行Java程序的用户使用的软件&lt;/p&gt;
&lt;h2 id=&#34;安装notepad-，配置path环境变量&#34;&gt;&lt;a href=&#34;#安装notepad-，配置path环境变量&#34; class=&#34;headerlink&#34; title=&#34;安装notepad++，配置path环境变量&#34;&gt;&lt;/a&gt;安装notepad++，配置path环境变量&lt;/h2&gt;&lt;p&gt;【1】安装记事本：notepad&lt;/p&gt;
&lt;p&gt;【2】安装：一直下一步&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/abbe25e7ed8b045edea86256baa3f138.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】打开记事本进行设置：&lt;/p&gt;
&lt;p&gt;设置–》首选项：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/c8dca7e180ad4bc69dd81c0953b1873c.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;设置–》语言格式设置：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/0542de937b85e18e1ef81e7cadea58ca.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】打开notepad++:&lt;/p&gt;
&lt;p&gt;（1）方式1：通过快捷方式：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/be5c9d085c34c660cb272341c751ae2e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（2）方式2：通过可执行文件：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/9e8f1330d48c571f0f4d0f2f33c8b6a7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（3）方式3：利用控制命令台：&lt;/p&gt;
&lt;p&gt;win+r–&amp;gt;cmd:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/701079b46451e26f184c5effbf08f14c.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;(4)方式4：在任意的路径下去执行notepad++.exe这个命令：&lt;/p&gt;
&lt;p&gt;但是发现报错：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/98e40692478ec2772c3fd5aa37bbbe3a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;需要配置系统环境变量：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a8158c92fcc94f4cd7c16d98982d4f89.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;找系统环境变量：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/404df775e0f1df92adca292f150e2817.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/ba3326c542f0f0e4073bb51b03ed8b04.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;将notepad++.exe所在的路径配置到path环境变量中去：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a300969b9a9314375cb30c8d1e32608f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;这样我就可以在任意的路径下去执行这个命令：（注意：控制命令台需要重启）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/422abd1f5e358db4fb883d2e6bbf7ed9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;path环境变量作用：&lt;/p&gt;
&lt;p&gt;将命令所在的路径配置到path中去，就相当于在计算机中“注册”了一样，以后找这个命令，会直接去你配置的路径下寻找。&lt;/p&gt;
&lt;p&gt;达到了一个效果：在任意的路径下去执行某个命令—》path环境针对整个操作系统而言。&lt;/p&gt;
&lt;h1 id=&#34;第一段程序&#34;&gt;&lt;a href=&#34;#第一段程序&#34; class=&#34;headerlink&#34; title=&#34;第一段程序&#34;&gt;&lt;/a&gt;第一段程序&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】用notepad编写代码：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;public class HelloWorld{&lt;/li&gt;
&lt;li&gt;public static void main(String[] args){&lt;/li&gt;
&lt;li&gt;System.out.println(“hi 这是一段Java程序。。。”);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;记得保存 ctrl+s&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】进行编译：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/43511ae71bacbf69c11b6d85f9c2194a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;发现出错了，分析出错原因：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/298f40fc2221174be201d03882646bf2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;将javac.exe所在的路径 配置到 环境变量path中去，这样我就可以在任意的路径下去执行这个命令：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/efb27daee94a0e9016cf2bd8310c0a16.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;配置好环境变量以后发现代码可以成功编译：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/37a72dfd5ff1298fbecf36cd6f527b25.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;验证：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/8674f3596089c78139529ce26525fe26.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【3】进行解释&amp;#x2F;翻译&amp;#x2F;执行:&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/36f7e5bb879297158184c3d4b245a048.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;上面执行过程成功的原因：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a82f8d964fbb8a2243431f8b013374de.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;程序中常见问题&#34;&gt;&lt;a href=&#34;#程序中常见问题&#34; class=&#34;headerlink&#34; title=&#34;程序中常见问题&#34;&gt;&lt;/a&gt;程序中常见问题&lt;/h1&gt;&lt;p&gt;【1】最低级的错误：单词拼写错误&lt;/p&gt;
&lt;p&gt;【2】要求源文件名字和类名必须一模一样：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/086728a33b6323fa8f6a7b901bb643c5.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;出错：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/310b7744316d2a235c93f190c14121f1.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】所有的标点必须是英文状态下的：&lt;/p&gt;
&lt;p&gt;中文状态：【】（）{} ！；：“‘《》？&lt;/p&gt;
&lt;p&gt;英文状态：[] () {} ! ; : “ &amp;amp;apos; &amp;lt;&amp;gt; ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4】成对编程：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[] {} () &amp;lt;&amp;gt; “” &amp;amp;apos;&amp;amp;apos;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【5】注意缩进&lt;/strong&gt; ：只要遇到{}就进行缩进 —&amp;gt;为了格式好看&lt;/p&gt;
&lt;p&gt;缩进：tab&lt;/p&gt;
&lt;p&gt;向前缩进： shift+tab&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【6】编译：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;javac HelloWorld.java&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【7】执行：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;java HelloWorld&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【8】java中大小写严格区分，大小敏感：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HelloWorld Helloworld&lt;/p&gt;
&lt;p&gt;a A&lt;/p&gt;
&lt;p&gt;public PUBLIC&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【9】我们要写代码：就当做有一个“框子”&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;public class HelloWorld{&lt;/li&gt;
&lt;li&gt;public static void main(String[] args){&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;【10】一个源文件中可以有多个类，只能有一个类被public修饰，源文件的名字必须跟public修饰的那个类名保持一致。&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/2fe1f0ad62885c1a9cc2e8d3b7e8caea.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;多个类会产生独立的字节码文件：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/2007ac8281d6622434662d7ca51549fb.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;执行的时候执行各自独立的字节码文件即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/3f43072f8d79a015c2c78e6e602f90c5.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;编译方式&#34;&gt;&lt;a href=&#34;#编译方式&#34; class=&#34;headerlink&#34; title=&#34;编译方式&#34;&gt;&lt;/a&gt;编译方式&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】方式1：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1a5be2e20f08cca2554764864b52483e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【2】方式2：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a969ad6fbcf2440708966d0ebb881780.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【3】方式3：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/8fadab9466291f8d906886b25466c0b1.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【4】方式4：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在notepad中右键文件 –》打开文件夹所在命令行&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1309fcc40c24dc16194ec6d3d118bcc1.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;扩展：classpath环境变量&#34;&gt;&lt;a href=&#34;#扩展：classpath环境变量&#34; class=&#34;headerlink&#34; title=&#34;扩展：classpath环境变量&#34;&gt;&lt;/a&gt;扩展：classpath环境变量&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】系统有一个环境变量叫：&lt;/strong&gt;classpath，现在我们将classpath环境变量显式的写出来：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/56653738bf699fa4839a1ad7a800d5b5.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;classpath作用：只要你配置到classpath中的路径，在执行java的字节码文件的时候，就会去这个配置的路径下找 对应的字节码文件：&lt;/p&gt;
&lt;p&gt;现在我不配置.\了 我配置：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/45e1d0b90c634f8ae4ad6cd0e6754d6c.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;自从我配置了这个环境变量以后，可以在任意的路径下去执行字节码文件：&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;classpath作用：针对java执行字节码文件而产生的环境变量，只要配置了字节码文件所在的路径以后，那么以后你在任意位置都可以执行对应的字节码文件&lt;/p&gt;
&lt;h1 id=&#34;扩展：JAVA-HOME环境变量&#34;&gt;&lt;a href=&#34;#扩展：JAVA-HOME环境变量&#34; class=&#34;headerlink&#34; title=&#34;扩展：JAVA_HOME环境变量&#34;&gt;&lt;/a&gt;扩展：JAVA_HOME环境变量&lt;/h1&gt;&lt;p&gt;后续我们会用到一个软件：tomcat，在执行startup.bat的时候会出现闪退问题：&lt;/p&gt;
&lt;p&gt;解决： 必须要配置一个环境变量叫：JAVA_HOME&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/d79c197731fc2fabf7d1eeffe68c3010.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;我再次启动才会成功：&lt;/p&gt;
&lt;p&gt;然后我们的path环境变量中刚好可以借助JAVA_HOME里面的内容，通过%%做引入 %JAVA_HOME%\bin&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/eef1348dc722f99221851230d6166e99.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;API&#34;&gt;&lt;a href=&#34;#API&#34; class=&#34;headerlink&#34; title=&#34;API&#34;&gt;&lt;/a&gt;API&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/1cee5f8ef4a6dd22f4c2427ac9f9586f.png&#34; class=&#34;&#34;&gt;


&lt;ul&gt;
&lt;li&gt;JDK帮助文档&lt;/li&gt;
&lt;li&gt;SUN公司为JDK工具包提供了一整套文档资料,我们习惯上称之为JDK文档。&lt;/li&gt;
&lt;li&gt;JDK文档中提供了Java中的各种技术的详细资料,以及JDK中提供的各种类的帮助说明。&lt;/li&gt;
&lt;li&gt;JDk文档是Java语言的完整说明,大多数书籍中的类的介绍都要参照它来完成,它是编程者经常查阅的资料&lt;/li&gt;
&lt;li&gt;如何理解API：就当做是一个“字典”，“使用手册”，API就相当于是一个电子的帮助文档，可以帮我们查看JDK提供的类的信息，平时查看的时候可结合百度一起看。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实API没有什么神奇的，就是一个电子文档而已，帮助我们查看JAVA中涉及到的一些技能点：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/82e7900da21d11f6aa3c7c76599b84ed.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;代码量统计工具&#34;&gt;&lt;a href=&#34;#代码量统计工具&#34; class=&#34;headerlink&#34; title=&#34;代码量统计工具&#34;&gt;&lt;/a&gt;代码量统计工具&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/7e64582ee7bad7b2c12ddece5c19f06b.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h1&gt;&lt;p&gt;为了方便程序的阅读，Java语言允许程序员在程序中写上一些说明性的文字，用来提高程序的可读性，这些文字性的说明就称为注释。&lt;/p&gt;
&lt;p&gt;注释不会出现在字节码文件中，即Java编译器编译时会跳过注释语句。&lt;/p&gt;
&lt;p&gt;在Java中根据注释的功能不同，主要分为单行注释、多行注释和文档注释。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单行注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单行注释使用“&amp;#x2F;&amp;#x2F;”开头，“&amp;#x2F;&amp;#x2F;”后面的单行内容均为注释。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多行注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;多行注释以“&amp;#x2F;*”开头以“*&amp;#x2F;”结尾，在“&amp;#x2F;*”和“*&amp;#x2F;”之间的内容为注释，我们也可以使用多行注释作为行内注释。但是在使用时要注意，多行注释不能嵌套使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档注释&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文档注释以“&amp;#x2F;**”开头以“*&amp;#x2F;”结尾， 注释中包含一些说明性的文字及一些JavaDoc标签（后期写项目时，可以生成项目的API）&lt;/p&gt;
&lt;h2 id=&#34;单行注释和多行注释&#34;&gt;&lt;a href=&#34;#单行注释和多行注释&#34; class=&#34;headerlink&#34; title=&#34;单行注释和多行注释&#34;&gt;&lt;/a&gt;单行注释和多行注释&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;下面是一段标准代码&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;这是代码的“框子”，当前阶段你可以当做一个模板&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;其实这就是一个类，类的名字是HelloWorld，这个名字可以随便起，但是一般首字母大写，驼峰命名，见名知意&lt;/li&gt;
&lt;li&gt;public class HelloWorld{&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;下面是一个main方法，方法的格式是固定的&lt;/li&gt;
&lt;li&gt;public static void main(String[] args){&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;下面这句话的作用：将双引号中的内容进行原样输出&lt;/li&gt;
&lt;li&gt;&amp;#x2F;*&lt;/li&gt;
&lt;li&gt;这是多行注释&lt;/li&gt;
&lt;li&gt;每行都可以写&lt;/li&gt;
&lt;li&gt;单行注释和多行注释，按照你自己的需求去使用即可&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;li&gt;System.out.println(“hi….java”);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;1.注释不会参与编译，编译后产生的字节码文件中不会有注释的内容&lt;/p&gt;
&lt;p&gt;2.注释的作用：&lt;/p&gt;
&lt;p&gt;（1）注释就起到了标注解释的作用，提高代码的可读性，方便自己，方便他人–》是一个非常良好，非常专业的习惯！！！&lt;/p&gt;
&lt;p&gt;（2）方便代码的调试：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;public class HelloWorld2{&lt;/li&gt;
&lt;li&gt;public static void main(String[] args){&lt;/li&gt;
&lt;li&gt;System.out.println(“hi….java1”);&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;System.out.println(“hi….java2”)&lt;/li&gt;
&lt;li&gt;System.out.println(“hi….java3”);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;文档注释&#34;&gt;&lt;a href=&#34;#文档注释&#34; class=&#34;headerlink&#34; title=&#34;文档注释&#34;&gt;&lt;/a&gt;文档注释&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&amp;#x2F;**&lt;/li&gt;
&lt;li&gt;文档注释&lt;/li&gt;
&lt;li&gt;@author zhaoss&lt;/li&gt;
&lt;li&gt;@version 1.0&lt;/li&gt;
&lt;li&gt;这是我们第一章文档注释的代码，比较重要&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;li&gt;public class HelloWorld3{&lt;/li&gt;
&lt;li&gt;public static void main(String[] args){&lt;/li&gt;
&lt;li&gt;System.out.println(“hi….java1”);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;**&lt;/li&gt;
&lt;li&gt;@param name 姓名&lt;/li&gt;
&lt;li&gt;@param age 年龄&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;li&gt;public void eat(String name,int age){&lt;/li&gt;
&lt;li&gt;System.out.println(“hello”);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般文档注释可以配合：jdk提供的工具javadoc.exe来一起使用，通过javadoc.exe可以对文档注释进行解析，生成一套以网页文件形式体现的该程序的说明文档。（自定义类对应的API）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/5f36c3576cf9a48034a4b4ddd4ddf78b.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/239a7203195d3aa10f754e0cb4886fff.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/34f6260e1d8116cec2ddc29382b5d49c.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/63cfa40391722ade39f74d2cbdb5315f.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;反编译工具的使用&#34;&gt;&lt;a href=&#34;#反编译工具的使用&#34; class=&#34;headerlink&#34; title=&#34;反编译工具的使用&#34;&gt;&lt;/a&gt;反编译工具的使用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编译&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源代码—–&amp;gt;class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反编译&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;class—-&amp;gt;源代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;反编译工具&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;jd-gui.exe&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/ddc58027ebdd9a708cbf6ff40e6f525b.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;本章最后一段代码&#34;&gt;&lt;a href=&#34;#本章最后一段代码&#34; class=&#34;headerlink&#34; title=&#34;本章最后一段代码&#34;&gt;&lt;/a&gt;本章最后一段代码&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;public class HiWorld{&lt;/li&gt;
&lt;li&gt;public static void main(String[] args){&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;进行自我介绍：&lt;/li&gt;
&lt;li&gt;System.out.print(“姓名：”);&lt;/li&gt;
&lt;li&gt;System.out.print(“\t丽丽\n”);&lt;/li&gt;
&lt;li&gt;System.out.print(“职业：”);&lt;/li&gt;
&lt;li&gt;System.out.print(“\t学生”);&lt;/li&gt;
&lt;li&gt;&amp;#x2F;*&lt;/li&gt;
&lt;li&gt;(1)System.out.print和System.out.println区别联系：&lt;/li&gt;
&lt;li&gt;System.out.print ： 将双引号中内容原样输出，不换行&lt;/li&gt;
&lt;li&gt;System.out.println ：将双引号中内容原样输出，换行&lt;/li&gt;
&lt;li&gt;(2)转义字符：&lt;/li&gt;
&lt;li&gt;\就是转义字符：作用：将后面普通的字母转换为特殊含义&lt;/li&gt;
&lt;li&gt;\n : 换行&lt;/li&gt;
&lt;li&gt;\t : 距离前面有一个制表符位置&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;System.out.println();&amp;#x2F;&amp;#x2F;换行&lt;/li&gt;
&lt;li&gt;System.out.println(“1111111111111111111”);&lt;/li&gt;
&lt;li&gt;System.out.println(“11111111\t2222”);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;扩展面试题：JDK，JRE，JVM的区别&#34;&gt;&lt;a href=&#34;#扩展面试题：JDK，JRE，JVM的区别&#34; class=&#34;headerlink&#34; title=&#34;扩展面试题：JDK，JRE，JVM的区别&#34;&gt;&lt;/a&gt;扩展面试题：JDK，JRE，JVM的区别&lt;/h1&gt;&lt;p&gt;JDK,JRE,JVM的关系:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/63bfd9d6c63ebea3b5f9cf17f98644a4.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;先说JDK和JRE:&lt;/p&gt;
&lt;p&gt;初学JAVA很容易被其中的很多概念弄的傻傻分不清楚，首先从概念上理解一下吧，JDK（Java Development Kit）简单理解就是Java开发工具包，JRE(Java Runtime Enviroment)是Java的运行环境，JVM( java virtual machine)也就是常常听到Java虚拟机。JDK是面向开发者的，JRE是面向使用JAVA程序的用户，上面只是简单的区别&lt;/p&gt;
&lt;p&gt;通过上图发现发现有两个JRE文件夹，如果细看里面的内容基本上是一样的，如果是只是Java程序使用者，那么只会有最外层的那个JRE目录，JDK中是JRE自带的，你如果安装了JDK必然里面会有一个JRE.那么问题来了，为什么会有两套JRE呢？&lt;/p&gt;
&lt;p&gt;从侧面证明:&lt;/p&gt;
&lt;p&gt;利用javac.exe进行编译:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/9c783ba968cea227029eece87e12f9fa.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;然后我将C:\Program Files\Java\jdk1.8.0_151\lib\tools.jar改个名字,再去编译:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/43325d9c5156144d0eeb92d48c4ab23c.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;证明:dt.jar和tools.jar是两个java最基本的包，里面包含了从java最重要的lang包到各种高级功能如可视化的swing包，是java必不可少的。而path下面的bin里面都是java的可执行的编译器及其工具，如java，javadoc等,报错的原因就是输入的javac的命令不是去JDK中bin目录去找的javac.exe，而是去JDK中lib目录中的tools.jar中com.sun.tools.javac.Main中执行，因此javac.exe只是一个包装器（Wrapper），存在的目的是为了让开发者免于输入过长的指命。这个时候发现JDK里的工具几乎是用Java所编写，同属于Java应用程序，因此要使用JDK所附的工具来开发Java程序，所以自身需要附一套JRE才能运行。上图中与jdk同级目录下的JRE就是用来运行一般Java程序用的。&lt;/p&gt;
&lt;p&gt;两套JRE运行的时候究竟运行哪一个呢，这个时候JDK中java.exe先从自身目录中找，然后父级目录中找，如果都没有就去注册表中找&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/774e13c2fe05e00b2b88485d66878cb5.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;再说JRE和JVM:&lt;/p&gt;
&lt;p&gt;JVM – java virtual machineJVM就是我们常说的java虚拟机，它是整个java实现跨平台的最核心的部分，所有的java程序会首先被编译为.class的类文件，这种类文件可以在虚拟机上执行，class文件并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行，类似于C#中的CLR。&lt;/p&gt;
&lt;p&gt;JVM不能单独搞定class的执行，解释class的时候JVM需要调用解释所需要的类库lib。在JDK下面的的jre目录里面有两个文件夹bin和lib,在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/a6a57ddcf4dbbce6ec083f177185b938.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;JVM+Lib&amp;#x3D;JRE，如果讲的具体点就是bin目录下的jvm.dll文件， jvm.dll无法单独工作，当jvm.dll启动后，会使用explicit的方法(就是使用Win32 API之中的LoadLibrary()与GetProcAddress()来载入辅助用的动态链接库)，而这些辅助用的动态链接库(.dll)都必须位 于jvm.dll所在目录的父目录之中。因此想使用哪个JVM，只需要设置PATH，指向JRE所在目录下的jvm.dll。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC1%E7%AB%A0%E5%88%9D%E8%AF%86JAVA/3b5991d32e4ea2cdd83dfc682380f30f.png&#34; class=&#34;&#34;&gt;

</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC2%E7%AB%A0_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
        <title>第2章_数据类型</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC2%E7%AB%A0_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
        <content type="html">&lt;h1 id=&#34;标识符&#34;&gt;&lt;a href=&#34;#标识符&#34; class=&#34;headerlink&#34; title=&#34;标识符&#34;&gt;&lt;/a&gt;标识符&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】标识符：读音 biao zhi fu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】什么是标识符？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;包，类，变量，方法…..等等,只要是起名字的地方,那个&lt;strong&gt;名字&lt;/strong&gt;就是标识符&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】标识符定义规则：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.四个可以（组成部分）：数字，字母，下划线_，美元符号$&lt;/p&gt;
&lt;p&gt;注意：字母概念比较宽泛，指的是英文字母，汉字，日语，俄语……&lt;/p&gt;
&lt;p&gt;但是我们一般起名字尽量使用英文字母&lt;/p&gt;
&lt;p&gt;2.两个不可以：不可以以数字开头，不可以使用java中的关键字&lt;/p&gt;
&lt;p&gt;3.见名知意：增加可读性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.大小写敏感&lt;/strong&gt;： int a ; int A;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5.遵照驼峰命名：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;类名：首字母大写，其余遵循驼峰命名&lt;/p&gt;
&lt;p&gt;方法名，变量名：首字母小写，其余遵循驼峰命名&lt;/p&gt;
&lt;p&gt;包名：全部小写，不遵循驼峰命名&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6.长度无限制，但是不建议太长 asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;关键字&#34;&gt;&lt;a href=&#34;#关键字&#34; class=&#34;headerlink&#34; title=&#34;关键字&#34;&gt;&lt;/a&gt;关键字&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;关键字：&lt;/strong&gt;被JAVA语言赋予了特殊含义，用作专门用途的单词&lt;/p&gt;
&lt;p&gt;特点：JAVA中所有关键字都为小写&lt;/p&gt;
&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3R1dG9yaWFsL2phdmEvbnV0c2FuZGJvbHRzL19rZXl3b3Jkcy5odG1s&#34;&gt;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html&lt;/span&gt;&lt;/p&gt;






&lt;h1 id=&#34;变量和常量&#34;&gt;&lt;a href=&#34;#变量和常量&#34; class=&#34;headerlink&#34; title=&#34;变量和常量&#34;&gt;&lt;/a&gt;变量和常量&lt;/h1&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;丽丽的年龄：去年17岁，今年18岁，明年19岁&lt;/p&gt;
&lt;p&gt;年龄：17–》18—》19 –》值不断变化&lt;/p&gt;
&lt;p&gt;年龄—》变量&lt;/p&gt;
&lt;p&gt;常量： 17 ， 18 ， 19 —-》 常量中的字面常量&lt;/p&gt;
&lt;h2 id=&#34;字面常量&#34;&gt;&lt;a href=&#34;#字面常量&#34; class=&#34;headerlink&#34; title=&#34;字面常量&#34;&gt;&lt;/a&gt;字面常量&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;常量分为两种：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常量通常指的是一个固定的值，例如：1、2、3、’a’、’b’、true、false、”helloWorld”等。&lt;/p&gt;
&lt;p&gt;在Java语言中，主要是利用关键字final来定义一个常量。 常量一旦被初始化后不能再更改其值。&lt;/p&gt;
&lt;p&gt;为了更好的区分和表述，一般将1、2、3、’a’、’b’、true、false、”helloWorld”等称为字面常量，而使用final修饰的PI等称为符号常量（字符常量）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字面常量的类型：&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;注意：逻辑常量就两个值，一个是true，一个是false&lt;/p&gt;
&lt;h2 id=&#34;变量&#34;&gt;&lt;a href=&#34;#变量&#34; class=&#34;headerlink&#34; title=&#34;变量&#34;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;变量本质上就是代表一个”可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可通过变量名来访问“对应的存储空间”，从而操纵这个“存储空间”存储的值。Java是一种强类型语言，每个变量都必须声明其数据类型。变量的数据类型决定了变量占据存储空间的大小。 比如，int a&amp;#x3D;3; 表示a变量的空间大小为4个字节。变量作为程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储空间。&lt;/p&gt;
&lt;p&gt;【1】变量声明格式：&lt;/p&gt;
&lt;p&gt;type varName [&amp;#x3D;value][,varName[&amp;#x3D;value]…]; &amp;#x2F;&amp;#x2F;[ ]中的内容为可选项，即可有可无&lt;/p&gt;
&lt;p&gt;数据类型 变量名 [&amp;#x3D;初始值] [,变量名 [&amp;#x3D;初始值]…];&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;int age &amp;#x3D; 19 , age2 &amp;#x3D; 90 ;&lt;/p&gt;
&lt;p&gt;int age,age2;&lt;/p&gt;
&lt;p&gt;【2】变量的声明：&lt;/p&gt;
&lt;p&gt;（1）如果你只定义一个变量，没有给变量进行赋值的话，那么其实这个变量相当于没有定义：&lt;/p&gt;



&lt;p&gt;（2）变量如果没有进行赋值的话，那么使用的时候会出错，告诉你：尚未初始化变量：&lt;/p&gt;



&lt;p&gt;【3】变量的赋值：&lt;/p&gt;



&lt;p&gt;我们自己定义的时候直接就可以用一句话定义：&lt;/p&gt;
&lt;p&gt;int age &amp;#x3D; 10;&lt;/p&gt;
&lt;p&gt;变量的值可以更改：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //变量的声明（定义变量）（以年龄为案例讲解）
        //java是一个强类型的语言，只要声明变量就必须定义类型：定义整数类型
        int age ; //定义一个整数类型的变量，变量名字为age
        //对变量进行赋值操作：
        age = 10; //变量名字为age，具体的值为10
        age = 12;
        age = 20;
        age = age + 4;
        age = 9;
        age = 9;
        System.out.println(age);
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;变量不可以重复定义：&lt;/p&gt;



&lt;p&gt;【4】变量的使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //变量的声明（定义变量）（以年龄为案例讲解）
        //java是一个强类型的语言，只要声明变量就必须定义类型：定义整数类型
        int age ; //定义一个整数类型的变量，变量名字为age
        //对变量进行赋值操作：
        age = 10; //变量名字为age，具体的值为10
        age = 12;
        age = 20;
        age = age + 4;
        age = 9;
        age = 9;
        System.out.println(age);
        System.out.println(age-2);
        System.out.println(age+10);
        int num = age + 66;
        System.out.println(num);
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;扩展：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar02&amp;#123;
    public static void main(String[] args)&amp;#123;
        int a = 10;
        int b = 20;
        int c = a + b ;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在对上述代码进行“反编译过程”“反汇编过程”&lt;/p&gt;






&lt;p&gt;【5】变量的内存：&lt;/p&gt;



&lt;p&gt;【6】习题：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar03&amp;#123;
    public static void main(String[] args)&amp;#123;
        int num1 = 10;
        int num2 = 20;
        num1 = num2;
        num2 = num2 + 10;
        num1 = num2 - 10;
        num2 = num1;
        System.out.println(&amp;quot;num1=&amp;quot;+num1);
        System.out.println(&amp;quot;num2=&amp;quot;+num2);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内存分析：&lt;/p&gt;



&lt;p&gt;结果：&lt;/p&gt;



&lt;p&gt;【7】变量的作用域：&lt;/p&gt;
&lt;p&gt;作用域指的就是作用范围，变量在什么范围中有效&lt;/p&gt;
&lt;p&gt;作用范围就是离它最近的{}&lt;/p&gt;
&lt;p&gt;备注：一会我们写的代码，不要去运行，会出错&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/\*
    局部变量：定义在方法中
    成员变量：定义在类中，方法外
    \*/
public class TestVar04&amp;#123;
    int b = 20;
    public static void main(String[] args)&amp;#123;
        System.out.println(a);//no
        int a = 10;
        System.out.println(a);//yes
        System.out.println(b);//yes
        &amp;#123;
            int c = 40;
            System.out.println(c);//yes
            int a = 50;//属于变量的重复定义
        &amp;#125;
        System.out.println(c);//no
    &amp;#125;

    public void eat()&amp;#123;
        System.out.println(b);//yes
        System.out.println(a);//no
        int a = 30;//不是变量的重复定义
        System.out.println(a);//yes
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;基本数据类型&#34;&gt;&lt;a href=&#34;#基本数据类型&#34; class=&#34;headerlink&#34; title=&#34;基本数据类型&#34;&gt;&lt;/a&gt;基本数据类型&lt;/h1&gt;&lt;p&gt;Java是一种强类型语言，每个变量都必须声明其数据类型。&lt;/p&gt;
&lt;p&gt;Java的数据类型可分为两大类：基本数据类型（primitive data type）和引用数据类型（reference data type）。&lt;/p&gt;



&lt;p&gt;PS:巧妙记忆：除了基本数据类型以外的所有类型都属于引用数据类型，本章重点：基本数据类型&lt;/p&gt;
&lt;h2 id=&#34;整数类型&#34;&gt;&lt;a href=&#34;#整数类型&#34; class=&#34;headerlink&#34; title=&#34;整数类型&#34;&gt;&lt;/a&gt;整数类型&lt;/h2&gt;&lt;h3 id=&#34;整数类型常量&#34;&gt;&lt;a href=&#34;#整数类型常量&#34; class=&#34;headerlink&#34; title=&#34;整数类型常量&#34;&gt;&lt;/a&gt;整数类型常量&lt;/h3&gt;&lt;p&gt;十进制整数，如：99, -500, 0&lt;/p&gt;
&lt;p&gt;八进制整数，要求以 0 开头，如：015&lt;/p&gt;
&lt;p&gt;十六进制数，要求 0x 或 0X 开头，如：0x15&lt;/p&gt;
&lt;p&gt;二进制：要求0b或者0B开头，如：0b11&lt;/p&gt;
&lt;p&gt;几进制：就是逢几进1的问题：&lt;/p&gt;
&lt;p&gt;平时实际生活中用的最多的是：十进制&lt;/p&gt;
&lt;p&gt;计算机用二进制最多&lt;/p&gt;



&lt;p&gt;扩展：进制转换问题&lt;/p&gt;
&lt;p&gt;【1】二进制转换为十进制：&lt;/p&gt;
&lt;p&gt;二进制： 1101&lt;/p&gt;
&lt;p&gt;1*2^3 + 1*2^2 + 0*2^1 + 1*2^0&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 8 + 4 + 0 + 1&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 13&lt;/p&gt;
&lt;p&gt;【2】十进制转换为二进制：&lt;/p&gt;
&lt;p&gt;十进制 13&lt;/p&gt;



&lt;p&gt;【3】八进制转换十进制：&lt;/p&gt;
&lt;p&gt;八进制： 16&lt;/p&gt;
&lt;p&gt;1*8^1 + 6*8^0&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 8 + 6&lt;/p&gt;
&lt;p&gt;&amp;#x3D;14&lt;/p&gt;
&lt;p&gt;【4】十进制转换为八进制：&lt;/p&gt;
&lt;p&gt;十进制14：&lt;/p&gt;



&lt;p&gt;【5】八进制转换为十六进制：&lt;/p&gt;
&lt;p&gt;把十进制当做一个中转站：&lt;/p&gt;
&lt;p&gt;八进制—》十进制—》十六进制&lt;/p&gt;
&lt;p&gt;实际上根本不用自己转换这么麻烦：我们可以直接用系统中提供给我们的计算器：&lt;/p&gt;



&lt;h3 id=&#34;整数类型变量&#34;&gt;&lt;a href=&#34;#整数类型变量&#34; class=&#34;headerlink&#34; title=&#34;整数类型变量&#34;&gt;&lt;/a&gt;整数类型变量&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;整型数据类型：&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;比如：byte的右侧表数范围127怎么算出来的？&lt;/p&gt;
&lt;p&gt;byte: 1字节 &amp;#x3D; 8位&lt;/p&gt;
&lt;p&gt;二进制：01111111&lt;/p&gt;
&lt;p&gt;1*2^6 + 1*2^5 + 1*2^4 + 1*2^3 + 1*2^2 + 1*2^1 + 1*2^0&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 64 + 32 + 16 +8 +4 + 2 +1&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 127&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar05&amp;#123;
    public static void main(String[] args)&amp;#123;
        //定义整数类型的变量：
        //给变量赋值的时候，值可以为不同进制的：
        int num1 = 12 ;//默认情况下赋值就是十进制的情况
        System.out.println(num1);
        int num2 = 012;//前面加上0，这个值就是八进制的
        System.out.println(num2);
        int num3 = 0x12;//前面加上0x或者0X，这个值就是十六进制的
        System.out.println(num3);
        int num4 = 0b10;//前面加上0b或者0B,这个值就是二进制的
        System.out.println(num4);
        
        //定义byte类型的变量：
        byte b = 126;//定义了一个byte类型的变量，名字叫b，赋值为12
        System.out.println(b);
        //注意：超范围的赋值会报错。
        short s = 30000;
        System.out.println(s);
        int i = 1234;
        System.out.println(i);
        //整数类型默认就是int类型的，所以12345678910是一个int类型的数，对于int类型来说，它超出范围了
        //要想把一个数给long类型变量，那么后面加上L(推荐)或者l就可以了
        long num5 = 12345678910L;
        System.out.println(num5);
        //注意：只有这个数超出int类型的范围了后面才需要加上L，否则无需加L也可以赋值给long类型：
        long num6 = 12;
        System.out.println(num6);
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;浮点类型&#34;&gt;&lt;a href=&#34;#浮点类型&#34; class=&#34;headerlink&#34; title=&#34;浮点类型&#34;&gt;&lt;/a&gt;浮点类型&lt;/h2&gt;&lt;h3 id=&#34;浮点类型常量&#34;&gt;&lt;a href=&#34;#浮点类型常量&#34; class=&#34;headerlink&#34; title=&#34;浮点类型常量&#34;&gt;&lt;/a&gt;浮点类型常量&lt;/h3&gt;&lt;p&gt;（1）十进制数形式，例如:&lt;/p&gt;
&lt;p&gt;3.14 314.0 0.314&lt;/p&gt;
&lt;p&gt;（2）科学记数法形式，如&lt;/p&gt;
&lt;p&gt;314e2 314E2 (E的大小写没有区分) 314E-2&lt;/p&gt;
&lt;p&gt;double f &amp;#x3D; 314e2; &amp;#x2F;&amp;#x2F;314*10^2–&amp;gt;31400.0&lt;/p&gt;
&lt;p&gt;double f2 &amp;#x3D; 314e-2; &amp;#x2F;&amp;#x2F;314*10^(-2)–&amp;gt;3.14&lt;/p&gt;
&lt;h3 id=&#34;浮点类型变量&#34;&gt;&lt;a href=&#34;#浮点类型变量&#34; class=&#34;headerlink&#34; title=&#34;浮点类型变量&#34;&gt;&lt;/a&gt;浮点类型变量&lt;/h3&gt;&lt;p&gt;float类型又被称作单精度类型，尾数可以精确到7位有效数字，在很多情况下，float类型的精度很难满足需求。&lt;/p&gt;
&lt;p&gt;而double表示这种类型的数值精度约是float类型的两倍，又被称作双精度类型，绝大部分应用程序都采用double类型。&lt;/p&gt;
&lt;p&gt;float类型的数值有一个后缀F或者f ，没有后缀F&amp;#x2F;f的浮点数值默认为double类型。&lt;/p&gt;
&lt;p&gt;也可以在浮点数值后添加后缀D或者d， 以明确其为double类型。&lt;/p&gt;



&lt;p&gt;PS：有效数字指的是从左开始第一个不为0的数到最后一个数&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //浮点类型的常量有两种形式：
        //十进制形式：
        double num1 = 3.14;
        System.out.println(num1);
        //科学计数法形式：
        double num2 = 314E-2;
        System.out.println(num2);
        
        //浮点类型的变量：
        //注意：浮点型默认是double类型的，要想将一个double类型的数赋给float类型，必须后面加上F或者f
        float f1 = 3.14234567898623F;
        System.out.println(f1);
        //注意：double类型后面可以加D或者d，但是一般我们都省略不写
        double d1 = 3.14234567898623D;
        System.out.println(d1);
        
        //注意：我们最好不要进行浮点类型的比较：
        float f2 = 0.3F;
        double d2 = 0.3;
        System.out.println(f2==d2);
        /\*
            区别：
            = 赋值运算： 将等号右侧的值赋给等号左侧
            == 判断==左右两侧的值是否相等 ：结果要么相等 要么不相等
            ==运算符的结果就是要么是true，要么是false
            \*/
            
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;字符类型&#34;&gt;&lt;a href=&#34;#字符类型&#34; class=&#34;headerlink&#34; title=&#34;字符类型&#34;&gt;&lt;/a&gt;字符类型&lt;/h2&gt;&lt;p&gt;【1】Java中使用单引号来表示字符常量，字符型在内存中占2个字节。&lt;/p&gt;
&lt;p&gt;char 类型用来表示在Unicode编码表中的字符。Unicode编码被设计用来处理各种语言的文字，它占2个字节，可允许有65536个字符。&lt;/p&gt;
&lt;p&gt;【2】转义字符：&lt;/p&gt;



&lt;p&gt;【3】ASCII表：&lt;/p&gt;



&lt;p&gt;【4】Unicode编码表：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3NndW8vcC83NDAxODc0Lmh0bWw=&#34;&gt;https://www.cnblogs.com/csguo/p/7401874.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码1：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar07&amp;#123;
    public static void main(String[] args)&amp;#123;
        //定义字符类型的变量：
        char ch1 = &amp;#39;a&amp;#39;;
        System.out.println(ch1);
        char ch2 = &amp;#39;A&amp;#39;;
        System.out.println(ch2);
        char ch3 = &amp;#39;4&amp;#39;;
        System.out.println(ch3);
        char ch4 = &amp;#39;中&amp;#39;;
        System.out.println(ch4);
        char ch5 = &amp;#39;?&amp;#39;;
        System.out.println(ch5);
        //java中无论：字母，数字，符号，中文都是字符类型的常量，都占用2个字节。
        char ch6 = &amp;#39; &amp;#39;;
        System.out.println(ch6);
        //字符类型：单引号引起来的单个字符
        System.out.println(&amp;quot;--------------------------------&amp;quot;);
        /\*
            转义字符：
            \\将后面的普通字符转换为特殊含义
            \*/
            char ch7 = &amp;#39;\\n&amp;#39;;
        System.out.println(&amp;quot;aaa&amp;quot;+ch7+&amp;quot;bbb&amp;quot;);
        
        System.out.println(&amp;quot;aaa\\nbbb&amp;quot;);// \\n 换行
        
        System.out.println(&amp;quot;aaaaaaa\\tbbb&amp;quot;); // \\t 制表符
        
        System.out.println(&amp;quot;aaa\\bbbb&amp;quot;);//aabbb \\b 向前退一格
        System.out.println(&amp;quot;aaa\\rbbb&amp;quot;);//bbb \\r 将光标到本行开头 ：回车
        
        System.out.println(&amp;quot;\\&amp;quot;java\\&amp;quot;&amp;quot;); // \\&amp;quot; 将双引号原样输出 \\&amp;#39; 将单引号原样输出 \\\\ 将\\原样输出
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar08&amp;#123;
    public static void main(String[] args)&amp;#123;
        char ch1 = &amp;#39;A&amp;#39;;
        System.out.println(ch1);//A
        System.out.println(ch1+90);//155
        System.out.println(155-ch1);//90
        //char类型我们看到的样子就是它本身的字面常量,但是底层在进行计算的时候，实际上是按照一个码进行计算的。
        //这个码就是ASCII
        //之前说char类型是按照Unicode码表进行存储的 (Unicode兼容了ASCII码，Unicode的前128位置ASCII)
        
        char ch2 = &amp;#39;中&amp;#39;;
        System.out.println(ch2);// 中
        System.out.println(ch2+90);// 20103
        System.out.println(20103-ch2);// 90
        
        //转换：
        int num1 = (int)ch2;
        System.out.println(num1);//20013
        
        char ch = (char)20013;
        System.out.println(ch);
        
        int num2 = &amp;#39;中&amp;#39;;
        char ch5 = 20013;
        System.out.println(ch5);
        
        //面试题：
        char ch6 = &amp;#39;2&amp;#39;+2;
        System.out.println(ch6);//&amp;#39;4&amp;#39;---\&amp;gt;4
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;编码和字符集&#34;&gt;&lt;a href=&#34;#编码和字符集&#34; class=&#34;headerlink&#34; title=&#34;编码和字符集&#34;&gt;&lt;/a&gt;编码和字符集&lt;/h3&gt;&lt;p&gt;【1】什么是编码？&lt;/p&gt;



&lt;p&gt;【2】通过生活案例：&lt;/p&gt;



&lt;p&gt;【3】由权威机构形成的编码表才可以称之为：字符集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ASCII&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;英文字符集&lt;/p&gt;
&lt;p&gt;用一个字节的7位表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IOS8859-1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;西欧字符集&lt;/p&gt;
&lt;p&gt;用一个字节的8位表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GB2312&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简体中文字符集&lt;/p&gt;
&lt;p&gt;最多使用两个字节编码&lt;/p&gt;
&lt;p&gt;PS：中文：2个字节&lt;/p&gt;
&lt;p&gt;GB2312兼容了ASCII中的字符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GBK&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GB2312的升级，加入了繁体字&lt;/p&gt;
&lt;p&gt;最多使用两个字节编码&lt;/p&gt;
&lt;p&gt;疑问：&lt;/p&gt;



&lt;p&gt;首位如果是0：一个字节代码代表一个字符&lt;/p&gt;
&lt;p&gt;首位如果是1：那么一个字节不够，要加上后面的字节才能完整的表示一个字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unicode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;国际通用字符集，融合了目前人类使用的所有字符。为每个字符分配唯一的字符码。&lt;/p&gt;
&lt;p&gt;退出了UTF标准：&lt;/p&gt;
&lt;p&gt;三种编码方案： UTF-8，UTF-16,UTF-32&lt;/p&gt;
&lt;p&gt;以UTF-8为案例讲解：&lt;/p&gt;
&lt;p&gt;中文： 珊 —》Unicode ： 29642&lt;/p&gt;






&lt;p&gt;底层存储：&lt;/p&gt;



&lt;p&gt;UTF-8标准最多可以用6个字节表示：&lt;/p&gt;



&lt;p&gt;以后我们用的最多的就是UTF-8.&lt;/p&gt;
&lt;h3 id=&#34;解释乱码问题&#34;&gt;&lt;a href=&#34;#解释乱码问题&#34; class=&#34;headerlink&#34; title=&#34;解释乱码问题&#34;&gt;&lt;/a&gt;解释乱码问题&lt;/h3&gt;


&lt;p&gt;用记事本选择编码方法的时候一般要选择为ANSI—》获取当前操作系统的编码格式：GBK&lt;/p&gt;
&lt;h2 id=&#34;布尔类型&#34;&gt;&lt;a href=&#34;#布尔类型&#34; class=&#34;headerlink&#34; title=&#34;布尔类型&#34;&gt;&lt;/a&gt;布尔类型&lt;/h2&gt;&lt;p&gt;boolean类型有两个常量值，true和false，在内存中占一位（不是一个字节），不可以使用 0 或非 0 的整数替代 true 和 false ，这点和C语言不同。 boolean 类型用来判断逻辑条件，一般用于程序流程控制 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar09&amp;#123;
    public static void main(String[] args)&amp;#123;
        //创建一个布尔类型的变量：
        boolean flag1 = true;
        System.out.println(flag1);
        boolean flag2 = false;
        System.out.println(flag2);
        boolean flag3 = 5==9;
        System.out.println(flag3);
        boolean flag4 = 5\&amp;lt;9;
        System.out.println(flag4);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;基本数据类型的转换&#34;&gt;&lt;a href=&#34;#基本数据类型的转换&#34; class=&#34;headerlink&#34; title=&#34;基本数据类型的转换&#34;&gt;&lt;/a&gt;基本数据类型的转换&lt;/h2&gt;&lt;p&gt;【1】什么是类型转换：&lt;/p&gt;
&lt;p&gt;在赋值运算或者算数运算的时候，要求数据类型一致，就要进行类型的转换。&lt;/p&gt;
&lt;p&gt;【2】类型转换的种类：&lt;/p&gt;
&lt;p&gt;自动转换，强制转换&lt;/p&gt;
&lt;p&gt;【3】内存演示：&lt;/p&gt;



&lt;p&gt;【4】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestVar10&amp;#123;
    public static void main(String[] args)&amp;#123;
        //类型转换的两种形式：
        double d = 6;//int--\&amp;gt;double 自动类型转换
        System.out.println(d);
        int i = (int)6.5;//double---\&amp;gt;int 强制类型转换 （强转）
        System.out.println(i);
        
        //在同一个表达式中，有多个数据类型的时候，应该如何处理：
        //多种数据类型参与运算的时候，整数类型，浮点类型，字符类型都可以参与运算，唯独布尔类型不可以参与运算。
        //double d2 = 12+1294L+8.5F+3.81+&amp;#39;a&amp;#39;+true;
        double d2 = 12+1294L+8.5F+3.81+&amp;#39;a&amp;#39;;
        System.out.println(d2);
        /\*
            类型级别：(从低到高的)
            byte,short,char--\&amp;gt;int---\&amp;gt;long---\&amp;gt;float---\&amp;gt;double
            级别用来做什么？当一个表达式中有多种数据类型的时候，要找出当前表达式中级别最高的那个类型，然后
            其余的类型都转换为当前表达式中级别最高的类型进行计算。
            double d2 = 12+1294L+8.5F+3.81+&amp;#39;a&amp;#39;;
        = 12.0+1294.0+8.5+3.81+97.0
            \*/
            int i2 = (int)(12+1294L+8.5F+3.81+&amp;#39;a&amp;#39;);
        System.out.println(i2);
        /\*
            在进行运算的时候：
            左=右 : 直接赋值
                左\&amp;lt;右 ：强转
                左\&amp;gt;右 ：直接自动转换
                \*/
                
                //以下情况属于特殊情形：对于byte，short，char类型来说，只要在他们的表数范围中，赋值的时候就不需要进行
                //强转了直接赋值即可。
                byte b = 12;
        System.out.println(b);
        byte b2 = (byte)270;
        System.out.println(b2);
        
        
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;练习：final，字符常量，Scanner的使用&#34;&gt;&lt;a href=&#34;#练习：final，字符常量，Scanner的使用&#34; class=&#34;headerlink&#34; title=&#34;练习：final，字符常量，Scanner的使用&#34;&gt;&lt;/a&gt;练习：final，字符常量，Scanner的使用&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;//形象理解：在java.util下将Scanner拿过来用
public class TestVar11&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现功能：求圆的周长和面积
        //【1】提取变量：提取变量，就是为了一劳永逸，以后只要改变变量的值，下面只要用到这个变量的地方，取值也都发生变化了
        //【2】一个变量被final修饰，这个变量就变成了一个常量，这个常量的值就不可变了
        // 这个常量就是我们所说的 字符常量 ---》pi
        // 约定俗成的规定：字符常量的名字全部大写
        //【3】使用扫描器：Scanner的使用--》注意通过形象的理解去使用
        final double PI = 3.14;
        //拿来一个扫描器：
        Scanner sc = new Scanner(System.in);
        //给一个友好性的提示：
        System.out.print(&amp;quot;请录入一个半径：&amp;quot;);
        //让扫描器扫描键盘录入的int类型的数据：
        int r = sc.nextInt();
        
        //求周长：
        double c = 2\*PI\*r;
        System.out.println(&amp;quot;周长为：&amp;quot;+c);
        
        //求面积：
        //PI = 9.29;报错：TestVar11.java:12: 错误: 无法为最终变量pi分配值
        double s = PI\*r\*r;
        System.out.println(&amp;quot;面积为：&amp;quot;+s);
        
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;练习：加深对Scanner的使用&#34;&gt;&lt;a href=&#34;#练习：加深对Scanner的使用&#34; class=&#34;headerlink&#34; title=&#34;练习：加深对Scanner的使用&#34;&gt;&lt;/a&gt;练习：加深对Scanner的使用&lt;/h2&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestVar12&amp;#123;
    public static void main(String[] args)&amp;#123;
        //键盘录入学生的信息：年龄，身高，姓名，性别：
        //键盘录入年龄：(接收int类型数据)
        Scanner sc = new Scanner(System.in);
        System.out.print(&amp;quot;请录入年龄：&amp;quot;);
        int age = sc.nextInt();
        //键盘录入身高：（接收double类型数据）
        System.out.print(&amp;quot;请录入身高：&amp;quot;);
        double height = sc.nextDouble();
        //键盘录入姓名：(接收String类型数据--》字符串)
        System.out.print(&amp;quot;请录入姓名：&amp;quot;);
        String name = sc.next();
        //键盘录入性别：(接受char类型)
        System.out.print(&amp;quot;请录入性别：&amp;quot;);
        String sexStr = sc.next();
        char sex = sexStr.charAt(0);
        //上面两句可以合为一句表示：char sex = sc.next().charAt(0);
        System.out.println(&amp;quot;该学生的信息为:姓名是：&amp;quot;+name+&amp;quot;,年龄是：&amp;quot;+age+&amp;quot;,身高为：&amp;quot;+height+&amp;quot;,性别是：&amp;quot;+sex);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC3%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
        <title>第3章_运算符</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC3%E7%AB%A0_%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
        <content type="html">&lt;h1 id=&#34;Java中的运算符&#34;&gt;&lt;a href=&#34;#Java中的运算符&#34; class=&#34;headerlink&#34; title=&#34;Java中的运算符&#34;&gt;&lt;/a&gt;Java中的运算符&lt;/h1&gt;&lt;p&gt;【1】Java 语言支持如下运算符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;算术运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+，-，*，&amp;#x2F;，%，++（自增），–（自减）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赋值运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展赋值运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;+&amp;#x3D;，-&amp;#x3D;，*&amp;#x3D;，&amp;#x2F;&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关系运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;gt;，&amp;lt;，&amp;gt;&amp;#x3D;，&amp;lt;&amp;#x3D;，&amp;#x3D;&amp;#x3D;，!&amp;#x3D;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;逻辑运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;amp;，|， &amp;amp;&amp;amp;，||，!，^&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;amp;，|，^，~ ， &amp;gt;&amp;gt;，&amp;lt;&amp;lt;，&amp;gt;&amp;gt;&amp;gt; (了解！！！)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件运算符&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;？：&lt;/p&gt;
&lt;p&gt;【2】相关概念辨析&lt;/p&gt;
&lt;p&gt;+ 运算符 操作符 Operator&lt;/p&gt;
&lt;p&gt;5+6 表达式 expression&lt;/p&gt;
&lt;p&gt;5 6 操作数 Operand&lt;/p&gt;
&lt;p&gt;int m &amp;#x3D;5+6; 语句 Sentence&lt;/p&gt;
&lt;h1 id=&#34;算术运算符&#34;&gt;&lt;a href=&#34;#算术运算符&#34; class=&#34;headerlink&#34; title=&#34;算术运算符&#34;&gt;&lt;/a&gt;算术运算符&lt;/h1&gt;&lt;h2 id=&#34;x2F-和&#34;&gt;&lt;a href=&#34;#x2F-和&#34; class=&#34;headerlink&#34; title=&#34;&amp;#x2F;和%&#34;&gt;&lt;/a&gt;&amp;#x2F;和%&lt;/h2&gt;&lt;p&gt;【1】&amp;#x2F; 除法运算符 ： 表示两个数相除运算&lt;/p&gt;
&lt;p&gt;% 取余运算符： 用来求余数的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe01&amp;#123;

    public static void main(String[] args)&amp;#123;

        //打印结果：

        System.out.println(12/3);

        System.out.println(12%5);

        System.out.println(12/3.0);

        System.out.println(12%5.0);

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】练习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;

public class TestOpe02&amp;#123;

    public static void main(String[] args)&amp;#123;

        //实现功能：任意给出一个四位数，求出每位上的数字并输出

        

        //1.任意给出一个四位数：

        Scanner input = new Scanner(System.in);

        System.out.println(&amp;quot;请录入一个四位数：&amp;quot;);

        int num = input.nextInt();

        

        

        //2.求出每位上的数字：

        //个位数：

        int num1 = num%10;

        //十位数：

        int num2 = num/10%10;//1234---\&amp;gt;123---\&amp;gt;3

        //百位数：

        int num3 = num/100%10;//1234---\&amp;gt;12---\&amp;gt;2

        //千位数：

        int num4 = num/1000;//1234---\&amp;gt;1

        

        

        //3.输出每位上的数字：

        System.out.println(&amp;quot;个位上的数为：&amp;quot;+num1);

        System.out.println(&amp;quot;十位上的数为：&amp;quot;+num2);

        System.out.println(&amp;quot;百位上的数为：&amp;quot;+num3);

        System.out.println(&amp;quot;千位上的数为：&amp;quot;+num4);

    &amp;#125;

    

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;+&#34;&gt;&lt;/a&gt;+&lt;/h2&gt;&lt;p&gt;【1】+的作用：&lt;/p&gt;
&lt;p&gt;（1）表示正数&lt;/p&gt;
&lt;p&gt;（2）表示相加操作&lt;/p&gt;
&lt;p&gt;（3）进行字符串的拼接&lt;/p&gt;
&lt;p&gt;【2】代码练习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe03&amp;#123;

    public static void main(String[] args)&amp;#123;

        //表示正数：

        System.out.println(+5);//5

        //相加操作：

        System.out.println(5+6);//11

        System.out.println(5+&amp;#39;6&amp;#39;);//59

        //字符串的拼接：

        //规则：+左右两侧的任意一侧有字符串，那么这个加号就是字符串拼接的作用，结果一定是字符串

        int num = 56;

        System.out.println(&amp;quot;num=&amp;quot;+num);//&amp;quot;num=56&amp;quot; ---\&amp;gt; num=56

        System.out.println(5+6+&amp;quot;7&amp;quot;);//11+&amp;quot;7&amp;quot;---\&amp;gt;&amp;quot;117&amp;quot; ---\&amp;gt;117

        System.out.println(5+&amp;#39;6&amp;#39;+&amp;quot;7&amp;quot;);//59 +&amp;quot;7&amp;quot;---\&amp;gt;&amp;quot;597&amp;quot; ---\&amp;gt;597

        System.out.println(&amp;quot;5&amp;quot;+6+&amp;quot;7&amp;quot;);//&amp;quot;56&amp;quot;+&amp;quot;7&amp;quot; ---\&amp;gt;&amp;quot;567&amp;quot;---\&amp;gt;567

        System.out.println(&amp;quot;5&amp;quot;+&amp;#39;6&amp;#39;+&amp;quot;7&amp;quot;);//&amp;quot;56&amp;quot;+&amp;quot;7&amp;quot;---\&amp;gt;&amp;quot;567&amp;quot;---\&amp;gt;567

        System.out.println(&amp;quot;5&amp;quot;+&amp;#39;6&amp;#39;+&amp;#39;7&amp;#39;);//&amp;quot;56&amp;quot;+&amp;#39;7&amp;#39;---\&amp;gt;&amp;quot;567&amp;quot;---567

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;-1&#34;&gt;&lt;a href=&#34;#-1&#34; class=&#34;headerlink&#34; title=&#34;++&#34;&gt;&lt;/a&gt;++&lt;/h2&gt;&lt;p&gt;【1】++：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe04&amp;#123;

    public static void main(String[] args)&amp;#123;

        int a = 5;

        a++;//理解为：相当于 a=a+1 操作

        System.out.println(a);//6

        

        a = 5;

        \++a;//理解为：相当于 a=a+1 操作

        System.out.println(a); //6

        

        //总结：++单独使用的时候，无论放在前还是后，都是加1操作

        

        //将++参与到运算中：

        //规则：看++在前还是在后，如果++在后：先运算，后加1 如果++在前，先加1，后运算

        a = 5;

        int m = a++ + 7;//先运算 m=a+7 再加1： a = a+1

        System.out.println(m);//12

        System.out.println(a);//6

        

        a = 5;

        int n = ++a + 7;//先加1 a=a+1 再运算： n = a+7

        System.out.println(n);//13

        System.out.println(a);//6

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;无论这个变量是否参与到运算中去，只要用++运算符，这个变量本身就加1操作&lt;/p&gt;
&lt;p&gt;只是说如果变量参与到运算中去的话，对运算结果是产生影响：&lt;/p&gt;
&lt;p&gt;看++在前还是在后，如果++在后：先运算，后加1 如果++在前，先加1，后运算&lt;/p&gt;
&lt;p&gt;【2】练习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe05&amp;#123;

    public static void main(String[] args)&amp;#123;

        int a = 5;

        System.out.println(a++ + a++);

        System.out.println(a++ + ++a);

        System.out.println(++a + a++);

        System.out.println(++a + ++a);

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运算过程：&lt;/p&gt;



&lt;h1 id=&#34;赋值运算符&#34;&gt;&lt;a href=&#34;#赋值运算符&#34; class=&#34;headerlink&#34; title=&#34;赋值运算符&#34;&gt;&lt;/a&gt;赋值运算符&lt;/h1&gt;&lt;p&gt;【1】&amp;#x3D;的作用： 将等号右侧的值赋给等号左侧：&lt;/p&gt;
&lt;p&gt;int age &amp;#x3D; 19;&lt;/p&gt;
&lt;p&gt;int age &amp;#x3D; 10+3+8;&lt;/p&gt;
&lt;p&gt;【2】练习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //任意给出两个数，交换两个数并输出：
        //1.给出两个数：
        int num1 = 10;
        int num2 = 20;
        
        //2.输出交换前的两个数：
        System.out.println(&amp;quot;交换前：&amp;quot;+num1+&amp;quot;\\t&amp;quot;+num2);
        
        //3.交换
        /\*
            错误代码：
            num1 = num2;
        num2 = num1;
        \*/
            //解决办法：
            //引入一个中间变量:
            int t;
        t = num1;
        num1 = num2;
        num2 = t;
        /\*
            int t;
        t = num2;
        num2 = num1;
        num1 = t;
        
        \*/
            
            //4.输出交换后的两个数：
            System.out.println(&amp;quot;交换后：&amp;quot;+num1+&amp;quot;\\t&amp;quot;+num2);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;面试题：两个数交换的四种方式：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vQnJhZC1MZWUvcC81ODA4Mjk5Lmh0bWw=&#34;&gt;https://www.cnblogs.com/Brad-Lee/p/5808299.html&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;扩展赋值运算符&#34;&gt;&lt;a href=&#34;#扩展赋值运算符&#34; class=&#34;headerlink&#34; title=&#34;扩展赋值运算符&#34;&gt;&lt;/a&gt;扩展赋值运算符&lt;/h1&gt;&lt;p&gt;【1】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe07&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现功能：给出三个数，求和：
        //1.给出三个数：
        int num1 = 10;
        int num2 = 20;
        int num3 = 30;
        //2.求和
        //int sum = num1+num2+num3;
        //定义一个变量，用来接收和：
        int sum = 0;
        sum = sum + num1;//等效： sum += num1;
        sum = sum + num2;// sum += num2;
        sum = sum + num3;//sum += num3;
        //3.将和输出：
        System.out.println(&amp;quot;和：&amp;quot;+sum);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内存：&lt;/p&gt;



&lt;p&gt;【2】a+&amp;#x3D;b 和 a&amp;#x3D;a+b 区别：&lt;/p&gt;
&lt;p&gt;（1）a+&amp;#x3D;b 可读性稍差 编译效率高 底层自动进行类型转换&lt;/p&gt;
&lt;p&gt;（2）a&amp;#x3D;a+b 可读性好 编译效率低 手动进行类型转换&lt;/p&gt;
&lt;p&gt;【3】面试题&lt;/p&gt;
&lt;p&gt;（1）请问a+&amp;#x3D;b相当于a&amp;#x3D;a+b,那么也相当于 a&amp;#x3D;b+a吗？&lt;/p&gt;



&lt;p&gt;（2）下面的代码哪一句出错： 4&lt;/p&gt;
&lt;p&gt;byte a &amp;#x3D; 10; —&amp;gt;1&lt;/p&gt;
&lt;p&gt;int b &amp;#x3D; 20; —&amp;gt;2&lt;/p&gt;
&lt;p&gt;a+&amp;#x3D;b; —-&amp;gt;3&lt;/p&gt;
&lt;p&gt;a &amp;#x3D; a+b ;—-&amp;gt;4&lt;/p&gt;
&lt;p&gt;更正： a &amp;#x3D; (byte)(a+b);&lt;/p&gt;
&lt;h1 id=&#34;关系运算符&#34;&gt;&lt;a href=&#34;#关系运算符&#34; class=&#34;headerlink&#34; title=&#34;关系运算符&#34;&gt;&lt;/a&gt;关系运算符&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe08&amp;#123;
    public static void main(String[] args)&amp;#123;
        //\&amp;gt;，\&amp;lt;，\&amp;gt;=，\&amp;lt;=，==，!=
        //关系运算符最终结果：要么是true要么是false
        System.out.println(4\&amp;gt;9);//false
        System.out.println(4\&amp;lt;9);//true
        System.out.println(4\&amp;gt;=9);//false
        System.out.println(4\&amp;lt;=9);//true
        System.out.println(4==9);//false
        System.out.println(4!=9);//true
        System.out.println((5\&amp;lt;9)!=(6==8));//true
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;逻辑运算符&#34;&gt;&lt;a href=&#34;#逻辑运算符&#34; class=&#34;headerlink&#34; title=&#34;逻辑运算符&#34;&gt;&lt;/a&gt;逻辑运算符&lt;/h1&gt;&lt;p&gt;&amp;amp;，|， &amp;amp;&amp;amp;，||，!，^&lt;/p&gt;
&lt;p&gt;逻辑运算符：进行逻辑运算的，运算符左右连接的都是 布尔类型的操作数，最终表达式的结果是布尔值：要么是true，要么false&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe09&amp;#123;
    public static void main(String[] args)&amp;#123;
        // 逻辑与 ：&amp;amp; 规律：只要有一个操作数是false，那么结果一定是false
        System.out.println(true&amp;amp;true);
        System.out.println(true&amp;amp;false);
        System.out.println(false&amp;amp;false);
        System.out.println(false&amp;amp;true);
        
        // 短路与：&amp;amp;&amp;amp; 规律：效率高一些，只要第一个表达式是false，那么第二个表达式就不用计算了，结果一定是false
        System.out.println(true&amp;amp;&amp;amp;true);
        System.out.println(true&amp;amp;&amp;amp;false);
        System.out.println(false&amp;amp;&amp;amp;false);
        System.out.println(false&amp;amp;&amp;amp;true);
        
        // 逻辑或：\| 规律：只要有一个操作数是true，那么结果一定是true
        System.out.println(true\|true);
        System.out.println(true\|false);
        System.out.println(false\|false);
        System.out.println(false\|true);
        
        // 短路或：\|\| 规律：效率高一些，只要第一个表达式是true，那么第二个表达式就不用计算了，结果一定是true
        System.out.println(true\|\|true);
        System.out.println(true\|\|false);
        System.out.println(false\|\|false);
        System.out.println(false\|\|true);
        
        //逻辑非： ! 规律：相反结果
        System.out.println(!true);//false
        System.out.println(!false);//true
        
        //逻辑异或： \^ 规律：两个操作数相同，结果为false，不相同，结果为true
        System.out.println(true\^true);
        System.out.println(true\^false);
        System.out.println(false\^false);
        System.out.println(false\^true);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再做一个加深的练习：看代码 说结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe10&amp;#123;
    public static void main(String[] args)&amp;#123;
        int i=8;
        System.out.println((5\&amp;gt;7)&amp;amp;&amp;amp;(i++==2)); //false
        System.out.println(i); //8


        int a=8;
        System.out.println((5\&amp;gt;7)&amp;amp;(a++==2)); //false
        System.out.println(a); //9


        int m=8;
        System.out.println((5\&amp;lt;7)&amp;amp;&amp;amp;(m++==2)); //false
        System.out.println(m); //9

        int b=2;
        System.out.println((5\&amp;lt;7)&amp;amp;(b++==2)); //true
        System.out.println(b); //3

        int c=2;
        System.out.println((5\&amp;lt;7)&amp;amp;(++c==2)); //false
        System.out.println(c); //3
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;条件运算符&#34;&gt;&lt;a href=&#34;#条件运算符&#34; class=&#34;headerlink&#34; title=&#34;条件运算符&#34;&gt;&lt;/a&gt;条件运算符&lt;/h1&gt;&lt;p&gt;【1】条件运算符：又称： 三元运算符&amp;#x2F;三目运算符&lt;/p&gt;
&lt;p&gt;【2】格式：&lt;/p&gt;
&lt;p&gt;a?b:c&lt;/p&gt;
&lt;p&gt;其中a是一个布尔类型的表达式，返回结果要么是true要么false，通过a的结果决定最终表达式的结果:&lt;/p&gt;
&lt;p&gt;如果a的结果是true，那么表达式最终结果为b&lt;/p&gt;
&lt;p&gt;如果a的结果是false，那么表达式最终结果为c&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOpe11&amp;#123;
    public static void main(String[] args)&amp;#123;
        int num = (5\&amp;gt;7)?6:9 ;
        System.out.println(num);

        String str = (4==4)?&amp;quot;你好&amp;quot;:&amp;quot;你不好&amp;quot; ;
        System.out.println(str);

        System.out.println((4==4)?&amp;quot;你好&amp;quot;:&amp;quot;你不好&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;练习：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;import java.util.*;&amp;#x2F;&amp;#x2F;*代表所有&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; public class TestOpe12&amp;#123;
 public static void main(String[] args)&amp;#123;
 //实现功能：男孩女孩选择晚饭吃什么，如果意见一致，听男生的，如果意见不一致，听女生的
 
 //1.要让男孩女孩选择晚饭吃什么：
 Scanner sc = new Scanner(System.in);
 System.out.println(&amp;quot;请选择今晚吃什么：1.火锅 2.烧烤 3.麻辣烫 4.西餐&amp;quot;);
 System.out.println(&amp;quot;请男孩选择：&amp;quot;);
 int boyChoice = sc.nextInt();
 System.out.println(&amp;quot;请女孩选择：&amp;quot;);
 int girlChoice = sc.nextInt();
 //2.判断：
 System.out.println(boyChoice==girlChoice?&amp;quot;听男孩的&amp;quot;:&amp;quot;听女孩的&amp;quot;);
 &amp;#125;
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PS:三目运算符可以代替后续我们要学习的if-else&lt;/p&gt;
&lt;h1 id=&#34;位运算符-了解&#34;&gt;&lt;a href=&#34;#位运算符-了解&#34; class=&#34;headerlink&#34; title=&#34;位运算符(了解)&#34;&gt;&lt;/a&gt;位运算符(了解)&lt;/h1&gt;&lt;p&gt;位运算符：&amp;amp;，|，^，~ ， &amp;gt;&amp;gt;，&amp;lt;&amp;lt;，&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;如何区分逻辑运算符和位运算符：&lt;/p&gt;
&lt;p&gt;逻辑运算符：左右连接的是布尔类型的操作数&lt;/p&gt;
&lt;p&gt;位运算符：左右连接的是具体的数值&lt;/p&gt;
&lt;p&gt;【1】&amp;lt;&amp;lt; 左移&lt;/p&gt;
&lt;p&gt;3&amp;lt;&amp;lt;2 &amp;#x3D; 12&lt;/p&gt;



&lt;p&gt;面试题： 4乘以8最快的方式： 4&amp;lt;&amp;lt;3&lt;/p&gt;
&lt;p&gt;【2】&amp;gt;&amp;gt; 有符号右移&lt;/p&gt;
&lt;p&gt;6&amp;gt;&amp;gt;2 &amp;#x3D; 1&lt;/p&gt;



&lt;p&gt;-6&amp;gt;&amp;gt;2 &amp;#x3D; -2&lt;/p&gt;



&lt;p&gt;【3】&amp;gt;&amp;gt;&amp;gt; 无符号右移：&lt;/p&gt;
&lt;p&gt;6&amp;gt;&amp;gt;&amp;gt;2 &amp;#x3D; 1&lt;/p&gt;



&lt;p&gt;【4】 &amp;amp; 与&lt;/p&gt;
&lt;p&gt;6&amp;amp;3 &amp;#x3D; 2&lt;/p&gt;



&lt;p&gt;【5】| 或&lt;/p&gt;
&lt;p&gt;6|3&amp;#x3D;7&lt;/p&gt;



&lt;p&gt;【6】^异或：&lt;/p&gt;
&lt;p&gt;6^3 &amp;#x3D; 5&lt;/p&gt;



&lt;p&gt;【7】~反：&lt;/p&gt;
&lt;p&gt;~6 &amp;#x3D; -7&lt;/p&gt;



&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;byte类型的表数范围的 -128是怎么算出来的&lt;/p&gt;
&lt;p&gt;127： 01111111&lt;/p&gt;
&lt;p&gt;-128： 10000000&lt;/p&gt;
&lt;p&gt;一看就是个负数&lt;/p&gt;
&lt;p&gt;减1： 01111111&lt;/p&gt;
&lt;p&gt;取反： 10000000 —》2^7 &amp;#x3D; 128&lt;/p&gt;
&lt;p&gt;加负号： -128&lt;/p&gt;
&lt;h1 id=&#34;运算符总结&#34;&gt;&lt;a href=&#34;#运算符总结&#34; class=&#34;headerlink&#34; title=&#34;运算符总结&#34;&gt;&lt;/a&gt;运算符总结&lt;/h1&gt;








&lt;h1 id=&#34;运算符的优先级别&#34;&gt;&lt;a href=&#34;#运算符的优先级别&#34; class=&#34;headerlink&#34; title=&#34;运算符的优先级别&#34;&gt;&lt;/a&gt;运算符的优先级别&lt;/h1&gt;


&lt;p&gt;不需要去刻意的记优先级关系&lt;/p&gt;
&lt;p&gt;赋值&amp;lt;三目&amp;lt;逻辑&amp;lt;关系&amp;lt;算术&amp;lt;单目&lt;/p&gt;
&lt;p&gt;理解运算符的结合性&lt;/p&gt;
&lt;p&gt;PS:实际开发中我们不会写特别复杂的表达式，你要想先算谁就用()&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;5&amp;lt;6 | &amp;amp;apos;A&amp;amp;apos;&amp;gt;&amp;amp;apos;a&amp;amp;apos; &amp;amp;&amp;amp; 12*6&amp;lt;&amp;#x3D;45+23&amp;amp;&amp;amp;!true&lt;/p&gt;
&lt;p&gt;&amp;#x3D;5&amp;lt;6 | &amp;amp;apos;A&amp;amp;apos;&amp;gt;&amp;amp;apos;a&amp;amp;apos; &amp;amp;&amp;amp; 12*6&amp;lt;&amp;#x3D;45+23&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D; 5&amp;lt;6 | &amp;amp;apos;A&amp;amp;apos;&amp;gt;&amp;amp;apos;a&amp;amp;apos; &amp;amp;&amp;amp;72&amp;lt;&amp;#x3D;68&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D; true|false&amp;amp;&amp;amp;false&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D; true&amp;amp;&amp;amp;false&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D;false&amp;amp;&amp;amp;false&lt;/p&gt;
&lt;p&gt;&amp;#x3D;false&lt;/p&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</id>
        <title>第4章_流程控制</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
        <content type="html">&lt;h1 id=&#34;第4章-流程控制&#34;&gt;&lt;a href=&#34;#第4章-流程控制&#34; class=&#34;headerlink&#34; title=&#34;第4章_流程控制&#34;&gt;&lt;/a&gt;第4章_流程控制&lt;/h1&gt;&lt;h1 id=&#34;引入&#34;&gt;&lt;a href=&#34;#引入&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;p&gt;【1】流程控制的作用：&lt;/p&gt;
&lt;p&gt;流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。&lt;/p&gt;
&lt;p&gt;【2】控制语句的分类：&lt;/p&gt;
&lt;p&gt;控制语句分为三类：顺序、选择和循环。&lt;/p&gt;
&lt;p&gt;“顺序结构”代表“先执行a，再执行b”的逻辑。&lt;/p&gt;
&lt;p&gt;“条件判断结构”代表“如果…，则…”的逻辑。&lt;/p&gt;
&lt;p&gt;“循环结构”代表“如果…，则再继续…”的逻辑。&lt;/p&gt;
&lt;p&gt;三种流程控制语句就能表示所有的事情！不信，你可以试试拆分你遇到的各种事情。这三种基本逻辑结构是相互支撑的，它们共同构成了算法的基本结构，无论怎样复杂的逻辑结构，都可以通过它们来表达。所以任何一种高级语言都具备上述两种结构。&lt;/p&gt;
&lt;p&gt;本章是大家真正进入编程界的“门票”。&lt;/p&gt;
&lt;p&gt;【3】流程控制的流程：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0be7aaf463c4b8bcab05594f71875ce8.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;分支结构-选择结构&#34;&gt;&lt;a href=&#34;#分支结构-选择结构&#34; class=&#34;headerlink&#34; title=&#34;分支结构(选择结构)&#34;&gt;&lt;/a&gt;分支结构(选择结构)&lt;/h1&gt;&lt;h1 id=&#34;if&#34;&gt;&lt;a href=&#34;#if&#34; class=&#34;headerlink&#34; title=&#34;if&#34;&gt;&lt;/a&gt;if&lt;/h1&gt;&lt;h3 id=&#34;单分支&#34;&gt;&lt;a href=&#34;#单分支&#34; class=&#34;headerlink&#34; title=&#34;单分支&#34;&gt;&lt;/a&gt;单分支&lt;/h3&gt;&lt;p&gt;【1】语法结构:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;if(布尔表达式){   语句块  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;if语句对布尔表达式进行一次判定，若判定为真，则执行{}中的语句块，否则跳过该语句块。流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0931341f710ef8def2eeccb5d15e57c6.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestIf01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品
        //1.给出三个数：
        int num1 = 6;
        int num2 = 2;
        int num3 = 3;
        //2.求和
        int sum = 0;
        sum += num1;
        sum += num2;
        sum += num3;
        System.out.println(&amp;quot;和为：&amp;quot;+sum);

        //3.根据和判断奖品：
        //如果和大于等于14，那么就是一等奖
        if(sum\&amp;gt;=14)&amp;#123;
            System.out.println(&amp;quot;一等奖&amp;quot;);
            System.out.println(&amp;quot;恭喜你很幸运，中了一等奖&amp;quot;);
        &amp;#125;

        if(sum\&amp;gt;=10&amp;amp;&amp;amp;sum\&amp;lt;14)&amp;#123;
            System.out.println(&amp;quot;二等奖&amp;quot;);
        &amp;#125;

        if(sum\&amp;gt;=6&amp;amp;&amp;amp;sum\&amp;lt;10)&amp;#123;
            System.out.println(&amp;quot;三等奖&amp;quot;);
        &amp;#125;

        if(sum\&amp;lt;6)&amp;#123;
            System.out.println(&amp;quot;四等奖&amp;quot;);
        &amp;#125;

        /\*
            if-单分支：
                （1）结构：
                if(条件表达式，这个表达式的结果是布尔值：要么是false，要么是true)&amp;#123;
                    //如果上面()中的表达式返回结果是true，那么执行&amp;#123;&amp;#125;中代码
                    //如果上面()中的表达式返回结果是false ，那么不执行&amp;#123;&amp;#125;中代码
                    //PS:&amp;#123;&amp;#125;中的代码是否执行，取决于()中表达式的返回结果
                &amp;#125;
        （2）上面的代码中，我用四个单分支拼凑出四个选择，每个选择是独立的，依次判断执行的
            （3）if后面的()中的条件，要按照自己需求尽量完善
            （4）&amp;#123;&amp;#125;可以省略不写,但是一旦省略，这个if就只负责后面的一句话，所以我们不建议初学者省略
            \*/
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;多分支&#34;&gt;&lt;a href=&#34;#多分支&#34; class=&#34;headerlink&#34; title=&#34;多分支&#34;&gt;&lt;/a&gt;多分支&lt;/h3&gt;&lt;p&gt;【1】语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;if(布尔表达式1) {   语句块1;  } else if(布尔表达式2) {   语句块2;  }……  else if(布尔表达式n){   语句块n;  } else {   语句块n+1;  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;当布尔表达式1为真时，执行语句块1；否则，判断布尔表达式2，当布尔表达式2为真时，执行语句块2；否则，继续判断布尔表达式3······；如果1~n个布尔表达式均判定为假时，则执行语句块n+1，也就是else部分。流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/c88bacdaa34dd27e9d243e5982d3ed6f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】数轴分析：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/7dd5d0a3ce4defddad8b915dbd61c4fd.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestIf02&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品
        //1.给出三个数：
        int num1 = 6;
        int num2 = 4;
        int num3 = 2;
        //2.求和
        int sum = 0;
        sum += num1;
        sum += num2;
        sum += num3;
        System.out.println(&amp;quot;和为：&amp;quot;+sum);

        //3.根据和判断奖品：
        /\*
            利用一个多分支
            【1】结构：
            if()&amp;#123;

            &amp;#125;else if()&amp;#123;

            &amp;#125;else if()&amp;#123;

            &amp;#125;...
                else&amp;#123;

                &amp;#125;
        【2】else:隐藏了一个条件，跟上面分支条件表达式相反的功能 (详见数轴分析)
            【3】多分支：好处：只要满足一个 分支以后，后面的分支就不需要判断了 --》效率高
            【4】我们写代码的时候，尽量保证else的存在--》else分支相当于“兜底”“备胎”的作用，别的分支都不走，就会走这个分支了
            \*/
            if(sum\&amp;gt;=14)&amp;#123;
                System.out.println(&amp;quot;一等奖&amp;quot;);
            &amp;#125;else if(sum\&amp;gt;=10)&amp;#123;//隐藏了sum\&amp;lt;14
                System.out.println(&amp;quot;二等奖&amp;quot;);
            &amp;#125;else if(sum\&amp;gt;=6)&amp;#123;//隐藏了sum\&amp;lt;10
                System.out.println(&amp;quot;三等奖&amp;quot;);
            &amp;#125;else&amp;#123;//隐藏了sum\&amp;lt;6
                System.out.println(&amp;quot;四等奖&amp;quot;);
            &amp;#125;



    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;双分支&#34;&gt;&lt;a href=&#34;#双分支&#34; class=&#34;headerlink&#34; title=&#34;双分支&#34;&gt;&lt;/a&gt;双分支&lt;/h3&gt;&lt;p&gt;【1】语法结构:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;if(布尔表达式){  语句块1  }else{   语句块2  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;当布尔表达式为真时，执行语句块1，否则，执行语句块2。也就是else部分。流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/27925a9f266f6f323822dfd891938abf.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;随机数&#34;&gt;&lt;a href=&#34;#随机数&#34; class=&#34;headerlink&#34; title=&#34;随机数&#34;&gt;&lt;/a&gt;随机数&lt;/h3&gt;&lt;p&gt;随机数：这个数在生成之前我们不确定这个数是多少，不可知&lt;/p&gt;
&lt;p&gt;在java中依靠一个类：Math类帮助我们生成，这个类中有一个方法专门用来生成随机数：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/dc25d09059fb76e3d1c8468c2bc3b071.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;Math.random() ——-&amp;gt; [0.0,1.0)&lt;/p&gt;
&lt;p&gt;Math.random()*6 —–&amp;gt;[0.0,6.0)&lt;/p&gt;
&lt;p&gt;(int)(Math.random()*6) —–&amp;gt;[0,5]&lt;/p&gt;
&lt;p&gt;(int)(Math.random()*6) +1 —–&amp;gt;[1,6]&lt;/p&gt;
&lt;p&gt;应用到程序中：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int num1 = (int)(Math.random()\*6) +1;
int num2 = (int)(Math.random()\*6) +1;
int num3 = (int)(Math.random()\*6) +1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;练习：&lt;/p&gt;
&lt;p&gt;[32,98] - [0,66]+32 - (int)(Math.random()*67) + 32&lt;/p&gt;
&lt;h3 id=&#34;分支的嵌套使用&#34;&gt;&lt;a href=&#34;#分支的嵌套使用&#34; class=&#34;headerlink&#34; title=&#34;分支的嵌套使用&#34;&gt;&lt;/a&gt;分支的嵌套使用&lt;/h3&gt;&lt;p&gt;分支结构练习1&lt;/p&gt;
&lt;p&gt;练习：&lt;/p&gt;
&lt;p&gt;会员购物时，不同积分享受的折扣不同，规则如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/83f88cbff6a2d8323bd5195d7274fb6e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;计算会员购物时获得的折扣，效果如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/84cd71a572646a9eb1d109050b80331c.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;本题主要考的是 程序的优化：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestIf04&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1.给出积分：
        Scanner sc = new Scanner(System.in);
        System.out.print(&amp;quot;请输入会员积分：&amp;quot;);

        //先判断键盘录入的数据是不是int类型的
        if(sc.hasNextInt()==true)&amp;#123;//是int类型数据：
            //将这个int类型的数据接收：
            int score = sc.nextInt();
            //判断这个积分是否是正数：
            if(score\&amp;gt;=0)&amp;#123;
                String discount = &amp;quot;&amp;quot;;
                //2.根据积分判断折扣：
                if(score\&amp;gt;=8000)&amp;#123;
                    discount = &amp;quot;0.6&amp;quot;;
                &amp;#125;else if(score\&amp;gt;=4000)&amp;#123;
                    discount = &amp;quot;0.7&amp;quot;;
                &amp;#125;else if(score\&amp;gt;=2000)&amp;#123;
                    discount = &amp;quot;0.8&amp;quot;;
                &amp;#125;else&amp;#123;
                    discount = &amp;quot;0.9&amp;quot;;
                &amp;#125;
                System.out.println(&amp;quot;该会员享受的折扣为：&amp;quot;+discount);

            &amp;#125;else&amp;#123;//score\&amp;lt;0
                System.out.println(&amp;quot;对不起，你录入的积分是负数！不符合需求！&amp;quot;);
            &amp;#125;
        &amp;#125;else&amp;#123;//不是int类型的数据
            System.out.println(&amp;quot;你录入的积分不是整数！&amp;quot;);
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;分支结构练习2&lt;/p&gt;
&lt;p&gt;练习：&lt;/p&gt;
&lt;p&gt;小朋友搬桌子：&lt;/p&gt;
&lt;p&gt;年龄大于7岁，可以搬桌子；&lt;/p&gt;
&lt;p&gt;如果年龄大于5岁，性别是男，可以搬桌子；&lt;/p&gt;
&lt;p&gt;否则不可以搬动桌子，提示：你还太小了&lt;/p&gt;
&lt;p&gt;本题主要考的是：逻辑&lt;/p&gt;
&lt;p&gt;方式1：性别用0或者1接收：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestIf05&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1.录入小朋友的年龄：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入小朋友的年龄：&amp;quot;);
        int age = sc.nextInt();

        //2.根据年龄判断：
        if(age\&amp;gt;=7)&amp;#123;
            System.out.println(&amp;quot;yes&amp;quot;);
        &amp;#125;else if(age\&amp;gt;=5)&amp;#123;
            //录入小朋友的性别；
            System.out.println(&amp;quot;请录入小朋友的性别：男：1 女 ：0&amp;quot;);
            int sex = sc.nextInt();
            if(sex==1)&amp;#123;//男生
                System.out.println(&amp;quot;yes&amp;quot;);
            &amp;#125;else&amp;#123;//女孩
                System.out.println(&amp;quot;no&amp;quot;);
            &amp;#125;
        &amp;#125;else&amp;#123;//age\&amp;lt;5
            System.out.println(&amp;quot;no&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方式2：性别用男或者女接收：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestIf06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1.录入小朋友的年龄：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入小朋友的年龄：&amp;quot;);
        int age = sc.nextInt();

        //2.根据年龄判断：
        if(age\&amp;gt;=7)&amp;#123;
            System.out.println(&amp;quot;yes&amp;quot;);
        &amp;#125;else if(age\&amp;gt;=5)&amp;#123;
            //录入小朋友的性别；
            System.out.println(&amp;quot;请录入小朋友的性别：&amp;quot;);
            String str = sc.next();
            char sex = str.charAt(0);
            if(sex==&amp;#39;男&amp;#39;)&amp;#123;
                System.out.println(&amp;quot;yes&amp;quot;);
            &amp;#125;else&amp;#123;
                System.out.println(&amp;quot;no&amp;quot;);
            &amp;#125;
        &amp;#125;else&amp;#123;//age\&amp;lt;5
            System.out.println(&amp;quot;no&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;switch&#34;&gt;&lt;a href=&#34;#switch&#34; class=&#34;headerlink&#34; title=&#34;switch&#34;&gt;&lt;/a&gt;switch&lt;/h2&gt;&lt;p&gt;【1】switch多分支结构(多值情况)&lt;/p&gt;
&lt;p&gt;语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;switch (表达式) {   case 值1:   语句序列1;   [break];   case 值2:   语句序列2;   [break];   … … … … …   [default:默认语句;]  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;switch语句会根据表达式的值从相匹配的case标签处开始执行，一直执行到break语句处或者是switch语句的末尾。如果表达式的值与任一case值不匹配，则进入default语句（如果存在default语句的情况）。根据表达式值的不同可以执行许多不同的操作。switch语句中case标签在JDK1.5之前必须是整数（long类型除外）或者枚举，不能是字符串，在JDK1.7之后允许使用字符串(String)。大家要注意，当布尔表达式是等值判断的情况，可以使用if-else if-else多分支结构或者switch结构，如果布尔表达式区间判断的情况，则只能使用if-else if-else多分支结构。switch多分支结构的流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2f1d12c7b2e144d52b36c7aace3d6024.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】练习&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestSwitch&amp;#123;
    public static void main(String[] args)&amp;#123;
        /\*
            实现一个功能：
            根据给出的学生分数，判断学生的等级：
            \&amp;gt;=90 -----A
            \&amp;gt;=80 -----B
            \&amp;gt;=70 -----C
            \&amp;gt;=60 -----D
            \&amp;lt;60 -----E

            用if分支：
            if(score\&amp;gt;=90)&amp;#123;

            &amp;#125;else if(score\&amp;gt;=80)&amp;#123;

            &amp;#125;
        \*/
            //1.给出学生的成绩：
            int score = 167;
        //2.根据成绩判断学生的等级：
        switch(score/10)&amp;#123;
            case 10 :
            case 9 : System.out.println(&amp;quot;A级&amp;quot;);break;
            case 8 : System.out.println(&amp;quot;B级&amp;quot;);break;
            case 7 : System.out.println(&amp;quot;C级&amp;quot;);break;
            case 6 : System.out.println(&amp;quot;D级&amp;quot;);break;
            default:System.out.println(&amp;quot;成绩错误&amp;quot;);break;
            case 5 :
            case 4 :
            case 3 :
            case 2 :
            case 1 :
            case 0 : System.out.println(&amp;quot;E级&amp;quot;);break;

        &amp;#125;
        /\*
            【1】语法结构：
            switch()&amp;#123;
                case \* :
                case \* :
                    .......
            &amp;#125;
        【2】switch后面是一个()，()中表达式返回的结果是一个等值，这个等值的类型可以为：
            int,byte,short,char,String,枚举类型
            【3】这个()中的等值会依次跟case后面的值进行比较，如果匹配成功，就执行:后面的代码
            【4】为了防止代码的“穿透”效果：在每个分支后面加上一个关键词break，遇到break这个分支就结束了
            【5】类似else的“兜底”“备胎”的分支：default分支
            【6】default分支可以写在任意的位置上，但是如果没有在最后一行，后面必须加上break关键字，
            如果在最后一行的话，break可以省略
            【7】相邻分支逻辑是一样的，那么就可以只保留最后一个分支，上面的都可以省去不写了
            【8】switch分支和if分支区别：
            表达式是等值判断的话--》if ，switch都可以
            如果表达式是区间判断的情况---》if最好
            【9】switch应用场合：就是等值判断，等值的情况比较少的情况下
            \*/
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;循环结构&#34;&gt;&lt;a href=&#34;#循环结构&#34; class=&#34;headerlink&#34; title=&#34;循环结构&#34;&gt;&lt;/a&gt;循环结构&lt;/h1&gt;&lt;h2 id=&#34;while&#34;&gt;&lt;a href=&#34;#while&#34; class=&#34;headerlink&#34; title=&#34;while&#34;&gt;&lt;/a&gt;while&lt;/h2&gt;&lt;p&gt;【1】语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;while (布尔表达式) {   循环体;  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;在循环刚开始时，会计算一次“布尔表达式”的值，若条件为真，执行循环体。而对于后来每一次额外的循环，都会在开始前重新计算一次。&lt;/p&gt;
&lt;p&gt;语句中应有使循环趋向于结束的语句，否则会出现无限循环–––”死”循环。&lt;/p&gt;
&lt;p&gt;while循环结构流程图如图所示:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/d9a799db990ed9073c404c284874e3c7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】练习：1+2+3+4+5&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestWhile&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：1+2+3+4+5
        //1.定义变量：
        int num1 = 1;
        int num2 = 2;
        int num3 = 3;
        int num4 = 4;
        int num5 = 5;
        //2.定义一个求和变量，用来接收和：
        int sum = 0;
        sum += num1;
        sum += num2;
        sum += num3;
        sum += num4;
        sum += num5;

        //3.输出和
        System.out.println(sum);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码缺点：变量的定义个数太多了&lt;/p&gt;
&lt;p&gt;解决：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestWhile&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：1+2+3+4+5
        //1.定义变量：
        int num = 1;
        //2.定义一个求和变量，用来接收和：
        int sum = 0;
        sum += num;
        num++;
        sum += num;
        num++;
        sum += num;
        num++;
        sum += num;
        num++;
        sum += num;
        num++;

        //3.输出和
        System.out.println(sum);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述代码缺点：重复写的代码太多了&lt;/p&gt;
&lt;p&gt;解决：—》引入java中循环结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestWhile&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：1+2+3+4+5
        //1.定义变量：
        int num = 1;**[1]条件初始化**
            //2.定义一个求和变量，用来接收和：
            int sum = 0;
        while(num\&amp;lt;=5)&amp;#123;**[2]条件判断**
            sum += num;**[3]循环体**
                num++;**[4]迭代**
                      &amp;#125;
        //3.输出和
        System.out.println(sum);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;【1】循环作用：将部分代码重复执行。&lt;/p&gt;
&lt;p&gt;循环只是提高了程序员编写代码的效率，但是底层执行的时候依然是重复执行。&lt;/p&gt;
&lt;p&gt;【2】循环四要素：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/ca11475c2f0a778cad36886cf66366a1.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;初始化谁，就判断谁，判断谁，就迭代谁&lt;/p&gt;
&lt;p&gt;执行过程：[1][2][3][4] [2][3][4] [2][3][4]。。。。&lt;/p&gt;
&lt;p&gt;【3】循环的执行过程：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2ff230667c913bd5e87743476c334561.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】验证循环的执行过程：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/a5f3022962bd6c9af4a1e9a1e9da5f56.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;练习&#34;&gt;&lt;a href=&#34;#练习&#34; class=&#34;headerlink&#34; title=&#34;练习&#34;&gt;&lt;/a&gt;练习&lt;/h3&gt;&lt;p&gt;【1】1+2+3+4+5+。。。。+100&lt;/p&gt;
&lt;p&gt;【2】2+4+6+8+。。。。+998+1000&lt;/p&gt;
&lt;p&gt;【3】5+10+15+20+。。。+100&lt;/p&gt;
&lt;p&gt;【4】99+97+95+。。5+3+1&lt;/p&gt;
&lt;p&gt;【5】1*3*5*7*9*11*13&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestWhile02&amp;#123;
    public static void main(String[] args)&amp;#123;
        /\*
            【1】1+2+3+4+5+。。。。+100
            int i = 1;
        int sum = 0;
        while(i\&amp;lt;=100)&amp;#123;
            sum += i;
            i++;
        &amp;#125;
        System.out.println(sum);
        【2】2+4+6+8+。。。。+998+1000
            int i = 2;
        int sum = 0;
        while(i\&amp;lt;=1000)&amp;#123;
            sum += i;
            i = i+2;
        &amp;#125;
        System.out.println(sum);
        【3】5+10+15+20+。。。+100
            int i = 5;
        int sum = 0;
        while(i\&amp;lt;=100)&amp;#123;
            sum += i;
            i = i+5;
        &amp;#125;
        System.out.println(sum);

        【4】99+97+95+。。5+3+1
            int i = 99;
        int sum = 0;
        while(i\&amp;gt;=1)&amp;#123;
            sum += i;
            i = i-2;
        &amp;#125;
        System.out.println(sum);
        【5】1\*3\*5\*7\*9\*11\*13

            \*/
            int i = 1;
        int result = 1;
        while(i\&amp;lt;=13)&amp;#123;
            result \*= i;
            i = i+2;
        &amp;#125;
        System.out.println(result);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;do-while&#34;&gt;&lt;a href=&#34;#do-while&#34; class=&#34;headerlink&#34; title=&#34;do-while&#34;&gt;&lt;/a&gt;do-while&lt;/h2&gt;&lt;p&gt;【1】语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;do {   循环体;   } while(布尔表达式) ;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;do-while循环结构会先执行循环体，然后再判断布尔表达式的值，若条件为真，执行循环体，当条件为假时结束循环。do-while循环的循环体至少执行一次。do-while循环结构流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0a5138cc1b27bf3150998a807c0084ff.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestDoWhile&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1+2+3+4+...100
        //while方式:
        /\*
            int i = 101;
        int sum = 0;
        while(i\&amp;lt;=100)&amp;#123;
            sum += i;
            i++;
        &amp;#125;
        System.out.println(i);//101
        System.out.println(sum);//0
        \*/
            //do-while方式：

            int i = 101;
        int sum = 0;
        do&amp;#123;
            sum += i;
            i++;
        &amp;#125;while(i\&amp;lt;=100);//一定要注意写这个分号，否则编译出错
        System.out.println(i);//102
        System.out.println(sum);//101
        /\*
            【1】while和do-while的区别:
        while:先判断，再执行
            do-while:先执行，再判断---》至少被执行一次，从第二次开始才进行判断
                【2】什么场合使用do-while:

        while(考试是否通过)&amp;#123;
            考试；
        &amp;#125;
        \---》不合适
            do&amp;#123;
                考试；
            &amp;#125;while(考试是否通过);
        \---》合适
            \*/

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;for&#34;&gt;&lt;a href=&#34;#for&#34; class=&#34;headerlink&#34; title=&#34;for&#34;&gt;&lt;/a&gt;for&lt;/h2&gt;&lt;p&gt;【1】语法结构：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;for (初始表达式; 布尔表达式; 迭代因子) {   循环体;  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。for循环在第一次反复之前要进行初始化，即执行初始表达式；随后，对布尔表达式进行判定，若判定结果为true，则执行循环体，否则，终止循环；最后在每一次反复的时候，进行某种形式的“步进”，即执行迭代因子。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化部分设置循环变量的初值&lt;/li&gt;
&lt;li&gt;条件判断部分为任意布尔表达式&lt;/li&gt;
&lt;li&gt;迭代因子控制循环变量的增减&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;for循环在执行条件判定后，先执行的循环体部分，再执行步进。&lt;/p&gt;
&lt;p&gt;for循环结构的流程图如图所示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/e65934410d1164966962fc0ec10b942f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1+2+3+..+100
        //while:
        /\*int i = 1;
        int sum = 0;
        while(i\&amp;lt;=100)&amp;#123;
            sum += i;
            i++;
        &amp;#125;
        System.out.println(sum);
        \*/

            //for:
            int sum = 0;
        int i;
        for(i = 1;i\&amp;lt;=100;i++)&amp;#123;
            sum += i;
        &amp;#125;
        System.out.println(sum);
        System.out.println(i);

        /\*
            【1】for的结构：
            for(条件初始化;条件判断;迭代)&amp;#123;
                循环体；
            &amp;#125;

        【2】i的作用域：作用范围：离变量最近&amp;#123;&amp;#125; ---\&amp;gt;可以自己去控制
            【3】for循环格式特别灵活：格式虽然很灵活，但是我们自己写代码的时候不建议灵活着写。
            for(;;)&amp;#123;&amp;#125; --\&amp;gt;死循环

                int i = 1;
        for(;i\&amp;lt;=100;)&amp;#123;
            sum += i;
            i++;
        &amp;#125;

        【4】死循环：
            for(;;)&amp;#123;&amp;#125;

        while(true)&amp;#123;&amp;#125;

        do&amp;#123;

        &amp;#125;while(true);

        【5】循环分为两大类：
            第一类：当型 while()&amp;#123;&amp;#125; for(;;)&amp;#123;&amp;#125;
        第二类：直到型 do&amp;#123;&amp;#125;while();

        【6】以后常用：for循环
            【7】do-while,while,for循环谁的效率高？ 一样高
                \*/
                &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;关键字&#34;&gt;&lt;a href=&#34;#关键字&#34; class=&#34;headerlink&#34; title=&#34;关键字&#34;&gt;&lt;/a&gt;关键字&lt;/h2&gt;&lt;p&gt;在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。&lt;/p&gt;
&lt;p&gt;continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。&lt;/p&gt;
&lt;p&gt;return的作用,结束当前所在方法的执行.&lt;/p&gt;
&lt;h3 id=&#34;break&#34;&gt;&lt;a href=&#34;#break&#34; class=&#34;headerlink&#34; title=&#34;break&#34;&gt;&lt;/a&gt;break&lt;/h3&gt;&lt;p&gt;【1】通过练习感受break的作用：作用：停止循环：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor02&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：求1-100的和，当和第一次超过300的时候，停止程序
        int sum = 0;
        for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
            sum += i;
            if(sum\&amp;gt;300)&amp;#123;//当和第一次超过300的时候
                //停止循环
                break;//停止循环
            &amp;#125;
            System.out.println(sum);
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】加深理解：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor03&amp;#123;
    public static void main(String[] args)&amp;#123;
        //break的作用：停止最近的循环
        /\*
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                System.out.println(i);
                if(i==36)&amp;#123;
                    break;//1-36
                &amp;#125;
            &amp;#125;
        \*/
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                System.out.println(i);
                while(i==36)&amp;#123;
                    break; //1-100 ---》break停止的是while循环，而不是外面的for循环
                &amp;#125;
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】break带标签的使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor04&amp;#123;
    public static void main(String[] args)&amp;#123;
        outer: ----》定义标签结束的位置
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                System.out.println(i);
                while(i==36)&amp;#123;
                    break outer; ----》根据标签来结束循环
                &amp;#125;
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;多层循环也可以使用标签，按照自己的需求去设定即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/edd6160d15c42695164e614a174da464.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;continue&#34;&gt;&lt;a href=&#34;#continue&#34; class=&#34;headerlink&#34; title=&#34;continue&#34;&gt;&lt;/a&gt;continue&lt;/h3&gt;&lt;p&gt;【1】通过案例感受continue的作用：结束本次循环，继续下一次循环&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor05&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：输出1-100中被6整除的数：
        //方式1：
        /\*
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                if(i%6==0)&amp;#123;//被6整除
                    System.out.println(i);
                &amp;#125;
            &amp;#125;
        \*/

            //方式2：
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                if(i%6!=0)&amp;#123;//不被6整除
                    continue;//停止本次循环，继续下一次循环
                &amp;#125;
                System.out.println(i);
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】加深理解：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //continue:结束本次离它近的循环，继续下一次循环
        /\*
            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                if(i==36)&amp;#123;
                    continue;//1-100中间没有36
                &amp;#125;
                System.out.println(i);
            &amp;#125;
        \*/

            for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
                while(i==36)&amp;#123;
                    System.out.println(&amp;quot;------&amp;quot;);
                    continue; //1-35+死循环
                &amp;#125;
                System.out.println(i);
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】continue带标签的使用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor07&amp;#123;
    public static void main(String[] args)&amp;#123;

        outer:
        for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
            while(i==36)&amp;#123;
                continue outer; //1-100没有36
            &amp;#125;
            System.out.println(i);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/fc2cc84a39aeaca59d8b618b6a71a46c.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;return&#34;&gt;&lt;a href=&#34;#return&#34; class=&#34;headerlink&#34; title=&#34;return&#34;&gt;&lt;/a&gt;return&lt;/h3&gt;&lt;p&gt;return的作用：跟循环无关，就是程序中遇到return那么return所在的那个方法就停止执行了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor08&amp;#123;
    public static void main(String[] args)&amp;#123;
        //return:遇到return结束当前正在执行的方法
        for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
            while(i==36)&amp;#123;
                return;
            &amp;#125;
            System.out.println(i);
        &amp;#125;

        System.out.println(&amp;quot;-----&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;循环练习&#34;&gt;&lt;a href=&#34;#循环练习&#34; class=&#34;headerlink&#34; title=&#34;循环练习&#34;&gt;&lt;/a&gt;循环练习&lt;/h2&gt;&lt;p&gt;【1】练习1：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor09&amp;#123;
    public static void main(String[] args)&amp;#123;
        /\* 输出1-100中被5整除的数,每行输出6个\*/
            //引入一个计数器：
            int count = 0;//初始值为0
        for(int i=1;i\&amp;lt;=100;i++)&amp;#123;
            if(i%5==0)&amp;#123;//被5整除的数
                System.out.print(i+&amp;quot;\\t&amp;quot;);
                count++;//每在控制台输出一个数，count就加1操作
                if(count%6==0)&amp;#123;
                    System.out.println();//换行
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】练习2：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestFor10&amp;#123;
    public static void main(String[] args)&amp;#123;
        /\*
            实现一个功能：
            【1】请录入10个整数，当输入的数是666的时候，退出程序。
            【2】判断其中录入正数的个数并输出。
            【3】判断系统的退出状态：是正常退出还是被迫退出。
            \*/
            //引入一个计数器：
            int count = 0;
        //引入一个布尔类型的变量：
        boolean flag = true; //---》理解为一个“开关”，默认情况下开关是开着的
        Scanner sc = new Scanner(System.in);
        for(int i=1;i\&amp;lt;=10;i++)&amp;#123;//i:循环次数
            System.out.println(&amp;quot;请录入第&amp;quot;+i+&amp;quot;个数：&amp;quot;);
            int num = sc.nextInt();
            if(num\&amp;gt;0)&amp;#123;//录入的正数
                count++;
            &amp;#125;
            if(num==666)&amp;#123;
                flag = false;//当遇到666的时候，“开关”被关上了
                //退出循环：
                break;
            &amp;#125;

        &amp;#125;

        System.out.println(&amp;quot;你录入的正数的个数为：&amp;quot;+count);


        if(flag)&amp;#123;//flag==true
            System.out.println(&amp;quot;正常退出！&amp;quot;);
        &amp;#125;else&amp;#123;//flag==false
            System.out.println(&amp;quot;被迫退出！&amp;quot;);
        &amp;#125;



    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;循环的嵌套使用&#34;&gt;&lt;a href=&#34;#循环的嵌套使用&#34; class=&#34;headerlink&#34; title=&#34;循环的嵌套使用&#34;&gt;&lt;/a&gt;循环的嵌套使用&lt;/h2&gt;&lt;h3 id=&#34;双重循环&#34;&gt;&lt;a href=&#34;#双重循环&#34; class=&#34;headerlink&#34; title=&#34;双重循环&#34;&gt;&lt;/a&gt;双重循环&lt;/h3&gt;&lt;p&gt;乘法口诀&lt;/p&gt;
&lt;p&gt;乘法口诀：&lt;/p&gt;
&lt;p&gt;1*1&amp;#x3D;1&lt;/p&gt;
&lt;p&gt;1*2&amp;#x3D;2 2*2&amp;#x3D;4&lt;/p&gt;
&lt;p&gt;1*3&amp;#x3D;3 2*3&amp;#x3D;6 3*3&amp;#x3D;9&lt;/p&gt;
&lt;p&gt;1*4&amp;#x3D;4 2*4&amp;#x3D;8 3*4&amp;#x3D;12 4*4&amp;#x3D;16&lt;/p&gt;
&lt;p&gt;1*5&amp;#x3D;5 2*5&amp;#x3D;10 3*5&amp;#x3D;15 4*5&amp;#x3D;20 5*5&amp;#x3D;25&lt;/p&gt;
&lt;p&gt;1*6&amp;#x3D;6 2*6&amp;#x3D;12 3*6&amp;#x3D;18 4*6&amp;#x3D;24 5*6&amp;#x3D;30 6*6&amp;#x3D;36&lt;/p&gt;
&lt;p&gt;1*7&amp;#x3D;7 2*7&amp;#x3D;14 3*7&amp;#x3D;21 4*7&amp;#x3D;28 5*7&amp;#x3D;35 6*7&amp;#x3D;42 7*7&amp;#x3D;49&lt;/p&gt;
&lt;p&gt;1*8&amp;#x3D;8 2*8&amp;#x3D;16 3*8&amp;#x3D;24 4*8&amp;#x3D;32 5*8&amp;#x3D;40 6*8&amp;#x3D;48 7*8&amp;#x3D;56 8*8&amp;#x3D;64&lt;/p&gt;
&lt;p&gt;1*9&amp;#x3D;9 2*9&amp;#x3D;18 3*9&amp;#x3D;27 4*9&amp;#x3D;36 5*9&amp;#x3D;45 6*9&amp;#x3D;54 7*9&amp;#x3D;63 8*9&amp;#x3D;72 9*9&amp;#x3D;81&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor11&amp;#123;
    public static void main(String[] args)&amp;#123;
        //1\*6=6 2\*6=12 3\*6=18 4\*6=24 5\*6=30 6\*6=36
        /\*
            System.out.print(&amp;quot;1\*6=6&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;2\*6=12&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;3\*6=18&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;4\*6=24&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;5\*6=30&amp;quot;+&amp;quot;\\t&amp;quot;);
        System.out.print(&amp;quot;6\*6=36&amp;quot;+&amp;quot;\\t&amp;quot;);

        for(int i=1;i\&amp;lt;=6;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*6=&amp;quot;+i\*6+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();

        //1\*7=7 2\*7=14 3\*7=21 4\*7=28 5\*7=35 6\*7=42 7\*7=49
        for(int i=1;i\&amp;lt;=7;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*7=&amp;quot;+i\*7+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();

        //1\*8=8 2\*8=16 3\*8=24 4\*8=32 5\*8=40 6\*8=48 7\*8=56 8\*8=64
        for(int i=1;i\&amp;lt;=8;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*8=&amp;quot;+i\*8+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();
        \*/

            for(int j=1;j\&amp;lt;=9;j++)&amp;#123;
                for(int i=1;i\&amp;lt;=j;i++)&amp;#123;
                    System.out.print(i+&amp;quot;\*&amp;quot;+j+&amp;quot;=&amp;quot;+i\*j+&amp;quot;\\t&amp;quot;);
                &amp;#125;
                //换行
                System.out.println();
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1*9&amp;#x3D;9 2*9&amp;#x3D;18 3*9&amp;#x3D;27 4*9&amp;#x3D;36 5*9&amp;#x3D;45 6*9&amp;#x3D;54 7*9&amp;#x3D;63 8*9&amp;#x3D;72 9*9&amp;#x3D;81&lt;/p&gt;
&lt;p&gt;1*8&amp;#x3D;8 2*8&amp;#x3D;16 3*8&amp;#x3D;24 4*8&amp;#x3D;32 5*8&amp;#x3D;40 6*8&amp;#x3D;48 7*8&amp;#x3D;56 8*8&amp;#x3D;64&lt;/p&gt;
&lt;p&gt;1*7&amp;#x3D;7 2*7&amp;#x3D;14 3*7&amp;#x3D;21 4*7&amp;#x3D;28 5*7&amp;#x3D;35 6*7&amp;#x3D;42 7*7&amp;#x3D;49&lt;/p&gt;
&lt;p&gt;1*6&amp;#x3D;6 2*6&amp;#x3D;12 3*6&amp;#x3D;18 4*6&amp;#x3D;24 5*6&amp;#x3D;30 6*6&amp;#x3D;36&lt;/p&gt;
&lt;p&gt;1*5&amp;#x3D;5 2*5&amp;#x3D;10 3*5&amp;#x3D;15 4*5&amp;#x3D;20 5*5&amp;#x3D;25&lt;/p&gt;
&lt;p&gt;1*4&amp;#x3D;4 2*4&amp;#x3D;8 3*4&amp;#x3D;12 4*4&amp;#x3D;16&lt;/p&gt;
&lt;p&gt;1*3&amp;#x3D;3 2*3&amp;#x3D;6 3*3&amp;#x3D;9&lt;/p&gt;
&lt;p&gt;1*2&amp;#x3D;2 2*2&amp;#x3D;4&lt;/p&gt;
&lt;p&gt;1*1&amp;#x3D;1&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor12&amp;#123;
    public static void main(String[] args)&amp;#123;

        /\*
            //1\*8=8 2\*8=16 3\*8=24 4\*8=32 5\*8=40 6\*8=48 7\*8=56 8\*8=64
            for(int i=1;i\&amp;lt;=8;i++)&amp;#123;
                System.out.print(i+&amp;quot;\*8=&amp;quot;+i\*8+&amp;quot;\\t&amp;quot;);
            &amp;#125;
        //换行
        System.out.println();


        //1\*7=7 2\*7=14 3\*7=21 4\*7=28 5\*7=35 6\*7=42 7\*7=49
        for(int i=1;i\&amp;lt;=7;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*7=&amp;quot;+i\*7+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();

        //1\*6=6 2\*6=12 3\*6=18 4\*6=24 5\*6=30 6\*6=36
        for(int i=1;i\&amp;lt;=6;i++)&amp;#123;
            System.out.print(i+&amp;quot;\*6=&amp;quot;+i\*6+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        //换行
        System.out.println();




        \*/

            for(int j=9;j\&amp;gt;=1;j--)&amp;#123;
                for(int i=1;i\&amp;lt;=j;i++)&amp;#123;
                    System.out.print(i+&amp;quot;\*&amp;quot;+j+&amp;quot;=&amp;quot;+i\*j+&amp;quot;\\t&amp;quot;);
                &amp;#125;
                //换行
                System.out.println();
            &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打印各种形状&lt;/p&gt;
&lt;p&gt;【1】长方形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/34a4f4344ea5d5ffd88f932d98827359.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;for(int j=1;j\&amp;lt;=4;j++)&amp;#123;//j:控制行数
    //\*\*\*\*\*\*\*\*\*
    for(int i=1;i\&amp;lt;=9;i++)&amp;#123;//i:控制\*的个数
        System.out.print(&amp;quot;\*&amp;quot;);
    &amp;#125;
    //换行：
    System.out.println();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】距离前面有一定空隙的长方形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/53f97abfc48cab59034a76006c1c1c71.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;5;i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;9;i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【3】平行四边形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/67d40798af8ec1921f09d49c09d0137c.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(9-j);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;9;i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【4】三角形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/49555021efb328437055bea6119ae9f2.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(9-j);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(2*j-1);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【5】菱形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/d798118edc1454a1bb0e83bb70d60758.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;上面三角形：&lt;/li&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(9-j);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(2*j-1);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;下面三角形：&lt;/li&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;3;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(j+5);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(7-2*j);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【6】空心菱形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/7df2cd3380e772f02c2dcbcc4d6a3438.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;上面三角形：&lt;/li&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;4;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(9-j);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(2*j-1);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;if(i&amp;#x3D;&amp;#x3D;1||i&amp;#x3D;&amp;#x3D;(2*j-1)){&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}else{&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;下面三角形：&lt;/li&gt;
&lt;li&gt;for(int j&amp;#x3D;1;j&amp;lt;&amp;#x3D;3;j++){&amp;#x2F;&amp;#x2F;j:控制行数&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;加入空格：&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(j+5);i++){&amp;#x2F;&amp;#x2F;i:控制空格的个数&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;*********&lt;/li&gt;
&lt;li&gt;for(int i&amp;#x3D;1;i&amp;lt;&amp;#x3D;(7-2*j);i++){&amp;#x2F;&amp;#x2F;i:控制*的个数&lt;/li&gt;
&lt;li&gt;if(i&amp;#x3D;&amp;#x3D;1||i&amp;#x3D;&amp;#x3D;(7-2*j)){&lt;/li&gt;
&lt;li&gt;System.out.print(“*“);&lt;/li&gt;
&lt;li&gt;}else{&lt;/li&gt;
&lt;li&gt;System.out.print(“ “);&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;换行：&lt;/li&gt;
&lt;li&gt;System.out.println();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;扩展：菱形打印方式2&lt;/p&gt;
&lt;p&gt;【1】实心菱形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/745dd4be231e5197141fa4721b372fa9.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor14&amp;#123;
    public static void main(String[] args)&amp;#123;
        //先打印出一个正方形，然后某些位置上打印\* 某些位置上打印空格：
        int size = 17;
        int startNum = size/2+1;//起始列号
        int endNum = size/2+1;//结束列号
        //引入一个布尔类型的变量---》理解为“开关”
        boolean flag = true;
        for(int j=1;j\&amp;lt;=size;j++)&amp;#123;
            //\*\*\*\*\*
            for(int i=1;i\&amp;lt;=size;i++)&amp;#123;
                if(i\&amp;gt;=startNum&amp;amp;&amp;amp;i\&amp;lt;=endNum)&amp;#123;
                    System.out.print(&amp;quot;\*&amp;quot;);
                &amp;#125;else&amp;#123;
                    System.out.print(&amp;quot; &amp;quot;);
                &amp;#125;
            &amp;#125;
            //换行
            System.out.println();
            if(endNum==size)&amp;#123;
                flag = false;
            &amp;#125;

            if(flag)&amp;#123;//flag是true相当于在菱形的上半侧 flag是false相当于在菱形的下半侧
                startNum--;
                endNum++;
            &amp;#125;else&amp;#123;
                startNum++;
                endNum--;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】空心菱形：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/8938fc30a4da55ff90c902646c105355.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestFor14&amp;#123;
    public static void main(String[] args)&amp;#123;
        //先打印出一个正方形，然后某些位置上打印\* 某些位置上打印空格：
        int size = 17;
        int startNum = size/2+1;//起始列号
        int endNum = size/2+1;//结束列号
        //引入一个布尔类型的变量---》理解为“开关”
        boolean flag = true;
        for(int j=1;j\&amp;lt;=size;j++)&amp;#123;
            //\*\*\*\*\*
            for(int i=1;i\&amp;lt;=size;i++)&amp;#123;
                if(i==startNum\|\|i==endNum)&amp;#123;
                    System.out.print(&amp;quot;\*&amp;quot;);
                &amp;#125;else&amp;#123;
                    System.out.print(&amp;quot; &amp;quot;);
                &amp;#125;
            &amp;#125;
            //换行
            System.out.println();
            if(endNum==size)&amp;#123;
                flag = false;
            &amp;#125;

            if(flag)&amp;#123;//flag是true相当于在菱形的上半侧 flag是false相当于在菱形的下半侧
                startNum--;
                endNum++;
            &amp;#125;else&amp;#123;
                startNum++;
                endNum--;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;三重循环&#34;&gt;&lt;a href=&#34;#三重循环&#34; class=&#34;headerlink&#34; title=&#34;三重循环&#34;&gt;&lt;/a&gt;三重循环&lt;/h3&gt;&lt;p&gt;百钱买百鸡&lt;/p&gt;
&lt;p&gt;【1】二重循环可以帮我们解决：二元一次方程组的问题：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public   class   TestFor15 &amp;#123;
    public   static   void   main (String[] args)&amp;#123;
        for ( int  a=1;a\&amp;lt;=5;a++)&amp;#123;
            for ( int  b=3;b\&amp;lt;=6;b++)&amp;#123;
                if (a+b==7)&amp;#123;
                    System. out .println(a+&amp;quot;----&amp;quot;+b);
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】三重循环可以帮我们解决：三元一次方程组的问题：&lt;/p&gt;
</content>
        <category term="-JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/</id>
        <title>第5章_方法的定义_调用_重载</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/"/>
        <content type="html">&lt;h1 id=&#34;方法的定义和调用&#34;&gt;&lt;a href=&#34;#方法的定义和调用&#34; class=&#34;headerlink&#34; title=&#34;方法的定义和调用&#34;&gt;&lt;/a&gt;方法的定义和调用&lt;/h1&gt;&lt;p&gt;【1】什么是方法？&lt;/p&gt;
&lt;p&gt;方法(method)就是一段用来完成特定功能的代码片段，类似于其它语言的函数(function)。&lt;/p&gt;
&lt;p&gt;方法用于定义该类或该类的实例的行为特征和功能实现。 方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。&lt;/p&gt;
&lt;p&gt;【2】方法声明格式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[修饰符1 修饰符2 …] 返回值类型 方法名(形式参数列表){   Java语句；… … …  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;【3】方法的调用方式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对象名.方法名(实参列表)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;【4】方法的详细说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;形式参数：在方法声明时用于接收外界传入的数据。&lt;/li&gt;
&lt;li&gt;实参：调用方法时实际传给方法的数据。&lt;/li&gt;
&lt;li&gt;返回值：方法在执行完毕后返还给调用它的环境的数据。&lt;/li&gt;
&lt;li&gt;返回值类型：事先约定的返回值的数据类型，如无返回值，必须显示指定为为void。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;【5】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestMethod01&amp;#123;

    //方法的定义：（写方法）
    public static int add(int num1,int num2)&amp;#123;
        int sum = 0;
        sum += num1;
        sum += num2;
        return sum;//将返回值返回到方法的调用处
    &amp;#125;

    public static void main(String[] args)&amp;#123;
        //10+20:
        //方法的调用：（用方法）
        int num = add(10,20);
        System.out.println(num);
        /\*
            int num1 = 10;
        int num2 = 20;
        int sum = 0;
        sum += num1;
        sum += num2;
        System.out.println(sum);
        \*/
            //30+90:
            int sum = add(30,90);
        System.out.println(sum);
        /\*
            int num3 = 30;
        int num4 = 90;
        int sum1 = 0 ;
        sum1 += num3;
        sum1 += num4;
        System.out.println(sum1);
        \*/
            //50+48:
            System.out.println(add(50,48));

    &amp;#125;


&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【6】总结：&lt;/p&gt;
&lt;p&gt;1.方法是：对特定的功能进行提取，形成一个代码片段，这个代码片段就是我们所说的方法&lt;/p&gt;
&lt;p&gt;2.方法和方法是并列的关系，所以我们定义的方法不能写到main方法中&lt;/p&gt;
&lt;p&gt;3.方法的定义–》格式：&lt;/p&gt;
&lt;p&gt;修饰符 方法返回值类型 方法名(形参列表){&lt;/p&gt;
&lt;p&gt;方法体;&lt;/p&gt;
&lt;p&gt;return 方法返回值;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;4.方法的作用：提高代码的复用性&lt;/p&gt;
&lt;p&gt;5.总结方法定义的格式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修饰符: 暂时使用public static —&amp;gt;面向对象一章讲解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法返回值类型 : 方法的返回值对应的数据类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据类型： 可以是基本数据类型（byte,short,int,long,float,double,char,boolean） 也可以是引用数据类型&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;p&gt;方法名 :见名知意，首字母小写，其余遵循驼峰命名， eg: addNum ,一般尽量使用英文来命名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;形参列表 :方法定义的时候需要的形式参数 ： int num1, int num2 –&amp;gt;相当于告诉方法的调用者：需要传入几个参数，需要传入的参数的类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实际参数：方法调用的时候传入的具体的参数： 10,20 –&amp;gt;根据形式参数的需要传入的&lt;/p&gt;
&lt;p&gt;5)方法体：具体的业务逻辑代码&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;return 方法返回值;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法如果有返回值的话： return+方法返回值，将返回值返回到方法的调用处&lt;/p&gt;
&lt;p&gt;方法没有返回值的话：return可以省略不写了，并且方法的返回值类型为：void&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestMethod02&amp;#123;

    public static void add(int num1,int num2)&amp;#123;
        int sum = 0;
        sum += num1;
        sum += num2;
        System.out.println(sum);
        //return;
    &amp;#125;

    public static void main(String[] args)&amp;#123;
        //10+20:
        //方法的调用：（用方法）
        add(10,20);
        //30+90:
        add(30,90);
        //50+48:
        //System.out.println(add(50,48));//报错：TestMethod02.java:22: 错误: 此处不允许使用 &amp;#39;空&amp;#39; 类型

    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;什么时候有返回值，什么时候没有返回值？ 看心情–》看需求&lt;/p&gt;
&lt;p&gt;6.方法的定义需要注意什么？&lt;/p&gt;
&lt;p&gt;1）形参列表要怎么写：定义几个参数，分别是什么类型的 —》不确定因素我们会当做方法的形参&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;方法到底是否需要返回值 ，如果需要的话，返回值的类型是什么&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;7.方法的调用需要注意什么？&lt;/p&gt;
&lt;p&gt;1）实际参数要怎么传入：传入几个参数，传入什么类型的&lt;/p&gt;
&lt;p&gt;2） 方法是否有返回值需要接受&lt;/p&gt;
&lt;h2 id=&#34;练习&#34;&gt;&lt;a href=&#34;#练习&#34; class=&#34;headerlink&#34; title=&#34;练习&#34;&gt;&lt;/a&gt;练习&lt;/h2&gt;&lt;p&gt;【1】基本功能：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestMethod03&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：我心里有一个数，你来猜，看是否猜对
        //1.你猜一个数
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请你猜一个数：&amp;quot;);
        int yourGuessNum = sc.nextInt();
        //2.我心里有一个数
        int myHeartNum = 5;
        //3.将两个数比对：
        System.out.println(yourGuessNum==myHeartNum?&amp;quot;猜对了&amp;quot;:&amp;quot;猜错了&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对猜数功能提取为一个方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestMethod03&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：我心里有一个数，你来猜，看是否猜对
        //1.你猜一个数
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请你猜一个数：&amp;quot;);
        int yourGuessNum = sc.nextInt();

        //调用猜数的方法：
        guessNum(yourGuessNum);
    &amp;#125;

    //方法的定义：功能：实现猜数功能：
    public static void guessNum(int yourNum)&amp;#123;
        //我心里有一个数(1-6)
        int myHeartNum = (int)(Math.random()\*6)+1;
        //将两个数比对：
        System.out.println(yourNum==myHeartNum?&amp;quot;猜对了&amp;quot;:&amp;quot;猜错了&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;面试题：两个数交换是否成功&#34;&gt;&lt;a href=&#34;#面试题：两个数交换是否成功&#34; class=&#34;headerlink&#34; title=&#34;面试题：两个数交换是否成功&#34;&gt;&lt;/a&gt;面试题：两个数交换是否成功&lt;/h2&gt;&lt;p&gt;【1】面试题：请问下面代码中两个数是否交换成功：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;|———————————————————————————————————————————————————————————————————————————————————————————————————————————-|&lt;/p&gt;
&lt;p&gt;结果：没有交换成功：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/d6adc25927a033764c5d084d040d5d88.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;原因：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC5%E7%AB%A0_%E6%96%B9%E6%B3%95%E7%9A%84%E5%AE%9A%E4%B9%89_%E8%B0%83%E7%94%A8_%E9%87%8D%E8%BD%BD/2a7e512536fdb2b6389db0fa7b3f959f.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;方法的重载&#34;&gt;&lt;a href=&#34;#方法的重载&#34; class=&#34;headerlink&#34; title=&#34;方法的重载&#34;&gt;&lt;/a&gt;方法的重载&lt;/h1&gt;&lt;p&gt;【1】什么是方法的重载：&lt;/p&gt;
&lt;p&gt;方法的重载是指一个类中可以定义多个方法名相同，但参数不同的方法。 调用时，会根据不同的参数自动匹配对应的方法。&lt;/p&gt;
&lt;p&gt;注意本质：重载的方法，实际是完全不同的方法，只是名称相同而已！&lt;/p&gt;
&lt;p&gt;【2】构成方法重载的条件：&lt;/p&gt;
&lt;p&gt;❀不同的含义：形参类型、形参个数、形参顺序不同&lt;/p&gt;
&lt;p&gt;❀ 只有返回值不同不构成方法的重载&lt;/p&gt;
&lt;p&gt;如：int a(String str){}与 void a(String str){}不构成方法重载&lt;/p&gt;
&lt;p&gt;❀ 只有形参的名称不同，不构成方法的重载&lt;/p&gt;
&lt;p&gt;如：int a(String str){}与int a(String s){}不构成方法重载&lt;/p&gt;
&lt;p&gt;【3】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestMethod05&amp;#123;
    public static void main(String[] args)&amp;#123;
        //10+20:
        int sum = add(10,20);
        System.out.println(sum);

        //20+40+80:
        //System.out.println(add(add(20,40),80));
        System.out.println(add(20,40,80));
        //30+60+90+120:
        //System.out.println(add(add(30,60),add(90,120)));
        System.out.println(add(30,60,90,120));
        //9.8+4.7:
        //System.out.println(add(9.8,4.7));
        System.out.println(add(9.8,4.7));
    &amp;#125;

    //定义一个方法：两个数相加：两个int类型数据相加
    public static int add(int num1,int num2)&amp;#123;
        return num1+num2;
    &amp;#125;

    //定义一个方法：三个数相加：
    public static int add(int num1,int num2,int num3)&amp;#123;
        return num1+num2+num3;
    &amp;#125;

    //定义一个方法：四个数相加：
    public static int add(int num1,int num2,int num3,int num4)&amp;#123;
        return num1+num2+num3+num4;
    &amp;#125;
    //定义一个方法：两个数相加：两个double类型的数据相加
    public static double add(double num1,double num2)&amp;#123;
        return num1+num2;
    &amp;#125;


&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;1.方法的重载：在同一个类中，方法名相同，形参列表不同的多个方法，构成了方法的重载。&lt;/p&gt;
&lt;p&gt;2.方法的重载只跟：方法名和形参列表有关，与修饰符，返回值类型无关。&lt;/p&gt;
&lt;p&gt;3.注意：形参列表不同指的是什么？&lt;/p&gt;
&lt;p&gt;（1）个数不同&lt;/p&gt;
&lt;p&gt;add() add(int num1) add(int num1,int num2)&lt;/p&gt;
&lt;p&gt;（2）顺序不同&lt;/p&gt;
&lt;p&gt;add(int num1,double num2) add(double num1,int num2)&lt;/p&gt;
&lt;p&gt;（3）类型不同&lt;/p&gt;
&lt;p&gt;add(int num1) add(double num1)&lt;/p&gt;
&lt;p&gt;4.请问下面的方法是否构成了方法的重载？&lt;/p&gt;
&lt;p&gt;(1)add(int a) 和 add(int b) —&amp;gt;不构成,相当于方法的重复定义&lt;/p&gt;
&lt;p&gt;(2)public static int add(int a) 和 public static void add(int b) —&amp;gt;不构成&lt;/p&gt;
&lt;p&gt;【4】扩充：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestMethod06&amp;#123;
    public static void main(String[] args)&amp;#123;
        add(5);
        //级别：byte,short,char--\&amp;gt;int--\&amp;gt;long--\&amp;gt;float---\&amp;gt;double
    &amp;#125;
    
    public static void add(double num1)&amp;#123;
        System.out.println(&amp;quot;------2&amp;quot;);
    &amp;#125;
    public static void add(float num1)&amp;#123;
        System.out.println(&amp;quot;------3&amp;quot;);
    &amp;#125;
    public static void add(long num1)&amp;#123;
        System.out.println(&amp;quot;------4&amp;quot;);
    &amp;#125;
    /\*
        public static void add(int num1)&amp;#123;
        System.out.println(&amp;quot;------1&amp;quot;);
    &amp;#125;
    \*/
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/</id>
        <title>第6章_数组</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/"/>
        <content type="html">&lt;h1 id=&#34;数组的引入&#34;&gt;&lt;a href=&#34;#数组的引入&#34; class=&#34;headerlink&#34; title=&#34;数组的引入&#34;&gt;&lt;/a&gt;数组的引入&lt;/h1&gt;&lt;p&gt;【1】习题引入：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestArray01&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：键盘录入十个学生的成绩，求和，求平均数：
        //定义一个求和的变量：
        int sum = 0;
        Scanner sc = new Scanner(System.in);

        for(int i=1;i\&amp;lt;=10;i++)&amp;#123;//i:控制循环次数
            System.out.print(&amp;quot;请录入第&amp;quot;+i+&amp;quot;个学生的成绩：&amp;quot;);
            int score = sc.nextInt();
            sum += score;
        &amp;#125;

        System.out.println(&amp;quot;十个学生的成绩之和为：&amp;quot;+sum);
        System.out.println(&amp;quot;十个学生的成绩平均数为：&amp;quot;+sum/10);

        //本题的缺点：
        //求第6个学生的成绩：？？？？？---》不能

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;缺点：就是不能求每个学生的成绩具体是多少&lt;/p&gt;
&lt;p&gt;解决：将成绩进行存储 —-》 引入 ： 数组&lt;/p&gt;
&lt;p&gt;感受到数组的作用：数组用来存储数据的，在程序设计中，为了处理方便，数组用来将相同类型的若干数据组织起来。&lt;/p&gt;
&lt;p&gt;这个若干数据的集合我们称之为数组。&lt;/p&gt;
&lt;h1 id=&#34;数组的学习&#34;&gt;&lt;a href=&#34;#数组的学习&#34; class=&#34;headerlink&#34; title=&#34;数组的学习&#34;&gt;&lt;/a&gt;数组的学习&lt;/h1&gt;&lt;p&gt;【1】数组的定义&lt;/p&gt;
&lt;p&gt;数组是相同类型数据的有序集合。数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成。其中，每一个数据称作一个元素，每个元素可以通过一个索引（下标）来访问它们。&lt;/p&gt;
&lt;p&gt;数组的四个基本特点：&lt;/p&gt;
&lt;p&gt;1.长度是确定的。数组一旦被创建，它的大小就是不可以改变的。&lt;/p&gt;
&lt;p&gt;2.其元素的类型必须是相同类型，不允许出现混合类型。&lt;/p&gt;
&lt;p&gt;3.数组类型可以是任何数据类型，包括基本类型和引用类型。&lt;/p&gt;
&lt;p&gt;4.数组有索引的：索引从0开始，到 数组.length-1 结束&lt;/p&gt;
&lt;p&gt;5.数组变量属于引用类型，数组也是对象。&lt;/p&gt;
&lt;p&gt;PS:数组变量属于引用类型，数组也是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，数组对象本身是在堆中存储的。&lt;/p&gt;
&lt;p&gt;【2】数组的学习：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray02&amp;#123;
    public static void main(String[] args)&amp;#123;
        //数组的作用：用来存储相同类型的数据
        //以int类型数据为案例：数组用来存储int类型数据
        //1.声明(定义数组)
        int[] arr; //定义一个int类型的数组，名字叫arr
        //int arr2[];
        //如果数组只声明，没有后续操作，那么这个数组相当于没定义
        //int[] arr3 = null;//空 辨别：数组赋值为null和什么都没有赋值 不一样的效果

        //2.创建
        arr = new int[4];//给数组开辟了一个长度为4的空间
        //编译期声明和创建会被合为一句话: int[] arr = new int[4];

        //3.赋值
        arr[0] = 12;
        arr[3] = 47;
        arr[2] = 98;
        arr[1] = 56;
        arr[2] = 66;
        /\*
            arr[4] = 93;
        出现异常：Exception in thread &amp;quot;main&amp;quot; java.lang.ArrayIndexOutOfBoundsException: 4
            Array 数组
            Index 索引
            OutOf 超出
            Bounds 界限
            Exception 异常
            \---》数组索引越界异常
            \*/

            //4.使用
            System.out.println(arr[2]);
        System.out.println(arr[0]+100);
        //通过数组一个属性来获取 length 长度
        System.out.println(&amp;quot;数组的长度是：&amp;quot;+arr.length);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;内存分析&#34;&gt;&lt;a href=&#34;#内存分析&#34; class=&#34;headerlink&#34; title=&#34;内存分析&#34;&gt;&lt;/a&gt;内存分析&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/046af579ec25dd3f79d0c86ae6002a90.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;完善引入的习题-数组的遍历&#34;&gt;&lt;a href=&#34;#完善引入的习题-数组的遍历&#34; class=&#34;headerlink&#34; title=&#34;完善引入的习题_数组的遍历&#34;&gt;&lt;/a&gt;完善引入的习题_数组的遍历&lt;/h1&gt;&lt;p&gt;【1】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestArray03&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：键盘录入十个学生的成绩，求和，求平均数：
        //定义一个int类型的数组，长度为10 ：
        int[] scores = new int[10];
        //定义一个求和的变量：
        int sum = 0;
        Scanner sc = new Scanner(System.in);

        for(int i=1;i\&amp;lt;=10;i++)&amp;#123;//i:控制循环次数
            System.out.print(&amp;quot;请录入第&amp;quot;+i+&amp;quot;个学生的成绩：&amp;quot;);
            int score = sc.nextInt();
            scores[i-1] = score;
            sum += score;
        &amp;#125;

        System.out.println(&amp;quot;十个学生的成绩之和为：&amp;quot;+sum);
        System.out.println(&amp;quot;十个学生的成绩平均数为：&amp;quot;+sum/10);


        //求第6个学生的成绩：
        //System.out.println(scores[5]);
        /\*
            System.out.println(scores[0]);
        System.out.println(scores[1]);
        System.out.println(scores[2]);
        System.out.println(scores[3]);
        //....
        System.out.println(scores[9]);
        \*/
            //将数组中的每个元素进行查看--》数组的遍历：
            //方式1：普通for循环---》正向遍历：
            for(int i=0;i\&amp;lt;=9;i++)&amp;#123;
                System.out.println(&amp;quot;第&amp;quot;+(i+1)+&amp;quot;个学生的成绩为：&amp;quot;+scores[i]);
            &amp;#125;

        //方式2：增强for循环:
        //对scores数组进行遍历，遍历出来每个元素都用int类型的num接收：
        int count = 0;
        for(int num:scores)&amp;#123;
            count++;
            //每次都将num在控制台输出
            System.out.println(&amp;quot;第&amp;quot;+count+&amp;quot;个学生的成绩为：&amp;quot;+num);
        &amp;#125;

        /\*
            增强for循环：
            优点：代码简单
            缺点：单纯的增强for循环不能涉及跟索引相关的操作
            \*/

            //方式3：利用普通for循环： 逆向遍历：
            for(int i=9;i\&amp;gt;=0;i--)&amp;#123;
                System.out.println(&amp;quot;第&amp;quot;+(i+1)+&amp;quot;个学生的成绩为：&amp;quot;+scores[i]);
            &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】用IDEA验证数组的确将数据进行存储了：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/8a7a660c15849bc9d85e42452b74c0a5.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;数组的三种初始化方式&#34;&gt;&lt;a href=&#34;#数组的三种初始化方式&#34; class=&#34;headerlink&#34; title=&#34;数组的三种初始化方式&#34;&gt;&lt;/a&gt;数组的三种初始化方式&lt;/h1&gt;&lt;p&gt;数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[] arr = &amp;#123;12,23,45&amp;#125;;

int[] arr = new int[]&amp;#123;12,23,45&amp;#125;;

注意：

1.new int[3]&amp;#123;12,23,45&amp;#125;;--\&amp;gt;错误

2.int[] arr ;

arr = &amp;#123;12,23,45&amp;#125;; ---\&amp;gt;错误
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;动态初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组定义与为数组元素分配空间并赋值的操作分开进行。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[] arr ;

arr = new int[3]

arr[0] = 12;

arr[1] = 23;

arr[2] = 45;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;默认初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。&lt;/p&gt;
&lt;p&gt;int[] arr &amp;#x3D; new int[3]; —&amp;gt; 数组有默认的初始化值&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/7dd1ca8911a4defc392409e9442bb532.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;数组的应用题&#34;&gt;&lt;a href=&#34;#数组的应用题&#34; class=&#34;headerlink&#34; title=&#34;数组的应用题&#34;&gt;&lt;/a&gt;数组的应用题&lt;/h1&gt;&lt;h2 id=&#34;最值问题&#34;&gt;&lt;a href=&#34;#最值问题&#34; class=&#34;headerlink&#34; title=&#34;最值问题&#34;&gt;&lt;/a&gt;最值问题&lt;/h2&gt;&lt;p&gt;【1】实现一个功能：给定一个数组int[] arr &amp;#x3D; {12,3,7,4,8,125,9,45}; ，求出数组中最大的数。&lt;/p&gt;
&lt;p&gt;思路图：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/70c971a42c3219e306e6ece0eb9e41d8.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray04&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现一个功能：给定一个数组int[] arr = &amp;#123;12,3,7,4,8,125,9,45&amp;#125;; ，求出数组中最大的数。
        //1.给定一个数组
        int[] arr = &amp;#123;12,3,7,4,8,125,9,45,666,36&amp;#125;;

        //2.求出数组中的最大值：
        //先找一个数上擂台，假定认为这个数最大：
        int maxNum = arr[0];
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]\&amp;gt;maxNum)&amp;#123;
                maxNum = arr[i];
            &amp;#125;
        &amp;#125;
        System.out.println(&amp;quot;当前数组中最大的数为：&amp;quot;+maxNum);

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】将求最大值的方法提取出来：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray04&amp;#123;
    public static void main(String[] args)&amp;#123;
        //实现一个功能：给定一个数组int[] arr = &amp;#123;12,3,7,4,8,125,9,45&amp;#125;; ，求出数组中最大的数。
        //1.给定一个数组
        int[] arr = &amp;#123;12,3,7,4,8,725,9,45,666,36&amp;#125;;

        //2.求出数组中的最大值：
        //调用方法：
        int num = getMaxNum(arr);
        System.out.println(&amp;quot;当前数组中最大的数为：&amp;quot;+num);
    &amp;#125;

    /\*
        想提取一个方法：求数组中的最大值
        求哪个数组中的最大值 ---》不确定因素：哪个数组 (形参)---》返回值：最大值
        \*/
        public static int getMaxNum(int[] arr)&amp;#123;
        //先找一个数上擂台，假定认为这个数最大：
        int maxNum = arr[0];
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]\&amp;gt;maxNum)&amp;#123;
                maxNum = arr[i];
            &amp;#125;
        &amp;#125;
        return maxNum;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】画内存：&lt;/p&gt;
&lt;p&gt;方法的实参传递给形参的时候一定要注意：一切都是值传递：&lt;/p&gt;
&lt;p&gt;如果是基本数据类型，那么传递的就是字面值&lt;/p&gt;
&lt;p&gt;如果是引用数据类型，那么传递的就是地址值&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/9fcaf17f1bd6f6c30ecdf3db3fb2a57c.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;查询问题&#34;&gt;&lt;a href=&#34;#查询问题&#34; class=&#34;headerlink&#34; title=&#34;查询问题&#34;&gt;&lt;/a&gt;查询问题&lt;/h2&gt;&lt;p&gt;【1】查询指定位置的元素&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray05&amp;#123;
    public static void main(String[] args)&amp;#123;
        //查询指定位置的元素
        //给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10&amp;#125;;
        //查找索引为2的位置上对应的元素是什么？
        System.out.println(arr[2]);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码体现了数组的一个优点：&lt;/p&gt;
&lt;p&gt;在按照位置查询的时候，直接一步到位，效率非常高&lt;/p&gt;
&lt;p&gt;【2】查询指定元素的位置–》找出元素对应的索引&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //查询指定元素的位置--》找出元素对应的索引
        //给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,56&amp;#125;;
        // 0 1 2 3 4 5

        //功能：查询元素888对应的索引：
        int index = -1; //这个初始值只要不是数组的索引即可
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]==12)&amp;#123;
                index = i;//只要找到了元素，那么index就变成为i
                break;//只要找到这个元素，循环就停止
            &amp;#125;
        &amp;#125;
        if(index!=-1)&amp;#123;
            System.out.println(&amp;quot;元素对应的索引：&amp;quot;+index);
        &amp;#125;else&amp;#123;//index==-1
            System.out.println(&amp;quot;查无次数！&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】将查指定元素对应的索引的功能提取为方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray06&amp;#123;
    public static void main(String[] args)&amp;#123;
        //查询指定元素的位置--》找出元素对应的索引
        //给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,56&amp;#125;;
        // 0 1 2 3 4 5

        //功能：查询元素888对应的索引：
        //调用方法：
        int index = getIndex(arr,999);
        //后续对index的值进行判断：
        if(index!=-1)&amp;#123;
            System.out.println(&amp;quot;元素对应的索引：&amp;quot;+index);
        &amp;#125;else&amp;#123;//index==-1
            System.out.println(&amp;quot;查无次数！&amp;quot;);
        &amp;#125;
    &amp;#125;

    /\*
        定义一个方法：查询数组中指定的元素对应的索引：
        不确定因素：哪个数组，哪个指定元素 （形参）
        返回值：索引

        \*/
        public static int getIndex(int[] arr,int ele)&amp;#123;
        int index = -1; //这个初始值只要不是数组的索引即可
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]==ele)&amp;#123;
                index = i;//只要找到了元素，那么index就变成为i
                break;//只要找到这个元素，循环就停止
            &amp;#125;
        &amp;#125;
        return index;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;添加元素&#34;&gt;&lt;a href=&#34;#添加元素&#34; class=&#34;headerlink&#34; title=&#34;添加元素&#34;&gt;&lt;/a&gt;添加元素&lt;/h2&gt;&lt;p&gt;【1】实现一个功能：&lt;/p&gt;
&lt;p&gt;添加逻辑：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/b8b369a935a5784a33f79bddc13e998b.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray07&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：给定一个数组,在数组下标为2的位置上添加一个元素91

        //1.给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10,55,66,77,88,999,89&amp;#125;;
        // 0 1 2 3 4 5
        //2.输出增加元素前的数组：
        System.out.print(&amp;quot;增加元素前的数组：&amp;quot;);
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(i!=arr.length-1)&amp;#123;
                System.out.print(arr[i]+&amp;quot;,&amp;quot;);
            &amp;#125;else&amp;#123;//i==arr.length-1 最后一个元素不用加,
                System.out.print(arr[i]);
            &amp;#125;
        &amp;#125;

        //3.增加元素
        /\*
            arr[5] = arr[4];
        arr[4] = arr[3];
        arr[3] = arr[2];
        \*/
            int index = 1;//在这个指定位置添加 元素
        for(int i=arr.length-1;i\&amp;gt;=(index+1);i--)&amp;#123;
            arr[i] = arr[i-1];
        &amp;#125;
        arr[index] = 666;


        //4.输出增加元素后的数组：
        System.out.print(&amp;quot;\\n增加元素后的数组：&amp;quot;);
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(i!=arr.length-1)&amp;#123;
                System.out.print(arr[i]+&amp;quot;,&amp;quot;);
            &amp;#125;else&amp;#123;//i==arr.length-1 最后一个元素不用加,
                System.out.print(arr[i]);
            &amp;#125;
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】将添加功能提取为一个 方法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;
public class TestArray07&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：给定一个数组,在数组下标为2的位置上添加一个元素91

        //1.给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10,55,66,77,88,999,89&amp;#125;;
        // 0 1 2 3 4 5
        //2.输出增加元素前的数组：
        /\*
            System.out.print(&amp;quot;增加元素前的数组：&amp;quot;);
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(i!=arr.length-1)&amp;#123;
                System.out.print(arr[i]+&amp;quot;,&amp;quot;);
            &amp;#125;else&amp;#123;//i==arr.length-1 最后一个元素不用加,
                System.out.print(arr[i]);
            &amp;#125;
        &amp;#125;
        \*/

            //从键盘接收数据：
            Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入你要添加元素的指定下标：&amp;quot;);
        int index = sc.nextInt();
        System.out.println(&amp;quot;请录入你要添加的元素：&amp;quot;);
        int ele = sc.nextInt();

        //3.增加元素
        //调用方法：
        insertEle(arr,index,ele);



        //4.输出增加元素后的数组：
        System.out.print(&amp;quot;\\n增加元素后的数组：&amp;quot;);
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(i!=arr.length-1)&amp;#123;
                System.out.print(arr[i]+&amp;quot;,&amp;quot;);
            &amp;#125;else&amp;#123;//i==arr.length-1 最后一个元素不用加,
                System.out.print(arr[i]);
            &amp;#125;
        &amp;#125;

    &amp;#125;


    /\*
        提取一个添加元素的方法：
        在数组的指定位置上添加一个指定的元素。
        在哪个数组的哪个位置添加哪个元素！
        不确定因素：形参：哪个数组，哪个位置，哪个元素
        返回值：无

        \*/
        public static void insertEle(int[] arr,int index,int ele)&amp;#123;
        for(int i=arr.length-1;i\&amp;gt;=(index+1);i--)&amp;#123;
            arr[i] = arr[i-1];
        &amp;#125;
        arr[index] = ele;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;删除元素&#34;&gt;&lt;a href=&#34;#删除元素&#34; class=&#34;headerlink&#34; title=&#34;删除元素&#34;&gt;&lt;/a&gt;删除元素&lt;/h2&gt;&lt;p&gt;【1】实现一个功能：删除指定位置上的元素&lt;/p&gt;
&lt;p&gt;逻辑：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/6c0276c47a14681f40e5ee09c6f35150.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Arrays;
public class TestArray08&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：给定一个数组,删除下标为2元素

        //1.给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10,34,45,56,7,666&amp;#125;;
        // 0 1 2 3 4 5
        //2.输出删除前的数组：
        System.out.println(&amp;quot;删除元素前的数组：&amp;quot;+Arrays.toString(arr));

        //3.删除
        /\*
            arr[2] = arr[3];
        arr[3] = arr[4];
        arr[4] = arr[5];
        \*/
            int index = 0;
        for(int i=index;i\&amp;lt;=arr.length-2;i++)&amp;#123;
            arr[i] = arr[i+1];
        &amp;#125;
        arr[arr.length-1] = 0;

        //4.输出删除后的数组：
        System.out.println(&amp;quot;删除元素后的数组：&amp;quot;+Arrays.toString(arr));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】实现一个功能：删除指定元素&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Arrays;
public class TestArray09&amp;#123;
    public static void main(String[] args)&amp;#123;
        //功能：给定一个数组,删除元素3：

        //1.给定一个数组：
        int[] arr = &amp;#123;12,34,56,7,3,10,34,45,56,7,666&amp;#125;;

        //2.输出删除前的数组：
        System.out.println(&amp;quot;删除元素前的数组：&amp;quot;+Arrays.toString(arr));


        //找到要删除的元素对应的索引即可：
        int index = -1 ;
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            if(arr[i]==1200)&amp;#123;
                index = i;
                break;
            &amp;#125;
        &amp;#125;

        //3.删除

        if(index!=-1)&amp;#123;
            for(int i=index;i\&amp;lt;=arr.length-2;i++)&amp;#123;
                arr[i] = arr[i+1];
            &amp;#125;
            arr[arr.length-1] = 0;
        &amp;#125;else&amp;#123;//index==-1
            System.out.println(&amp;quot;根本没有你要删除的元素！&amp;quot;);
        &amp;#125;


        //4.输出删除后的数组：
        System.out.println(&amp;quot;删除元素后的数组：&amp;quot;+Arrays.toString(arr));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;详述main方法&#34;&gt;&lt;a href=&#34;#详述main方法&#34; class=&#34;headerlink&#34; title=&#34;详述main方法&#34;&gt;&lt;/a&gt;详述main方法&lt;/h1&gt;&lt;p&gt;【1】main方法：程序的入口，在同一个类中，如果有多个方法，那么虚拟机就会识别main方法，从这个方法作为程序的入口&lt;/p&gt;
&lt;p&gt;【2】main方法格式严格要求：&lt;/p&gt;
&lt;p&gt;public static void main(String[] args){}&lt;/p&gt;
&lt;p&gt;public static —&amp;gt;修饰符 ，暂时用这个 –&amp;gt;面向对象一章&lt;/p&gt;
&lt;p&gt;void —&amp;gt;代表方法没有返回值 对应的类型void&lt;/p&gt;
&lt;p&gt;main —&amp;gt;见名知意名字&lt;/p&gt;
&lt;p&gt;String[] args —&amp;gt;形参 —》不确定因素&lt;/p&gt;
&lt;p&gt;【3】问题：程序中是否可以有其他的方法也叫main方法？&lt;/p&gt;
&lt;p&gt;可以，构成了方法的重载。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray10&amp;#123;
    public static void main(String[] args)&amp;#123;

    &amp;#125;
    public static void main(String str)&amp;#123;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】形参为String[] 那么实参到底是什么？&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray10&amp;#123;
    public static void main(String[] args)&amp;#123;
        //从侧面验证：
        //int[] arr1; //如果对数组只声明，没有后续操作，那么相当于 白定义了。
        //int[] arr2 = null;
        //System.out.println(arr2.length);//Exception in thread &amp;quot;main&amp;quot; java.lang.NullPointerException
        //int[] arr3 = new int[0];
        //System.out.println(arr3.length);
        //int[] arr4 = new int[4];
        //System.out.println(arr4.length);

        //System.out.println(args.length);//0
        //从这个结果证明，参数是String[],实参是 new String[0]
        //默认情况下，虚拟机在调用main方法的时候就是传入了一个长度为0的数组

        System.out.println(args.length);
        for(String str:args)&amp;#123;
            System.out.println(str);
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;手动传入实参：&lt;/p&gt;
&lt;p&gt;有特殊符号的时候可以加上“”&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/d3da5aadcf3237a0ded3957e968da17a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;没有特殊符号用空格隔开即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/a7c9de6cf8fb43afc60fbbcea917ed21.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;可变参数&#34;&gt;&lt;a href=&#34;#可变参数&#34; class=&#34;headerlink&#34; title=&#34;可变参数&#34;&gt;&lt;/a&gt;可变参数&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray12&amp;#123;
    /\*
        1.可变参数：作用提供了一个方法，参数的个数是可变的 ,解决了部分方法的重载问题
        int...num
        double...num
        boolean...num


        2.可变参数在JDK1.5之后加入的新特性
        3.方法的内部对可变参数的处理跟数组是一样
        4.可变参数和其他数据一起作为形参的时候，可变参数一定要放在最后
        5.我们自己在写代码的时候，建议不要使用可变参数。
        \*/
        public static void main(String[] args)&amp;#123;
        //method01(10);
        //method01();
        //method01(20,30,40);
        method01(30,40,50,60,70);
        //method01(new int[]&amp;#123;11,22,33,44&amp;#125;);
    &amp;#125;
    public static void method01(int num2,int...num)&amp;#123;
        System.out.println(&amp;quot;-----1&amp;quot;);
        for(int i:num)&amp;#123;
            System.out.print(i+&amp;quot;\\t&amp;quot;);
        &amp;#125;
        System.out.println();

        System.out.println(num2);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Arrays工具类&#34;&gt;&lt;a href=&#34;#Arrays工具类&#34; class=&#34;headerlink&#34; title=&#34;Arrays工具类&#34;&gt;&lt;/a&gt;Arrays工具类&lt;/h1&gt;&lt;p&gt;为了方便我们对数组进行操作，系统提供一个类Arrays，我们将它当做工具类来使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Arrays;
public class TestArray13&amp;#123;
    public static void main(String[] args)&amp;#123;
        //给定一个数组：
        int[] arr = &amp;#123;1,3,7,2,4,8&amp;#125;;
        //toString:对数组进行遍历查看的，返回的是一个字符串，这个字符串比较好看
        System.out.println(Arrays.toString(arr));

        //binarySearch:二分法查找：找出指定数组中的指定元素对应的索引：
        //这个方法的使用前提：一定要查看的是一个有序的数组：
        //sort：排序 --\&amp;gt;升序
        Arrays.sort(arr);
        System.out.println(Arrays.toString(arr));
        System.out.println(Arrays.binarySearch(arr,4));

        int[] arr2 = &amp;#123;1,3,7,2,4,8&amp;#125;;
        //copyOf:完成数组的复制：
        int[] newArr = Arrays.copyOf(arr2,4);
        System.out.println(Arrays.toString(newArr));

        //copyOfRange:区间复制：
        int[] newArr2 = Arrays.copyOfRange(arr2,1,4);//[1,4)--\&amp;gt;1,2,3位置
        System.out.println(Arrays.toString(newArr2));

        //equals:比较两个数组的值是否一样：
        int[] arr3 = &amp;#123;1,3,7,2,4,8&amp;#125;;
        int[] arr4 = &amp;#123;1,3,7,2,4,8&amp;#125;;
        System.out.println(Arrays.equals(arr3,arr4));//true
        System.out.println(arr3==arr4);//false ==比较左右两侧的值是否相等，比较的是左右的地址值，返回结果一定是false

        //fill：数组的填充：
        int[] arr5 = &amp;#123;1,3,7,2,4,8&amp;#125;;
        Arrays.fill(arr5,10);
        System.out.println(Arrays.toString(arr5));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;数组的复制操作&#34;&gt;&lt;a href=&#34;#数组的复制操作&#34; class=&#34;headerlink&#34; title=&#34;数组的复制操作&#34;&gt;&lt;/a&gt;数组的复制操作&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/f55029455c828e6298cac80b7e99f3d4.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/fe8cc0293b38bcca7c79d0f53366bf51.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;原理：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/c646de79c14443e0f59dbfd4df86acc9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Arrays;
public class TestArray14&amp;#123;
    public static void main(String[] args)&amp;#123;
        //给一个源数组：
        int[] srcArr = &amp;#123;11,22,33,44,55,66,77,88&amp;#125;;
        //给一个目标数组：
        int[] destArr = new int[10];

        //复制：
        System.arraycopy(srcArr,1,destArr,3,3);
        //遍历查看目标数组：
        System.out.println(Arrays.toString(destArr));
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/449d70aa26b1dd58faf4391d631b23c9.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;二维数组&#34;&gt;&lt;a href=&#34;#二维数组&#34; class=&#34;headerlink&#34; title=&#34;二维数组&#34;&gt;&lt;/a&gt;二维数组&lt;/h1&gt;&lt;p&gt;【1】引入：本质上全部都是一维数组：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/34650d8b02d5b0ec054c9dca9a6d89fd.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】基本代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray15&amp;#123;
    public static void main(String[] args)&amp;#123;
        //定义一个二维数组：
        int[][] arr = new int[3][];//本质上定义了一个一维数组，长度为3

        int[] a1 = &amp;#123;1,2,3&amp;#125;;
        arr[0] = a1;

        arr[1] = new int[]&amp;#123;4,5,6,7&amp;#125;;

        arr[2] = new int[]&amp;#123;9,10&amp;#125;;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对应内存：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC6%E7%AB%A0_%E6%95%B0%E7%BB%84/7b1ecb2fa93e9b387e7ad62603746e33.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】四种遍历方式：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestArray15&amp;#123;
    public static void main(String[] args)&amp;#123;
        //定义一个二维数组：
        int[][] arr = new int[3][];//本质上定义了一个一维数组，长度为3

        int[] a1 = &amp;#123;1,2,3&amp;#125;;
        arr[0] = a1;

        arr[1] = new int[]&amp;#123;4,5,6,7&amp;#125;;

        arr[2] = new int[]&amp;#123;9,10&amp;#125;;

        //读取6这个元素：
        //System.out.println(arr[1][2]);

        //对二维数组遍历：
        //方式1：外层普通for循环+内层普通for循环：
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            for(int j=0;j\&amp;lt;arr[i].length;j++)&amp;#123;
                System.out.print(arr[i][j]+&amp;quot;\\t&amp;quot;);
            &amp;#125;
            System.out.println();
        &amp;#125;

        //方式2：外层普通for循环+内层增强for循环：
        for(int i=0;i\&amp;lt;arr.length;i++)&amp;#123;
            for(int num:arr[i])&amp;#123;
                System.out.print(num+&amp;quot;\\t&amp;quot;);
            &amp;#125;
            System.out.println();
        &amp;#125;

        //方式3：外层增强for循环+内层增强for循环：
        for(int[] a:arr)&amp;#123;
            for(int num:a)&amp;#123;
                System.out.print(num+&amp;quot;\\t&amp;quot;);
            &amp;#125;
            System.out.println();
        &amp;#125;

        //方式4：外层增强for循环+内层普通for循环：
        for(int[] a:arr)&amp;#123;
            for(int i=0;i\&amp;lt;a.length;i++)&amp;#123;
                System.out.print(a[i]+&amp;quot;\\t&amp;quot;);
            &amp;#125;
            System.out.println();
        &amp;#125;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;二维数组的初始化方式&#34;&gt;&lt;a href=&#34;#二维数组的初始化方式&#34; class=&#34;headerlink&#34; title=&#34;二维数组的初始化方式&#34;&gt;&lt;/a&gt;二维数组的初始化方式&lt;/h1&gt;&lt;p&gt;数组的初始化方式总共有三种：静态初始化、动态初始化、默认初始化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了用new关键字来产生数组以外，还可以直接在定义数组的同时就为数组元素分配空间并赋值。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[][] arr = &amp;#123;&amp;#123;1,2&amp;#125;,&amp;#123;4,5,6&amp;#125;,&amp;#123;4,5,6,7,8,9,9&amp;#125;&amp;#125;;

int[][] arr =new int[][] &amp;#123;&amp;#123;1,2&amp;#125;,&amp;#123;4,5,6&amp;#125;,&amp;#123;4,5,6,7,8,9,9&amp;#125;&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;动态初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组定义与为数组元素分配空间并赋值的操作分开进行。&lt;/p&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[][] arr = new int[3][]; //本质上定义了一维数组长度为3，每个“格子”中放入的是一个数组

arr[0] = new int[]&amp;#123;1,2&amp;#125;;

arr[1] = new int[]&amp;#123;3,4,5,6&amp;#125;;

arr[2] = new int[]&amp;#123;34,45,56&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;eg:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;int[][] arr = new int[3][2];
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;默认初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。&lt;/p&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
        <title>第7章_IDEA的使用</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h1 id=&#34;IDE&#34;&gt;&lt;a href=&#34;#IDE&#34; class=&#34;headerlink&#34; title=&#34;IDE&#34;&gt;&lt;/a&gt;IDE&lt;/h1&gt;&lt;p&gt;集成开发环境（IDE，Integrated Development Environment ）是用于提供程序开发环境的应用程序，一般包括代码编辑器、编译器、调试器和图形用户界面等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。如微软的Visual Studio系列，Borland的C++ Builder、Delphi系列等。该程序可以独立运行，也可以和其它程序并用。IDE多被用于开发HTML应用软件。例如，许多人在设计网站时使用IDE（如HomeSite、DreamWeaver等），因为很多项任务会自动生成。编程开发软件将编辑、编译、调试等功能集成在一个桌面环境中,这样就大大方便了用户。&lt;/p&gt;
&lt;p&gt;❀优点&lt;/p&gt;
&lt;p&gt;节省时间和精力。IDE的目的就是要让开发更加快捷方便，通过提供工具和各种性能来帮助开发者组织资源，减少失误，提供捷径。&lt;/p&gt;
&lt;p&gt;建立统一标准。当一组程序员使用同一个开发环境时，就建立了统一的工作标准，当IDE提供预设的模板，或者不同团队分享代码库时，这一效果就更加明显了。&lt;/p&gt;
&lt;p&gt;管理开发工作。首先，IDE提供文档工具，可以自动输入开发者评论，或者迫使开发者在不同区域编写评论。其次，IDE可以展示资源，更便于发现应用所处位置，无需在文件系统里面艰难的搜索。&lt;/p&gt;
&lt;p&gt;❀缺点&lt;/p&gt;
&lt;p&gt;学习曲线问题。IDE基本上是比较复杂的工具，为了更好的熟练使用，需要一定的时间和耐心。&lt;/p&gt;
&lt;p&gt;初学者的困难。对初学者来说，使用IDE来学习开发有相当的难度，不适合学习一种新语言时使用。&lt;/p&gt;
&lt;p&gt;无法修复坏代码或设计。开发者不能完全依赖工具的便捷，还是必须保持专业水准和熟练度，开发的成果好坏主要还是看开发员的技术。&lt;/p&gt;
&lt;h1 id=&#34;JetBrains公司介绍&#34;&gt;&lt;a href=&#34;#JetBrains公司介绍&#34; class=&#34;headerlink&#34; title=&#34;JetBrains公司介绍&#34;&gt;&lt;/a&gt;JetBrains公司介绍&lt;/h1&gt;&lt;p&gt;【1】IntelliJ IDEA就是Java的IDE。&lt;/p&gt;
&lt;p&gt;【2】市场占有率竹节攀升，超过了Eclipse。&lt;/p&gt;
&lt;p&gt;【3】JetBrains公司介绍：&lt;/p&gt;
&lt;p&gt;JetBrains是一家捷克的软件开发公司，该公司位于捷克的布拉格，并在俄罗斯的圣彼得堡及美国麻州波士顿都设有办公室，该公司最为人所熟知的产品是Java编程语言开发撰写时所用的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTklOUIlODYlRTYlODglOTAlRTUlQkMlODAlRTUlOEYlOTElRTclOEUlQUYlRTUlQTIlODMvMjk4NTI0&#34;&gt;集成开发环境&lt;/span&gt;：IntelliJ IDEA。公司旗下还有其它产品，比如：&lt;/p&gt;
&lt;p&gt;➢WebStorm: 用于开发JavaScript、HTML5、 CS3等前端技术;&lt;/p&gt;
&lt;p&gt;➢PyCharm: 用于开发python（python语言热度排行榜排名第一，在人工智能大数据领域应用）&lt;/p&gt;
&lt;p&gt;➢PhpStorm: 用于开发PHP&lt;/p&gt;
&lt;p&gt;➢RubyMine: 用于开发Ruby&amp;#x2F;Rails&lt;/p&gt;
&lt;p&gt;➢AppCode: 用于开发Objective - C&amp;#x2F;Swift,替换xcode的&lt;/p&gt;
&lt;p&gt;➢CLion: 用于开发C&amp;#x2F;C++&lt;/p&gt;
&lt;p&gt;➢DataGrip: 用于开发数据库和SQL&lt;/p&gt;
&lt;p&gt;➢Rider: 用于开发.NET&lt;/p&gt;
&lt;p&gt;➢GoLand: 用于开发Go（区块链主流开发语言就是Go语言）&lt;/p&gt;
&lt;p&gt;【4】官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS8=&#34;&gt;https://www.jetbrains.com/&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/f362feebfb46d136a1d0b793447e81ea.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;IntelliJ-IDEA介绍&#34;&gt;&lt;a href=&#34;#IntelliJ-IDEA介绍&#34; class=&#34;headerlink&#34; title=&#34;IntelliJ_IDEA介绍&#34;&gt;&lt;/a&gt;IntelliJ_IDEA介绍&lt;/h1&gt;&lt;p&gt;【1】IDEA 全称IntelliJ IDEA，是用于java语言开发的集成环境IDE(Integrated Development Environment)，也可用于其他语言。&lt;/p&gt;
&lt;p&gt;IntelliJ在业界被公认为最好的java开发工具之一，尤其在智能代码助手、代码自动提示、重构、J2EE支持、Ant、JUnit、CVS整合、代码审查、 创新的GUI设计等方面的功能可以说是超常的。&lt;/p&gt;
&lt;p&gt;IDEA是JetBrains公司的产品，这家公司总部位于捷克共和国的首都布拉格，开发人员以严谨著称的东欧程序员为主。&lt;/p&gt;
&lt;p&gt;【2】IDEA的支持：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/9a9495032bd248f3996d975a1f8e42bb.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/105733bb7ad26ddef778db2103e8c4cf.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】IDEA的优势（相对于Eclipse）&lt;/p&gt;
&lt;p&gt;①强大的整合能力。比如: Git、 Maven、 Spring 等&lt;/p&gt;
&lt;p&gt;②提示功能的快速、便捷&lt;/p&gt;
&lt;p&gt;③提示功能的范围广&lt;/p&gt;
&lt;p&gt;④好用的快捷键和代码模板&lt;/p&gt;
&lt;p&gt;⑤精准搜索&lt;/p&gt;
&lt;h1 id=&#34;IntelliJ-IDEA的下载和安装的准备&#34;&gt;&lt;a href=&#34;#IntelliJ-IDEA的下载和安装的准备&#34; class=&#34;headerlink&#34; title=&#34;IntelliJ_IDEA的下载和安装的准备&#34;&gt;&lt;/a&gt;IntelliJ_IDEA的下载和安装的准备&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/35f4cb2446e40dde79002379353ccabb.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】安装的准备：&lt;/p&gt;
&lt;p&gt;（1）硬件环境：&lt;/p&gt;
&lt;p&gt;内存8G以上&lt;/p&gt;
&lt;p&gt;CPU i5以上&lt;/p&gt;
&lt;p&gt;安装在固态硬盘下&lt;/p&gt;
&lt;p&gt;（2）软件环境：&lt;/p&gt;
&lt;p&gt;需要安装JDK&lt;/p&gt;
&lt;h1 id=&#34;IDEA的卸载&#34;&gt;&lt;a href=&#34;#IDEA的卸载&#34; class=&#34;headerlink&#34; title=&#34;IDEA的卸载&#34;&gt;&lt;/a&gt;IDEA的卸载&lt;/h1&gt;&lt;p&gt;对于免安装的idea：&lt;/p&gt;
&lt;p&gt;（1）删除安装文件&lt;/p&gt;
&lt;p&gt;（2）到用户下将idea的缓存，配置的目录删除掉即可&lt;/p&gt;
&lt;p&gt;安装idea:&lt;/p&gt;
&lt;p&gt;(1)可以用控制面板–》程序&lt;/p&gt;
&lt;h1 id=&#34;IDEA页面展示&#34;&gt;&lt;a href=&#34;#IDEA页面展示&#34; class=&#34;headerlink&#34; title=&#34;IDEA页面展示&#34;&gt;&lt;/a&gt;IDEA页面展示&lt;/h1&gt;&lt;p&gt;【1】项目下内容：&lt;/p&gt;
&lt;p&gt;➢工程下的src类似于Eclipse下的src目录，用于存放代码。。&lt;/p&gt;
&lt;p&gt;➢工程下的.idea 和TestProject.iml文件都是IDEA工程特有的。类似于Eclipse 工程下的settings、.classpath、.project 等。&lt;/p&gt;
&lt;p&gt;【2】配置：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/1a7cb74f3df7fbe79e6ba069bf4dc546.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/7cbbe2dc58eda1196a34dd448e7bca5b.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;Module的概念和使用&#34;&gt;&lt;a href=&#34;#Module的概念和使用&#34; class=&#34;headerlink&#34; title=&#34;Module的概念和使用&#34;&gt;&lt;/a&gt;Module的概念和使用&lt;/h1&gt;&lt;p&gt;【1】在Eclipse中我们有Workspace (工作空间)和Project (工程)的概念，在IDEA中只有Project (工程)和Module (模块)的概念。&lt;/p&gt;
&lt;p&gt;这里的对应关系为:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IDEA官网说明:  An Eclipse workspace is similar to a project in IntelliJ IDEA  An Eclipse project maps to a module in IntelliJ IDEA&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;翻译:  Eclipse中 workspace 相当于 IDEA中的Project  Eclipse中 Project 相当于 IDEA中的Module&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;在IntelliJ IDEA中Project(工程) 是最顶级的级别，次级别是Module(模块)。&lt;/p&gt;
&lt;p&gt;一个Project下可以有多个Module。&lt;/p&gt;
&lt;p&gt;【2】从Eclipse 转过来的人总是下意识地要在同一个窗口管理n个项目，这在Intellij IDEA是无法做到的。Intellij IDEA提供的解决方案是打开多个项目实例，即打开多个项目窗口。即:一个Project 打开一个Window窗口。&lt;/p&gt;
&lt;p&gt;【3】IDEA这样设置的原因：&lt;/p&gt;
&lt;p&gt;目前主流的大型项目都是分布式部署的，结构都是类似这种多Module的。&lt;/p&gt;
&lt;p&gt;这类项目一般是这样划分的，比如: 积分模块、任务模块、活动模块等等，模块之间彼此可以相互依赖。这些Module之间都是处于同一个项目业务下的模块，彼此之间是有不可分割的业务关系的。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/4b4fbdbfa923e2591cb2a7f701c738b0.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】out目录的说明：里面存放的是编译后的字节码文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/f817b14883ed0ace61fc69631f5c6b71.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【5】删除模块：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/b052b9c22ae29325f823db7e69e542f3.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/af8bd2a497a5f963c8d8dde9cbe0289e.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;IDEA的常用设置&#34;&gt;&lt;a href=&#34;#IDEA的常用设置&#34; class=&#34;headerlink&#34; title=&#34;IDEA的常用设置&#34;&gt;&lt;/a&gt;IDEA的常用设置&lt;/h1&gt;&lt;p&gt;【1】进入设置：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/2122254fa737cc380ce88f392c2a78cd.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/ff7ec5c53e192881c538304fd2126de7.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/62073c876d3f02e4124f4d448ef6688b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】设置主题：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/a88a39e6124b6ce58feea16fb7222564.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】编辑区的字体变大或者变小：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/4be07f5bae751ae60b3f710c4542a394.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】鼠标悬浮在代码上有提示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/6a2a4a6748c4a79cf49cfa184d03830b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【5】自动导包和优化多余的包：&lt;/p&gt;
&lt;p&gt;手动导包：快捷键：alt+enter&lt;/p&gt;
&lt;p&gt;自动导包和优化多余的包：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/ae52672fe1d257f8c341969321d8a069.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【6】同一个包下的类，超过指定个数的时候，导包合并为*&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/881a90cec620ed6f85dd6cb5ed9bdd36.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/f90fc12b1369268eccf01e27bcebd82b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【7】显示行号 ， 方法和方法间的分隔符：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/99d7a1252fb6b7875100125d44a85331.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【8】忽略大小写，进行提示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/ccaa47c6e69e912e33532a31e2318df5.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【9】多个类不隐藏，多行显示：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/5120dab3e7cda14f9d0050ea46857bf5.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【10】设置默认的字体，字体大小，字体行间距：(编辑区和控制台都会变化)&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/2a62492e45c48ceea2c42b47dfef33fd.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【11】修改代码中注释的字体颜色：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/9b5a6ee63fb86a251a8fb50d89a06a58.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【12】修改类头的文档注释信息：—》注意：对新建的类才有效&lt;/p&gt;
&lt;p&gt;&amp;#x2F;**&lt;/p&gt;
&lt;p&gt;* @Auther: zhaoss&lt;/p&gt;
&lt;p&gt;* @Date: ${DATE} - ${MONTH} - ${DAY} - ${TIME}&lt;/p&gt;
&lt;p&gt;* @Description: ${PACKAGE_NAME}&lt;/p&gt;
&lt;p&gt;* @version: 1.0&lt;/p&gt;
&lt;p&gt;*&amp;#x2F;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/b0b5e655926c1a39182d6e702b8f19f4.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【13】设置项目文件编码：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/1ec297778834824cec1030cceb9a35a7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;文件右下角可以调节编码格式：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/372613a9deca43cb5531ab639ccb93c5.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【14】自动编译：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/99364bdcbac808e8a9283f7bf4d00f74.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【15】省电模式：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/29648a84a17bd70f4a67e3fed4edaa86.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【16】代码显示结构：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/d7a0885c61310238679d9ceaf73305d6.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【17】导入jar包：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/9702df3179e89f4b31db86f2b40e6d15.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【18】生成序列化版本号：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/e25056c4b5486ac9139430f1da3a6928.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/144c56bd5d909172bf01f3aff56304e2.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;IDEA的常用快捷键&#34;&gt;&lt;a href=&#34;#IDEA的常用快捷键&#34; class=&#34;headerlink&#34; title=&#34;IDEA的常用快捷键&#34;&gt;&lt;/a&gt;IDEA的常用快捷键&lt;/h1&gt;&lt;p&gt;【1】创建内容：alt+insert&lt;/p&gt;
&lt;p&gt;【2】main方法：psvm&lt;/p&gt;
&lt;p&gt;【3】输出语句：sout&lt;br&gt;【4】复制行：ctrl+d&lt;/p&gt;
&lt;p&gt;【5】删除行：ctrl+y&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/1de3898fffc8b5ec0ae35b447d852504.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【6】代码向上&amp;#x2F;下移动：Ctrl + Shift + Up &amp;#x2F; Down&lt;/p&gt;
&lt;p&gt;【7】搜索类： ctrl+n&lt;/p&gt;
&lt;p&gt;【8】生成代码 ：alt + Insert（如构造函数等，getter,setter,hashCode,equals,toString）&lt;/p&gt;
&lt;p&gt;【9】百能快捷键 : alt + Enter （导包，生成变量等）&lt;/p&gt;
&lt;p&gt;【10】单行注释或多行注释 ： Ctrl + &amp;#x2F; 或 Ctrl + Shift + &amp;#x2F;&lt;/p&gt;
&lt;p&gt;【11】重命名 shift+f6&lt;/p&gt;
&lt;p&gt;【12】for循环 直接 ：fori 回车即可&lt;/p&gt;
&lt;p&gt;【13】代码块包围：try-catch,if,while等 ctrl+alt+t&lt;/p&gt;
&lt;p&gt;【14】 代码自动补全提示:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/93e80fcfe447c7cb0a98a2369aa78beb.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【15】 idea代码字体大小放大和缩小的快捷键&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/99248f6b95a9feb45be9eab9b874a74e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【16】代码一层一层调用的快捷键：&lt;/p&gt;
&lt;p&gt;点进源码：ctrl+鼠标悬浮在代码上+点进去即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/2e55ee66a1a3d5b2dc4d0ea0976d20e7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【17】显示代码结构 : alt + 7&lt;/p&gt;
&lt;p&gt;【18】显示导航栏： alt +1&lt;/p&gt;
&lt;p&gt;【19】撤回：ctrl+z&lt;/p&gt;
&lt;p&gt;【20】REDO操作：&lt;/p&gt;
&lt;p&gt;如果跟搜狗输入法的快捷键冲突，可以选择将搜狗的快捷键取消。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/8f5fe14e09048ef82253d1fd802f9a47.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【21】缩进：tab 取消缩进： shift+tab&lt;/p&gt;
&lt;h1 id=&#34;模板的使用&#34;&gt;&lt;a href=&#34;#模板的使用&#34; class=&#34;headerlink&#34; title=&#34;模板的使用&#34;&gt;&lt;/a&gt;模板的使用&lt;/h1&gt;&lt;h2 id=&#34;代码模板是什么&#34;&gt;&lt;a href=&#34;#代码模板是什么&#34; class=&#34;headerlink&#34; title=&#34;代码模板是什么&#34;&gt;&lt;/a&gt;代码模板是什么&lt;/h2&gt;&lt;p&gt;它的原理就是配置一些常用代码字母缩写，在输入简写时可以出现你预定义的固定模式的代码，使得开发效率大大提高，同时也可以增加个性化。最简单的例子就是在Java中输入sout会出现System.out.println();&lt;/p&gt;
&lt;p&gt;（一）所处位置：&lt;/p&gt;
&lt;p&gt;（1）Live Templates&lt;/p&gt;
&lt;p&gt;（2）Postfix Completion&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/44e87a0a66f725ae3cfddbda8bd1589e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（二）区别：&lt;/p&gt;
&lt;p&gt;【1】&lt;/p&gt;
&lt;p&gt;Live Templates中可以做用户的个性化定制。&lt;/p&gt;
&lt;p&gt;Postfix Completion中只能用，不能修改。&lt;/p&gt;
&lt;p&gt;【2】使用方式不同&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/7b200ed579ae2298e6a2fe9ea46fa4fe.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/a7b86e5aff479f5b201a801d9ed6ad45.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;修改现有模板&#34;&gt;&lt;a href=&#34;#修改现有模板&#34; class=&#34;headerlink&#34; title=&#34;修改现有模板&#34;&gt;&lt;/a&gt;修改现有模板&lt;/h2&gt;&lt;p&gt;【1】案例1：改main方法： psvm&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/b04c099b7f0015f617ee1efce204b916.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/e8cc33bcf3c8a81d002bd204e5a90b6d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】案例2：修饰属性的修饰符：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/0450041e947e4b790f5d4c0c8c4ec683.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/9f613bedeea2a0e7b0de3bb0a670044e.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;常用的代码模板&#34;&gt;&lt;a href=&#34;#常用的代码模板&#34; class=&#34;headerlink&#34; title=&#34;常用的代码模板&#34;&gt;&lt;/a&gt;常用的代码模板&lt;/h2&gt;&lt;p&gt;【1】模板1： main方法：&lt;/p&gt;
&lt;p&gt;main 或者 psvm&lt;/p&gt;
&lt;p&gt;【2】模板2：输出语句：&lt;/p&gt;
&lt;p&gt;sout 或者 .sout&lt;/p&gt;
&lt;p&gt;一些变型：&lt;br&gt;soutp:打印方法的形参&lt;/p&gt;
&lt;p&gt;soutm:打印方法的名字&lt;/p&gt;
&lt;p&gt;soutv:打印变量&lt;/p&gt;
&lt;p&gt;【3】模板3： 循环&lt;/p&gt;
&lt;p&gt;普通for循环： fori（正向） 或者 .fori （正向） . forr(逆向)&lt;/p&gt;
&lt;p&gt;增强for循环： iter 或者 .for&lt;/p&gt;
&lt;p&gt;（可以用于数组的遍历，集合的遍历）&lt;/p&gt;
&lt;p&gt;【4】模板4： 条件判断&lt;/p&gt;
&lt;p&gt;ifn 或者 .null ：判断是否为null （if null）&lt;/p&gt;
&lt;p&gt;inn 或者 .nn ：判断不等于null (if not null)&lt;/p&gt;
&lt;p&gt;【5】模板5： 属性修饰符：&lt;/p&gt;
&lt;p&gt;prsf : private static final&lt;/p&gt;
&lt;p&gt;psf :public static final&lt;/p&gt;
&lt;h2 id=&#34;自定义模板&#34;&gt;&lt;a href=&#34;#自定义模板&#34; class=&#34;headerlink&#34; title=&#34;自定义模板&#34;&gt;&lt;/a&gt;自定义模板&lt;/h2&gt;&lt;p&gt;【1】测试方法：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/eedbf8c570d40d09fcdba50c22849a53.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】常用属性：($$中的内容其实就是在定义光标的位置，光标可以切换，用回车切换)&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/fd705090e45097098e2b7353d8a61be9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】方法注释模板：&lt;/p&gt;
&lt;p&gt;&amp;#x2F;**&lt;/p&gt;
&lt;p&gt;* 功能描述:&lt;/p&gt;
&lt;p&gt;* @param: $param$&lt;/p&gt;
&lt;p&gt;* @return: $return$&lt;/p&gt;
&lt;p&gt;* @auther: $user$&lt;/p&gt;
&lt;p&gt;* @date: $date$ $time$&lt;/p&gt;
&lt;p&gt;*&amp;#x2F;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/0ea3381f82d736afa0bf29f5dd66627d.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;IDEA中的断点调试&#34;&gt;&lt;a href=&#34;#IDEA中的断点调试&#34; class=&#34;headerlink&#34; title=&#34;IDEA中的断点调试&#34;&gt;&lt;/a&gt;IDEA中的断点调试&lt;/h1&gt;&lt;h2 id=&#34;常用断点调试快捷键&#34;&gt;&lt;a href=&#34;#常用断点调试快捷键&#34; class=&#34;headerlink&#34; title=&#34;常用断点调试快捷键&#34;&gt;&lt;/a&gt;常用断点调试快捷键&lt;/h2&gt;&lt;p&gt;调试在开发中大量应用：&lt;/p&gt;
&lt;p&gt;【1】Debug的优化设置：更加节省内存空间：&lt;/p&gt;
&lt;p&gt;设置Debug连接方式，默认是Socket。 Shared memory是Windows 特有的一个属性，一般在Windows系统下建议使用此设置，&lt;/p&gt;
&lt;p&gt;内存占用相对较少。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/d698443a9071f2169d0927c70c319d27.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】常用断点调试快捷键：&lt;/p&gt;
一步一步的向下运行代码，不会走入任何方法中。

一步一步的向下运行代码，不会走入系统类库的方法中，但是会走入自定义的方法中。

一步一步的向下运行代码，会走入系统类库的方法中，也会走入自定义的方法中。

跳出方法

结束程序

进入到下一个断点，如果没有下一个断点了，就直接运行到程序结束。

 在当前次取消未执行的断点。

&lt;h2 id=&#34;条件判断，查看表达式的值&#34;&gt;&lt;a href=&#34;#条件判断，查看表达式的值&#34; class=&#34;headerlink&#34; title=&#34;条件判断，查看表达式的值&#34;&gt;&lt;/a&gt;条件判断，查看表达式的值&lt;/h2&gt;&lt;p&gt;【1】条件判断：&lt;/p&gt;
&lt;p&gt;说明:&lt;/p&gt;
&lt;p&gt;调试的时候，在循环里增加条件判断，可以极大的提高效率，心情也能惧悦。&lt;/p&gt;
&lt;p&gt;具体操作:&lt;/p&gt;
&lt;p&gt;在断点处右击调出条件断点。可以在满足某个条件下，实施断点。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/a93800a6aeec05869df076e73dd0e2a5.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】查看表达式的值：&lt;/p&gt;
&lt;p&gt;选择行，alt+f8。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC7%E7%AB%A0_IDEA%E7%9A%84%E4%BD%BF%E7%94%A8/ddfa7ec0690cfd5ea999e455ca4ef922.png&#34; class=&#34;&#34;&gt;

</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
        <title>第8章_面向对象</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
        <content type="html">&lt;h1 id=&#34;面向过程和面向对象的区别&#34;&gt;&lt;a href=&#34;#面向过程和面向对象的区别&#34; class=&#34;headerlink&#34; title=&#34;面向过程和面向对象的区别&#34;&gt;&lt;/a&gt;面向过程和面向对象的区别&lt;/h1&gt;&lt;p&gt;面向过程：当事件比较简单的时候，利用面向过程，注重的是事件的具体的步骤&amp;#x2F;过程，注重的是过程中的具体的行为，以函数为最小单位，考虑怎么做。&lt;/p&gt;
&lt;p&gt;面向对象：注重找“参与者”,将功能封装进对象，强调具备了功能的对象，以类&amp;#x2F;对象为最小单位，考虑谁来做。&lt;/p&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;p&gt;人把大象装进冰箱：&lt;/p&gt;
&lt;p&gt;面向过程：&lt;/p&gt;
&lt;p&gt;函数1：打开冰箱(){人站在冰箱前，打开冰箱，冰箱卡到30度角的时候，冰箱的灯打开了………}&lt;/p&gt;
&lt;p&gt;函数2：储存大象(){大象先迈左腿，再迈右退，考虑冰箱能不能装下……}&lt;/p&gt;
&lt;p&gt;函数3：关闭冰箱(){人站在冰箱前，关闭冰箱，冰箱开到30度角的时候，冰箱的灯关闭了……….}&lt;/p&gt;
&lt;p&gt;面向对象：&lt;/p&gt;
&lt;p&gt;人{&lt;/p&gt;
&lt;p&gt;打开(冰箱){&lt;/p&gt;
&lt;p&gt;冰箱.打开();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;存储(大象){&lt;/p&gt;
&lt;p&gt;大象.进入();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;关闭(冰箱){&lt;/p&gt;
&lt;p&gt;冰箱.关闭();&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;冰箱{&lt;/p&gt;
&lt;p&gt;打开（）{ 1.2.3.}&lt;/p&gt;
&lt;p&gt;关闭（）{}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;柜子{&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;大象{&lt;/p&gt;
&lt;p&gt;进入(冰箱){&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;面向过程 —&amp;gt; 面向对象 , 其实就是由执行者 —&amp;gt; 指挥者的 一个过渡&lt;/p&gt;
&lt;p&gt;面向过程：编年体&lt;br&gt;面向对象：纪传体&lt;/p&gt;
&lt;p&gt;二者相辅相成,并不是对立的。解决复杂问题,通过面向对象方式便于我们从宏观上把握事物之间复杂的关系、方便我们分析整个系统;具体到微观操作,仍然使用面向过程方式来处理&lt;/p&gt;
&lt;h1 id=&#34;类和对象的关系&#34;&gt;&lt;a href=&#34;#类和对象的关系&#34; class=&#34;headerlink&#34; title=&#34;类和对象的关系&#34;&gt;&lt;/a&gt;类和对象的关系&lt;/h1&gt;&lt;p&gt;【1】万事万物皆对象&lt;/p&gt;
&lt;p&gt;【2】&lt;/p&gt;
&lt;p&gt;对象：具体的事物，具体的实体，具体的实例，模板下具体的产品&lt;/p&gt;
&lt;p&gt;类：对对象向上抽取出像的部分，公共的部分，形成类，类是抽象的，是一个模板&lt;/p&gt;
&lt;p&gt;【3】一般在写代码的时候先写类，然后在根据类创建对应的对象。&lt;/p&gt;
&lt;h1 id=&#34;面向对象三个阶段&#34;&gt;&lt;a href=&#34;#面向对象三个阶段&#34; class=&#34;headerlink&#34; title=&#34;面向对象三个阶段&#34;&gt;&lt;/a&gt;面向对象三个阶段&lt;/h1&gt;&lt;p&gt;面向对象三个阶段：&lt;/p&gt;
&lt;p&gt;【1】面向对象分析OOA – Object Oriented Analysis&lt;/p&gt;
&lt;p&gt;对象：张三，王五，朱六，你，我&lt;/p&gt;
&lt;p&gt;抽取出一个类—-》人类&lt;/p&gt;
&lt;p&gt;类里面有什么：&lt;/p&gt;
&lt;p&gt;动词–》动态特性–》方法&lt;/p&gt;
&lt;p&gt;名词–》静态特性–》属性&lt;/p&gt;
&lt;p&gt;【2】面向对象设计OOD – Object Oriented Design&lt;/p&gt;
&lt;p&gt;先有类，再有对象：&lt;/p&gt;
&lt;p&gt;类：人类： Person&lt;/p&gt;
&lt;p&gt;对象：zhangsan ，lisi，zhuliu&lt;/p&gt;
&lt;p&gt;【3】面向对象编程OOP – Object Oriented Programming&lt;/p&gt;
&lt;p&gt;创建类：&lt;/p&gt;
&lt;p&gt;（1）属性（field 成员变量）&lt;/p&gt;
&lt;p&gt;属性用于定义该类或该类对象包含的数据或者说静态特征。属性作用范围是整个类体。&lt;/p&gt;
&lt;p&gt;属性定义格式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[修饰符] 方法返回值类型 方法名(形参列表) {   &amp;#x2F;&amp;#x2F; n条语句  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;（2）方法&lt;/p&gt;
&lt;p&gt;方法用于定义该类或该类实例的行为特征和功能实现。方法是类和对象行为特征的抽象。方法很类似于面向过程中的函数。面向过程中，函数是最基本单位，整个程序由一个个函数调用组成。面向对象中，整个程序的基本单位是类，方法是从属于类和对象的。&lt;/p&gt;
&lt;p&gt;方法定义格式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[修饰符] 方法返回值类型 方法名(形参列表) {   &amp;#x2F;&amp;#x2F; n条语句  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;void代表没有返回值；方法的作用：重用代码，封装功能，便于修改&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb;

public class Person &amp;#123;
    //名词---》属性---》成员变量---》放在类中方法外（注意：我们只把有需要的内容写到代码里，不相关的东西不要放在代码中）
    int age ;//年龄
    String name;//姓名
    double height;//身高
    double weight;//体重

    //动词---》方法
    //吃饭
    public void eat()&amp;#123;
        int num = 10;//局部变量：放在方法中
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;
    //睡觉：
    public void sleep(String address)&amp;#123;
        System.out.println(&amp;quot;我在&amp;quot;+address+&amp;quot;睡觉&amp;quot;);
    &amp;#125;
    //自我介绍：
    public String introduce()&amp;#123;
        return &amp;quot;我的名字是：&amp;quot;+name+&amp;quot;，我的年龄是：&amp;quot;+age+&amp;quot;,我的身高是：&amp;quot;+height+&amp;quot;,我的体重是：&amp;quot;+weight;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;创建对象&#34;&gt;&lt;a href=&#34;#创建对象&#34; class=&#34;headerlink&#34; title=&#34;创建对象&#34;&gt;&lt;/a&gt;创建对象&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb;

public class Test &amp;#123;//测试类

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个人类的具体的对象/实例：
        //创建一个对象，对象的名字叫：zs
        //Person 属于 引用数据类型
        //第一次加载类的时候，会进行类的加载，初始化创建对象的时候，对象的属性没有给赋值，有默认的初始化的值。
        Person zs = new Person();
        zs.name = &amp;quot;张三&amp;quot;;
        zs.age = 19;
        zs.height = 180.4;
        zs.weight = 170.4;

        //再创建一个对象：
        //再次创建类的时候，就不会进行类的加载了，类的加载只在第一次需要的时候加载一次
        Person ls = new Person();
        ls.name = &amp;quot;李四&amp;quot;;
        ls.age = 18;
        ls.height = 170.6;
        ls.weight = 160.5;

        //对属性值进行读取：
        System.out.println(zs.name);
        System.out.println(ls.age);

        //对方法进行操作：
        //不同的对象，属性有自己的特有的值，但是方法都是调用类中通用的方法。
        //属性：各个对象的属性是独立的，
        //方法：各个对象的方法是共享的。
        zs.eat();
        ls.eat();
        zs.sleep(&amp;quot;教室&amp;quot;);
        /\*String str = zs.introduce();
        System.out.println(str);\*/
            System.out.println(zs.introduce());
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;局部变量和成员变量的区别&#34;&gt;&lt;a href=&#34;#局部变量和成员变量的区别&#34; class=&#34;headerlink&#34; title=&#34;局部变量和成员变量的区别&#34;&gt;&lt;/a&gt;局部变量和成员变量的区别&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;区别1：&lt;/strong&gt;代码中位置不同&lt;/p&gt;
&lt;p&gt;成员变量：类中方法外定义的变量&lt;/p&gt;
&lt;p&gt;局部变量：方法中定义的变量 代码块中定义的变量&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别2：&lt;/strong&gt;代码的作用范围&lt;/p&gt;
&lt;p&gt;成员变量：当前类的很多方法&lt;/p&gt;
&lt;p&gt;局部变量：当前一个方法（当前代码块）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别3：&lt;/strong&gt;是否有默认值&lt;/p&gt;
&lt;p&gt;成员变量：有&lt;/p&gt;
&lt;p&gt;局部变量：没有&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/fa7d1bf775d1f357c4dec5d94d02d2f2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;引用数据类型： null&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别4：&lt;/strong&gt;是否要初始化&lt;/p&gt;
&lt;p&gt;成员变量：不需要，不建议初始化，后续使用的时候再赋值即可&lt;/p&gt;
&lt;p&gt;局部变量：一定需要，不然直接使用的时候报错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别5&lt;/strong&gt;：内存中位置不同&lt;/p&gt;
&lt;p&gt;成员变量：堆内存&lt;/p&gt;
&lt;p&gt;局部变量：栈内存&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区别6：&lt;/strong&gt;作用时间不同&lt;/p&gt;
&lt;p&gt;成员变量：当前对象从创建到销毁&lt;/p&gt;
&lt;p&gt;局部变量：当前方法从开始执行到执行完毕&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package com.msb;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;**&lt;/li&gt;
&lt;li&gt;* @Auther: msb-zhaoss&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student &amp;#123;
    byte e;
    short s;
    int c ;//成员变量：在类中方法外
    long num2;
    float f ;
    double d;
    char ch;
    boolean bo;
    String name;
    public void study()&amp;#123;
        int num = 10 ; //局部变量：在方法中
        System.out.println(num);//10
        //int num ;重复命名，出错了
        &amp;#123;
            int a;//局部变量：在代码块中
        &amp;#125;
        int a;
        if(1==3)&amp;#123;
            int b;
        &amp;#125;
        System.out.println(c);
    &amp;#125;
    public void eat()&amp;#123;
        System.out.println(c);
    &amp;#125;

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Student s = new Student();
        System.out.println(s.c);
        System.out.println(s.bo);
        System.out.println(s.ch);
        System.out.println(s.d);
        System.out.println(s.e);
        System.out.println(s.f);
        System.out.println(s.name);
        System.out.println(s.num2);
        System.out.println(s.s);

        s.d = 10.4;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/92101fdba0ac0fe94fbe9079ab09ab40.png&#34; class=&#34;&#34;&gt;


&lt;h1 id=&#34;构造器&#34;&gt;&lt;a href=&#34;#构造器&#34; class=&#34;headerlink&#34; title=&#34;构造器&#34;&gt;&lt;/a&gt;构造器&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //构造器：没有任何参数的构造器我们叫做：空参构造器--》空构造器
    public Person()&amp;#123;
        /\*age = 19;
        name = &amp;quot;lili&amp;quot;;
        height = 169.5;\*/
    &amp;#125;
    //属性：
    String name;
    int age;
    double height;
    //方法：
    public void eat()&amp;#123;
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;
&amp;#125;

package com.msb2;

/\*\*
    \* @Auther: msb-zhaoss
        \*/
        public class Test &amp;#123;
            //这是一个main方法，是程序的入口：
            public static void main(String[] args) &amp;#123;
                //创建一个Person类的具体的对象/实例/实体：
                /\*
                    创建对象的过程：
                    1.第一次遇到Person的时候，进行类的加载（只加载一次）
                    2.创建对象，为这个对象在堆中开辟空间
                    3.为对象进行属性的初始化动作

                    new关键字实际上是在调用一个方法，这个方法叫构造方法（构造器）
                    调用构造器的时候，如果你的类中没有写构造器，那么系统会默认给你分配一个构造器，只是我们看不到罢了。
                    可以自己显式 的将构造器编写出来：
                    构造器的格式：
                    [修饰符] 构造器的名字()&amp;#123;

                &amp;#125;
                构造器和方法的区别：
                    1.没有方法的返回值类型
                    2.方法体内部不能有return语句
                    3.构造器的名字很特殊，必须跟类名一样

                    构造器的作用：不是为了创建对象，因为在调用构造器之前，这个对象就已经创建好了，并且属性有默认的初始化的值。
                    调用构造器的目的是给属性进行赋值操作的。

                    注意：我们一般不会在空构造器中进行初始化操作，因为那样的话每个对象的属性就一样了。
                    实际上，我们只要保证空构造器的存在就可以了，里面的东西不用写
                    \*/
                    Person p = new Person();
                System.out.println(p.age);
                System.out.println(p.name);
                System.out.println(p.height);

                Person p2 = new Person();
                System.out.println(p2.age);
                System.out.println(p2.name);
                System.out.println(p2.height);
            &amp;#125;
        &amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;构造器的重载&#34;&gt;&lt;a href=&#34;#构造器的重载&#34; class=&#34;headerlink&#34; title=&#34;构造器的重载&#34;&gt;&lt;/a&gt;构造器的重载&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;

    //属性：
    String name;
    int age;
    double height;

    //空构造器
    public Person()&amp;#123;

    &amp;#125;
    public Person(String name,int age,double height)&amp;#123;
        //当形参名字和属性名字重名的时候，会出现就近原则：
        //在要表示对象的属性前加上this.来修饰 ，因为this代表的就是你创建的那个对象
        this.name = name;
        this.age = age;
        this.height = height;
    &amp;#125;
    public Person(String a,int b)&amp;#123;
        name = a;
        age = b;
    &amp;#125;

    //方法：
    public void eat()&amp;#123;
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;
&amp;#125;
package com.msb3.msb2;

/\*\*
    \* @Auther: msb-zhaoss
        \*/
        public class Test &amp;#123;
            //这是一个main方法，是程序的入口：
            public static void main(String[] args) &amp;#123;
                /\*
                    1.一般保证空构造器的存在，空构造器中一般不会进行属性的赋值操作
                    2.一般我们会重载构造器，在重载的构造器中进行属性赋值操作
                    3.在重载构造器以后，假如空构造器忘写了，系统也不会给你分配默认的空构造器了，那么你要调用的话就会出错了。
                    4\. 当形参名字和属性名字重名的时候，会出现就近原则：
                    在要表示对象的属性前加上this.来修饰 ，因为this代表的就是你创建的那个对象

                    \*/

                    Person p = new Person();
                /\*p.age = 19;
                p.name = &amp;quot;lili&amp;quot;;
                p.height = 180.4;\*/

                    Person p2 = new Person(&amp;quot;lili&amp;quot;,19,180.4);
                System.out.println(p2.age);
                System.out.println(p2.height);
                System.out.println(p2.name);

            &amp;#125;
        &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;内存分析&#34;&gt;&lt;a href=&#34;#内存分析&#34; class=&#34;headerlink&#34; title=&#34;内存分析&#34;&gt;&lt;/a&gt;内存分析&lt;/h1&gt;&lt;h2 id=&#34;代码1&#34;&gt;&lt;a href=&#34;#代码1&#34; class=&#34;headerlink&#34; title=&#34;代码1&#34;&gt;&lt;/a&gt;代码1&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;public class Person {   int id;   int age;    public static void main(String args[]){   Person p1&amp;#x3D; new Person();   }  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;内存分析：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/79c1914e1e30446244e44849e42197d1.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;代码2&#34;&gt;&lt;a href=&#34;#代码2&#34; class=&#34;headerlink&#34; title=&#34;代码2&#34;&gt;&lt;/a&gt;代码2&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    int id;
    int age;
    String school;
    public Person (int a,int b,String c)&amp;#123;
        id=a;
        age=b;
        school=c;
    &amp;#125;
    public static void main(String args[])&amp;#123;
        Person p= new Person(1,20, &amp;quot;海淀&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c1037dadb36bf06b082ec248a4d08482.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;代码3&#34;&gt;&lt;a href=&#34;#代码3&#34; class=&#34;headerlink&#34; title=&#34;代码3&#34;&gt;&lt;/a&gt;代码3&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;class Person{   int id;   int age;   String school;   Person (int a,int b,String c){   id&amp;#x3D;a;   age&amp;#x3D;b;   school&amp;#x3D;c;   }    public void setAge(int a){   age&amp;#x3D;a;   }  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;|————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————–|&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/886999b72f2ada92abc161d2ab8e4df0.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;this&lt;/p&gt;
&lt;p&gt;【1】创建对象的过程：&lt;/p&gt;
&lt;p&gt;（1）在第一次遇到一个类的时候，对这个类要进行加载，只加载一次。&lt;/p&gt;
&lt;p&gt;（2）创建对象，在堆中开辟空间&lt;/p&gt;
&lt;p&gt;（3）对对象进行初始化操作，属性赋值都是默认的初始值。&lt;/p&gt;
&lt;p&gt;（4）new关键字调用构造器，执行构造方法，在构造器中对属性重新进行赋值&lt;/p&gt;
&lt;p&gt;this:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e59335fd9cf3566613aab1164ac0711b.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5b8476d675f8c1b9000590c4031a7005.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;从上面的效果能够看到：this指代的就是当前对象：&lt;/p&gt;
&lt;p&gt;内存：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4eda9c8a53fa801bd70b6fe32f281919.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;this关键字 用法：&lt;/p&gt;
&lt;p&gt;（1）this可以修饰属性：&lt;/p&gt;
&lt;p&gt;总结：当属性名字和形参发生重名的时候，或者 属性名字 和局部变量重名的时候，都会发生就近原则，所以如果我要是直接使用变量名字的话就指的是离的近的那个形参或者局部变量，这时候如果我想要表示属性的话，在前面要加上：this.修饰&lt;/p&gt;
&lt;p&gt;如果不发生重名问题的话，实际上你要是访问属性也可以省略this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //属性
    int age;
    String name;
    double height;
    //空构造器
    public Person()&amp;#123;

    &amp;#125;
    //有参构造器
    public Person(int age,String name,double height)&amp;#123;
        this.age = age;
        this.name = name;
        this.height = height;
    &amp;#125;
    //方法：
    public void eat()&amp;#123;
        int age = 10;
        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age
        System.out.println(this.age);//这里指代的就是属性的age
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）this修饰方法：&lt;/p&gt;
&lt;p&gt;总结：在同一个类中，方法可以互相调用，this.可以省略不写。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //属性
    int age;
    String name;
    double height;
    //空构造器
    public Person()&amp;#123;

    &amp;#125;
    //有参构造器
    public Person(int age,String name,double height)&amp;#123;
        this.age = age;
        this.name = name;
        this.height = height;
    &amp;#125;
    //方法：
    /\*public void eat()&amp;#123;
        int age = 10;
        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age
        System.out.println(this.age);//这里指代的就是属性的age
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;\*/

        public void play()&amp;#123;
        /\*this.\*/eat();
        System.out.println(&amp;quot;上网&amp;quot;);
        System.out.println(&amp;quot;洗澡&amp;quot;);
    &amp;#125;

    public void eat()&amp;#123;
        System.out.println(/\*this.\*/age);
        System.out.println(&amp;quot;吃饭&amp;quot;);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（3）this可以修饰构造器：&lt;/p&gt;
&lt;p&gt;总结：同一个类中的构造器可以相互用this调用，注意：this修饰构造器必须放在第一行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //属性
    int age;
    String name;
    double height;
    //空构造器
    public Person()&amp;#123;

    &amp;#125;
    //有参构造器
    public Person(int age,String name,double height)&amp;#123;
        this(age,name);
        this.height = height;

    &amp;#125;
    public Person(int age,String name)&amp;#123;
        this(age);
        this.name = name;
    &amp;#125;
    public Person(int age)&amp;#123;
        this.age = age;
    &amp;#125;
    //方法：
    /\*public void eat()&amp;#123;
        int age = 10;
        System.out.println(age);//就近原则，age指的是离它近的age--》局部变量的age
        System.out.println(this.age);//这里指代的就是属性的age
        System.out.println(&amp;quot;我喜欢吃饭&amp;quot;);
    &amp;#125;\*/

        public void play()&amp;#123;
        /\*this.\*/eat();
        System.out.println(&amp;quot;上网&amp;quot;);
        System.out.println(&amp;quot;洗澡&amp;quot;);
    &amp;#125;

    public void eat()&amp;#123;
        System.out.println(/\*this.\*/age);
        System.out.println(&amp;quot;吃饭&amp;quot;);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;static&#34;&gt;&lt;a href=&#34;#static&#34; class=&#34;headerlink&#34; title=&#34;static&#34;&gt;&lt;/a&gt;static&lt;/h1&gt;&lt;p&gt;【1】static可以修饰：属性，方法，代码块，内部类。&lt;/p&gt;
&lt;p&gt;【2】static修饰属性；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //属性：
    int id;
    static int sid;

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Test类的具体的对象
        Test t1 = new Test();
        t1.id = 10;
        t1.sid = 10;

        Test t2 = new Test();
        t2.id = 20;
        t2.sid = 20;

        Test t3 = new Test();
        t3.id = 30;
        t3.sid = 30;

        //读取属性的值：
        System.out.println(t1.id);
        System.out.println(t2.id);
        System.out.println(t3.id);

        System.out.println(t1.sid);
        System.out.println(t2.sid);
        System.out.println(t3.sid);

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内存分析：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/86494081f26104991702618717098030.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;一般官方的推荐访问方式：可以通过类名.属性名的方式去访问：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/300391675e1efe8df337d8171c8bb6d7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;static修饰属性总结：&lt;/p&gt;
&lt;p&gt;（1）在类加载的时候一起加载入方法区中的静态域中&lt;/p&gt;
&lt;p&gt;（2）先于对象存在&lt;/p&gt;
&lt;p&gt;（3）访问方式： 对象名.属性名 类名.属性名（推荐）&lt;/p&gt;
&lt;p&gt;static修饰属性的应用场景：某些特定的数据想要在内存中共享，只有一块 –》这个情况下，就可以用static修饰的属性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MsbStudent &amp;#123;
    //属性：
    String name;
    int age;
    static String school;

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        MsbStudent.school = &amp;quot;马士兵教育&amp;quot;;
        //创建学生对象：
        MsbStudent s1 = new MsbStudent();
        s1.name = &amp;quot;张三&amp;quot;;
        s1.age = 19;
        //s1.school = &amp;quot;马士兵教育&amp;quot;;

        MsbStudent s2 = new MsbStudent();
        s2.name = &amp;quot;李四&amp;quot;;
        s2.age = 21;
        //s2.school = &amp;quot;马士兵教育&amp;quot;;

        System.out.println(s2.school);




    &amp;#125;

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;p&gt;静态属性 （类变量）&lt;/p&gt;
&lt;p&gt;非静态属性（实例变量）&lt;/p&gt;
&lt;p&gt;【3】static修饰方法；&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    int id;
    static int sid;

    public void a()&amp;#123;
        System.out.println(id);
        System.out.println(sid);
        System.out.println(&amp;quot;------a&amp;quot;);
    &amp;#125;
    //1.static和public都是修饰符，并列的没有先后顺序，先写谁后写谁都行
    static public void b()&amp;#123;
        //System.out.println(this.id);//4.在静态方法中不能使用this关键字
        //a();//3.在静态方法中不能访问非静态的方法
        //System.out.println(id);//2.在静态方法中不能访问非静态的属性
        System.out.println(sid);
        System.out.println(&amp;quot;------b&amp;quot;);
    &amp;#125;

    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //5.非静态的方法可以用对象名.方法名去调用
        Demo d = new Demo();
        d.a();
        //6.静态的方法可以用 对象名.方法名去调用 也可以 用 类名.方法名 （推荐）
        Demo.b();
        d.b();
        &amp;#123;% asset_img 4bb83b402c7aad5b29b09c46fe3a60b9.png  %&amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;代码块&#34;&gt;&lt;a href=&#34;#代码块&#34; class=&#34;headerlink&#34; title=&#34;代码块&#34;&gt;&lt;/a&gt;代码块&lt;/h1&gt;&lt;p&gt;【1】类的组成：属性，方法，构造器，代码块，内部类&lt;/p&gt;
&lt;p&gt;【2】代码块分类：普通块，构造块，静态块，同步块（多线程）&lt;/p&gt;
&lt;p&gt;【3】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //属性
    int a;
    static int sa;

    //方法
    public void a()&amp;#123;
        System.out.println(&amp;quot;-----a&amp;quot;);
        &amp;#123;
            //普通块限制了局部变量的作用范围
            System.out.println(&amp;quot;这是普通块&amp;quot;);
            System.out.println(&amp;quot;----000000&amp;quot;);
            int num = 10;
            System.out.println(num);
        &amp;#125;
        //System.out.println(num);
        //if()&amp;#123;&amp;#125;
        //while()&amp;#123;&amp;#125;
    &amp;#125;
    public static void b()&amp;#123;
        System.out.println(&amp;quot;------b&amp;quot;);
    &amp;#125;

    //构造块
    &amp;#123;
        System.out.println(&amp;quot;------这是构造块&amp;quot;);
    &amp;#125;
    //静态块
    static&amp;#123;
        System.out.println(&amp;quot;-----这是静态块&amp;quot;);
        //在静态块中只能方法：静态属性，静态方法
        System.out.println(sa);
        b();
    &amp;#125;


    //构造器
    public Test()&amp;#123;
        System.out.println(&amp;quot;这是空构造器&amp;quot;);
    &amp;#125;
    public Test(int a)&amp;#123;
        this.a = a;
    &amp;#125;


    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Test t = new Test();
        t.a();

        Test t2 = new Test();
        t2.a();
    &amp;#125;



&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;（1）代码块执行顺序：&lt;/p&gt;
&lt;p&gt;最先执行静态块，只在类加载的时候执行一次，所以一般以后实战写项目：创建工厂，数据库的初始化信息都放入静态块。&lt;/p&gt;
&lt;p&gt;一般用于执行一些全局性的初始化操作。&lt;/p&gt;
&lt;p&gt;再执行构造块，（不常用）&lt;/p&gt;
&lt;p&gt;再执行构造器，&lt;/p&gt;
&lt;p&gt;再执行方法中的普通块。&lt;/p&gt;
&lt;h1 id=&#34;包，import&#34;&gt;&lt;a href=&#34;#包，import&#34; class=&#34;headerlink&#34; title=&#34;包，import&#34;&gt;&lt;/a&gt;包，import&lt;/h1&gt;&lt;p&gt;【1】生活案例：&lt;/p&gt;
&lt;p&gt;邮寄快递：中国.北京.通州区.****小区.5号楼.3单元.101房.赵珊珊&lt;/p&gt;
&lt;p&gt;历史：常山赵子龙&lt;/p&gt;
&lt;p&gt;【2】包的作用：&lt;/p&gt;
&lt;p&gt;为了解决重名问题（实际上包对应的就是盘符上的目录）&lt;/p&gt;
&lt;p&gt;解决权限问题&lt;/p&gt;
&lt;p&gt;【3】创建包：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4c01c78e65328aa2cc03c43c7dc51cd7.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b813c37b6345ac6463be51d3c6c7ff77.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;包名定义：&lt;/p&gt;
&lt;p&gt;（1）名字全部小写&lt;/p&gt;
&lt;p&gt;（2）中间用.隔开&lt;/p&gt;
&lt;p&gt;（3）一般都是公司域名倒着写 ： com.jd com.msb&lt;/p&gt;
&lt;p&gt;（4）加上模块名字：&lt;/p&gt;
&lt;p&gt;com.jd.login com.jd.register&lt;/p&gt;
&lt;p&gt;（5）不能使用系统中的关键字：nul,con,com1—com9…..&lt;/p&gt;
&lt;p&gt;（6）包声明的位置一般都在非注释性代码的第一行：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c54ecb2742a2b971e196ee55f9ab9193.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】导包问题：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.msb2.Person; //导包：就是为了进行定位

import java.util.Date;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        new Person();
        new Date();
        new java.sql.Date(1000L);//在导包以后，还想用其他包下同名的类，就必须要手动自己写所在的包。
        new Demo();
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）在导包以后，还想用其他包下同名的类，就必须要手动自己写所在的包。&lt;/p&gt;
&lt;p&gt;（3）同一个包下的类想使用不需要导包，可以直接使用。&lt;/p&gt;
&lt;p&gt;（4）在java.lang包下的类，可以直接使用无需导包：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0b7459093a2491a103c60fc5b7d9a6b9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（5）IDEA中导包快捷键：alt+enter&lt;/p&gt;
&lt;p&gt;可以自己设置自动导包&lt;/p&gt;
&lt;p&gt;（6）可以直接导入*：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/69d91ed24222309df909ff777d89d08f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【5】在Java中的导包没有包含和被包含的关系：&lt;/p&gt;
&lt;p&gt;设置目录平级的格式（不是包含和被包含的显示）：  &lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/26efc24659a7281452240f746bfc8f2f.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6d440aaefd446325e269a62253689110.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【6】静态导入：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package com.msb11;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;&amp;#x2F;静态导入：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; import static java.lang.Math.\*;
 //导入：java.lang下的Math类中的所有静态的内容

 public class Test &amp;#123;
 //这是一个main方法，是程序的入口：
 public static void main(String[] args) &amp;#123;
 System.out.println(random());
 System.out.println(PI);
 System.out.println(round(5.6));
 &amp;#125;
 //在静态导入后，同一个类中有相同的方法的时候，会优先走自己定义的方法。
 public static int round(double a)&amp;#123;
 return 1000;
 &amp;#125;
 &amp;#125;
 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;三大特性&#34;&gt;&lt;a href=&#34;#三大特性&#34; class=&#34;headerlink&#34; title=&#34;三大特性&#34;&gt;&lt;/a&gt;三大特性&lt;/h1&gt;&lt;h2 id=&#34;封装-Encapsulation&#34;&gt;&lt;a href=&#34;#封装-Encapsulation&#34; class=&#34;headerlink&#34; title=&#34;封装(Encapsulation)&#34;&gt;&lt;/a&gt;封装(Encapsulation)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【1】生活案例：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ATM , 电线&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】Java中封装的理解：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将某些东西进行隐藏，然后提供相应的方式进行获取。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/95a55583bf15b892c21ed0eb2380eed9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;我们程序设计追求“高内聚，低耦合”。&lt;/p&gt;
&lt;p&gt;➢高内聚:类的内部数据操作细节自己完成，不允许外部干涉;&lt;/p&gt;
&lt;p&gt;➢低耦合:仅对外暴露少量的方法用于使用。&lt;/p&gt;
&lt;p&gt;隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提&lt;/p&gt;
&lt;p&gt;高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露&lt;/p&gt;
&lt;p&gt;的暴露出来。这就是封装性的设计思想。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】封装的好处：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;提高代码的安全性&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4】代码：通过一个属性感受封装：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package com.msb.test01;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;**&lt;/li&gt;
&lt;li&gt;* @Auther: msb-zhaoss&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Girl &amp;#123;//女孩
    //属性：
    private int age;

    //读取年龄：
    public int duquAge()&amp;#123;
        return age;
    &amp;#125;

    //设置年龄：
    public void shezhiAge(int age)&amp;#123;
        if(age \&amp;gt;= 30 )&amp;#123;
            this.age = 18;
        &amp;#125;else&amp;#123;
            this.age = age;
        &amp;#125;

    &amp;#125;


&amp;#125;

package com.msb.test01;


public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Girl类的对象：
        Girl g = new Girl();
        /\*g.age = 33;
        System.out.println(g.age);\*/
            //设置年龄：
            g.shezhiAge(31);
        //读取年龄：
        System.out.println(g.duquAge());

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的代码，对于属性age来说，我加了修饰符private，这样外界对它的访问就受到了限制，现在我还想加上其他的限制条件，但是在属性本身上没有办法再加了，所以我们通过定义方法来进行限制条件的添加。&lt;/p&gt;
&lt;p&gt;以属性为案例：&lt;/p&gt;
&lt;p&gt;进行封装：&lt;/p&gt;
&lt;p&gt;（1）将属性私有化，被private修饰–》加入权限修饰符&lt;/p&gt;
&lt;p&gt;一旦加入了权限修饰符，其他人就不可以随意的获取这个属性&lt;/p&gt;
&lt;p&gt;（2）提供public修饰的方法让别人来访问&amp;#x2F;使用&lt;/p&gt;
&lt;p&gt;（3）即使外界可以通过方法来访问属性了，但是也不能随意访问，因为咱们在方法中可以加入 限制条件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【5】实际开发中，方法一般会写成 setter，getter方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以利用IDEA快捷键生成：alt+insert –&amp;gt;getter and setter:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Girl &amp;#123;//女孩
    //属性：
    private int age;

    //读取年龄：
    public int getAge()&amp;#123;
        return age;
    &amp;#125;

    //设置年龄：
    public void setAge(int age)&amp;#123;
        if(age \&amp;gt;= 30 )&amp;#123;
            this.age = 18;
        &amp;#125;else&amp;#123;
            this.age = age;
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【6】加深练习：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student &amp;#123;
    //属性：
    private int age;
    private String name;
    private String sex;

    //加入对应的setter和getter方法：
    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public String getSex() &amp;#123;
        return sex;
    &amp;#125;

    public void setSex(String sex) &amp;#123;
        if(&amp;quot;男&amp;quot;.equals(sex) \|\| &amp;quot;女&amp;quot;.equals(sex) )&amp;#123;//sex是男 或者 是 女
            this.sex = sex;
        &amp;#125;else&amp;#123;
            this.sex = &amp;quot;男&amp;quot;;
        &amp;#125;
    &amp;#125;

    //加入构造器：
    public Student()&amp;#123;

    &amp;#125;

    public Student(int age,String name,String sex)&amp;#123;
        this.age = age;
        this.name = name;
        //this.sex = sex;
        this.setSex(sex);
    &amp;#125;
&amp;#125;

package com.msb.test2;


public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Student对象：
        Student s1 = new Student();
        s1.setName(&amp;quot;nana&amp;quot;);
        s1.setAge(19);
        s1.setSex(&amp;quot;女&amp;quot;);
        System.out.println(s1.getName()+&amp;quot;---&amp;quot;+s1.getAge()+&amp;quot;----&amp;quot;+s1.getSex());

        Student s2 = new Student(18,&amp;quot;菲菲&amp;quot;,&amp;quot;asdfasdfsadf&amp;quot;);
        System.out.println(s2.getName()+&amp;quot;---&amp;quot;+s2.getAge()+&amp;quot;----&amp;quot;+s2.getSex());
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;继承-Inheritance&#34;&gt;&lt;a href=&#34;#继承-Inheritance&#34; class=&#34;headerlink&#34; title=&#34;继承(Inheritance)&#34;&gt;&lt;/a&gt;继承(Inheritance)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【1】类是对对象的抽象：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;荣耀20 ，小米 红米3，华为 p40 pro —&amp;gt; 类：手机类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】继承是对类的抽象：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;p&gt;学生类：Student：&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高，学生编号&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫，学习&lt;/p&gt;
&lt;p&gt;教师类：Teacher:&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高，教师编号&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫，教学&lt;/p&gt;
&lt;p&gt;员工类：Emploee:&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高，员工编号&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫，工作&lt;/p&gt;
&lt;p&gt;共同的东西：&lt;/p&gt;
&lt;p&gt;人类：&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫&lt;/p&gt;
&lt;p&gt;学生类&amp;#x2F;教师类&amp;#x2F;员工类 继承 自 人类&lt;/p&gt;
&lt;p&gt;以后定义代码：&lt;/p&gt;
&lt;p&gt;先定义人类：&lt;/p&gt;
&lt;p&gt;人类： —》父类，基类，超类&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫&lt;/p&gt;
&lt;p&gt;再定义 ： —》子类，派生类&lt;/p&gt;
&lt;p&gt;学生类：Student：&lt;/p&gt;
&lt;p&gt;属性：学生编号&lt;/p&gt;
&lt;p&gt;方法：学习&lt;/p&gt;
&lt;p&gt;教师类：Teacher:&lt;/p&gt;
&lt;p&gt;属性：教师编号&lt;/p&gt;
&lt;p&gt;方法：教学&lt;/p&gt;
&lt;p&gt;员工类：Emploee:&lt;/p&gt;
&lt;p&gt;属性：员工编号&lt;/p&gt;
&lt;p&gt;方法：工作&lt;/p&gt;
&lt;p&gt;子类 继承自 父类&lt;/p&gt;
&lt;p&gt;狗类：&lt;/p&gt;
&lt;p&gt;属性：姓名，年龄，身高&lt;/p&gt;
&lt;p&gt;方法：吃饭，睡觉，喊叫&lt;/p&gt;
&lt;p&gt;我们的继承关系，是在合理的范围中进行的抽取 ，抽取出子类父类的关系：&lt;/p&gt;
&lt;p&gt;上面的案例中：&lt;/p&gt;
&lt;p&gt;学生类&amp;#x2F;教师类&amp;#x2F;员工类 继承 自 人类 —》合理&lt;/p&gt;
&lt;p&gt;学生类&amp;#x2F;教师类&amp;#x2F;员工类 继承 自 狗类 —》不合理&lt;/p&gt;
&lt;p&gt;区分：&lt;/p&gt;
&lt;p&gt;学生是一个人&lt;/p&gt;
&lt;p&gt;教师是一个人&lt;/p&gt;
&lt;p&gt;员工是一个人 —》合理&lt;/p&gt;
&lt;p&gt;学生是一个狗 —》不合理&lt;/p&gt;
&lt;p&gt;总结：继承 就是 is - a 的关系&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】代码层面的解释：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先写父类，再写子类：&lt;/p&gt;
&lt;p&gt;父类：人类 Person&lt;/p&gt;
&lt;p&gt;子类：学生类 Student&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;package com.msb.test03;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&amp;#x2F;**&lt;/li&gt;
&lt;li&gt;* @Auther: msb-zhaoss&lt;/li&gt;
&lt;li&gt;*&amp;#x2F;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    //属性：
    private int age;
    private String name;
    private double height;

    //提供setter getter方法：

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public double getHeight() &amp;#123;
        return height;
    &amp;#125;

    public void setHeight(double height) &amp;#123;
        this.height = height;
    &amp;#125;

    //方法：
    public void eat()&amp;#123;
        System.out.println(&amp;quot;可以吃饭。。。&amp;quot;);
    &amp;#125;

    public void sleep()&amp;#123;
        System.out.println(&amp;quot;可以睡觉。。。&amp;quot;);
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
package com.msb.test03;

public class Student extends Person &amp;#123;//子类Student 继承 父类Person
    //属性：
    private int sno;//学号

    public int getSno() &amp;#123;
        return sno;
    &amp;#125;

    public void setSno(int sno) &amp;#123;
        this.sno = sno;
    &amp;#125;

    //方法：
    public void study()&amp;#123;
        System.out.println(&amp;quot;学生可以学习&amp;quot;);
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test03;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建子类Student的对象
        Student s = new Student();
        s.setSno(1001);
        s.setAge(18);
        s.setName(&amp;quot;菲菲&amp;quot;);
        s.setHeight(180.4);

        System.out.println(&amp;quot;学生名字为：&amp;quot;+s.getName()+&amp;quot;,学生的年纪：&amp;quot;+s.getAge());

        //访问方法：
        s.study();
        s.eat();
        s.sleep();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【4】继承的好处：&lt;/strong&gt;提高代码的复用性&lt;/p&gt;
&lt;p&gt;父类定义的内容，子类可以直接拿过来用就可以了，不用代码上反复重复定义了&lt;/p&gt;
&lt;p&gt;需要注意的点：&lt;/p&gt;
&lt;p&gt;父类private修饰的内容，子类实际上也继承，只是因为封装的特性阻碍了直接调用，但是提供了间接调用的方式，可以间接调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【5】总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）继承关系 ：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;父类&amp;#x2F;基类&amp;#x2F;超类&lt;/p&gt;
&lt;p&gt;子类&amp;#x2F;派生类&lt;/p&gt;
&lt;p&gt;子类继承父类一定在合理的范围进行继承的 子类 extends 父类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（2）继承的好处：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.提高了代码的复用性，父类定义的内容，子类可以直接拿过来用就可以了，不用代码上反复重复定义了&lt;/p&gt;
&lt;p&gt;2.便于代码的扩展&lt;/p&gt;
&lt;p&gt;3.为了以后多态的使用。是多态的前提。&lt;/p&gt;
&lt;p&gt;（3）父类private修饰的内容，子类也继承过来了。&lt;/p&gt;
&lt;p&gt;（4）一个父类可以有多个子类。&lt;/p&gt;
&lt;p&gt;（5）一个子类只能有一个直接父类。&lt;/p&gt;
&lt;p&gt;但是可以间接的继承自其它类。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/853b3f04c4932ab081cea980b8b93937.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（6）继承具有传递性：&lt;/p&gt;
&lt;p&gt;Student –》继承自 Person —》继承自Object&lt;/p&gt;
&lt;p&gt;Object类是所有类的根基父类。&lt;/p&gt;
&lt;p&gt;所有的类都直接或者间接的继承自Object。&lt;/p&gt;
&lt;h3 id=&#34;内存分析-1&#34;&gt;&lt;a href=&#34;#内存分析-1&#34; class=&#34;headerlink&#34; title=&#34;内存分析&#34;&gt;&lt;/a&gt;内存分析&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/efb4a8c9189aea82cd25ed76bb83892b.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;权限修饰符&#34;&gt;&lt;a href=&#34;#权限修饰符&#34; class=&#34;headerlink&#34; title=&#34;权限修饰符&#34;&gt;&lt;/a&gt;权限修饰符&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6362352d7d72827f6e8330b2314e50fe.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【1】private：权限：在当前类中可以访问&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f49850ada620326d3c6e3e969491ea0f.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d1051cf6836474d0bd46cebbc5e9f2b7.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/748f9a251587c5c3f527c6b60ae68961.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【2】default:缺省修饰符：权限：到同一个包下的其他类都可以访问&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a9adb2a0ee7b22a158499bdf9264e927.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/507700aaac0bb1ea4c9ea49935843e06.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a1884c8b37bef224d8111b5d03a6fba7.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】protected：权限：最大到不同包下的子类&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/c9f4fec14f259e36b1d3b1d0f84666a1.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/14538a4729c730bee00cb172b0bbaf69.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1ba8b04d798285212551e94f9beb2a27.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【4】public：在整个项目中都可以访问&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;属性，方法：修饰符：四种：private，缺省，protected，public&lt;/p&gt;
&lt;p&gt;类：修饰符：两种：缺省，public&lt;/p&gt;
&lt;p&gt;以后写代码&lt;/p&gt;
&lt;p&gt;一般属性：用private修饰 ，方法：用public修饰&lt;/p&gt;
&lt;h3 id=&#34;方法的重写&#34;&gt;&lt;a href=&#34;#方法的重写&#34; class=&#34;headerlink&#34; title=&#34;方法的重写&#34;&gt;&lt;/a&gt;方法的重写&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;【1】重写：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;发生在子类和父类中，当子类对父类提供的方法不满意的时候，要对父类的方法进行重写。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】重写有严格的格式要求：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;子类的方法名字和父类必须一致，参数列表（个数，类型，顺序）也要和父类一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    public void eat()&amp;#123;
        System.out.println(&amp;quot;吃食物&amp;quot;);
    &amp;#125;
    public void sleep()&amp;#123;
        System.out.println(&amp;quot;睡觉&amp;quot;);
    &amp;#125;
&amp;#125;

public class Student extends Person &amp;#123;
    public void study()&amp;#123;
        System.out.println(&amp;quot;学习&amp;quot;);
    &amp;#125;
    @override
    public void eat()&amp;#123;
        System.out.println(&amp;quot;我喜欢吃小龙虾喝啤酒。。&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/bd618aafd593ad295ce5c750618dc32a.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Student类的对象：
        Student s = new Student();
        s.eat();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【4】内存：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e938358a339565fc850e88e0fb056438.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【5】重载和重写的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;重载：在同一个类中，当方法名相同，形参列表不同的时候 多个方法构成了重载&lt;/p&gt;
&lt;p&gt;重写：在不同的类中，子类对父类提供的方法不满意的时候，要对父类的方法进行重写。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d5872fc2effee86b2e0573634c6c876c.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;super&#34;&gt;&lt;a href=&#34;#super&#34; class=&#34;headerlink&#34; title=&#34;super&#34;&gt;&lt;/a&gt;super&lt;/h3&gt;&lt;p&gt;【1】super:指的是： 父类的&lt;/p&gt;
&lt;p&gt;【2】super可以修饰属性，可以修饰方法；&lt;/p&gt;
&lt;p&gt;在子类的方法中，可以通过 super.属性 super.方法 的方式，显示的去调用父类提供的属性，方法。在通常情况下，super.可以省略不写：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/9c34efb863bf488a0d6c9a5e631a6a1d.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;在特殊情况下，当子类和父类的属性重名时，你要想使用父类的属性，必须加上修饰符super.，只能通过super.属性来调用&lt;/p&gt;
&lt;p&gt;在特殊情况下，当子类和父类的方法重名时，你要想使用父类的方法，必须加上修饰符super.，只能通过super.方法来调用&lt;/p&gt;
&lt;p&gt;在这种情况下，super.就不可以省略不写。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/af3658cad9ff80c0cd50ec8a8957809b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【3】super修饰构造器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实我们平时写的构造器的第一行都有：super() –&amp;gt;作用：调用父类的空构造器，只是我们一般都省略不写&lt;/p&gt;
&lt;p&gt;（所有构造器的第一行默认情况下都有super(),但是一旦你的构造器中显示的使用super调用了父类构造器，那么这个super()就不会给你默认分配了。如果构造器中没有显示的调用父类构造器的话，那么第一行都有super(),可以省略不写）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f83b1b34f45ed2c2fa508c0bfd3edff2.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;如果构造器中已经显示的调用super父类构造器，那么它的第一行就没有默认分配的super();了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2b726c25c19f6d0bda87b121df9e5c17.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;在构造器中，super调用父类构造器和this调用子类构造器只能存在一个，两者不能共存：&lt;/p&gt;
&lt;p&gt;因为super修饰构造器要放在第一行，this修饰构造器也要放在第一行：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0d12186c6df4682072262dac8a7ebc6b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;改正二选一即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b1232bfc50729fc5ae34b3bb8e24c495.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【4】以后写代码构造器的生成可以直接使用IDEA提供的快捷键：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;alt+insert&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3a4ffc5a8078225efe692487eaaa27f9.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;继承条件下构造方法的执行过程&#34;&gt;&lt;a href=&#34;#继承条件下构造方法的执行过程&#34; class=&#34;headerlink&#34; title=&#34;继承条件下构造方法的执行过程&#34;&gt;&lt;/a&gt;继承条件下构造方法的执行过程&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e486184aee5d5ed004fbe3a9bc06497a.png&#34; class=&#34;&#34;&gt;




&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Person &amp;#123;
    int age;
    String name;

    public Person(int age, String name) &amp;#123;
        super();
        this.age = age;
        this.name = name;
    &amp;#125;

    public Person() &amp;#123;
    &amp;#125;
&amp;#125;

public class Student extends Person &amp;#123;
    double height ;

    public Student() &amp;#123;
    &amp;#125;

    public Student(int age, String name, double height) &amp;#123;
        super(age, name);
        this.height = height;
    &amp;#125;
&amp;#125;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Student s = new Student(19,&amp;quot;feifei&amp;quot;,160.8);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Object类&#34;&gt;&lt;a href=&#34;#Object类&#34; class=&#34;headerlink&#34; title=&#34;Object类&#34;&gt;&lt;/a&gt;Object类&lt;/h3&gt;&lt;p&gt;所有类都直接或间接的继承自Object类，Object类是所有Java类的根基类。&lt;/p&gt;
&lt;p&gt;也就意味着所有的Java对象都拥有Object类的属性和方法。&lt;/p&gt;
&lt;p&gt;如果在类的声明中未使用extends关键字指明其父类，则默认继承Object类。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/aeccaa6fc133025b43dc6e9670f17d44.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;toString()方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【1】Object类的toString()的作用：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/899bcc0c91c446dfb749301b53563996.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;方法的原理：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/745b80c0db126d2edafc1f7daf1f955a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;现在，使用toString方法的时候，打印出来的东西 “不好看”，对于其他人来说不友好，可读性不好&lt;/p&gt;
&lt;p&gt;我们现在是想知道对象的信息，名字，年龄，身高。。。。。。&lt;/p&gt;
&lt;p&gt;现在的格式不好：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d377d6556ae80f216e00404592999e77.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;出现的问题：子类Student对父类Object提供的toString方法不满意，不满意–》对toString方法进行重写：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student /\*extends Object\*/&amp;#123;
    private String name;
    private int age;
    private double height;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public double getHeight() &amp;#123;
        return height;
    &amp;#125;

    public void setHeight(double height) &amp;#123;
        this.height = height;
    &amp;#125;

    public Student() &amp;#123;
    &amp;#125;

    public Student(String name, int age, double height) &amp;#123;
        this.name = name;
        this.age = age;
        this.height = height;
    &amp;#125;

    public String toString() &amp;#123;
        return &amp;quot;这是一个Student对象，这个对象的名字：&amp;quot;+name+&amp;quot;,年龄：&amp;quot;+age+&amp;quot;,身高：&amp;quot;+height;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/777945b54a0ad9f5d6284ac3acf271d0.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;总结：toString的作用就是对对象进行“自我介绍”，一般子类对父类提供的toString都不满意，都要进行重写。&lt;/p&gt;
&lt;p&gt;IDEA提供了快捷键：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Student /\*extends Object\*/&amp;#123;
    private String name;
    private int age;
    private double height;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public double getHeight() &amp;#123;
        return height;
    &amp;#125;

    public void setHeight(double height) &amp;#123;
        this.height = height;
    &amp;#125;

    public Student() &amp;#123;
    &amp;#125;

    public Student(String name, int age, double height) &amp;#123;
        this.name = name;
        this.age = age;
        this.height = height;
    &amp;#125;

    /\*public String toString() &amp;#123;
        return &amp;quot;这是一个Student对象，这个对象的名字：&amp;quot;+name+&amp;quot;,年龄：&amp;quot;+age+&amp;quot;,身高：&amp;quot;+height;
    &amp;#125;\*/

        @Override
        public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
            &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;quot;, age=&amp;quot; + age +
            &amp;quot;, height=&amp;quot; + height +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;equals方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Phone &amp;#123;//手机类：
    //属性：
    private String brand;//品牌型号
    private double price;//价格
    private int year ;//出产年份
    //方法：

    public String getBrand() &amp;#123;
        return brand;
    &amp;#125;

    public void setBrand(String brand) &amp;#123;
        this.brand = brand;
    &amp;#125;

    public double getPrice() &amp;#123;
        return price;
    &amp;#125;

    public void setPrice(double price) &amp;#123;
        this.price = price;
    &amp;#125;

    public int getYear() &amp;#123;
        return year;
    &amp;#125;

    public void setYear(int year) &amp;#123;
        this.year = year;
    &amp;#125;

    @Override
    public String toString() &amp;#123;
        return &amp;quot;Phone&amp;#123;&amp;quot; +
            &amp;quot;brand=&amp;#39;&amp;quot; + brand + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;quot;, price=&amp;quot; + price +
            &amp;quot;, year=&amp;quot; + year +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;

    //构造器：

    public Phone() &amp;#123;
    &amp;#125;

    public Phone(String brand, double price, int year) &amp;#123;
        this.brand = brand;
        this.price = price;
        this.year = year;
    &amp;#125;


    //对equals方法进行重写：
    public boolean equals(Object obj) &amp;#123;//Object obj = new Phone();
        //将obj转为Phone类型：
        Phone other = (Phone)obj;//向下转型，为了获取子类中特有的内容
        if(this.getBrand()==other.getBrand()&amp;amp;&amp;amp;this.getPrice()==other.getPrice()&amp;amp;&amp;amp;this.getYear()==other.getYear())&amp;#123;
            return true;
        &amp;#125;
        return false;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;

        //创建Phone类的对象：
        Phone p1 = new Phone(&amp;quot;华为P40&amp;quot;,2035.98,2020);
        Phone p2 = new Phone(&amp;quot;华为P40&amp;quot;,2035.98,2020);
        //比较两个对象：p1和p2对象：
        //==的作用：比较左右两侧的值是否想的，要么相等，返回true,要么不相等,返回false
        System.out.println(p1==p2);//--\&amp;gt;\&amp;gt;\&amp;gt;对于引用数据类型来说，比较的是地址值。---\&amp;gt;一定返回的是false

        //Object类提供了一个方法 equals方法 ：作用：比较对象具体内容是否相等。
        boolean flag = p1.equals(p2);//点进源码发现：底层依旧比较的是==，比较的还是地址值。
        System.out.println(flag);

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;equals作用：这个方法提供了对对象的内容是否相等 的一个比较方式，对象的内容指的就是属性。&lt;/p&gt;
&lt;p&gt;父类Object提供的equals就是在比较&amp;#x3D;&amp;#x3D;地址，没有实际的意义，我们一般不会直接使用父类提供的方法，&lt;/p&gt;
&lt;p&gt;而是在子类中对这个方法进行重写。&lt;/p&gt;
&lt;p&gt;instanceof&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/30e52b9618d9cbd40553fdef0f60675b.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;利用集成开发工具生成equals方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【1】利用eclipse：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/91bbe52ca5d21f371941360962dea206.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【2】利用idea：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/97956cd439b862107cbc346e52ba17c3.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;类和类的关系&#34;&gt;&lt;a href=&#34;#类和类的关系&#34; class=&#34;headerlink&#34; title=&#34;类和类的关系&#34;&gt;&lt;/a&gt;类和类的关系&lt;/h3&gt;&lt;p&gt;代码&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【1】面向对象的思维：&lt;/strong&gt;找参与者，找女孩类，找男孩类&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】体会了什么叫方法的性擦，什么叫方法的实参：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/a4ab41dc30f6f798d4f7e210c42f758e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;具体传入的内容 实参：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/2c75ac587a45937e5652a3096bfe6126.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【3】类和类可以产生关系：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）将一个类作为另一个类中的方法的形参&lt;/p&gt;
&lt;p&gt;（2）将一个类作为另一个类的属性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Girl &amp;#123;
    //属性：
    String name;
    double weight;
    Mom m /\*= new Mom()\*/;
    //方法：
    public void add(int a)&amp;#123;//参数是基本数据类型
        System.out.println(a);
        System.out.println(a+100);
    &amp;#125;
    //谈恋爱的方法：
    public void love(Boy b)&amp;#123;//参数是引用数据类型Boy
        System.out.println(&amp;quot;我男朋友的名字是：&amp;quot;+b.name+&amp;quot;，我男朋友的年龄是：&amp;quot;+b.age);
        b.buy();
    &amp;#125;

    //女孩跟妈妈聊天：
    public void wechat()&amp;#123;
        m.say();
    &amp;#125;

    //构造器：
    public Girl(String name, double weight) &amp;#123;
        this.name = name;
        this.weight = weight;
    &amp;#125;
&amp;#125;
public class Boy &amp;#123;
    //属性：
    int age;
    String name;
    //方法：
    public void buy()&amp;#123;
        System.out.println(&amp;quot;跟我谈恋爱，我给你买买买。。。&amp;quot;);
    &amp;#125;
    //构造器：
    public Boy(int age, String name) &amp;#123;
        this.age = age;
        this.name = name;
    &amp;#125;
&amp;#125;
public class Mom &amp;#123;
    //方法：
    public void say()&amp;#123;
        System.out.println(&amp;quot;妈妈唠唠叨叨 都是爱，听妈妈的话。。&amp;quot;);
    &amp;#125;
&amp;#125;

public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Boy类的具体的对象：
        Boy boy = new Boy(30,&amp;quot;鹿晗&amp;quot;);
        //创建一个Girl类的具体的对象：
        Girl girl = new Girl(&amp;quot;关晓彤&amp;quot;,100);
        //谈恋爱：
        //girl.love(boy);
        Boy boy2 = new Boy(35,&amp;quot;陈伟霆&amp;quot;);
        girl.love(boy2);

        //还可以跟妈妈微信聊天：
        girl.m = new Mom();
        girl.wechat();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;p&gt;一、继承关系&lt;/p&gt;
&lt;p&gt;继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。在Java中继承关系通过关键字extends明确标识，在设计时一般没有争议性。在UML类图设计中，继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/6df8fcf572c5c9257622c561c3f9b8ce.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;二、实现关系&lt;/p&gt;
&lt;p&gt;实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性。在UML类图设计中，实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/7980497e067f9fb24a419ae71874f7c9.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;三、依赖关系&lt;/p&gt;
&lt;p&gt;简单的理解，依赖就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是类B的变化会影响到类A。比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖。表现在代码层面，让类B作为参数被类A在某个method方法中使用。在UML类图设计中，依赖关系用由类A指向类B的带箭头虚线表示。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/d43f314a327103dae3f6211ba1668d9f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;四、关联关系&lt;/p&gt;
&lt;p&gt;关联体现的是两个类之间语义级别的一种强依赖关系，比如我和我的朋友，这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。关联可以是单向、双向的。表现在代码层面，为被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。在UML类图设计中，关联关系用由关联类A指向被关联类B的带箭头实线表示，在关联的两端可以标注关联双方的角色和多重性标记。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/18a919f662aae552a4f799f592a76428.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;五、聚合关系&lt;/p&gt;
&lt;p&gt;聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，聚合关系以空心菱形加实线箭头表示。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f588bbc3aa0176674ac7a0ad91269ee5.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;六、组合关系&lt;/p&gt;
&lt;p&gt;组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，比如人和人的大脑。表现在代码层面，和关联关系是一致的，只能从语义级别来区分。在UML类图设计中，组合关系以实心菱形加实线箭头表示。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/1b8ae6d948c959d7a1a598bcf58ae9ba.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;七、总结&lt;/p&gt;
&lt;p&gt;对于继承、实现这两种关系没多少疑问，它们体现的是一种类和类、或者类与接口间的纵向关系。其他的四种关系体现的是类和类、或者类与接口间的引用、横向关系，是比较难区分的，有很多事物间的关系要想准确定位是很难的。前面也提到，这四种关系都是语义级别的，所以从代码层面并不能完全区分各种关系，但总的来说，后几种关系所表现的强弱程度依次为：组合&amp;gt;聚合&amp;gt;关联&amp;gt;依赖。&lt;/p&gt;
&lt;h2 id=&#34;多态-Polymorphism&#34;&gt;&lt;a href=&#34;#多态-Polymorphism&#34; class=&#34;headerlink&#34; title=&#34;多态(Polymorphism)&#34;&gt;&lt;/a&gt;多态(Polymorphism)&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【1】多态跟属性无关，多态指的是方法的多态，而不是属性的多态。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;【&lt;strong&gt;2】案例代入：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Animal &amp;#123;//父类：动物：
    public void shout()&amp;#123;
        System.out.println(&amp;quot;我是小动物，我可以叫。。。&amp;quot;);
    &amp;#125;
&amp;#125;
public class Cat extends Animal&amp;#123;
    //喊叫方法：
    public void shout()&amp;#123;
        System.out.println(&amp;quot;我是小猫，可以喵喵叫&amp;quot;);
    &amp;#125;
    public void scratch()&amp;#123;
        System.out.println(&amp;quot;我是小猫，我可以挠人&amp;quot;);
    &amp;#125;
&amp;#125;
public class Dog extends Animal&amp;#123;
    //喊叫：
    public void shout()&amp;#123;
        System.out.println(&amp;quot;我是小狗，我可以汪汪叫&amp;quot;);
    &amp;#125;
    public void guard()&amp;#123;
        System.out.println(&amp;quot;我是小狗，我可以看家护院，保护我的小主人。。。&amp;quot;);
    &amp;#125;
&amp;#125;
public class Pig extends Animal&amp;#123;
    public void shout()&amp;#123;
        System.out.println(&amp;quot;我是小猪，我嗯嗯嗯的叫&amp;quot;);
    &amp;#125;
    public void eat()&amp;#123;
        System.out.println(&amp;quot;我是小猪，我爱吃东西。。&amp;quot;);
    &amp;#125;

&amp;#125;
public class Girl &amp;#123;
    //跟猫玩耍：
    /\*public void play(Cat cat)&amp;#123;
        cat.shout();
    &amp;#125;\*/
        //跟狗玩耍：
        /\*public void play(Dog dog)&amp;#123;
        dog.shout();
    &amp;#125;\*/
        //跟小动物玩耍：
        public void play(Animal an)&amp;#123;
        an.shout();
    &amp;#125;
&amp;#125;
public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //具体的猫：--》猫的对象
        //Cat c = new Cat();
        //具体的小女孩：--》女孩的对象
        Girl g = new Girl();
        //小女孩跟猫玩：
        //g.play(c);
        //具体的狗---》狗的对象：
        //Dog d = new Dog();
        //小女孩跟狗玩：
        //g.play(d);
        //具体的动物：--》动物的对象：
        //Cat c = new Cat();
        //Dog d = new Dog();
        Pig p = new Pig();
        Animal an = p;
        g.play(an);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【3】总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）先有父类，再有子类：–》继承 先有子类，再抽取父类 —-》泛化&lt;/p&gt;
&lt;p&gt;（2）什么是多态：&lt;/p&gt;
&lt;p&gt;多态就是多种状态：同一个行为，不同的子类表现出来不同的形态。&lt;/p&gt;
&lt;p&gt;多态指的就是同一个方法调用，然后由于对象不同会产生不同的行为。&lt;/p&gt;
&lt;p&gt;（3）多态的好处：&lt;/p&gt;
&lt;p&gt;为了提高代码的扩展性，符合面向对象的设计原则：开闭原则。&lt;/p&gt;
&lt;p&gt;开闭原则：指的就是扩展是 开放的，修改是关闭的。&lt;/p&gt;
&lt;p&gt;注意：多态可以提高扩展性，但是扩展性没有达到最好，以后我们会学习 反射&lt;/p&gt;
&lt;p&gt;（4）多态的要素：&lt;/p&gt;
&lt;p&gt;一，继承： Cat extends Animal ,Pig extends Animal, Dog extends Animal&lt;/p&gt;
&lt;p&gt;二，重写：子类对父类的方法shout()重写&lt;/p&gt;
&lt;p&gt;三， 父类引用指向子类对象：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pig p &amp;#x3D; new Pig();&lt;/li&gt;
&lt;li&gt;Animal an &amp;#x3D; p;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;将上面的代码合为一句话：&lt;/p&gt;
&lt;p&gt;Animal an &amp;#x3D; new Pig();&lt;/p&gt;
&lt;p&gt;&amp;#x3D;左侧：编译期的类型&lt;/p&gt;
&lt;p&gt;&amp;#x3D;右侧：运行期的类型&lt;/p&gt;
&lt;p&gt;Animal an &amp;#x3D; new Pig();&lt;/p&gt;
&lt;p&gt;g.play(an); &amp;#x2F;&amp;#x2F;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;public void play(Animal an){&amp;#x2F;&amp;#x2F;Animal an &amp;#x3D; an &amp;#x3D; new Pig();&lt;/li&gt;
&lt;li&gt;an.shout();&lt;/li&gt;
&lt;li&gt;}&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上面的代码，也是多态的一种非常常见的应用场合：父类当方法的形参，然后传入的是具体的子类的对象，&lt;/p&gt;
&lt;p&gt;然后调用同一个方法，根据传入的子类的不同展现出来的效果也不同，构成了多态。&lt;/p&gt;
&lt;h3 id=&#34;内存分析-2&#34;&gt;&lt;a href=&#34;#内存分析-2&#34; class=&#34;headerlink&#34; title=&#34;内存分析&#34;&gt;&lt;/a&gt;内存分析&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/f791313852aa2be7d3c356e48db838ff.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;向下转型，向上转型&#34;&gt;&lt;a href=&#34;#向下转型，向上转型&#34; class=&#34;headerlink&#34; title=&#34;向下转型，向上转型&#34;&gt;&lt;/a&gt;向下转型，向上转型&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e1446c03705f221dabfc73404636e7f9.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/dde65c5b8a65a38de394553d0009de33.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;现在我就想访问到eat()方法和weight属性：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Pig p = new Pig();
        Animal an = p;//转型：向上转型
        an.shout();

        //加入转型的代码：
        //将Animal转为Pig类型：
        Pig pig = (Pig)an ;//转型：向下转型
        pig.eat();
        pig.age = 10;
        pig.weight = 60.8;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对应内存：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/b2f3a4672a7467f639d8429662e933e8.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;思考之前的equals方法：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/25ce73d23e12ac98e7b1f7aa81f9ff22.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;简单工厂设计模式&#34;&gt;&lt;a href=&#34;#简单工厂设计模式&#34; class=&#34;headerlink&#34; title=&#34;简单工厂设计模式&#34;&gt;&lt;/a&gt;简单工厂设计模式&lt;/h3&gt;&lt;p&gt;不仅可以使用父类做方法的形参，还可以使用父类做方法的返回值类型，真实返回的对象可以是该类的任意一个子类对象。&lt;/p&gt;
&lt;p&gt;简单工厂模式的实现，它是解决大量对象创建问题的一个解决方案。将创建和使用分开，工厂负责创建，使用者直接调用即可。简单工厂模式的基本要求是&lt;/p&gt;
&lt;p&gt;² 定义一个static方法，通过类名直接调用&lt;/p&gt;
&lt;p&gt;² 返回值类型是父类类型，返回的可以是其任意子类类型&lt;/p&gt;
&lt;p&gt;² 传入一个字符串类型的参数，工厂根据参数创建对应的子类产品&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    public static void main(String[] args) &amp;#123;
        Girl g = new Girl();

        //Cat c = new Cat();
        //Dog d = new Dog();
        //Pig p = new Pig();
        Animal an = PetStore.getAnimal(&amp;quot;狗&amp;quot;);

        g.play(an);
    &amp;#125;
&amp;#125;
public class PetStore &amp;#123;//宠物店 ---》工厂类
    //方法：提供动物
    public static Animal getAnimal(String petName)&amp;#123;//多态的应用场合（二）
        Animal an = null;

        if(&amp;quot;猫&amp;quot;.equals(petName))&amp;#123;//petName.equals(&amp;quot;猫&amp;quot;) --》这样写容易发生空指针异常
            an = new Cat();
        &amp;#125;

        if(&amp;quot;狗&amp;quot;.equals(petName))&amp;#123;
            an = new Dog();
        &amp;#125;

        if(&amp;quot;猪&amp;quot;.equals(petName))&amp;#123;
            an = new Pig();
        &amp;#125;

        return an;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;final&#34;&gt;&lt;a href=&#34;#final&#34; class=&#34;headerlink&#34; title=&#34;final&#34;&gt;&lt;/a&gt;final&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】修饰变量；&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //第1种情况：
        //final修饰一个变量，变量的值不可以改变，这个变量也变成了一个字符常量，约定俗称的规定：名字大写
        final int A = 10;//final修饰基本数据类型
        //A = 20; 报错：不可以修改值
        //第2种情况：
        final Dog d = new Dog();//final修饰引用数据类型，那么地址值就不可以改变
        //d = new Dog(); --\&amp;gt;地址值不可以更改
        //d对象的属性依然可以改变：
        d.age = 10;
        d.weight = 13.7;

        //第3种情况：
        final Dog d2 = new Dog();
        a(d2);
        //第4种情况：
        b(d2);

    &amp;#125;
    public static void a(Dog d)&amp;#123;
        d = new Dog();
    &amp;#125;
    public static void b(final Dog d)&amp;#123;//d被final修饰 ，指向不可以改变
        //d = new Dog();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【2】修饰方法；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;final修饰方法，那么这个方法不可以被该类的子类重写：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/e2ac79b24d344d5b0d6b8faa62f96090.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【3】修饰类；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;final修饰类，代表没有子类，该类不可以被继承：&lt;/p&gt;
&lt;p&gt;一旦一个类被final修饰，那么里面的方法也没有必要用final修饰了（final可以省略不写）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5598439b682631d58965e571cf796ae3.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;【4】案例：JDK提供的Math类：&lt;/strong&gt;看源码发现：&lt;/p&gt;
&lt;p&gt;（1）使用Math类的时候无需导包，直接使用即可：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/3acfdc8f04f80a895820a2d9947c1a59.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（2）Math类没有子类，不能被其他类继承了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/0febe174ebc78d4977b9ac8a6259fef8.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（3）里面的属性全部被final修饰，方法也是被final修饰的，只是省略不写了&lt;/p&gt;
&lt;p&gt;原因：子类没有必要进行重写。&lt;/p&gt;
&lt;p&gt;（4）外界不可以创建对象：&lt;/p&gt;
&lt;p&gt;Math m &amp;#x3D; new Math();&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/97205d348a09e70cdda26b24ec220407.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;（5）发现Math类中的所有的属性，方法都被static修饰&lt;/p&gt;
&lt;p&gt;那么不用创建对象去调用，只能通过类名.属性名 类名.方法名 去调用&lt;/p&gt;
&lt;h1 id=&#34;抽象类，抽象方法&#34;&gt;&lt;a href=&#34;#抽象类，抽象方法&#34; class=&#34;headerlink&#34; title=&#34;抽象类，抽象方法&#34;&gt;&lt;/a&gt;抽象类，抽象方法&lt;/h1&gt;&lt;p&gt;【1】抽象类和抽象方法的关系：&lt;/p&gt;
&lt;p&gt;抽象类中可以定义0-n个抽象方法。&lt;/p&gt;
&lt;p&gt;【2】抽象类作用：&lt;/p&gt;
&lt;p&gt;在抽象类中定义抽象方法，目的是为了为子类提供一个通用的模板，子类可以在模板的基础上进行开发，先重写父类的抽象方法，然后可以扩展子类自己的内容。抽象类设计避免了子类设计的随意性，通过抽象类，子类的设计变得更加严格，进行某些程度上的限制。&lt;/p&gt;
&lt;p&gt;使子类更加的通用。&lt;/p&gt;
&lt;p&gt;【3】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//4.一个类中如果有方法是抽象方法，那么这个类也要变成一个抽象类。
//5.一个抽象类中可以有0-n个抽象方法
public abstract class Person &amp;#123;
    //1.在一个类中，会有一类方法，子类对这个方法非常满意，无需重写，直接使用
    public void eat()&amp;#123;
        System.out.println(&amp;quot;一顿不吃饿得慌&amp;quot;);
    &amp;#125;
    //2.在一个类中，会有一类方法，子类对这个方法永远不满意，会对这个方法进行重写。
    //3.一个方法的方法体去掉，然后被abstract修饰，那么这个方法就变成了一个抽象方法
    public abstract void say();
    public abstract void sleep();
&amp;#125;

//6.抽象类可以被其他类继承：
//7.一个类继承一个抽象类，那么这个类可以变成抽象类
//8.一般子类不会加abstract修饰，一般会让子类重写父类中的抽象方法
//9.子类继承抽象类，就必须重写全部的抽象方法
//10.子类如果没有重写父类全部的抽象方法，那么子类也可以变成一个抽象类。
class Student extends Person&amp;#123;

    @Override
    public void say() &amp;#123;
        System.out.println(&amp;quot;我是东北人，我喜欢说东北话。。&amp;quot;);
    &amp;#125;

    @Override
    public void sleep() &amp;#123;
        System.out.println(&amp;quot;东北人喜欢睡炕。。&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;class Demo&amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //11.创建抽象类的对象：--\&amp;gt;抽象类不可以创建对象
        //Person p = new Person();
        
        //12.创建子类对象：
        Student s = new Student();
        s.sleep();
        s.say();
        
        //13.多态的写法：父类引用只想子类对象：
        Person p = new Student();
        p.say();
        p.sleep();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【4】面试题：&lt;/p&gt;
&lt;p&gt;（1）抽象类不能创建对象，那么抽象类中是否有构造器？&lt;/p&gt;
&lt;p&gt;抽象类中一定有构造器。构造器的作用 给子类初始化对象的时候要先super调用父类的构造器。&lt;/p&gt;
&lt;p&gt;（2）抽象类是否可以被final修饰？&lt;/p&gt;
&lt;p&gt;不能被final修饰，因为抽象类设计的初衷就是给子类继承用的。要是被final修饰了这个抽象类了，就不存在继承了，就没有子类。&lt;/p&gt;
&lt;h1 id=&#34;接口&#34;&gt;&lt;a href=&#34;#接口&#34; class=&#34;headerlink&#34; title=&#34;接口&#34;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】接口声明格式：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;[访问修饰符] interface 接口名 [extends 父接口1，父接口2…] {   常量定义；   方法定义；  }&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;【2】代码：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test04;

/**
    * 1.类是类，接口是接口，它们是同一层次的概念。
    * 2.接口中没有构造器
    * 3.接口如何声明：interface
    * 4.在JDK1.8之前，接口中只有两部分内容：
    * （1）常量：固定修饰符：public static final
    * （2）抽象方法：固定修饰符：public abstract
    * 注意：修饰符可以省略不写，IDE会帮你自动补全，但是初学者建议写上，防止遗忘。
*/
public interface TestInterface01 &amp;#123;
    //常量：
    /\*public static final\*/ int NUM = 10;
    //抽象方法：
    /\*public abstract\*/ void a();
    /\*public abstract\*/ void b(int num);
    /\*public abstract\*/ int c(String name);
&amp;#125;

interface TestInterface02&amp;#123;
    void e();
    void f();
&amp;#125;
/\*
    5.类和接口的关系是什么？ 实现关系 类实现接口：
    6.一旦实现一个接口，那么实现类要重写接口中的全部的抽象方法：
    7.如果没有全部重写抽象方法，那么这个类可以变成一个抽象类。
    8.java只有单继承，java还有多实现
    一个类继承其他类，只能直接继承一个父类
    但是实现类实现接口的话，可以实现多个接口
    9.写法：先继承 再实现：extends Person implements TestInterface01,TestInterface02
    \*/
    class Student extends Person implements TestInterface01,TestInterface02 &amp;#123;
        @Override
        public void a() &amp;#123;
            System.out.println(&amp;quot;---1&amp;quot;);
        &amp;#125;

        @Override
        public void b(int num) &amp;#123;
            System.out.println(&amp;quot;---2&amp;quot;);
        &amp;#125;

        @Override
        public int c(String name) &amp;#123;
            return 100;
        &amp;#125;

        @Override
        public void e() &amp;#123;
            System.out.println(&amp;quot;---3&amp;quot;);
        &amp;#125;

        @Override
        public void f() &amp;#123;
            System.out.println(&amp;quot;---4&amp;quot;);
        &amp;#125;
    &amp;#125;


class Test&amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //10.接口不能创建对象：
        //TestInterface02 t = new TestInterface02();
        TestInterface02 t = new Student();//接口指向实现类 ---》多态

        //11.接口中常量如何访问：
        System.out.println(TestInterface01.NUM);
        System.out.println(Student.NUM);
        Student s = new Student();
        System.out.println(s.NUM);
        TestInterface01 t2 = new Student();
        System.out.println(t2.NUM);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;【3】接口的作用是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义规则，只是跟抽象类不同地方在哪？它是接口不是类。&lt;/p&gt;
&lt;p&gt;接口定义好规则之后，实现类负责实现即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4】&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;继承：子类对父类的继承&lt;/p&gt;
&lt;p&gt;实现：实现类对接口的实现&lt;/p&gt;
&lt;p&gt;手机 是不是 照相机&lt;/p&gt;
&lt;p&gt;继承：手机 extends 照相机 “is-a”的关系，手机是一个照相机&lt;/p&gt;
&lt;p&gt;上面的写法 不好：&lt;/p&gt;
&lt;p&gt;实现： 手机 implements 拍照功能 “has-a”的关系，手机具备照相的能力&lt;/p&gt;
&lt;p&gt;案例：飞机，小鸟，风筝&lt;/p&gt;
&lt;p&gt;定义一个接口： Flyable&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【5】多态的应用场合：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）父类当做方法的形参，传入具体的子类的对象&lt;/p&gt;
&lt;p&gt;（2）父类当做方法的返回值，返回的是具体的子类的对象&lt;/p&gt;
&lt;p&gt;（3）接口当做方法的形参，传入具体的实现类的对象&lt;/p&gt;
&lt;p&gt;（4）接口当做方法的返回值，返回的是具体的实现类的对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【6】接口和抽象类的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/ff922aa23cf8364987c661f524bf9d58.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;JDK1-8以后的接口新增内容&#34;&gt;&lt;a href=&#34;#JDK1-8以后的接口新增内容&#34; class=&#34;headerlink&#34; title=&#34; JDK1.8以后的接口新增内容&#34;&gt;&lt;/a&gt; JDK1.8以后的接口新增内容&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在JDK1.8之前，接口中只有两部分内容：&lt;/strong&gt;&lt;br&gt;（1）常量：固定修饰符：public static final&lt;br&gt;（2）抽象方法：固定修饰符：public abstract&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在JDK1.8之后，新增非抽象方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）被public default修饰的非抽象方法：&lt;/p&gt;
&lt;p&gt;注意1：default修饰符必须要加上，否则出错&lt;/p&gt;
&lt;p&gt;注意2：实现类中要是想重写接口中的非抽象方法，那么default修饰符必须不能加，否则出错。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface TestInterface &amp;#123;
    //常量：
    public static final int NUM= 10;
    //抽象方法：
    public abstract void a();
    //public default修饰的非抽象方法：
    public default void b()&amp;#123;
        System.out.println(&amp;quot;-------TestInterface---b()-----&amp;quot;);
    &amp;#125;
&amp;#125;
class Test implements TestInterface&amp;#123;
    public void c()&amp;#123;
        //用一下接口中的b方法：
        b();//可以
        //super.b();不可以
        TestInterface.super.b();//可以
    &amp;#125;
    @Override
    public void a() &amp;#123;
        System.out.println(&amp;quot;重写了a方法&amp;quot;);
    &amp;#125;

    @Override
    public void b() &amp;#123;

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）静态方法：&lt;/p&gt;
&lt;p&gt;注意1：static不可以省略不写&lt;/p&gt;
&lt;p&gt;注意2：静态方法不能重写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface TestInterface2 &amp;#123;
    //常量：
    public static final int NUM = 10;
    //抽象方法：
    public abstract void a();
    //public default非抽象方法；
    public default void b()&amp;#123;
        System.out.println(&amp;quot;-----TestInterface2---b&amp;quot;);
    &amp;#125;
    //静态方法：
    public static void c()&amp;#123;
        System.out.println(&amp;quot;TestInterface2中的静态方法&amp;quot;);
    &amp;#125;
&amp;#125;

class Demo implements TestInterface2&amp;#123;
    @Override
    public void a() &amp;#123;
        System.out.println(&amp;quot;重写了a方法&amp;quot;);
    &amp;#125;
    public static void c()&amp;#123;
        System.out.println(&amp;quot;Demo中的静态方法&amp;quot;);
    &amp;#125;
&amp;#125;

class A &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        Demo d = new Demo();
        d.c();
        Demo.c();
        TestInterface2.c();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;疑问：为什么要在接口中加入非抽象方法？？？&lt;/p&gt;
&lt;p&gt;如果接口中只能定义抽象方法的话，那么我要是修改接口中的内容，那么对实现类的影响太大了，所有实现类都会受到影响。&lt;/p&gt;
&lt;p&gt;现在在接口中加入非抽象方法，对实现类没有影响，想调用就去调用即可。&lt;/p&gt;
&lt;h1 id=&#34;内部类&#34;&gt;&lt;a href=&#34;#内部类&#34; class=&#34;headerlink&#34; title=&#34;内部类&#34;&gt;&lt;/a&gt;内部类&lt;/h1&gt;&lt;h2 id=&#34;成员内部类&#34;&gt;&lt;a href=&#34;#成员内部类&#34; class=&#34;headerlink&#34; title=&#34;成员内部类&#34;&gt;&lt;/a&gt;成员内部类&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
* 1.类的组成：属性，方法，构造器，代码块（普通块，静态块，构造块，同步块），内部类
* 2.一个类TestOuter的内部的类SubTest叫内部类， 内部类 ：SubTest 外部类：TestOuter
* 3.内部类：成员内部类 (静态的，非静态的) 和 局部内部类（位置：方法内，块内，构造器内）
* 4.成员内部类:
* 里面属性，方法，构造器等
* 修饰符：private，default，protect，public，final,abstract
*/
public class TestOuter &amp;#123;
    //非静态的成员内部类：
    public class D&amp;#123;
        int age = 20;
        String name;
        public void method()&amp;#123;
            //5.内部类可以访问外部类的内容
            /\*System.out.println(age);
            a();\*/
                int age = 30;

            //8.内部类和外部类属性重名的时候，如何进行调用：
            System.out.println(age);//30
            System.out.println(this.age);//20
            System.out.println(TestOuter.this.age);//10
        &amp;#125;
    &amp;#125;

    //静态成员内部类：
    static class E&amp;#123;
        public void method()&amp;#123;
            //6.静态内部类中只能访问外部类中被static修饰的内容
            /\*System.out.println(age);
            a();\*/
        &amp;#125;
    &amp;#125;
    //属性：
    int age = 10;
    //方法：
    public void a()&amp;#123;
        System.out.println(&amp;quot;这是a方法&amp;quot;);
        &amp;#123;
            System.out.println(&amp;quot;这是一个普通块&amp;quot;);
            class B&amp;#123;

            &amp;#125;
        &amp;#125;
        class A&amp;#123;

        &amp;#125;
        //7.外部类想要访问内部类的东西，需要创建内部类的对象然后进行调用
        D d = new D();
        System.out.println(d.name);
        d.method();

    &amp;#125;
    static&amp;#123;
        System.out.println(&amp;quot;这是静态块&amp;quot;);
    &amp;#125;
    &amp;#123;
        System.out.println(&amp;quot;这是构造块&amp;quot;);
    &amp;#125;
    //构造器：
    public TestOuter()&amp;#123;
        class C&amp;#123;

        &amp;#125;
    &amp;#125;

    public TestOuter(int age) &amp;#123;
        this.age = age;
    &amp;#125;
&amp;#125;

class Demo&amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建外部类的对象：
        TestOuter to = new TestOuter();
        to.a();

        //9.创建内部类的对象：
        //静态的成员内部类创建对象：
        TestOuter.E e = new TestOuter.E();
        //非静态的成员内部类创建对象：
        //错误：TestOuter.D d = new TestOuter.D();
        TestOuter t = new TestOuter();
        TestOuter.D d = t.new D();

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;局部内部类&#34;&gt;&lt;a href=&#34;#局部内部类&#34; class=&#34;headerlink&#34; title=&#34;局部内部类&#34;&gt;&lt;/a&gt;局部内部类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class TestOuter &amp;#123;
    //1.在局部内部类中访问到的变量必须是被final修饰的
    public void method()&amp;#123;
        final int num = 10;
        class A&amp;#123;
            public void a()&amp;#123;
                //num = 20;
                System.out.println(num);
            &amp;#125;
        &amp;#125;
    &amp;#125;
    //2.如果类B在整个项目中只使用一次，那么就没有必要单独创建一个B类，使用内部类就可以了
    public Comparable method2()&amp;#123;
        class B implements Comparable&amp;#123;
            @Override
            public int compareTo(Object o) &amp;#123;
                return 100;
            &amp;#125;
        &amp;#125;
        return new B();
    &amp;#125;

    public Comparable method3()&amp;#123;
        //3.匿名内部类
        return new Comparable()&amp;#123;

            @Override
            public int compareTo(Object o) &amp;#123;
                return 200;
            &amp;#125;
        &amp;#125;;
    &amp;#125;

    public void teat()&amp;#123;
        Comparable com = new Comparable()&amp;#123;

            @Override
            public int compareTo(Object o) &amp;#123;
                return 200;
            &amp;#125;
        &amp;#125;;

        System.out.println(com.compareTo(&amp;quot;abc&amp;quot;));
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;面向对象项目&#34;&gt;&lt;a href=&#34;#面向对象项目&#34; class=&#34;headerlink&#34; title=&#34;面向对象项目&#34;&gt;&lt;/a&gt;面向对象项目&lt;/h1&gt;&lt;h2 id=&#34;项目需求&#34;&gt;&lt;a href=&#34;#项目需求&#34; class=&#34;headerlink&#34; title=&#34;项目需求&#34;&gt;&lt;/a&gt;项目需求&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/55242c8d1c966467d3474bfd5be55072.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;项目结构分析&#34;&gt;&lt;a href=&#34;#项目结构分析&#34; class=&#34;headerlink&#34; title=&#34;项目结构分析&#34;&gt;&lt;/a&gt;项目结构分析&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC8%E7%AB%A0_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/71e9407d4bd6fa1ac73e649f555944d3.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;最终代码&#34;&gt;&lt;a href=&#34;#最终代码&#34; class=&#34;headerlink&#34; title=&#34;最终代码&#34;&gt;&lt;/a&gt;最终代码&lt;/h2&gt;&lt;p&gt;匹萨父类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Pizza &amp;#123;
    //属性
    private String name;//名称
    private int size;//大小
    private int price;//价格

    //方法

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public int getSize() &amp;#123;
        return size;
    &amp;#125;

    public void setSize(int size) &amp;#123;
        this.size = size;
    &amp;#125;

    public int getPrice() &amp;#123;
        return price;
    &amp;#125;

    public void setPrice(int price) &amp;#123;
        this.price = price;
    &amp;#125;

    //展示匹萨信息：
    public String showPizza()&amp;#123;
        return &amp;quot;匹萨的名字是：&amp;quot;+name+&amp;quot;\\n匹萨的大小是：&amp;quot;+size+&amp;quot;寸\\n匹萨的价格：&amp;quot;+price+&amp;quot;元&amp;quot;;
    &amp;#125;


    //构造器

    public Pizza() &amp;#123;
    &amp;#125;

    public Pizza(String name, int size, int price) &amp;#123;
        this.name = name;
        this.size = size;
        this.price = price;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;培根匹萨：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class BaconPizza extends Pizza &amp;#123;
    //属性：
    private int weight;

    public int getWeight() &amp;#123;
        return weight;
    &amp;#125;

    public void setWeight(int weight) &amp;#123;
        this.weight = weight;
    &amp;#125;

    //构造器：

    public BaconPizza() &amp;#123;
    &amp;#125;

    public BaconPizza(String name, int size, int price, int weight) &amp;#123;
        super(name, size, price);
        this.weight = weight;
    &amp;#125;

    //重写父类showPizza方法：

    @Override
    public String showPizza() &amp;#123;
        return super.showPizza()+&amp;quot;\\n培根的克数是：&amp;quot;+weight+&amp;quot;克&amp;quot;;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;水果匹萨：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class FruitsPizza extends Pizza&amp;#123;
    //属性：
    private String burdening;

    public String getBurdening() &amp;#123;
        return burdening;
    &amp;#125;

    public void setBurdening(String burdening) &amp;#123;
        this.burdening = burdening;
    &amp;#125;

    //构造器：

    public FruitsPizza() &amp;#123;
    &amp;#125;

    public FruitsPizza(String name, int size, int price, String burdening) &amp;#123;
        super(name, size, price);
        this.burdening = burdening;
    &amp;#125;

    //重写父类showPizza方法：

    @Override
    public String showPizza() &amp;#123;
        return super.showPizza()+&amp;quot;\\n你要加入的水果：&amp;quot;+burdening;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //选择购买匹萨：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请选择你想要购买的匹萨（1.培根匹萨 2.水果匹萨）:&amp;quot;);
        int choice = sc.nextInt();//选择
        //通过工厂获取匹萨：
        Pizza pizza = PizzaStore.getPizza(choice);
        System.out.println(pizza.showPizza());

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;工厂类：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;


public class PizzaStore &amp;#123;
    public static Pizza getPizza(int choice)&amp;#123;
        Scanner sc = new Scanner(System.in);
        Pizza p = null;
        switch (choice)&amp;#123;
            case 1:
                &amp;#123;
                    System.out.println(&amp;quot;请录入培根的克数：&amp;quot;);
                    int weight = sc.nextInt();
                    System.out.println(&amp;quot;请录入匹萨的大小：&amp;quot;);
                    int size = sc.nextInt();
                    System.out.println(&amp;quot;请录入匹萨的价格：&amp;quot;);
                    int price = sc.nextInt();
                    //将录入的信息封装为培根匹萨的对象：
                    BaconPizza bp = new BaconPizza(&amp;quot;培根匹萨&amp;quot;,size,price,weight);
                    p = bp;
                &amp;#125;
                break;
            case 2:
                &amp;#123;
                    System.out.println(&amp;quot;请录入你想要加入的水果：&amp;quot;);
                    String burdening = sc.next();
                    System.out.println(&amp;quot;请录入匹萨的大小：&amp;quot;);
                    int size = sc.nextInt();
                    System.out.println(&amp;quot;请录入匹萨的价格：&amp;quot;);
                    int price = sc.nextInt();
                    //将录入的信息封装为水果匹萨的对象：
                    FruitsPizza fp = new FruitsPizza(&amp;quot;水果匹萨&amp;quot;,size,price,burdening);
                    p = fp;
                &amp;#125;
                break;
        &amp;#125;
        return p;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/</id>
        <title>第9章_异常</title>
        <link rel="alternate" href="http://example.com/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/"/>
        <content type="html">&lt;h1 id=&#34;习题的引入&#34;&gt;&lt;a href=&#34;#习题的引入&#34; class=&#34;headerlink&#34; title=&#34;习题的引入&#34;&gt;&lt;/a&gt;习题的引入&lt;/h1&gt;&lt;p&gt;【1】代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
        int num1 = sc.nextInt();
        System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
        int num2 = sc.nextInt();
        System.out.println(&amp;quot;商：&amp;quot;+num1/num2);

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/56f8af6619f13a967fd59a493803ae88.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;测试过程发现问题：&lt;/p&gt;
&lt;p&gt;录入的数据应为int类型，但是录入非int类型数据的时候，出异常：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/70fd21c0b8969ead54a12fe1afc5c8f6.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;除数为0的时候：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/6ac232ad5d4a32bdd682ee7df14a2a2a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;异常：Exception：在程序的运行过程中，发生了不正常的现象，阻止了程序的运行，我们称之为发生异常。&lt;/p&gt;
&lt;h1 id=&#34;通过if-else解决异常&#34;&gt;&lt;a href=&#34;#通过if-else解决异常&#34; class=&#34;headerlink&#34; title=&#34;通过if-else解决异常&#34;&gt;&lt;/a&gt;通过if-else解决异常&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
        if(sc.hasNextInt())&amp;#123;
            int num1 = sc.nextInt();
            System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
            if(sc.hasNextInt())&amp;#123;
                int num2 = sc.nextInt();
                if(num2 == 0)&amp;#123;
                    System.out.println(&amp;quot;对不起，除数不能为0&amp;quot;);
                &amp;#125;else&amp;#123;
                    System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
                &amp;#125;
            &amp;#125;else&amp;#123;
                System.out.println(&amp;quot;对不起，你录入的不是int类型的数据！&amp;quot;);
            &amp;#125;
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;对不起，你录入的不是int类型的数据！&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用if-else堵漏洞的缺点：&lt;/p&gt;
&lt;p&gt;（1）代码臃肿，业务代码和处理异常的代码混在一起。&lt;/p&gt;
&lt;p&gt;（2）可读性差&lt;/p&gt;
&lt;p&gt;（3）程序员需要花费大量的经历来维护这个漏洞&lt;/p&gt;
&lt;p&gt;（4）程序员很难堵住所有的漏洞。&lt;/p&gt;
&lt;h1 id=&#34;&#34;&gt;&lt;a href=&#34;#&#34; class=&#34;headerlink&#34; title=&#34;&#34;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&#34;try-catch&#34;&gt;&lt;a href=&#34;#try-catch&#34; class=&#34;headerlink&#34; title=&#34;try-catch&#34;&gt;&lt;/a&gt;try-catch&lt;/h1&gt;&lt;p&gt;【1】基于if-else处理异常缺点太多，所以java中专门出了一个异常处理机制：&lt;/p&gt;
&lt;p&gt;“异常三连” try-catch-finally&lt;/p&gt;
&lt;p&gt;【2】异常出现了以后怎么看：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/bb3e30a8d6384f5a856b898d56f6aae4.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【3】捕获异常： try-catch&lt;/p&gt;
&lt;p&gt;对应代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test2 &amp;#123;
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        try&amp;#123;
            Scanner sc = new Scanner(System.in);
            System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
            int num1 = sc.nextInt();
            System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
            int num2 = sc.nextInt();
            System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
        &amp;#125;catch(Exception ex)&amp;#123;
            System.out.println(&amp;quot;对不起，程序出现异常！&amp;quot;);
        &amp;#125;

        System.out.println(&amp;quot;----谢谢你使用计算器111&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器222&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器333&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器444&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器555&amp;quot;);
        System.out.println(&amp;quot;----谢谢你使用计算器666&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原理：&lt;/p&gt;
&lt;p&gt;把可能出现异常的代码放入try代码块中，然后将异常封装为对象，被catch后面的()中的那个异常对象接收，接收以后：执行catch后面的{}里面的代码，然后try-catch后面的代码，该怎么执行就怎么执行。&lt;/p&gt;
&lt;p&gt;详细说一下：&lt;/p&gt;
&lt;p&gt;（1）try中没有异常，catch中代码不执行。&lt;/p&gt;
&lt;p&gt;（2）try中有异常，catch进行捕获：&lt;/p&gt;
&lt;p&gt;如果catch中异常类型和你出的异常类型匹配的话：走catch中的代码–》进行捕获&lt;/p&gt;
&lt;p&gt;如果catch中异常类型和你出的异常类型不匹配的话：不走catch中的代码–》没有捕获成功，程序相当于遇到异常了，中断了，后续代码不执行&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;（1）try中如果出现异常，然后用catch捕获成功的话，那么try中后续的代码是不会执行的。&lt;/p&gt;
&lt;p&gt;（2）如果catch捕获异常成功，那么try-catch后面的代码该执行还是执行没有影响。&lt;/p&gt;
&lt;h1 id=&#34;catch中如何处理异常&#34;&gt;&lt;a href=&#34;#catch中如何处理异常&#34; class=&#34;headerlink&#34; title=&#34;catch中如何处理异常&#34;&gt;&lt;/a&gt;catch中如何处理异常&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test3 &amp;#123;
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        try&amp;#123;
            Scanner sc = new Scanner(System.in);
            System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
            int num1 = sc.nextInt();
            System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
            int num2 = sc.nextInt();
            System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
        &amp;#125;catch(Exception ex)&amp;#123;
            //第一种处理：什么都不写，什么都不做

            //第二种处理：输出自定义异常信息
            //System.out.println(&amp;quot;对不起，你的代码有问题！&amp;quot;);

            //第三种处理：打印异常信息：
            /\*(1)调用toString方法，显示异常的类名（全限定路径）\*/
                /\*System.out.println(ex);
            System.out.println(ex.toString());\*/
                /\*(2)显示异常描述信息对应的字符串，如果没有就显示null
                System.out.println(ex.getMessage());\*/
                /\*(3)显示异常的堆栈信息：将异常信息捕获以后，在控制台将异常的效果给我们展示出来，方便我们查看异常\*/
                /\* ex.printStackTrace();\*/

                //第四种处理：抛出异常：
                throw ex;
        &amp;#125;

        System.out.println(&amp;quot;----谢谢你使用计算器111&amp;quot;);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;try-catch-finally&#34;&gt;&lt;a href=&#34;#try-catch-finally&#34; class=&#34;headerlink&#34; title=&#34;try-catch-finally&#34;&gt;&lt;/a&gt;try-catch-finally&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;【1】在什么情况下，try-catch后面的代码不执行？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;（1）throw抛出异常的情况&lt;/p&gt;
&lt;p&gt;（2）catch中没有正常的进行异常捕获&lt;/p&gt;
&lt;p&gt;（3）在try中遇到return&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【2】怎么样才可以将 try-catch后面的代码 必须执行？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要将必须执行的代码放入finally中，那么这个代码无论如何一定执行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【3】return和finally执行顺序？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;先执行finally最后执行return&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【4】什么代码会放在finally中呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关闭数据库资源，关闭IO流资源，关闭socket资源。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【5】有一句话代码很厉害，它可以让finally中代码不执行!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;ZmlsZTovLy9EOlzkuIvovb1cU3lzdGVtLmV4aXQoMCk7XOe7iOatouW9k+WJjeeahOiZmuaLn+acuuaJp+ihjA==&#34;&gt;System.exit(0);&amp;#x2F;&amp;#x2F;终止当前的虚拟机执行&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;

public class Test3 &amp;#123;
    public static void main(String[] args) &amp;#123;
        //实现一个功能：键盘录入两个数，求商：
        try&amp;#123;
            Scanner sc = new Scanner(System.in);
            System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
            int num1 = sc.nextInt();
            System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
            int num2 = sc.nextInt();
            System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
            System.exit(0);//终止当前的虚拟机执行
            return;
        &amp;#125;catch(ArithmeticException ex)&amp;#123;
            //throw ex;
        &amp;#125;finally &amp;#123;
            System.out.println(&amp;quot;----谢谢你使用计算器111&amp;quot;);
        &amp;#125;


    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;多重catch&#34;&gt;&lt;a href=&#34;#多重catch&#34; class=&#34;headerlink&#34; title=&#34;多重catch&#34;&gt;&lt;/a&gt;多重catch&lt;/h1&gt;&lt;p&gt;【1】try中出现异常以后，将异常类型跟catch后面的类型依次比较，按照代码的顺序进行比对，执行第一个与异常类型匹配的catch语句&lt;/p&gt;
&lt;p&gt;【2】一旦执行其中一条catch语句之后，后面的catch语句就会被忽略了！&lt;/p&gt;
&lt;p&gt;【3】在安排catch语句的顺序的时候，一般会将特殊异常放在前面（并列），一般化的异常放在后面。&lt;/p&gt;
&lt;p&gt;先写子类异常，再写父类异常。&lt;/p&gt;
&lt;p&gt;【4】在JDK1.7以后，异常新处理方式：可以并列用|符号连接：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/fed2c319de1a9a8d184482f4c55ef6e4.png&#34; class=&#34;&#34;&gt;


&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.InputMismatchException;
import java.util.Scanner;

public class Test4 &amp;#123;
    public static void main(String[] args) &amp;#123;
        Integer
            //实现一个功能：键盘录入两个数，求商：
            try&amp;#123;
                Scanner sc = new Scanner(System.in);
                System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
                int num1 = sc.nextInt();
                System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
                int num2 = sc.nextInt();
                System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
            &amp;#125;catch(ArithmeticException ex)&amp;#123;
                System.out.println(&amp;quot;对不起，除数不可以为0&amp;quot;);
            &amp;#125;catch(InputMismatchException ex)&amp;#123;
                System.out.println(&amp;quot;对不起，你录入的数据不是int类型的数据&amp;quot;);
            &amp;#125;catch(Exception ex)&amp;#123;
                System.out.println(&amp;quot;对不起，你的程序出现异常&amp;quot;);
            &amp;#125;finally &amp;#123;
                System.out.println(&amp;quot;----谢谢你使用计算器111&amp;quot;);
            &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;异常的分类&#34;&gt;&lt;a href=&#34;#异常的分类&#34; class=&#34;headerlink&#34; title=&#34;异常的分类&#34;&gt;&lt;/a&gt;异常的分类&lt;/h1&gt;&lt;p&gt;【1】层次结构：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/49c007ec5d133e1d0e68827b9cf4b03e.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;注意：程序中语法错误，逻辑错误 都不属于上面的Error，Exception&lt;/p&gt;
&lt;p&gt;【2】运行时异常：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test5 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //运行时异常：
        int[] arr = &amp;#123;1,2,3&amp;#125;;
        System.out.println(arr.length);
        /\*int[] arr2 = null;
        System.out.println(arr2.length);\*/
            System.out.println(arr[10]);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【3】检查异常：&lt;/p&gt;
&lt;p&gt;处理方式1：try-catch嵌套try-catch&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test6 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //检查异常：
        try &amp;#123;
            try &amp;#123;
                Class.forName(&amp;quot;com.msb.test01.Test&amp;quot;).newInstance();
            &amp;#125; catch (InstantiationException e) &amp;#123;
                e.printStackTrace();
            &amp;#125; catch (IllegalAccessException e) &amp;#123;
                e.printStackTrace();
            &amp;#125;
        &amp;#125; catch (ClassNotFoundException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;处理方式2：多重catch&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test6 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //检查异常：
        try &amp;#123;
            Class.forName(&amp;quot;com.msb.test01.Test&amp;quot;).newInstance();
        &amp;#125; catch (ClassNotFoundException \| InstantiationException \| IllegalAccessException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;处理方式3：throws&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test6 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException &amp;#123;
        //检查异常：
        Class.forName(&amp;quot;com.msb.test01.Test&amp;quot;).newInstance();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;throw和throws的区别&#34;&gt;&lt;a href=&#34;#throw和throws的区别&#34; class=&#34;headerlink&#34; title=&#34;throw和throws的区别&#34;&gt;&lt;/a&gt;throw和throws的区别&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import java.util.Scanner;

public class Test7 &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) throws Exception &amp;#123;
        //实现一个功能：两个数相除，当除数为0的时候，程序出现异常。
        /\*try &amp;#123;
            devide();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;\*/
            devide();
    &amp;#125;
    public static void devide() throws Exception &amp;#123;
        Scanner sc = new Scanner(System.in);
        System.out.println(&amp;quot;请录入第一个数：&amp;quot;);
        int num1 = sc.nextInt();
        System.out.println(&amp;quot;请录入第二个数：&amp;quot;);
        int num2 = sc.nextInt();
        if(num2 == 0 )&amp;#123;//除数为0 ，制造异常。
            //制造运行时异常：
            /\*throw new RuntimeException();\*/
                //制造检查异常：
                /\*try &amp;#123;
                    throw new Exception();
                &amp;#125; catch (Exception e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;\*/
                    throw new Exception();
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;商：&amp;quot;+num1/num2);
        &amp;#125;
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;p&gt;throw和throws的区别：&lt;/p&gt;
&lt;p&gt;（1）位置不同：&lt;/p&gt;
&lt;p&gt;throw：方法内部&lt;/p&gt;
&lt;p&gt;throws: 方法的签名处，方法的声明处&lt;/p&gt;
&lt;p&gt;（2）内容不同：&lt;/p&gt;
&lt;p&gt;throw+异常对象（检查异常，运行时异常）&lt;/p&gt;
&lt;p&gt;throws+异常的类型（可以多个类型，用，拼接）&lt;/p&gt;
&lt;p&gt;（3）作用不同：&lt;/p&gt;
&lt;p&gt;throw：异常出现的源头，制造异常。&lt;/p&gt;
&lt;p&gt;throws:在方法的声明处，告诉方法的调用者，这个方法中可能会出现我声明的这些异常。然后调用者对这个异常进行处理：&lt;/p&gt;
&lt;p&gt;要么自己处理要么再继续向外抛出异常&lt;/p&gt;
&lt;h2 id=&#34;练习：&#34;&gt;&lt;a href=&#34;#练习：&#34; class=&#34;headerlink&#34; title=&#34;练习：&#34;&gt;&lt;/a&gt;练习：&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
public class Student &amp;#123;
    private String name;
    private int age;
    private String sex;

    public String getName() &amp;#123;
        return name;
    &amp;#125;

    public void setName(String name) &amp;#123;
        this.name = name;
    &amp;#125;

    public int getAge() &amp;#123;
        return age;
    &amp;#125;

    public void setAge(int age) &amp;#123;
        this.age = age;
    &amp;#125;

    public String getSex() &amp;#123;
        return sex;
    &amp;#125;

    public void setSex(String sex) throws Exception &amp;#123;
        if(sex.equals(&amp;quot;男&amp;quot;)\|\|sex.equals(&amp;quot;女&amp;quot;))&amp;#123;
            this.sex = sex;
        &amp;#125;else&amp;#123;//非男非女
            //解决办法1：
            /\*this.sex = &amp;quot;男&amp;quot;;\*/
                //解决办法2：给个友好型提示，但是打印结果为默认的null效果
                /\*System.out.println(&amp;quot;对不起，你的性别错误了&amp;quot;);\*/
                //解决办法3：
                //制造运行时异常：
                /\*throw new RuntimeException(&amp;quot;性别不对！&amp;quot;);\*/
                //制造检查异常
                /\*try &amp;#123;
                    throw new Exception();
                &amp;#125; catch (Exception e) &amp;#123;
                    e.printStackTrace();
                &amp;#125;\*/
                    throw new Exception();
        &amp;#125;
    &amp;#125;

    @Override
    public String toString() &amp;#123;
        return &amp;quot;Student&amp;#123;&amp;quot; +
            &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;quot;, age=&amp;quot; + age +
            &amp;quot;, sex=&amp;#39;&amp;quot; + sex + &amp;#39;\\&amp;#39;&amp;#39; +
            &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;

    public Student() &amp;#123;
    &amp;#125;

    public Student(String name, int age, String sex) &amp;#123;
        this.name = name;
        this.age = age;
        //this.sex = sex;
        try &amp;#123;
            this.setSex(sex);
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;



public class Test &amp;#123;
    //这是一个main方法，是程序的入口：
    public static void main(String[] args) &amp;#123;
        //创建一个Student的对象：
        /\*Student s = new Student();
        s.setName(&amp;quot;菲菲&amp;quot;);
        s.setAge(19);
        try &amp;#123;
            s.setSex(&amp;quot;asdfasdfasdf&amp;quot;);
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        System.out.println(s);\*/

            Student s2 = new Student(&amp;quot;娜娜&amp;quot;,21,&amp;quot;asdfasdfasdf&amp;quot;);
        System.out.println(s2);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;重载和重写的异常&#34;&gt;&lt;a href=&#34;#重载和重写的异常&#34; class=&#34;headerlink&#34; title=&#34;重载和重写的异常&#34;&gt;&lt;/a&gt;重载和重写的异常&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/cf74eead97b51814e21b234c60586c9a.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;【1】重载：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Demo &amp;#123;
    public void a() throws Exception&amp;#123;

    &amp;#125;
    public void a(int age) throws ArithmeticException&amp;#123;

    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;【2】重写：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/0ee7a011f038160bdfaa00237577e0c1.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/%E7%AC%AC9%E7%AB%A0_%E5%BC%82%E5%B8%B8/3243038ec840d0d3cc6dc909e039f3df.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;子类 &amp;lt;&amp;#x3D; 父类&lt;/p&gt;
&lt;h1 id=&#34;自定义异常&#34;&gt;&lt;a href=&#34;#自定义异常&#34; class=&#34;headerlink&#34; title=&#34;自定义异常&#34;&gt;&lt;/a&gt;自定义异常&lt;/h1&gt;&lt;p&gt;自定义的异常可以继承：运行时异常&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyException extends RuntimeException &amp;#123;

    static final long serialVersionUID = -70348971907L;

    public MyException()&amp;#123;

    &amp;#125;
    public MyException(String msg)&amp;#123;
        super(msg);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也可以继承检查异常：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyException extends Exception &amp;#123;

    static final long serialVersionUID = -70348971907L;

    public MyException()&amp;#123;

    &amp;#125;
    public MyException(String msg)&amp;#123;
        super(msg);
    &amp;#125;
&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果继承的是运行时异常，那么在使用的时候无需额外处理&lt;/p&gt;
&lt;p&gt;如果继承的是检查异常，那么使用的时候需要try-catch捕获或者throws向上抛&lt;/p&gt;
</content>
        <category term="JavaSE" />
        <updated>2022-10-06T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>http://example.com/2022/10/06/hexo/</id>
        <title>hexo</title>
        <link rel="alternate" href="http://example.com/2022/10/06/hexo/"/>
        <content type="html">&lt;hr&gt;
&lt;p&gt;title: hexo&lt;br&gt;date: 2022-10-06 14:53:52&lt;br&gt;categories:&lt;br&gt;    - 基础使用&lt;br&gt;tags:&lt;br&gt;    - 环境搭建&lt;br&gt;    - 博客&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;code&gt;hexo&lt;/code&gt;是一个基于nodejs的静态博客网站生成器，作者是来自台湾的&lt;code&gt;Tommy Chen&lt;/code&gt;，为许多技术博客的博主所青睐，主要有如下的一些优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;支持Markdown语法，编辑简单，排版优美；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够快速生成静态html文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署容易，接口简单； 兼容于各大主流操作系统；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;社区主题、插件很多，遇到问题的时候能查到的参考材料也很多。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hexo官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv&#34;&gt;https://hexo.io/zh-cn/docs/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Gitee Pages：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vaGVscC9hcnRpY2xlcy80MTM2I2FydGljbGUtaGVhZGVyMA==&#34;&gt;https://gitee.com/help/articles/4136#article-header0&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;环境配置&#34;&gt;&lt;a href=&#34;#环境配置&#34; class=&#34;headerlink&#34; title=&#34;环境配置&#34;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;搭建hexo首先需要有nodejs的环境，可以从官网直接下载。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/06/hexo/2xKvaPTDoyZcFbp.png&#34; class=&#34;&#34; title=&#34;nodejs&#34;&gt;

&lt;h1 id=&#34;生成博客&#34;&gt;&lt;a href=&#34;#生成博客&#34; class=&#34;headerlink&#34; title=&#34;生成博客&#34;&gt;&lt;/a&gt;生成博客&lt;/h1&gt;&lt;h2 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;有了npm包管理软件，安装hexo就很方便了，只需要一行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm install node # homebrew安装nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中-g参数表示全局安装，没有这个参数就只在当前目录下安装，建议全局安装。&lt;/p&gt;
&lt;h2 id=&#34;初始化&#34;&gt;&lt;a href=&#34;#初始化&#34; class=&#34;headerlink&#34; title=&#34;初始化&#34;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;p&gt;运行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;hexo init
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git
INFO  Install dependencies
# 一些可能的中间信息
INFO  Start blogging with Hexo!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后进入博客目录：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; cd “博客目录”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装博客需要的其他支持：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm install # 安装的依赖项在package.json文件的dependencies字段中可以看到
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;博客项目目录结构介绍&#34;&gt;&lt;a href=&#34;#博客项目目录结构介绍&#34; class=&#34;headerlink&#34; title=&#34;博客项目目录结构介绍&#34;&gt;&lt;/a&gt;博客项目目录结构介绍&lt;/h2&gt;&lt;p&gt;查看目录结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;tree -L 1 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.&lt;br&gt;├── _config.landscape.yml&lt;br&gt;├── _config.yml&lt;br&gt;├── node_modules&lt;br&gt;├── package-lock.json&lt;br&gt;├── package.json&lt;br&gt;├── scaffolds&lt;br&gt;├── source&lt;br&gt;└── themes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;各部分的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;`_config.yml &amp;#96;&lt;ul&gt;
&lt;li&gt;为全局配置文件，网站的很多信息都在这里配置，比如说网站名称，副标题，描述，作者，语言，主题等等。具体可以参考官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbi5odG1sJUUzJTgwJTgy&#34;&gt;https://hexo.io/zh-cn/docs/configuration.html。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_scaffolds&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;骨架文件，是生成新页面或者新博客的模版。可以根据需求编辑，当&lt;code&gt;hexo&lt;/code&gt;生成新博客的时候，会用这里面的模版进行初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_source&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;这个文件夹下面存放的是网站的&lt;code&gt;markdown&lt;/code&gt;源文件，里面有一个&lt;code&gt;_post&lt;/code&gt;文件夹，所有的&lt;code&gt;.md&lt;/code&gt;博客文件都会存放在这个文件夹下。现在，你应该能看到里面有一个&lt;code&gt;hello-world.md&lt;/code&gt;文件。_&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_themes&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;网站主题目录，&lt;code&gt;hexo&lt;/code&gt;有非常丰富的主题支持，主题目录会存放在这个目录下面。&lt;/li&gt;
&lt;li&gt;我们后续会以默认主题来演示，更多的主题参见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=&#34;&gt;https://hexo.io/themes/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生成新文章&#34;&gt;&lt;a href=&#34;#生成新文章&#34; class=&#34;headerlink&#34; title=&#34;生成新文章&#34;&gt;&lt;/a&gt;生成新文章&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;hexo new post &amp;quot;test&amp;quot; # 会在 source/_posts/ 目录下生成文件 ‘test.md’，打开编辑
hexo generate        # 生成静态HTML文件到 /public 文件夹中
hexo server          # 本地运行server服务预览，打开 http://localhost:4000 即可预览你的博客
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;本地预览效果：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/06/hexo/image-20221006120456734.png&#34; class=&#34;&#34; title=&#34;image-20221006120456734&#34;&gt;

&lt;p&gt;这是hexo的默认主题，更多的主题可以从官网下载。&lt;/p&gt;
&lt;p&gt;更详细的hexo命令可以查看文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29tbWFuZHM=&#34;&gt;https://hexo.io/zh-cn/docs/commands&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;Hexo配置并部署&#34;&gt;&lt;a href=&#34;#Hexo配置并部署&#34; class=&#34;headerlink&#34; title=&#34;Hexo配置并部署&#34;&gt;&lt;/a&gt;Hexo配置并部署&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;提前对要提交的仓库配置ssh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-安装部署工具&#34;&gt;&lt;a href=&#34;#1-安装部署工具&#34; class=&#34;headerlink&#34; title=&#34;1.安装部署工具&#34;&gt;&lt;/a&gt;1.安装部署工具&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-配置部署信息&#34;&gt;&lt;a href=&#34;#2-配置部署信息&#34; class=&#34;headerlink&#34; title=&#34;2.配置部署信息&#34;&gt;&lt;/a&gt;2.配置部署信息&lt;/h2&gt;&lt;p&gt;站点配置文件_config.yml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;deploy:
  type: git
  repo: &amp;lt;repository url&amp;gt; # 输入你的仓库地址
  branch: [branch] # 输入分支
  token:   #token
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;deploy:&lt;/p&gt;
&lt;p&gt; type: git&lt;/p&gt;
&lt;p&gt; repo: &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOiYjeDY3OyYjMTA1OyYjMTE2OyYjNjQ7JiMxMDM7JiN4Njk7JiN4NzQ7JiMxMDE7JiMxMDE7JiN4MmU7JiM5OTsmI3g2ZjsmIzEwOTs=&#34;&gt;&amp;#x67;&amp;#105;&amp;#116;&amp;#64;&amp;#103;&amp;#x69;&amp;#x74;&amp;#101;&amp;#101;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;&lt;/span&gt;:cysheng&amp;#x2F;cysheng.git # 输入你的仓库地址&lt;/p&gt;
&lt;p&gt; branch: master # 输入分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-部署&#34;&gt;&lt;a href=&#34;#3-部署&#34; class=&#34;headerlink&#34; title=&#34;3.部署&#34;&gt;&lt;/a&gt;3.部署&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; hexo clean  
 hexo g  
 hexo d 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hexo clean&lt;/p&gt;
&lt;p&gt;清除缓存文件 (db.json) 和已生成的静态文件 (public)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo g&lt;/p&gt;
&lt;p&gt;hexo解析站点文件夹，生成一个public文件夹（只包含浏览器可以解析的html、css、js），也就是我们需要部署的文件夹。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo d&lt;/p&gt;
&lt;p&gt;部署，即将我们的public文件夹推送到我们配置的仓库&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-开启Gitee-Pages服务&#34;&gt;&lt;a href=&#34;#4-开启Gitee-Pages服务&#34; class=&#34;headerlink&#34; title=&#34;4.开启Gitee Pages服务&#34;&gt;&lt;/a&gt;4.开启Gitee Pages服务&lt;/h2&gt;&lt;p&gt;找到新创建的仓库-&amp;gt;【服务】-&amp;gt;【Gitee Pages】  &lt;img data-src=&#34;/2022/10/06/hexo/image-20221006120734926.png&#34; class=&#34;&#34; title=&#34;hexo&amp;#x2F;image-20221006120734926&#34;&gt;&lt;/p&gt;
&lt;p&gt;如图，选择部署分支，部署目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;部署分支，与本地hexo配置一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署目录，不填即整个仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;强制使用https&lt;/p&gt;
&lt;p&gt;一个是进行加密，还有一个是我在用next主题时使用http访问会有跨域问题导致图标显示不出来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击启动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问给出的网站地址（以我的为例：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jeXNoZW5nLmdpdGVlLmlvKS8=&#34;&gt;https://cysheng.gitee.io）&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;hexo-框架常用的指令：&#34;&gt;&lt;a href=&#34;#hexo-框架常用的指令：&#34; class=&#34;headerlink&#34; title=&#34;hexo 框架常用的指令：&#34;&gt;&lt;/a&gt;hexo 框架常用的指令：&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;指令&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hexo clean &amp;amp;&amp;amp; hexo g&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;清除本地项目并重新生成 （重新部署时使用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hexo g&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;重新生成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Hexo s&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;开启本地预览&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Hexo d&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;推送到github&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;功能设置&#34;&gt;&lt;a href=&#34;#功能设置&#34; class=&#34;headerlink&#34; title=&#34;功能设置&#34;&gt;&lt;/a&gt;功能设置&lt;/h1&gt;&lt;h2 id=&#34;标题和分类&#34;&gt;&lt;a href=&#34;#标题和分类&#34; class=&#34;headerlink&#34; title=&#34;标题和分类&#34;&gt;&lt;/a&gt;标题和分类&lt;/h2&gt;&lt;p&gt;在文章开头我们可以设置 FontMatter，例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;---
title: jQuery对表单的操作及更多应用 # 标题
date: 2022-01-07 22:53:43 # 创建时间
categories: # 分类，级别递减
- web前端 # 一级分类
- web前端2 # 二级分类
tags: # 标签，没有级别
    - a1
    - a2
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	为了简化我们的操作，所以我们可以以设置模板，在 &lt;code&gt;/scaffolds&lt;/code&gt; 下的 &lt;code&gt;draft.md&lt;/code&gt; 、&lt;code&gt;page.md&lt;/code&gt; 、 &lt;code&gt;post.md&lt;/code&gt;  我们用来设置模板，例如我们最常使用的&lt;code&gt;post&lt;/code&gt; 目录下的文件，所以我们配置一下&lt;code&gt;post.md&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;---
title: &amp;#123;&amp;#123; title &amp;#125;&amp;#125;
date: &amp;#123;&amp;#123; date &amp;#125;&amp;#125;
comments:
tags:
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果我们在没有找到 tags 、categories 、link 、about文件时，我们手动创建&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;hexo new page tags
hexo new page categories 
hexo new page link 
hexo new page about
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;成功后，提示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;INFO  Created: ~/Documents/blog/source/xxx/index.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据上面的路径，找到&lt;code&gt;index.md&lt;/code&gt;这个文件，打开后默认内容是这样的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;---
title: 文章分类
date: 2022-01-07 22:53:43
type: &amp;quot;categories&amp;quot; # 哪个文件就是那个类型
layout: &amp;quot;categories&amp;quot; # 哪个文件就是那个类型
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后清除缓存，重新启动就行了 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;hexo cl &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo s
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;搜索&#34;&gt;&lt;a href=&#34;#搜索&#34; class=&#34;headerlink&#34; title=&#34;搜索&#34;&gt;&lt;/a&gt;搜索&lt;/h2&gt;&lt;h3 id=&#34;1、注册账号&#34;&gt;&lt;a href=&#34;#1、注册账号&#34; class=&#34;headerlink&#34; title=&#34;1、注册账号&#34;&gt;&lt;/a&gt;1、注册账号&lt;/h3&gt;&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20vdXNlcnMvc2lnbl9pbg==&#34;&gt;https://www.algolia.com/users/sign_in&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;2、之后在左侧导航栏中找到Search&#34;&gt;&lt;a href=&#34;#2、之后在左侧导航栏中找到Search&#34; class=&#34;headerlink&#34; title=&#34;2、之后在左侧导航栏中找到Search&#34;&gt;&lt;/a&gt;2、之后在左侧导航栏中找到Search&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/06/hexo/image-20221007104401652.png&#34; class=&#34;&#34; title=&#34;image-20221007104401652&#34;&gt;

&lt;h3 id=&#34;3、创建Index&#34;&gt;&lt;a href=&#34;#3、创建Index&#34; class=&#34;headerlink&#34; title=&#34;3、创建Index&#34;&gt;&lt;/a&gt;3、创建Index&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/06/hexo/image-20221007104429043.png&#34; class=&#34;&#34; title=&#34;image-20221007104429043&#34;&gt;

&lt;img data-src=&#34;/2022/10/06/hexo/image-20221007104449209.png&#34; class=&#34;&#34; title=&#34;image-20221007104449209&#34;&gt;

&lt;p&gt;&lt;strong&gt;随便写&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;4、创建APPID&#34;&gt;&lt;a href=&#34;#4、创建APPID&#34; class=&#34;headerlink&#34; title=&#34;4、创建APPID&#34;&gt;&lt;/a&gt;4、创建APPID&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/06/hexo/image-20221007105625601.png&#34; class=&#34;&#34; title=&#34;image-20221007105625601&#34;&gt;

&lt;img data-src=&#34;/2022/10/06/hexo/image-20221007105704120.png&#34; class=&#34;&#34; title=&#34;image-20221007105704120&#34;&gt;

&lt;p&gt;这两个后面有用&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/06/hexo/image-20221007105750168.png&#34; class=&#34;&#34; title=&#34;image-20221007105750168&#34;&gt;

&lt;blockquote&gt;
&lt;p&gt;Indices 是我们上面创建 index &lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/2022/10/06/hexo/20210516112405506.png&#34; class=&#34;&#34; title=&#34;在这里插入图片描述&#34;&gt;



&lt;h3 id=&#34;5、到博客根目录下安装hexo-algolia&#34;&gt;&lt;a href=&#34;#5、到博客根目录下安装hexo-algolia&#34; class=&#34;headerlink&#34; title=&#34;5、到博客根目录下安装hexo-algolia&#34;&gt;&lt;/a&gt;5、到博客根目录下安装hexo-algolia&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm install hexo-algolia --save
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6、前往站点根目录打开-config-yml添加以下代码&#34;&gt;&lt;a href=&#34;#6、前往站点根目录打开-config-yml添加以下代码&#34; class=&#34;headerlink&#34; title=&#34;6、前往站点根目录打开_config.yml添加以下代码&#34;&gt;&lt;/a&gt;6、前往站点根目录打开_config.yml添加以下代码&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这是对全局的配置，所以是根目录的配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;algolia:
  appId:  &amp;quot;***&amp;quot;  #上面的application ID
  apiKey:  &amp;quot;****&amp;quot;  # 上面的 Search-Only API Key
  adminApiKey:  &amp;quot;***&amp;quot;  #上面的 Admin API Keys
  chunkSize:  5000
  indexName:  &amp;quot;test001&amp;quot; # Indices的index
  fields: # 要搜索的词条范围
    - title #必须配置
    - path #必须配置
    - categories #推荐配置
    - content:strip:truncate,0,2000
    - tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;algolia:
  appId: &amp;quot;Z7A3XW4R2I&amp;quot;
  apiKey: &amp;quot;12db1ad54372045549ef465881c17e743&amp;quot;
  adminApiKey: &amp;quot;40321c7c207e7f73b63a19aa24c4761b&amp;quot;
  chunkSize: 5000
  indexName: &amp;quot;my-hexo-blog&amp;quot;
  fields:
    - content:strip:truncate,0,500
    - excerpt:strip
    - gallery
    - permalink
    - photos
    - slug
    - tags
    - title
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7、设置HEXO-ALGOLIA-INDEXING-KEY&#34;&gt;&lt;a href=&#34;#7、设置HEXO-ALGOLIA-INDEXING-KEY&#34; class=&#34;headerlink&#34; title=&#34;7、设置HEXO_ALGOLIA_INDEXING_KEY&#34;&gt;&lt;/a&gt;7、设置HEXO_ALGOLIA_INDEXING_KEY&lt;/h3&gt;&lt;p&gt;在博客根目录右击git bash&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# export HEXO_ALGOLIA_INDEXING_KEY=&amp;quot;你刚才新创建的 APPKEY、appId、adminApiKey &amp;quot;一个试一下 
export HEXO_ALGOLIA_INDEXING_KEY=&amp;quot;******&amp;quot; 
# 将我们的信息上川岛algolia
hexo algolia
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8、修改主题内的-config-yml&#34;&gt;&lt;a href=&#34;#8、修改主题内的-config-yml&#34; class=&#34;headerlink&#34; title=&#34;8、修改主题内的_config.yml&#34;&gt;&lt;/a&gt;8、修改主题内的_config.yml&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 这是是对主题的配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;#Algolia Search
algolia_search:
  enable: true
  hits:
    per_page: 6
  labels:
    input_placeholder: Search for Posts !
    hits_empty: &amp;#39;我们没有找到任何搜索结果：$&amp;#123;query&amp;#125;&amp;#39;
    hits_stats: &amp;#39;找到约$&amp;#123;hits&amp;#125;条结果 (用时$&amp;#123;time&amp;#125;ms)&amp;#39;

# local searach
local_sreach:
  enable : false
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;9、启动即可&#34;&gt;&lt;a href=&#34;#9、启动即可&#34; class=&#34;headerlink&#34; title=&#34;9、启动即可&#34;&gt;&lt;/a&gt;9、启动即可&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;hexo s
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;10、测试&#34;&gt;&lt;a href=&#34;#10、测试&#34; class=&#34;headerlink&#34; title=&#34;10、测试&#34;&gt;&lt;/a&gt;10、测试&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/06/hexo/image-20221007123724497.png&#34; class=&#34;&#34; title=&#34;image-20221007123724497&#34;&gt;

&lt;p&gt;参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTczNDA0L2FydGljbGUvZGV0YWlscy8xMjI4NjEzMjE=&#34;&gt;https://blog.csdn.net/qq_45173404/article/details/122861321&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;&lt;a href=&#34;#目录&#34; class=&#34;headerlink&#34; title=&#34;目录&#34;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;toc 插件是：添加生成文章目录的一个插件&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;一、安装(这里是hexo的路径下，也就是博客根目录下)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm install hexo-toc --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;二、配置博客根目录下的_config.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;toc:  
  maxdepth: 3 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在最后的空白处添加&lt;/p&gt;
&lt;p&gt;三、在markdown里使用&lt;/p&gt;
&lt;p&gt;在Markdown中需要显示文章目录的地方添加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;&amp;lt;!-- toc --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后就会将他&amp;#x3D;&amp;#x3D;后面&amp;#x3D;&amp;#x3D;的内容按照标题级别分层&lt;/p&gt;
&lt;h2 id=&#34;图片显示&#34;&gt;&lt;a href=&#34;#图片显示&#34; class=&#34;headerlink&#34; title=&#34;图片显示&#34;&gt;&lt;/a&gt;图片显示&lt;/h2&gt;&lt;h3 id=&#34;方法一：&#34;&gt;&lt;a href=&#34;#方法一：&#34; class=&#34;headerlink&#34; title=&#34;方法一：&#34;&gt;&lt;/a&gt;方法一：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;typroa设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开typora，选择：偏好设置 - 图像 - 插入图片时，做如下更改：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复制到指定路径&lt;/p&gt;
&lt;p&gt;.&amp;#x2F;${filename}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当插入图片时，会生成一个和文件名相同的文件夹，并将图片存入这个文件夹内。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hexo 设置&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 &lt;code&gt;hexo-renderer-marked&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm install hexo-renderer-marked --save
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;之后更改 _config.yml 配置&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;post_asset_folder: true 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装插件&lt;code&gt;hexo-image-link &lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm install hexo-image-link --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时，在typora 文件中正常显示的图片，在hexo发布后依旧能正常显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果想用插件 &lt;code&gt;Hexo-renderer-markdown-it &lt;/code&gt;（推荐）代替 &lt;code&gt;Hexo-renderer-marked &lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm uninstall hexo-renderer-marker --save  #卸载 marked 

npm install hexo-renderer-markdown-it --save  #安装markdown-it
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;路径转换的解释&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设：&lt;br&gt;文件名: .&amp;#x2F;test.md&lt;/p&gt;
&lt;p&gt;图片路径: .&amp;#x2F;test&amp;#x2F;image.jpg&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当插入图片 image.jpg 到 test.md 中时，typora 的引用路径为
 &amp;#123;% asset_img image.jpg  %&amp;#125; 

Hexo 发布后的引用路径为
![](image.jpg) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此，typora的md文件引入hexo时，应转换路径。即删掉图片路径中的 “test&amp;#x2F;“部分；（此时md文件已不能正常显示图片，而 hexo server 可正常显示）&lt;/p&gt;
&lt;p&gt;插件hexo-image-link帮助实现了这种路径转换。&lt;/p&gt;
&lt;p&gt;安装后，typora 文件中正常显示的图片，在hexo发布后依旧能正常显示。&lt;/p&gt;
&lt;h3 id=&#34;方法2：&#34;&gt;&lt;a href=&#34;#方法2：&#34; class=&#34;headerlink&#34; title=&#34;方法2：&#34;&gt;&lt;/a&gt;方法2：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;同样的思路，相对路径，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载插件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm install hexo-asset-img --save
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;文件要求：&lt;/p&gt;
&lt;p&gt;​	图片必须在 xx.md 同一级目录下的同名文件中存储，也就是在xx 文件夹下，所以md文档的图片路径就是	&amp;#x3D;&amp;#x3D;![图片注释](xx&amp;#x2F;图片名)&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;每篇文章的log设置&#34;&gt;&lt;a href=&#34;#每篇文章的log设置&#34; class=&#34;headerlink&#34; title=&#34;每篇文章的log设置&#34;&gt;&lt;/a&gt;每篇文章的log设置&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;---
***
cover: 图床链接/图片路径
---
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;主题&#34;&gt;&lt;a href=&#34;#主题&#34; class=&#34;headerlink&#34; title=&#34;主题&#34;&gt;&lt;/a&gt;主题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hdXJvcmEudHJpZGlhbW9uZC50ZWNoL3poL2d1aWRlL2dldHRpbmctc3RhcnRlZC5odG1sIyVFNCVCRSU5RCVFOCVCNSU5NiVFNyU4RSVBRiVFNSVBMiU4Mw==&#34;&gt;aurora&lt;/span&gt;    	（最推荐）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=&#34;&gt;shoka&lt;/span&gt;        （好看，但是少东西，好多要自己配）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0&#34;&gt;next&lt;/span&gt;           （中等，但是好多人用，配东西好查的一批）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2plcnJ5YzEyNy9oZXhvLXRoZW1lLWJ1dHRlcmZseQ==&#34;&gt;butterfly  &lt;/span&gt;（中等，要自己配一些）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;shoka&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm i  hexo-renderer-multi-markdown-it --save
npm i  hexo-autoprefixer --save
npm i  hexo-algoliasearch --save
npm i  hexo-symbols-count-time --save
npm i  hexo-feed --save
npm un hexo-renderer-marked --save      #删除多余的库

git clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;_config.yml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;# markdown渲染
markdown:
  render: # 渲染器设置
    html: false # 过滤 HTML 标签
    xhtmlOut: true # 使用 &amp;#39;/&amp;#39; 来闭合单标签 （比如 &amp;lt;br /&amp;gt;）。
    breaks: true # 转换段落里的 &amp;#39;\n&amp;#39; 到 &amp;lt;br&amp;gt;。
    linkify: true # 将类似 URL 的文本自动转换为链接。
    typographer: 
    quotes: &amp;#39;“”‘’&amp;#39;
  plugins: # markdown-it 插件设置
    - plugin:
        name: markdown-it-toc-and-anchor
        enable: true
        options: # 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样
          tocClassName: &amp;#39;toc&amp;#39;
          anchorClassName: &amp;#39;anchor&amp;#39;
    - plugin:
        name: markdown-it-multimd-table
        enable: true
        options:
          multiline: true
          rowspan: true
          headerless: true
    - plugin:
        name: ./markdown-it-furigana
        enable: true
        options:
          fallbackParens: &amp;quot;()&amp;quot;
    - plugin:
        name: ./markdown-it-spoiler
        enable: true
        options:
          title: &amp;quot;你知道得太多了&amp;quot;

# 压缩CSS/hTML
minify:
  html:
    enable: true
    exclude: # 排除 hexo-feed 用到的模板文件
      - &amp;#39;**/json.ejs&amp;#39;
      - &amp;#39;**/atom.ejs&amp;#39;
      - &amp;#39;**/rss.ejs&amp;#39;
  css:
    enable: true
    exclude:
      - &amp;#39;**/*.min.css&amp;#39;
  js:
    enable: true
    mangle:
      toplevel: true
    output:
    compress:
    exclude:
      - &amp;#39;**/*.min.js&amp;#39;

#css文件后缀
autoprefixer:
  exclude:
    - &amp;#39;*.min.css&amp;#39;

# 全文搜索
algolia:
  appId: #Your appId
  apiKey: #Your apiKey
  adminApiKey: #Your adminApiKey
  chunkSize: 5000
  indexName: #&amp;quot;shoka&amp;quot;
  fields:
    - title #必须配置
    - path #必须配置
    - categories #推荐配置
    - content:strip:truncate,0,2000
    - gallery
    - photos
    - tags
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;未完成&#34;&gt;&lt;a href=&#34;#未完成&#34; class=&#34;headerlink&#34; title=&#34;未完成&#34;&gt;&lt;/a&gt;未完成&lt;/h2&gt;&lt;h1 id=&#34;Netlify部署&#34;&gt;&lt;a href=&#34;#Netlify部署&#34; class=&#34;headerlink&#34; title=&#34;Netlify部署&#34;&gt;&lt;/a&gt;Netlify部署&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在github上建立一个仓库，权限无所谓
上传也只需要传编译后的public文件就行了
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmV0bGlmeS5jb20v&#34;&gt;Netlify&lt;/span&gt; 账号注册&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加新的站点&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/hexo/image-20221013222215469.png&#34; class=&#34;&#34; title=&#34;image-20221013222215469&#34;&gt;

  &lt;img data-src=&#34;/2022/10/06/hexo/oSa6BOtIQ8WkZX1.png&#34; class=&#34;&#34; title=&#34;connect-github&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选取一个仓库，作为我们的资源地址&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/hexo/image-20221013222447157.png&#34; class=&#34;&#34; title=&#34;image-20221013222447157&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一切默认，除了构建命令改成我们之前设置的&lt;code&gt;npm run netlify&lt;/code&gt; ，当然也可以不设置&lt;/p&gt;
&lt;p&gt;  前提要在&lt;code&gt;package.json&lt;/code&gt; 里面添加一个 &lt;code&gt;netlify&lt;/code&gt; 命令 ，例如我们的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;quot;scripts&amp;quot;: &amp;#123;
        &amp;quot;build&amp;quot;: &amp;quot;hexo generate&amp;quot;,
        &amp;quot;clean&amp;quot;: &amp;quot;hexo clean&amp;quot;,
        &amp;quot;deploy&amp;quot;: &amp;quot;hexo deploy&amp;quot;,
        &amp;quot;server&amp;quot;: &amp;quot;hexo server&amp;quot;,
        // 每次提交会清除内容，然后重新建立项目，不要在项目中写这个注释，报错
        &amp;quot;netlify&amp;quot;: &amp;quot;npm run clean &amp;amp;&amp;amp; npm run build&amp;quot; 
  &amp;#125;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  还要有将你的全部文件上传到github，才可以使用&lt;code&gt;npm&lt;/code&gt;&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/hexo/p3P2NJaQzuIZnYs.png&#34; class=&#34;&#34; title=&#34;site-config&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里BaseDirectory为空表示项目目录是仓库目录的根目录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;构建完成后我们就能够看到一个URL，打开网址就是我们的个人博客了&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2022/10/06/hexo/image-20221013223348730.png&#34; class=&#34;&#34; title=&#34;image-20221013223348730&#34;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改地址前缀（&lt;strong&gt;因为后缀不能改&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;  网站设置—》常规—》更改站点名，完成后缀是固定的 &lt;code&gt; *.netlify.app&lt;/code&gt; ，要想改变就要买域名，然后配置域名的映射。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置域名映射&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/hexo/image-20221013223414819.png&#34; class=&#34;&#34; title=&#34;image-20221013223414819&#34;&gt;

&lt;ul&gt;
&lt;li&gt;配置域名的前提自然是要购买域名了，从任意域名服务商处购买一个域名。&lt;/li&gt;
&lt;/ul&gt;
  &lt;img data-src=&#34;/2022/10/06/hexo/DFHYzywifpJTxqj.png&#34; class=&#34;&#34; title=&#34;domian-purchase&#34;&gt;

&lt;ul&gt;
&lt;li&gt;然后设置域名解析，类型为CNAME（DNS知识点参见计算机网络相关教程），内容为xxxxx.netlify.app，其中xxxxx为你自己设置的个性二级域名。&lt;/li&gt;
&lt;/ul&gt;
  &lt;img data-src=&#34;/2022/10/06/hexo/5OVcw9ypvRKQePJ.png&#34; class=&#34;&#34; title=&#34;domain-resolve&#34;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置完毕之后需要等待一段时间，因为DNS服务器需要一段时间来进行同步。&lt;/p&gt;
&lt;p&gt;  然后，我们还需要回到netlify中配置一下自己的用户域名，这样的话可以在国外获得netlify本身的CDN支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在netlify设置用户域名。&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/hexo/MDjxbIcWBEoLURA.png&#34; class=&#34;&#34; title=&#34;set-custom-domain&#34;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;进行相关的配置，由于我们的域名本身已经配置了解析，这里会显示出来，不用再额外添加记录，只需要一路默认即可。&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/hexo/cqwL9xF8Eov6yVa.png&#34; class=&#34;&#34; title=&#34;add-record&#34;&gt;

  &lt;img data-src=&#34;/2022/10/06/hexo/RTLcjynQYXbW9vI.png&#34; class=&#34;&#34; title=&#34;activate-dns&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置一下netlify本身的对于国外CDN的支持。&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/hexo/8v3ROjQc2WY9q7T.png&#34; class=&#34;&#34; title=&#34;netlify-cdn&#34;&gt;

&lt;p&gt;  之后，我们就可以通过自己配置的域名访问自己的个人博客。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里&lt;code&gt;https&lt;/code&gt;访问需要在&lt;code&gt;netlify&lt;/code&gt;中配置，否则应该只能&lt;code&gt;http&lt;/code&gt;访问。&lt;br&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/f3q8hPbG5vsImeY.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/f3q8hPbG5vsImeY.png&#34; class=&#34;&#34; title=&#34;https-config&#34;&gt;&lt;/a&gt;&lt;br&gt;需要注意一下的是，此刻的https配置过程中的dns验证已经可以通过，但是证书检查会失败，等到后面clouldflare加速配置完成之后，这个问题 就可以解决了。所以暂时应该只能http访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;strong&gt;但是，此刻我们的博客访问依然需要科学上网，因为我们还没有国内的CDN的支持，下面，我们来解决这个问题。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ClouldFlare加速&#34;&gt;&lt;a href=&#34;#ClouldFlare加速&#34; class=&#34;headerlink&#34; title=&#34;ClouldFlare加速&#34;&gt;&lt;/a&gt;ClouldFlare加速&lt;/h1&gt;&lt;h2 id=&#34;介绍-1&#34;&gt;&lt;a href=&#34;#介绍-1&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Netlify 虽然已经提供了 CDN 加速，但在使用过程中发现国内访问还是比较慢，Cloudflare 相对于国内的七牛云、阿里云等云服务商的 CDN 速度会慢一些，但是它有免费版本，而且最重要的是域名不用备案。&lt;/p&gt;
&lt;h2 id=&#34;加速步骤&#34;&gt;&lt;a href=&#34;#加速步骤&#34; class=&#34;headerlink&#34; title=&#34;加速步骤&#34;&gt;&lt;/a&gt;加速步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注册&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vemgtY24v&#34;&gt;Clouldflare&lt;/span&gt;并登陆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加站点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/rqNObP5dzE6GY83.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/rqNObP5dzE6GY83.png&#34; class=&#34;&#34; title=&#34;add-site&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/Dk3Y4BrltQeCOHI.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/Dk3Y4BrltQeCOHI.png&#34; class=&#34;&#34; title=&#34;config-site&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择免费套餐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/SrhEAvmGZeqn8Co.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/SrhEAvmGZeqn8Co.png&#34; class=&#34;&#34; title=&#34;choose-project&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加 DNS 记录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般情况下 Cloudflare 会检测出来几条 DNS 记录，类型大多数是A，或者AAAA，由于我们是转发，所以应该是 CNAME 类型才对。有必要的话可能得手动配置一下。&lt;/p&gt;
&lt;p&gt;  &lt;a href=&#34;https://s2.loli.net/2022/09/05/fSsAGV5JCeZuF1w.png&#34;&gt;&lt;br&gt;  &lt;img data-src=&#34;/2022/10/06/hexo/fSsAGV5JCeZuF1w.png&#34; class=&#34;&#34; title=&#34;update-record&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更改名称服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个步骤Cloudflare会提供一个在线的教程，主要步骤是在你的域名服务商那里修改 dns 解析服务器为 cloudflare 提供的地址，修改完成后点击完成。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/vd2WxXGbJHmgAey.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/vd2WxXGbJHmgAey.png&#34; class=&#34;&#34; title=&#34;modify-server&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以阿里云为例，设置的步骤如下:&lt;ol&gt;
&lt;li&gt;进入域名的配置界面&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/ZfLiNUejRsCyhG3.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/ZfLiNUejRsCyhG3.png&#34; class=&#34;&#34; title=&#34;dns-manage&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将域名服务器从阿里云的默认服务器改成clouldflare的服务器&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/juxWl7i9QaeLTGK.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/juxWl7i9QaeLTGK.png&#34; class=&#34;&#34; title=&#34;change-server&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;配置完成后，clouldflare会有邮件通知(一般不会等太久)&lt;br&gt;  &lt;a href=&#34;https://s2.loli.net/2022/09/05/JbBvp18Trne37kC.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/JbBvp18Trne37kC.png&#34; class=&#34;&#34; title=&#34;mail-notice&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置https&#34;&gt;&lt;a href=&#34;#配置https&#34; class=&#34;headerlink&#34; title=&#34;配置https&#34;&gt;&lt;/a&gt;配置https&lt;/h2&gt;&lt;p&gt; 在clouldflare配置完成之后，我们可以回到netlify去配置一下https访问。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先确认一下dns解析&lt;/li&gt;
&lt;li&gt;:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/r6iHKWLktnRap1j.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/r6iHKWLktnRap1j.png&#34; class=&#34;&#34; title=&#34;verify-dns&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然后自动安装证书:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/KvDupBFh8b9CScN.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/KvDupBFh8b9CScN.png&#34; class=&#34;&#34; title=&#34;certify&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后看到如下的界面，就说明https配置完成了&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/f3q8hPbG5vsImeY.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/f3q8hPbG5vsImeY.png&#34; class=&#34;&#34; title=&#34;https-config&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;测试站点&#34;&gt;&lt;a href=&#34;#测试站点&#34; class=&#34;headerlink&#34; title=&#34;测试站点&#34;&gt;&lt;/a&gt;测试站点&lt;/h1&gt;&lt;p&gt; 等待一段时间之后，我们可以试着用自己的浏览器去访问自己配置的域名地址，如果在不科学上网的情况下能够正常看到如下的默认页面，则我们的个人博客就配置成功了。&lt;/p&gt;
&lt;p&gt; &lt;a href=&#34;https://s2.loli.net/2022/09/05/HESMpeXbUFT3rsR.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/HESMpeXbUFT3rsR.png&#34; class=&#34;&#34; title=&#34;default-page&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 本机能够正常访问之后，我们可以用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYm9jZS5jb20v&#34;&gt;拨测&lt;/span&gt;来检测一下域名解析与访问的速度。&lt;/p&gt;
&lt;p&gt; &lt;a href=&#34;https://s2.loli.net/2022/09/05/7C496Ruof1rBknM.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/hexo/7C496Ruof1rBknM.png&#34; class=&#34;&#34; title=&#34;speed&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 到此为止，我们的个人博客就彻底搭建完成啦。后续我们只需要修改博客的配置文件和博客本身的markdown源文件，然后push到github上，netlify会自动帮我们运行当初配置的建站脚本，然后将生成在public文件夹中的静态网页部署出去。&lt;/p&gt;
&lt;p&gt; 关于hexo博客的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvd3JpdGluZw==&#34;&gt;写作方法&lt;/span&gt;与各种好看的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=&#34;&gt;主题的配置&lt;/span&gt;可以查看官方的文档，多尝试多摸索，配置自己的个性页面吧。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="博客" />
        <category term="框架" />
        <updated>2022-10-06T06:50:57.000Z</updated>
    </entry>
</feed>
