{
    "version": "https://jsonfeed.org/version/1",
    "title": "每天进步一点点，就是成功的开始",
    "subtitle": "",
    "icon": "https://eth168.top/images/favicon.ico",
    "description": "花非花，雾非雾",
    "home_page_url": "https://eth168.top",
    "items": [
        {
            "id": "https://eth168.top/tools/MobaXterm/",
            "url": "https://eth168.top/tools/MobaXterm/",
            "title": "mobaxerm",
            "date_published": "2023-07-22T15:02:29.000Z",
            "content_html": "<img data-src=\"/tools/MobaXterm/87e694d6f3fb4e70a2e9a7ae839ab68a.png\" class=\"\">\n<p>中文版下载地址：<span class=\"exturl\" data-url=\"aHR0cDovL21vYmF4dGVybS5pbmZvL3NvZnQvTW9iYVh0ZXJtJUU0JUI4JUFEJUU2JTk2JTg3JUU3JTg5JTg4LnppcA==\">http://mobaxterm.info/soft/MobaXterm 中文版.zip</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1Nb2JhWHRlcm0mYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">MobaXterm</span> 又名 MobaXVT，是一款增强型终端、X 服务器和 Unix 命令集（GNU/ Cygwin）工具箱。可以开启多个终端视窗，以最新的 X 服务器为基础的 <span class=\"exturl\" data-url=\"aHR0cDovL1guT3Jn\">X.Org</span>，可以轻松地来试用 Unix/Linux 上的 GNU Unix 命令。这样一来，我们可以不用安装虚拟机来试用虚拟环境，然后只要通过 MobaXterm 就可以使用大多数的 linux 命令。MobaXterm 还有很强的扩展能力，可以集成插件来运行 Emacs、Fontforge、Gcc, G++ and development tools、MPlayer、Perl、Curl、Corkscrew、 Tcl / Tk / Expect、 Screen、 Png2Ico 、 NEdit  Midnight Commander 等程序。</p>\n<p>MobaXterm 分免费开源版和收费专业版。</p>\n<ul>\n<li>免费开源版：免费开源版又分便捷版（解压即用）和安装版（需要一步步安装）。免费版在终端底部还多了一个 &quot;UNREGISTERED VERSION&quot; 提示。</li>\n<li>专业版（Professional）：专业版会在 sessions 数、SSH tunnels 数和其他一些定制化配置进行限制。</li>\n</ul>\n<p>PuTTY 足够成熟、小巧、专注核心任务，支持设置编码，键盘映射，通过 plink 做 ssh 隧道，通过 pscp 实现 scp 文件传输，通过 psftp 做 sftp 客户端，通过 puttygen 生成和管理 ssh 证书。可以说 putty 虽然小，但是功能一个也没落下，麻雀虽小，五脏俱全。但是 Putty 没有多服务管理和标签页切换等的功能。</p>\n<h1 id=\"1-主要功能\"><a class=\"anchor\" href=\"#1-主要功能\">#</a> 1、主要功能</h1>\n<p>支持各种连接 SSH，X11，RDP，VNC，FTP，MOSH<br />\n 支持 Unix 命令（bash，ls，cat，sed，grep，awk，rsync，…）<br />\n连接 SSH 终端后支持 SFTP 传输文件<br />\n各种丰富的插件（git/dig/aria2…）<br />\n可运行 Windows 或软件</p>\n<ul>\n<li>1. 会话管理 ：MobaXterm 允许您启动远程会话。您可以选择创建 SSH，远程登录，Rlogin 的，RDP，VNC，XDMCP，FTP，SFTP 或串行会话。你开始每个会话会自动保存，并在左侧边栏显示。</li>\n<li>2. 图形化 SFTP 浏览器 ：当您登录到使用 SSH 远程服务器，图形 SFTP 浏览器弹出在左侧边栏。它可以让你拖动并直接从 / 到远程服务器使用安全 SFTP 连接拖放文件。</li>\n<li>3.X11 服务器 ：当您运行 SSH，TELNET 或 RLOGIN/RSH 会话。你将能够直接在本地 WindowsPC 上显示您的远程应用程序。在一个 SSH 会话，也没有<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3IxNzMuY29tL2svYml5YW8vP2xvZ2luPWZyb21fY3Nkbg==\">必要</span>为 MobaXterm 使用 X11 转发。以缓解并保护您的工作设置 “DISPLAY” 变量。</li>\n<li>4. 增强 X 扩展 ：基于 X.org 嵌入式 X 服务器提供了最近的 X 服务器的实现提供最新的功能：扩展功能，如 OpenGL 的，复合或 RANDR 都包括在内。还支持 XDMCP 协议。</li>\n<li>5. 多执行 ：编写一次，到处运行：这个工具可以让你在同一时间运行在许多不同的服务器相同的命令。</li>\n<li>6. 嵌入式服务器 ：MobaXterm 可以启动网络守护程序进行远程访问。无需额外的工具或运行时需要的，以便使用这些守护程序。</li>\n<li>7. 嵌入式工具 ：MobaXterm 带来了一些有用的工具，系统管理员，developpers，网站管理员。谁需要用计算机高效工作的所有用户。</li>\n<li>8. 远程 UNIX 的桌面（XDMCP）：由于 MobaXterm 您可以将远程 Solaris 桌面上工作。因为如果你是在本地 Windows 计算机上使用 XDMCP 协议工作。</li>\n<li>9. 远程 Windows 桌面（RDP） ： 利用远程 Windows 计算机 / 使用 RDP 协议的服务器控制。许多 RDP 配置设置在会话管理器可用。</li>\n<li>10.SSH 网关 ：在 SSH，TELNET，RDP，VNC 会话，您可以选择 “SSH - 网关”（又名 “跳跃主机”）。以告诉 MobaXterm 先连接到 SSH 服务器连接到终端服务器之前要达到结束。这让你达到一个防火墙后面的一些服务器，并保护您的连接。</li>\n<li>11.SSH 隧道（端口转发） ：图形 SSH 隧道管理器允许您使用直观的图形化的工具来创建你的 SSH 隧道。</li>\n<li>12.MobApt 包管理器 ：MobaXterm 包管理器（MobApt/apt-get 的）。可以下载和使用更多的 Unix 工具直接进入 MobaXterm 终端。MobApt 包管理器（apt-get 的）</li>\n<li>13. 文本编辑器 ：当您使用 SSH 连接到远程服务器上。您将可以直接使用嵌入式文本编辑器 “MobaTextEditor” 编辑远程文件。</li>\n<li>只需双击他们！通过 SSH/SFTP 直版</li>\n<li>14. 宏支持 ：您可以记录在 MobaXterm 终端宏：一切你在终端类型将被记录。以便在以后重播其他服务器上。</li>\n<li>15. 密码管理 ： MobaXterm 就是能救你的会话密码，并让他们安全使用 “主密码”。</li>\n<li>16. 专业定制 ：MobaXterm 专业版，您可以访问专业支持，并以 “定制” 的软件。这个程序可以生成 MobaXterm 的定制副本用自己的徽标和默认设置。</li>\n</ul>\n<h2 id=\"多终端-分屏\"><a class=\"anchor\" href=\"#多终端-分屏\">#</a> <strong>多终端 分屏</strong></h2>\n<p>MobaXterm 内置多标签页、横向纵向 2 分屏和田字形 4 分屏，用于一个窗口内管理多个连接。管理多台服务器不必开多个窗口。</p>\n<img data-src=\"/tools/MobaXterm/a75a17982bbe4157a00bb0c5696f06f4.png\" class=\"\">\n<h2 id=\"多窗口同时执行相同命令\"><a class=\"anchor\" href=\"#多窗口同时执行相同命令\">#</a> 多窗口同时执行相同命令</h2>\n<p>编写一次，到处执行：该工具允许您同时在许多不同的服务器上执行相同的命令。</p>\n<img data-src=\"/tools/MobaXterm/30496d10fd334e09a86366057cf708ba.png\" class=\"\">\n<h2 id=\"内建-sftp-文件传输\"><a class=\"anchor\" href=\"#内建-sftp-文件传输\">#</a> 内建 SFTP 文件传输</h2>\n<p>如果用 SSH 连接远程主机，则左侧就会自动启动 SFTP 连接，列出服务器上的文件列表，无需任何配置。可以直接上传下载，更方便的是，还可以让文件列表的当前目录，直接跟随终端当前目录同步切换！</p>\n<p><strong>关闭自动弹出 SFTP</strong>：Moba 在连接上远程电脑之后，将自动打开左侧的 SFTP 侧边栏。有时我们并不需要 SFTP，同时主窗口是黑色的，SFTP 又是白色的，显得有点刺眼，因此可以将自动弹出 SFTP 功能关闭掉。在菜单栏点击 「settings」 --&gt; 「Configuration」，在弹出的对话框中选择 「SSH」，再将 「automaticall switch to SSH-browser tab after login」 前面的对勾去掉即可。</p>\n<p><img data-src=\"/tools/MobaXterm/887ad8833e3645428b9c2b61d10b9275.png\" class=\"\"></p>\n<h2 id=\"会话管理-sshtelnetrshxdmcprdpvncftpsftp-等\"><a class=\"anchor\" href=\"#会话管理-sshtelnetrshxdmcprdpvncftpsftp-等\">#</a> 会话管理 (SSH/Telnet/Rsh/Xdmcp/RDP/VNC/FTP/SFTP 等 )</h2>\n<img data-src=\"/tools/MobaXterm/a9118a62021e46da964709e2ce4c514d.png\" class=\"\">\n<p>MobaXterm 允许您启动远程会话。 您可以选择创建 SSH、Telnet、Rlogin、RDP、VNC、XDMCP、FTP、SFTP 或串行会话。 您开始的每个会话都会自动保存并显示在左侧边栏中。</p>\n<p>可以看到 MobaXterm 支持完整的远程桌面。Windows 服务器管理员特别推荐。</p>\n<p>打开软件后，点击左上角的 会话（会话控制），在弹出的窗口中选择 SSH：</p>\n<img data-src=\"/tools/MobaXterm/0f615bb37161473ea9f42aa56f428700.png\" class=\"\">\n<h3 id=\"windows-远程桌面-rdp\"><a class=\"anchor\" href=\"#windows-远程桌面-rdp\">#</a> windows 远程桌面 (RDP)</h3>\n<p>使用 RDP 协议控制远程 Windows 计算机 / 服务器。在会话管理器中可以使用许多 RDP 配置设置。</p>\n<img data-src=\"/tools/MobaXterm/173da950e00548ba993158203e42024f.png\" class=\"\">\n<p>更加友好的串口连接设置。MobaXterm 不仅支持串口连接，并且直接提供下拉框选择串口号和波特率，选择串口号时还会自动显示串口设备的名称。这一点对于开源硬件玩家是相当幸福的。</p>\n<img data-src=\"/tools/MobaXterm/02655708e853425c85ff862300eab23b.png\" class=\"\">\n<h3 id=\"linux-远程桌面-xdmcp\"><a class=\"anchor\" href=\"#linux-远程桌面-xdmcp\">#</a> linux 远程桌面 (XDMCP)</h3>\n<p>通过 MobaXterm 您可以在远程 Solaris 桌面上工作，就像使用 XDMCP 协议在 Windows 计算机上本地工作一样。</p>\n<img data-src=\"/tools/MobaXterm/2a283d0429254cb8ad10cfe47ad32735.png\" class=\"\">\n<h2 id=\"ssh-gateway-跳转主机\"><a class=\"anchor\" href=\"#ssh-gateway-跳转主机\">#</a> SSH gateway ( 跳转主机)</h2>\n<p>在 ssh, telnet, RDP, VNC 会话中，您可以选择一个 “ssh -gateway”(又称 “ssh -gateway”)。“跳转主机”)，以便告诉 MobaXterm 首先连接到 SSH 服务器，然后再连接到您最终想要到达的端服务器。这允许您访问防火墙后的一些服务器，并保护您的连接。</p>\n<img data-src=\"/tools/MobaXterm/87384a124c604b9597adb03378771db2.png\" class=\"\">\n<img data-src=\"/tools/MobaXterm/d93315ee953a4d6c85cacd0c0e8bc22f.png\" class=\"\">\n<h2 id=\"ssh-隧道-端口转发\"><a class=\"anchor\" href=\"#ssh-隧道-端口转发\">#</a> SSH 隧道 (端口转发)</h2>\n<p>图形化 SSH 隧道管理器允许您使用直观的图形化工具创建 SSH 隧道。</p>\n<img data-src=\"/tools/MobaXterm/1625eb720e964e93b59a327811cf8bd6.png\" class=\"\">\n<h2 id=\"mobapt-包管理器\"><a class=\"anchor\" href=\"#mobapt-包管理器\">#</a> MobApt 包管理器</h2>\n<p>MobaXterm 包管理器 (MobApt /apt-get) 允许您直接下载和使用更多 Unix 工具到 MobaXterm 终端。</p>\n<img data-src=\"/tools/MobaXterm/bd865f1ec14f4e7e9d409028723a83de.png\" class=\"\">\n<h2 id=\"密码-管理\"><a class=\"anchor\" href=\"#密码-管理\">#</a> 密码 管理</h2>\n<p>MobaXterm 能够保存您的会话密码，并通过使用 “主密码” 来保持它们的安全。</p>\n<img data-src=\"/tools/MobaXterm/d865bed401194d7ca50284e0c6f57a5c.png\" class=\"\">\n<h2 id=\"在终端语法高亮显示\"><a class=\"anchor\" href=\"#在终端语法高亮显示\">#</a> 在终端语法高亮显示</h2>\n<p>MobaXterm 嵌入式终端可以突出显示语法或为关键字使用颜色，即使您连接到不支持颜色的远程服务器。这在分析日志文件、编辑代码或试图检测重要关键字时尤其有用。您甚至可以轻松地构建自己的语法定义。</p>\n<img data-src=\"/tools/MobaXterm/77ef1a0c4d214830a6712d375b866b30.png\" class=\"\">\n<h1 id=\"2-常用设置\"><a class=\"anchor\" href=\"#2-常用设置\">#</a> 2、常用设置</h1>\n<p><strong>注意：任何配置修改后都需要重启下 MobaXterm，否则不会生效。</strong></p>\n<h2 id=\"取消自动关闭连接\"><a class=\"anchor\" href=\"#取消自动关闭连接\">#</a> 取消自动关闭连接</h2>\n<p>MobaXterm 使用 ssh 直接连接远程主机，或者通过跳板机登陆远程服务器可能会出现一段时候不操作就会自动关闭连接。要解决这个过一会就断开连接的问题，我们需要在勾选 Setting 下的 SSH Keepalive 选项。</p>\n<img data-src=\"/tools/MobaXterm/3b23a55b7afb4d8499defadbcee115df.png\" class=\"\">\n<h2 id=\"右键快速复制粘贴\"><a class=\"anchor\" href=\"#右键快速复制粘贴\">#</a> 右键快速复制粘贴</h2>\n<p>在 Moba 及很多终端工具里，都有这样的功能：鼠标左键划选复制文件，右键粘贴文本。但在 Moba 中右键粘贴功能默认不打开，我们可以手动打开。</p>\n<img data-src=\"/tools/MobaXterm/66d5f727fa9c4ac0b6d7952dd5e4fdce.png\" class=\"\">\n<h2 id=\"使用-windows-环境变量\"><a class=\"anchor\" href=\"#使用-windows-环境变量\">#</a> 使用 Windows 环境变量</h2>\n<p>如果您 Windows 下安装了 node、Python 等环境，发现相关命令无法在 MobaXterm 使用，打开 Settings – Configuration – Terminal – 使用 Windows 环境变量，如下截图。</p>\n<img data-src=\"/tools/MobaXterm/fa1e1c8cfc84409db9f90e3d7d8118b7.png\" class=\"\">\n<h2 id=\"导出导入当先配置\"><a class=\"anchor\" href=\"#导出导入当先配置\">#</a> 导出 / 导入当先配置</h2>\n<h3 id=\"导出\"><a class=\"anchor\" href=\"#导出\">#</a> 导出</h3>\n<img data-src=\"/tools/MobaXterm/image-20230722224913345.png\" class=\"\" title=\"image-20230722224913345\">\n<p>这样就回自动导出配置文件，是在安装目录同目录下的一个压缩文件</p>\n<h3 id=\"导入\"><a class=\"anchor\" href=\"#导入\">#</a> 导入</h3>\n<img data-src=\"/tools/MobaXterm/image-20230722225250349.png\" class=\"\" title=\"image-20230722225250349\">\n<h3 id=\"补充\"><a class=\"anchor\" href=\"#补充\">#</a> 补充</h3>\n<img data-src=\"/tools/MobaXterm/image-20230722225242501.png\" class=\"\" title=\"image-20230722225242501\">\n<img data-src=\"/tools/MobaXterm/image-20230722225423840.png\" class=\"\" title=\"image-20230722225423840\">\n<h1 id=\"3-我习惯的快捷键\"><a class=\"anchor\" href=\"#3-我习惯的快捷键\">#</a> 3、我习惯的快捷键</h1>\n<img data-src=\"/tools/MobaXterm/image-20230722225641315.png\" class=\"\" title=\"image-20230722225641315\">\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "工具软件安装",
                "工具软件安装 - Terminal"
            ]
        },
        {
            "id": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Problem/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E9%A1%BA%E5%BA%8F/",
            "url": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Problem/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%8A%A0%E8%BD%BD%E9%85%8D%E7%BD%AE%E9%A1%BA%E5%BA%8F/",
            "title": "微服务加载配置顺序",
            "date_published": "2023-07-10T14:43:56.000Z",
            "content_html": "<h1 id=\"过程\"><a class=\"anchor\" href=\"#过程\">#</a> 过程</h1>\n<p>在 springboot 项目中，我们有 bootstrap.yml 以及 application.yml 还有在 nacos 上的 application.yml 我们部分的配置需要去读 nacos 上的配置，所以基于这三个配置文件我们在项目启动的过程中读取的流程是什么，当相同的配置出现后哪一个配置文件中的配置会最终生效</p>\n<p>在 Spring Boot 项目中，有多个配置文件可以用于配置应用程序，包括 bootstrap.yml、application.yml 以及在 Nacos 上的 application.yml。下面是在项目启动过程中读取配置的流程：</p>\n<ol>\n<li>首先，Spring Boot 会读取 bootstrap.yml 文件中的配置。这个文件通常用于配置应用程序的基础设置，如连接到配置服务器的配置信息。它被用于引导应用程序的上下文。</li>\n<li>接下来，Spring Boot 会读取 application.yml 文件中的配置。这个文件包含了应用程序的核心配置，如数据库连接、日志级别等。这些配置将覆盖 bootstrap.yml 中的相同配置。</li>\n<li>如果配置了 Nacos 作为配置中心，Spring Boot 会尝试从 Nacos 服务器上读取与应用程序相关的配置。它会根据在 bootstrap.yml 或 application.yml 中配置的相关信息，连接到 Nacos 服务器，并获取相应的配置。</li>\n<li>如果有相同的配置在多个配置文件中都定义了，以及优先级的选择是：Nacos 上的 application.yml &gt; application.yml &gt; bootstrap.yml。也就是说，Nacos 上的配置优先级最高，其次是 application.yml，最后是 bootstrap.yml。如果在高优先级的配置中找不到某个配置项，就会继续向低优先级配置文件中查找。</li>\n</ol>\n<p>总结起来，配置的优先级是根据配置文件的读取顺序来确定的：Nacos 上的 application.yml &gt; application.yml &gt; bootstrap.yml。</p>\n\n<p>那如果在优先级高的配置文件中找到了相对应的配置还会向下继续读取吗？最终导致配置覆盖的问题</p>\n<p>如果在优先级高的配置文件中找到了相应的配置，Spring Boot 不会继续向下查找低优先级的配置文件。这意味着高优先级的配置文件中的配置会覆盖低优先级配置文件中的相同配置。</p>\n<p>例如，如果在 Nacos 上的 application.yml 中定义了一个配置项，并且该配置项在 application.yml 和 bootstrap.yml 中也存在，那么 Nacos 上的配置将覆盖 application.yml 和 bootstrap.yml 中的相同配置。</p>\n<p>因此，需要注意在不同的配置文件中避免定义相同的配置项，以免出现配置覆盖的问题。如果需要使用不同的配置值，建议在不同的配置文件中使用不同的配置项名称，或者通过条件属性来区分不同的配置文件。</p>\n<h1 id=\"结论待定\"><a class=\"anchor\" href=\"#结论待定\">#</a> 结论（待定）</h1>\n<p>spring cloud alibaba</p>\n<blockquote>\n<p>bootstrap.yml &gt; nacos-*.yml &gt; application.yml</p>\n</blockquote>\n<p>解释：</p>\n<p>我们配置配置中心就是为了实现服务的动态配置，避免重复的写配置文件，所以我们在所有服务通用的情况下我们一旦配置了配置中心，我们仅仅需要再 <code>bootstrap</code>  中告诉他 nacos 的地址，这个时候那就会根据 <strong>配置中心的命名规则</strong> 找到对应的配置文件 从而加载配置。</p>\n<p>有趣的是，我们一旦配置了配置中心，我们<strong>读取配置一旦读到即可返回，不在寻找</strong> ，也就意味着 nacos 中的配置一旦获取，application.yml 就没啥用了</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "微服务",
                "spring-cloud-alibaba",
                "nacos"
            ]
        },
        {
            "id": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Problem/%E5%85%B3%E4%BA%8E%E5%85%B3%E4%BA%8ENacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E9%85%8D%E7%BD%AE/",
            "url": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Problem/%E5%85%B3%E4%BA%8E%E5%85%B3%E4%BA%8ENacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E9%85%8D%E7%BD%AE/",
            "title": "关于关于Nacos配置中心的配置",
            "date_published": "2023-07-10T13:58:56.000Z",
            "content_html": "<h1 id=\"一-共享配置shared-configs和扩展配extension-config\"><a class=\"anchor\" href=\"#一-共享配置shared-configs和扩展配extension-config\">#</a> 一、共享配置 (shared-configs) 和扩展配 (extension-config)</h1>\n<p>日常开发中，多个模块可能会有很多共用的配置，比如数据库连接信息，Redis 连接信息，RabbitMQ 连接信息，监控配置等等。那么此时，我们就希望可以加载多个配置，多个项目共享同一个配置之类等功能，Nacos Config 也确实支持。</p>\n<ul>\n<li>Nacos 在配置路径 <code>spring.cloud.nacos.config.extension-config</code>  下，允许我们指定⼀个或多个额外配置。</li>\n<li>Nacos 在配置路径 <code>spring.cloud.nacos.config.shared-configs</code>  下，允许我们指定⼀个或多个共享配置。</li>\n</ul>\n<p>上述两类配置都⽀持三个属性： <code>data-id</code> 、 <code>group</code>  (默认为字符串 <code>DEFAULT_GROUP</code> )、 <code>refresh</code>  (默认为 <code>true</code> )。</p>\n<h2 id=\"11-版本说明\"><a class=\"anchor\" href=\"#11-版本说明\">#</a> 1.1 版本说明</h2>\n<ul>\n<li>Nacos：2.0.0</li>\n<li>spring-cloud.version：Hoxton.SR9</li>\n<li>spring-boot.version：2.3.6.RELEASE</li>\n<li>alibaba.cloud.version：2.2.3.RELEASE</li>\n</ul>\n<h2 id=\"12-maven依赖\"><a class=\"anchor\" href=\"#12-maven依赖\">#</a> 1.2 maven 依赖</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-config<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.3.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"13-配置文件将application改成bootstrap\"><a class=\"anchor\" href=\"#13-配置文件将application改成bootstrap\">#</a> 1.3 配置文件将 application 改成 bootstrap</h2>\n<p>application.yml 作用域在于当前应用有效，bootstrap.yml 系统级别的配置有效（一般采用远程配置的时候才会用到）。</p>\n<p>因此，将项目中原来的 application.yml、application-dev.yml 对应改成 bootstrap.yml、bootstrap-dev.yml 。</p>\n<h1 id=\"二-配置实例\"><a class=\"anchor\" href=\"#二-配置实例\">#</a> 二、配置实例</h1>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>config<span class=\"token punctuation\">-</span>multi</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">main</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">allow-bean-definition-overriding</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.username<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.password<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.server<span class=\"token punctuation\">-</span>addr<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>nacos.namespace<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\"># 用于共享的配置文件</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token key atrule\">shared-configs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> common<span class=\"token punctuation\">-</span>mysql.yaml</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> SPRING_CLOUD_EXAMPLE_GROUP</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> common<span class=\"token punctuation\">-</span>redis.yaml</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> SPRING_CLOUD_EXAMPLE_GROUP</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> common<span class=\"token punctuation\">-</span>base.yaml</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> SPRING_CLOUD_EXAMPLE_GROUP</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\"># 常规配置文件</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\"># 优先级大于 shared-configs，在 shared-configs 之后加载</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token key atrule\">extension-configs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>config<span class=\"token punctuation\">-</span>advanced.yaml</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> SPRING_CLOUD_EXAMPLE_GROUP</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token key atrule\">refresh</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>config<span class=\"token punctuation\">-</span>base.yaml</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> SPRING_CLOUD_EXAMPLE_GROUP</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token key atrule\">refresh</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><p>参数解析：</p>\n<ul>\n<li>data-id : Data Id</li>\n<li>group：自定义 Data Id 所在的组，不明确配置的话，默认是 DEFAULT_GROUP。</li>\n<li>refresh: 控制该 Data Id 在配置变更时，是否支持应用中可动态刷新， 感知到最新的配置值。默认是不支持的。</li>\n</ul>\n<p>注意：这里的 <code>Data ID</code>  后面是加 <code>.yaml</code>  后缀的，且不需要指定 <code>file-extension</code> 。</p>\n<h1 id=\"三-共享配置和扩展配置的区\"><a class=\"anchor\" href=\"#三-共享配置和扩展配置的区\">#</a> 三、共享配置和扩展配置的区</h1>\n<p>实际上，Nacos 中并未对 <code>extension-configs</code>  和 <code>shared-configs</code>  的差别进⾏详细阐述。我们从他们的结构，看不出本质差别；除了优先级不同以外，也没有其他差别。那么，Nacos 项⽬组为什么要引⼊两个类似的配置呢？我们可以从当初该功能的需求（issue）上找到其原始⽬的。</p>\n<h2 id=\"31-nacos对配置的默认理念\"><a class=\"anchor\" href=\"#31-nacos对配置的默认理念\">#</a> 3.1 Nacos 对配置的默认理念</h2>\n<ul>\n<li><code>namespace</code>  区分环境：开发环境、测试环境、预发布环境、⽣产环境。</li>\n<li><code>group</code>  区分不同应⽤：同⼀个环境内，不同应⽤的配置，通过 <code>group</code>  来区分。</li>\n</ul>\n<h2 id=\"32-主配置是应用专有的配置\"><a class=\"anchor\" href=\"#32-主配置是应用专有的配置\">#</a> 3.2 主配置是应⽤专有的配置</h2>\n<p>因此，主配置应当在 <code>dataId</code>  上要区分，同时最好还要有 <code>group</code>  的区分，因为 <code>group</code>  区分应⽤（虽然 <code>dataId</code>  上区分了，不⽤设置 <code>group</code>  也能按应⽤单独加载）。</p>\n<h2 id=\"33-要在各应用之间共享一个配置请使用上面的-shared-configs\"><a class=\"anchor\" href=\"#33-要在各应用之间共享一个配置请使用上面的-shared-configs\">#</a> 3.3 要在各应⽤之间共享⼀个配置，请使⽤上⾯的 shared-configs</h2>\n<p>因此按该理念， <code>shared-configs</code>  指定的配置，本来应该是不指定 <code>group</code>  的，也就是应当归⼊ <code>DEFAULT_GROUP</code>  这个公共分组。</p>\n<h2 id=\"34-如果要在特定范围内比如某个应用上覆盖某个共享dataid上的特定属性请使用-extension-config\"><a class=\"anchor\" href=\"#34-如果要在特定范围内比如某个应用上覆盖某个共享dataid上的特定属性请使用-extension-config\">#</a> 3.4 如果要在特定范围内（⽐如某个应⽤上）覆盖某个共享 dataId 上的特定属性，请使⽤ extension-config</h2>\n<p>⽐如，其他应⽤的数据库 url，都是⼀个固定的 url，使⽤ <code>shared-configs.dataId = mysql</code>  的共享配置。但其中有⼀个应⽤ <code>ddd-demo</code>  是特例，需要为该应⽤配置扩展属性来覆盖。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ddd<span class=\"token punctuation\">-</span>demo<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>2.nacos<span class=\"token punctuation\">-</span>headless.public.svc.cluster.local<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> ygjpro<span class=\"token punctuation\">-</span>test2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> ddd<span class=\"token punctuation\">-</span>demo</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">...</span><span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       shared<span class=\"token punctuation\">-</span>configs<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> mysql.yaml</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token key atrule\">refresh</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token punctuation\">...</span><span class=\"token punctuation\">...</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       extension<span class=\"token punctuation\">-</span>configs<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token key atrule\">data-id</span><span class=\"token punctuation\">:</span> mysql.yaml</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>         <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> ddd<span class=\"token punctuation\">-</span>demo</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token key atrule\">refresh</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><h2 id=\"35-关于优先级\"><a class=\"anchor\" href=\"#35-关于优先级\">#</a> 3.5 关于优先级</h2>\n<p>1、上述两类配置都是数组，对同种配置，数组元素对应的下标越⼤，优先级越⾼。也就是排在后⾯的相同配置，将覆盖排在前⾯的同名配置。</p>\n<ul>\n<li>同为扩展配置，存在如下优先级关系： <code>extension-configs[3] &gt; extension-configs[2] &gt; extension-configs[1] &gt; extension-configs[0</code> 。</li>\n<li>同为共享配置，存在如下优先级关系： <code>shared-configs[3] &gt; shared-configs[2] &gt; shared-configs[1] &gt; shared-configs[0]</code> 。</li>\n</ul>\n<p>2、不同种类配置之间，优先级按顺序如下：主配置 &gt; 扩展配置 (extension-configs) &gt; 共享配置 (shared-configs)</p>\n<p>作者：AC 编程<br />\n链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84NzE1MDcyZDNmNGM=\">https://www.jianshu.com/p/8715072d3f4c</span><br />\n 来源：简书<br />\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "微服务",
                "spring-cloud-alibaba",
                "nacos"
            ]
        },
        {
            "id": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Seata%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "url": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Seata%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "title": "Seata系统学习",
            "date_published": "2023-07-10T13:56:23.000Z",
            "content_html": "<h1 id=\"分布式事务简介\"><a class=\"anchor\" href=\"#分布式事务简介\">#</a> 分布式事务简介</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>基础概念：事务 ACID</p>\n<ul>\n<li>A（Atomic）：原子性，构成事务的所有操作，要么都执行完成，要么全部不执行，不可能出现部分成功部分失 败的情况。</li>\n<li>C（Consistency）：一致性，在事务执行前后，数据库的一致性约束没有被破坏。比如：张三向李四转 100 元， 转账前和转账后的数据是正确状态这叫一致性，如果出现张三转出 100 元，李四账户没有增加 100 元这就出现了数 据错误，就没有达到一致性。</li>\n<li>I（Isolation）：隔离性，数据库中的事务一般都是并发的，隔离性是指并发的两个事务的执行互不干扰，一个事 务不能看到其他事务运行过程的中间状态。通过配置事务隔离级别可以避脏读、重复读等问题。</li>\n<li>D（Durability）：持久性，事务完成之后，该事务对数据的更改会被持久化到数据库，且不会被回滚。</li>\n</ul>\n<h3 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h3>\n<ul>\n<li>本地事务：同一数据库和服务器，称为本地事务<br />\n在计算机系统中，更多的是通过关系型数据库来控制事务，这是利用数据库本身的事务特性来实现的，因此叫数据库事务，由于应用主要靠关系数据库来控制事务，而数据库通常和应用在同一个服务器，所以基于关系型数据库的事务又被称为本地事务。</li>\n<li>分布式事务：<br />\n分布式事务指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于<strong>不同的分布式系统</strong>的不同节点之上，且属于不同的应用，分布式事务需要保证这些操作要么全部成功，要么全部失败。本质上来说，分布式事务就是为了保证不同数据库的数据一致性。</li>\n<li>举例：<br />\n分布式系统会把一个应用系统拆分为可独立部署的多个服务，因此需要服务与服务之间远程协作才能完成事务操 作，这种分布式系统环境下由不同的服务之间通过网络远程协作完成事务称之为分布式事务，例如用户注册送积分事务、创建订单减库存事务，银行转账事务等都是分布式事务。</li>\n</ul>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998761000/4544996c3b5c4c619b58e6a9dba391ab.png\" alt=\"image20220111162727304.png\" /></p>\n<p>通过以上的图中我们可以看出，其实只要涉及到操作多个数据源，就可能会产生事务问题，当然在实际开发中我们要尽量避免这种问题的出现，当然如果避免不了，我们就需要进行解决，在我们的微服务系统架构中，目前比较好，比较常用的解决方案就是 Seata。</p>\n<h2 id=\"分布式事务理论\"><a class=\"anchor\" href=\"#分布式事务理论\">#</a> 分布式事务理论</h2>\n<p>随着互联化的蔓延，各种项目都逐渐向分布式服务做转换。如今微服务已经普遍存在，本地事务已经无法满足分布式的要求，由此分布式事务问题诞生。 分布式事务被称为世界性的难题，目前分布式事务存在两大理论依据：CAP 定律 BASE 理论。</p>\n<h3 id=\"cap定律\"><a class=\"anchor\" href=\"#cap定律\">#</a> CAP 定律</h3>\n<p>这个定理的内容是指的是在一个分布式系统中、Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p>\n<ul>\n<li>一致性（C）<br />\n在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</li>\n<li>可用性（A）<br />\n在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）</li>\n<li>分区容错性（P）<br />\n以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择</li>\n</ul>\n<p>CAP 是无法同时存在的，一下通过这个例子来说明</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998761000/89536f53b26048e18ac8a9a34ba6894d.png\" alt=\"image20220113155408713.png\" /></p>\n<ol>\n<li>当库存服务减库存以后，那么需要将数据同步到其他的服务上，这是为了保证数据一致性 C，但是网络是不可靠的，所以我们系统就需要保证分区容错性 P，也就是我们必须容忍网络所带来的的一些问题，此时如果我们想保证 C 那么就需要舍弃 A，也就是说我们在保证 C 的情况下，就必须舍弃 A，也就是 CP 无法保证高可用。</li>\n<li>如果为了保证 A，高可用的情况下，也就是必须在限定时间内给出响应，同样由于网络不可靠 P，订单服务就有可能无法拿到新的数据，但是也要给用户作出响应，那么也就无法保证 C 一致性。所以 AP 是无法保证强一致性的。</li>\n<li>如果我们想保证 CA，也就是高可用和一致性，也就是必须保证网络良好才能实现，那么也就是说我们需要将库存、订单、用户放到一起，但是这种情况也就丧失了 P 这个保证，这个时候系统也就不是分布式系统了。</li>\n<li>总结：在分布式系统中，p 是必然的存在的，所以我们只能在 C 和 A 之间进行取舍，在这种条件下就诞生了 BASE 理论</li>\n</ol>\n<h3 id=\"base理论\"><a class=\"anchor\" href=\"#base理论\">#</a> BASE 理论</h3>\n<p>BASE 是 Basically Available（基本可用）、Soft state（软状态）和 Eventually consistent（最终一致性）三个短语的缩写。BASE 理论是对 CAP 中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结， 是基于 CAP 定理逐步演化而来的。BASE 理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p>\n<ul>\n<li>基本可用<br />\n基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性 —- 注意，这绝不等价于系统不可用。比如：<br />\n（1）响应时间上的损失。正常情况下，一个在线搜索引擎需要在 0.5 秒之内返回给用户相应的查询结果，但由于出现故障，查询结果的响应时间增加了 1~2 秒<br />\n（2）系统功能上的损失：正常情况下，在一个电子商务网站上进行购物的时候，消费者几乎能够顺利完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面</li>\n<li>软状态<br />\n软状态指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时</li>\n<li>最终一致性<br />\n最终一致性强调的是所有的数据副本，在经过一段时间的同步之后，最终都能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</li>\n</ul>\n<p>那这个位置我们依旧可以用我们刚才的例子来进行说明</p>\n<p>** 基本可用：** 保证核心服务是可以使用的，至于其他的服务可以适当的降低响应时间，甚至是服务降级</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998761000/6e34be5dc9114b5f9a10a5b790446333.png\" alt=\"image20220113162344531.png\" /></p>\n<p>** 软状态：** 存在中间状态，不影响整体系统使用，数据同步存在延时</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998761000/8477ce5071124a21a3c44b61de31318c.png\" alt=\"image20220113162554630.png\" /></p>\n<p>** 最终一致性：** 再过了流量高峰期以后，经过一段时间的同步，保持各服务数据的一致</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998761000/e060172f628f4baaad06b8f03cc57dd6.png\" alt=\"image20220113162813542.png\" /></p>\n<h1 id=\"seata简介\"><a class=\"anchor\" href=\"#seata简介\">#</a> Seata 简介</h1>\n<h2 id=\"分布式事务解决方案\"><a class=\"anchor\" href=\"#分布式事务解决方案\">#</a> 分布式事务解决方案</h2>\n<p>2PC 即两阶段提交协议，是将整个事务流程分为两个阶段，P 是指准备阶段，C 是指提交阶段。</p>\n<ol>\n<li>准备阶段（Prepare phase）</li>\n<li>提交阶段（commit phase）</li>\n</ol>\n<p>举例：比如说相亲对象两个人去吃饭，店老板要求，先付钱在吃饭，这是男女双方提出了 AA，也就是说只有男女双方都付钱，才能落座吃饭，但是只要两个人中有一个不同意付款就不能落座吃饭。</p>\n<ul>\n<li>准备阶段：老板要求男方付款，男方付款。老板要求女方付款，女方付款</li>\n<li>提交阶段：老板出餐，两人纷纷落座</li>\n</ul>\n<p>其实此例子就形成了一个事务，如果男女双方有一个人拒绝付款，那么老板就不会出餐，并且会把已收取的钱原路退回。</p>\n<p>整个事务过程是由事务管理器和参与者组成的，店老板就是事务管管理器，男女双发就是参与者，事务管理器决策整个分布式事务在计算机中关系数据库支持的两阶段提交协议：</p>\n<ul>\n<li>准备阶段（Prepare phase）：事务管理器给每个参与者发送 Prepare 消息，每个数据库参与者在本地执行事务，并写本地的 Undo/Redo 日志，此时事务没有提交。</li>\n<li>（Undo 日志是记录修改前的数据，用于数据库回滚，Redo 日志是记录修改后的数据，用于提交事务后写入数据文件）</li>\n<li>提交阶段（commit phase）：如果事务管理器收到了参与者的执行失败或者超时消息时，直接给每个参与者发送回滚 (Rollback) 消息；否则，发送提交 (Commit) 消息；参与者根据事务管理器的指令执行提交或者回滚操作，并释放事务处理过程中使用的资源。</li>\n</ul>\n<p>具体步骤图例：</p>\n<p>成功：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/9a5b66ef19a4446a8a1f3cce3730de73.png\" alt=\"image20220113180953684.png\" /></p>\n<p>失败：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/22d602b59e6d420c83b42625d146bf29.png\" alt=\"image20220113181028153.png\" /></p>\n<h2 id=\"seata简介-2\"><a class=\"anchor\" href=\"#seata简介-2\">#</a> Seata 简介</h2>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWF0YS5pby96aC1jbi9kb2NzL292ZXJ2aWV3L3doYXQtaXMtc2VhdGEuaHRtbA==\">https://seata.io/zh-cn/docs/overview/what-is-seata.html</span></p>\n<p>概念：Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/7a247a0424714a2ba4bdc43ef6ae6dd0.png\" alt=\"1459421917a2d469f94c84cd28c7e46ad75683636.png\" /></p>\n<p>在我们的微服务系统中，对应业务被对应的拆分成独立模块，在官方提供的架构图中，我们可以看出当前是三个服务：</p>\n<ul>\n<li>仓储服务：对给定的商品进行增删操作记录数量</li>\n<li>订单服务：根据采购者的需求创建订单</li>\n<li>账户服务：从用户账户中扣除余额、积分等</li>\n</ul>\n<p>在这套架构中，用户下单购买商品的业务，就需要三个服务来完成，每个服务内部的数据一致性由本地事务来保证，但是全局的数据一致性问题就没办法保证，Seata 就是来进行解决这种问题的解决方案。</p>\n<h2 id=\"seata术语\"><a class=\"anchor\" href=\"#seata术语\">#</a> Seata 术语</h2>\n<p>官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWF0YS5pby96aC1jbi9kb2NzL292ZXJ2aWV3L3Rlcm1pbm9sb2d5Lmh0bWw=\">https://seata.io/zh-cn/docs/overview/terminology.html</span></p>\n<p>要了解 Seata，首先我们要了解一下 Seata 的几个关键的概念：</p>\n<ul>\n<li>TC (Transaction Coordinator) - 事务协调者<br />\n维护全局和分支事务的状态，驱动全局事务提交或回滚。</li>\n<li>TM (Transaction Manager) - 事务管理器（发起者，同时也是 RM 的一种）<br />\n定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li>\n<li>RM (Resource Manager) - 资源管理器（每个参与事务的微服务）<br />\n管理分支事务处理的资源，与 TC 交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li>\n</ul>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/fab8a67b90834a58b7accbb86726eea2.png\" alt=\"image20220111191919517.png\" /></p>\n<h2 id=\"seata-server下载\"><a class=\"anchor\" href=\"#seata-server下载\">#</a> Seata-Server 下载</h2>\n<p>官方下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRhL3JlbGVhc2Vz\">https://github.com/seata/seata/releases</span></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/b3f0f8ae28e44ad49c7144448f6c625a.png\" alt=\"image20220112191252083.png\" /></p>\n<p>下载完成之后需要解压</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/6e9471205cd9417c979fec4f79146437.png\" alt=\"image20220112191449051.png\" /></p>\n<h2 id=\"seata-server配置\"><a class=\"anchor\" href=\"#seata-server配置\">#</a> Seata-Server 配置</h2>\n<ol>\n<li>需要打开 conf 目录</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/d79c502c145f4d9e9bc1b0269d86b00a.png\" alt=\"image20220112192512498.png\" /></p>\n<ol start=\"2\">\n<li>先配置 registry.conf 配置文件，修改 Seata 的注册中心和配置中心为 Nacos</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/278d4105c1e8490893fe49b9c3ae5d11.png\" alt=\"image20220112192010321.png\" /></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/5bfd3ee2a99e496087b69d5d8632607c.png\" alt=\"image20220112192038314.png\" /></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>registry <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin class-name\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  nacos <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    application <span class=\"token operator\">=</span> <span class=\"token string\">\"seata-server\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:8848\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    group <span class=\"token operator\">=</span> <span class=\"token string\">\"SEATA_GROUP\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    namespace <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    username <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  eureka <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    serviceUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8761/eureka\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    application <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    weight <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  redis <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"localhost:6379\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    db <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">timeout</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  zk <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:2181\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    sessionTimeout <span class=\"token operator\">=</span> <span class=\"token number\">6000</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    connectTimeout <span class=\"token operator\">=</span> <span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    username <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  consul <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:8500\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    aclToken <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  etcd3 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:2379\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  sofa <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:9603\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    application <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    region <span class=\"token operator\">=</span> <span class=\"token string\">\"DEFAULT_ZONE\"</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    datacenter <span class=\"token operator\">=</span> <span class=\"token string\">\"DefaultDataCenter\"</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    group <span class=\"token operator\">=</span> <span class=\"token string\">\"SEATA_GROUP\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    addressWaitTime <span class=\"token operator\">=</span> <span class=\"token string\">\"3000\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token function\">file</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"file.conf\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>config <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token comment\"># file、nacos 、apollo、zk、consul、etcd3</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token builtin class-name\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  nacos <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:8848\"</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    namespace <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    group <span class=\"token operator\">=</span> <span class=\"token string\">\"SEATA_GROUP\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    username <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    dataId <span class=\"token operator\">=</span> <span class=\"token string\">\"seataServer.properties\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  consul <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:8500\"</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    aclToken <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  apollo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    appId <span class=\"token operator\">=</span> <span class=\"token string\">\"seata-server\"</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">## apolloConfigService will cover apolloMeta</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    apolloMeta <span class=\"token operator\">=</span> <span class=\"token string\">\"http://192.168.1.204:8801\"</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    apolloConfigService <span class=\"token operator\">=</span> <span class=\"token string\">\"http://192.168.1.204:8080\"</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    namespace <span class=\"token operator\">=</span> <span class=\"token string\">\"application\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    apolloAccesskeySecret <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"seata\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>  zk <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:2181\"</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    sessionTimeout <span class=\"token operator\">=</span> <span class=\"token number\">6000</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    connectTimeout <span class=\"token operator\">=</span> <span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    username <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    nodePath <span class=\"token operator\">=</span> <span class=\"token string\">\"/seata/seata.properties\"</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>  etcd3 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:2379\"</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>  <span class=\"token function\">file</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    name <span class=\"token operator\">=</span> <span class=\"token string\">\"file.conf\"</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>接着我们需要修改 Seata 的存储模式，修改 file.conf 文件，把 Seata 的默认存储模式修改为数据库 &quot;DB&quot;，同时需要配置 JDBC</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/6b91ce75509148978c15ac2f3118be5d.png\" alt=\"image20220112192451611.png\" /></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/827ac59ad07a46f790b90a40fdf12e4c.png\" alt=\"image20220112192620774.png\" /></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/69d55657feeb4093b1b629a3118aec2e.png\" alt=\"image20220112193120164.png\" /></p>\n<pre><code>## transaction log store, only used in seata-server\nstore &#123;\n  ## store mode: file、db、redis\n  mode = &quot;db&quot;\n  ## rsa decryption public key\n  publicKey = &quot;&quot;\n  ## file store property\n  file &#123;\n    ## store location dir\n    dir = &quot;sessionStore&quot;\n    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions\n    maxBranchSessionSize = 16384\n    # globe session size , if exceeded throws exceptions\n    maxGlobalSessionSize = 512\n    # file buffer size , if exceeded allocate new buffer\n    fileWriteBufferCacheSize = 16384\n    # when recover batch read size\n    sessionReloadReadSize = 100\n    # async, sync\n    flushDiskMode = async\n  &#125;\n\n  ## database store property\n  db &#123;\n    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.\n    datasource = &quot;druid&quot;\n    ## mysql/oracle/postgresql/h2/oceanbase etc.\n    dbType = &quot;mysql&quot;\n    driverClassName = &quot;com.mysql.jdbc.Driver&quot;\n    ## if using mysql to store the data, recommend add rewriteBatchedStatements=true in jdbc connection param\n    url = &quot;jdbc:mysql://localhost:3306/seata?useUnicode=true&amp;characterEncoding=UTF-8&quot;\n    user = &quot;root&quot;\n    password = &quot;root&quot;\n    minConn = 5\n    maxConn = 100\n    globalTable = &quot;global_table&quot;\n    branchTable = &quot;branch_table&quot;\n    lockTable = &quot;lock_table&quot;\n    queryLimit = 100\n    maxWait = 5000\n  &#125;\n\n  ## redis store property\n  redis &#123;\n    ## redis mode: single、sentinel\n    mode = &quot;single&quot;\n    ## single mode property\n    single &#123;\n      host = &quot;127.0.0.1&quot;\n      port = &quot;6379&quot;\n    &#125;\n    ## sentinel mode property\n    sentinel &#123;\n      masterName = &quot;&quot;\n      ## such as &quot;10.28.235.65:26379,10.28.235.65:26380,10.28.235.65:26381&quot;\n      sentinelHosts = &quot;&quot;\n    &#125;\n    password = &quot;&quot;\n    database = &quot;0&quot;\n    minConn = 1\n    maxConn = 10\n    maxTotal = 100\n    queryLimit = 100\n  &#125;\n&#125;\n\n</code></pre>\n<h2 id=\"启动\"><a class=\"anchor\" href=\"#启动\">#</a> 启动</h2>\n<p>启动步骤为，先启动 nacos 然后在启动 Seata-Server</p>\n<p>启动 Seata-Server 的方式非常简单，直接双击此文件即可:seata-server-1.4.2\\bin\\seata-server.bat</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/20f23172834f4a10b2bd93fa5386f0c9.png\" alt=\"image20220112193257424.png\" /></p>\n<p>启动完成效果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/d008d69fc45645e788d4aedd879091ce.png\" alt=\"image20220112193410847.png\" /></p>\n<p>然后在 nacos 控制台上就可以看到 Seata-Server</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641998834000/382313d0fd6f43c19f9d7d4b23d321b5.png\" alt=\"image20220112193500935.png\" /></p>\n<h2 id=\"seata-servertc环境搭建详解\"><a class=\"anchor\" href=\"#seata-servertc环境搭建详解\">#</a> Seata Server（TC）环境搭建详解</h2>\n<p>Server 端存储模式（store.mode）支持三种：</p>\n<ol>\n<li>file：单机模式，全局事务会话信息内存中读写并持久化本地文件 root.data，性能较高（默认）</li>\n<li>DB：高可用模式，全局事务会话信息通过 DB 共享，相对性能差一些</li>\n<li>redis：Seata-Server1.3 及以上版本支持，性能较高，存在事务信息丢失风险，需要配合实际场景使用。</li>\n</ol>\n<h2 id=\"具体操作\"><a class=\"anchor\" href=\"#具体操作\">#</a> 具体操作</h2>\n<ol>\n<li>修改 Seata-Server 模式为 DB 高可用模式</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642518497000/9dbad8c2dacf488488e655535ccbc0d8.png\" alt=\"image20220118173041657.png\" /></p>\n<p>找到以下对应的 db 配置，要修改其中的 jdbc 连接，以及要注意其中涉及到了三个表，分别是 global_table，branch_table，lock_table 分别是全局事务会话表，分支事务会话表，锁数据表；</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642518497000/bcbeb0859cbd498c95f516e983292c58.png\" alt=\"image20220118231142489.png\" /></p>\n<ol start=\"2\">\n<li>建表语句地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRhL2Jsb2IvZGV2ZWxvcC9zY3JpcHQvc2VydmVyL2RiL215c3FsLnNxbA==\">https://github.com/seata/seata/blob/develop/script/server/db/mysql.sql</span></li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- the table to store GlobalSession data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>global_table<span class=\"token punctuation\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>xid<span class=\"token punctuation\">`</span></span>                       <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>transaction_id<span class=\"token punctuation\">`</span></span>            <span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span>                    <span class=\"token keyword\">TINYINT</span>      <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>application_id<span class=\"token punctuation\">`</span></span>            <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>transaction_service_group<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>transaction_name<span class=\"token punctuation\">`</span></span>          <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>timeout<span class=\"token punctuation\">`</span></span>                   <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>begin_time<span class=\"token punctuation\">`</span></span>                <span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>application_data<span class=\"token punctuation\">`</span></span>          <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span>                <span class=\"token keyword\">DATETIME</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span>              <span class=\"token keyword\">DATETIME</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>xid<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_gmt_modified_status<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_transaction_id<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>transaction_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span> <span class=\"token operator\">=</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">-- the table to store BranchSession data</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>branch_table<span class=\"token punctuation\">`</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>branch_id<span class=\"token punctuation\">`</span></span>         <span class=\"token keyword\">BIGINT</span>       <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>xid<span class=\"token punctuation\">`</span></span>               <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>transaction_id<span class=\"token punctuation\">`</span></span>    <span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>resource_group_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>resource_id<span class=\"token punctuation\">`</span></span>       <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>branch_type<span class=\"token punctuation\">`</span></span>       <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span>            <span class=\"token keyword\">TINYINT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>client_id<span class=\"token punctuation\">`</span></span>         <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>application_data<span class=\"token punctuation\">`</span></span>  <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span>        <span class=\"token keyword\">DATETIME</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span>      <span class=\"token keyword\">DATETIME</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>branch_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_xid<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>xid<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span> <span class=\"token operator\">=</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">-- the table to store lock data</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>lock_table<span class=\"token punctuation\">`</span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>row_key<span class=\"token punctuation\">`</span></span>        <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>xid<span class=\"token punctuation\">`</span></span>            <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>transaction_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">BIGINT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>branch_id<span class=\"token punctuation\">`</span></span>      <span class=\"token keyword\">BIGINT</span>       <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>resource_id<span class=\"token punctuation\">`</span></span>    <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>table_name<span class=\"token punctuation\">`</span></span>     <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pk<span class=\"token punctuation\">`</span></span>             <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span>         <span class=\"token keyword\">TINYINT</span>      <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'0'</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'0:locked ,1:rollbacking'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_create<span class=\"token punctuation\">`</span></span>     <span class=\"token keyword\">DATETIME</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token identifier\"><span class=\"token punctuation\">`</span>gmt_modified<span class=\"token punctuation\">`</span></span>   <span class=\"token keyword\">DATETIME</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>row_key<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_status<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>status<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">KEY</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>idx_branch_id<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>branch_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span> <span class=\"token operator\">=</span> utf8<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>重启 Seata 即可生效。</li>\n</ol>\n<h1 id=\"seata配置nacos注册中心和配置中心\"><a class=\"anchor\" href=\"#seata配置nacos注册中心和配置中心\">#</a> Seata 配置 Nacos 注册中心和配置中心</h1>\n<p>Seata 支持注册服务到 Nacos，以及支持 Seata 所有配置放到 Nacos 配置中心，在 Nacos 中统一维护；</p>\n<p>高可用模式下就需要配合 Nacos 来完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642524267000/a556e2af96964faea8dc93380cf52c83.png\" alt=\"image20220118234555417.png\" /></p>\n<h2 id=\"具体配置如下\"><a class=\"anchor\" href=\"#具体配置如下\">#</a> 具体配置如下</h2>\n<h3 id=\"注册中心\"><a class=\"anchor\" href=\"#注册中心\">#</a> 注册中心</h3>\n<p>Seata-server 端配置注册中心，在 registry.conf 中加入配置注册中心 nacos<br />\n<strong> 注意：确保 client 与 server 的注册处于同一个 namespace 和 group，不然会找不到服务。</strong></p>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>registry <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin class-name\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  nacos <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    application <span class=\"token operator\">=</span> <span class=\"token string\">\"seata-server\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:8848\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    group <span class=\"token operator\">=</span> <span class=\"token string\">\"SEATA_GROUP\"</span> <span class=\"token comment\"># 这里的配置要和客户端保持一致</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    namespace <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span> <span class=\"token comment\"># 这里的配置要和客户端保持一致</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cluster <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    username <span class=\"token operator\">=</span> <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    password <span class=\"token operator\">=</span> <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><h3 id=\"配置中心\"><a class=\"anchor\" href=\"#配置中心\">#</a> 配置中心</h3>\n<ol>\n<li>Seata-server 端配置配置中心，在 registry.conf 中加入配置使用 nacos 作为配置中心</li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>config <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\"># file、nacos 、apollo、zk、consul、etcd3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin class-name\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  nacos <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    serverAddr <span class=\"token operator\">=</span> <span class=\"token string\">\"127.0.0.1:8848\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    namespace <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    group <span class=\"token operator\">=</span> <span class=\"token string\">\"SEATA_GROUP\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    username <span class=\"token operator\">=</span> <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    password <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    dataId <span class=\"token operator\">=</span> <span class=\"token string\">\"seataServer.properties\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>我们需要把 Seata 的一些配置上传到 Nacos 中，配置比较多，所以官方给我们提供了一个 config.txt，我们下载并且修改其中参数，上传到 Nacos 中<br />\n下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRhL3RyZWUvZGV2ZWxvcC9zY3JpcHQvY29uZmlnLWNlbnRlcg==\">https://github.com/seata/seata/tree/develop/script/config-center</span></li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#For details about configuration items, see https://seata.io/zh-cn/docs/user/configurations.html</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#Transport configuration, for client and server</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">transport.type</span><span class=\"token operator\">=</span>TCP</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">transport.server</span><span class=\"token operator\">=</span>NIO</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">transport.heartbeat</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">transport.enableTmClientBatchSendRequest</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">transport.enableRmClientBatchSendRequest</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">transport.enableTcServerBatchSendResponse</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">transport.rpcRmRequestTimeout</span><span class=\"token operator\">=</span><span class=\"token number\">30000</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\">transport.rpcTmRequestTimeout</span><span class=\"token operator\">=</span><span class=\"token number\">30000</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\">transport.rpcTcRequestTimeout</span><span class=\"token operator\">=</span><span class=\"token number\">30000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">transport.threadFactory.bossThreadPrefix</span><span class=\"token operator\">=</span>NettyBoss</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\">transport.threadFactory.workerThreadPrefix</span><span class=\"token operator\">=</span>NettyServerNIOWorker</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\">transport.threadFactory.serverExecutorThreadPrefix</span><span class=\"token operator\">=</span>NettyServerBizHandler</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">transport.threadFactory.shareBossWorker</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token assign-left variable\">transport.threadFactory.clientSelectorThreadPrefix</span><span class=\"token operator\">=</span>NettyClientSelector</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token assign-left variable\">transport.threadFactory.clientSelectorThreadSize</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token assign-left variable\">transport.threadFactory.clientWorkerThreadPrefix</span><span class=\"token operator\">=</span>NettyClientWorkerThread</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token assign-left variable\">transport.threadFactory.bossThreadSize</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token assign-left variable\">transport.threadFactory.workerThreadSize</span><span class=\"token operator\">=</span>default</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token assign-left variable\">transport.shutdown.wait</span><span class=\"token operator\">=</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token assign-left variable\">transport.serialization</span><span class=\"token operator\">=</span>seata</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token assign-left variable\">transport.compressor</span><span class=\"token operator\">=</span>none</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#Transaction routing rules configuration, only for the client</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token assign-left variable\">service.vgroupMapping.default_tx_group</span><span class=\"token operator\">=</span>default</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">#If you use a registry, you can ignore it</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token assign-left variable\">service.default.grouplist</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1:8091</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token assign-left variable\">service.enableDegrade</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token assign-left variable\">service.disableGlobalTransaction</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">#Transaction rule configuration, only for the client</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token assign-left variable\">client.rm.asyncCommitBufferLimit</span><span class=\"token operator\">=</span><span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token assign-left variable\">client.rm.lock.retryInterval</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token assign-left variable\">client.rm.lock.retryTimes</span><span class=\"token operator\">=</span><span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token assign-left variable\">client.rm.lock.retryPolicyBranchRollbackOnConflict</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token assign-left variable\">client.rm.reportRetryCount</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token assign-left variable\">client.rm.tableMetaCheckEnable</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token assign-left variable\">client.rm.tableMetaCheckerInterval</span><span class=\"token operator\">=</span><span class=\"token number\">60000</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token assign-left variable\">client.rm.sqlParserType</span><span class=\"token operator\">=</span>druid</pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token assign-left variable\">client.rm.reportSuccessEnable</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token assign-left variable\">client.rm.sagaBranchRegisterEnable</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token assign-left variable\">client.rm.sagaJsonParser</span><span class=\"token operator\">=</span>fastjson</pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token assign-left variable\">client.rm.tccActionInterceptorOrder</span><span class=\"token operator\">=</span>-2147482648</pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token assign-left variable\">client.tm.commitRetryCount</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token assign-left variable\">client.tm.rollbackRetryCount</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token assign-left variable\">client.tm.defaultGlobalTransactionTimeout</span><span class=\"token operator\">=</span><span class=\"token number\">60000</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token assign-left variable\">client.tm.degradeCheck</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token assign-left variable\">client.tm.degradeCheckAllowTimes</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token assign-left variable\">client.tm.degradeCheckPeriod</span><span class=\"token operator\">=</span><span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token assign-left variable\">client.tm.interceptorOrder</span><span class=\"token operator\">=</span>-2147482648</pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token assign-left variable\">client.undo.dataValidation</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token assign-left variable\">client.undo.logSerialization</span><span class=\"token operator\">=</span>jackson</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token assign-left variable\">client.undo.onlyCareUpdateColumns</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token assign-left variable\">server.undo.logSaveDays</span><span class=\"token operator\">=</span><span class=\"token number\">7</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token assign-left variable\">server.undo.logDeletePeriod</span><span class=\"token operator\">=</span><span class=\"token number\">86400000</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token assign-left variable\">client.undo.logTable</span><span class=\"token operator\">=</span>undo_log</pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token assign-left variable\">client.undo.compress.enable</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token assign-left variable\">client.undo.compress.type</span><span class=\"token operator\">=</span>zip</pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token assign-left variable\">client.undo.compress.threshold</span><span class=\"token operator\">=</span>64k</pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">#For TCC transaction mode</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token assign-left variable\">tcc.fence.logTableName</span><span class=\"token operator\">=</span>tcc_fence_log</pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token assign-left variable\">tcc.fence.cleanPeriod</span><span class=\"token operator\">=</span>1h</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">#Log rule configuration, for client and server</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token assign-left variable\">log.exceptionRate</span><span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">#Transaction storage configuration, only for the server. The file, DB, and redis configuration values are optional.</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token assign-left variable\">store.mode</span><span class=\"token operator\">=</span>file</pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token assign-left variable\">store.lock.mode</span><span class=\"token operator\">=</span>file</pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token assign-left variable\">store.session.mode</span><span class=\"token operator\">=</span>file</pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">#Used for password encryption</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token assign-left variable\">store.publicKey</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\">#If `store.mode,store.lock.mode,store.session.mode` are not equal to `file`, you can remove the configuration block.</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token assign-left variable\">store.file.dir</span><span class=\"token operator\">=</span>file_store/data</pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token assign-left variable\">store.file.maxBranchSessionSize</span><span class=\"token operator\">=</span><span class=\"token number\">16384</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token assign-left variable\">store.file.maxGlobalSessionSize</span><span class=\"token operator\">=</span><span class=\"token number\">512</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token assign-left variable\">store.file.fileWriteBufferCacheSize</span><span class=\"token operator\">=</span><span class=\"token number\">16384</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token assign-left variable\">store.file.flushDiskMode</span><span class=\"token operator\">=</span>async</pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token assign-left variable\">store.file.sessionReloadReadSize</span><span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">#These configurations are required if the `store mode` is `db`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `db`, you can remove the configuration block.</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token assign-left variable\">store.db.datasource</span><span class=\"token operator\">=</span>druid</pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token assign-left variable\">store.db.dbType</span><span class=\"token operator\">=</span>mysql</pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token assign-left variable\">store.db.driverClassName</span><span class=\"token operator\">=</span>com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token assign-left variable\">store.db.url</span><span class=\"token operator\">=</span>jdbc:mysql://127.0.0.1:3306/seata?useUnicode<span class=\"token operator\">=</span>true<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">rewriteBatchedStatements</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token assign-left variable\">store.db.user</span><span class=\"token operator\">=</span>username</pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token assign-left variable\">store.db.password</span><span class=\"token operator\">=</span>password</pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token assign-left variable\">store.db.minConn</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token assign-left variable\">store.db.maxConn</span><span class=\"token operator\">=</span><span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token assign-left variable\">store.db.globalTable</span><span class=\"token operator\">=</span>global_table</pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token assign-left variable\">store.db.branchTable</span><span class=\"token operator\">=</span>branch_table</pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token assign-left variable\">store.db.distributedLockTable</span><span class=\"token operator\">=</span>distributed_lock</pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token assign-left variable\">store.db.queryLimit</span><span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token assign-left variable\">store.db.lockTable</span><span class=\"token operator\">=</span>lock_table</pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token assign-left variable\">store.db.maxWait</span><span class=\"token operator\">=</span><span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">#These configurations are required if the `store mode` is `redis`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `redis`, you can remove the configuration block.</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token assign-left variable\">store.redis.mode</span><span class=\"token operator\">=</span>single</pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token assign-left variable\">store.redis.single.host</span><span class=\"token operator\">=</span><span class=\"token number\">127.0</span>.0.1</pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token assign-left variable\">store.redis.single.port</span><span class=\"token operator\">=</span><span class=\"token number\">6379</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token assign-left variable\">store.redis.sentinel.masterName</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token assign-left variable\">store.redis.sentinel.sentinelHosts</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token assign-left variable\">store.redis.maxConn</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token assign-left variable\">store.redis.minConn</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token assign-left variable\">store.redis.maxTotal</span><span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token assign-left variable\">store.redis.database</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token assign-left variable\">store.redis.password</span><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token assign-left variable\">store.redis.queryLimit</span><span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\">#Transaction rule configuration, only for the server</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token assign-left variable\">server.recovery.committingRetryPeriod</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token assign-left variable\">server.recovery.asynCommittingRetryPeriod</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token assign-left variable\">server.recovery.rollbackingRetryPeriod</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token assign-left variable\">server.recovery.timeoutRetryPeriod</span><span class=\"token operator\">=</span><span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token assign-left variable\">server.maxCommitRetryTimeout</span><span class=\"token operator\">=</span>-1</pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token assign-left variable\">server.maxRollbackRetryTimeout</span><span class=\"token operator\">=</span>-1</pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token assign-left variable\">server.rollbackRetryTimeoutUnlockEnable</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token assign-left variable\">server.distributedLockExpireTime</span><span class=\"token operator\">=</span><span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token assign-left variable\">server.xaerNotaRetryTimeout</span><span class=\"token operator\">=</span><span class=\"token number\">60000</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token assign-left variable\">server.session.branchAsyncQueueSize</span><span class=\"token operator\">=</span><span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token assign-left variable\">server.session.enableBranchAsyncRemove</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token assign-left variable\">server.enableParallelRequestHandle</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"125\"></td><td><pre></pre></td></tr><tr><td data-num=\"126\"></td><td><pre><span class=\"token comment\">#Metrics configuration, only for the server</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token assign-left variable\">metrics.enabled</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token assign-left variable\">metrics.registryType</span><span class=\"token operator\">=</span>compact</pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token assign-left variable\">metrics.exporterList</span><span class=\"token operator\">=</span>prometheus</pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token assign-left variable\">metrics.exporterPrometheusPort</span><span class=\"token operator\">=</span><span class=\"token number\">9898</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>具体修改：</li>\n<li>注意：事务分组：用于防护机房停电，来启用备用机房，或者异地机房，容错机制，当然如果 Seata-Server 配置了对应的事务分组，Client 也需要配置相同的事务分组</li>\n<li>service.vgroupMapping. 可以自定义 = default<br />\ndefault 这里必须等于 registry.config 中的 cluster=&quot;default&quot;(当然可以更改)</li>\n</ol>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key attr-name\">transport.type</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">TCP</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key attr-name\">transport.server</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NIO</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key attr-name\">transport.heartbeat</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key attr-name\">transport.enableTmClientBatchSendRequest</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key attr-name\">transport.enableRmClientBatchSendRequest</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key attr-name\">transport.rpcRmRequestTimeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5000</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key attr-name\">transport.rpcTmRequestTimeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10000</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key attr-name\">transport.rpcTcRequestTimeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10000</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.bossThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyBoss</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.workerThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyServerNIOWorker</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.serverExecutorThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyServerBizHandler</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.shareBossWorker</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.clientSelectorThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyClientSelector</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.clientSelectorThreadSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.clientWorkerThreadPrefix</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">NettyClientWorkerThread</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.bossThreadSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key attr-name\">transport.threadFactory.workerThreadSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">default</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#------------- 修改这个区域的映射 --------------    </span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key attr-name\">transport.shutdown.wait</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">3</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key attr-name\">service.vgroupMapping.mygroup</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">default # 事务分组</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key attr-name\">service.default.grouplist</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">127.0.0.1:8091</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token key attr-name\">service.enableDegrade</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key attr-name\">service.disableGlobalTransaction</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#------------------------------------------    </span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key attr-name\">client.rm.asyncCommitBufferLimit</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10000</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key attr-name\">client.rm.lock.retryInterval</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key attr-name\">client.rm.lock.retryTimes</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">30</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key attr-name\">client.rm.lock.retryPolicyBranchRollbackOnConflict</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key attr-name\">client.rm.reportRetryCount</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key attr-name\">client.rm.tableMetaCheckEnable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token key attr-name\">client.rm.tableMetaCheckerInterval</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">60000</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token key attr-name\">client.rm.sqlParserType</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">druid</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key attr-name\">client.rm.reportSuccessEnable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key attr-name\">client.rm.sagaBranchRegisterEnable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key attr-name\">client.rm.sagaJsonParser</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">fastjson</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token key attr-name\">client.rm.tccActionInterceptorOrder</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">-2147482648</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token key attr-name\">client.tm.commitRetryCount</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token key attr-name\">client.tm.rollbackRetryCount</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token key attr-name\">client.tm.defaultGlobalTransactionTimeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">60000</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token key attr-name\">client.tm.degradeCheck</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token key attr-name\">client.tm.degradeCheckAllowTimes</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key attr-name\">client.tm.degradeCheckPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">2000</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key attr-name\">client.tm.interceptorOrder</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">-2147482648</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key attr-name\">store.mode</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">db # 修改</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token key attr-name\">store.lock.mode</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">file</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token key attr-name\">store.session.mode</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">file</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token key attr-name\">store.publicKey</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token key attr-name\">store.file.dir</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">file_store/data</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token key attr-name\">store.file.maxBranchSessionSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">16384</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token key attr-name\">store.file.maxGlobalSessionSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">512</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token key attr-name\">store.file.fileWriteBufferCacheSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">16384</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token key attr-name\">store.file.flushDiskMode</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">async</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token key attr-name\">store.file.sessionReloadReadSize</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">#----------- 修改这个区域的 JDBC 连接 -----------    </span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token key attr-name\">store.db.datasource</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">druid</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token key attr-name\">store.db.dbType</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">mysql</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token key attr-name\">store.db.driverClassName</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.jdbc.Driver</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token key attr-name\">store.db.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://127.0.0.1:3306/seata?useUnicode=true&amp;rewriteBatchedStatements=true</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token key attr-name\">store.db.user</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token key attr-name\">store.db.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token key attr-name\">store.db.minConn</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token key attr-name\">store.db.maxConn</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">30</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">#------------------------------------------    </span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token key attr-name\">store.db.globalTable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">global_table</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token key attr-name\">store.db.branchTable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">branch_table</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token key attr-name\">store.db.distributedLockTable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">distributed_lock</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token key attr-name\">store.db.queryLimit</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token key attr-name\">store.db.lockTable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">lock_table</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token key attr-name\">store.db.maxWait</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">5000</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token key attr-name\">store.redis.mode</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">single</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token key attr-name\">store.redis.single.host</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">127.0.0.1</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token key attr-name\">store.redis.single.port</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">6379</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token key attr-name\">store.redis.sentinel.masterName</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token key attr-name\">store.redis.sentinel.sentinelHosts</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token key attr-name\">store.redis.maxConn</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token key attr-name\">store.redis.minConn</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token key attr-name\">store.redis.maxTotal</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token key attr-name\">store.redis.database</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">0</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token key attr-name\">store.redis.password</span><span class=\"token punctuation\">=</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token key attr-name\">store.redis.queryLimit</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token key attr-name\">server.recovery.committingRetryPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token key attr-name\">server.recovery.asynCommittingRetryPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token key attr-name\">server.recovery.rollbackingRetryPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token key attr-name\">server.recovery.timeoutRetryPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1000</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token key attr-name\">server.maxCommitRetryTimeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">-1</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token key attr-name\">server.maxRollbackRetryTimeout</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">-1</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token key attr-name\">server.rollbackRetryTimeoutUnlockEnable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token key attr-name\">server.distributedLockExpireTime</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10000</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token key attr-name\">client.undo.dataValidation</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token key attr-name\">client.undo.logSerialization</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jackson</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token key attr-name\">client.undo.onlyCareUpdateColumns</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token key attr-name\">server.undo.logSaveDays</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">7</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token key attr-name\">server.undo.logDeletePeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">86400000</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token key attr-name\">client.undo.logTable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">undo_log</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token key attr-name\">client.undo.compress.enable</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token key attr-name\">client.undo.compress.type</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">zip</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token key attr-name\">client.undo.compress.threshold</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">64k</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token key attr-name\">log.exceptionRate</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token key attr-name\">transport.serialization</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">seata</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token key attr-name\">transport.compressor</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">none</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token key attr-name\">metrics.enabled</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">false</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token key attr-name\">metrics.registryType</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">compact</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token key attr-name\">metrics.exporterList</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">prometheus</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token key attr-name\">metrics.exporterPrometheusPort</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">9898</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token key attr-name\">tcc.fence.logTableName</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">tcc_fence_log</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token key attr-name\">tcc.fence.cleanPeriod</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1h</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>修改好这个文件以后，我们就需要把这个文件放到 seata 目录下</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642524267000/1fb303b3c9574b1e94cce1b743825e0a.png\" alt=\"image20220118195227875.png\" /></p>\n<ol start=\"5\">\n<li>\n<p>此时我们需要把这些配置一个个的加入到 Nacos 配置中，所以我们需要一个脚本来进行执行，官方已经提供好了，地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRhL2Jsb2IvZGV2ZWxvcC9zY3JpcHQvY29uZmlnLWNlbnRlci9uYWNvcy9uYWNvcy1jb25maWcuc2g=\">https://github.com/seata/seata/blob/develop/script/config-center/nacos/nacos-config.sh</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zZWF0YS1zZXJ2ZXItMS05Mjl2eDc3Z3QwMmJqbTJrdHUzYi40LnhuLS0ybmFjb3MtY29uZmlnLWIwMHVkdG9ieDV4ZGEzMjAxYzBieWFkcTRhZ2EzNWd4NHhvajNvLnNo\">我们需要在 seata-server-1.4.2 文件夹中新建一个脚本文件 nacos-config.sh</span>，然后把脚本内容复制进去</p>\n</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642524267000/5107e37cec114e27a22b1c8c1f226d85.png\" alt=\"image20220118200307770.png\" /></p>\n<ol start=\"7\">\n<li>利用 git 来进行执行命令：</li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> nacos-config.sh <span class=\"token parameter variable\">-h</span> localhost <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8848</span> <span class=\"token parameter variable\">-g</span> SEATA_GROUP <span class=\"token parameter variable\">-t</span> 命名空间 <span class=\"token parameter variable\">-u</span> nacos <span class=\"token parameter variable\">-w</span> nacos</pre></td></tr></table></figure><p>参数说明：</p>\n<p>-h：host，默认值 localhost</p>\n<p>-p：port，默认值 8848</p>\n<p>-g：配置分组，默认为 SEATA_GROUP</p>\n<p>-t：租户信息，对应 Nacos 的命名空间 ID，默认为空</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642524267000/c08136f3e6184b7b88e83d15f733f3d0.png\" alt=\"image20220118200423603.png\" /></p>\n<ol start=\"8\">\n<li>在执行 naocs-config 文件的时候要注意，它默认寻找 config.txt 的路径和我们的路径不同，所以要打开 naocs-config 文件进行修改，否则无法执行。</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642524267000/3f11434b59fb4356bb59f0b3919db51d.png\" alt=\"image20220119002450133.png\" /></p>\n<h3 id=\"测试启动\"><a class=\"anchor\" href=\"#测试启动\">#</a> 测试启动</h3>\n<p>当以上的这些配置完成以后，我们就可以启动 nacos 和 seata-server 了，此时我们查看 Nacos 的配置中心，就会看到我们传入的所有配置信息</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642524267000/800a9a0540244f079f86be63505f153f.png\" alt=\"image20220119003324612.png\" /></p>\n<h2 id=\"附加\"><a class=\"anchor\" href=\"#附加\">#</a> 附加</h2>\n<p>各位我们 Seata-Server 默认端口是 8091，那么如果我们是集群部署方式，我们如何修改端口那？</p>\n<p>在 Linux/Mac 下</p>\n<pre><code>  sh ./bin/seata-server.sh\n</code></pre>\n<p>在 Windows 下</p>\n<pre><code>bin\\seata-server.bat\n</code></pre>\n<h3 id=\"支持的启动参数\"><a class=\"anchor\" href=\"#支持的启动参数\">#</a> 支持的启动参数</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>全写</th>\n<th>作用</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-h</td>\n<td>--host</td>\n<td>指定在注册中心注册的 IP</td>\n<td>不指定时获取当前的 IP，外部访问部署在云环境和容器中的 server 建议指定</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>--port</td>\n<td>指定 server 启动的端口</td>\n<td>默认为 8091</td>\n</tr>\n<tr>\n<td>-m</td>\n<td>--storeMode</td>\n<td>事务日志存储方式</td>\n<td>支持  <code>file</code> , <code>db</code> , <code>redis</code> ，默认为  <code>file</code>  注:redis 需 seata-server 1.3 版本及以上</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>--serverNode</td>\n<td>用于指定 seata-server 节点 ID</td>\n<td>如  <code>1</code> , <code>2</code> , <code>3</code> ..., 默认为  <code>1</code></td>\n</tr>\n<tr>\n<td>-e</td>\n<td>--seataEnv</td>\n<td>指定 seata-server 运行环境</td>\n<td>如  <code>dev</code> ,  <code>test</code>  等，服务启动时会使用  <code>registry-dev.conf</code>  这样的配置</td>\n</tr>\n</tbody>\n</table>\n<p>如：</p>\n<pre><code> sh ./bin/seata-server.sh -p 8091 -h 127.0.0.1 -m file\n</code></pre>\n<h1 id=\"seata-at模式\"><a class=\"anchor\" href=\"#seata-at模式\">#</a> Seata-AT 模式</h1>\n<p>概念：AT 模式是一种无侵入的分布式事务解决方案，在 AT 模式下，用户只需关注自己的 “业务 SQL”，用户的 “业务 SQL” 作为一阶段，Seata 框架会自动生成事务的二阶段提交和回滚操作。</p>\n<h2 id=\"整体机制\"><a class=\"anchor\" href=\"#整体机制\">#</a> 整体机制</h2>\n<p>两阶段提交协议的演变：</p>\n<ul>\n<li>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。</li>\n<li>二阶段：\n<ul>\n<li>提交异步化，非常快速地完成。</li>\n<li>回滚通过一阶段的回滚日志进行反向补偿。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"一阶段\"><a class=\"anchor\" href=\"#一阶段\">#</a> 一阶段</h3>\n<p>在一阶段中，Seata 会拦截 “业务 SQL“，首先解析 SQL 语义，找到要更新的业务数据，在数据被更新前，保存下来 &quot;undo&quot;，然后执行” 业务 SQL“更新数据，更新之后再次保存数据”redo“，最后生成行锁，这些操作都在本地数据库事务内完成，这样保证了一阶段的原子性。</p>\n<h3 id=\"二阶段\"><a class=\"anchor\" href=\"#二阶段\">#</a> 二阶段</h3>\n<p>相对一阶段，二阶段比较简单，负责整体的回滚和提交，如果之前的一阶段中有本地事务没有通过，那么就执行全局回滚，否在执行全局提交，回滚用到的就是一阶段记录的 &quot;undo Log&quot;，通过回滚记录生成反向更新 SQL 并执行，以完成分支的回滚。当然事务完成后会释放所有资源和删除所有日志。</p>\n<h3 id=\"具体图解\"><a class=\"anchor\" href=\"#具体图解\">#</a> 具体图解</h3>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/c5cda1c2014d4581a93ed75f26d234ab.png\" alt=\"image20220118161225488.png\" /></p>\n<h2 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h2>\n<ol>\n<li>首先设计两个服务，一个订单 order8801 一个库存 stock8802</li>\n<li>stock 库存表为：<img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/aaa39d7694324cce9deef2c10fdbf132.png\" alt=\"image20220117223403744.png\" /></li>\n<li>order 订单表为：<img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/915363f21d474f04a63b0451955923ae.png\" alt=\"image20220117223340923.png\" /></li>\n<li>订单服务通过 OpenFegin 远程调用库存服务，然后库存服务减库存，订单服务生成订单，完成基本的调用以后我们给订单服务添加异常</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderMapper</span> orderMapper<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">StockClient</span> stockClient<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 减库存</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        stockClient<span class=\"token punctuation\">.</span><span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 添加异常</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 创建订单</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        orderMapper<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>此时我们会发现访问接口出现异常情况，但是库存减少，订单没有增加此时已经出现了分布式事务的问题</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/eecbf65494df46029c548c29159d4318.png\" alt=\"image20220117223455391.png\" /></p>\n<p>订单表，没有增加数据</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/56d1870baf4e4f7aa4120fad0513adae.png\" alt=\"image20220117223513706.png\" /></p>\n<h3 id=\"通过seata的at模式解决分布式事务\"><a class=\"anchor\" href=\"#通过seata的at模式解决分布式事务\">#</a> 通过 Seata 的 AT 模式解决分布式事务</h3>\n<ol>\n<li>首先增加对应的 Seata 依赖</li>\n</ol>\n<pre><code>    &lt;dependency&gt;\n        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n</code></pre>\n<ol start=\"2\">\n<li>在对应的微服务数据库上加上 undo_log 表，此表用于数据的回滚</li>\n</ol>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>undo_log<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>undo_log<span class=\"token punctuation\">`</span></span>  <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>branch_id<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'分支事务ID'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>xid<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> utf8 <span class=\"token keyword\">COLLATE</span> utf8_general_ci <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'全局事务ID'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>context<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> utf8 <span class=\"token keyword\">COLLATE</span> utf8_general_ci <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'上下文'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>rollback_info<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">longblob</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'回滚信息'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>log_status<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'状态，0正常，1全局已完成'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>log_created<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'创建时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token identifier\"><span class=\"token punctuation\">`</span>log_modified<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">datetime</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'修改时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>ux_undo_log<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>xid<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>branch_id<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">USING</span> <span class=\"token keyword\">BTREE</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> <span class=\"token operator\">=</span> utf8 <span class=\"token keyword\">COLLATE</span> <span class=\"token operator\">=</span> utf8_general_ci <span class=\"token keyword\">COMMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'AT transaction mode undo table'</span> ROW_FORMAT <span class=\"token operator\">=</span> Compact<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/354464b4880e4d9e87fde0c8ab535963.png\" alt=\"image20220117225203163.png\" /></p>\n<ol start=\"3\">\n<li>配置 yml（8801 和 8802Seata 的配置保持一致）</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8802</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> stock</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">druid</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.jdbc.Driver</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span>  jdbc<span class=\"token punctuation\">:</span>mysql<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>3306/test_at<span class=\"token punctuation\">?</span>characterEncoding=utf8<span class=\"token important\">&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;rewriteBatchedStatements=true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">seata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">tx-service-group</span><span class=\"token punctuation\">:</span> mygroup <span class=\"token comment\"># 事务组名称，要和服务端对应</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">vgroup-mapping</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>       mygroup<span class=\"token punctuation\">:</span> default <span class=\"token comment\"># key 是事务组名称 value 要和服务端的机房名称保持一致</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>需要在 order8801 (TM) 的 Controller 上添加注解</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderService</span> orderService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/order/create\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@GlobalTransactional</span><span class=\"token comment\">// 开启分布式事务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        orderService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"生成订单\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>把 8801 和 8802 都跑起来，当然 Nacos 和 Seata 都要进行启动，这个时候我们进行访问 Order 的 REST 接口：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODAxL29yZGVyL2NyZWF0ZQ==\">http://localhost:8801/order/create</span>，我们就会发现此时已经解决了分布式事务问题<br />\n库存没有减少<br />\n订单也没有增加</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/b6abca237f9547369db5e84d1e932e17.png\" alt=\"image20220118162757573.png\" /></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/2f7c4ee907454b448d51cb90d0f1f7ad.png\" alt=\"image20220118162832649.png\" /></p>\n<ol start=\"6\">\n<li>那么为了验证 undo_log 表用于存储回滚的数据，我们在 OrderServiceImpl 上异常位置添加断点，同时以 debug 方式来启动 8801 订单服务</li>\n</ol>\n<pre><code>@Service\npublic class OrderServiceImpl implements OrderService &#123;\n    @Resource\n    private OrderMapper orderMapper;\n\n    @Resource\n    private StockClient stockClient;\n\n    @Override\n    public void create() &#123;\n        // 减库存\n        stockClient.decrement();\n\n        // 添加异常\n        int i = 1/0;// 此处添加断点\n\n        // 创建订单\n        orderMapper.create();\n    &#125;\n&#125;\n</code></pre>\n<ol start=\"7\">\n<li>然后访问接口：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODAxL29yZGVyL2NyZWF0ZQ==\">http://localhost:8801/order/create</span>，程序会卡在断点上，此时我们来查看 undo_log 表和库存表，此时我们会发现，库存确实减少了，但是在 undo_log 表中出现了快照记录了当前修改前的数据，这个数据就是用于回滚的数据<br />\n库存减少</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/27a1b4bcde974baca7dba1df62f44f37.png\" alt=\"image20220118163714002.png\" /></p>\n<pre><code>\tundo_log表记录快照\n</code></pre>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/bcf9f44d96864f58aef8d42726e2a811.png\" alt=\"image20220118163908365.png\" /></p>\n<pre><code>\t放行以后，库存数量回复，回滚生效\n</code></pre>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1642764224000/4ef168339c6949b39b5f63bc2042ad81.png\" alt=\"image20220118164019307.png\" /></p>\n<ol start=\"8\">\n<li>此时我们就验证了 AT 事务的执行过程。</li>\n</ol>\n<h1 id=\"seata-xa模式\"><a class=\"anchor\" href=\"#seata-xa模式\">#</a> Seata-XA 模式</h1>\n<p>Seata 1.2.0 版本重磅发布新的事务模式：XA 模式，实现对 XA 协议的支持。</p>\n<p>我们从三个方面来深入分析：</p>\n<ol>\n<li>XA 模式是什么？</li>\n<li>为什么支持 XA？</li>\n<li>XA 模式如何实现的，以及如何使用？</li>\n</ol>\n<h2 id=\"xa模式\"><a class=\"anchor\" href=\"#xa模式\">#</a> XA 模式</h2>\n<p>首先我们需要先了解一下什么是 XA？</p>\n<p>XA 规范早在上世纪 90 年代初就被提出，用以解决分布式事务处理这个领域的问题。</p>\n<p>注意：不存在某一种分布式事务机制可以完美适应所有场景，满足所有需求。</p>\n<p>现在，无论 AT 模式、TCC 模式还是 Saga 模式，这些模式的提出，本质上都源自 XA 规范对某些场景需求的无法满足。</p>\n<h3 id=\"什么是xa协议\"><a class=\"anchor\" href=\"#什么是xa协议\">#</a> 什么是 XA 协议</h3>\n<p>XA 规范 是 X/Open 组织定义的分布式事务处理（DTP，Distributed Transaction Processing）标准</p>\n<p>XA 规范 描述了全局的事务管理器与局部的资源管理器之间的接口。 XA 规范 的目的是允许的多个资源（如数据库，应用服务器，消息队列等）在同一事务中访问，这样可以使 ACID 属性跨越应用程序而保持有效。</p>\n<p>XA 规范 使用两阶段提交（2PC，Two-Phase Commit）来保证所有资源同时提交或回滚任何特定的事务。</p>\n<p>XA 规范 在上世纪 90 年代初就被提出。目前，几乎所有主流的数据库都对 XA 规范 提供了支持。</p>\n<p>DTP 模型定义如下角色：</p>\n<ul>\n<li>AP：即应用程序，可以理解为使用 DTP 分布式事务的程序</li>\n<li>RM：资源管理器，可以理解为事务的参与者，一般情况下是指一个数据库的实例（MySql），通过资源管理器对该数据库进行控制，资源管理器控制着分支事务</li>\n<li>TM：事务管理器，负责协调和管理事务，事务管理器控制着全局事务，管理实务生命周期，并协调各个 RM。全局事务是指分布式事务处理环境中，需要操作多个数据库共同完成一个工作，这个工作即是一个全局事务。</li>\n<li>DTP 模式定义 TM 和 RM 之间通讯的接口规范叫 XA，简单理解为数据库提供的 2PC 接口协议，基于数据库的 XA 协议来实现的 2PC 又称为 XA 方案。</li>\n</ul>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422177000/081cd4e8c4584620834469d663701fc2.png\" alt=\"20200722160231749.png\" /></p>\n<p>案例解释：</p>\n<ol>\n<li>应用程序（AP）持有订单库和商品库两个数据源。</li>\n<li>应用程序（AP）通过 TM 通知订单库（RM）和商品库（RM），来创建订单和减库存，RM 此时未提交事务，此时商品和订单资源锁定。</li>\n<li>TM 收到执行回复，只要有一方失败则分别向其他 RM 发送回滚事务，回滚完毕，资源锁释放。</li>\n<li>TM 收到执行回复，全部成功，此时向所有的 RM 发起提交事务，提交完毕，资源锁释放。</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422177000/04a567aca96a410ea7f1fa0e8eba955b.png\" alt=\"image20220209173222316.png\" /></p>\n<h4 id=\"xa协议的痛点\"><a class=\"anchor\" href=\"#xa协议的痛点\">#</a> XA 协议的痛点</h4>\n<p>如果一个参与全局事务的资源 “失联” 了（收不到分支事务结束的命令），那么它锁定的数据，将一直被锁定。进而，甚至可能因此产生死锁。</p>\n<p>这是 XA 协议的核心痛点，也是 Seata 引入 XA 模式要重点解决的问题。</p>\n<h3 id=\"seata的事务模式\"><a class=\"anchor\" href=\"#seata的事务模式\">#</a> Seata 的事务模式</h3>\n<p>Seata 定义了全局事务的框架。</p>\n<p>全局事务 定义为若干 分支事务 的整体协调：</p>\n<ol>\n<li>TM 向 TC 请求发起（Begin）、提交（Commit）、回滚（Rollback）全局事务。</li>\n<li>TM 把代表全局事务的 XID 绑定到分支事务上。</li>\n<li>RM 向 TC 注册，把分支事务关联到 XID 代表的全局事务中。</li>\n<li>RM 把分支事务的执行结果上报给 TC。（可选）</li>\n<li>TC 发送分支提交（Branch Commit）或分支回滚（Branch Rollback）命令给 RM。</li>\n</ol>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422177000/7c9541b4dfc4450d84714078137081d3.png\" alt=\"TB19qmhOrY1gK0jSZTEXXXDQVXa1330924.png\" /></p>\n<p>Seata 的 全局事务 处理过程，分为两个阶段：</p>\n<ul>\n<li>执行阶段 ：执行分支事务，并保证执行结果满足是<em>可回滚的（Rollbackable）</em> 和<em>持久化的（Durable）</em>。</li>\n<li>完成阶段： 根据 执行阶段 结果形成的决议，应用通过 TM 发出的全局提交或回滚的请求给 TC，TC 命令 RM 驱动 分支事务 进行 Commit 或 Rollback。</li>\n</ul>\n<p>Seata 的所谓事务模式是指：运行在 Seata 全局事务框架下的 分支事务 的行为模式。准确地讲，应该叫作 分支事务模式。</p>\n<p>不同的 事务模式 区别在于 分支事务 使用不同的方式达到全局事务两个阶段的目标。即，回答以下两个问题：</p>\n<ul>\n<li>执行阶段 ：如何执行并 保证 执行结果满足是<em>可回滚的（Rollbackable）</em> 和<em>持久化的（Durable）</em>。</li>\n<li>完成阶段： 收到 TC 的命令后，如何做到分支的提交或回滚？</li>\n</ul>\n<p>我们以 AT 模式举例：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422177000/2f29d8621f98463db0101f6f3e1c9a35.png\" alt=\"TB1NTuzOBr0gK0jSZFnXXbRRXXa1330924.png\" /></p>\n<ul>\n<li>执行阶段：\n<ul>\n<li>可回滚：根据 SQL 解析结果，记录回滚日志</li>\n<li>持久化：回滚日志和业务 SQL 在同一个本地事务中提交到数据库</li>\n</ul>\n</li>\n<li>完成阶段：\n<ul>\n<li>分支提交：异步删除回滚日志记录</li>\n<li>分支回滚：依据回滚日志进行反向补偿更新</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"seata的xa模式\"><a class=\"anchor\" href=\"#seata的xa模式\">#</a> Seata 的 XA 模式</h2>\n<p>XA 模式：</p>\n<p>在 Seata 定义的分布式事务框架内，利用事务资源（数据库、消息服务等）对 XA 协议的支持，以 XA 协议的机制来管理分支事务的一种 事务模式。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422177000/a4e733baeb4641efa9f81139d9eb9ef2.png\" alt=\"TB1hSpccIVl614jSZKPXXaGjpXa1330924.png\" /></p>\n<ul>\n<li>执行阶段：\n<ul>\n<li>可回滚：业务 SQL 操作放在 XA 分支中进行，由资源对 XA 协议的支持来保证 可回滚</li>\n<li>持久化：XA 分支完成后，执行 XA prepare，同样，由资源对 XA 协议的支持来保证<em>持久化</em>（即，之后任何意外都不会造成无法回滚的情况）</li>\n</ul>\n</li>\n<li>完成阶段：\n<ul>\n<li>分支提交：执行 XA 分支的 commit</li>\n<li>分支回滚：执行 XA 分支的 rollback</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"为什么要在seata中支持xa\"><a class=\"anchor\" href=\"#为什么要在seata中支持xa\">#</a> 为什么要在 Seata 中支持 XA</h3>\n<p>为什么要在 Seata 中增加 XA 模式呢？支持 XA 的意义在哪里呢？</p>\n<p>本质上，Seata 已经支持的 3 大事务模式：AT、TCC、Saga 都是 补偿型 的。</p>\n<p>补偿型 事务处理机制构建在 事务资源 之上（要么在中间件层面，要么在应用层面），事务资源 本身对分布式事务是无感知的。</p>\n<p>事务资源 对分布式事务的无感知存在一个根本性的问题：无法做到真正的 全局一致性 。</p>\n<p>比如，一条库存记录，处在 补偿型 事务处理过程中，由 100 扣减为 50。此时，仓库管理员连接数据库，查询统计库存，就看到当前的 50。之后，事务因为异外回滚，库存会被补偿回滚为 100。显然，仓库管理员查询统计到的 50 就是 脏 数据。所以补偿型事务是存在中间状态的（中途可能读到脏数据）</p>\n<h3 id=\"xa的价值\"><a class=\"anchor\" href=\"#xa的价值\">#</a> XA 的价值</h3>\n<p>与 补偿型 不同，XA 协议 要求 事务资源 本身提供对规范和协议的支持。</p>\n<p>因为 事务资源 感知并参与分布式事务处理过程，所以 事务资源（如数据库）可以保障从任意视角对数据的访问有效隔离，满足全局数据一致性。</p>\n<p>比如，刚才提到的库存更新场景，XA 事务处理过程中，中间状态数据库存 50 由数据库本身保证，是不会仓库管理员的查询统计看到的。</p>\n<p>除了 全局一致性 这个根本性的价值外，支持 XA 还有如下几个方面的好处：</p>\n<ol>\n<li>业务无侵入：和 AT 一样，XA 模式将是业务无侵入的，不给应用设计和开发带来额外负担。</li>\n<li>数据库的支持广泛：XA 协议被主流关系型数据库广泛支持，不需要额外的适配即可使用。</li>\n<li>多语言支持容易：因为不涉及 SQL 解析，XA 模式对 Seata 的 RM 的要求比较少。</li>\n<li>传统基于 XA 应用的迁移：传统的，基于 XA 协议的应用，迁移到 Seata 平台，使用 XA 模式将更平滑。</li>\n</ol>\n<h2 id=\"xa模式的使用\"><a class=\"anchor\" href=\"#xa模式的使用\">#</a> XA 模式的使用</h2>\n<p>我们从官方案例入手，具体的官方案例下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRhLXNhbXBsZXM=\">https://github.com/seata/seata-samples</span></p>\n<p>官方案例演示图：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422177000/7bc365555cce40bab992c3fc20d21d23.png\" alt=\"image20220211150003482.png\" /></p>\n<p>案例解析：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422177000/f80ebac36f754d3f9602c19ffbb0d707.png\" alt=\"image20220211155757596.png\" /></p>\n<p>整体运行机制：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422177000/c8387eae75ad4db0b7e4065d924b4c5a.png\" alt=\"TB19qmhOrY1gK0jSZTEXXXDQVXa1330924.png\" /></p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>在当前的技术发展阶段，不存一个分布式事务处理机制可以完美满足所有场景的需求。</p>\n<p>一致性、可靠性、易用性、性能等诸多方面的系统设计约束，需要用不同的事务处理机制去满足。</p>\n<p>Seata 项目最核心的价值在于：构建一个全面解决分布式事务问题的 标准化 平台。</p>\n<p>基于 Seata，上层应用架构可以根据实际场景的需求，灵活选择合适的分布式事务解决方案。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422177000/84f6e8e625c64f608ffa72ecf1f28f57.png\" alt=\"TB1lTSoOqL7gK0jSZFBXXXZZpXa1028528.png\" /></p>\n<p>XA 模式的加入，补齐了 Seata 在 全局一致性 场景下的缺口，形成 AT、TCC、Saga、XA 四大 事务模式 的版图，基本可以满足所有场景的分布式事务处理诉求。</p>\n<h1 id=\"tcc事务模式\"><a class=\"anchor\" href=\"#tcc事务模式\">#</a> TCC 事务模式</h1>\n<p>首先我们先来了解常规的 TCC 模式。</p>\n<h3 id=\"什么是tcc\"><a class=\"anchor\" href=\"#什么是tcc\">#</a> 什么是 TCC</h3>\n<p>TCC 是分布式事务中的二阶段提交协议，它的全称为 Try-Confirm-Cancel，即资源预留（Try）、确认操作（Confirm）、取消操作（Cancel），他们的具体含义如下：</p>\n<ol>\n<li>Try：对业务资源的检查并预留；</li>\n<li>Confirm：对业务处理进行提交，即 commit 操作，只要 Try 成功，那么该步骤一定成功；</li>\n<li>Cancel：对业务处理进行取消，即回滚操作，该步骤回对 Try 预留的资源进行释放。</li>\n</ol>\n<p>TCC 是一种侵入式的分布式事务解决方案，以上三个操作都需要业务系统自行实现，对业务系统有着非常大的入侵性，设计相对复杂，但优点是 TCC 完全不依赖数据库，能够实现跨数据库、跨应用资源管理，对这些不同数据访问通过侵入式的编码方式实现一个原子操作，更好地解决了在各种复杂业务场景下的分布式事务问题。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422117000/85e3fca01b714c99952ca6a06be2dc23.png\" alt=\"image.png\" /></p>\n<h3 id=\"seata的tcc模式\"><a class=\"anchor\" href=\"#seata的tcc模式\">#</a> Seata 的 TCC 模式</h3>\n<p>Seata TCC 模式跟通用型 TCC 模式原理一致。</p>\n<h3 id=\"tcc和at区别\"><a class=\"anchor\" href=\"#tcc和at区别\">#</a> TCC 和 AT 区别</h3>\n<p>AT 模式基于 <strong>支持本地 ACID 事务</strong> 的 <strong>关系型数据库</strong>：</p>\n<ul>\n<li>一阶段 prepare 行为：在本地事务中，一并提交业务数据更新和相应回滚日志记录。</li>\n<li>二阶段 commit 行为：马上成功结束，<strong>自动</strong> 异步批量清理回滚日志。</li>\n<li>二阶段 rollback 行为：通过回滚日志，<strong>自动</strong> 生成补偿操作，完成数据回滚。</li>\n</ul>\n<p>相应的，TCC 模式，不依赖于底层数据资源的事务支持：</p>\n<ul>\n<li>一阶段 prepare 行为：调用<strong>自定义</strong> 的 prepare 逻辑。</li>\n<li>二阶段 commit 行为：调用<strong>自定义</strong> 的 commit 逻辑。</li>\n<li>二阶段 rollback 行为：调用<strong>自定义</strong> 的 rollback 逻辑。</li>\n</ul>\n<p>所谓 TCC 模式，是指支持把 <strong>自定义</strong> 的分支事务纳入到全局事务的管理中。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422117000/94034492f123410197b33cd2c3573a1d.png\" alt=\"seata_tcc11644422133604.png\" /></p>\n<h2 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点：</h2>\n<ol>\n<li>侵入性比较强，并且需要自己实现相关事务控制逻辑</li>\n<li>在整个过程基本没有锁，性能较强</li>\n</ol>\n<h2 id=\"详细讲解\"><a class=\"anchor\" href=\"#详细讲解\">#</a> 详细讲解</h2>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644422117000/c01ba87b261645f5ae99b4925e1c6fd3.png\" alt=\"image20220125210417709.png\" /></p>\n<p>具体使用案例：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWF0YS5pby96aC1jbi9ibG9nL2ludGVncmF0ZS1zZWF0YS10Y2MtbW9kZS13aXRoLXNwcmluZy1jbG91ZC5odG1s\">https://seata.io/zh-cn/blog/integrate-seata-tcc-mode-with-spring-cloud.html</span></p>\n<h1 id=\"seata中的saga事务模式\"><a class=\"anchor\" href=\"#seata中的saga事务模式\">#</a> Seata 中的 Saga 事务模式</h1>\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p>Saga 模式是 SEATA 提供的长事务解决方案，在 Saga 模式中，业务流程中每个参与者都提交本地事务，当出现某一个参与者失败则补偿前面已经成功的参与者，一阶段正向服务和二阶段补偿服务（执行处理时候出错了，给一个修复的机会）都由业务开发实现。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644919973000/659fd4a073484f5888e3c3d7ee635e48.png\" alt=\"TB1Y2kuw7T2gK0jSZFkXXcIQFXa445444.png\" /></p>\n<p>Saga 模式下分布式事务通常是由事件驱动的，各个参与者之间是异步执行的，Saga 模式是一种长事务解决方案。</p>\n<h3 id=\"为什么需要saga\"><a class=\"anchor\" href=\"#为什么需要saga\">#</a> 为什么需要 Saga</h3>\n<p>之前我们学习的 Seata 分布式三种操作模型中所使用的的微服务全部可以根据开发者的需求进行修改，但是在一些特殊环境下，比如老系统，封闭的系统（无法修改，同时没有任何分布式事务引入），那么 AT、XA、TCC 模型将全部不能使用，为了解决这样的问题，才引用了 Saga 模型。</p>\n<p>比如：事务参与者可能是其他公司的服务或者是遗留系统，无法改造，可以使用 Saga 模式。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644919973000/05d2c07b91dd46a4baa498f4e3f3d49e.png\" alt=\"image20220215170345079.png\" /></p>\n<p>Saga 模式是 Seata 提供的长事务解决方案，提供了<strong>异构系统的事务统一处理模型</strong>。在 Saga 模式中，所有的子业务都不在直接参与整体事务的处理（只负责本地事务的处理），而是全部交由了最终调用端来负责实现，而在进行总业务逻辑处理时，在某一个子业务出现问题时，则自动补偿全面已经成功的其他参与者，这样一阶段的正向服务调用和二阶段的服务补偿处理全部由总业务开发实现。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644919973000/cd988d659148427fbb3b5dafa1c12782.png\" alt=\"Saga.png\" /></p>\n<h3 id=\"saga状态机\"><a class=\"anchor\" href=\"#saga状态机\">#</a> Saga 状态机</h3>\n<p>目前 Seata 提供的 Saga 模式只能通过状态机引擎来实现，需要开发者手工的进行 Saga 业务流程绘制，并且将其转换为 Json 配置文件，而后在程序运行时，将依据子配置文件实现业务处理以及服务补偿处理，而要想进行 Saga 状态图的绘制，一般需要通过 Saga 状态机来实现。</p>\n<p>基本原理：</p>\n<ul>\n<li>通过状态图来定义服务调用的流程并生成 json 定义文件</li>\n<li>状态图中一个节点可以调用一个服务，节点可以配置它的补偿节点</li>\n<li>状态图 json 由状态机引擎驱动执行，当出现异常时状态引擎反向执行已成功节点对应的补偿节点将事务回滚</li>\n<li>可以实现服务编排需求，支持单项选择、并发、子流程、参数转换、参数映射、服务执行状态判断、异常捕获等功能</li>\n</ul>\n<p>![](file://E:/%E9%A9%AC%E5%A3%AB%E5%85%B5/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%93%E9%A2%98/%E8%AF%BE%E4%BB%B6/Seata%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/09/demo_statelang.png?lastModify=1644919976)<img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644919973000/78e31d21cf3c4df6be73532c2b1cc08a.png\" alt=\"demo_statelang.png\" /></p>\n<h3 id=\"saga状态机的应用\"><a class=\"anchor\" href=\"#saga状态机的应用\">#</a> Saga 状态机的应用</h3>\n<p>官方提供了一个状态机设计器</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1644919973000/e3535b08efed496086d1ed219cf580e2.png\" alt=\"image20220215175333918.png\" /></p>\n<p>官方文档地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWF0YS5pby96aC1jbi9kb2NzL3VzZXIvc2FnYS5odG1s\">https://seata.io/zh-cn/docs/user/saga.html</span></p>\n<p>Seata Safa 状态机可视化图形设计器使用地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRhL2Jsb2IvZGV2ZWxvcC9zYWdhL3NlYXRhLXNhZ2Etc3RhdGVtYWNoaW5lLWRlc2lnbmVyL1JFQURNRS56aC1DTi5tZA==\">https://github.com/seata/seata/blob/develop/saga/seata-saga-statemachine-designer/README.zh-CN.md</span></p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "微服务",
                "spring-cloud-alibaba",
                "Seate",
                "分布式事务"
            ]
        },
        {
            "id": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Gateway%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "url": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Gateway%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "title": "Gateway系统学习",
            "date_published": "2023-07-10T13:54:50.000Z",
            "content_html": "<h1 id=\"网关介绍\"><a class=\"anchor\" href=\"#网关介绍\">#</a> 网关介绍</h1>\n<p>在微服务架构中，一个系统会被拆分为很多个微服务。那么作为客户端要如何去调用这么多的微服务呢？如果没有网关的存在，我们只能在客户端记录每个微服务的地址，然后分别去调用。这样的话会产生很多问题，例如：</p>\n<ul>\n<li>客户端多次请求不同的微服务，增加客户端代码或配置编写的复杂性</li>\n<li>认证复杂，每个微服务都有独立认证</li>\n<li>存在跨域请求，在一定场景下处理相对复杂</li>\n</ul>\n<p>为解决上面的问题所以引入了网关的概念：所谓的 API 网关，就是指系统的统一入口，提供内部服务的路由中转，为客户端提供统一服务，一些与业务本身功能无关的公共逻辑可以在这里实现，诸如认证、鉴权、监控、路由转发等。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1640685138000/13912782ae2c4387a81b42b1ea1b32db.png\" alt=\".png\" /></p>\n<h2 id=\"网关对比\"><a class=\"anchor\" href=\"#网关对比\">#</a> 网关对比</h2>\n<ul>\n<li>Zuul 1.x<br />\nNetflix 开源的网关，基于 Servlet 框架构建，功能丰富，使用 JAVA 开发，易于二次开发 问题：即一个线程处理一次连接请求，这种方式在内部延迟严重、设备故障较多情况下会引起存活的连接增多和线程增加的情况发生。</li>\n<li>Zuul 2.x<br />\nZuul2 采用了 Netty 实现异步非阻塞编程模型，每个 CPU 核一个线程，处理所有的请求和响应，请求和响应的生命周期是通过事件和回调来处理的，这种方式减少了线程数量，因此开销较小。</li>\n<li>GateWay<br />\nSpring 公司为了替换 Zuul 而开发的网关服务，底层为 Netty，将在下面具体介绍。</li>\n<li>Nginx+lua<br />\n 使用 nginx 的反向代理和负载均衡可实现对 api 服务器的负载均衡及高可用，lua 是一种脚本语言，可以来编写一些简单的逻辑，nginx 支持 lua 脚本，问题在于：无法融入到微服务架构中</li>\n<li>Kong<br />\n 基于 Nginx+Lua 开发，性能高，稳定，有多个可用的插件 (限流、鉴权等等) 可以开箱即用。 问题：只支持 Http 协议；二次开发，自由扩展困难；提供管理 API，缺乏更易用的管控、配置方式。</li>\n</ul>\n<h2 id=\"gateway\"><a class=\"anchor\" href=\"#gateway\">#</a> GateWay</h2>\n<p>Spring Cloud Gateway 基于 Spring Boot 2.x、Spring WebFlux 和 Project Reactor，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。它的目标是替代 Netflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控和限流。</p>\n<p>特点：</p>\n<ol>\n<li>性能强劲：是 Zuul 的 1.6 倍</li>\n<li>功能强大：内置了很多实用的功能，例如转发、监控、限流等</li>\n<li>设计优雅，容易扩展</li>\n</ol>\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念：</h3>\n<p>路由 (Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体。主要定义了下面的几个信息:</p>\n<ul>\n<li>id：路由标识、区别于其他 route</li>\n<li>uri：路由指向的目的地 uri，即客户端请求最终被转发到的微服务</li>\n<li>order：用于多个 route 之间的排序，数值越小排序越靠前，匹配优先级越高</li>\n<li>predicate：断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由</li>\n<li>filter：过滤器用于修改请求和响应信息</li>\n</ul>\n<h3 id=\"执行流程\"><a class=\"anchor\" href=\"#执行流程\">#</a> 执行流程：</h3>\n<ol>\n<li>Gateway Client 向 Gateway Server 发送请求</li>\n<li>请求首先会被 HttpWebHandlerAdapter 进行提取组装成网关上下文</li>\n<li>然后网关的上下文会传递到 DispatcherHandler，它负责将请求分发给 RoutePredicateHandlerMapping</li>\n<li>RoutePredicateHandlerMapping 负责路由查找，并根据路由断言判断路由是否可用</li>\n<li>如果过断言成功，由 FilteringWebHandler 创建过滤器链并调用</li>\n<li>请求会一次经过 PreFilter-- 微服务 --PostFilter 的方法，最终返回响应</li>\n</ol>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h2>\n<p>SpringCloud GateWay 使用的是 Webflux 中的 reactor-netty 响应式编程组件，底层使用了 Netty 通讯框架。</p>\n<h1 id=\"gateway工作流程gateway基础搭建\"><a class=\"anchor\" href=\"#gateway工作流程gateway基础搭建\">#</a> GateWay 工作流程 + GateWay 基础搭建</h1>\n<p>核心流程图如下：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1640707752000/5f398d8602654c4cb855428f0ac62442.png\" alt=\"spring_cloud_gateway_diagram.png\" /></p>\n<p><strong>核心概念：</strong></p>\n<p>客户端向 Spring Cloud Gateway 发出请求。如果 Gateway Handler Mapping 确定请求与路由匹配，则将其发送到 Gateway Web Handler 处理程序。此处理程序通过特定于请求的 Fliter 链运行请求。Fliter 被虚线分隔的原因是 Fliter 可以在发送代理请求之前（pre）和之后（post）运行逻辑。执行所有 pre 过滤器逻辑。然后进行代理请求。发出代理请求后，将运行 “post” 过滤器逻辑。</p>\n<p><strong>过滤器作用：</strong></p>\n<ul>\n<li>Filter 在 pre 类型的过滤器可以做参数效验、权限效验、流量监控、日志输出、协议转换等。</li>\n<li>Filter 在 post 类型的过滤器可以做响应内容、响应头的修改、日志输出、流量监控等</li>\n<li>这两种类型的过滤器有着非常重要的作用</li>\n</ul>\n<p>在 GateWay 的内部有三个核心点，我们先来看一下：</p>\n<h2 id=\"核心点\"><a class=\"anchor\" href=\"#核心点\">#</a> 核心点</h2>\n<ul>\n<li>Route（路由）<br />\n路由是构建网关的基础模块，它由 ID，目标 URI，包括一些列的断言和过滤器组成，如果断言为 true 则匹配该路由</li>\n<li>Predicate（断言）<br />\n参考的是 Java8 的 java.util.function.Predicate，开发人员可以匹配 HTTP 请求中的所有内容（例如请求头或请求参数），请求与断言匹配则进行路由</li>\n<li>Filter（过滤）<br />\n指的是 Spring 框架中 GateWayFilter 的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改。</li>\n<li>三个核心点连起来：<br />\n当用户发出请求到达 GateWay，GateWay 会通过一些匹配条件，定位到真正的服务节点，并在这个转发过程前后，进行一些及细化控制。其中 Predicate 就是我们匹配的条件，而 Filter 可以理解为一个过滤器，有了这两个点，再加上目标 URI，就可以实现一个具体的路由了。</li>\n</ul>\n<h2 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h2>\n<p>GateWay 核心的流程就是：路由转发 + 执行过滤器链</p>\n<h2 id=\"gateway搭建\"><a class=\"anchor\" href=\"#gateway搭建\">#</a> GateWay 搭建</h2>\n<p>那么我们现在已经了解了整体的基础概念以后，我们现在来搭建一个 GateWay 项目：cloudalibaba-gateway-9999</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1640707752000/365e2d4cfb1e41d68600e6283141c9ec.png\" alt=\"image20211228224951746.png\" /></p>\n<p>因为 GateWay 属于 SpringCloud 的，所以我们要导入对应依赖，一定要注意版本关系：</p>\n<p>版本对应地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3Vk\">https://spring.io/projects/spring-cloud</span></p>\n<p>老师这里使用的是<mark> SpringBoot2.2.6 的版本所以配合的是 SpringCloud 的 Hoxton.SR5 版本</mark></p>\n<p><strong>注意：引入 GateWay 一定要删除 spring-boot-starter-web 依赖，否则会有冲突无法启动</strong></p>\n<p>父级项目引入</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- parent 中 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring-cloud-gateway-version</span><span class=\"token punctuation\">></span></span>Hoxton.SR5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring-cloud-gateway-version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">&lt;!-- dependencyManagement 中写 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>$&#123;spring-cloud-gateway-version&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>子级项目，因为 GateWay 也需要注册进 Nacos，所以也需要 Nacos 的依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 子项目中 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.2.6.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>接着配置 YML 文件</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9999</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>getway<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">locator</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#开启注册中心路由功能</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#路由</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>provider  <span class=\"token comment\">#路由 ID，没有固定要求，但是要保证唯一，建议配合服</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>9001/nacos<span class=\"token punctuation\">-</span>provider <span class=\"token comment\"># 匹配提供服务的路由地址</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 断言</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">-</span> Path=/msb/<span class=\"token important\">**</span>  <span class=\"token comment\"># 断言，路径相匹配进行路由</span></pre></td></tr></table></figure><p>更改 9001 的 DemoController，加上一个入口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/msb\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 路由路径</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/get\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServerPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"库存-1：\"</span><span class=\"token operator\">+</span>serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后测试，启动 Nacos、9001 和 9999 网关，通过网关访问 9001 的 /msb/get 接口同时查看 Nacos 控制台</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1640707752000/a8cd2294313a430ea6da143b509a58c9.png\" alt=\"image20211229000611111.png\" /></p>\n<p>Nacos 控制台成功注册 GateWay 网关</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1640707752000/1c2350c5bb094391a656d9819ba1eb37.png\" alt=\"image20211229000705630.png\" /></p>\n<h1 id=\"gateway配置路由的两种方式\"><a class=\"anchor\" href=\"#gateway配置路由的两种方式\">#</a> GateWay 配置路由的两种方式</h1>\n<p>经过上节课的讲解，我们现在知道了 GateWay 的基本配置路由的方式，通过 YML 来完成，但是实际上 GateWay 还提供了另外一种配置方式</p>\n<h2 id=\"gatewayconfig\"><a class=\"anchor\" href=\"#gatewayconfig\">#</a> GatewayConfig</h2>\n<p>其实这种配置方式就是通过代码的方式进行配置，也就是通过 @Bean 注入一个 RouteLocator</p>\n<p>那我们直接来操作一下</p>\n<h3 id=\"具体操作\"><a class=\"anchor\" href=\"#具体操作\">#</a> 具体操作</h3>\n<p>首先我们在新建一个 GateWayConfig，其实这里的配置对应的就是我们之前在 YML 中配置的对应内容</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">.</span>cloudalibabagateway9999<span class=\"token punctuation\">.</span>config</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>gateway<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RouteLocator</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>gateway<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RouteLocatorBuilder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GateWayConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    配置了一个 id 为 path_msb1 的路由规则</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    当访问地址 http://localhost:9999/msb/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    就会转发到 http://localhost:9001/nacos-provider/msb/ 任何地址</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RouteLocator</span> <span class=\"token function\">customRouteLocator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RouteLocatorBuilder</span> routeLocatorBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 构建多个路由 routes</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">RouteLocatorBuilder<span class=\"token punctuation\">.</span>Builder</span> routes <span class=\"token operator\">=</span> routeLocatorBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">routes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 具体路由地址</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        routes<span class=\"token punctuation\">.</span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path_msb\"</span><span class=\"token punctuation\">,</span>r <span class=\"token operator\">-></span> r<span class=\"token punctuation\">.</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/msb/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:9001/nacos-provider\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 返回所有路由规则</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> routes<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们在 9001 的 DemoController 中添加一个控制器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/custom\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">customTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"网关配置测试~~costom\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个时候我们就可以测试了，启动 9999 网关服务和 9001 微服务，然后访问地址：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5OTk5L21zYi9jdXN0b20=\">http://localhost:9999/msb/custom</span> 就可以转发到 9001 中具体的接口中了</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1640864431000/ec294ed9249740c4a2a2ea694248cfa0.png\" alt=\"image20211230193640615.png\" /></p>\n<h1 id=\"gateway实现负载均衡\"><a class=\"anchor\" href=\"#gateway实现负载均衡\">#</a> GateWay 实现负载均衡</h1>\n<p>在之前的学习中，我们已经掌握了 GateWay 的一些基本配置，包括两种配置方法，但是其中有很多的配置细节，我们没有细讲，包括我们现在的配置是写死的具体端口号，那么这节课，我们要实现通过 GateWay 实现负载均衡的两种方式</p>\n<h2 id=\"自动负载均衡\"><a class=\"anchor\" href=\"#自动负载均衡\">#</a> 自动负载均衡</h2>\n<p>首先我们看一下我们之前的网关服务 9999 的 yml 配置，这里的配置信息，其实有一些，咱们目前是不清楚的，比如：</p>\n<ol>\n<li>gateway.discovery.locator.enabled: true #开启自动路由功能</li>\n<li>routes 中的 uri 其实最后是不需要服务名称的，这个位置其实只需要指定的 localhost:9001 即可</li>\n</ol>\n<pre><code>server:\n  port: 9999\nspring:\n  application:\n    name: cloud-gateway-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: true #开启自动路由功能，根据服务名称自动创建routes\n      routes:  # 路由\n        - id: nacos-provider #路由ID，没有固定要求，但是要保证唯一，建议配合服务名\n          uri: http://localhost:9001/nacos-provider # 匹配提供服务的路由地址\n          predicates: # 断言\n            - Path=/msb/** # 断言，路径相匹配进行路由\n</code></pre>\n<p>所以这个位置我们可以把当前的配置优化为以下情况，它是一样可以启动的，我们可以进行测试启动 9001 和网关 9999，通过网关来访问 &quot;localhost:9999/msb/**&quot;</p>\n<pre><code>server:\n  port: 9999\nspring:\n  application:\n    name: cloud-gateway-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      routes:  # 路由\n        - id: nacos-provider #路由ID，没有固定要求，但是要保证唯一，建议配合服务名\n          uri: http://localhost:9001 # 匹配提供服务的路由地址\n          predicates: # 断言\n            - Path=/msb/** # 断言，路径相匹配进行路由\n</code></pre>\n<p>GateWay 还提供了和 Zuul 类似的自动路由规则，具体配置如下：</p>\n<ol>\n<li>discovery.locator.enabled: true #这个配置默认为 false，但是如果为 true，就是开启了通过 serviceId 转发到具体的服务实例。“localhost:9999/ServiceID/msb/**”</li>\n<li>在配置好这些以后，我们可以直接通过服务名称来进行访问 Nacos 中注册的服务和对应的接口</li>\n<li>这个位置我们为了测试可以启动 2 个微服务 9001、9002</li>\n<li>GateWay 在开启了自动路由以后，还自带负载均衡</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token punctuation\">:</span> <span class=\"token number\">9999</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>gateway<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nacos<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      discovery<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        server<span class=\"token punctuation\">-</span><span class=\"token key atrule\">addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    gateway<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      discovery<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        locator<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          enabled<span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#是否与服务发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为 false，设为 true 便开启通过服务中心的自动根据 serviceId 创建路由的功能。</span></pre></td></tr></table></figure><p>9002 和 9001 保持一致，Controller 保持一致，负载均衡测试</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabanacos9002<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RequestMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/msb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/get\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServerPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"库存-1：\"</span><span class=\"token operator\">+</span>serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"custom\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">customTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"测试网关配置类~~custom\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<ul>\n<li>访问地址：\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5OTk5L25hY29zLXByb3ZpZGVyL21zYi9nZXQ=\">http://localhost:9999/nacos-provider/msb/get</span></li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641386784000/143b314052704e94b2011aa7effada65.png\" alt=\"image20220105195136602.png\" /></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641386784000/818d5667a8a24cd5b17b7b7023cc02c0.png\" alt=\"image20220105195151755.png\" /></p>\n<h2 id=\"手动负载均衡\"><a class=\"anchor\" href=\"#手动负载均衡\">#</a> 手动负载均衡</h2>\n<p>在以上的配置中，其实是有问题的，问题在于当前的服务名称暴露，并且太过于灵活，那么如果想解决的话，其实我们可以进行手动配置。</p>\n<p>具体配置如下：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">9999</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>getway<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">nacos</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token key atrule\">server-addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token key atrule\">discovery</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">locator</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\">#开启注册中心路由功能</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#路由</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>provider  <span class=\"token comment\">#路由 ID，没有固定要求，但是要保证唯一，建议配合服</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token comment\"># lb 原则</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//nacos<span class=\"token punctuation\">-</span>provider <span class=\"token comment\"># 匹配提供服务的路由地址</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 断言</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">-</span> Path=/msb/<span class=\"token important\">**</span>  <span class=\"token comment\"># 断言，路径相匹配进行路由</span></pre></td></tr></table></figure><h2 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h2>\n<p>我们现在开启 9001/9002 两个服务和 9999 网关服务，然后此时我们可以通过网关去访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5OTk5L21zYi9nZXQ=\">http://localhost:9999/msb/get</span></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641386784000/98b06ceeb9254c21a61ec8700808f6e9.png\" alt=\"image20220105195839464.png\" /><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641386784000/09ebf499f4ab40a8b6d454eee1106b9d.png\" alt=\"image20220105195849056.png\" /></p>\n<h1 id=\"gateway断言predicate\"><a class=\"anchor\" href=\"#gateway断言predicate\">#</a> GateWay 断言 Predicate</h1>\n<p>这节课我们来研究一下 GateWay 的 Predicate（断言）</p>\n<p>每一个 Predicate 的使用，可以理解为：当满足条件后才会进行转发，如果是多个，那就是满足所有条件才会转发</p>\n<h2 id=\"断言种类\"><a class=\"anchor\" href=\"#断言种类\">#</a> 断言种类</h2>\n<ol>\n<li>After：匹配在指定日期时间之后发生的请求。</li>\n<li>Before：匹配在指定日期之前发生的请求。</li>\n<li>Between：需要指定两个日期参数，设定一个时间区间，匹配此时间区间内的请求。</li>\n<li>Cookie：需要指定两个参数，分别为 name 和 regexp（正则表达式），也可以理解 Key 和 Value，匹配具有给定名称且其值与正则表达式匹配的 Cookie。</li>\n<li>Header：需要两个参数 header 和 regexp（正则表达式），也可以理解为 Key 和 Value，匹配请求携带信息。</li>\n<li>Host：匹配当前请求是否来自于设置的主机。</li>\n<li>Method：可以设置一个或多个参数，匹配 HTTP 请求，比如 GET、POST</li>\n<li>Path：匹配指定路径下的请求，可以是多个用逗号分隔</li>\n<li>Query：需要指定一个或者多个参数，一个必须参数和一个可选的正则表达式，匹配请求中是否包含第一个参数，如果有两个参数，则匹配请求中第一个参数的值是否符合正则表达式。</li>\n<li>RemoteAddr：匹配指定 IP 或 IP 段，符合条件转发。</li>\n<li>Weight：需要两个参数 group 和 weight（int），实现了路由权重功能，按照路由权重选择同一个分组中的路由</li>\n</ol>\n<h2 id=\"常用断言演示\"><a class=\"anchor\" href=\"#常用断言演示\">#</a> 常用断言演示</h2>\n<p>以上这么多的断言，我们不可能一一的去演示，我们挑出一些比较常用的来给大家做演示，这些具体的演示在官网上都有提供，具体地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctY2xvdWQtZ2F0ZXdheS9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvI2dhdGV3YXktcmVxdWVzdC1wcmVkaWNhdGVzLWZhY3Rvcmllcw==\">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories</span></p>\n<h3 id=\"after\"><a class=\"anchor\" href=\"#after\">#</a> After</h3>\n<p>匹配在指定时间之后发生的请求，可以对应提前上线业务</p>\n<p>yml 配置</p>\n<pre><code>server:\n  port: 9999\nspring:\n  application:\n    name: cloud-gateway-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: false # 是否与服务发现进行组合，通过ServiceID转发到具体的服务实例，默认为false，\n                        # 设置为true便开启通过服务注册中心来自动根据SeviceID创建路由功能。\n      routes:\n        - id: nacos-provider # 路由ID，唯一不可重复，最好配合服务名\n          uri: lb://nacos-provider # 匹配提供服务的路由地址 lb://代表开启负载均衡\n          predicates: # 断言\n            - Path=/msb/** # 匹配对应地址\n            - After=2022-01-07T14:39:10.529+08:00[Asia/Shanghai] # 在这个时间之后的请求都能通过，当前没有为题以后，故意改为1个小时以后\n</code></pre>\n<p>写一个测试类，来获取当前时间</p>\n<pre><code>public class TestDateTime &#123;\n    public static void main(String[] args) &#123;\n        ZonedDateTime zbj = ZonedDateTime.now();//默认时区\n        System.out.println(zbj);\n    &#125;\n&#125;\n</code></pre>\n<p>测试：</p>\n<p>当前时间之后请求没有问题</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641548103000/e10d464666ed4515a70aabd835daaee4.png\" alt=\"image20220107151419442.png\" /></p>\n<p>设置为 1 个小时会后访问 404</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641548103000/ce7286c95b3140abaa49eb0f8538d1f0.png\" alt=\"image20220107151358287.png\" /></p>\n<p>当这个 After 理解了以后，剩下的关于日期时间的设置 Before、Between 道理都是一样的，只不过是限定不同的日期时间区间</p>\n<h3 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> Cookie</h3>\n<p>需要指定两个参数，分别为 name 和 regexp（正则表达式），也可以理解 Key 和 Value，匹配具有给定名称且其值与正则表达式匹配的 Cookie。</p>\n<p>简单理解就是路由规则会通过获取 Cookie name 值和正则表达式去匹配，如果匹配上就会执行路由，如果匹配不上则不执行。</p>\n<p>我们可以分为两种情况演示，Cookie 匹配，Cookie 不匹配</p>\n<p>yml</p>\n<pre><code>server:\n  port: 9999\nspring:\n  application:\n    name: cloud-gateway-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: false # 是否与服务发现进行组合，通过ServiceID转发到具体的服务实例，默认为false，\n                        # 设置为true便开启通过服务注册中心来自动根据SeviceID创建路由功能。\n      routes:\n        - id: nacos-provider # 路由ID，唯一不可重复，最好配合服务名\n          uri: lb://nacos-provider # 匹配提供服务的路由地址 lb://代表开启负载均衡\n          predicates: # 断言\n            - Path=/msb/** # 匹配对应地址\n            # - After=2022-01-07T14:39:10.529+08:00[Asia/Shanghai] # 在这个时间之后的请求都能通过\n            - Cookie=username,[a-z]+ # 匹配Cookie的key和value（正则表达式）\n</code></pre>\n<p>那么我们通过 postman 来进行测试</p>\n<p>当 Cookie 匹配时：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641548103000/9d55f65a1c7a4957b14bb5f9ffe1a0b3.png\" alt=\"image20220107162754644.png\" /></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641548103000/44149a75b4bb4cada71862616de82422.png\" alt=\"image20220107162819910.png\" /></p>\n<p>当 Cookie 不匹配时：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641548103000/b4fd75971a834f33a3c2547a2e5c50a6.png\" alt=\"image20220107162907000.png\" /></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641548103000/7f3eb02776804426875c429a6c48d47a.png\" alt=\"image20220107162922622.png\" /></p>\n<h3 id=\"header\"><a class=\"anchor\" href=\"#header\">#</a> Header</h3>\n<p>需要两个参数 header 和 regexp（正则表达式），也可以理解为 Key 和 Value，匹配请求携带信息。</p>\n<p>实际上就是请求头携带的信息，官网给出的案例是 X-Request-Id，那我们就用这个做实验</p>\n<p>yml</p>\n<pre><code>server:\n  port: 9999\nspring:\n  application:\n    name: cloud-gateway-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: false # 是否与服务发现进行组合，通过ServiceID转发到具体的服务实例，默认为false，\n                        # 设置为true便开启通过服务注册中心来自动根据SeviceID创建路由功能。\n      routes:\n        - id: nacos-provider # 路由ID，唯一不可重复，最好配合服务名\n          uri: lb://nacos-provider # 匹配提供服务的路由地址 lb://代表开启负载均衡\n          predicates: # 断言\n            - Path=/msb/** # 匹配对应地址\n            #- After=2022-01-07T14:39:10.529+08:00[Asia/Shanghai] # 在这个时间之后的请求都能通过\n            #- Cookie=username,[a-z]+\n            - Header=X-Request-Id,\\d+ #表示数字\n</code></pre>\n<p>测试</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641548103000/3188d44ced0446b09592794cc874caf5.png\" alt=\"image20220107165412353.png\" /></p>\n<h3 id=\"host\"><a class=\"anchor\" href=\"#host\">#</a> Host</h3>\n<p>匹配当前请求是否来自于设置的主机。</p>\n<p>这个比较比较简单，我们直接来试验</p>\n<p>yml</p>\n<pre><code>server:\n  port: 9999\nspring:\n  application:\n    name: cloud-gateway-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: false # 是否与服务发现进行组合，通过ServiceID转发到具体的服务实例，默认为false，\n                        # 设置为true便开启通过服务注册中心来自动根据SeviceID创建路由功能。\n      routes:\n        - id: nacos-provider # 路由ID，唯一不可重复，最好配合服务名\n          uri: lb://nacos-provider # 匹配提供服务的路由地址 lb://代表开启负载均衡\n          predicates: # 断言\n            - Path=/msb/** # 匹配对应地址\n            #- After=2022-01-07T14:39:10.529+08:00[Asia/Shanghai] # 在这个时间之后的请求都能通过\n            #- Cookie=username,[a-z]+\n            #- Header=X-Request-Id,\\d+ #表示数字\n            - Host=**.mashibing.com #匹配当前的主机地址发出的请求\n</code></pre>\n<p>postman</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641548103000/229f6b3bddc744cdb2c34f6070700fd3.png\" alt=\"image20220107165950636.png\" /></p>\n<h3 id=\"method\"><a class=\"anchor\" href=\"#method\">#</a> Method</h3>\n<p>可以设置一个或多个参数，匹配 HTTP 请求，比如 GET、POST</p>\n<p>yml</p>\n<pre><code>server:\n  port: 9999\nspring:\n  application:\n    name: cloud-gateway-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: false # 是否与服务发现进行组合，通过ServiceID转发到具体的服务实例，默认为false，\n                        # 设置为true便开启通过服务注册中心来自动根据SeviceID创建路由功能。\n      routes:\n        - id: nacos-provider # 路由ID，唯一不可重复，最好配合服务名\n          uri: lb://nacos-provider # 匹配提供服务的路由地址 lb://代表开启负载均衡\n          predicates: # 断言\n            - Path=/msb/** # 匹配对应地址\n            #- After=2022-01-07T14:39:10.529+08:00[Asia/Shanghai] # 在这个时间之后的请求都能通过\n            #- Cookie=username,[a-z]+\n            #- Header=X-Request-Id,\\d+ #表示数字\n            #- Host=**.mashibing.com #匹配当前的主机地址发出的请求\n            - Method=GET,POST # 匹配GET请求或者POST请求\n</code></pre>\n<h3 id=\"query\"><a class=\"anchor\" href=\"#query\">#</a> Query</h3>\n<p>需要指定一个或者多个参数，一个必须参数和一个可选的正则表达式，匹配请求中是否包含第一个参数，如果有两个参数，则匹配请求中第一个参数的值是否符合正则表达式。</p>\n<p>yml</p>\n<pre><code>server:\n  port: 9999\nspring:\n  application:\n    name: cloud-gateway-service\n  cloud:\n    nacos:\n      discovery:\n        server-addr: localhost:8848\n    gateway:\n      discovery:\n        locator:\n          enabled: false # 是否与服务发现进行组合，通过ServiceID转发到具体的服务实例，默认为false，\n                        # 设置为true便开启通过服务注册中心来自动根据SeviceID创建路由功能。\n      routes:\n        - id: nacos-provider # 路由ID，唯一不可重复，最好配合服务名\n          uri: lb://nacos-provider # 匹配提供服务的路由地址 lb://代表开启负载均衡\n          predicates: # 断言\n            - Path=/msb/** # 匹配对应地址\n            #- After=2022-01-07T14:39:10.529+08:00[Asia/Shanghai] # 在这个时间之后的请求都能通过\n            #- Cookie=username,[a-z]+\n            #- Header=X-Request-Id,\\d+ #表示数字\n            #- Host=**.mashibing.com #匹配当前的主机地址发出的请求\n            #- Method=GET,POST\n            - Query=id,.+ # 匹配请求参数，这里如果需要匹配多个参数，可以写多个Query\n</code></pre>\n<p>测试：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641548103000/000f9c26d9ab4e8ca3775883a77cfbeb.png\" alt=\"image20220107172856256.png\" /></p>\n<h3 id=\"weight\"><a class=\"anchor\" href=\"#weight\">#</a> Weight</h3>\n<p>需要两个参数 group 和 weight（int），实现了路由权重功能，按照路由权重选择同一个分组中的路由</p>\n<p>官网提供的演示 yml</p>\n<pre><code>spring:\n  cloud:\n    gateway:\n      routes:\n      - id: weight_high\n        uri: https://weighthigh.org\n        predicates:\n        - Weight=group1, 8\n      - id: weight_low\n        uri: https://weightlow.org\n        predicates:\n        - Weight=group1, 2\n</code></pre>\n<p>该路由会将约 80% 的流量转发到<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWlnaHRoaWdoLm9yZy8=\"> weighthigh.org</span>，将约 20% 的流量<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWlnaGxvdy5vcmcv\">转发</span>到<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWlnaGxvdy5vcmcv\"> weightlow.org</span></p>\n<h2 id=\"总结-3\"><a class=\"anchor\" href=\"#总结-3\">#</a> 总结：</h2>\n<p>Predicate 就是为了实现一组匹配规则，让请求过来找到对应的 Route 进行处理。</p>\n<h1 id=\"gateway的filter\"><a class=\"anchor\" href=\"#gateway的filter\">#</a> GateWay 的 Filter</h1>\n<p>路由过滤器允许以某种方式修改传入的 HTTP 请求或传出的 HTTP 响应。路由过滤器的范围是特定的路由。Spring Cloud Gateway 包含许多内置的 GatewayFilter 工厂。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641558027000/20dc92cddbf14336afa83e9af1756e9c.png\" alt=\"image20220107175844624.png\" /></p>\n<h2 id=\"内置filter\"><a class=\"anchor\" href=\"#内置filter\">#</a> 内置 Filter</h2>\n<ol>\n<li>GateWay 内置的 Filter 生命周期为两种：pre（业务逻辑之前）、post（业务逻辑之后）</li>\n<li>GateWay 本身自带的 Filter 分为两种： GateWayFilter（单一）、GlobalFilter（全局）</li>\n<li>单一的有 32 种，全局的有 9 种</li>\n<li>官方网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctY2xvdWQtZ2F0ZXdheS9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvI2dsb2JhbC1maWx0ZXJz\">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#global-filters</span></li>\n</ol>\n<p>这个数量实在是太惊人了，而且用法都比较简单，所以这里大家可以自行根据官网给出的演示进行练习，在这里给大家举一个例子</p>\n<h3 id=\"stripprefix\"><a class=\"anchor\" href=\"#stripprefix\">#</a> StripPrefix</h3>\n<p>该 StripPrefix 有一个参数，parts。该 parts 参数指示在将请求发送到下游之前要从请求中剥离的路径中的部分数。</p>\n<p>案例：比如我们现在在 9001 微服务上加一个 context-path 配置</p>\n<pre><code>server:\n  port: 9001\n  servlet:\n    context-path: /nacos-provider\n.....\n</code></pre>\n<p>现在 9001 的访问路径变为<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MDAxL25hY29zLXByb3ZpZGVyL21zYi9nZXQ=\"> http://localhost:9001/nacos-provider/msb/get</span></p>\n<p>目前的网关 9999 配置信息为</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token punctuation\">:</span> <span class=\"token number\">9999</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>gateway<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nacos<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      discovery<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        server<span class=\"token punctuation\">-</span><span class=\"token key atrule\">addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    gateway<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      discovery<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        locator<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          enabled<span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 是否与服务发现进行组合，通过 ServiceID 转发到具体的服务实例，默认为 false，</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token comment\"># 设置为 true 便开启通过服务注册中心来自动根据 SeviceID 创建路由功能。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      routes<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>provider <span class=\"token comment\"># 路由 ID，唯一不可重复，最好配合服务名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          uri<span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//nacos<span class=\"token punctuation\">-</span>provider <span class=\"token comment\"># 匹配提供服务的路由地址 lb:// 代表开启负载均衡</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          predicates<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 断言</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">-</span> Path=/msb/<span class=\"token important\">**</span> <span class=\"token comment\"># 匹配对应地址</span></pre></td></tr></table></figure><p>为了保证断言能够匹配，此时通过网关的访问地址应该改为：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5OTk5L21zYi9uYWNvcy1wcm92aWRlci9tc2IvZ2V0\">http://localhost:9999/msb/nacos-provider/msb/get</span>，但是出现了 404，因为多了一层路径<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MDAxL21zYi9uYWNvcy1wcm92aWRlci9tc2IvZ2V0\"> http://localhost:9001/msb/nacos-provider/msb/get</span></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641558027000/eb87d2b41baf4409a8ff689b03de1b3f.png\" alt=\"image20220107192432401.png\" /></p>\n<p>那么如果想要解决，我们应该在转发的时候去地址中最前面的 /msb，所以我们就需要使用 FIlter：StripPrefix</p>\n<p>yml</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">server</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token punctuation\">:</span> <span class=\"token number\">9999</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>gateway<span class=\"token punctuation\">-</span>service</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nacos<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      discovery<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        server<span class=\"token punctuation\">-</span><span class=\"token key atrule\">addr</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    gateway<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      discovery<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        locator<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          enabled<span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 是否与服务发现进行组合，通过 ServiceID 转发到具体的服务实例，默认为 false，</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                        <span class=\"token comment\"># 设置为 true 便开启通过服务注册中心来自动根据 SeviceID 创建路由功能。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      routes<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> nacos<span class=\"token punctuation\">-</span>provider <span class=\"token comment\"># 路由 ID，唯一不可重复，最好配合服务名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          uri<span class=\"token punctuation\">:</span> lb<span class=\"token punctuation\">:</span>//nacos<span class=\"token punctuation\">-</span>provider <span class=\"token comment\"># 匹配提供服务的路由地址 lb:// 代表开启负载均衡</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          predicates<span class=\"token punctuation\">:</span> <span class=\"token comment\"># 断言</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">-</span> Path=/msb/<span class=\"token important\">**</span> <span class=\"token comment\"># 匹配对应地址</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          filters<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">-</span> StripPrefix=1 <span class=\"token comment\"># 去掉地址中的第一部分</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token comment\"># http://localhost:9999/msb/nacos-provider/msb/get</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token comment\"># http://localhost:9999/nacos-provider/msb/get</span></pre></td></tr></table></figure><p>最后我们来看效果，成功转发</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641558027000/386221c4ba7a4b1ba809ff3a4df07a17.png\" alt=\"image20220107193321333.png\" /></p>\n<h2 id=\"自定义filter\"><a class=\"anchor\" href=\"#自定义filter\">#</a> 自定义 Filter</h2>\n<p>要实现 GateWay 自定义过滤器，那么我们需要实现两个接口</p>\n<ul>\n<li>GlobalFilter</li>\n<li>Ordered</li>\n</ul>\n<h3 id=\"演示\"><a class=\"anchor\" href=\"#演示\">#</a> 演示</h3>\n<p>首先我们新建一个类 MyFilter</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Ordered</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">GlobalFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @param exchange 可以拿到对应的 request 和 response</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * @param chain 过滤器链</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * @return 是否放行</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GatewayFilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueryParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*************MyFilter:\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>username <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"**********用户名为null，非法用户，请求被拒绝！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 如果 username 为空，返回状态码为 406，不可接受的请求</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStatusCode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_ACCEPTABLE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> exchange<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>exchange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 加载过滤器的顺序</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * @return 整数数字越小优先级越高</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试，此时我们的逻辑是在访问同时要传入 username 参数同时不能为空，否则不会放行本次请求。</p>\n<p>传入正确参数：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641558027000/77ae413012cd46cbb75379f86cdb4d01.png\" alt=\"image20220107201951485.png\" /></p>\n<p>未传入正确参数：</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1396/1641558027000/670b520f4edc4c57937334a6a7be2155.png\" alt=\"image20220107202003694.png\" /></p>\n<h1 id=\"gateway的跨域\"><a class=\"anchor\" href=\"#gateway的跨域\">#</a> Gateway 的跨域</h1>\n<p>一旦我们用了 Gateway 服务做了我们的网关服务，那么首先我们就要先解决我们<strong>网关服务的跨域</strong>问题。</p>\n<p>在我们的网关服务中添加对于跨域的配置</p>\n<ol>\n<li>\n<p>建立一个网关服务的配置类 ，exmaple:  <code>GatewayConfig</code></p>\n</li>\n<li>\n<p>添加跨域的配置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>cors<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CorsConfiguration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>cors<span class=\"token punctuation\">.</span>reactive<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">CorsWebFilter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>cors<span class=\"token punctuation\">.</span>reactive<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">UrlBasedCorsConfigurationSource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>pattern<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathPatternParser</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GatewayConfiguration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CorsWebFilter</span> <span class=\"token function\">corsWebFilter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">CorsConfiguration</span> config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">addAllowedHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">addAllowedMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">addAllowedOrigin</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlBasedCorsConfigurationSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PathPatternParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        source<span class=\"token punctuation\">.</span><span class=\"token function\">registerCorsConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CorsWebFilter</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>重启服务</p>\n</li>\n</ol>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "微服务",
                "Gateway",
                "spring-cloud-alibaba"
            ]
        },
        {
            "id": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "url": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "title": "Sentinel源码系统学习",
            "date_published": "2023-07-10T13:53:51.000Z",
            "content_html": "<h1 id=\"sentinel核心源码分析-课程开篇\"><a class=\"anchor\" href=\"#sentinel核心源码分析-课程开篇\">#</a> Sentinel 核心源码分析 - 课程开篇</h1>\n<p>Sentinel 是分布式系统的防御系统。以流量为切入点，通过动态设置的流量控制、服务熔断等手段达到 保护系统的目的，通过服务降级增强服务被拒后用户的体验。</p>\n<h2 id=\"sentinel工作原理\"><a class=\"anchor\" href=\"#sentinel工作原理\">#</a> Sentinel 工作原理</h2>\n<p><strong>ProcessorSlotChain</strong></p>\n<p>Sentinel 的核心骨架，将不同的 Slot 按照顺序串在一起（责任链模式），从而将不同的功能（限流、降级、系统保护）组合在一起。slot chain 其实可以分为两部分：统计数据构建部分（statistic）和判断部分（rule checking）。核心结构</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/sentinel-slot-chain-architecture.png\" class=\"\" title=\"arch overview\">\n<p>Sentinel 将  <code>ProcessorSlot</code>  作为 SPI 接口进行扩展，使得 Slot Chain 具备了扩展的能力。您可以自行加入自定义的 slot 并编排 slot 间的顺序，从而可以给 Sentinel 添加自定义的功能。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/46783631-93324d00-cd5d-11e8-8ad1-a802bcc8f9c9.png\" class=\"\" title=\"Slot Chain SPI\">\n<h2 id=\"官方版本说明\"><a class=\"anchor\" href=\"#官方版本说明\">#</a> 官方版本说明</h2>\n<p>通过官方网站我们可以看到现在应该使用的 Sentinel 版本，通过官方的要求我们下载对应版本的 Sentinel 源码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvc3ByaW5nLWNsb3VkLWFsaWJhYmEvd2lraS8lRTclODklODglRTYlOUMlQUMlRTglQUYlQjQlRTYlOTglOEU=\">https://github.com/alibaba/spring-cloud-alibaba/wiki/ 版本说明</span></p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211116203605431.png\" class=\"\" title=\"image-20211116203605431\">\n<h2 id=\"sentinel源码下载\"><a class=\"anchor\" href=\"#sentinel源码下载\">#</a> Sentinel 源码下载</h2>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWwvdHJlZS9yZWxlYXNlLTEuOA==\">https://github.com/alibaba/Sentinel/tree/release-1.8</span></p>\n<p>下载方式，我们可以下载 zip 包，也可以直接通过 idea 进行下载和打开</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211116203821710.png\" class=\"\" title=\"image-20211116203821710\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211116203908000.png\" class=\"\" title=\"image-20211116203908000\">\n<h1 id=\"sentinel核心概念\"><a class=\"anchor\" href=\"#sentinel核心概念\">#</a> Sentinel 核心概念</h1>\n<p>Sentinel 作为 ali 开源的一款轻量级流控框架，<strong>主要以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度来帮助用户保护服务的稳定性</strong>。相比于 Hystrix，Sentinel 的设计更加简单，在 Sentinel 中资源定义和规则配置是分离的，也就是说用户可以先通过 Sentinel API 给对应的业务逻辑定义资源（埋点），然后在需要的时候再配置规则，通过这种组合方式，极大的增加了 Sentinel 流控的灵活性。</p>\n<p>引入 Sentinel 带来的性能损耗非常小。只有在业务单机量级超过 25W QPS 的时候才会有一些显著的影响（5% - 10% 左右），单机 QPS 不太大的时候损耗几乎可以忽略不计。</p>\n<p>Sentinel 提供两种埋点方式：</p>\n<ul>\n<li>\n<p>try-catch 方式（通过 SphU.entry (...)），用户在 catch 块中执行异常处理</p>\n</li>\n<li>\n<p>if-else 方式（通过 SphO.entry (...)），当返回 false 时执行异常处理</p>\n</li>\n</ul>\n<h2 id=\"工作流程\"><a class=\"anchor\" href=\"#工作流程\">#</a> 工作流程</h2>\n<p>在此之前，需要先了解一下 Sentinel 的工作流程</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/sentinel-slot-chain-architecture.png\" class=\"\" title=\"sentinel-slot-chain-architecture\">\n<p>在 Sentinel 里面，所有的资源都对应一个资源名称（resourceName），每次资源调用都会创建一个 Entry 对象。Entry 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 SphU API 显式创建。Entry 创建的时候，同时也会创建一系列功能插槽（slot chain），这些插槽有不同的职责，例如默认情况下会创建一下 7 个插槽：</p>\n<ul>\n<li>NodeSelectorSlot 负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级；</li>\n<li>ClusterBuilderSlot 则用于存储资源的统计信息以及调用者信息，例如该资源的 RT, QPS, thread count 等等，这些信息将用作为多维度限流，降级的依据，对应簇点链路；</li>\n<li>StatisticSlot 则用于记录、统计不同纬度的 runtime 指标监控信息；</li>\n<li>FlowSlot 则用于根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制，对应流控规则；</li>\n<li>AuthoritySlot 则根据配置的黑白名单和调用来源信息，来做黑白名单控制，对应授权规则；</li>\n<li>DegradeSlot 则通过统计信息以及预设的规则，来做熔断降级，对应熔断规则；</li>\n<li>SystemSlot 则通过系统的状态，例如 load1 等，来控制总的入口流量，对应系统规则；</li>\n</ul>\n<p>重要的概念：</p>\n<ul>\n<li>slot chain：插槽</li>\n<li>Node：根节点</li>\n<li>Context：对资源操作时的上下文环境，每个资源操作 ( <code>针对Resource进行的entry/exit</code> ) 必须属于一个 Context，如果程序中未指定 Context，会创建 name 为 &quot;sentinel_default_context&quot; 的默认 Context。一个 Context 生命周期内可能有多个资源操作，Context 生命周期内的最后一个资源 exit 时会清理该 Context，这也预示这真个 Context 生命周期的结束。</li>\n<li>Entry：表示一次资源操作，内部会保存当前调用信息。在一个 Context 生命周期中多次资源操作，也就是对应多个 Entry，这些 Entry 形成 parent/child 结构保存在 Entry 实例中</li>\n</ul>\n<h2 id=\"官方案例演示\"><a class=\"anchor\" href=\"#官方案例演示\">#</a> 官方案例演示</h2>\n<p>我们先从官方文档提供的演示代码来进行分析</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211118223922490.png\" class=\"\" title=\"image-20211118223922490\">\n<p>我们来改写一下，如果只有一个资源情况如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Entry</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SphU</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ContextUtil</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BlockException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContextDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 创建一个来自 appA 访问的 Context</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//Context 的名称为 entrance1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entrance1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// Entry 就是一个资源操作对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Entry</span> nodeA <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 获取资源 resource 的 entry</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            nodeA <span class=\"token operator\">=</span> <span class=\"token class-name\">SphU</span><span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resource1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 后续会展开这个位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 如果代码走到这个位置，说明当前资源的请求通过了流控，可以继续进行相关业务处理</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 如果没有通过走到了这里，就表示请求被限流，这里进行降级操作</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeA <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                nodeA<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 释放 Context</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>多个资源的情况</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContextDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 创建一个来自 appA 访问的 Context</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//Context 的名称为 entrance1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entrance1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// Entry 就是一个资源操作对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Entry</span> nodeA <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Entry</span> nodeB <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 获取资源 resource1 的 entry</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            nodeA <span class=\"token operator\">=</span> <span class=\"token class-name\">SphU</span><span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resource1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 如果代码走到这个位置，说明当前资源的请求通过了流控，可以继续进行相关业务处理</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 获取资源 resource2 的 entry</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            nodeB <span class=\"token operator\">=</span> <span class=\"token class-name\">SphU</span><span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resource2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 如果代码走到这个位置，说明当前资源的请求通过了流控，可以继续进行相关业务处理</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 如果没有通过走到了这里，就表示请求被限流，这里进行降级操作</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeA <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                nodeA<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeB <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                nodeB<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 释放 Context</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sentinel源码解析-node之间的关系\"><a class=\"anchor\" href=\"#sentinel源码解析-node之间的关系\">#</a> Sentinel 源码解析 - Node 之间的关系</h1>\n<p>在上节课我们通过官方演示代码，搞清楚一个 Context 之中，Resource 和 Entry 的关系，一个 Context 中可以有多个 Resource，每个资源都必须都应一个 Entry，这节课我们来研究一下 Node 之间的关系</p>\n<h2 id=\"node-关系官方图解\"><a class=\"anchor\" href=\"#node-关系官方图解\">#</a> Node 关系官方图解</h2>\n<p>这张图的上班部分其实体现了 Node 之间的关系，官方提供的图不够明显，我们需要进行细化</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/sentinel-slot-chain-architecture.png\" class=\"\" title=\"sentinel-slot-chain-architecture\">\n<p>要先理解这个官方提供的图，我们需要看一下源码的关系</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211119175902973.png\" class=\"\" title=\"image-20211119175902973\">\n<p>从这张图片我们能够提取出几个 Node：</p>\n<ul>\n<li>Node：接口，Sentinel 里面的各种种类的统计节点</li>\n<li>StatisticNode：统计节点，是 Node 的实现类，用于完成数据统计</li>\n<li>EntranceNode：DefaultNode 的子类，入口节点，一个 Context 会有一个入口节点，用于统计当前 Context 的总体流量数据，统计维度为 Context</li>\n<li>DefaultNode：默认节点，用于统计一个 resource 在当前 Context 中的流量数据，DefaultNode 持有指定的 Context 和指定的 Resource 的统计数据，意味着 DefaultNode 是以 Context 和 Resource 为维度的统计节点</li>\n<li>ClusterNode：ClusterNode 保存的是同一个 Resource 的相关的统计信息，是以 Resource 为维度的，不区分 Context，这个是和 DefaultNode 的区别</li>\n</ul>\n<h2 id=\"node之间的关系\"><a class=\"anchor\" href=\"#node之间的关系\">#</a> Node 之间的关系</h2>\n<p>Node 接口定义了一个 Node 类所需要提供的各项指标数据统计的相关功能，为外部屏蔽滑动窗口的存在。提供记录请求被拒绝、请求被放行、请求处理异常、请求处理成功的方法，以及获取当前时间窗口统计的请求总数、平均耗时等方法。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211123135428060.png\" class=\"\" title=\"image-20211123135428060\">\n<h2 id=\"案例代码改进\"><a class=\"anchor\" href=\"#案例代码改进\">#</a> 案例代码改进</h2>\n<p>昨天我们通过官方提供的演示案例写一个演示代码，那么我们为了理解这个 Node 之间的关系，我们再来增加一些代码，为了理解 Node 之间的关系</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 增加一个 Context</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">demo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Entry</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Sph</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SphU</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ContextUtil</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BlockException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContextDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 创建一个来自 appA 访问的 Context</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// Context 的名称为 entrance1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entrance1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// Entry 就是一个资源操作对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Entry</span> nodeA <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Entry</span> nodeB <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 获取资源 resource 的 entry</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            nodeA <span class=\"token operator\">=</span> <span class=\"token class-name\">SphU</span><span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resource1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 后续会展开这个位置</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 如果代码走到这个位置，就说明当前请求通过了流控，可以继续记性相关业务处理</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            nodeB <span class=\"token operator\">=</span> <span class=\"token class-name\">SphU</span><span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resource2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">// 如果代码走到这个位置，就说明当前请求通过了流控，可以继续记性相关业务处理</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 如果没有通过走到了这里，就表示请求被限流，这里进行降级操作</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeA <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                nodeA<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeB <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                nodeB<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 释放 Context</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>       <span class=\"token comment\">//--------------------- 创建另一个来自 appA 访问的 Context------------------------------</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 创建一个来自 appA 访问的 Context</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// Context 的名称为 entrance1</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"entrance2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"appA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// Entry 就是一个资源操作对象</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token class-name\">Entry</span> nodeC <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            nodeB <span class=\"token operator\">=</span> <span class=\"token class-name\">SphU</span><span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resource2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token comment\">// 如果代码走到这个位置，就说明当前请求通过了流控，可以继续记性相关业务处理</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            nodeC <span class=\"token operator\">=</span> <span class=\"token class-name\">SphU</span><span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resource3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 如果没有通过走到了这里，就表示请求被限流，这里进行降级操作</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeB <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                nodeB<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nodeC <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                nodeC<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token comment\">// 释放 Context</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sentinel源码解析-源码入口\"><a class=\"anchor\" href=\"#sentinel源码解析-源码入口\">#</a> Sentinel 源码解析 - 源码入口</h1>\n<h2 id=\"分析入口\"><a class=\"anchor\" href=\"#分析入口\">#</a> 分析入口</h2>\n<p>在微服务的使用 Sentinel 实际工作场景中，我们只需要引入对应依赖：spring-cloud-starter-alibaba-sentinel，就会进行自动装配，所以我们之间看 META-INF/spring.factories，然后我们这里从 SentinelAutoConfiguration 开始看起</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211123175158774.png\" class=\"\" title=\"image-20211123175158774\">\n<p>为了我们方便跟踪，我们在找到这个类型以后，直接通过源码进行查看，然后在这个类型中我们要找到以下代码，之前我们就说过 Sentinel 是通过 AOP 的方式进行切入的，从这里我们看到了 Aspect 关键字，所以我们就从这里跟进去</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ConditionalOnMissingBean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SentinelResourceAspect</span> <span class=\"token function\">sentinelResourceAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SentinelResourceAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>跟进去以后，我们就会发现这里就是再利用 AOP 通过 @SentinelResource 为注解来作为切入点，进行切入</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Aspect</span> <span class=\"token comment\">// 切面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SentinelResourceAspect</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractSentinelAspectSupport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 指定切入点为 SentinelResource 注解</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Pointcut</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@annotation(com.alibaba.csp.sentinel.annotation.SentinelResource)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sentinelResourceAnnotationPointcut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再往下跟我们会发现，还有 @Around 注解进行环绕通知，根据我们之前学习的知道我们从这里可以得知，其实这就是是利用 @SentinelResource 注解作为切点，然后在通过 AOP 环绕通知，来进行增强，在执行原方法前，来执行对应操作，当然这里我们可以看出，一旦出现了限流或者限流就会走 BlockException。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 环绕通知</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Around</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sentinelResourceAnnotationPointcut()\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">invokeResourceWithSentinel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProceedingJoinPoint</span> pjp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Method</span> originMethod <span class=\"token operator\">=</span> <span class=\"token function\">resolveMethod</span><span class=\"token punctuation\">(</span>pjp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">SentinelResource</span> annotation <span class=\"token operator\">=</span> originMethod<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SentinelResource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>annotation <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// Should not go through here.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong state for SentinelResource annotation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">String</span> resourceName <span class=\"token operator\">=</span> <span class=\"token function\">getResourceName</span><span class=\"token punctuation\">(</span>annotation<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> originMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">EntryType</span> entryType <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">entryType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> resourceType <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">resourceType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 创建资源操作对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        entry <span class=\"token operator\">=</span> <span class=\"token class-name\">SphU</span><span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>resourceName<span class=\"token punctuation\">,</span> resourceType<span class=\"token punctuation\">,</span> entryType<span class=\"token punctuation\">,</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 调用原方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">proceed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">handleBlockException</span><span class=\"token punctuation\">(</span>pjp<span class=\"token punctuation\">,</span> annotation<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> exceptionsToIgnore <span class=\"token operator\">=</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionsToIgnore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// The ignore list will be checked first.</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exceptionsToIgnore<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">exceptionBelongsTo</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> exceptionsToIgnore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">exceptionBelongsTo</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> annotation<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionsToTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">traceException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">handleFallback</span><span class=\"token punctuation\">(</span>pjp<span class=\"token punctuation\">,</span> annotation<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// No fallback function can handle the exception, so throw it out.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">throw</span> ex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            entry<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pjp<span class=\"token punctuation\">.</span><span class=\"token function\">getArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在以上的这段代码中还有一个问题，我们在之前就说过，在创建资源操作对象的时候我们需要先创建 Context，但是明显这里没有显示创建，但是实际上我们如果看 Context 概念的话，就会知道，如果程序中未指定 Context，会创建 name 为 &quot;sentinel_default_context&quot; 的默认 Context，然后我们继续往下跟踪。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Entry</span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resourceType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EntryType</span> trafficType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BlockException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 限流方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Env</span><span class=\"token punctuation\">.</span>sph<span class=\"token punctuation\">.</span><span class=\"token function\">entryWithType</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> resourceType<span class=\"token punctuation\">,</span> trafficType<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>进入到 entry 方法中，这里的 entryWithType 方法就是我们要看的真正的限流的方法，具体的实现方法在<strong> com.alibaba.csp.sentinel.CtSph.entryWithType</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span> <span class=\"token function\">entryWithType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resourceType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EntryType</span> entryType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BlockException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">entryWithType</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> resourceType<span class=\"token punctuation\">,</span> entryType<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span> <span class=\"token function\">entryWithType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resourceType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EntryType</span> entryType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                           <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BlockException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 这里将资源的名称和信息封装称为资源对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">StringResourceWrapper</span> resource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringResourceWrapper</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> entryType<span class=\"token punctuation\">,</span> resourceType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 返回一个 Entry 资源操作对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//prioritized 属性表示优先级，默认值为 false，表示当前请求不按照优先级执行，直接执行</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">entryWithPriority</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们接下来来具体分析核心方法 entryWithPriority</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span> <span class=\"token function\">entryWithPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BlockException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 从当前线程中获取 Context</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 一个请求会占用一个线程，并且绑定一个 Context</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Context</span> context <span class=\"token operator\">=</span> <span class=\"token class-name\">ContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 一个请求对应一个 Context</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   \t<span class=\"token comment\">// 如果当前类型为 NullContext，表示此时请求已经超出了阈值，无需检测规则</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">NullContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// The &#123;@link NullContext&#125; indicates that the amount of context has exceeded the threshold,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// so here init the entry only. No rule checking will be done.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CtEntry</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 此时如果获取 Context 为空，就创建默认的 sentinel_default_context，并且会放入到当前线程中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// Using default context.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        context <span class=\"token operator\">=</span> <span class=\"token class-name\">InternalContextUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">internalEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTEXT_DEFAULT_NAME</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 判断全局开关，如果是关闭状态，直接返回无需检测规则</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// Global switch is close, no rule checking will do.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ON</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CtEntry</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     * 这里是整个架构的核心所在，这里是在构建一个处理链，这个处理链是一个单向链表结构，类似于 Filter 一样，构建这个链条的</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * 原因是对业务进行解耦，像限流资源保护有很多，比如限流、降级、热点参数、系统降级等等，如果都写在一起就耦合很严重，我们知道 oop 的</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 思想就是让每个类确定各自的职责，不要让他做不相干的事情，所以这里将业务进行全面解耦，然后在解耦的同时又通过链式编程将它们串起来</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">ProcessorSlot</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> chain <span class=\"token operator\">=</span> <span class=\"token function\">lookProcessChain</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>         * Means amount of resources (slot chain) exceeds &#123;@link Constants.MAX_SLOT_CHAIN_SIZE&#125;,</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>         * so no rule checking will be done.</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chain <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CtEntry</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CtEntry</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 针对资源操作</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        chain<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">throw</span> e1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// This should not happen, unless there are errors existing in Sentinel internal.</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token class-name\">RecordLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sentinel unexpected exception\"</span><span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sentinel源码解析-构建context\"><a class=\"anchor\" href=\"#sentinel源码解析-构建context\">#</a> Sentinel 源码解析 - 构建 Context</h1>\n<p>我们继续分析当前这个类型中的 InternalContextUtil.internalEnter (Constants.CONTEXT_DEFAULT_NAME); 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* This class is used for skip context name checking.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>此类型是用于跳过 Context 名称的检测</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InternalContextUtil</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ContextUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Context</span> <span class=\"token function\">internalEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 从这里继续跟踪</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">trueEnter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Context</span> <span class=\"token function\">internalEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> origin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">trueEnter</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先这里要明确一下，一个 Context 的组成实际上需要 name (名称) 和 origin (来源)，所以方法上传入这两个参数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Context</span> <span class=\"token function\">trueEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> origin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 从当前线程中获取当前 context 名称</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Context</span> context <span class=\"token operator\">=</span> contextHolder<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 如果当前 context 为空</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>context <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 从缓存中获取，当前缓存中 key 值为：Context 名称，value 值为：EntranceNode</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// （因为后续创建的是 EntranceNode），需要它的原因是因为构建 Context 需要 EntranceNode</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">></span></span> localCacheNameMap <span class=\"token operator\">=</span> contextNameNodeMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 在缓存中获取 EntranceNode</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">DefaultNode</span> node <span class=\"token operator\">=</span> localCacheNameMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 如果 node 为空</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 当前缓存的 size>Context 的最大数量，返回 NULL_Context 类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>localCacheNameMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_CONTEXT_NAME_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token function\">setNullContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL_CONTEXT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// 加锁</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token constant\">LOCK</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    node <span class=\"token operator\">=</span> contextNameNodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token comment\">// 这里两次判断是采用了双重检测锁的机制：为了防止并发创建</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>contextNameNodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_CONTEXT_NAME_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                            <span class=\"token function\">setNullContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                            <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL_CONTEXT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                            <span class=\"token comment\">//node 赋值为 EntranceNode</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                            node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EntranceNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringResourceWrapper</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EntryType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                            <span class=\"token comment\">// Add entrance node.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                            <span class=\"token comment\">// 将新建的 EntranceNode 添加到 ROOT 中</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                            <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ROOT</span><span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                            <span class=\"token comment\">// 将新建的 EntranceNode 添加到缓存中</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                            <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">></span></span> newMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>contextNameNodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            newMap<span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>contextNameNodeMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                            newMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            contextNameNodeMap <span class=\"token operator\">=</span> newMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token constant\">LOCK</span><span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">// 将 name 和 node 封装成 Context</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        context <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Context</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 设定来源</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">setOrigin</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">// 将 context 写入到当前线程中</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        contextHolder<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// 返回 Context</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sentinel源码解析-slotchain入口解析\"><a class=\"anchor\" href=\"#sentinel源码解析-slotchain入口解析\">#</a> Sentinel 源码解析 - SlotChain 入口解析</h1>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/sentinel-slot-chain-architecture.png\" class=\"\" title=\"arch overview\">\n<h2 id=\"默认chain解析\"><a class=\"anchor\" href=\"#默认chain解析\">#</a> 默认 Chain 解析</h2>\n<p>​\t我们从这里继续分析，这个位置的 chain.entry 方法，但是此时这个 chain 是谁？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//CtSph 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 针对资源操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    chain<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    e<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">throw</span> e1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// This should not happen, unless there are errors existing in Sentinel internal.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">RecordLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sentinel unexpected exception\"</span><span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么这个位置开始，我们就要分析一下如下代码</p>\n<p>官方定义：Sentinel 将 ProcessorSlot 作为 SPI 接口进行扩展（1.7.2 版本以前 SlotChainBuilder 作为 SPI），使得 Slot Chain 具备了扩展的能力。您可以自行加入自定义的 slot 并编排 slot 间的顺序，从而可以给 Sentinel 添加自定义的功能。</p>\n<p>lookProcessChain () 用于构建一个责任链。Sentinel 的处理核心都在这个责任链中，链中每一个节点是一个 Slot 实例，这个链通过 BlockException 异常来告知调用入口最终的执行情况</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取 chain 链</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ProcessorSlot</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> chain <span class=\"token operator\">=</span> <span class=\"token function\">lookProcessChain</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//------------------- 具体看 lookProcessChain 方法 ---------------------</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">ProcessorSlot</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">lookProcessChain</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 先从 chainMap 获取，若是存在，则直接返回</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">ProcessorSlotChain</span> chain <span class=\"token operator\">=</span> chainMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chain <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">LOCK</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            chain <span class=\"token operator\">=</span> chainMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chain <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">// Entry size limit.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>chainMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token class-name\">Constants</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_SLOT_CHAIN_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token comment\">// 通过 SlotChainProvider 创建一个 slot 链</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                chain <span class=\"token operator\">=</span> <span class=\"token class-name\">SlotChainProvider</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSlotChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResourceWrapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ProcessorSlotChain</span><span class=\"token punctuation\">></span></span> newMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResourceWrapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ProcessorSlotChain</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    chainMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                newMap<span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>chainMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 添加到 Map 缓存中</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                newMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">,</span> chain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                chainMap <span class=\"token operator\">=</span> newMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个位置我们要具体分析 SlotChainProvider 这个类型，它的主要作用就是通过已解析的槽链构建器，创建槽链的提供者</p>\n<p>从这里我们可以看出 SlotChainBuilder 及 ProcessorSlot 使用 Java SPI 技术实现可配置化，即在 / META-INF/services/ 接口全限命名 的文件中配置实现类，然后由 ServiceLoader 实现加载，这种技术在 SpringBoot 中都有使用。不作讲解。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slotchain</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RecordLog</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DefaultSlotChainBuilder</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>spi<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpiLoader</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * A provider for creating slot chains via resolved slot chain builder SPI.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * @author Eric Zhao</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * @since 0.2.0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SlotChainProvider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">SlotChainBuilder</span> slotChainBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * The load and pick process is not thread-safe, but it's okay since the method should be only invoked</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * via &#123;@code lookProcessChain&#125; in &#123;@link com.alibaba.csp.sentinel.CtSph&#125; under lock.</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @return new created slot chain</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ProcessorSlotChain</span> <span class=\"token function\">newSlotChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>slotChainBuilder <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> slotChainBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 读取配置文件在 / META-INF/services/ 接口全限定命名的文件中配置实现类.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        slotChainBuilder <span class=\"token operator\">=</span> <span class=\"token class-name\">SpiLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SlotChainBuilder</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadFirstInstanceOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>slotChainBuilder <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token comment\">// Should not go through here.</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">RecordLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[SlotChainProvider] Wrong state when resolving slot chain builder, using default\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">// 使用默认的 DefaultSlotChainBuilder 来构建 ProcessorSlotChain</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            slotChainBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultSlotChainBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">RecordLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[SlotChainProvider] Global slot chain builder resolved: &#123;&#125;\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                slotChainBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 使用 DefaultSlotChainBuilder 构建</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> slotChainBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SlotChainProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>到这里我们就清楚的知道了其实现在使用的是使用 DefaultSlotChainBuilder.build () 来创建的，以下是源码</p>\n<p>在这个其中，做了几件事：</p>\n<pre><code>1. 创建DefaultProcessorSlotChain\n2. 读取/META-INF/services/中的配置文件\n3. 强制转型为AbstractLinkedProcessorSlot（所有插槽的抽象父类）\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Spi</span><span class=\"token punctuation\">(</span>isDefault <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultSlotChainBuilder</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SlotChainBuilder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProcessorSlotChain</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 创建 DefaultProcessorSlotChain</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ProcessorSlotChain</span> chain <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultProcessorSlotChain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 读取配置文件在 / META-INF/services/ 接口全限定命名的文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ProcessorSlot</span><span class=\"token punctuation\">></span></span> sortedSlotList <span class=\"token operator\">=</span> <span class=\"token class-name\">SpiLoader</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessorSlot</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadInstanceListSorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ProcessorSlot</span> slot <span class=\"token operator\">:</span> sortedSlotList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>slot <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">AbstractLinkedProcessorSlot</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">RecordLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The ProcessorSlot(\"</span> <span class=\"token operator\">+</span> slot<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCanonicalName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\") is not an instance of AbstractLinkedProcessorSlot, can't be added into ProcessorSlotChain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            chain<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractLinkedProcessorSlot</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> slot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>具体读取的内容如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># <span class=\"token class-name\">Sentinel</span> <span class=\"token keyword\">default</span> <span class=\"token class-name\">ProcessorSlots</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>nodeselector<span class=\"token punctuation\">.</span></span>NodeSelectorSlot</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>clusterbuilder<span class=\"token punctuation\">.</span></span>ClusterBuilderSlot</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span></span>LogSlot</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>statistic<span class=\"token punctuation\">.</span></span>StatisticSlot</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span>authority<span class=\"token punctuation\">.</span></span>AuthoritySlot</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">.</span></span>SystemSlot</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span>flow<span class=\"token punctuation\">.</span></span>FlowSlot</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>slots<span class=\"token punctuation\">.</span>block<span class=\"token punctuation\">.</span>degrade<span class=\"token punctuation\">.</span></span>DegradeSlot</span></pre></td></tr></table></figure><p>这些就是 Sentinel 提供的默认功能插槽</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211209165106934.png\" class=\"\" title=\"image-20211209165106934\">\n<h2 id=\"nodeselectorslot解析\"><a class=\"anchor\" href=\"#nodeselectorslot解析\">#</a> NodeSelectorSlot 解析</h2>\n<p>分析到这里我们就可以回到 CtSph 中，查看 entry 方法这个时候我们就知道了实际上调用 entry 方法的是 DefaultProcessorSlotChain</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token comment\">// 针对资源操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     chain<span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     e<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token keyword\">throw</span> e1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token comment\">// This should not happen, unless there are errors existing in Sentinel internal.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token class-name\">RecordLog</span><span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sentinel unexpected exception\"</span><span class=\"token punctuation\">,</span> e1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那我们向下跟踪</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 转到下一个节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    first<span class=\"token punctuation\">.</span><span class=\"token function\">transformEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个位置是转入到下一个节点，那么下一个节点明显就是 NodeSelectorSlot，那我们来看具体操作</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">transformEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">T</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span>o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//NodeSelectorSlot</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>NodeSelectorSlot 具体内容官网有给出解释：</p>\n<p>这个 slot 主要负责收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级。</p>\n<p>DefaultNode 用于统计一个 resource 在当前 Context 中的流量数据，所以再结合 NodeSelectorSlot，最终得出结论：处理不同的 Context name，同一个 Resource name 的情况</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211209171805499.png\" class=\"\" title=\"image-20211209171805499\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211123135428060.png\" class=\"\" title=\"image-20211123135428060\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 从缓存中获取，创建 DefaultNode</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">DefaultNode</span> node <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 双重判断，如果判断为空</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            node <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 创建一个 DefaultNode 并且放入到缓存中</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">></span></span> cacheMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                cacheMap<span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                cacheMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                map <span class=\"token operator\">=</span> cacheMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// Build invocation tree</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 将新建的 Node 添加到调用树中</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getLastNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">setCurNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 触发下一个节点</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sentinel源码解析-clusterbuilderslot解析\"><a class=\"anchor\" href=\"#sentinel源码解析-clusterbuilderslot解析\">#</a> Sentinel 源码解析 - ClusterBuilderSlot 解析</h1>\n<p>上节课我们分析了 SlotChain 入口和 NodeSelectorSlot 那么这节课分析 ClusterBuilderSlot</p>\n<h2 id=\"官方定义\"><a class=\"anchor\" href=\"#官方定义\">#</a> 官方定义</h2>\n<p>ClusterBuilderSlot：则用于存储资源的统计信息以及调用者信息，例如该资源的 RT, QPS, thread count 等等，这些信息将用作为多维度限流，降级的依据；</p>\n<p>那我们来进行分析，首先我们先看上节课分析到的位置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//NodeSelectorSlot.entry()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 从缓存中获取，创建 DefaultNode</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">DefaultNode</span> node <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 双重判断，如果判断为空</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            node <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 创建一个 DefaultNode 并且放入到缓存中</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">></span></span> cacheMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                cacheMap<span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                cacheMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                map <span class=\"token operator\">=</span> cacheMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token comment\">// Build invocation tree</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 将新建的 Node 添加到调用树中</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultNode</span><span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getLastNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    context<span class=\"token punctuation\">.</span><span class=\"token function\">setCurNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 触发下一个节点</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再触发下一个节点以后，调用的是父级 AbstractLinkedProcessorSlot.fireEntry () 方法，然后 next 调用 transformEntry</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 调用下一个节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        next<span class=\"token punctuation\">.</span><span class=\"token function\">transformEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//next 就代表循环到下一个节点所以这里调用 entry 的就是 ClusterBuilderSlot</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">transformEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">T</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span>o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"clusterbuilderslot\"><a class=\"anchor\" href=\"#clusterbuilderslot\">#</a> ClusterBuilderSlot</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ClusterBuilderSlot.entry</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clusterNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clusterNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// Create the cluster node.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                clusterNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClusterNode</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">//key 为资源 value 为 ClusterNode</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResourceWrapper</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClusterNode</span><span class=\"token punctuation\">></span></span> newMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>clusterNodeMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                newMap<span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>clusterNodeMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                newMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> clusterNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                clusterNodeMap <span class=\"token operator\">=</span> newMap<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> \t<span class=\"token comment\">// 添加节点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    node<span class=\"token punctuation\">.</span><span class=\"token function\">setClusterNode</span><span class=\"token punctuation\">(</span>clusterNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         * if context origin is set, we should get or create a new &#123;@link Node&#125; of</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         * the specific origin.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 确认资源的来源</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Node</span> originNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getClusterNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrCreateOriginNode</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">getCurEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOriginNode</span><span class=\"token punctuation\">(</span>originNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h2>\n<p>ClusterNode 作用就是与 DefaultNode 进行关联，即不同的 DefaultNode 都关联了一个 ClusterNode，这样我们在不同上下文中都可以拿到当前资源一个总的流量统计情况。</p>\n<h1 id=\"sentinel源码解析-slot分析后续1\"><a class=\"anchor\" href=\"#sentinel源码解析-slot分析后续1\">#</a> Sentinel 源码解析 - Slot 分析后续 1</h1>\n<p>这节课我们继续分析 Sentinel 调用链路中的 Slot，那么我们还是先来分析 StatisticSlot：</p>\n<h2 id=\"statisticslot定义\"><a class=\"anchor\" href=\"#statisticslot定义\">#</a> StatisticSlot 定义：</h2>\n<p>StatisticSlot 是 Sentinel 最为重要的类之一，用于根据规则判断结果进行相应的统计操作。</p>\n<p>entry 的时候：依次执行后面的判断 slot。每个 slot 触发流控的话会抛出异常（BlockException 的子类）。若有 BlockException 抛出，则记录 block 数据；若无异常抛出则算作可通过（pass），记录 pass 数据。</p>\n<p>exit 的时候：若无 error（无论是业务异常还是流控异常），记录 complete（success）以及 RT，线程数 - 1。</p>\n<p>记录数据的维度：线程数 + 1、记录当前 DefaultNode 数据、记录对应的 originNode 数据（若存在 origin）、累计 IN 统计数据（若流量类型为 IN）。</p>\n<h2 id=\"分析源码核心方法\"><a class=\"anchor\" href=\"#分析源码核心方法\">#</a> 分析源码核心方法</h2>\n<p>首先我们从 ClusterNodeSlot 中的 entry 方法中找到调用下一节点方法，然后向下跟踪，道理和之前的都一样，调用的是父级方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//------------------- 父级方法 -----------------------------</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        next<span class=\"token punctuation\">.</span><span class=\"token function\">transformEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>找到 transformEntry 方法，然后此时的下一个节点必然是 StatisticSlot</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">transformEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">T</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span>o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//StatisticSlot</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后我们来看 StatisticSlot 的核心方法，这里的核心思想就是：封装了基础的流量统计和获取方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// Do some checking.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 此位置会调用 SlotChain 中后续的所有 Slot，完成所有规则检测。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// Request passed, add thread count and pass count.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 代码运行到这个位置，就证明之前的所有 Slot 检测都通过了，此时就可以统计请求的相应数据了。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 增加线程数（+1）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        node<span class=\"token punctuation\">.</span><span class=\"token function\">increaseThreadNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 增加通过请求的数量 (这里涉及到滑动窗口算法)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        node<span class=\"token punctuation\">.</span><span class=\"token function\">addPassRequest</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">//..... 以下全部是流量统计的方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看到这里以后，我们对 StatisticSlot 作用已经比较了解了，那么现在我们主要要分析这个位置，也就是说向下分析一下的节点</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里向下的节点调用方式和之前的都一样，所以剩下的节点非别为：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211213152938457.png\" class=\"\" title=\"image-20211213152938457\">\n<p>但是其实这里的 ParamFlowSlot 包括 SystemSlot 和 AuthoritySlot 我们在操作的时候其实就已经知道了它们就是根据不同维度进行统计和检测，那么这三个我们就不再详细分析，这条链路中我们要主要分析流控和熔断：FlowSlot、DegradeSlot</p>\n<h2 id=\"flowslot定义\"><a class=\"anchor\" href=\"#flowslot定义\">#</a> FlowSlot 定义：</h2>\n<p>这个 slot 主要根据预设的资源的统计信息，按照固定的次序，依次生效。如果一个资源对应两条或者多条流控规则，则会根据如下次序依次检验，直到全部通过或者有一个规则生效为止:</p>\n<ul>\n<li>指定应用生效的规则，即针对调用方限流的；</li>\n<li>调用方为 other 的规则；</li>\n<li>调用方为 default 的规则。</li>\n</ul>\n<h2 id=\"分析核心方法\"><a class=\"anchor\" href=\"#分析核心方法\">#</a> 分析核心方法</h2>\n<p>进入到核心方法的方式和之前的都一样，所以我们直接来看</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 检测并且应用流量规则</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">checkFlow</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 触发下一个 Slot</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那我们先来分析 checkFlow 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">checkFlow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceWrapper</span> resource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BlockException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在这里继续跟踪</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    checker<span class=\"token punctuation\">.</span><span class=\"token function\">checkFlow</span><span class=\"token punctuation\">(</span>ruleProvider<span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//---------------checkFlow 具体实现 ----------------------</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkFlow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> ruleProvider<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resource<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                      <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BlockException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 判断规则和资源不能为空</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ruleProvider <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> resource <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 获取到指定资源的所有流控规则</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span></span> rules <span class=\"token operator\">=</span> ruleProvider<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 逐个应用流控规则。若无法通过则抛出异常，后续规则不再应用</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rules <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FlowRule</span> rule <span class=\"token operator\">:</span> rules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canPassCheck</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// FlowException 继承 BlockException</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowException</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">.</span><span class=\"token function\">getLimitApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我们需要注意一下 FlowRule（流控规则），它继承自 AbstractRule，那我们来看一下 AbstractRule 其中的两个类型，分别是资源名称和资源的来源</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> resource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> limitApp<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>那么通过这里我们就可以得知，流控的规则设置其实就是通过这个 FlowRule 来完成的，同样它的数据来源，就是我们使用的 Sentinel-dashboard，当然也可以通过代码来进行设置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlowRule</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractRule</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 来源默认 Default</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">setLimitApp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LIMIT_APP_DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> resourceName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 资源名称</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">setResource</span><span class=\"token punctuation\">(</span>resourceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">setLimitApp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LIMIT_APP_DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     * The threshold type of flow control (0: thread count, 1: QPS).</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 设置阈值类型 0 是线程 1 为 QPS</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> grade <span class=\"token operator\">=</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FLOW_GRADE_QPS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * Flow control threshold count.</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 单机阈值</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     * Flow control strategy based on invocation chain.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * 直接流控</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     * &#123;@link RuleConstant#STRATEGY_DIRECT&#125; for direct flow control (by origin);</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * 关联流控</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * &#123;@link RuleConstant#STRATEGY_RELATE&#125; for relevant flow control (with relevant resource);</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * 链路流控</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * &#123;@link RuleConstant#STRATEGY_CHAIN&#125; for chain flow control (by entrance resource).</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 流控模式</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRATEGY_DIRECT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     * Reference resource in flow control with relevant resource or context.</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">// 关联流控模式，关联的资源设置</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> refResource<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     * Rate limiter control behavior.</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     * 0. default(reject directly), 1. warm up, 2. rate limiter, 3. warm up + rate limiter</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">// 流控效果 0 快速失败 1 预热（令牌桶算法） 2 排队等待（漏斗算法） 3 预热 + 排队等待（目前控制台没有）</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> controlBehavior <span class=\"token operator\">=</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONTROL_BEHAVIOR_DEFAULT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">//warp up 预热时长</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> warmUpPeriodSec <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     * Max queueing time in rate limiter behavior.</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\">// 排队等待的超时时间</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> maxQueueingTimeMs <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token comment\">// 是否为集群模式</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> clusterMode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     * Flow rule config for cluster mode.</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">// 集群模式配置</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ClusterFlowConfig</span> clusterConfig<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     * The traffic shaping (throttling) controller.</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TrafficShapingController</span> controller<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>   <span class=\"token comment\">//.... 省略以下方法</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里还涉及到两个算法：令牌桶算法和漏斗算法</p>\n<ul>\n<li>令牌桶算法：令牌桶算法的原理是系统会以一个恒定的速度往桶里放入令牌，而如果请求需要被处理，则需要先从桶里获取一个令牌，当桶里没有令牌可取时，则拒绝服务。</li>\n<li>漏斗算法：漏桶算法思路很简单，请求先进入到漏桶里，漏桶以固定的速度出水，也就是处理请求，当水加的过快，则会直接溢出，也就是拒绝请求，可以看出漏桶算法能强行限制数据的传输速率。</li>\n</ul>\n<h1 id=\"sentinel源码解析-slot分析后续2\"><a class=\"anchor\" href=\"#sentinel源码解析-slot分析后续2\">#</a> Sentinel 源码解析 - Slot 分析后续 2</h1>\n<p>这节课我们继续分析 Sentinel 调用链路中的 Slot，那么我们还是继续分析 FlowSlot</p>\n<h2 id=\"flowslot获取全部流控规则\"><a class=\"anchor\" href=\"#flowslot获取全部流控规则\">#</a> FlowSlot 获取全部流控规则</h2>\n<p>上节课我们分析到这个位置，这节课我们主要研究一下如何获取全部的流控规则</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取到指定资源的所有流控规则</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span></span> rules <span class=\"token operator\">=</span> ruleProvider<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 逐个应用流控规则。若无法通过则抛出异常，后续规则不再应用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rules <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FlowRule</span> rule <span class=\"token operator\">:</span> rules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canPassCheck</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// FlowException 继承 BlockException</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowException</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">.</span><span class=\"token function\">getLimitApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 这里调用的 apply 方法就是 FlowSlot 中的对应方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> ruleProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> resource<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// Flow rule map should not be null.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 获取所有资源和对应的流控规则 key 为资源名称，value 为该资源对应的所有流控规则</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> flowRules <span class=\"token operator\">=</span> <span class=\"token class-name\">FlowRuleManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFlowRuleMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 获取指定资源的流控规则</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> flowRules<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>那我们来看 apply 方法，要注意的是其中的 FlowRuleManager 其实如果我们通过代码的方式来设置流控就会使用到它，因为它提供了对应的方法 FlowRuleManager.loadRules ()</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* Load &#123;@link FlowRule&#125; s, former rules will be replaced.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 添加新的流控规则</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* @param rules new rules to load.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loadRules</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span></span> rules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    currentProperty<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>rules<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是现在这个位置源码用的 FlowRuleManager.getFlowRuleMap ()，其实通过这个方法我们就可以得知，FlowRuleManager 的作用就是设置对应资源的流控规则，资源对应的流控规则 (list 集合) 组成一个 Map</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取所有资源和对应的流控规则 key 为资源名称，value 为该资源对应的所有流控规则</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> flowRules <span class=\"token operator\">=</span> <span class=\"token class-name\">FlowRuleManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFlowRuleMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>那我们现在来看 FlowRuleChecker.checkFlow () 方法如何应用规则，这里我们要注意遍历</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">checkFlow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collection</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> ruleProvider<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resource<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                      <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BlockException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 判断规则和资源不能为空</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ruleProvider <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> resource <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取到指定资源的所有流控规则</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlowRule</span><span class=\"token punctuation\">></span></span> rules <span class=\"token operator\">=</span> ruleProvider<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>resource<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 逐个应用流控规则。若无法通过则抛出异常，后续规则不再应用</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rules <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FlowRule</span> rule <span class=\"token operator\">:</span> rules<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 遍历规则，应用规则，判断是否能够通过规则</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canPassCheck</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// FlowException 继承 BlockException</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FlowException</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">.</span><span class=\"token function\">getLimitApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那我们需要跟进去看一下 canPassCheck 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canPassCheck</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*@NonNull*/</span> <span class=\"token class-name\">FlowRule</span> rule<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> acquireCount<span class=\"token punctuation\">,</span><span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 从规则中获取要限定的来源</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> limitApp <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">.</span><span class=\"token function\">getLimitApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 如果来源为空，则请求直接通过</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>limitApp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 处理集群流控</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">.</span><span class=\"token function\">isClusterMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">passClusterCheck</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> acquireCount<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 处理单机流控</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">passLocalCheck</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> acquireCount<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么这里我们要关注的是处理单机流控的方法 passLocalCheck</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">passLocalCheck</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FlowRule</span> rule<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> acquireCount<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                      <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 根据请求选择节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Node</span> selectedNode <span class=\"token operator\">=</span> <span class=\"token function\">selectNodeByRequesterAndStrategy</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selectedNode <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 根据配置 FlowRule 配置的流控效果 (流控效果：直接拒绝、排队等待、预热)，选择不同的 Controller，判断是否通过</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> rule<span class=\"token punctuation\">.</span><span class=\"token function\">getRater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">canPass</span><span class=\"token punctuation\">(</span>selectedNode<span class=\"token punctuation\">,</span> acquireCount<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这里我们来看一下根据请求来选择节点</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">selectNodeByRequesterAndStrategy</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*@NonNull*/</span> <span class=\"token class-name\">FlowRule</span> rule<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// The limit app should not be empty.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取限定来源 (调用方)、流控模式（直接）、获取 context 中的调用发（从当前上下文环境中获取）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> limitApp <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">.</span><span class=\"token function\">getLimitApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> strategy <span class=\"token operator\">=</span> rule<span class=\"token punctuation\">.</span><span class=\"token function\">getStrategy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">String</span> origin <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 判断来源如果不是 Default（默认）和 Other（其他）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>limitApp<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">filterOrigin</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">==</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRATEGY_DIRECT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// Matches limit origin, return origin statistic node.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">selectReferenceNode</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 如果是默认来源</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LIMIT_APP_DEFAULT</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>limitApp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 是否是直接流控模式</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">==</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRATEGY_DIRECT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// Return the cluster node.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 返回统计数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">getClusterNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">selectReferenceNode</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 其他来源 other</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LIMIT_APP_OTHER</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>limitApp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>               <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name\">FlowRuleManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">isOtherOrigin</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">,</span> rule<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">==</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRATEGY_DIRECT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getOriginNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">selectReferenceNode</span><span class=\"token punctuation\">(</span>rule<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那到这为止，我们就知道如何获取流控规则和针对不同来源的不同操作，那么现在还有一个问题就是，就是这个位置的解析</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据配置 FlowRule 配置的流控效果 (流控效果：直接拒绝、排队等待、预热)，选择不同的 Controller，判断是否通过</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> rule<span class=\"token punctuation\">.</span><span class=\"token function\">getRater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">canPass</span><span class=\"token punctuation\">(</span>selectedNode<span class=\"token punctuation\">,</span> acquireCount<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"流控效果对应的controller\"><a class=\"anchor\" href=\"#流控效果对应的controller\">#</a> 流控效果对应的 Controller</h2>\n<p>其实这个位置的 rule.getRater () 的返回值类型为 TrafficShapingController，而这里的类结构为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">TrafficShapingController</span> <span class=\"token function\">getRater</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> controller<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211216210615881.png\" class=\"\" title=\"image-20211216210615881\">\n<p>其实从这里我们就能看出针对不同的流控模式，针对不同的控制器来进行处理，那么我们这里演示一个 DefaultController</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211216210800196.png\" class=\"\" title=\"image-20211216210800196\">\n<p>那我们现在来看一下具体 DefaultController 的操作，在 DefaultController 中，首先获取当前的线程数或者 QPS 数，如果当前的线程数或者 QPS + 申请的数量 &gt; 配置的总数，则不通过，如果当前线程数或者 QPS + 申请的数量 &lt;= 配置的总数，则直接通过</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultController</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TrafficShapingController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_AVG_USED_TOKENS</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> grade<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DefaultController</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> grade<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canPass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> acquireCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">canPass</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> acquireCount<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canPass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> acquireCount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 获取当前 node 节点的线程数或者请求通过的 qps 总数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> curCount <span class=\"token operator\">=</span> <span class=\"token function\">avgUsedTokens</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 当前请求数（请求的令牌）+ 申请总数是否（已经消耗的令牌）> 该资源配置的总数（阈值）</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curCount <span class=\"token operator\">+</span> acquireCount <span class=\"token operator\">></span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prioritized <span class=\"token operator\">&amp;&amp;</span> grade <span class=\"token operator\">==</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FLOW_GRADE_QPS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">long</span> currentTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">long</span> waitInMs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                waitInMs <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">tryOccupyNext</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">,</span> acquireCount<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>waitInMs <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">OccupyTimeoutProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOccupyTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    node<span class=\"token punctuation\">.</span><span class=\"token function\">addWaitingRequest</span><span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">+</span> waitInMs<span class=\"token punctuation\">,</span> acquireCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    node<span class=\"token punctuation\">.</span><span class=\"token function\">addOccupiedPass</span><span class=\"token punctuation\">(</span>acquireCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>waitInMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token comment\">// PriorityWaitException indicates that the request will pass after waiting for &#123;@link @waitInMs&#125;.</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityWaitException</span><span class=\"token punctuation\">(</span>waitInMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">avgUsedTokens</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant\">DEFAULT_AVG_USED_TOKENS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> grade <span class=\"token operator\">==</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FLOW_GRADE_THREAD</span> <span class=\"token operator\">?</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">curThreadNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">passQps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>timeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token comment\">// Ignore.</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"流程总结\"><a class=\"anchor\" href=\"#流程总结\">#</a> 流程总结</h2>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211216214823684.png\" class=\"\" title=\"image-20211216214823684\">\n<h1 id=\"sentinel源码解析-熔断降级degradeslot解析\"><a class=\"anchor\" href=\"#sentinel源码解析-熔断降级degradeslot解析\">#</a> Sentinel 源码解析 - 熔断降级 DegradeSlot 解析</h1>\n<p>上节课我们分析完了限流 FlowSlot，那么我们继续想下一个链路中的元素来看，下一个就是熔断降级的 Slot，那我们直接来看核心方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//DegradeSlot.entry</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 熔断降级检测</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">performChecking</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 触发下一个节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那我们先来跟踪熔断降级检测的方法，在这里我们可以看见，这里其实就是对熔断器的状态进行判断</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">performChecking</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BlockException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 获取所有资源的熔断器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CircuitBreaker</span><span class=\"token punctuation\">></span></span> circuitBreakers <span class=\"token operator\">=</span> <span class=\"token class-name\">DegradeRuleManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCircuitBreakers</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 判断是否获取到熔断器，如果为空直接结束</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>circuitBreakers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> circuitBreakers<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CircuitBreaker</span> cb <span class=\"token operator\">:</span> circuitBreakers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 判断所有熔断器的状态，如果是开启状态直接抛出异常</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cb<span class=\"token punctuation\">.</span><span class=\"token function\">tryPass</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 此异常继承于 BlockException</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DegradeException</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">.</span><span class=\"token function\">getRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLimitApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cb<span class=\"token punctuation\">.</span><span class=\"token function\">getRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而真正判断是否需要开启熔断器是在 exit 方法中进行的，这个方法是在业务方法执行以后调用了，熔断器需要手机业务异常或者业务的执行时间来判断是开启熔断</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 如果当前其他的 Slot 已经有了 BlockException，就直接跳过</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Entry</span> curEntry <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getCurEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getBlockError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">fireExit</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 通过资源名称获取熔断器</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CircuitBreaker</span><span class=\"token punctuation\">></span></span> circuitBreakers <span class=\"token operator\">=</span> <span class=\"token class-name\">DegradeRuleManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">getCircuitBreakers</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>circuitBreakers <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> circuitBreakers<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">fireExit</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curEntry<span class=\"token punctuation\">.</span><span class=\"token function\">getBlockError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// passed request</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 调用 CircuitBreaker 的 onRequestComplete () 方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CircuitBreaker</span> circuitBreaker <span class=\"token operator\">:</span> circuitBreakers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            circuitBreaker<span class=\"token punctuation\">.</span><span class=\"token function\">onRequestComplete</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">fireExit</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这个代码中，有一个比较关键的地方就是 CircuitBreaker（熔断器），那我们来分析一下：</p>\n<h2 id=\"circuitbreaker熔断器\"><a class=\"anchor\" href=\"#circuitbreaker熔断器\">#</a> CircuitBreaker 熔断器</h2>\n<p>首先我们要知道其实 CircuitBreaker 是一个接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 熔断器中将三种熔断策略封装（慢调用比例 / 异常比例 / 异常数）为两种熔断器：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 响应时间熔断器、异常熔断器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CircuitBreaker</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     * Get the associated circuit breaking rule.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @return associated circuit breaking rule</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * 获取熔断规则</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">DegradeRule</span> <span class=\"token function\">getRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     * Acquires permission of an invocation only if it is available at the time of invoking.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * @param context context of current invocation</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * @return &#123;@code true&#125; if permission was acquired and &#123;@code false&#125; otherwise</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * 判断是否需要降级 返回值为 false 开启降级</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryPass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * Get current state of the circuit breaker.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     * @return current state of the circuit breaker</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     * 当前熔断器状态</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">State</span> <span class=\"token function\">currentState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * &lt;p>Record a completed request with the context and handle state transformation of the circuit breaker.&lt;/p></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     * &lt;p>Called when a &lt;strong>passed&lt;/strong> invocation finished.&lt;/p></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @param context context of current invocation</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * 回调方法 当请求通过后触发</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">onRequestComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     * Circuit breaker state.</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     * 三种熔断器状态：</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     * OPEN 开启</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     * HALF_OPEN 半开启</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     * CLOSED 关闭</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>         * In &#123;@code OPEN&#125; state, all requests will be rejected until the next recovery time point.</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token constant\">OPEN</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>         * In &#123;@code HALF_OPEN&#125; state, the circuit breaker will allow a \"probe\" invocation.</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>         * If the invocation is abnormal according to the strategy (e.g. it's slow), the circuit breaker</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>         * will re-transform to the &#123;@code OPEN&#125; state and wait for the next recovery time point;</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>         * otherwise the resource will be regarded as \"recovered\" and the circuit breaker</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>         * will cease cutting off requests and transform to &#123;@code CLOSED&#125; state.</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token constant\">HALF_OPEN</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>         * In &#123;@code CLOSED&#125; state, all requests are permitted. When current metric value exceeds the threshold,</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>         * the circuit breaker will transform to &#123;@code OPEN&#125; state.</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token constant\">CLOSED</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上代码中其中三种熔断状态对应的原理如下（这个原理在基础应用讲过）</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211103194830095.png\" class=\"\" title=\"image-20211103194830095\">\n<h2 id=\"熔断策略\"><a class=\"anchor\" href=\"#熔断策略\">#</a> 熔断策略</h2>\n<p>对应的实现类有两个 ExceptionCircuitBreaker（异常熔断器）、ResponseTimeCircuitBreaker（响应时间熔断器），这个我们可以从类图看到</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211221193548988.png\" class=\"\" title=\"image-20211221193548988\">\n<p>那我们这里来看看 ExceptionCircuitBreaker (异常熔断器)，对应的策略是</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211221225941518.png\" class=\"\" title=\"image-20211221225941518\">\n<p>我们来看对应回调方法 ExceptionCircuitBreaker.onRequestComplete</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onRequestComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Entry</span> entry <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getCurEntry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entry <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Throwable</span> error <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 异常事件窗口计数器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">SimpleErrorCounter</span> counter <span class=\"token operator\">=</span> stat<span class=\"token punctuation\">.</span><span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 如果有异常，异常数 + 1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        counter<span class=\"token punctuation\">.</span><span class=\"token function\">getErrorCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 总异常数 + 1</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    counter<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">handleStateChangeWhenThresholdExceeded</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handleStateChangeWhenThresholdExceeded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 如果熔断器已经开启直接返回</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OPEN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 进入办开启状态</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentState<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">State</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HALF_OPEN</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// In detecting request</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 本次请求没有出现异常，关闭熔断器</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token function\">fromHalfOpenToClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 本次请求出现异常，打开熔断</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">fromHalfOpenToOpen</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SimpleErrorCounter</span><span class=\"token punctuation\">></span></span> counters <span class=\"token operator\">=</span> stat<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">long</span> errCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 异常数量</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">long</span> totalCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 总异常数</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SimpleErrorCounter</span> counter <span class=\"token operator\">:</span> counters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        errCount <span class=\"token operator\">+=</span> counter<span class=\"token punctuation\">.</span>errorCount<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        totalCount <span class=\"token operator\">+=</span> counter<span class=\"token punctuation\">.</span>totalCount<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// 请求数量 & lt; 最小的请求数量时不开启熔断</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>totalCount <span class=\"token operator\">&lt;</span> minRequestAmount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">double</span> curCount <span class=\"token operator\">=</span> errCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token comment\">// 熔断策略为慢调用比例</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">==</span> <span class=\"token constant\">DEGRADE_GRADE_EXCEPTION_RATIO</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token comment\">// Use errorRatio</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token comment\">// 计算百分比</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        curCount <span class=\"token operator\">=</span> errCount <span class=\"token operator\">*</span> <span class=\"token number\">1.0d</span> <span class=\"token operator\">/</span> totalCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\">// 错误率或者错误数大于阈值时开启熔断</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curCount <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token function\">transformToOpen</span><span class=\"token punctuation\">(</span>curCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"sentinel源码分析-滑动时间窗口算法原理\"><a class=\"anchor\" href=\"#sentinel源码分析-滑动时间窗口算法原理\">#</a> Sentinel 源码分析 - 滑动时间窗口算法原理</h1>\n<p>在之前的学习中，我们已经学习完成了 Sentinel 源码的 Node 关系、责任链调用，那么这节课我们就要学习 Sentinel 核心源码中的一个非常重要的算法 “滑动时间窗口算法”</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211222170933011.png\" class=\"\" title=\"image-20211222170933011\">\n<h2 id=\"时间窗算法\"><a class=\"anchor\" href=\"#时间窗算法\">#</a> 时间窗算法</h2>\n<p>那么在了解滑动时间窗算法之前，我们先要来了解时间窗算法，也可以称之为：固定时间窗算法</p>\n<p>概念：固定时间窗口计数器算法思想：在固定的时间窗口内，可以允许固定数量的请求进入。超过数量就拒绝或者排队，等下一个时间段进入。</p>\n<p>那我们来看图分析：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211222174050592.png\" class=\"\" title=\"image-20211222174050592\">\n<p>具体分析一下：</p>\n<ol>\n<li>将当前的时间分为 10t 大小的几个时间窗</li>\n<li>规则是阈值为 100 个请求数，每个时间窗里面的请求数量不能超过阈值 100</li>\n<li>10t 到 16t 进入请求 10 个，16t 到 20t 进入请求 50 个，总数 60 个请求，没有超过阈值 100</li>\n<li>20t 到 26t 进入请求 60 个，26t 到 30t 进入请求 20 个，总数 80 个请求，没有超过阈值 100</li>\n<li>30t 到 40t 之间进入请求 120 个，超过阈值 20 个，所以 20 个请求无法进入</li>\n</ol>\n<p>存在问题：16t 到 26t 之间也是 10t 大小的一个时间窗，但是请求总数为 110，超过阈值，这种固定时间窗无法处理这部分超出的请求，解决办法就是使用滑动时间窗。</p>\n<h2 id=\"滑动时间窗算法\"><a class=\"anchor\" href=\"#滑动时间窗算法\">#</a> 滑动时间窗算法</h2>\n<p>使用滑动时间窗的原因，就在于虽然以上提到超出阈值的部分分别在两个时间窗中，但是实际上我们要清楚，我们系统限流的目的是要在任意时间都要能应对突然的流量暴增，如果使用以上的算法，就会造成在 16t 和 26t 之间的请求无法限流，从而严重会导致服务雪崩。</p>\n<p>要解决的话，我们就需要使用滑动时间窗算法，具体原理如下：</p>\n<p>滑动时间窗限流算法解决了固定时间窗限流算法的问题。其没有划分固定的时间窗起点与终点，而是将每一次请求的到来时间点作为统计时间窗的终点，起点则是终点向前推时间窗长度的时间点。这种时间窗称为 “滑动时间窗”</p>\n<p>看图分析：</p>\n<p>此图中我们可以分析中，实际上当前的时间窗不再是固定的，而是可以从时间的起始位置一直向右滑动</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211222190154070.png\" class=\"\" title=\"image-20211222190154070\">\n<p>这样的话就可以解决固定时间窗带来的问题，如图所示：</p>\n<p>其原理就是：</p>\n<ol>\n<li>当前时间窗口为滑动窗口，可以从左向右按照时间顺序进行滑动，并且大小为 10t，同时此时的阈值为 100</li>\n<li>红色线的位置进入一个请求，此时想要判断这个请求是否能够正常通过，就要看当前滑动窗口中的请求数量是否达到阈值，如果当前没有达到阈值 100，就可以正常通过，但是如果一旦超过阈值，就会被进行限流。</li>\n</ol>\n<p>没有超过阈值：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211222191157347.png\" class=\"\" title=\"image-20211222191157347\">\n<p>超过阈值：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211222191224880.png\" class=\"\" title=\"image-20211222191224880\">\n<p>但是此时滑动时间窗还是有问题的，问题就是会出现大量的重复统计，造成系统效率下降，如下图所示：</p>\n<p>在此图中我们就可以看出，这个蓝色的区域就是重复统计的区域，也就是说每一次移动时间窗口，都需要重新统计重复区域的请求数量，从而导致浪费大量的系统资源。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211222193546553.png\" class=\"\" title=\"image-20211222193546553\">\n<h2 id=\"滑动时间窗口算法-改进\"><a class=\"anchor\" href=\"#滑动时间窗口算法-改进\">#</a> 滑动时间窗口算法 - 改进</h2>\n<p>想要解决以上的问题，我们就需要更加细粒度话的计算，增加多个子时间窗口：样本窗口</p>\n<p>概念：</p>\n<ol>\n<li>样本窗口的长度必须小于滑动窗口长度，如果等于滑动窗口长度就会变成固定时间窗口</li>\n<li>一般滑动窗口长度是样本窗口的整数倍，比如：4 * 样本窗口 = 1 个滑动窗口</li>\n<li>每个样本窗口在到达终点时间时，会统计本样本窗口中的流量数据并且记录下来。</li>\n<li>当一个请求达到时，会统计当前请求时间点所在的样本窗口中的流量数据，然后在获取当前请求时间的样本窗口以外的同一个滑动窗口中的样本窗口的统计数据，进行求和，如果没有超出阈值，则通过，否则就会被限流。</li>\n</ol>\n<p>原理图：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211222201207217.png\" class=\"\" title=\"image-20211222201207217\">\n<p>下一个进入请求的时间点</p>\n<p>此时这个请求将不会被限流，因为本次请求的时间的对应的样本窗口只有 5 个请求加上之前重复的样本窗口统计的流量值，没有超过阈值 100，所以本次请求会通过。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211222202102495.png\" class=\"\" title=\"image-20211222202102495\">\n<h1 id=\"sentinel源码分析-sentinel滑动时间窗口算法源码解析\"><a class=\"anchor\" href=\"#sentinel源码分析-sentinel滑动时间窗口算法源码解析\">#</a> Sentinel 源码分析 - Sentinel 滑动时间窗口算法源码解析</h1>\n<p>上节课我们分析了 Sentinel 的滑动时间窗口算法原理，那么这节课我们来研究一下源码中的具体实现</p>\n<h2 id=\"整体流程图\"><a class=\"anchor\" href=\"#整体流程图\">#</a> 整体流程图</h2>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/%E6%BB%91%E5%8A%A8%E6%97%B6%E9%97%B4%E7%AA%97%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0.png\" class=\"\" title=\"滑动时间窗算法实现\">\n<h2 id=\"源码分析\"><a class=\"anchor\" href=\"#源码分析\">#</a> 源码分析</h2>\n<p>那我们就按照这个流程图来从头分析</p>\n<p>首先看 StatisticSlot.entry 方法中 node.addPassRequest (count) 方法，这里我之前就提到过用到了滑动窗口算法，那我们来具体分析</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 增加通过请求的数量 (这里涉及到滑动窗口算法)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>node<span class=\"token punctuation\">.</span><span class=\"token function\">addPassRequest</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>进入方法 DefaultNode.addPassRequest</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addPassRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPassRequest</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clusterNode<span class=\"token punctuation\">.</span><span class=\"token function\">addPassRequest</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>继续向下跟踪</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addPassRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 为滑动计数器增加本次的访问数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    rollingCounterInSecond<span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rollingCounterInMinute<span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后进入 ArrayMetric.addPass，这是一个使用数组保存数据的计量器类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取当前时间点所在的样本窗口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MetricBucket</span><span class=\"token punctuation\">></span></span> wrap <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 将当前请求的计数量添加到当前样本窗口的统计数据中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    wrap<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>先来跟踪 data.currentWindow ();</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 获取当前时间所在的样本窗口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里就会进入 LeapArray（环形数组）中的 currentWindow 方法中，这个环形数组，其实就是 Sentinel 官方提供的原理图中的环形数组 WindowLeapArray</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211223172002547.png\" class=\"\" title=\"image-20211223172002547\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 环形数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeapArray</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 样本窗口长度</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> windowLengthInMs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 一个时间窗中包含的时间窗数量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> sampleCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 时间窗长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> intervalInMs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> intervalInSecond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 这个一个数组，元素为 WindowWrap 样本窗口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 注意，这里的泛型 T 实际为 MetricBucket 类型</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicReferenceArray</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">WindowWrap</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里要注意这个数组，这个数组里面所存放的类型就是 WindowWrap 窗口类型，泛型 T 是 MetricBucket 这里我们来看一下这个类型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">WindowWrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> windowLengthInMs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> windowStart<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 样本窗口长度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>windowLengthInMs <span class=\"token operator\">=</span> windowLengthInMs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 样本窗口的起始时间戳</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>windowStart <span class=\"token operator\">=</span> windowStart<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 当前样本窗口的统计数据 其类型为 MetricBucket</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//..LeapArray</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取当前时间所在的样本窗口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeMillis <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 计算当前时间所在的样本窗口 id，即在计算数组 LeapArray 中的索引</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">calculateTimeIdx</span><span class=\"token punctuation\">(</span>timeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// Calculate current bucket start time.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     \t<span class=\"token comment\">// 计算当前样本窗口的开始时间点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">long</span> windowStart <span class=\"token operator\">=</span> <span class=\"token function\">calculateWindowStart</span><span class=\"token punctuation\">(</span>timeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在这里我们先分析 calculateTimeIdx 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">calculateTimeIdx</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*@Valid*/</span> <span class=\"token keyword\">long</span> timeMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 计算当前时间在那个样本窗口（样本窗口下标），当前时间 / 样本窗口长度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">long</span> timeId <span class=\"token operator\">=</span> timeMillis <span class=\"token operator\">/</span> windowLengthInMs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// Calculate current index so we can map the timestamp to the leap array.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 计算具体索引，这个 array 就是装样本窗口的数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>timeId <span class=\"token operator\">%</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>timeId（样本窗口下标）原理如下：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211223202827754.png\" class=\"\" title=\"image-20211223202827754\">\n<p>具体索引原理：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211223204246750.png\" class=\"\" title=\"image-20211223204246750\">\n<p>这里分析完成我们接着分析这里，计算当前样本窗口的起点</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 计算当前样本窗口的开始时间点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">long</span> windowStart <span class=\"token operator\">=</span> <span class=\"token function\">calculateWindowStart</span><span class=\"token punctuation\">(</span>timeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//------------------------------</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">long</span> <span class=\"token function\">calculateWindowStart</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/*@Valid*/</span> <span class=\"token keyword\">long</span> timeMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 计算当前样本窗口的起点 当前时间点 -（当前时间点 % 样本窗口长度）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> timeMillis <span class=\"token operator\">-</span> timeMillis <span class=\"token operator\">%</span> windowLengthInMs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>原理如下：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211223205936680.png\" class=\"\" title=\"image-20211223205936680\">\n<p>这里分析完成之后我们继续向下分析</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 获取到当前时间所在的样本窗口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> old <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 如果获取不到，表示没有创建</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>old <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                 *     B0       B1      B2    NULL      B4</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                 * ||_______|_______|_______|_______|_______||___</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                 * 200     400     600     800     1000    1200  timestamp</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                 *                             ^</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                 *                          time=888</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                 *            bucket is empty, so create new and update</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                 *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                 * If the old bucket is absent, then we create a new bucket at &#123;@code windowStart&#125;,</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                 * then try to update circular array via a CAS operation. Only one thread can</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                 * succeed to update, while other threads yield its time slice.</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                 */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 创建新的时间窗口</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> window <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>windowLengthInMs<span class=\"token punctuation\">,</span> windowStart<span class=\"token punctuation\">,</span> <span class=\"token function\">newEmptyBucket</span><span class=\"token punctuation\">(</span>timeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 通过 CAS 方式将新建窗口放入 Array</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// Successfully updated, return the created bucket.</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> window<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// Contention failed, the thread will yield its time slice to wait for bucket available.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 若当前样本窗口的起始时间点与计算出的样本窗口起始点相同，则说明两个是同一个样本窗口</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>windowStart <span class=\"token operator\">==</span> old<span class=\"token punctuation\">.</span><span class=\"token function\">windowStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                 *     B0       B1      B2     B3      B4</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                 * ||_______|_______|_______|_______|_______||___</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                 * 200     400     600     800     1000    1200  timestamp</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                 *                             ^</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                 *                          time=888</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                 *            startTime of Bucket 3: 800, so it's up-to-date</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                 *</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                 * If current &#123;@code windowStart&#125; is equal to the start timestamp of old bucket,</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                 * that means the time is within the bucket, so directly return the bucket.</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                 */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token comment\">// 若当前样本窗口的起始时间点 大于 计算出的样本窗口起始时间点，说明计算出的样本窗口已经过时了，</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 需要将原来的样本窗口替换</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>windowStart <span class=\"token operator\">></span> old<span class=\"token punctuation\">.</span><span class=\"token function\">windowStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                 *   (old)</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                 *             B0       B1      B2    NULL      B4</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                 * |_______||_______|_______|_______|_______|_______||___</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                 * ...    1200     1400    1600    1800    2000    2200  timestamp</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                 *                              ^</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                 *                           time=1676</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                 *          startTime of Bucket 2: 400, deprecated, should be reset</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                 *</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                 * If the start timestamp of old bucket is behind provided time, that means</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                 * the bucket is deprecated. We have to reset the bucket to current &#123;@code windowStart&#125;.</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                 * Note that the reset and clean-up operations are hard to be atomic,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                 * so we need a update lock to guarantee the correctness of bucket update.</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                 *</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                 * The update lock is conditional (tiny scope) and will take effect only when</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                 * bucket is deprecated, so in most cases it won't lead to performance loss.</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                 */</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>updateLock<span class=\"token punctuation\">.</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token comment\">// Successfully get the update lock, now we reset the bucket.</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token comment\">// 替换掉老的样本窗口</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token function\">resetWindowTo</span><span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">,</span> windowStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                updateLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token comment\">// Contention failed, the thread will yield its time slice to wait for bucket available.</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token comment\">// 当前样本窗口的起始时间点 小于 计算出的样本窗口起始时间点，</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token comment\">// 这种情况一般不会出现，因为时间不会倒流。除非人为修改了系统时钟</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>windowStart <span class=\"token operator\">&lt;</span> old<span class=\"token punctuation\">.</span><span class=\"token function\">windowStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token comment\">// Should not go through here, as the provided time is already behind.</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>windowLengthInMs<span class=\"token punctuation\">,</span> windowStart<span class=\"token punctuation\">,</span> <span class=\"token function\">newEmptyBucket</span><span class=\"token punctuation\">(</span>timeMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的原理如下：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211223213543463.png\" class=\"\" title=\"image-20211223213543463\">\n<p>具体是如何替换的拿，我们来看源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 替换掉老的样本窗口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token function\">resetWindowTo</span><span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">,</span> windowStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// BucketLeapArray.resetWindowTo</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MetricBucket</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">resetWindowTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MetricBucket</span><span class=\"token punctuation\">></span></span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// Update the start time and reset value.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 更新窗口起始时间</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">resetTo</span><span class=\"token punctuation\">(</span>startTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 将多维度统计数据清零</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    w<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> w<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>更新数据分析</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">MetricBucket</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 将每个维度的统计数据清零</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricEvent</span> event <span class=\"token operator\">:</span> <span class=\"token class-name\">MetricEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        counters<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">ordinal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">initMinRt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后我们再来看一下具体是那个维度，其实是通过维度</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取当前时间点所在的样本窗口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MetricBucket</span><span class=\"token punctuation\">></span></span> wrap <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 将当前请求的计数量添加到当前样本窗口的统计数据中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    wrap<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//----------------------------------------</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addPass</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricEvent</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PASS</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211223221413399.png\" class=\"\" title=\"image-20211223221413399\">\n<h1 id=\"sentinel-源码分析-滑动窗口数据统计解析\"><a class=\"anchor\" href=\"#sentinel-源码分析-滑动窗口数据统计解析\">#</a> Sentinel 源码分析 - 滑动窗口数据统计解析</h1>\n<h2 id=\"源码结构图\"><a class=\"anchor\" href=\"#源码结构图\">#</a> 源码结构图</h2>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%95%B0%E6%8D%AE%E7%BB%9F%E8%AE%A1.png\" class=\"\" title=\"滑动窗口数据统计\">\n<h2 id=\"分析源码\"><a class=\"anchor\" href=\"#分析源码\">#</a> 分析源码</h2>\n<p>上节课我们通过分析源码已经知道了滑动窗口算法在 Sentinel 中的应用，那么这节课我们来研究一些其中的数据统计，首先入口我们就从限流的 Slot：FlowSlot 的 entry 方法入手：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ResourceWrapper</span> resourceWrapper<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 检测并且应用流控规则</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">checkFlow</span><span class=\"token punctuation\">(</span>resourceWrapper<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 触发下一个 Slot</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">fireEntry</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> resourceWrapper<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">checkFlow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ResourceWrapper</span> resource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DefaultNode</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BlockException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 从这里进入</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    checker<span class=\"token punctuation\">.</span><span class=\"token function\">checkFlow</span><span class=\"token punctuation\">(</span>ruleProvider<span class=\"token punctuation\">,</span> resource<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> prioritized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>checkFlow 方法里面找到遍历所有规则的 canPassCheck 方法然后在进入 canPass 方法，找到 DefaultController 对应实现，快速失败的流控效果，我们从这里来看，这里我们要关注的是 avgUsedTokens 方法，这个方法实际上就是获取当前时间窗里面的已经统计的数据</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">canPass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> acquireCount<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> prioritized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取当前 node 节点的线程数或者请求通过的 qps 总数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 获取当前时间窗已经统计的数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> curCount <span class=\"token operator\">=</span> <span class=\"token function\">avgUsedTokens</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 当前请求数（请求的令牌）+ 申请总数是否（已经消耗的令牌）> 该资源配置的总数（阈值）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 以前的数据 + 新的数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curCount <span class=\"token operator\">+</span> acquireCount <span class=\"token operator\">></span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prioritized <span class=\"token operator\">&amp;&amp;</span> grade <span class=\"token operator\">==</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FLOW_GRADE_QPS</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">long</span> currentTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">long</span> waitInMs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            waitInMs <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">tryOccupyNext</span><span class=\"token punctuation\">(</span>currentTime<span class=\"token punctuation\">,</span> acquireCount<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>waitInMs <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">OccupyTimeoutProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOccupyTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                node<span class=\"token punctuation\">.</span><span class=\"token function\">addWaitingRequest</span><span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">+</span> waitInMs<span class=\"token punctuation\">,</span> acquireCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                node<span class=\"token punctuation\">.</span><span class=\"token function\">addOccupiedPass</span><span class=\"token punctuation\">(</span>acquireCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>waitInMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// PriorityWaitException indicates that the request will pass after waiting for &#123;@link @waitInMs&#125;.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityWaitException</span><span class=\"token punctuation\">(</span>waitInMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以这里我们跟进一下，看如何获取已经统计的数据</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">avgUsedTokens</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 如果没有选出 node，代表没有做统计工作，直接返回 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">DEFAULT_AVG_USED_TOKENS</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 判断阈值类型，如果为 QPS，则返回当前统计的 QPS</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 如果为线程数，则返回当前的线程数总量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> grade <span class=\"token operator\">==</span> <span class=\"token class-name\">RuleConstant</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FLOW_GRADE_THREAD</span> <span class=\"token operator\">?</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">curThreadNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span><span class=\"token function\">passQps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里实际上就是判断阈值类型，我们这里看 QPS 类型的统计</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E6%BA%90%E7%A0%81%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211227174205035.png\" class=\"\" title=\"image-20211227174205035\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">passQps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//rollingCounterInSecond.pass () 当前时间窗中统计的通过请求数量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//rollingCounterInSecond.getWindowIntervalInSec () 时间窗口长度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 这两个数相除，计算出的就是 QPS</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> rollingCounterInSecond<span class=\"token punctuation\">.</span><span class=\"token function\">pass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> rollingCounterInSecond<span class=\"token punctuation\">.</span><span class=\"token function\">getWindowIntervalInSec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么这里就需要查看 pass 方法，看是如何统计通过请求总量的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">pass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 更新 array 中当前时间点所在样本窗口实例中的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">long</span> pass <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将当前时间窗口中的所有样本窗口统计的 value 读取出来，并且记录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MetricBucket</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricBucket</span> window <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        pass <span class=\"token operator\">+=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">pass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> pass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么这里我们先跟踪 values ()，其实这里就是拿出没有过时有效的样本窗口数据</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// ----------------------------</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeMillis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timeMillis <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 这个遍历 array 中的每一个样本窗口实例</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> windowWrap <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 若当前遍历实例为空或者已经过时，则继续下一个</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>windowWrap <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token function\">isWindowDeprecated</span><span class=\"token punctuation\">(</span>timeMillis<span class=\"token punctuation\">,</span> windowWrap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>windowWrap<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>判断位置过时判断逻辑：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isWindowDeprecated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WindowWrap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> windowWrap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 当前时间 - 样本窗口起始时间 > 时间窗口  说明过时了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> time <span class=\"token operator\">-</span> windowWrap<span class=\"token punctuation\">.</span><span class=\"token function\">windowStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> intervalInMs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么这里分析完成以后我们再回到 ArrayMetric 中的 pass 方法中，看遍历方法，就是将所有的有效并且是通过维度的数据统计出来进行求和，看是否超过阈值。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">pass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 更新 array 中当前时间点所在样本窗口实例中的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    data<span class=\"token punctuation\">.</span><span class=\"token function\">currentWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">long</span> pass <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将当前时间窗口中的所有样本窗口统计的 value 读取出来，并且记录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MetricBucket</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 将 List 中所有 pass 维度的统计数据并取出求和</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MetricBucket</span> window <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 通过维度</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pass <span class=\"token operator\">+=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">pass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> pass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "微服务",
                "spring-cloud-alibaba",
                "sentinel"
            ]
        },
        {
            "id": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "url": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "title": "Sentinel系统学习",
            "date_published": "2023-07-10T13:52:02.000Z",
            "content_html": "<h1 id=\"sentinel介绍\"><a class=\"anchor\" href=\"#sentinel介绍\">#</a> Sentinel 介绍</h1>\n<h2 id=\"什么是sentinel\"><a class=\"anchor\" href=\"#什么是sentinel\">#</a> 什么是 Sentinel</h2>\n<ol>\n<li>\n<p><strong>分布式系统的流量防卫兵</strong>：随着微服务的普及，服务调用的稳定性变得越来越重要。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWw=\">Sentinel</span> 以 “流量” 为切入点，在流量控制、断路、负载保护等多个领域开展工作，保障服务可靠性。</p>\n</li>\n<li>\n<p>特点：<br />\n1.<br />\n2. <strong>+ 丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。<br />\n3. <strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。<br />\n4. <strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架 / 库的整合模块，例如与 Spring Cloud、Apache Dubbo、gRPC、Quarkus 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。同时 Sentinel 提供 Java/Go/C++ 等多语言的原生实现。<br />\n5. <strong>完善的 SPI 扩展机制</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p>\n</li>\n<li>\n<p>官网文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWwvd2lraS8lRTQlQkIlOEIlRTclQkIlOEQ=\">https://github.com/alibaba/Sentinel/wiki/ 介绍</span></p>\n</li>\n</ol>\n<h2 id=\"sentinel好处\"><a class=\"anchor\" href=\"#sentinel好处\">#</a> Sentinel 好处</h2>\n<p>​\t分布式系统面临的问题：复杂的体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免的失败，比如如下的例子中，当我们调用 A、E、F、J、K 这几个服务的时候如果其中一个服务出现问题会造成什么问题？其实就会出现整体系统效率全部下降，而且严重就会出现<strong>服务雪崩</strong>的问题！</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211005013321645.png\" class=\"\" title=\"image-20211005013321645\">\n<p>​\t<strong>服务雪崩：</strong></p>\n<p>​\t\t多个微服务之间调用的时候，假设 A 调用 B 和 C，B 和 C 又调用其他的微服务，这就是所谓的<strong>扇出</strong>。如果扇出的某个链路上某个微服务调用的响应时间过程或者不可用，微服务 A 的调用就用占用越来越多的系统资源，从而引起系统崩溃，这也就是<strong>服务雪崩</strong>。其实就是服务的<strong>高可用</strong>遭到了破坏。</p>\n<p>​\t\t对于高流量的应用来说，单一的后端依赖可能会导致服务器上的所有资源都在几秒钟内饱和。同时还有可能造成这些应用程序导致服务之间的延迟增加，备份列队，线程和其他的系统资源紧张，导致整个系统发生更多的级联故障。这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系失败，不能取消整个应用程序或系统，所以通常发生了一个模块的某个实例失败后，这时候这个模块依然还会接受流量，然后这个有问题的模块还调用其他的模块，这样就会发生级联故障，或者叫做<strong>雪崩</strong>。</p>\n<p>​\t\t要解决这种问题的出现我们就需要用到服务降级，而 Sentinel 就可以保证在一个依赖出现问题的情况下，不会导致整体服务失败，避免级联故障，提高分布式系统的弹性。</p>\n<p>​\t<strong>Sentinel 的熔断降级通过断路器实现：</strong></p>\n<p>​\t\t断路器：它本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控（类似于熔断保险丝），向调用方返回一个符合预期的、可处理的备选响应（FallBack），而不是长时间的等待或者抛出调用方法无法出的异常，这样就保证了服务调用方的不会被长时间、不必要的占用，从而避免了故障在分布式系统中蔓延（类似于病毒传染），从而避免了故障在系统中蔓延，乃至崩溃。</p>\n<p>​\t<strong>好处体现：</strong></p>\n<p>​\t对比与其他的产品而言，比如说 Hystrix，他不需要我们自己手动搭建监控平台，而且它有一套类似于 Nacos 的 Web 界面，可以让我们进行更加细粒度的配置流控、速率、服务熔断、服务降级等</p>\n<p>​\t目前主流编程都是 约定 &gt; 配置 &gt; 代码，虽然我们的配置都可以写在代码中，但是我们还是要大面积的学习配置和注解的方式，尽量少些代码，这也是 Sentinel 的理念和初衷。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211005004311575.png\" class=\"\" title=\"image-20211005004311575\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211005004335733.png\" class=\"\" title=\"image-20211005004335733\">\n<h2 id=\"sentinel下载和安装\"><a class=\"anchor\" href=\"#sentinel下载和安装\">#</a> Sentinel 下载和安装</h2>\n<p>​\t下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWwvcmVsZWFzZXM=\">https://github.com/alibaba/Sentinel/releases</span></p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211005005114846.png\" class=\"\" title=\"image-20211005005114846\">\n<p>官方提供的手册：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmctY2xvdWQtYWxpYmFiYS1ncm91cC5naXRodWIuaW8vZ2l0aHViLXBhZ2VzL2hveHRvbi9lbi11cy9pbmRleC5odG1sI19zcHJpbmdfY2xvdWRfYWxpYmFiYV9zZW50aW5lbA==\">https://spring-cloud-alibaba-group.github.io/github-pages/hoxton/en-us/index.html#_spring_cloud_alibaba_sentinel</span></p>\n<p><strong>Sentinel 分为两个部分</strong></p>\n<ul>\n<li>核心库（Java 客户端）不依赖任何框架 / 库，只需要 Java 运行时环境，同时对 Dubbo/SpringCloud 等框架也有较好的支持。</li>\n<li>控制台（Dashboard）基于 SpringBoot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li>\n</ul>\n<p><strong>启动步骤</strong></p>\n<ul>\n<li>\n<p>前提：jdk1.8 环境和 8080 端口不能被占用</p>\n</li>\n<li>\n<p>启动命令：java -jar sentinel-dashboard-1.8.2.jar</p>\n</li>\n<li>\n<p>访问地址：localhost:8080</p>\n</li>\n<li>\n<p>输入默认账号密码：sentinel/sentinel</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211005010854771.png\" class=\"\" title=\"image-20211005010854771\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211005010930366.png\" class=\"\" title=\"image-20211005010930366\">\n</li>\n</ul>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211005011050291.png\" class=\"\" title=\"image-20211005011050291\">\n<p>到这里为止，我们的 Sentinel 安装成功。</p>\n<h1 id=\"sentinel初始化监控\"><a class=\"anchor\" href=\"#sentinel初始化监控\">#</a> Sentinel 初始化监控</h1>\n<h2 id=\"sentinel初始化工程演示\"><a class=\"anchor\" href=\"#sentinel初始化工程演示\">#</a> Sentinel 初始化工程演示</h2>\n<p>​\t我们现在通过一个案例来让大家了解 Sentinel 的初始化演示，现在我们需要做几件事：</p>\n<ol>\n<li>启动 Nacos8848 成功</li>\n<li>创建新的 Module：cloudalibaba-sentinel-service8401</li>\n<li>启动 Sentinel8080</li>\n<li>启动微服务 8401</li>\n<li>启动 8401 微服务后查看 Sentinel 控制台</li>\n</ol>\n<h2 id=\"搭建sentinel项目\"><a class=\"anchor\" href=\"#搭建sentinel项目\">#</a> 搭建 Sentinel 项目</h2>\n<ol>\n<li>Sentinel 的官方文档网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZW50aW5lbGd1YXJkLmlvL3poLWNuL2RvY3MvcXVpY2stc3RhcnQuaHRtbA==\">https://sentinelguard.io/zh-cn/docs/quick-start.html</span></li>\n<li>创建项目 cloudalibaba-sentinel-service8401</li>\n<li>导入依赖：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token class-name\">Nacos</span>客户端依赖 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> sentinel依赖 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>sentinel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"4\">\n<li>配置 yaml 文件，目的是让当前 8401 注册进 Nacos，然后被 Sentinel8080 进行监控</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">8401</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token operator\">:</span> cloudalibaba<span class=\"token operator\">-</span>sentinel<span class=\"token operator\">-</span>service</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    sentinel<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      transport<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        # 配置<span class=\"token class-name\">Sentinel</span> dashboard地址</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        dashboard<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        # 默认<span class=\"token number\">8719</span>端口，键入被占用会自动从<span class=\"token number\">8719</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>，直到找到未被占用的端口</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        port<span class=\"token operator\">:</span> <span class=\"token number\">8719</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>management<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  endpoints<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    web<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      exposure<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        include<span class=\"token operator\">:</span> <span class=\"token char\">'*'</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>编写 FlowLimitController</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>cloudalibabasentinel8401<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlowLimitController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"-----testA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testB\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"-----testB\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h2>\n<ol>\n<li>当以上的这些配置配置好以后，我们就可以进行测试了，那我们的测试方式就是，首先保证 Nacos 和 Sentinel 都是启动状态，然后再来启动项目，按照我们的理解这个时候，就应该在 Sentinel 的 dashboard 上能体现出它监控的服务，但是此时并没有，原因是因为 Sentinel 本身采用的是懒加载机制，所以我们需要首先访问服务对应的接口，Sentinel 才能工作。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">8401</span><span class=\"token operator\">/</span>testA</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">8401</span><span class=\"token operator\">/</span>testB</pre></td></tr></table></figure><ol start=\"2\">\n<li>访问之后我们来查看 Sentinel 的 dashboard</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211008125726257.png\" class=\"\" title=\"image-20211008125726257\">\n<ol start=\"3\">\n<li>那么这个时候我们频繁快速的访问 testA 或者 testB 那么我们再来查看实时监控的时候，就会出现波动，体现此时 Sentinel 正在监控这我们的 8401 这个服务</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211008130011873.png\" class=\"\" title=\"image-20211008130011873\">\n<h1 id=\"sentinel流控规则\"><a class=\"anchor\" href=\"#sentinel流控规则\">#</a> Sentinel 流控规则</h1>\n<h2 id=\"流控规则基本介绍\"><a class=\"anchor\" href=\"#流控规则基本介绍\">#</a> 流控规则基本介绍</h2>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211009142204101.png\" class=\"\" title=\"image-20211009142204101\">\n<h2 id=\"名词解释\"><a class=\"anchor\" href=\"#名词解释\">#</a> 名词解释</h2>\n<ul>\n<li>资源名：唯一名称，默认请求路径</li>\n<li>针对来源：Sentinel 可以针对调用者进行限流，填写微服务名，默认 default（不区分来源）</li>\n<li>阈值类型 / 单机阈值：\n<ul>\n<li>QPS（每秒钟的请求数量）：当调用该 API 的 QPS 达到阈值的时候，进行限流</li>\n<li>线程数：当调用该 API 的线程数量达到阈值的时候，进行限流</li>\n</ul>\n</li>\n<li>是否集群：当前不需要集群</li>\n<li>流控模式：\n<ul>\n<li>直接：API 达到限流条件时，直接限流</li>\n<li>关联：当关联的资源达到阈值时，就限流自己</li>\n<li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）(API 级别的针对来源)</li>\n</ul>\n</li>\n<li>流控效果：\n<ul>\n<li>快速失败：直接失败，抛异常</li>\n<li>Wam Up：根据 codeFactor（冷加载因子，默认 3）的值，从阈值 /codeFacotor，经过预热时长，才达到设置的 QPS 阈值</li>\n<li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为 QPS，否则无效</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"具体操作\"><a class=\"anchor\" href=\"#具体操作\">#</a> 具体操作</h2>\n<h3 id=\"新增流控\"><a class=\"anchor\" href=\"#新增流控\">#</a> 新增流控</h3>\n<p><strong>QPS 直接失败案例</strong></p>\n<ol>\n<li>添加有两种方式，可以直接在流控规则选项中添加，也可以在簇点链路中添加，一般会采取第二种方式</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211009153205839.png\" class=\"\" title=\"image-20211009153205839\">\n<ol start=\"2\">\n<li>现在我们给 &quot;/testA&quot; 添加流控。</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211009153539150.png\" class=\"\" title=\"image-20211009153539150\">\n<ol start=\"3\">\n<li>这里的意思就是我们现在单机阈值设定为 1，代表的是当前这个接口只能被 1 秒访问一次，超过这个阈值，就会被 Sentinel 阻塞，现在默认为直接失败，也就是会在前台有一个体现</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211009153829675.png\" class=\"\" title=\"image-20211009153829675\">\n<p><strong>线程数直接失败案例</strong></p>\n<ol>\n<li>刚才我们可以的设置是通过 QPS（每秒钟请求的数量）来设置的限流规则，但是我们这里其实还有一个线程数，是什么意思那？</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211009154620844.png\" class=\"\" title=\"image-20211009154620844\">\n<ol start=\"2\">\n<li>QPS 和并发线程数规则详解</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%BB%98%E5%9B%BE.drawio.png\" class=\"\" title=\"未命名绘图.drawio\">\n<ol start=\"3\">\n<li>那我们要演示这种效果，我们就需要让一个线程再进来办理的时候需要 0.8 秒，但是这个时候后面的线程也在疯狂的访问，所以后面的线程就会不会生效。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>cloudalibabasentinel8401<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SentinelResource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlowLimitController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 暂停 0.8 秒</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">800</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"-----testA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testB\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"-----testB\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>这个时候我们重启项目，然后重新通过访问 testA 接口，通过两个网页（线程）来快速访问，这个时候我们来看效果，这里要注意，要重新添加流控规则。</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211009162325899.png\" class=\"\" title=\"image-20211009162325899\">\n<p><strong>注意：这个时候虽然效果一致，但是是两种完全不同的规则，一种是 QPS，一种是并发线程，这点大家一定要分清！</strong></p>\n<h1 id=\"流控规则-关联\"><a class=\"anchor\" href=\"#流控规则-关联\">#</a> 流控规则 - 关联</h1>\n<p>​\t首先我们先来回顾一下之前讲过的一些概念</p>\n<h2 id=\"名词解释-2\"><a class=\"anchor\" href=\"#名词解释-2\">#</a> 名词解释</h2>\n<ul>\n<li>资源名：唯一名称，默认请求路径</li>\n<li>针对来源：Sentinel 可以针对调用者进行限流，填写微服务名，默认 default（不区分来源）</li>\n<li>阈值类型 / 单机阈值：\n<ul>\n<li>QPS（每秒钟的请求数量）：当调用该 API 的 QPS 达到阈值的时候，进行限流</li>\n<li>线程数：当调用该 API 的线程数量达到阈值的时候，进行限流</li>\n</ul>\n</li>\n<li>是否集群：当前不需要集群</li>\n<li>流控模式：\n<ul>\n<li>直接：API 达到限流条件时，直接限流</li>\n<li>关联：当关联的资源达到阈值时，就限流自己</li>\n<li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）(API 级别的针对来源)</li>\n</ul>\n</li>\n<li>流控效果：\n<ul>\n<li>快速失败：直接失败，抛异常</li>\n<li>Wam Up：根据 codeFactor（冷加载因子，默认 3）的值，从阈值 /codeFacotor，经过预热时长，才达到设置的 QPS 阈值</li>\n<li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为 QPS，否则无效</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关联\"><a class=\"anchor\" href=\"#关联\">#</a> 关联</h2>\n<p>​\t官方解释：当关联的资源达到阈值时，就限流自己。</p>\n<p>​\t通俗解释来说，比如那我们的程序，现在有<strong> testA</strong> 接口和<strong> testB</strong> 接口，当 A 关联的资源 B 达到阈值后，就限流自己，也就是 B 到达阈值，限流 A 本身。就好像我家孩子在外面打架，我来处理一样。换到程序里面来说比如一个电商系统中，支付系统达到阈值，就限流下订单系统。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101144934374.png\" class=\"\" title=\"image-20211101144934374\">\n<h2 id=\"具体演示\"><a class=\"anchor\" href=\"#具体演示\">#</a> 具体演示</h2>\n<p>​\t当关联资源 **/testB<strong> 的 qps 阈值超时 1 时，就限流</strong> /testA** 的 Rest 访问地址，当关联资源到阈值后限制配置好的资源名，首先我们先把 FlowLimitController 接口恢复原样</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlowLimitController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"-----testA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testB\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"-----testB\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t给 testA 添加流控规则</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101155951868.png\" class=\"\" title=\"image-20211101155951868\">\n<p>​\t为了演示效果，所以这里我们需要借助一个工具 Postman，来模仿并发密集访问 /testB，先来测试访问 testB 接口</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101163301396.png\" class=\"\" title=\"image-20211101163301396\">\n<p>​\t这个时候我们需要多次密集访问 TestB 接口，所以我们需要添加配置，具体操作如下：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101164057576.png\" class=\"\" title=\"image-20211101164057576\">\n<p>把数值修改为：</p>\n<ul>\n<li>Iterations：为 20</li>\n<li>Delay：300</li>\n</ul>\n<p>意思就是 20 个线程每间隔 0.3 秒访问一次，然后跑起来</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101164345389.png\" class=\"\" title=\"image-20211101164345389\">\n<p>​\t\t这个时候我们来看网页中 testA 接口的效果</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101164427548.png\" class=\"\" title=\"image-20211101164427548\">\n<h1 id=\"流控规则-链路\"><a class=\"anchor\" href=\"#流控规则-链路\">#</a> 流控规则 - 链路</h1>\n<h2 id=\"名词解释-3\"><a class=\"anchor\" href=\"#名词解释-3\">#</a> 名词解释</h2>\n<ul>\n<li>资源名：唯一名称，默认请求路径</li>\n<li>针对来源：Sentinel 可以针对调用者进行限流，填写微服务名，默认 default（不区分来源）</li>\n<li>阈值类型 / 单机阈值：\n<ul>\n<li>QPS（每秒钟的请求数量）：当调用该 API 的 QPS 达到阈值的时候，进行限流</li>\n<li>线程数：当调用该 API 的线程数量达到阈值的时候，进行限流</li>\n</ul>\n</li>\n<li>是否集群：当前不需要集群</li>\n<li>流控模式：\n<ul>\n<li>直接：API 达到限流条件时，直接限流</li>\n<li>关联：当关联的资源达到阈值时，就限流自己</li>\n<li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）(API 级别的针对来源)</li>\n</ul>\n</li>\n<li>流控效果：\n<ul>\n<li>快速失败：直接失败，抛异常</li>\n<li>Wam Up：根据 coldFactor（冷加载因子，默认 3）的值，从阈值 /codeFacotor，经过预热时长，才达到设置的 QPS 阈值</li>\n<li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为 QPS，否则无效</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"链路\"><a class=\"anchor\" href=\"#链路\">#</a> 链路</h2>\n<p>​\t链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流，它的功能有点<strong>类似于针对来源配置项</strong>，<strong>区别在于：针对来源是针对上级微服务，而链路流控是针对上级接口</strong>，也就是说<strong>它的粒度更细</strong>。</p>\n<p>​\t比如在一个微服务中，两个接口都调用了同一个 Service 中的方法，并且<strong>该方法用 SentinelResource（用于定义资源）注解标注</strong>了，然后对该注解标注的资源（方法）进行配置，则可以选择链路模式。</p>\n<p>​\t<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101190257683.png\" class=\"\" title=\"image-20211101190257683\"></p>\n<h2 id=\"具体演示-2\"><a class=\"anchor\" href=\"#具体演示-2\">#</a> 具体演示</h2>\n<p>首先我们编写一个 Service</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//service.TestService</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 定义限流资源</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"common\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">common</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"common\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后更改接口调用这个 Service 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlowLimitController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">TestService</span> testService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> testService<span class=\"token punctuation\">.</span><span class=\"token function\">common</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testB\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> testService<span class=\"token punctuation\">.</span><span class=\"token function\">common</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来配置流控规则：</p>\n<p>这里要注意不要对 /testA 或者 /testB 进行限流规则的配置，要给用 SentinelResource 注解标注的资源进行配置限流规则，这里的意思为当我们用入口资源访问被 SentinelResource 注解标注的资源方法时，当超过阈值就会被限流，但是此时实际效果是没有效果。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101200050932.png\" class=\"\" title=\"image-20211101200050932\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101195842516.png\" class=\"\" title=\"image-20211101195842516\">\n<p>没有效果的原因是因为我们还需要添加配置，让 Sentinel 源码中 CommonFilter 中的 WEB_CONTEXT_UNIFY 参数为 false，将其配置为 false 即可根据不同的 URL 进行链路限流，如果不配置将不会生效。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span> cloudalibaba<span class=\"token operator\">-</span>sentinel<span class=\"token operator\">-</span>service</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    sentinel<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      transport<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        # 配置<span class=\"token class-name\">Sentinel</span> dashboard地址</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        dashboard<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        # 默认<span class=\"token number\">8719</span>端口，键入被占用会自动从<span class=\"token number\">8719</span><span class=\"token operator\">+</span><span class=\"token number\">1</span>，直到找到未被占用的端口</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        port<span class=\"token operator\">:</span> <span class=\"token number\">8719</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      # 配置为<span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      web<span class=\"token operator\">-</span>context<span class=\"token operator\">-</span>unify<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr></table></figure><p>最后这个时候我们再来频繁的访问 testB 接口，就会出现异常的情况，这也是流量效果快速失败在链路上的体现，是直接抛出异常。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211101202216083.png\" class=\"\" title=\"image-20211101202216083\">\n<h1 id=\"sentinel流控效果-预热\"><a class=\"anchor\" href=\"#sentinel流控效果-预热\">#</a> Sentinel 流控效果 - 预热</h1>\n<h2 id=\"名词解释-4\"><a class=\"anchor\" href=\"#名词解释-4\">#</a> 名词解释</h2>\n<ul>\n<li>资源名：唯一名称，默认请求路径</li>\n<li>针对来源：Sentinel 可以针对调用者进行限流，填写微服务名，默认 default（不区分来源）</li>\n<li>阈值类型 / 单机阈值：\n<ul>\n<li>QPS（每秒钟的请求数量）：当调用该 API 的 QPS 达到阈值的时候，进行限流</li>\n<li>线程数：当调用该 API 的线程数量达到阈值的时候，进行限流</li>\n</ul>\n</li>\n<li>是否集群：当前不需要集群</li>\n<li>流控模式：\n<ul>\n<li>直接：API 达到限流条件时，直接限流</li>\n<li>关联：当关联的资源达到阈值时，就限流自己</li>\n<li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）(API 级别的针对来源)</li>\n</ul>\n</li>\n<li><strong>流控效果：</strong>\n<ul>\n<li>快速失败：直接失败，抛异常</li>\n<li><strong>Warm Up：根据 coldFactor（冷加载因子，默认 3）的值，从阈值 /codeFacotor，经过预热时长，才达到设置的 QPS 阈值</strong></li>\n<li>排队等待：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为 QPS，否则无效</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"预热\"><a class=\"anchor\" href=\"#预热\">#</a> 预热</h2>\n<p>官网手册地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZW50aW5lbGd1YXJkLmlvL3poLWNuL2RvY3MvZmxvdy1jb250cm9sLmh0bWw=\">https://sentinelguard.io/zh-cn/docs/flow-control.html</span></p>\n<p>概念：Warm Up 方式，即预热 / 冷启动方式。该方式主要用于系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过 &quot;冷启动&quot;，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮的情况。</p>\n<p>​\t预热公式：阈值 /coldFactor（默认值为 3），经过预热时间后才会达到阈值。</p>\n<p>​\t冷启动的过程系统允许通过的 QPS 曲线如下图：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211102163029355.png\" class=\"\" title=\"image-20211102163029355\">\n<p>简单理解：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211102163937106.png\" class=\"\" title=\"image-20211102163937106\">\n<p>​\t使用场景：一般秒杀系统中会有这样的流控设置，为了防止秒杀瞬间造成系统崩溃。</p>\n<h2 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h2>\n<p>​\t默认 coldFactor 为 3，当发起请求即请求 QPS 从（阈值 / 3）开始，经过多长预热时长才逐步升至设定的 QPS 阈值，当前阈值设置为 10，预热时长设置为 5 秒。</p>\n<p>​\t最终的效果，系统初始化时阈值 / 3 约等于 3，即阈值在此时为 3，经过 5 秒后阈值才慢慢升高到 10</p>\n<p>首先我们先来设置流控效果：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211102165915771.png\" class=\"\" title=\"image-20211102165915771\">\n<p>测试，我们用最简单的方法进行测试，直接在浏览器上手动刷新，然后我们来看 Sentinel 的实时监控</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211102182120756.png\" class=\"\" title=\"image-20211102182120756\">\n<h1 id=\"sentinel流控效果-排队等待\"><a class=\"anchor\" href=\"#sentinel流控效果-排队等待\">#</a> Sentinel 流控效果 - 排队等待</h1>\n<h2 id=\"名词解释-5\"><a class=\"anchor\" href=\"#名词解释-5\">#</a> 名词解释</h2>\n<ul>\n<li>资源名：唯一名称，默认请求路径</li>\n<li>针对来源：Sentinel 可以针对调用者进行限流，填写微服务名，默认 default（不区分来源）</li>\n<li>阈值类型 / 单机阈值：\n<ul>\n<li>QPS（每秒钟的请求数量）：当调用该 API 的 QPS 达到阈值的时候，进行限流</li>\n<li>线程数：当调用该 API 的线程数量达到阈值的时候，进行限流</li>\n</ul>\n</li>\n<li>是否集群：当前不需要集群</li>\n<li>流控模式：\n<ul>\n<li>直接：API 达到限流条件时，直接限流</li>\n<li>关联：当关联的资源达到阈值时，就限流自己</li>\n<li>链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）(API 级别的针对来源)</li>\n</ul>\n</li>\n<li><strong>流控效果：</strong>\n<ul>\n<li>快速失败：直接失败，抛异常</li>\n<li>Warm Up：根据 coldFactor（冷加载因子，默认 3）的值，从阈值 /codeFacotor，经过预热时长，才达到设置的 QPS 阈值</li>\n<li><strong>排队等待（匀速器）：匀速排队，让请求以匀速的速度通过，阈值类型必须设置为 QPS，否则无效</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"排队等待\"><a class=\"anchor\" href=\"#排队等待\">#</a> 排队等待</h2>\n<p>​\t官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZW50aW5lbGd1YXJkLmlvL3poLWNuL2RvY3MvZmxvdy1jb250cm9sLmh0bWw=\">https://sentinelguard.io/zh-cn/docs/flow-control.html</span></p>\n<p>​\t概念：匀速排队方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p>\n<p>​\t这种方式主要用于处理间隔性突发的流量，例如消息队列。想象一下这样的场景，在某一秒有大量的请求到来，而接下来的几秒则处于空闲状态，我们希望系统能够在接下来的空闲期间逐渐处理这些请求，而不是在第一秒直接拒绝多余的请求（削峰填谷）。</p>\n<p>​\t例图：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211102175948987.png\" class=\"\" title=\"image-20211102175948987\">\n<h3 id=\"匀速器\"><a class=\"anchor\" href=\"#匀速器\">#</a> 匀速器</h3>\n<p>​\t它的中心思想是，以固定的间隔时间让请求通过。当请求到来的时候，如果当前请求距离上个通过的请求通过的时间间隔不小于预设值，则让当前请求通过。否则，计算当前请求的预期通过时间，如果该请求的预期通过时间小于规则预设的 timeout 时间，则该请求会等待直到预设时间到来通过（排队等待处理）；若预期的通过时间超出最大排队时长，则直接拒接这个请求。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211102182416282.png\" class=\"\" title=\"image-20211102182416282\">\n<p>​\tSentinel 匀速排队等待策略是漏桶算法结合虚拟队列等待机制实现的。</p>\n<p>​\t注意：匀速排队模式暂时不支持 QPS &gt; 1000 的场景。</p>\n<h2 id=\"演示\"><a class=\"anchor\" href=\"#演示\">#</a> 演示</h2>\n<p>流控规则：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211102182826152.png\" class=\"\" title=\"image-20211102182826152\">\n<p>为了看到效果，我们在代码中进行打印，更改 8401 微服务中的 FlowLimitController</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>cloudalibabasentinel8401<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token punctuation\">.</span>sentinel<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SentinelResource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>cloudalibabasentinel8401<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TestService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FlowLimitController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">TestService</span> testService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testA\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"：testA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> testService<span class=\"token punctuation\">.</span><span class=\"token function\">common</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testB\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> testService<span class=\"token punctuation\">.</span><span class=\"token function\">common</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后我们可以通过 Postman 来进行测试，发送请求时没有延迟，同时发送 10 条请求，然后我们会发现就是排队效果 1 秒执行一个请求，同时我们在 Idea 中也可以看到打桩效果</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211102184705742.png\" class=\"\" title=\"image-20211102184705742\">\n<h1 id=\"sentinel-熔断降级简介\"><a class=\"anchor\" href=\"#sentinel-熔断降级简介\">#</a> Sentinel 熔断降级简介</h1>\n<h2 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h2>\n<h3 id=\"服务降级\"><a class=\"anchor\" href=\"#服务降级\">#</a> 服务降级</h3>\n<blockquote>\n<p>当我们的服务调用者，去调用服务的时候；一定的时间内，如果被调用的没有反应；自己直接返回了；</p>\n</blockquote>\n<h3 id=\"服务熔断\"><a class=\"anchor\" href=\"#服务熔断\">#</a> 服务熔断</h3>\n<blockquote>\n<p>当我们出发了熔断以后；服务调用者不会去调用服务提供者；</p>\n<p>在一个周期里面所有的请求都不会再去调用了；</p>\n<p>周期以后会重新发送一个请求服务提供者；如果提供者正常响应了，会关闭熔断器；没有，熔断器继续开启；</p>\n</blockquote>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220723115405292.png\" class=\"\" title=\"image-20220723115405292\">\n<h2 id=\"基本介绍\"><a class=\"anchor\" href=\"#基本介绍\">#</a> 基本介绍</h2>\n<p>​\t除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。一个服务常常会调用别的模块，可能是另外的一个远程服务、数据库，或者第三方 API 等。例如，支付的时候，可能需要远程调用银联提供的 API；查询某个商品的价格，可能需要进行数据库查询。然而，这个被依赖服务的稳定性是不能保证的。如果依赖的服务出现了不稳定的情况，请求的响应时间变长，那么调用服务的方法的响应时间也会变长，线程会产生堆积，最终可能耗尽业务自身的线程池，服务本身也变得不可用。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/62410811-cd871680-b61d-11e9-9df7-3ee41c618644.png\" class=\"\" title=\"chain\">\n<p>​\t现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p>\n<h2 id=\"熔断策略\"><a class=\"anchor\" href=\"#熔断策略\">#</a> 熔断策略</h2>\n<p>​\tSentinel 提供了一下几种熔断策略：</p>\n<ul>\n<li>慢调用比例 ( <code>SLOW_REQUEST_RATIO</code> )：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（ <code>statIntervalMs</code> ）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li>\n<li>异常比例 ( <code>ERROR_RATIO</code> )：当单位统计时长（ <code>statIntervalMs</code> ）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是  <code>[0.0, 1.0]</code> ，代表 0% - 100%。</li>\n<li>异常数 ( <code>ERROR_COUNT</code> )：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>\n</ul>\n<p><strong>比例阈值</strong>：$$\\frac {单位时间内慢调用的个数}{单位时间内所有请求书}$$</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211103172422267.png\" class=\"\" title=\"image-20211103172422267\">\n<p>Sentinel 在 1.8.0 版本对熔断降级做了大的调整，可以定义任意时长的熔断时间，引入了半开启恢复支持。下面梳理下相关特性。</p>\n<p>熔断状态有三种状态，非别为 OPEN、HALF_OPEN、CLOSED</p>\n<table>\n<thead>\n<tr>\n<th>状态</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OPEN</td>\n<td>表示熔断开启，拒绝所有请求</td>\n</tr>\n<tr>\n<td>HALF_OPEN</td>\n<td>探测恢复状态，如果接下来的一个请求顺利通过则表示结束熔断，否则继续熔断</td>\n</tr>\n<tr>\n<td>CLOSE</td>\n<td>表示熔断关闭，请求顺利通过</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"熔断规则\"><a class=\"anchor\" href=\"#熔断规则\">#</a> 熔断规则</h2>\n<p>熔断降级规则包含下面几个重要的属性：</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>说明</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>resource</td>\n<td>资源名，即规则的作用对象</td>\n<td></td>\n</tr>\n<tr>\n<td>grade</td>\n<td>熔断策略，支持慢调用比例 / 异常比例 / 异常数策略</td>\n<td>慢调用比例</td>\n</tr>\n<tr>\n<td>count</td>\n<td>慢调用比例模式下为慢调用临界 RT（超出该值计为慢调用）；异常比例 / 异常数模式下为对应的阈值</td>\n<td></td>\n</tr>\n<tr>\n<td>timeWindow</td>\n<td>熔断时长，单位为 s</td>\n<td></td>\n</tr>\n<tr>\n<td>minRequestAmount</td>\n<td>熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）</td>\n<td>5</td>\n</tr>\n<tr>\n<td>statIntervalMs</td>\n<td>统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）</td>\n<td>1000 ms</td>\n</tr>\n<tr>\n<td>slowRatioThreshold</td>\n<td>慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>官方文档网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZW50aW5lbGd1YXJkLmlvL3poLWNuL2RvY3MvY2lyY3VpdC1icmVha2luZy5odG1s\">https://sentinelguard.io/zh-cn/docs/circuit-breaking.html</span></p>\n<h1 id=\"sentinel熔断策略-慢调用比例\"><a class=\"anchor\" href=\"#sentinel熔断策略-慢调用比例\">#</a> Sentinel 熔断策略 - 慢调用比例</h1>\n<h2 id=\"慢调用比例\"><a class=\"anchor\" href=\"#慢调用比例\">#</a> 慢调用比例</h2>\n<p>​\t概念：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（ <code>statIntervalMs</code> ）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211103175357455.png\" class=\"\" title=\"image-20211103175357455\">\n<p>​\t简单理解：</p>\n<img data-src=\"../../../../../../../../_各大机构/马士兵/39_spring cloud/aibaba/3_章节24-45笔记/img/image-20211103194830095.png\" alt=\"image-20211103194830095\" style=\"zoom:50%;\" />\n<p>举例：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211103182809594.png\" class=\"\" title=\"image-20211103182809594\">\n<h2 id=\"案例演示\"><a class=\"anchor\" href=\"#案例演示\">#</a> 案例演示</h2>\n<p>首先我们先添加一个控制器方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testC\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"----testC\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设置熔断策略，1QPS&gt;5 并且这些请求的 RT&gt;300 并且大于比例阈值触发熔断</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211103193843437.png\" class=\"\" title=\"image-20211103193843437\">\n<h2 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试</h2>\n<p>通过 JMeter 测试，1 秒钟发起 10 个线程请求 /testC，此时就会触发熔断效果，停止测试以后，10 秒钟以后恢复正常</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211103200622564.png\" class=\"\" title=\"image-20211103200622564\">\n<h1 id=\"sentinel熔断策略-异常比例\"><a class=\"anchor\" href=\"#sentinel熔断策略-异常比例\">#</a> Sentinel 熔断策略 - 异常比例</h1>\n<h2 id=\"异常比例\"><a class=\"anchor\" href=\"#异常比例\">#</a> 异常比例</h2>\n<p>​\t概念：异常比例 ( <code>ERROR_RATIO</code> )：当单位统计时长（ <code>statIntervalMs</code> ）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是  <code>[0.0, 1.0]</code> ，代表 0% - 100%。</p>\n<p>​\t注意：异常降级<strong>仅针对业务异常</strong>，对 Sentinel 限流降级本身的异常（ <code>BlockException</code> ）不生效。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104143705448.png\" class=\"\" title=\"image-20211104143705448\">\n<p>简单理解：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104150725704.png\" class=\"\" title=\"image-20211104150725704\">\n<h2 id=\"案例-2\"><a class=\"anchor\" href=\"#案例-2\">#</a> 案例</h2>\n<p>编写测试接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testD\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testD</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> id <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异常比例测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"------------testD\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设置熔断策略异常比例</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104202552823.png\" class=\"\" title=\"image-20211104202552823\">\n<h2 id=\"测试-3\"><a class=\"anchor\" href=\"#测试-3\">#</a> 测试</h2>\n<p>我们通过 JMeter 来测试，设定 HTTP 请求地址</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104154856685.png\" class=\"\" title=\"image-20211104154856685\">\n<p>1 秒钟发送 10 个请求</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104154931689.png\" class=\"\" title=\"image-20211104154931689\">\n<p>当启动 JMeter 的时候，就会触发熔断，因为此时我们 1 秒钟发送 10 个请求超过了最小请求数 5，同时超过了阈值，满足了两个条件，当熔断时长过后就会恢复正常。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104155351048.png\" class=\"\" title=\"image-20211104155351048\">\n<h1 id=\"sentinel熔断策略-异常数\"><a class=\"anchor\" href=\"#sentinel熔断策略-异常数\">#</a> Sentinel 熔断策略 - 异常数</h1>\n<h2 id=\"异常数\"><a class=\"anchor\" href=\"#异常数\">#</a> 异常数</h2>\n<p>​\t概念：异常数 ( <code>ERROR_COUNT</code> )：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p>\n<p>​\t注意：异常降级<strong>仅针对业务异常</strong>，对 Sentinel 限流降级本身的异常（ <code>BlockException</code> ）不生效。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104160536648.png\" class=\"\" title=\"image-20211104160536648\">\n<p>简单理解：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104162446764.png\" class=\"\" title=\"image-20211104162446764\">\n<h2 id=\"案例演示-2\"><a class=\"anchor\" href=\"#案例演示-2\">#</a> 案例演示</h2>\n<p>编写接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testE\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testE</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> id <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异常数测试\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"------------testE\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设置异常数策略，当 1 秒钟内请求超过 5 并且异常数大约 5 个的时候触发熔断</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104162844045.png\" class=\"\" title=\"image-20211104162844045\">\n<h2 id=\"测试-4\"><a class=\"anchor\" href=\"#测试-4\">#</a> 测试</h2>\n<p>通过 JMeter 来测试</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104163014944.png\" class=\"\" title=\"image-20211104163014944\">\n<p>1 秒钟发送 10 个请求</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104163107494.png\" class=\"\" title=\"image-20211104163107494\">\n<p>此时就会触发熔断</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104163209702.png\" class=\"\" title=\"image-20211104163209702\">\n<h1 id=\"sentinel-热点规则上\"><a class=\"anchor\" href=\"#sentinel-热点规则上\">#</a> Sentinel 热点规则（上）</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p>\n<ul>\n<li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li>\n<li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li>\n</ul>\n<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZW50aW5lbGd1YXJkLmlvL3poLWNuL2RvY3MvcGFyYW1ldGVyLWZsb3ctY29udHJvbC5odG1s\">https://sentinelguard.io/zh-cn/docs/parameter-flow-control.html</span></p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/sentinel-hot-param-overview-1.png\" class=\"\" title=\"sentinel-hot-param-overview-1\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104175442912.png\" class=\"\" title=\"image-20211104175442912\">\n<p>这里还有相对应的高级选项，我们这里先了解基本规则。</p>\n<h2 id=\"使用sentinelresource注解\"><a class=\"anchor\" href=\"#使用sentinelresource注解\">#</a> 使用 @SentinelResource 注解</h2>\n<p>其实这个热点限流其实就是更加细粒度的流控规则，那么如果想使用它就必须要配合对应 SentinelResource 注解。</p>\n<p>Sentinel 提供了 @SentinelResource 注解用于定义资源，它有很多的参数，我们这里主要关注两个参数：</p>\n<ol>\n<li>value：代表资源名称，必需项，因为需要通过 resource name 找到对应的规则，这个是必须配置的</li>\n<li>blockHandler：blockHandler 对应处理 BlockException 的方法名称，可选项，访问范围需要是 public，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 BlockException。</li>\n</ol>\n<h2 id=\"案例讲解\"><a class=\"anchor\" href=\"#案例讲解\">#</a> 案例讲解</h2>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104185357465.png\" class=\"\" title=\"image-20211104185357465\">\n<h3 id=\"sentinelresourcevaluexxx\"><a class=\"anchor\" href=\"#sentinelresourcevaluexxx\">#</a> @SentinelResource(value=&quot;xxx&quot;)</h3>\n<p>那现在我们要完成以上图中的效果，这个时候我们首先要编写代码，在 FlowLimitController 中编写代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testHotKey\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testHotKey\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testHotKey</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"hot1\"</span><span class=\"token punctuation\">,</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> hot1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                         <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"hot2\"</span><span class=\"token punctuation\">,</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">String</span> hot2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                         <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"hot13\"</span><span class=\"token punctuation\">,</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> hot3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"----testHotKey\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后再来配置热点规则</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104185609520.png\" class=\"\" title=\"image-20211104185609520\">\n<p>这里要说明一下，参数索引 0 实际上代表的就是我们设置的 hot1 参数</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104190217984.png\" class=\"\" title=\"image-20211104190217984\">\n<p>测试，此时如果我们传入参数 hot1，并且超过阈值，就会出现限流，但是此时的限流效果为报错，显示不友好</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104192341003.png\" class=\"\" title=\"image-20211104192341003\">\n<h3 id=\"sentinelresourcevaluexxxblockhandlerxxx\"><a class=\"anchor\" href=\"#sentinelresourcevaluexxxblockhandlerxxx\">#</a> @SentinelResource(value=&quot;xxx&quot;,blockHandler=&quot;xxx&quot;)</h3>\n<p>刚才的演示中，我们明显发现这种限流方法的提示效果非常不友好，所以如果我们需要能够得到友好的提示，我们就需要使用 @SentinelResource 注解提供的另外一个参数 blockHandler，这个参数是可以指定当出现异常时的处理方法，具体操作如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testHotKey\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"testHotKey\"</span><span class=\"token punctuation\">,</span>blockHandler <span class=\"token operator\">=</span> <span class=\"token string\">\"handler_HotKey\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testHotKey</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"hot1\"</span><span class=\"token punctuation\">,</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> hot1<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                         <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"hot2\"</span><span class=\"token punctuation\">,</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">String</span> hot2<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                         <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"hot13\"</span><span class=\"token punctuation\">,</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> hot3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"----testHotKey\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 处理异常方法，方法签名要和对应的接口方法保持一致</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">handler_HotKey</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> hot1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> hot2<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> hot3<span class=\"token punctuation\">,</span><span class=\"token class-name\">BlockException</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"系统繁忙稍后重试。。\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后热点规则不变，我们最终的到的限流效果如下：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104195122220.png\" class=\"\" title=\"image-20211104195122220\">\n<h1 id=\"sentinel-热点规则下\"><a class=\"anchor\" href=\"#sentinel-热点规则下\">#</a> Sentinel 热点规则（下）</h1>\n<h2 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h2>\n<p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p>\n<ul>\n<li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li>\n<li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li>\n</ul>\n<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZW50aW5lbGd1YXJkLmlvL3poLWNuL2RvY3MvcGFyYW1ldGVyLWZsb3ctY29udHJvbC5odG1s\">https://sentinelguard.io/zh-cn/docs/parameter-flow-control.html</span></p>\n<p>![sentinel-hot-param-overview-1](../../../../../../../../_各大机构 / 马士兵 / 39_spring cloud/aibaba/3_章节 24-45 笔记 /sentinel-hot-param-overview-1.png)</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211105144025601.png\" class=\"\" title=\"image-20211105144025601\">\n<h2 id=\"参数例外项\"><a class=\"anchor\" href=\"#参数例外项\">#</a> 参数例外项</h2>\n<p>​\t其实参数例外项就是可以达到更加细粒度的控制，比如我们当前的例子中，目前 hot1 参数在访问时超过阈值就会被限流，但是我们可以通过参数例外项设置 hot1 具体等于特殊的某个值的时候，触发不同的限流效果。假如 hot1 的值等于 5 时，它的阈值可以达到 200。</p>\n<p>​\t** 注意：** 参数例外项中的参数类型仅支持一下 7 种数据类型</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211105144912213.png\" class=\"\" title=\"image-20211105144912213\">\n<h2 id=\"案例演示-3\"><a class=\"anchor\" href=\"#案例演示-3\">#</a> 案例演示</h2>\n<p>当前我们需要让 hot1 的值为 5 的时候阈值可以达到 200，首先 Sentinel 页面中修改对应热点规则（在这之前，先演示传递一个参数，否则配置失败）</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211105145445284.png\" class=\"\" title=\"image-20211105145445284\">\n<p>此时的规则为：如果当前 hot1 值为除 5 以外的其他值，都会走普通的阈值规则，但是如果一旦 hot1 的值为 5 的时候，将会走参数例外项，此时的阈值为 200，我们通过浏览器测试，当 hot1 的值等于 5 是只要阈值不超过 200 就不会出现限流。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211105154930110.png\" class=\"\" title=\"image-20211105154930110\">\n<p>​\t注意：题我们到现在代码中使用了 @SentinelResource 注解，此注解处理的是<strong> Sentinel 控制台配置的异常</strong>，通过 blockHandler 属性设置对应方法来处理和程序本身异常无关。</p>\n<p>​\t所以以下程序中如果 hot1 的值等于 6 还是会出现 RuntimeException。</p>\n<pre><code>@SentinelResource(value = &quot;testHotKey&quot;,blockHandler = &quot;handler_HotKey&quot;)\npublic String testHotKey(@RequestParam(value = &quot;hot1&quot;,required = false) String hot1,\n                         @RequestParam(value = &quot;hot2&quot;,required = false) String hot2,\n                         @RequestParam(value = &quot;hot3&quot;,required = false) String hot3)&#123;\n    if(&quot;6&quot;.equals(hot1))&#123;\n        throw new RuntimeException(&quot;运行时异常&quot;);\n    &#125;\n    return &quot;-----testHotKey&quot;;\n&#125;\n</code></pre>\n<h1 id=\"sentinel-系统规则\"><a class=\"anchor\" href=\"#sentinel-系统规则\">#</a> Sentinel 系统规则</h1>\n<p>​\tSentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<h2 id=\"系统规则\"><a class=\"anchor\" href=\"#系统规则\">#</a> 系统规则</h2>\n<p>​\t系统保护规则是从应用级别 的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>\n<p>​\t系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量，比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108170904455.png\" class=\"\" title=\"image-20211108170904455\">\n<p><strong>系统规则支持一下的模式：</strong></p>\n<ul>\n<li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1（1 分钟平均负载） 作为启发指标，进行自适应系统保护。当系统 load1（1 分钟平均负载） 超过设定的启发值（阈值），且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的  <code>maxQps(秒级统计的最大QPS) * minRt(秒级统计的最小响应时间)</code>  估算得出。设定参考值一般是  <code>CPU cores * 2.5</code> 。</li>\n<li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li>\n<li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>\n<li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>\n<li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>\n</ul>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108162812623.png\" class=\"\" title=\"image-20211108162812623\">\n<h2 id=\"案例演示-4\"><a class=\"anchor\" href=\"#案例演示-4\">#</a> 案例演示</h2>\n<p>这里我们只通过入口 QPS 来进行测试，直接设置规则</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108173108215.png\" class=\"\" title=\"image-20211108173108215\">\n<p>最后测试效果不管现在我们访问那个接口只要超过阈值就会被限流</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108173202180.png\" class=\"\" title=\"image-20211108173202180\">\n<h1 id=\"sentinelresource-自定义限流逻辑处理\"><a class=\"anchor\" href=\"#sentinelresource-自定义限流逻辑处理\">#</a> @SentinelResource 自定义限流逻辑处理</h1>\n<p>​\tSentinel 提供了 @SentinelResource 注解用于定义资源，并提供了 AspectJ 的扩展用于自定义资源，处理 BlockException 等。</p>\n<h2 id=\"案例复习\"><a class=\"anchor\" href=\"#案例复习\">#</a> 案例复习</h2>\n<p>之前我们用过这个注解，同时了解了它的两个属性：</p>\n<ul>\n<li>value：资源名称，必须项（唯一，不能为空）</li>\n<li>blockHandler：对应处理 BlockException 的函数名称可选项.blockHandler 函数访问需要 public, 返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 BlockException.blockHandler 函数默认需要和原方法在同一个类中</li>\n</ul>\n<p>我们之前利用这个注解完成了热点规则的学习，同时做了一个案例，我们简单复习一下，这个案例的核心思想就是我们传递一个指定参数，然后通过注解 @SentinelResource 注解标注资源进行限流，当出现限流以后，通过 blockHandler 属性设置限流以后的解决方法。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211104185357465.png\" class=\"\" title=\"image-20211104185357465\">\n<p>其实这个注解不仅仅可以用到热点规则上，还可以用到流控上，我们可以做一个资源的流控和一个请求的流控，通过此注解来解决限流之后问题。</p>\n<h2 id=\"sentinelresource-资源限流\"><a class=\"anchor\" href=\"#sentinelresource-资源限流\">#</a> @SentinelResource 资源限流</h2>\n<p>** 核心点：** 使用 @SentinelResource 注解的 blockHandler 属性，定义出现限流效果时的解决方法。</p>\n<p>编写一个新的控制器类型 SentinelResourceTestController，使用 @SentinelResource 注解同时使用 blockHandler 属性</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/byResource\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"byResource\"</span><span class=\"token punctuation\">,</span>blockHandler <span class=\"token operator\">=</span> <span class=\"token string\">\"handler_resource\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">byResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"-----byResource\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">handler_resource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"系统繁忙\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里要注意一定要给 byResource 资源添加流控</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108195609306.png\" class=\"\" title=\"image-20211108195609306\">\n<p>具体规则</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108195638721.png\" class=\"\" title=\"image-20211108195638721\">\n<p>测试，测试我们去快速访问 http://localhost:8401/byResource，就会出现我们使用 @SentinelResource 注解中 blockHandler 属性提供的解决限流异常的方法。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108195926004.png\" class=\"\" title=\"image-20211108195926004\">\n<h2 id=\"sentinelresource-url限流\"><a class=\"anchor\" href=\"#sentinelresource-url限流\">#</a> @SentinelResource URL 限流</h2>\n<p>** 核心点：** 使用 @SentinelResource 注解，但是不使用 blockHandler 属性，系统会调用默认限流异常处理方法。</p>\n<p>其实这个注解，我们还可以更换请求地址为资源，比如我们在新建一个测试接口方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/byRest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"byRest\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">byRest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"-----byRest\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>给这个接口地址添加流控</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108200724588.png\" class=\"\" title=\"image-20211108200724588\">\n<p>此时如果没有自己定义限流处理方法，会走系统默认的</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108200750521.png\" class=\"\" title=\"image-20211108200750521\">\n<h2 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> 结论</h2>\n<ol>\n<li>@SentinelResource 既可以配置资源名称也可以配置 URL</li>\n<li>如果配置了 @SentinelResource 的 blockHandler 属性对应方法，出现限流会调用对应方法</li>\n<li>如果没有配置 @SentinelResource 的 blockHandler 属性，系统会走默认的限流处理。</li>\n</ol>\n<h2 id=\"自定义限流处理逻辑\"><a class=\"anchor\" href=\"#自定义限流处理逻辑\">#</a> 自定义限流处理逻辑</h2>\n<p>其实我们在使用 @SentinelResource 注解这两种方案的时候，会出现一些问题：</p>\n<ol>\n<li>没有体现我们自己的业务要求。</li>\n<li>自定义处理方法和业务代码耦合在一起。</li>\n<li>每个业务方法都添加一个限流处理方法，代码将会加剧膨胀。</li>\n<li>无法实现统一全局处理。</li>\n</ol>\n<p>解决：@<strong>SentinelResource</strong> 除了<strong> blockHandler</strong> 可以设置自定义限流处理逻辑方法以外，还提供另外一个属性来设置限流处理逻辑类型<strong> blockHandlerClass</strong> 属性，此属性中设置的方法必需为 static 函数，否则无法解析。</p>\n<h3 id=\"具体逻辑\"><a class=\"anchor\" href=\"#具体逻辑\">#</a> 具体逻辑</h3>\n<p><strong>第一步</strong></p>\n<p>创建 CustomerBlockHandler 类型用于处理自定义限流处理逻辑，首先创建 myhandler.CustomerBlockHandler</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 此类型用来处理限流自定义逻辑</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomerBlockHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">handlerException1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"handlerException1：系统异常，请稍后重试！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">handlerException2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"handlerException2：网络崩溃了，请稍后重试！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>第二步</strong></p>\n<p>我们在 SentinelResourceTestController 类型中添加一个接口方法，同时设置 @SentinelResource 注解和 blockHandlerClass 属性对应的类型和这个类型中对应的处理方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 此方法用到了自定义限流处理类型 CustomerBlockHandler</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 中的 handlerException1 方法来处理限流逻辑。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bycustomer\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"bycustomer\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  blockHandlerClass <span class=\"token operator\">=</span> <span class=\"token class-name\">CustomerBlockHandler</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  blockHandler <span class=\"token operator\">=</span> <span class=\"token string\">\"handlerException1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">bycustomer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"-----bycustomer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>第三步</strong></p>\n<p>测试：给 bycustomer 资源添加限流规则，然后来测试在超过限流阈值时处理方法是否为 CustomerBlockHandler 中 handlerException1 来进行处理。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108205553306.png\" class=\"\" title=\"image-20211108205553306\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108205606689.png\" class=\"\" title=\"image-20211108205606689\">\n<p>添加流控规则以后，我们再来频繁访问 http://localhost:8401/bycustomer，就会看见是 CustomerBlockHandler 类型的 handlerException1 方法来处理自定义限流逻辑</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108205735265.png\" class=\"\" title=\"image-20211108205735265\">\n<h3 id=\"对应关系图\"><a class=\"anchor\" href=\"#对应关系图\">#</a> 对应关系图</h3>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211108210142209.png\" class=\"\" title=\"image-20211108210142209\">\n<h1 id=\"sentinel服务熔断环境搭建\"><a class=\"anchor\" href=\"#sentinel服务熔断环境搭建\">#</a> Sentinel 服务熔断环境搭建</h1>\n<p>服务熔断：应对微服务雪崩效应的一种链路保护机制，类似保险丝。</p>\n<p>需要完成 Sentinel 整合 Ribbon+openFeign，所以我们先要搭建环境，那么先从整合 Ribbon 开始</p>\n<h2 id=\"环境搭建\"><a class=\"anchor\" href=\"#环境搭建\">#</a> 环境搭建</h2>\n<p>为了演示操作，所以在这里我们需要利用 Ribbon 进行负载均衡的调用，所以我们需要创建一个服务消费者 cloudalibaba-consumer8084 和两个服务提供者 cloudalibaba-provider9003 和 cloudalibaba-provider9004，以下是结构图</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211109170609356.png\" class=\"\" title=\"image-20211109170609356\">\n<p>其实我们之前就搭建过这种结构，比较简单，所以我们快速搭建</p>\n<h3 id=\"新建cloudalibaba-provider-90039004\"><a class=\"anchor\" href=\"#新建cloudalibaba-provider-90039004\">#</a> 新建 cloudalibaba-provider-9003/9004</h3>\n<p>在建立 9003 和 9004 之前，先建立一个共享项目 cloudalibaba-commons，在其中新建一个类型 JsonResult，这个类型用于返回 JSON 数据类型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AllArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> code<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建服务提供者 9003，9004 基本上是一样的，所以我们建立 9003 复制就可以得到 9004</p>\n<p><strong>pom</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modelVersion<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modelVersion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>parent<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">SpringAlibabaMSB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>relativePath<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> lookup parent from repository <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parent<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>provider<span class=\"token operator\">-</span><span class=\"token number\">9003</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>name<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>provider<span class=\"token operator\">-</span><span class=\"token number\">9003</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>description<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>provider<span class=\"token operator\">-</span><span class=\"token number\">9003</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>description<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>properties<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>java<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.8</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>java<span class=\"token punctuation\">.</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>properties<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>commons<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>build<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>plugins<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>plugin<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>maven<span class=\"token operator\">-</span>plugin<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>plugin<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>plugins<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>build<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>yml</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">9003</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>provider</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span> #配置<span class=\"token class-name\">Nacos</span>地址</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>management<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  endpoints<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    web<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      exposure<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        include<span class=\"token operator\">:</span> <span class=\"token char\">'*'</span></pre></td></tr></table></figure><p><strong>主启动添加注解</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaprovider9003</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloudalibabaProvider9003Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloudalibabaProvider9003Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>控制器</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaprovider9003<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabacommons<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonResult</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Log</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 模仿数据库存储数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">1l</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"鼠标\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">2l</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"键盘\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token number\">3l</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"耳机\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">msbSql</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">1L</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span>hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>** 注意：**9004 和 9003 一致，但是要注意修改 yml 文件端口号</p>\n<h3 id=\"新建cloudalibaba-consumer8084\"><a class=\"anchor\" href=\"#新建cloudalibaba-consumer8084\">#</a> 新建 cloudalibaba-consumer8084</h3>\n<p><strong>pom</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modelVersion<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modelVersion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>parent<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">SpringAlibabaMSB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>relativePath<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> lookup parent from repository <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parent<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>consumer8084<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>name<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>consumer8084<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>description<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>consumer8084<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>description<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>properties<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>java<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.8</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>java<span class=\"token punctuation\">.</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>properties<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token class-name\">SpringCloud</span> ailibaba nacos <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token class-name\">SpringCloud</span> ailibaba sentinel <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>sentinel<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>commons<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>build<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>plugins<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>plugin<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>maven<span class=\"token operator\">-</span>plugin<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>plugin<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>plugins<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>build<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>yml</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">8084</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>consumer</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    sentinel<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      transport<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        #配置<span class=\"token class-name\">Sentinel</span> dashboard地址</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        dashboard<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        #默认<span class=\"token number\">8719</span>端口，假如被占用会自动从<span class=\"token number\">8719</span>开始依次<span class=\"token operator\">+</span><span class=\"token number\">1</span>扫描<span class=\"token punctuation\">,</span>直至找到未被占用的端口</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        port<span class=\"token operator\">:</span> <span class=\"token number\">8719</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>#消费者将要去访问的微服务名称<span class=\"token punctuation\">(</span>注册成功进nacos的微服务提供者<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>service<span class=\"token operator\">-</span>url<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  nacos<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>service<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>nacos<span class=\"token operator\">-</span>provider</pre></td></tr></table></figure><p>主启动添加注解和 9003/9004 一致</p>\n<p><strong>控制器</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabacommons<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonResult</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 服务提供者 URL</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;service-url.nacos-user-service&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SERVICE_URL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/fallback/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 通过 Ribbon 发起远程访问，访问 9003/9004</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SERVICE_URL</span><span class=\"token operator\">+</span><span class=\"token string\">\"/info/\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">,</span><span class=\"token class-name\">JsonResult</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    \t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"最后测试\"><a class=\"anchor\" href=\"#最后测试\">#</a> 最后测试</h2>\n<p>访问 http://localhost:8084/consumer/fallback/1</p>\n<p>查看最后结果是否为 9003/9004 切换调用</p>\n<h1 id=\"sentinelresource的fallback属性\"><a class=\"anchor\" href=\"#sentinelresource的fallback属性\">#</a> SentinelResource 的 fallback 属性</h1>\n<h2 id=\"fallback属性\"><a class=\"anchor\" href=\"#fallback属性\">#</a> fallback 属性</h2>\n<p>** 概念：**fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了  <code>exceptionsToIgnore</code>  里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：</p>\n<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要和原函数一致，或者可以额外多一个  <code>Throwable</code>  类型的参数用于接收对应的异常。</li>\n<li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定  <code>fallbackClass</code>  为对应的类的  <code>Class</code>  对象，注意对应的函数必需为 static 函数，否则无法解析。</li>\n</ul>\n<p>其实通过官网上提供的概念，我们不难看出这个属性类似于 blockHandler，但是各位一定要注意他们有本质的不同。</p>\n<p>** 注意：**fallback 属性和 blockHandler 属性的本质不同在于他们作用的异常不同：</p>\n<ul>\n<li>blockHandler：针对违反 Sentinel 控制台配置规则时触发 BlockException 异常时对应处理的属性</li>\n<li>fallback：针对 Java 本身出现的异常进行处理的对应属性。</li>\n</ul>\n<h2 id=\"案例演示-5\"><a class=\"anchor\" href=\"#案例演示-5\">#</a> 案例演示</h2>\n<p>​\t上节课我们已经完成环境的搭建，那我们就直接在 8084 项目的 DemoController 中编写对应代码</p>\n<p>首先我们先来设置异常规则</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaconsumer8084</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabacommons<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonResult</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span>extern<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Slf4j</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 服务提供者 URL</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;service-url.nacos-user-service&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SERVICE_URL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/fallback/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 通过 Ribbon 发起远程访问，访问 9003/9004</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SERVICE_URL</span><span class=\"token operator\">+</span><span class=\"token string\">\"/info/\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">,</span><span class=\"token class-name\">JsonResult</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有对应的数据记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t此时我们任务添加了异常，此时如果我们访问 http://localhost:8084/consumer/fallback/4（id 非法）地址时，就会出现对应的显示效果：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211111180018647.png\" class=\"\" title=\"image-20211111180018647\">\n<p>​\t明显此时显示效果非常不好，我们就可以通过 @SentinelResource 注解的 fallback 属性来解决这种 java 异常，给出友好提示</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 服务提供者 URL</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;service-url.nacos-user-service&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SERVICE_URL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/fallback/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 添加 SentinelResource 注解的 fallback 属性，同时设置方法来解决 Java 异常</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"falllback\"</span><span class=\"token punctuation\">,</span>fallback <span class=\"token operator\">=</span> <span class=\"token string\">\"fallbackHandler\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 通过 Ribbon 发起远程访问，访问 9003/9004</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SERVICE_URL</span><span class=\"token operator\">+</span><span class=\"token string\">\"/info/\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">,</span><span class=\"token class-name\">JsonResult</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有对应的数据记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 保证方法签名基本保持一致，但是要添加异常类型参数</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fallbackHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">444</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"出现未知商品id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t到这里为止，我们就很清楚的知道了 fallback 属性的作用，同时它和 blockHandler 属性类似，也可以设置 fallbackClass 属性，来指定对应类型，来处理对应的 Java 异常，当然要注意和 blockHandlerClass 属性一样，也需要让所有的方法都必需为 static 函数，否则无法解析。</p>\n<h2 id=\"同时配置blockhandler和fallback属性\"><a class=\"anchor\" href=\"#同时配置blockhandler和fallback属性\">#</a> 同时配置 blockHandler 和 fallback 属性</h2>\n<p>​\t通过上述的内容，我们很清楚的知道了 fallback 属性的作用，但是大家现在想一个问题，如果我们在使用 @SentinelResource 属性的时候，同时设置 blockHandler 属性和 fallback 属性时，并且同时出现了 Sentinel 异常和 Java 异常，这个时候会执行哪个方法那。</p>\n<p>我们还是回顾一下 blockHandler 属性的概念：</p>\n<ul>\n<li><code>blockHandler</code>  /  <code>blockHandlerClass</code> :  <code>blockHandler</code>  对应处理  <code>BlockException</code>  的函数名称，可选项。blockHandler 函数访问范围需要是  <code>public</code> ，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为  <code>BlockException</code> 。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定  <code>blockHandlerClass</code>  为对应的类的  <code>Class</code>  对象，注意对应的函数必需为 static 函数，否则无法解析。</li>\n</ul>\n<h2 id=\"案例演示-6\"><a class=\"anchor\" href=\"#案例演示-6\">#</a> 案例演示</h2>\n<p>​\t我们现在同时在 DemoController 中设置 fallback 属性和 blockHandler 属性</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 服务提供者 URL</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;service-url.nacos-user-service&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SERVICE_URL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/fallback/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 同时添加 SentinelResource 注解的 fallback 和 blockHandler 属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"falllback\"</span><span class=\"token punctuation\">,</span>fallback <span class=\"token operator\">=</span> <span class=\"token string\">\"fallbackHandler\"</span><span class=\"token punctuation\">,</span>blockHandler <span class=\"token operator\">=</span> <span class=\"token string\">\"blockHandler\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 通过 Ribbon 发起远程访问，访问 9003/9004</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SERVICE_URL</span><span class=\"token operator\">+</span><span class=\"token string\">\"/info/\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">,</span><span class=\"token class-name\">JsonResult</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有对应的数据记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 处理 Java 异常</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fallbackHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">444</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"NullPointerException异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 处理 Sentinel 限流</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">blockHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BlockException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">445</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BlockException限流\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t此时我们来设置 Sentinel 配置，我们通过熔断规则中的异常数来演示（当然也可以用其他的）</p>\n<p>规则：在一秒内超过最小访问次数 5 次，并且异常数超过 2 的时候，就会触发熔断规则。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211111182629454.png\" class=\"\" title=\"image-20211111182629454\">\n<p>此时我们来访问 http://localhost:8084/consumer/fallback/6 看效果：</p>\n<ul>\n<li>在没有触发熔断之前的异常交给 fallback 来处理</li>\n</ul>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211111182834520.png\" class=\"\" title=\"image-20211111182834520\">\n<ul>\n<li>但是一旦触发熔断规则就变成了 blockHandler 来处理</li>\n</ul>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211111183011670.png\" class=\"\" title=\"image-20211111183011670\">\n<h2 id=\"exceptionstoignore属性\"><a class=\"anchor\" href=\"#exceptionstoignore属性\">#</a> exceptionsToIgnore 属性</h2>\n<ul>\n<li><code>exceptionsToIgnore</code> （since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 服务提供者 URL</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;service-url.nacos-user-service&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SERVICE_URL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/consumer/fallback/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 同时添加 SentinelResource 注解的 fallback 和 blockHandler 属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"falllback\"</span><span class=\"token punctuation\">,</span>fallback <span class=\"token operator\">=</span> <span class=\"token string\">\"fallbackHandler\"</span><span class=\"token punctuation\">,</span>blockHandler <span class=\"token operator\">=</span> <span class=\"token string\">\"blockHandler\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            exceptionsToIgnore <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 被标注的异常将会被 原样抛出</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 通过 Ribbon 发起远程访问，访问 9003/9004</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">SERVICE_URL</span><span class=\"token operator\">+</span><span class=\"token string\">\"/info/\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">,</span><span class=\"token class-name\">JsonResult</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有对应的数据记录\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 处理 Java 异常</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fallbackHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">444</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"NullPointerException异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 处理 Sentinel 限流</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">blockHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">BlockException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">445</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BlockException限流\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"openfeign基础应用\"><a class=\"anchor\" href=\"#openfeign基础应用\">#</a> OpenFeign 基础应用</h1>\n<h2 id=\"概念-3\"><a class=\"anchor\" href=\"#概念-3\">#</a> 概念</h2>\n<p>OpenFeign 是一种声明式、模板化的 HTTP 客户端。在 Spring Cloud 中使用 OpenFeign，可以做到使用 HTTP 请求访问远程服务，就像调用本地方法一样的，开发者完全感知不到这是在调用远程方法，更感知不到在访问 HTTP 请求，用法其实就是编写一个接口，在接口上添加注解即可。</p>\n<p>可以简单理解它是借鉴 Ribbon 的基础之上，封装的一套服务接口 + 注解的方式的远程调用器。</p>\n<h2 id=\"openfeign能干什么\"><a class=\"anchor\" href=\"#openfeign能干什么\">#</a> OpenFeign 能干什么</h2>\n<p>它的宗旨是在编写 Java Http 客户端接口的时候变得更加容易，其底层整合了 Ribbon，所以也支持负载均衡。</p>\n<p>之前我们使用 Ribbon 的时候，利用 RestTemplate 对 Http 请求进行封装处理，但是在实际开发中，由于对服务依赖的调用不可能就一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一些客户端类来包装这些依赖服务的调用。所以 OpenFeign 在此基础之上做了进一步的封装，由它来帮助我们定义和实现依赖服务接口的定义，我们只需创建一个接口并使用注解的方式来配置它，即可完成对微服务提供方的接口绑定，简化 Ribbon 的操作。</p>\n<h2 id=\"具体使用\"><a class=\"anchor\" href=\"#具体使用\">#</a> 具体使用</h2>\n<p>这里我们通过一个案例来演示，首先我们要明确使用 OpenFeign 是使用在消费者端去远程调用，就必须要是用 FeignClient 注解，来标注要调用的服务提供者名称，然后在通过一个接口来定义要调用的方法，所以我们首先新建一个 Model：cloudalibaba-openFeign-consumer-8888</p>\n<h3 id=\"pom\"><a class=\"anchor\" href=\"#pom\">#</a> pom</h3>\n<p>注意：需要在父级项目引入对应依赖坐标</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span>$<span class=\"token punctuation\">&#123;</span>openfeign<span class=\"token operator\">-</span>version<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modelVersion<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modelVersion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>parent<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">SpringAlibabaMSB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>relativePath<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> lookup parent from repository <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parent<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>openFeign<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span><span class=\"token number\">8888</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>name<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>openFeign<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span><span class=\"token number\">8888</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>description<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>openFeign<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span><span class=\"token number\">8888</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>description<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>properties<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>java<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.8</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>java<span class=\"token punctuation\">.</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>properties<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>commons<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>build<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>plugins<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>plugin<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>maven<span class=\"token operator\">-</span>plugin<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>plugin<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>plugins<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>build<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"javalangillegalstateexception-no-feign-client-for-loadbalancing-defined-did-you-forget-to-include-spring-cloud-starter-loadbalancer\"><a class=\"anchor\" href=\"#javalangillegalstateexception-no-feign-client-for-loadbalancing-defined-did-you-forget-to-include-spring-cloud-starter-loadbalancer\">#</a> java.lang.IllegalStateException: No Feign Client for loadBalancing defined. Did you forget to include spring-cloud-starter-loadbalancer?</h3>\n<p>由于 Spring Cloud Feign 在 Hoxton.M2 RELEASED 版本之后不再使用 Ribbon 而是使用 spring-cloud-loadbalancer，所以不引入 spring-cloud-loadbalancer 会报错.</p>\n<p>解决方法：<br />\n加入 spring-cloud-loadbalancer 依赖 并且在 nacos 中排除 ribbon 依赖，不然 loadbalancer 无效</p>\n<p>排除 ribbon 依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 服务注册 / 发现  --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.netflix.ribbon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>ribbon<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusion</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>exclusions</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"yml配置\"><a class=\"anchor\" href=\"#yml配置\">#</a> YML 配置</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span>openFeign</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>management<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  endpoints<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    web<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      exposure<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        include<span class=\"token operator\">:</span> <span class=\"token char\">'*'</span></pre></td></tr></table></figure><h3 id=\"主启动中添加注解\"><a class=\"anchor\" href=\"#主启动中添加注解\">#</a> 主启动中添加注解</h3>\n<pre><code>@SpringBootApplication\n@EnableDiscoveryClient\n@EnableFeignClients//添加此注解\npublic class CloudalibabaOpenFeignConsumer8888Application &#123;\n\n    public static void main(String[] args) &#123;\n        SpringApplication.run(CloudalibabaOpenFeignConsumer8888Application.class, args);\n    &#125;\n\n&#125;\n</code></pre>\n<h3 id=\"调用服务提供者对外提供接口\"><a class=\"anchor\" href=\"#调用服务提供者对外提供接口\">#</a> 调用服务提供者对外提供接口</h3>\n<p>这里要调用的是服务提供者 9003/9004</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211112183106167.png\" class=\"\" title=\"image-20211112183106167\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaopenFeignconsumer8888<span class=\"token punctuation\">.</span>service</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabacommons<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonResult</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>openfeign<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FeignClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 此接口就是配合使用 OpenFeign 的接口，</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> * 在此接口中添加 @FeignClient 接口同时标注</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> * 要调用的服务端名称，同时使用与服务提供者</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> * 方法签名一致的抽象方法来表示远程调用的</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> * 具体内容</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 表示远程调用服务名称</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nacos-provider\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OpenFeignService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * 此方法表示远程调用 info/&#123;id&#125; 接口</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">msbSql</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"控制器\"><a class=\"anchor\" href=\"#控制器\">#</a> 控制器</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaopenFeignconsumer8888<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabacommons<span class=\"token punctuation\">.</span>entity<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonResult</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaopenFeignconsumer8888<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">OpenFeignService</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Autowired</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OpenFeignController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OpenFeignService</span> openFeignService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getInfo/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> openFeignService<span class=\"token punctuation\">.</span><span class=\"token function\">msbSql</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试结果\"><a class=\"anchor\" href=\"#测试结果\">#</a> 测试结果</h2>\n<p>能够远程调用的同时还有负载均衡效果</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211112205138375.png\" class=\"\" title=\"image-20211112205138375\">\n<h1 id=\"openfeign超时时间控制\"><a class=\"anchor\" href=\"#openfeign超时时间控制\">#</a> OpenFeign 超时时间控制</h1>\n<h2 id=\"概念-4\"><a class=\"anchor\" href=\"#概念-4\">#</a> 概念</h2>\n<p>OpenFeign 客户端默认等待 1 秒钟，但是如果服务端业务超过 1 秒，则会报错。为了避免这样的情况，我们需要设置 feign 客户端的超时控制。</p>\n<h2 id=\"解决办法\"><a class=\"anchor\" href=\"#解决办法\">#</a> 解决办法</h2>\n<p>由于 OpenFeign 底层是 ribbon 。所以超时控制由 ribbon 来控制。在 yml 文件中配置</p>\n<h2 id=\"超时案例演示\"><a class=\"anchor\" href=\"#超时案例演示\">#</a> 超时案例演示</h2>\n<p>首先演示超时效果，我们现在 9003/9004 上设置一个延迟 3 秒执行的方法，来模仿长业务线调用。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/timeOut\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">timeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"延迟响应\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>客户端 8888 通过 OpenFeign 来进行调用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//OpenFeginController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testTimeout\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">TestTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> openFeginService<span class=\"token punctuation\">.</span><span class=\"token function\">timeOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试结果-2\"><a class=\"anchor\" href=\"#测试结果-2\">#</a> 测试结果</h3>\n<p>客户端报错：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211112195205208.png\" class=\"\" title=\"image-20211112195205208\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211112195244240.png\" class=\"\" title=\"image-20211112195244240\">\n<h2 id=\"设置超时控制案例演示\"><a class=\"anchor\" href=\"#设置超时控制案例演示\">#</a> 设置超时控制案例演示</h2>\n<p>首先我们需要在 8888 消费者端的 yml 文件中配置超时时间，因为 OpenFeign 本身整合了 Ribbon 所以，这里其实我们用的是 Ribbon 来配置</p>\n<h3 id=\"yml\"><a class=\"anchor\" href=\"#yml\">#</a> YML</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span>openfegin</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>#设置feign客户端超时时间<span class=\"token punctuation\">(</span><span class=\"token class-name\">OpenFeign</span>默认支持ribbon<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ribbon<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  #指的是建立连接所用的时间，适用于网络状况正常的情况下<span class=\"token punctuation\">,</span>两端连接所用的时间</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token class-name\">ReadTimeout</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  #指的是建立连接后从服务器读取到可用资源所用的时间</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token class-name\">ConnectTimeout</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>management<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  endpoints<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    web<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      exposure<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        include<span class=\"token operator\">:</span> <span class=\"token char\">'*'</span></pre></td></tr></table></figure><h3 id=\"测试结果-3\"><a class=\"anchor\" href=\"#测试结果-3\">#</a> 测试结果</h3>\n<p>正常响应</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211112195615566.png\" class=\"\" title=\"image-20211112195615566\">\n<h2 id=\"openfeign日志打印\"><a class=\"anchor\" href=\"#openfeign日志打印\">#</a> OpenFeign 日志打印</h2>\n<h2 id=\"概念-5\"><a class=\"anchor\" href=\"#概念-5\">#</a> 概念</h2>\n<p>Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解 Feign 中 Http 请求的细节。<br />\n简单理解，就是对 Feign 接口的调用情况进行监控和输出</p>\n<p><strong>日志级别：</strong></p>\n<ul>\n<li>\n<p>NONE：默认的，不显示任何日志；</p>\n</li>\n<li>\n<p>BASIC：仅记录请求方法、URL、响应状态码及执行时间；</p>\n</li>\n<li>\n<p>HEADERS：除了 BASIC 中定义的信息之外，还有请求和响应的头信息；</p>\n</li>\n<li>\n<p>FULL：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据。</p>\n</li>\n</ul>\n<h2 id=\"具体使用-2\"><a class=\"anchor\" href=\"#具体使用-2\">#</a> 具体使用</h2>\n<p>需要在启动类中通过 @Bean 注解注入 OpenFeign 的日志功能</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableFeignClients</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloudalibabaOpenFeginConsumer8888Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloudalibabaOpenFeginConsumer8888Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span> <span class=\"token function\">feignLoggerLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 开启详细日志</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Logger<span class=\"token punctuation\">.</span>Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 yml 中配置中配置</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">8888</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span>openfegin</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>#设置feign客户端超时时间<span class=\"token punctuation\">(</span><span class=\"token class-name\">OpenFeign</span>默认支持ribbon<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ribbon<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  #指的是建立连接所用的时间，适用于网络状况正常的情况下<span class=\"token punctuation\">,</span>两端连接所用的时间</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token class-name\">ReadTimeout</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  #指的是建立连接后从服务器读取到可用资源所用的时间</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token class-name\">ConnectTimeout</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>logging<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  level<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    # openfeign日志以什么级别监控哪个接口</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaopenfeginconsumer8888<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span></span>OpenFeginService</span><span class=\"token operator\">:</span> debug</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>management<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  endpoints<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    web<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      exposure<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        include<span class=\"token operator\">:</span> <span class=\"token char\">'*'</span></pre></td></tr></table></figure><p>测试效果，发起一次调用以后的日志内容：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211112201418950.png\" class=\"\" title=\"image-20211112201418950\">\n<h1 id=\"sentinel整合openfegin\"><a class=\"anchor\" href=\"#sentinel整合openfegin\">#</a> Sentinel 整合 OpenFegin</h1>\n<p>根据之前的学习，我们已经学习过了包括 Sentinel 整合 Ribbon，包括对 OpenFegin 的基本学习，那么这节课，我们就需要通过 Sentinel 来进行整合 OpenFegin</p>\n<h2 id=\"引入openfegin\"><a class=\"anchor\" href=\"#引入openfegin\">#</a> 引入 OpenFegin</h2>\n<p>我们需要在当前的 8084 项目中引入对应的依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>openfeign<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><p>激活 Sentinel 对 OpenFeign 的支持，所以配置 yml</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 激活<span class=\"token class-name\">Sentinel</span>对<span class=\"token class-name\">OpenFeign</span>的支持</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>feign<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  sentinel<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    enabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr></table></figure><p>主启动类要添加 @EnableFeignClients 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableFeignClients</span><span class=\"token comment\">// 注入 Feign</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloudalibabaConsumer8084Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloudalibabaConsumer8084Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@LoadBalanced</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">getRestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"openfegin接口编写\"><a class=\"anchor\" href=\"#openfegin接口编写\">#</a> OpenFegin 接口编写</h2>\n<p>这里我们的接口写法和之前保持一致，但是要注意，我们这里要多增加一个 FeignClient 的属性：</p>\n<ul>\n<li>fallback: 定义容错的处理类，当调用远程接口失败或超时时，会调用对应接口的容错逻辑，fallback 指定的类必须实现 @FeignClient 标记的接口</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当没有成功调用 /info/&#123;id&#125; 接口时会走 fallback 属性标注的类型的处理方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Service</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"nacos-provider\"</span><span class=\"token punctuation\">,</span>fallback <span class=\"token operator\">=</span> <span class=\"token class-name\">FeignServiceImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FeignService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * 远程调用对应方法</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"info/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">msbSql</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实现类必须添加 @Component 注解，否则无法注入到容器中</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FeignServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FeignService</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">msbSql</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">444</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"服务降级返回！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里完成后我们来编写控制器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">FeignService</span> feignService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getInfo/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">JsonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有该id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> feignService<span class=\"token punctuation\">.</span><span class=\"token function\">msbSql</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试-5\"><a class=\"anchor\" href=\"#测试-5\">#</a> 测试</h2>\n<p>此时如果我们访问 http://localhost:8084/getInfo/1 的地址，是没有问题的，但是如果此时我们人为结束 9003/9004 服务，这个时候就会触发 fallback 属性对应的处理类型，完成服务降级。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211115200122605.png\" class=\"\" title=\"image-20211115200122605\">\n<p>断开服务以后</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211115200243827.png\" class=\"\" title=\"image-20211115200243827\">\n<h1 id=\"sentinel持久化配置\"><a class=\"anchor\" href=\"#sentinel持久化配置\">#</a> Sentinel 持久化配置</h1>\n<p>我们首先需要知道：在 Sentinel Dashboard 中配置规则之后重启应用就会丢失，所以实际生产环境中需要配置规则的持久化实现，Sentinel 提供多种不同的数据源来持久化规则配置，包括 file，redis、nacos、zk。</p>\n<h2 id=\"sentinel规则持久化到nacos\"><a class=\"anchor\" href=\"#sentinel规则持久化到nacos\">#</a> Sentinel 规则持久化到 Nacos</h2>\n<p>将限流规则持久化进 Nacos 保存，只要刷新 8401 某个接口地址，Sentinel 控制台的流控规则就能感应到，同时只要 Nacos 里面的配置不删除，针对 8401 上 Sentinel 的流控规则就持续有效。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211115204021997.png\" class=\"\" title=\"image-20211115204021997\">\n<p>其实就是实现 Sentinel Dashboard 与 Nacos 之间的相互通信</p>\n<p>通过 Nacos 配置文件修改流控规则 --- 拉取 ---&gt;Sentinel Dashboard 界面显示最新的流控规则</p>\n<p>** 注意：** 在 Nacos 控制台上修改流控制，虽然可以同步到 Sentinel Dashboard，但是 Nacos 此时应该作为一个流控规则的持久化平台，所以正常操作过程应该是开发者在 Sentinel Dashboard 上修改流控规则后同步到 Nacos，遗憾的是目前 Sentinel Dashboard 不支持该功能。</p>\n<h2 id=\"具体操作-2\"><a class=\"anchor\" href=\"#具体操作-2\">#</a> 具体操作</h2>\n<p>第一件事情我们首先要引入依赖：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>csp<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>sentinel<span class=\"token operator\">-</span>datasource<span class=\"token operator\">-</span>nacos<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.8</span><span class=\"token number\">.1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><p>第二件事情我们需要配置 YML</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 端口号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">8890</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># 服务名</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span> order</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        # nacos注册中心地址</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sentinel<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      transport<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        dashboard<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8080</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      datasource<span class=\"token operator\">:</span> # 配置<span class=\"token class-name\">Sentinel</span>的持久化</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            serverAddr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            groupId<span class=\"token operator\">:</span> <span class=\"token constant\">DEFAULT_GROUP</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            dataId<span class=\"token operator\">:</span> order<span class=\"token operator\">-</span>sentinel<span class=\"token punctuation\">.</span>json</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            ruleType<span class=\"token operator\">:</span> flow</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  profiles<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    active<span class=\"token operator\">:</span> dev</pre></td></tr></table></figure><p>第三步我们需要进入到 Nacos 控制台，添加配置</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211116200354133.png\" class=\"\" title=\"image-20211116200354133\">\n<p>具体配置内容：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"limitApp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"grade\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">\"strategy\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"controlBehavior\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>具体内容含义<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>resource：资源名称；</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>limitApp：来源应用；</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>grade：阈值类型，<span class=\"token number\">0</span>表示线程数，<span class=\"token number\">1</span>表示<span class=\"token constant\">QPS</span>；</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>count：单机阈值；</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>strategy：流控模式，<span class=\"token number\">0</span>表示直接，<span class=\"token number\">1</span>表示关联，<span class=\"token number\">2</span>表示链路；</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>controlBehavior：流控效果，<span class=\"token number\">0</span>表示快速失败，<span class=\"token number\">1</span>表示<span class=\"token class-name\">Warm</span> <span class=\"token class-name\">Up</span>，<span class=\"token number\">2</span>表示排队等待；</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>clusterMode：是否集群。</pre></td></tr></table></figure><p>控制器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/order/test1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"test1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"test1 \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试-6\"><a class=\"anchor\" href=\"#测试-6\">#</a> 测试</h2>\n<p>当我们重启项目以后，我们访问对应接口 http://localhost:8890/order/test1，就会在 Sentinel 界面上看到对应的限流规则：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Sentinel%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20211116200654500.png\" class=\"\" title=\"image-20211116200654500\">\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>当我们配置成功之后我们每次访问接口的时候，我们都会从我们的仓库中去获取配置，有的话直接用，没有的话将持久化后的资源重新加入到 sentinel 配置中，在下一次的资源访问过程中就会经历这个判断。</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "微服务",
                "spring-cloud-alibaba",
                "sentinel"
            ]
        },
        {
            "id": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "url": "https://eth168.top/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/",
            "title": "Nacos系统学习",
            "date_published": "2023-07-10T13:43:56.000Z",
            "content_html": "<h1 id=\"微服务简介\"><a class=\"anchor\" href=\"#微服务简介\">#</a> 微服务简介</h1>\n<h2 id=\"1-什么是微服务\"><a class=\"anchor\" href=\"#1-什么是微服务\">#</a> 1 什么是微服务</h2>\n<p>2014 年，Martin Fowler（<strong>马丁・福勒</strong> ） 提出了微服务的概念，定义了微服务是由以单一应用程序构成的小服务，自己拥有自己的进程与轻量化处理，服务依业务功能设计，以全自动的方式部署，与其他服务使用 HTTP API 通信。同时服务会使用最小的规模的集中管理能力，服务可以用不同的编程语言与数据库等组件实现。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/a544f9b87c934ffe9fc994129e4bc5e2.png\" class=\"\" title=\"WeChat13cb5e0a22944a3c85e6d91ca10babbc.png\">\n<p>马丁・福勒是敏捷联盟的成员，于 2001 年，同其他 16 名合著者一起协助创作了 “敏捷软件开发宣言”。他负责维护一个 bliki 网站 --- 一种 blog 和 wiki 的混合衍生物，他还使控制反转 (Inversion of Control)“依赖注入模式 (Dependency Injection)” 一词得到普及。</p>\n<h3 id=\"架构的演变\"><a class=\"anchor\" href=\"#架构的演变\">#</a> 架构的演变</h3>\n<p>随着互联网的发展，网站应用的规模也不断的扩大，进而导致系统架构也在不断的进行变化，从互联网早起到现在，系统架构大体经历了下面几个过程：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/18122ec67e5c4f2ca5579288c42c42cf.png\" class=\"\" title=\"WeChatb55c37f0bb53be8957590c529bb21e83.png\">\n<h4 id=\"单体应用架构\"><a class=\"anchor\" href=\"#单体应用架构\">#</a> 单体应用架构：</h4>\n<p>把所有功能都集中在一个应用中，统一部署，开发成本、部署成本和维护成本低</p>\n<ul>\n<li>优点：项目架构简单，适合用户量少的项目，开发成本低，项目部署在一个节点上，维护方便。</li>\n<li>缺点：功能集中在一个工程中，对于大型项目比一开发和维护，项目模块紧耦合，单点容错率低，无法对不同的模块功能进行针对性的优化和水平拓展</li>\n</ul>\n<h4 id=\"垂直应用架构\"><a class=\"anchor\" href=\"#垂直应用架构\">#</a> 垂直应用架构：</h4>\n<p>所谓垂直应用架构，其实就是把之前的单体应用拆分成多个应用，以提升效率，比如电商系统可以拆分成：电商系统、后台系统、CMS 系统</p>\n<ul>\n<li>优点：项目拆分实现了流量分担，解决了并发问题，而且可以针对不同模块进行优化和水平拓展，同时不同的系统之间不会互相影响，提高容错率</li>\n<li>缺点：系统之间互相存在，无法进行相互调用，系统之间互相独立，会造成一部分功能的冗余</li>\n</ul>\n<h4 id=\"分布式架构\"><a class=\"anchor\" href=\"#分布式架构\">#</a> 分布式架构：</h4>\n<p>随着业务的增加，在垂直应用架构中冗余的业务代码越来越多，就需要将冗余的部分抽取出来，统一做成业务层单独处理，变成一个单独的服务，控制层调用不同的业务层服务就能完成不同的业务功能，具体表现就是一个项目拆分成表现层和服务层两个部分，服务层中包含业务逻辑，表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现，这就是分布式架构。</p>\n<ul>\n<li>优点：抽取公共的功能作为服务层，提高代码复用行。</li>\n<li>缺点：系统间耦合度变高，调用关系错综复杂，难以维护。</li>\n</ul>\n<h4 id=\"soa架构\"><a class=\"anchor\" href=\"#soa架构\">#</a> SOA 架构：</h4>\n<p>分布式架构中的缺点就是调用复杂，而且当服务越来越多，或者当某一个服务压力过大需要水平拓展和负载均衡，对于资源调度和治理就需要用到治理中心 SOA（Service Oriented Architecture）为核心来解决，同时治理中心还可以帮助我们解决服务之间协议不同的问题。</p>\n<ul>\n<li>优点：使用治理中心（ESB\\dubbo）解决了服务见调用关系的自动调节</li>\n<li>缺点：服务间会有依赖关系，一旦某个环节出错会影响较大（服务雪崩），服务关系复杂，运维、测试部署困难。</li>\n</ul>\n<h4 id=\"微服务架构\"><a class=\"anchor\" href=\"#微服务架构\">#</a> 微服务架构：</h4>\n<p>微服务架构在某种程度上面架构 SOA 继续发展的下一步，它更加强调服务的 “彻底拆分”，目的就是提高效率，微服务架构中，每个服务必须独立部署同时互不影响，微服务架构更加轻巧，轻量级。</p>\n<h4 id=\"微服务架构与soa架构的不同\"><a class=\"anchor\" href=\"#微服务架构与soa架构的不同\">#</a> 微服务架构与 SOA 架构的不同</h4>\n<ol>\n<li>微服务架构比 SOA 架构会更加的精细，让专业的人去做专业的。</li>\n<li>目的是提高效率每个服务之间互不影响，微服务架构中，每个服务需要独立部署</li>\n<li>SOA 架构中可能数据库存储会发生共享，微服务强调每个服务都是单独数据库，保证每个服务之间互不影响。</li>\n<li>微服务项目架构比 SOA 架构更加适合与互联网公司迅捷开发、快速迭代版本，因为粒度非常精细。</li>\n</ol>\n<p>为何使用微服务呢？</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/6e5c1179855b42d4ad8f472ea9ed2f1b.png\" class=\"\" title=\"WeChatc690c21a12ed31985403c3be5446e01c.png\">\n<p>微服务就像集群作战，可以提升性能</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/7b30c17619c4446aa1f9cd9c8ac98d35.png\" class=\"\" title=\"WeChate3645eab5fa6b9086451566cb00ebadb.png\">\n<p>微服务架构：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/cdfcdadc0c2a450e869d841d8522e196.png\" class=\"\" title=\"WeChat16099fb7486aa74bf6f6c13e79467e67.png\">\n<ul>\n<li>优点：服务原子化拆分，独立打包、部署和升级，保证每个微服务清晰的任务划分，利于扩展</li>\n<li>缺点：分布式系统开发的技术成本高（容错、分布式事务等），复杂性更高，每个微服务进行分布式独立部署，当进行模块调用的时候，分布式将会变得更加麻烦。</li>\n</ul>\n<h4 id=\"spring-cloud-发展历史\"><a class=\"anchor\" href=\"#spring-cloud-发展历史\">#</a> Spring Cloud 发展历史</h4>\n<p><strong>Spring Cloud netflix -&gt; Spring Cloud Alibaba</strong></p>\n<ol>\n<li>2020-12-22 日<strong> Spring</strong> 官方博客宣布， <code>Spring Cloud 2020.0.0</code>  正式发布。 <code>2020.0.0</code>  是第一个使用新的版本号命名方案的<strong> Spring Cloud</strong> 发行版本。在此之前<strong> Spring Cloud</strong> 使用英国伦敦地铁站的命名方式来命名一个大版本（ <code>train version</code> ），如果不按照新的版本号命名的话，本次的版本号应该是 Ilford。</li>\n<li>更新版本没有什么大惊小怪的，但是本次更新却正式开启了<strong> Spring Cloud Netflix</strong> 体系的终结进程。<strong>Netflix</strong> 公司是目前微服务落地中最成功的公司。它开源了诸如<strong> Eureka</strong> 、<strong>Hystrix</strong> 、<strong>Zuul</strong> 、<strong>Feign</strong> 、<strong>Ribbon</strong> 等等广大开发者所知微服务套件，统称为<strong> Netflix OSS</strong> 。在当时<strong> Netflix OSS</strong> 成为微服务组件上事实的标准。但是在 2018 年<strong> Netflix</strong> 公司宣布其核心组件<strong> Hystrix</strong> 、<strong>Ribbon</strong> 、<strong>Zuul</strong> 、<strong>Eureka</strong> 等进入<strong>维护状态</strong> ，不再进行新特性开发，只修 BUG。这直接影响了<strong> Spring Cloud</strong> 项目的发展路线，<strong>Spring</strong> 官方不得不采取了应对措施，在 2019 年的在 <strong>SpringOne 2019</strong> 大会中，<strong>Spring Cloud</strong> 宣布 <strong>Spring Cloud Netflix 项目进入维护模式</strong> ，并在 2020 年移除相关的<strong> Netflix OSS</strong> 组件。</li>\n<li>Spring Cloud Aalibaba 成为了主流</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/06e4ffcc7d254c14951de86c71ed0d07.png\" class=\"\" title=\"image.png\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/6462169e77c844ea94afb0ec3ff8e5ff.png\" class=\"\" title=\"image.png\">\n<h2 id=\"2-spring-cloud-alibaba\"><a class=\"anchor\" href=\"#2-spring-cloud-alibaba\">#</a> 2 Spring Cloud Alibaba</h2>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p>\n<p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p>\n<h3 id=\"主要功能\"><a class=\"anchor\" href=\"#主要功能\">#</a> 主要功能</h3>\n<ul>\n<li><strong>服务限流降级</strong> ：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li>\n<li><strong>服务注册与发现</strong> ：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li>\n<li><strong>分布式配置管理</strong> ：支持分布式系统中的外部化配置，配置更改时自动刷新。</li>\n<li><strong>消息驱动能力</strong> ：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li>\n<li><strong>分布式事务</strong> ：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li>\n<li><strong>阿里云对象存储</strong> ：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li>\n<li><strong>分布式任务调度</strong> ：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li>\n<li><strong>阿里云短信服务</strong> ：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li>\n</ul>\n<h3 id=\"组件\"><a class=\"anchor\" href=\"#组件\">#</a> 组件</h3>\n<p><strong>[Sentinel]</strong> ：阿里巴巴源产品，把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>\n<p><strong>[Nacos]</strong> ：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>\n<p><strong>[RocketMQ]</strong> ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p>\n<p><strong>[Dubbo]</strong> ：Apache Dubbo™ 是一款高性能 Java RPC 框架。</p>\n<p><strong>[Seata]</strong> ：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p>\n<p><strong>[Alibaba Cloud OSS]</strong> : 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p>\n<p><strong>[Alibaba Cloud SchedulerX]</strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p>\n<p><strong>[Alibaba Cloud SMS]</strong> : 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p>\n<h1 id=\"spring-cloud-alibaba-nacos下载和安装\"><a class=\"anchor\" href=\"#spring-cloud-alibaba-nacos下载和安装\">#</a> Spring Cloud Alibaba Nacos 下载和安装</h1>\n<h2 id=\"nacos介绍\"><a class=\"anchor\" href=\"#nacos介绍\">#</a> Nacos 介绍</h2>\n<p>​\tNacos（Naming Configuration Service） 是一个易于使用的动态服务发现、配置和服务管理平台，用于构建云原生应用程序</p>\n<p>​\t<strong>服务发现是微服务架构中的关键组件之一</strong>。Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p>\n<p>​\tNacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以 “服务” 为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p>\n<h2 id=\"什么是nacos\"><a class=\"anchor\" href=\"#什么是nacos\">#</a> 什么是 Nacos？</h2>\n<ol>\n<li>\n<p>Nacos = <strong>注册中心 + 配置中心组合</strong></p>\n</li>\n<li>\n<p>Nacos 支持几乎所有主流类型的 “服务” 的发现、配置和管理，常见的服务如下：</p>\n<p>Kubernetes Service</p>\n<p>gRPC &amp; Dubbo RPC Service</p>\n<p>Spring Cloud RESTful Service</p>\n</li>\n</ol>\n<h2 id=\"为何使用nacos\"><a class=\"anchor\" href=\"#为何使用nacos\">#</a> 为何使用 Nacos？</h2>\n<p>​\t为何使用注册中心呢？我们以入住酒店的前台为例子，稍微加以解释。先设想一个没有服务前台的酒店，客人入住需要自己寻找合适居住的房间，客人不知道每个房间的情况，无法确定那个房间是打扫干净可以入住，客人只能逐个房间寻找，如果遇到已经居住房客的房间一定很尴尬，显然这是不正常的情况。正常的情况是酒店会安排服务台，酒店打扫干净可以入住的房间会登记注册到服务台，这样客人来住店，只需要在前台就可以查找到可以入住的房间，这样就无需等待快速的入住。显然，服务器提供发注册和发现机制可以让房客快速找到合适的房间，快速解决入住问题。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210915144412020.png\" class=\"\" title=\"image-20210915144412020\">\n<p>​\t采用微服务以后，软件微服务组件各自独立，但最终还要组合为一个整体作为一个软件系统服务于最终客户，这时软件组件之间也需要彼此通讯，彼此调用方法。微服务架构内部发起通讯调用方法的一方成为 “<strong>服务消费者</strong>”，提供远程方法调用的服务器称为 “<strong>服务提供者</strong>”，往往为了提高系统性能，会提供多个服务器作为<strong>服务提供者</strong>，此时<strong>服务消费者</strong>找到<strong>服务提供者</strong>的过程，就类似于用户在找房间的过程。为了帮助<strong>服务消费者</strong>快速的发现<strong>服务提供者</strong>，在微服务框架中都会引入<strong>注册中心。注册中心</strong>类似于酒店的前台，提供在软件服务的注册和发现功能，<strong>服务提供者</strong>会先在注册中心进行<strong>注册</strong>，声明可以对外提供服务，而<strong>服务消费者</strong>只需要在注册中心就可以快速<strong>发现</strong>找到可以使用的服务，快速使用服务。注册中心实现了服务提供和服务消费的快速撮合功能。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210915151230064.png\" class=\"\" title=\"image-20210915151230064\">\n<h2 id=\"nacos下载和安装\"><a class=\"anchor\" href=\"#nacos下载和安装\">#</a> Nacos 下载和安装</h2>\n<p>官网网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWNvcy5pby96aC1jbi9pbmRleC5odG1s\">https://nacos.io/zh-cn/index.html</span></p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210915113531807-1688998492428.png\" class=\"\" title=\"image-20210915113531807\">\n<p>官网文档网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWNvcy5pby96aC1jbi9kb2NzL3F1aWNrLXN0YXJ0Lmh0bWw=\">https://nacos.io/zh-cn/docs/quick-start.html</span></p>\n<p>注意：使用官网推荐的稳定版本：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210915152238853-1688998494209.png\" class=\"\" title=\"image-20210915152238853\">\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvcmVsZWFzZXM=\">https://github.com/alibaba/nacos/releases</span></p>\n<h4 id=\"下载之后安装过程\"><a class=\"anchor\" href=\"#下载之后安装过程\">#</a> 下载之后安装过程</h4>\n<ol>\n<li>解压以后找到 bin 目录</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210915163508347-1688998496663.png\" class=\"\" title=\"image-20210915163508347\">\n<ol start=\"2\">\n<li>\n<p>执行指令：</p>\n<h3 id=\"linuxunixmac\"><a class=\"anchor\" href=\"#linuxunixmac\">#</a> Linux/Unix/Mac</h3>\n<p>启动命令 (standalone 代表着单机模式运行，非集群模式):</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> startup.sh <span class=\"token parameter variable\">-m</span> standalone</pre></td></tr></table></figure><h3 id=\"windows\"><a class=\"anchor\" href=\"#windows\">#</a> Windows</h3>\n<p>启动命令 (standalone 代表着单机模式运行，非集群模式):</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>startup.cmd <span class=\"token parameter variable\">-m</span> standalone</pre></td></tr></table></figure></li>\n<li>\n<p>结果：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210915163836699.png\" class=\"\" title=\"image-20210915163836699\">\n</li>\n<li>\n<p>得到结果以后为了验证是否成功开启 Nacos，我们需要访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4ODQ4L25hY29z\">http://localhost:8848/nacos</span></p>\n</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210915163952277-1688998507793.png\" class=\"\" title=\"image-20210915163952277\">\n<ol start=\"5\">\n<li>出现此界面表示已经成功启动 Nacos，默认的账号密码是：nacos/nacos</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210915164224183-1688998510021.png\" class=\"\" title=\"image-20210915164224183\">\n<ol start=\"6\">\n<li>到这里就是成功开启了 Nacos 服务了。</li>\n</ol>\n<h1 id=\"nacos服务提供者注册\"><a class=\"anchor\" href=\"#nacos服务提供者注册\">#</a> Nacos 服务提供者注册</h1>\n<h2 id=\"nacos代替eureka\"><a class=\"anchor\" href=\"#nacos代替eureka\">#</a> Nacos 代替 Eureka</h2>\n<p>​\tNacos 可以直接提供注册中心（Eureka）+ 配置中心（Config），所以它的好处显而易见，我们在上节课成功安装和启动了 Nacos 以后就可以发现 Nacos 本身就是一个小平台，它要比之前的 Eureka 更加方便，不需要我们在自己做配置。</p>\n<h2 id=\"nacos服务注册中心\"><a class=\"anchor\" href=\"#nacos服务注册中心\">#</a> Nacos 服务注册中心</h2>\n<p>​\t服务发现是微服务架构中的关键组件之一。在这样的架构中，手动为每个客户端配置服务列表可能是一项艰巨的任务，并且使得动态扩展极其困难。Nacos Discovery 帮助您自动将您的服务注册到 Nacos 服务器，Nacos 服务器会跟踪服务并动态刷新服务列表。此外，Nacos Discovery 将服务实例的一些元数据，如主机、端口、健康检查 URL、主页等注册到 Nacos。</p>\n<p>​\t学习任何知识我们都需要从它的官方文档入手，所以我们直接来看官网给我们提供的文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3VkLWFsaWJhYmEjbGVhcm4=\">https://spring.io/projects/spring-cloud-alibaba#learn</span></p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210916145054013.png\" class=\"\" title=\"image-20210916145558297\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210916145054014.png\" class=\"\" title=\"image-20210916145707907\">\n<p>​</p>\n<h2 id=\"如何引入nacos-discovery进行服务注册发现\"><a class=\"anchor\" href=\"#如何引入nacos-discovery进行服务注册发现\">#</a> 如何引入 Nacos Discovery 进行服务注册 / 发现</h2>\n<h3 id=\"创建新项目\"><a class=\"anchor\" href=\"#创建新项目\">#</a> 创建新项目</h3>\n<p>聚合项目：由于聚合带来的诸多好处，在 SpringBoot 项目开发中也广泛采用，开发中将 SpringBoot 项目按照功能分成子模块开发，所以我们在使用 Spring Cloud Alibaba 完成项目的时候，也是采用聚合项目来完成。</p>\n<p>​\t父项目</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210916172456588.png\" class=\"\" title=\"image-20210916172456588\">\n<p>​\t子项目</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210916175756108.png\" class=\"\" title=\"image-20210916175756108\">\n<h3 id=\"pom\"><a class=\"anchor\" href=\"#pom\">#</a> POM</h3>\n<p>​\t父项目 pom 文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modelVersion<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modelVersion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>parent<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>parent<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">2.4</span><span class=\"token number\">.10</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>relativePath<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> lookup parent from repository <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parent<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">SpringCloudAlibabaMSB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>name<span class=\"token punctuation\">></span></span><span class=\"token class-name\">SpringCloudAlibabaMSB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>packaging<span class=\"token punctuation\">></span></span>pom<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>packaging<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>description<span class=\"token punctuation\">></span></span><span class=\"token class-name\">SpringCloudAlibabaMSB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>description<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>properties<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>java<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.8</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>java<span class=\"token punctuation\">.</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token operator\">&lt;</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>version<span class=\"token operator\">></span><span class=\"token number\">2.2</span><span class=\"token number\">.5</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RELEASE</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>properties<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>tomcat<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span>provided<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencyManagement<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>dependencies<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span>$<span class=\"token punctuation\">&#123;</span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>version<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>type<span class=\"token punctuation\">></span></span>pom<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>type<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>scope<span class=\"token punctuation\">></span></span><span class=\"token keyword\">import</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>scope<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencyManagement<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modules<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">></span></span>cloudAlibaba<span class=\"token operator\">-</span><span class=\"token class-name\">Nacos</span><span class=\"token operator\">-</span><span class=\"token number\">9001</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">module</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modules<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span></pre></td></tr></table></figure><p>​\t子项目 pom 文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modelVersion<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modelVersion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>parent<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">SpringAlibabaMSB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>relativePath<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> lookup parent from repository <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parent<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span><span class=\"token number\">9001</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>name<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span><span class=\"token number\">9001</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>description<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span><span class=\"token number\">9001</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>description<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"yml\"><a class=\"anchor\" href=\"#yml\">#</a> YML</h3>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210916180029680.png\" class=\"\" title=\"image-20210916180029680\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">9001</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>provider</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>management<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  endpoint<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    web<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      exposure<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        include<span class=\"token operator\">:</span> <span class=\"token char\">'*'</span></pre></td></tr></table></figure><h3 id=\"启动类\"><a class=\"anchor\" href=\"#启动类\">#</a> 启动类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabanacos9001</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span><span class=\"token comment\">// 加此注解</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloudalibabaNacos9001Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloudalibabaNacos9001Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"业务类\"><a class=\"anchor\" href=\"#业务类\">#</a> 业务类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/mashibing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServerPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello Nacos Discovery\"</span><span class=\"token operator\">+</span>serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<p><strong>注意，在启动项目前一定要启动 Nacos</strong></p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210916180252032.png\" class=\"\" title=\"image-20210916180252032\">\n<h2 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h2>\n<p>​\t根据上面的练习演示，在创建一个新的 9002 端口作为服务注册到 Nacos 中，为了下节课来做准备</p>\n<h1 id=\"nacos服务消费者注册和负载均衡\"><a class=\"anchor\" href=\"#nacos服务消费者注册和负载均衡\">#</a> Nacos 服务消费者注册和负载均衡</h1>\n<h2 id=\"服务消费者\"><a class=\"anchor\" href=\"#服务消费者\">#</a> 服务消费者</h2>\n<p>​\t上节课我们成功配置了 Nacos 服务提供者的注册，那么这节课我们将配置服务消费者，同时来验证 Nacos 自带负载均衡。</p>\n<h2 id=\"具体配置\"><a class=\"anchor\" href=\"#具体配置\">#</a> 具体配置</h2>\n<h3 id=\"新建module\"><a class=\"anchor\" href=\"#新建module\">#</a> 新建 Module</h3>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210917135655649-1688998535785.png\" class=\"\" title=\"image-20210917135655649\">\n<h4 id=\"pom-2\"><a class=\"anchor\" href=\"#pom-2\">#</a> pom</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>xml version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>project xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0\"</span> xmlns<span class=\"token operator\">:</span>xsi<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         xsi<span class=\"token operator\">:</span>schemaLocation<span class=\"token operator\">=</span><span class=\"token string\">\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modelVersion<span class=\"token punctuation\">></span></span><span class=\"token number\">4.0</span><span class=\"token number\">.0</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modelVersion<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>parent<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span><span class=\"token class-name\">SpringAlibabaMSB</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>relativePath<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> lookup parent from repository <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parent<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>mashibing<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span><span class=\"token number\">8083</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>name<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span><span class=\"token number\">8083</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>description<span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span><span class=\"token number\">8083</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>description<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>properties<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>java<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">1.8</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>java<span class=\"token punctuation\">.</span>version<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>properties<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependencies<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>web<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>discovery<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependencies<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>project<span class=\"token operator\">></span></pre></td></tr></table></figure><p>注意父项目要添加<models>标记</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>modules<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span><span class=\"token number\">9001</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">module</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span><span class=\"token number\">9002</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">module</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">module</span><span class=\"token punctuation\">></span></span>cloudalibaba<span class=\"token operator\">-</span>consumer<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span><span class=\"token number\">8083</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token keyword\">module</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>modules<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"yml-2\"><a class=\"anchor\" href=\"#yml-2\">#</a> yml</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">8083</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>consumer</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr></table></figure><h4 id=\"主启动\"><a class=\"anchor\" href=\"#主启动\">#</a> 主启动</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaconsumernacos8083</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloudalibabaConsumerNacos8083Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloudalibabaConsumerNacos8083Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"测试-2\"><a class=\"anchor\" href=\"#测试-2\">#</a> 测试</h4>\n<p>注意：要先启动 Nacos，然后再来启动服务</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210917140345089.png\" class=\"\" title=\"image-20210917140345089\">\n<h2 id=\"远程调用ribbon\"><a class=\"anchor\" href=\"#远程调用ribbon\">#</a> 远程调用 Ribbon</h2>\n<p>​\t大家现在肯定很疑惑，这个服务消费者不是要调用具体服务吗？但是现在仅仅是创建出来了，和上节课创建的服务者也没有多大的区别啊？这具体怎么用那？</p>\n<p>是这样的，我们现在想要让这个服务的消费者去调用服务提供者，我们就需要通过 Ribbon 来进行调用，那么首先我们先来了解 Ribbon。</p>\n<h4 id=\"什么是ribbon\"><a class=\"anchor\" href=\"#什么是ribbon\">#</a> 什么是 Ribbon</h4>\n<p>​\t它是一个基于 HTTP 和 TCP<strong> 客户端</strong>负载均衡器。它虽然只是一个工具类库，它却是<strong>每一个微服务</strong>的基础设施。因为实际上，对于服务间调用、API 网关请求转发都需要经过 Ribbon 负载均衡来实现。总体来说，Ribbon 的主要作用是：从注册服务器端拿到对应服务列表后以负载均衡的方式访问对应服务。</p>\n<p>​\t何时使用 Ribbon 呢？一般情况下当一个模块需要从另外一个模块获取数据时候就需要使用 Ribbon 的远程访问功能了。</p>\n<p>​\t要注意的是 Nacos 已经整合了 Ribbon，所以我们想要使用只需要导入 Spring Cloud Alibaba Nacos 的依赖就可以直接使用了。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210917145544074.png\" class=\"\" title=\"image-20210917145544074\">\n<p>​</p>\n<h4 id=\"具体使用\"><a class=\"anchor\" href=\"#具体使用\">#</a> 具体使用</h4>\n<p>RestTemplate 封装了 Ribbon 调用的过程，其中 getForObject 是最常用方法，同时还要在服务消费者中配置 RestTemplate：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@LoadBalanced</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">,</span>arg2<span class=\"token punctuation\">,</span>arg3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>第一个参数 url 表示被调用的目标 Rest 接口位置</strong></p>\n<ol>\n<li>url 的第一部分是在 Nacos 中注册的服务提供者名称，如果多个服务提供者注册相同名称，Ribbon 会自动寻找其中一个服务提供者，并且调用接口方法。这个就是负载均衡功能。</li>\n<li>url 后半部是控制器的请求路径。</li>\n</ol>\n<p><strong>第二个参数是返回值类型</strong></p>\n<ol>\n<li>JavaBean 类型或者 JavaBean 数组类型，如果控制器返回的是 List 集合，需要使用数组类型接收。</li>\n</ol>\n<p><strong>第三个参数是可变参数</strong></p>\n<ol>\n<li>是传递给 url 的动态参数，使用参数时候需要在 url 上需要使用 {1}、{2}、{3} 进行参数占位，这样传递的参数就会自动替换占位符。</li>\n</ol>\n<h2 id=\"验证nacos自带负载均衡\"><a class=\"anchor\" href=\"#验证nacos自带负载均衡\">#</a> 验证 Nacos 自带负载均衡</h2>\n<p>​\t我们现在知道了如果我们想要让服务消费者 consumer-nacos-8083 调用服务提供者 nacos-9001 或者 9002，那么必然要使用 Ribbon，所以我们要做的第一件事情就是先让 9001 或者 9002 服务对外提供接口，用于访问，由于 9001 已经有对外提供的接口了，所以我们只需要仿照完成 9002 即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabanacos9002<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;server.port&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/mashibing\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getServerPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello Nacos Discovery\"</span><span class=\"token operator\">+</span>serverPort<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t接下来我们就需要通过服务消费 8083 者来访问 9001 或者 9002，但是在这之前，我们先在 consumer-nacos-8083 模块中的 yml 文件里添加一句话</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">8083</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>consumer</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre># 消费者将要去访问的微服务名称（注册成功的<span class=\"token class-name\">Nacos</span>的微服务提供者）</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>service<span class=\"token operator\">-</span>url<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  nacos<span class=\"token operator\">-</span>user<span class=\"token operator\">-</span>service<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>nacos<span class=\"token operator\">-</span>provider</pre></td></tr></table></figure><p>​\t因为我们要是使用 Ribbon，所以我们还需要在启动类上配置 restTemplate</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>loadbalancer<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LoadBalanced</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bean</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloudalibabaConsumerNacos8083Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloudalibabaConsumerNacos8083Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@LoadBalanced</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t配置好之后，我们就可以在 8083 的消费者上来通过 Ribbon 来自动的负载均衡调用 9001 或者 9002 的服务提供者了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaconsumernacos8083<span class=\"token punctuation\">.</span>controller</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PathVariable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestTemplate</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Resource</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">RestTemplate</span> restTemplate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 消费者去访问具体服务，这种写法可以实现</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 配置文件和代码的分离</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;service-url.nacos-user-service&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> serverURL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"consumer/nacos\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDiscovery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>serverURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span>serverURL<span class=\"token operator\">+</span><span class=\"token string\">\"/mashibing\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>访问：http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">8083</span><span class=\"token operator\">/</span>consumer<span class=\"token operator\">/</span>nacos</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>结果：<span class=\"token class-name\">Hello</span> <span class=\"token class-name\">Nacos</span> <span class=\"token class-name\">Discovery9001</span><span class=\"token operator\">/</span><span class=\"token function\">9002</span><span class=\"token punctuation\">(</span>负载均衡切换显示<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>总结：因为 Nacos 中本身就集成了 Ribbon 所以它本身就自带负载均衡</p>\n<h1 id=\"nacos服务注册中心对比提升\"><a class=\"anchor\" href=\"#nacos服务注册中心对比提升\">#</a> Nacos 服务注册中心对比提升</h1>\n<h2 id=\"各种服务注册中心对比\"><a class=\"anchor\" href=\"#各种服务注册中心对比\">#</a> 各种服务注册中心对比</h2>\n<table>\n<thead>\n<tr>\n<th>服务注册与发现框架</th>\n<th>CAP 模型</th>\n<th>控制台管理</th>\n<th>社区活跃度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Eureka</td>\n<td>AP</td>\n<td>支持</td>\n<td>低 (2.x 版本闭源)</td>\n</tr>\n<tr>\n<td>Zookeeper</td>\n<td>CP</td>\n<td>不支持</td>\n<td>中</td>\n</tr>\n<tr>\n<td>Consul</td>\n<td>CP</td>\n<td>支持</td>\n<td>高</td>\n</tr>\n<tr>\n<td>Nacos</td>\n<td>AP/CP</td>\n<td>支持</td>\n<td>高</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cap模型\"><a class=\"anchor\" href=\"#cap模型\">#</a> CAP 模型</h3>\n<p>​\t计算机专家 埃里克・布鲁尔（Eric Brewer）于 2000 年在 ACM 分布式计算机原理专题讨论会（简称：PODC）中提出的分布式系统设计要考虑的三个核心要素：</p>\n<p>​\t\t一致性（Consistency）：同一时刻的同一请求的实例返回的结果相同，所有的数据要求具有强一致性 (Strong Consistency)</p>\n<p>​\t\t可用性（Availability）：所有实例的读写请求在一定时间内可以得到正确的响应</p>\n<p>​\t\t分区容错性（Partition tolerance）：在网络异常（光缆断裂、设备故障、宕机）的情况下，系统仍能提供正常的服务</p>\n<p>​\t以上三个特点就是 CAP 原则（又称 CAP 定理），但是三个特性不可能同时满足，所以分布式系统设计要考虑的是在满足 P（分区容错性）的前提下选择 C（一致性）还是 A（可用性），即：CP 或 AP</p>\n<h3 id=\"cp原则一致性-分区容错性原则\"><a class=\"anchor\" href=\"#cp原则一致性-分区容错性原则\">#</a> CP 原则：一致性 + 分区容错性原则</h3>\n<p>​\tCP 原则属于强一致性原则，要求所有节点可以查询的数据随时都要保持一直（同步中的数据不可查询），即：若干个节点形成一个逻辑的共享区域，某一个节点更新的数据都会立即同步到其他数据节点之中，当数据同步完成后才能返回成功的结果，但是在实际的运行过程中网络故障在所难免，如果此时若干个服务节点之间无法通讯时就会出现错误，从而牺牲了以可用性原则（A），例如关系型数据库中的事务。</p>\n<h3 id=\"ap原则可用性原则-分区容错性原则\"><a class=\"anchor\" href=\"#ap原则可用性原则-分区容错性原则\">#</a> AP 原则：可用性原则 + 分区容错性原则</h3>\n<p>​\tAP 原则属于弱一致性原则，在集群中只要有存活的节点那么所发送来的所有请求都可以得到正确的响应，在进行数据同步处理操作中即便某些节点没有成功的实现数据同步也返回成功，这样就牺牲一致性原则（C 原则）。</p>\n<p>​\t使用场景：对于数据的同步一定会发出指令，但是最终的节点是否真的实现了同步，并不保证，可是却可以及时的得到数据更新成功的响应，可以应用在网络环境不是很好的场景中。</p>\n<p>​</p>\n<h2 id=\"nacos支持cp和ap\"><a class=\"anchor\" href=\"#nacos支持cp和ap\">#</a> Nacos 支持 CP 和 AP</h2>\n<p>​\tNacos 无缝支持一些主流的开源生态，同时再阿里进行 Nacos 设计的时候重复的考虑到了市场化的运作（市面上大多都是以单一的实现形式为主，例如：Zookeeper 使用的是 CP、而 Eureka 采用的是 AP），在 Nacos 中提供了两种模式的动态切换。</p>\n<p>​\t<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210923165642323.png\" class=\"\" title=\"image-20210923165642323\"></p>\n<h2 id=\"nacos-何时选择切换模式\"><a class=\"anchor\" href=\"#nacos-何时选择切换模式\">#</a> Nacos 何时选择切换模式</h2>\n<ol>\n<li>\n<p>一般来说，如果不需要储存服务界别的信息且服务实例通过 nacos-client 注册，并能够保持心跳上报，那么就可以选择 AP 模式。如 Spring Cloud 和 Dubbo，都适用于 AP 模式，AP 模式为了服务的可用性减弱了一致性，因此 AP 模式下只支持注册临时实例。</p>\n</li>\n<li>\n<p>如果需要在服务级别编辑或者储存配置信息，那么 CP 是必须的，K8S 服务和 DNS 服务则是用于 CP 模式。CP 模式下则支持注册持久化实例，此时则是以 Raft 协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不存在，则会返回错误。</p>\n</li>\n<li>\n<p>切换命令（默认是 AP）：</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>curl <span class=\"token operator\">-</span><span class=\"token class-name\">X</span> <span class=\"token constant\">PUT</span> '$<span class=\"token constant\">NACOS_SERVER</span><span class=\"token operator\">:</span><span class=\"token number\">8848</span><span class=\"token operator\">/</span>nacos<span class=\"token operator\">/</span>v1<span class=\"token operator\">/</span>ns<span class=\"token operator\">/</span>operator<span class=\"token operator\">/</span>switches<span class=\"token operator\">?</span>entry<span class=\"token operator\">=</span>serverMode<span class=\"token operator\">&amp;</span>value<span class=\"token operator\">=</span><span class=\"token constant\">CP</span>'</pre></td></tr></table></figure><p>注意：临时和持久化的区别主要在健康检查失败后的表现，持久化实例健康检查失败后会被标记成不健康，而临时实例会直接从列表中被删除。</p>\n<h1 id=\"nacos之服务配置中心\"><a class=\"anchor\" href=\"#nacos之服务配置中心\">#</a> Nacos 之服务配置中心</h1>\n<h2 id=\"基础配置\"><a class=\"anchor\" href=\"#基础配置\">#</a> 基础配置</h2>\n<p>Nacos 不仅仅可以作为注册中心来使用，同时它支持作为配置中心</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210924140930824.png\" class=\"\" title=\"image-20210924140930824\">\n<p>首先我们还是新建 Model：cloudalibaba-config-3377</p>\n<h3 id=\"pom文件\"><a class=\"anchor\" href=\"#pom文件\">#</a> pom 文件</h3>\n<p>​\t这里我们主要要引入的是此依赖，这个依赖依据在官网上可以找到:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmctY2xvdWQtYWxpYmFiYS1ncm91cC5naXRodWIuaW8vZ2l0aHViLXBhZ2VzL2dyZWVud2ljaC9zcHJpbmctY2xvdWQtYWxpYmFiYS5odG1sI19hbl9leGFtcGxlX29mX3VzaW5nX25hY29zX2Rpc2NvdmVyeV9mb3Jfc2VydmljZV9yZWdpc3RyYXRpb25kaXNjb3ZlcnlfYW5kX2NhbGw=\">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html#_an_example_of_using_nacos_discovery_for_service_registrationdiscovery_and_call</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span> com<span class=\"token punctuation\">.</span>alibaba<span class=\"token punctuation\">.</span>cloud <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span> spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>alibaba<span class=\"token operator\">-</span>nacos<span class=\"token operator\">-</span>config <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"yml配置\"><a class=\"anchor\" href=\"#yml配置\">#</a> YML 配置</h3>\n<p>​\t要注意的是这里我们要配置两个，因为 Nacos 同 SpringCloud-config 一样，<strong>在项目初始化时，要保证先从配置中心进行配置拉取，拉取配置之后，才能保证项目的正常启动</strong>。</p>\n<p>​\t<strong>springboot 中配置文件的加载是存在优先级顺序的，bootstrap 优先级高于 application</strong></p>\n<p>​\t分别要配置的是，这里 bootstrap.yml 配置好了以后，作用是两个，第一个让 3377 这个服务注册到 Nacos 中，第二个作用就是去 Nacos 中去读取指定后缀为 yaml 的配置文件：</p>\n<p>bootstrap.yml</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># nacos配置</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">3377</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>client</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span> #<span class=\"token class-name\">Nacos</span>服务注册中心地址</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      config<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span> #<span class=\"token class-name\">Nacos</span>作为配置中心地址</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        file<span class=\"token operator\">-</span>extension<span class=\"token operator\">:</span> yaml #指定yaml格式的配置</pre></td></tr></table></figure><p>application.yml</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  profiles<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    active<span class=\"token operator\">:</span> dev # 表示开发环境</pre></td></tr></table></figure><h3 id=\"主启动-2\"><a class=\"anchor\" href=\"#主启动-2\">#</a> 主启动</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>mashibing<span class=\"token punctuation\">.</span>cloudalibabaconfig3377</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>discovery<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableDiscoveryClient</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CloudalibabaConfig3377Application</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CloudalibabaConfig3377Application</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"业务类-2\"><a class=\"anchor\" href=\"#业务类-2\">#</a> 业务类</h3>\n<p>​\t这里的 @RefreshScope 实现配置自动更新，意思为如果想要使配置文件中的配置修改后不用重启项目即生效，可以使用 @RefreshScope 配置来实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>beans<span class=\"token punctuation\">.</span>factory<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Value</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RefreshScope</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@RefreshScope</span> <span class=\"token comment\">// 支持 Nacos 的动态刷新功能</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConfigClientController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$&#123;config.info&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> configInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/config/info\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getConfigInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> configInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"nacos配置规则\"><a class=\"anchor\" href=\"#nacos配置规则\">#</a> Nacos 配置规则</h3>\n<p>​\t在 Nacos Spring Cloud 中， <code>dataId</code>  的完整格式如下（详情可以参考官网 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWNvcy5pby96aC1jbi9kb2NzL3F1aWNrLXN0YXJ0LXNwcmluZy1jbG91ZC5odG1sJUVGJUJDJTg5JUVGJUJDJTlB\">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html）：</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$<span class=\"token punctuation\">&#123;</span>prefix<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">-</span>$<span class=\"token punctuation\">&#123;</span>spring<span class=\"token punctuation\">.</span>profiles<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">&#123;</span>file<span class=\"token operator\">-</span>extension<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li><code>prefix</code>  默认为  <code>spring.application.name</code>  的值，也可以通过配置项  <code>spring.cloud.nacos.config.prefix</code>  来配置。</li>\n<li><code>spring.profiles.active</code>  即为当前环境对应的 profile，注意：<strong>当  <code>spring.profiles.active</code>  为空时，对应的连接符  <code>-</code>  也将不存在，dataId 的拼接格式变成  <code>$&#123;prefix&#125;.$&#123;file-extension&#125;</code> </strong>（不能删除）</li>\n<li><code>file-exetension</code>  为配置内容的数据格式，可以通过配置项  <code>spring.cloud.nacos.config.file-extension</code>  来配置。目前只支持  <code>properties</code>  和  <code>yaml</code>  类型。</li>\n<li>通过 Spring Cloud 原生注解  <code>@RefreshScope</code>  实现配置自动更新：</li>\n<li><strong>所以根据官方给出的规则我们最终需要在 Nacos 配置中心添加的配置文件的名字规则和名字为：</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># $<span class=\"token punctuation\">&#123;</span>spring<span class=\"token punctuation\">.</span>application<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">-</span>$<span class=\"token punctuation\">&#123;</span>spring<span class=\"token punctuation\">.</span>profiles<span class=\"token punctuation\">.</span>active<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">.</span>$<span class=\"token punctuation\">&#123;</span>file<span class=\"token operator\">-</span>extension<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre># nacos<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>client<span class=\"token operator\">-</span>dev<span class=\"token punctuation\">.</span>yaml</pre></td></tr><tr><td data-num=\"3\"></td><td><pre># 微服务名称<span class=\"token operator\">-</span>当前环境<span class=\"token operator\">-</span>文件格式</pre></td></tr></table></figure><img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210924154026491.png\" class=\"\" title=\"image-20210924160100192\">\n<h2 id=\"nacos平台创建配置操作\"><a class=\"anchor\" href=\"#nacos平台创建配置操作\">#</a> Nacos 平台创建配置操作</h2>\n<p>增加配置</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210924154802374.png\" class=\"\" title=\"image-20210924154802374\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210924155218752.png\" class=\"\" title=\"image-20210924160459681\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>config<span class=\"token operator\">:</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    info<span class=\"token operator\">:</span> nacos config center<span class=\"token punctuation\">,</span>version <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>然后在配置中心就会看到刚刚发布的配置</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210924155315617.png\" class=\"\" title=\"image-20210924155315617\">\n<h2 id=\"自动配置更新\"><a class=\"anchor\" href=\"#自动配置更新\">#</a> 自动配置更新</h2>\n<p>修改 Nacos 配置，不需要重启项目即可自动刷新</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210924195241683.png\" class=\"\" title=\"image-20210924195241683\">\n<p>修改版本号为 2，点击发布</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210924195325905.png\" class=\"\" title=\"image-20210924195325905\">\n<h2 id=\"测试-3\"><a class=\"anchor\" href=\"#测试-3\">#</a> 测试</h2>\n<p>启动服务访问服务来测试（没有修改之前是 1，修改之后不需要重启项目既可以直接获取最新配置）：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMzc3L2NvbmZpZy9pbmZv\">http://localhost:3377/config/info</span></p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210924182159179.png\" class=\"\" title=\"image-20210924182159179\">\n<h2 id=\"bootsrap文件不读取问题\"><a class=\"anchor\" href=\"#bootsrap文件不读取问题\">#</a> bootsrap.* 文件不读取问题</h2>\n<p><strong>在 spring cloud2.4 之后将<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1ib290c3RyYXAmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\"> bootstrap</span>.enabled 设置为 false。</strong></p>\n<h3 id=\"解决方式一\"><a class=\"anchor\" href=\"#解决方式一\">#</a> 解决方式一：</h3>\n<p>添加 bootstrap 的 POM 依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-bootstrap<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 自行修改相应版本 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.0.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"解决方式二\"><a class=\"anchor\" href=\"#解决方式二\">#</a> 解决方式二：</h3>\n<p>添加环境变量：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/e38c1ae0a79547ae9928236355f7cc3a.png\" class=\"\" title=\"img\">\n<p>spring.cloud.bootstrap.enabled=true</p>\n<p>** 特殊说明：** 如果你不是 spring cloud 项目，只是 spring boot 项目，在启动无法加载到 bootstrap 的配置，应该为如下解决方式：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-context<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.0.1.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"nacos命名空间分组和dataid三者关系\"><a class=\"anchor\" href=\"#nacos命名空间分组和dataid三者关系\">#</a> Nacos 命名空间分组和 DataID 三者关系</h1>\n<h2 id=\"名词解释\"><a class=\"anchor\" href=\"#名词解释\">#</a> 名词解释</h2>\n<p><strong>命名空间</strong>（Namespace）</p>\n<p>​\t用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 Group 或 Data ID 的配置。Namespace 的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等。</p>\n<p><strong>配置分组</strong>（Group）</p>\n<p>​\tNacos 中的一组配置集，是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置。</p>\n<p><strong>配置集 ID</strong>（Data ID）</p>\n<p>​\tNacos 中的某个配置集的 ID。配置集 ID 是组织划分配置的维度之一。Data ID 通常用于组织划分系统的配置集。一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识。Data ID 通常采用类 Java 包（如 com.taobao.tc.refund.log.level）的命名规则保证全局唯一性。此命名规则非强制。</p>\n<p>​\t配置集：一组相关或者不相关的配置项的集合称为配置集。在系统中，一个配置文件通常就是一个配置集，包含了系统各个方面的配置。例如，一个配置集可能包含了数据源、线程池、日志级别等配置项。</p>\n<h3 id=\"三者关系\"><a class=\"anchor\" href=\"#三者关系\">#</a> 三者关系</h3>\n<p>​\t这三者的关系类似于 Java 里面的 package 名和类名，最外层的 Namespace 是可以用于区分部署环境的，Group 和 DataID 逻辑上区分两个目标对象。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/sanzheguanxi%20.png\" class=\"\" title=\"sanzheguanxi\">\n<p><strong>默认情况</strong></p>\n<p>Namespace=public，Group=DEFAULT_GROUP，默认 Cluster 是 DEFAULT</p>\n<p><strong>具体情况</strong></p>\n<p>​\tNacos 默认的命名空间是 public，我们就可以利用 Namespace 来实现隔离，比如我们现在有三个环境：开发、测试、生产环境，我们就可以创建三个 Namespace，不同的 N amespace 之间是隔离的。</p>\n<p>​\tGroup 本身就是分组的意思，它可以把不同的微服务划分到同一个分组里面去。</p>\n<p>​\t剩下的就是具体微服务，一个 Service 可以包含多个 Cluster，Nacos 默认 Cluster 是 DEFAULT，Cluster 是对指定微服务的一个虚拟划分。比如说，将一个 Service 部署在北京和和杭州的机房中，北京机房的 Service 就可以起名为（BJ），杭州机房中的 Service 就可以起名为（HZ），这样就可以尽量让同一个机房的微服务互相调用，提升性能。</p>\n<h2 id=\"切换不同环境\"><a class=\"anchor\" href=\"#切换不同环境\">#</a> 切换不同环境</h2>\n<h3 id=\"dataid方案\"><a class=\"anchor\" href=\"#dataid方案\">#</a> DataID 方案</h3>\n<ol>\n<li>\n<p>指定 spring.profile.active 和配置文件的 DataID 来使不同环境下读取不同的配置，配置规则：默认空间 + 新建 dev 和 test 两个 DataId：</p>\n<ol>\n<li>新建 dev 配置 DataID（已经创建完成）</li>\n<li>新建 test 配置 DataID</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926170016223.png\" class=\"\" title=\"image-20210926170016223\">\n</li>\n<li>\n<p>通过 spring.profile.active 属性就能进行多环境下配置文件的读取</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926170339921.png\" class=\"\" title=\"image-20210926170339921\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926170620844.png\" class=\"\" title=\"image-20210926170620844\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  profiles<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    # active<span class=\"token operator\">:</span> dev #表示开发环境</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    active<span class=\"token operator\">:</span> test #表示测试环境</pre></td></tr></table></figure></li>\n<li>\n<p>测试</p>\n<p>最后再次访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMzc3L2xvY2FsaG9zdC9jb25maWcvaW5mbw==\">http://localhost:3377/localhost/config/info</span></p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926170942161.png\" class=\"\" title=\"image-20210926170942161\">\n</li>\n</ol>\n<h3 id=\"group方案\"><a class=\"anchor\" href=\"#group方案\">#</a> Group 方案</h3>\n<p>​\t根据之前的讲解我们都知道 Group 为分组默认是：DEFAULT_GROUP，所以现在我们就需要分出两组，一组是 “Dev 开发组”，一组是 “test 测试组”</p>\n<ol>\n<li>\n<p>新建 Group</p>\n<p>DEV_GROUP</p>\n</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926171610558.png\" class=\"\" title=\"image-20210926171610558\">\n<p>​\t\tTEST_GROUP</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926171904382.png\" class=\"\" title=\"image-20210926171904382\">\n<p>配置列表，两个 DataID 一致，但是分组不同的配置文件：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926171954022.png\" class=\"\" title=\"image-20210926171954022\">\n<ol start=\"2\">\n<li>完成以上配置以后，接下来就需要通过 bootstrap+application 来配合完成，具体方式：在 config 下增加一条 Group 的配置即可，可以配置为 DEV_GROUP 或 TEST_GROUP</li>\n</ol>\n<p>​\tbootstrap:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># nacos配置</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">3377</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>client</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span> #<span class=\"token class-name\">Nacos</span>服务注册中心地址</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      config<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span> #<span class=\"token class-name\">Nacos</span>作为配置中心地址</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        file<span class=\"token operator\">-</span>extension<span class=\"token operator\">:</span> yaml #指定yaml格式的配置</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        group<span class=\"token operator\">:</span> <span class=\"token constant\">TEST_GROUP</span> #增加分组</pre></td></tr></table></figure><p>​\tapplication:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  profiles<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    # active<span class=\"token operator\">:</span> dev #表示开发环境</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    # active<span class=\"token operator\">:</span> test #表示测试环境</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    active<span class=\"token operator\">:</span> info</pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p>测试（可以测试不同分组）：</p>\n<p>最后再次访问：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDozMzc3L2xvY2FsaG9zdC9jb25maWcvaW5mbw==\">http://localhost:3377/localhost/config/info</span></p>\n</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926173730298.png\" class=\"\" title=\"image-20210926173730298\">\n<h3 id=\"namespace空间方案\"><a class=\"anchor\" href=\"#namespace空间方案\">#</a> Namespace 空间方案</h3>\n<p>​\t我们已经把 DataID 方案和 Group 方案完成了，然后接下来我们来看一下 Namespace（命名空间）方案，默认此方案为 public，此方案不能删除，我们现在来新建两个命名空间方案</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926174051313.png\" class=\"\" title=\"image-20210926174051313\">\n<ol>\n<li>新建 dev/test 的 Namespace</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926174422526.png\" class=\"\" title=\"image-20210926174422526\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926174807843.png\" class=\"\" title=\"image-20210926174807843\">\n<ol>\n<li>\n<p>服务管理 - 服务列表页面查看</p>\n<p>此时我们就可以切换对应的命名空间，然后再通过 Group 和 DataID 来进行切换，如果想要切换命名空间，我们就需要通过命名空间 ID 来进行切换</p>\n<p><img data-src=\"Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220721230227374.png\" alt=\"image-20220721230227374\" /><img data-src=\"Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220721230244037.png\" alt=\"image-20220721230244037\" /></p>\n</li>\n<li>\n<p>按照域名配置（Namespace+Group+DataId）编写</p>\n<p>​\t先通过 namespace 命名空间 ID 来确认使用的命名空间</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926175605787.png\" class=\"\" title=\"image-20210926175605787\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># nacos配置</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">3377</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>config<span class=\"token operator\">-</span>client</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span> #<span class=\"token class-name\">Nacos</span>服务注册中心地址</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      config<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span> #<span class=\"token class-name\">Nacos</span>作为配置中心地址</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        file<span class=\"token operator\">-</span>extension<span class=\"token operator\">:</span> yaml #指定yaml格式的配置</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        group<span class=\"token operator\">:</span> <span class=\"token constant\">TEST_GROUP</span> # 指定分组</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        namespace<span class=\"token operator\">:</span> <span class=\"token number\">4</span>ba4bf0e<span class=\"token operator\">-</span><span class=\"token number\">210</span>c<span class=\"token operator\">-</span><span class=\"token number\">41</span>ce<span class=\"token operator\">-</span><span class=\"token number\">954</span>c<span class=\"token operator\">-</span><span class=\"token number\">23538d</span>e1dcbc #指定命名空间</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  profiles<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    active<span class=\"token operator\">:</span> dev #表示开发环境</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    # active<span class=\"token operator\">:</span> test #表示测试环境</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    # active<span class=\"token operator\">:</span> info</pre></td></tr></table></figure><p>​</p>\n<p>然后再回到 Nacos 配置列表，添加 Dev 命名空间下的配置，添加 3 条</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926180321810.png\" class=\"\" title=\"image-20210926180321810\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926180120552.png\" class=\"\" title=\"image-20210926180120552\">\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210926180520423.png\" class=\"\" title=\"image-20210926180520423\">\n</li>\n<li>\n<p>测试：访问 http://localhost:3377/localhost/config/info 来进行测试</p>\n</li>\n</ol>\n<h1 id=\"nacos集群架构说明\"><a class=\"anchor\" href=\"#nacos集群架构说明\">#</a> Nacos 集群架构说明</h1>\n<p>​\t到目前为止，我们已经对 Nacos 的一些基本使用和配置已经掌握，但是这些还不够，我们还需要了解一个非常重要的点，就是 Nacos 的集群相关的操作，那我们就先从 Nacos 集群配置的概念说起</p>\n<h2 id=\"nacos支持三种部署模式\"><a class=\"anchor\" href=\"#nacos支持三种部署模式\">#</a> Nacos 支持三种部署模式</h2>\n<ol>\n<li>单机模式 - 用于测试和单机试用</li>\n<li>集群模式 - 用于生产环境，确保高可用</li>\n<li>多集群模式 - 用于多数据中心场景</li>\n</ol>\n<h2 id=\"集群部署说明\"><a class=\"anchor\" href=\"#集群部署说明\">#</a> 集群部署说明</h2>\n<p>参考网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWNvcy5pby96aC1jbi9kb2NzL2NsdXN0ZXItbW9kZS1xdWljay1zdGFydC5odG1s\">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</span></p>\n<p><strong>架构图</strong>：部署生产使用的集群模式</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210927163629652.png\" class=\"\" title=\"image-20210927163629652\">\n<p><strong>具体拆分</strong></p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210927165142680.png\" class=\"\" title=\"image-20210927165836853\">\n<h2 id=\"预备环境\"><a class=\"anchor\" href=\"#预备环境\">#</a> 预备环境</h2>\n<p>​\t默认 Nacos 使用嵌入式数据库实现数据的存储，所以，如果启动多个默认配置下的 Nacos 节点，数据储存存在一致性问题，为了解决这个问题，Nacos 采用了集中存储方式来支持集群化部署，目前仅支持 MySql 的存储。</p>\n<ol>\n<li>推荐使用 Linux</li>\n<li>可以使用内部数据源或者外部数据源（推荐使用外部）MySql</li>\n</ol>\n<h1 id=\"nacos持久化切换配置\"><a class=\"anchor\" href=\"#nacos持久化切换配置\">#</a> Nacos 持久化切换配置</h1>\n<h2 id=\"nacos持久化配置\"><a class=\"anchor\" href=\"#nacos持久化配置\">#</a> Nacos 持久化配置</h2>\n<p>​\tNacos 默认自带嵌入式数据库 derby，所以我们每次创建一个 Nacos 实例就会有一个 derby，当有多个 Nacos 节点的时候，就会出现一致性问题，所以 Nacos 支持了外部数据库统一数据管理 MySql。</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210927174839244.png\" class=\"\" title=\"image-20210927174839244\">\n<h2 id=\"nacos默认derby切换mysql\"><a class=\"anchor\" href=\"#nacos默认derby切换mysql\">#</a> Nacos 默认 derby 切换 MySql</h2>\n<p>具体配置方式可以参考官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWNvcy5pby96aC1jbi9kb2NzL2RlcGxveW1lbnQuaHRtbA==\">https://nacos.io/zh-cn/docs/deployment.html</span></p>\n<ol>\n<li>\n<p>我们需要找到 Nacos 安装目录下的 conf 目录中的 Sql 脚本，然后在数据库中进行执行</p>\n<p>注意：需要我们先创建好数据库并且使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">CREATE</span> <span class=\"token class-name\">DATABASE</span> nacos_config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">USE</span> nacos_config<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210927175150183.png\" class=\"\" title=\"image-20210927175150183\">\n<ol start=\"2\">\n<li>修改<strong> conf/application.properties</strong> 文件，增加支持 mysql 数据源配置（目前只支持 mysql），添加 mysql 数据源的 url、用户名和密码。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>platform<span class=\"token operator\">=</span>mysql</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>db<span class=\"token punctuation\">.</span>num<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">=</span>jdbc<span class=\"token operator\">:</span>mysql<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>nacos_config<span class=\"token operator\">?</span>characterEncoding<span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span>connectTimeout<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token operator\">&amp;</span>socketTimeout<span class=\"token operator\">=</span><span class=\"token number\">3000</span><span class=\"token operator\">&amp;</span>autoReconnect<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token operator\">&amp;</span>serverTimezone<span class=\"token operator\">=</span><span class=\"token constant\">UTC</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>db<span class=\"token punctuation\">.</span>user<span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>db<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span>root</pre></td></tr></table></figure><p>​\t这里表示更改 Nacos 数据库为本机 MySql 数据库</p>\n<p><strong>注意：<strong>这里需要注意几个点，一个是 url 地址需要改，另外数据库的用户和密码也需要更改，同时还有一个是官网上在</strong> db.url.0=jdbc:mysql</strong> 这个属性上少了一个属性为<strong> serverTimezone=UTC</strong> 需要我们手动添加</p>\n<h2 id=\"测试-4\"><a class=\"anchor\" href=\"#测试-4\">#</a> 测试</h2>\n<p>重启 Nacos 服务，此时之前所创建的 Namespace+Group+DataID 将全部消失，因为这些数据是保存在之前 Nacos 内嵌的 derby 数据库中，现在使用的是本地的 MySql 数据库，此时我们可以添加配置测试，在查看数据库 nacos_config 中的 config_info 表，此时就会有新添加的配置内容</p>\n<h1 id=\"nacos之linux版本安装\"><a class=\"anchor\" href=\"#nacos之linux版本安装\">#</a> Nacos 之 Linux 版本安装</h1>\n<h2 id=\"linux版nacosmysql生产环境配置\"><a class=\"anchor\" href=\"#linux版nacosmysql生产环境配置\">#</a> Linux 版 Nacos+MySql 生产环境配置</h2>\n<p>​\t在之前的课程中我们已经给大家讲解过了 Nacos 生产环境下需要搭建集群配置，那么这里我们预计需要：1 个 Nginx+3 个 Nacos 注册中心 + 1 个 MySql</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210927165142680-1688910942796.png\" class=\"\" title=\"image-20210927165142680\">\n<h2 id=\"具体配置-2\"><a class=\"anchor\" href=\"#具体配置-2\">#</a> 具体配置：</h2>\n<ol>\n<li>在官网上下载 NacosLinux 版本：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvbmFjb3MvcmVsZWFzZXM=\">https://github.com/alibaba/nacos/releases</span></li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210928163131899.png\" class=\"\" title=\"image-20210928163131899\">\n<ol start=\"2\">\n<li>在 Linux 系统中解压此文件，并且把其中 nacos 目录拷贝到 nacos 目录中</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>tar <span class=\"token operator\">-</span>zxvf nacos<span class=\"token operator\">-</span>server<span class=\"token operator\">-</span><span class=\"token number\">2.0</span><span class=\"token number\">.3</span><span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz</pre></td></tr></table></figure><ol start=\"3\">\n<li>打开 nacos 目录下的 bin 目录输入命令即可执行</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210928183219115.png\" class=\"\" title=\"image-20210928183219115\">\n<h1 id=\"nacos集群配置\"><a class=\"anchor\" href=\"#nacos集群配置\">#</a> Nacos 集群配置</h1>\n<h2 id=\"更改nacos启动命令配置原理\"><a class=\"anchor\" href=\"#更改nacos启动命令配置原理\">#</a> 更改 Nacos 启动命令配置原理</h2>\n<p>我们现在知道，想要启动 Naocs 只需要启动 startup.sh 命令即可，但是如果启动 3 个 Nacos 那？所以如果我们需要启动多个 Nacos，其实 Nacos 本身默认启动就是集群模式。</p>\n<p>注意点：如果是 linux 虚拟机，需要分配至少 4g 以上内存</p>\n<h2 id=\"具体配置-3\"><a class=\"anchor\" href=\"#具体配置-3\">#</a> 具体配置</h2>\n<h3 id=\"linux服务器上mysql数据库配置\"><a class=\"anchor\" href=\"#linux服务器上mysql数据库配置\">#</a> Linux 服务器上 MySql 数据库配置</h3>\n<ol>\n<li>在 Linux 系统上执行 SQL 脚本，具体位置在 nacos 目录下的 conf 中，这里的操作和之前是一样的，我们可以直接打开这个文件然后拷贝到数据库中执行，当然也是要创建数据库使用数据库然后在复制脚本内容，执行即可</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>create database nacos_config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>use nacos_config<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210929175710498.png\" class=\"\" title=\"image-20210929175710498\">\n<ol start=\"2\">\n<li>修改 application.properties 配置文件，但是修改之前我们最好做一个备份。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cp application<span class=\"token punctuation\">.</span>properties application<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>init</pre></td></tr></table></figure><ol start=\"3\">\n<li>这里的修改和我们之间的在 win 上的修改是完全一样的，所以我们只要打开这个文件，加上对应的内容即可</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>spring<span class=\"token punctuation\">.</span>datasource<span class=\"token punctuation\">.</span>platform<span class=\"token operator\">=</span>mysql</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>db<span class=\"token punctuation\">.</span>num<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>db<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">=</span>jdbc<span class=\"token operator\">:</span>mysql<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token operator\">:</span><span class=\"token number\">3306</span><span class=\"token operator\">/</span>nacos_config<span class=\"token operator\">?</span>characterEncoding<span class=\"token operator\">=</span>utf8<span class=\"token operator\">&amp;</span>connectTimeout<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token operator\">&amp;</span>socketTimeout<span class=\"token operator\">=</span><span class=\"token number\">3000</span><span class=\"token operator\">&amp;</span>autoReconnect<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token operator\">&amp;</span>serverTimezone<span class=\"token operator\">=</span><span class=\"token constant\">UTC</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>db<span class=\"token punctuation\">.</span>user<span class=\"token operator\">=</span>root</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>db<span class=\"token punctuation\">.</span>password<span class=\"token operator\">=</span><span class=\"token number\">123456</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>还要注意一点，这个文件中的两个服务的端口号也要对应修改</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>#<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token class-name\">Spring</span> <span class=\"token class-name\">Boot</span> <span class=\"token class-name\">Related</span> <span class=\"token class-name\">Configurations</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>#</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>### <span class=\"token class-name\">Default</span> web context path<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>server<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>contextPath<span class=\"token operator\">=</span><span class=\"token operator\">/</span>nacos</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>### <span class=\"token class-name\">Default</span> web server port<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>server<span class=\"token punctuation\">.</span>port<span class=\"token operator\">=</span><span class=\"token number\">8888</span><span class=\"token operator\">/</span><span class=\"token number\">8868</span></pre></td></tr></table></figure><h3 id=\"linux服务器上nacos的集群配置cluterconf\"><a class=\"anchor\" href=\"#linux服务器上nacos的集群配置cluterconf\">#</a> Linux 服务器上 Nacos 的集群配置 cluter.conf</h3>\n<ol>\n<li>这里开始正式配置集群，首先我们要更改 cluter.conf 这个配置文件，当然我们也需要备份，但是这里它的原始名称为：cluster.conf.example，我们需要把它保留同时复制出一个 cluster.conf 来进行更改</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cp cluster<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>example cluster<span class=\"token punctuation\">.</span>conf</pre></td></tr></table></figure><img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210929182825202.png\" class=\"\" title=\"image-20210929182825202\">\n<ol start=\"2\">\n<li>具体配置内容，这里我们在配置集群的时候不能直接写 127.0.0.1 这样，这样分不清楚，所以我们需要知道具体的 IP 地址，我们可以通过：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ip a #查看具体ip</pre></td></tr></table></figure><img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220321182422028.png\" class=\"\" title=\"image-20220321182422028\">\n<p>具体需修改内容，这里注意，我们在修改端口的时候一定要有一定的偏移量，因为 Nacos2.0 本身新增了占用端口，所以我们在设置端口号的时候注意要避开，不要占用端口，以下是官网截图：</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220321175516671.png\" class=\"\" title=\"image-20220321175516671\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 格式： ip地址<span class=\"token operator\">:</span>端口号</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">192.168</span><span class=\"token number\">.189</span><span class=\"token number\">.129</span><span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">192.168</span><span class=\"token number\">.189</span><span class=\"token number\">.129</span><span class=\"token operator\">:</span><span class=\"token number\">8868</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">192.168</span><span class=\"token number\">.189</span><span class=\"token number\">.129</span><span class=\"token operator\">:</span><span class=\"token number\">8888</span></pre></td></tr></table></figure><h3 id=\"启动三个阶段的nacos测试\"><a class=\"anchor\" href=\"#启动三个阶段的nacos测试\">#</a> 启动三个阶段的 Nacos 测试</h3>\n<p>当上方配置完成之后，我们此时就可以启动三个节点的 Nacos 进行测试，启动方式和 Win 上区别不大：</p>\n<ol>\n<li>但是要注意一点，因为我们要开放端口测试，所以我们在启动 nacos 之前，要进行关闭防火墙操作：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 关闭防火墙服务 - 但是开启还会自动启动</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl stop firewalld</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 彻底关闭 - 开机不会启动防火墙</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl disable firewalld</pre></td></tr></table></figure><ol start=\"2\">\n<li>启动三个 nacos 节点，分别进入到三个 Nacos 节点的 bin 目录中进行启动：</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220321180934633.png\" class=\"\" title=\"image-20220321180934633\">\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sh startup<span class=\"token punctuation\">.</span>sh <span class=\"token comment\">// 启动命令</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>启动完成以后，我们可以分别看一下启动日志，防止启动出现问题，启动路径：</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220321181649453.png\" class=\"\" title=\"image-20220321181649453\">\n<ol start=\"4\">\n<li>这里我们可以通过 cat 命令或者 tail -f 命令</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cat <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>msb<span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>nacos3<span class=\"token operator\">/</span>logs<span class=\"token operator\">/</span>start<span class=\"token punctuation\">.</span>out</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>tail <span class=\"token operator\">-</span>f <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>msb<span class=\"token operator\">/</span>opt<span class=\"token operator\">/</span>nacos3<span class=\"token operator\">/</span>logs<span class=\"token operator\">/</span>start<span class=\"token punctuation\">.</span>out</pre></td></tr></table></figure><img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220321181429986.png\" class=\"\" title=\"image-20220321181429986\">\n<ol start=\"5\">\n<li>通过浏览器分别访问三个阶段的 Nacos，测试是否成功启动</li>\n</ol>\n<p>在看到所有服务都启动成功之后，我们通过浏览器访问对应地址，就可以进入到对应节点的 Nacos 控制台上，然后我们可以查看集群管理，节点列表</p>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220321182820980.png\" class=\"\" title=\"image-20220321182820980\">\n<p><strong>有可能只能启动一个，这是因为 JVM 设置的参数太大可以修改 start.sh 但是还是建议在开两台机器，将服务部署到其他机器上，还有一种办法就是将这个机器的内存调大大的</strong></p>\n<h3 id=\"nginx配置\"><a class=\"anchor\" href=\"#nginx配置\">#</a> Nginx 配置</h3>\n<ol>\n<li>我们需要找到 Nginx 的配置文件，然后做备份</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cp nginx<span class=\"token punctuation\">.</span>conf nginx<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>bk</pre></td></tr></table></figure><img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210929211042606.png\" class=\"\" title=\"image-20210929211042606\">\n<ol start=\"2\">\n<li>修改 nginx.conf</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>worker_processes  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>events <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>stream <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      upstream nacos <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        server <span class=\"token number\">192.168</span><span class=\"token number\">.1</span><span class=\"token number\">.52</span><span class=\"token operator\">:</span><span class=\"token number\">8848</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        server <span class=\"token number\">192.168</span><span class=\"token number\">.1</span><span class=\"token number\">.52</span><span class=\"token operator\">:</span><span class=\"token number\">8868</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        server <span class=\"token number\">192.168</span><span class=\"token number\">.1</span><span class=\"token number\">.52</span><span class=\"token operator\">:</span><span class=\"token number\">8888</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        listen  <span class=\"token number\">81</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        proxy_pass nacos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"测试启动\"><a class=\"anchor\" href=\"#测试启动\">#</a> 测试启动</h2>\n<ol>\n<li>首先进入到 Nginx 目录下，启动 Nginx，同时要带着我们设置过得配置文件启动</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cd <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>local<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>sbin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>/nginx</pre></td></tr></table></figure><ol start=\"2\">\n<li>通过访问 Nginx 来测试是否能够访问到 Nacos，在 win 系统浏览器网址上输入：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">192.168</span><span class=\"token number\">.189</span><span class=\"token number\">.129</span><span class=\"token operator\">:</span><span class=\"token number\">81</span><span class=\"token operator\">/</span>nacos<span class=\"token operator\">/</span></pre></td></tr></table></figure><img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210930150017223.png\" class=\"\" title=\"image-20210930150017223\">\n<ol start=\"3\">\n<li>使用账号密码 nacos，nacos 成功登录就表示此时已经完成全部配置</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210930153201511.png\" class=\"\" title=\"image-20210930153201511\">\n<h3 id=\"添加配置\"><a class=\"anchor\" href=\"#添加配置\">#</a> 添加配置</h3>\n<ol>\n<li>在 Nacos 平台上添加配置</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210930153148673.png\" class=\"\" title=\"image-20210930153148673\">\n<ol start=\"2\">\n<li>在数据库中检查是否有这一条配置，如果有表示成功添加</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210930153709605.png\" class=\"\" title=\"image-20210930153709605\">\n<h3 id=\"配置微服务为linux版nacos集群并注册进nacos\"><a class=\"anchor\" href=\"#配置微服务为linux版nacos集群并注册进nacos\">#</a> 配置微服务为 Linux 版 Nacos 集群并注册进 Nacos</h3>\n<ol>\n<li>我们以 9002 为例，此时我们要修改 application.yaml 文件，把之前的 Nacos 端口换成 Nacos 集群</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  port<span class=\"token operator\">:</span> <span class=\"token number\">9002</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>spring<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  application<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> nacos<span class=\"token operator\">-</span>provider</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  cloud<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nacos<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      discovery<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        # server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> localhost<span class=\"token operator\">:</span><span class=\"token number\">8848</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        # 换成nginx的<span class=\"token number\">81</span>端口，做集群</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        server<span class=\"token operator\">-</span>addr<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token number\">192.168</span><span class=\"token number\">.189</span><span class=\"token number\">.129</span><span class=\"token operator\">:</span><span class=\"token number\">81</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>management<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  endpoint<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    web<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      exponsure<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        include<span class=\"token operator\">:</span> <span class=\"token char\">'*'</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>配置完成启动服务，我们就可以在 Naocs 平台上看见对应的微服务了，此时表示服务注册成功</li>\n</ol>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20210930155527834.png\" class=\"\" title=\"image-20210930155527834\">\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<img data-src=\"/Spring_Family/spring-cloud-alibaba/Nacos%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/image-20220321185952218.png\" class=\"\" title=\"image-20220321185952218\">\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "微服务",
                "spring-cloud-alibaba",
                "nacos"
            ]
        },
        {
            "id": "https://eth168.top/Distribution/Elasticsearch-8/",
            "url": "https://eth168.top/Distribution/Elasticsearch-8/",
            "title": "Elasticsearch-8",
            "date_published": "2023-07-01T16:00:00.000Z",
            "content_html": "<blockquote>\n<p>尚硅谷项目课程系列之 <strong>Elasticsearch8.X</strong></p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image1.jpg\" class=\"\">{width=\"4.240972222222222in\"\n<p>height=&quot;2.0944444444444446in&quot;}</p>\n<p>尚硅谷 JavaEE 教研组</p>\n<h1 id=\"第1章-elasticsearch-8x-概述\"><a class=\"anchor\" href=\"#第1章-elasticsearch-8x-概述\">#</a> 第 1 章 Elasticsearch 8.X 概述</h1>\n<h2 id=\"11-elasticsearch-8x-来了\"><a class=\"anchor\" href=\"#11-elasticsearch-8x-来了\">#</a> 1.1 Elasticsearch 8.X 来了</h2>\n<img data-src=\"/Distribution/Elasticsearch-8/image2.jpg\" class=\"\">{width=\"5.7625in\" height=\"3.3381944444444445in\"} 距\n<p>2019 年 Elasticsearch 上一大版本 7.0 发布至今已经过去了 3 年。这 3<br />\n 年中，由于疫情等众所周知的原因，程序员对很多软件技术的更新和迭代其实并不会抱有太多的期待和幻想。不过，2022<br />\n 年 2 月 11 日，Elasticsearch 发布了全新的 8.0<br />\n 正式版本，这着实给了我们不小的惊喜！新版本中通过改进 Elasticsearch<br />\n 的矢量搜索功能、对现代自然语言处理模型的原生支持、不断简化的数据上线过程，以及精简的安全防护体验，在速度、扩展幅度、相关性和简便性方面，让搜索引擎技术迎来了一个全新的时代。</p>\n<h2 id=\"12-elasticsearch-新特性\"><a class=\"anchor\" href=\"#12-elasticsearch-新特性\">#</a> <strong>1.2 Elasticsearch</strong> 新特性</h2>\n<p>从 2019 年 4 月 10 日 Elasticsearch7.0 版本的发布，到 2022 年 2 月 11 日<br />\n Elasticsearch8.0 版本的发布的近 3<br />\n 年间，基于不断优化的开发设计理念，Elasticsearch<br />\n 发布了一系列的小版本。这些小版本在以下方面取得了长足的进步并同时引入一些全新的功能：</p>\n<ul>\n<li>\n<p>减少内存堆使用，完全支持 ARM<br />\n 架构，引入全新的方式以使用更少的存储空间，从而让每个节点托管更多的数据</p>\n</li>\n<li>\n<p>降低查询开销，在大规模部署中成效尤为明显</p>\n</li>\n<li>\n<p>提高日期直方图和搜索聚合的速度，增强了页面缓存的性能，并创建了一个新的</p>\n</li>\n</ul>\n<blockquote>\n<p>&quot;pre-filter&quot; 搜索短语</p>\n</blockquote>\n<ul>\n<li>\n<p>在 Elasticsearch 7.3 和 Elasticsearch 7.4<br />\n 版中，引入了对矢量相似函数的支持在最新发布的 8.0<br />\n 版本中，也同样增加和完善了很多新的功能</p>\n</li>\n<li>\n<p>增加对自然语言处理 (NLP)<br />\n 模型的原生支持，让矢量搜索功能更容易实现，让客户和员工能够使用他们自己的文字和语言来搜索并收到高度相关的结果。</p>\n</li>\n<li>\n<p>直接在 Elasticsearch<br />\n 中执行命名实体识别、情感分析、文本分类等，而无需使用额外的组件或进行编码。</p>\n</li>\n<li>\n<p>Elasticsearch 8.0 基于 Lucene 9.0 开发的，那些利用现代 NLP<br />\n 的搜索体验，都可以借助（新增的）对近似最近邻搜索的原生支持，快速且大规模地实现。通过<br />\n ANN，可以快速并高效地将基于矢量的查询与基于矢量的文档语料库（无论是小语料库、大语料库</p>\n</li>\n</ul>\n<blockquote>\n<p>还是巨型语料库）进行比较。</p>\n</blockquote>\n<ul>\n<li>可以直接在 Elasticsearch 中使用 PyTorch Machine Learning 模型（如<br />\n BERT），并在</li>\n</ul>\n<blockquote>\n<p>Elasticsearch 中原生使用这些模型执行推理。</p>\n</blockquote>\n<h2 id=\"13-elasticsearch-课程升级\"><a class=\"anchor\" href=\"#13-elasticsearch-课程升级\">#</a> <strong>1.3 Elasticsearch</strong> 课程升级</h2>\n<p>之前课程中的 Elasticsearch 软件是基于 7.8 版本进行讲解的，既然<br />\n Elasticsearch 升级到了 8.X<br />\n 版本，我们也要与时俱进，不断更新课件，拥抱最新版本。</p>\n<p>虽然之前的课程内容是基于 7.8<br />\n 版本，但其实讲解时主要还是侧重于入门级基础内容，这一次我们不仅仅要将 8.X<br />\n 新版本的特性介绍给大家，同时课程中还会融合一些新的 7.X 版</p>\n<p>本特性的内容。</p>\n<h1 id=\"第2章-elasticsearch-安装-使用\"><a class=\"anchor\" href=\"#第2章-elasticsearch-安装-使用\">#</a> 第 2 章 Elasticsearch 安装 &amp; 使用</h1>\n<img data-src=\"/Distribution/Elasticsearch-8/image3.jpg\" class=\"\">{width=\"5.254389763779527in\"\n<p>height=&quot;2.2141754155730533in&quot;}</p>\n<p>从官网截图上可以看到，Elasticsearch 最新版本也终于开始拥抱号称史上最快的 JDK 了。</p>\n<p>所以在安装 ES 软件前，需要下载使用 Java JDK17</p>\n<h2 id=\"211-下载软件\"><a class=\"anchor\" href=\"#211-下载软件\">#</a> 2.1.1 下载软件</h2>\n<p>Java 的官方地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZh\">https://www.oracle.com/java</span></p>\n<p>Java 最新的版本是 18.0.1.1（截止 2022.6.15），我们选择 17.0.3 版本</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JhY2xlLmNvbS9qYXZhL3RlY2hub2xvZ2llcy9kb3dubG9hZHM=\">https://www.oracle.com/java/technologies/downloads</span></p>\n<img data-src=\"/Distribution/Elasticsearch-8/image5.jpg\" class=\"\">{width=\"5.837723097112861in\"\n<p>height=&quot;1.951000656167979in&quot;}</p>\n<p>对于 Java 开发人员来讲，更熟悉的开发版本应该是 JDK1.8，突然需要升级到<br />\n JDK17，其实本身会感觉有点不适应，甚至会有点排斥。担心升级后会对现有的程序代码造成影响。其实，对于<br />\n JDK1.8，最新版本的 JDK17 增加了很多的语法特性:</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image7.jpg\" class=\"\">{width=\"2.98875in\" height=\"1.2983464566929135in\"}\n<img data-src=\"/Distribution/Elasticsearch-8/image9.jpg\" class=\"\">{width=\"4.092361111111111in\"\n<p>height=&quot;7.0061242344706915in&quot;}</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image11.jpg\" class=\"\">{width=\"4.626388888888889in\"\n<p>height=&quot;4.358333333333333in&quot;}</p>\n<p>对于大多数项目而言，想要利用这些新的特性，是需要修改代码的，但性能除外。也就是说，升级<br />\n JDK<br />\n 版本，现有代码即使不进行修改，也不会出现兼容问题，但性能会得到极大的提升，并且高吞吐量垃圾回收器比低延迟垃圾回收器更快，更重要的是它可以免费商用。</p>\n<p>对于升级版本而言，如果你依然有顾虑，一个好的消息就是我们可以下载含有适配<br />\n JDK 的 ES 版本，上面提到的内容基本上就不用考虑，一切就是这么顺滑，对吗？</p>\n<h2 id=\"22-elasticsearch-安装-使用\"><a class=\"anchor\" href=\"#22-elasticsearch-安装-使用\">#</a> <strong>2.2 Elasticsearch</strong> 安装 <strong>&amp;</strong> 使用</h2>\n<h3 id=\"221-下载软件\"><a class=\"anchor\" href=\"#221-下载软件\">#</a> 2.2.1 下载软件</h3>\n<p>Elasticsearch 的官方地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi8=\">https://www.elastic.co/cn/</span></p>\n<p>Elasticsearch 最新的版本是 8.2.3（截止 2022.06.15），我们选择略早的<br />\n 8.1.0<br />\n 版本下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcyNlbGFzdGljc2VhcmNo\">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</span></p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image12.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.2757086614173228in&quot;}</p>\n</blockquote>\n<p>可以根据情况自行选择不同操作系统的版本。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image14.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9764162292213474in&quot;}</p>\n<p>本课程着重讲解新版 ES 软件的特性及应用，所以采用 linux 集群配置。</p>\n<ol>\n<li>集群规划为了演示软件的使用，我们这里准备三台 linux 虚拟机，用于配置<br />\n Elasticsearch 集群。启动集群后，每台虚拟机的进程如下：</li>\n</ol>\n<p>主机名   linux1                     linux2                     linux3</p>\n<hr />\n<p>进程名   Elasticsearch (es-node-1)   Elasticsearch (es-node-2)   Elasticsearch (es-node-3)</p>\n<blockquote>\n<p>Linux 系统环境配置请参考之前课程内容。这里我们给三台虚拟机搭建 ES<br />\n 集群，集群</p>\n<p>中 - 节点名称依次为 es-node-1，es-node-2，es-node-3</p>\n</blockquote>\n<ol start=\"2\">\n<li>将压缩包 elasticsearch-8.1.0-linux-x86_64.tar.gz 上传到虚拟机中</li>\n</ol>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image16.jpg\" class=\"\">{width=\"5.614444444444445in\"\n<p>height=&quot;0.9016797900262468in&quot;}</p>\n<p>解压缩文件到自定义路径，笔者解压路径为：/opt/module, 解压后，软件路径为：</p>\n<p>/opt/module/elasticsearch-8.1.0</p>\n<p># 切换目录</p>\n</blockquote>\n<p>cd. software</p>\n<blockquote>\n<p># 解压缩</p>\n<p>tar -zxvf elasticsearch-8.1.0-linux-x86_64.tar.gz -C /opt/module</p>\n<p>解压后的 Elasticsearch 的目录结构如下</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image18.jpg\" class=\"\">{width=\"4.322361111111111in\"\n<p>height=&quot;1.8808464566929133in&quot;}</p>\n</blockquote>\n<p>+---------+------------------+<br />\n| 目录    | &gt; 含义           |<br />\n+=<mark><mark><mark><mark>+</mark></mark></mark></mark>==========+<br />\n| bin     | &gt; 可执行脚本目录 |<br />\n+---------+------------------+<br />\n| config  | &gt; 配置目录       |<br />\n+---------+------------------+<br />\n| jdk     | &gt; 内置 JDK 目录  |<br />\n+---------+------------------+<br />\n| lib     | &gt; 类库           |<br />\n+---------+------------------+<br />\n| logs    | &gt; 日志目录       |<br />\n+---------+------------------+<br />\n| modules | &gt; 模块目录       |<br />\n+---------+------------------+<br />\n| plugins | &gt; 插件目录       |<br />\n+---------+------------------+</p>\n<ol start=\"3\">\n<li>\n<p>当前安装 ES 版本为 8.1.0，自带 JDK，所以当前 Linux<br />\n 虚拟机节点无需配置 Java 环境</p>\n</li>\n<li>\n<p>创建 linux 新用户 es, 数据文件，证书目录，并修改 Elasticsearch<br />\n 文件拥有者</p>\n</li>\n</ol>\n<blockquote>\n<p># 新增 es 用户</p>\n<p>useradd es</p>\n<p># 为 es 用户设置密码</p>\n<p>passwd es</p>\n<p># 创建数据文件目录</p>\n<p>mkdir /opt/module/elasticsearch-8.1.0/data</p>\n<p># 创建证书目录</p>\n<p>mkdir /opt/module/elasticsearch-8.1.0/config/certs</p>\n<p>#切换目录</p>\n</blockquote>\n<p>cd. /opt/module/elasticsearch-8.1.0</p>\n<blockquote>\n<p># 修改文件拥有者</p>\n<p>chown -R es:es /opt/module/elasticsearch-8.1.0</p>\n</blockquote>\n<ol start=\"5\">\n<li>在第一台服务器节点 es-node-1 设置集群多节点通信密钥</li>\n</ol>\n<blockquote>\n<p># 切换用户</p>\n<p>su es</p>\n<p># 签发 ca 证书，过程中需按两次回车键</p>\n<p>bin/elasticsearch-certutil ca</p>\n<p># 用 ca 证书签发节点证书，过程中需按三次回车键</p>\n<p>bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12</p>\n<p># 将生成的证书文件移动到 config/certs 目录中</p>\n<p>mv elastic-stack-ca.p12 elastic-certificates.p12 config/certs</p>\n</blockquote>\n<ol start=\"6\">\n<li>在第一台服务器节点 es-node-1 设置集群多节点 HTTP 证书</li>\n</ol>\n<blockquote>\n<p># 签发 Https 证书</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image20.jpg\" class=\"\">{width=\"2.995416666666667in\"\n<p>height=&quot;1.3232786526684164in&quot;}</p>\n<p>指定证书路径</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image24.jpg\" class=\"\">{width=\"3.279861111111111in\"\n<p>height=&quot;0.36527777777777776in&quot;}</p>\n<blockquote>\n<p>无需输入密码</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image25.jpg\" class=\"\">{width=\"3.6173611111111112in\"\n<p>height=&quot;0.4027777777777778in&quot;}</p>\n<p>设置证书失效时间</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image26.jpg\" class=\"\">{width=\"4.288888888888889in\"\n<p>height=&quot;0.4152777777777778in&quot;}</p>\n<blockquote>\n<p>无需每个节点配置证书</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image27.jpg\" class=\"\">{width=\"3.31875in\" height=\"0.5020833333333333in\"}\n<blockquote>\n<p>输出连接到第一个节点的所有主机名称</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image28.jpg\" class=\"\">{width=\"2.9054166666666665in\"\n<p>height=&quot;1.2348753280839895in&quot;}</p>\n<p>输出连接到第一个节点的所有主机 IP 地址</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image30.jpg\" class=\"\">{width=\"3.092361111111111in\"\n<p>height=&quot;1.3182075678040246in&quot;}</p>\n<p>不改变证书选项配置</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image32.jpg\" class=\"\">{width=\"2.7354166666666666in\"\n<p>height=&quot;0.4951388888888889in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image33.jpg\" class=\"\">{width=\"5.474445538057743in\"\n<p>height=&quot;2.4377766841644792in&quot;}</p>\n<p># 解压文件</p>\n<p>unzip elasticsearch-ssl-http.zip</p>\n<p>将解压后的证书文件移动到 config/certs 目录中</p>\n<p># 移动文件</p>\n<p>mv elasticsearch/http.p12 kibana/elasticsearch-ca.pem config/certs</p>\n</blockquote>\n<ol start=\"7\">\n<li>修改主配置文件：config/elasticsearch.yml</li>\n</ol>\n<p>+----------------------------------------------------------------------+<br />\n| <sub>#</sub> 设置 ES 集群名称                                                  |<br />\n|                                                                      |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIubmFtZQ==\">cluster.name</span>: es-cluster                                             |<br />\n|                                                                      |<br />\n| # 设置集群中当前节点名称                                            |<br />\n|                                                                      |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL25vZGUubmFtZQ==\">node.name</span>: es-node-1                                                 |<br />\n|                                                                      |<br />\n| # 设置数据，日志文件路径                                            |<br />\n|                                                                      |<br />\n| path.data: /opt/module/elasticsearch-8.1.0/data                      |<br />\n|                                                                      |<br />\n| path.logs: /opt/module/elasticsearch-8.1.0/log                       |<br />\n|                                                                      |<br />\n| # 设置网络访问节点                                                  |<br />\n|                                                                      |<br />\n| network.host: linux1                                                 |<br />\n|                                                                      |<br />\n| # 设置网络访问端口                                                  |<br />\n|                                                                      |<br />\n| http.port: 9200                                                      |<br />\n|                                                                      |<br />\n| # 初始节点                                                          |<br />\n|                                                                      |<br />\n| discovery.seed_hosts: [&quot;linux1&quot;]                                 |<br />\n|                                                                      |<br />\n| # 安全认证                                                          |<br />\n|                                                                      |<br />\n| xpack.security.enabled: true xpack.security.enrollment.enabled: true |<br />\n| xpack.security.http.ssl:                                             |<br />\n|                                                                      |<br />\n| enabled: true keystore.path:                                         |<br />\n| /opt/module/elasticsearch-8.1.0/config/certs/http.p12                |<br />\n| truststore.path:                                                     |<br />\n| /opt/module/elasticsearch-8.1.0/config/certs/http.p12                |<br />\n| xpack.security.transport.ssl: enabled: true verification_mode:       |<br />\n| certificate keystore.path:                                           |<br />\n|                                                                      |<br />\n| /                                                                    |<br />\n| opt/module/elasticsearch-8.1.0/config/certs/elastic-certificates.p12 |<br />\n| truststore.path:                                                     |<br />\n|                                                                      |<br />\n| /                                                                    |<br />\n| opt/module/elasticsearch-8.1.0/config/certs/elastic-certificates.p12 |<br />\n|                                                                      |<br />\n| # 此处需注意，es-node-1 为上面配置的节点名称                         |<br />\n|                                                                      |<br />\n| cluster.initial_master_nodes: [&quot;es-node-1&quot;] http.host:           |<br />\n| [_local_, _site_] ingest.geoip.downloader.enabled: false       |<br />\n| xpack.security.http.ssl.client_authentication: none                  |<br />\n+----------------------------------------------------------------------+</p>\n<ol start=\"8\">\n<li>启动 ES 软件</li>\n</ol>\n<blockquote>\n<p># 启动 ES 软件</p>\n<p>bin/elasticsearch</p>\n<p>第一次成功启动后，会显示密码，请记住，访问时需要。只有第一次才有哟！</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image35.jpg\" class=\"\">{width=\"5.531112204724409in\"\n<p>height=&quot;2.1725131233595802in&quot;}</p>\n<p>上面图形内容因为涉及到多节点集群配置以及 <strong>kibana</strong><br />\n 配置，所以极其重要！！！如果没有出现上面图片，出现下面图片也可以按照指定方式进行配置。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image37.jpg\" class=\"\">{width=\"5.547777777777778in\"\n<p>height=&quot;1.4765409011373578in&quot;}</p>\n<p># ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━<br />\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ━━━━━━━━━━━</p>\n<p>✅ Elasticsearch security features have been automatically configured!</p>\n<p>✅ Authentication is enabled and cluster connections are encrypted.</p>\n<p>ℹ️ Password for the elastic user (reset with</p>\n<p>`bin/elasticsearch-reset-password -u elastic`):</p>\n<p><strong>O3x0hfu7i=ZbQvlktCnd</strong></p>\n<p>❌ Unable to generate an enrollment token for Kibana instances, try<br />\ninvoking `bin/elasticsearch-create-enrollment-token -s kibana`.</p>\n<p>❌ An enrollment token to enroll new nodes wasn't generated. To add<br />\nnodes and enroll them into this cluster:</p>\n</blockquote>\n<ul>\n<li>On this node:</li>\n</ul>\n<blockquote>\n<p>⁃ Create an enrollment token with</p>\n<p>`bin/elasticsearch-create-enrollment-token -s node`.</p>\n<p>⁃ Restart Elasticsearch.</p>\n</blockquote>\n<ul>\n<li>On other nodes:</li>\n</ul>\n<blockquote>\n<p>⁃ Start Elasticsearch with `bin/elasticsearch --enrollment-token<br />\n&lt;token&gt;`, using the enrollment token that you generated.</p>\n<p>━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</p>\n<p>━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ ━━━━━━━━━━</p>\n<p>注意：9300 端口为 Elasticsearch 集群间组件的通信端口，9200<br />\n 端口为浏览器访问的</p>\n</blockquote>\n<p>http 协议 RESTful 端口。</p>\n<ol start=\"9\">\n<li>访问服务器节点 <span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tY2VzNmE1ODlkcGxlaTgwYzo5MjAw\">https:// 虚拟机地址：9200</span></li>\n</ol>\n<p>因为配置了安全协议，所以使用 https<br />\n 协议进行访问，但由于证书是自己生成的，并不 可靠，所以会有安全提示</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image39.jpg\" class=\"\">{width=\"5.471111111111111in\"\n<p>height=&quot;2.3408464566929132in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image41.jpg\" class=\"\">{width=\"1.9756944444444444in\"\n<p>height=&quot;1.44375in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image42.jpg\" class=\"\">{width=\"5.474445538057743in\"\n<p>height=&quot;2.589443350831146in&quot;}</p>\n</blockquote>\n<ol start=\"10\">\n<li>修改集群中其他节点的配置文件：config/elasticsearch.yml</li>\n</ol>\n<blockquote>\n<p>linux2: 证书直接拷贝，其他步骤完全相同，配置文件中修改如下内容即可</p>\n<p># 设置节点名称</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL25vZGUubmFtZQ==\">node.name</span>: es-node-2</p>\n<p># 设置网络访问主机</p>\n<p>network.host: linux2</p>\n<p>linux3: 证书直接拷贝，其他步骤完全相同，配置文件中修改如下内容即可</p>\n<p># 设置节点名称</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL25vZGUubmFtZQ==\">node.name</span>: es-node-3</p>\n<p># 设置网络访问主机</p>\n<p>network.host: linux3</p>\n</blockquote>\n<ol start=\"11\">\n<li>依次启动集群的三台服务器节点，不要忘记切换用户后再启动</li>\n</ol>\n<blockquote>\n<p>linux1:</p>\n<p># 后台启动服务</p>\n<p>bin/elasticsearch -d</p>\n<p>linux2:</p>\n<p># 后台启动服务</p>\n<p>bin/elasticsearch -d</p>\n<p>linux3:</p>\n<p># 后台启动服务</p>\n<p>bin/elasticsearch -d</p>\n</blockquote>\n<h3 id=\"223-问题解决\"><a class=\"anchor\" href=\"#223-问题解决\">#</a> 2.2.3 问题解决</h3>\n<ul>\n<li>\n<p>Elasticsearch 是使用 java 开发的，8.1 版本的 ES 需要 JDK17<br />\n 及以上版本。默认安装包中带有 JDK 环境，如果系统配置 <strong>ES_JAVA_HOME</strong><br />\n 环境变量，那么会采用系统配置的 <strong>JDK</strong>。如果没有配置该环境变量，ES<br />\n 会使用自带捆绑的 JDK。虽然自带的 JDK 是 ES 软件推荐的 Java<br />\n 版本，但一般建议使用系统配置的 JDK。</p>\n</li>\n<li>\n<p>Windows 环境中出现下面的错误信息，是因为开启了 SSL 认证：</p>\n</li>\n</ul>\n<img data-src=\"/Distribution/Elasticsearch-8/image44.jpg\" class=\"\">{width=\"5.368055555555555in\"\n<p>height=&quot;1.1993055555555556in&quot;}</p>\n<blockquote>\n<p>修改 config/elasticsearch.yml 文件，将 enabled 的值修改为 false</p>\n</blockquote>\n<p>+----------------------------------------------------------------------+<br />\n| # Enable encryption for HTTP API client connections, such as        |<br />\n| Kibana, Logstash,                                                    |<br />\n+======================================================================+<br />\n| and Agents xpack.security.http.ssl:                                  |<br />\n|                                                                      |<br />\n| enabled: <strong>false</strong> keystore.path: certs/http.p12                     |<br />\n+----------------------------------------------------------------------+</p>\n<ul>\n<li>启动成功后，如果访问 localhost:9200 地址后，弹出登录窗口</li>\n</ul>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image45.jpg\" class=\"\">{width=\"1.8333333333333333in\"\n<p>height=&quot;1.3395833333333333in&quot;}</p>\n</blockquote>\n<p>第一次启动时，因为开启了密码验证模式，在启动窗口中会显示输入账号和密码。如果<br />\n没有注意到或没有找到账号密码，可以设置免密登录：</p>\n<blockquote>\n<p># Enable security features xpack.security.enabled: <strong>false</strong></p>\n</blockquote>\n<ul>\n<li>双击启动窗口闪退，通过路径访问追踪错误，如果是 &quot;空间不足&quot;，请修改</li>\n</ul>\n<blockquote>\n<p>config/jvm.options 配置文件</p>\n<p>#<br />\n设置 JVM 初始内存为 1G。此值可以设置与 - Xmx 相同，以避免每次垃圾回收完成后 JVM 重新分配内存</p>\n<p># Xms represents the initial size of total heap space</p>\n<p># 设置 JVM 最大可用内存为 1G</p>\n<p># Xmx represents the maximum size of total heap space</p>\n<p>-Xms4g</p>\n<p>-Xmx4g</p>\n</blockquote>\n<ul>\n<li>启动后，如果密码忘记了，怎么办？可以采用指令重置密码</li>\n</ul>\n<p>+-------------------------------------------------------------------------+<br />\n| # 使用 es 用户，执行指令，重置 elastic 用户密码                            |<br />\n|                                                                         |<br />\n| bin/elasticsearch-reset-password -u elastic                             |<br />\n+=========================================================================+<br />\n| &gt; <img data-src=\"/Distribution/Elasticsearch-8/image46.jpg\" class=\"\">{width=&quot;5.438888888888889in&quot; height=&quot;1.0375in&quot;} |<br />\n+-------------------------------------------------------------------------+</p>\n<blockquote>\n<p>如果只启动单一节点，此操作可能会失败，至少启动 2 个节点，测试成功</p>\n</blockquote>\n<h2 id=\"23-kibana-安装-使用\"><a class=\"anchor\" href=\"#23-kibana-安装-使用\">#</a> <strong>2.3 Kibana</strong> 安装 <strong>&amp;</strong> 使用</h2>\n<p>Elasticsearch 的开源分析可视化工具，与存储在 Elasticsearch<br />\n 中的数据进行交互</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image47.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.7539162292213473in&quot;}</p>\n<p>Elasticsearch 下载的版本是 8.1.0，这里我们选择同样的 8.1.0 版本</p>\n<p>下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcyNraWJhbmE=\">https://www.elastic.co/cn/downloads/past-releases#kibana</span></p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image49.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.215430883639545in&quot;}</p>\n</blockquote>\n<p><strong>2.3.2</strong> 安装软件本课程着重讲解新版 ES 软件的特性及应用，所以对应的<br />\n Kibana 也采用 linux 集群配置。</p>\n<p>1) 将压缩包 kibana-8.1.0-linux-x86_64.tar.gz 上传到虚拟机中</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image51.jpg\" class=\"\">{width=\"5.490972222222222in\"\n<p>height=&quot;0.5208333333333334in&quot;}</p>\n</blockquote>\n<p>解压缩文件到自定义路径，笔者解压路径为：/opt/module，解压后，软件路径为：</p>\n<blockquote>\n<p>/opt/module/kibana-8.1.0</p>\n<p># 切换目录</p>\n<p>cd software</p>\n<p># 解压缩</p>\n<p>tar -zxvf kibana-8.1.0-linux-x86_64.tar.gz -C /opt/module</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image52.jpg\" class=\"\">{width=\"5.766056430446194in\"\n<p>height=&quot;2.4376377952755908in&quot;}</p>\n<p>+----------------------------------------------------------------------+<br />\n| # 在 ES 服务器中生成证书，输入回车即可                                |<br />\n|                                                                      |<br />\n| cd /opt/module/elasticsearch-8.1.0 bin/elasticsearch-certutil csr    |<br />\n| -name kibana -dns linux1                                             |<br />\n|                                                                      |<br />\n| # 解压文件                                                          |<br />\n|                                                                      |<br />\n| unzip csr-bundle.zip                                                 |<br />\n|                                                                      |<br />\n| # 将解压后的文件移动到 kibana 的 config 目录中                          |<br />\n|                                                                      |<br />\n| mv kibana.csr kibana.key /opt/module/kibana-8.1.0/config/            |<br />\n|                                                                      |<br />\n| # 生成 crt 文件                                                       |<br />\n|                                                                      |<br />\n| openssl x509 -req -in kibana.csr -signkey kibana.key -out kibana.crt |<br />\n+----------------------------------------------------------------------+</p>\n<ol start=\"3\">\n<li>修改配置文件：kibana.yml</li>\n</ol>\n<blockquote>\n<p># 服务端口</p>\n<p>server.port: 5601</p>\n<p># 服务主机名</p>\n<p>server.host: &quot;linux1&quot;</p>\n<p># 国际化 - 中文</p>\n<p>i18n.locale: &quot;zh-CN&quot;</p>\n<p># ES 服务主机地址</p>\n<p>elasticsearch.hosts: [&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW51eDE6OTIwMA==\">https://linux1:9200</span>&quot;]</p>\n<p># 访问 ES 服务的账号密码</p>\n</blockquote>\n<p>+----------------------------------------------------------------------+<br />\n| elasticsearch.username: &quot;kibana&quot; elasticsearch.password:           |<br />\n| &quot;fnqIYLQGv81iyW5nWeZ-&quot;                                             |<br />\n|                                                                      |<br />\n| elasticsearch.ssl.verificationMode: none                             |<br />\n|                                                                      |<br />\n| elasticsearch.ssl.certificateAuthorities:                            |<br />\n|                                                                      |<br />\n| [                                                                   |<br />\n| \\                                                                    |<br />\n| &quot;/opt/module/elasticsearch-8.1.0/config/certs/elasticsearch-ca.pem&quot; |<br />\n| ]                                                                   |<br />\n|                                                                      |<br />\n| server.ssl.enabled: true server.ssl.certificate:                     |<br />\n| /opt/module/kibana-8.1.0/config/kibana.crt server.ssl.key:           |<br />\n| /opt/module/kibana-8.1.0/config/kibana.key                           |<br />\n+----------------------------------------------------------------------+</p>\n<ol start=\"4\">\n<li>修改软件目录拥有者</li>\n</ol>\n<blockquote>\n<p># 切换目录</p>\n<p>chown -R es:es /opt/module/kibana-8.1.0/</p>\n</blockquote>\n<ol start=\"5\">\n<li>切换用户，启动软件</li>\n</ol>\n<blockquote>\n<p># 切换用户</p>\n<p>su es</p>\n<p># 启动软件</p>\n<p>bin/kibana</p>\n<p># 也可以后台启动</p>\n<p>nohup /opt/module/kibana-8.1.0/bin/kibana &gt;kibana.log 2&gt;&amp;1 &amp;</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image54.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9029451006124234in&quot;}</p>\n<blockquote>\n<p>打开浏览器，输入访问地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW51eDE6NTYwMQ==\">https://linux1:5601</span></p>\n<img data-src=\"/Distribution/Elasticsearch-8/image56.jpg\" class=\"\">{width=\"5.384445538057743in\"\n<p>height=&quot;2.1720964566929135in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image58.jpg\" class=\"\">{width=\"5.384445538057743in\"\n<p>height=&quot;1.75501312335958in&quot;}</p>\n<p>输入 elastic 账号和密码即可访问</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image60.jpg\" class=\"\">{width=\"5.467778871391076in\"\n<p>height=&quot;6.554875328083989in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image66.jpg\" class=\"\">{width=\"5.447778871391076in\"\n<p>height=&quot;1.35876312335958in&quot;}</p>\n</blockquote>\n<h1 id=\"第3章-elasticsearch-基础功能\"><a class=\"anchor\" href=\"#第3章-elasticsearch-基础功能\">#</a> 第 3 章 Elasticsearch 基础功能</h1>\n<p>在之前 7.X 的课程视频中，已经给大家讲解了 Elasticsearch<br />\n 软件的基础功能，这里咱们以 8.X 版本为基础通过 Kibana<br />\n 软件给大家演示基本操作。</p>\n<h2 id=\"31-索引操作\"><a class=\"anchor\" href=\"#31-索引操作\">#</a> <strong>3.1</strong> 索引操作</h2>\n<h3 id=\"311-创建索引\"><a class=\"anchor\" href=\"#311-创建索引\">#</a> 3.1.1 创建索引</h3>\n<p>ES 软件的索引可以类比为 MySQL<br />\n 中表的概念，创建一个索引，类似于创建一个表。</p>\n<p>查询完成后，Kibana 右侧会返回响应结果及请求状态</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image68.jpg\" class=\"\">{width=\"5.7555555555555555in\"\n<p>height=&quot;0.7381944444444445in&quot;} 重复创建索引时，Kibana<br />\n 右侧会返回响应结果，其中包含错误信息。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image69.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.7218339895013124in&quot;}</p>\n<p>根据索引名称查询指定索引，如果查询到，会返回索引的详细信息</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image71.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.9222364391951006in&quot;}</p>\n</blockquote>\n<p>如果查询的索引未存在，会返回错误信息</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image73.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9764162292213474in&quot;}</p>\n<p>为了方便，可以查询当前所有索引数据。这里请求路径中的_cat<br />\n 表示查看的意思，indices 表示索引，所以整体含义就是查看当前 ES<br />\n 服务器中的所有索引，就好像 MySQL 中的 show</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image75.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.5590266841644795in&quot;}</p>\n<p>这里的查询结果表示索引的状态信息，按顺序数据表示结果如下：</p>\n<p>+------------------------+------------------+------------------------+<br />\n| 内容                   | &gt; 含义           | 具体描述               |<br />\n+<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark></mark>+</mark></mark></mark>==================+<br />\n| green                  | &gt; health         | 当前服务器健康状态：   |<br />\n|                        |                  |                        |<br />\n|                        |                  | <strong>green</strong> (集群完整)    |<br />\n|                        |                  | <strong>yellow</strong>             |<br />\n|                        |                  | (单点正常、集群不完整) |<br />\n|                        |                  | red (单点不正常)        |<br />\n+------------------------+------------------+------------------------+<br />\n| open                   | &gt; status         | 索引打开、关闭状态     |<br />\n+------------------------+------------------+------------------------+<br />\n| myindex                | &gt; index          | 索引名                 |<br />\n+------------------------+------------------+------------------------+<br />\n| Swx2xWHLR6yv23kTrK3sAg | &gt; uuid           | 索引统一编号           |<br />\n+------------------------+------------------+------------------------+<br />\n| 1                      | &gt; pri            | 主分片数量             |<br />\n+------------------------+------------------+------------------------+<br />\n| 1                      | &gt; rep            | 副本数量               |<br />\n+------------------------+------------------+------------------------+<br />\n| 0                      | &gt; docs.count     | 可用文档数量           |<br />\n+------------------------+------------------+------------------------+<br />\n| 0                      | &gt; docs.deleted   | 文                     |<br />\n|                        |                  | 档删除状态（逻辑删除） |<br />\n+------------------------+------------------+------------------------+<br />\n| 450b                   | &gt; store.size     | 主分片                 |<br />\n|                        |                  | 和副分片整体占空间大小 |<br />\n+------------------------+------------------+------------------------+<br />\n| 225b                   | &gt; pri.store.size | 主分片占空间大小       |<br />\n+------------------------+------------------+------------------------+</p>\n<h3 id=\"314-删除索引\"><a class=\"anchor\" href=\"#314-删除索引\">#</a> 3.1.4 删除索引</h3>\n<img data-src=\"/Distribution/Elasticsearch-8/image77.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.489303368328959in&quot;}</p>\n<p>如果删除一个不存在的索引，那么会返回错误信息</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image79.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.0225360892388453in&quot;}</p>\n<p>文档是 ES 软件搜索数据的最小单位，<br />\n 不依赖预先定义的模式，所以可以将文档类比为表的一行 JSON 类型的数据。我们知道关系型数据库中，要提前定义字段才能使用，在 Elasticsearch<br />\n 中，对于字段是非常灵活的，有时候，我们可以忽略该字段，或者动态的添加一个新的字段。</p>\n<h3 id=\"321-创建文档\"><a class=\"anchor\" href=\"#321-创建文档\">#</a> 3.2.1 创建文档</h3>\n<p>索引已经创建好了，接下来我们来创建文档，并添加数据。这里的文档可以类比为关系型数据库中的表数据，添加的数据格式为<br />\n JSON 格式</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image81.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.2137642169728784in&quot;}</p>\n</blockquote>\n<p>此处因为没有指定数据唯一性标识，所以无法使用 PUT 请求，只能使用 POST<br />\n 请求，且对数据会生成随机的唯一性标识。否则会返回错误信息</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image83.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;0.9012642169728784in&quot;}</p>\n</blockquote>\n<p>如果在创建数据时，指定唯一性标识，那么请求范式 POST，PUT 都可以</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image85.jpg\" class=\"\">{width=\"5.80111220472441in\"\n<p>height=&quot;1.421984908136483in&quot;}</p>\n</blockquote>\n<h3 id=\"322-查询文档\"><a class=\"anchor\" href=\"#322-查询文档\">#</a> 3.2.2 查询文档</h3>\n<img data-src=\"/Distribution/Elasticsearch-8/image87.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9311089238845145in&quot;}</p>\n<h3 id=\"323-修改文档\"><a class=\"anchor\" href=\"#323-修改文档\">#</a> 3.2.3 修改文档</h3>\n<p>修改文档本质上和新增文档是一样的，如果存在就修改，如果不存在就新增</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image89.jpg\" class=\"\">{width=\"5.834388670166229in\"\n<p>height=&quot;2.4237139107611547in&quot;}</p>\n<p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image91.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;2.172652012248469in&quot;}</p>\n</blockquote>\n<h4 id=\"325-查询所有文档\"><a class=\"anchor\" href=\"#325-查询所有文档\">#</a> 3.2.5 查询所有文档</h4>\n<img data-src=\"/Distribution/Elasticsearch-8/image93.jpg\" class=\"\">{width=\"5.807723097112861in\"\n<p>height=&quot;2.5968416447944005in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image95.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.844303368328959in&quot;}</p>\n<h4 id=\"331-查询所有文档\"><a class=\"anchor\" href=\"#331-查询所有文档\">#</a> 3.3.1 查询所有文档</h4>\n<img data-src=\"/Distribution/Elasticsearch-8/image97.jpg\" class=\"\">{width=\"5.763888888888889in\"\n<p>height=&quot;1.9666666666666666in&quot;}</p>\n<p><strong>3.3.2</strong> 匹配查询文档这里的查询表示文档数据中 JSON 对象数据中的 name<br />\n 属性是 zhangsan。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image98.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.8372495625546805in&quot;}</p>\n<p>默认情况下，Elasticsearch 在搜索的结果中，会把文档中保存在_source<br />\n 的所有字段都返回。</p>\n<p>如果我们只想获取其中的部分字段，我们可以添加_source 的过滤</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image100.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.2137871828521436in&quot;}</p>\n<p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group<br />\nby，当然还有很多其他的聚合，例如取最大值、平均值等等。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image102.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.6654582239720037in&quot;}</p>\n<h3 id=\"342-求和\"><a class=\"anchor\" href=\"#342-求和\">#</a> 3.4.2 求和</h3>\n<img data-src=\"/Distribution/Elasticsearch-8/image104.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9544717847769029in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image106.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9344728783902012in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image108.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;3.0547583114610672in&quot;}</p>\n<p>我们之前对索引进行一些配置信息设置，但是都是在单个索引上进行设置。在实际开发中，我们可能需要创建不止一个索引，但是每个索引或多或少都有一些共性。比如我们在设计关系型数据库时，一般都会为每个表结构设计一些常用的字段，比如：创建时间，更新时间，备注信息等。elasticsearch<br />\n 在创建索引的时候，就引入了模板的概念，你可以先设置一些通用的模板，在创建索引的时候，elasticsearch<br />\n 会先根据你创建的模板对索引进行设置。 elasticsearch<br />\n 中提供了很多的默认设置模板，这就是为什么我们在新建文档的时候，可以为你自动设置一些信息，做一些字段转换等。</p>\n<p>索引可使用预定义的模板进行创建，这个模板称作 Index<br />\ntemplates。模板设置包括 settings</p>\n<p>和 mappings</p>\n<h3 id=\"351-创建模板\"><a class=\"anchor\" href=\"#351-创建模板\">#</a> 3.5.1 创建模板</h3>\n<p># 模板名称小写</p>\n<p>PUT _template/mytemplate</p>\n<p>{</p>\n<p>&quot;index_patterns&quot; : [</p>\n<p>&quot;my*&quot;</p>\n<p>],</p>\n<p>&quot;settings&quot; : {</p>\n<p>&quot;index&quot; : {</p>\n<p>&quot;number_of_shards&quot; : &quot;1&quot;</p>\n<p>}</p>\n<p>},</p>\n<p>&quot;mappings&quot; : {</p>\n<p>&quot;properties&quot; : {</p>\n<p>&quot;now&quot;: {</p>\n<p>&quot;type&quot; : &quot;date&quot;,</p>\n<p>&quot;format&quot; : &quot;yyyy/MM/dd&quot;</p>\n<p>}</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image110.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;1.731890857392826in&quot;}</p>\n<h3 id=\"352-查看模板\"><a class=\"anchor\" href=\"#352-查看模板\">#</a> 3.5.2 查看模板</h3>\n<img data-src=\"/Distribution/Elasticsearch-8/image112.jpg\" class=\"\">{width=\"5.837723097112861in\"\n<p>height=&quot;1.9820297462817147in&quot;}</p>\n<h4 id=\"353-验证模板是否存在\"><a class=\"anchor\" href=\"#353-验证模板是否存在\">#</a> 3.5.3 验证模板是否存在</h4>\n<p>#</p>\n<p>HEAD /_template/mytemplate</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image114.jpg\" class=\"\">{width=\"5.7652777777777775in\"\n<p>height=&quot;0.37916666666666665in&quot;}</p>\n<h3 id=\"354-创建索引\"><a class=\"anchor\" href=\"#354-创建索引\">#</a> 3.5.4 创建索引</h3>\n<p>#</p>\n<p>PUT testindex</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image115.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;1.9503619860017498in&quot;}</p>\n<h3 id=\"355-删除模板\"><a class=\"anchor\" href=\"#355-删除模板\">#</a> 3.5.5 删除模板</h3>\n<p>#</p>\n<p>DELETE /_template/mytemplate</p>\n<h2 id=\"36-中文分词\"><a class=\"anchor\" href=\"#36-中文分词\">#</a> <strong>3.6</strong> 中文分词</h2>\n<p>我们在使用 Elasticsearch<br />\n 官方默认的分词插件时会发现，其对中文的分词效果不佳，经常分词后得效果不是我们想要得。</p>\n<p>GET _analyze</p>\n<p>{</p>\n<p>&quot;analyzer&quot;: &quot;chinese&quot;,</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image117.jpg\" class=\"\">{width=\"5.837723097112861in\"\n<p>height=&quot;2.6045188101487313in&quot;}</p>\n<p>为了能够更好地对中文进行搜索和查询，就需要在 Elasticsearch 中集成好的分词器插件，而<br />\n IK 分词器就是用于对中文提供支持得插件。</p>\n<h3 id=\"361-集成-ik-分词器\"><a class=\"anchor\" href=\"#361-集成-ik-分词器\">#</a> 3.6.1 集成 IK 分词器</h3>\n<h4 id=\"3611-下载\"><a class=\"anchor\" href=\"#3611-下载\">#</a> 3.6.1.1 下载</h4>\n<p>下载地址：<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWsvcmVsZWFzZXM=\">https://github.com/medcl/elasticsearch-analysis-ik/releases</span></span>[<span class=\"ul\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWsvcmVsZWFzZXM=\">https://github.com/medcl/elasticsearch-analysis-ik/releases</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWsvcmVsZWFzZXM=\">https://github.com/medcl/elasticsearch-analysis-ik/releases</span>)</p>\n<p>注意：选择下载的版本要与 Elasticsearch 版本对应。我们这里选择 8.1.0</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image119.jpg\" class=\"\">{width=\"5.837723097112861in\"\n<p>height=&quot;2.3147353455818025in&quot;}</p>\n<p>在安装目录得 plugins 目中，将下载得压缩包直接解压缩得里面即可</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image121.jpg\" class=\"\">{width=\"5.837723097112861in\"\n<p>height=&quot;1.0816797900262467in&quot;}</p>\n<h3 id=\"362-使用-ik-分词器\"><a class=\"anchor\" href=\"#362-使用-ik-分词器\">#</a> 3.6.2 使用 IK 分词器</h3>\n<p>IK 分词器提供了两个分词算法：</p>\n<ul>\n<li>\n<p>ik_smart: 最少切分</p>\n</li>\n<li>\n<p>Ik_max_word: 最细粒度划分</p>\n</li>\n</ul>\n<p>接下来咱们使用 ik_smart<br />\n 算法对之前得中文内容进行分词，明显会发现和默认分词器得区</p>\n<p>别。</p>\n<p>GET _analyze</p>\n<p>{</p>\n<p>&quot;analyzer&quot;: &quot;ik_smart&quot;,</p>\n<p>&quot;text&quot;: [&quot;我是一个学生&quot;] }</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image123.jpg\" class=\"\">{width=\"5.814444444444445in\"\n<p>height=&quot;2.1254297900262467in&quot;}</p>\n</blockquote>\n<p>接下来，再对比 ik_max_word 算法分词后的效果</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image125.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;2.5806583552055993in&quot;}</p>\n<p>我们在使用 IK<br />\n 分词器时会发现其实有时候分词的效果也并不是我们所期待的，有时一些特殊得术语会被拆开，比如上面得中文 &quot;一个学生&quot; 希望不要拆开，怎么做呢？其实<br />\n IK 插件给我们提供了自定义分词字典，我们就可以添加自己想要保留得字了。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image127.jpg\" class=\"\">{width=\"5.772916666666666in\"\n<p>height=&quot;1.9034722222222222in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image128.jpg\" class=\"\">{width=\"5.214027777777778in\"\n<p>height=&quot;1.6420953630796151in&quot;}</p>\n</blockquote>\n<p>接下来我们修改配置文件：IKAnalyzer.cfg.xml</p>\n<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!DOCTYPE properties<br />\nSYSTEM &quot;<span class=\"exturl\" data-url=\"aHR0cDovL2phdmEuc3VuLmNvbS9kdGQvcHJvcGVydGllcy5kdGQ=\">http://java.sun.com/dtd/properties.dtd</span>&quot;&gt;</p>\n<p>&lt;properties&gt;</p>\n<p>&lt;comment&gt;IK Analyzer 扩展配置 &lt;/comment&gt;</p>\n<p>&lt;!-- 用户可以在这里配置自己的扩展字典 --&gt;</p>\n<p>&lt;entry key=&quot;ext_dict&quot;&gt;test.dic&lt;/entry&gt;</p>\n<p>&lt;!-- 用户可以在这里配置自己的扩展停止词字典 --&gt;</p>\n<p>&lt;entry key=&quot;ext_stopwords&quot;&gt;&lt;/entry&gt;</p>\n<p>&lt;!-- 用户可以在这里配置远程扩展字典 --&gt;</p>\n<p>&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</p>\n<p>&lt;!-- 用户可以在这里配置远程扩展停止词字典 --&gt;</p>\n<p>&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt;<br />\n--&gt;</p>\n<p>&lt;/properties&gt;</p>\n<p>重启 Elasticsearch 服务器查看效果</p>\n<p>GET _analyze</p>\n<p>{</p>\n<p>&quot;analyzer&quot;: &quot;ik_smart&quot;,</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image130.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;2.002435476815398in&quot;}</p>\n<h2 id=\"37-文档得分\"><a class=\"anchor\" href=\"#37-文档得分\">#</a> <strong>3.7</strong> 文档得分</h2>\n<blockquote>\n<p>Lucene 和 ES 的得分机制是一个基于词频和逆文档词频的公式，简称为 TF-IDF<br />\n 公式</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image132.jpg\" class=\"\">{width=\"5.769444444444445in\"\n<p>height=&quot;0.5486111111111112in&quot;}</p>\n<p>公式中将查询作为输入，使用不同的手段来确定每一篇文档的得分，将每一个因素最后通过公式综合起来，返回该文档的最终得分。这个综合考量的过程，就是我们希望相关的文档被优先返回的考量过程。在<br />\n Lucene 和 ES 中这种相关性称为得分。</p>\n<p>考虑到查询内容和文档得关系比较复杂，所以公式中需要输入得参数和条件非常得多。但是其中比较重要得其实是两个算法机制</p>\n<ul>\n<li>TF (词频)</li>\n</ul>\n<p>Term Frequency :<br />\n 搜索文本中的各个词条（term）在查询文本中出现了多少次，出现次数越多，就越相关，得分会比较高</p>\n<ul>\n<li>IDF (逆文档频率)</li>\n</ul>\n<p>Inverse Document Frequency :<br />\n 搜索文本中的各个词条（term）在整个索引的所有文档中出现了多少次，出现的次数越多，说明越不重要，也就越不相关，得分就比较低。</p>\n<h3 id=\"371-打分机制\"><a class=\"anchor\" href=\"#371-打分机制\">#</a> 3.7.1 打分机制</h3>\n<p>接下来咱们用一个例子简单分析一下文档的打分机制：</p>\n<ol>\n<li>首先，咱们先准备一个基础数据</li>\n</ol>\n<p># 创建索引</p>\n<p>PUT /atguigu</p>\n<p># 增加文档数据</p>\n<p># 此时索引中只有这一条数据</p>\n<p>PUT /atguigu/_doc/1</p>\n<p>{</p>\n<p>&quot;text&quot;:&quot;hello&quot;</p>\n<p>}</p>\n<ol start=\"2\">\n<li>查询匹配条件的文档数据</li>\n</ol>\n<p>#</p>\n<p>GET /atguigu/_search</p>\n<p>{</p>\n<p>&quot;query&quot;: {</p>\n<p>&quot;match&quot;: {</p>\n<p>&quot;text&quot;: &quot;hello&quot;</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image133.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;2.114443350831146in&quot;}</p>\n<p>这里文档的得分为：0.2876821，很奇怪，此时索引中只有一个文档数据，且文档数据中可以直接匹配查询条件，为什么分值这么低？这就是公式的计算结果，咱们一起来看看</p>\n<ol start=\"3\">\n<li>分析文档数据打分过程</li>\n</ol>\n<p># 增加分析参数</p>\n<p>GET /atguigu/_search**?explain=true**</p>\n<p>{</p>\n<p>&quot;query&quot;: {</p>\n<p>&quot;match&quot;: {</p>\n<p>&quot;text&quot;: &quot;hello&quot;</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>执行后，会发现打分机制中有 2 个重要阶段：计算 TF 值和 IDF 值</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image136.jpg\" class=\"\">{width=\"5.837723097112861in\"\n<p>height=&quot;5.9991808836395455in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image140.jpg\" class=\"\">{width=\"5.831112204724409in\"\n<p>height=&quot;0.7591797900262467in&quot;}</p>\n</blockquote>\n<ol start=\"4\">\n<li>计算 TF 值</li>\n</ol>\n<img data-src=\"/Distribution/Elasticsearch-8/image142.jpg\" class=\"\">{width=\"4.965277777777778in\"\n<p>height=&quot;0.4736111111111111in&quot;}</p>\n<p>+----------------+--------------------------------+------------------+<br />\n| 参数           | &gt; 含义                         | &gt; 取值           |<br />\n+<mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark><mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark>==+<br />\n| freq           | &gt; 文档中出现词条的次数         | &gt; 1.0            |<br />\n+----------------+--------------------------------+------------------+<br />\n| k1             | &gt; 术语饱和参数                 | &gt; 1.2（默认值）  |<br />\n+----------------+--------------------------------+------------------+<br />\n| b              | &gt; 长度规格化参数（单           | &gt; 0.75（默认值） |<br />\n|                | 词长度对于整个文档的影响程度） |                  |<br />\n+----------------+--------------------------------+------------------+<br />\n| dl             | &gt; 当前文中分解的字段长度       | &gt; 1.0            |<br />\n+----------------+--------------------------------+------------------+<br />\n| avgdl          | &gt; 查询文                       | &gt; 1.0            |<br />\n|                | 档中分解字段数量 / 查询文档数量  |                  |<br />\n+----------------+--------------------------------+------------------+<br />\n| <strong>TF</strong>（词频） | &gt; <strong>1.0/(1 + 1.2 * (1 - 0.75  | &gt; <strong>0.454545</strong>   |<br />\n|                | &gt; + 0.75*1.0/1.0))</strong>          |                  |<br />\n+----------------+--------------------------------+------------------+</p>\n<ol start=\"5\">\n<li>计算 IDF 值</li>\n</ol>\n<img data-src=\"/Distribution/Elasticsearch-8/image143.jpg\" class=\"\">{width=\"4.415277777777778in\"\n<p>height=&quot;0.6236111111111111in&quot;}</p>\n<p>+-----------------------+-------------------------+---------------+<br />\n| 参数                  | &gt; 含义                  | 取值          |<br />\n+=<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark>=<mark>+</mark>=============+<br />\n| N                     | &gt;                       | 1             |<br />\n|                       |  包含查询字段的文档总数 |               |<br />\n|                       | （不一定包含查询词条）  |               |<br />\n+-----------------------+-------------------------+---------------+<br />\n| n                     | &gt; 包含查询词条的文档数  | 1             |<br />\n+-----------------------+-------------------------+---------------+<br />\n| <strong>IDF</strong>（逆文档频率） | &gt; <strong>log(1 + (1 - 1 +    | <strong>0.2876821</strong> |<br />\n|                       | &gt; 0.5) / (1 + 0.5))</strong>   |               |<br />\n+-----------------------+-------------------------+---------------+</p>\n<p>注：这里的 <strong>log</strong> 是底数为 <strong>e</strong> 的对数</p>\n<ol start=\"6\">\n<li>计算文档得分</li>\n</ol>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image144.jpg\" class=\"\">{width=\"1.4736111111111112in\"\n<p>height=&quot;0.36527777777777776in&quot;}</p>\n</blockquote>\n<p>+-------------------+-----------------------+-----------------------+<br />\n| 参数              | &gt; 含义                | &gt; 取值                |<br />\n+=<mark><mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark></mark>=<mark><mark>+</mark></mark>===================+<br />\n| boost             | &gt; 词条权重            | &gt; **                  |<br />\n|                   |                       | 2.2**（基础值）<strong>*</strong> |<br />\n|                   |                       | &gt; 查询权重 **(1)**     |<br />\n+-------------------+-----------------------+-----------------------+<br />\n| idf               | &gt; 逆文档频率          | &gt; <strong>0.2876821</strong>       |<br />\n+-------------------+-----------------------+-----------------------+<br />\n| tf                | &gt; 词频                | &gt; <strong>0.454545</strong>        |<br />\n+-------------------+-----------------------+-----------------------+<br />\n| <strong>Score</strong>（得分） | &gt; <strong>2.2 * 0.2876821  | &gt; <strong>0.2876821</strong>       |<br />\n|                   | &gt; * 0.454545</strong>       |                       |<br />\n+-------------------+-----------------------+-----------------------+</p>\n<ol start=\"7\">\n<li>增加新的文档，测试得分</li>\n</ol>\n<p>⚫ 增加一个毫无关系的文档</p>\n<p># 增加文档</p>\n<p>PUT /atguigu/_doc/2</p>\n<p>{</p>\n<p>&quot;text&quot; : &quot;spark&quot;</p>\n<p>}</p>\n<p># 因为新文档无词条相关信息，所以匹配的文档数据得分就应该较高：</p>\n<p># 0.6931741</p>\n<p>GET /atguigu/_search</p>\n<p>{</p>\n<p>&quot;query&quot;: {</p>\n<p>&quot;match&quot;: {</p>\n<p>&quot;text&quot;: &quot;hello&quot;</p>\n<p>}</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image145.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;1.9970286526684164in&quot;}</p>\n<p>⚫ 增加一个一模一样的文档</p>\n<p># 增加文档</p>\n<p>PUT /atguigu/_doc/2</p>\n<p>{</p>\n<p>&quot;text&quot; : &quot;hello&quot;</p>\n<p>}</p>\n<p>#<br />\n因为新文档含词条相关信息，且多个文件含有词条，所以显得不是很重要，得分会变低</p>\n<p># 0.18232156</p>\n<p>GET /atguigu/_search</p>\n<p>{</p>\n<p>&quot;query&quot;: {</p>\n<p>&quot;match&quot;: {</p>\n<p>&quot;text&quot;: &quot;hello&quot;</p>\n<p>}</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image147.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;2.4303619860017496in&quot;}</p>\n<p>⚫ 增加一个含有词条，但是内容较多的文档</p>\n<p># 增加文档</p>\n<p>PUT /atguigu/_doc/2</p>\n<p>{</p>\n<p>&quot;text&quot; : &quot;hello <strong>elasticsearch</strong>&quot;</p>\n<p>}</p>\n<p>#<br />\n因为新文档含词条相关信息，但只是其中一部分，所以查询文档的分数会变得更低一些。</p>\n<p># 0.14874382</p>\n<p>GET /atguigu/_search</p>\n<p>{</p>\n<p>&quot;query&quot;: {</p>\n<p>&quot;match&quot;: {</p>\n<p>&quot;text&quot;: &quot;hello&quot;</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image149.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;2.6086953193350833in&quot;}</p>\n<h3 id=\"372-案例\"><a class=\"anchor\" href=\"#372-案例\">#</a> 3.7.2 案例</h3>\n<p>需求：</p>\n<p>查询文档标题中含有 &quot;Hadoop&quot;,&quot;Elasticsearch&quot;,&quot;Spark&quot; 的内容。</p>\n<p>优先选择 &quot;Spark&quot; 的内容</p>\n<p>1) 准备数据</p>\n<p># 准备数据</p>\n<p>PUT /testscore/_doc/1001</p>\n<p>{</p>\n<p>&quot;title&quot; : &quot;Hadoop is a Framework&quot;,</p>\n<p>&quot;content&quot; : &quot;Hadoop 是一个大数据基础框架&quot;</p>\n<p>}</p>\n<p>PUT /testscore/_doc/1002</p>\n<p>{</p>\n<p>&quot;title&quot; : &quot;Hive is a SQL Tools&quot;,</p>\n<p>&quot;content&quot; : &quot;Hive 是一个 SQL 工具&quot;</p>\n<p>}</p>\n<p>PUT /testscore/_doc/1003</p>\n<p>{</p>\n<p>&quot;title&quot; : &quot;Spark is a Framework&quot;,</p>\n<p>&quot;content&quot; : &quot;Spark 是一个分布式计算引擎&quot;</p>\n<p>}</p>\n<p>2) 查询数据</p>\n<p># 查询文档标题中含有 &quot;Hadoop&quot;,&quot;Elasticsearch&quot;,&quot;Spark&quot; 的内容</p>\n<p>GET /testscore/_search?explain=true</p>\n<p>{</p>\n<p>&quot;query&quot;: {</p>\n<p>&quot;bool&quot;: {</p>\n<p>&quot;should&quot;: [</p>\n<p>{</p>\n<p>&quot;match&quot;: {</p>\n<p query:Hadoop,boost:1=\"\">&quot;title&quot;:</p>\n<p>}</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;match&quot;: {</p>\n<p query:Hive,boost:1=\"\">&quot;title&quot;:</p>\n<p>}</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;match&quot;: {</p>\n<p query:Spark,boost:1=\"\">&quot;title&quot;:</p>\n<p>}</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>}</p>\n<p>}</p>\n<p>此时，你会发现，Spark 的结果并不会放置在最前面</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image151.jpg\" class=\"\">{width=\"5.814444444444445in\"\n<p>height=&quot;2.209458661417323in&quot;}</p>\n</blockquote>\n<p>此时，咱们可以更改 Spark 查询的权重参数 boost. 看看查询的结果有什么不同</p>\n<p># 查询文档标题中含有 &quot;Hadoop&quot;,&quot;Elasticsearch&quot;,&quot;Spark&quot; 的内容</p>\n<p>GET /testscore/_search?explain=true</p>\n<p>{</p>\n<p>&quot;query&quot;: {</p>\n<p>&quot;bool&quot;: {</p>\n<p>&quot;should&quot;: [</p>\n<p>{</p>\n<p>&quot;match&quot;: {</p>\n<p query:Hadoop,boost:1=\"\">&quot;title&quot;:</p>\n<p>}</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;match&quot;: {</p>\n<p query:Hive,boost:1=\"\">&quot;title&quot;:</p>\n<p>}</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;match&quot;: {</p>\n<p query:Spark,boost:2=\"\">&quot;title&quot;:</p>\n<p>}</p>\n<p>} ]</p>\n<p>+----------------------------------------------------------------------+<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+======================================================================+<br />\n| &gt; <img data-src=\"/Distribution/Elasticsearch-8/image153.jpg\" class=\"\">{width=&quot;5.761111111111111in&quot;                |<br />\n| &gt; height=&quot;2.1131944444444444in&quot;}                                     |<br />\n+----------------------------------------------------------------------+</p>\n<h1 id=\"第4章-elasticsearch-进阶功能\"><a class=\"anchor\" href=\"#第4章-elasticsearch-进阶功能\">#</a> 第 4 章 Elasticsearch 进阶功能</h1>\n<h2 id=\"41-java-api-操作\"><a class=\"anchor\" href=\"#41-java-api-操作\">#</a> <strong>4.1 Java API</strong> 操作</h2>\n<p>随着 Elasticsearch 8.x 新版本的到来，Type<br />\n 的概念被废除，为了适应这种数据结构的改</p>\n<p>变，Elasticsearch 官方从 7.15 版本开始建议使用新的 Elasticsearch Java<br />\nClient。</p>\n<h3 id=\"411-增加依赖关系\"><a class=\"anchor\" href=\"#411-增加依赖关系\">#</a> 4.1.1 增加依赖关系</h3>\n<p>&lt;properties&gt;</p>\n<p>&lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</p>\n<p>&lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</p>\n<p>&lt;elastic.version&gt;8.1.0&lt;/elastic.version&gt;</p>\n<p>&lt;/properties&gt;</p>\n<p>&lt;dependencies&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.elasticsearch.plugin&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;x-pack-sql-jdbc&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;8.1.0&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;co.elastic.clients&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;elasticsearch-java&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;${elastic.version}&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;2.12.3&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;jakarta.json&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;jakarta.json-api&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;2.0.1&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;/dependencies&gt;</p>\n<p><strong>4.1.2</strong> 获取客户端对象就像连接 MySQL 数据库一样，Java 通过客户端操作<br />\n Elasticsearch 也要获取到连接后才可以。咱们现在使用的基于 https 安全的<br />\n Elasticsearch 服务，所以首先我们需要将之前的证书进行一个转换</p>\n<p>openssl pkcs12 -in elastic-stack-ca.p12 -clcerts -nokeys -out<br />\n<strong>java-ca.crt</strong></p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image154.jpg\" class=\"\">{width=\"5.831112204724409in\"\n<p>height=&quot;1.1591797900262468in&quot;}</p>\n</blockquote>\n<p>配置证书后，我们就可以采用 https 方式获取连接对象了。</p>\n<p>+----------------------------------------------------------------------+<br />\n| # 导入的类                                                          |<br />\n|                                                                      |<br />\n| import co.elastic.clients.elasticsearch.*; import                   |<br />\n| co.elastic.clients.json.jackson.JacksonJsonpMapper; import           |<br />\n| co.elastic.clients.transport.ElasticsearchTransport; import          |<br />\n| co.elastic.clients.transport.rest_client.RestClientTransport; import |<br />\n| org.apache.http.HttpHost; import org.apache.http.auth.*; import     |<br />\n| org.apache.http.client.*; import                                    |<br />\n| org.apache.http.conn.ssl.NoopHostnameVerifier; import                |<br />\n| org.apache.http.impl.client.*; import                               |<br />\n| org.apache.http.impl.nio.client.HttpAsyncClientBuilder; import       |<br />\n| org.apache.http.ssl.*; import org.elasticsearch.client.*;          |<br />\n|                                                                      |<br />\n| import javax.net.ssl.SSLContext; import java.io.InputStream; import  |<br />\n| java.nio.file.*; import java.security.KeyStore; import              |<br />\n| java.security.cert.*;                                               |<br />\n|                                                                      |<br />\n| # 获取客户端对象                                                    |<br />\n|                                                                      |<br />\n| final CredentialsProvider credentialsProvider = new                  |<br />\n| BasicCredentialsProvider();                                          |<br />\n| credentialsProvider.setCredentials(AuthScope.ANY,                    |<br />\n|                                                                      |<br />\n| new UsernamePasswordCredentials(&quot;<strong>elastic</strong>&quot;,                     |<br />\n| &quot;<strong>O3x0hfu7i=ZbQvlktCnd</strong>&quot;));                                      |<br />\n|                                                                      |<br />\n| Path caCertificatePath = Paths.get(&quot;<strong>ca.crt</strong>&quot;);                  |<br />\n|                                                                      |<br />\n| CertificateFactory factory =                                         |<br />\n|                                                                      |<br />\n| CertificateFactory.getInstance(&quot;X.509&quot;); Certificate trustedCa;    |<br />\n| try (InputStream is = Files.newInputStream(caCertificatePath)) {     |<br />\n| trustedCa = factory.generateCertificate(is);                         |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| KeyStore trustStore = KeyStore.getInstance(&quot;pkcs12&quot;);              |<br />\n| trustStore.load(null, null);                                         |<br />\n|                                                                      |<br />\n| trustStore.setCertificateEntry(&quot;ca&quot;, trustedCa);                   |<br />\n|                                                                      |<br />\n| SSLContextBuilder sslContextBuilder = SSLContexts.custom()           |<br />\n|                                                                      |<br />\n| .loadTrustMaterial(trustStore, null); final SSLContext sslContext =  |<br />\n| sslContextBuilder.build();                                           |<br />\n|                                                                      |<br />\n| RestClientBuilder builder = RestClient.builder( new                  |<br />\n| HttpHost(&quot;linux1&quot;, 9200, &quot;https&quot;))                               |<br />\n| .setHttpClientConfigCallback(new                                     |<br />\n|                                                                      |<br />\n| RestClientBuilder.HttpClientConfigCallback() {                       |<br />\n|                                                                      |<br />\n| @Override                                                           |<br />\n|                                                                      |<br />\n| public HttpAsyncClientBuilder customizeHttpClient(                   |<br />\n| HttpAsyncClientBuilder httpClientBuilder) { return                   |<br />\n| httpClientBuilder.setSSLContext(sslContext)                          |<br />\n|                                                                      |<br />\n| .setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE)               |<br />\n|                                                                      |<br />\n| .setDefaultCredentialsProvider(credentialsProvider);                 |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| });                                                                  |<br />\n|                                                                      |<br />\n| RestClient restClient = builder.build();                             |<br />\n|                                                                      |<br />\n| ElasticsearchTransport transport = new RestClientTransport(          |<br />\n| restClient, new JacksonJsonpMapper());                               |<br />\n|                                                                      |<br />\n| ElasticsearchClient client = new ElasticsearchClient(transport);     |<br />\n|                                                                      |<br />\n| ElasticsearchAsyncClient asyncClient = new                           |<br />\n| ElasticsearchAsyncClient(transport); ...                            |<br />\n|                                                                      |<br />\n| transport.close();                                                   |<br />\n+----------------------------------------------------------------------+</p>\n<h3 id=\"413-操作数据普通操作\"><a class=\"anchor\" href=\"#413-操作数据普通操作\">#</a> 4.1.3 操作数据（普通操作）</h3>\n<h4 id=\"4131-索引操作\"><a class=\"anchor\" href=\"#4131-索引操作\">#</a> 4.1.3.1 索引操作</h4>\n<p>// 创建索引</p>\n<p>CreateIndexRequest request = new</p>\n<p>CreateIndexRequest.Builder().index(&quot;myindex&quot;).build();</p>\n<p>final CreateIndexResponse createIndexResponse =<br />\nclient.indices().create(request);</p>\n<p>System.out.println (&quot;创建索引成功：&quot; +<br />\ncreateIndexResponse.acknowledged());</p>\n<p>// 查询索引</p>\n<p>GetIndexRequest getIndexRequest = new</p>\n<p>GetIndexRequest.Builder().index(&quot;myindex&quot;).build();</p>\n<p>final GetIndexResponse getIndexResponse =<br />\nclient.indices().get(getIndexRequest);</p>\n<p>System.out.println (&quot;索引查询成功：&quot; + getIndexResponse.result ());</p>\n<p>// 删除索引</p>\n<p>DeleteIndexRequest deleteIndexRequest = new</p>\n<p>DeleteIndexRequest.Builder().index(&quot;myindex&quot;).build(); final<br />\nDeleteIndexResponse delete =<br />\nclient.indices().delete(deleteIndexRequest); final boolean acknowledged<br />\n= delete.acknowledged (); System.out.println (&quot;删除索引成功：&quot; +<br />\nacknowledged);</p>\n<h4 id=\"4132-文档操作\"><a class=\"anchor\" href=\"#4132-文档操作\">#</a> 4.1.3.2 文档操作</h4>\n<p>+----------------------------------------------------------------------+<br />\n| // 创建文档                                                          |<br />\n|                                                                      |<br />\n| IndexRequest indexRequest = new IndexRequest.Builder()               |<br />\n|                                                                      |<br />\n| .index(&quot;myindex&quot;)                                                  |<br />\n|                                                                      |<br />\n| .id(user.getId().toString())                                         |<br />\n|                                                                      |<br />\n| .document(user) .build();                                            |<br />\n|                                                                      |<br />\n| final IndexResponse index = client.index(indexRequest);              |<br />\n|                                                                      |<br />\n| System.out.println (&quot;文档操作结果:&quot; + index.result ());              |<br />\n|                                                                      |<br />\n| // 批量创建文档                                                      |<br />\n|                                                                      |<br />\n| final List&lt;BulkOperation&gt; operations = new                         |<br />\n| ArrayList&lt;BulkOperation&gt;(); for ( int i= 1;i &lt;= 5; i++ ) {        |<br />\n|                                                                      |<br />\n| final CreateOperation.Builder builder = new                          |<br />\n| CreateOperation.Builder(); builder.index(&quot;myindex&quot;);               |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL2J1aWxkZXIuaWQ=\">builder.id</span>(&quot;200&quot; + i); builder.document(new User(2000 + i, 30 + i  |<br />\n| * 10, &quot;zhangsan&quot; + i, &quot;beijing&quot;,                                |<br />\n|                                                                      |<br />\n| 1000 + i*1000)); final CreateOperation&lt;Object&gt;                    |<br />\n| objectCreateOperation = builder.build();                             |<br />\n|                                                                      |<br />\n| final BulkOperation bulk = new                                       |<br />\n|                                                                      |<br />\n| BulkOperation.Builder().create(objectCreateOperation).build();       |<br />\n| operations.add(bulk);                                                |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| BulkRequest bulkRequest = new                                        |<br />\n|                                                                      |<br />\n| BulkRequest.Builder().operations(operations).build(); final          |<br />\n| BulkResponse bulkResponse = client.bulk(bulkRequest);                |<br />\n| System.out.println (&quot;数据操作成功：&quot; + bulkResponse);               |<br />\n|                                                                      |<br />\n| // 删除文档                                                          |<br />\n|                                                                      |<br />\n| DeleteRequest deleteRequest = new                                    |<br />\n|                                                                      |<br />\n| DeleteRequest.Builder().index(&quot;myindex&quot;).id(&quot;1001&quot;).build();     |<br />\n| client.delete(deleteRequest);                                        |<br />\n+----------------------------------------------------------------------+</p>\n<h4 id=\"4133-文档查询\"><a class=\"anchor\" href=\"#4133-文档查询\">#</a> 4.1.3.3 文档查询</h4>\n<p>+--------------------------------------------------+---+-------+<br />\n| final SearchRequest.Builder searchRequestBuilder | = | &gt; new |<br />\n+==========================================<mark><mark><mark><mark>+</mark>=+</mark></mark></mark>=+<br />\n| &gt; SearchRequest.Builder().index(&quot;myindex1&quot;);   |   |       |<br />\n+--------------------------------------------------+---+-------+</p>\n<p>MatchQuery matchQuery = new</p>\n<p>MatchQuery.Builder().field(&quot;city&quot;).query(FieldValue.of(&quot;beijing&quot;)).build();<br />\nQuery query = new Query.Builder().match(matchQuery).build();<br />\nsearchRequestBuilder.query(query);</p>\n<p>SearchRequest searchRequest = searchRequestBuilder.build();</p>\n<p>final SearchResponse&lt;Object&gt; search = client.search(searchRequest,</p>\n<p>Object.class);</p>\n<p>System.out.println(search);</p>\n<h3 id=\"414-操作数据函数操作\"><a class=\"anchor\" href=\"#414-操作数据函数操作\">#</a> 4.1.4 操作数据（函数操作）</h3>\n<h4 id=\"4141-索引操作\"><a class=\"anchor\" href=\"#4141-索引操作\">#</a> 4.1.4.1 索引操作</h4>\n<p>+----------------------------+---+---------------------------+-----+<br />\n| &gt; // 创建索引              | = | client.indices ().create (p | -&gt; |<br />\n|                            |   |                           |     |<br />\n| final Boolean acknowledged |   |                           |     |<br />\n+<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>+</mark>=+</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark>=+=====+<br />\n| &gt; <span class=\"exturl\" data-url=\"aHR0cDovL3AuaW4=\">p.in</span>                     |   | &gt; )                       |     |<br />\n| dex(&quot;&quot;)).acknowledged(); |   |                           |     |<br />\n| &gt;                          |   |                           |     |<br />\n| &gt; System.out.              |   |                           |     |<br />\n| println (&quot;创建索引成功&quot;); |   |                           |     |<br />\n| &gt;                          |   |                           |     |<br />\n| &gt; // 获取索引              |   |                           |     |<br />\n| &gt;                          |   |                           |     |<br />\n| &gt; System.out.println(      |   |                           |     |<br />\n| &gt; client.indices().get(    |   |                           |     |<br />\n| &gt;                          |   |                           |     |<br />\n| &gt; req -&gt;                  |   |                           |     |<br />\n| &gt; req.index(&quot;myindex1&quot;)  |   |                           |     |<br />\n| &gt;                          |   |                           |     |<br />\n| &gt; ).result());             |   |                           |     |<br />\n| &gt;                          |   |                           |     |<br />\n| &gt; // 删除索引              |   |                           |     |<br />\n| &gt;                          |   |                           |     |<br />\n| &gt; client.indices().delete( |   |                           |     |<br />\n| &gt; reqbuilder -&gt;           |   |                           |     |<br />\n| &gt; re                       |   |                           |     |<br />\n| qbuilder.index(&quot;myindex&quot; |   |                           |     |<br />\n| &gt; ).acknowledged();        |   |                           |     |<br />\n+----------------------------+---+---------------------------+-----+</p>\n<h4 id=\"4142-文档操作\"><a class=\"anchor\" href=\"#4142-文档操作\">#</a> 4.1.4.2 文档操作</h4>\n<p>+---------------------------------------------------------------+-----+<br />\n| &gt; // 创建文档                                                 | -&gt; |<br />\n| &gt;                                                             |     |<br />\n| &gt; System.out.println( client.index( req -&gt;                   |     |<br />\n| &gt; req.index(&quot;myindex&quot;)                                      |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; .id(user.getId().toString())                                |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; .document(user)                                             |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; ).result()                                                  |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; );                                                          |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; // 批量创建文档 client.bulk (req -&gt; { users.forEach ( u -&gt; |     |<br />\n| &gt; { req.operations( b -&gt; {                                   |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; b.create(                                                   |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; d                                                           |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; <span class=\"exturl\" data-url=\"aHR0cDovL2QuaWQ=\">d.id</span>(u.getId().toString()).index(&quot;myindex&quot;).document(u)   |     |<br />\n| &gt; );                                                          |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; return b;                                                   |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; }                                                           |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; );                                                          |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; } );                                                        |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; return req;                                                 |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; }                                                           |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; );                                                          |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; // 删除文档                                                 |     |<br />\n| &gt;                                                             |     |<br />\n| &gt; client.delete( req -&gt; req.index(&quot;myindex&quot;).id(&quot;1001&quot;)  |     |<br />\n| &gt; );                                                          |     |<br />\n+---------------------------------------------------------------+-----+</p>\n<h4 id=\"4143-文档查询\"><a class=\"anchor\" href=\"#4143-文档查询\">#</a> 4.1.4.3 文档查询</h4>\n<p>+-----------------------------------------------------+<br />\n| client.search( req -&gt; { req.query( q -&gt;           |<br />\n|                                                     |<br />\n| q.match( m -&gt; m.field(&quot;city&quot;).query(&quot;beijing&quot;) |<br />\n|                                                     |<br />\n| ) );                                                |<br />\n|                                                     |<br />\n| return req;                                         |<br />\n|                                                     |<br />\n| }                                                   |<br />\n|                                                     |<br />\n| , Object.class                                      |<br />\n|                                                     |<br />\n| );                                                  |<br />\n+-----------------------------------------------------+</p>\n<h3 id=\"415-客户端异步操作\"><a class=\"anchor\" href=\"#415-客户端异步操作\">#</a> 4.1.5 客户端异步操作</h3>\n<p>ES Java API<br />\n 提供了同步和异步的两种客户端处理。之前演示的都是同步处理，异步客户端的处理和同步客户端处理的<br />\n API 基本原理相同，不同的是需要异步对返回结果进行相应的处理。</p>\n<p>+----------------------------------------------------------------------+<br />\n| // 创建索引                                                          |<br />\n|                                                                      |<br />\n| asyncClient.indices().create( req -&gt; { req.index(&quot;newindex&quot;);     |<br />\n| return req;                                                          |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| ).<strong>whenComplete</strong>(                                                  |<br />\n|                                                                      |<br />\n| (resp, error) -&gt; {                                                  |<br />\n|                                                                      |<br />\n| System.out.println (&quot;回调函数&quot;); if ( resp != null ) {              |<br />\n|                                                                      |<br />\n| System.out.println(resp.acknowledged());                             |<br />\n|                                                                      |<br />\n| } else { error.printStackTrace();                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| );                                                                   |<br />\n|                                                                      |<br />\n| System.out.println (&quot;主线程操作...&quot;);                              |<br />\n+======================================================================+<br />\n|                                                                      |<br />\n+----------------------------------------------------------------------+<br />\n| asyncClient.indices().create(                                        |<br />\n|                                                                      |<br />\n| req -&gt; {                                                            |<br />\n|                                                                      |<br />\n| req.index(&quot;newindex&quot;); return req;                                 |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| )                                                                    |<br />\n|                                                                      |<br />\n| .thenApply( resp -&gt; {                                               |<br />\n|                                                                      |<br />\n| return resp.acknowledged();                                          |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| )                                                                    |<br />\n|                                                                      |<br />\n| .whenComplete(                                                       |<br />\n|                                                                      |<br />\n| (resp, error) -&gt; {                                                  |<br />\n|                                                                      |<br />\n| System.out.println (&quot;回调函数&quot;);                                    |<br />\n|                                                                      |<br />\n| if ( !resp ) {                                                       |<br />\n|                                                                      |<br />\n| System.out.println();                                                |<br />\n|                                                                      |<br />\n| } else { error.printStackTrace();                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| );                                                                   |<br />\n+----------------------------------------------------------------------+</p>\n<h2 id=\"42-eql-操作\"><a class=\"anchor\" href=\"#42-eql-操作\">#</a> <strong>4.2 EQL</strong> 操作</h2>\n<p>EQL 的全名是 Event Query Language<br />\n (EQL)。事件查询语言（EQL）是一种用于基于事件的时间序列数据（例如日志，指标和跟踪）的查询语言。在<br />\n Elastic Security 平台上，当输入有效的 EQL<br />\n 时，查询会在数据节点上编译，执行查询并返回结果。这一切都快速、并行地发生，让用户立即看到结果。</p>\n<blockquote>\n<p>EQL 的优点：</p>\n</blockquote>\n<ul>\n<li>EQL 使你可以表达事件之间的关系</li>\n</ul>\n<p>许多查询语言允许您匹配单个事件。 EQL<br />\n 使你可以匹配不同事件类别和时间跨度的一</p>\n<p>系列事件。</p>\n<ul>\n<li>EQL 的学习曲线很低</li>\n</ul>\n<p>EQL 语法看起来像其他常见查询语言，例如 SQL。 EQL<br />\n 使你可以直观地编写和读取查</p>\n<p>询，从而可以进行快速，迭代的搜索。</p>\n<ul>\n<li>EQL 设计用于安全用例</li>\n</ul>\n<p>尽管你可以将其用于任何基于事件的数据，但我们创建了 EQL 来进行威胁搜寻。<br />\nEQL 不仅支持危害指标（IOC）搜索，而且可以描述超出 IOC 范围的活动。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image156.jpg\" class=\"\">{width=\"5.761111111111111in\"\n<p>height=&quot;2.542361111111111in&quot;}</p>\n<h3 id=\"421-基础语法\"><a class=\"anchor\" href=\"#421-基础语法\">#</a> 4.2.1 基础语法</h3>\n<h4 id=\"4211-数据准备\"><a class=\"anchor\" href=\"#4211-数据准备\">#</a> 4.2.1.1 数据准备</h4>\n<p>要运行 EQL 搜索，搜索到的数据流或索引必须包含时间戳和事件类别字段。<br />\n默认情况下，</p>\n<p>EQL 使用 Elastic 通用模式（ECS）中的 @timestamp 和 event.category<br />\n 字段。</p>\n<p>@timestamp 表示时间戳，event.category 表示事件分类。</p>\n<p>咱们准备一些简单的数据，用于表示电商网站页面跳转</p>\n<p># 创建索引</p>\n<p>PUT /gmall</p>\n<p># 批量增加数据</p>\n<p>PUT _bulk</p>\n<p>{&quot;index&quot;:{&quot;_index&quot;:&quot;gmall&quot;}}</p>\n<p>{&quot;@timestamp&quot;:&quot;2022-06-01T12:00:00.00+08:00&quot;,</p>\n<p>&quot;event&quot;:{&quot;category&quot;:&quot;page&quot;},&quot;page&quot; : {&quot;session_id&quot; :</p>\n<p>&quot;42FC7E13-CB3E-5C05-0000-0010A0125101&quot;,&quot;last_page_id&quot; :<br />\n&quot;&quot;,&quot;page_id&quot; :</p>\n<p>&quot;login&quot;,&quot;user_id&quot; : &quot;&quot;}}</p>\n<p>{&quot;index&quot;:{&quot;_index&quot;:&quot;gmall&quot;}}</p>\n<p>{&quot;@timestamp&quot;:&quot;2022-06-01T12:01:00.00+08:00&quot;,</p>\n<p>&quot;event&quot;:{&quot;category&quot;:&quot;page&quot;},&quot;page&quot; : {&quot;session_id&quot; :</p>\n<p>&quot;42FC7E13-CB3E-5C05-0000-0010A0125101&quot;,&quot;last_page_id&quot; :<br />\n&quot;login&quot;,&quot;page_id&quot; :</p>\n<p>&quot;good_list&quot;,&quot;user_id&quot; : &quot;1&quot;}}</p>\n<p>{&quot;index&quot;:{&quot;_index&quot;:&quot;gmall&quot;}}</p>\n<p>{&quot;@timestamp&quot;:&quot;2022-06-01T12:05:00.00+08:00&quot;,</p>\n<p>&quot;event&quot;:{&quot;category&quot;:&quot;page&quot;},&quot;page&quot; : {&quot;session_id&quot; :</p>\n<p>&quot;42FC7E13-CB3E-5C05-0000-0010A0125101&quot;,&quot;last_page_id&quot; :<br />\n&quot;good_list&quot;,&quot;page_id&quot; :</p>\n<p>&quot;good_detail&quot;,&quot;user_id&quot; : &quot;1&quot;}}</p>\n<p>{&quot;index&quot;:{&quot;_index&quot;:&quot;gmall&quot;}}</p>\n<p>{&quot;@timestamp&quot;:&quot;2022-06-01T12:07:00.00+08:00&quot;,</p>\n<p>&quot;event&quot;:{&quot;category&quot;:&quot;page&quot;},&quot;page&quot; : {&quot;session_id&quot; :<br />\n&quot;42FC7E13-CB3E-5C05-0000-0010A0125101&quot;,&quot;last_page_id&quot; :</p>\n<p>&quot;good_detail&quot;,&quot;page_id&quot; : &quot;order&quot;,&quot;user_id&quot; : &quot;1&quot;}}</p>\n<p>{&quot;index&quot;:{&quot;_index&quot;:&quot;gmall&quot;}}</p>\n<p>{&quot;@timestamp&quot;:&quot;2022-06-01T12:08:00.00+08:00&quot;,</p>\n<p>&quot;event&quot;:{&quot;category&quot;:&quot;page&quot;},&quot;page&quot; : {&quot;session_id&quot; :</p>\n<p>&quot;42FC7E13-CB3E-5C05-0000-0010A0125101&quot;,&quot;last_page_id&quot; :<br />\n&quot;order&quot;,&quot;page_id&quot; :</p>\n<p>&quot;payment&quot;,&quot;user_id&quot; : &quot;1&quot;}}</p>\n<p>{&quot;index&quot;:{&quot;_index&quot;:&quot;gmall&quot;}}</p>\n<p>{&quot;@timestamp&quot;:&quot;2022-06-01T12:08:00.00+08:00&quot;,</p>\n<p>&quot;event&quot;:{&quot;category&quot;:&quot;page&quot;},&quot;page&quot; : {&quot;session_id&quot; :</p>\n<p>&quot;42FC7E13-CB3E-5C05-0000-0010A0125102&quot;,&quot;last_page_id&quot; :<br />\n&quot;&quot;,&quot;page_id&quot; :</p>\n<p>&quot;login&quot;,&quot;user_id&quot; : &quot;2&quot;}}</p>\n<p>{&quot;index&quot;:{&quot;_index&quot;:&quot;gmall&quot;}}</p>\n<p>{&quot;@timestamp&quot;:&quot;2022-06-01T12:08:00.00+08:00&quot;,</p>\n<p>&quot;event&quot;:{&quot;category&quot;:&quot;page&quot;},&quot;page&quot; : {&quot;session_id&quot; :</p>\n<p>&quot;42FC7E13-CB3E-5C05-0000-0010A0125102&quot;,&quot;last_page_id&quot; :<br />\n&quot;login&quot;,&quot;page_id&quot; :</p>\n<p>&quot;payment&quot;,&quot;user_id&quot; : &quot;2&quot;}}</p>\n<h4 id=\"4212-数据窗口搜索\"><a class=\"anchor\" href=\"#4212-数据窗口搜索\">#</a> 4.2.1.2 数据窗口搜索</h4>\n<p>在事件响应过程中，有很多时候，了解特定时间发生的所有事件是很有用的。使用一种名为<br />\n any<br />\n 的特殊事件类型，针对所有事件进行匹配，如果想要匹配特定事件，就需要指明事件分类名称</p>\n<p>#</p>\n<p>GET /gmall/_eql/search</p>\n<p>{</p>\n<p>&quot;query&quot; : &quot;&quot;&quot; any where page.user_id == &quot;1&quot;</p>\n<p>&quot;&quot;&quot;</p>\n<p>}</p>\n<p><strong>4.2.1.3</strong> 统计符合条件的事件</p>\n<p>+-----------------------------------+<br />\n| #                                |<br />\n|                                   |<br />\n| GET /gmall/_eql/search           |<br />\n|                                   |<br />\n| {                                 |<br />\n|                                   |<br />\n| &quot;query&quot; : &quot;&quot;&quot; any where true |<br />\n|                                   |<br />\n| &quot;&quot;&quot;,                           |<br />\n+-----------------------------------+</p>\n<p>&quot;filter&quot;: {</p>\n<p>&quot;range&quot;: {</p>\n<p>&quot;@timestamp&quot;: {</p>\n<p>&quot;gte&quot;: &quot;1654056000000&quot;,</p>\n<p>&quot;lt&quot;: &quot;1654056005000&quot;</p>\n<p>}</p>\n<p>}</p>\n<p>} }</p>\n<h4 id=\"4214-事件序列\"><a class=\"anchor\" href=\"#4214-事件序列\">#</a> 4.2.1.4 事件序列</h4>\n<p>+--------------------------------------------------+<br />\n| # 页面先访问 login, 后面又访问了 good_detail 的页面 |<br />\n|                                                  |<br />\n| GET /gmall/_eql/search                          |<br />\n|                                                  |<br />\n| {                                                |<br />\n|                                                  |<br />\n| &quot;query&quot; : &quot;&quot;&quot; sequence by page.session_id   |<br />\n|                                                  |<br />\n| [page where page.page_id==&quot;login&quot;]           |<br />\n|                                                  |<br />\n| [page where page.page_id==&quot;good_detail&quot;]     |<br />\n|                                                  |<br />\n| &quot;&quot;&quot;                                           |<br />\n|                                                  |<br />\n| }                                                |<br />\n+--------------------------------------------------+</p>\n<h3 id=\"422-安全检测\"><a class=\"anchor\" href=\"#422-安全检测\">#</a> 4.2.2 安全检测</h3>\n<p>EQL 在 Elastic Securit 中被广泛使用。实际应用时，我们可以使用 EQL<br />\n 语言来进行检测安全威胁和其他可疑行为。</p>\n<h4 id=\"4221-数据准备\"><a class=\"anchor\" href=\"#4221-数据准备\">#</a> 4.2.2.1 数据准备</h4>\n<p>regsvr32.exe 是一个内置的命令行实用程序，用于在 Windows 中注册.dll<br />\n 库。作为本机工具，regsvr32.exe<br />\n 具有受信任的状态，从而使它可以绕过大多数允许列表软件和脚本阻止程序。<br />\n有权访问用户命令行的攻击者可以使用 regsvr32.exe 通过.dll<br />\n 库运行恶意脚本，即使在其他情况下也不允许这些脚本运行。</p>\n<p>regsvr32 滥用的一种常见变体是 Squfullydoo 攻击。 在 Squfullydoo<br />\n 攻击中，regsvr32.exe 命令使用 scrobj.dll 库注册并运行远程脚本。</p>\n<p>测试数据来自 Atomic Red Team 的测试数据集，其中包括模仿 Squibledoo<br />\n 攻击的事件。</p>\n<p>数据已映射到 Elastic<br />\n 通用架构（ECS）字段：normalized-T1117-AtomicRed-regsvr32.json</p>\n<p>将文件内容导入到 ES 软件中：</p>\n<p># 创建索引</p>\n<p>PUT my-eql-index</p>\n<p># 导入数据</p>\n<p>POST my-eql-index/_bulk?pretty&amp;refresh</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image157.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.3033475503062117in&quot;}</p>\n<p># 导入数据</p>\n<p>GET /_cat/indices/my-eql-index?v=true&amp;h=health,status,index,docs.count</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image159.jpg\" class=\"\">{width=\"5.807723097112861in\"\n<p>height=&quot;1.0391797900262467in&quot;}</p>\n<p>获取与 regsvr32.exe 进程关联的事件数</p>\n<p>+----------------------------------------------------------------------+<br />\n| # 查询数据                                                          |<br />\n|                                                                      |<br />\n| # ?filter_path=-hits.events 从响应中排除 hits.events 属性。         |<br />\n| 此搜索仅用于获取事件计数，                                           |<br />\n|                                                                      |<br />\n| 而不是匹配事件的列表                                                 |<br />\n|                                                                      |<br />\n| # query : 匹配任何进程名称为 regsvr32.exe 的事件                    |<br />\n|                                                                      |<br />\n| # size : 最多返回 200 个匹配事件的匹配，实际查询结果为 143 个          |<br />\n|                                                                      |<br />\n| GET my-eql-index/_eql/search?filter_path=-hits.events               |<br />\n|                                                                      |<br />\n| {                                                                    |<br />\n|                                                                      |<br />\n| &quot;query&quot;: &quot;&quot;&quot; any where <span class=\"exturl\" data-url=\"aHR0cDovL3Byb2Nlc3MubmFtZQ==\">process.name</span> == &quot;regsvr32.exe&quot;         |<br />\n|                                                                      |<br />\n| &quot;&quot;&quot;,                                                              |<br />\n|                                                                      |<br />\n| &quot;size&quot;: 200 }                                                      |<br />\n+----------------------------------------------------------------------+</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image161.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.485152012248469in&quot;}</p>\n<p>regsvr32.exe 进程与 143 个事件相关联。 但是如何首先调用<br />\n regsvr32.exe？谁调用的？ regsvr32.exe<br />\n 是一个命令行实用程序。将结果缩小到使用命令行的进程</p>\n<p># 增加过滤条件查询数据</p>\n<p>GET my-eql-index/_eql/search</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot; process where <span class=\"exturl\" data-url=\"aHR0cDovL3Byb2Nlc3MubmFtZQ==\">process.name</span> == &quot;regsvr32.exe&quot; and<br />\nprocess.command_line.keyword != null &quot;&quot;&quot;</p>\n<p>+----------------------------------------------------------------------+<br />\n| }                                                                    |<br />\n+======================================================================+<br />\n| &gt; <img data-src=\"/Distribution/Elasticsearch-8/image163.jpg\" class=\"\">{width=&quot;5.748611111111111in&quot;                |<br />\n| &gt; height=&quot;2.5618055555555554in&quot;}                                     |<br />\n+----------------------------------------------------------------------+</p>\n<p>该查询将一个事件与创建的 event.type 相匹配，指示 regsvr32.exe<br />\n 进程的开始。根据事件的</p>\n<p>process.command_line 值，regsvr32.exe 使用 scrobj.dll 注册了脚本<br />\n RegSvr32.sct. 这符合</p>\n<p>Squibledoo 攻击的行为</p>\n<p><strong>4.2.4</strong> 检查恶意脚本加载</p>\n<p>检查 regsvr32.exe 以后是否加载 scrobj.dll 库</p>\n<p># 增加过滤条件查询数据</p>\n<p>GET my-eql-index/_eql/search</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot; library where <span class=\"exturl\" data-url=\"aHR0cDovL3Byb2Nlc3MubmFtZQ==\">process.name</span> == &quot;regsvr32.exe&quot; and<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2RsbC5uYW1l\">dll.name</span> == &quot;scrobj.dll&quot; &quot;&quot;&quot;</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image164.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.667029746281715in&quot;}</p>\n<p><strong>4.2.5</strong><br />\n 检查攻击成功可能性在许多情况下，攻击者使用恶意脚本连接到远程服务器或下载其他文件。<br />\n使用 EQL 序列查询来检查以下一系列事件：</p>\n<ul>\n<li>\n<p>regsvr32.exe 进程</p>\n</li>\n<li>\n<p>通过相同的进程加载 scrobj.dll 库</p>\n</li>\n<li>\n<p>同一过程中的任何网络事件</p>\n</li>\n</ul>\n<p>根据上一个响应中看到的命令行值，你可以期望找到一个匹配项。但是，此查询并非针对该特定命令而设计。取而代之的是，它寻找一种可疑行为的模式，这种模式足以检测出相似的威胁</p>\n<p>+----------------------------------------------------+<br />\n| # 增加过滤条件查询数据                            |<br />\n|                                                    |<br />\n| GET my-eql-index/_eql/search                      |<br />\n|                                                    |<br />\n| {                                                  |<br />\n|                                                    |<br />\n| &quot;query&quot;: &quot;&quot;&quot; sequence by process.pid          |<br />\n|                                                    |<br />\n| [process where <span class=\"exturl\" data-url=\"aHR0cDovL3Byb2Nlc3MubmFtZQ==\">process.name</span> == &quot;regsvr32.exe&quot;] |<br />\n|                                                    |<br />\n| [library where <span class=\"exturl\" data-url=\"aHR0cDovL2RsbC5uYW1l\">dll.name</span> == &quot;scrobj.dll&quot;]       |<br />\n|                                                    |<br />\n| [network where true]                             |<br />\n|                                                    |<br />\n| &quot;&quot;&quot; }                                           |<br />\n+----------------------------------------------------+</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image166.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.6270920822397201in&quot;}</p>\n<p>一般使用 Elasticsearch 的时候，会使用 Query DSL 来查询数据，从<br />\n Elasticsearch6.3 版本以后，Elasticsearch 已经支持 SQL 查询了。</p>\n<p>Elasticsearch SQL 是一个 X-Pack 组件，它允许针对 Elasticsearch<br />\n 实时执行类似 SQL 的查询。无论使用 REST 接口，命令行还是<br />\n JDBC，任何客户端都可以使用 SQL 对 Elasticsearch<br />\n 中的数据进行原生搜索和聚合数据。可以将 Elasticsearch SQL<br />\n 看作是一种翻译器，它可以将</p>\n<p>SQL 翻译成 Query DSL。</p>\n<blockquote>\n<p>Elasticsearch SQL 具有如下特性：</p>\n</blockquote>\n<ul>\n<li>\n<p>原生支持：Elasticsearch SQL 是专门为 Elasticsearch 打造的。</p>\n</li>\n<li>\n<p>没有额外的零件：无需其他硬件，处理器，运行环境或依赖库即可查询<br />\n Elasticsearch，</p>\n</li>\n</ul>\n<blockquote>\n<p>Elasticsearch SQL 直接在 Elasticsearch 内部运行。</p>\n</blockquote>\n<ul>\n<li>轻巧高效：Elasticsearch SQL<br />\n 并未抽象化其搜索功能，相反的它拥抱并接受了 SQL<br />\n 来实现全文搜索，以简洁的方式实时运行全文搜索。</li>\n</ul>\n<h3 id=\"431-sql-和-elasticsearch-的对应关系\"><a class=\"anchor\" href=\"#431-sql-和-elasticsearch-的对应关系\">#</a> 4.3.1 SQL 和 Elasticsearch 的对应关系</h3>\n<p>虽然 SQL 和 Elasticsearch<br />\n 对数据的组织方式（以及不同的语义）有不同的术语，但它们的目的本质上是相同的。</p>\n<p>+----------+-----------------+---------------------------------------+<br />\n| SQL      | &gt; Elasticsearch | &gt; 描述                                |<br />\n+<mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark>=<mark><mark><mark>+</mark></mark></mark>=================================+<br />\n| Column   | &gt; field         | &gt; 对比两个，数据都存储在              |<br />\n|          |                 | 命名条目中，具有多种数据类型，包含一  |<br />\n|          |                 | &gt;                                     |<br />\n|          |                 | &gt; 个值。SQL 将此类条目称为列，而      |<br />\n|          |                 | &gt; Elasticsearch 称为字段。请注意，    |<br />\n|          |                 | &gt;                                     |<br />\n|          |                 | &gt; 在 Elasticsearch                    |<br />\n|          |                 | &gt; 中，一个字段可以包含多个相          |<br />\n|          |                 | 同类型的值（本质上是一个列表），而在  |<br />\n|          |                 | &gt; SQL                                 |<br />\n|          |                 | &gt; 中，一个列可以                      |<br />\n|          |                 | 只包含一个所述类型的值。Elasticsearch |<br />\n|          |                 | &gt; SQL 将尽最大努力保留 SQL            |<br />\n|          |                 | &gt; 语义，并根据查                      |<br />\n|          |                 | 询拒绝那些返回具有多个值的字段的查询  |<br />\n+----------+-----------------+---------------------------------------+<br />\n| Row      | &gt; document      | &gt; Columns 和 fields                   |<br />\n|          |                 | &gt; 本身不存在；它们是 row 或 a         |<br />\n|          |                 | &gt; 的一部分                            |<br />\n|          |                 | &gt; document。两者的语义略有不同：row   |<br />\n|          |                 | &gt;                                     |<br />\n|          |                 |  趋于严格（并且有更多的强制执行），而 |<br />\n|          |                 | &gt; document                            |<br />\n|          |                 | &gt; 趋于                                |<br />\n|          |                 | 更加灵活或松散（同时仍然具有结构）。  |<br />\n+----------+-----------------+---------------------------------------+<br />\n| Table    | &gt; Index         | &gt; 执行查询的目标                      |<br />\n+----------+-----------------+---------------------------------------+<br />\n| Schema   | &gt; Mapping       | &gt; 在 RDBMS 中，schem                  |<br />\n|          |                 | &gt; 主                                  |<br />\n|          |                 | 要是表的命名空间，通常用作安全边界。  |<br />\n|          |                 | &gt;                                     |<br />\n|          |                 | &gt; Elasticsearch                       |<br />\n|          |                 | &gt; 没有为它提                          |<br />\n|          |                 | 供等效的概念。但是，当启用安全性时，  |<br />\n|          |                 | &gt;                                     |<br />\n|          |                 | &gt; Elasticsearch                       |<br />\n|          |                 | &gt; 会自动应用安全性强制                |<br />\n|          |                 | ，以便角色只能看到它被允许访问的数据  |<br />\n+----------+-----------------+---------------------------------------+<br />\n| Database | &gt; Cluster 实例  | &gt; 在 SQL 中，catalog 或者 database    |<br />\n|          |                 | &gt; 从概念上可以                        |<br />\n|          |                 | 互换使用，表示一组模式，即多个表。在  |<br />\n|          |                 | &gt; Elasticsearch                       |<br />\n|          |                 | &gt; 中，可用的索引集被分组在一个        |<br />\n|          |                 | &gt; cluster，语义也有所不同。database   |<br />\n|          |                 | &gt; 本质上是另一个命名空间（            |<br />\n|          |                 | 可能对数据的存储方式有一些影响），而  |<br />\n|          |                 | &gt; Elasticsearch cluster 是一个运      |<br />\n|          |                 | &gt;                                     |<br />\n|          |                 | &gt; 行                                  |<br />\n|          |                 | 时实例，或者更确切地说是一组至少一个  |<br />\n|          |                 | &gt; Elasticsearch                       |<br />\n|          |                 | &gt; 实例（通常是分                      |<br />\n|          |                 | 布式运行）。在实践中，这意味着虽然在  |<br />\n|          |                 | &gt; SQL                                 |<br />\n|          |                 | &gt; 中，一个实例中可能有多个目录，但在  |<br />\n|          |                 | &gt; Elasticsearch                       |<br />\n|          |                 | &gt; 中，一个目录仅限于一个              |<br />\n+----------+-----------------+---------------------------------------+</p>\n<p>虽然概念之间的映射并不完全是一对一的，语义也有所不同，但共同点多于差异。事实上，</p>\n<p>SQL 的许多概念可以在 Elasticsearch<br />\n 中找到对应关系，并且这两者的术语也很类似</p>\n<h3 id=\"432-数据准备\"><a class=\"anchor\" href=\"#432-数据准备\">#</a> 4.3.2 数据准备</h3>\n<p># 创建索引并增加数据，等同于创建表和数据</p>\n<p>PUT my-sql-index/_bulk?refresh</p>\n<p>{&quot;index&quot;:{&quot;_id&quot;: &quot;JAVA&quot;}}</p>\n<p>{&quot;name&quot;: &quot;JAVA&quot;, &quot;author&quot;: &quot;zhangsan&quot;, &quot;release_date&quot;:<br />\n&quot;2022-05-01&quot;,</p>\n<p>&quot;page_count&quot;: 561}</p>\n<p>{&quot;index&quot;:{&quot;_id&quot;: &quot;BIGDATA&quot;}}</p>\n<p>{&quot;name&quot;: &quot;BIGDATA&quot;, &quot;author&quot;: &quot;lisi&quot;, &quot;release_date&quot;:<br />\n&quot;2022-05-02&quot;, &quot;page_count&quot;:</p>\n<p>482}</p>\n<p>{&quot;index&quot;:{&quot;_id&quot;: &quot;SCALA&quot;}}</p>\n<p>{&quot;name&quot;: &quot;SCALA&quot;, &quot;author&quot;: &quot;wangwu&quot;, &quot;release_date&quot;:<br />\n&quot;2022-05-03&quot;, &quot;page_count&quot;:</p>\n<p>604}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image168.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.213976377952756in&quot;}</p>\n<p>现在可以使用 SQL 对数据进行查询了。</p>\n<p>+----------------------------------------------------------------------+<br />\n| # SQL                                                               |<br />\n|                                                                      |<br />\n| # 这里的表就是索引                                                  |<br />\n|                                                                      |<br />\n| # 可以通过 format 参数控制返回结果的格式，默认为 json 格式 #           |<br />\n| txt: 表示文本格式，看起来更直观点.                                    |<br />\n|                                                                      |<br />\n| # csv: 使用逗号隔开的数据                                            |<br />\n|                                                                      |<br />\n| # json:JSON 格式数据                                                 |<br />\n|                                                                      |<br />\n| # tsv: 使用 tab 键隔开数据                                            |<br />\n|                                                                      |<br />\n| # yaml: 属性配置格式                                                 |<br />\n|                                                                      |<br />\n| POST _sql?format=txt                                                |<br />\n|                                                                      |<br />\n| {                                                                    |<br />\n|                                                                      |<br />\n| &quot;query&quot;: &quot;&quot;&quot;                                                    |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot;                                      |<br />\n|                                                                      |<br />\n| &quot;&quot;&quot;                                                               |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+======================================================================+<br />\n| &gt; <img data-src=\"/Distribution/Elasticsearch-8/image170.jpg\" class=\"\">{width=&quot;5.751388888888889in&quot;                |<br />\n| &gt; height=&quot;1.0090277777777779in&quot;}                                     |<br />\n+----------------------------------------------------------------------+<br />\n| # 条件查询                                                          |<br />\n|                                                                      |<br />\n| POST _sql?format=txt                                                |<br />\n|                                                                      |<br />\n| {                                                                    |<br />\n|                                                                      |<br />\n| &quot;query&quot;: &quot;&quot;&quot;                                                    |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; where page_count &gt; 500              |<br />\n|                                                                      |<br />\n| &quot;&quot;&quot;                                                               |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+----------------------------------------------------------------------+</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image171.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;0.9654297900262467in&quot;}</p>\n</blockquote>\n<p>实际上会发现，和 JDBC 操作时的 SQL 语法是基本是一样的。</p>\n<p><strong>4.3.3 SQL</strong> 转换为 <strong>DSL</strong> 使用当我们需要使用 Query DSL<br />\n 时，也可以先使用 SQL 来查询，然后通过 Translate API<br />\n 转换即可，查询的结果为 DSL 方式的结果</p>\n<p># 转换 SQL 为 DSL 进行操作</p>\n<p>POST _sql/translate</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot;</p>\n<p>SELECT * FROM &quot;my-sql-index&quot; where page_count &gt; 500</p>\n<p>&quot;&quot;&quot;</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image173.jpg\" class=\"\">{width=\"5.787722003499563in\"\n<p>height=&quot;2.2936964129483814in&quot;}</p>\n<p><strong>4.3.4 SQL</strong> 和 <strong>DSL</strong> 混合使用我们如果在优化 SQL<br />\n 语句之后还不满足查询需求，可以拿 SQL 和 DSL 混用，ES 会先根据</p>\n<p>SQL 进行查询，然后根据 DSL 语句对 SQL 的执行结果进行二次查询</p>\n<p># SQL 和 DSL 混合使用</p>\n<p>#<br />\n由于索引中含有横线，所以作为表名时需要采用双引号，且外层需要三个引号包含</p>\n<p>POST _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot;SELECT * FROM &quot;my-sql-index&quot; &quot;&quot;&quot;,</p>\n<p>&quot;filter&quot; : {</p>\n<p>&quot;range&quot;: {</p>\n<p>&quot;page_count&quot;: {</p>\n<p>&quot;gte&quot;: 400,</p>\n<p>&quot;lte&quot;: 600</p>\n<p>}</p>\n<p>} },</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image175.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.5866130796150482in&quot;}</p>\n<h3 id=\"435-常用-sql-操作\"><a class=\"anchor\" href=\"#435-常用-sql-操作\">#</a> 4.3.5 常用 SQL 操作</h3>\n<h4 id=\"4351-查询所有索引\"><a class=\"anchor\" href=\"#4351-查询所有索引\">#</a> 4.3.5.1 查询所有索引</h4>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot; show tables</p>\n<p>&quot;&quot;&quot;</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image177.jpg\" class=\"\">{width=\"5.75625in\" height=\"0.8486111111111111in\"}\n<h4 id=\"4352-查询指定索引\"><a class=\"anchor\" href=\"#4352-查询指定索引\">#</a> 4.3.5.2 查询指定索引</h4>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot; show tables like 'myindex'</p>\n<p>&quot;&quot;&quot;</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image178.jpg\" class=\"\">{width=\"5.766666666666667in\"\n<p>height=&quot;0.8430555555555556in&quot;}</p>\n<h4 id=\"4353-模糊查询索引\"><a class=\"anchor\" href=\"#4353-模糊查询索引\">#</a> 4.3.5.3 模糊查询索引</h4>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot;</p>\n<p>show tables like 'my-%'</p>\n<p>&quot;&quot;&quot;</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image179.jpg\" class=\"\">{width=\"5.751388888888889in\"\n<p>height=&quot;0.8458333333333333in&quot;}</p>\n<h4 id=\"4354-查看索引结构\"><a class=\"anchor\" href=\"#4354-查看索引结构\">#</a> 4.3.5.4 查看索引结构</h4>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot; describe myindex</p>\n<p>&quot;&quot;&quot;</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image180.jpg\" class=\"\">{width=\"5.75in\" height=\"1.0791666666666666in\"}\n<h4 id=\"4355-基础查询操作\"><a class=\"anchor\" href=\"#4355-基础查询操作\">#</a> 4.3.5.5 基础查询操作</h4>\n<p>在 ES 中使用 SQL 查询的语法与在数据库中使用基本一致，具体格式如下:</p>\n<p># 基本 SQL 格式</p>\n<p>SELECT select_expr [, ...]</p>\n<p>[ FROM table_name ]</p>\n<p>[ WHERE condition ]</p>\n<p>[ GROUP BY grouping_element [, ...] ]</p>\n<p>[ HAVING condition]</p>\n<p>[ ORDER BY expression [ ASC | DESC ] [, ...] ]</p>\n<p>[ LIMIT [ count ] ]</p>\n<p>[ PIVOT ( aggregation_expr FOR column IN ( value [ [ AS ] alias ]<br />\n[, ...] ) ) ]</p>\n<p>➢ where</p>\n<p># 条件过滤</p>\n<p>POST _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot; SELECT * FROM &quot;my-sql-index&quot; where name = 'JAVA'<br />\n&quot;&quot;&quot; }</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image181.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.2285564304461942in&quot;}</p>\n<p># 查询所有数据</p>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot;</p>\n<p>SELECT * FROM &quot;my-sql-index&quot;</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image183.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;1.1336953193350832in&quot;}</p>\n<p># 按照日期进行分组</p>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot;</p>\n<p>SELECT release_date FROM &quot;my-sql-index&quot; group by release_date</p>\n<p>&quot;&quot;&quot; }</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image185.jpg\" class=\"\">{width=\"5.837723097112861in\"\n<p>height=&quot;1.090430883639545in&quot;}</p>\n<p># 对分组后的数据进行过滤</p>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot;</p>\n<p>SELECT sum(page_count), release_date as datacnt FROM &quot;my-sql-index&quot;<br />\ngroup by release_date having sum(page_count) &gt; 1000</p>\n<p>&quot;&quot;&quot;</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image187.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;1.1549453193350832in&quot;}</p>\n<ul>\n<li>order by</li>\n</ul>\n<p># 对页面数量进行排序（降序）</p>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot;</p>\n<p>select * from &quot;my-sql-index&quot; order by page_count desc</p>\n<p>&quot;&quot;&quot;</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image189.jpg\" class=\"\">{width=\"5.7625in\" height=\"0.8666666666666667in\"}\n<ul>\n<li>limit</li>\n</ul>\n<p># 限定查询数量</p>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot;</p>\n<p>select * from &quot;my-sql-index&quot; limit 3</p>\n<p>&quot;&quot;&quot;</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image190.jpg\" class=\"\">{width=\"5.75in\" height=\"0.8361111111111111in\"}\n<ul>\n<li>cursor</li>\n</ul>\n<p>游标（cursor）是系统为用户开设的一个数据缓冲区，存储 sql<br />\n 语句的执行结果，每个游标区都有一个名字，用户可以用 sql<br />\n 语句逐一从游标中获取记录，并赋给主变量，交由主语言进一步处理。就本质而言，游标实际上是一种能从包括多条数据记录的结果集中每次提取一条或多条记录的机制</p>\n<p># 查询数据</p>\n<p>#<br />\n因为查询结果较多，但是获取的数据较少，所以为了提高效果，会将数据存储到临时缓冲区中</p>\n<p># 此处数据展示格式为 json</p>\n<p>POST _sql?format=json</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot; SELECT * FROM &quot;my-sql-index&quot; order by page_count<br />\ndesc &quot;&quot;&quot;,</p>\n<p>&quot;fetch_size&quot;: 2</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image191.jpg\" class=\"\">{width=\"5.821056430446194in\"\n<p>height=&quot;2.705363079615048in&quot;}</p>\n<p>返回结果中的 cursor<br />\n 就是缓冲区的标识，这就意味着可以从缓冲区中直接获取后续数据，操作上有点类似于迭代器，可多次执行。</p>\n<p># 此处游标 cursor 值需要根据读者执行的操作进行修改，请勿直接使用</p>\n<p>POST /_sql?format=json</p>\n<p>{</p>\n<p>&quot;cursor&quot;:</p>\n<p>&quot;8/LoA0RGTABEissKgkAYRh2QiAh8FZVcuExKaWisxEbHTUzO7wVH7TKSb19Gi87ig8N3UIaeox/<br />\nIgdmjlQW0YLY7iICuhO9aIpHNJvWtLMXOKXGaqKUms0vPb8wXSSJCtyE7N3JP2ggfKCZRjHdxmq9<br />\n/eFc8Zndi0wJoeGY0PJLOq7lZVWJrJXFaee8JQ0fFjA+q6h9IVzAqTUOF3vEW/rq48RIueT90Cum<br />\ny78pvs3yABP6Ei+AK0Py7qm5huowPAAAA//8DAA==&quot;</p>\n<p>}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image193.jpg\" class=\"\">{width=\"5.831112204724409in\"\n<p>height=&quot;1.6764031058617672in&quot;}</p>\n</blockquote>\n<p>如果执行后，无任何结果返回，说明数据已经读取完毕</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image195.jpg\" class=\"\">{width=\"5.814444444444445in\"\n<p>height=&quot;0.8933891076115485in&quot;}</p>\n</blockquote>\n<p>此时再次执行，会返回错误信息</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image197.jpg\" class=\"\">{width=\"5.837723097112861in\"\n<p>height=&quot;2.3908464566929135in&quot;}</p>\n<p># 此处游标 cursor 值需要根据读者执行的操作进行修改，请勿直接使用</p>\n<p>POST _sql/close</p>\n<p>{</p>\n<p>&quot;cursor&quot;:</p>\n<p>&quot;8/LoA0RGTABEissKgkAYRh2QiAh8FZVcuExKaWisxEbHTUzO7wVH7TKSb19Gi87ig8N3UIaeox/</p>\n<p>IgdmjlQW0YLY7iICuhO9aIpHNJvWtLMXOKXGaqKUms0vPb8wXSSJCtyE7N3JP2ggfKCZRjHdxmq9<br />\n/eFc8Zndi0wJoeGY0PJLOq7lZVWJrJXFaee8JQ0fFjA+q6h9IVzAqTUOF3vEW/rq48RIueT90Cum<br />\ny78pvs3yABP6Ei+AK0Py7qm5huowPAAAA//8DAA==&quot;</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image199.jpg\" class=\"\">{width=\"5.753472222222222in\"\n<p>height=&quot;0.9652777777777778in&quot;}</p>\n<h4 id=\"4356-基础聚合操作\"><a class=\"anchor\" href=\"#4356-基础聚合操作\">#</a> 4.3.5.6 基础聚合操作</h4>\n<p>在 ES 中使用 SQL 查询的聚合语法与在数据库中使用基本一致</p>\n<ul>\n<li>\n<p>Min</p>\n</li>\n<li>\n<p>Max</p>\n</li>\n<li>\n<p>Avg</p>\n</li>\n<li>\n<p>Sum</p>\n</li>\n<li>\n<p>Count(*)</p>\n</li>\n<li>\n<p>Distinct</p>\n</li>\n</ul>\n<p>GET _sql?format=txt</p>\n<p>{</p>\n<p>&quot;query&quot;: &quot;&quot;&quot;</p>\n<p>SELECT</p>\n<p>MIN(page_count) min,</p>\n<p>MAX(page_count) max,</p>\n<p>AVG(page_count) avg,</p>\n<p>SUM(page_count) sum,</p>\n<p>COUNT(*) count,</p>\n<p>COUNT(DISTINCT name) dictinct_count FROM &quot;my-sql-index&quot;</p>\n<p>&quot;&quot;&quot;</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image200.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4116119860017498in&quot;}</p>\n<h4 id=\"436-支持的函数和运算\"><a class=\"anchor\" href=\"#436-支持的函数和运算\">#</a> 4.3.6 支持的函数和运算</h4>\n<h5 id=\"4361-比较运算符\"><a class=\"anchor\" href=\"#4361-比较运算符\">#</a> 4.3.6.1 比较运算符</h5>\n<p>+----------------------------------------------------------------------+<br />\n| # Equality                                                          |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE name <strong>=</strong> 'JAVA'            |<br />\n|                                                                      |<br />\n| # Null Safe Equality                                                |<br />\n|                                                                      |<br />\n| SELECT 'elastic' <strong>&lt;=&gt;</strong> null AS &quot;equals&quot;                      |<br />\n|                                                                      |<br />\n| SELECT null <strong>&lt;=&gt;</strong> null AS &quot;equals&quot;                             |<br />\n|                                                                      |<br />\n| # Inequality                                                        |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE name <strong>&lt;&gt;</strong> 'JAVA' SELECT  |<br />\n| * FROM &quot;my-sql-index&quot; WHERE name <strong>!=</strong> 'JAVA'                  |<br />\n|                                                                      |<br />\n| # Comparison                                                        |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE page_count <strong>&gt;</strong> 500          |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE page_count <strong>&gt;=</strong> 500         |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE page_count <strong>&lt;</strong> 500 SELECT   |<br />\n| * FROM &quot;my-sql-index&quot; WHERE page_count <strong>&lt;=</strong> 500                |<br />\n|                                                                      |<br />\n| # BETWEEN                                                           |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE page_count <strong>between 100 and   |<br />\n| 500</strong>                                                                |<br />\n|                                                                      |<br />\n| # Is Null / Is Not Null                                             |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE name <strong>is not null</strong>           |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE name <strong>is null</strong>               |<br />\n|                                                                      |<br />\n| # IN                                                                |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE name <strong>in</strong> ('JAVA',         |<br />\n| 'SCALA')                                                           |<br />\n+----------------------------------------------------------------------+</p>\n<h5 id=\"4362-逻辑运算符\"><a class=\"anchor\" href=\"#4362-逻辑运算符\">#</a> 4.3.6.2 逻辑运算符</h5>\n<p># AND</p>\n<p>SELECT * FROM &quot;my-sql-index&quot; WHERE name = 'JAVA' <strong>AND</strong> page_count<br />\n&gt; 100</p>\n<p># OR</p>\n<p>SELECT * FROM &quot;my-sql-index&quot; WHERE name = 'JAVA' <strong>OR</strong> name =<br />\n'SCALA'</p>\n<p># NOT</p>\n<p>SELECT * FROM &quot;my-sql-index&quot; WHERE NOT name = 'JAVA'</p>\n<h5 id=\"4363-数学运算符\"><a class=\"anchor\" href=\"#4363-数学运算符\">#</a> 4.3.6.3 数学运算符</h5>\n<p># 加减乘除</p>\n<p>select 1 + 1 as x select 1 - 1 as x select - 1 as x select 6 * 6 as x<br />\nselect 30 / 5 as x select 30 % 7 as x</p>\n<h5 id=\"4364-类型转换\"><a class=\"anchor\" href=\"#4364-类型转换\">#</a> 4.3.6.4 <sup>类型转换</sup></h5>\n<p># 类型转换</p>\n<p>SELECT '123'::long AS long</p>\n<h5 id=\"4365-模糊查询\"><a class=\"anchor\" href=\"#4365-模糊查询\">#</a> 4.3.6.5 <sup>模糊查询</sup></h5>\n<p>+----------------------------------------------------------------------+<br />\n| # LIKE 通配符                                                       |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE name <strong>like</strong> 'JAVA%' SELECT |<br />\n| * FROM &quot;my-sql-index&quot; WHERE name <strong>like</strong> 'JAVA_'              |<br />\n|                                                                      |<br />\n| # 如果需要匹配通配符本身，使用转义字符                               |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE name <strong>like</strong> 'JAVA/%'       |<br />\n| ESCAPE '/'                                                         |<br />\n|                                                                      |<br />\n| # RLIKE 不要误会，这里的 R 表示的不是方向，而是正则表示式 Regex        |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE name <strong>like</strong> 'JAV*A'       |<br />\n| SELECT * FROM &quot;my-sql-index&quot; WHERE name <strong>rlike</strong> 'JAV*A'      |<br />\n|                                                                      |<br />\n| # 尽管<strong> LIKE</strong> 在 <strong>Elasticsearch SQL</strong>                              |<br />\n| 中搜索或过滤时是一个有效的选项，但全文搜索 <strong>MATCH</strong> 和<strong> QUERY</strong>      |<br />\n| 速度更快、功能更强大，并且是首选替代方案。                           |<br />\n+----------------------------------------------------------------------+</p>\n<h5 id=\"4366-聚合分析函数\"><a class=\"anchor\" href=\"#4366-聚合分析函数\">#</a> 4.3.6.6 聚合分析函数</h5>\n<p># FIRST / FIRST_VALUE : FIRST (第一个字段，排序字段)</p>\n<p>SELECT <strong>first</strong>(name, release_date) FROM &quot;my-sql-index&quot;</p>\n<p>SELECT <strong>first_value</strong>(substring(name,2,1)) FROM &quot;my-sql-index&quot;</p>\n<p># LAST / LAST_VALUE : LAST (第一个字段，排序字段)</p>\n<p>SELECT <strong>last</strong>(name, release_date) FROM &quot;my-sql-index&quot;</p>\n<p>SELECT <strong>last_value</strong>(substring(name,2,1)) FROM &quot;my-sql-index&quot;</p>\n<p># KURTOSIS 量化字段的峰值分布</p>\n<p>SELECT <strong>KURTOSIS</strong>(page_count) FROM &quot;my-sql-index&quot;</p>\n<p># MAD</p>\n<p>SELECT <strong>MAD</strong>(page_count) FROM &quot;my-sql-index&quot;</p>\n<h5 id=\"4367-分组函数\"><a class=\"anchor\" href=\"#4367-分组函数\">#</a> 4.3.6.7 <sup>分组函数</sup></h5>\n<p># HISTOGRAM : 直方矩阵</p>\n<p>SELECT HISTOGRAM(page_count, 100) as c， count(*) FROM &quot;my-sql-index&quot;<br />\ngroup by c</p>\n<h5 id=\"4368-数学通用函数\"><a class=\"anchor\" href=\"#4368-数学通用函数\">#</a> 4.3.6.8 数学通用函数</h5>\n<p>+----------------------------------------------------------------------+<br />\n| # ABS：求数字的绝对值                                               |<br />\n|                                                                      |<br />\n| select ABS(page_count) from &quot;myindex&quot; limit 5                      |<br />\n|                                                                      |<br />\n| # CBRT：求数字的立方根，返回 double                                  |<br />\n|                                                                      |<br />\n| select page_count v,CBRT(page_count) cbrt from &quot;myindex&quot; limit 5   |<br />\n|                                                                      |<br />\n| # CEIL：返回大于或者等于指定表达式最小整数（double）                |<br />\n|                                                                      |<br />\n| select page_count v,CEIL(page_count) from &quot;myindex&quot; limit 5        |<br />\n|                                                                      |<br />\n| # CEILING：等同于 CEIL select page_count v,CEILING (page_count) from  |<br />\n| &quot;myindex&quot; limit 5                                                  |<br />\n|                                                                      |<br />\n| # E：返回自然常数 e (2.718281828459045) select                        |<br />\n| page_count,E(page_count) from &quot;myindex&quot; limit 5                    |<br />\n|                                                                      |<br />\n| # ROUND：四舍五入精确到个位                                         |<br />\n|                                                                      |<br />\n| select ROUND(-3.14)                                                  |<br />\n|                                                                      |<br />\n| # FLOOR：向下取整                                                   |<br />\n|                                                                      |<br />\n| select FLOOR(3.14)                                                   |<br />\n+----------------------------------------------------------------------+</p>\n<p># LOG：计算以 2 为底的自然对数</p>\n<p>select LOG(4)</p>\n<p># LOG10：计算以 10 为底的自然对数</p>\n<p>select LOG10(100)</p>\n<p># SQRT：求一个非负实数的平方根</p>\n<p>select SQRT(9)</p>\n<p># EXP：此函数返回 e (自然对数的底) 的 X 次方的值 select EXP (3)</p>\n<h5 id=\"4369-三角函数\"><a class=\"anchor\" href=\"#4369-三角函数\">#</a> 4.3.6.9 <sup>三角函数</sup></h5>\n<p># DEGREES：返回 X 从弧度转换为度值</p>\n<p>select DEGREES(x)</p>\n<p># RADIANS：返回 X 从度转换成弧度的值</p>\n<p>select RADIANS(x)</p>\n<p># SIN：返回 X 的正弦</p>\n<p>select SIN(x)</p>\n<p># COS：返回 X，X 值是以弧度给出的余弦值</p>\n<p>select COS (角度)</p>\n<p># TAN：返回参数 X，表示以弧度的切线值</p>\n<p>select TAN (角度)</p>\n<p># ASIN：返回 X 的反正弦，X 的值必须在 - 1 至 1 范围内，返回 NULL</p>\n<p>select ASIN(x)</p>\n<p># ACOS：返回 X 的反正弦，X 值必须 - 1 到 1 之间范围否则将返回 NULL</p>\n<p>select ACOS(x)</p>\n<p># ATAN：返回 X 的反正切</p>\n<p>select ATAN(x)</p>\n<p># SINH：返回 X 的双曲正弦值</p>\n<p>select SINH(x)</p>\n<p># COSH：返回 X 的双曲余弦值 select COSH (x)</p>\n<h5 id=\"43610-日期时间函数\"><a class=\"anchor\" href=\"#43610-日期时间函数\">#</a> 4.3.6.10 <sup>日期时间函数</sup></h5>\n<p>+----------------------------------------------------------------------+<br />\n| # YEAR：                                                            |<br />\n|                                                                      |<br />\n| SELECT YEAR(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS year     |<br />\n|                                                                      |<br />\n| # MONTH_OF_YEAR() or MONTH()：                                      |<br />\n|                                                                      |<br />\n| SELECT MONTH(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS month   |<br />\n|                                                                      |<br />\n| # WEEK_OF_YEAR() or WEEK()：                                        |<br />\n|                                                                      |<br />\n| SELECT WEEK(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS week     |<br />\n|                                                                      |<br />\n| # DAY_OF_YEAR () or DOY () ， 效 果 等 同 于                          |<br />\n| EXTRACT(&lt;datetime_function&gt; FROM                                   |<br />\n|                                                                      |<br />\n| &lt;expression&gt;)：                                                    |<br />\n|                                                                      |<br />\n| SELECT DOY(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS day       |<br />\n|                                                                      |<br />\n| # DAY_OF_MONTH(), DOM(), or DAY()：                                 |<br />\n|                                                                      |<br />\n| SELECT DAY(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS day       |<br />\n+======================================================================+<br />\n| # DAY_OF_WEEK() or DOW()：                                          |<br />\n|                                                                      |<br />\n| SELECT DOW(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS day       |<br />\n|                                                                      |<br />\n| # HOUR_OF_DAY() or HOUR()：                                         |<br />\n|                                                                      |<br />\n| SELECT HOUR(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS hour     |<br />\n|                                                                      |<br />\n| # MINUTE_OF_DAY()：                                                 |<br />\n|                                                                      |<br />\n| SELECT MINUTE_OF_DAY(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS |<br />\n| minute                                                               |<br />\n|                                                                      |<br />\n| # MINUTE_OF_HOUR() or MINUTE()：                                    |<br />\n|                                                                      |<br />\n| SELECT MINUTE(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS minute |<br />\n|                                                                      |<br />\n| # SECOND_OF_MINUTE() or SECOND()：                                  |<br />\n|                                                                      |<br />\n| SELECT SECOND(CAST('2022-05-01T00:00:00Z' AS TIMESTAMP)) AS second |<br />\n+----------------------------------------------------------------------+</p>\n<h5 id=\"43611-全文检索函数\"><a class=\"anchor\" href=\"#43611-全文检索函数\">#</a> 4.3.6.11 全文检索函数</h5>\n<p>+----------------------------------------------------------------------+<br />\n| # MATCH：MATCH (匹配字段，规则，配置参数 (可选))                      |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; where <strong>MATCH</strong>(name, 'JAVA')      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; where <strong>MATCH</strong>(name, 'java')      |<br />\n|                                                                      |<br />\n| # MATCH：MATCH ((' 匹配字段 ^ 权重 1, 匹配字段 ^ 权重 2'，规则，|<br />\n| 配置参数 (可选))                                                      |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; where                                |<br />\n| <strong>MATCH</strong>('author^2,name^5', 'java')                           |<br />\n|                                                                      |<br />\n| # QUERY                                                             |<br />\n|                                                                      |<br />\n| SELECT * FROM &quot;my-sql-index&quot; where <strong>QUERY</strong>('name:Java')       |<br />\n|                                                                      |<br />\n| # SCORE : 评分                                                      |<br />\n|                                                                      |<br />\n| SELECT *, <strong>score</strong>() FROM &quot;my-sql-index&quot; where                   |<br />\n| QUERY('name:Java')                                                 |<br />\n+----------------------------------------------------------------------+</p>\n<h5 id=\"43612-字符串检索函数\"><a class=\"anchor\" href=\"#43612-字符串检索函数\">#</a> 4.3.6.12 字符串检索函数</h5>\n<p># ASCII : 字符串转成 ASC 码</p>\n<p>SELECT <strong>ASCII</strong>('Elastic')</p>\n<p># BIT_LENGTH ： 位长度</p>\n<p>SELECT <strong>BIT_LENGTH</strong>('Elastic')</p>\n<p>SELECT <strong>BIT_LENGTH</strong> (' 中国 ')</p>\n<p># CHAR ：转换字符</p>\n<p>SELECT <strong>CHAR</strong>(69)</p>\n<p># CHAR_LENGTH ：字符长度</p>\n<p>SELECT <strong>CHAR_LENGTH</strong>('Elastic')</p>\n<p># CONCAT: 合并</p>\n<p>SELECT <strong>CONCAT</strong>('Elastic', 'search')</p>\n<p># INSERT : INSERT (字符串，起始位置，长度，插入的内容)</p>\n<p>SELECT <strong>INSERT</strong>('Elastic', 8, 1, 'search')</p>\n<p>SELECT <strong>INSERT</strong>('Elastic', 7, 1, 'search')</p>\n<p># LCASE ：转换小写</p>\n<p>SELECT <strong>LCASE</strong>('Elastic')</p>\n<p># LEFT : 获取左边最多 N 个字符</p>\n<p>SELECT <strong>LEFT</strong>('Elastic',3)</p>\n<p># LENGTH</p>\n<p>SELECT <strong>length</strong>('Elastic')</p>\n<p>SELECT <strong>length</strong> (' 中国 ')</p>\n<p># LOCATE : LOCATE (表达式，字符串，起始位置)，获取满足条件的位置 SELECT<br />\n<strong>LOCATE</strong>('a', 'Elasticsearch')</p>\n<p>SELECT <strong>LOCATE</strong>('a', 'Elasticsearch', 5)</p>\n<p># LTRIM ：去除左边的空格</p>\n<p>SELECT <strong>LTRIM</strong>(' Elastic')</p>\n<p># OCTET_LENGTH : 字节长度</p>\n<p>SELECT <strong>OCTET_LENGTH</strong>('Elastic')</p>\n<p>SELECT <strong>OCTET_LENGTH</strong> (' 中国 ')</p>\n<p># POSITION ：获取指定字符串的位置</p>\n<p>SELECT <strong>POSITION</strong>('Elastic', 'Elasticsearch')</p>\n<p># REPEAT ：将字符串重复指定次数</p>\n<p>SELECT <strong>REPEAT</strong>('Elastic', 3)</p>\n<p># REPLACE ：替换数据</p>\n<p>SELECT <strong>REPLACE</strong>('Elastic','El','Fant')</p>\n<p># RIGHT ：从右边获取指定数量的数据</p>\n<p>SELECT <strong>RIGHT</strong>('Elastic',3)</p>\n<p># RTRIM ：去除右边的空格</p>\n<p>SELECT <strong>RTRIM</strong>('Elastic ')</p>\n<p># SPACE : 生成指定数量的空格</p>\n<p>SELECT concat(<strong>SPACE</strong>(3),'abc')</p>\n<p># STARTS_WITH : 判断是否以指定字符串开头</p>\n<p>SELECT <strong>STARTS_WITH</strong>('Elasticsearch', 'Elastic')</p>\n<p># SUBSTRING ： 截取字符串，必须传递三个参数</p>\n<p>SELECT <strong>SUBSTRING</strong>('Elasticsearch', 0, 7)</p>\n<p># TRIM ：去掉首尾空格</p>\n<p>SELECT <strong>TRIM</strong>(' Elastic ') AS trimmed</p>\n<p># UCASE : 转换大写 SELECT <strong>UCASE</strong>('Elastic')</p>\n<h5 id=\"43613-条件分支函数\"><a class=\"anchor\" href=\"#43613-条件分支函数\">#</a> 4.3.6.13 条件分支函数</h5>\n<p>+----------------------------------------------------------------------+<br />\n| # 多重分支判断                                                      |<br />\n|                                                                      |<br />\n| SELECT CASE 5                                                        |<br />\n|                                                                      |<br />\n| WHEN 1 THEN 'elastic'                                              |<br />\n|                                                                      |<br />\n| WHEN 2 THEN 'search'                                               |<br />\n|                                                                      |<br />\n| WHEN 3 THEN 'elasticsearch'                                        |<br />\n|                                                                      |<br />\n| ELSE 'default'                                                     |<br />\n|                                                                      |<br />\n| END AS &quot;case&quot;                                                      |<br />\n|                                                                      |<br />\n| SELECT CASE WHEN 1 &gt; 2 THEN 'elastic'                             |<br />\n|                                                                      |<br />\n| WHEN 2 &gt; 10 THEN 'search'                                         |<br />\n|                                                                      |<br />\n| ELSE 'default'                                                     |<br />\n|                                                                      |<br />\n| END AS &quot;case&quot;                                                      |<br />\n|                                                                      |<br />\n| # IFNULL                                                            |<br />\n|                                                                      |<br />\n| SELECT IFNULL('elastic', null) AS &quot;ifnull&quot; SELECT IFNULL(null,   |<br />\n| 'search') AS &quot;ifnull&quot;                                            |<br />\n|                                                                      |<br />\n| # IIF                                                               |<br />\n|                                                                      |<br />\n| SELECT IIF(1 &lt; 2, 'TRUE', 'FALSE') AS result1, IIF(1 &gt; 2,      |<br />\n| 'TRUE', 'FALSE') AS result2                                      |<br />\n+======================================================================+<br />\n| # ISNULL                                                            |<br />\n|                                                                      |<br />\n| SELECT ISNULL('elastic', null) AS &quot;isnull&quot; SELECT ISNULL(null,   |<br />\n| 'search') AS &quot;isnull&quot;                                            |<br />\n|                                                                      |<br />\n| # LEAST: 获取除 null 外的最小值                                        |<br />\n|                                                                      |<br />\n| SELECT LEAST(null, 2, 11) AS &quot;least&quot;                               |<br />\n|                                                                      |<br />\n| SELECT LEAST(null, null, null, null) AS &quot;least&quot;                    |<br />\n|                                                                      |<br />\n| # NULLIF :                                                          |<br />\n| 如果两个字符串不相同，则返回第一个字符串，如果相同，返回 null         |<br />\n|                                                                      |<br />\n| SELECT NULLIF('elastic', 'search') AS &quot;nullif&quot;                 |<br />\n|                                                                      |<br />\n| SELECT NULLIF('elastic', 'elastic') AS &quot;nullif&quot;                |<br />\n|                                                                      |<br />\n| # NVL : 返回第一个不是 null 的字符串，如果都是 null, 那么返回 Null       |<br />\n|                                                                      |<br />\n| SELECT NVL('elastic', null) AS &quot;nvl&quot;                             |<br />\n|                                                                      |<br />\n| SELECT NVL(null, null) AS &quot;nvl&quot;                                    |<br />\n+----------------------------------------------------------------------+</p>\n<h5 id=\"43614-系统函数\"><a class=\"anchor\" href=\"#43614-系统函数\">#</a> 4.3.6.14 系统函数</h5>\n<p># ES 集群</p>\n<p>SELECT DATABASE()</p>\n<p># 用户</p>\n<p>SELECT USER()</p>\n<h3 id=\"437-sql-客户端-datagrip\"><a class=\"anchor\" href=\"#437-sql-客户端-datagrip\">#</a> 4.3.7 SQL 客户端 - DataGrip</h3>\n<p>DataGrip 是 JetBrains 发布的多引擎数据库环境，这里采用 DataGrip 工具连接<br />\n Elasticsearch</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image202.jpg\" class=\"\">{width=\"4.3125in\" height=\"2.6958333333333333in\"}\n<h4 id=\"4371-新建驱动\"><a class=\"anchor\" href=\"#4371-新建驱动\">#</a> 4.3.7.1 新建驱动</h4>\n<img data-src=\"/Distribution/Elasticsearch-8/image203.jpg\" class=\"\">{width=\"1.4944444444444445in\"\n<p>height=&quot;1.8722222222222222in&quot;}</p>\n<h4 id=\"4372-配置驱动\"><a class=\"anchor\" href=\"#4372-配置驱动\">#</a> 4.3.7.2 配置驱动</h4>\n<p>可以先通过 maven 增加依赖，下载驱动程序</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.elasticsearch.plugin&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;x-pack-sql-jdbc&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;8.1.0&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>配置驱动时，选择对应的 ES 软件版本即可</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image204.jpg\" class=\"\">{width=\"3.7402777777777776in\"\n<p>height=&quot;2.6118055555555557in&quot;}</p>\n<h4 id=\"4373-配置参数\"><a class=\"anchor\" href=\"#4373-配置参数\">#</a> 4.3.7.3 配置参数</h4>\n<p># 用户名和账号采用 ES 自带的 elastic 即可</p>\n<p># URL 地址</p>\n<p>jdbc🇪🇸//https://linux1:9200</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image205.jpg\" class=\"\">{width=\"4.446527777777778in\"\n<p>height=&quot;3.1055555555555556in&quot;}</p>\n<p><strong>4.3.7.4</strong> 配置 <strong>SSL</strong> 连接选择 Elasticseach 生成的证书即可</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image206.jpg\" class=\"\">{width=\"3.9347222222222222in\"\n<p>height=&quot;2.747916666666667in&quot;}</p>\n<h4 id=\"4375-更改-license-类型\"><a class=\"anchor\" href=\"#4375-更改-license-类型\">#</a> 4.3.7.5 更改 license 类型</h4>\n<p>默认情况下，JDBC 客户端必须为白金级别才可以使用</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image207.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.961958661417323in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image209.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.5062642169728784in&quot;}</p>\n</blockquote>\n<p>为了能够使用相关功能，这里可以将当前的 ES 软件的 License<br />\n 暂时设置为试用版。测试完</p>\n<p>成后，改回 basic 版即可</p>\n<p># 更改 License 类型 - trial</p>\n<p>POST _license/start_trial?acknowledge=true</p>\n<p># 更改 License 类型 - basic</p>\n<p>POST _license/start_basic?acknowledge=true</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image211.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.0904297900262467in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image213.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.8312871828521433in&quot;}</p>\n<p>随着 8.0 的发布，Elastic 很高兴能够将 PyTorch 机器学习模型上传到<br />\n Elasticsearch 中，</p>\n<p>以在 Elastic Stack 中提供现代自然语言处理 (NLP)。现在，Elasticsearch<br />\n 用户能够集成用于构建 NLP 模型的最流行的格式之一，并将这些模型作为 NLP<br />\n 数据管道的一部分通过我们的</p>\n<p>Inference processor 整合到 Elasticsearch 中</p>\n<h4 id=\"441-什么是自然语言处理\"><a class=\"anchor\" href=\"#441-什么是自然语言处理\">#</a> 4.4.1 什么是自然语言处理？</h4>\n<p>NLP 是指我们可以使用软件来操作和理解口语或书面文本或自然语言的方式。<br />\n2018 年，Google 开源了一种用于 NLP 预训练的新技术，称为来自 Transformers<br />\n 的双向编码器呈现，或 BERT。 BERT<br />\n 通过在没有任何人工参与的情况下对互联网大小的数据集（例如，想想所有的维基百科和数字书籍）进行训练来利用<br />\n &quot;transfer learning&quot;。</p>\n<p>Transfer learning 允许对 BERT<br />\n 模型进行预训练以进行通用语言理解。一旦模型只经过一次预训练，它就可以被重用并针对更具体的任务进行微调，以了解语言的使用方式。</p>\n<p>为了支持类 BERT 模型（使用与 BERT 相同的标记器的模型），Elasticsearch<br />\n 将首先通过 PyTorch 模型支持支持大多数最常见的 NLP 任务。 PyTorch<br />\n 是最受欢迎的现代机器学习库之一，拥有大量活跃用户，它是一个支持深度神经网络的库，例如<br />\n BERT 使用的</p>\n<p>Transformer 架构。</p>\n<blockquote>\n<p>以下是一些示例 NLP 任务：</p>\n</blockquote>\n<ul>\n<li>\n<p>情绪分析：用于识别正面与负面陈述的二元分类</p>\n</li>\n<li>\n<p>命名实体识别<br />\n (NER)：从非结构化文本构建结构，尝试提取名称、位置或组织等细节</p>\n</li>\n<li>\n<p>文本分类：零样本分类允许你根据你选择的类对文本进行分类，而无需进行预训练。</p>\n</li>\n<li>\n<p>文本嵌入：用于 k 近邻 (kNN) 搜索</p>\n</li>\n</ul>\n<h3 id=\"442-elasticsearch-中的自然语言处理\"><a class=\"anchor\" href=\"#442-elasticsearch-中的自然语言处理\">#</a> 4.4.2 Elasticsearch 中的自然语言处理</h3>\n<p>在将 NLP 模型集成到 Elastic<br />\n 平台时，我们希望为上传和管理模型提供出色的用户体验。使用用于上传 PyTorch<br />\n 模型的 Eland 客户端和用于管理 Elasticsearch 集群上模型的 Kibana 的 ML<br />\n 模型管理用户界面，用户可以尝试不同的模型并很好地了解它们在数据上的表现。我们还希望使其可跨集群中的多个可用节点进行扩展，并提供良好的推理吞吐量性能。</p>\n<p>为了使这一切成为可能，我们需要一个机器学习库来执行推理。在 Elasticsearch<br />\n 中添加对 PyTorch 的支持需要使用原生库 libtorch，它支持<br />\n PyTorch，并且仅支持已导出或保存为 TorchScript 表示的 PyTorch 模型。这是<br />\n libtorch 需要的模型的表示，它将允许</p>\n<p>Elasticsearch 避免运行 Python 解释器。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image217.jpg\" class=\"\">{width=\"5.759722222222222in\" height=\"2.75in\"}\n<p>通过与在 PyTorch 模型中构建 NLP<br />\n 模型的最流行的格式之一集成，Elasticsearch<br />\n 可以提供一个平台，该平台可处理大量 NLP<br />\n 任务和用例。许多优秀的库可用于训练 NLP<br />\n 模型，因此我们暂时将其留给其他工具。无论你是使用 PyTorch NLP、Hugging<br />\nFace Transformers 还是 Facebook 的 fairseq<br />\n 等库来训练模型，你都可以将模型导入 Elasticsearch 并对这些模型进行推理。<br />\nElasticsearch<br />\n 推理最初将仅在摄取时进行，未来还可以扩展以在查询时引入推理。</p>\n<h3 id=\"443-nlp-在-elasticsearch-7x-和-8x-中的区别\"><a class=\"anchor\" href=\"#443-nlp-在-elasticsearch-7x-和-8x-中的区别\">#</a> 4.4.3 NLP 在 Elasticsearch 7.x 和 8.x 中的区别</h3>\n<p>Elasticsearch 一直是进行 NLP 的好地方，但从历史上看，它需要在<br />\n Elasticsearch 之外进行一些处理，或者编写一些非常复杂的插件。 借助<br />\n 8.0，用户现在可以在 Elasticsearch<br />\n 中更直接地执行命名实体识别、情感分析、文本分类等操作 ------ 无需额外的组件或编码。<br />\n不仅在 Elasticsearch<br />\n 中本地计算和创建向量在水平可扩展性方面是 &quot;胜利&quot;（通过在服务器集群中分布计算）------ 这一变化还为<br />\n Elasticsearch 用户节省了大量时间和精力。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image218.jpg\" class=\"\">{width=\"5.760416666666667in\"\n<p>height=&quot;3.370138888888889in&quot;} 借助 Elastic 8.0，用户可以直接在<br />\n Elasticsearch 中使用 PyTorch 机器学习模型（例如 BERT），并在<br />\n Elasticsearch 中使用这些模型进行推理。通过使用户能够直接在 Elasticsearch<br />\n 中执行推理，将现代 NLP<br />\n 的强大功能集成到搜索应用程序和体验、本质上更高效（得益于 Elasticsearch<br />\n 的分布式计算能力）和 NLP 本身比以往任何时候都更容易<br />\n变得更快，因为你不需要将数据移出到单独的进程或系统中。</p>\n<h3 id=\"444-nlp-演示\"><a class=\"anchor\" href=\"#444-nlp-演示\">#</a> 4.4.4 NLP 演示</h3>\n<p>这里我们使用<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NwaW5zY2FsZS9lbGFzdGljc2VhcmNoLWluZ2VzdC1vcGVubmxwL3JlbGVhc2VzL3RhZy84LjEuMS4x\"> https://github.com/spinscale/elasticsearch-ingest-opennlp/releases/tag/8.1.1.1</span><br />\n 来进行演示。我们必须安装和自己的 <strong>Elasticsearch</strong> 一致的版本。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image222.jpg\" class=\"\">{width=\"5.814444444444445in\"\n<p>height=&quot;2.89251312335958in&quot;}</p>\n</blockquote>\n<p>目前这个 NLP 支持检测 Date， Person， Location, POS (part of speech)<br />\n 及其它。</p>\n<h4 id=\"4441-安装-opennlp\"><a class=\"anchor\" href=\"#4441-安装-opennlp\">#</a> 4.4.4.1 安装 opennlp</h4>\n<p>将下载下来的插件上传到所有 <strong>ES</strong> 服务器节点的 plugins 路径中。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image224.jpg\" class=\"\">{width=\"5.771527777777778in\"\n<p>height=&quot;0.6152777777777778in&quot;}</p>\n<p><strong>4.4.4.2</strong> 下载 <strong>NER</strong> 模型我们需要从 sourceforge 下载最新的 NER 模型</p>\n<p>bin/ingest-opennlp/download-models</p>\n<p>执行时，可能会提示脚本路径不对等问题。直接修改脚本文件改正即可</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image225.jpg\" class=\"\">{width=\"5.772222222222222in\"\n<p>height=&quot;0.7305555555555555in&quot;}</p>\n<p>执行后，会出现如下内容</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image226.jpg\" class=\"\">{width=\"5.837723097112861in\"\n<p>height=&quot;1.5155686789151357in&quot;}</p>\n<p>修改配置文件：config/elasticsearch.yml</p>\n<p>ingest.opennlp.model.file.persons: en-ner-persons.bin<br />\ningest.opennlp.model.file.dates: en-ner-dates.bin<br />\ningest.opennlp.model.file.locations: en-ner-locations.bin</p>\n<p>重新启动 <strong>Elasticsearch</strong></p>\n<h4 id=\"4444-运用-opennlp-创建一个支持-nlp-的-pipeline\"><a class=\"anchor\" href=\"#4444-运用-opennlp-创建一个支持-nlp-的-pipeline\">#</a> 4.4.4.4 运用 opennlp 创建一个支持 NLP 的 pipeline</h4>\n<p>PUT _ingest/pipeline/opennlp-pipeline</p>\n<p>{</p>\n<p>&quot;description&quot;: &quot;A pipeline to do named entity extraction&quot;,</p>\n<p>&quot;processors&quot;: [</p>\n<p>{</p>\n<p>&quot;opennlp&quot; : {</p>\n<p>&quot;field&quot; : &quot;message&quot;</p>\n<p>}</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>增加数据</p>\n<p>PUT my-nlp-index</p>\n<p>PUT my-nlp-index/_doc/1?pipeline=opennlp-pipeline</p>\n<p>{</p>\n<p>&quot;message&quot;: &quot;Shay Banon announced the release of Elasticsearch 6.0 in<br />\nNovember</p>\n<p>2017&quot;</p>\n<p>}</p>\n<p>PUT my-nlp-index/_doc/2?pipeline=opennlp-pipeline</p>\n<p>{</p>\n<p>&quot;message&quot; : &quot;Kobe Bryant was one of the best basketball players of<br />\nall times. Not even Michael Jordan has ever scored 81 points in one<br />\ngame. Munich is really an awesome city, but New York is as well.<br />\nYesterday has been the hottest day of the year.&quot;</p>\n<p>}</p>\n<p>查看数据</p>\n<p>GET my-nlp-index/_doc/1</p>\n<p>GET my-nlp-index/_doc/2</p>\n<p>从结果我们可以看出来，它正确地识别了 dates，persons 及 locations。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch-8/image228.jpg\" class=\"\">{width=\"5.763888888888889in\"\n<p>height=&quot;1.6979166666666667in&quot;}</p>\n</blockquote>\n<h1 id=\"第5章-elasticsearch-优化\"><a class=\"anchor\" href=\"#第5章-elasticsearch-优化\">#</a> 第 5 章 Elasticsearch 优化</h1>\n<h2 id=\"51-性能优化之缓存\"><a class=\"anchor\" href=\"#51-性能优化之缓存\">#</a> <strong>5.1</strong> 性能优化之缓存</h2>\n<p>Elasticsearch<br />\n 应用时会使用各种缓存，而缓存是加快数据检索速度的王道。接下来，我</p>\n<p>们将着重介绍以下三种缓存：</p>\n<ul>\n<li>\n<p>页缓存</p>\n</li>\n<li>\n<p>分片级请求缓存</p>\n</li>\n<li>\n<p>查询缓存</p>\n</li>\n</ul>\n<h3 id=\"511-页缓存\"><a class=\"anchor\" href=\"#511-页缓存\">#</a> 5.1.1 <sup>页缓存</sup></h3>\n<p>为了数据的安全、可靠，常规操作中，数据都是保存在磁盘文件中的。所以对数据的访问，绝大数情况下其实就是对文件的访问，为了提升对文件的读写的访问效率，Linux<br />\n 内核会以页大小（4KB）为单位，将文件划分为多个数据块。当用户对文件中的某个数据块进行读写操作时，内核首先会申请一个内存页（称为<br />\n PageCache 页缓存）与文件中的数据块进行绑定。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image229.jpg\" class=\"\">{width=\"3.607638888888889in\"\n<p>height=&quot;2.3097222222222222in&quot;}</p>\n<p>页缓存的基本理念是从磁盘读取数据后将数据放入可用内存中，以便下次读取时从内存返回数据，而且获取数据不需要进行磁盘查找。所有这些对应用程序来说是完全透明的，应用程序发出相同的系统调用，但操作系统可以使用页缓存而不是从磁盘读取。</p>\n<p>Java<br />\n 程序是跨平台的，所以没有和硬件（磁盘，内存）直接交互的能力，如果想要和磁盘文件交互，那么必须要通过<br />\n OS<br />\n 操作系统来完成文件的读写，我们一般就称之为用户态转换为内核态。而操作系统对文件进行读写时，实际上就是对文件的页缓存进行读写。所以对文件进行读写操作时，会分以下两种情况进行处理：</p>\n<ul>\n<li>当从文件中读取数据时，如果要读取的数据所在的页缓存已经存在，那么就直接把页缓存的数据拷贝给用户即可。否则，内核首先会申请一个空闲的内存页（页缓存），然后</li>\n</ul>\n<blockquote>\n<p>从文件中读取数据到页缓存，并且把页缓存的数据拷贝给用户。</p>\n</blockquote>\n<ul>\n<li>当向文件中写入数据时，如果要写入的数据所在的页缓存已经存在，那么直接把新数据写入到页缓存即可。否则，内核首先会申请一个空闲的内存页（页缓存），并且把新数据写入到页缓存中。对于被修改的页缓存，内核会定时把这些页缓存刷新到文件中。</li>\n</ul>\n<p>页缓存对 Elasticsearch<br />\n 来说意味着什么？与访问磁盘上的数据相比，通过页缓存可以更快地访问数据。这就是为什么建议的<br />\n Elasticsearch<br />\n 内存通常不超过总可用内存的一半，这样另一半就可用于页缓存了。这也意味着不会浪费任何内存</p>\n<blockquote>\n<p>如果数据本身发生更改，页缓存会将数据标记为脏数据，并将这些数据从页缓存中释放。</p>\n</blockquote>\n<p>由于 Elasticsearch 和 Lucene<br />\n 使用的段只写入一次，因此这种机制非常适合数据的存储方式。段在初始写入之后是只读的，因此数据的更改可能是合并或添加新数据。在这种情况下，需要进行新的磁盘访问。另一种可能是内存被填满了。在这种情况下，缓存数据过期的操作为<br />\n LRU。</p>\n<h4 id=\"512-分片级请求缓存\"><a class=\"anchor\" href=\"#512-分片级请求缓存\">#</a> 5.1.2 分片级请求缓存</h4>\n<p>对一个或多个索引发送搜索请求时，搜索请求首先会发送到 ES<br />\n 集群中的某个节点，称之为协调节点；协调节点会把该搜索请求分发给其他节点并在相应分片上执行搜索操作，我们把分片上的执行结果称为 &quot;本地结果集&quot;，之后，分片再将执行结果返回给协调节点；协调节点获得所有分片的本地结果集之后，合并成最终的结果并返回给客户端。Elasticsearch<br />\n 会在每个分片上缓存了本地结果集，这使得频繁使用的搜索请求几乎立即返回结果。这里的缓存，称之为<br />\n Request Cache, 全称是 Shard Request Cache，即分片级请求缓存。</p>\n<p>ES 能够保证在使用与不使用 Request Cache 情况下的搜索结果一致，那 ES<br />\n 是如何保证的呢？这就要通过 Request Cache 的失效机制来了解啦。Request<br />\nCache 缓存失效是自动的，当索引 refresh<br />\n 时就会失效，也就是说在默认情况下， Request Cache 是每 1<br />\n 秒钟失效一次，但需要注意的是，只有在分片的数据实际上发生了变化时，刷新分片缓存才会失效。也就是说当一个文档被索引<br />\n到 该文档变成 Searchable<br />\n 的这段时间内，不管是否有请求命中缓存该文档都不会被返回。</p>\n<blockquote>\n<p>所以我们可以通过 index.refresh_interval 参数来设置 refresh<br />\n 的刷新时间间隔，刷新间</p>\n</blockquote>\n<p>隔越长，缓存的数据越多，当缓存不够的时候，将使用 LRU<br />\n 最近最少使用策略删除数据。</p>\n<blockquote>\n<p>当然，我们也可以手动设置参数 indices.request.cache.expire<br />\n 指定失效时间（单位为分</p>\n</blockquote>\n<p>钟），但是基本上我们没必要去这样做，因为缓存在每次索引 refresh<br />\n 时都会自动失效。</p>\n<p>⚫ Request Cache 的使用</p>\n<blockquote>\n<p>默认情况下，Request Cache 是关闭的，我们可以在创建新的索引时启用</p>\n<p>curl -XPUT 服务器 IP: 端口 / 索引名 -d</p>\n<p>'{</p>\n<p>&quot;settings&quot;: {</p>\n<p>&quot;index.requests.cache.enable&quot;: true</p>\n<p>}</p>\n<p>}'</p>\n<p>也可以通过动态参数配置来进行设置：</p>\n<p>curl -XPUT 服务器 IP: 端口 / 索引名 /_settings -d</p>\n<p>'{</p>\n<p>&quot;index.requests.cache.enable&quot;: true</p>\n<p>}'</p>\n<p>开启缓存后，需要在搜索请求中加上 request_cache=true<br />\n 参数，才能使查询请求被缓存，</p>\n</blockquote>\n<p>比如：</p>\n<p>+----------------------------------------------------------------------+<br />\n| curl -XGET                                                           |<br />\n| ' 服务器 IP: 端口 / 索引名 /_search?request_cache=true&amp;pretty' -H       |<br />\n+======================================================================+<br />\n| 'Content-Type: application/json' -d                                |<br />\n|                                                                      |<br />\n| '{                                                                  |<br />\n|                                                                      |<br />\n| &quot;size&quot;: 0,                                                         |<br />\n|                                                                      |<br />\n| &quot;aggs&quot;: {                                                          |<br />\n|                                                                      |<br />\n| &quot;popular_colors&quot;: {                                                |<br />\n|                                                                      |<br />\n| &quot;terms&quot;: {                                                         |<br />\n|                                                                      |<br />\n| &quot;field&quot;: &quot;colors&quot;                                                |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }'                                                                  |<br />\n+----------------------------------------------------------------------+</p>\n<blockquote>\n<p>两个注意事项：第一：参数 size：0<br />\n 必须强制指定才能被缓存，否则请求是不会缓存的，即使手动的</p>\n</blockquote>\n<p>设置 request_cache=true</p>\n<blockquote>\n<p>第二：在使用 script<br />\n 脚本执行查询时，由于脚本的执行结果是不确定的（比如使用</p>\n</blockquote>\n<p>random 函数或使用了当前时间作为参数），一定要指定 request_cache=false<br />\n 禁用 Request</p>\n<p>Cache 缓存。</p>\n<p>⚫ Request Cache 的设置</p>\n<p>Request Cache 作用域为 Node，在 Node 中的 Shard 共享这个 Cache<br />\n 空间。默认最大 大小为 JVM 堆内存的 1％。可以使用以下命令在<br />\n config/elasticsearch.yml 文件中进行</p>\n<p>更改：</p>\n<blockquote>\n<p>indices.requests.cache.size: 1%</p>\n</blockquote>\n<p>Request Cache 是以查询的整个 DSL 语句做为 key<br />\n 的，所以如果要命中缓存，那么查询 生成的 DSL<br />\n 一定要一样，即使修改了一个字符或者条件顺序，都不能利用缓存，需要<br />\n重新生成 Cache。</p>\n<h3 id=\"513-查询缓存\"><a class=\"anchor\" href=\"#513-查询缓存\">#</a> 5.1.3 查询缓存</h3>\n<p>这种缓存的工作方式也与其他缓存有着很大的不同。页缓存方式缓存的数据与实际从查询中读取的数据量无关。当使用类似查询时，分片级请求缓存会缓存数据。查询缓存更精细些，可以缓存在不同查询之间重复使用的数据。</p>\n<p>Elasticsearch 具有 IndicesQueryCache 类。这个类与 IndicesService<br />\n 的生命周期绑定在一起，这意味着它不是按索引，而是按节点的特性 ---<br />\n 这样做是有道理的，因为缓存本身使用了 Java<br />\n 堆。这个索引查询缓存占用以下两个配置选项</p>\n<p>indices.queries.cache.count：缓存条目总数，默认为 10,000</p>\n<p>indices.queries.cache.size：用于此缓存的 Java 堆的百分比，默认为 10%</p>\n<blockquote>\n<p>查询缓存已进入下一个粒度级别，可以跨查询重用！凭借其内置的启发式算法，它只缓</p>\n</blockquote>\n<p>存多次使用的筛选器，还根据筛选器决定是否值得缓存，或者现有的查询方法是否足够快，以避免浪费任何堆内存。这些位集的生命周期与段的生命周期绑定在一起，以防止返回过时的数据。一旦使用了新段，就需要创建新的位集。</p>\n<img data-src=\"/Distribution/Elasticsearch-8/image230.jpg\" class=\"\">{width=\"0.3736111111111111in\"\n<p>height=&quot;0.38472222222222224in&quot;} 缓存是加快检索速度的唯一方法吗？</p>\n<ul>\n<li>io_uring。这是一种在 Linux 下使用自 Linux 5.1<br />\n 以来发布的完成队列进行异步 I/O 的</li>\n</ul>\n<blockquote>\n<p>新方法。请注意，io_uring 仍处于大力开发阶段。但是，Java<br />\n 中有一些首次使用 io_uring 的尝试，例如<br />\n netty。简单应用程序的性能测试结果十分惊人。我想我们还得等一段时间才能看到实际的性能数据，尽管我预计这些数据也会有重大变化。我们希望<br />\n JDK 将来也能提供对这一功能的支持。有一些计划支持 io_uring 作为 Project<br />\nLoom 的一部分，这可能会将 io_uring 引入 JVM。更多的优化，比如能够通过<br />\n madvise () 提示 Linux 内核的访问模式，还尚未内置于 JVM<br />\n 中。这个提示可防止预读问题，即内核尝试读取的数据会比预期下次读取的数据要多，这在需要随机访问时是无用的。</p>\n</blockquote>\n<ul>\n<li>\n<p>Lucene<br />\n 开发人员一如既往地忙于从任何系统中获得最大的收益。目前已经有使用<br />\n Foreign Memory API 重写 Lucene MMapDirectory 的初稿，这可能会成为<br />\n Java 16<br />\n 中的一个预览功能。然而，这样做并不是出于性能原因，而是为了克服当前<br />\n MMap 实现的某些限制</p>\n</li>\n<li>\n<p>Lucene 最近的另一个变化是通过在 FileChannel 类中使用直接 i/o<br />\n (O_DIRECT) 来摆脱原生扩展。这意味着写入数据将不会让页缓存出现 &quot;抖动&quot; 现象，这将是<br />\n Lucene 9 的功能</p>\n</li>\n</ul>\n<h2 id=\"52-性能优化之减少内存堆\"><a class=\"anchor\" href=\"#52-性能优化之减少内存堆\">#</a> <strong>5.2</strong> 性能优化之减少内存堆</h2>\n<p>由于 Elasticsearch 用户不断突破在 Elasticsearch<br />\n 节点上存储的数据量的极限，所以他们有时会在耗尽磁盘空间之前就将堆内存用完了。对于这些用户来说，这个问题难免让他们沮丧，因为每个节点拟合尽可能多的数据通常是降低成本的重要手段。</p>\n<p>但为什么 Elasticsearch<br />\n 需要堆内存来存储数据呢？为什么它不能只用磁盘空间呢？这其中有几个原因，但最主要的一个是，Lucene<br />\n 需要在内存中存储一些信息，以便知道在磁盘的什么位置进行查找。例如，Lucene<br />\n 的倒排索引由术语字典和术语索引组成，术语字典将术语按排序顺序归入磁盘上的区块，术语索引用于快速查找术语字典。该术语索引将术语前缀与磁盘上区块（包含具有该前缀的术语）起始位置的偏移量建立映射。术语字典在磁盘上，但是术语索引直到最近还在堆上。</p>\n<p>索引需要多少内存？通常情况下，每 GB 索引需要几 MB<br />\n 内存。这并不算多，但随着用户在节点上安装 TB<br />\n 数越来越大的磁盘，索引很快就需要 10-20 GB 的堆内存来存储这些 TB<br />\n 量级的索引。鉴于 Elastic 的建议，不要超过 30<br />\nGB，不然就没有给聚合等其他堆内存消耗者留下太多空间，而且，如果 JVM<br />\n 没有为集群管理操作留出足够的空间，就会导致稳定性问题。</p>\n<blockquote>\n<p>使用 <strong>7.7</strong> 版本减少 <strong>Elasticsearch</strong> 堆！</p>\n</blockquote>\n<h2 id=\"53-功能优化之冻结层和可搜索快照\"><a class=\"anchor\" href=\"#53-功能优化之冻结层和可搜索快照\">#</a> <strong>5.3</strong> 功能优化之冻结层和可搜索快照</h2>\n<p>Elasticsearch 7.12<br />\n 版中推出了冻结层的技术预览版，让您能够将计算与存储完全分离，并直接在对象存储（如<br />\n AWS S3、Microsoft Azure Storage 和 Google Cloud<br />\nStorage）中搜索数据。作为我们数据层旅程的下一个重要里程碑，冻结层实现以超低成本长期存储大量数据的同时，还能保持数据处于完全活动和可搜索状态，显著扩展了您的数据覆盖范围。</p>\n<p>长期以来，我们一直支持通过多个数据层来进行数据生命周期管理：热层用于提供较高的处理速度，温层则用于降低成本，但性能也较低。两者都利用本地硬件来存储主数据和冗余副本。最近，我们引入了冷层，通过消除在本地存储冗余副本的需要，您可以在相同数量的硬件上最多存储两倍于热层的数据。尽管为了获得最佳性能，主数据仍然存储在本地，但冷层中的索引由存储在对象存储中的可搜索快照提供支持，以实现冗余。<br />\n冻结层更进一步，完全不需要在本地存储任何数据。相反，它会使用可搜索快照来直接搜索存储在对象存储中的数据，而无需先将其解冻。本地缓存存储最近查询的数据，以便在进行重复搜索时提供最佳性能。因此，存储成本显著下降：与热层或温层相比，最多可降低<br />\n 90%；与冷层相比，最多可降低<br />\n 80%。数据的全自动生命周期现已成为完整体：从热到温到冷，然后再到冻结，同时还可确保以尽可能低的存储成本获得所需的访问和搜索性能。</p>\n<p>冻结层利用可搜索快照将计算与存储完全分离。在根据索引生命周期管理 (ILM)<br />\n 策略将数据从温层或冷层迁移到冻结层时，本地节点上的索引将迁移到 S3<br />\n 或您选择的对象存储中。冷层将索引迁移到对象存储，但它仍然在本地节点上保留数据的单个完整副本，以确保提供快速而一致的搜索体验。另一方面，冻结层完全消除了本地副本，而是直接搜索对象存储中的数据。它会为最近查询的数据构建本地缓存，以便加快重复搜索的速度，但缓存大小只是存储在冻结层中的完整数据大小的一小部分。</p>\n<p>对于典型的 10%<br />\n 本地缓存大小，这意味着您只需少数几个本地层节点即可处理数百 TB<br />\n 的冻结层数据。下面简单比较一下：如果 RAM 为 64 GB 的典型温层节点可管理<br />\n 10 TB，冷层节点将能够处理大约两倍于此的 20 TB，而冻结层节点将跃升至 100<br />\nTB。这相当于 1:1500 的 RAM 与存储比率，这还只是一个保守的估计。</p>\n<h2 id=\"54-功能优化之原生矢量搜索\"><a class=\"anchor\" href=\"#54-功能优化之原生矢量搜索\">#</a> <strong>5.4</strong> 功能优化之原生矢量搜索</h2>\n<p>Elasticsearch 8.0<br />\n 版引入了一整套原生矢量搜索功能，让客户和员工能够使用他们自己的文字和语言来搜索并收到高度相关的结果。早在<br />\n Elasticsearch 7.0 版中，我们就针对高维矢量引入了字段类型。在<br />\n Elasticsearch 7.3 和 Elasticsearch 7.4<br />\n 版中，引入了对矢量相似函数的支持。在 Elasticsearch 8.0<br />\n 版中，将对自然语言处理 (NLP) 模型的原生支持直接引入了<br />\n Elasticsearch，让矢量搜索功能更容易实现。此外，Elasticsearch 8.0<br />\n 版还包含了对近似最近邻 (ANN)<br />\n 搜索的原生支持，因此可以快速且大规模地比较基于矢量的查询与基于矢量的文档语料库。</p>\n<p>自然语言处理（Natural Language<br />\nProcessing）是计算科学领域与人工智能领域中的一个重要方向。它研究能实现人与计算机之间用自然语言进行有效通信的各种理论和方法。自然语言处理是一门融语言学、计算机科学、数学于一体的科学。因此，这一领域的研究将涉及自然语言，即人们日常使用的语言，所以它与语言学的研究有着密切的联系，但又有重要的区别。自然语言处理并不是一般地研究自然语言，而在于研制能有效地实现自然语言通信的计算机系统，特别是其中的软件系统。因而它是计算机科学的一部分</p>\n<ul>\n<li>NLP 的目标</li>\n</ul>\n<p>NLP<br />\n 的目标是让计算机在理解语言方面像人类一样智能，最终的目标是弥补人类交流（自然语言）和计算机理解（机器语言）之间的差距。</p>\n<ul>\n<li>为什么需要 NLP 有了<br />\n NLP，就可能完成自动语音、自动文本的编写等任务。让我们从大量的数据中解放出来，让计算机去执行。这些任务包括自动生成给定文本的摘要、机器翻译及其他的任务。</li>\n</ul>\n<h2 id=\"55-功能优化之搜索聚合\"><a class=\"anchor\" href=\"#55-功能优化之搜索聚合\">#</a> <strong>5.5</strong> 功能优化之搜索聚合</h2>\n<p>Elasticsearch 7.13 版新增功能可以实现更快的聚合。在 date_histogram<br />\n 聚合方面， Elasticsearch 通过在内部将其重写为 filters<br />\n 聚合，获得了巨大的性能提升。具体来说，它变成了一个包含 range 查询的<br />\n filters 聚合。这就是 Elasticsearch 优化的内容 --- range 查询。</p>\n<p>为了加快 terms 和 date_histogram 这两个聚合的速度。可以将它们作为<br />\n filters 运行，</p>\n<p>然后加快 filters 的聚合速度。</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "分布式",
                "分布式",
                "中间件"
            ]
        },
        {
            "id": "https://eth168.top/Distribution/Elasticsearch/",
            "url": "https://eth168.top/Distribution/Elasticsearch/",
            "title": "Elasticsearch-7",
            "date_published": "2023-07-01T16:00:00.000Z",
            "content_html": "<p>尚硅谷项目课程系列之 <strong>Elasticsearch-7.x</strong></p>\n<p>版本：V4.0</p>\n<img data-src=\"/Distribution/Elasticsearch/image1.jpg\" class=\"\">{width=\"4.240972222222222in\"\n<p>height=&quot;2.0944444444444446in&quot;}</p>\n<p>尚硅谷 JavaEE 教研组</p>\n<h1 id=\"第1章-elasticsearch-概述\"><a class=\"anchor\" href=\"#第1章-elasticsearch-概述\">#</a> 第 1 章 Elasticsearch 概述</h1>\n<h2 id=\"11-elasticsearch-是什么\"><a class=\"anchor\" href=\"#11-elasticsearch-是什么\">#</a> 1.1 Elasticsearch 是什么</h2>\n<img data-src=\"/Distribution/Elasticsearch/image2.jpg\" class=\"\">{width=\"5.759722222222222in\"\n<p>height=&quot;1.479861111111111in&quot;}</p>\n<p>The Elastic Stack, 包括 Elasticsearch、Kibana、Beats 和 Logstash（也称为<br />\n ELK<br />\nStack）。能够安全可靠地获取任何来源、任何格式的数据，然后实时地对数据进行搜索、分析和可视化。Elaticsearch，简称为<br />\n ES， ES 是一个开源的高扩展的分布式全文搜索引擎，是整个 Elastic Stack<br />\n 技术栈的核心。它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理<br />\n PB 级别的数据。</p>\n<h3 id=\"12-全文搜索引擎\"><a class=\"anchor\" href=\"#12-全文搜索引擎\">#</a> 1.2 全文搜索引擎</h3>\n<p>Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p>\n<p>一般传统数据库，全文检索都实现的很鸡肋，因为一般也没人用数据库存文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对<br />\n SQL 的语法优化，也收效甚微。建立了索引，但是维护起来也很麻烦，对于<br />\n insert 和 update 操作都会重新构建索引。</p>\n<p>基于以上原因可以分析得出，在一些生产环境中，使用常规的搜索方式，性能是非常差的：</p>\n<ul>\n<li>\n<p>搜索的数据对象是大量的非结构化的文本数据。</p>\n</li>\n<li>\n<p>文件记录量达到数十万或数百万个甚至更多。</p>\n</li>\n<li>\n<p>支持大量基于交互式文本的查询。</p>\n</li>\n<li>\n<p>需求非常灵活的全文搜索查询。</p>\n</li>\n<li>\n<p>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。</p>\n</li>\n<li>\n<p>对不同记录类型、非文本数据操作或安全事务处理的需求相对较少的情况。</p>\n</li>\n</ul>\n<p>为了解决结构化数据搜索和非结构化数据搜索性能问题，我们就需要专业，健壮，强大的全文搜索引擎</p>\n<p>这里说到的全文搜索引擎指的是目前广泛应用的主流搜索引擎。它的工作原理是计算机索引程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置，当用户查询时，检索程序就根据事先建立的索引进行查找，并将查找的结果反馈给用户的检索方式。这个过程类似于通过字典中的检索字表查字的过程。</p>\n<h2 id=\"13-elasticsearch-and-solr\"><a class=\"anchor\" href=\"#13-elasticsearch-and-solr\">#</a> 1.3 Elasticsearch And Solr</h2>\n<p>Lucene 是 Apache 软件基金会 Jakarta<br />\n 项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。在<br />\n Java 开发环境里 Lucene 是一个成熟的免费开源工具。就其本身而言，Lucene<br />\n 是当前以及最近几年最受欢迎的免费 Java 信息检索程序库。但 Lucene<br />\n 只是一个提供全文搜索功能类库的核心工具包，而真正使用它还需要一个完善的服务框架搭建起来进行应用。</p>\n<p>目前市面上流行的搜索引擎软件，主流的就两款：<strong>Elasticsearch</strong> 和<br />\n<strong> Solr</strong>, 这两款都是基于 Lucene<br />\n 搭建的，可以独立部署启动的搜索引擎服务软件。由于内核相同，所以两者除了服务器安装、部署、管理、集群以外，对于数据的操作<br />\n修改、添加、保存、查询等等都十分类似。</p>\n<p>在使用过程中，一般都会将 Elasticsearch 和 Solr<br />\n 这两个软件对比，然后进行选型。这两个搜索引擎都是流行的，先进的的开源搜索引擎。它们都是围绕核心底层搜索库</p>\n<ul>\n<li>Lucene 构建的 -<br />\n 但它们又是不同的。像所有东西一样，每个都有其优点和缺点：</li>\n</ul>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image3.jpg\" class=\"\">{width=\"5.947777777777778in\"\n<p>height=&quot;2.5037357830271216in&quot;}</p>\n</blockquote>\n<h2 id=\"14-elasticsearch-or-solr\"><a class=\"anchor\" href=\"#14-elasticsearch-or-solr\">#</a> 1.4 Elasticsearch Or Solr</h2>\n<blockquote>\n<p>Elasticsearch 和 Solr 都是开源搜索引擎，那么我们在使用时该如何选择呢？</p>\n</blockquote>\n<ul>\n<li>Google 搜索趋势结果表明，与 Solr 相比，Elasticsearch<br />\n 具有很大的吸引力，但这并不意味着 Apache Solr<br />\n 已经死亡。虽然有些人可能不这么认为，但 Solr 仍然是最受欢迎的</li>\n</ul>\n<blockquote>\n<p>搜索引擎之一，拥有强大的社区和开源支持。</p>\n</blockquote>\n<ul>\n<li>与 Solr 相比，Elasticsearch<br />\n 易于安装且非常轻巧。此外，你可以在几分钟内安装并运行<br />\n Elasticsearch。但是，如果 Elasticsearch<br />\n 管理不当，这种易于部署和使用可能会成为一个问题。基于 JSON<br />\n 的配置很简单，但如果要为文件中的每个配置指定注释，那么它不适合您。总的来说，如果你的应用使用的是<br />\n JSON，那么 Elasticsearch 是一个更好的选择。</li>\n</ul>\n<blockquote>\n<p>否则，请使用 Solr，因为它的 schema.xml 和 solrconfig.xml<br />\n 都有很好的文档记录。</p>\n</blockquote>\n<ul>\n<li>Solr 拥有更大，更成熟的用户，开发者和贡献者社区。ES<br />\n 虽拥有的规模较小但活跃的</li>\n</ul>\n<blockquote>\n<p>用户社区以及不断增长的贡献者社区。</p>\n<p>Solr 贡献者和提交者来自许多不同的组织，而 Elasticsearch<br />\n 提交者来自单个公司。</p>\n</blockquote>\n<ul>\n<li>\n<p>Solr 更成熟，但 ES 增长迅速，更稳定。</p>\n</li>\n<li>\n<p>Solr 是一个非常有据可查的产品，具有清晰的示例和 API 用例场景。<br />\nElasticsearch 的文档组织良好，但它缺乏好的示例和清晰的配置说明。</p>\n</li>\n</ul>\n<blockquote>\n<p>那么，到底是 <strong>Solr</strong> 还是 <strong>Elasticsearch</strong>？</p>\n</blockquote>\n<p>有时很难找到明确的答案。无论您选择 Solr 还是<br />\n Elasticsearch，首先需要了解正确的用例和未来需求。总结他们的每个属性。</p>\n<ul>\n<li>\n<p>由于易于使用，Elasticsearch<br />\n 在新开发者中更受欢迎。一个下载和一个命令就可以启动一切。</p>\n</li>\n<li>\n<p>如果除了搜索文本之外还需要它来处理分析查询，Elasticsearch<br />\n 是更好的选择</p>\n</li>\n<li>\n<p>如果需要分布式索引，则需要选择<br />\n Elasticsearch。对于需要良好可伸缩性和以及性能分</p>\n</li>\n</ul>\n<blockquote>\n<p>布式环境，Elasticsearch 是更好的选择。</p>\n</blockquote>\n<ul>\n<li>Elasticsearch 在开源日志管理用例中占据主导地位，许多组织在<br />\n Elasticsearch 中索引它</li>\n</ul>\n<blockquote>\n<p>们的日志以使其可搜索。</p>\n</blockquote>\n<ul>\n<li>如果你喜欢监控和指标，那么请使用 Elasticsearch，因为相对于<br />\n Solr，Elasticsearch 暴露了更多的关键指标</li>\n</ul>\n<h2 id=\"15-elasticsearch-应用案例\"><a class=\"anchor\" href=\"#15-elasticsearch-应用案例\">#</a> 1.5 Elasticsearch 应用案例</h2>\n<ul>\n<li><strong>GitHub:</strong> 2013 年初，抛弃了 Solr，采取 Elasticsearch 来做 PB<br />\n 级的搜索。&quot;GitHub 使用</li>\n</ul>\n<blockquote>\n<p>Elasticsearch 搜索 20TB 的数据，包括 13 亿文件和 1300 亿行代码 &quot;。</p>\n</blockquote>\n<ul>\n<li>\n<p>维基百科：启动以 Elasticsearch 为基础的核心搜索架构</p>\n</li>\n<li>\n<p><strong>SoundCloud</strong>：&quot;SoundCloud 使用 Elasticsearch 为 1.8<br />\n 亿用户提供即时而精准的音乐搜索服务 &quot;。</p>\n</li>\n<li>\n<p>百度：目前广泛使用 Elasticsearch<br />\n 作为文本数据分析，采集百度所有服务器上的各类指标数据及用户自定义数据，通过对各种数据进行多维分析展示，辅助定位分析实例异常或业务层面异常。目前覆盖百度内部<br />\n 20<br />\n 多个业务线（包括云分析、网盟、预测、文库、直达号、钱包、风控等），单集群最大<br />\n 100 台机器，200 个 ES 节点，每天导入 30TB+ 数据。</p>\n</li>\n<li>\n<p>新浪：使用 Elasticsearch 分析处理 32 亿条实时日志。</p>\n</li>\n<li>\n<p>阿里：使用 Elasticsearch 构建日志采集和分析体系。</p>\n</li>\n<li>\n<p><strong>Stack Overflow</strong>：解决 Bug<br />\n 问题的网站，全英文，编程人员交流的网站。</p>\n</li>\n</ul>\n<h1 id=\"第2章-elasticsearch-入门\"><a class=\"anchor\" href=\"#第2章-elasticsearch-入门\">#</a> 第 2 章 Elasticsearch 入门</h1>\n<h2 id=\"21-elasticsearch-安装\"><a class=\"anchor\" href=\"#21-elasticsearch-安装\">#</a> 2.1 Elasticsearch 安装</h2>\n<h3 id=\"211-下载软件\"><a class=\"anchor\" href=\"#211-下载软件\">#</a> 2.1.1 下载软件</h3>\n<blockquote>\n<p>Elasticsearch 的官方地址：<span class=\"ul\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi8=\">https://www.elastic.co/cn/</span></span></p>\n<p>Elasticsearch 最新的版本是 7.11.2（截止 2021.3.10），我们选择 7.8.0<br />\n 版本（最新版本半</p>\n</blockquote>\n<p>年前的版本）</p>\n<blockquote>\n<p>下载地址：<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcyNlbGFzdGljc2VhcmNo\">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</span></span>[<span class=\"ul\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcyNlbGFzdGljc2VhcmNo\">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcyNlbGFzdGljc2VhcmNo\">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</span>)</p>\n<img data-src=\"/Distribution/Elasticsearch/image5.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.545152012248469in&quot;}</p>\n<p>Elasticsearch 分为 Linux 和 Windows 版本，基于我们主要学习的是<br />\n Elasticsearch 的 Java</p>\n</blockquote>\n<p>客户端的使用，所以课程中使用的是安装较为简便的 Windows 版本。</p>\n<img data-src=\"/Distribution/Elasticsearch/image7.jpg\" class=\"\">{width=\"5.671056430446194in\"\n<p>height=&quot;1.9451673228346458in&quot;}</p>\n<blockquote>\n<p>Windows 版的 Elasticsearch 的安装很简单，解压即安装完毕，解压后的<br />\n Elasticsearch 的</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image9.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.7593044619422573in&quot;}</p>\n<p>+---------+------------------+<br />\n| 目录    | &gt; 含义           |<br />\n+=<mark><mark><mark><mark>+</mark></mark></mark></mark>==========+<br />\n| bin     | &gt; 可执行脚本目录 |<br />\n+---------+------------------+<br />\n| config  | &gt; 配置目录       |<br />\n+---------+------------------+<br />\n| jdk     | &gt; 内置 JDK 目录  |<br />\n+---------+------------------+<br />\n| lib     | &gt; 类库           |<br />\n+---------+------------------+<br />\n| logs    | &gt; 日志目录       |<br />\n+---------+------------------+<br />\n| modules | &gt; 模块目录       |<br />\n+---------+------------------+<br />\n| plugins | &gt; 插件目录       |<br />\n+---------+------------------+</p>\n<p>解压后，进入 bin 文件目录，点击 elasticsearch.bat 文件启动 ES 服务</p>\n<img data-src=\"/Distribution/Elasticsearch/image11.jpg\" class=\"\">{width=\"5.759722222222222in\"\n<p>height=&quot;2.8666666666666667in&quot;}</p>\n<p>注意：<strong>9300</strong> 端口为 <strong>Elasticsearch</strong> 集群间组件的通信端口，<strong>9200</strong><br />\n 端口为浏览器访问的 <strong>http</strong></p>\n<p>协议 <strong>RESTful</strong> 端口。</p>\n<p>打开浏览器（推荐使用谷歌浏览器），输入地址：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjAw\">http://localhost:9200</span>，测试结果</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image12.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.4629297900262468in&quot;}</p>\n</blockquote>\n<h3 id=\"213-问题解决\"><a class=\"anchor\" href=\"#213-问题解决\">#</a> 2.1.3 问题解决</h3>\n<ul>\n<li>Elasticsearch 是使用 java 开发的，且 7.8 版本的 ES 需要 JDK 版本 1.8<br />\n 以上，默认安装</li>\n</ul>\n<blockquote>\n<p>包带有 jdk 环境，如果系统配置 JAVA_HOME，那么使用系统默认的<br />\n JDK，如果没有配置使用自带的 JDK，一般建议使用系统配置的 JDK。</p>\n</blockquote>\n<ul>\n<li>双击启动窗口闪退，通过路径访问追踪错误，如果是 &quot;空间不足&quot;，请修改<br />\n config/jvm.options 配置文件</li>\n</ul>\n<p>#<br />\n设置 JVM 初始内存为 1G。此值可以设置与 - Xmx 相同，以避免每次垃圾回收完成后 JVM 重新分配内存</p>\n<p># Xms represents the initial size of total heap space</p>\n<p># 设置 JVM 最大可用内存为 1G</p>\n<p># Xmx represents the maximum size of total heap space</p>\n<p>-Xms1g</p>\n<p>-Xmx1g</p>\n<h2 id=\"22-elasticsearch-基本操作\"><a class=\"anchor\" href=\"#22-elasticsearch-基本操作\">#</a> 2.2 Elasticsearch 基本操作</h2>\n<h3 id=\"221-restful\"><a class=\"anchor\" href=\"#221-restful\">#</a> 2.2.1 RESTful</h3>\n<p>REST<br />\n 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是<br />\n RESTful。Web 应用程序最重要的 REST<br />\n 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。</p>\n<blockquote>\n<p>在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它</p>\n</blockquote>\n<p>向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用<br />\n URI (Universal Resource Identifier)<br />\n 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。使用的是标准的<br />\n HTTP 方法，比如 GET、PUT、POST 和</p>\n<p>DELETE。</p>\n<p>在 REST 样式的 Web<br />\n 服务中，每个资源都有一个地址。资源本身都是方法调用的目</p>\n<p>标，方法列表对所有资源都是一样的。这些方法都是标准方法，包括 HTTP<br />\nGET、POST、</p>\n<p>PUT、DELETE，还可能包括 HEAD 和<br />\n OPTIONS。简单的理解就是，如果想要访问互联网上的资源，就必须向资源所在的服务器发出请求，请求体中必须包含资源的网络路径，以及对资源进行的操作 (增删改查)。</p>\n<h4 id=\"222-客户端安装\"><a class=\"anchor\" href=\"#222-客户端安装\">#</a> 2.2.2 客户端安装</h4>\n<p>如果直接通过浏览器向 Elasticsearch<br />\n 服务器发请求，那么需要在发送的请求中包含</p>\n<p>HTTP 标准的方法，而 HTTP 的大部分特性且仅支持 GET 和 POST<br />\n 方法。所以为了能方便地进行客户端的访问，可以使用 Postman 软件</p>\n<p>Postman 是一款强大的网页调试工具，提供功能强大的 Web API 和 HTTP<br />\n 请求调试。软件功能强大，界面简洁明晰、操作方便快捷，设计得很人性化。Postman<br />\n 中文版能够发送任何类型的 HTTP 请求 (GET, HEAD, POST,<br />\nPUT..)，不仅能够表单提交，且可以附带任意类型请求体。</p>\n<blockquote>\n<p>Postman 官网：<span class=\"ul\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20=\">https://www.getpostman.com</span></span></p>\n<p>Postman<br />\n 下载：<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20vYXBwcw==\">https://www.getpostman.com/apps</span></span>[<span class=\"ul\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20vYXBwcw==\">https://www.getpostman.com/apps</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2V0cG9zdG1hbi5jb20vYXBwcw==\">https://www.getpostman.com/apps</span>)</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image14.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;3.0801673228346456in&quot;}</p>\n<p>Elasticsearch<br />\n 是面向文档型数据库，一条数据在这里就是一个文档。为了方便大家理解，我们将<br />\n Elasticsearch 里存储文档数据和关系型数据库 MySQL<br />\n 存储数据的概念进行一个类比</p>\n<img data-src=\"/Distribution/Elasticsearch/image16.jpg\" class=\"\">{width=\"4.935416666666667in\"\n<p>height=&quot;1.4270833333333333in&quot;}</p>\n<p>ES 里的 Index 可以看做一个库，而 Types 相当于表，Documents<br />\n 则相当于表的行。</p>\n<p>这里 Types 的概念已经被逐渐弱化，Elasticsearch 6.X 中，一个 index<br />\n 下已经只能包含一个 type，Elasticsearch 7.X 中，Type 的概念已经被删除了。</p>\n<p>6 用 JSON 作为文档序列化的格式，比如一条用户信息：</p>\n<p>+----------------------------------------------+<br />\n| {                                            |<br />\n|                                              |<br />\n| &quot;name&quot; : &quot;John&quot;,                         |<br />\n|                                              |<br />\n| &quot;sex&quot; : &quot;Male&quot;,                          |<br />\n|                                              |<br />\n| &quot;age&quot; : 25,                                |<br />\n|                                              |<br />\n| &quot;birthDate&quot;: &quot;1990/05/01&quot;,               |<br />\n|                                              |<br />\n| &quot;about&quot; : &quot;I love to go rock climbing&quot;,  |<br />\n|                                              |<br />\n| &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ] } |<br />\n+----------------------------------------------+</p>\n<h3 id=\"224-http-操作\"><a class=\"anchor\" href=\"#224-http-操作\">#</a> 2.2.4 HTTP 操作</h3>\n<h4 id=\"2241-索引操作\"><a class=\"anchor\" href=\"#2241-索引操作\">#</a> 2.2.4.1 索引操作</h4>\n<h5 id=\"创建索引\"><a class=\"anchor\" href=\"#创建索引\">#</a> 创建索引</h5>\n<p>对比关系型数据库，创建索引就等同于创建数据库</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>PUT</strong> 请求<br />\n：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwaW5n\">http://127.0.0.1:9200/shopping</span></p>\n<img data-src=\"/Distribution/Elasticsearch/image17.jpg\" class=\"\">{width=\"5.766666666666667in\"\n<p>height=&quot;0.41944444444444445in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image18.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4093044619422572in&quot;}</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"acknowledged\"</span>【响应结果】<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> # <span class=\"token boolean\">true</span>操作成功</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"shards_acknowledged\"</span>【分片结果】<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> # 分片操作成功</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"index\"</span>【索引名称】<span class=\"token operator\">:</span> <span class=\"token string\">\"shopping\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：创建索引库的分片数默认 1 片，在 7.0.0 之前的 Elasticsearch 版本中，默认 5 片</p>\n<p>如果重复添加索引，会返回错误信息</p>\n<img data-src=\"/Distribution/Elasticsearch/image20.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;3.611680883639545in&quot;}</p>\n<h5 id=\"查看所有索引\"><a class=\"anchor\" href=\"#查看所有索引\">#</a> 查看所有索引</h5>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL19jYXQvaW5kaWNlcz92\">http://127.0.0.1:9200/_cat/indices?v</span></p>\n<img data-src=\"/Distribution/Elasticsearch/image22.jpg\" class=\"\">{width=\"5.768055555555556in\"\n<p>height=&quot;0.32569444444444445in&quot;}</p>\n<p>这里请求路径中的_cat 表示查看的意思，indices<br />\n 表示索引，所以整体含义就是查看当前 ES 服务器中的所有索引，就好像 MySQL<br />\n 中的 show tables 的感觉，服务器响应结果如下</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image23.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.0032075678040244in&quot;}</p>\n</blockquote>\n<p>+----------------+----------------------------------------------------+<br />\n| 表头           | &gt; 含义                                             |<br />\n+<mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark>====================================+<br />\n| health         | &gt; 当前服务器健康状态：                             |<br />\n|                | &gt;                                                  |<br />\n|                | &gt; <strong>green</strong> (集群完整)                              |<br />\n|                | &gt; <strong>yellow</strong> (单点正常、集群不完整) red (单点不正常) |<br />\n+----------------+----------------------------------------------------+<br />\n| status         | &gt; 索引打开、关闭状态                               |<br />\n+----------------+----------------------------------------------------+<br />\n| index          | &gt; 索引名                                           |<br />\n+----------------+----------------------------------------------------+<br />\n| uuid           | &gt; 索引统一编号                                     |<br />\n+----------------+----------------------------------------------------+<br />\n| pri            | &gt; 主分片数量                                       |<br />\n+----------------+----------------------------------------------------+<br />\n| rep            | &gt; 副本数量                                         |<br />\n+----------------+----------------------------------------------------+<br />\n| docs.count     | &gt; 可用文档数量                                     |<br />\n+----------------+----------------------------------------------------+<br />\n| docs.deleted   | &gt; 文档删除状态（逻辑删除）                         |<br />\n+----------------+----------------------------------------------------+<br />\n| store.size     | &gt; 主分片和副分片整体占空间大小                     |<br />\n+----------------+----------------------------------------------------+<br />\n| pri.store.size | &gt; 主分片占空间大小                                 |<br />\n+----------------+----------------------------------------------------+</p>\n<h5 id=\"查看单个索引\"><a class=\"anchor\" href=\"#查看单个索引\">#</a> 查看单个索引</h5>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwaW5n\">http://127.0.0.1:9200/shopping</span></p>\n<img data-src=\"/Distribution/Elasticsearch/image25.jpg\" class=\"\">{width=\"5.770138888888889in\"\n<p>height=&quot;0.33402777777777776in&quot;}</p>\n<p>查看索引向 ES 服务器发送的请求路径和创建索引是一致的。但是 HTTP 方法不一致。这里可以体会一下 RESTful 的意义，</p>\n<img data-src=\"/Distribution/Elasticsearch/image26.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.993054461942257in&quot;}</p>\n<h5 id=\"删除索引\"><a class=\"anchor\" href=\"#删除索引\">#</a> 删除索引</h5>\n<p>在 Postman 中，向 ES 服务器发 <strong>DELETE</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwaW5n\">http://127.0.0.1:9200/shopping</span></p>\n<img data-src=\"/Distribution/Elasticsearch/image28.jpg\" class=\"\">{width=\"5.770138888888889in\"\n<p>height=&quot;0.3284722222222222in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image29.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;0.8162642169728784in&quot;}</p>\n</blockquote>\n<p>重新访问索引时，服务器返回响应：索引不存在</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image25.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;2.9579297900262467in&quot;}</p>\n</blockquote>\n<h4 id=\"2242-文档操作\"><a class=\"anchor\" href=\"#2242-文档操作\">#</a> 2.2.4.2 文档操作</h4>\n<h5 id=\"创建文档\"><a class=\"anchor\" href=\"#创建文档\">#</a> 创建文档</h5>\n<p>索引已经创建好了，接下来我们来创建文档，并添加数据。这里的文档可以类比为关系型数据库中的表数据，添加的数据格式为<br />\n JSON 格式</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>POST</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwaW5nL3Bob25l\">http://127.0.0.1:9200/shopping/phone</span></p>\n<p>请求体内容为：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"小米手机\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"category\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"小米\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token property\">\"images\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://www.gulixueyuan.com/xm.jpg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3999.0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image34.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.8035575240594925in&quot;}</p>\n<p>此处发送请求的方式必须为 <strong>POST</strong>，不能是 <strong>PUT</strong>，否则会发生错误</p>\n<img data-src=\"/Distribution/Elasticsearch/image36.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.2183475503062118in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image38.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.2212871828521434in&quot;}</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">\"_index\"</span>【索引】<span class=\"token operator\">:</span> <span class=\"token string\">\"shopping\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">\"_type\"</span>【类型-文档】<span class=\"token operator\">:</span> <span class=\"token string\">\"_doc\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">\"_id\"</span>【唯一标识】<span class=\"token operator\">:</span> <span class=\"token string\">\"Xhsa2ncBlvF_7lxyCE9G\"</span><span class=\"token punctuation\">,</span>#可以类比为MySQL中的主键，随机生成</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"_version\"</span>【版本】<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">\"result\"</span>【结果】<span class=\"token operator\">:</span> <span class=\"token string\">\"created\"</span><span class=\"token punctuation\">,</span> #这里的create表示创建成功</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token string\">\"_shards\"</span>【分片】<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">\"total\"</span>【分片 - 总数】<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token string\">\"successful\"</span>【分片 - 成功】<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">\"failed\"</span>【分片 - 失败】<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"_seq_no\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"_primary_term\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的数据创建后，由于没有指定数据唯一性标识（ID），默认情况下，ES<br />\n 服务器会随机生成一个。</p>\n<p>如果想要自定义唯一性标识，需要在创建时指定：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwaW5nL19kb2MvMTAwMQ==\">http://127.0.0.1:9200/shopping/_doc/1001</span></p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image40.jpg\" class=\"\">{width=\"5.853111329833771in\"\n<p>height=&quot;1.715061242344707in&quot;}</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image42.jpg\" class=\"\">{width=\"5.85972331583552in\"\n<p>height=&quot;2.3156167979002626in&quot;}</p>\n<p>此处需要注意：如果增加数据时明确数据主键，那么请求方式也可以为 PUT</p>\n<h5 id=\"查看文档\"><a class=\"anchor\" href=\"#查看文档\">#</a> 查看文档</h5>\n<p>查看文档时，需要指明文档的唯一性标识，类似于 MySQL 中数据的主键查询</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwaW5nL3Bob25lLzEwMDE=\">http://127.0.0.1:9200/shopping/phone/1001</span></p>\n<img data-src=\"/Distribution/Elasticsearch/image44.jpg\" class=\"\">{width=\"5.774305555555555in\"\n<p>height=&quot;0.3111111111111111in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image45.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.320971128608924in&quot;}</p>\n<p>{</p>\n<p>&quot;_index&quot;【索引】: &quot;shopping&quot;,</p>\n<p>&quot;_type&quot;【文档类型】: &quot;_doc&quot;,</p>\n<p>&quot;_id&quot;: &quot;1&quot;,</p>\n<p>&quot;_version&quot;: 2,</p>\n<p>&quot;_seq_no&quot;: 2,</p>\n<p>&quot;_primary_term&quot;: 2,</p>\n<p>&quot;found&quot;【查询结果】: true, # true 表示查找到，false 表示未查找到</p>\n<p>&quot;_source&quot;【文档源信息】: {</p>\n<p>&quot;title&quot;: &quot;华为手机&quot;,</p>\n<p>&quot;category&quot;: &quot;华为&quot;,</p>\n<p>&quot;images&quot;: &quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ndWxpeHVleXVhbi5jb20vaHcuanBn\">http://www.gulixueyuan.com/hw.jpg</span>&quot;,</p>\n<p>&quot;price&quot;: 4999.00</p>\n<p>} }</p>\n<h5 id=\"修改文档\"><a class=\"anchor\" href=\"#修改文档\">#</a> 修改文档</h5>\n<p>和新增文档一样，输入相同的 URL<br />\n 地址请求，如果请求体变化，会将原有的数据内容覆盖</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>POST</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwaW5nL191cGRhdGUvMTAwMQ==\">http://127.0.0.1:9200/shopping/_update/1001</span></p>\n<p>请求体内容为:</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"华为手机\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"category\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"华为\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token property\">\"images\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://www.gulixueyuan.com/hw.jpg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4999.0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image47.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.8120286526684164in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image49.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.279304461942257in&quot;}</p>\n<p>{</p>\n<p>&quot;_index&quot;: &quot;shopping&quot;,</p>\n<p>&quot;_type&quot;: &quot;_doc&quot;,</p>\n<p>&quot;_id&quot;: &quot;1&quot;,</p>\n<p>&quot;_version&quot;【版本】: 2,</p>\n<p>&quot;result&quot;【结果】: &quot;updated&quot;, # updated 表示数据被更新</p>\n<p>&quot;_shards&quot;: {</p>\n<p>&quot;total&quot;: 2,</p>\n<p>&quot;successful&quot;: 1,</p>\n<p>&quot;failed&quot;: 0</p>\n<p>},</p>\n<p>&quot;_seq_no&quot;: 2,</p>\n<p>&quot;_primary_term&quot;: 2</p>\n<p>}</p>\n<p>修改字段修改数据时，也可以只修改某一给条数据的局部信息在 Postman 中，向 ES 服务器发 <strong>POST</strong> 请求<br />\n：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwcGluZy8xMDAxL191cGRhdGUlRTglQUYlQjclRTYlQjElODIlRTQlQkQlOTMlRTUlODYlODUlRTUlQUUlQjklRTQlQjglQkElRUYlQkMlOUE=\">http://127.0.0.1:9200/shoppping/1001/_update 请求体内容为：</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"doc\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3000.0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image51.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9653619860017497in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image53.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.160971128608924in&quot;}</p>\n<p>根据唯一性标识，查询文档数据，文档数据已经更新</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image55.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;2.5230686789151355in&quot;}</p>\n</blockquote>\n<h5 id=\"删除文档\"><a class=\"anchor\" href=\"#删除文档\">#</a> 删除文档</h5>\n<p>删除一个文档不会立即从磁盘上移除，它只是被标记成已删除（逻辑删除）。</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>DELETE</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwaW5nL3Bob25l\">http://127.0.0.1:9200/shopping/phone</span></p>\n<img data-src=\"/Distribution/Elasticsearch/image59.jpg\" class=\"\">{width=\"5.773611111111111in\"\n<p>height=&quot;0.3347222222222222in&quot;}</p>\n<p>删除成功，服务器响应结果：</p>\n<img data-src=\"/Distribution/Elasticsearch/image60.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1191797900262466in&quot;}</p>\n<p>{</p>\n<p>&quot;_index&quot;: &quot;shopping&quot;,</p>\n<p>&quot;_type&quot;: &quot;_doc&quot;,</p>\n<p>&quot;_id&quot;: &quot;1&quot;,</p>\n<p>&quot;_version&quot;【版本】: 4, #对数据的操作，都会更新版本</p>\n<p>&quot;result&quot;【结果】: &quot;deleted&quot;, # deleted 表示数据被标记为删除</p>\n<p>&quot;_shards&quot;: {</p>\n<p>&quot;total&quot;: 2,</p>\n<p>&quot;successful&quot;: 1,</p>\n<p>&quot;failed&quot;: 0</p>\n<p>},</p>\n<p>&quot;_seq_no&quot;: 4,</p>\n<p>&quot;_primary_term&quot;: 2</p>\n<p>}</p>\n<img data-src=\"/Distribution/Elasticsearch/image62.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.8961100174978127in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image66.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;2.3640409011373578in&quot;}</p>\n</blockquote>\n<p>{</p>\n<p>&quot;_index&quot;: &quot;shopping&quot;,</p>\n<p>&quot;_type&quot;: &quot;_doc&quot;,</p>\n<p>&quot;_id&quot;: &quot;1&quot;,</p>\n<p>&quot;_version&quot;: 1,</p>\n<p>&quot;result&quot;【结果】: &quot;not_found&quot;, # not_found 表示未查找到</p>\n<p>&quot;_shards&quot;: {</p>\n<p>&quot;total&quot;: 2,</p>\n<p>&quot;successful&quot;: 1,</p>\n<p>&quot;failed&quot;: 0</p>\n<p>},</p>\n<p>&quot;_seq_no&quot;: 5,</p>\n<p>&quot;_primary_term&quot;: 2</p>\n<p>}</p>\n<h5 id=\"条件删除文档\"><a class=\"anchor\" href=\"#条件删除文档\">#</a> 条件删除文档</h5>\n<p>一般删除数据都是根据文档的唯一性标识进行删除，实际操作时，也可以根据条件对多条数据进行删除首先分别增加多条数据:</p>\n<img data-src=\"/Distribution/Elasticsearch/image70.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;3.698974190726159in&quot;}</p>\n<p>向 ES 服务器发 <strong>POST</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3Nob3BwaW5nL19kZWxldGVfYnlfcXVlcnk=\">http://127.0.0.1:9200/shopping/_delete_by_query</span><br />\n 请求体内容为：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4000.00</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image74.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.0703630796150483in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image76.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.129304461942257in&quot;}</p>\n<p>{</p>\n<p>&quot;took&quot;【耗时】: 175,</p>\n<p>&quot;timed_out&quot;【是否超时】: false,</p>\n<p>&quot;total&quot;【总数】: 2,</p>\n<p>&quot;deleted&quot;【删除数量】: 2,</p>\n<p>&quot;batches&quot;: 1,</p>\n<p>&quot;version_conflicts&quot;: 0,</p>\n<p>&quot;noops&quot;: 0,</p>\n<p>&quot;retries&quot;: {</p>\n<p>&quot;bulk&quot;: 0,</p>\n<p>&quot;search&quot;: 0</p>\n<p>},</p>\n<p>&quot;throttled_millis&quot;: 0,</p>\n<p>&quot;requests_per_second&quot;: -1.0,</p>\n<p>&quot;throttled_until_millis&quot;: 0,</p>\n<p>&quot;failures&quot;: []</p>\n<p>}</p>\n<p>补充：</p>\n<ul>\n<li>\n<p>关于 query.match 的用法：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1NvbmdZdXhpbklUL2FydGljbGUvZGV0YWlscy8xMjA2NzgyMTc=\">https://blog.csdn.net/SongYuxinIT/article/details/120678217</span></p>\n</li>\n<li>\n<p>分页</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 请看接口说明，其中写了 match 和其他的相关方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 单个条件查询</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 匹配字段</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// \"price\": 3999.00</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 布尔 -> 多个条件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"bool\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 相当与 and .or-> should ;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">\"must\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 匹配 《---》 match_not 不匹配</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token property\">\"category\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"小米\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3999\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token property\">\"filter\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token property\">\"range\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token property\">\"gt\"</span><span class=\"token operator\">:</span><span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token property\">\"from\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 指定显示字段</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token property\">\"_source\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>   <span class=\"token comment\">// 排序  </span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token property\">\"sort\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 排序字段  </span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 排序方式</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token property\">\"order\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"desc\"</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2243-映射操作\"><a class=\"anchor\" href=\"#2243-映射操作\">#</a> 2.2.4.3 映射操作</h4>\n<p>有了索引库，等于有了数据库中的 database。接下来就需要建索引库 (index) 中的映射了，类似于数据库 (database) 中的表结构 (table)。</p>\n<p>创建数据库表需要设置字段名称，类型，长度，约束等；索引库也一样，需要知道这个类型下有哪些字段，每个字段有哪些约束信息，这就叫做映射 (mapping)。</p>\n<h5 id=\"创建映射\"><a class=\"anchor\" href=\"#创建映射\">#</a> 创建映射</h5>\n<blockquote>\n<p>前提：创建索引</p>\n</blockquote>\n<p>在 Postman 中，向 ES 服务器发 <strong>PUT</strong> 请求 http://127.0.0.1:9200/user/_mapping</p>\n<p>请求体内容为：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"long\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image78.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.198556430446194in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image80.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4627766841644794in&quot;}</p>\n<ul>\n<li>\n<p>字段名：任意填写，下面指定许多属性，例如：title、subtitle、images、price</p>\n</li>\n<li>\n<p>type：类型，Elasticsearch 中支持的数据类型非常丰富，说几个关键的：</p>\n<ul>\n<li>\n<p>String 类型，又分两种：</p>\n<p>text：可分词<br />\n keyword：不可分词，数据会作为完整字段进行匹配</p>\n</li>\n<li>\n<p>Numerical：数值类型，分两类</p>\n<p>基本数据类型：long、integer、short、byte、double、float、half_float</p>\n<blockquote>\n<p>浮点数的高精度类型：scaled_float</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>Date：日期类型</p>\n</li>\n<li>\n<p>Array：数组类型</p>\n</li>\n<li>\n<p>Object：对象</p>\n</li>\n</ul>\n<pre><code>&lt;!-- --&gt;\n</code></pre>\n<ul>\n<li>index：是否索引，默认为<br />\n true，也就是说你不进行任何配置，所有字段都会被索引。</li>\n</ul>\n<blockquote>\n<p>true：字段会被索引，则可以用来进行搜索</p>\n<p>false：字段不会被索引，不能用来搜索</p>\n</blockquote>\n<ul>\n<li>store：是否将数据进行独立存储，默认为 false</li>\n</ul>\n<blockquote>\n<p>原始的文本会存储在_source 里面，默认情况下其他提取出来的字段都不是独立存储的，是从_source<br />\n 里面提取出来的。当然你也可以独立的存储某个字段，只要设置 &quot;store&quot;: true 即可，获取独立存储的字段要比从_source 中解析快得多，但是也会占用更多的空间，所以要根据实际业务需求来设置。</p>\n</blockquote>\n<ul>\n<li>analyzer：分词器，这里的 ik_max_word 即使用 ik<br />\n 分词器，后面会有专门的章节学习</li>\n</ul>\n<h5 id=\"查看映射\"><a class=\"anchor\" href=\"#查看映射\">#</a> 查看映射</h5>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求: <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3VzZXIvX21hcHBpbmc=\">http://127.0.0.1:9200/user/_mapping</span></p>\n<img data-src=\"/Distribution/Elasticsearch/image82.jpg\" class=\"\">{width=\"5.767361111111111in\"\n<p>height=&quot;0.31666666666666665in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image83.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.5444444444444443in&quot;}</p>\n<h5 id=\"索引映射关联\"><a class=\"anchor\" href=\"#索引映射关联\">#</a> 索引映射关联</h5>\n<p>在 Postman 中，向 ES 服务器发 <strong>PUT</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQx\">http://127.0.0.1:9200/student1</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"mappings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token property\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"long\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"index\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image85.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.665224190726159in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image87.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4090266841644794in&quot;}</p>\n<h4 id=\"2244-高级查询\"><a class=\"anchor\" href=\"#2244-高级查询\">#</a> 2.2.4.4 高级查询</h4>\n<p>Elasticsearch 提供了基于 JSON 提供完整的查询 DSL 来定义查询定义数据 :</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># POST /student/_doc/<span class=\"token number\">1001</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre># POST /student/_doc/<span class=\"token number\">1002</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre># POST /student/_doc/<span class=\"token number\">1003</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">40</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre># POST /student/_doc/<span class=\"token number\">1004</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsan1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsan1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> <span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">50</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre># POST /student/_doc/<span class=\"token number\">1005</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsan2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"zhangsan2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"女\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"查询所有文档\"><a class=\"anchor\" href=\"#查询所有文档\">#</a> 查询所有文档</h5>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p># &quot;query&quot;：这里的 query 代表一个查询对象，里面可以有不同的查询属性</p>\n<p># &quot;match_all&quot;：查询类型，例如：match_all (代表查询所有)， match，term<br />\n， range 等等</p>\n<p># {查询条件}：查询条件会根据类型的不同，写法也有差异</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image89.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.58751312335958in&quot;}</p>\n</blockquote>\n<p>服务器响应结果如下：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image91.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;4.659457567804025in&quot;}</p>\n</blockquote>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token property\">\"took【查询花费时间，单位毫秒】\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1116</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token property\">\"timed_out【是否超时】\"</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token property\">\"_shards【分片信息】\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token property\">\"total【总数】\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token property\">\"successful【成功】\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token property\">\"skipped【忽略】\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token property\">\"failed【失败】\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> \t<span class=\"token property\">\"hits【搜索命中结果】\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token string\">\"total\"</span>【搜索条件匹配的文档总数】<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">\"value\"</span>【总命中计数的值】<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token string\">\"relation\"</span>【计数规则】<span class=\"token operator\">:</span> <span class=\"token string\">\"eq\"</span> <span class=\"token comment\">//eq 表示计数准确， gte 表示计数不准确</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token property\">\"max_score【匹配度分值】\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token property\">\"hits【命中结果集合】\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h5 id=\"匹配查询\"><a class=\"anchor\" href=\"#匹配查询\">#</a> 匹配查询</h5>\n<p>match 匹配类型查询，会把查询条件进行分词，然后进行查询，多个词条之间是 or 的关系</p>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image95.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.0903630796150483in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image97.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4390266841644794in&quot;}</p>\n<h5 id=\"字段匹配查询\"><a class=\"anchor\" href=\"#字段匹配查询\">#</a> 字段匹配查询</h5>\n<p>multi_match 与 match 类似，不同的是它可以在多个字段中查询。</p>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"multi_match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token property\">\"fields\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"nickname\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image99.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1986964129483813in&quot;}</p>\n<p>服务器响应结果：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image101.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.1291797900262468in&quot;}</p>\n</blockquote>\n<h5 id=\"关键字精确查询\"><a class=\"anchor\" href=\"#关键字精确查询\">#</a> 关键字精确查询</h5>\n<p>term 查询，精确的关键词匹配查询，不对查询条件进行分词。</p>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"term\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image103.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.230224190726159in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image105.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.2173600174978128in&quot;}</p>\n<h5 id=\"多关键字精确查询\"><a class=\"anchor\" href=\"#多关键字精确查询\">#</a> 多关键字精确查询</h5>\n<p>terms 查询和 term 查询一样，但它允许你指定多值进行匹配。</p>\n<p>如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件，类似于 mysql 的 in</p>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"terms\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"lisi\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image107.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.6120964566929135in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image109.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.2758464566929133in&quot;}</p>\n</blockquote>\n<h5 id=\"指定查询字段\"><a class=\"anchor\" href=\"#指定查询字段\">#</a> 指定查询字段</h5>\n<p>默认情况下，Elasticsearch 在搜索的结果中，会把文档中保存在_source 的所有字段都返回。</p>\n<p>如果我们只想获取其中的部分字段，我们可以添加_source 的过滤</p>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"_source\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token string\">\"nickname\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token property\">\"terms\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image111.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1686953193350833in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image113.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.2690266841644795in&quot;}</p>\n<h5 id=\"过滤补充\"><a class=\"anchor\" href=\"#过滤补充\">#</a> 过滤补充</h5>\n<p>过滤字段我们也可以通过</p>\n<ul>\n<li>includes：来指定想要显示的字段</li>\n<li>excludes：来指定不想要显示的字段</li>\n</ul>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"_source\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"includes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token string\">\"nickname\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token property\">\"terms\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image115.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.303695319335083in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image117.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.0676377952755907in&quot;}</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"_source\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"excludes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token string\">\"nickname\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token property\">\"terms\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token property\">\"nickname\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t<span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image119.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1666119860017496in&quot;}</p>\n<p>服务器响应结果：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image121.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.0033464566929133in&quot;}</p>\n</blockquote>\n<h5 id=\"组合查询\"><a class=\"anchor\" href=\"#组合查询\">#</a> 组合查询</h5>\n<p><code>bool</code>  把各种其它查询通过 <code>must</code> （必须）、 <code>must_not</code> （必须不）、 <code>should</code> （应该）的方式进行组合</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"bool\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"must\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t\t<span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t\t\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token property\">\"must_not\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t<span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t\t\t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"40\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token property\">\"should\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t\t<span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t\t\t<span class=\"token property\">\"sex\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"男\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image123.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.210363079615048in&quot;}</p>\n<p>服务器响应结果：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image125.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.1291797900262468in&quot;}</p>\n</blockquote>\n<h5 id=\"范围查询\"><a class=\"anchor\" href=\"#范围查询\">#</a> 范围查询</h5>\n<p>range 查询找出那些落在指定区间内的数字或者时间。range 查询允许以下字符</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">操作符</th>\n<th style=\"text-align:center\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">gt</td>\n<td style=\"text-align:center\">&gt; 大于 &gt;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gte</td>\n<td style=\"text-align:center\">大于等于 &gt;=</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lt</td>\n<td style=\"text-align:center\">&gt; 小于 &lt;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lte</td>\n<td style=\"text-align:center\">小于等于 &lt;=</td>\n</tr>\n</tbody>\n</table>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"range\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"gte\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"lte\"</span><span class=\"token operator\">:</span> <span class=\"token number\">35</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image127.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9332797462817148in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image129.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.2473600174978128in&quot;}</p>\n<h5 id=\"模糊查询\"><a class=\"anchor\" href=\"#模糊查询\">#</a> 模糊查询</h5>\n<p>返回包含与搜索字词相似的字词的文档。</p>\n<p>编辑距离是将一个术语转换为另一个术语所需的一个字符更改的次数。这些更改可以包括：</p>\n<ul>\n<li>\n<p>更改字符（box → fox）</p>\n</li>\n<li>\n<p>删除字符（black → lack）</p>\n</li>\n<li>\n<p>插入字符（sic → sick）</p>\n</li>\n<li>\n<p>转置两个相邻字符（act → cat）</p>\n</li>\n</ul>\n<p>为了找到相似的术语， <code>fuzzy</code>  查询会在指定的编辑距离内创建一组搜索词的所有可能的变体或扩展。然后查询返回每个扩展的完全匹配。通过 <code>fuzziness </code> 修改编辑距离。一般使用默认值 <code>AUTO</code> ，根据术语的长度生成编辑距离。</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"fuzzy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image131.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.2199453193350833in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image133.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4090266841644794in&quot;}</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"fuzzy\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"value\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"fuzziness\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image135.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1100131233595802in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image137.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.1091797900262468in&quot;}</p>\n</blockquote>\n<h5 id=\"单字段排序\"><a class=\"anchor\" href=\"#单字段排序\">#</a> 单字段排序</h5>\n<p>sort 可以让我们按照不同的字段进行排序，并且通过 order 指定排序的方式。desc 降序，asc 升序。</p>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token property\">\"sort\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"order\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"desc\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image139.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1670286526684164in&quot;}</p>\n<p>服务器响应结果：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image141.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.2533464566929133in&quot;}</p>\n</blockquote>\n<h5 id=\"多字段排序\"><a class=\"anchor\" href=\"#多字段排序\">#</a> 多字段排序</h5>\n<p>假定我们想要结合使用 age 和 _score 进行查询，并且匹配的结果首先按照年龄排序，然后按照相关性得分排序</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"sort\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"order\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"desc\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token property\">\"_score\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"order\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"desc\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image143.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9953619860017497in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image145.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4706933508311462in&quot;}</p>\n<h5 id=\"高亮查询\"><a class=\"anchor\" href=\"#高亮查询\">#</a> 高亮查询</h5>\n<p>在进行关键字搜索时，搜索出的内容中的关键字会显示不同的颜色，称之为高亮。</p>\n<ul>\n<li>在百度搜索 &quot;京东&quot;</li>\n</ul>\n<img data-src=\"/Distribution/Elasticsearch/image147.jpg\" class=\"\">{width=\"3.245833333333333in\"\n<p>height=&quot;2.546527777777778in&quot;}</p>\n<p>Elasticsearch 可以对查询内容中的关键字部分，进行标签和样式 (高亮) 的设置。</p>\n<p>在使用 match 查询的同时，加上一个 highlight 属性：</p>\n<ul>\n<li>\n<p>pre_tags：前置标签</p>\n</li>\n<li>\n<p>post_tags：后置标签</p>\n</li>\n<li>\n<p>fields：需要高亮的字段</p>\n</li>\n<li>\n<p>title：这里声明 title<br />\n 字段需要高亮，后面可以为这个字段设置特有配置，也可以空</p>\n</li>\n</ul>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"match\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token property\">\"highlight\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token property\">\"pre_tags\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;font color='red'>\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token property\">\"post_tags\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;/font>\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token property\">\"fields\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image148.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.167029746281715in&quot;}</p>\n<p>服务器响应结果：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image150.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.17001312335958in&quot;}</p>\n</blockquote>\n<h5 id=\"分页查询\"><a class=\"anchor\" href=\"#分页查询\">#</a> 分页查询</h5>\n<p>from：当前页的起始索引，默认从 0 开始。 from = (pageNum - 1) * size</p>\n<p>size：每页显示多少条</p>\n<p>在 Postman 中，向 ES 服务器发 <strong>GET</strong> 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"query\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"match_all\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"sort\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"order\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"desc\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token property\">\"from\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image152.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1685575240594925in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image154.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4611100174978127in&quot;}</p>\n<h5 id=\"聚合查询\"><a class=\"anchor\" href=\"#聚合查询\">#</a> 聚合查询</h5>\n<p>聚合允许使用者对 es 文档进行统计分析，类似与关系型数据库中的 group by，当然还有很多其他的聚合，例如取最大值、平均值等等。</p>\n<h6 id=\"对某个字段取最大值-max\"><a class=\"anchor\" href=\"#对某个字段取最大值-max\">#</a> 对某个字段取最大值 max</h6>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"max_age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"max\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image156.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1770286526684166in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image158.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4626377952755905in&quot;}</p>\n<h6 id=\"对某个字段取最大值-min\"><a class=\"anchor\" href=\"#对某个字段取最大值-min\">#</a> 对某个字段取最大值 min</h6>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"min_age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"min\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image160.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.167029746281715in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image162.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4626367016622923in&quot;}</p>\n<h6 id=\"对某个字段求和\"><a class=\"anchor\" href=\"#对某个字段求和\">#</a> 对某个字段求和</h6>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"sum_age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"sum\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image164.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1886953193350833in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image166.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4626367016622923in&quot;}</p>\n<h6 id=\"对某个字段求平均值\"><a class=\"anchor\" href=\"#对某个字段求平均值\">#</a> 对某个字段求平均值</h6>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"avg_age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"avg\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image168.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.167029746281715in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image170.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.2059722222222222in&quot;}</p>\n<h6 id=\"对某个字段的值进行去重之后再取总数\"><a class=\"anchor\" href=\"#对某个字段的值进行去重之后再取总数\">#</a> 对某个字段的值进行去重之后再取总数</h6>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"distinct_age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"cardinality\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image172.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1770286526684166in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image174.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.0776377952755904in&quot;}</p>\n<h6 id=\"state-聚合\"><a class=\"anchor\" href=\"#state-聚合\">#</a> State 聚合</h6>\n<p>stats 聚合，对某个字段一次性返回 count，max，min，avg 和 sum 五个指标</p>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"stats_age\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"stats\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image176.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1570286526684166in&quot;}</p>\n<p>服务器响应结果：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image178.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.0033464566929133in&quot;}</p>\n</blockquote>\n<h6 id=\"桶聚合查询\"><a class=\"anchor\" href=\"#桶聚合查询\">#</a> 桶聚合查询</h6>\n<p>桶聚和相当于 sql 中的 group by 语句 terms 聚合，分组统计</p>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"age_groupby\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"terms\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image180.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.1685564304461944in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image182.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.6794433508311462in&quot;}</p>\n<h6 id=\"在-terms-分组下再进行聚合\"><a class=\"anchor\" href=\"#在-terms-分组下再进行聚合\">#</a> 在 terms 分组下再进行聚合</h6>\n<p>在 Postman 中，向 ES 服务器发 GET 请求：<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL3N0dWRlbnQvX3NlYXJjaA==\">http://127.0.0.1:9200/student/_search</span></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token property\">\"age_groupby\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t\t<span class=\"token property\">\"terms\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t\t<span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"age\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token property\">\"aggs\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token property\">\"sum_age\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token property\">\"sum\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token property\">\"field\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image184.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.0683464566929133in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image186.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.6670964566929134in&quot;}</p>\n<h3 id=\"225-java-api-操作\"><a class=\"anchor\" href=\"#225-java-api-操作\">#</a> 2.2.5 Java API 操作</h3>\n<p>Elasticsearch 软件是由 Java 语言开发的，所以也可以通过 Java API 的方式对<br />\n Elasticsearch</p>\n<p>服务进行访问</p>\n<h4 id=\"2251-创建-maven-项目\"><a class=\"anchor\" href=\"#2251-创建-maven-项目\">#</a> 2.2.5.1 创建 Maven 项目</h4>\n<p>我们在 IDEA 开发工具中创建 Maven 项目 (模块也可) ES</p>\n<img data-src=\"/Distribution/Elasticsearch/image188.jpg\" class=\"\">{width=\"2.8703608923884514in\"\n<p>height=&quot;2.090430883639545in&quot;}</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;dependencies></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        &lt;dependency></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            &lt;groupId>org.elasticsearch&lt;/groupId></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            &lt;artifactId>elasticsearch&lt;/artifactId></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            &lt;version><span class=\"token number\">7.8</span>.<span class=\"token number\">0</span>&lt;/version></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        &lt;/dependency></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        &lt;!-- elasticsearch 的客户端 --></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        &lt;dependency></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            &lt;groupId>org.elasticsearch.client&lt;/groupId></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            &lt;artifactId>elasticsearch-rest-high-level-client&lt;/artifactId></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            &lt;version><span class=\"token number\">7.8</span>.<span class=\"token number\">0</span>&lt;/version></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        &lt;/dependency></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        &lt;!-- elasticsearch 依赖 <span class=\"token number\">2</span>.x 的 log4j --></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        &lt;dependency></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            &lt;groupId>org.apache.logging.log4j&lt;/groupId></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            &lt;artifactId>log4j-api&lt;/artifactId></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            &lt;version><span class=\"token number\">2.8</span>.<span class=\"token number\">2</span>&lt;/version></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        &lt;/dependency></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        &lt;dependency></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            &lt;groupId>org.apache.logging.log4j&lt;/groupId></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            &lt;artifactId>log4j-core&lt;/artifactId></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            &lt;version><span class=\"token number\">2.8</span>.<span class=\"token number\">2</span>&lt;/version></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        &lt;/dependency></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        &lt;dependency></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            &lt;groupId>com.fasterxml.jackson.core&lt;/groupId></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            &lt;artifactId>jackson-databind&lt;/artifactId></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            &lt;version><span class=\"token number\">2.9</span>.<span class=\"token number\">9</span>&lt;/version></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        &lt;/dependency></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        &lt;!-- junit 单元测试 --></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        &lt;dependency></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            &lt;groupId>junit&lt;/groupId></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            &lt;artifactId>junit&lt;/artifactId></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            &lt;version><span class=\"token number\">4.12</span>&lt;/version></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        &lt;/dependency></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    &lt;/dependencies></pre></td></tr></table></figure><h4 id=\"2252-客户端对象\"><a class=\"anchor\" href=\"#2252-客户端对象\">#</a> 2.2.5.2 客户端对象</h4>\n<p>创建 com.atguigu.es.test.Elasticsearch01_Client 类，代码中创建<br />\n Elasticsearch 客户端对象</p>\n<p>因为早期版本的客户端对象已经不再推荐使用，且在未来版本中会被删除，所以这里我们采</p>\n<p>用高级 REST 客户端对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建客户端对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">RestHighLevelClient</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestHighLevelClient</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">RestClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9200</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 关闭客户端连接</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image190.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.4829297900262468in&quot;} 注意：<strong>9200</strong> 端口为 Elasticsearch 的 Web<br />\n 通信端口，<strong>localhost</strong> 为启动 ES 服务的主机名</p>\n<img data-src=\"/Distribution/Elasticsearch/image192.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4843044619422572in&quot;}</p>\n<h4 id=\"2253-索引操作\"><a class=\"anchor\" href=\"#2253-索引操作\">#</a> 2.2.5.3 索引操作</h4>\n<p>ES 服务器正常启动后，可以通过 Java API 客户端对象对 ES 索引进行操作</p>\n<h5 id=\"创建索引-2\"><a class=\"anchor\" href=\"#创建索引-2\">#</a> 创建索引</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建索引 - 请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">CreateIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CreateIndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送请求，获取响应</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">CreateIndexResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">boolean</span> acknowledged <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isAcknowledged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 响应状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作状态 = \"</span> <span class=\"token operator\">+</span> acknowledged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image194.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.5676377952755907in&quot;}</p>\n<h5 id=\"查看索引\"><a class=\"anchor\" href=\"#查看索引\">#</a> 查看索引</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询索引 - 请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">GetIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetIndexRequest</span><span class=\"token punctuation\">(</span>\\\"user\\\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送请求，获取响应</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">GetIndexResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                              </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aliases:\"</span><span class=\"token operator\">+</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getAliases</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mappings:\"</span><span class=\"token operator\">+</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getMappings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings:\"</span><span class=\"token operator\">+</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image196.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.5261100174978128in&quot;}</p>\n<h5 id=\"删除索引-2\"><a class=\"anchor\" href=\"#删除索引-2\">#</a> 删除索引</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除索引 - 请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">DeleteIndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteIndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 发送请求，获取响应</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">AcknowledgedResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 操作结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"操作结果 ： \"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isAcknowledged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image198.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.110693350831146in&quot;}</p>\n<h4 id=\"2254-文档操作\"><a class=\"anchor\" href=\"#2254-文档操作\">#</a> 2.2.5.4 文档操作</h4>\n<h5 id=\"新增文档\"><a class=\"anchor\" href=\"#新增文档\">#</a> 新增文档</h5>\n<h6 id=\"创建数据模型\"><a class=\"anchor\" href=\"#创建数据模型\">#</a> 创建数据模型</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getSex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> sex<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sex <span class=\"token operator\">=</span> sex<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h6 id=\"创建数据添加到文档中\"><a class=\"anchor\" href=\"#创建数据添加到文档中\">#</a> 创建数据，添加到文档中</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 新增文档 - 请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">IndexRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 设置索引及唯一性标识</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建数据对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>user<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>user<span class=\"token punctuation\">.</span><span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>user<span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">String</span> productJson <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 添加文档数据，数据格式为 JSON 格式</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>productJson<span class=\"token punctuation\">,</span><span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 客户端发送请求，获取响应对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">IndexResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">////3. 打印结果信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_index:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_id:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_result:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image200.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4623600174978129in&quot;}</p>\n<h5 id=\"修改文档-2\"><a class=\"anchor\" href=\"#修改文档-2\">#</a> 修改文档</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 修改文档 - 请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">UpdateRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 配置修改参数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置请求体，对数据进行修改</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">doc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"女\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 客户端发送请求，获取响应对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">UpdateResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_index:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_id:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_result:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image202.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.1291797900262468in&quot;}</p>\n</blockquote>\n<h5 id=\"查询文档\"><a class=\"anchor\" href=\"#查询文档\">#</a> 查询文档</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 创建请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">GetRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 客户端发送请求，获取响应对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">GetResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">////3. 打印结果信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_index:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_type:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_id:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"source:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image204.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.5059700349956255in&quot;}</p>\n<h5 id=\"删除文档-2\"><a class=\"anchor\" href=\"#删除文档-2\">#</a> 删除文档</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">DeleteRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 客户端发送请求，获取响应对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">DeleteResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 打印信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image206.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4961100174978128in&quot;}</p>\n<h5 id=\"批量操作\"><a class=\"anchor\" href=\"#批量操作\">#</a> 批量操作</h5>\n<h6 id=\"批量新增\"><a class=\"anchor\" href=\"#批量新增\">#</a> 批量新增</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建批量新增请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">BulkRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BulkRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token class-name\">IndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                                                           <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1002\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                                               <span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">IndexRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">XContentType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                                           <span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 客户端发送请求，获取响应对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">BulkResponse</span> responses <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">bulk</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 打印结果信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> responses<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"items:\"</span> <span class=\"token operator\">+</span> responses<span class=\"token punctuation\">.</span><span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>执行结果为：</p>\n<img data-src=\"/Distribution/Elasticsearch/image208.jpg\" class=\"\">{width=\"5.7732786526684166in\"\n<p>height=&quot;1.9161242344706912in&quot;}</p>\n<h6 id=\"批量删除\"><a class=\"anchor\" href=\"#批量删除\">#</a> 批量删除</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建批量删除请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">BulkRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BulkRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1001\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1002\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DeleteRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"user\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1003\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 客户端发送请求，获取响应对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">BulkResponse</span> responses <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">bulk</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 打印结果信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> responses<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"items:\"</span> <span class=\"token operator\">+</span> responses<span class=\"token punctuation\">.</span><span class=\"token function\">getItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image210.jpg\" class=\"\">{width=\"5.834388670166229in\"\n<p>height=&quot;1.6724584426946631in&quot;}</p>\n<h4 id=\"2255-高级查询\"><a class=\"anchor\" href=\"#2255-高级查询\">#</a> 2.2.5.5 高级查询</h4>\n<h5 id=\"请求体查询\"><a class=\"anchor\" href=\"#请求体查询\">#</a> 请求体查询</h5>\n<h6 id=\"查询所有索引数据\"><a class=\"anchor\" href=\"#查询所有索引数据\">#</a> 查询所有索引数据</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建搜索请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 构建查询的请求体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 查询所有数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchAllQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 查询匹配</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isTimedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaxScore:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hits========>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 输出每条查询的结果信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image212.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.6494586614173228in&quot;}</p>\n</blockquote>\n<h6 id=\"term-查询查询条件为关键字\"><a class=\"anchor\" href=\"#term-查询查询条件为关键字\">#</a> term 查询，查询条件为关键字</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建搜索请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 构建查询的请求体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">termQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 查询匹配</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isTimedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaxScore:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hits========>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 输出每条查询的结果信息</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image214.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.7070964566929134in&quot;}</p>\n<h6 id=\"分页查询-2\"><a class=\"anchor\" href=\"#分页查询-2\">#</a> 分页查询</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建搜索请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 构建查询的请求体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchAllQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 分页查询</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 当前页其实索引 (第一条数据的顺序号)，from</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 每页显示多少条 size</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 查询匹配</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isTimedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaxScore:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hits========>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 输出每条查询的结果信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image216.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.2752909011373579in&quot;}</p>\n</blockquote>\n<h6 id=\"数据排序\"><a class=\"anchor\" href=\"#数据排序\">#</a> 数据排序</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构建查询的请求体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchAllQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 排序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">SortOrder</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ASC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 查询匹配</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isTimedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaxScore:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hits========>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 输出每条查询的结果信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image218.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.4740409011373579in&quot;}</p>\n<h6 id=\"过滤字段\"><a class=\"anchor\" href=\"#过滤字段\">#</a> 过滤字段</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建搜索请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 构建查询的请求体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchAllQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 查询字段过滤</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> excludes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> includes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">fetchSource</span><span class=\"token punctuation\">(</span>includes<span class=\"token punctuation\">,</span> excludes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 查询匹配</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isTimedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaxScore:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hits========>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 输出每条查询的结果信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image220.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.7180686789151356in&quot;}</p>\n<h6 id=\"bool-查询\"><a class=\"anchor\" href=\"#bool-查询\">#</a> Bool 查询</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建搜索请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 构建查询的请求体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">BoolQueryBuilder</span> boolQueryBuilder <span class=\"token operator\">=</span> <span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">boolQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 必须包含</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>boolQueryBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">must</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 一定不含</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>boolQueryBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">mustNot</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 可能包含</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>boolQueryBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">should</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">matchQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>boolQueryBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 查询匹配</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isTimedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaxScore:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hits========>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 输出每条查询的结果信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image222.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.1711242344706911in&quot;}</p>\n</blockquote>\n<h6 id=\"范围查询-2\"><a class=\"anchor\" href=\"#范围查询-2\">#</a> 范围查询</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建搜索请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 构建查询的请求体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">RangeQueryBuilder</span> rangeQuery <span class=\"token operator\">=</span> <span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">rangeQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 大于等于</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>rangeQuery<span class=\"token punctuation\">.</span><span class=\"token function\">gte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 小于等于</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>rangeQuery<span class=\"token punctuation\">.</span><span class=\"token function\">lte</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"40\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>rangeQuery<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 查询匹配</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isTimedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaxScore:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hits========>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 输出每条查询的结果信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image224.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.3666130796150482in&quot;}</p>\n<h6 id=\"模糊查询-2\"><a class=\"anchor\" href=\"#模糊查询-2\">#</a> 模糊查询</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建搜索请求对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 构建查询的请求体</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">fuzzyQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fuzziness</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Fu</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                                                          zziness<span class=\"token punctuation\">.</span><span class=\"token constant\">ONE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 查询匹配</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeout:\"</span> <span class=\"token operator\">+</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">isTimedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MaxScore:\"</span> <span class=\"token operator\">+</span> hits<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hits========>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 输出每条查询的结果信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;========\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image226.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.421402012248469in&quot;}</p>\n</blockquote>\n<h5 id=\"高亮查询-2\"><a class=\"anchor\" href=\"#高亮查询-2\">#</a> 高亮查询</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 高亮查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 创建查询请求体构建器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 构建查询方式：高亮查询</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">TermsQueryBuilder</span> termsQueryBuilder <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">QueryBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">termsQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 设置查询方式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span>termsQueryBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 构建高亮字段</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">HighlightBuilder</span> highlightBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HighlightBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>highlightBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">preTags</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;font color='red'>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置标签前缀</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>highlightBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">postTags</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;/font>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置标签后缀</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>highlightBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置高亮字段</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 设置高亮构建对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">highlighter</span><span class=\"token punctuation\">(</span>highlightBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 设置请求体</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//3. 客户端发送请求，获取响应对象</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//4. 打印响应结果</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"took::\"</span><span class=\"token operator\">+</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">getTook</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time_out::\"</span><span class=\"token operator\">+</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">isTimedOut</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"total::\"</span><span class=\"token operator\">+</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"max_score::\"</span><span class=\"token operator\">+</span>hits<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxScore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hits::::>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SearchHit</span> hit <span class=\"token operator\">:</span> hits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">String</span> sourceAsString <span class=\"token operator\">=</span> hit<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceAsString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sourceAsString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 打印高亮结果</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">HighlightField</span><span class=\"token punctuation\">></span></span> highlightFields <span class=\"token operator\">=</span> hit<span class=\"token punctuation\">.</span><span class=\"token function\">getHighlightFields</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>highlightFields<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt;::::\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image228.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.6369575678040245in&quot;}</p>\n<h5 id=\"聚合查询-2\"><a class=\"anchor\" href=\"#聚合查询-2\">#</a> 聚合查询</h5>\n<h6 id=\"最大年龄\"><a class=\"anchor\" href=\"#最大年龄\">#</a> 最大年龄</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 高亮查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">aggregation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AggregationBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"maxAge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置请求体</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//3. 客户端发送请求，获取响应对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//4. 打印响应结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><img data-src=\"/Distribution/Elasticsearch/image230.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.47376312335958in&quot;}</p>\n<h6 id=\"分组统计\"><a class=\"anchor\" href=\"#分组统计\">#</a> 分组统计</h6>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 高亮查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SearchRequest</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">indices</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">SearchSourceBuilder</span> sourceBuilder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SearchSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sourceBuilder<span class=\"token punctuation\">.</span><span class=\"token function\">aggregation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AggregationBuilders</span><span class=\"token punctuation\">.</span><span class=\"token function\">terms</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age_groupby\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">field</span><span class=\"token punctuation\">(</span>\"ag</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>e\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 设置请求体</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>sourceBuilder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//3. 客户端发送请求，获取响应对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">SearchResponse</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RequestOptions</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//4. 打印响应结果</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">SearchHits</span> hits <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getHits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image232.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.4211242344706911in&quot;}</p>\n</blockquote>\n<h1 id=\"第3章-elasticsearch-环境\"><a class=\"anchor\" href=\"#第3章-elasticsearch-环境\">#</a> 第 3 章 Elasticsearch 环境</h1>\n<h2 id=\"31-相关概念\"><a class=\"anchor\" href=\"#31-相关概念\">#</a> 3.1 相关概念</h2>\n<h3 id=\"311-单机-集群\"><a class=\"anchor\" href=\"#311-单机-集群\">#</a> 3.1.1 单机 &amp; <sup>集群</sup></h3>\n<p>单台 Elasticsearch<br />\n 服务器提供服务，往往都有最大的负载能力，超过这个阈值，服务器性能就会大大降低甚至不可用，所以生产环境中，一般都是运行在指定服务器集群中。</p>\n<blockquote>\n<p>除了负载能力，单点服务器也存在其他问题：</p>\n</blockquote>\n<ul>\n<li>\n<p>单台机器存储容量有限</p>\n</li>\n<li>\n<p>单服务器容易出现单点故障，无法实现高可用</p>\n</li>\n<li>\n<p>单服务的并发处理能力有限配置服务器集群时，集群中节点数量没有限制，大于等于<br />\n 2<br />\n 个节点就可以看做是集群了。一般出于高性能及高可用方面来考虑集群中节点数量都是<br />\n 3 个以上。</p>\n</li>\n</ul>\n<h3 id=\"312-集群-cluster\"><a class=\"anchor\" href=\"#312-集群-cluster\">#</a> 3.1.2 集群 Cluster</h3>\n<p>一个集群就是由一个或多个服务器节点组织在一起，共同持有整个的数据，并一起提供索引和搜索功能。一个<br />\n Elasticsearch<br />\n 集群有一个唯一的名字标识，这个名字默认就是 &quot;elasticsearch&quot;。这个名字是重要的，因为一个节点只能通过指定某个集群的名字，来加入这个集群。</p>\n<h3 id=\"313-节点-node\"><a class=\"anchor\" href=\"#313-节点-node\">#</a> 3.1.3 节点 Node</h3>\n<p>集群中包含很多服务器，一个节点就是其中的一个服务器。作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</p>\n<p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对应于<br />\n Elasticsearch 集群中的哪些节点。</p>\n<p>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫做 &quot;elasticsearch&quot; 的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，它们将会自动地形成并加入到一个叫做</p>\n<p>&quot;elasticsearch&quot; 的集群中。在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运</p>\n<p>行任何 Elasticsearch<br />\n 节点，这时启动一个节点，会默认创建并加入一个叫做 &quot;elasticsearch&quot; 的</p>\n<h2 id=\"集群-32-windows-集群\"><a class=\"anchor\" href=\"#集群-32-windows-集群\">#</a> 集群。 3.2 Windows 集群</h2>\n<h3 id=\"321-部署集群\"><a class=\"anchor\" href=\"#321-部署集群\">#</a> 3.2.1 部署集群</h3>\n<ol>\n<li>创建 elasticsearch-cluster 文件夹，在内部复制三个 elasticsearch 服务</li>\n</ol>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image234.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;0.9618186789151356in&quot;}</p>\n</blockquote>\n<ol start=\"2\">\n<li>修改集群文件目录中每个节点的 config/elasticsearch.yml 配置文件</li>\n</ol>\n<ul>\n<li>node-1001 节点</li>\n</ul>\n<p>+----------------------------------------------------------------------+<br />\n| #节点 1 的配置信息：                                                  |<br />\n|                                                                      |<br />\n| #集群名称，节点之间要保持一致                                       |<br />\n|                                                                      |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIubmFtZQ==\">cluster.name</span>: my-elasticsearch                                       |<br />\n|                                                                      |<br />\n| #节点名称，集群内要唯一                                             |<br />\n|                                                                      |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL25vZGUubmFtZQ==\">node.name</span>: node-1001 node.master: true node.data: true               |<br />\n|                                                                      |<br />\n| #ip 地址                                                             |<br />\n|                                                                      |<br />\n| network.host: localhost                                              |<br />\n|                                                                      |<br />\n| #http 端口                                                           |<br />\n|                                                                      |<br />\n| http.port: 1001                                                      |<br />\n|                                                                      |<br />\n| #tcp 监听端口                                                        |<br />\n|                                                                      |<br />\n| transport.tcp.port: 9301                                             |<br />\n|                                                                      |<br />\n| #discovery.seed_hosts: [&quot;localhost:9301&quot;,                        |<br />\n| &quot;localhost:9302&quot;,&quot;localhost:9303&quot;]                              |<br />\n|                                                                      |<br />\n| #discovery.zen.fd.ping_timeout: 1m                                  |<br />\n|                                                                      |<br />\n| #discovery.zen.fd.ping_retries: 5                                   |<br />\n|                                                                      |<br />\n| #集群内的可以被选为主节点的节点列表                                 |<br />\n|                                                                      |<br />\n| #cluster.initial_master_nodes: [&quot;node-1&quot;,                        |<br />\n| &quot;node-2&quot;,&quot;node-3&quot;]                                              |<br />\n|                                                                      |<br />\n| #跨域配置                                                           |<br />\n|                                                                      |<br />\n| #action.destructive_requires_name: true http.cors.enabled: true     |<br />\n| http.cors.allow-origin: &quot;*&quot;                                       |<br />\n+----------------------------------------------------------------------+</p>\n<ul>\n<li>node-1002 节点</li>\n</ul>\n<p>+----------------------------------------------------------------------+<br />\n| #节点 2 的配置信息：                                                  |<br />\n|                                                                      |<br />\n| #集群名称，节点之间要保持一致                                       |<br />\n|                                                                      |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIubmFtZQ==\">cluster.name</span>: my-elasticsearch                                       |<br />\n|                                                                      |<br />\n| #节点名称，集群内要唯一                                             |<br />\n|                                                                      |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL25vZGUubmFtZQ==\">node.name</span>: node-1002 node.master: true node.data: true               |<br />\n|                                                                      |<br />\n| #ip 地址                                                             |<br />\n+======================================================================+<br />\n| network.host: localhost                                              |<br />\n|                                                                      |<br />\n| #http 端口                                                           |<br />\n|                                                                      |<br />\n| http.port: 1002                                                      |<br />\n|                                                                      |<br />\n| #tcp 监听端口                                                        |<br />\n|                                                                      |<br />\n| transport.tcp.port: 9302                                             |<br />\n|                                                                      |<br />\n| discovery.seed_hosts: [&quot;localhost:9301&quot;]                         |<br />\n| discovery.zen.fd.ping_timeout: 1m discovery.zen.fd.ping_retries: 5   |<br />\n|                                                                      |<br />\n| #集群内的可以被选为主节点的节点列表                                 |<br />\n|                                                                      |<br />\n| #cluster.initial_master_nodes: [&quot;node-1&quot;,                        |<br />\n| &quot;node-2&quot;,&quot;node-3&quot;]                                              |<br />\n|                                                                      |<br />\n| #跨域配置                                                           |<br />\n|                                                                      |<br />\n| #action.destructive_requires_name: true http.cors.enabled: true     |<br />\n| http.cors.allow-origin: &quot;*&quot;                                       |<br />\n+----------------------------------------------------------------------+</p>\n<ul>\n<li>node-1003 节点</li>\n</ul>\n<p>+----------------------------------------------------------------------+<br />\n| #节点 3 的配置信息：                                                  |<br />\n|                                                                      |<br />\n| #集群名称，节点之间要保持一致                                       |<br />\n|                                                                      |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIubmFtZQ==\">cluster.name</span>: my-elasticsearch                                       |<br />\n|                                                                      |<br />\n| #节点名称，集群内要唯一                                             |<br />\n|                                                                      |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL25vZGUubmFtZQ==\">node.name</span>: node-1003 node.master: true node.data: true               |<br />\n|                                                                      |<br />\n| #ip 地址                                                             |<br />\n|                                                                      |<br />\n| network.host: localhost                                              |<br />\n|                                                                      |<br />\n| #http 端口                                                           |<br />\n|                                                                      |<br />\n| http.port: 1003                                                      |<br />\n|                                                                      |<br />\n| #tcp 监听端口                                                        |<br />\n|                                                                      |<br />\n| transport.tcp.port: 9303                                             |<br />\n|                                                                      |<br />\n| #候选主节点的地址，在开启服务后可以被选为主节点                     |<br />\n|                                                                      |<br />\n| discovery.seed_hosts: [&quot;localhost:9301&quot;, &quot;localhost:9302&quot;]     |<br />\n| discovery.zen.fd.ping_timeout: 1m discovery.zen.fd.ping_retries: 5   |<br />\n|                                                                      |<br />\n| #集群内的可以被选为主节点的节点列表                                 |<br />\n|                                                                      |<br />\n| #cluster.initial_master_nodes: [&quot;node-1&quot;,                        |<br />\n| &quot;node-2&quot;,&quot;node-3&quot;]                                              |<br />\n|                                                                      |<br />\n| #跨域配置                                                           |<br />\n|                                                                      |<br />\n| #action.destructive_requires_name: true http.cors.enabled: true     |<br />\n| http.cors.allow-origin: &quot;*&quot;                                       |<br />\n+----------------------------------------------------------------------+</p>\n<h3 id=\"322-启动集群\"><a class=\"anchor\" href=\"#322-启动集群\">#</a> 3.2.2 启动集群</h3>\n<ol>\n<li>启动前先删除每个节点中的 data 目录中所有内容（如果存在）</li>\n</ol>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image236.jpg\" class=\"\">{width=\"4.759028871391076in\"\n<p>height=&quot;1.026402012248469in&quot;}</p>\n</blockquote>\n<ol start=\"2\">\n<li>分别双击执行 bin/elasticsearch.bat,<br />\n 启动节点服务器，启动后，会自动加入指定名称的</li>\n</ol>\n<blockquote>\n<p>集群</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image242.jpg\" class=\"\">{width=\"4.444444444444445in\"\n<p>height=&quot;0.7602909011373579in&quot;}</p>\n<h3 id=\"323-测试集群\"><a class=\"anchor\" href=\"#323-测试集群\">#</a> 3.2.3 测试集群</h3>\n<p>查看集群状态</p>\n<img data-src=\"/Distribution/Elasticsearch/image248.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;3.5234416010498686in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image252.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;2.755847550306212in&quot;}</p>\n</blockquote>\n<p> node-1003 节点</p>\n<img data-src=\"/Distribution/Elasticsearch/image256.jpg\" class=\"\">{width=\"5.770138888888889in\"\n<p>height=&quot;0.3340288713910761in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image257.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;4.259597550306212in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image261.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.7182086614173229in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image265.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;2.7569575678040246in&quot;}</p>\n</blockquote>\n<h2 id=\"33-linux-单机\"><a class=\"anchor\" href=\"#33-linux-单机\">#</a> 3.3 Linux 单机</h2>\n<h3 id=\"331-软件下载\"><a class=\"anchor\" href=\"#331-软件下载\">#</a> 3.3.1 软件下载</h3>\n<p>软件下载地址：<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcy9lbGFzdGljc2VhcmNoLTctOC0w\">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0</span></span>[<span class=\"ul\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcy9lbGFzdGljc2VhcmNoLTctOC0w\">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcy9lbGFzdGljc2VhcmNoLTctOC0w\">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0</span>)</p>\n<img data-src=\"/Distribution/Elasticsearch/image269.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.7736384514435695in&quot;}</p>\n<p><strong>1)</strong> 解压软件将下载的软件解压缩</p>\n<p># 解压缩</p>\n<p>tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module</p>\n<p># 改名</p>\n<p>mv elasticsearch-7.8.0 es</p>\n<ol start=\"2\">\n<li>创建用户因为安全问题，Elasticsearch 不允许 root<br />\n 用户直接运行，所以要创建新用户，在 root 用户中创建新用户</li>\n</ol>\n<p>+----------------------------------------------------------------------+<br />\n| useradd es #新增 es 用户 passwd es #为 es 用户设置密码                 |<br />\n|                                                                      |<br />\n| userdel -r es #如果错了，可以删除再加 chown -R es:es /opt/module/es |<br />\n| #文件夹所有者                                                       |<br />\n+----------------------------------------------------------------------+</p>\n<ol start=\"3\">\n<li>修改配置文件</li>\n</ol>\n<p>修改 /opt/module/es/config/elasticsearch.yml 文件</p>\n<p># 加入如下配置</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIubmFtZQ==\">cluster.name</span>: elasticsearch <span class=\"exturl\" data-url=\"aHR0cDovL25vZGUubmFtZQ==\">node.name</span>: node-1 network.host: 0.0.0.0<br />\nhttp.port: 9200</p>\n<p>cluster.initial_master_nodes: [&quot;node-1&quot;]</p>\n<p>修改 /etc/security/limits.conf</p>\n<p>+---------------------------------------------------------------+<br />\n| # 在文件末尾中增加下面内容 # 每个进程可以打开的文件数的限制 |<br />\n|                                                               |<br />\n| es soft nofile 65536 es hard nofile 65536                     |<br />\n+---------------------------------------------------------------+</p>\n<p>修改 /etc/security/limits.d/20-nproc.conf</p>\n<p>+---------------------------------------------------------------+<br />\n| # 在文件末尾中增加下面内容 # 每个进程可以打开的文件数的限制 |<br />\n|                                                               |<br />\n| es soft nofile 65536 es hard nofile 65536                     |<br />\n+---------------------------------------------------------------+</p>\n<p># 操作系统级别对每个用户创建的进程数的限制</p>\n<p>* hard nproc 4096</p>\n<p># 注：* 带表 Linux 所有用户名称</p>\n<p>修改 /etc/sysctl.conf</p>\n<p># 在文件中增加下面内容</p>\n<p># 一个进程可以拥有的 VMA (虚拟内存区域) 的数量，默认值为 65536<br />\nvm.max_map_count=655360</p>\n<p>重新加载</p>\n<p>sysctl -p</p>\n<p><strong>3.3.3</strong> 启动软件使用 ES 用户启动</p>\n<p>cd /opt/module/es/</p>\n<p>#启动</p>\n<p>bin/elasticsearch</p>\n<p>#后台启动</p>\n<p>，如果文件所属用户不匹配，会发生错误，需要重新进行修改用户和用户组</p>\n<img data-src=\"/Distribution/Elasticsearch/image271.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;3.1739031058617675in&quot;}</p>\n<p>#暂时关闭防火墙</p>\n<p>systemctl stop firewalld</p>\n<p>#永久关闭防火墙</p>\n<p>systemctl enable firewalld.service<br />\n# 打开放货抢永久性生效，重启后不会复原 systemctl disable<br />\nfirewalld.service #关闭防火墙，永久性生效，重启后不会复原</p>\n<h3 id=\"333-测试软件\"><a class=\"anchor\" href=\"#333-测试软件\">#</a> 3.3.3 测试软件</h3>\n<p>浏览器中输入地址：<span class=\"exturl\" data-url=\"aHR0cDovL2xpbnV4MTo5MjAwLw==\">http://linux1:9200/</span></p>\n<img data-src=\"/Distribution/Elasticsearch/image273.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.7683694225721784in&quot;}</p>\n<h3 id=\"341-软件下载\"><a class=\"anchor\" href=\"#341-软件下载\">#</a> 3.4.1 软件下载</h3>\n<p>软件下载地址：<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcy9lbGFzdGljc2VhcmNoLTctOC0w\">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0</span></span>[<span class=\"ul\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcy9lbGFzdGljc2VhcmNoLTctOC0w\">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZWxhc3RpYy5jby9jbi9kb3dubG9hZHMvcGFzdC1yZWxlYXNlcy9lbGFzdGljc2VhcmNoLTctOC0w\">https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-8-0</span>)</p>\n<img data-src=\"/Distribution/Elasticsearch/image269.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.7736384514435695in&quot;}</p>\n<p><strong>1)</strong> 解压软件将下载的软件解压缩</p>\n<p># 解压缩</p>\n<p>tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz -C /opt/module</p>\n<p># 改名</p>\n<p>mv elasticsearch-7.8.0 es-cluster</p>\n<p>将软件分发到其他节点：linux2, linux3</p>\n<ol start=\"2\">\n<li>创建用户因为安全问题，Elasticsearch 不允许 root<br />\n 用户直接运行，所以要在每个节点中创建新用户，在 root 用户中创建新用户</li>\n</ol>\n<p>+----------------------------------------------------------------------+<br />\n| useradd es #新增 es 用户 passwd es #为 es 用户设置密码                 |<br />\n|                                                                      |<br />\n| userdel -r es #如果错了，可以删除再加 chown -R es:es                |<br />\n| /opt/module/es-cluster #文件夹所有者                                |<br />\n+----------------------------------------------------------------------+</p>\n<ol start=\"3\">\n<li>修改配置文件</li>\n</ol>\n<p>修改 /opt/module/es/config/elasticsearch.yml 文件，分发文件</p>\n<p># 加入如下配置</p>\n<p>#集群名称</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIubmFtZQ==\">cluster.name</span>: cluster-es</p>\n<p>#节点名称，每个节点的名称不能重复 <span class=\"exturl\" data-url=\"aHR0cDovL25vZGUubmFtZQ==\">node.name</span>: node-1</p>\n<p>#ip 地址，每个节点的地址不能重复</p>\n<p>+----------------------------------------------------------------------+<br />\n| network.host: linux1                                                 |<br />\n|                                                                      |<br />\n| #是不是有资格主节点                                                 |<br />\n|                                                                      |<br />\n| node.master: true node.data: true http.port: 9200                    |<br />\n|                                                                      |<br />\n| # head 插件需要这打开这两个配置 http.cors.allow-origin: &quot;*&quot;      |<br />\n| http.cors.enabled: true http.max_content_length: 200mb               |<br />\n|                                                                      |<br />\n| #es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举 master   |<br />\n|                                                                      |<br />\n| cluster.initial_master_nodes: [&quot;node-1&quot;]                         |<br />\n|                                                                      |<br />\n| #es7.x 之后新增的配置，节点发现                                     |<br />\n|                                                                      |<br />\n| discovery.seed_hosts:                                                |<br />\n| [&quot;linux1:9300&quot;,&quot;linux2:9300&quot;,&quot;linux3:9300&quot;]                  |<br />\n| gateway.recover_after_nodes: 2 network.tcp.keep_alive: true          |<br />\n| network.tcp.no_delay: true                                           |<br />\n|                                                                      |<br />\n| transport.tcp.compress: true                                         |<br />\n|                                                                      |<br />\n| #集群内同时启动的数据任务个数，默认是 2 个                            |<br />\n|                                                                      |<br />\n| cluster.routing.allocation.cluster_concurrent_rebalance: 16          |<br />\n|                                                                      |<br />\n| #添加或删除节点及负载均衡时并发恢复的线程个数，默认 4 个              |<br />\n|                                                                      |<br />\n| cluster.routing.allocation.node_concurrent_recoveries: 16            |<br />\n|                                                                      |<br />\n| #初始化数据恢复时，并发恢复线程的个数，默认 4 个                      |<br />\n|                                                                      |<br />\n| cluster.routing.allocation.node_initial_primaries_recoveries: 16     |<br />\n+----------------------------------------------------------------------+</p>\n<p>修改 /etc/security/limits.conf ，分发文件</p>\n<p># 在文件末尾中增加下面内容</p>\n<p>es soft nofile 65536 es hard nofile 65536</p>\n<p>修改 /etc/security/limits.d/20-nproc.conf，分发文件</p>\n<p>+-------------------------------------------+<br />\n| # 在文件末尾中增加下面内容               |<br />\n|                                           |<br />\n| es soft nofile 65536 es hard nofile 65536 |<br />\n|                                           |<br />\n| * hard nproc 4096                        |<br />\n|                                           |<br />\n| # 注：* 带表 Linux 所有用户名称           |<br />\n+-------------------------------------------+</p>\n<p>修改 /etc/sysctl.conf</p>\n<p># 在文件中增加下面内容</p>\n<p>vm.max_map_count=655360</p>\n<p>重新加载</p>\n<p>sysctl -p</p>\n<h3 id=\"343-启动软件\"><a class=\"anchor\" href=\"#343-启动软件\">#</a> 3.4.3 启动软件</h3>\n<p>分别在不同节点上启动 ES 软件</p>\n<p>cd /opt/module/es-cluster</p>\n<p>#启动</p>\n<p>bin/elasticsearch</p>\n<p>#后台启动</p>\n<p>bin/elasticsearch -d</p>\n<h3 id=\"344-测试集群\"><a class=\"anchor\" href=\"#344-测试集群\">#</a> 3.4.4 测试集群</h3>\n<img data-src=\"/Distribution/Elasticsearch/image275.jpg\" class=\"\">{width=\"5.772916666666666in\"\n<p>height=&quot;0.5027777777777778in&quot;}</p>\n<h1 id=\"第4章-elasticsearch-进阶\"><a class=\"anchor\" href=\"#第4章-elasticsearch-进阶\">#</a> 第 4 章 Elasticsearch 进阶</h1>\n<h2 id=\"41-核心概念\"><a class=\"anchor\" href=\"#41-核心概念\">#</a> 4.1 核心概念</h2>\n<h3 id=\"411-索引index\"><a class=\"anchor\" href=\"#411-索引index\">#</a> 4.1.1 索引（Index）</h3>\n<p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母），并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索引。</p>\n<p>能搜索的数据必须索引，这样的好处是可以提高查询速度，比如：新华字典前面的目录就是索引的意思，目录可以提高查询速度。</p>\n<blockquote>\n<p><strong>Elasticsearch</strong> 索引的精髓：一切设计都是为了提高搜索的性能。</p>\n</blockquote>\n<h3 id=\"412-类型type\"><a class=\"anchor\" href=\"#412-类型type\">#</a> 4.1.2 类型（Type）</h3>\n<blockquote>\n<p>在一个索引中，你可以定义一种或多种类型。</p>\n</blockquote>\n<p>一个类型是你的索引的一个逻辑上的分类 / 分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。不同的版本，类型发生了不同的变化</p>\n<p>+------+---------------------------------------------------+<br />\n| 版本 | &gt; Type                                            |<br />\n+<mark><mark><mark>+</mark></mark></mark>=============================================+<br />\n| 5.x  | &gt; 支持多种 type                                   |<br />\n+------+---------------------------------------------------+<br />\n| 6.x  | &gt; 只能有一种 type                                 |<br />\n+------+---------------------------------------------------+<br />\n| 7.x  | &gt; 默认不再支持自定义索引类型（默认类型为：_doc） |<br />\n+------+---------------------------------------------------+</p>\n<h3 id=\"413-文档document\"><a class=\"anchor\" href=\"#413-文档document\">#</a> 4.1.3 文档（Document）</h3>\n<blockquote>\n<p>一个文档是一个可被索引的基础信息单元，也就是一条数据</p>\n</blockquote>\n<p>比如：你可以拥有某一个客户的文档，某一个产品的一个文档，当然，也可以拥有某个订单的一个文档。文档以<br />\n JSON（Javascript Object Notation）格式来表示，而 JSON<br />\n 是一个到处存在的互联网数据交互格式。</p>\n<blockquote>\n<p>在一个 index/type 里面，你可以存储任意多的文档。</p>\n</blockquote>\n<p><strong>4.1.3</strong> 字段（<strong>Field</strong>）</p>\n<blockquote>\n<p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识。</p>\n</blockquote>\n<h3 id=\"415-映射mapping\"><a class=\"anchor\" href=\"#415-映射mapping\">#</a> 4.1.5 映射（Mapping）</h3>\n<blockquote>\n<p>mapping<br />\n 是处理数据的方式和规则方面做一些限制，如：某个字段的数据类型、默认值、</p>\n</blockquote>\n<p>分析器、是否被索引等等。这些都是映射里面可以设置的，其它就是处理 ES<br />\n 里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p>\n<h3 id=\"416-分片shards\"><a class=\"anchor\" href=\"#416-分片shards\">#</a> 4.1.6 分片（Shards）</h3>\n<p>一个索引可以存储超出单个节点硬件限制的大量数据。比如，一个具有 10<br />\n 亿文档数据的索引占据 1TB<br />\n 的磁盘空间，而任一节点都可能没有这样大的磁盘空间。或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch<br />\n 提供了将索引划分成多份的能力，每一份就称之为分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每个分片本身也是一个功能完善并且独立的 &quot;索引&quot;，这个 &quot;索引&quot; 可以被放置到集群中的任何节点上。</p>\n<blockquote>\n<p>分片很重要，主要有两方面的原因：</p>\n</blockquote>\n<ol>\n<li>\n<p>允许你水平分割 / 扩展你的内容容量。</p>\n</li>\n<li>\n<p>允许你在分片之上进行分布式的、并行的操作，进而提高性能 / 吞吐量。</p>\n</li>\n</ol>\n<p>至于一个分片怎样分布，它的文档怎样聚合和搜索请求，是完全由 Elasticsearch<br />\n 管理的，对于作为用户的你来说，这些都是透明的，无需过分关心。</p>\n<p>被混淆的概念是，一个 <strong>Lucene</strong> 索引 我们在 <strong>Elasticsearch</strong> 称作 分片<br />\n。 一个 <strong>Elasticsearch</strong> 索引 是分片的集合。 当 <strong>Elasticsearch</strong><br />\n 在索引中搜索的时候， 他发送查询到每一个属于索引的分片 **(Lucene**<br />\n 索引 **)**，然后合并每个分片的结果到一个全局的结果集。</p>\n<h3 id=\"417-副本replicas\"><a class=\"anchor\" href=\"#417-副本replicas\">#</a> 4.1.7 副本（Replicas<sup>）</sup></h3>\n<p>在一个网络 /<br />\n 云的环境里，失败随时都可能发生，在某个分片 / 节点不知怎么的就处于离线状态，或者由于任何原因消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch<br />\n 允许你创建分片的一份或多份拷贝，这些拷贝叫做复制分片 (副本)。</p>\n<blockquote>\n<p>复制分片之所以重要，有两个主要原因：</p>\n</blockquote>\n<ul>\n<li>\n<p>在分片 / 节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分片从不与原 / 主要（original/primary）分片置于同一节点上是非常重要的。</p>\n</li>\n<li>\n<p>扩展你的搜索量 / 吞吐量，因为搜索可以在所有的副本上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制<br />\n 0 次（意思是没有复制）</p>\n</li>\n</ul>\n<p>或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你事后不能改变分片的数量。默认情况下，<br />\nElasticsearch 中的每个索引被分片 1 个主分片和 1<br />\n 个复制，这意味着，如果你的集群中至少有两个节点，你的索引将会有 1<br />\n 个主分片和另外 1 个复制分片（1 个完全拷贝），这样的话每个索引总共就有 2<br />\n 个分片，我们需要根据索引需要确定分片个数。</p>\n<h3 id=\"418-分配allocation\"><a class=\"anchor\" href=\"#418-分配allocation\">#</a> 4.1.8 分配（Allocation<sup>）</sup></h3>\n<p>将分片分配给某个节点的过程，包括分配主分片或者副本。如果是副本，还包含从主分片复制数据的过程。这个过程是由<br />\n master 节点完成的。</p>\n<h2 id=\"42-系统架构\"><a class=\"anchor\" href=\"#42-系统架构\">#</a> 4.2 系统架构</h2>\n<img data-src=\"/Distribution/Elasticsearch/image276.jpg\" class=\"\">{width=\"4.539583333333334in\"\n<p>height=&quot;2.285416666666667in&quot;}</p>\n<p>一个运行中的 Elasticsearch<br />\n 实例称为一个节点，而集群是由一个或者多个拥有相同</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIubmFtZQ==\">cluster.name</span> 配置的节点组成，<br />\n它们共同承担数据和负载的压力。当有节点加入集群中或者从集群中移除节点时，集群将会重新平均分布所有的数据。</p>\n<p>当一个节点被选举成为主节点时，<br />\n它将负责管理集群范围内的所有变更，例如增加、删除索引，或者增加、删除节点等。<br />\n而主节点并不需要涉及到文档级别的变更和搜索等操作，所以当集群只拥有一个主节点的情况下，即使流量的增加它也不会成为瓶颈。<br />\n任何节点都可以成为主节点。我们的示例集群就只有一个节点，所以它同时也成为了主节点。</p>\n<p>作为用户，我们可以将请求发送到集群中的任何节点 ，包括主节点。<br />\n每个节点都知道任意文档所处的位置，并且能够将我们的请求直接转发到存储我们所需文档的节点。<br />\n无论我们将请求发送到哪个节点，它都能负责从各个包含我们所需文档的节点收集回数据，并将最终结果返回給客户端。<br />\nElasticsearch 对这一切的管理都是透明的。</p>\n<h2 id=\"43-分布式集群\"><a class=\"anchor\" href=\"#43-分布式集群\">#</a> 4.3 分布式集群</h2>\n<h3 id=\"431-单节点集群\"><a class=\"anchor\" href=\"#431-单节点集群\">#</a> 4.3.1 单节点集群</h3>\n<p>我们在包含一个空节点的集群内创建名为 users<br />\n 的索引，为了演示目的，我们将分配 3</p>\n<p>个主分片和一份副本（每个主分片拥有一个副本分片）</p>\n<p>{</p>\n<p>&quot;settings&quot; : {</p>\n<p>&quot;number_of_shards&quot; : 3,</p>\n<p>&quot;number_of_replicas&quot; : 1</p>\n<img data-src=\"/Distribution/Elasticsearch/image277.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.9753619860017497in&quot;}</p>\n<p>+---+-------------------------------+-------------------------------+<br />\n|   | 集群健康值:yellow (3 of 6)   | :                             |<br />\n|   |                               | 表示当前集                    |<br />\n|   |                               | 群的全部主分片都正常运行，但  |<br />\n|   |                               | 是副本分片没有全部处在正常状  |<br />\n|   |                               |                               |<br />\n|   |                               | &gt; : 3 个主分片正常            |<br />\n|   |                               |                               |<br />\n|   |                               | : 3 个副本分片都是 Unassigned |<br />\n|   |                               | ------                        |<br />\n|   |                               | 它们都没有被分配到任何节点。  |<br />\n|   |                               | 在同一个节                    |<br />\n|   |                               | 点上既保存原始数据又保存副本  |<br />\n|   |                               | 是没有意义的，因为一旦失去了  |<br />\n|   |                               | 那个节点，我们也将丢失该节点  |<br />\n+=<mark>+</mark>=<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark>===+<br />\n|   | 态                            |                               |<br />\n|   |                               |                               |<br />\n|   | ![](../_Porgram_IT/pandoc-3.1.2/images/media              |                               |<br />\n|   | /image279.jpg){width=&quot;1.55in&quot; |                               |<br />\n|   | he                            |                               |<br />\n|   | ight=&quot;0.23402777777777778in&quot;} |                               |<br />\n|   |                               |                               |<br />\n|   | !                             |                               |<br />\n|   | <a href=\"images%5Cmedia%5Cimage280.jpg\"></a> |                               |<br />\n|   | {width=&quot;1.5743055555555556in&quot; |                               |<br />\n|   | he                            |                               |<br />\n|   | ight=&quot;0.22916666666666666in&quot;} |                               |<br />\n|   |                               |                               |<br />\n|   | 上的所有副本数据。            |                               |<br />\n+---+-------------------------------+-------------------------------+</p>\n<img data-src=\"/Distribution/Elasticsearch/image281.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.2754297900262468in&quot;} 我们的集群现在是拥有一个索引的单节点集群。所有<br />\n 3 个主分片都被分配在 node-1 。</p>\n<img data-src=\"/Distribution/Elasticsearch/image283.jpg\" class=\"\">{width=\"3.6206397637795273in\"\n<p>height=&quot;1.2504297900262467in&quot;}</p>\n<p>当前我们的集群是正常运行的，但是在硬件故障时有丢失数据的风险。</p>\n<h3 id=\"432-故障转移\"><a class=\"anchor\" href=\"#432-故障转移\">#</a> 4.3.2 故障转移</h3>\n<p>当集群中只有一个节点在运行时，意味着会有一个单点故障问题 ------ 没有冗余。<br />\n幸运的是，我们只需再启动一个节点即可防止数据丢失。当你在同一台机器上启动了第二个节点时，只要它和第一个节点有同样的<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIubmFtZQ==\"> cluster.name</span><br />\n 配置，它就会自动发现集群并加入到其中。但是在不同机器上启动节点的时候，为了加入到同一集群，你需要配置一个可连接到的单播主机列表。之所以配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的节点才会自动组成集群。</p>\n<p>如果启动了第二个节点，我们的集群将会拥有两个节点的集群 :<br />\n 所有主分片和副本分片都已被分配</p>\n<img data-src=\"/Distribution/Elasticsearch/image285.jpg\" class=\"\">{width=\"3.848973097112861in\"\n<p>height=&quot;1.291819772528434in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image287.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.2120964566929133in&quot;}</p>\n</blockquote>\n<p>+---+-------------------------------+-------------------------------+<br />\n|   | 集群健康值:green (6 of 6)    | : 表示所有 6 个分片（包括 3   |<br />\n|   |                               | 个主分片和 3                  |<br />\n|   |                               | 个副本分片）都在正常运行。    |<br />\n|   |                               |                               |<br />\n|   |                               | &gt; : 3 个主分片正常            |<br />\n|   |                               | &gt;                             |<br />\n|   |                               | &gt; :                           |<br />\n|   |                               | &gt; 当第二个节点加入到集群后，3 |<br />\n|   |                               | &gt; 个副本分片                  |<br />\n|   |                               | 将会分配到这个节点上 ------ 每  |<br />\n|   |                               |                               |<br />\n|   |                               | 个主分                        |<br />\n|   |                               | 片对应一个副本分片。这意味着  |<br />\n|   |                               | 当集群内任何一个节点出现问题  |<br />\n|   |                               | 时，我们的数据都完好无损。所  |<br />\n|   |                               |                               |<br />\n|   |                               | 有新近                        |<br />\n|   |                               | 被索引的文档都将会保存在主分  |<br />\n|   |                               | 片上，然后被并行的复制到对应  |<br />\n|   |                               | 的副本分片上。这就保证了我们  |<br />\n+=<mark>+</mark>=<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark>===+<br />\n|   | ![](../_Porgram_IT/pandoc-3.1.2/images/media              |                               |<br />\n|   | /image279.jpg){width=&quot;1.55in&quot; |                               |<br />\n|   | he                            |                               |<br />\n|   | ight=&quot;0.23402777777777778in&quot;} |                               |<br />\n|   |                               |                               |<br />\n|   | !                             |                               |<br />\n|   | <a href=\"images%5Cmedia%5Cimage289.jpg\"></a> |                               |<br />\n|   | {width=&quot;1.5291666666666666in&quot; |                               |<br />\n|   | h                             |                               |<br />\n|   | eight=&quot;0.2076388888888889in&quot;} |                               |<br />\n|   |                               |                               |<br />\n|   | 既可以从主分片                |                               |<br />\n|   | 又可以从副本分片上获得文档。  |                               |<br />\n+---+-------------------------------+-------------------------------+</p>\n<h3 id=\"433-水平扩容\"><a class=\"anchor\" href=\"#433-水平扩容\">#</a> 4.3.3 水平扩容</h3>\n<blockquote>\n<p>怎样为我们的正在增长中的应用程序按需扩容呢？当启动了第三个节点，我们的集群将</p>\n</blockquote>\n<p>会拥有三个节点的集群：为了分散负载而对分片进行重新分配</p>\n<img data-src=\"/Distribution/Elasticsearch/image290.jpg\" class=\"\">{width=\"4.412306430446194in\"\n<p>height=&quot;1.4633464566929133in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image292.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.4629297900262468in&quot;}</p>\n</blockquote>\n<p>+---+-------------------------------+-------------------------------+<br />\n|   | 集群健康值:green (6 of 6)    | : 表示所有 6 个分片（包括 3   |<br />\n|   |                               | 个主分片和 3                  |<br />\n|   |                               | 个副本分片）都在正常运行。    |<br />\n|   |                               |                               |<br />\n|   |                               | 上各有一个分片被迁移到了新的  |<br />\n|   |                               | Node 3                        |<br />\n|   |                               | 节点，现在每个节点上都拥有 2  |<br />\n|   |                               | 个分片，                      |<br />\n|   |                               |                               |<br />\n|   |                               | 这                            |<br />\n|   |                               | 表示每个节点的硬件资源（CPU,  |<br />\n|   |                               | RAM,                          |<br />\n|   |                               | I/O）将                       |<br />\n|   |                               | 被更少的分片所共享，每个分片  |<br />\n|   |                               |                               |<br />\n|   |                               | 分片是一个功                  |<br />\n|   |                               | 能完整的搜索引擎，它拥有使用  |<br />\n|   |                               | 一个节点上的所有资源的能力。  |<br />\n|   |                               | 我们这个拥有 6                |<br />\n|   |                               | 个分个副                      |<br />\n|   |                               | 本分片）的索引可以最大扩容到  |<br />\n|   |                               | 6                             |<br />\n|   |                               | 个节点，每个                  |<br />\n|   |                               | 节点上存在一个分片，并且每个  |<br />\n+=<mark>+</mark>=<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark></mark>===+<br />\n|   | !                             |                               |<br />\n|   | <a href=\"images%5Cmedia%5Cimage294.jpg\"></a> |                               |<br />\n|   | {width=&quot;1.4388888888888889in&quot; |                               |<br />\n|   | he                            |                               |<br />\n|   | ight=&quot;0.24513888888888888in&quot;} |                               |<br />\n|   |                               |                               |<br />\n|   | !                             |                               |<br />\n|   | <a href=\"images%5Cmedia%5Cimage295.jpg\"></a> |                               |<br />\n|   | {width=&quot;1.4479166666666667in&quot; |                               |<br />\n|   | height=&quot;0.20625in&quot;}           |                               |<br />\n|   |                               |                               |<br />\n|   | !                             |                               |<br />\n|   | <a href=\"images%5Cmedia%5Cimage296.jpg\"></a> |                               |<br />\n|   | {width=&quot;1.4583333333333333in&quot; |                               |<br />\n|   | height=&quot;0.21875in&quot;}           |                               |<br />\n|   |                               |                               |<br />\n|   | Node 1 和 Node 2 而不是之前的 |                               |<br />\n|   | 3 个。                        |                               |<br />\n|   |                               |                               |<br />\n|   | 的性能将会得到提升。          |                               |<br />\n|   |                               |                               |<br />\n|   | 片（3 个主分片和 3            |                               |<br />\n|   |                               |                               |<br />\n|   | 分片拥有所在节点的全部资源。  |                               |<br />\n+---+-------------------------------+-------------------------------+</p>\n<img data-src=\"/Distribution/Elasticsearch/image297.jpg\" class=\"\">{width=\"0.23472222222222222in\"\n<p>height=&quot;0.24166666666666667in&quot;} 但是如果我们想要扩容超过 <strong>6</strong><br />\n 个节点怎么办呢？</p>\n<p>主分片的数目在索引创建时就已经确定了下来。实际上，这个数目定义了这个索引能够存储<br />\n的最大数据量。（实际大小取决于你的数据、硬件和使用场景。）<br />\n但是，读操作 ------ 搜索和返回数据 ------ 可以同时被主分片 或<br />\n副本分片所处理，所以当你拥有越多的副本分片时，也将拥有越高的吞吐量。</p>\n<p>在运行中的集群上是可以动态调整副本分片数目的，我们可以按需伸缩集群。让我们把副本数从默认的<br />\n 1 增加到 2</p>\n<p>{</p>\n<p>&quot;number_of_replicas&quot; : 2</p>\n<p>}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image298.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.2958475503062117in&quot;}</p>\n</blockquote>\n<p>users 索引现在拥有 9 个分片：3 个主分片和 6 个副本分片。<br />\n这意味着我们可以将集群扩容到 9 个节点，每个节点上一个分片。相比原来 3<br />\n 个节点时，集群搜索性能可以提升 3 倍。</p>\n<img data-src=\"/Distribution/Elasticsearch/image300.jpg\" class=\"\">{width=\"3.973973097112861in\"\n<p>height=&quot;1.3033464566929134in&quot;}</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image302.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.5040409011373579in&quot;}</p>\n<p>当然，如果只是在相同节点数目的集群上增加更多的副本分片并不能提高性能，因为每</p>\n</blockquote>\n<p>个分片从节点上获得的资源会变少。 你需要增加更多的硬件资源来提升吞吐量。</p>\n<p>但是更多的副本分片数提高了数据冗余量：按照上面的节点配置，我们可以在失去<br />\n 2 个节点的情况下不丢失任何数据。</p>\n<h3 id=\"434-应对故障\"><a class=\"anchor\" href=\"#434-应对故障\">#</a> 4.3.4 应对故障</h3>\n<blockquote>\n<p>我们关闭第一个节点，这时集群的状态为：关闭了一个节点后的集群。</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image304.jpg\" class=\"\">{width=\"4.412638888888889in\"\n<p>height=&quot;1.6894586614173228in&quot;}</p>\n<p>我们关闭的节点是一个主节点。而集群必须拥有一个主节点来保证正常工作，所以发生的第一件事情就是选举一个新的主节点：<br />\nNode 2 。在我们关闭 Node 1 的同时也失去了主分片 1 和 2<br />\n，并且在缺失主分片的时候索引也不能正常工作。<br />\n如果此时来检查集群的状况，我们看到的状态将会为 red<br />\n：不是所有主分片都在正常工作。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image310.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.482930883639545in&quot;}</p>\n</blockquote>\n<p>幸运的是，在其它节点上存在着这两个主分片的完整副本，<br />\n所以新的主节点立即将这些分片在 Node 2 和 Node 3<br />\n 上对应的副本分片提升为主分片， 此时集群的状态将会为<br />\n yellow。这个提升主分片的过程是瞬间发生的，如同按下一个开关一般。</p>\n<img data-src=\"/Distribution/Elasticsearch/image297.jpg\" class=\"\">{width=\"0.23472222222222222in\"\n<p>height=&quot;0.24166666666666667in&quot;} 为什么我们集群状态是 <strong>yellow</strong> 而不是<br />\n<strong> green</strong> 呢？</p>\n<p>虽然我们拥有所有的三个主分片，但是同时设置了每个主分片需要对应 2<br />\n 份副本分片，而此时只存在一份副本分片。 所以集群不能为 green<br />\n 的状态，不过我们不必过于担心：如果我们同样关闭了 Node 2 ，我们的程序<br />\n依然 可以保持在不丢任何数据的情况下运行，因为</p>\n<p>Node 3 为每一个分片都保留着一份副本。</p>\n<p>如果我们重新启动 Node 1<br />\n，集群可以将缺失的副本分片再次进行分配，那么集群的状态也将恢复成之前的状态。<br />\n如果 Node 1<br />\n 依然拥有着之前的分片，它将尝试去重用它们，同时仅从主分片复制发生了修改的数据文件。和之前的集群相比，只是<br />\n Master 节点切换了。</p>\n<img data-src=\"/Distribution/Elasticsearch/image312.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.5779538495188101in&quot;}</p>\n<p>当索引一个文档的时候，文档会被存储到一个主分片中。 Elasticsearch<br />\n 如何知道一个</p>\n<p>文档应该存放到哪个分片中呢？当我们创建文档时，它如何决定这个文档应当被存储在分片<br />\n 1 还是分片 2<br />\n 中呢？首先这肯定不会是随机的，否则将来要获取文档的时候我们就不知道从何处寻找了。实际上，这个过程是根据下面这个公式决定的：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image314.jpg\" class=\"\">{width=\"4.666666666666667in\"\n<p>height=&quot;0.3333333333333333in&quot;}</p>\n</blockquote>\n<p>routing 是一个可变值，默认是文档的 _id ，也可以设置成一个自定义的值。<br />\nrouting 通过 hash 函数生成一个数字，然后这个数字再除以<br />\n number_of_primary_shards （主分片的数量）后得到余数 。这个分布在 0 到<br />\n number_of_primary_shards-1<br />\n 之间的余数，就是我们所寻求的文档所在分片的位置。</p>\n<p>这就解释了为什么我们要在创建索引的时候就确定好主分片的数量<br />\n并且永远不会改变这个数量：因为如果数量变化了，那么所有之前路由的值都会无效，文档也再也找不到了。</p>\n<p>所有的文档 API（ get 、 index 、 delete 、 bulk 、 update 以及 mget<br />\n）都接受一个叫做 routing 的路由参数<br />\n，通过这个参数我们可以自定义文档到分片的映射。一个自定义的路由参数可以用来确保所有相关的文档 ------ 例如所有属于同一个用户的文档 ------ 都被存储到同一个分片中。</p>\n<h2 id=\"45-分片控制\"><a class=\"anchor\" href=\"#45-分片控制\">#</a> 4.5 分片控制</h2>\n<p>我们假设有一个集群由三个节点组成。 它包含一个叫 emps<br />\n 的索引，有两个主分片，每个主分片有两个副本分片。相同分片的副本不会放在同一节点。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image315.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;2.6419575678040244in&quot;}</p>\n</blockquote>\n<p>通过 elasticsearch-head<br />\n 插件查看集群情况，所以我们的集群是一个有三个节点和一个索</p>\n<p>引的集群。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image319.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.4841797900262468in&quot;}</p>\n</blockquote>\n<p>我们可以发送请求到集群中的任一节点。 每个节点都有能力处理任意请求。<br />\n每个节点都知道集群中任一文档位置，所以可以直接将请求转发到需要的节点上。<br />\n在下面的例子中，将所有的请求发送到 Node 1，我们将其称为<br />\n协调节点 (coordinating node)<br />\n。<img data-src=\"/Distribution/Elasticsearch/image321.jpg\" class=\"\">{width=&quot;0.1625in&quot;<br />\nheight=&quot;0.16666666666666666in&quot;}：当发送请求的时候，<br />\n为了扩展负载，更好的做法是轮询集群中所有的节点。</p>\n<h3 id=\"451-写流程\"><a class=\"anchor\" href=\"#451-写流程\">#</a> 4.5.1 <sup>写流程</sup></h3>\n<p>新建、索引和删除 请求都是 写 操作，<br />\n必须在主分片上面完成之后才能被复制到相关的副本分片</p>\n<img data-src=\"/Distribution/Elasticsearch/image322.jpg\" class=\"\">{width=\"3.571527777777778in\"\n<p>height=&quot;1.6in&quot;} 新建，索引和删除文档所需要的步骤顺序：</p>\n<ol>\n<li>\n<p>客户端向 Node 1 发送新建、索引或者删除请求。</p>\n</li>\n<li>\n<p>节点使用文档的 _id 确定文档属于分片 0 。请求会被转发到 Node<br />\n3，因为分片 0 的主分片目前被分配在 Node 3 上。</p>\n</li>\n<li>\n<p>Node 3 在主分片上面执行请求。如果成功了，它将请求并行转发到 Node 1<br />\n 和 Node 2</p>\n</li>\n</ol>\n<blockquote>\n<p>的副本分片上。一旦所有的副本分片都报告成功，Node 3<br />\n 将向协调节点报告成功，协调节点向客户端报告成功。</p>\n</blockquote>\n<p>在客户端收到成功响应时，文档变更已经在主分片和所有副本分片执行完成，变更是安全的。有一些可选的请求参数允许您影响这个过程，可能以数据安全为代价提升性能。这些选项很少使用，因为<br />\n Elasticsearch 已经很快，但是为了完整起见，请参考下面表格：</p>\n<p>+-------------+-------------------------------------------------------+<br />\n| 参数        | &gt; 含义                                                |<br />\n+=<mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark>===========================================+<br />\n| consistency | &gt; consistency，即一致性。在默认设置下，               |<br />\n|             | 即使仅仅是在试图执行一个_写_操作之前，主分片都会要求 |<br />\n|             | &gt; 必须要有                                            |<br />\n|             | &gt; 规定数量 (quorum)（或者                              |<br />\n|             | 换种说法，也即必须要有大多数）的分片副本处于活跃可用  |<br />\n|             | 状态，才会去执行_写_操作 (其中分片副本可以是主分片或  |<br />\n|             | 者副本分片)。这是为了避免在发生网络分区故障（network  |<br />\n|             | &gt;                                                     |<br />\n|             | &gt; partition）的时                                     |<br />\n|             | 候进行_写_操作，进而导致数据不一致。_规定数量_即：  |<br />\n|             | &gt; <strong>int( (primary + number_of_replicas) / 2 ) + 1</strong>   |<br />\n|             | &gt;                                                     |<br />\n|             | &gt; consistency 参数的值可以设为 one （只要主分片状态   |<br />\n|             | &gt; ok                                                  |<br />\n|             | &gt; 就允许执行_写_操作）,all（必须要主                 |<br />\n|             | 分片和所有副本分片的状态没问题才允许执行_写_操作）,  |<br />\n|             | &gt; 或 quorum 。默认值为 quorum ,                       |<br />\n|             | &gt; 即大多数的分片副本状态没问题就允许执行_写_ 操作。  |<br />\n|             | &gt;                                                     |<br />\n|             | &gt; 注意，规定数量 的计算公式中 number_of_replicas      |<br />\n|             | &gt; 指的是在索引设置中的设定副本分片数，而不是          |<br />\n|             | 指当前处理活动状态的副本分片数。如果你的索引设置中指  |<br />\n+-------------+-------------------------------------------------------+<br />\n|             | &gt; 定                                                  |<br />\n|             | 了当前索引拥有三个副本分片，那规定数量的计算结果即：  |<br />\n|             | &gt; <strong>int( (primary + 3 replicas) / 2 ) + 1 = 3</strong>       |<br />\n|             | &gt;                                                     |<br />\n|             | &gt; 如果                                                |<br />\n|             | 此时你只启动两个节点，那么处于活跃状态的分片副本数量  |<br />\n|             | 就达不到规定数量，也因此您将无法索引和删除任何文档。  |<br />\n+-------------+-------------------------------------------------------+<br />\n| timeout     | &gt; 如果没有足够的副本分片会发生什么？ Elasticsearch    |<br />\n|             | &gt; 会等待，希望更多的分片出现。默认情况下，它最多等待  |<br />\n|             | &gt; 1 分钟。 如果你需要，你可以使用 timeout             |<br />\n|             | &gt; 参数使它更早终止： 100 100 毫秒，30s 是 30 秒。     |<br />\n+-------------+-------------------------------------------------------+</p>\n<img data-src=\"/Distribution/Elasticsearch/image323.jpg\" class=\"\">{width=\"0.2520833333333333in\"\n<p>height=&quot;0.29375in&quot;} 新索引默认有 1<br />\n 个副本分片，这意味着为满足规定数量应该需要两个活动的分片副本。<br />\n但是，这些默认的设置会阻止我们在单一节点上做任何事情。为了避免这个问题，要求只有当<br />\n number_of_replicas 大于 1 的时候，规定数量才会执行。</p>\n<h3 id=\"452-读流程\"><a class=\"anchor\" href=\"#452-读流程\">#</a> 4.5.2 <sup>读流程</sup></h3>\n<blockquote>\n<p>我们可以从主分片或者从其它任意副本分片检索文档</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image324.jpg\" class=\"\">{width=\"3.932638888888889in\"\n<p>height=&quot;1.3770833333333334in&quot;} 从主分片或者副本分片检索文档的步骤顺序：</p>\n<ol>\n<li>\n<p>客户端向 Node 1 发送获取请求。</p>\n</li>\n<li>\n<p>节点使用文档的 _id 来确定文档属于分片 0 。分片 0<br />\n 的副本分片存在于所有的三个节点上。 在这种情况下，它将请求转发到 Node<br />\n2 。</p>\n</li>\n<li>\n<p>Node 2 将文档返回给 Node 1 ，然后将文档返回给客户端。</p>\n</li>\n</ol>\n<p>在处理读取请求时，协调结点在每次请求的时候都会通过轮询所有的副本分片来达到负载均衡。在文档被检索时，已经被索引的文档可能已经存在于主分片上但是还没有复制到副本分片。<br />\n在这种情况下，副本分片可能会报告文档不存在，但是主分片可能成功返回文档。<br />\n一旦索引请求成功返回给用户，文档在主分片和副本分片都是可用的。</p>\n<h3 id=\"453-更新流程\"><a class=\"anchor\" href=\"#453-更新流程\">#</a> 4.5.3 更新流程</h3>\n<blockquote>\n<p>部分更新一个文档结合了先前说明的读取和写入流程：</p>\n</blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image325.jpg\" class=\"\">{width=\"4.189583333333333in\"\n<p>height=&quot;1.6881944444444446in&quot;} 部分更新一个文档的步骤如下：</p>\n<ol>\n<li>\n<p>客户端向 Node 1 发送更新请求。</p>\n</li>\n<li>\n<p>它将请求转发到主分片所在的 Node 3 。</p>\n</li>\n<li>\n<p>Node 3 从主分片检索文档，修改 _source 字段中的 JSON<br />\n，并且尝试重新索引主分片的文档。<br />\n如果文档已经被另一个进程修改，它会重试步骤 3 ，超过<br />\n retry_on_conflict 次后放弃。</p>\n</li>\n<li>\n<p>如果 Node 3 成功地更新文档，它将新版本的文档并行转发到 Node 1 和<br />\n Node 2 上的副本分片，重新建立索引。一旦所有副本分片都返回成功， Node<br />\n3 向协调节点也返回成功，协调节点向客户端返回成功。</p>\n</li>\n</ol>\n<p>当主分片把更改转发到副本分片时， 它不会转发更新请求。<br />\n相反，它转发完整文档的新版本。请记住，这些更改将会异步转发到副本分片，并且不能保证它们以发送它们相同的顺序到达。<br />\n如果 Elasticsearch<br />\n 仅转发更改请求，则可能以错误的顺序应用更改，导致得到损坏的文档。</p>\n<h4 id=\"454-多文档操作流程\"><a class=\"anchor\" href=\"#454-多文档操作流程\">#</a> 4.5.4 多文档操作流程</h4>\n<p>mget 和 bulk API<br />\n 的模式类似于单文档模式。区别在于协调节点知道每个文档存在于哪个分片中。它将整个多文档请求分解成<br />\n每个分片 的多文档请求，并且将这些请求并行转发到每个参与节点。</p>\n<p>协调节点一旦收到来自每个节点的应答，就将每个节点的响应收集整理成单个响应，返回给客户端</p>\n<img data-src=\"/Distribution/Elasticsearch/image326.jpg\" class=\"\">{width=\"3.9277777777777776in\"\n<p>height=&quot;1.3486111111111112in&quot;} 用单个 <strong>mget</strong><br />\n 请求取回多个文档所需的步骤顺序:</p>\n<ol>\n<li>\n<p>客户端向 Node 1 发送 mget 请求。</p>\n</li>\n<li>\n<p>Node 1<br />\n 为每个分片构建多文档获取请求，然后并行转发这些请求到托管在每个所需的主分片或者副本分片的节点上。一旦收到所有答复，<br />\nNode 1 构建响应并将其返回给客户端。</p>\n</li>\n</ol>\n<p>可以对 docs 数组中每个文档设置 routing 参数。</p>\n<p><strong>bulk API</strong>， 允许在单个批量请求中执行多个创建、索引、删除和更新请求。</p>\n<img data-src=\"/Distribution/Elasticsearch/image327.jpg\" class=\"\">{width=\"3.38125in\"\n<p>height=&quot;1.4520833333333334in&quot;} bulk API 按如下步骤顺序执行：</p>\n<ol>\n<li>\n<p>客户端向 Node 1 发送 bulk 请求。</p>\n</li>\n<li>\n<p>Node 1<br />\n 为每个节点创建一个批量请求，并将这些请求并行转发到每个包含主分片的节点主机。</p>\n</li>\n<li>\n<p>主分片一个接一个按顺序执行每个操作。当每个操作成功时，主分片并行转发新文档（或删除）到副本分片，然后执行下一个操作。<br />\n一旦所有的副本分片报告所有操作成功，该节点将向协调节点报告成功，协调节点将这些响应收集整理并返回给客户端。</p>\n</li>\n</ol>\n<h2 id=\"46-分片原理\"><a class=\"anchor\" href=\"#46-分片原理\">#</a> 4.6 分片原理</h2>\n<blockquote>\n<p>分片是 Elasticsearch<br />\n 最小的工作单元。但是究竟什么是一个分片，它是如何工作的？传统的数据库每个字段存储单个值，但这对全文检索并不够。文本字段中的每个单词需</p>\n</blockquote>\n<p>要被搜索，对数据库意味着需要单个字段有索引多值的能力。最好的支持是一个字段多个值需求的数据结构是倒排索引。</p>\n<h3 id=\"461-倒排索引\"><a class=\"anchor\" href=\"#461-倒排索引\">#</a> 4.6.1 倒排索引</h3>\n<blockquote>\n<p>Elasticsearch 使用一种称为倒排索引的结构，它适用于快速的全文搜索。</p>\n</blockquote>\n<p>见其名，知其意，有倒排索引，肯定会对应有正向索引。正向索引（forward<br />\nindex），反向索引（inverted index）更熟悉的名字是倒排索引。</p>\n<p>所谓的正向索引，就是搜索引擎会将待搜索的文件都对应一个文件<br />\n ID，搜索时将这个</p>\n<p>ID 和搜索关键字进行对应，形成 K-V 对，然后对关键字进行统计计数</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image328.jpg\" class=\"\">{width=\"2.967361111111111in\"\n<p>height=&quot;1.3366797900262468in&quot;}</p>\n</blockquote>\n<p>但是互联网上收录在搜索引擎中的文档的数目是个天文数字，这样的索引结构根本无法满足实时返回排名结果的要求。所以，搜索引擎会将正向索引重新构建为倒排索引，即把文件</p>\n<p>ID 对应到关键词的映射转换为关键词到文件 ID 的映射，每个关键词都对应着一系列的文件，这些文件中都出现这个关键词。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image330.jpg\" class=\"\">{width=\"2.9254166666666666in\"\n<p>height=&quot;1.44251312335958in&quot;}</p>\n<p>一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的文</p>\n</blockquote>\n<p>档列表。例如，假设我们有两个文档，每个文档的 content 域包含如下内容：</p>\n<ul>\n<li>\n<p>The quick brown fox jumped over the lazy dog</p>\n</li>\n<li>\n<p>Quick brown foxes leap over lazy dogs in summer</p>\n</li>\n</ul>\n<p>为了创建倒排索引，我们首先将每个文档的 content 域拆分成单独的<br />\n词（我们称它为 词条或 tokens<br />\n），创建一个包含所有不重复词条的排序列表，然后列出每个词条出现在哪个文档。结果如下所示：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image332.jpg\" class=\"\">{width=\"1.155in\"\n<p>height=&quot;2.0045964566929135in&quot;}</p>\n</blockquote>\n<p>现在，如果我们想搜索 quick brown ，我们只需要查找包含每个词条的文档：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image334.jpg\" class=\"\">{width=\"1.5504166666666668in\"\n<p>height=&quot;1.0254297900262468in&quot;}</p>\n</blockquote>\n<p>两个文档都匹配，但是第一个文档比第二个匹配度更高。如果我们使用仅计算匹配词条数量的简单相似性算法，那么我们可以说，对于我们查询的相关性来讲，第一个文档比第二个文档更佳。</p>\n<p>但是，我们目前的倒排索引有一些问题：</p>\n<ul>\n<li>\n<p>Quick 和 quick 以独立的词条出现，然而用户可能认为它们是相同的词。</p>\n</li>\n<li>\n<p>fox 和 foxes 非常相似，就像 dog 和 dogs ；他们有相同的词根。</p>\n</li>\n<li>\n<p>jumped 和 leap,<br />\n 尽管没有相同的词根，但他们的意思很相近。他们是同义词。</p>\n</li>\n</ul>\n<p>使用前面的索引搜索 +Quick +fox 不会得到任何匹配文档。（记住，+<br />\n 前缀表明这个词必须存在。）只有同时出现 Quick 和 fox<br />\n 的文档才满足这个查询条件，但是第一个文档包含 quick fox ，第二个文档包含<br />\n Quick foxes 。</p>\n<p>我们的用户可以合理的期望两个文档与查询匹配。我们可以做的更好。</p>\n<p>如果我们将词条规范为标准模式，那么我们可以找到与用户搜索的词条不完全一致，但具有足够相关性的文档。例如：</p>\n<ul>\n<li>\n<p>Quick 可以小写化为 quick 。</p>\n</li>\n<li>\n<p>foxes 可以 词干提取 -- 变为词根的格式 -- 为 fox 。类似的， dogs<br />\n 可以为提取为 dog 。</p>\n</li>\n<li>\n<p>jumped 和 leap 是同义词，可以索引为相同的单词 jump 。</p>\n</li>\n</ul>\n<p>现在索引看上去像这样：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image336.jpg\" class=\"\">{width=\"1.3833333333333333in\"\n<p>height=&quot;1.8804297900262468in&quot;}</p>\n</blockquote>\n<p>这还远远不够。我们搜索 +Quick +fox 仍然<br />\n会失败，因为在我们的索引中，已经没有 Quick<br />\n 了。但是，如果我们对搜索的字符串使用与 content<br />\n 域相同的标准化规则，会变成查询</p>\n<p>+quick<br />\n+fox，这样两个文档都会匹配！分词和标准化的过程称为分析这非常重要。你只能搜索在索引中出现的词条，所以索引文本和查询字符串必须标准化为相同的格式。</p>\n<h3 id=\"462-文档搜索\"><a class=\"anchor\" href=\"#462-文档搜索\">#</a> 4.6.2 文档搜索</h3>\n<p>早期的全文检索会为整个文档集合建立一个很大的倒排索引并将其写入到磁盘。<br />\n一旦新的索引就绪，旧的就会被其替换，这样最近的变化便可以被检索到。</p>\n<blockquote>\n<p>倒排索引被写入磁盘后是 不可改变 的：它永远不会修改。</p>\n<p>不变性有重要的价值：</p>\n</blockquote>\n<ul>\n<li>\n<p>不需要锁。如果你从来不更新索引，你就不需要担心多进程同时修改数据的问题。</p>\n</li>\n<li>\n<p>一旦索引被读入内核的文件系统缓存，便会留在哪里，由于其不变性。只要文件系统缓存中还有足够</p>\n</li>\n</ul>\n<blockquote>\n<p>的空间，那么大部分读请求会直接请求内存，而不会命中磁盘。这提供了很大的性能提升。</p>\n</blockquote>\n<ul>\n<li>其它缓存 (像 filter<br />\n 缓存)，在索引的生命周期内始终有效。它们不需要在每次数据改变时被重建，因为</li>\n</ul>\n<blockquote>\n<p>数据不会变化。</p>\n</blockquote>\n<ul>\n<li>写入单个大的倒排索引允许数据被压缩，减少磁盘 I/O 和<br />\n需要被缓存到内存的索引的使用量。</li>\n</ul>\n<p>当然，一个不变的索引也有不好的地方。主要事实是它是不可变的！<br />\n 你不能修改它。如果你需要让一个新的文档<br />\n可被搜索，你需要重建整个索引。这要么对一个索引所能包含的数据量造成了很大的限制，要么对索引可被更新的频率造成了很大的限制。</p>\n<h4 id=\"463-动态更新索引\"><a class=\"anchor\" href=\"#463-动态更新索引\">#</a> 4.6.3 动态更新索引</h4>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image297.jpg\" class=\"\">{width=\"0.23472222222222222in\"\n<p>height=&quot;0.24166666666666667in&quot;} 如何在保留不变性的前提下实现倒排索引的更新？</p>\n</blockquote>\n<p>答案是:<br />\n 用更多的索引。通过增加新的补充索引来反映新近的修改，而不是直接重写整个倒排索引。每一个倒排索引都会被轮流查询到，从最早的开始查询完后再对结果进行合并。</p>\n<p>Elasticsearch 基于 Lucene, 这个 java 库引入了按段搜索的概念。 每一 段<br />\n本身都是一个倒排索引， 但索引在 Lucene 中除表示所有段的集合外，<br />\n还增加了提交点的概念 --- 一个列出了所有已知段的文件</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image338.jpg\" class=\"\">{width=\"3.0720833333333335in\"\n<p>height=&quot;1.8170691163604549in&quot;}</p>\n</blockquote>\n<p>按段搜索会以如下流程执行：</p>\n<img data-src=\"/Distribution/Elasticsearch/image340.jpg\" class=\"\">{width=\"2.453694225721785in\"\n<p>height=&quot;2.124829396325459in&quot;}</p>\n<ol start=\"2\">\n<li>\n<p>不时地，缓存被 提交</p>\n<ol>\n<li>\n<p>一个新的段 --- 一个追加的倒排索引 --- 被写入磁盘。</p>\n</li>\n<li>\n<p>一个新的包含新段名字的 提交点 被写入磁盘</p>\n</li>\n<li>\n<p>磁盘进行 同步 ---<br />\n 所有在文件系统缓存中等待的写入都刷新到磁盘，以确保它们被写入物理文件</p>\n</li>\n</ol>\n</li>\n<li>\n<p>新的段被开启，让它包含的文档可见以被搜索</p>\n</li>\n<li>\n<p>内存缓存被清空，等待接收新的文档</p>\n</li>\n</ol>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image342.jpg\" class=\"\">{width=\"3.1754166666666666in\"\n<p>height=&quot;2.3379297900262466in&quot;}</p>\n</blockquote>\n<p>当一个查询被触发，所有已知的段按顺序被查询。词项统计会对所有段的结果进行聚合，以保证每个词和每个文档的关联都被准确计算。<br />\n这种方式可以用相对较低的成本将新文档添加到索引。</p>\n<p>段是不可改变的，所以既不能从把文档从旧的段中移除，也不能修改旧的段来进行反映文档的更新。<br />\n取而代之的是，每个提交点会包含一个 .del<br />\n 文件，文件中会列出这些被删除文档的段信息。</p>\n<p>当一个文档被 &quot;删除&quot; 时，它实际上只是在 .del 文件中被 标记<br />\n删除。一个被标记删除的文档仍然可以被查询匹配到，<br />\n但它会在最终结果被返回前从结果集中移除。</p>\n<p>文档更新也是类似的操作方式：当一个文档被更新时，旧版本文档被标记删除，文档的新版本被索引到一个新的段中。<br />\n可能两个版本的文档都会被一个查询匹配到，但被删除的那个旧版本文档在结果集返回前就已经被移除。</p>\n<h4 id=\"464-近实时搜索\"><a class=\"anchor\" href=\"#464-近实时搜索\">#</a> 4.6.4 近实时搜索</h4>\n<p>随着按段（per-segment）搜索的发展，一个新的文档从索引到可被搜索的延迟显著降低了。新文档在几分钟之内即可被检索，但这样还是不够快。磁盘在这里成为了瓶颈。提交（Commiting）一个新的段到磁盘需要一个<br />\n fsync 来确保段被物理性地写入磁盘，这样在断电的时候就不会丢失数据。 但是<br />\n fsync 操作代价很大；<br />\n 如果每次索引一个文档都去执行一次的话会造成很大的性能问题。</p>\n<p>我们需要的是一个更轻量的方式来使一个文档可被搜索，这意味着 fsync<br />\n 要从整个过程中被移除。在 Elasticsearch 和磁盘之间是文件系统缓存。<br />\n像之前描述的一样， 在内存索引缓冲区中的文档会被写入到一个新的段中。<br />\n但是这里新段会被先写入到文件系统缓存 --- 这一步代价会比较低，稍后再被刷新到磁盘 --- 这一步代价比较高。不过只要文件已经在缓存中，就可以像其它文件一样被打开和读取了。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image344.jpg\" class=\"\">{width=\"1.86375in\"\n<p>height=&quot;1.8991797900262468in&quot;}</p>\n</blockquote>\n<p>Lucene<br />\n 允许新段被写入和打开 --- 使其包含的文档在未进行一次完整提交时便对搜索可见。这种方式比进行一次提交代价要小得多，并且在不影响性能的前提下可以被频繁地执行。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image346.jpg\" class=\"\">{width=\"2.2804166666666665in\"\n<p>height=&quot;2.1495964566929135in&quot;}</p>\n</blockquote>\n<p>在 Elasticsearch 中，写入和打开一个新段的轻量的过程叫做 refresh 。<br />\n默认情况下每个分片会每秒自动刷新一次。这就是为什么我们说 Elasticsearch<br />\n 是 近 实时搜索：文档的变化并不是立即对搜索可见，但会在一秒之内变为可见。</p>\n<p>这些行为可能会对新用户造成困惑:<br />\n 他们索引了一个文档然后尝试搜索它，但却没有搜到。</p>\n<p>这个问题的解决办法是用 refresh API 执行一次手动刷新: /users/_refresh</p>\n<p>尽管刷新是比提交轻量很多的操作，它还是会有性能开销。当写测试的时候，<br />\n手动刷新很有用，但是不要在生产环境下每次索引一个文档都去手动刷新。<br />\n相反，你的应用需要意识到 Elasticsearch 的近实时的性质，并接受它的不足。</p>\n<p>并不是所有的情况都需要每秒刷新。可能你正在使用 Elasticsearch<br />\n 索引大量的日志文件，你可能想优化索引速度而不是近实时搜索， 可以通过设置<br />\n refresh_interval ， 降低每个索引的刷新频率</p>\n<p>{</p>\n<p>&quot;settings&quot;: {</p>\n<p>&quot;refresh_interval&quot;: &quot;30s&quot;</p>\n<p>}</p>\n<p>}</p>\n<p>refresh_interval 可以在既存索引上进行动态更新。<br />\n在生产环境中，当你正在建立一个大的</p>\n<p>新索引时，可以先关闭自动刷新，待开始使用该索引时，再把它们调回来</p>\n<p># 关闭自动刷新</p>\n<p>PUT /users/_settings</p>\n<p refresh_interval:-1=\"\"></p>\n<p># 每一秒刷新</p>\n<p>PUT /users/_settings</p>\n<p refresh_interval:1s=\"\"></p>\n<h4 id=\"465-持久化变更\"><a class=\"anchor\" href=\"#465-持久化变更\">#</a> 4.6.5 持久化变更</h4>\n<p>如果没有用 fsync<br />\n 把数据从文件系统缓存刷（flush）到硬盘，我们不能保证数据在断电甚至是程序正常退出之后依然存在。为了保证<br />\n Elasticsearch 的可靠性，需要确保数据变化被持久化到磁盘。在<br />\n动态更新索引，我们说一次完整的提交会将段刷到磁盘，并写入一个包含所有段列表的提交点。Elasticsearch<br />\n 在启动或重新打开一个索引的过程中使用这个提交点来判断哪些段隶属于当前分片。</p>\n<p>即使通过每秒刷新（refresh）实现了近实时搜索，我们仍然需要经常进行完整提交来确保能从失败中恢复。但在两次提交之间发生变化的文档怎么办？我们也不希望丢失掉这些数据。Elasticsearch<br />\n 增加了一个 translog ，或者叫事务日志，在每一次对 Elasticsearch<br />\n 进行操作时均进行了日志记录整个流程如下：</p>\n<ol>\n<li>一个文档被索引之后，就会被添加到内存缓冲区，并且追加到了 translog</li>\n</ol>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image348.jpg\" class=\"\">{width=\"2.1754166666666666in\"\n<p>height=&quot;1.8591797900262468in&quot;}</p>\n</blockquote>\n<ol start=\"2\">\n<li>\n<p>刷新（refresh）使分片每秒被刷新（refresh）一次：</p>\n<ul>\n<li>\n<p>这些在内存缓冲区的文档被写入到一个新的段中，且没有进行 fsync<br />\n 操作。</p>\n</li>\n<li>\n<p>这个段被打开，使其可被搜索</p>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image350.jpg\" class=\"\">{width=\"2.4254166666666666in\"\n<p>height=&quot;2.3568886701662293in&quot;}</p>\n</blockquote>\n<ol start=\"3\">\n<li>这个进程继续工作，更多的文档被添加到内存缓冲区和追加到事务日志</li>\n</ol>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image352.jpg\" class=\"\">{width=\"2.50875in\"\n<p>height=&quot;2.129179790026247in&quot;}</p>\n</blockquote>\n<ol start=\"4\">\n<li>每隔一段时间 --- 例如 translog<br />\n 变得越来越大 --- 索引被刷新（flush）；一个新的 translog</li>\n</ol>\n<blockquote>\n<p>被创建，并且一个全量提交被执行</p>\n</blockquote>\n<ul>\n<li>\n<p>所有在内存缓冲区的文档都被写入一个新的段。</p>\n</li>\n<li>\n<p>缓冲区被清空。</p>\n</li>\n<li>\n<p>一个提交点被写入硬盘。</p>\n</li>\n<li>\n<p>文件系统缓存通过 fsync 被刷新（flush）。</p>\n</li>\n<li>\n<p>老的 translog 被删除。</p>\n</li>\n</ul>\n<p>translog 提供所有还没有被刷到磁盘的操作的一个持久化纪录。当<br />\n Elasticsearch 启动的时候，<br />\n它会从磁盘中使用最后一个提交点去恢复已知的段，并且会重放 translog<br />\n 中所有在最后一次提交后发生的变更操作。</p>\n<p>translog 也被用来提供实时 CRUD 。当你试着通过 ID<br />\n 查询、更新、删除一个文档，它会在尝试从相应的段中检索之前， 首先检查<br />\n translog 任何最近的变更。这意味着它总是能够实时地获取到文档的最新版本。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image354.jpg\" class=\"\">{width=\"2.9470833333333335in\"\n<p>height=&quot;2.4433464566929133in&quot;}</p>\n</blockquote>\n<p>执行一个提交并且截断 translog 的行为在 Elasticsearch 被称作一次 flush</p>\n<p>分片每 30 分钟被自动刷新（flush），或者在 translog<br />\n 太大的时候也会刷新你很少需要自己手动执行 flush<br />\n 操作；通常情况下，自动刷新就足够了。这就是说，在重启节点或关闭索引之前执行<br />\n flush 有益于你的索引。当 Elasticsearch 尝试恢复或重新打开一个索引，<br />\n它需要重放 translog 中所有的操作，所以如果日志越短，恢复越快。</p>\n<p>translog 的目的是保证操作不会丢失，在文件被 fsync<br />\n 到磁盘前，被写入的文件在重启之后就会丢失。默认 translog 是每 5 秒被<br />\n fsync 刷新到硬盘， 或者在每次写请求完成之后执行 (e.g. index, delete,<br />\nupdate, bulk)。这个过程在主分片和复制分片都会发生。最终，<br />\n基本上，这意味着在整个请求被 fsync 到主分片和复制分片的 translog<br />\n 之前，你的客户端不会得到一个 200 OK 响应。</p>\n<p>在每次请求后都执行一个 fsync<br />\n 会带来一些性能损失，尽管实践表明这种损失相对较小（特别是 bulk<br />\n 导入，它在一次请求中平摊了大量文档的开销）。</p>\n<p>但是对于一些大容量的偶尔丢失几秒数据问题也并不严重的集群，使用异步的<br />\n fsync</p>\n<p>还是比较有益的。比如，写入的数据被缓存到内存中，再每 5 秒执行一次 fsync<br />\n。如果你决定使用异步 translog 的话，你需要 保证 在发生 crash 时，丢失掉<br />\n sync_interval<br />\n 时间段的数据也无所谓。请在决定前知晓这个特性。如果你不确定这个行为的后果，最好是使用默认的参数（<br />\n&quot;index.translog.durability&quot;: &quot;request&quot; ）来避免数据丢失。</p>\n<h3 id=\"466-段合并\"><a class=\"anchor\" href=\"#466-段合并\">#</a> 4.6.6 段合并</h3>\n<p>由于自动刷新流程每秒会创建一个新的段<br />\n，这样会导致短时间内的段数量暴增。而段数目太多会带来较大的麻烦。<br />\n每一个段都会消耗文件句柄、内存和 cpu 运行周期。更重要</p>\n<p>的是，每个搜索请求都必须轮流检查每个段；所以段越多，搜索也就越慢。</p>\n<p>Elasticsearch<br />\n 通过在后台进行段合并来解决这个问题。小的段被合并到大的段，然后这些大的段再被合并到更大的段。</p>\n<p>段合并的时候会将那些旧的已删除文档从文件系统中清除。被删除的文档（或被更新文档的旧版本）不会被拷贝到新的大段中。</p>\n<p>启动段合并不需要你做任何事。进行索引和搜索时会自动进行。</p>\n<ol>\n<li>\n<p>当索引的时候，刷新（refresh）操作会创建新的段并将段打开以供搜索使用。</p>\n</li>\n<li>\n<p>合并进程选择一小部分大小相似的段，并且在后台将它们合并到更大的段中。这并不会</p>\n</li>\n</ol>\n<blockquote>\n<p>中断索引和搜索。</p>\n<img data-src=\"/Distribution/Elasticsearch/image356.jpg\" class=\"\">{width=\"2.6554166666666665in\"\n<p>height=&quot;1.5254297900262468in&quot;}</p>\n</blockquote>\n<ol start=\"3\">\n<li>\n<p>一旦合并结束，老的段被删除</p>\n<ul>\n<li>\n<p>新的段被刷新（flush）到了磁盘。 **<br />\n 写入一个包含新段且排除旧的和较小的段的新提交点。</p>\n</li>\n<li>\n<p>新的段被打开用来搜索。</p>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image358.jpg\" class=\"\">{width=\"2.73875in\"\n<p>height=&quot;1.9113582677165355in&quot;}</p>\n</blockquote>\n<p>合并大的段需要消耗大量的 I/O 和 CPU<br />\n 资源，如果任其发展会影响搜索性能。Elasticsearch<br />\n 在默认情况下会对合并流程进行资源限制，所以搜索仍然<br />\n有足够的资源很好地执行。</p>\n<h2 id=\"47-文档分析\"><a class=\"anchor\" href=\"#47-文档分析\">#</a> 4.7 文档分析</h2>\n<p>分析 包含下面的过程：</p>\n<ul>\n<li>\n<p>将一块文本分成适合于倒排索引的独立的 词条</p>\n</li>\n<li>\n<p>将这些词条统一化为标准格式以提高它们的 &quot;可搜索性&quot;，或者 recall<br />\n 分析器执行上面的工作。分析器实际上是将三个功能封装到了一个包里：</p>\n</li>\n</ul>\n<pre><code>&lt;!-- --&gt;\n</code></pre>\n<ul>\n<li>字符过滤器</li>\n</ul>\n<p>首先，字符串按顺序通过每个 字符过滤器<br />\n。他们的任务是在分词前整理字符串。一个</p>\n<p>字符过滤器可以用来去掉 HTML，或者将 &amp; 转化成 and。</p>\n<ul>\n<li>分词器</li>\n</ul>\n<p>其次，字符串被 分词器<br />\n分为单个的词条。一个简单的分词器遇到空格和标点的时候，</p>\n<p>可能会将文本拆分成词条。</p>\n<ul>\n<li>Token 过滤器</li>\n</ul>\n<p>最后，词条按顺序通过每个 token 过滤器<br />\n。这个过程可能会改变词条（例如，小写化 Quick ），删除词条（例如， 像 a，<br />\nand， the 等无用词），或者增加词条（例如，像 jump 和 leap 这种同义词）。</p>\n<h3 id=\"471-内置分析器\"><a class=\"anchor\" href=\"#471-内置分析器\">#</a> 4.7.1 内置分析器</h3>\n<p>Elasticsearch<br />\n 还附带了可以直接使用的预包装的分析器。接下来我们会列出最重要的分析器。为了证明它们的差异，我们看看每个分析器会从下面的字符串得到哪些词条：</p>\n<blockquote>\n<p>&quot;Set the shape to semi-transparent by calling set_trans(5)&quot;</p>\n</blockquote>\n<ul>\n<li>标准分析器</li>\n</ul>\n<p>标准分析器是 Elasticsearch<br />\n 默认使用的分析器。它是分析各种语言文本最常用的选择。它根据 Unicode 联盟<br />\n定义的 单词边界 划分文本。删除绝大部分标点。最后，将词条小写。</p>\n<p>它会产生：</p>\n<blockquote>\n<p>set, the, shape, to, semi, transparent, by, calling, set_trans, 5</p>\n</blockquote>\n<ul>\n<li>简单分析器</li>\n</ul>\n<blockquote>\n<p>简单分析器在任何不是字母的地方分隔文本，将词条小写。它会产生： set,<br />\nthe, shape, to, semi, transparent, by, calling, set, trans</p>\n</blockquote>\n<ul>\n<li>空格分析器</li>\n</ul>\n<blockquote>\n<p>空格分析器在空格的地方划分文本。它会产生：</p>\n<p>Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</p>\n</blockquote>\n<ul>\n<li>语言分析器</li>\n</ul>\n<blockquote>\n<p>特定语言分析器可用于 很多语言。它们可以考虑指定语言的特点。例如， 英语<br />\n分析</p>\n</blockquote>\n<p>器附带了一组英语无用词（常用单词，例如 and 或者 the<br />\n，它们对相关性没有多少影响），它们会被删除。<br />\n由于理解英语语法的规则，这个分词器可以提取英语单词的 词干 。</p>\n<blockquote>\n<p>英语 分词器会产生下面的词条：</p>\n<p>set, shape, semi, transpar, call, set_tran, 5</p>\n<p>注意看 transparent、 calling 和 set_trans 已经变为词根格式</p>\n</blockquote>\n<h3 id=\"472-分析器使用场景\"><a class=\"anchor\" href=\"#472-分析器使用场景\">#</a> 4.7.2 分析器使用场景</h3>\n<p>当我们 索引 一个文档，它的全文域被分析成词条以用来创建倒排索引。<br />\n但是，当我们在全文域 搜索 的时候，我们需要将查询字符串通过<br />\n相同的分析过程<br />\n，以保证我们搜索的词条格式与索引中的词条格式一致。全文查询，理解每个域是如何定义的，因此它们可以做正确的事：</p>\n<ul>\n<li>\n<p>当你查询一个 全文 域时，<br />\n会对查询字符串应用相同的分析器，以产生正确的搜索词条列表。</p>\n</li>\n<li>\n<p>当你查询一个 精确值<br />\n域时，不会分析查询字符串，而是搜索你指定的精确值。</p>\n</li>\n</ul>\n<h3 id=\"473-测试分析器\"><a class=\"anchor\" href=\"#473-测试分析器\">#</a> 4.7.3 测试分析器</h3>\n<blockquote>\n<p>有些时候很难理解分词的过程和实际被存储到索引中的词条，特别是你刚接触</p>\n</blockquote>\n<p>Elasticsearch。为了理解发生了什么，你可以使用 analyze API<br />\n 来看文本是如何被分析的。</p>\n<p>在消息体里，指定分析器和要分析的文本</p>\n<p>+-------------------------------------+<br />\n| GET <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjAwL19hbmFseXpl\">http://localhost:9200/_analyze</span> |<br />\n|                                     |<br />\n| {                                   |<br />\n|                                     |<br />\n| &quot;analyzer&quot;: &quot;standard&quot;,         |<br />\n|                                     |<br />\n| &quot;text&quot;: &quot;Text to analyze&quot; }     |<br />\n+-------------------------------------+</p>\n<p>结果中每个元素代表一个单独的词条：</p>\n<p>{</p>\n<p>&quot;tokens&quot;: [</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;text&quot;,</p>\n<p>&quot;start_offset&quot;: 0,</p>\n<p>&quot;end_offset&quot;: 4,</p>\n<p>&quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</p>\n<p>&quot;position&quot;: 1</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;to&quot;,</p>\n<p>&quot;start_offset&quot;: 5,</p>\n<p>&quot;end_offset&quot;: 7,</p>\n<p>&quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</p>\n<p>&quot;position&quot;: 2</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;analyze&quot;,</p>\n<p>&quot;start_offset&quot;: 8,</p>\n<p>&quot;end_offset&quot;: 15,</p>\n<p>&quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</p>\n<p>&quot;position&quot;: 3</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>token 是实际存储到索引中的词条。 position<br />\n 指明词条在原始文本中出现的位置。</p>\n<p>start_offset 和 end_offset 指明字符在原始字符串中的位置。</p>\n<p><strong>4.7.4</strong><br />\n 指定分析器当 Elasticsearch 在你的文档中检测到一个新的字符串域，它会自动设置其为一个全文<br />\n字符串 域，使用 标准<br />\n分析器对它进行分析。你不希望总是这样。可能你想使用一个不同的分析器，适用于你的数据使用的语言。有时候你想要一个字符串域就是一个字符串域 --- 不使用分析，直接索引你传入的精确值，例如用户<br />\n ID<br />\n 或者一个内部的状态域或标签。要做到这一点，我们必须手动指定这些域的映射。</p>\n<h3 id=\"475-ik-分词器\"><a class=\"anchor\" href=\"#475-ik-分词器\">#</a> 4.7.5 IK <sup>分词器</sup></h3>\n<blockquote>\n<p>首先我们通过 Postman 发送 <strong>GET</strong> 请求查询分词效果</p>\n</blockquote>\n<p># GET <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjAwL19hbmFseXpl\">http://localhost:9200/_analyze</span></p>\n<p>{</p>\n<p>&quot;text&quot;:&quot;测试单词&quot;</p>\n<img data-src=\"/Distribution/Elasticsearch/image360.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.5586953193350832in&quot;}</p>\n<p>ES<br />\n 的默认分词器无法识别中文中测试、单词这样的词汇，而是简单的将每个字拆完分为一</p>\n<p>个词</p>\n<p>{</p>\n<p>&quot;tokens&quot;: [</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;测&quot;,</p>\n<p>&quot;start_offset&quot;: 0,</p>\n<p>&quot;end_offset&quot;: 1,</p>\n<p>&quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,</p>\n<p>&quot;position&quot;: 0</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;试&quot;,</p>\n<p>&quot;start_offset&quot;: 1,</p>\n<p>&quot;end_offset&quot;: 2,</p>\n<p>&quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,</p>\n<p>&quot;position&quot;: 1</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;单&quot;,</p>\n<p>&quot;start_offset&quot;: 2,</p>\n<p>&quot;end_offset&quot;: 3,</p>\n<p>&quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,</p>\n<p>&quot;position&quot;: 2</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;词&quot;,</p>\n<p>&quot;start_offset&quot;: 3,</p>\n<p>&quot;end_offset&quot;: 4,</p>\n<p>&quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,</p>\n<p>&quot;position&quot;: 3</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>这样的结果显然不符合我们的使用要求，所以我们需要下载 ES<br />\n 对应版本的中文分词器。我们这里采用 IK 中文分词器，下载地址为:</p>\n<p><span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWsvcmVsZWFzZXMvdGFnL3Y3LjguMA==\">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.8.0</span></span>[<span class=\"ul\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWsvcmVsZWFzZXMvdGFnL3Y3LjguMA==\">https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v7.8.0</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21lZGNsL2VsYXN0aWNzZWFyY2gtYW5hbHlzaXMtaWs=\">https://github.com/medcl/elasticsearch-analysis-ik</span>)</p>\n<p>将解压后的后的文件夹放入 ES 根目录下的 plugins 目录下，重启 ES<br />\n 即可使用。</p>\n<p>我们这次加入新的查询参数 &quot;analyzer&quot;:&quot;ik_max_word&quot;</p>\n<p>+----------------------------------------+<br />\n| # GET <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjAwL19hbmFseXpl\">http://localhost:9200/_analyze</span> |<br />\n|                                        |<br />\n| {                                      |<br />\n|                                        |<br />\n| &quot;text&quot;:&quot;测试单词&quot;,                 |<br />\n|                                        |<br />\n| &quot;analyzer&quot;:&quot;ik_max_word&quot; }         |<br />\n+----------------------------------------+</p>\n<p> ik_max_word：会将文本做最细粒度的拆分</p>\n<img data-src=\"/Distribution/Elasticsearch/image362.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.6764709098862642in&quot;}</p>\n<p>使用中文分词后的结果为：</p>\n<p>{</p>\n<p>&quot;tokens&quot;: [</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;测试&quot;,</p>\n<p>&quot;start_offset&quot;: 0, &quot;end_offset&quot;: 2,</p>\n<p>&quot;type&quot;: &quot;CN_WORD&quot;,</p>\n<p>&quot;position&quot;: 0</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;单词&quot;,</p>\n<p>&quot;start_offset&quot;: 2, &quot;end_offset&quot;: 4,</p>\n<p>&quot;type&quot;: &quot;CN_WORD&quot;,</p>\n<p>&quot;position&quot;: 1</p>\n<p>}</p>\n<p>] }</p>\n<p>ES 中也可以进行扩展词汇，首先查询</p>\n<p>+----------------------------------------+<br />\n| # GET <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjAwL19hbmFseXpl\">http://localhost:9200/_analyze</span> |<br />\n|                                        |<br />\n| {                                      |<br />\n|                                        |<br />\n| &quot;text&quot;:&quot;弗雷尔卓德&quot;,               |<br />\n|                                        |<br />\n| &quot;analyzer&quot;:&quot;ik_max_word&quot; }         |<br />\n+----------------------------------------+</p>\n<p>仅仅可以得到每个字的分词结果，我们需要做的就是使分词器识别到弗雷尔卓德也是一个词</p>\n<p>语</p>\n<p>{</p>\n<p>&quot;tokens&quot;: [ { &quot;token&quot;: &quot;弗&quot;,</p>\n<p>&quot;start_offset&quot;: 0,</p>\n<p>&quot;end_offset&quot;: 1,</p>\n<p>&quot;type&quot;: &quot;CN_CHAR&quot;,</p>\n<p>&quot;position&quot;: 0</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;雷&quot;,</p>\n<p>&quot;start_offset&quot;: 1,</p>\n<p>&quot;end_offset&quot;: 2,</p>\n<p>&quot;type&quot;: &quot;CN_CHAR&quot;,</p>\n<p>&quot;position&quot;: 1</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;尔&quot;,</p>\n<p>&quot;start_offset&quot;: 2,</p>\n<p>&quot;end_offset&quot;: 3,</p>\n<p>&quot;type&quot;: &quot;CN_CHAR&quot;,</p>\n<p>&quot;position&quot;: 2</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;卓&quot;,</p>\n<p>&quot;start_offset&quot;: 3, &quot;end_offset&quot;: 4,</p>\n<p>&quot;type&quot;: &quot;CN_CHAR&quot;,</p>\n<p>&quot;position&quot;: 3</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;德&quot;,</p>\n<p>&quot;start_offset&quot;: 4, &quot;end_offset&quot;: 5,</p>\n<p>&quot;type&quot;: &quot;CN_CHAR&quot;,</p>\n<p>&quot;position&quot;: 4</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<p>首先进入 ES 根目录中的 plugins 文件夹下的 ik 文件夹，进入 config<br />\n 目录，创建 custom.dic 文件，写入弗雷尔卓德。同时打开 IKAnalyzer.cfg.xml<br />\n 文件，将新建的 custom.dic 配置其中，</p>\n<img data-src=\"/Distribution/Elasticsearch/image364.jpg\" class=\"\">{width=\"4.078973097112861in\"\n<p>height=&quot;1.5677766841644794in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image366.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;2.626213910761155in&quot;}</p>\n<p>虽然 Elasticsearch 带有一些现成的分析器，然而在分析器上 Elasticsearch<br />\n 真正的强大之处在于，你可以通过在一个适合你的特定数据的设置之中组合字符过滤器、分词器、词汇单元过滤器来创建自定义的分析器。在<br />\n分析与分析器 我们说过，一个 分析器<br />\n就是在一个包里面组合了三种函数的一个包装器， 三种函数按照顺序被执行:</p>\n<ul>\n<li>字符过滤器</li>\n</ul>\n<p>字符过滤器 用来 整理 一个尚未被分词的字符串。例如，如果我们的文本是 HTML<br />\n 格式的，它会包含像 &lt;p&gt; 或者 &lt;div&gt; 这样的 HTML<br />\n 标签，这些标签是我们不想索引的。我们可以使用 html 清除 字符过滤器<br />\n来移除掉所有的 HTML 标签，并且像把 Á 转换为相对应的 Unicode 字符<br />\n Á 这样，转换 HTML 实体。一个分析器可能有 0 个或者多个字符过滤器。</p>\n<ul>\n<li>分词器</li>\n</ul>\n<p>一个分析器 必须 有一个唯一的分词器。<br />\n分词器把字符串分解成单个词条或者词汇单元。 标准 分析器里使用的 标准<br />\n分词器<br />\n把一个字符串根据单词边界分解成单个词条，并且移除掉大部分的标点符号，然而还有其他不同行为的分词器存在。</p>\n<p>例如， 关键词 分词器 完整地输出 接收到的同样的字符串，并不做任何分词。<br />\n空格 分词器 只根据空格分割文本 。 正则 分词器<br />\n根据匹配正则表达式来分割文本 。</p>\n<ul>\n<li>词单元过滤器</li>\n</ul>\n<p>经过分词，作为结果的 词单元流 会按照指定的顺序通过指定的词单元过滤器 。</p>\n<p>词单元过滤器可以修改、添加或者移除词单元。我们已经提到过 lowercase 和<br />\n stop 词过滤器 ，但是在 Elasticsearch<br />\n 里面还有很多可供选择的词单元过滤器。 词干过滤器 把单词 遏制 为 词干。<br />\nascii_folding 过滤器移除变音符，把一个像 &quot;très&quot; 这样的词转换为<br />\n &quot;tres&quot; 。 ngram 和 edge_ngram 词单元过滤器 可以产生<br />\n适合用于部分匹配或者自动补全的词单元。</p>\n<p>接下来，我们看看如何创建自定义的分析器：</p>\n<p># PUT <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjAwL215X2luZGV4\">http://localhost:9200/my_index</span></p>\n<p>{</p>\n<p>&quot;settings&quot;: {</p>\n<p>&quot;analysis&quot;: {</p>\n<p>&quot;char_filter&quot;: {</p>\n<p>&quot;&amp;_to_and&quot;: {</p>\n<p>&quot;type&quot;: &quot;mapping&quot;,</p>\n<p>&quot;mappings&quot;: [ &quot;&amp;=&gt; and &quot;]</p>\n<p>}},</p>\n<p>&quot;filter&quot;: {</p>\n<p>&quot;my_stopwords&quot;: {</p>\n<p>&quot;type&quot;: &quot;stop&quot;,</p>\n<p>&quot;stopwords&quot;: [ &quot;the&quot;, &quot;a&quot; ]</p>\n<p>}},</p>\n<p>&quot;analyzer&quot;: {</p>\n<p>&quot;my_analyzer&quot;: {</p>\n<p>&quot;type&quot;: &quot;custom&quot;,</p>\n<p>&quot;char_filter&quot;: [ &quot;html_strip&quot;, &quot;&amp;_to_and&quot; ],</p>\n<p>&quot;tokenizer&quot;: &quot;standard&quot;,</p>\n<p>&quot;filter&quot;: [ &quot;lowercase&quot;, &quot;my_stopwords&quot; ]</p>\n<p>}}</p>\n<p>}}}</p>\n<p>索引被创建以后，使用 analyze API 来 测试这个新的分析器</p>\n<p># GET <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo5MjAwL215X2luZGV4L19hbmFseXpl\">http://127.0.0.1:9200/my_index/_analyze</span></p>\n<p>{</p>\n<p>&quot;text&quot;:&quot;The quick &amp; brown fox&quot;,</p>\n<img data-src=\"/Distribution/Elasticsearch/image368.jpg\" class=\"\">{width=\"5.829388670166229in\"\n<p>height=&quot;1.794945319335083in&quot;}</p>\n<p>下面的缩略结果展示出我们的分析器正在正确地运行</p>\n<p>{</p>\n<p>&quot;tokens&quot;: [</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;quick&quot;,</p>\n<p>&quot;start_offset&quot;: 4,</p>\n<p>&quot;end_offset&quot;: 9,</p>\n<p>&quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</p>\n<p>&quot;position&quot;: 1</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;and&quot;,</p>\n<p>&quot;start_offset&quot;: 10,</p>\n<p>&quot;end_offset&quot;: 11,</p>\n<p>&quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</p>\n<p>&quot;position&quot;: 2</p>\n<p>}, { &quot;token&quot;: &quot;brown&quot;,</p>\n<p>&quot;start_offset&quot;: 12,</p>\n<p>&quot;end_offset&quot;: 17,</p>\n<p>&quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</p>\n<p>&quot;position&quot;: 3</p>\n<p>},</p>\n<p>{</p>\n<p>&quot;token&quot;: &quot;fox&quot;,</p>\n<p>&quot;start_offset&quot;: 18,</p>\n<p>&quot;end_offset&quot;: 21,</p>\n<p>&quot;type&quot;: &quot;&lt;ALPHANUM&gt;&quot;,</p>\n<p>&quot;position&quot;: 4</p>\n<p>}</p>\n<p>]</p>\n<p>}</p>\n<h2 id=\"48-文档处理\"><a class=\"anchor\" href=\"#48-文档处理\">#</a> 4.8 文档处理</h2>\n<p><strong>4.8.1</strong> 文档冲突当我们使用 index API 更新文档<br />\n，可以一次性读取原始文档，做我们的修改，然后重新索引 整个文档 。<br />\n最近的索引请求将获胜：无论最后哪一个文档被索引，都将被唯一存</p>\n<p>储在 Elasticsearch 中。如果其他人同时更改这个文档，他们的更改将丢失。</p>\n<blockquote>\n<p>很多时候这是没有问题的。也许我们的主数据存储是一个关系型数据库，我们只是将数</p>\n</blockquote>\n<p>据复制到 Elasticsearch 中并使其可被搜索。<br />\n也许两个人同时更改相同的文档的几率很小。或者对于我们的业务来说偶尔丢失更改并不是很严重的问题。</p>\n<p>但有时丢失了一个变更就是 非常严重的 。试想我们使用 Elasticsearch<br />\n 存储我们网上商城商品库存的数量， 每次我们卖一个商品的时候，我们在<br />\n Elasticsearch<br />\n 中将库存数量减少。有一天，管理层决定做一次促销。突然地，我们一秒要卖好几个商品。<br />\n假设有两个 web 程序并行运行，每一个都同时处理所有商品的销售</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image370.jpg\" class=\"\">{width=\"1.675417760279965in\"\n<p>height=&quot;2.1920964566929135in&quot;}</p>\n</blockquote>\n<p>web_1 对 stock_count 所做的更改已经丢失，因为 web_2 不知道它的<br />\n stock_count 的</p>\n<p>拷贝已经过期。<br />\n结果我们会认为有超过商品的实际数量的库存，因为卖给顾客的库存商品并不存在，我们将让他们非常失望。</p>\n<blockquote>\n<p>变更越频繁，读数据和更新数据的间隙越长，也就越可能丢失变更。</p>\n<p>在数据库领域中，有两种方法通常被用来确保并发更新时变更不会丢失：</p>\n</blockquote>\n<ul>\n<li>悲观并发控制</li>\n</ul>\n<p>这种方法被关系型数据库广泛使用，它假定有变更冲突可能发生，因此阻塞访问资源以防止冲突。<br />\n一个典型的例子是读取一行数据之前先将其锁住，确保只有放置锁的线程能够对这行数据进行修改。</p>\n<ul>\n<li>乐观并发控制</li>\n</ul>\n<p>Elasticsearch<br />\n 中使用的这种方法假定冲突是不可能发生的，并且不会阻塞正在尝试的操作。<br />\n然而，如果源数据在读写当中被修改，更新将会失败。应用程序接下来将决定该如何解决冲突。<br />\n例如，可以重试更新、使用新的数据、或者将相关情况报告给用户。</p>\n<h3 id=\"482-乐观并发控制\"><a class=\"anchor\" href=\"#482-乐观并发控制\">#</a> 4.8.2 乐观并发控制</h3>\n<p>Elasticsearch 是分布式的。当文档创建、更新或删除时，<br />\n新版本的文档必须复制到集群中的其他节点。Elasticsearch<br />\n 也是异步和并发的，这意味着这些复制请求被并行发送，并且到达目的地时也许<br />\n顺序是乱的 。 Elasticsearch<br />\n 需要一种方法确保文档的旧版本不会覆盖新的版本。</p>\n<p>当我们之前讨论 index ， GET 和 delete 请求时，我们指出每个文档都有一个<br />\n_version （版本）号，当文档被修改时版本号递增。 Elasticsearch 使用这个<br />\n version<br />\n 号来确保变更以正确顺序得到执行。如果旧版本的文档在新版本之后到达，它可以被简单的忽略。</p>\n<p>我们可以利用 version 号来确保<br />\n应用中相互冲突的变更不会导致数据丢失。我们通过指定想要修改文档的 version<br />\n 号来达到这个目的。 如果该版本不是当前版本号，我们的请求将会失败。</p>\n<p>老的版本 es 使用 version，但是新版本不支持了，会报下面的错误，提示我们用<br />\n if_seq_no 和 if_primary_term</p>\n<p>{</p>\n<p>&quot;error&quot;: {</p>\n<p>&quot;root_cause&quot;: [</p>\n<p>{</p>\n<p>&quot;type&quot;: &quot;action_request_validation_exception&quot;,</p>\n<p>&quot;reason&quot;: &quot;Validation Failed: 1: internal versioning can not be used<br />\nfor optimistic concurrency control. Please use `if_seq_no` and<br />\n`if_primary_term` instead;&quot;</p>\n<p>}</p>\n<p>],</p>\n<p>&quot;type&quot;: &quot;action_request_validation_exception&quot;,</p>\n<p>&quot;reason&quot;: &quot;Validation Failed: 1: internal versioning can not be used<br />\nfor optimistic concurrency control. Please use `if_seq_no` and<br />\n`if_primary_term` instead;&quot;</p>\n<p>},</p>\n<p>&quot;status&quot;: 400</p>\n<p>}</p>\n<p><strong>4.8.3</strong><br />\n 外部系统版本控制一个常见的设置是使用其它数据库作为主要的数据存储，使用<br />\n Elasticsearch 做数据检索，<br />\n这意味着主数据库的所有更改发生时都需要被复制到 Elasticsearch<br />\n，如果多个进程负责这一数据同步，你可能遇到类似于之前描述的并发问题。如果你的主数据库已经有了版本号 --- 或一个能作为版本号的字段值比如<br />\n timestamp ---</p>\n<p>那么你就可以在 Elasticsearch 中通过增加 version_type=external<br />\n 到查询字符串的方式重用这些相同的版本号， 版本号必须是大于零的整数，<br />\n且小于 9.2E+18 --- 一个 Java 中 long</p>\n<p>类型的正值。</p>\n<p>外部版本号的处理方式和我们之前讨论的内部版本号的处理方式有些不同，</p>\n<p>Elasticsearch 不是检查当前 _version 和请求中指定的版本号是否相同，<br />\n而是检查当前 _version 是否 小于 指定的版本号。<br />\n如果请求成功，外部的版本号作为文档的新 _version 进行存储。</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image372.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;2.92001312335958in&quot;}</p>\n<img data-src=\"/Distribution/Elasticsearch/image374.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;3.003764216972878in&quot;}</p>\n</blockquote>\n<p>外部版本号不仅在索引和删除请求是可以指定，而且在 创建<br />\n新文档时也可以指定。</p>\n<h2 id=\"45-kibana\"><a class=\"anchor\" href=\"#45-kibana\">#</a> 4.5 Kibana</h2>\n<p>Kibana 是一个免费且开放的用户界面，能够让你对 Elasticsearch<br />\n 数据进行可视化，并让你在 Elastic Stack<br />\n 中进行导航。你可以进行各种操作，从跟踪查询负载，到理解请求如何流经你的整个应用，都能轻松完成。</p>\n<blockquote>\n<p>下载地址：<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMva2liYW5hL2tpYmFuYS03LjguMC13aW5kb3dzLXg4Nl82NC56aXA=\">https://artifacts.elastic.co/downloads/kibana/kibana-7.8.0-windows-x86_64.zip</span></span>[<span class=\"ul\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMva2liYW5hL2tpYmFuYS03LjguMC13aW5kb3dzLXg4Nl82NC56aXA=\">https://artifacts.elastic.co/downloads/kibana/kibana-7.8.0-windows-x86_64.zip</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcnRpZmFjdHMuZWxhc3RpYy5jby9kb3dubG9hZHMva2liYW5hL2tpYmFuYS03LjguMC13aW5kb3dzLXg4Nl82NC56aXA=\">https://artifacts.elastic.co/downloads/kibana/kibana-7.8.0-windows-x86_64.zip</span>)</p>\n</blockquote>\n<ol>\n<li>\n<p>解压缩下载的 zip 文件</p>\n</li>\n<li>\n<p>修改 config/kibana.yml 文件</p>\n</li>\n</ol>\n<p># 默认端口</p>\n<p>server.port: 5601</p>\n<p># ES 服务器的地址</p>\n<p>elasticsearch.hosts: [&quot;<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo5MjAw\">http://localhost:9200</span>&quot;]</p>\n<p># 索引名</p>\n<p>kibana.index: &quot;.kibana&quot;</p>\n<p># 支持中文</p>\n<p>i18n.locale: &quot;zh-CN&quot;</p>\n<ol start=\"3\">\n<li>Windows 环境下执行 bin/kibana.bat 文件</li>\n</ol>\n<img data-src=\"/Distribution/Elasticsearch/image376.jpg\" class=\"\">{width=\"3.51875in\"\n<p>height=&quot;1.8243055555555556in&quot;}</p>\n<ol start=\"4\">\n<li>通过浏览器访问 : <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo1NjAx\">http://localhost:5601</span></li>\n</ol>\n<img data-src=\"/Distribution/Elasticsearch/image377.jpg\" class=\"\">{width=\"4.453973097112861in\"\n<p>height=&quot;2.2845833333333334in&quot;}</p>\n<h2 id=\"51-spring-data-框架集成\"><a class=\"anchor\" href=\"#51-spring-data-框架集成\">#</a> 5.1 Spring Data 框架集成</h2>\n<h3 id=\"511-spring-data-框架介绍\"><a class=\"anchor\" href=\"#511-spring-data-框架介绍\">#</a> 5.1.1 Spring Data 框架介绍</h3>\n<p>Spring Data<br />\n 是一个用于简化数据库、非关系型数据库、索引库访问，并支持云服务的开源框架。其主要目标是使得对数据的访问变得方便快捷，并支持<br />\n map-reduce 框架和云计算数据服务。 Spring Data 可以极大的简化<br />\n JPA（Elasticsearch„）的写法，可以在几乎不用写实现的情况下，实现对数据的访问和操作。除了<br />\n CRUD 外，还包括如分页、排序等一些常用的功能。</p>\n<blockquote>\n<p class=\"ul\">Spring Data<br />\n 的官网：[<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5n\">https://spring.io/projects/spring</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWRhdGE=\">-data</span>]</p>\n<img data-src=\"/Distribution/Elasticsearch/image379.jpg\" class=\"\">{width=\"5.822778871391076in\"\n<p>height=&quot;1.7329297900262468in&quot;}</p>\n</blockquote>\n<p>Spring Data 常用的功能模块如下：</p>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image381.jpg\" class=\"\">{width=\"1.3416666666666666in\"\n<p>height=&quot;3.2758464566929133in&quot;}</p>\n</blockquote>\n<h3 id=\"512-spring-data-elasticsearch-介绍\"><a class=\"anchor\" href=\"#512-spring-data-elasticsearch-介绍\">#</a> 5.1.2 Spring Data Elasticsearch 介绍</h3>\n<p>Spring Data Elasticsearch 基于 spring data API 简化 Elasticsearch<br />\n 操作，将原始操作</p>\n<p>Elasticsearch 的客户端 API 进行封装 。Spring Data 为 Elasticsearch<br />\n 项目提供集成搜索引擎。 Spring Data Elasticsearch POJO<br />\n 的关键功能区域为中心的模型与 Elastichsearch 交互文档和轻</p>\n<p>松地编写一个存储索引库数据访问层。</p>\n<blockquote>\n<p>官方网站: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWRhdGEtZWxhc3RpY3NlYXJjaA==\">https://spring.io/projects/spring-data-elasticsearch</span></p>\n<img data-src=\"/Distribution/Elasticsearch/image383.jpg\" class=\"\">{width=\"4.072361111111111in\"\n<p>height=&quot;1.8791797900262468in&quot;}</p>\n</blockquote>\n<h3 id=\"513-spring-data-elasticsearch-版本对比\"><a class=\"anchor\" href=\"#513-spring-data-elasticsearch-版本对比\">#</a> 5.1.3 Spring Data Elasticsearch 版本对比</h3>\n<img data-src=\"/Distribution/Elasticsearch/image385.jpg\" class=\"\">{width=\"4.246527777777778in\"\n<p>height=&quot;1.5291666666666666in&quot;}</p>\n<p>目前最新 springboot 对应 Elasticsearch7.6.2，Spring boot2.3.x<br />\n 一般可以兼容 Elasticsearch7.x</p>\n<h3 id=\"514-框架集成\"><a class=\"anchor\" href=\"#514-框架集成\">#</a> 5.1.4 框架集成</h3>\n<img data-src=\"/Distribution/Elasticsearch/image386.jpg\" class=\"\">{width=\"4.703973097112861in\"\n<p>height=&quot;2.8731627296587927in&quot;}</p>\n<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</p>\n<p>&lt;project xmlns=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4w\">http://maven.apache.org/POM/4.0.0</span>&quot;<br />\nxmlns:xsi=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2U=\">http://www.w3.org/2001/XMLSchema-instance</span>&quot;<br />\nxsi:schemaLocation=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4w\">http://maven.apache.org/POM/4.0.0</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcveHNkL21hdmVuLTQuMC4wLnhzZA==\">http://maven.apache.org/xsd/maven-4.0.0.xsd</span>&quot;&gt;</p>\n<p>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</p>\n<p>&lt;parent&gt;</p>\n<p>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;2.3.6.RELEASE&lt;/version&gt;</p>\n<p>&lt;relativePath/&gt;</p>\n<p>&lt;/parent&gt;</p>\n<p>&lt;groupId&gt;com.atguigu.es&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;springdata-elasticsearch&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;1.0&lt;/version&gt;</p>\n<p>&lt;properties&gt;</p>\n<p>&lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</p>\n<p>&lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</p>\n<p>&lt;/properties&gt;</p>\n<p>&lt;dependencies&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;lombok&lt;/artifactId&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br />\n&lt;scope&gt;runtime&lt;/scope&gt;</p>\n<p>&lt;optional&gt;true&lt;/optional&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</p>\n<p>&lt;scope&gt;test&lt;/scope&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;junit&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;junit&lt;/artifactId&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.springframework&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;spring-test&lt;/artifactId&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;/dependencies&gt;</p>\n<p>&lt;/project&gt;</p>\n<ol start=\"3\">\n<li>增加配置文件</li>\n</ol>\n<p>在 resources 目录中增加 application.properties 文件</p>\n<p># es 服务地址</p>\n<p>elasticsearch.host=127.0.0.1</p>\n<p># es 服务端口</p>\n<p>elasticsearch.port=9200</p>\n<p># 配置日志级别，开启 debug 日志</p>\n<p>logging.level.com.atguigu.es=debug</p>\n<ol start=\"4\">\n<li>SpringBoot 主程序</li>\n</ol>\n<p>+----------------------------------------------------------------------+<br />\n| package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>;                                              |<br />\n|                                                                      |<br />\n| import org.springframework.boot.SpringApplication; import            |<br />\n| org.springframework.boot.autoconfigure.SpringBootApplication;        |<br />\n|                                                                      |<br />\n| @SpringBootApplication public class                                 |<br />\n| SpringDataElasticSearchMainApplication { public static void          |<br />\n| main(String[] args) {                                              |<br />\n|                                                                      |<br />\n| Sprin                                                                |<br />\n| gApplication.run(SpringDataElasticSearchMainApplication.class,args); |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+----------------------------------------------------------------------+</p>\n<ol start=\"5\">\n<li>数据实体类</li>\n</ol>\n<p>package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>;</p>\n<p>import lombok.AllArgsConstructor; import lombok.Data; import<br />\nlombok.NoArgsConstructor; import lombok.ToString;</p>\n<p>@Data</p>\n<p>@NoArgsConstructor</p>\n<p>@AllArgsConstructor @ToString public class Product { private Long<br />\nid;// 商品唯一标识 private String title;// 商品名称 private String<br />\ncategory;// 分类名称 private Double price;// 商品价格 private String<br />\nimages;// 图片地址</p>\n<p>}</p>\n<p>6. 配置类</p>\n<ul>\n<li>\n<p>ElasticsearchRestTemplate 是 spring-data-elasticsearch<br />\n 项目中的一个类，和其他 spring 项目中的 template 类似。</p>\n</li>\n<li>\n<p>在新版的 spring-data-elasticsearch 中，ElasticsearchRestTemplate<br />\n 代替了原来的 ElasticsearchTemplate。</p>\n</li>\n<li>\n<p>原因是 ElasticsearchTemplate 基于 TransportClient，TransportClient<br />\n 即将在 8.x 以后的版本中移除。所以，我们推荐使用<br />\n ElasticsearchRestTemplate。</p>\n</li>\n<li>\n<p>ElasticsearchRestTemplate 基于 RestHighLevelClient<br />\n 客户端的。需要自定义配置类，继承</p>\n</li>\n</ul>\n<blockquote>\n<p>AbstractElasticsearchConfiguration，并实现<br />\n elasticsearchClient () 抽象方法，创建 RestHighLevelClient 对象。</p>\n</blockquote>\n<p>+----------------------------------------------------------------------+<br />\n| package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>;                                              |<br />\n|                                                                      |<br />\n| import lombok.Data; import org.apache.http.HttpHost; import          |<br />\n| org.elasticsearch.client.RestClient; import                          |<br />\n| org.elasticsearch.client.RestClientBuilder; import                   |<br />\n| org.elasticsearch.client.RestHighLevelClient; import                 |<br />\n| org.springframework.boot.context.properties.ConfigurationProperties; |<br />\n| import org.springframework.context.annotation.Configuration; import  |<br />\n| org.spri                                                             |<br />\n| ngframework.data.elasticsearch.config.AbstractElasticsearchConfigura |<br />\n| tion;                                                                |<br />\n|                                                                      |<br />\n| @ConfigurationProperties(prefix = &quot;elasticsearch&quot;)                |<br />\n|                                                                      |<br />\n| @Configuration                                                      |<br />\n|                                                                      |<br />\n| @Data public class ElasticsearchConfig extends                      |<br />\n| AbstractElasticsearchConfiguration { private String host ; private   |<br />\n| Integer port ;                                                       |<br />\n|                                                                      |<br />\n| // 重写父类方法                                                       |<br />\n|                                                                      |<br />\n| @Override                                                           |<br />\n|                                                                      |<br />\n| public RestHighLevelClient elasticsearchClient() {                   |<br />\n|                                                                      |<br />\n| RestClientBuilder builder = RestClient.builder(new HttpHost(host,    |<br />\n| port));                                                              |<br />\n|                                                                      |<br />\n| RestHighLevelClient restHighLevelClient = new                        |<br />\n|                                                                      |<br />\n| RestHighLevelClient(builder); return restHighLevelClient;            |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+----------------------------------------------------------------------+</p>\n<ol start=\"7\">\n<li>DAO 数据访问对象</li>\n</ol>\n<p>package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>;</p>\n<p>import<br />\norg.springframework.data.elasticsearch.repository.ElasticsearchRepository;<br />\nimport org.springframework.stereotype.Repository;</p>\n<p>@Repository public interface ProductDao extends<br />\nElasticsearchRepository&lt;Product,Long&gt; {</p>\n<p>}</p>\n<ol start=\"8\">\n<li>实体类映射操作</li>\n</ol>\n<p>package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>;</p>\n<p>+----------------------------------------------------------------------+<br />\n| import lombok.AllArgsConstructor; import lombok.Data; import         |<br />\n| lombok.NoArgsConstructor; import lombok.ToString; import             |<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL29yZy5zcHJpbmdmcmFtZXdvcmsuZGF0YS5hbm5vdGF0aW9uLklk\">org.springframework.data.annotation.Id</span>; import                       |<br />\n| org.springframework.data.elasticsearch.annotations.Document; import  |<br />\n| org.springframework.data.elasticsearch.annotations.Field; import     |<br />\n| org.springframework.data.elasticsearch.annotations.FieldType;        |<br />\n|                                                                      |<br />\n| @Data                                                               |<br />\n|                                                                      |<br />\n| @NoArgsConstructor                                                  |<br />\n|                                                                      |<br />\n| @AllArgsConstructor                                                 |<br />\n|                                                                      |<br />\n| @ToString                                                           |<br />\n|                                                                      |<br />\n| @Document(indexName = &quot;shopping&quot;, shards = 3, replicas = 1)       |<br />\n| public class Product {                                               |<br />\n|                                                                      |<br />\n| // 必须有 id, 这里的 id 是全局唯一的标识，等同于 es 中的 &quot;_id&quot;            |<br />\n|                                                                      |<br />\n| @Id                                                                 |<br />\n|                                                                      |<br />\n| private Long id;// 商品唯一标识                                       |<br />\n|                                                                      |<br />\n| /**                                                                |<br />\n|                                                                      |<br />\n| -   type : 字段数据类型                                              |<br />\n|                                                                      |<br />\n| -   analyzer : 分词器类型                                            |<br />\n|                                                                      |<br />\n| -   index : 是否索引 (默认:true)                                      |<br />\n|                                                                      |<br />\n| -   Keyword : 短语，不进行分词                                        |<br />\n|                                                                      |<br />\n| */                                                                  |<br />\n|                                                                      |<br />\n| @Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;) private   |<br />\n| String title;// 商品名称 @Field (type = FieldType.Keyword) private    |<br />\n| String category;// 分类名称 @Field (type = FieldType.Double) private  |<br />\n| Double price;// 商品价格                                              |<br />\n|                                                                      |<br />\n| @Field(type = FieldType.Keyword, index = false) private String      |<br />\n| images;// 图片地址                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+----------------------------------------------------------------------+</p>\n<ol start=\"9\">\n<li>索引操作</li>\n</ol>\n<p>+----------------------------------------------------------------------+<br />\n| package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>;                                              |<br />\n|                                                                      |<br />\n| import org.junit.Test; import org.junit.runner.RunWith; import       |<br />\n| org.springframework.beans.factory.annotation.Autowired; import       |<br />\n| org.springframework.boot.test.context.SpringBootTest; import         |<br />\n| or                                                                   |<br />\n| g.springframework.data.elasticsearch.core.ElasticsearchRestTemplate; |<br />\n| import org.springframework.test.context.junit4.SpringRunner;         |<br />\n|                                                                      |<br />\n| @RunWith(SpringRunner.class)                                        |<br />\n|                                                                      |<br />\n| @SpringBootTest public class SpringDataESIndexTest {                |<br />\n|                                                                      |<br />\n| // 注入 ElasticsearchRestTemplate                                      |<br />\n|                                                                      |<br />\n| @Autowired                                                          |<br />\n|                                                                      |<br />\n| private ElasticsearchRestTemplate elasticsearchRestTemplate;         |<br />\n|                                                                      |<br />\n| // 创建索引并增加映射配置                                             |<br />\n|                                                                      |<br />\n| @Test                                                               |<br />\n|                                                                      |<br />\n| public void createIndex(){                                           |<br />\n|                                                                      |<br />\n| // 创建索引，系统初始化会自动创建索引                                 |<br />\n|                                                                      |<br />\n| System.out.println (&quot;创建索引&quot;);                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| @Test                                                               |<br />\n+----------------------------------------------------------------------+</p>\n<p>public void deleteIndex(){</p>\n<p>// 创建索引，系统初始化会自动创建索引</p>\n<p>boolean flg = elasticsearchRestTemplate.deleteIndex(Product.class);</p>\n<p>System.out.println (&quot;删除索引 =&quot; + flg);</p>\n<p>} }</p>\n<ol start=\"10\">\n<li>文档操作</li>\n</ol>\n<p>+----------------------------------------------------------------------+<br />\n| package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>;                                              |<br />\n|                                                                      |<br />\n| import org.junit.Test; import org.junit.runner.RunWith; import       |<br />\n| org.springframework.beans.factory.annotation.Autowired; import       |<br />\n| org.springframework.boot.test.context.SpringBootTest; import         |<br />\n| org.springframework.data.domain.Page; import                         |<br />\n| org.springframework.data.domain.PageRequest; import                  |<br />\n| org.springframework.data.domain.Sort; import                         |<br />\n| org.springframework.test.context.junit4.SpringRunner;                |<br />\n|                                                                      |<br />\n| import java.util.ArrayList; import java.util.List;                   |<br />\n|                                                                      |<br />\n| @RunWith(SpringRunner.class)                                        |<br />\n|                                                                      |<br />\n| @SpringBootTest public class SpringDataESProductDaoTest {           |<br />\n|                                                                      |<br />\n| @Autowired private ProductDao productDao;                           |<br />\n|                                                                      |<br />\n| /**                                                                |<br />\n|                                                                      |<br />\n| * 新增                                                              |<br />\n|                                                                      |<br />\n| */ @Test                                                           |<br />\n|                                                                      |<br />\n| public void save(){                                                  |<br />\n|                                                                      |<br />\n| Product product = new Product(); product.setId(2L);                  |<br />\n| product.setTitle (&quot;华为手机&quot;); product.setCategory (&quot;手机&quot;);       |<br />\n| product.setPrice(2999.0);                                            |<br />\n| product.setImages(&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1L2h3LmpwZw==\">http://www.atguigu/hw.jpg</span>&quot;);                    |<br />\n| productDao.save(product);                                            |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| // 修改                                                               |<br />\n|                                                                      |<br />\n| @Test                                                               |<br />\n|                                                                      |<br />\n| public void update(){                                                |<br />\n|                                                                      |<br />\n| Product product = new Product(); product.setId(1L);                  |<br />\n| product.setTitle (&quot;小米 2 手机&quot;); product.setCategory (&quot;手机&quot;);      |<br />\n| product.setPrice(9999.0);                                            |<br />\n|                                                                      |<br />\n| product.setImages(&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1L3htLmpwZw==\">http://www.atguigu/xm.jpg</span>&quot;);                    |<br />\n| productDao.save(product);                                            |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| // 根据 id 查询                                                         |<br />\n|                                                                      |<br />\n| @Test                                                               |<br />\n|                                                                      |<br />\n| public void findById(){                                              |<br />\n|                                                                      |<br />\n| Product product = productDao.findById(1L).get();                     |<br />\n|                                                                      |<br />\n| System.out.println(product);                                         |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| // 查询所有                                                           |<br />\n+======================================================================+<br />\n| @Test                                                               |<br />\n|                                                                      |<br />\n| public void findAll(){                                               |<br />\n|                                                                      |<br />\n| Iterable&lt;Product&gt; products = productDao.findAll();                 |<br />\n|                                                                      |<br />\n| for (Product product : products) {                                   |<br />\n|                                                                      |<br />\n| System.out.println(product);                                         |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| // 删除                                                               |<br />\n|                                                                      |<br />\n| @Test                                                               |<br />\n|                                                                      |<br />\n| public void delete(){                                                |<br />\n|                                                                      |<br />\n| Product product = new Product(); product.setId(1L);                  |<br />\n|                                                                      |<br />\n| productDao.delete(product);                                          |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| // 批量新增                                                           |<br />\n|                                                                      |<br />\n| @Test                                                               |<br />\n|                                                                      |<br />\n| public void saveAll(){                                               |<br />\n|                                                                      |<br />\n| List&lt;Product&gt; productList = new ArrayList&lt;&gt;(); for (int i = 0; i |<br />\n| &lt; 10; i++) { Product product = new Product();                       |<br />\n| product.setId(Long.valueOf(i));                                      |<br />\n| product.setTitle (&quot;[&quot;+i+&quot;] 小米手机&quot;);                           |<br />\n| product.setCategory (&quot;手机&quot;); product.setPrice (1999.0+i);           |<br />\n| product.setImages(&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1L3htLmpwZw==\">http://www.atguigu/xm.jpg</span>&quot;);                    |<br />\n| productList.add(product);                                            |<br />\n|                                                                      |<br />\n| } productDao.saveAll(productList);                                   |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| // 分页查询                                                           |<br />\n|                                                                      |<br />\n| @Test public void findByPageable(){                                 |<br />\n|                                                                      |<br />\n| // 设置排序 (排序方式，正序还是倒序，排序的 id)                         |<br />\n|                                                                      |<br />\n| Sort sort = <span class=\"exturl\" data-url=\"aHR0cDovL1NvcnQuYnk=\">Sort.by</span>(Sort.Direction.DESC,&quot;id&quot;); int                 |<br />\n| currentPage=0;// 当前页，第一页从 0 开始，1 表示第二页 int pageSize =    |<br />\n| 5;// 每页显示多少条                                                   |<br />\n|                                                                      |<br />\n| // 设置查询分页                                                       |<br />\n|                                                                      |<br />\n| PageRequest pageRequest = PageRequest.of(currentPage,                |<br />\n| pageSize,sort); // 分页查询                                           |<br />\n|                                                                      |<br />\n| Page&lt;Product&gt; productPage = productDao.findAll(pageRequest);       |<br />\n|                                                                      |<br />\n| for (Product Product : productPage.getContent()) {                   |<br />\n|                                                                      |<br />\n| System.out.println(Product);                                         |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+----------------------------------------------------------------------+</p>\n<ol start=\"11\">\n<li>文档搜索</li>\n</ol>\n<p>package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>;</p>\n<p>import org.elasticsearch.index.query.QueryBuilders; import<br />\norg.elasticsearch.index.query.TermQueryBuilder; import org.junit.Test;<br />\nimport org.junit.runner.RunWith; import<br />\norg.springframework.beans.factory.annotation.Autowired; import<br />\norg.springframework.boot.test.context.SpringBootTest; import<br />\norg.springframework.data.domain.PageRequest; import<br />\norg.springframework.test.context.junit4.SpringRunner;</p>\n<p>@RunWith(SpringRunner.class)</p>\n<p>+----------------------------------------------------------------------+<br />\n| @SpringBootTest public class SpringDataESSearchTest {               |<br />\n|                                                                      |<br />\n| @Autowired private ProductDao productDao;                           |<br />\n|                                                                      |<br />\n| /**                                                                |<br />\n|                                                                      |<br />\n| -   term 查询                                                         |<br />\n|                                                                      |<br />\n| -   search (termQueryBuilder) 调用搜索方法，参数查询构建器对象        |<br />\n|                                                                      |<br />\n| */ @Test                                                           |<br />\n|                                                                      |<br />\n| public void termQuery(){                                             |<br />\n|                                                                      |<br />\n| TermQueryBuilder termQueryBuilder =                                  |<br />\n| QueryBuilders.termQuery (&quot;title&quot;, &quot;小米&quot;);                       |<br />\n|                                                                      |<br />\n| Iterable&lt;Product&gt; products = productDao.search(termQueryBuilder);  |<br />\n| for (Product product : products) {                                   |<br />\n|                                                                      |<br />\n| System.out.println(product);                                         |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| /**                                                                |<br />\n|                                                                      |<br />\n| * term 查询加分页                                                    |<br />\n|                                                                      |<br />\n| */ @Test public void termQueryByPage(){ int currentPage= 0 ;       |<br />\n|                                                                      |<br />\n| int pageSize = 5;                                                    |<br />\n|                                                                      |<br />\n| // 设置查询分页                                                       |<br />\n|                                                                      |<br />\n| PageRequest pageRequest = PageRequest.of(currentPage, pageSize);     |<br />\n| TermQueryBuilder termQueryBuilder =                                  |<br />\n| QueryBuilders.termQuery (&quot;title&quot;, &quot;小米&quot;);                       |<br />\n|                                                                      |<br />\n| Iterable&lt;Product&gt; products =                                       |<br />\n| productDao.search(termQueryBuilder,pageRequest); for (Product        |<br />\n| product : products) {                                                |<br />\n|                                                                      |<br />\n| System.out.println(product);                                         |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+----------------------------------------------------------------------+</p>\n<h2 id=\"52-spark-streaming-框架集成\"><a class=\"anchor\" href=\"#52-spark-streaming-框架集成\">#</a> 5.2 Spark Streaming 框架集成</h2>\n<h3 id=\"521-spark-streaming-框架介绍\"><a class=\"anchor\" href=\"#521-spark-streaming-框架介绍\">#</a> 5.2.1 Spark Streaming 框架介绍</h3>\n<p>Spark Streaming 是 Spark core API<br />\n 的扩展，支持实时数据流的处理，并且具有可扩展，</p>\n<p>高吞吐量，容错的特点。 数据可以从许多来源获取，如 Kafka，Flume，Kinesis<br />\n 或 TCP sockets，并且可以使用复杂的算法进行处理，这些算法使用诸如<br />\n map，reduce，join 和 window 等高级函数表示。<br />\n最后，处理后的数据可以推送到文件系统，数据库等。 实际上，您可以将</p>\n<p>Spark 的机器学习和图形处理算法应用于数据流。</p>\n<img data-src=\"/Distribution/Elasticsearch/image388.jpg\" class=\"\">{width=\"4.030555555555556in\"\n<p>height=&quot;1.3458333333333334in&quot;}</p>\n<h3 id=\"522-框架集成\"><a class=\"anchor\" href=\"#522-框架集成\">#</a> 5.2.2 框架集成</h3>\n<img data-src=\"/Distribution/Elasticsearch/image389.jpg\" class=\"\">{width=\"4.223973097112861in\"\n<p>height=&quot;2.6564971566054245in&quot;}</p>\n<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;project<br />\nxmlns=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4w\">http://maven.apache.org/POM/4.0.0</span>&quot;<br />\nxmlns:xsi=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2U=\">http://www.w3.org/2001/XMLSchema-instance</span>&quot;<br />\nxsi:schemaLocation=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4w\">http://maven.apache.org/POM/4.0.0</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcveHNkL21hdmVuLTQuMC4wLnhzZA==\">http://maven.apache.org/xsd/maven-4.0.0.xsd</span>&quot;&gt;</p>\n<p>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</p>\n<p>&lt;groupId&gt;com.atguigu.es&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;sparkstreaming-elasticsearch&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;1.0&lt;/version&gt;</p>\n<p>&lt;properties&gt;</p>\n<p>&lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</p>\n<p>&lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</p>\n<p>&lt;/properties&gt;</p>\n<p>&lt;dependencies&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;3.0.0&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.apache.spark&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;spark-streaming_2.12&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;3.0.0&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;7.8.0&lt;/version&gt; &lt;/dependency&gt;</p>\n<p>&lt;!-- elasticsearch 的客户端 --&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;7.8.0&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;!-- elasticsearch 依赖 2.x 的 log4j --&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;log4j-api&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;2.8.2&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;2.8.2&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;!-- &lt;dependency&gt;--&gt;</p>\n<p>&lt;!-- &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;--&gt;</p>\n<p>&lt;!-- &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;--&gt;</p>\n<p>&lt;!-- &lt;version&gt;2.11.1&lt;/version&gt;--&gt;</p>\n<p>&lt;!-- &lt;/dependency&gt;--&gt;</p>\n<p>&lt;!-- &lt;!– junit 单元测试 –&gt;--&gt;</p>\n<p>&lt;!-- &lt;dependency&gt;--&gt;</p>\n<p>&lt;!-- &lt;groupId&gt;junit&lt;/groupId&gt;--&gt;</p>\n<p>&lt;!-- &lt;artifactId&gt;junit&lt;/artifactId&gt;--&gt;</p>\n<p>&lt;!-- &lt;version&gt;4.12&lt;/version&gt;--&gt;</p>\n<p>&lt;!-- &lt;/dependency&gt;--&gt;</p>\n<p>&lt;/dependencies&gt;</p>\n<p>&lt;/project&gt;</p>\n<p>3. 功能实现</p>\n<p>+----------------------------------------------------------------------+<br />\n| package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>                                               |<br />\n|                                                                      |<br />\n| import org.apache.http.HttpHost import org.apache.spark.SparkConf    |<br />\n| import org.apache.spark.streaming.dstream.ReceiverInputDStream       |<br />\n| import org.apache.spark.streaming.{Seconds, StreamingContext} import |<br />\n| org.elasticsearch.action.index.IndexRequest import                   |<br />\n| org.elasticsearch.client.indices.CreateIndexRequest                  |<br />\n|                                                                      |<br />\n| import org.elasticsearch.client.{RequestOptions, RestClient,         |<br />\n|                                                                      |<br />\n| RestHighLevelClient} import                                          |<br />\n| org.elasticsearch.common.xcontent.XContentType                       |<br />\n|                                                                      |<br />\n| import java.util.Date                                                |<br />\n|                                                                      |<br />\n| object SparkStreamingESTest {                                        |<br />\n|                                                                      |<br />\n| def main(args: Array[String]): Unit = {                            |<br />\n|                                                                      |<br />\n| val sparkConf = new                                                  |<br />\n|                                                                      |<br />\n| SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;ESTest&quot;) val    |<br />\n| ssc = new StreamingContext(sparkConf, Seconds(3))                    |<br />\n|                                                                      |<br />\n| val ds: ReceiverInputDStream[String] =                             |<br />\n| ssc.socketTextStream(&quot;localhost&quot;,                                  |<br />\n|                                                                      |<br />\n| 9999)                                                               |<br />\n|                                                                      |<br />\n| ds.foreachRDD( rdd =&gt; {                                             |<br />\n|                                                                      |<br />\n| println(&quot;*************** &quot; + new Date())            |<br />\n| rdd.foreach( data =&gt; {                                              |<br />\n|                                                                      |<br />\n| val client = new RestHighLevelClient(                                |<br />\n+======================================================================+<br />\n| RestClient.builder(new HttpHost(&quot;localhost&quot;, 9200,                 |<br />\n|                                                                      |<br />\n| &quot;http&quot;))                                                           |<br />\n|                                                                      |<br />\n| );                                                                   |<br />\n|                                                                      |<br />\n| // 新增文档 - 请求对象 val request = new IndexRequest ();             |<br />\n|                                                                      |<br />\n| // 设置索引及唯一性标识 val ss = data.split (&quot; &quot;)                   |<br />\n|                                                                      |<br />\n| println(&quot;ss = &quot; + ss.mkString(&quot;,&quot;))                              |<br />\n| request.index(&quot;sparkstreaming&quot;).id(ss(0)); val productJson =       |<br />\n| s&quot;&quot;&quot;                                                              |<br />\n|                                                                      |<br />\n| | { &quot;data&quot;:&quot;${ss(1)}&quot; }                                        |<br />\n|                                                                      |<br />\n| |&quot;&quot;&quot;.stripMargin;                                                |<br />\n|                                                                      |<br />\n| // 添加文档数据，数据格式为 JSON 格式                                  |<br />\n| request.source(productJson,XContentType.JSON);                       |<br />\n|                                                                      |<br />\n| // 客户端发送请求，获取响应对象                                      |<br />\n|                                                                      |<br />\n| val response = client.index(request,                                 |<br />\n|                                                                      |<br />\n| RequestOptions.DEFAULT);                                             |<br />\n|                                                                      |<br />\n| System.out.println(&quot;_index:&quot; + response.getIndex());              |<br />\n|                                                                      |<br />\n| System.out.println(&quot;_id:&quot; + response.getId());                    |<br />\n|                                                                      |<br />\n| System.out.println(&quot;_result:&quot; + response.getResult());            |<br />\n|                                                                      |<br />\n| client.close()                                                       |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| )                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| )                                                                    |<br />\n|                                                                      |<br />\n| ssc.start() ssc.awaitTermination()                                   |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+----------------------------------------------------------------------+</p>\n<h2 id=\"53-flink-框架集成\"><a class=\"anchor\" href=\"#53-flink-框架集成\">#</a> 5.3 Flink 框架集成</h2>\n<h3 id=\"531-flink-框架介绍\"><a class=\"anchor\" href=\"#531-flink-框架介绍\">#</a> 5.3.1 Flink 框架介绍</h3>\n<blockquote>\n<img data-src=\"/Distribution/Elasticsearch/image391.jpg\" class=\"\">{width=\"4.916666666666667in\"\n<p>height=&quot;1.8333333333333333in&quot;} Apache Spark<br />\n 是一种基于内存的快速、通用、可扩展的大数据分析计算引擎。</p>\n</blockquote>\n<p>Apache Spark<br />\n 掀开了内存计算的先河，以内存作为赌注，赢得了内存计算的飞速发展。但是在其火热的同时，开发人员发现，在<br />\n Spark 中，计算框架普遍存在的缺点和不足依然没有完全解决，而这些问题随着<br />\n 5G 时代的来临以及决策者对实时数据分析结果的迫切需要而凸显的更加明显：</p>\n<ul>\n<li>\n<p>数据精准一次性处理（Exactly-Once）</p>\n</li>\n<li>\n<p>乱序数据，迟到数据</p>\n</li>\n<li>\n<p>低延迟，高吞吐，准确性</p>\n</li>\n<li>\n<p>容错性</p>\n</li>\n</ul>\n<p>Apache Flink<br />\n 是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。在<br />\n Spark<br />\n 火热的同时，也默默地发展自己，并尝试着解决其他计算框架的问题。慢慢地，随着这些问题的解决，Flink<br />\n 慢慢被绝大数程序员所熟知并进行大力推广，阿里公司在 2015 年改进<br />\n Flink，并创建了内部分支<br />\n Blink，目前服务于阿里集团内部搜索、推荐、广告和蚂蚁等大量核心实时业务。</p>\n<h3 id=\"532-框架集成\"><a class=\"anchor\" href=\"#532-框架集成\">#</a> 5.3.2 框架集成</h3>\n<img data-src=\"/Distribution/Elasticsearch/image392.jpg\" class=\"\">{width=\"4.390639763779528in\"\n<p>height=&quot;2.873024934383202in&quot;}</p>\n<p>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</p>\n<p>&lt;project xmlns=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4w\">http://maven.apache.org/POM/4.0.0</span>&quot;<br />\nxmlns:xsi=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2U=\">http://www.w3.org/2001/XMLSchema-instance</span>&quot;<br />\nxsi:schemaLocation=&quot;<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvUE9NLzQuMC4w\">http://maven.apache.org/POM/4.0.0</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcveHNkL21hdmVuLTQuMC4wLnhzZA==\">http://maven.apache.org/xsd/maven-4.0.0.xsd</span>&quot;&gt;</p>\n<p>&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</p>\n<p>&lt;groupId&gt;com.atguigu.es&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;flink-elasticsearch&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;1.0&lt;/version&gt;</p>\n<p>&lt;properties&gt;</p>\n<p>&lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;</p>\n<p>&lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;</p>\n<p>&lt;/properties&gt;</p>\n<p>&lt;dependencies&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;flink-scala_2.12&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;1.12.0&lt;/version&gt;</p>\n<p>&lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;flink-streaming-scala_2.12&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;1.12.0&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;flink-clients_2.12&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;1.12.0&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;org.apache.flink&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;flink-connector-elasticsearch7_2.11&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;1.12.0&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;!-- jackson --&gt;</p>\n<p>&lt;dependency&gt;</p>\n<p>&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</p>\n<p>&lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</p>\n<p>&lt;version&gt;2.11.1&lt;/version&gt;</p>\n<p>&lt;/dependency&gt;</p>\n<p>&lt;/dependencies&gt;</p>\n<p>&lt;/project&gt;</p>\n<p>3. 功能实现</p>\n<p>+----------------------------------------------------------------------+<br />\n| package <span class=\"exturl\" data-url=\"aHR0cDovL2NvbS5hdGd1aWd1LmVz\">com.atguigu.es</span>;                                              |<br />\n|                                                                      |<br />\n| import org.apache.flink.api.common.functions.RuntimeContext; import  |<br />\n| org.apache.flink.streaming.api.datastream.DataStreamSource; import   |<br />\n| or                                                                   |<br />\n| g.apache.flink.streaming.api.environment.StreamExecutionEnvironment; |<br />\n| import                                                               |<br />\n| org.apac                                                             |<br />\n| he.flink.streaming.connectors.elasticsearch.ElasticsearchSinkFunctio |<br />\n| n; import                                                            |<br />\n| org.apache.flink.streaming.connectors.elasticsearch.RequestIndexer;  |<br />\n| import                                                               |<br />\n| org                                                                  |<br />\n| .apache.flink.streaming.connectors.elasticsearch7.ElasticsearchSink; |<br />\n| import org.apache.http.HttpHost; import                              |<br />\n| org.elasticsearch.action.index.IndexRequest; import                  |<br />\n| org.elasticsearch.client.Requests;                                   |<br />\n|                                                                      |<br />\n| import java.util.ArrayList; import java.util.HashMap; import         |<br />\n| java.util.List; import java.util.Map;                                |<br />\n|                                                                      |<br />\n| public class FlinkElasticsearchSinkTest { public static void         |<br />\n| main(String[] args) throws Exception {                             |<br />\n|                                                                      |<br />\n| StreamExecutionEnvironment env =                                     |<br />\n|                                                                      |<br />\n| StreamExecutionEnvironment.getExecutionEnvironment();                |<br />\n|                                                                      |<br />\n| DataStreamSource&lt;String&gt; source =                                  |<br />\n| env.socketTextStream(&quot;localhost&quot;,                                  |<br />\n|                                                                      |<br />\n| 9999);                                                               |<br />\n|                                                                      |<br />\n| List&lt;HttpHost&gt; httpHosts = new ArrayList&lt;&gt;(); httpHosts.add(new  |<br />\n| HttpHost(&quot;127.0.0.1&quot;, 9200, &quot;http&quot;));                            |<br />\n|                                                                      |<br />\n| <a href=\"//httpHosts.add\">//httpHosts.add</a>(new HttpHost(&quot;10.2.3.1&quot;, 9200, &quot;http&quot;));         |<br />\n|                                                                      |<br />\n| // use a ElasticsearchSink.Builder to create an ElasticsearchSink    |<br />\n|                                                                      |<br />\n| ElasticsearchSink.Builder&lt;String&gt; esSinkBuilder = new              |<br />\n|                                                                      |<br />\n| ElasticsearchSink.Builder&lt;&gt;(                                       |<br />\n+======================================================================+<br />\n| httpHosts,                                                           |<br />\n|                                                                      |<br />\n| new ElasticsearchSinkFunction&lt;String&gt;() {                          |<br />\n|                                                                      |<br />\n| public IndexRequest createIndexRequest(String element) {             |<br />\n| Map&lt;String, String&gt; json = new HashMap&lt;&gt;(); json.put(&quot;data&quot;,   |<br />\n| element);                                                            |<br />\n|                                                                      |<br />\n| return Requests.indexRequest()                                       |<br />\n|                                                                      |<br />\n| .index(&quot;my-index&quot;)                                                 |<br />\n|                                                                      |<br />\n| //.type(&quot;my-type&quot;)                                                 |<br />\n|                                                                      |<br />\n| .source(json);                                                       |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| @Override                                                           |<br />\n|                                                                      |<br />\n| public void process(String element, RuntimeContext ctx,              |<br />\n| RequestIndexer indexer) { indexer.add(createIndexRequest(element));  |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| );                                                                   |<br />\n|                                                                      |<br />\n| // configuration for the bulk requests; this instructs the sink to   |<br />\n| emit after every element, otherwise they would be buffered           |<br />\n| esSinkBuilder.setBulkFlushMaxActions(1);                             |<br />\n|                                                                      |<br />\n| // provide a RestClientFactory for custom configuration on the       |<br />\n| internally created REST client                                       |<br />\n|                                                                      |<br />\n| // esSinkBuilder.setRestClientFactory(                               |<br />\n|                                                                      |<br />\n| // restClientBuilder -&gt; {                                           |<br />\n|                                                                      |<br />\n| // restClientBuilder.setDefaultHeaders(...)                         |<br />\n|                                                                      |<br />\n| // restClientBuilder.setMaxRetryTimeoutMillis(...)                  |<br />\n|                                                                      |<br />\n| // restClientBuilder.setPathPrefix(...)                             |<br />\n|                                                                      |<br />\n| // restClientBuilder.setHttpClientConfigCallback(...)               |<br />\n|                                                                      |<br />\n| // }                                                                 |<br />\n|                                                                      |<br />\n| // );                                                                |<br />\n|                                                                      |<br />\n| source.addSink(esSinkBuilder.build());                               |<br />\n|                                                                      |<br />\n| env.execute(&quot;flink-es&quot;);                                           |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n|                                                                      |<br />\n| }                                                                    |<br />\n+----------------------------------------------------------------------+</p>\n<h1 id=\"第6章-elasticsearch-优化\"><a class=\"anchor\" href=\"#第6章-elasticsearch-优化\">#</a> 第 6 章 Elasticsearch 优化</h1>\n<h2 id=\"61-硬件选择\"><a class=\"anchor\" href=\"#61-硬件选择\">#</a> 6.1 硬件选择</h2>\n<p>Elasticsearch 的基础是<br />\n Lucene，所有的索引和文档数据是存储在本地的磁盘中，具体的路径可在 ES<br />\n 的配置文件../config/elasticsearch.yml 中配置，如下：</p>\n<p>+----------------------------------------------------------------------+<br />\n| #\\                                                                  |<br />\n| ----------------------------------- |<br />\n| Paths                                                                |<br />\n|                                                                      |<br />\n| -\\                                                                  |<br />\n| ----------------------------------- |<br />\n|                                                                      |<br />\n| #                                                                   |<br />\n|                                                                      |<br />\n| # Path to directory where to store the data (separate multiple      |<br />\n| locations by comma):                                                 |<br />\n|                                                                      |<br />\n| #                                                                   |<br />\n|                                                                      |<br />\n| #path.data: /path/to/data                                           |<br />\n|                                                                      |<br />\n| #                                                                   |<br />\n|                                                                      |<br />\n| # Path to log files:                                                |<br />\n|                                                                      |<br />\n| #                                                                   |<br />\n|                                                                      |<br />\n| #path.logs: /path/to/logs #                                        |<br />\n+----------------------------------------------------------------------+</p>\n<p>磁盘在现代服务器上通常都是瓶颈。Elasticsearch<br />\n 重度使用磁盘，你的磁盘能处理的吞吐量越大，你的节点就越稳定。这里有一些优化磁盘<br />\n I/O 的技巧：</p>\n<ul>\n<li>\n<p>使用 SSD。就像其他地方提过的， 他们比机械磁盘优秀多了。</p>\n</li>\n<li>\n<p>使用 RAID 0。条带化 RAID 会提高磁盘<br />\n I/O，代价显然就是当一块硬盘故障时整个就故障了。不要</p>\n</li>\n</ul>\n<blockquote>\n<p>使用镜像或者奇偶校验 RAID 因为副本已经提供了这个功能。</p>\n</blockquote>\n<ul>\n<li>另外，使用多块硬盘，并允许 Elasticsearch 通过多个 path.data<br />\n 目录配置把数据条带化分配到它们上</li>\n</ul>\n<blockquote>\n<p>面。</p>\n</blockquote>\n<ul>\n<li>不要使用远程挂载的存储，比如 NFS 或者<br />\n SMB/CIFS。这个引入的延迟对性能来说完全是背道而驰的。</li>\n</ul>\n<h2 id=\"62-分片策略\"><a class=\"anchor\" href=\"#62-分片策略\">#</a> 6.2 分片策略</h2>\n<h3 id=\"621-合理设置分片数\"><a class=\"anchor\" href=\"#621-合理设置分片数\">#</a> 6.2.1 合理设置分片数</h3>\n<p>分片和副本的设计为 ES<br />\n 提供了支持分布式和故障转移的特性，但并不意味着分片和副本是可以无限分配的。而且索引的分片完成分配后由于索引的路由机制，我们是不能重新修改分片数的。</p>\n<blockquote>\n<p>可能有人会说，我不知道这个索引将来会变得多大，并且过后我也不能更改索引的大小，</p>\n</blockquote>\n<p>所以为了保险起见，还是给它设为 1000<br />\n 个分片吧。但是需要知道的是，一个分片并不是没有代价的。需要了解：</p>\n<ul>\n<li>\n<p>一个分片的底层即为一个 Lucene 索引，会消耗一定文件句柄、内存、以及<br />\n CPU 运转。</p>\n</li>\n<li>\n<p>每一个搜索请求都需要命中索引中的每一个分片，如果每一个分片都处于不同的节点还好，<br />\n但如果多个分片都需要在同一个节点上竞争使用相同的资源就有些糟糕了。</p>\n</li>\n<li>\n<p>用于计算相关度的词项统计信息是基于分片的。如果有许多分片，每一个都只有很少的数据会导致很</p>\n</li>\n</ul>\n<blockquote>\n<p>低的相关度。</p>\n</blockquote>\n<p>一个业务索引具体需要分配多少分片可能需要架构师和技术人员对业务的增长有个预先的判断，横向扩展应当分阶段进行。为下一阶段准备好足够的资源。<br />\n只有当你进入到下一个阶段，你才有时间思考需要作出哪些改变来达到这个阶段。一般来说，我们遵循一些原则：</p>\n<ul>\n<li>控制每个分片占用的硬盘容量不超过 ES 的最大 JVM<br />\n 的堆空间设置（一般设置不超过 32G，参考下文的 JVM<br />\n 设置原则），因此，如果索引的总容量在 500G 左右，那分片大小在 16<br />\n 个左右即可；当然，</li>\n</ul>\n<blockquote>\n<p>最好同时考虑原则 2。</p>\n</blockquote>\n<ul>\n<li>考虑一下 node<br />\n 数量，一般一个节点有时候就是一台物理机，如果分片数过多，大大超过了节点数，</li>\n</ul>\n<blockquote>\n<p>很可能会导致一个节点上存在多个分片，一旦该节点故障，即使保持了 1<br />\n 个以上的副本，同样有可能</p>\n<p>会导致数据丢失，集群无法恢复。所以， 一般都设置分片数不超过节点数的 3<br />\n 倍。</p>\n</blockquote>\n<ul>\n<li>主分片，副本和节点最大数之间数量，我们分配的时候可以参考以下关系：节点数 &lt;= 主分片数 *（副本数 + 1）</li>\n</ul>\n<h3 id=\"622-推迟分片分配\"><a class=\"anchor\" href=\"#622-推迟分片分配\">#</a> 6.2.2 推迟分片分配</h3>\n<blockquote>\n<p>对于节点瞬时中断的问题，默认情况，集群会等待一分钟来查看节点是否会重新加入，</p>\n</blockquote>\n<p>如果这个节点在此期间重新加入，重新加入的节点会保持其现有的分片数据，不会触发新的分片分配。这样就可以减少<br />\n ES 在自动再平衡可用分片时所带来的极大开销。</p>\n<blockquote>\n<p>通过修改参数 delayed_timeout<br />\n，可以延长再均衡的时间，可以全局设置也可以在索引</p>\n</blockquote>\n<p>级别进行修改:</p>\n<p>PUT /_all/_settings</p>\n<p>{</p>\n<p>&quot;settings&quot;: {</p>\n<p>&quot;index.unassigned.node_left.delayed_timeout&quot;: &quot;5m&quot;</p>\n<p>}</p>\n<p>}</p>\n<h2 id=\"63-路由选择\"><a class=\"anchor\" href=\"#63-路由选择\">#</a> 6.3 路由选择</h2>\n<blockquote>\n<p>当我们查询文档的时候，Elasticsearch<br />\n 如何知道一个文档应该存放到哪个分片中呢？它</p>\n</blockquote>\n<p>其实是通过下面这个公式来计算出来:</p>\n<p>shard = hash(routing) % number_of_primary_shards</p>\n<p>routing 默认值是文档的 id，也可以采用自定义值，比如用户 id。</p>\n<p>不带 <strong>routing</strong> 查询</p>\n<p>在查询的时候因为不知道要查询的数据具体在哪个分片上，所以整个过程分为 2<br />\n 个步骤</p>\n<ul>\n<li>\n<p>分发：请求到达协调节点后，协调节点将查询请求分发到每个分片上。</p>\n</li>\n<li>\n<p>聚合:<br />\n 协调节点搜集到每个分片上查询结果，在将查询的结果进行排序，之后给用户返回结果。</p>\n</li>\n</ul>\n<p>带 <strong>routing</strong> 查询</p>\n<p>查询的时候，可以直接根据 routing<br />\n 信息定位到某个分配查询，不需要查询所有的分配，经过协调节点排序。</p>\n<p>向上面自定义的用户查询，如果 routing 设置为 userid<br />\n 的话，就可以直接查询出数据来，效率提升很多。</p>\n<h2 id=\"64-写入速度优化\"><a class=\"anchor\" href=\"#64-写入速度优化\">#</a> 6.4 写入速度优化</h2>\n<p>ES<br />\n 的默认配置，是综合了数据可靠性、写入速度、搜索实时性等因素。实际使用时，我们需要根据公司要求，进行偏向性的优化。</p>\n<blockquote>\n<p>针对于搜索性能要求不高，但是对写入要求较高的场景，我们需要尽可能的选择恰当写</p>\n</blockquote>\n<p>优化策略。综合来说，可以考虑以下几个方面来提升写索引的性能：</p>\n<ul>\n<li>\n<p>加大 Translog Flush ，目的是降低 Iops、Writeblock。</p>\n</li>\n<li>\n<p>增加 Index Refresh 间隔，目的是减少 Segment Merge 的次数。</p>\n</li>\n<li>\n<p>调整 Bulk 线程池和队列。</p>\n</li>\n<li>\n<p>优化节点间的任务分布。</p>\n</li>\n<li>\n<p>优化 Lucene 层的索引建立，目的是降低 CPU 及 IO。</p>\n</li>\n</ul>\n<h3 id=\"641-批量数据提交\"><a class=\"anchor\" href=\"#641-批量数据提交\">#</a> 6.4.1 批量数据提交</h3>\n<p>ES 提供了 Bulk API 支持批量操作，当我们有大量的写任务时，可以使用 Bulk<br />\n 来进行批量写入。</p>\n<p>通用的策略如下：Bulk 默认设置批量提交的数据量不能超过<br />\n 100M。数据条数一般是根据文档的大小和服务器性能而定的，但是单次批处理的数据大小应从<br />\n 5MB～15MB 逐渐增加，当性能没有提升时，把这个数据量作为最大值。</p>\n<h3 id=\"642-优化存储设备\"><a class=\"anchor\" href=\"#642-优化存储设备\">#</a> 6.4.2 优化存储设备</h3>\n<p>ES<br />\n 是一种密集使用磁盘的应用，在段合并的时候会频繁操作磁盘，所以对磁盘要求较</p>\n<p>高，当磁盘速度提升之后，集群的整体性能会大幅度提高。</p>\n<h3 id=\"643-合理使用合并\"><a class=\"anchor\" href=\"#643-合理使用合并\">#</a> 6.4.3 合理使用合并</h3>\n<p>Lucene 以段的形式存储数据。当有新的数据写入索引时，Lucene<br />\n 就会自动创建一个新的段。</p>\n<p>随着数据量的变化，段的数量会越来越多，消耗的多文件句柄数及 CPU<br />\n 就越多，查询效率就会下降。</p>\n<p>由于 Lucene 段合并的计算量庞大，会消耗大量的 I/O，所以 ES<br />\n 默认采用较保守的策略，让后台定期进行段合并</p>\n<h3 id=\"644-减少-refresh-的次数\"><a class=\"anchor\" href=\"#644-减少-refresh-的次数\">#</a> 6.4.4 减少 Refresh 的次数</h3>\n<blockquote>\n<p>Lucene 在新增数据时，采用了延迟写入的策略，默认情况下索引的<br />\n refresh_interval 为</p>\n</blockquote>\n<p>1 秒。</p>\n<p>Lucene 将待写入的数据先写到内存中，超过 1 秒（默认）时就会触发一次<br />\n Refresh，然后 Refresh 会把内存中的的数据刷新到操作系统的文件缓存系统中。</p>\n<blockquote>\n<p>如果我们对搜索的实效性要求不高，可以将 Refresh 周期延长，例如 30 秒。</p>\n<p>这样还可以有效地减少段刷新次数，但这同时意味着需要消耗更多的 Heap<br />\n 内存。</p>\n</blockquote>\n<h3 id=\"645-加大-flush-设置\"><a class=\"anchor\" href=\"#645-加大-flush-设置\">#</a> 6.4.5 加大 Flush 设置</h3>\n<blockquote>\n<p>Flush 的主要目的是把文件缓存系统中的段持久化到硬盘，当 Translog<br />\n 的数据量达到</p>\n</blockquote>\n<p>512MB 或者 30 分钟时，会触发一次 Flush。</p>\n<blockquote>\n<p>index.translog.flush_threshold_size 参数的默认值是<br />\n 512MB，我们进行修改。</p>\n</blockquote>\n<p>增加参数值意味着文件缓存系统中可能需要存储更多的数据，所以我们需要为操作系统的文件缓存系统留下足够的空间。</p>\n<h4 id=\"646-减少副本的数量\"><a class=\"anchor\" href=\"#646-减少副本的数量\">#</a> 6.4.6 减少副本的数量</h4>\n<p>ES 为了保证集群的可用性，提供了<br />\n Replicas（副本）支持，然而每个副本也会执行分析、索引及可能的合并过程，所以<br />\n Replicas 的数量会严重影响写索引的效率。</p>\n<p>当写索引时，需要把写入的数据都同步到副本节点，副本节点越多，写索引的效率就越慢。</p>\n<p>如果我们需要大批量进行写入操作，可以先禁止 Replica 复制，设置<br />\n index.number_of_replicas: 0 关闭副本。在写入完成后，Replica<br />\n 修改回正常的状态。</p>\n<h2 id=\"65-内存设置\"><a class=\"anchor\" href=\"#65-内存设置\">#</a> 6.5 内存设置</h2>\n<blockquote>\n<p>ES 默认安装后设置的内存是<br />\n 1GB，对于任何一个现实业务来说，这个设置都太小了。</p>\n</blockquote>\n<p>如果是通过解压安装的 ES，则在 ES 安装文件中包含一个 jvm.option<br />\n 文件，添加如下命令来设置 ES 的堆大小，Xms 表示堆的初始大小，Xmx<br />\n 表示可分配的最大内存，都是 1GB。</p>\n<p>确保 Xmx 和 Xms 的大小是相同的，其目的是为了能够在 Java<br />\n 垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源，可以减轻伸缩堆大小带来的压力。</p>\n<p>假设你有一个 64G 内存的机器，按照正常思维思考，你可能会认为把 64G<br />\n 内存都给 ES 比较好，但现实是这样吗， 越大越好？虽然内存对 ES<br />\n 来说是非常重要的，但是答案是否定的！</p>\n<blockquote>\n<p>因为 ES 堆内存的分配需要满足以下两个原则：</p>\n</blockquote>\n<ul>\n<li>不要超过物理内存的 50%：Lucene 的设计目的是把底层 OS<br />\n 里的数据缓存到内存中。</li>\n</ul>\n<p>Lucene<br />\n 的段是分别存储到单个文件中的，这些文件都是不会变化的，所以很利于缓存，同时操作系<br />\n统也会把这些段文件缓存起来，以便更快的访问。</p>\n<p>如果我们设置的堆内存过大，Lucene 可用的内存将会减少，就会严重影响降低<br />\n Lucene 的全文本查 询性能。</p>\n<ul>\n<li>堆内存的大小最好不要超过 32GB：在 Java<br />\n 中，所有对象都分配在堆上，然后有一个 Klass Pointer<br />\n 指针指向它的类元数据。</li>\n</ul>\n<p>这个指针在 64 位的操作系统上为 64 位，64<br />\n 位的操作系统可以使用更多的内存（2^64）。在 32 位 的系统上为 32 位，32<br />\n 位的操作系统的最大寻址空间为 4GB（2^32）。</p>\n<blockquote>\n<p>但是 64<br />\n 位的指针意味着更大的浪费，因为你的指针本身大了。浪费内存不算，更糟糕的是，更大的</p>\n</blockquote>\n<p>指针在主内存和缓存器（例如 LLC, L1<br />\n 等）之间移动数据的时候，会占用更多的带宽。</p>\n<p>最终我们都会采用 31 G 设置</p>\n<blockquote>\n<p>-Xms 31g</p>\n<p>-Xmx 31g</p>\n</blockquote>\n<p>假设你有个机器有 128 GB<br />\n 的内存，你可以创建两个节点，每个节点内存分配不超过 32 GB。<br />\n也就是说不超过 64 GB 内存给 ES 的堆内存，剩下的超过 64 GB 的内存给<br />\n Lucene</p>\n<h2 id=\"66-重要配置\"><a class=\"anchor\" href=\"#66-重要配置\">#</a> 6.6 重要配置</h2>\n<p>+------------------------+-----------------+------------------------+<br />\n| 参数名                 | &gt; 参数值        | &gt; 说明                 |<br />\n+<mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark><mark>+</mark></mark></mark></mark></mark></mark></mark></mark>=+</mark></mark></mark></mark>================+<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL2NsdXN0ZXIubmFtZQ==\">cluster.name</span>           | &gt; elasticsearch | &gt; 配置 ES              |<br />\n|                        |                 | &gt; 的集群名称，默认值是 |<br />\n|                        |                 | &gt; ES，建议改成与所     |<br />\n+------------------------+-----------------+------------------------+<br />\n|                        |                 | 存数据相关的名称，ES   |<br />\n|                        |                 | 会自动发现在同一网段   |<br />\n|                        |                 | 下的集群名称相同的节点 |<br />\n+------------------------+-----------------+------------------------+<br />\n| <span class=\"exturl\" data-url=\"aHR0cDovL25vZGUubmFtZQ==\">node.name</span>              | node-1          | 集群中                 |<br />\n|                        |                 | 的节点名，在同一个集群 |<br />\n|                        |                 | 中不能重复。节点的名称 |<br />\n|                        |                 | 一旦设置，就不能再改变 |<br />\n|                        |                 | 了。当然，也可以设置成 |<br />\n|                        |                 | 服务器的主机名称，例如 |<br />\n|                        |                 | no                     |<br />\n|                        |                 | <span class=\"exturl\" data-url=\"aHR0cDovL2RlLm5hbWU=\">de.name</span>😒{HOSTNAME}。 |<br />\n+------------------------+-----------------+------------------------+<br />\n| node.master            | true            | 指定该节               |<br />\n|                        |                 | 点是否有资格被选举成为 |<br />\n|                        |                 | Master 节点，默认是    |<br />\n|                        |                 | True，如果被设置为     |<br />\n|                        |                 | True，则只是有资格成为 |<br />\n|                        |                 | Master                 |<br />\n|                        |                 | 节点，具体能否成为     |<br />\n|                        |                 | Master                 |<br />\n|                        |                 | 节                     |<br />\n|                        |                 | 点，需要通过选举产生。 |<br />\n+------------------------+-----------------+------------------------+<br />\n| node.data              | true            | 指定该节点是           |<br />\n|                        |                 | 否存储索引数据，默认为 |<br />\n|                        |                 | True。数据             |<br />\n|                        |                 | 的增、删、改、查都是在 |<br />\n|                        |                 | Data 节点完成的。      |<br />\n+------------------------+-----------------+------------------------+<br />\n| index.number_of_shards | 1               | 设置                   |<br />\n|                        |                 | 都索引分片个数，默认是 |<br />\n|                        |                 | 1                      |<br />\n|                        |                 | 片。也可以             |<br />\n|                        |                 | 在创建索引时设置该值， |<br />\n|                        |                 | 具体设置为多大都值要根 |<br />\n|                        |                 | 据数据量的大小来定。如 |<br />\n|                        |                 | 果数据量不大，则设置成 |<br />\n|                        |                 | 1 时效率最高           |<br />\n+------------------------+-----------------+------------------------+<br />\n| in                     | 1               | 设置默认               |<br />\n| dex.number_of_replicas |                 | 的索引副本个数，默认为 |<br />\n|                        |                 | 1                      |<br />\n|                        |                 | 个。副本数越多，集群的 |<br />\n|                        |                 | 可用性越好，但是写索引 |<br />\n|                        |                 | 时需要同步的数据越多。 |<br />\n+------------------------+-----------------+------------------------+<br />\n| transport.tcp.compress | true            | 设置在节点间传输       |<br />\n|                        |                 | 数据时是否压缩，默认为 |<br />\n|                        |                 | False，不压缩          |<br />\n+------------------------+-----------------+------------------------+<br />\n| discovery.ze           | 1               | 设置在选举 Master      |<br />\n| n.minimum_master_nodes |                 | 节点时需要参与的最少   |<br />\n|                        |                 | 的候选主节点数，默认为 |<br />\n|                        |                 | 1。如果使              |<br />\n|                        |                 | 用默认值，则当网络不稳 |<br />\n|                        |                 | 定时有可能会出现脑裂。 |<br />\n|                        |                 |                        |<br />\n|                        |                 | 合理的数值为           |<br />\n|                        |                 | (mast                  |<br />\n|                        |                 | er_eligible_nodes/2)+1 |<br />\n|                        |                 | ，其中                 |<br />\n|                        |                 |                        |<br />\n|                        |                 | master_eligible_nodes  |<br />\n|                        |                 | 表                     |<br />\n|                        |                 | 示集群中的候选主节点数 |<br />\n+------------------------+-----------------+------------------------+<br />\n| disc                   | 3s              | 设置在集               |<br />\n| overy.zen.ping.timeout |                 | 群中自动发现其他节点时 |<br />\n|                        |                 | Ping                   |<br />\n|                        |                 | 连接的超时时间，默认为 |<br />\n|                        |                 | 3 秒。                 |<br />\n|                        |                 |                        |<br />\n|                        |                 | 在较差的网络环境下需要 |<br />\n|                        |                 | 设置得大一点，防止因误 |<br />\n|                        |                 |                        |<br />\n|                        |                 | 判该节点的存           |<br />\n|                        |                 | 活状态而导致分片的转移 |<br />\n+------------------------+-----------------+------------------------+</p>\n<h1 id=\"第7章-elasticsearch-面试题\"><a class=\"anchor\" href=\"#第7章-elasticsearch-面试题\">#</a> 第 7 章 Elasticsearch 面试题</h1>\n<p><strong>7.1</strong> 为什么要使用 <strong>Elasticsearch?</strong></p>\n<blockquote>\n<p>系统中的数据，随着业务的发展，时间的推移，将会非常多，而业务中往往采用模糊查询进行数据的</p>\n</blockquote>\n<p>搜索，而模糊查询会导致查询引擎放弃索引，导致系统查询数据时都是全表扫描，在百万级别的数据库中，查询效率是非常低下的，而我们使用<br />\n ES<br />\n 做一个全文索引，将经常查询的系统功能的某些字段，比如说电商系统的商品表中商品名，描述、价格还有<br />\n id 这些字段我们放入 ES 索引库里，可以提高查询速度。</p>\n<h2 id=\"72-elasticsearch-的-master-选举流程\"><a class=\"anchor\" href=\"#72-elasticsearch-的-master-选举流程\">#</a> 7.2 Elasticsearch 的 master 选举流程？</h2>\n<ul>\n<li>Elasticsearch 的选主是 ZenDiscovery 模块负责的，主要包含<br />\n Ping（节点之间通过这个 RPC 来发现彼此）</li>\n</ul>\n<blockquote>\n<p>和 Unicast（单播模块包含一个主机列表以控制哪些节点需要 ping<br />\n 通）这两部分</p>\n</blockquote>\n<ul>\n<li>对所有可以成为 master 的节点（node.master: true）根据 nodeId<br />\n 字典排序，每次选举每个节点都把自</li>\n</ul>\n<blockquote>\n<p>己所知道节点排一次序，然后选出第一个（第 0 位）节点，暂且认为它是<br />\n master 节点。</p>\n</blockquote>\n<ul>\n<li>如果对某个节点的投票数达到一定的值（可以成为 master 节点数<br />\n n/2+1）并且该节点自己也选举自己，</li>\n</ul>\n<blockquote>\n<p>那这个节点就是 master。否则重新选举一直到满足上述条件。</p>\n</blockquote>\n<ul>\n<li>master<br />\n 节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；data<br />\n 节点可以关闭 http 功能。</li>\n</ul>\n<h2 id=\"73-elasticsearch-集群脑裂问题\"><a class=\"anchor\" href=\"#73-elasticsearch-集群脑裂问题\">#</a> 7.3 Elasticsearch 集群脑裂问题？</h2>\n<p>&quot;脑裂&quot; 问题可能的成因 **😗*</p>\n<ul>\n<li>网络问题：集群间的网络延迟导致一些节点访问不到 master，认为 master<br />\n 挂掉了从而选举出新的</li>\n</ul>\n<blockquote>\n<p>master，并对 master 上的分片和副本标红，分配新的主分片</p>\n</blockquote>\n<ul>\n<li>节点负载：主节点的角色既为 master 又为 data，访问量较大时可能会导致<br />\n ES 停止响应造成大面积延</li>\n</ul>\n<blockquote>\n<p>迟，此时其他节点得不到主节点的响应认为主节点挂掉了，会重新选取主节点。</p>\n</blockquote>\n<ul>\n<li>内存回收：data 节点上的 ES 进程占用的内存较大，引发 JVM<br />\n 的大规模内存回收，造成 ES 进程失去</li>\n</ul>\n<blockquote>\n<p>响应。</p>\n</blockquote>\n<p>脑裂问题解决方案：</p>\n<ul>\n<li>减少误判：discovery.zen.ping_timeout 节点状态的响应时间，默认为<br />\n 3s，可以适当调大，如果 master<br />\n 在该响应时间的范围内没有做出响应应答，判断该节点已经挂掉了。调大参数（如<br />\n 6s，</li>\n</ul>\n<blockquote>\n<p>discovery.zen.ping_timeout:6），可适当减少误判。</p>\n</blockquote>\n<ul>\n<li>选举触发: discovery.zen.minimum_master_nodes:1<br />\n 该参数是用于控制选举行为发生的最小集群主节点数量。当备选主节点的个数大于等于该参数的值，<br />\n且备选主节点中有该参数个节点认为主节点挂了，进行选举。官方建议为（n/2）+1，n<br />\n 为主节点个数</li>\n</ul>\n<p>（即有资格成为主节点的节点个数）</p>\n<ul>\n<li>角色分离：即 master 节点与 data<br />\n 节点分离，限制角色主节点配置为：node.master: true node.data: false</li>\n</ul>\n<blockquote>\n<p>从节点配置为：node.master: false node.data: true</p>\n</blockquote>\n<h2 id=\"74-elasticsearch-索引文档的流程\"><a class=\"anchor\" href=\"#74-elasticsearch-索引文档的流程\">#</a> 7.4 Elasticsearch 索引文档的流程？</h2>\n<img data-src=\"/Distribution/Elasticsearch/image394.jpg\" class=\"\">{width=\"4.190972222222222in\"\n<p>height=&quot;1.7541666666666667in&quot;}</p>\n<ul>\n<li>\n<p>协调节点默认使用文档 ID 参与计算（也支持通过<br />\n routing），以便为路由提供合适的分片： <strong>shard = hash(document_id) %<br />\n(num_of_primary_shards)</strong></p>\n</li>\n<li>\n<p>当分片所在的节点接收到来自协调节点的请求后，会将请求写入到 Memory<br />\nBuffer，然后定时（默认</p>\n</li>\n</ul>\n<blockquote>\n<p>是每隔 1 秒）写入到 Filesystem Cache，这个从 Memory Buffer 到<br />\n Filesystem Cache 的过程就叫做 refresh；</p>\n</blockquote>\n<ul>\n<li>当然在某些情况下，存在 Momery Buffer 和 Filesystem Cache<br />\n 的数据可能会丢失，ES 是通过 translog</li>\n</ul>\n<blockquote>\n<p>的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到<br />\n translog 中，当 Filesystem</p>\n<p>cache 中的数据写入到磁盘中时，才会清除掉，这个过程叫做 flush；</p>\n</blockquote>\n<ul>\n<li>在 flush 过程中，内存中的缓冲将被清除，内容被写入一个新段，段的<br />\n fsync 将创建一个新的提交点，</li>\n</ul>\n<blockquote>\n<p>并将内容刷新到磁盘，旧的 translog 将被删除并开始一个新的 translog。</p>\n</blockquote>\n<ul>\n<li>flush 触发的时机是定时触发（默认 30 分钟）或者 translog<br />\n 变得太大（默认为 512M）时；</li>\n</ul>\n<h2 id=\"75-elasticsearch-更新和删除文档的流程\"><a class=\"anchor\" href=\"#75-elasticsearch-更新和删除文档的流程\">#</a> 7.5 Elasticsearch 更新和删除文档的流程？</h2>\n<ul>\n<li>删除和更新也都是写操作，但是 Elasticsearch<br />\n 中的文档是不可变的，因此不能被删除或者改动以展示</li>\n</ul>\n<blockquote>\n<p>其变更；</p>\n</blockquote>\n<ul>\n<li>磁盘上的每个段都有一个相应的.del<br />\n 文件。当删除请求发送后，文档并没有真的被删除，而是在.del</li>\n</ul>\n<blockquote>\n<p>文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del<br />\n 文件中被标记为删除的文档将不会被写入新段。</p>\n</blockquote>\n<ul>\n<li>在新的文档被创建时，Elasticsearch<br />\n 会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del</li>\n</ul>\n<blockquote>\n<p>文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结</p>\n<p>果中被过滤掉。</p>\n</blockquote>\n<h2 id=\"76-elasticsearch-搜索的流程\"><a class=\"anchor\" href=\"#76-elasticsearch-搜索的流程\">#</a> 7.6 Elasticsearch 搜索的流程？</h2>\n<img data-src=\"/Distribution/Elasticsearch/image395.jpg\" class=\"\">{width=\"4.625in\"\n<p>height=&quot;2.1590277777777778in&quot;}</p>\n<ul>\n<li>\n<p>搜索被执行成一个两阶段过程，我们称之为 Query Then Fetch；</p>\n</li>\n<li>\n<p>在初始查询阶段时，查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。<br />\n每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size<br />\n 的优先队列。PS：在搜索的时候是会查询</p>\n</li>\n</ul>\n<blockquote>\n<p>Filesystem Cache 的，但是有部分数据还在 Memory<br />\nBuffer，所以搜索是近实时的。</p>\n</blockquote>\n<ul>\n<li>每个分片返回各自优先队列中 所有文档的 ID 和排序值<br />\n给协调节点，它合并这些值到自己的优先队</li>\n</ul>\n<blockquote>\n<p>列中来产生一个全局排序后的结果列表。</p>\n</blockquote>\n<ul>\n<li>接下来就是取回阶段，协调节点辨别出哪些文档需要被取回并向相关的分片提交多个<br />\n GET 请求。每</li>\n</ul>\n<blockquote>\n<p>个分片加载并丰富文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了，</p>\n<p>协调节点返回结果给客户端。</p>\n</blockquote>\n<ul>\n<li>Query Then Fetch<br />\n 的搜索类型在文档相关性打分的时候参考的是本分片的数据，这样在文档数量较少</li>\n</ul>\n<blockquote>\n<p>的时候可能不够准确，DFS Query Then Fetch 增加了一个预查询的处理，询问<br />\n Term 和 Document</p>\n<p>frequency，这个评分更准确，但是性能会变差。</p>\n</blockquote>\n<h2 id=\"77-elasticsearch-在部署时对-linux-的设置有哪些优化方法\"><a class=\"anchor\" href=\"#77-elasticsearch-在部署时对-linux-的设置有哪些优化方法\">#</a> 7.7 Elasticsearch 在部署时，对 Linux 的设置有哪些优化方法？</h2>\n<ul>\n<li>\n<p>64 GB 内存的机器是非常理想的， 但是 32 GB 和 16 GB<br />\n 机器也是很常见的。少于 8 GB 会适得其反。</p>\n</li>\n<li>\n<p>如果你要在更快的 CPUs<br />\n 和更多的核心之间选择，选择更多的核心更好。多个内核提供的额外并发远胜过稍微快一点点的时钟频率。</p>\n</li>\n<li>\n<p>如果你负担得起 SSD，它将远远超出任何旋转介质。 基于 SSD<br />\n 的节点，查询和索引性能都有提升。</p>\n</li>\n</ul>\n<blockquote>\n<p>如果你负担得起，SSD 是一个好的选择。</p>\n</blockquote>\n<ul>\n<li>\n<p>即使数据中心们近在咫尺，也要避免集群跨越多个数据中心。绝对要避免集群跨越大的地理距离。</p>\n</li>\n<li>\n<p>请确保运行你应用程序的 JVM 和服务器的 JVM 是完全一样的。 在<br />\n Elasticsearch 的几个地方，使</p>\n</li>\n</ul>\n<blockquote>\n<p>用 Java 的本地序列化。</p>\n</blockquote>\n<ul>\n<li>\n<p>通过设置<br />\n gateway.recover_after_nodes、gateway.expected_nodes、gateway.recover_after_time<br />\n 可以在集群重启的时候避免过多的分片交换，这可能会让数据恢复从数个小时缩短为几秒钟。</p>\n</li>\n<li>\n<p>Elasticsearch<br />\n 默认被配置为使用单播发现，以防止节点无意中加入集群。只有在同一台机器上运行的</p>\n</li>\n</ul>\n<blockquote>\n<p>节点才会自动组成集群。最好使用单播代替组播。</p>\n</blockquote>\n<ul>\n<li>\n<p>不要随意修改垃圾回收器（CMS）和各个线程池的大小。</p>\n</li>\n<li>\n<p>把你的内存的（少于）一半给 Lucene（但不要超过 32 GB！），通过<br />\n ES_HEAP_SIZE 环境变量设置。</p>\n</li>\n<li>\n<p>内存交换到磁盘对服务器性能来说是致命的。如果内存交换到磁盘上，一个<br />\n 100 微秒的操作可能变成 10 毫秒。 再想想那么多 10<br />\n 微秒的操作时延累加起来。 不难看出 swapping 对于性能是多么可</p>\n</li>\n</ul>\n<blockquote>\n<p>怕。</p>\n</blockquote>\n<ul>\n<li>Lucene 使用了大量的文件。同时，Elasticsearch 在节点和 HTTP<br />\n 客户端之间进行通信也使用了大量</li>\n</ul>\n<blockquote>\n<p>的套接字。<br />\n所有这一切都需要足够的文件描述符。你应该增加你的文件描述符，设置一个很大的值，</p>\n<p>如 64,000。</p>\n</blockquote>\n<p>补充：索引阶段性能提升方法</p>\n<ul>\n<li>\n<p>使用批量请求并调整其大小：每次批量数据 5--15 MB 大是个不错的起始点。</p>\n</li>\n<li>\n<p>存储：使用 SSD</p>\n</li>\n<li>\n<p>段和合并：Elasticsearch 默认值是 20<br />\nMB/s，对机械磁盘应该是个不错的设置。如果你用的是 SSD，</p>\n</li>\n</ul>\n<blockquote>\n<p>可以考虑提高到 100--200<br />\nMB/s。如果你在做批量导入，完全不在意搜索，你可以彻底关掉合并限流。另外还可以增加<br />\n index.translog.flush_threshold_size 设置，从默认的 512 MB<br />\n 到更大一些的值，比如 1</p>\n<p>GB，这可以在一次清空触发的时候在事务日志里积累出更大的段。</p>\n</blockquote>\n<ul>\n<li>\n<p>如果你的搜索结果不需要近实时的准确度，考虑把每个索引的<br />\n index.refresh_interval 改到 30s。</p>\n</li>\n<li>\n<p>如果你在做大批量导入，考虑通过设置 index.number_of_replicas: 0<br />\n 关闭副本。</p>\n</li>\n</ul>\n<h2 id=\"78-gc-方面在使用-elasticsearch-时要注意什么\"><a class=\"anchor\" href=\"#78-gc-方面在使用-elasticsearch-时要注意什么\">#</a> 7.8 GC 方面，在使用 Elasticsearch 时要注意什么？</h2>\n<ul>\n<li>\n<p>倒排词典的索引需要常驻内存，无法 GC，需要监控 data node 上 segment<br />\nmemory 增长趋势。</p>\n</li>\n<li>\n<p>各类缓存，field cache, filter cache, indexing cache, bulk queue<br />\n 等等，要设置合理的大小，并且要应该根</p>\n</li>\n</ul>\n<blockquote>\n<p>据最坏的情况来看 heap 是否够用，也就是各类缓存全部占满的时候，还有<br />\n heap 空间可以分配给其他</p>\n<p>任务吗？避免采用 clear cache 等 &quot;自欺欺人&quot; 的方式来释放内存。</p>\n</blockquote>\n<ul>\n<li>\n<p>避免返回大量结果集的搜索与聚合。确实需要大量拉取数据的场景，可以采用<br />\n scan &amp; scroll api 来实现。</p>\n</li>\n<li>\n<p>cluster stats<br />\n 驻留内存并无法水平扩展，超大规模集群可以考虑分拆成多个集群通过 tribe<br />\nnode 连接。</p>\n</li>\n<li>\n<p>想知道 heap 够不够，必须结合实际应用场景，并对集群的 heap<br />\n 使用情况做持续的监控。</p>\n</li>\n</ul>\n<h3 id=\"79-elasticsearch-对于大数据量上亿量级的聚合如何实现\"><a class=\"anchor\" href=\"#79-elasticsearch-对于大数据量上亿量级的聚合如何实现\">#</a> 7.9 Elasticsearch 对于大数据量（上亿量级）的聚合如何实现？</h3>\n<blockquote>\n<p>Elasticsearch 提供的首个近似聚合是 cardinality<br />\n 度量。它提供一个字段的基数，即该字段的 distinct</p>\n</blockquote>\n<p>或者 unique 值的数目。它是基于 HLL 算法的。HLL<br />\n 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的 bits<br />\n 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确<br />\n＝ 更</p>\n<p>多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无</p>\n<p>论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关</p>\n<h2 id=\"710-在并发情况下elasticsearch-如果保证读写一致\"><a class=\"anchor\" href=\"#710-在并发情况下elasticsearch-如果保证读写一致\">#</a> 7.10 在并发情况下，Elasticsearch 如果保证读写一致？</h2>\n<ul>\n<li>\n<p>可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；</p>\n</li>\n<li>\n<p>另外对于写操作，一致性级别支持 quorum/one/all，默认为<br />\n quorum，即只有当大多数分片可用时才允</p>\n</li>\n</ul>\n<blockquote>\n<p>许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故</p>\n<p>障，分片将会在一个不同的节点上重建。</p>\n</blockquote>\n<ul>\n<li>对于读操作，可以设置 replication 为<br />\n sync (默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置<br />\n replication 为 async 时，也可以通过设置搜索请求参数_preference 为<br />\n primary 来查询主分片，</li>\n</ul>\n<blockquote>\n<p>确保文档是最新版本。</p>\n</blockquote>\n<h2 id=\"711-如何监控-elasticsearch-集群状态\"><a class=\"anchor\" href=\"#711-如何监控-elasticsearch-集群状态\">#</a> 7.11 如何监控 Elasticsearch 集群状态？</h2>\n<blockquote>\n<p>elasticsearch-head 插件</p>\n</blockquote>\n<p>通过 Kibana 监控<br />\n Elasticsearch。你可以实时查看你的集群健康状态和性能，也可以分析过去的集群、索引和节点指标</p>\n<h3 id=\"712-是否了解字典树\"><a class=\"anchor\" href=\"#712-是否了解字典树\">#</a> 7.12 是否了解字典树？</h3>\n<ul>\n<li>常用字典数据结构如下所示:</li>\n</ul>\n<img data-src=\"/Distribution/Elasticsearch/image396.jpg\" class=\"\">{width=\"5.759722222222222in\"\n<p>height=&quot;1.426388888888889in&quot;}</p>\n<blockquote>\n<p>字典树又称单词查找树，Trie<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9UcmllJUU2JUEwJTkx\"> 树，</span>是一种<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlQTAlOTElRTUlQkQlQTIlRTclQkIlOTMlRTYlOUUlODQvOTY2MzgwNw==\">树形结构，</span>是一种哈希树的变种。典型应用是用于统计，排</p>\n</blockquote>\n<p>序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。</p>\n<ul>\n<li>Trie<br />\n 的核心思想是空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。</li>\n</ul>\n<blockquote>\n<p>它有 3 个基本性质:</p>\n</blockquote>\n<ul>\n<li>\n<p>根节点不包含字符，除根节点外每一个节点都只包含一个字符。</p>\n</li>\n<li>\n<p>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。</p>\n</li>\n<li>\n<p>每个节点的所有子节点包含的字符都不相同。</p>\n</li>\n</ul>\n<p>对于中文的字典树，每个节点的子节点用一个哈希表存储，这样就不用浪费太大的空间，而且查询速度上可以保留哈希的复杂度<br />\n O (1)。</p>\n<h3 id=\"713-elasticsearch-中的集群-节点-索引-文档-类型是什么\"><a class=\"anchor\" href=\"#713-elasticsearch-中的集群-节点-索引-文档-类型是什么\">#</a> 7.13 Elasticsearch 中的集群、节点、索引、文档、类型是什么？</h3>\n<ul>\n<li>集群是一个或多个节点（服务器）的集合，它们共同保存您的整个数据，并提供跨所有节点的联合索</li>\n</ul>\n<blockquote>\n<p>引和搜索功能。群集由唯一名称标识，默认情况下为 &quot;elasticsearch&quot;。此名称很重要，因为如果节点设</p>\n<p>置为按名称加入群集，则该节点只能是群集的一部分。</p>\n</blockquote>\n<ul>\n<li>\n<p>节点是属于集群一部分的单个服务器。它存储数据并参与群集索引和搜索功能。</p>\n</li>\n<li>\n<p>索引就像关系数据库中的 &quot;数据库&quot;。它有一个定义多种类型的映射。索引是逻辑名称空间，映射到一</p>\n</li>\n</ul>\n<blockquote>\n<p>个或多个主分片，并且可以有零个或多个副本分片。 MySQL =&gt; 数据库<br />\n Elasticsearch =&gt; 索引</p>\n</blockquote>\n<ul>\n<li>文档类似于关系数据库中的一行。不同之处在于索引中的每个文档可以具有不同的结构（字段），但是对于通用字段应该具有相同的数据类型。<br />\nMySQL =&gt; Databases =&gt; Tables =&gt; Columns / Rows</li>\n</ul>\n<blockquote>\n<p>Elasticsearch =&gt; Indices =&gt; Types =&gt; 具有属性的文档</p>\n</blockquote>\n<ul>\n<li>类型是索引的逻辑类别 / 分区，其语义完全取决于用户。</li>\n</ul>\n<h2 id=\"714-elasticsearch-中的倒排索引是什么\"><a class=\"anchor\" href=\"#714-elasticsearch-中的倒排索引是什么\">#</a> 7.14 Elasticsearch 中的倒排索引是什么？</h2>\n<p>倒排索引是搜索引擎的核心。搜索引擎的主要目标是在查找发生搜索条件的文档时提供快速搜索。ES<br />\n 中的倒排索引其实就是 lucene<br />\n 的倒排索引，区别于传统的正向索引，倒排索引会再存储数据时将关键词和数据进行关联，保存到倒排表中，然后查询时，将查询内容进行分词后在倒排表中进行查询，最后匹配数据即可。</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "分布式",
                "分布式",
                "中间件"
            ]
        },
        {
            "id": "https://eth168.top/Web-anteriore/Vue2-3/Vue/",
            "url": "https://eth168.top/Web-anteriore/Vue2-3/Vue/",
            "title": "Vue2",
            "date_published": "2023-06-01T16:00:00.000Z",
            "content_html": "<p><strong>Vue 技术栈 (全家桶)</strong></p>\n<blockquote>\n<p>尚硅谷前端研究院</p>\n</blockquote>\n<h1 id=\"第-1-章vue-核心\"><a class=\"anchor\" href=\"#第-1-章vue-核心\">#</a> 第 1 章：Vue 核心</h1>\n<h2 id=\"11-vue-简介\"><a class=\"anchor\" href=\"#11-vue-简介\">#</a> 1.1. Vue 简介</h2>\n<h3 id=\"111-官网\"><a class=\"anchor\" href=\"#111-官网\">#</a> 1.1.1. 官网</h3>\n<ol>\n<li>\n<p>英文官网: <span><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWVqcy5vcmcv\">https://vuejs.org/</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWVqcy5vcmcv\">https://vuejs.org/</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWVqcy5vcmcv\">https://vuejs.org/</span>)</p>\n</li>\n<li>\n<p>中文官网:<br />\n<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcv\">https://cn.vuejs.org/</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcv\">https://cn.vuejs.org/</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcv\">https://cn.vuejs.org/</span>)</p>\n</li>\n</ol>\n<h3 id=\"112-介绍与描述\"><a class=\"anchor\" href=\"#112-介绍与描述\">#</a> 1.1.2. 介绍与描述</h3>\n<ol>\n<li>\n<p>动态构建用户界面的<strong>渐进式</strong> JavaScript 框架</p>\n</li>\n<li>\n<p>作者：尤雨溪</p>\n</li>\n</ol>\n<h3 id=\"113-vue-的特点\"><a class=\"anchor\" href=\"#113-vue-的特点\">#</a> 1.1.3. Vue 的特点</h3>\n<ol>\n<li>\n<p>遵循 <strong>MVVM</strong> 模式</p>\n</li>\n<li>\n<p>编码简洁，体积小，运行效率高，适合移动 / PC 端开发</p>\n</li>\n<li>\n<p>它本身只关注 UI, 也可以引入其它第三方库开发项目</p>\n</li>\n</ol>\n<h3 id=\"114-与其它-js-框架的关联\"><a class=\"anchor\" href=\"#114-与其它-js-框架的关联\">#</a> 1.1.4. 与其它 JS 框架的关联</h3>\n<ol>\n<li>\n<p>借鉴 Angular 的<strong>模板</strong>和<strong>数据绑定</strong>技术</p>\n</li>\n<li>\n<p>借鉴 React 的<strong>组件化</strong>和<strong>虚拟 DOM</strong> 技术</p>\n</li>\n</ol>\n<h3 id=\"115-vue-周边库\"><a class=\"anchor\" href=\"#115-vue-周边库\">#</a> 1.1.5. Vue 周边库</h3>\n<ol>\n<li>\n<p>vue-cli: vue 脚手架</p>\n</li>\n<li>\n<p>vue-resource</p>\n</li>\n<li>\n<p>axios</p>\n</li>\n<li>\n<p>vue-router: 路由</p>\n</li>\n<li>\n<p>vuex: 状态管理</p>\n</li>\n<li>\n<p>element-ui: 基于 vue 的 UI 组件库 (PC 端)</p>\n</li>\n</ol>\n<blockquote>\n<p>......</p>\n</blockquote>\n<h2 id=\"12-初识-vue\"><a class=\"anchor\" href=\"#12-初识-vue\">#</a> 1.2. 初识 Vue</h2>\n{width=\"3.730944881889764in\"\n<p>height=&quot;2.4135837707786525in&quot;}</p>\n<h2 id=\"13-模板语法\"><a class=\"anchor\" href=\"#13-模板语法\">#</a> 1.3. 模板语法</h2>\n<h3 id=\"131-效果\"><a class=\"anchor\" href=\"#131-效果\">#</a> 1.3.1. 效果</h3>\n{width=\"3.4712226596675415in\"\n<p>height=&quot;2.501083770778653in&quot;}</p>\n<h3 id=\"132-模板的理解\"><a class=\"anchor\" href=\"#132-模板的理解\">#</a> 1.3.2. 模板的理解</h3>\n<blockquote>\n<p>html 中包含了一些 JS 语法代码，语法分为两种，分别为：</p>\n</blockquote>\n<ol>\n<li>\n<p>插值语法（双大括号表达式）</p>\n</li>\n<li>\n<p>指令（以 v - 开头）</p>\n</li>\n</ol>\n<h3 id=\"133-插值语法\"><a class=\"anchor\" href=\"#133-插值语法\">#</a> 1.3.3. 插值语法</h3>\n<ol>\n<li>\n<p>功能：用于解析<strong>标签体</strong>内容</p>\n</li>\n<li>\n<p>语法:  ，xxxx 会作为 js 表达式解析</p>\n</li>\n</ol>\n<h3 id=\"134-指令语法\"><a class=\"anchor\" href=\"#134-指令语法\">#</a> 1.3.4. 指令语法</h3>\n<ol>\n<li>\n<p>功能：解析<strong>标签属性</strong>、解析<strong>标签体内容</strong>、<strong>绑定事件</strong></p>\n</li>\n<li>\n<p>举例：v-bind:href = 'xxxx' ，xxxx 会作为 js 表达式被解析</p>\n</li>\n<li>\n<p>说明：Vue 中有有很多的指令，此处只是用 v-bind 举个例子</p>\n</li>\n</ol>\n<h2 id=\"14-数据绑定\"><a class=\"anchor\" href=\"#14-数据绑定\">#</a> 1.4. 数据绑定</h2>\n<h3 id=\"141-效果\"><a class=\"anchor\" href=\"#141-效果\">#</a> 1.4.1. 效果</h3>\n{width=\"3.291360454943132in\"\n<p>height=&quot;3.0205282152230972in&quot;}</p>\n<h3 id=\"142-单向数据绑定\"><a class=\"anchor\" href=\"#142-单向数据绑定\">#</a> 1.4.2. 单向数据绑定</h3>\n<hr />\n<p>v-bind:href =&quot;xxx&quot;</p>\n<hr />\n<ol>\n<li>\n<p>语法：或简写为 :href</p>\n</li>\n<li>\n<p>特点：数据只能从 data 流向页面</p>\n</li>\n</ol>\n<h3 id=\"143-双向数据绑定\"><a class=\"anchor\" href=\"#143-双向数据绑定\">#</a> 1.4.3. 双向数据绑定</h3>\n<hr />\n<p>v-mode:value=&quot;xxx&quot;</p>\n<hr />\n<ol>\n<li>语法： 或简写为     v-model=&quot;xxx&quot;</li>\n<li>特点：数据不仅能从 data 流向页面，还能从页面流向 data</li>\n<li>注意：仅在 表单类元素 中使用，input、text 等</li>\n</ol>\n<h2 id=\"15-mvvm-模型\"><a class=\"anchor\" href=\"#15-mvvm-模型\">#</a> 1.5. MVVM 模型</h2>\n<ol>\n<li>\n<p>M：模型 (Model) ：对应 data 中的数据</p>\n</li>\n<li>\n<p>V：视图 (View) ：模板</p>\n</li>\n<li>\n<p>VM：视图模型 (ViewModel) ： Vue 实例对象</p>\n</li>\n</ol>\n{width=\"4.693444881889763in\"\n<p>height=&quot;2.7649726596675417in&quot;}</p>\n<h2 id=\"16-事件处理\"><a class=\"anchor\" href=\"#16-事件处理\">#</a> <strong>1.6. 事件处理</strong></h2>\n<h3 id=\"161-效果\"><a class=\"anchor\" href=\"#161-效果\">#</a> 1.6.1. 效果</h3>\n{width=\"4.325388232720909in\"\n<p>height=&quot;2.9198337707786526in&quot;}</p>\n<h3 id=\"162-绑定监听\"><a class=\"anchor\" href=\"#162-绑定监听\">#</a> 1.6.2. 绑定监听</h3>\n<ol>\n<li>\n<p>v-on:xxx=&quot;fun&quot;</p>\n</li>\n<li>\n<p>@xxx=&quot;fun&quot;</p>\n</li>\n<li>\n<p>@xxx=&quot;fun (参数)&quot;</p>\n</li>\n<li>\n<p>默认事件形参: event</p>\n</li>\n<li>\n<p>隐含属性对象: $event</p>\n</li>\n</ol>\n<h3 id=\"163-事件修饰符\"><a class=\"anchor\" href=\"#163-事件修饰符\">#</a> 1.6.3. 事件修饰符</h3>\n<ol>\n<li>\n<p>.prevent : 阻止事件的默认行为 event.preventDefault ()</p>\n</li>\n<li>\n<p>.stop : 停止事件冒泡 event.stopPropagation ()</p>\n</li>\n</ol>\n<h3 id=\"164-按键修饰符\"><a class=\"anchor\" href=\"#164-按键修饰符\">#</a> 1.6.4. 按键修饰符</h3>\n<ol>\n<li>\n<p>keycode : 操作的是某个 keycode 值的键</p>\n</li>\n<li>\n<p>.keyName : 操作的某个按键名的键 (少部分)</p>\n</li>\n</ol>\n<h2 id=\"17-计算属性与监视\"><a class=\"anchor\" href=\"#17-计算属性与监视\">#</a> 1.7. 计算属性与监视</h2>\n<h3 id=\"171-效果\"><a class=\"anchor\" href=\"#171-效果\">#</a> 1.7.1. 效果</h3>\n{width=\"2.706639326334208in\"\n<p>height=&quot;1.7865004374453193in&quot;}</p>\n<h3 id=\"172-计算属性-computed\"><a class=\"anchor\" href=\"#172-计算属性-computed\">#</a> 1.7.2. 计算属性 - computed</h3>\n<ol>\n<li>\n<p>要显示的数据不存在，要通过计算得来。</p>\n</li>\n<li>\n<p>在 computed 对象中定义计算属性。</p>\n</li>\n<li>\n<p>在页面中使用来显示计算的结果。</p>\n</li>\n</ol>\n<h3 id=\"173-监视属性-watch\"><a class=\"anchor\" href=\"#173-监视属性-watch\">#</a> 1.7.3. 监视属性 - watch</h3>\n{width=\"3.508028215223097in\"\n<p>height=&quot;2.959417104111986in&quot;}</p>\n<ol>\n<li>\n<p>通过通过 vm 对象的 $watch () 或 watch 配置来监视指定的属性</p>\n</li>\n<li>\n<p>当属性变化时，回调函数自动调用，在函数内部进行计算</p>\n</li>\n</ol>\n<h2 id=\"18-class-与-style-绑定\"><a class=\"anchor\" href=\"#18-class-与-style-绑定\">#</a> 1.8. class 与 style 绑定</h2>\n<h3 id=\"181-理解\"><a class=\"anchor\" href=\"#181-理解\">#</a> 1.8.1. 理解</h3>\n<ol>\n<li>\n<p>在应用界面中，某个 (些) 元素的样式是变化的</p>\n</li>\n<li>\n<p>class/style 绑定就是专门用来实现动态样式效果的技术</p>\n</li>\n</ol>\n<h3 id=\"182-class-绑定\"><a class=\"anchor\" href=\"#182-class-绑定\">#</a> 1.8.2. class 绑定</h3>\n<ol>\n<li>\n<p>:class='xxx'</p>\n</li>\n<li>\n<p>表达式是字符串: 'classA'</p>\n</li>\n<li classA:isA,=\"\" classB:=\"\" isB=\"\">\n<p>表达式是对象:</p>\n</li>\n<li>\n<p>表达式是数组: ['classA', 'classB']</p>\n</li>\n</ol>\n<h3 id=\"183-style-绑定\"><a class=\"anchor\" href=\"#183-style-绑定\">#</a> 1.8.3. style 绑定</h3>\n<ol>\n<li>\n<p>:style=&quot;{ color: activeColor, fontSize: fontSize + 'px' }&quot;</p>\n</li>\n<li>\n<p>其中 activeColor/fontSize 是 data 属性</p>\n</li>\n</ol>\n<h2 id=\"19-条件渲染\"><a class=\"anchor\" href=\"#19-条件渲染\">#</a> 1.9. 条件渲染</h2>\n<h3 id=\"191-条件渲染指令\"><a class=\"anchor\" href=\"#191-条件渲染指令\">#</a> 1.9.1. 条件渲染指令</h3>\n<ol>\n<li>\n<p>v-if 、v-else-if、 v-else</p>\n</li>\n<li>\n<p>v-show</p>\n</li>\n</ol>\n<h3 id=\"192-比较-v-if-与-v-show\"><a class=\"anchor\" href=\"#192-比较-v-if-与-v-show\">#</a> 1.9.2. 比较 v-if 与 v-show</h3>\n<ol>\n<li>\n<p>如果需要频繁切换 v-show 较好</p>\n</li>\n<li>\n<p>当条件不成立时，v-if 的所有子节点不会解析 (项目中使用)</p>\n</li>\n</ol>\n<h2 id=\"110-列表渲染\"><a class=\"anchor\" href=\"#110-列表渲染\">#</a> 1.10. 列表渲染</h2>\n<h3 id=\"1101-效果\"><a class=\"anchor\" href=\"#1101-效果\">#</a> 1.10.1. 效果</h3>\n<blockquote>\n{width=\"2.405250437445319in\"\n<p>height=&quot;1.9621948818897639in&quot;}{width=&quot;2.9516666666666667in&quot;<br />\nheight=&quot;2.005in&quot;}{width=&quot;3.9413615485564306in&quot;<br />\nheight=&quot;1.7976104549431322in&quot;}</p>\n</blockquote>\n<h3 id=\"1102-列表显示指令\"><a class=\"anchor\" href=\"#1102-列表显示指令\">#</a> 1.10.2. 列表显示指令</h3>\n<blockquote>\n<p>遍历数组: v-for /index 遍历对象: v-for /key</p>\n</blockquote>\n<h2 id=\"111-收集表单数据\"><a class=\"anchor\" href=\"#111-收集表单数据\">#</a> 1.11. 收集表单数据</h2>\n{width=\"3.9490004374453194in\"\n<p>height=&quot;5.004555993000875in&quot;}</p>\n<h2 id=\"112-过滤器\"><a class=\"anchor\" href=\"#112-过滤器\">#</a> 1.12. 过滤器</h2>\n<h3 id=\"1121-效果\"><a class=\"anchor\" href=\"#1121-效果\">#</a> 1.12.1. 效果</h3>\n{width=\"2.845528215223097in\"\n<p>height=&quot;1.7052504374453192in&quot;}</p>\n<h3 id=\"理解过滤器\"><a class=\"anchor\" href=\"#理解过滤器\">#</a> 理解过滤器</h3>\n<ol>\n<li>\n<p>功能：对要显示的数据进行特定格式化后再显示</p>\n</li>\n<li>\n<p>注意：并没有改变原本的数据，是产生新的对应的数据</p>\n</li>\n</ol>\n<h2 id=\"113-内置指令与自定义指令\"><a class=\"anchor\" href=\"#113-内置指令与自定义指令\">#</a> 1.13. 内置指令与自定义指令</h2>\n<h3 id=\"1131-常用内置指令\"><a class=\"anchor\" href=\"#1131-常用内置指令\">#</a> 1.13.1. 常用内置指令</h3>\n<ol>\n<li>\n<p>v-text : 更新元素的 textContent</p>\n</li>\n<li>\n<p>v-html : 更新元素的 innerHTML</p>\n</li>\n<li>\n<p>v-if : 如果为 true, 当前标签才会输出到页面</p>\n</li>\n<li>\n<p>v-else: 如果为 false, 当前标签才会输出到页面</p>\n</li>\n<li>\n<p>v-show : 通过控制 display 样式来控制显示 / 隐藏</p>\n</li>\n<li>\n<p>v-for : 遍历数组 / 对象</p>\n</li>\n<li>\n<p>v-on : 绑定事件监听，一般简写为 @</p>\n</li>\n<li>\n<p>v-bind : 绑定解析表达式，可以省略 v-bind</p>\n</li>\n<li>\n<p>v-model : 双向数据绑定</p>\n</li>\n<li>\n<p>v-cloak : 防止闪现，与 css 配合</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">[v-cloak]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>v-once：初次渲染之后，就视为静态内容了，以后不在动态渲染</p>\n</li>\n</ol>\n<h3 id=\"自定义指令\"><a class=\"anchor\" href=\"#自定义指令\">#</a> 自定义指令</h3>\n<h4 id=\"1-注册全局指令\"><a class=\"anchor\" href=\"#1-注册全局指令\">#</a> 1. 注册全局指令</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-directive'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> binding</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    el<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> binding<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toupperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"2-注册局部指令\"><a class=\"anchor\" href=\"#2-注册局部指令\">#</a> 2. 注册局部指令</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">directives</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string-property property\">'my-directive'</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">bind</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> binding</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        \tel<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> binding<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toupperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>1) 使用指令</p>\n<blockquote>\n<p>v-my-directive='xxx'</p>\n</blockquote>\n<h2 id=\"114-vue-实例生命周期\"><a class=\"anchor\" href=\"#114-vue-实例生命周期\">#</a> 1.14. Vue 实例生命周期</h2>\n<h3 id=\"1141-效果\"><a class=\"anchor\" href=\"#1141-效果\">#</a> 1.14.1. 效果</h3>\n{width=\"2.484417104111986in\"\n<p>height=&quot;1.1413604549431322in&quot;}</p>\n<h3 id=\"生命周期流程图\"><a class=\"anchor\" href=\"#生命周期流程图\">#</a> 生命周期流程图</h3>\n<img data-src=\"/Web-anteriore/Vue2-3/Vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" class=\"\" title=\"生命周期\">\n<h4 id=\"1143-vue-生命周期分析\"><a class=\"anchor\" href=\"#1143-vue-生命周期分析\">#</a> 1.14.3. vue 生命周期分析</h4>\n<ol>\n<li>\n<p>初始化显示</p>\n<ul>\n<li>\n<p>beforeCreate()</p>\n</li>\n<li>\n<p>created()</p>\n</li>\n<li>\n<p>beforeMount()</p>\n</li>\n<li>\n<p>mounted()</p>\n</li>\n</ul>\n</li>\n<li>\n<p>更新状态: <span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMueHh4\">this.xxx</span> = value</p>\n<ul>\n<li>\n<p>beforeUpdate()</p>\n</li>\n<li>\n<p>updated()</p>\n</li>\n</ul>\n</li>\n<li>\n<p>销毁 vue 实例: vm.$destory ()</p>\n<ul>\n<li>\n<p>beforeDestory()</p>\n</li>\n<li>\n<p>destoryed()</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"1144-常用的生命周期方法\"><a class=\"anchor\" href=\"#1144-常用的生命周期方法\">#</a> 1.14.4. 常用的生命周期方法</h4>\n<ol>\n<li>\n<p>mounted (): 发送 ajax 请求，启动定时器等异步任务</p>\n</li>\n<li>\n<p>beforeDestory (): 做收尾工作，如：清除定时器</p>\n</li>\n</ol>\n<h1 id=\"第-2-章vue-组件化编程\"><a class=\"anchor\" href=\"#第-2-章vue-组件化编程\">#</a> 第 2 章：Vue 组件化编程</h1>\n<h2 id=\"21-模块与组件-模块化与组件化\"><a class=\"anchor\" href=\"#21-模块与组件-模块化与组件化\">#</a> 2.1 模块与组件、模块化与组件化</h2>\n<h3 id=\"211-模块\"><a class=\"anchor\" href=\"#211-模块\">#</a> 2.1.1. 模块</h3>\n<ol>\n<li>\n<p>理解：向外提供特定功能的 js 程序，一般就是一个 js 文件</p>\n</li>\n<li>\n<p>为什么: js 文件很多很复杂</p>\n</li>\n<li>\n<p>作用：复用 js, 简化 js 的编写，提高 js 运行效率</p>\n</li>\n</ol>\n<h3 id=\"212-组件\"><a class=\"anchor\" href=\"#212-组件\">#</a> 2.1.2. 组件</h3>\n<ol>\n<li>\n<p>理解：用来实现局部 (特定) 功能效果的代码集合 (html/css/js/image.....)</p>\n</li>\n<li>\n<p>为什么：一个界面的功能很复杂</p>\n</li>\n<li>\n<p>作用：复用编码，简化项目编码，提高运行效率</p>\n</li>\n</ol>\n<p><strong>2.1.3. 模块化</strong></p>\n<blockquote>\n<p>当应用中的 js 都以模块来编写的，那这个应用就是一个模块化的应用。</p>\n</blockquote>\n<p><strong>2.1.4. 组件化</strong></p>\n<blockquote>\n<p>当应用中的功能都是多组件的方式来编写的，<br />\n 那这个应用就是一个组件化的应用，。</p>\n</blockquote>\n<h2 id=\"22-非单文件组件\"><a class=\"anchor\" href=\"#22-非单文件组件\">#</a> 2.2. 非单文件组件</h2>\n<ol>\n<li>\n<p>模板编写没有提示</p>\n</li>\n<li>\n<p>没有构建过程，无法将 ES6 转换成 ES5</p>\n</li>\n<li>\n<p>不支持组件的 CSS</p>\n</li>\n<li>\n<p>真正开发中几乎不用</p>\n</li>\n</ol>\n<h2 id=\"23-单文件组件\"><a class=\"anchor\" href=\"#23-单文件组件\">#</a> 2.3. 单文件组件</h2>\n<h3 id=\"231-一个vue-文件的组成3-个部分\"><a class=\"anchor\" href=\"#231-一个vue-文件的组成3-个部分\">#</a> 2.3.1. 一个.vue 文件的组成 (3 个部分)</h3>\n<h4 id=\"1-模板页面\"><a class=\"anchor\" href=\"#1-模板页面\">#</a> 1. 模板页面</h4>\n<pre><code class=\"language-vue\">&lt;template&gt; 页面模板\n\n&lt;/template&gt;\n</code></pre>\n<h4 id=\"2-js-模块对象\"><a class=\"anchor\" href=\"#2-js-模块对象\">#</a> 2. JS 模块对象</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h4 id=\"3-样式\"><a class=\"anchor\" href=\"#3-样式\">#</a> 3. 样式</h4>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;style></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t样式定义</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;/style></pre></td></tr></table></figure><h3 id=\"232-基本使用\"><a class=\"anchor\" href=\"#232-基本使用\">#</a> 2.3.2. 基本使用</h3>\n<ol>\n<li>\n<p>引入组件</p>\n</li>\n<li>\n<p>映射成标签</p>\n</li>\n<li>\n<p>使用组件标签</p>\n</li>\n</ol>\n<h1 id=\"第-3-章使用-vue-脚手架\"><a class=\"anchor\" href=\"#第-3-章使用-vue-脚手架\">#</a> 第 3 章：使用 Vue 脚手架</h1>\n<h2 id=\"31-初始化脚手架\"><a class=\"anchor\" href=\"#31-初始化脚手架\">#</a> 3.1 初始化脚手架</h2>\n<h3 id=\"311-说明\"><a class=\"anchor\" href=\"#311-说明\">#</a> 3.1.1 说明</h3>\n<ol>\n<li>\n<p>Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台）。</p>\n</li>\n<li>\n<p>最新的版本是 4.x。</p>\n</li>\n<li>\n<p>文档:<br />\n<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poLw==\">https://cli.vuejs.org/zh/</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poLw==\">https://cli.vuejs.org/zh/</span></span>。](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poLw==\">https://cli.vuejs.org/zh/</span>)</p>\n</li>\n</ol>\n<h3 id=\"312-具体步骤\"><a class=\"anchor\" href=\"#312-具体步骤\">#</a> 3.1.2 具体步骤</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 第一步（仅第一次执行）：全局安装 @vue/cli。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> @vue/cli</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 第二步：** 切换到你要创建项目的目录 **，然后使用命令创建项目</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>vue create xxxx</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#第三步：启动项目</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">npm</span> run serve</pre></td></tr></table></figure><blockquote>\n<p>备注：</p>\n</blockquote>\n<ol>\n<li>如出现下载缓慢请配置 npm 淘宝镜像：npm config set registry<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ucG0udGFvYmFvLm9yZw==\">https://registry.npm.taobao.org</span></li>\n<li>Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpakc<br />\n 配置，请执行：</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vue inspect <span class=\"token operator\">></span> output.js</pre></td></tr></table></figure><h3 id=\"313-模板项目的结构\"><a class=\"anchor\" href=\"#313-模板项目的结构\">#</a> 3.1.3 模板项目的结构</h3>\n<pre><code>├── node_modules\n├── public\n│ ├── favicon.ico: 页签图标\n│ └── index.html: 主页面\n├── src\n│ ├── assets: 存放静态资源\n│ │ └── logo.png\n│ │── component: 存放组件│ │ └── HelloWorld.vue\n│ │── App.vue: 汇总所有组件\t\n│ │── main.js: 入口文件\n├── .gitignore: git 版本管制忽略的配置\n├── babel.config.js: babel 的配置文件\n├── package.json: 应用包配置文件\n├── README.md: 应用描述文件\n├── package-lock.json：包版本控制文件\n</code></pre>\n<h2 id=\"32-ref-与-props\"><a class=\"anchor\" href=\"#32-ref-与-props\">#</a> 3.2 ref 与 props</h2>\n<h3 id=\"ref\"><a class=\"anchor\" href=\"#ref\">#</a> ref</h3>\n<ol>\n<li>\n<p>** 作用：** 用于给节点打标识</p>\n</li>\n<li>\n<p>** 读取方式：**this.$refs.xxxxxx</p>\n</li>\n</ol>\n<h3 id=\"props\"><a class=\"anchor\" href=\"#props\">#</a> props</h3>\n<ol>\n<li>\n<p>** 作用：** 用于父组件给子组件传递数据</p>\n</li>\n<li>\n<p><strong>读取方式一：只指定名称</strong></p>\n</li>\n</ol>\n<blockquote>\n<p>props: ['name', 'age', 'setName']</p>\n</blockquote>\n<ol start=\"3\">\n<li>读取方式二：指定名称和类型</li>\n</ol>\n<blockquote>\n<p>props: {</p>\n<p>​\tname: String, age: Number,</p>\n<p>​\tsetNmae: Function</p>\n<p>}</p>\n</blockquote>\n<ol start=\"4\">\n<li>读取方式三：指定名称 / 类型 / 必要性 / 默认值</li>\n</ol>\n<blockquote>\n<p>props: {</p>\n<p>​\tname: {</p>\n<p>​\t\ttype: String,</p>\n<p>​\t\trequired: true, default:xxx</p>\n<p>​\t},</p>\n<p>}</p>\n</blockquote>\n<ol start=\"5\">\n<li>补充</li>\n</ol>\n<blockquote>\n<p>子传父的时候，我们可以回归一下 v-bind:&quot;xxx&quot; 我们在传的过程中，只需要在父中定义一个接收的 method，在子组件中将 xxx 方法如上方数据一样接收即可，在我们要传给父内容时操作他（调用它），然后我们父组件通过参数配置即可拿到数据。</p>\n</blockquote>\n<h2 id=\"33-css混入\"><a class=\"anchor\" href=\"#33-css混入\">#</a> 3.3 css 混入</h2>\n<ol>\n<li>\n<p>局部</p>\n<p>我们将混入的配置抽出来为一个 JS，然后在多个组件中分别配置即可。</p>\n<ul>\n<li>\n<p>抽出来的 <code>mixin.js</code> ：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 我们要混入的配置均为 vue 的配置对象，一旦混入，所有的引入组件都有该混入的配置，且配置先一步赋值 ————》意为着有可能被覆盖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hunhe <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好啊！'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hunhe2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span><span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>组件 1：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div&gt;\n\t\t&lt;h2 @click=&quot;showName&quot;&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;\n\t\t&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;\n\t&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\t//引入一个hunhe\n\timport &#123;hunhe,hunhe2&#125; from '../mixin'\n\n\texport default &#123;\n\t\tname:'School',\n\t\tdata() &#123;\n\t\t\treturn &#123;\n\t\t\t\tname:'尚硅谷',\n\t\t\t\taddress:'北京',\n\t\t\t\tx:666\n\t\t\t&#125;\n\t\t&#125;,\n\t\tmixins:[hunhe,hunhe2],\n\t&#125;\n&lt;/script&gt;\n</code></pre>\n</li>\n<li>\n<p>组件 2</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div&gt;\n\t\t&lt;h2 @click=&quot;showName&quot;&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;\n\t\t&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;\n\t&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\timport &#123;hunhe,hunhe2&#125; from '../mixin'\n\n\texport default &#123;\n\t\tname:'Student',\n\t\tdata() &#123;\n\t\t\treturn &#123;\n\t\t\t\tname:'张三',\n\t\t\t\tsex:'男'\n\t\t\t&#125;\n\t\t&#125;,\n\t\tmixins:[hunhe,hunhe2]\n\t&#125;\n&lt;/script&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>全局</p>\n</li>\n</ol>\n<p>直接在 <code>main.js</code>  中配置混入即可</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>hunhe<span class=\"token punctuation\">,</span>hunhe2<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./mixin'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span>hunhe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span>hunhe2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"34-插件\"><a class=\"anchor\" href=\"#34-插件\">#</a> 3.4 插件</h2>\n<ol>\n<li>Vue 插件是一个包含 install 方法的<strong>对象</strong>。</li>\n<li>通过 install 方法给 Vue 或 Vue 实例添加方法，定义全局指令等</li>\n</ol>\n<p><code>plugins.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Vue<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// 全局过滤器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tVue<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mySlice'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token comment\">// 定义全局指令</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tVue<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fbind'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token comment\">// 指令与元素成功绑定时（一上来）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>binding</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\telement<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> binding<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token comment\">// 指令所在元素被插入页面时</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token function\">inserted</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>binding</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t\telement<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t<span class=\"token comment\">// 指令所在的模板被重新解析时</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>binding</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\telement<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> binding<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token comment\">// 定义混入</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tVue<span class=\"token punctuation\">.</span><span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t\t<span class=\"token literal-property property\">x</span><span class=\"token operator\">:</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t\t<span class=\"token literal-property property\">y</span><span class=\"token operator\">:</span><span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token comment\">// 给 Vue 原型上添加一个方法（vm 和 vc 就都能用了）</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好啊'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>main.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 应用（使用）插件，且允许传参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>plugins<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"35-scoped样式\"><a class=\"anchor\" href=\"#35-scoped样式\">#</a> 3.5 scoped 样式</h2>\n<p>在编译的过程中，组件的  <code>&lt;style&gt;&lt;/style&gt;</code>  会合并到一起，这样就回引起一个最经典的问题，也就是 <strong>重复名</strong> 问题，再不做处理的情况下，我们会根据 App.vue 中的 import 顺序去覆盖同名样式。</p>\n<p>为了解决这类问题，我们可以在每个组件的  <code>&lt;style&gt;</code>  标签中加入  <code>scoped</code>  即可。我们所有的仅在本组件适用，他在编译的时候会自动为我们加一个标识。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;style scoped></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">/* 设置你的样式即可 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;/style></pre></td></tr></table></figure><h2 id=\"35-todo-list-案例\"><a class=\"anchor\" href=\"#35-todo-list-案例\">#</a> 3.5 Todo-list 案例</h2>\n{width=\"4.5072080052493435in\"\n<p>height=&quot;2.1442082239720035in&quot;}</p>\n<h4 id=\"组件化编码流程通用\"><a class=\"anchor\" href=\"#组件化编码流程通用\">#</a> 组件化编码流程（通用）</h4>\n<ol>\n<li>\n<p>实现静态组件：抽取组件，使用组件实现静态页面效果</p>\n</li>\n<li>\n<p>展示动态数据：</p>\n<ol>\n<li>数据的类型、名称是什么？</li>\n<li>数据保存在哪个组件？</li>\n</ol>\n</li>\n<li>\n<p>交互 ------ 从绑定事件监听开始</p>\n</li>\n</ol>\n<h2 id=\"36-vue-中的自定义事件\"><a class=\"anchor\" href=\"#36-vue-中的自定义事件\">#</a> 3.6 Vue 中的自定义事件</h2>\n<h3 id=\"绑定事件监听\"><a class=\"anchor\" href=\"#绑定事件监听\">#</a> 绑定事件监听</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Header</span> <span class=\"token attr-name\">@addTodo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>\taddTodo/></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$on(\t<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\t, this.addTodo)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>或者</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;Header ref=\"header\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>this.$refs.header.'addTodo'</pre></td></tr></table></figure><h3 id=\"触发事件\"><a class=\"anchor\" href=\"#触发事件\">#</a> 触发事件</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'addTodo'</span><span class=\"token punctuation\">,</span> todo<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"37-全局事件总线\"><a class=\"anchor\" href=\"#37-全局事件总线\">#</a> 3.7 全局事件总线</h2>\n<h3 id=\"371-理解\"><a class=\"anchor\" href=\"#371-理解\">#</a> 3.7.1 理解</h3>\n<ol>\n<li>\n<p>Vue 原型对象上包含事件处理的方法</p>\n<ol>\n<li>\n<p>$on (eventName, listener): 绑定自定义事件监听</p>\n</li>\n<li>\n<p>$emit (eventName, data): 分发自定义事件</p>\n</li>\n<li>\n<p>$off (eventName): 解绑自定义事件监听</p>\n</li>\n<li>\n<p>$once (eventName, listener): 绑定事件监听，但只能处理一次</p>\n</li>\n</ol>\n</li>\n<li>\n<p>所有组件实例对象的原型对象的原型对象就是 Vue 的原型对象</p>\n<ol>\n<li>\n<p>所有组件对象都能看到 Vue 原型对象上的属性和方法</p>\n</li>\n<li>\n<p>Vue.prototype.$bus = new Vue (), 所有的组件对象都能看到 $bus<br />\n 这个属性</p>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>对象</p>\n</blockquote>\n<ol start=\"3\">\n<li>\n<p>全局事件总线</p>\n<ol>\n<li>\n<p>包含事件处理相关方法的对象 (只有一个)</p>\n</li>\n<li>\n<p>所有的组件都可以得到</p>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"372-指定事件总线对象\"><a class=\"anchor\" href=\"#372-指定事件总线对象\">#</a> 3.7.2 指定事件总线对象</h3>\n<p>+-----------------------------------------------------------------------+<br />\n| <strong>new</strong> Vue({                                                         |<br />\n|                                                                       |<br />\n| &gt; beforeCreate () { <em>//</em> 尽量早的执行挂载全局事件总线对象的操作       |<br />\n| &gt;                                                                     |<br />\n| &gt; Vue.<strong>prototype</strong>.<strong>$globalEventBus</strong> = <strong>this</strong> },                |<br />\n|                                                                       |<br />\n| }).$mount(<strong>'#root'</strong>)                                             |<br />\n+=======================================================================+<br />\n+-----------------------------------------------------------------------+</p>\n<p><strong>3.7.3 绑定事件</strong></p>\n<p>this.$globalEventBus.$<mark>on</mark>('deleteTodo',this.deleteTodo)</p>\n<p><strong>3.7.4 分发事件</strong></p>\n<p>this.$globalEventBus.$<mark>emit</mark>('deleteTodo',this.index)</p>\n<p><strong>3.7.5 解绑事件</strong></p>\n<p>this.$globalEventBus.$<mark>off</mark>('deleteTodo')</p>\n<h2 id=\"38-消息订阅与发布\"><a class=\"anchor\" href=\"#38-消息订阅与发布\">#</a> 3.8 消息订阅与发布</h2>\n<h3 id=\"381-理解\"><a class=\"anchor\" href=\"#381-理解\">#</a> 3.8.1 理解</h3>\n<ol>\n<li>\n<p>这种方式的思想与全局事件总线很相似</p>\n</li>\n<li>\n<p>它包含以下操作:</p>\n</li>\n</ol>\n<blockquote>\n<p>(1) 订阅消息 -- 对应绑定事件监听 (2) 发布消息 -- 分发事件</p>\n<p>(3) 取消消息订阅 -- 解绑事件监听</p>\n</blockquote>\n<ol start=\"3\">\n<li>需要引入一个消息订阅与发布的第三方实现库:<br />\n<a href=\"https://github.com/mroderick/PubSubJS\"><strong>PubSubJS</strong></a></li>\n</ol>\n<h3 id=\"382-使用-pubsubjs\"><a class=\"anchor\" href=\"#382-使用-pubsubjs\">#</a> 3.8.2 使用 PubSubJS</h3>\n<ol>\n<li>\n<p>在线文档:<br />\n<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKUw==\">https://github.com/mroderick/PubSubJS</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKUw==\">https://github.com/mroderick/PubSubJS</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKUw==\">https://github.com/mroderick/PubSubJS</span>)</p>\n</li>\n<li>\n<p>下载: npm install -S pubsub-js</p>\n</li>\n<li>\n<p>相关语法</p>\n<ol>\n<li>\n<p>import PubSub from 'pubsub-js' // 引入</p>\n</li>\n<li>\n<p>PubSub.subscribe('msgName', functon(msgName, data){ })</p>\n</li>\n<li>\n<p>PubSub.publish ('msgName', data): 发布消息，<br />\n 触发订阅的回调函数调用</p>\n</li>\n<li>\n<p>PubSub.unsubscribe (token): 取消消息的订阅</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"39-过度与动画\"><a class=\"anchor\" href=\"#39-过度与动画\">#</a> 3.9 过度与动画</h2>\n<h3 id=\"391-效果\"><a class=\"anchor\" href=\"#391-效果\">#</a> 3.9.1 效果</h3>\n{width=\"6.099694881889763in\"\n<p>height=&quot;2.029555993000875in&quot;}</p>\n<h3 id=\"392-vue-动画的理解\"><a class=\"anchor\" href=\"#392-vue-动画的理解\">#</a> 3.9.2 vue 动画的理解</h3>\n<ol>\n<li>\n<p>操作 css 的 trasition 或 animation</p>\n</li>\n<li>\n<p>vue 会给目标元素添加 / 移除特定的 class</p>\n</li>\n<li>\n<p>过渡的相关类名：</p>\n<ol>\n<li>\n<p>xxx-enter-active: 指定显示的 transition</p>\n</li>\n<li>\n<p>xxx-leave-active: 指定隐藏的 transition</p>\n</li>\n<li>\n<p>xxx-enter/xxx-leave-to: 指定隐藏时的样式</p>\n</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n{width=\"4.885805993000875in\"\n<p>height=&quot;2.733028215223097in&quot;}</p>\n</blockquote>\n<h3 id=\"393-基本过渡动画的编码\"><a class=\"anchor\" href=\"#393-基本过渡动画的编码\">#</a> 3.9.3 基本过渡动画的编码</h3>\n<ol>\n<li>\n<p>在目标元素外包裹 &lt;transition name=&quot;xxx&quot;&gt;</p>\n</li>\n<li>\n<p>定义 class 样式</p>\n<p>a.  指定过渡样式: transition</p>\n<p>b.  指定隐藏时的样式: opacity / 其它</p>\n</li>\n</ol>\n<h1 id=\"第-4-章vue-中的-ajax\"><a class=\"anchor\" href=\"#第-4-章vue-中的-ajax\">#</a> 第 4 章：Vue 中的 ajax</h1>\n<h2 id=\"41-解决开发环境-ajax-跨域问题\"><a class=\"anchor\" href=\"#41-解决开发环境-ajax-跨域问题\">#</a> 4.1 解决开发环境 Ajax 跨域问题</h2>\n<blockquote>\n<p>使用代理服务器</p>\n</blockquote>\n<h2 id=\"42-github-用户搜索案例\"><a class=\"anchor\" href=\"#42-github-用户搜索案例\">#</a> 4.2 github 用户搜索案例</h2>\n<h3 id=\"421-效果\"><a class=\"anchor\" href=\"#421-效果\">#</a> 4.2.1 效果</h3>\n{width=\"5.260805993000875in\"\n<p>height=&quot;3.3684448818897637in&quot;}</p>\n<h3 id=\"422-接口地址\"><a class=\"anchor\" href=\"#422-接口地址\">#</a> 4.2.2 接口地址</h3>\n<p><span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9zZWFyY2gvdXNlcnM/cT14eHg=\">https://api.github.com/search/users?q=xxx</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9zZWFyY2gvdXNlcnM/cT14eHg=\">https://api.github.com/search/users?q=xxx</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9zZWFyY2gvdXNlcnM/cT14eHg=\">https://api.github.com/search/users?q=xxx</span>)</p>\n<h2 id=\"43-vue-项目中常用的-2-个-ajax-库\"><a class=\"anchor\" href=\"#43-vue-项目中常用的-2-个-ajax-库\">#</a> 4.3 vue 项目中常用的 2 个 Ajax 库</h2>\n<p><strong>4.3.1 axios</strong></p>\n<blockquote>\n<p>通用的 Ajax 请求库，官方推荐，使用广泛</p>\n</blockquote>\n<p><strong>4.3.2 vue-resource</strong></p>\n<blockquote>\n<p>vue 插件库，vue1.x 使用广泛，<strong>官方已不维护。</strong></p>\n</blockquote>\n<h2 id=\"44-slot-插槽\"><a class=\"anchor\" href=\"#44-slot-插槽\">#</a> 4.4 slot 插槽</h2>\n<h3 id=\"441-效果\"><a class=\"anchor\" href=\"#441-效果\">#</a> 4.4.1 效果</h3>\n<blockquote>\n<p>效果一（不使用插槽）：</p>\n</blockquote>\n{width=\"4.112194881889764in\"\n<p>height=&quot;1.9267782152230972in&quot;}</p>\n<blockquote>\n<p>效果二（默认插槽）：</p>\n</blockquote>\n{width=\"4.2052504374453195in\"\n<p>height=&quot;2.10663823272091in&quot;}</p>\n<blockquote>\n<p>效果三（具名插槽）：</p>\n</blockquote>\n{width=\"4.439278215223097in\"\n<p>height=&quot;2.25663823272091in&quot;}</p>\n<blockquote>\n<p>效果三（作用域插槽）：</p>\n</blockquote>\n{width=\"4.59761154855643in\"\n<p>height=&quot;2.196917104111986in&quot;}</p>\n<h3 id=\"441-理解\"><a class=\"anchor\" href=\"#441-理解\">#</a> 4.4.1 理解</h3>\n<p>父组件向子组件传递带数据的标签，当一个组件有不确定的结构时，就需要使用<br />\n slot 技术，注意：插槽内容是在父组件中编译后，再传递给子组件的。</p>\n<h3 id=\"442-分类\"><a class=\"anchor\" href=\"#442-分类\">#</a> 4.4.2 分类</h3>\n<ol>\n<li>\n<p>默认插槽</p>\n</li>\n<li>\n<p>命名插槽</p>\n</li>\n<li>\n<p>作用域插槽</p>\n</li>\n</ol>\n<h1 id=\"第-5-章vuex\"><a class=\"anchor\" href=\"#第-5-章vuex\">#</a> 第 5 章：vuex</h1>\n<h2 id=\"51-理解-vuex\"><a class=\"anchor\" href=\"#51-理解-vuex\">#</a> 5.1 理解 vuex</h2>\n<h3 id=\"511-vuex-是什么\"><a class=\"anchor\" href=\"#511-vuex-是什么\">#</a> 5.1.1 vuex 是什么</h3>\n<ol>\n<li>\n<p>概念：专门在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue<br />\n 应用中多个组件的共享状态进行集中式的管理（读 / 写），也是一种组件间通信的方式，且适用于任意组件间通信。</p>\n</li>\n<li>\n<p>Github 地址:<br />\n<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXg=\">https://github.com/vuejs/vuex</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXg=\">https://github.com/vuejs/vuex</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXg=\">https://github.com/vuejs/vuex</span>)</p>\n</li>\n</ol>\n<h3 id=\"512-什么时候使用-vuex\"><a class=\"anchor\" href=\"#512-什么时候使用-vuex\">#</a> 5.1.2 什么时候使用 Vuex</h3>\n<ol>\n<li>\n<p>多个组件依赖于同一状态</p>\n</li>\n<li>\n<p>来自不同组件的行为需要变更同一状态</p>\n</li>\n</ol>\n<h3 id=\"513-案例\"><a class=\"anchor\" href=\"#513-案例\">#</a> 5.1.3 案例</h3>\n<blockquote>\n{width=\"3.283028215223097in\"\n<p>height=&quot;1.7955282152230971in&quot;}</p>\n</blockquote>\n<h3 id=\"514-vuex-工作原理图\"><a class=\"anchor\" href=\"#514-vuex-工作原理图\">#</a> 5.1.4 Vuex 工作原理图</h3>\n{width=\"3.712889326334208in\"\n<p>height=&quot;3.0413615485564303in&quot;}</p>\n<h2 id=\"52-vuex-核心概念和-api\"><a class=\"anchor\" href=\"#52-vuex-核心概念和-api\">#</a> 5.2 vuex 核心概念和 API</h2>\n<h3 id=\"521-state\"><a class=\"anchor\" href=\"#521-state\">#</a> 5.2.1 state</h3>\n<ol>\n<li>\n<p>vuex 管理的状态对象</p>\n</li>\n<li>\n<p>它应该是唯一的</p>\n</li>\n<li>\n<p>示例代码：</p>\n</li>\n</ol>\n<blockquote>\n{width=\"1.48in\" height=\"0.5916666666666667in\"}\n</blockquote>\n<h3 id=\"522-actions\"><a class=\"anchor\" href=\"#522-actions\">#</a> 5.2.2 actions</h3>\n<ol>\n<li>\n<p>值为一个对象，包含多个响应用户动作的回调函数</p>\n</li>\n<li>\n<p>通过 commit ( ) 来触发 mutation 中函数的调用，间接更新 state</p>\n</li>\n<li>\n<p>如何触发 actions 中的回调？</p>\n</li>\n</ol>\n<p>$store.dispatch (' 对应的 action 回调名 ')</p>\n<hr />\n<blockquote>\n<p>在组件中使用：触发</p>\n</blockquote>\n<ol start=\"4\">\n<li>\n<p>可以包含异步代码（定时器，ajax 等等）</p>\n</li>\n<li>\n<p>示例代码：</p>\n</li>\n</ol>\n<blockquote>\n{width=\"2.6416666666666666in\"\n<p>height=&quot;0.9733333333333334in&quot;}</p>\n</blockquote>\n<h3 id=\"523-mutations\"><a class=\"anchor\" href=\"#523-mutations\">#</a> 5.2.3 mutations</h3>\n<ol>\n<li>\n<p>值是一个对象，包含多个直接更新 state 的方法</p>\n</li>\n<li>\n<p>谁能调用 mutations 中的方法？如何调用？</p>\n</li>\n</ol>\n<blockquote>\n<p>在 action 中使用：<strong>commit (' 对应的 mutations 方法名 ')</strong> 触发</p>\n</blockquote>\n<ol start=\"3\">\n<li>\n<p>mutations 中方法的特点：不能写异步代码、只能单纯的操作 state</p>\n</li>\n<li>\n<p>示例代码：</p>\n</li>\n</ol>\n<blockquote>\n{width=\"2.0in\" height=\"0.935in\"}\n</blockquote>\n<h3 id=\"524-getters\"><a class=\"anchor\" href=\"#524-getters\">#</a> 5.2.4 getters</h3>\n<ol>\n<li>\n<p>值为一个对象，包含多个用于返回数据的函数</p>\n</li>\n<li>\n<p>如何使用？------ <strong>$<span class=\"exturl\" data-url=\"aHR0cDovL3N0b3JlLmdldHRlcnMueHh4\">store.getters.xxx</span></strong></p>\n</li>\n<li>\n<p>示例代码：</p>\n</li>\n</ol>\n<blockquote>\n{width=\"2.1566666666666667in\"\n<p>height=&quot;0.9633333333333334in&quot;}</p>\n</blockquote>\n<h3 id=\"525-modules\"><a class=\"anchor\" href=\"#525-modules\">#</a> 5.2.5 modules</h3>\n<ol>\n<li>包含多个 module</li>\n<li>一个 module 是一个 store 的配置对象</li>\n<li>与一个组件（包含有共享数据）对应</li>\n</ol>\n<h1 id=\"第-6-章vue-router\"><a class=\"anchor\" href=\"#第-6-章vue-router\">#</a> 第 6 章：vue-router</h1>\n<h2 id=\"61-相关理解\"><a class=\"anchor\" href=\"#61-相关理解\">#</a> 6.1 相关理解</h2>\n<h3 id=\"611-vue-router-的理解\"><a class=\"anchor\" href=\"#611-vue-router-的理解\">#</a> 6.1.1 vue-router 的理解</h3>\n<hr />\n<p>SPA 应用</p>\n<hr />\n<blockquote>\n<p>vue 的一个插件库，专门用来实现</p>\n</blockquote>\n<h3 id=\"612-对-spa-应用的理解\"><a class=\"anchor\" href=\"#612-对-spa-应用的理解\">#</a> 6.1.2 对 SPA 应用的理解</h3>\n<ol>\n<li>\n<p>单页 Web 应用（single page web application，SPA）。</p>\n</li>\n<li>\n<p>整个应用只有<strong>一个完整的页面</strong>。</p>\n</li>\n<li>\n<p>点击页面中的导航链接<strong>不会刷新</strong>页面，只会做页面的<strong>局部更新。</strong></p>\n</li>\n<li>\n<p>数据需要通过 ajax 请求获取。</p>\n</li>\n</ol>\n<h3 id=\"613-路由的理解\"><a class=\"anchor\" href=\"#613-路由的理解\">#</a> 6.1.3 路由的理解</h3>\n<ol>\n<li>什么是路由？</li>\n<li>一个路由就是一组映射关系（key - value）</li>\n<li>key 为路径，value 可能是 function 或 component</li>\n</ol>\n<h2 id=\"2-路由分类\"><a class=\"anchor\" href=\"#2-路由分类\">#</a> 2. 路由分类</h2>\n<ol>\n<li>\n<p>后端路由：</p>\n<ol>\n<li>\n<p>理解：value 是 function, 用于处理客户端提交的请求。</p>\n</li>\n<li>\n<p>工作过程：服务器接收到一个请求时，<br />\n 根据<strong>请求路径</strong>找到匹配的<strong>函数</strong>来处理请求，返回响应数据。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>前端路由：</p>\n<ol>\n<li>\n<p>理解：value 是 component，用于展示页面内容。</p>\n</li>\n<li>\n<p>工作过程：当浏览器的路径改变时，对应的组件就会显示。</p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"62-基本路由\"><a class=\"anchor\" href=\"#62-基本路由\">#</a> 6.2 基本路由</h2>\n<h3 id=\"621-效果\"><a class=\"anchor\" href=\"#621-效果\">#</a> 6.2.1 效果</h3>\n{width=\"4.755250437445319in\"\n<p>height=&quot;2.9059448818897637in&quot;}</p>\n<h3 id=\"622-总结-编写使用路由的-3-步\"><a class=\"anchor\" href=\"#622-总结-编写使用路由的-3-步\">#</a> 6.2.2 总结：编写使用路由的 3 步</h3>\n<ol>\n<li>\n<p>定义路由组件</p>\n</li>\n<li>\n<p>注册路由</p>\n</li>\n<li>\n<p>使用路由</p>\n</li>\n</ol>\n<h2 id=\"63-嵌套多级路由\"><a class=\"anchor\" href=\"#63-嵌套多级路由\">#</a> 6.3 嵌套（多级）路由</h2>\n{width=\"4.765667104111986in\"\n<p>height=&quot;3.032333770778653in&quot;}</p>\n<h2 id=\"64-路由传参\"><a class=\"anchor\" href=\"#64-路由传参\">#</a> 6.4 路由传参</h2>\n{width=\"4.525389326334208in\"\n<p>height=&quot;3.717055993000875in&quot;}</p>\n<h2 id=\"65-编程式路由导航\"><a class=\"anchor\" href=\"#65-编程式路由导航\">#</a> 6.5 编程式路由导航</h2>\n{width=\"4.0392782152230975in\"\n<p>height=&quot;4.137194881889764in&quot;}</p>\n<p><strong>相关 API：</strong></p>\n<ol>\n<li>\n<p>this.$router.push (path): 相当于点击路由链接 (可以返回到当前路由界面)</p>\n</li>\n<li>\n<p>this.$router.replace(path):<br />\n 用新路由替换当前路由 (不可以返回到当前路由界面)</p>\n</li>\n<li>\n<p>this.$router.back (): 请求 (返回) 上一个记录路由</p>\n</li>\n<li>\n<p>this.$router.go (-1): 请求 (返回) 上一个记录路由</p>\n</li>\n<li>\n<p>this.$router.go (1): 请求下一个记录路由</p>\n</li>\n</ol>\n<h1 id=\"第-7-章vue-ui-组件库\"><a class=\"anchor\" href=\"#第-7-章vue-ui-组件库\">#</a> 第 7 章：Vue UI 组件库</h1>\n<h2 id=\"71-移动端常用-ui-组件库\"><a class=\"anchor\" href=\"#71-移动端常用-ui-组件库\">#</a> 7.1 移动端常用 UI 组件库</h2>\n<ol>\n<li>\n<p>Vant<br />\n<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V6YW4uZ2l0aHViLmlvL3ZhbnQ=\">https://youzan.github.io/vant</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V6YW4uZ2l0aHViLmlvL3ZhbnQ=\">https://youzan.github.io/vant</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly95b3V6YW4uZ2l0aHViLmlvL3ZhbnQv\">https://youzan.github.io/vant/</span>)</p>\n</li>\n<li>\n<p>Cube UI<br />\n<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaWRpLmdpdGh1Yi5pby9jdWJlLXVp\">https://didi.github.io/cube-ui</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaWRpLmdpdGh1Yi5pby9jdWJlLXVp\">https://didi.github.io/cube-ui</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kaWRpLmdpdGh1Yi5pby9jdWJlLXVp\">https://didi.github.io/cube-ui</span>)</p>\n</li>\n<li>\n<p>Mint UI<br />\n<span><span class=\"exturl\" data-url=\"aHR0cDovL21pbnQtdWkuZ2l0aHViLmlv\">http://mint-ui.github.io</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cDovL21pbnQtdWkuZ2l0aHViLmlv\">http://mint-ui.github.io</span></span>](<span class=\"exturl\" data-url=\"aHR0cDovL21pbnQtdWkuZ2l0aHViLmlvLw==\">http://mint-ui.github.io/</span>)</p>\n</li>\n</ol>\n<h2 id=\"72-pc-端常用-ui-组件库\"><a class=\"anchor\" href=\"#72-pc-端常用-ui-组件库\">#</a> 7.2 PC 端常用 UI 组件库</h2>\n<ol>\n<li>\n<p>Element UI<br />\n<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNu\">https://element.eleme.cn</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNu\">https://element.eleme.cn</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGVtZW50LmVsZW1lLmNuLw==\">https://element.eleme.cn/</span>)</p>\n</li>\n<li>\n<p>IView UI<br />\n<span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXZpZXd1aS5jb20=\">https://www.iviewui.com</span></span>[<span class=\"underline\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXZpZXd1aS5jb20=\">https://www.iviewui.com</span></span>](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXZpZXd1aS5jb20v\">https://www.iviewui.com/</span>)</p>\n</li>\n</ol>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "前端",
                "框架",
                "框架"
            ]
        },
        {
            "id": "https://eth168.top/Web-anteriore/Vue2-3/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/",
            "url": "https://eth168.top/Web-anteriore/Vue2-3/vue3%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/",
            "title": "Vue3",
            "date_published": "2023-06-01T16:00:00.000Z",
            "content_html": "<h1 id=\"vue3快速上手\"><a class=\"anchor\" href=\"#vue3快速上手\">#</a> Vue3 快速上手</h1>\n<img data-src=\"https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png\" style=\"width:200px\" />\n<h2 id=\"1vue3简介\"><a class=\"anchor\" href=\"#1vue3简介\">#</a> 1.Vue3 简介</h2>\n<ul>\n<li>2020 年 9 月 18 日，Vue.js 发布 3.0 版本，代号：One Piece（海贼王）</li>\n<li>耗时 2 年多、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1uZXh0L2dyYXBocy9jb21taXQtYWN0aXZpdHk=\">2600 + 次提交</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JmY3MvdHJlZS9tYXN0ZXIvYWN0aXZlLXJmY3M=\">30 + 个 RFC</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1uZXh0L3B1bGxzP3E9aXMlM0FwcitpcyUzQW1lcmdlZCstYXV0aG9yJTNBYXBwJTJGZGVwZW5kYWJvdC1wcmV2aWV3Kw==\">600 + 次 PR</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1uZXh0L2dyYXBocy9jb250cmlidXRvcnM=\">99 位贡献者</span></li>\n<li>github 上的 tags 地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1uZXh0L3JlbGVhc2VzL3RhZy92My4wLjA=\">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</span></li>\n</ul>\n<h2 id=\"2vue3带来了什么\"><a class=\"anchor\" href=\"#2vue3带来了什么\">#</a> 2.Vue3 带来了什么</h2>\n<h3 id=\"1性能的提升\"><a class=\"anchor\" href=\"#1性能的提升\">#</a> 1. 性能的提升</h3>\n<ul>\n<li>\n<p>打包大小减少 41%</p>\n</li>\n<li>\n<p>初次渲染快 55%, 更新渲染快 133%</p>\n</li>\n<li>\n<p>内存减少 54%</p>\n<p>......</p>\n</li>\n</ul>\n<h3 id=\"2源码的升级\"><a class=\"anchor\" href=\"#2源码的升级\">#</a> 2. 源码的升级</h3>\n<ul>\n<li>\n<p>使用 Proxy 代替 defineProperty 实现响应式</p>\n</li>\n<li>\n<p>重写虚拟 DOM 的实现和 Tree-Shaking</p>\n<p>......</p>\n</li>\n</ul>\n<h3 id=\"3拥抱typescript\"><a class=\"anchor\" href=\"#3拥抱typescript\">#</a> 3. 拥抱 TypeScript</h3>\n<ul>\n<li>Vue3 可以更好的支持 TypeScript</li>\n</ul>\n<h3 id=\"4新的特性\"><a class=\"anchor\" href=\"#4新的特性\">#</a> 4. 新的特性</h3>\n<ol>\n<li>\n<p>Composition API（组合 API）</p>\n<ul>\n<li>setup 配置</li>\n<li>ref 与 reactive</li>\n<li>watch 与 watchEffect</li>\n<li>provide 与 inject</li>\n<li>......</li>\n</ul>\n</li>\n<li>\n<p>新的内置组件</p>\n<ul>\n<li>Fragment</li>\n<li>Teleport</li>\n<li>Suspense</li>\n</ul>\n</li>\n<li>\n<p>其他改变</p>\n<ul>\n<li>新的生命周期钩子</li>\n<li>data 选项应始终被声明为一个函数</li>\n<li>移除 keyCode 支持作为 v-on 的修饰符</li>\n<li>......</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"一-创建vue30工程\"><a class=\"anchor\" href=\"#一-创建vue30工程\">#</a> 一、创建 Vue3.0 工程</h1>\n<h2 id=\"1使用-vue-cli-创建\"><a class=\"anchor\" href=\"#1使用-vue-cli-创建\">#</a> 1. 使用 vue-cli 创建</h2>\n<p>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlL2NyZWF0aW5nLWEtcHJvamVjdC5odG1sI3Z1ZS1jcmVhdGU=\">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</span></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 查看 @vue/cli 版本，确保 @vue/cli 版本在 4.5.0 以上</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vue <span class=\"token parameter variable\">--version</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## 安装或者升级你的 @vue/cli</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> @vue/cli</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">## 创建</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vue create vue_test</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">## 启动</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">cd</span> vue_test</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">npm</span> run serve</pre></td></tr></table></figure><h2 id=\"2使用-vite-创建\"><a class=\"anchor\" href=\"#2使用-vite-创建\">#</a> 2. 使用 vite 创建</h2>\n<p>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92My5jbi52dWVqcy5vcmcvZ3VpZGUvaW5zdGFsbGF0aW9uLmh0bWwjdml0ZQ==\">https://v3.cn.vuejs.org/guide/installation.html#vite</span></p>\n<p>vite 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92aXRlanMuY24=\">https://vitejs.cn</span></p>\n<ul>\n<li>什么是 vite？—— 新一代前端构建工具。</li>\n<li>优势如下：\n<ul>\n<li>开发环境中，无需打包操作，可快速的冷启动。</li>\n<li>轻量快速的热重载（HMR）。</li>\n<li>真正的按需编译，不再等待整个应用编译完成。</li>\n</ul>\n</li>\n<li>传统构建 与 vite 构建对比图</li>\n</ul>\n<p><img data-src=\"https://cn.vitejs.dev/assets/bundler.37740380.png\" style=\"width:500px;height:280px;float:left\" /><img data-src=\"https://cn.vitejs.dev/assets/esm.3070012d.png\" style=\"width:480px;height:280px\" /></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 创建工程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> init vite-app <span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## 进入工程目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>project-name<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">## 安装依赖</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">## 运行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">npm</span> run dev</pre></td></tr></table></figure><h1 id=\"二-常用-composition-api\"><a class=\"anchor\" href=\"#二-常用-composition-api\">#</a> 二、常用 Composition API</h1>\n<p>官方文档: <span class=\"exturl\" data-url=\"aHR0cHM6Ly92My5jbi52dWVqcy5vcmcvZ3VpZGUvY29tcG9zaXRpb24tYXBpLWludHJvZHVjdGlvbi5odG1s\">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</span></p>\n<h2 id=\"1拉开序幕的setup\"><a class=\"anchor\" href=\"#1拉开序幕的setup\">#</a> 1. 拉开序幕的 setup</h2>\n<ol>\n<li>理解：Vue3.0 中一个新的配置项，值为一个函数。</li>\n<li>setup 是所有<strong style=\"color:#DD5145\">Composition API（组合 API）</strong><i style=\"color:gray;font-weight:bold\">“表演的舞台”</i>。</li>\n<li>组件中所用到的：数据、方法等等，均要配置在 setup 中。</li>\n<li>setup 函数的两种返回值：\n<ol>\n<li>若返回一个对象，则对象中的属性、方法，在模板中均可以直接使用。（重点关注！）</li>\n<li><span style=\"color:#aad\">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li>\n</ol>\n</li>\n<li>注意点：\n<ol>\n<li>尽量不要与 Vue2.x 配置混用\n<ul>\n<li>Vue2.x 配置（data、methos、computed...）中<strong style=\"color:#DD5145\">可以访问到</strong>setup 中的属性、方法。</li>\n<li>但在 setup 中<strong style=\"color:#DD5145\">不能访问到</strong>Vue2.x 配置（data、methos、computed...）。</li>\n<li>如果有重名，setup 优先。</li>\n</ul>\n</li>\n<li>setup 不能是一个 async 函数，因为返回值不再是 return 的对象，而是 promise, 模板看不到 return 对象中的属性。（后期也可以返回一个 Promise 实例，但需要 Suspense 和异步组件的配合）</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"2ref函数\"><a class=\"anchor\" href=\"#2ref函数\">#</a> 2.ref 函数</h2>\n<ul>\n<li>作用：定义一个响应式的数据</li>\n<li>语法:  <code>const xxx = ref(initValue)</code>\n<ul>\n<li>创建一个包含响应式数据的<strong style=\"color:#DD5145\">引用对象（reference 对象，简称 ref 对象）</strong>。</li>\n<li>JS 中操作数据：  <code>xxx.value</code></li>\n<li>模板中读取数据：不需要.value，直接： <code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li>\n</ul>\n</li>\n<li>备注：\n<ul>\n<li>接收的数据可以是：基本类型、也可以是对象类型。</li>\n<li>基本类型的数据：响应式依然是靠 <code>Object.defineProperty()</code>  的 <code>get</code>  与 <code>set</code>  完成的。</li>\n<li>对象类型的数据：内部 <i style=\"color:gray;font-weight:bold\">“求助”</i> 了 Vue3.0 中的一个新函数 ——  <code>reactive</code>  函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3reactive函数\"><a class=\"anchor\" href=\"#3reactive函数\">#</a> 3.reactive 函数</h2>\n<ul>\n<li>作用：定义一个<strong style=\"color:#DD5145\">对象类型</strong>的响应式数据（基本类型不要用它，要用 <code>ref</code>  函数）</li>\n<li>语法： <code>const 代理对象= reactive(源对象)</code>  接收一个对象（或数组），返回一个<strong style=\"color:#DD5145\">代理对象（Proxy 的实例对象，简称 proxy 对象）</strong></li>\n<li>reactive 定义的响应式数据是 “深层次的”。</li>\n<li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li>\n</ul>\n<h2 id=\"4vue30中的响应式原理\"><a class=\"anchor\" href=\"#4vue30中的响应式原理\">#</a> 4.Vue3.0 中的响应式原理</h2>\n<h3 id=\"vue2x的响应式\"><a class=\"anchor\" href=\"#vue2x的响应式\">#</a> vue2.x 的响应式</h3>\n<ul>\n<li>\n<p>实现原理：</p>\n<ul>\n<li>\n<p>对象类型：通过 <code>Object.defineProperty()</code>  对属性的读取、修改进行拦截（数据劫持）。</p>\n</li>\n<li>\n<p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>存在问题：</p>\n<ul>\n<li>新增属性、删除属性，界面不会更新。</li>\n<li>直接通过下标修改数组，界面不会自动更新。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"vue30的响应式\"><a class=\"anchor\" href=\"#vue30的响应式\">#</a> Vue3.0 的响应式</h3>\n<ul>\n<li>实现原理:\n<ul>\n<li>通过 Proxy（代理）:  拦截对象中任意属性的变化，包括：属性值的读写、属性的添加、属性的删除等。</li>\n<li>通过 Reflect（反射）:  对源对象的属性进行操作。</li>\n<li>MDN 文档中描述的 Proxy 与 Reflect：\n<ul>\n<li>\n<p>Proxy：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</span></p>\n</li>\n<li>\n<p>Reflect：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUmVmbGVjdA==\">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 拦截读取属性值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">get</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 拦截设置属性值或添加新属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">set</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \t<span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 拦截删除属性</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">deleteProperty</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> prop</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    \t<span class=\"token keyword\">return</span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">deleteProperty</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>proxy<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'tom'</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5reactive对比ref\"><a class=\"anchor\" href=\"#5reactive对比ref\">#</a> 5.reactive 对比 ref</h2>\n<ul>\n<li>从定义数据角度对比：\n<ul>\n<li>ref 用来定义：<strong style=\"color:#DD5145\">基本类型数据</strong>。</li>\n<li>reactive 用来定义：<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>。</li>\n<li>备注：ref 也可以用来定义<strong style=\"color:#DD5145\">对象（或数组）类型数据</strong>, 它内部会自动通过 <code>reactive</code>  转为<strong style=\"color:#DD5145\">代理对象</strong>。</li>\n</ul>\n</li>\n<li>从原理角度对比：\n<ul>\n<li>ref 通过 <code>Object.defineProperty()</code>  的 <code>get</code>  与 <code>set</code>  来实现响应式（数据劫持）。</li>\n<li>reactive 通过使用<strong style=\"color:#DD5145\">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style=\"color:#DD5145\">Reflect</strong>操作<strong style=\"color:orange\">源对象</strong>内部的数据。</li>\n</ul>\n</li>\n<li>从使用角度对比：\n<ul>\n<li>ref 定义的数据：操作数据<strong style=\"color:#DD5145\">需要</strong> <code>.value</code> ，读取数据时模板中直接读取<strong style=\"color:#DD5145\">不需要</strong> <code>.value</code> 。</li>\n<li>reactive 定义的数据：操作数据与读取数据：<strong style=\"color:#DD5145\">均不需要</strong> <code>.value</code> 。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"6setup的两个注意点\"><a class=\"anchor\" href=\"#6setup的两个注意点\">#</a> 6.setup 的两个注意点</h2>\n<ul>\n<li>\n<p>setup 执行的时机</p>\n<ul>\n<li>在 beforeCreate 之前执行一次，this 是 undefined。</li>\n</ul>\n</li>\n<li>\n<p>setup 的参数</p>\n<ul>\n<li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li>\n<li>context：上下文对象\n<ul>\n<li>attrs: 值为对象，包含：组件外部传递过来，但没有在 props 配置中声明的属性，相当于  <code>this.$attrs</code> 。</li>\n<li>slots: 收到的插槽内容，相当于  <code>this.$slots</code> 。</li>\n<li>emit: 分发自定义事件的函数，相当于  <code>this.$emit</code> 。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7计算属性与监视\"><a class=\"anchor\" href=\"#7计算属性与监视\">#</a> 7. 计算属性与监视</h2>\n<h3 id=\"1computed函数\"><a class=\"anchor\" href=\"#1computed函数\">#</a> 1.computed 函数</h3>\n<ul>\n<li>\n<p>与 Vue2.x 中 computed 配置功能一致</p>\n</li>\n<li>\n<p>写法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>computed<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 计算属性 —— 简写</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> fullName <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>lastName</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 计算属性 —— 完整</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> fullName <span class=\"token operator\">=</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> person<span class=\"token punctuation\">.</span>lastName</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">const</span> nameArr <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            person<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> nameArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            person<span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> nameArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2watch函数\"><a class=\"anchor\" href=\"#2watch函数\">#</a> 2.watch 函数</h3>\n<ul>\n<li>\n<p>与 Vue2.x 中 watch 配置功能一致</p>\n</li>\n<li>\n<p>两个小 “坑”：</p>\n<ul>\n<li>监视 reactive 定义的响应式数据时：oldValue 无法正确获取、强制开启了深度监视（deep 配置失效）。</li>\n<li>监视 reactive 定义的响应式数据中某个属性时：deep 配置有效。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 情况一：监视 ref 定义的响应式数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 情况二：监视多个 ref 定义的响应式数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">,</span>msg<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sum或msg变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* 情况三：监视 reactive 定义的响应式数据</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t若 watch 监视的是 reactive 定义的响应式数据，则无法正确获得 oldValue！！</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t若 watch 监视的是 reactive 定义的响应式数据，则强制开启了深度监视 </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处的 deep 配置不再奏效</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 情况四：监视 reactive 定义的响应式数据中的某个属性</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>person<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person的job变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 情况五：监视 reactive 定义的响应式数据中的某些属性</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>person<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person的job变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">immediate</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 特殊情况</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>person<span class=\"token punctuation\">.</span>job<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span>oldValue</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person的job变化了'</span><span class=\"token punctuation\">,</span>newValue<span class=\"token punctuation\">,</span>oldValue<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">deep</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处由于监视的是 reactive 素定义的对象中的某个属性，所以 deep 配置有效</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3watcheffect函数\"><a class=\"anchor\" href=\"#3watcheffect函数\">#</a> 3.watchEffect 函数</h3>\n<ul>\n<li>\n<p>watch 的套路是：既要指明监视的属性，也要指明监视的回调。</p>\n</li>\n<li>\n<p>watchEffect 的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p>\n</li>\n<li>\n<p>watchEffect 有点像 computed：</p>\n<ul>\n<li>但 computed 注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li>\n<li>而 watchEffect 更注重的是过程（回调函数的函数体），所以不用写返回值。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//watchEffect 所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> x1 <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> x2 <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span>age</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'watchEffect配置的回调执行了'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"8生命周期\"><a class=\"anchor\" href=\"#8生命周期\">#</a> 8. 生命周期</h2>\n<div style=\"border:1px solid black;width:380px;float:left;margin-right:20px;\"><strong>vue2.x的生命周期</strong><img data-src=\"https://cn.vuejs.org/images/lifecycle.png\" alt=\"lifecycle_2\" style=\"zoom:33%;width:1200px\" /></div><div style=\"border:1px solid black;width:510px;height:985px;float:left\"><strong>vue3.0的生命周期</strong><img data-src=\"https://v3.cn.vuejs.org/images/lifecycle.svg\" alt=\"lifecycle_2\" style=\"zoom:33%;width:2500px\" /></div>\n<p>1</p>\n<ul>\n<li></li>\n<li></li>\n<li></li>\n<li>Vue3.0 中可以继续使用 Vue2.x 中的生命周期钩子，但有有两个被更名：\n<ul>\n<li><code>beforeDestroy</code>  改名为  <code>beforeUnmount</code></li>\n<li><code>destroyed</code>  改名为  <code>unmounted</code></li>\n</ul>\n</li>\n<li>Vue3.0 也提供了 Composition API 形式的生命周期钩子，与 Vue2.x 中钩子对应关系如下：\n<ul>\n<li><code>beforeCreate</code> ===&gt; <code>setup()</code></li>\n<li><code>created</code> =======&gt; <code>setup()</code></li>\n<li><code>beforeMount</code>  ===&gt; <code>onBeforeMount</code></li>\n<li><code>mounted</code> =======&gt; <code>onMounted</code></li>\n<li><code>beforeUpdate</code> ===&gt; <code>onBeforeUpdate</code></li>\n<li><code>updated</code>  =======&gt; <code>onUpdated</code></li>\n<li><code>beforeUnmount</code>  ==&gt; <code>onBeforeUnmount</code></li>\n<li><code>unmounted</code>  =====&gt; <code>onUnmounted</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"9自定义hook函数\"><a class=\"anchor\" href=\"#9自定义hook函数\">#</a> 9. 自定义 hook 函数</h2>\n<ul>\n<li>\n<p>什么是 hook？—— 本质是一个函数，把 setup 函数中使用的 Composition API 进行了封装。</p>\n</li>\n<li>\n<p>类似于 vue2.x 中的 mixin。</p>\n</li>\n<li>\n<p>自定义 hook 的优势：复用代码，让 setup 中的逻辑更清楚易懂。</p>\n</li>\n</ul>\n<h2 id=\"10toref\"><a class=\"anchor\" href=\"#10toref\">#</a> 10.toRef</h2>\n<ul>\n<li>\n<p>作用：创建一个 ref 对象，其 value 值指向另一个对象中的某个属性。</p>\n</li>\n<li>\n<p>语法： <code>const name = toRef(person,'name')</code></p>\n</li>\n<li>\n<p>应用：要将响应式对象中的某个属性单独提供给外部使用时。</p>\n</li>\n<li>\n<p>扩展： <code>toRefs</code>  与 <code>toRef</code>  功能一致，但可以批量创建多个 ref 对象，语法： <code>toRefs(person)</code></p>\n</li>\n</ul>\n<h1 id=\"三-其它-composition-api\"><a class=\"anchor\" href=\"#三-其它-composition-api\">#</a> 三、其它 Composition API</h1>\n<h2 id=\"1shallowreactive-与-shallowref\"><a class=\"anchor\" href=\"#1shallowreactive-与-shallowref\">#</a> 1.shallowReactive 与 shallowRef</h2>\n<ul>\n<li>\n<p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p>\n</li>\n<li>\n<p>shallowRef：只处理基本数据类型的响应式，不进行对象的响应式处理。</p>\n</li>\n<li>\n<p>什么时候使用？</p>\n<ul>\n<li>如果有一个对象数据，结构比较深，但变化时只是外层属性变化 ===&gt; shallowReactive。</li>\n<li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2readonly-与-shallowreadonly\"><a class=\"anchor\" href=\"#2readonly-与-shallowreadonly\">#</a> 2.readonly 与 shallowReadonly</h2>\n<ul>\n<li>readonly: 让一个响应式数据变为只读的（深只读）。</li>\n<li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li>\n<li>应用场景：不希望数据被修改时。</li>\n</ul>\n<h2 id=\"3toraw-与-markraw\"><a class=\"anchor\" href=\"#3toraw-与-markraw\">#</a> 3.toRaw 与 markRaw</h2>\n<ul>\n<li>toRaw：\n<ul>\n<li>作用：将一个由 <code>reactive</code>  生成的<strong style=\"color:orange\">响应式对象</strong>转为<strong style=\"color:orange\">普通对象</strong>。</li>\n<li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li>\n</ul>\n</li>\n<li>markRaw：\n<ul>\n<li>作用：标记一个对象，使其永远不会再成为响应式对象。</li>\n<li>应用场景:\n<ol>\n<li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li>\n<li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4customref\"><a class=\"anchor\" href=\"#4customref\">#</a> 4.customRef</h2>\n<ul>\n<li>\n<p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p>\n</li>\n<li>\n<p>实现防抖效果：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n\t&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;\n\t&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\timport &#123;ref,customRef&#125; from 'vue'\n\texport default &#123;\n\t\tname:'Demo',\n\t\tsetup()&#123;\n\t\t\t// let keyword = ref('hello') //使用Vue准备好的内置ref\n\t\t\t//自定义一个myRef\n\t\t\tfunction myRef(value,delay)&#123;\n\t\t\t\tlet timer\n\t\t\t\t//通过customRef去实现自定义\n\t\t\t\treturn customRef((track,trigger)=&gt;&#123;\n\t\t\t\t\treturn&#123;\n\t\t\t\t\t\tget()&#123;\n\t\t\t\t\t\t\ttrack() //告诉Vue这个value值是需要被“追踪”的\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t&#125;,\n\t\t\t\t\t\tset(newValue)&#123;\n\t\t\t\t\t\t\tclearTimeout(timer)\n\t\t\t\t\t\t\ttimer = setTimeout(()=&gt;&#123;\n\t\t\t\t\t\t\t\tvalue = newValue\n\t\t\t\t\t\t\t\ttrigger() //告诉Vue去更新界面\n\t\t\t\t\t\t\t&#125;,delay)\n\t\t\t\t\t\t&#125;\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;)\n\t\t\t&#125;\n\t\t\tlet keyword = myRef('hello',500) //使用程序员自定义的ref\n\t\t\treturn &#123;\n\t\t\t\tkeyword\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&lt;/script&gt;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"5provide-与-inject\"><a class=\"anchor\" href=\"#5provide-与-inject\">#</a> 5.provide 与 inject</h2>\n<img data-src=\"https://v3.cn.vuejs.org/images/components_provide.png\" style=\"width:300px\" />\n<ul>\n<li>\n<p>作用：实现<strong style=\"color:#DD5145\">祖与后代组件间</strong>通信</p>\n</li>\n<li>\n<p>套路：父组件有一个  <code>provide</code>  选项来提供数据，后代组件有一个  <code>inject</code>  选项来开始使用这些数据</p>\n</li>\n<li>\n<p>具体写法：</p>\n<ol>\n<li>\n<p>祖组件中：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'奔驰'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span><span class=\"token string\">'40万'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">provide</span><span class=\"token punctuation\">(</span><span class=\"token string\">'car'</span><span class=\"token punctuation\">,</span>car<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>后代组件中：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span>context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> car <span class=\"token operator\">=</span> <span class=\"token function\">inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'car'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span>car<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"6响应式数据的判断\"><a class=\"anchor\" href=\"#6响应式数据的判断\">#</a> 6. 响应式数据的判断</h2>\n<ul>\n<li>isRef: 检查一个值是否为一个 ref 对象</li>\n<li>isReactive: 检查一个对象是否是由  <code>reactive</code>  创建的响应式代理</li>\n<li>isReadonly: 检查一个对象是否是由  <code>readonly</code>  创建的只读代理</li>\n<li>isProxy: 检查一个对象是否是由  <code>reactive</code>  或者  <code>readonly</code>  方法创建的代理</li>\n</ul>\n<h1 id=\"四-composition-api-的优势\"><a class=\"anchor\" href=\"#四-composition-api-的优势\">#</a> 四、Composition API 的优势</h1>\n<h2 id=\"1options-api-存在的问题\"><a class=\"anchor\" href=\"#1options-api-存在的问题\">#</a> 1.Options API 存在的问题</h2>\n<p>使用传统 OptionsAPI 中，新增或者修改一个需求，就需要分别在 data，methods，computed 里修改 。</p>\n<div style=\"width:600px;height:370px;overflow:hidden;float:left\">\n    <img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image\" style=\"width:600px;float:left\" />\n</div>\n<div style=\"width:300px;height:370px;overflow:hidden;float:left\">\n    <img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image\" style=\"zoom:50%;width:560px;left\" /> \n</div>\n<h2 id=\"2composition-api-的优势\"><a class=\"anchor\" href=\"#2composition-api-的优势\">#</a> 2.Composition API 的优势</h2>\n<p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p>\n<div style=\"width:500px;height:340px;overflow:hidden;float:left\">\n    <img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n<div style=\"width:430px;height:340px;overflow:hidden;float:left\">\n    <img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image\"style=\"height:360px\"/>\n</div>\n<h1 id=\"五-新的组件\"><a class=\"anchor\" href=\"#五-新的组件\">#</a> 五、新的组件</h1>\n<h2 id=\"1fragment\"><a class=\"anchor\" href=\"#1fragment\">#</a> 1.Fragment</h2>\n<ul>\n<li>在 Vue2 中：组件必须有一个根标签</li>\n<li>在 Vue3 中：组件可以没有根标签，内部会将多个标签包含在一个 Fragment 虚拟元素中</li>\n<li>好处：减少标签层级，减小内存占用</li>\n</ul>\n<h2 id=\"2teleport\"><a class=\"anchor\" href=\"#2teleport\">#</a> 2.Teleport</h2>\n<ul>\n<li>\n<p>什么是 Teleport？——  <code>Teleport</code>  是一种能够将我们的<strong style=\"color:#DD5145\">组件 html 结构</strong>移动到指定位置的技术。</p>\n<pre><code class=\"language-vue\">&lt;teleport to=&quot;移动位置&quot;&gt;\n\t&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;\n\t\t&lt;div class=&quot;dialog&quot;&gt;\n\t\t\t&lt;h3&gt;我是一个弹窗&lt;/h3&gt;\n\t\t\t&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n&lt;/teleport&gt;\n</code></pre>\n</li>\n</ul>\n<h2 id=\"3suspense\"><a class=\"anchor\" href=\"#3suspense\">#</a> 3.Suspense</h2>\n<ul>\n<li>\n<p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p>\n</li>\n<li>\n<p>使用步骤：</p>\n<ul>\n<li>\n<p>异步引入组件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>defineAsyncComponent<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> Child <span class=\"token operator\">=</span> <span class=\"token function\">defineAsyncComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./components/Child.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>Suspense</code>  包裹组件，并配置好 <code>default</code>  与  <code>fallback</code></p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div class=&quot;app&quot;&gt;\n\t\t&lt;h3&gt;我是App组件&lt;/h3&gt;\n\t\t&lt;Suspense&gt;\n\t\t\t&lt;template v-slot:default&gt;\n\t\t\t\t&lt;Child/&gt;\n\t\t\t&lt;/template&gt;\n\t\t\t&lt;template v-slot:fallback&gt;\n\t\t\t\t&lt;h3&gt;加载中.....&lt;/h3&gt;\n\t\t\t&lt;/template&gt;\n\t\t&lt;/Suspense&gt;\n\t&lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"六-其他\"><a class=\"anchor\" href=\"#六-其他\">#</a> 六、其他</h1>\n<h2 id=\"1全局api的转移\"><a class=\"anchor\" href=\"#1全局api的转移\">#</a> 1. 全局 API 的转移</h2>\n<ul>\n<li>\n<p>Vue 2.x 有许多全局 API 和配置。</p>\n<ul>\n<li>\n<p>例如：注册全局组件、注册全局指令等。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 注册全局组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyButton'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">template</span><span class=\"token operator\">:</span> <span class=\"token string\">'&lt;button @click=\"count++\">Clicked  times.&lt;/button>'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 注册全局指令</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'focus'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function-variable function\">inserted</span><span class=\"token operator\">:</span> <span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>Vue3.0 中对这些 API 做出了调整：</p>\n<ul>\n<li>\n<p>将全局的 API，即： <code>Vue.xxx</code>  调整到应用实例（ <code>app</code> ）上</p>\n<table>\n<thead>\n<tr>\n<th>2.x 全局 API（ <code>Vue</code> ）</th>\n<th>3.x 实例 API ( <code>app</code> )</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vue.config.xxxx</td>\n<td>app.config.xxxx</td>\n</tr>\n<tr>\n<td>Vue.config.productionTip</td>\n<td><strong style=\"color:#DD5145\">移除</strong></td>\n</tr>\n<tr>\n<td>Vue.component</td>\n<td>app.component</td>\n</tr>\n<tr>\n<td>Vue.directive</td>\n<td>app.directive</td>\n</tr>\n<tr>\n<td>Vue.mixin</td>\n<td>app.mixin</td>\n</tr>\n<tr>\n<td>Vue.use</td>\n<td>app.use</td>\n</tr>\n<tr>\n<td>Vue.prototype</td>\n<td>app.config.globalProperties</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2其他改变\"><a class=\"anchor\" href=\"#2其他改变\">#</a> 2. 其他改变</h2>\n<ul>\n<li>\n<p>data 选项应始终被声明为一个函数。</p>\n</li>\n<li>\n<p>过度类名的更改：</p>\n<ul>\n<li>\n<p>Vue2.x 写法</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.v-enter,</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.v-leave-to</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">.v-leave,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>.v-enter-to</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>Vue3.x 写法</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.v-enter-from,</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>.v-leave-to</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token selector\">.v-leave-from,</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>.v-enter-to</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><strong style=\"color:#DD5145\">移除</strong>keyCode 作为 v-on 的修饰符，同时也不再支持 <code>config.keyCodes</code></p>\n</li>\n<li>\n<p><strong style=\"color:#DD5145\">移除</strong> <code>v-on.native</code>  修饰符</p>\n<ul>\n<li>\n<p>父组件中绑定事件</p>\n<pre><code class=\"language-vue\">&lt;my-component\n  v-on:close=&quot;handleComponentEvent&quot;\n  v-on:click=&quot;handleNativeClickEvent&quot;\n/&gt;\n</code></pre>\n</li>\n<li>\n<p>子组件中声明自定义事件</p>\n<pre><code class=\"language-vue\">&lt;script&gt;\n  export default &#123;\n    emits: ['close']\n  &#125;\n&lt;/script&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p><strong style=\"color:#DD5145\">移除</strong>过滤器（filter）</p>\n<blockquote>\n<p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p>\n</blockquote>\n</li>\n<li>\n<p>......</p>\n</li>\n</ul>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "前端",
                "框架",
                "框架"
            ]
        },
        {
            "id": "https://eth168.top/study/develop/domain/",
            "url": "https://eth168.top/study/develop/domain/",
            "title": "domain",
            "date_published": "2023-02-28T11:09:36.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>为了避免交易域名因滥用、争议等导致 serverhold，因历史行为导致不能备案或在中国大陆境内的域名解析请求被运营商拦截，购买前请提前<strong>查看域名 whois 信息</strong>，<strong>检查域名能否解析、备案</strong>等，避免影响购买后的正常使用。域名购买后，可能发生无法备案或在中国大陆境内域名解析请求被运营商拦截的情形，阿里云不因此承担责任。</p>\n<h1 id=\"推荐三个自查-whois-网站\"><a class=\"anchor\" href=\"#推荐三个自查-whois-网站\">#</a> 推荐三个自查 whois 网站</h1>\n<ol>\n<li>\n<p>中国互联网信息中心 whois 查询</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25uaWMubmV0LmNuLw==\">https://www.cnnic.net.cn/</span></p>\n</li>\n<li>\n<p>站长之家 whois 查询</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aG9pcy5jaGluYXouY29tLw==\">https://whois.chinaz.com/</span></p>\n</li>\n<li>\n<p>爱站网 whois 查询</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aG9pcy5haXpoYW4uY29tLw==\">https://whois.aizhan.com/</span></p>\n</li>\n</ol>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "小实验",
                "小实验"
            ]
        },
        {
            "id": "https://eth168.top/study/develop/hexo-shoka/",
            "url": "https://eth168.top/study/develop/hexo-shoka/",
            "title": "hexo_shoka",
            "date_published": "2023-02-27T06:27:41.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<ol>\n<li>想要快速搭建起来，下载完主题，安装核心依赖，然后修改 hexo 全局配置中的  <code>theme</code>  为  <code>shoka</code>  即可</li>\n<li>完全参考我的，无脑跟着操作即可，其他配置可以参考文档来添加<br />\n官方参考文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/</span></li>\n</ol>\n<h1 id=\"主题\"><a class=\"anchor\" href=\"#主题\">#</a> 主题</h1>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><h1 id=\"核心插件\"><a class=\"anchor\" href=\"#核心插件\">#</a> 核心插件 *</h1>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i  hexo-autoprefixer   <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># algolia 搜索</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> i  hexo-algoliasearch   <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 图片地址自动转化为 hexo 要求</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> i  hexo-image-link   <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 要下载 主题专属的 Markdown 解析插件必须设置这个</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PUPPETEER_SKIP_DOWNLOAD</span><span class=\"token operator\">=</span><span class=\"token string\">'true'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">npm</span> i  hexo-renderer-multi-markdown-it   <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">npm</span> i  hexo-feed   <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">npm</span> i  hexo-symbols-count-time   <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><h1 id=\"卸载自带的一些依赖\"><a class=\"anchor\" href=\"#卸载自带的一些依赖\">#</a> 卸载自带的一些依赖</h1>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 因为 shoka 主题自己有特定的解析器，自带的一律卸载</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> un hexo-renderer-marked</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 这是默认主题，直接卸载</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> un hexo-theme-landscape</pre></td></tr></table></figure><h1 id=\"可选插件\"><a class=\"anchor\" href=\"#可选插件\">#</a> 可选插件</h1>\n<ol>\n<li>评论</li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i  hexo-plugin-gitalk   <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>git 上传。这只是上传我们编译好的文件 public</li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i  hexo-deployer-git   <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>文件加密</li>\n</ol>\n<figure class=\"highlight sh\"><figcaption data-lang=\"sh\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i  hexo-blog-encrypt   <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><h1 id=\"shoka-主题配置\"><a class=\"anchor\" href=\"#shoka-主题配置\">#</a> shoka 主题配置</h1>\n<blockquote>\n<p>在博客根目录建立一个  <code>_config.shoka.yml</code>  做为主题的专项配置，就不用去 theme 中专门去改，他会覆盖掉 theme 中的配置项<br />\n我的配置：</p>\n</blockquote>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">alternate</span><span class=\"token punctuation\">:</span> 雾都博客</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Assets</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">statics</span><span class=\"token punctuation\">:</span> / <span class=\"token comment\">#//cdn.jsdelivr.net/gh/amehime/shoka@latest/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">open_graph</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">#twitter_id:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">#google_plus:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">#fb_admins:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">#fb_app_id:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 自动定位，返回你之前看到的地方</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">auto_scroll</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 侧边栏</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\"># Sidebar Position.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">position</span><span class=\"token punctuation\">:</span> left</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\"># position: right</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\"># Replace the default avatar image and set the url here.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> avatar.jpg</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> home</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token key atrule\">archives</span><span class=\"token punctuation\">:</span> /archives/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> list<span class=\"token punctuation\">-</span>alt</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> /categories/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> /tags/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> tags</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token key atrule\">toolsPage</span><span class=\"token punctuation\">:</span> /toolPage/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token key atrule\">projectBuild</span><span class=\"token punctuation\">:</span> /projectBuild/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token key atrule\">mianshi</span><span class=\"token punctuation\">:</span> /mianshi/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> calendar</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token key atrule\">study</span><span class=\"token punctuation\">:</span> /study/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> sakura</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token key atrule\">friends</span><span class=\"token punctuation\">:</span> /friends/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> heart</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token key atrule\">about</span><span class=\"token punctuation\">:</span> /about/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> calendar</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># Social Links</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># Usage: `Key: permalink || icon || color`</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># Key is the link label showing to end users.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\"># Value before `||` delimiter is the target permalink,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># secend value is the name of Font icon.</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># project of https://www.iconfont.cn/</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># //at.alicdn.com/t/font_1832207_c8i9n1ulxlt.css => 1832207_c8i9n1ulxlt</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key atrule\">iconfont</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1832207_igi8uaupcus\"</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\"># iconfont: \"3731160_8pmmsyz1p7k\"</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token key atrule\">social</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">#这里有问题要换成你自己的</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token key atrule\">github</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/onlymarryu <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> github <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#191717\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token comment\"># github: https://github.com/onlymarryu || github1 || \"#191717\"</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token comment\"># CSDN: https://blog.csdn.net/Bkhole?spm=1000.2115.3001.5343 || csdn || \"#ea716e\"</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token comment\"># fengye: https://cloud.fynote.com/edit?nid=113796&amp;id=1567528016345563136&amp;t=1665816345587 || icon9 || \"#55acd5\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token comment\"># yuque: https://www.yuque.com/dashboard/recent || tubiaozhizuomoban || \"#20FB25\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\"># google: https://plus.google.com/ || google</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token comment\"># twitter: https://twitter.com/amehime || twitter || \"#00aff0\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token key atrule\">zhihu</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//www.zhihu.com/people/rurismzk <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> zhihu <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#1e88e5\"</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token key atrule\">music</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/my/m/music/playlist?id=3166060790 || cloud-music || \"#e60026\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token key atrule\">weibo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//weibo.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> weibo <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#ea716e\"</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  <span class=\"token comment\"># about: https://about.me/amehime || address-card || \"#3b5998\"</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token comment\"># email: mailto:yourname@mail.com || envelope || \"#55acd5\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token comment\">#facebook: https://www.facebook.com/yourname || facebook</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token comment\">#stackoverflow: https://stackoverflow.com/yourname || stack-overflow</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token comment\">#youtube: https://youtube.com/yourname || youtube</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token comment\">#instagram: https://instagram.com/yourname || instagram</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\">#skype: skype:yourname?call|chat || skype</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token comment\">#douban: https://www.douban.com/people/yourname/ || douban</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token comment\"># Specify the date when the site was setup. If not defined, current year will be used.</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token key atrule\">since</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2010</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\"># Third Party Plugins &amp; Services Settings</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\"># Comments</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\"># Valine</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># valine:</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">#   enable: false</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token comment\">#   appId: CcRFYrQF2jeLivqZJ02IX02H-gzGzoHsz  #Your_appId</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\">#   appKey: xDkO9dJRzIJK7n0GofHoyP0y  #Your_appkey</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\">#   placeholder: ヽ (○´∀`)ﾉ♪  # Comment box placeholder</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\">#   avatar: wavatar  # Gravatar style : mp, identicon, monsterid, wavatar, robohash, retro</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">#   pageSize: 10  # Pagination size</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">#   lang: zh-CN</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\">#   visitor: true # 文章访问量统计</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\">#   NoRecordIP: false # 不记录 IP</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\">#   serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\">#   powerMode: true # 默认打开评论框输入特效</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\">#   tagMember:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\">#     master:</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token comment\">#       # - hash of master@email.com</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\">#       # - hash of master2@email.com</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">#     friend:</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\">#       # - hash of friend@email.com</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\">#       # - hash of friend2@email.com</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\">#     investor:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">#       # - hash of investor1@email.com</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre><span class=\"token comment\"># valine:</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\">#   appId: #这里不要忘了改</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\">#   appKey: #这里不要忘了改</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">#   placeholder: ヽ (○´∀`)ﾉ♪ # Comment box placeholder</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\">#   pageSize: 10 # Pagination size</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">#   lang: zh-CN</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre><span class=\"token comment\">#   tagMember:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\">#     master:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\">#       # - deea5a8d259d17182a53be1772e4c182</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">#     friend:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">#       - deea5a8d259d17182a53be1772e4c182</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\"># 随机图床 Api 百度</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token comment\"># image_server: \"https://api.ixiaowai.cn/api/api.php\"</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token comment\"># image_server: \"https://api.yimian.xyz/img\"</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token comment\"># bgm</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 网易音乐</pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>      <span class=\"token comment\"># 这里有问题，要换成你自己的</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/my/m/music/playlist?id=xxxx</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> QQ音乐</pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token comment\"># QQ 音乐要自带.html</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>      <span class=\"token comment\"># 这里有问题，要换成你自己的</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//y.qq.com/n/ryqq/playlist/xxxx.html</pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token comment\"># Dependencies: https://github.com/amehime/hexo-renderer-multi-markdown-it</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token key atrule\">pangu</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token comment\"># analytics &amp; SEO Settings</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token comment\"># ---------------------------------------------------------------</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token comment\"># Disable Baidu transformation on mobile devices.</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token key atrule\">disable_baidu_transformation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre><span class=\"token comment\"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre><span class=\"token key atrule\">exturl</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre></pre></td></tr><tr><td data-num=\"145\"></td><td><pre><span class=\"token comment\">#Algolia Search</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre><span class=\"token key atrule\">algolia_search</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>  <span class=\"token key atrule\">hits</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token key atrule\">per_page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>    <span class=\"token key atrule\">input_placeholder</span><span class=\"token punctuation\">:</span> Search for Posts <span class=\"token tag\">!</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token key atrule\">hits_empty</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"我们没有找到任何搜索结果：$&#123;query&#125;\"</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token key atrule\">hits_stats</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"找到约$&#123;hits&#125;条结果 (用时$&#123;time&#125;ms)\"</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token comment\"># local searach</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token key atrule\">local_sreach</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token comment\"># 是否显示页面加载动画 loading-cat</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre><span class=\"token key atrule\">loader</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>  <span class=\"token key atrule\">start</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 当初次打开页面时，显示加载动画</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>  <span class=\"token key atrule\">switch</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># tab 切换到其他页面时，显示加载动画</span></pre></td></tr></table></figure><h1 id=\"hexo-全局配置\"><a class=\"anchor\" href=\"#hexo-全局配置\">#</a> hexo 全局配置</h1>\n<blockquote>\n<p>就是修改  <code>_config.yml</code></p>\n</blockquote>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Hexo Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/configuration.html</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## Source: https://github.com/hexojs/hexo/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># description: ' 记录 “美食” 每刻'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Asia/Shanghai\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title/ <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token key atrule\">permalink_defaults</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># Directory</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token key atrule\">source_dir</span><span class=\"token punctuation\">:</span> source</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token key atrule\">public_dir</span><span class=\"token punctuation\">:</span> public</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> tags</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">archive_dir</span><span class=\"token punctuation\">:</span> archives</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> categories</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token key atrule\">code_dir</span><span class=\"token punctuation\">:</span> downloads/code</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key atrule\">i18n_dir</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>lang</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token key atrule\">skip_render</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># Writing</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key atrule\">new_post_name</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title.md <span class=\"token comment\"># File name of new posts</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key atrule\">default_layout</span><span class=\"token punctuation\">:</span> post</pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">titlecase</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># Transform title into titlecase</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token key atrule\">external_link</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Open external links in new tab</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> site <span class=\"token comment\"># Apply to the whole site</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token key atrule\">filename_case</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token key atrule\">render_drafts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">post_asset_folder</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token key atrule\">relative_link</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token key atrule\">future</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token key atrule\">line_number</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token key atrule\">auto_detect</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token key atrule\">tab_replace</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># Category &amp; Tag</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token key atrule\">default_category</span><span class=\"token punctuation\">:</span> uncategorized</pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token key atrule\">category_map</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token key atrule\">tag_map</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\"># Date / Time format</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\">## Hexo uses Moment.js to parse and display date</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\">## You can customize the date format as defined in</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">## http://momentjs.com/docs/#/displaying/format/</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token key atrule\">date_format</span><span class=\"token punctuation\">:</span> YYYY<span class=\"token punctuation\">-</span>MM<span class=\"token punctuation\">-</span>DD</pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token key atrule\">time_format</span><span class=\"token punctuation\">:</span> HH<span class=\"token punctuation\">:</span>mm<span class=\"token punctuation\">:</span>ss</pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\"># Pagination</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">## Set per_page to 0 to disable pagination</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token key atrule\">per_page</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token key atrule\">pagination_dir</span><span class=\"token punctuation\">:</span> page</pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\"># Extensions</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">## Plugins: http://hexo.io/plugins/</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">## Themes: http://hexo.io/themes/</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka <span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">## Docs: http://hexo.io/docs/deployment.html</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"git\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的 #https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>  <span class=\"token key atrule\">token</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># edit for Theme.shoka</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token key atrule\">autoprefixer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*.min.css\"</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>  <span class=\"token key atrule\">render</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token key atrule\">xhtmlOut</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token key atrule\">breaks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    <span class=\"token key atrule\">linkify</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    <span class=\"token key atrule\">typographer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token key atrule\">quotes</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"“”‘’\"</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>toc<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>anchor</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>          <span class=\"token key atrule\">tocClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"toc\"</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>          <span class=\"token key atrule\">anchorClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"anchor\"</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>multimd<span class=\"token punctuation\">-</span>table</pre></td></tr><tr><td data-num=\"105\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>          <span class=\"token key atrule\">multiline</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>          <span class=\"token key atrule\">rowspan</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>          <span class=\"token key atrule\">headerless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>furigana</pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>          <span class=\"token key atrule\">fallbackParens</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>spoiler</pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>          <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>emoji</pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\"># hexo-plugin-gitalk</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>  <span class=\"token key atrule\">gitalk</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    <span class=\"token key atrule\">clientID</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>    <span class=\"token key atrule\">clientSecret</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token key atrule\">owner</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>    <span class=\"token key atrule\">admin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>      <span class=\"token punctuation\">-</span>  <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    <span class=\"token key atrule\">distractionFreeMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>    <span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN</pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token key atrule\">proxy</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>    <span class=\"token key atrule\">perPage</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token key atrule\">minify</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>  <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"**/json.ejs\"</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"**/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"**/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"**/*.min.css\"</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>    <span class=\"token key atrule\">stamp</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>    <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>      <span class=\"token key atrule\">toplevel</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>    <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"**/*.min.js\"</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>  <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>  <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"-date\"</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>  <span class=\"token key atrule\">tag_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>  <span class=\"token key atrule\">category_dir</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>  <span class=\"token key atrule\">rss</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/rss.ejs\"</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rss.xml\"</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>  <span class=\"token key atrule\">atom</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/atom.ejs\"</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"atom.xml\"</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>  <span class=\"token key atrule\">jsonFeed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>    <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"themes/shoka/layout/_alternate/json.ejs\"</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"feed.json\"</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre></pre></td></tr><tr><td data-num=\"179\"></td><td><pre><span class=\"token key atrule\">algolia</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>  <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>  <span class=\"token key atrule\">apiKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre>  <span class=\"token key atrule\">adminApiKey</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre>  <span class=\"token key atrule\">chunkSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>  <span class=\"token key atrule\">indexName</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你自己的</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>  <span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>    <span class=\"token punctuation\">-</span> title <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>    <span class=\"token punctuation\">-</span> path <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>    <span class=\"token punctuation\">-</span> categories <span class=\"token comment\">#推荐配置</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>    <span class=\"token punctuation\">-</span> content<span class=\"token punctuation\">:</span>strip<span class=\"token punctuation\">:</span>truncate<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>    <span class=\"token punctuation\">-</span> tags</pre></td></tr><tr><td data-num=\"191\"></td><td><pre>    <span class=\"token punctuation\">-</span> mianshi</pre></td></tr><tr><td data-num=\"192\"></td><td><pre>    <span class=\"token punctuation\">-</span> toolPage</pre></td></tr><tr><td data-num=\"193\"></td><td><pre><span class=\"token comment\"># 文章加密  hexo-blog-encrypt</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre><span class=\"token key atrule\">encrypt</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>  <span class=\"token key atrule\">abstract</span><span class=\"token punctuation\">:</span> 这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</pre></td></tr><tr><td data-num=\"197\"></td><td><pre>  <span class=\"token key atrule\">message</span><span class=\"token punctuation\">:</span> 这是一篇加密文章，请输入密码，查看文章。</pre></td></tr><tr><td data-num=\"198\"></td><td><pre>  <span class=\"token comment\"># 可以直接指定 tag 加密</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>  <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> tagName<span class=\"token punctuation\">,</span> <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> 密码A <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>  <span class=\"token key atrule\">wrong_pass_message</span><span class=\"token punctuation\">:</span> 抱歉<span class=\"token punctuation\">,</span> 这个密码看着不太对<span class=\"token punctuation\">,</span> 请再试试.</pre></td></tr><tr><td data-num=\"202\"></td><td><pre>  <span class=\"token key atrule\">wrong_hash_message</span><span class=\"token punctuation\">:</span> 抱歉<span class=\"token punctuation\">,</span> 这个文章不能被校验<span class=\"token punctuation\">,</span> 不过您还是能看看解密后的内容.</pre></td></tr></table></figure>\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "小实验",
                "小实验"
            ]
        },
        {
            "id": "https://eth168.top/interview/MySQL/",
            "url": "https://eth168.top/interview/MySQL/",
            "title": "MySQL复习题",
            "date_published": "2023-02-27T06:14:24.750Z",
            "content_html": "<h1 id=\"数据库存储引擎有哪些\"><a class=\"anchor\" href=\"#数据库存储引擎有哪些\">#</a> 数据库存储引擎有哪些</h1>\n<p>Myisam、Innodb</p>\n<h1 id=\"myisam和innodb有什么区别\"><a class=\"anchor\" href=\"#myisam和innodb有什么区别\">#</a> Myisam 和 Innodb 有什么区别</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">区别</th>\n<th style=\"text-align:center\">MyISAM</th>\n<th style=\"text-align:center\">InnoDB</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">数据结构</td>\n<td style=\"text-align:center\">.frm 存储表定义 <br/>.MYD  存储数据文件<br/>.MYI  存储索引文件</td>\n<td style=\"text-align:center\">.frm 存储表定义<br/>.ibd 存储数据和索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">存储空间</td>\n<td style=\"text-align:center\">MyISAM<strong> 可被压缩，存储空间较小</strong><br/>支持三种存储：静态表 [默认]、动态表、压缩表</td>\n<td style=\"text-align:center\">InnoDB<strong> 需要更多的内存和存储，它会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引</strong>。InnoDB 所在的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间）<br/>InnoDB 表的大小只受限于操作系统文件的大小，一般为 2GB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">事务的支持</td>\n<td style=\"text-align:center\">MyISAM 强调的是性能，每次查询具有原子性，其执行速度比 Innodb 类型更快，<br/>但是<strong>不提供事务支持</strong>。</td>\n<td style=\"text-align:center\">InnoDB 除了<em><strong>提供事务支持</strong></em>和外部键等高级数据库功能。还具有事务提交（commit）、回滚（rollback）和崩溃修复能力（crach recovery capabilities）等这些事务安全（transaction-safe ACID compliant）型表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">锁的支持</td>\n<td style=\"text-align:center\">如果只是执行大量的查询，MyISAM 是更好的选择。MyISAM 在<strong>增删</strong>的时候需要<strong>锁定整个表格</strong>，效率会低一些</td>\n<td style=\"text-align:center\">innoDB 支持行级锁，<em><strong>删除插入</strong></em>的时候只需要<em><strong>锁定操作行</strong></em>就行。如果有大量的插入、修改删除操作，使用 InnoDB 性能能会更高</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">查询效率</td>\n<td style=\"text-align:center\"><strong>高</strong><br>支持全文索引</td>\n<td style=\"text-align:center\"><strong>低</strong><br/>不支持全文索引</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">外键的支持</td>\n<td style=\"text-align:center\">MyISAM<strong> 不支持外键</strong></td>\n<td style=\"text-align:center\">支持外键</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"如何选择数据库引擎\"><a class=\"anchor\" href=\"#如何选择数据库引擎\">#</a> 如何选择数据库引擎？</h1>\n<p>1、如果需要支持事务，选择 InnoDB，不需要事务则选择 MyISAM。</p>\n<p>2、如果大部分表操作都是查询，选择 MyISAM，有写又有读选 InnoDB。</p>\n<p>3、如果系统崩溃导致数据难以恢复，且成本高，不要选择 MyISAM。</p>\n<h1 id=\"三范式是什么\"><a class=\"anchor\" href=\"#三范式是什么\">#</a> 三范式是什么</h1>\n<p>第一范式：列不可再分</p>\n<p>第二范式：行可以唯一区分，主键约束</p>\n<p>第三范式：表的非主属性不能依赖与其他表的非主属性  外键约束</p>\n<p>简单来说，第一范式就是让属性原子化，不可再分；第二范式就是让数据具有主属性从而产生唯一标识（特别是为了标识有联合主键的情况）；第三范式就是表的非主属性不能依赖与其他表的非主属性，也可以说是表中的属性不能有依赖关系</p>\n<img data-src=\"/interview/MySQL/image-20220714214608165.png\" class=\"\" title=\"image-20220714214608165\">\n<h1 id=\"什么是事务有哪些特点\"><a class=\"anchor\" href=\"#什么是事务有哪些特点\">#</a> 什么是事务，有哪些特点</h1>\n<p>事务是用来维护数据库完整性的，具体体现就是多条 sql 语句，要么全部成功，要么全部失败。</p>\n<p>特点：<mark>ACID</mark></p>\n<p>A:（原子性 Atomicity）、C: 一致性（Consistency）、I：隔离性（Isolation）、D：持久性（Durability）</p>\n<p>1) 原子性<br />\n原子是自然界最小的颗粒，具有不可再分的特性</p>\n<ol start=\"2\">\n<li>\n<p>一致性<br />\n一致性是指事务执行的结果必须使数据库从一个一致性状态，变到另一个一致性状态。</p>\n</li>\n<li>\n<p>隔离性<br />\n隔离性是指各个事务的执行互不干扰</p>\n</li>\n</ol>\n<p>4) 持久性<br />\n持久性指事务一旦提交，对数据所做的任何改变，都要记录到永久存储器中</p>\n<h1 id=\"事务的隔离级别有哪些\"><a class=\"anchor\" href=\"#事务的隔离级别有哪些\">#</a> 事务的隔离级别有哪些</h1>\n<p>由低到高：</p>\n<img data-src=\"/interview/MySQL/image-20220714221905692.png\" class=\"\" title=\"image-20220714221905692\">\n<p><strong>READ UNCOMMITTED（读未提交）</strong></p>\n<p>​\t在这个隔离级别，所有事务都可以看到未提交事务的执行结果。在这种隔离级别上，可能会产生很多问题。所以这种隔离级别很少用于实际应用，而且它的性能也没有比其他性能好很多，而别的级别还有其他的优点。读取未提交数据，也被称为 “脏读”。</p>\n<p><strong>READ COMMITTED（读已提交）</strong></p>\n<p>​\t读已提交这种隔离级别是大多数数据库系统默认的隔离级别（但 mysql 默认的隔离级别却不是这种），满足了隔离的最早简单定义：一个事务开始时，只能看见已经提交事务所做的改变，一个事务从开始到提交前，所做的任何数据改变都是不可见的，除非已经提交。这种隔离级别也支持所谓的不可重复读。这意味着用户运行同一个语句两次，看到的结果是不同的。</p>\n<p><strong>REPEATABLE READ（可重复读）</strong></p>\n<p>​\tmysql 数据库默认的隔离级别。该级别解决了 READ UNCOMMITTED 导致的问题。它保证了同一事务的多个实例在并发读取事务时，会看到同样的数据行。不过这会导致另外一个问题 “幻读”。InnoDB 和 Falcon 存储引擎通过多版本并发控制解决了幻读问题。</p>\n<p><strong>SERIALIZABLE（可串行化）</strong></p>\n<p>​\t该隔离级别是最高的隔离级别。它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简而言之：SERIALIZABLE 是在每个读的数据行加锁，在这个级别上可能导致大量的超时和锁竞争现象，实际应用中很少使用这个级别，但如果用户的应用为了数据的稳定性，需要强制减少并发，也可以选择这种隔离级别。</p>\n<h1 id=\"并发事务带来哪些问题\"><a class=\"anchor\" href=\"#并发事务带来哪些问题\">#</a> 并发事务带来哪些问题？</h1>\n<p><strong>脏读（Dirty read）</strong></p>\n<p>​\t当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是 “脏数据”，依据 “脏数据” 所做的操作可能是不正确的。</p>\n <img data-src=\"/interview/MySQL/image-20220714222508260.png\" class=\"\" title=\"image-20220714222508260\">\n<p><strong>不可重复读（Unrepeatableread）</strong></p>\n<p>​\t指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。</p>\n <img data-src=\"/interview/MySQL/image-20220714222512979.png\" class=\"\" title=\"image-20220714222512979\">\n<p><strong>幻读 （Phantom read）</strong></p>\n<p>幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。</p>\n <img data-src=\"/interview/MySQL/image-20220714222518876.png\" class=\"\" title=\"image-20220714222518876\">\n<h1 id=\"不可重复度和幻读区别\"><a class=\"anchor\" href=\"#不可重复度和幻读区别\">#</a> 不可重复度和幻读区别？</h1>\n<p>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p>\n<p>解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p>\n<h1 id=\"sql优化手段有哪些\"><a class=\"anchor\" href=\"#sql优化手段有哪些\">#</a> SQL 优化手段有哪些？</h1>\n<p>1、查询语句中不要使用 select *</p>\n<p>2、尽量减少子查询，使用关联查询（left join,right join,inner join）替代</p>\n<p>3、减少使用 IN 或者 NOT IN , 使用 exists，not exists 或者关联查询语句替代</p>\n<p>4、or 的查询尽量用 union 或者 union all 代替 (在确认没有重复数据或者不用剔除重复数据时，union all 会更好)</p>\n<p>5、应尽量避免在 where 子句中使用！= 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。</p>\n<p>6、应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： select id from t where num is null 可以在 num 上设置默认值 0，确保表中 num 列没有 null 值，然后这样查询： select id from t where num=0</p>\n<h1 id=\"undo-log日志详解\"><a class=\"anchor\" href=\"#undo-log日志详解\">#</a> undo log 日志详解</h1>\n<ol>\n<li>\n<p>什么是 undo log？<br />\n撤销日志，在数据库事务开始之前，MYSQL 会去记录更新前的数据到 undo log 文件中。如果事务回滚或者数据库崩溃时，可以利用 undo log 日志中记录的日志信息进行回退。同时也可以提供多版本并发控制下的读 (MVCC)。（具体的 MVCC 实现机制详解看这篇博客）</p>\n</li>\n<li>\n<p>undo log 生命周期<br />\n undo log 产生： 在事务开始之前生成<br />\n undo log 销毁： <strong>当事务提交之后，undo log 并不能立马被删除</strong>，而是放入待清理的链表，由 purge 线程判断是否由其他事务在使用 undo 段中表的上一个事务之前的版本信息，决定是否可以清理 undo log 的日志空间。<br />\n<strong>注意： undo log 也会生产 redo log，undo log 也要实现持久性保护。</strong></p>\n</li>\n<li>\n<p><strong>uodo log 日志的作用</strong><br />\n首先简单说一下<strong> undolog 和 redo log 的区别</strong><br />\n <code>undo log</code>  是逻辑日志，实现事务的原子性<br />\n  undo log 记录的是事务 [ <code>开始前</code> ] 的数据状态，记录的是更新之前的值<br />\n  undo log 实现事务的 <code>原子性</code>  (<strong>提供回滚</strong>)<br />\n <code>redo log</code>  是物理日志，实现事务的持久性<br />\n  redo log 记录的是事务 [ <code>完成后</code> ] 的数据状态，记录的是更新之后的值<br />\n  redo log 实现事务的 <code>持久性</code>  (<strong>保证数据的完整性</strong>)</p>\n</li>\n</ol>\n<img data-src=\"/interview/MySQL/bbd9b47cd66648cd99c3ce54090ba69e.png\" class=\"\" title=\"在这里插入图片描述\">\n<ol start=\"4\">\n<li>\n<p>undo log 版本链是什么？<br />\n在 undo log 日志里，每条数据除了自有的那些字段 (表 id、日志类型、数据页号等等)，其实还会有两个隐藏字段，一个是 trx_id，另一个是 roll_pointer。这个 trx_id 就是最近一次更新的事务 id，roll_pointer 是指向你更新这个事务之前生成的 undo log 数据。</p>\n<p>这里给大家举个例子：<br />\n假设有一个事务 A，插入了一个数据 A，此时的 undo log 数据结构如下：</p>\n <img data-src=\"/interview/MySQL/719f98466ea94f278dd2a4315368c622.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>因为事务 id 是 10，所以这条数据的 trx_id=10。因为是插入数据，所以没有下一个 undo log 数据，roll_pointer 是空的。接着，此时有一个事务 B 需要执行，事务 B 的 id=20，那么执行完之后就会新生成一条 undo log 日志数据，trx_id=20，roll_pointer 就会指向实际的回滚日志，也就是值 A 那条数据。结构如下图所示：</p>\n <img data-src=\"/interview/MySQL/bdbb19325c504296bb8dc40d9ee4bbe9.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>以此类推，在这个多个事务中，每个事务新生成的 undo log 日志数据的 roll_pointer 都会指向前一个 undo log 日志数据，一次行程 undo log 版本链。</p>\n</li>\n</ol>\n<h1 id=\"mvcc详解\"><a class=\"anchor\" href=\"#mvcc详解\">#</a> MVCC 详解</h1>\n<h2 id=\"1mvcc是什么\"><a class=\"anchor\" href=\"#1mvcc是什么\">#</a> 1.MVCC 是什么？</h2>\n<p>MVCC，全称 Multi-Version Concurrency Control，即<strong>多版本并发控制</strong>。MVCC 是一种并发控制的方法，一般在数据库管理系统中，<strong>实现对数据库的并发访问，在编程语言中实现事务内存</strong>。</p>\n<p>它主要是用来处理 mysql 在多线程操作缓存数据时出现的一系列并发问题。</p>\n<h2 id=\"2前置知识点\"><a class=\"anchor\" href=\"#2前置知识点\">#</a> 2. 前置知识点</h2>\n<p>1）什么是脏写、脏读、不可重复读、幻读？</p>\n<p>2）四种隔离级别</p>\n<p>3）undo log 版本链</p>\n<h2 id=\"3基于undo-log多版本链实现的readview机制\"><a class=\"anchor\" href=\"#3基于undo-log多版本链实现的readview机制\">#</a> 3. 基于 undo log 多版本链实现的 ReadView 机制</h2>\n<p>**ReadView (读视图)** 是 “ <code>快照读</code> ”SQL 执行时 MVCC 提取数据的快</p>\n<p><code>照读</code> 就是最普通的 <code>Select</code>  查询 SQL 语句</p>\n<p><code>当前读</code> 指代执行下列语句时进行数据读取的方式</p>\n<ul>\n<li>insert、Updata、Delete、SELECT ... for update 、Select ... lock in share mode</li>\n</ul>\n<p>数据结构：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 四个字段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m_ids<span class=\"token operator\">:</span> 当前活跃的事务编号集合</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>min_trx_id<span class=\"token operator\">:</span> 最小活跃事务编号</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>max_trx_id<span class=\"token operator\">:</span> 预分配事务编号，当前最大事务编号 <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>creator_trx_id<span class=\"token operator\">:</span> ReadView创建者的事务编号</pre></td></tr></table></figure><p>假设 mysql 里有个数据，很早之前就有事务插入了，事务 id 是 20，如下图所示：</p>\n<img data-src=\"/interview/MySQL/4b547c37ce38459d9820df53a4498280.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>此时，有两个事务并发过来执行，分别是事务 A — id=30，要读取这行数据。事务 B — id=35，要修改这行数据。此时事务 A 会做个判断，判断当前行的 trx_id 是否小于 ReadView 中的 min_trx_id。此时发现 30&gt;20, 所以可以得知在事务 A 开启之前，当前行的事务就已经提交了，因此 shiwuA 可以查到这条数据。如下图：</p>\n<img data-src=\"/interview/MySQL/309c8791d98f4006983cf2b28ce46fe7.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>接着事务 B 开始操作，他把初始值修改成了值 B，trx_id 设置为自己的事务 id，也就是 35，同事 roll_pointer 指向了之前生成的 undo log，然后事务 B 提交了。如下图：</p>\n<img data-src=\"/interview/MySQL/154a65588ce143bfadccc19d1c6b6bb5.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>这个时候，事务 A 再查询，就会发现一个问题，事务 A 就会发现 trx_id 变成了 35，那么 trx_id 大于 min_trx_id，同时小于 ReadView 里的 max_trx_id=36。说明这个事务可能是和自己差不多时间开始的，然后就会看下这个 trx_id 是否在 m_ids 中，在 m_ids 中发现了 35 的 id，那么就证明当前的数据是和自己同一时间并发启动的事务然后提交的，所以按道理这条数据不能让他看到，就把这条数据屏蔽掉，然后顺着 roll_pointer 找之前的 undo log 数据，然后就会找到 trx_id=20 的那条数据，小于 min_trx_id，说明这条数据是在事务 A 提交之前就完成的，符合查询条件，就把这条数据给暴露出去。</p>\n<img data-src=\"/interview/MySQL/7ceac4c1b97f4390b50f156d709186c3.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>通过 undo log 多版本链，加上 ReadView 进行判断的机制，就可以让你读取你应该读取哪个版本的值。</p>\n<h2 id=\"4readview机制是如何实现读已提交隔离级别rc隔离级别的\"><a class=\"anchor\" href=\"#4readview机制是如何实现读已提交隔离级别rc隔离级别的\">#</a> 4.ReadView 机制是如何实现读已提交隔离级别（RC 隔离级别）的？</h2>\n<p>首先了解下 RC 隔离级别：是指你事务在运行期间，只要别的事务修改数据并且提交了，你就可以读取到修改之后的数据。（这种情况还是会发生不可重复读和幻读）</p>\n<p>下面我就用画图的形式，来和大家一步一步的讲解实现过程：<br />\n首先假设有个数据，是事务 id=50 之前就插入进去的，现在活跃着两个事务，事务 A — id=60，事务 B  — id=70。如下图：</p>\n<img data-src=\"/interview/MySQL/6d4c34e71d1348dbba3ebc8e6a65d619.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>现在事务 B 将初始值修改成了值 B，此时 trx_id=70，同时会生成一个 undo log 数据。如下图：</p>\n<img data-src=\"/interview/MySQL/66075a6b707e4b96b041df56290b1168.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>此时事务 A 发起查询操作，然后生成一个 ReadView，m_ids=60、70，min_trx_id=60，max_trx_id=71，creator_trx_id=60。如下图：</p>\n<img data-src=\"/interview/MySQL/12cba3301e11446594396a6b906c14b9.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>此时事务 A 发现 trx_id=70，大于 min_trx_id，并且小于 max_trx_id，说明当前事务是和事务 A 同时提交的，但是又因为 trx_id=70，在 m_ids 里，说明当前事务还没有提交。那么根据读已提交隔离级别要求，事务未提交之前是不能查看修改值的，所以这里事务 A 看不到事务 B 的值 B，只能根据 roll_pointer 指向找到上一条 undo log 数据，在做判断，发现 trx_id=50，小于事务 A，说明已经提交完成，所以事务 A 查到的数据是初始值。<br />\n接着，这里我们再将事务 B 提交，那么提交之后，事务 A 再进行查询，此时会发现 m_ids 已经变成了 m_ids=60，那么说明事务 B 已经不再活跃 m_ids 数据中了，说明事务 B 已经提交了，因此事务 A 可以查看到事务 B 的值 B。</p>\n<p><em><strong>这里需要注意一点，读已提交隔离级别中，事务每次执行，都会重新生成一个 ReadView，因为只有这样才能获取到最新的事务 id 数据。</strong></em><br />\n以上就是基于 ReadView 实现的 RC 隔离级别的原理。</p>\n<h2 id=\"5-readview机制是如何实现可重复读隔离级别rr隔离级别的\"><a class=\"anchor\" href=\"#5-readview机制是如何实现可重复读隔离级别rr隔离级别的\">#</a> 5. ReadView 机制是如何实现可重复读隔离级别（RR 隔离级别）的？</h2>\n<p>我们已经了解了基于 ReadView 机制实现 RC 隔离级别的实现原理了，那么应该对 RR 隔离级别的实现原理也有一个大概猜想了，下面我们还是通过画图方式，来了解实现 RR 隔离级别的原理。</p>\n<p>这里注意：RR 隔离级别里，你这个事务 读取一条数据，无论读取多少次，都是一个值，ReadView 也一样，别的事务哪怕事务提交了，也不能看到修改后的值，这样就避免了不可重复读的问题。</p>\n<p>首先假设有个数据，是事务 id=50 之前就插入进去的，现在活跃着两个事务，事务 A — id=60，事务 B — id=70。如下图：</p>\n<img data-src=\"/interview/MySQL/6d4c34e71d1348dbba3ebc8e6a65d619.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>这个时候，事务 A 发起查询操作，这时候会生成一个 ReadView，这是 creator_trx_id=60，m_ids=60、71，min_trx_id=60，max_trx_id=71。如下图：</p>\n<img data-src=\"/interview/MySQL/7fdcbd3c3fd74b2a8b5f419a925b262b.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>这个时候当前数据的 trx_id=50，小于事务 A 的 60，证明当前事务早在事务 A 之前提交了，所以事务 A 可以看到初始值。<br />\n接着就是事务 B 开始执行修改操作，此时 trx_id=70，初始值改为值 B，同时生成一个 undo log，并且事务 B 提交了，也就是说此时事务 B 已经结束了。如下图：</p>\n<img data-src=\"/interview/MySQL/991752fc4da34cf08d9d430509a6e3cb.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>那么此时事务 A 再次进行查询操作，大家说 m_ids 的值是多少呢？答案是 m_ids=60,70。因为在 RR 隔离级别中，ReadView 一旦生成，就不会改变，这个时候，虽然事务 B 已经提交了，但是事务 A 中的 ReadView 里，还是会有 60、70 两个活跃事务 id。那么此时，事务 A 会判断 trx_id 是否大于 60，很明显 70&gt;60，然后再看 m_ids 中是否有 trx_id=70，是有的，所以这时候事务 A 还是认为事务 B 此时还是处于未提交状态，因此不会被允许查看事务 B 的值，他会根据 roll_pointer 找到上一条 undo log 数据，再次判断，50&lt;60, 满足条件，因此事务 A 查到的数据还是初始值。</p>\n<p>大家看到这里是不是就感觉到了一下子就避免了不可重复读的问题呢。<br />\n同理，当有个事务 C 插入一条数据，事务 id=80，然后提交，在事务 A 中查看到的 max_trx_id 还是 71，这里会判读 80&gt;71, 因此事务 A 会知道，当前事务 C 是在事务 A 发起之后才执行的，明显是不能查看他的数据的，因此这里也不会出现幻读的情况。这些都是依托 ReadView 机制实现的。</p>\n<p>到此，如何基于 ReadView 机制实现隔离级别，避免脏读、不可重复读和幻读的情况，这里就全部解释完毕了。</p>\n<h2 id=\"6总结\"><a class=\"anchor\" href=\"#6总结\">#</a> 6. 总结</h2>\n<p><strong>Mysql 实现 MVCC 机制，就是基于 <code>undo log多版本链表</code>  + <code>ReadView机制</code> 来实现的。默认的 RR 隔离级别，也是基于这套机制来实现的，处理避免脏读、不可重复读的问题，还能解决幻读的问题，因此我们一般都默认为 RR 隔离级别就好了。</strong></p>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xUMTFoa2EvYXJ0aWNsZS9kZXRhaWxzLzEyMjI2MDAzND9zcG09MTAwMS4yMDE0LjMwMDEuNTUwMg==\">https://blog.csdn.net/LT11hka/article/details/122260034?spm=1001.2014.3001.5502</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWhMNDExNDc5VC8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT1mMTYyZDVjMjU3NTVlMGQ2YjljYzM1OGI0ZjNlOGU0Zg==\">https://www.bilibili.com/video/BV1hL411479T/?spm_id_from=333.337.search-card.all.click&amp;vd_source=f162d5c25755e0d6b9cc358b4f3e8e4f</span></p>\n</li>\n</ul>\n<h1 id=\"mysql常见的日志有哪些分别起到了什么作用\"><a class=\"anchor\" href=\"#mysql常见的日志有哪些分别起到了什么作用\">#</a> MySQL 常见的日志有哪些，分别起到了什么作用</h1>\n<ol>\n<li>bin log ：数据恢复、主从复制</li>\n</ol>\n<p>MySQL Server 层也有一个日志文件叫做 Binlog ，它可以被所有的存储引擎使用。</p>\n<p>bin log 以事件的形式记录了所有的 DDL 和 DML 语句（因为他记录的是操作而不是数据值），可以用做主从复制和数据恢复</p>\n<ol start=\"2\">\n<li>\n<p>relay log ：中介日志</p>\n</li>\n<li>\n<p>redo log</p>\n<p>记录修改后的值，属于物理日志</p>\n<p>redo log 的大小事固定的，前面的内容会被覆盖，所以不能用于数据回滚 / 数据恢复</p>\n<p>redo log 是 InnoDB 存储引擎实现的，并不是所有引擎都有</p>\n</li>\n<li>\n<p>undo log</p>\n<p>撤销日志，在数据库事务开始之前，MYSQL 会去记录更新前的数据到 undo log 文件中。如果事务回滚或者数据库崩溃时，可以利用 undo log 日志中记录的日志信息进行回退。同时也可以提供多版本并发控制下的读 (MVCC)</p>\n<p>具体查看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xUMTFoa2EvYXJ0aWNsZS9kZXRhaWxzLzEyNTg3MDk4MSVFNCVCQiU4MCVFNCVCOSU4OCVFNiU5OCVBRkJ1ZmZlcg==\">https://blog.csdn.net/LT11hka/article/details/125870981 什么是 Buffer</span> Pool</p>\n</li>\n</ol>\n<img data-src=\"/interview/MySQL/image-20220909103813728.png\" class=\"\" title=\"image-20220909103813728\">\n<h1 id=\"buffer-pool-内存淘汰策略\"><a class=\"anchor\" href=\"#buffer-pool-内存淘汰策略\">#</a> Buffer pool 内存淘汰策略</h1>\n<p>冷热分区的 LRU 策略</p>\n<p>冷热分区比：5:3</p>\n<p>数据一进来先进入到冷区的头部，默认在 1000ms 之后如果再次访问，就会将他放入到热区</p>\n<h1 id=\"什么是hash索引\"><a class=\"anchor\" href=\"#什么是hash索引\">#</a> 什么是 hash 索引</h1>\n<img data-src=\"/interview/MySQL/image-20220909104250912.png\" class=\"\" title=\"image-20220909104250912\">\n<p>不适合做范围查找，innodb 不支持 hash 索引</p>\n<h1 id=\"mysql为什么要用b数做索引\"><a class=\"anchor\" href=\"#mysql为什么要用b数做索引\">#</a> MySQL 为什么要用 B + 数做索引</h1>\n<ol>\n<li>B + 树能显著的减少 IO 次数，提高效率</li>\n<li>B + 树的查询效率更加稳定，因为所有的数据都放在了叶子上</li>\n<li>B + 树能提高范围查询的效率，因为叶子结点指向下一个叶子结点</li>\n</ol>\n<h1 id=\"数据库优化什么是数据库索引有哪些类型\"><a class=\"anchor\" href=\"#数据库优化什么是数据库索引有哪些类型\">#</a> 数据库优化，什么是数据库索引，有哪些类型</h1>\n<p><strong>1、按表列属性分类</strong><br />\n单列索引 (主键索引，唯一索引，普通索引) 和多列索引（组合索引），全文索引</p>\n<ul>\n<li>主键索引</li>\n<li>唯一索引：唯一索引是在一个或多个字段上创建的，但它强制保证每行记录的字段值唯一。</li>\n<li>普通索引：普通索引是最常用的索引，它是在一个或多个字段上创建的，可以加快数据库查询的速度。</li>\n<li>多列索引：组合索引是在多个字段上创建的，可以提高查询的效率。</li>\n<li>全文索引：全文索引是用于文本搜索的特殊索引，它可以提高文本搜索的效率。</li>\n</ul>\n<p><strong>2、按数据结构分类</strong></p>\n<ul>\n<li>1） B+tree 索引<br />\n b+tree 基于平衡二叉树的一种多路平衡查找树，所有记录都按照顺序存放在叶子节点中，各个叶子节点直接通过链表相连。与 b 树不同的是：非叶子节点只存储键值信息。所有叶子节点之间都有一个链指针。数据记录都存放在叶子节点中。</li>\n<li>2）hash 索引<br />\n基于 hash 表结构实现的索引，mysql 中只有 MEMORY/HEAP 和 NDB 存储引擎支持；InnoDB 引擎支持自适应 hash 索引，但是是数据库自身创建使用的，而不能进行人为定义。当二级索引被频繁的访问时，便会自动创建自适应哈希索引；通过 命令 SHOW ENGINE INNODB STATUS 可查看自适应 hash 索引的使用情况；通过 命令 SHOW VARIABLES LIKE ‘% ap% hash_index’ 查看是否打开自适应 hash 索引对比：<br />\n由于 hash 索引是比较其 hash 值，hash 索引只能进行等值查找而不能进行范围查找 hash 索引无法进行排序：原因同上不支持最左匹配原则，复合索引时合并一起计算 hash 值 hash 索引的检索效率很高可以一次定位，但是当发生大量 hash 碰撞的时候，链表变长，hash 索引效率上是不如 b+tree 的由于存在 hash 碰撞的问题，当需要获得总数时候，hash 索引在任何时候都不能避免表扫描</li>\n<li>3）T-tree 索引</li>\n<li>4）R-tree 索引</li>\n</ul>\n<p><strong>3、按存储结构分类</strong></p>\n<ul>\n<li><strong>1）聚簇索引 (聚集索引)</strong><br />\n InnoDB 的聚簇索引实际上是在同一个 BTree 结构中同时存储了<strong>索引和整行数据</strong>，通过该索引查询<strong>可以直接获取查询数据行</strong>。<br />\n聚簇索引不是一种单独的索引类型，而是一种数据的存储方式，聚簇索引的顺序，就是数据在硬盘上的物理顺序。<br />\n在<strong> mysql</strong> 通常聚簇索引是主键的同义词，<strong>每张表只包含一个聚簇索引</strong> (其他数据库不一定)。</li>\n<li><strong>2）非聚集索引 (辅助索引，次级索引，二级索引)</strong><br />\n 非聚集索引在 BTree 的叶子节点中保存了<strong>索引列和主键</strong>。如果查询列不在该索引内，只能查到其主键值，还<strong>需要回表操作查询聚簇索引进行查询</strong>。</li>\n<li><strong>聚簇索引的优点：</strong><br />\n<strong>可以把相关数据保存在一起</strong>，如：实现电子邮箱时，可以根据用户 ID 来聚集数据，这样只需要从磁盘读取少量的数据页就能获取某个用户全部邮件，如果没有使用聚集索引，则每封邮件都可能导致一次磁盘 IO。<br />\n<strong>数据访问更快，聚集索引将索引和数据保存在同一个 btree 中</strong>，因此从聚集索引中获取数据通常比在非聚集索引中查找要快。<br />\n使用覆盖索引扫描的查询可以直接使用页节点中的主键值。</li>\n<li><strong>聚簇索引的缺点：</strong><br />\n聚簇数据最大限度地提高了 IO 密集型应用的性能，但如果数据全部放在内存中，则访问的顺序就没有那么重要了，聚集索引也没有什么优势了<br />\n插入速度严重依赖于插入顺序，按照主键的顺序插入是加载数据到 innodb 表中速度最快的方式，但如果不是按照主键顺序加载数据，那么在加载完成后最好使用 optimize table 命令重新组织一下表<br />\n更新聚集索引列的代价很高，因为会强制 innodb 将每个被更新的行移动到新的位置。<br />\n基于聚集索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能面临页分裂的问题，当行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，这就是一次页分裂操作，页分裂会导致表占用更多的磁盘空间。<br />\n聚集索引可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候。<br />\n二级索引可能比想象的更大，因为在二级索引的叶子节点包含了引用行的主键列。<br />\n二级索引访问需要两次索引查找，而不是一次。</li>\n</ul>\n<h1 id=\"索引的优缺点\"><a class=\"anchor\" href=\"#索引的优缺点\">#</a> 索引的优缺点</h1>\n<p>1、优点：创建索引可以大大提高系统的性能。<br />\n第一、通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。<br />\n第二、可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。<br />\n第三、可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。<br />\n第四、在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。<br />\n第五、通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。<br />\n也许会有人要问：增加索引有如此多的优点，为什么不对表中的每一个列创建一个索引呢？这种想法固然有其合理性，然而也有其片面性。虽然，索引有许多优点， 但是，为表中的每一个列都增加索引，是非常不明智的。</p>\n<p>2、缺点<br />\n第一、创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。<br />\n第二、索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间。如果要建立聚簇索引，那么需要的空间就会更大。<br />\n第三、当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p>\n<h1 id=\"谈一下你对数据库btree的理解\"><a class=\"anchor\" href=\"#谈一下你对数据库btree的理解\">#</a> 谈一下你对数据库 b+tree 的理解</h1>\n<p>Mysql 索引使用的是 B + 树，因为索引是用来加快查询的，而 B + 树通过对数据进行排序所以是可以提高查询速度的，然后通过一个节点中可以存储多个元素，从而可以使得 B + 树的高度不会太高</p>\n<p>在 Mysql 中一个 Innodb 页就是一个 B + 树节点，一个 Innodb 页默认 16kb，所以一般情况下一颗两层的 B + 树可以存 2000 万行左右的数据，然后通过利用 B + 树叶子节点存储了所有数据并且进行了排序，并且叶子节点之间有指针，可以很好的支持全表扫描，范围查找等 SQL 语句</p>\n<p>我们建议不要让 B + 树的层数超过三层，所以当数据了超过 2000W 行的时候就要进行分库分表。</p>\n<h1 id=\"聚集索引和非聚集索引的区别\"><a class=\"anchor\" href=\"#聚集索引和非聚集索引的区别\">#</a> 聚集索引和非聚集索引的区别</h1>\n<ol>\n<li>\n<p>聚集索引：聚集索引是指将索引键值作为表中数据物理存储的顺序，并且只能有一个聚集索引。</p>\n</li>\n<li>\n<p>非聚集索引：非聚集索引不影响表中数据的物理存储顺序，可以有多个非聚集索引，每个索引都包含一个指向表中行的指针。</p>\n</li>\n</ol>\n<h1 id=\"在日常工作中是如何进行数据库优化的\"><a class=\"anchor\" href=\"#在日常工作中是如何进行数据库优化的\">#</a> 在日常工作中是如何进行数据库优化的</h1>\n<ol>\n<li>\n<p>使用正确的索引：为数据库表添加正确的索引可以加快查询速度，提高性能。</p>\n</li>\n<li>\n<p>合理分配内存：为数据库分配合理的内存可以减少磁盘 I/O 操作，提高系统性能。</p>\n</li>\n<li>\n<p>分析查询语句：分析 SQL 查询语句，改写查询语句，可以减少查询时间，提高数据库性能。</p>\n</li>\n<li>\n<p>合理分区：合理分区数据库表可以提高查询性能，减少 I/O 操作，提高系统性能。</p>\n</li>\n<li>\n<p>数据库优化：使用数据库优化工具，如 MySQL 优化器，可以改善数据库性能。</p>\n</li>\n<li>\n<p>合理使用存储过程：使用存储过程可以减少查询次数，提高数据库性能。</p>\n</li>\n</ol>\n<h1 id=\"请列举几个索引失效的场景\"><a class=\"anchor\" href=\"#请列举几个索引失效的场景\">#</a> 请列举几个索引失效的场景</h1>\n<p>(1) like 以 % 开头，索引无效；当 like 前缀没有 %，后缀有 % 时，索引有效。</p>\n<p>(2) or 语句前后没有同时使用索引。当 or 左右查询字段只有一个是索引，该索引失效，只有当 or 左右查询字段均为索引时，才会生效</p>\n<p>(3) 组合索引，不是使用第一列索引，索引失效。</p>\n<p>(4) 数据类型出现隐式转化。如 varchar 不加单引号的话可能会自动转换为 int 型 (用 select 查询时)，使索引无效，产生全表扫描。</p>\n<p>(5) 在索引列上使用 IS NULL 或 IS NOT NULL 操作 (在 where 子句中对字段进行 null 值判断)</p>\n<p>(6) 在索引字段上使用 not，&lt;&gt;，!=。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： key&lt;&gt;0 改为 key&gt;0 or key&lt;0。</p>\n<p>(7) 对索引字段进行计算操作、字段上使用函数。</p>\n<p>(8) 当全表扫描速度比索引速度快时，mysql 会使用全表扫描，此时索引失效。</p>\n<p>索引失效分析工具：</p>\n<p>可以使用 explain 命令加在要分析的 sql 语句前面，在执行结果中查看 key 这一列的值，如果为 NULL，说明没有使用索引。</p>\n<h1 id=\"数据库锁的机制\"><a class=\"anchor\" href=\"#数据库锁的机制\">#</a> 数据库锁的机制</h1>\n<p>**InnoDB 支持行级锁 (row-level locking) 和表级锁，默认为行级锁（偏向于写）** 在 Mysql 中，行级锁并不是直接锁记录，而是锁索引。InnoDB 行锁是通过给索引项加锁实现的，而索引分为主键索引和非主键索引两种</p>\n<p>（1）命中索引才锁行，未命中索引默认锁整个索引，即锁表<br />\n（2）命中主键索引，直接锁主键索引对应的整行<br />\n（3）命中辅助索引，先锁命中的辅助索引，在锁该辅助索引所对应的主键索引</p>\n<p>在实际应用中，要特别注意 InnoDB 行锁的这一特性，不然的话，可能导致大量的锁冲突，从而影响并发性能。<br />\n1、在不通过索引条件查询的时候，InnoDB 的效果就相当于表锁<br />\n 2、当表有多个索引的时候，不同的事务可以使用不同的索引锁定不同的行，另外，不论 是使用主键索引、唯一索引或普通索引，InnoDB 都会使用行锁来对数据加锁。<br />\n3、由于 MySQL 的行锁是针对索引加的锁，不是针对记录加的锁，所以即便你的 sql 语句访问的是不同的记录行，但如果命中的是相同的被锁住的索引键，也还是会出现锁冲突的。<br />\n4、即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同 执行计划的代价来决定的，如果 MySQL 认为全表扫描效率更高，比如对一些很小的表，它 就不会使用索引，这种情况下 InnoDB 将锁住所有行，相当于表锁。因此，在分析锁冲突时，别忘了检查 SQL 的执行计划，以确认是否真正使用了索引</p>\n<p>innodb 的三种行锁算法，三种都是排他锁：<br />\n1、record lock：单个行记录上的锁<br />\n 2、gap lock：间隙锁，锁定一个范围，但不包括记录本身。GAP 锁的目的，是为了防止同一事务的两次当前读，出现幻读的情况。<br />\n3、Next-key lock：等于 Record Lock 结合 Gap Lock，也就说 Next-Key Lock 既锁定记录本身也锁定一个范围，特别需要注意的是，InnoDB 存储引擎还会对辅助索引下一个键值加上 gap lock。对于行查询，innodb 采用的都是 Next-Key Lock，主要目的是解决幻读的问题，以满足相关隔离级别以及恢复和复制的需要。</p>\n<p>Innodb 自动使用间隙锁的条件：<br />\n（1）<strong>必须在 RR 级别下</strong><br />\n（2）<strong>检索条件必须有索引</strong>（没有索引的话，mysql 会全表扫描，那样会锁定整张表所有的记录，包括不存在的记录，此时其他事务不能修改不能删除不能添加）</p>\n<p>死锁现象：<br />\n死锁就是两个或多个事务在未结束的情况下，用排他锁互相锁死的一种特殊情况，下面有两种死锁情况（仅供参考）</p>\n<img data-src=\"/interview/MySQL/20210226170241867.png\" class=\"\" title=\"在这里插入图片描述\">\n<img data-src=\"/interview/MySQL/20210226170250512.png\" class=\"\" title=\"在这里插入图片描述\">\n<p>2、死锁产生的本质原理<br />\n死锁的发生与否，并不在于事务中有多少条 SQL 语句，死锁的关键在于：两个 (或以上) 的 Session 加锁的顺序不一致。而使用本文上面提到的，分析 MySQL 每条 SQL 语句的加锁规则，分析出每条语句的加锁顺序，然后检查多个并发 SQL 间是否存在以相反的顺序加锁的情况，就可以分析出各种潜在的死锁情况，也可以分析出线上死锁发生的原因。</p>\n<p><strong>行锁优化建议：</strong><br />\n通过检查 InnoDB_row_lock 状态变量来分析系统上的行锁的争夺情况，在着手根据状态量来分析改善；<br />\nshow status like ‘innodb_row_lock%’;// 查看行锁的状态<br />\n尽可能让所有数据检索都通过索引来完成， 从而避免无索引行锁升级为表锁<br />\n合理设计索引，尽量缩小锁的范围<br />\n尽可能减少检索条件，避免间隙锁<br />\n尽量控制事务大小，减少锁定资源量和时间长度<br />\n尽可能低级别事务隔离</p>\n<p>悲观锁<br />\n ** 在关系数据库管理系统里，悲观并发控制（又名 “悲观锁”，Pessimistic Concurrency Control，缩写 “PCC”）是一种并发控制的方法。它可以阻止一个事务以影响其他用户的方式来修改数据。** 如果一个事务执行的操作都某行数据应用了锁，那只有当这个事务把锁释放，其他事务才能够执行与该锁冲突的操作。<br />\n悲观并发控制主要用于数据争用激烈的环境，以及发生并发冲突时使用锁保护数据的成本要低于回滚事务的成本的环境中。<br />\n优点：<br />\n悲观并发控制实际上是 “先取锁再访问” 的保守策略，为数据处理的安全提供了保证。</p>\n<p>缺点：<br />\n（a）在效率方面，处理加锁的机制会让数据库产生额外的开销，还有增加产生死锁的机会；<br />\n（b） 在只读型事务处理中由于不会产生冲突，也没必要使用锁，这样做只能增加系统负载；还有会降低了并行性，一个事务如果锁定了某行数据，其他事务就必须等待该事务处理完才可以处理那行数</p>\n<p>乐观锁<br />\n在关系数据库管理系统里，乐观并发控制（又名 “乐观锁”，Optimistic Concurrency Control，缩写 “OCC”）是一种并发控制的方法。它假设多用户并发的事务在处理时不会彼此互相影响，各事务能够在不产生锁的情况下处理各自影响的那部分数据。 相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p>\n<p>在数据库中，乐观锁的实现有两种方式<br />\n 1、使用版本号实现<br />\n每一行数据多一个字段 version，每次更新数据对应版本号 + 1，<br />\n原理：读出数据，将版本号一同读出，之后更新，版本号 + 1，提交数据版本号大于数据库当前版本号，则予以更新，否则认为是过期数据，重新读取数据</p>\n<p>2、使用时间戳实现<br />\n每一行数据多一个字段 time<br />\n 原理：读出数据，将时间戳一同读出，之后更新，提交数据时间戳等于数据库当前时间戳，则予以更新，否则认为是过期数据，重新读取数据</p>\n<p>优点与不足<br />\n乐观并发控制相信事务之间的数据竞争 (data race) 的概率是比较小的，因此尽可能直接做下去，直到提交的时候才去锁定，所以不会产生任何锁和死锁。</p>\n<p>如何选择<br />\n在乐观锁与悲观锁的选择上面，主要看下两者的区别以及适用场景就可以了：<br />\n1、乐观锁并未真正加锁，效率高。一旦锁的粒度掌握不好，更新失败的概率就会比较高，容易发生业务失败。<br />\n2、悲观锁依赖数据库锁，效率低。更新失败的概率比较低。随着互联网三高架构（高并发、高性能、高可用）的提出，悲观锁已经越来越少的被使用到生产环境中了，尤其是并发量比较大的业务场景。</p>\n<h1 id=\"在遇到死锁情况如何处理\"><a class=\"anchor\" href=\"#在遇到死锁情况如何处理\">#</a> 在遇到死锁情况如何处理</h1>\n<p>死锁的发生与否，并不在于事务中有多少条 SQL 语句，死锁的关键在于：两个 (或以上) 的 Session 加锁的顺序不一致。分析 MySQL 每条 SQL 语句的加锁规则，分析出每条语句的加锁顺序，然后检查多个并发 SQL 间是否存在以相反的顺序加锁的情况，就可以分析出各种潜在的死锁情况，也可以分析出线上死锁发生的原因。</p>\n<ol>\n<li>\n<p>使用数据库调试工具检查死锁，查看死锁发生的原因。</p>\n</li>\n<li>\n<p>尝试重新调整数据库的索引结构，减少数据库的查询和更新操作，以减少死锁的发生。</p>\n</li>\n<li>\n<p>将数据库的事务隔离级别调整为更低的级别，以减少死锁的发生。</p>\n</li>\n<li>\n<p>将数据库的事务超时时间设置得更短，以便及时中断发生死锁的事务。</p>\n</li>\n<li>\n<p>将死锁发生的数据表拆分成多个表，以减少数据表上的竞争。</p>\n</li>\n</ol>\n<h1 id=\"mysql和oracle的区别\"><a class=\"anchor\" href=\"#mysql和oracle的区别\">#</a> mysql 和 oracle 的区别</h1>\n<h1 id=\"数据库的根本特点\"><a class=\"anchor\" href=\"#数据库的根本特点\">#</a> 数据库的根本特点</h1>\n<p>1、数据结构化 数据库系统实现了整体数据的结构化，这是数据库的最主要的特征之一</p>\n<p>2、数据的共享性高，冗余度低，易扩充 因为数据是面向整体的，所以数据可以被多个用户、多个应用程序共享使用</p>\n<p>3、数据独立性高 数据独立性包括数据的物理独立性和逻辑独立性。</p>\n<p>4、数据由 DBMS 统一管理和控制 数据库的共享是并发的 (concurrency) 共享，即多个用户可以同时存取数据库中的数据，甚至可以同时存取数据库中的同一个数据；</p>\n<h1 id=\"数据库中数据共享是指\"><a class=\"anchor\" href=\"#数据库中数据共享是指\">#</a> 数据库中数据共享是指</h1>\n<p>多个应用、多种语言、多个用户共享数据</p>\n<h1 id=\"数据库中产生数据不一致\"><a class=\"anchor\" href=\"#数据库中产生数据不一致\">#</a> 数据库中产生数据不一致</h1>\n<p>1. 并发控制不当</p>\n<p>2. 数据冗余</p>\n<p>3. 各种故障，错误</p>\n<p>第一种往往是由于重复存放的数据未能进行一致性更新造成的</p>\n<p>第二种情况是由于多用户共享数据库，而更新操作未能保持同步进行引起的</p>\n<p>第三种是由于某种原因（硬件故障或软件故障等）而造成数据丢失或数据损坏等</p>\n<h1 id=\"运算\"><a class=\"anchor\" href=\"#运算\">#</a> 运算</h1>\n<img data-src=\"/interview/MySQL/c484ce59eba713b93d75a1381901dabe.png\" class=\"\" title=\"img\">\n<img data-src=\"/interview/MySQL/9606dddddf13fb7dafa3119aa768e7a4.png\" class=\"\" title=\"数据库之运算符详解_数据库_18\">\n<h2 id=\"运算优先级\"><a class=\"anchor\" href=\"#运算优先级\">#</a> 运算优先级</h2>\n<img data-src=\"/interview/MySQL/2b23723e1f54716522beeb85047554c2.png\" class=\"\" title=\"数据库之运算符详解_mysql_23\">\n<h1 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h1>\n<ol>\n<li>\n<p>MySQL 索引使用有哪些注意事项呢？</p>\n</li>\n<li>\n<p>MysQL 遇到过死锁问题吗，你是如何解决的？</p>\n</li>\n<li>\n<p>日常工作中你是怎么优化 SQL 的？</p>\n</li>\n<li>\n<p>说说分库与分表的设计</p>\n</li>\n<li>\n<p>InnoDB 与 MylSAM 的区别</p>\n</li>\n<li>\n<p>数据库索引的原理，为什么要用 B + 树，为什么不用二叉树？</p>\n</li>\n<li>\n<p>聚集索引与非聚集索引的区别</p>\n</li>\n<li>\n<p>limit 1000000 加载很慢的话，你是怎么解决的呢？</p>\n<p><strong>方案一</strong>：如果 id 是连续的，可以这样，返回上次查询的最大记录 (偏移量)，再往下 limit</p>\n<p>select id，name from employee where id&gt;1000000 limit 10.</p>\n<p><strong>方案二</strong>：在业务允许的情况下限制页数：</p>\n<p>建议跟业务讨论，有没有必要查这么后的分页啦。因为绝大多数用户都不会往后翻太多页。</p>\n<p><strong>方案三</strong>：order by + 索引（id 为索引）</p>\n<p>select id，name from employee order by id limit 1000000，10</p>\n<p><strong>方案四</strong>：利用延迟关联或者子查询优化超多分页场景。（先快速定位需要获取的 id 段，然后再关联）</p>\n<p>SELECT a.* FROM employee a, (select id from employee where 条件 LIMIT 1000000,10) b where <span class=\"exturl\" data-url=\"aHR0cDovL2EuaWQ9Yi5pZA==\">a.id=b.id</span></p>\n</li>\n<li>\n<p>如何选择合适的分布式主键方案呢？</p>\n</li>\n<li>\n<p>事务的隔离级别有哪些？MySQL 的默认隔离级别是什么？</p>\n</li>\n<li>\n<p>什么是幻读，脏读，不可重复读呢？</p>\n</li>\n<li>\n<p>在高并发情况下，如何做到安全的修改同一行数据？</p>\n</li>\n<li>\n<p>数据库的乐观锁和悲观锁。</p>\n</li>\n<li>\n<p>select for update 有什么含义，会锁表还是锁行还是其他。</p>\n<p>select 查询语句是不会加锁的，但是 select …for update<strong> 除了有查询的作用外，还会加锁呢，而且它是悲观锁，排他锁。</strong></p>\n<p>那么它加的是行锁还是表锁，这就要看是不是用了索引 / 主键。</p>\n<p><strong>没用索引 / 主键的话就是表锁，否则就是是行锁</strong>。</p>\n</li>\n<li>\n<p>MySQL 事务得四大特性以及实现原理</p>\n</li>\n<li>\n<p>如果某个表有近千万数据，CRUD 比较慢，如何优化</p>\n</li>\n<li>\n<p>如何写 sql 能够有效的使用到复合索引。</p>\n</li>\n<li>\n<p>mysql 中 in 和 exists 的区别。</p>\n<ul>\n<li>子查询使用 exists，会先进行主查询，将查询到的每行数据循环带入子查询校验是否存在，过滤出整体的返回数据；子查询使用 in，会先进行子查询获取结果集，然后主查询匹配子查询的结果集，返回数据</li>\n<li>外表内表相对大小情况不一样时，查询效率不一样：两表大小相当，in 和 exists 差别不大；内表大，用 exists 效率较高；内表小，用 in 效率较高。</li>\n<li>不管外表与内表的大小，not exists 的效率一般要高于 not in，跟子查询的索引访问类型有关。</li>\n</ul>\n<ol>\n<li>\n<p>IN 和 EXISTS 都可以用来检测一个值是否存在于一个子查询中，但它们之间有一些重要的区别：</p>\n</li>\n<li>\n<p>IN 操作符比较的是值，而 EXISTS 操作符比较的是整个子查询的结果。</p>\n</li>\n<li>\n<p>IN 操作符只能比较一列值，而 EXISTS 操作符可以比较多列值。</p>\n</li>\n<li>\n<p>IN 操作符不能使用带有 “NOT” 的条件，而 EXISTS 操作符可以使用带有 “NOT” 的条件。</p>\n</li>\n<li>\n<p>IN 操作符的效率比 EXISTS 操作符要低，因为它必须比较每一行，而 EXISTS 操作符只检查是否存在至少一行满足条件。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>数据库自增主键可能遇到什么问题。</p>\n</li>\n<li>\n<p>MVCC 熟悉吗，它的底层原理？</p>\n</li>\n<li>\n<p>数据库中间件了解过吗，sharding jdbc，mycat?</p>\n</li>\n<li>\n<p>MYSQL 的主从延迟，你怎么解决？</p>\n<p>配合 semi-sync 半同步复制；<br />\n一主多从，分摊从库压力；<br />\n强制走主库方案（强一致性）；<br />\nsleep 方案：主库更新后，读从库之前先 sleep 一下；<br />\n判断主备无延迟方案（例如判断 seconds_behind_master 参数是否已经等于 0、对比位点）；<br />\n并行复制 — 解决从库复制延迟的问题；<br />\n这里主要介绍我在项目中使用的几种方案，分别是半同步复制、实时性操作强制走主库、并行复制。</p>\n<p>参考资料：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81NTQ5NjcxOC9hcnRpY2xlL2RldGFpbHMvMTI2NzM5MTEx\">https://blog.csdn.net/weixin_55496718/article/details/126739111</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodWlnZTIwMTMvYXJ0aWNsZS9kZXRhaWxzLzEyODU1NzMyMA==\">https://blog.csdn.net/chuige2013/article/details/128557320</span></li>\n</ul>\n</li>\n<li>\n<p>说一下大表查询的优化方案</p>\n</li>\n<li>\n<p>什么是数据库连接池？为什么需要数据库连接池呢？</p>\n<p>数据库连接池（Database Connection Pooling）在程序初始化时创建一定数量的数据库连接对象并将其保存在一块内存区中，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个；释放空闲时间超过最大空闲时间的数据库连接以避免因为没有释放数据库连接而引起的数据库连接遗漏。</p>\n<p>​     即在程序初始化的时候创建一定数量的数据库连接，用完可以放回去，下一个在接着用，通过配置连接池的参数来控制连接池中的初始连接数、最小连接、最大连接、最大空闲时间这些参数保证访问数据库的数量在一定可控制的范围类，防止系统崩溃，使用户的体验好</p>\n<p><strong>为什么使用数据库连接池？（形象的说就是用了可以放回去给别人用，大家共享）</strong></p>\n<p>数据库连接是一种关键、有限且昂贵的资源，创建和释放数据库连接是一个很耗时的操作，频繁地进行这样的操作将占用大量的性能开销，进而导致网站的响应速度下降，严重的时候可能导致服务器崩溃；数据库连接池可以节省系统许多开销。</p>\n</li>\n<li>\n<p>一条 SQL 语句在 MySQL 中如何执行的？</p>\n<p>from、where、select、group by having 、order by 、limit</p>\n<p>可以将 SQL 语句执行分为两种种情况<br />\n<strong> 1、查询语句</strong></p>\n<blockquote>\n<p>select * from student where ssex=' 男 ' and classid=1;</p>\n</blockquote>\n<ul>\n<li>先去检查语句是否有权限，如果没有权限，就会返回错误信息，如果有权限，就会西安查缓存查询，如果这条 sql 语句为 key 在缓存中查询有结果，则返回。</li>\n<li>通过分析器进行词法分析，提取 sql 语句的关键元素。比如上面的语句是 select，提取关键字，表名 student，条件 ssex = 男，classid=1.</li>\n<li>然后去判断 sql 语句是否有语法错误，提取的关键字是否有错误。没有就执行下一步</li>\n<li>优化器确定优化方案：查询是男的学生；查询班级编号为 1 的学生</li>\n<li>优化器会根据自己的判断去选择一个自己认为最好的方案去执行</li>\n<li>进行权限验证</li>\n</ul>\n<p><strong>2、增删改</strong></p>\n<blockquote>\n<p>update student set ssex=' 女 ' where classid=1</p>\n</blockquote>\n<ul>\n<li>先去查询一般这个数据，如果有缓存的话也是会用到缓存</li>\n<li>然后拿到查询的语句，把性别改为女，然后去调用引擎 api 接口，写入修改的数据，存储引擎 innodb 把数据保存在内存中，写入日志中，告诉执行器执行</li>\n<li>执行器执行，提交事务</li>\n</ul>\n</li>\n<li>\n<p>innodb 引擎中的索引策略了解过吗</p>\n<p>InnoDB 引擎中的索引策略是一种索引优化技术，它通过分析表中的数据和索引结构，来调整索引结构，以最大程度地提高查询效率。它可以帮助数据库管理员改善查询性能，提高查询速度，减少索引大小，从而节省空间。InnoDB 引擎中的索引策略主要有以下几种：</p>\n<ol>\n<li>\n<p>选择最佳索引：这种索引策略会选择最佳的索引来满足查询的要求，以便最大限度地提高查询性能。</p>\n</li>\n<li>\n<p>索引合并：这种索引策略会将多个索引合并成一个索引，以减少索引大小，提高查询性能。</p>\n</li>\n<li>\n<p>索引重建：这种索引策略会定期重建表中的索引，以避免索引碎片，提高查询性能。</p>\n</li>\n<li>\n<p>索引优化：这种索引策略会根据查询的频率和数据的变化情况，调整索引的结构，以提高查询性能。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>一条 SQL 执行时间过长如何优化</p>\n</li>\n<li>\n<p>MYSQL 数据库服务器性能分析的方法命令有哪些？</p>\n</li>\n<li>\n<p>Blob 和 text 有什么区别？</p>\n<p>Blob 和 text 是两种不同的对象类型，用于表示二进制数据。</p>\n<p>Blob 是一种<strong>不可变的原始数据类型</strong>，可以表示任意大小的二进制数据，但是不能直接操作。它可以用于存储图像，视频，文档等文件类型。</p>\n<p>Text 是一种<strong>可变的原始数据类型</strong>，可以表示字符串，可以直接操作。它可以用于存储文本，网页，JSON 等文件类型。</p>\n</li>\n<li>\n<p>mysql 里记录货币用什么字段类型比较好？</p>\n<p>MySQL 中最常用的字段类型来记录货币是 DECIMAL（精度）或 NUMERIC（精度）类型。DECIMAL（精度）和 NUMERIC（精度）类型允许您指定小数点后的位数，以便更准确地表示货币值。</p>\n</li>\n<li>\n<p>Mysql 中有哪几种锁，列举一下？</p>\n</li>\n<li>\n<p>Hash 索引和 B + 树区别是什么？你在设计索引是怎么抉择的？</p>\n</li>\n<li>\n<p>mysql 的内连接、左连接、右连接有什么区别？</p>\n</li>\n<li>\n<p>说说 MySQL 的基础架构图</p>\n</li>\n<li>\n<p>什么是内连接、外连接、交叉连接、笛卡尔积呢？</p>\n</li>\n<li>\n<p>说一下数据库的三大范式</p>\n</li>\n<li>\n<p>Mysql 的 binlog 有几种录入格式？分别有什么区别？</p>\n<p>1、Row-based 格式：这种格式下，MySQL 会记录每一行的变更，比如更新前后的值，插入前后的值，删除前后的值等，可以详细描述每一次变更。</p>\n<p>2、Statement-based 格式：这种格式下，MySQL 只会记录 SQL 语句本身，不会记录每一行的变更，只能描述变更的范围，比如更新了几行，插入了几行，删除了几行等。</p>\n<p><strong>区别</strong>：</p>\n<p>Row-based 格式比 Statement-based 格式更加详细，但是会占用更多的空间，Statement-based 格式比 Row-based 格式占用的空间少，但是不能描述每一行的变更。</p>\n</li>\n<li>\n<p>InnoDB 引擎的 4 大特性，了解过吗</p>\n<p>1. 事务安全：InnoDB 引擎支持 ACID 事务，保证了事务的原子性、一致性、隔离性和持久性。</p>\n<p>2. 行级锁：InnoDB 引擎支持行级锁，可以实现多用户并发访问，提高系统的性能。</p>\n<p>3. 外键约束：InnoDB 引擎支持外键约束，可以防止数据的一致性和完整性。</p>\n<p>4. 崩溃恢复能力：InnoDB 引擎支持崩溃恢复能力，可以恢复在数据库崩溃时发生的数据损失。</p>\n</li>\n<li>\n<p>索引有哪些优缺点？索引有哪几种类型？</p>\n</li>\n<li>\n<p>创建索引有什么原则呢？</p>\n</li>\n<li>\n<p>创建索引的三种方式</p>\n</li>\n<li>\n<p>百万级别或以上的数据，你是如何删除的？</p>\n</li>\n<li>\n<p>什么是最左前缀原则？什么是最左匹配原则？</p>\n</li>\n<li>\n<p>B 树和 B + 树的区别，数据库为什么使用 B + 树而不是 B 树？</p>\n</li>\n<li>\n<p>覆盖索引、回表等这些，了解过吗？</p>\n<p>1、 覆盖索引： 查询列要被所建的索引覆盖，不必从数据表中读取，换句话说查询列要被所使用的索引覆盖。</p>\n<p>2、 回表：二级索引无法直接查询所有列的数据，所以通过二级索引查询到聚簇索引后，再查询到想要的数据，这种通过二级索引查询出来的过程，就叫做回表。</p>\n</li>\n<li>\n<p>非聚簇索引一定会回表查询吗？</p>\n</li>\n<li>\n<p>联合索引是什么？为什么需要注意联合索引中的顺序？</p>\n</li>\n<li>\n<p>数据库隔离级别与锁的关系</p>\n</li>\n<li>\n<p>聊聊 InnoDb 的锁，什么是死锁？怎么解决？</p>\n</li>\n<li>\n<p>count (1)、count (*) 与 count (列名) 的区别？</p>\n<p>1、count (*) 包含了所有的列，相当于行数，在统计结果的时候，不会忽略列值为空的情况；<br />\n2、count (1) 在统计结果的时候也不会忽略列值为空的情况（即某个列为空时，仍进行统计）；<br />\n3、count (列名) 在统计的时候会忽略列名为空（null）的情况（即某个列为空时，不统计）；</p>\n<p><strong>列名要是为主键的话，count (列名) 会比 count (1) 快，反之 count (1) 快；</strong></p>\n</li>\n<li>\n<p>什么是存储过程？有哪些优缺点？</p>\n</li>\n<li>\n<p>SQL 约束有哪几种呢？</p>\n<ol>\n<li>主键约束 (唯一约束 + 非空约束)</li>\n<li>外键约束</li>\n<li>唯一约束 (允许一行数据为空)</li>\n<li>默认值约束</li>\n<li>检查约束</li>\n<li>非空约束</li>\n</ol>\n</li>\n<li>\n<p>char 和 varchar 的区别</p>\n<p>|            | char                                    | varchar                                   |<br />\n| ---------- | --------------------------------------- | ----------------------------------------- |<br />\n| 长度       | 定长，长度固定                          | 不定长，长度可变                          |<br />\n| 填充       | &lt; 定长 ，用 <code>空格</code> 填充                   | 不填充                                    |<br />\n| 存储       | 长度固定，速度快，空间大<br/>空间换时间 | 长度不固定，速度慢，空间小<br/>时间换空间 |<br />\n| 最大字符量 | 255                                     | 65532                                     |</p>\n<p>总之，结合<strong>性能角度（char 更快）<strong>和</strong>节省磁盘空间角度（varchar 更小）</strong>，具体情况还需具体来设计数据库才是妥当的做法。</p>\n</li>\n<li>\n<p>mysql 中 int (20)、char (20)、varchar (20) 的区别</p>\n<p>int (20) 表示字段是 int 类型，显示长度是 20</p>\n<p>char (20) 表示字段是固定长度字符串，长度为 20</p>\n<p>varchar (20) 表示字段是可变长度字符串，长度为 20</p>\n</li>\n<li>\n<p>drop、delete 与 truncate 的区别</p>\n</li>\n<li>\n<p>UNION 与 UNION ALL 的区别？</p>\n</li>\n<li>\n<p>SQL 的生命周期？</p>\n<p>// 一条 SQL 由客户端发出后，经过连接和验证，发送到服务器，由服务器派发给线程处理<br />\n 1. 应用服务器与数据库服务器建立一个连接（tcp/ip 连接，GLP 协议）<br />\n2. 数据库进程拿到请求 sql<br />\n3. 解析并生成执行计划，执行（解析优化过程）<br />\n4. 读取数据到内存并进行逻辑处理<br />\n 5. 通过步骤一的连接，发送结果到客户端<br />\n 6. 关掉连接，释放资源</p>\n</li>\n<li>\n<p>一条 Sql 的执行顺序？</p>\n</li>\n<li>\n<p>关心过业务系统里面的 sql 耗时吗？统计过慢查询吗？对慢查询都怎么优化过？</p>\n</li>\n<li>\n<p>主键使用自增 ID 还是 UUID，为什么？mysql 自增主键用完了怎么办？</p>\n<blockquote>\n<p>最好是用<strong>自增主键</strong>，主要是以下两个原因：</p>\n</blockquote>\n<ol>\n<li>\n<p>如果表使用自增主键，那么每次插入新的记录，记录就会顺序添加到当前索引节点的后续位置，当一页写满，就会自动开辟一个新的页。</p>\n</li>\n<li>\n<p>如果使用非自增主键 (如 uuid)，由于每次插入主键的值近似于随机，因此每次新记录都要被插到索引页的随机某个位置，此时 MySQL 为了将新记录插到合适位置而移动数据，甚至目标页面可能已经被回写到磁盘上而从缓存中清掉，此时又要从磁盘上读回来，这增加了很多开销，同时频繁的移动、分页操作造成索引碎片，得到了不够紧凑的索引结构，后续不得不通过 OPTIMIZE TABLE 来重建表并优化填充页面。</p>\n</li>\n</ol>\n<p>不过，也不是所有的场景下都得使用自增主键，可能场景下，主键必须自己生成，不在乎那些性能的开销。那也没有问题。</p>\n<blockquote>\n<p>如果自增主键用完了，如何解决？</p>\n</blockquote>\n<p>MySQL 的主键策略：id 自增值达到上限以后，再申请下一个 id 时，仍然是最大值。</p>\n <img data-src=\"/interview/MySQL/ff995972a76484c6d2094a4e110f47db.png\" class=\"\" title=\"ff995972a76484c6d2094a4e110f47db.png\">\n<p>将 Int 类型改为 BigInt 类型，BigInt 的范围如下：</p>\n <img data-src=\"/interview/MySQL/f950e082bed6fc1679122061fe989682.png\" class=\"\" title=\"f950e082bed6fc1679122061fe989682.png\">\n<p>bigint 也不满足我的需要怎么办呢？</p>\n<p>可以使用雪花算法生成的 id 做主键，由于其也是大致递增的，对性能也不会产生影响，只需要由 bigint 改成更大范围的 decimal 就行。</p>\n</li>\n<li>\n<p>MySQL 数据库 cpu 飙升的话，要怎么处理呢？</p>\n</li>\n<li>\n<p>读写分离常见方案？</p>\n</li>\n<li>\n<p>MySQL 的复制原理以及流程</p>\n</li>\n<li>\n<p>Innodb 的事务实现原理？</p>\n</li>\n<li>\n<p>谈谈 MySQL 的 Explain</p>\n</li>\n<li>\n<p>Innodb 的事务与日志的实现方式</p>\n</li>\n<li>\n<p>你们数据库是否支持 emoji 表情存储，如果不支持，如何操作？</p>\n</li>\n<li>\n<p>一个 6 亿的表 a，一个 3 亿的表 b，通过外间 tid 关联，你如何最快的查询出满足条件的第 50000 到第 50200 中的这 200 条数据记录。</p>\n</li>\n<li>\n<p>Mysql 一条 SOL 加锁分析</p>\n</li>\n<li>\n<p>回表问题和覆盖索引</p>\n</li>\n<li>\n<p>MySQL 索引</p>\n</li>\n<li>\n<p>回表问题和覆盖索引</p>\n</li>\n<li>\n<p>双写一致性</p>\n</li>\n<li>\n<p>undo 、redo、binlog</p>\n</li>\n<li>\n<p>Hash 索引和 B + 树的区别是什么？</p>\n<ol>\n<li>B + 树可以进行范围查询，Hash 索引不能。</li>\n<li>B + 树支持联合索引的最左侧原则，Hash 索引不支持。B + 树支持 order by 排序，Hash 索引不支持。</li>\n<li>Hash 索引在等值查询上比 B + 树效率更高。</li>\n<li>B + 树使用 like 进行模糊查询的时候，like 后面（比如 % 开头) 的话可以起到优化的作用，Hash 索引根本无法进行模糊查询</li>\n</ol>\n<img data-src=\"MySQL/image-20230124130116883.png\" alt=\"image-20230124130116883\" style=\"zoom:150%;\" />\n<p>Mysql 逻辑架构图主要分三层:</p>\n<p>第一层负责连接处理，授权认证，安全等等</p>\n<p>第二层负责编译并优化 SQL</p>\n<p>第三层是存储引擎。</p>\n</li>\n</ol>\n<img data-src=\"MySQL/image-20230124125910848.png\" alt=\"image-20230124125910848\" style=\"zoom:150%;\" />\n<p>主从复制分了五个步骤进行</p>\n<ol>\n<li>\n<p>主库的更新事件 (update、insert、 delete) 被写到 binlog</p>\n</li>\n<li>\n<p>从库发起连接，连接到主库。</p>\n</li>\n<li>\n<p>此时主库创建一个 binlog dump thread，把 binlog 的内容发送到从库。</p>\n</li>\n<li>\n<p>从库启动之后，创建一个 I/O 线程，读取主库传过来的 binlog 内容并写入到 relay log</p>\n</li>\n<li>\n<p>还会创建一个 SQL 线程，从 relay log 里面读取内容，从 Exec_Master_Log_Pos 位置开始执行读取到的更新事件，将更新内容写入到 slave 的 db</p>\n</li>\n<li></li>\n<li></li>\n</ol>\n<h2 id=\"未完成\"><a class=\"anchor\" href=\"#未完成\">#</a> 未完成</h2>\n<h1 id=\"未完成-2\"><a class=\"anchor\" href=\"#未完成-2\">#</a> —————————— 未完成</h1>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                ".面试题",
                "突击版 复习版"
            ]
        },
        {
            "id": "https://eth168.top/tools/XShell-tool/",
            "url": "https://eth168.top/tools/XShell-tool/",
            "title": "XShell",
            "date_published": "2023-02-27T06:12:51.949Z",
            "content_html": "<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<h2 id=\"配色\"><a class=\"anchor\" href=\"#配色\">#</a> 配色</h2>\n<blockquote>\n<p>所有资源都在网盘和仓库里面</p>\n</blockquote>\n<h4 id=\"zk1\"><a class=\"anchor\" href=\"#zk1\">#</a> zk1</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801173236598.png\" class=\"\">\n<h4 id=\"solarized-dark\"><a class=\"anchor\" href=\"#solarized-dark\">#</a> Solarized Dark</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801173040826.png\" class=\"\">\n<h4 id=\"solarizeddarkmodify\"><a class=\"anchor\" href=\"#solarizeddarkmodify\">#</a> SolarizedDarkModify</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801173129171.png\" class=\"\">\n<h4 id=\"isayme\"><a class=\"anchor\" href=\"#isayme\">#</a> isayme</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801172922893.png\" class=\"\">\n<h4 id=\"ubuntu\"><a class=\"anchor\" href=\"#ubuntu\">#</a> ubuntu</h4>\n<img data-src=\"/tools/XShell-tool/image-20220801173207482.png\" class=\"\">\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"6db178ba46c8af8f6a6f\",\"clientSecret\":\"90f730e5956024596558df00975cd8eae28cae3d\",\"repo\":\"bk-comment01\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":false,\"language\":\"zh-CN\",\"proxy\":\"https://gitalk-comments.netlify.app/github_access_token\",\"perPage\":15};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "工具软件安装",
                "工具软件安装 - Terminal"
            ]
        },
        {
            "id": "https://eth168.top/tools/Zookeeper-tool/",
            "url": "https://eth168.top/tools/Zookeeper-tool/",
            "title": "Zookeeper",
            "date_published": "2023-02-27T06:12:51.949Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"232261e8e73aeeafd9e33b6bfe8fd5f9c0f7d9c1579c0168fceae6b0f1b4b647\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">这是一篇加密文章，请输入密码，查看文章。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "工具软件安装",
                "工具软件安装"
            ]
        },
        {
            "id": "https://eth168.top/tools/Tomcat-tool/",
            "url": "https://eth168.top/tools/Tomcat-tool/",
            "title": "Tomcat",
            "date_published": "2023-02-27T06:12:51.939Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"e58a6d176c995cf26fd72c72f661e204758584333e5f11cc89169f8b950e939b\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">这是一篇加密文章，请输入密码，查看文章。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "工具软件安装",
                "工具软件安装"
            ]
        },
        {
            "id": "https://eth168.top/tools/Solr-tool/",
            "url": "https://eth168.top/tools/Solr-tool/",
            "title": "Solr",
            "date_published": "2023-02-27T06:12:51.939Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"719ea8caaf11958b0a35a79ca041e6fd266467181df513eda0a3e9f1ffdcd19d\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">这是一篇加密文章，请输入密码，查看文章。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "工具软件安装",
                "工具软件安装"
            ]
        },
        {
            "id": "https://eth168.top/tools/redis-tool/",
            "url": "https://eth168.top/tools/redis-tool/",
            "title": "redis",
            "date_published": "2023-02-27T06:12:51.939Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"8cafc487c8b3d53d6c63e297145ca92d117c7462f9837e3ba203abe05ef54ee8\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">这是一篇加密文章，请输入密码，查看文章。</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "工具软件安装",
                "工具软件安装"
            ]
        }
    ]
}