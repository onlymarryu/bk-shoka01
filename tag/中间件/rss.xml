<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>记录“美食”每刻 • Posts by &#34;中间件&#34; tag</title>
        <link>http://example.com</link>
        <description>记录“美食”每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>分布式</category>
        <category>FastDFS</category>
        <category>Dubbo</category>
        <category>RPC</category>
        <category>JavaSE</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>-JavaSE</category>
        <category>Spring</category>
        <category>框架</category>
        <category>SpringBoot</category>
        <category>ORM</category>
        <category>SpringMVC</category>
        <category>博客</category>
        <category>环境搭建</category>
        <category>SpringSecurity</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/Distribution/RabbitMQ/</guid>
            <title>RabbitMQ</title>
            <link>http://example.com/2022/10/07/Distribution/RabbitMQ/</link>
            <category>分布式</category>
            <category>中间件</category>
            <category>RabbitMQ</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;主要内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要内容&#34;&gt;#&lt;/a&gt; &lt;strong&gt;主要内容&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;AMQP 简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RabbitMQ 简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RabbitMQ 原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Erlang 安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 RabbitMQ&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RabbitMQ 账户管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;交换器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学习目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学习目标&#34;&gt;#&lt;/a&gt; &lt;strong&gt;学习目标&lt;/strong&gt;&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AMQP 简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbmitMQ 简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbitMQ 原理&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Erlang 安装&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安装 RabbitMQ&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RabbitMQ 账户管理&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换器&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一-amqp简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-amqp简介&#34;&gt;#&lt;/a&gt; 一、 &lt;strong&gt;AMQP 简介&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1-amqp是什么&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-amqp是什么&#34;&gt;#&lt;/a&gt; 1 &lt;strong&gt;AMQP 是什么？&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	AMQP (Advanced Message Queuing Protocol, 高级消息队列协议) 是进程之间传递异步消息的网络协议。&lt;/p&gt;
&lt;h3 id=&#34;2-amqp工作过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-amqp工作过程&#34;&gt;#&lt;/a&gt; 2 &lt;strong&gt;AMQP 工作过程&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	发布者 (Publisher) 发布消息 (Message), 经过交换机 (Exchange)，交换机根据路由规则将收到消息分发给交换机绑定的队列 (Queue)，最后 AMQP 代理会将消息投递给订阅了此队列的消费者，或者消费者按照需求自行获取。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-01.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-队列&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-队列&#34;&gt;#&lt;/a&gt; 3 &lt;strong&gt;队列&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	队列是数据结构中概念。数据存储在一个队列中，数据是有顺序的，先进的先出，后进后出。其中一侧负责进数据，另一侧负责出数据。&lt;/p&gt;
&lt;p&gt;MQ（消息队列）很多功能都是基于此队列结构实现的！&lt;/p&gt;
&lt;h3 id=&#34;二-rabbitmq简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-rabbitmq简介&#34;&gt;#&lt;/a&gt; 二、 &lt;strong&gt;RabbitMQ 简介&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1-rabbitmq介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-rabbitmq介绍&#34;&gt;#&lt;/a&gt; 1 &lt;strong&gt;RabbitMQ 介绍&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	RabbitMQ 是由 Erlang 语言编写的基于 AMQP 的消息中间件。而消息中间件作为分布式系统重要组件之一，可以解决应用耦合，异步消息，流量削峰等问题。&lt;/p&gt;
&lt;h5 id=&#34;11-解决应用耦合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-解决应用耦合&#34;&gt;#&lt;/a&gt; 1.1 &lt;strong&gt;解决应用耦合&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;111-不使用mq时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#111-不使用mq时&#34;&gt;#&lt;/a&gt; 1.1.1 &lt;strong&gt;不使用 MQ 时&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-03.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h6 id=&#34;112-使用mq解决耦合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#112-使用mq解决耦合&#34;&gt;#&lt;/a&gt; 1.1.2 &lt;strong&gt;使用 MQ 解决耦合&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-04.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-rabbitmq适用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-rabbitmq适用场景&#34;&gt;#&lt;/a&gt; 2 &lt;strong&gt;RabbitMQ 适用场景&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	排队算法：使用消息队列特性&lt;/p&gt;
&lt;p&gt;​	秒杀活动：使用消息队列特性&lt;/p&gt;
&lt;p&gt;​	消息分发：使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	异步处理：使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	数据同步：使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	处理耗时任务：使用消息异步特性&lt;/p&gt;
&lt;p&gt;​	流量销峰&lt;/p&gt;
&lt;h3 id=&#34;三-rabbitmq原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-rabbitmq原理&#34;&gt;#&lt;/a&gt; 三、 &lt;strong&gt;RabbitMQ 原理&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-05.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1.Message&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;消息。消息是不具名的，它由消息头消息体组成。消息体是不透明的，而消息头则由一系列可选属性组成，这些属性包括：routing-key (路由键)、priority (相对于其他消息的优先权)、delivery-mode (指出消息可能持久性存储) 等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;.&lt;strong&gt;Publisher&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息的生产者。也是一个向交换器发布消息的客户端应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;.&lt;strong&gt;Consumer&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息的消费者。表示一个从消息队列中取得消息的客户端应用程序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4.Exchange&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换器。用来接收生产者发送的消息并将这些消息路由给服务器中的队列。三种常用的交换器类型 1. direct (发布与订阅 完全匹配) 2. fanout (广播) 3. topic (主题，规则匹配)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5.Binding&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;绑定。用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;6.Queue&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;消息队列。用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者链接到这个队列将其取走。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;7.Routing-key&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;路由键。RabbitMQ 决定消息该投递到哪个队列的规则。（也可以理解为队列的名称，路由键是 key，队列是 value）队列通过路由键绑定到交换器。消息发送到 MQ 服务器时，消息将拥有一个路由键，即便是空的，RabbitMQ 也会将其和绑定使用的路由键进行匹配。如果相匹配，消息将会投递到该队列。如果不匹配，消息将会进入黑洞。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;8.Connection&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;链接。指 rabbit 服务器和服务建立的 TCP 链接。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;9.Channel&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;信道。1，Channel 中文叫做信道，是 TCP 里面的虚拟链接。例如：电缆相当于 TCP，信道是一个独立光纤束，一条 TCP 连接上创建多条信道是没有问题的。2，TCP 一旦打开，就会创建 AMQP 信道。3，无论是发布消息、接收消息、订阅队列，这些动作都是通过信道完成的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;10.Virtual Host&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;虚拟主机。表示一批交换器，消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在链接时指定，RabbitMQ 默认的 vhost 是 **/**&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;11.Borker&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表示消息队列服务器实体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;12. 交换器和队列的关系&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;交换器是通过路由键和队列绑定在一起的，如果消息拥有的路由键跟队列和交换器的路由键匹配，那么消息就会被路由到该绑定的队列中。     也就是说，消息到队列的过程中，消息首先会经过交换器，接下来交换器在通过路由键匹配分发消息到具体的队列中。     路由键可以理解为匹配的规则。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;13.RabbitMQ 为什么需要信道？为什么不是 TCP 直接通信？&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1. TCP 的创建和销毁开销特别大。创建需要 3 次握手，销毁需要 4 次分手。2. 如果不用信道，那应用程序就会以 TCP 链接 Rabbit，高峰时每秒成千上万条链接会造成资源巨大的浪费，而且操作系统每秒处理 TCP 链接数也是有限制的，必定造成性能瓶颈。3. 信道的原理是一条线程一条通道，多条线程多条通道同用一条 TCP 链接。一条 TCP 链接可以容纳无限的信道，即使每秒成千上万的请求也不会成为性能的瓶颈。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;四-erlang安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-erlang安装&#34;&gt;#&lt;/a&gt; 四、 &lt;strong&gt;Erlang 安装&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	RabbitMQ 是使用 Erlang 语言编写的，所以需要先配置 Erlang&lt;/p&gt;
&lt;h4 id=&#34;1-修改主机名&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-修改主机名&#34;&gt;#&lt;/a&gt; 1 &lt;strong&gt;修改主机名&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	RabbitMQ 是通过主机名进行访问的，必须指定能访问的主机名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  vim /etc/sysconfig/network
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-06.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  vim /etc/hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	新添加了一行，前面为服务器 ip，空格后面添加计算机主机名&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-07.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-安装依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-安装依赖&#34;&gt;#&lt;/a&gt; 2 &lt;strong&gt;安装依赖&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;  yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC unixODBC-devel
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-上传并解压&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-上传并解压&#34;&gt;#&lt;/a&gt; 3 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	上传 otp_src_22.0.tar.gz 到 /usr/local/tmp 目录中，进入目录并解压。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;解压时注意，此压缩包不具有gzip属性，解压参数没有z，只有xf
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  tar xf otp_src_22.0.tar.gz -C /usr/local/tmp
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-配置参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-配置参数&#34;&gt;#&lt;/a&gt; 4 &lt;strong&gt;配置参数&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	先新建 /usr/local/erlang 文件夹，作为安装文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  mkdir -p /usr/local/erlang
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 进入文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd otp_src_22.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 配置参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ./configure --prefix=/usr/local/erlang --with-ssl --enable-threads --enable-smp-support --enable-kernel-poll --enable-hipe --without-javac
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-编译并安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-编译并安装&#34;&gt;#&lt;/a&gt; 5 &lt;strong&gt;编译并安装&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	编译&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  make install
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-修改环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-修改环境变量&#34;&gt;#&lt;/a&gt; 6 &lt;strong&gt;修改环境变量&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	修改 /etc/profile 文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 在文件中添加下面代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/erlang/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	运行文件，让修改内容生效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-查看配置是否成功&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-查看配置是否成功&#34;&gt;#&lt;/a&gt; 7 &lt;strong&gt;查看配置是否成功&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;  erl -version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-08.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;五-安装rabbitmq&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-安装rabbitmq&#34;&gt;#&lt;/a&gt; 五、 &lt;strong&gt;安装 RabbitMQ&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1-上传并解压&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-上传并解压&#34;&gt;#&lt;/a&gt; 1 &lt;strong&gt;上传并解压&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	上传 rabbitmq-server-generic-unix-3.7.18.tar.xz 到 /usr/loca/tmp 中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cd /usr/local/tmp
  tar xf rabbitmq-server-generic-unix-3.7.18.tar.xz
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-复制到local下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-复制到local下&#34;&gt;#&lt;/a&gt; 2 &lt;strong&gt;复制到 local 下&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	复制解压文件到 /usr/local 下，命名为 rabbitmq&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  cp -r rabbitmq_server-3.7.18 /usr/local/rabbitmq
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-配置环境变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-配置环境变量&#34;&gt;#&lt;/a&gt; 3 &lt;strong&gt;配置环境变量&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;  vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	在文件中添加&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	解析文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# source /etc/profile
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-开启web管理插件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-开启web管理插件&#34;&gt;#&lt;/a&gt; 4 &lt;strong&gt;开启 web 管理插件&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	进入 rabbitmq/sbin 目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/rabbitmq/sbin
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;查看插件列表
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmq-plugins list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;生效管理插件
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmq-plugins enable rabbitmq_management
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-后台运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-后台运行&#34;&gt;#&lt;/a&gt; 5 &lt;strong&gt;后台运行&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	启动 rabbitmq。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmq-server -detached
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	停止命令，如果无法停止，使用 kill -9 进程号进行关闭&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmqctl stop_app
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-查看web管理界面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-查看web管理界面&#34;&gt;#&lt;/a&gt; 6 &lt;strong&gt;查看 web 管理界面&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	默认可以在安装 rabbitmq 的电脑上通过用户名：guest 密码 guest 进行访问 web 管理界面&lt;/p&gt;
&lt;p&gt;​	端口号：15672（放行端口，或关闭防火墙）&lt;/p&gt;
&lt;p&gt;​	在虚拟机浏览器中输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDoxNTY3Mg==&#34;&gt;http://localhost:15672&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;六-rabbitmq账户管理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#六-rabbitmq账户管理&#34;&gt;#&lt;/a&gt; 六、 &lt;strong&gt;RabbitMq 账户管理&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;1-创建账户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-创建账户&#34;&gt;#&lt;/a&gt; 1 &lt;strong&gt;创建账户&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	语法：./rabbitmqctl add_user username password&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/rabbitmq/sbin
# ./rabbitmqctl add_user mashibing mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-给用户授予管理员角色&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-给用户授予管理员角色&#34;&gt;#&lt;/a&gt; 2 &lt;strong&gt;给用户授予管理员角色&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	其中 smallming 为新建用户的用户名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmqctl set_user_tags mashibing administrator
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-给用户授权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-给用户授权&#34;&gt;#&lt;/a&gt; 3 &lt;strong&gt;给用户授权&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	“/” 表示虚拟机&lt;/p&gt;
&lt;p&gt;​	mashibing 表示用户名&lt;/p&gt;
&lt;p&gt;​	&amp;quot;.&lt;em&gt;&amp;quot; &amp;quot;.&lt;/em&gt;&amp;quot;&amp;quot;.*&amp;quot; 表示完整权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./rabbitmqctl set_permissions -p &amp;quot;/&amp;quot; mashibing &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-登录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-登录&#34;&gt;#&lt;/a&gt; 4 &lt;strong&gt;登录&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	使用新建账户和密码在 windows 中访问 rabbitmq 并登录&lt;/p&gt;
&lt;p&gt;​	在浏览器地址栏输入：&lt;/p&gt;
&lt;p&gt;​	&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOjE1NjcyLw==&#34;&gt;http://ip:15672/&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;用户名：mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	密码：mashibing&lt;/p&gt;
&lt;h3 id=&#34;七-交换器交换机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#七-交换器交换机&#34;&gt;#&lt;/a&gt; 七、 &lt;strong&gt;交换器（交换机）&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	交换器负责接收客户端传递过来的消息，并转发到对应的队列中。在 RabbitMQ 中支持四种交换器&lt;/p&gt;
&lt;p&gt;​	1.Direct Exchange：直连交换器（默认）&lt;/p&gt;
&lt;p&gt;​	2.Fanout Exchange：扇形交换器&lt;/p&gt;
&lt;p&gt;​	3.Topic Exchange：主题交换器&lt;/p&gt;
&lt;p&gt;​	4.Header Exchange：首部交换器。&lt;/p&gt;
&lt;p&gt;​	在 RabbitMq 的 Web 管理界面中 Exchanges 选项卡就可以看见这四个交换器。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/RabbitMQ/RabbitMQ-09.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1-direct交换器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-direct交换器&#34;&gt;#&lt;/a&gt; 1 &lt;strong&gt;direct 交换器&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	direct 交换器是 RabbitMQ 默认交换器。默认会进行公平调度。所有接受者依次从消息队列中获取值。Publisher 给哪个队列发消息，就一定是给哪个队列发送消息。对交换器绑定的其他队列没有任何影响。&lt;/p&gt;
&lt;p&gt;​	（代码演示）一个队列需要绑定多个消费者&lt;/p&gt;
&lt;p&gt;​	需要使用注解 / API：&lt;/p&gt;
&lt;p&gt;​	org.springframework.amqp.core.Queue: 队列&lt;/p&gt;
&lt;p&gt;​	AmqpTemplate：操作 RabbitMQ 的接口。负责发送或接收消息&lt;/p&gt;
&lt;p&gt;​	@RabbitListener (queues = &amp;quot;&amp;quot;) 注解某个方法为接收消息方法&lt;/p&gt;
&lt;h4 id=&#34;11-代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-代码实现&#34;&gt;#&lt;/a&gt; 1.1 &lt;strong&gt;代码实现&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;111-新建项目publisher&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#111-新建项目publisher&#34;&gt;#&lt;/a&gt; 1.1.1 &lt;strong&gt;新建项目 Publisher&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;1111-添加依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1111-添加依赖&#34;&gt;#&lt;/a&gt; 1.1.1.1 &lt;strong&gt;添加依赖&lt;/strong&gt;&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;parent&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.2.2.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/parent&amp;gt;

&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;spring-boot-starter-amqp&amp;lt;/artifactId&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1112-编写配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1112-编写配置文件&#34;&gt;#&lt;/a&gt; 1.1.1.2 &lt;strong&gt;编写配置文件&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	新建 application.yml.&lt;/p&gt;
&lt;p&gt;​	host: 默认值 localhost&lt;/p&gt;
&lt;p&gt;​	username 默认值：guest&lt;/p&gt;
&lt;p&gt;​	password 默认值：guest&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;spring:
  rabbitmq:
    host: 192.168.1.195
    username: mashibing
    password: mashibing
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1113-编写配置类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1113-编写配置类&#34;&gt;#&lt;/a&gt; 1.1.1.3 &lt;strong&gt;编写配置类&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;新建 com.config.RabbitmqConfig&lt;/p&gt;
&lt;p&gt;​	队列的创建只有没有这个队列的时候需要编写。以后没有这个 queue () 方法也可以。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Configuration
public class RabbitmqConfig &amp;#123;
    @Bean
    protected Queue queue()&amp;#123;
        Queue queue = new Queue(&amp;quot;myqueue&amp;quot;);
        return queue;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1114-编写启动类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1114-编写启动类&#34;&gt;#&lt;/a&gt; 1.1.1.4 &lt;strong&gt;编写启动类&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;略&lt;/p&gt;
&lt;h6 id=&#34;1115-编写测试类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1115-编写测试类&#34;&gt;#&lt;/a&gt; 1.1.1.5 &lt;strong&gt;编写测试类&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;SpringBoot 整合 Spring-AMQP 后包含内置对象 AmqpTemplate&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@SpringBootTest(classes = PublisherApplication.class)
@RunWith(SpringJUnit4ClassRunner.class)
public class MyTest &amp;#123;
    @Autowired
    private AmqpTemplate amqpTemplate;

    @Test
    public void test()&amp;#123;
        amqpTemplate.convertAndSend(&amp;quot;myqueue&amp;quot;,&amp;quot;这是内容1&amp;quot;);
        System.out.println(&amp;quot;发送成功&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;112-创建consumer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#112-创建consumer&#34;&gt;#&lt;/a&gt; 1.1.2 &lt;strong&gt;创建 Consumer&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​	新建项目 consumer&lt;/p&gt;
&lt;h6 id=&#34;1121-添加依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1121-添加依赖&#34;&gt;#&lt;/a&gt; 1.1.2.1 &lt;strong&gt;添加依赖&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	和 Publisher 一样&lt;/p&gt;
&lt;h6 id=&#34;1122-编写配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1122-编写配置文件&#34;&gt;#&lt;/a&gt; 1.1.2.2 &lt;strong&gt;编写配置文件&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	和 Publisher 一样&lt;/p&gt;
&lt;h6 id=&#34;1123-编写监听器方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1123-编写监听器方法&#34;&gt;#&lt;/a&gt; 1.1.2.3 &lt;strong&gt;编写监听器方法&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	注意：&lt;/p&gt;
&lt;p&gt;​	类上要有 @Componet，项目启动时此类生效。&lt;/p&gt;
&lt;p&gt;​	@RabbitListener 监听指定队列。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Component
public class DemoReceive &amp;#123;

    @RabbitListener(queues = &amp;quot;myqueue&amp;quot;)
    public void demo(String msg)&amp;#123;
        System.out.println(&amp;quot;获取到的消息1111：&amp;quot;+msg);
    &amp;#125;

    @RabbitListener(queues = &amp;quot;myqueue&amp;quot;)
    public void demo2(String msg)&amp;#123;
        System.out.println(&amp;quot;获取到的消息2222：&amp;quot;+msg);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;1124-新建启动类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1124-新建启动类&#34;&gt;#&lt;/a&gt; 1.1.2.4 &lt;strong&gt;新建启动类&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	略。启动后此项目一直处于运行状态。属于长连接。&lt;/p&gt;
&lt;h4 id=&#34;2-fanout交换器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-fanout交换器&#34;&gt;#&lt;/a&gt; 2 &lt;strong&gt;fanout 交换器&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	扇形交换器，实际上做的事情就是广播，fanout 会把消息发送给所有的绑定在当前交换器上的队列。且每个队列消息中第一个 Consumer 能收到消息。&lt;/p&gt;
&lt;p&gt;​	（代码演示）一个交换器需要绑定多个队列&lt;/p&gt;
&lt;p&gt;​	需要使用注解 / API：&lt;/p&gt;
&lt;p&gt;​	FanoutExchange：fanout 交换器&lt;/p&gt;
&lt;p&gt;​	Binding：绑定交换器和队列&lt;/p&gt;
&lt;p&gt;​	BindingBuilder：Binding 的构建器&lt;/p&gt;
&lt;p&gt;​	amq.fanout: 内置 fanout 交换器名称&lt;/p&gt;
&lt;h4 id=&#34;21-代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-代码&#34;&gt;#&lt;/a&gt; 2.1 &lt;strong&gt;代码&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;211-publisher&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#211-publisher&#34;&gt;#&lt;/a&gt; 2.1.1 &lt;strong&gt;Publisher&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;2111-修改配置类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2111-修改配置类&#34;&gt;#&lt;/a&gt; 2.1.1.1 &lt;strong&gt;修改配置类&lt;/strong&gt;&lt;/h6&gt;
&lt;pre&gt;&lt;code&gt;@Bean
protected Queue fanoutQuque1()&amp;#123;
    return new Queue(&amp;quot;fanout1&amp;quot;);
&amp;#125;

@Bean
protected Queue fanoutQuque2()&amp;#123;
    return new Queue(&amp;quot;fanout2&amp;quot;);
&amp;#125;

@Bean
protected FanoutExchange fanoutExchange()&amp;#123;
    return new FanoutExchange(&amp;quot;amq.fanout&amp;quot;);
&amp;#125;

@Bean
protected Binding fanoutBinding(Queue fanoutQuque1,FanoutExchange fanoutExchange)&amp;#123;
    return BindingBuilder.bind(fanoutQuque1).to(fanoutExchange);
&amp;#125;

@Bean
protected Binding fanoutBinding2(Queue fanoutQuque2,FanoutExchange fanoutExchange)&amp;#123;
    return BindingBuilder.bind(fanoutQuque2).to(fanoutExchange);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;212-编写发送方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#212-编写发送方法&#34;&gt;#&lt;/a&gt; 2.1.2 &lt;strong&gt;编写发送方法&lt;/strong&gt; ****&lt;/h5&gt;
&lt;p&gt;​	第二个参数 routingKey 对于 fanout 没有意义的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Test
public void test2()&amp;#123;
    amqpTemplate.convertAndSend(&amp;quot;amq.fanout&amp;quot;,&amp;quot;asdfadsf&amp;quot;,&amp;quot;fanout msg&amp;quot;);
    System.out.println(&amp;quot;发送成功&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;213-consumer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#213-consumer&#34;&gt;#&lt;/a&gt; 2.1.3 &lt;strong&gt;Consumer&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;​	Consumer 代码和 Direct 完全相同。一个队列给一个监听方法即可。&lt;/p&gt;
&lt;h4 id=&#34;3-topic交换器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-topic交换器&#34;&gt;#&lt;/a&gt; 3 &lt;strong&gt;topic 交换器&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	允许在路由键（RoutingKey）中出现匹配规则。&lt;/p&gt;
&lt;p&gt;​	路由键的写法和包写法相同。com.msb.xxxx.xxx 格式。&lt;/p&gt;
&lt;p&gt;​	在绑定时可以带有下面特殊符号，中间可以出现:&lt;/p&gt;
&lt;p&gt;​	* : 代表一个单词（两个。之间内容）&lt;/p&gt;
&lt;p&gt;​	# : 0 个或多个字符&lt;/p&gt;
&lt;p&gt;​	接收方依然是公平调度，同一个队列中内容轮换获取值。&lt;/p&gt;
&lt;p&gt;​	需要使用注解 / API：&lt;/p&gt;
&lt;p&gt;​	TopicExchange：Topic 交换器&lt;/p&gt;
&lt;p&gt;​	amq.topic: 内置 topic 交换器名称&lt;/p&gt;
&lt;h4 id=&#34;31-代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-代码&#34;&gt;#&lt;/a&gt; 3.1 &lt;strong&gt;代码&lt;/strong&gt;&lt;/h4&gt;
&lt;h5 id=&#34;311-publisher&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#311-publisher&#34;&gt;#&lt;/a&gt; 3.1.1 &lt;strong&gt;Publisher&lt;/strong&gt;&lt;/h5&gt;
&lt;h6 id=&#34;3111-配置类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3111-配置类&#34;&gt;#&lt;/a&gt; 3.1.1.1 &lt;strong&gt;配置类。&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	之所以建立两个队列目的是为了演示使用 Topic 完成 Fanout 效果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Bean
protected Queue topicQueue() &amp;#123;
    return new Queue(&amp;quot;topic1&amp;quot;);
&amp;#125;

@Bean
protected Queue topicQueue2() &amp;#123;
    return new Queue(&amp;quot;topic2&amp;quot;);
&amp;#125;

@Bean
protected TopicExchange topicExchange() &amp;#123;
    return new TopicExchange(&amp;quot;amq.topic&amp;quot;);
&amp;#125;

@Bean
protected Binding topicBinding(Queue topicQueue, TopicExchange topicExchange) &amp;#123;
    return BindingBuilder.bind(topicQueue).to(topicExchange).with(&amp;quot;com.a&amp;quot;);
&amp;#125;

@Bean
protected Binding topicBinding2(Queue topicQueue2, TopicExchange topicExchange) &amp;#123;
    return BindingBuilder.bind(topicQueue2).to(topicExchange).with(&amp;quot;com.#&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h6 id=&#34;3112-发送消息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3112-发送消息&#34;&gt;#&lt;/a&gt; 3.1.1.2 &lt;strong&gt;发送消息&lt;/strong&gt;&lt;/h6&gt;
&lt;p&gt;​	第二个参数为路由键，匹配配置类中绑定时的路由规则。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Test
public void test3()&amp;#123;
    amqpTemplate.convertAndSend(&amp;quot;amq.topic&amp;quot;,&amp;quot;com.bjsxt.a.b&amp;quot;,&amp;quot;topic msg&amp;quot;);
    System.out.println(&amp;quot;发送成功&amp;quot;);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.1.2 &lt;strong&gt;Consumer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	Consumer 代码与以前一样，注意队列名称 topic1,topic2 不要写路由键名称。(queues 取值)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@RabbitListener(queues = &amp;quot;topic2&amp;quot;)
public void demo10(String msg)&amp;#123;
    System.out.println(&amp;quot;topic2-2:&amp;quot;+msg);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;八-传递对象类型参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#八-传递对象类型参数&#34;&gt;#&lt;/a&gt; 八、 &lt;strong&gt;传递对象类型参数&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	如果消息是对象类型，此对象的类型必须进行序列化，且需要给定序列化值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class People implements Serializable 
&amp;#123;
    public static final long serialVersionUID=1L;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;bk-comment02&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/Distribution/Solr/</guid>
            <title>Solr</title>
            <link>http://example.com/2022/10/07/Distribution/Solr/</link>
            <category>分布式</category>
            <category>中间件</category>
            <category>Solr</category>
            <category>快速搜索</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;solr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#solr&#34;&gt;#&lt;/a&gt; Solr&lt;/h1&gt;
&lt;h3 id=&#34;主要内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主要内容&#34;&gt;#&lt;/a&gt; 主要内容&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Solr 简介&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solr 搜索原理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Solr 单机版安装&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可视化管理界面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建核心&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分词&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dataimport&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 SolrJ 操作 Solr&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Data for Apache Solr&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;SolrCloud&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;学习目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学习目标&#34;&gt;#&lt;/a&gt; 学习目标&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;知识点&lt;/th&gt;
&lt;th&gt;要求&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Solr 简介&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solr 搜索原理&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Solr 单机版安装&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可视化管理界面&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;新建核心&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分词&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dataimport&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;使用 SolrJ 操作 Solr&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SolrCloud&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Data for Apache Solr&lt;/td&gt;
&lt;td&gt;掌握&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;一-solr简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-solr简介&#34;&gt;#&lt;/a&gt; 一、Solr 简介&lt;/h3&gt;
&lt;h4 id=&#34;1为什么使用solr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1为什么使用solr&#34;&gt;#&lt;/a&gt; 1. 为什么使用 Solr&lt;/h4&gt;
&lt;p&gt;​	在海量数据下，对 MySQL 或 Oracle 进行模糊查询或条件查询的效率是很低的。而搜索功能在绝大多数项目中都是必须的，如何提升搜索效率是很多互联网项目必须要考虑的问题。&lt;/p&gt;
&lt;p&gt;​	既然使用关系型数据库进行搜索效率比较低，最直接的解决方案就是使用专用搜索工具进行搜索，从而提升搜索效率。&lt;/p&gt;
&lt;h4 id=&#34;2常见搜索解决方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2常见搜索解决方案&#34;&gt;#&lt;/a&gt; 2. 常见搜索解决方案&lt;/h4&gt;
&lt;p&gt;​	基于 Apache Lucene（全文检索工具库）实现搜索。但是 Lucene 的使用对于绝大多数的程序员都是 “噩梦级” 的。&lt;/p&gt;
&lt;p&gt;​	基于谷歌 API 实现搜索。&lt;/p&gt;
&lt;p&gt;​	基于百度 API 实现搜索。&lt;/p&gt;
&lt;h4 id=&#34;3solr简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3solr简介&#34;&gt;#&lt;/a&gt; 3.Solr 简介&lt;/h4&gt;
&lt;p&gt;​	Solr 是基于 Apache Lucene 构建的用于搜索和分析的开源解决方案。可提供可扩展索引、搜索功能、高亮显示和文字解析功能。&lt;/p&gt;
&lt;p&gt;​	Solr 本质就是一个 Java web 项目，且内嵌了 Jetty 服务器，所以安装起来非常方便。客户端操作 Solr 的过程和平时我们所写项目一样，就是请求 Solr 中控制器，处理完数据后把结果响应给客户端。&lt;/p&gt;
&lt;h4 id=&#34;4正向索引和反向索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4正向索引和反向索引&#34;&gt;#&lt;/a&gt; 4. 正向索引和反向索引&lt;/h4&gt;
&lt;p&gt;​	只要讨论搜索就不得不提的两个概念：正向索引（forward index）和反向索引 (inverted index)。&lt;/p&gt;
&lt;p&gt;​	正向索引：从文档内容到词组的过程。每次搜索的实收需要搜索所有文档，每个文档比较搜索条件和词组。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文档&lt;/th&gt;
&lt;th&gt;词组&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;I am a chinese&lt;/td&gt;
&lt;td&gt;I,am,a,chinese&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;​	反向索引：是正向索引的逆向。建立词组和文档的映射关系。通过找到词组就能找到文档内容。（和新华字典找字很像）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;词组&lt;/th&gt;
&lt;th&gt;文档&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;I,am,a,chinese&lt;/td&gt;
&lt;td&gt;I am a chinese&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;二-solr搜索原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-solr搜索原理&#34;&gt;#&lt;/a&gt; 二、Solr 搜索原理&lt;/h3&gt;
&lt;h4 id=&#34;1搜索原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1搜索原理&#34;&gt;#&lt;/a&gt; 1. 搜索原理&lt;/h4&gt;
&lt;p&gt;​	Solr 能够提升检索效率的主要原因就是分词和索引（反向索引，通过）。&lt;/p&gt;
&lt;p&gt;​	分词：会对搜索条件 / 存储内容进行分词，分成日常所使用的词语。&lt;/p&gt;
&lt;p&gt;​	索引：存储在 Solr 中内容会按照程序员的要求来是否建立索引。如果要求建立索引会把存储内容中关键字（分词）建立索引。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-01.JPG&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2solr中数据存储说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2solr中数据存储说明&#34;&gt;#&lt;/a&gt; 2.Solr 中数据存储说明&lt;/h4&gt;
&lt;p&gt;​	Solr 为了给内容建立索引，所以 Solr 就必须具备数据存储能力。所有需要被搜索的内容都需要存储在 Solr 中，在开发中需要把数据库中数据添加到 Solr 中进行初始化，每次修改数据库中数据还需要同步 Solr 中的数据。&lt;/p&gt;
&lt;p&gt;​	Solr 中数据存储是存储在 Document 对象中，对象中可以包含的属性和属性类型都定义在 scheme.xml 中。如果需要自定义属性或自定义属性类型都需要修改 scheme.xml 配置文件。从 Solr5 开始 schema.xml 更改名称为 managed-scheme (没有扩展名)&lt;/p&gt;
&lt;h3 id=&#34;三-solr单机版安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-solr单机版安装&#34;&gt;#&lt;/a&gt; 三、Solr 单机版安装&lt;/h3&gt;
&lt;p&gt;​	Solr 是使用 Java 编写，所以必选先安装 JDK。&lt;/p&gt;
&lt;h4 id=&#34;1上传并解压&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1上传并解压&#34;&gt;#&lt;/a&gt; 1. 上传并解压&lt;/h4&gt;
&lt;p&gt;​	上传压缩包 solr-7.7.2.tgz 到 /usr/local/tmp 中。&lt;/p&gt;
&lt;p&gt;解压&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/tmp
# tar zxf solr-7.7.2.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2复制到usrlocal中&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2复制到usrlocal中&#34;&gt;#&lt;/a&gt; 2. 复制到 /usr/local 中&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# cp -r solr-7.7.2 ../solr
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3修改启动参数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3修改启动参数&#34;&gt;#&lt;/a&gt; 3. 修改启动参数&lt;/h4&gt;
&lt;p&gt;​	修改启动参数，否则启动时报警告。提示设置 SOLR_ULIMIT_CHECKS=false&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/bin
# vim solr.in.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-02.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4启动solr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4启动solr&#34;&gt;#&lt;/a&gt; 4. 启动 Solr&lt;/h4&gt;
&lt;p&gt;​	Solr 内嵌 Jetty，直接启动即可。监听 8983 端口。&lt;/p&gt;
&lt;p&gt;​	solr 默认不推荐 root 账户启动，如果是 root 账户启动需要添加 - force 参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;四-可视化管理界面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-可视化管理界面&#34;&gt;#&lt;/a&gt; 四、可视化管理界面&lt;/h3&gt;
&lt;p&gt;​	在关闭防火墙的前提下，可以在 windows 的浏览器中访问 Solr。&lt;/p&gt;
&lt;p&gt;​	输入: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguOTMuMTA6ODk4Mw==&#34;&gt;http://192.168.93.10:8983&lt;/span&gt; 就可以访问 Solr 的可视化管理界面。&lt;/p&gt;
&lt;p&gt;​	左侧有 5 个菜单。分别是：&lt;/p&gt;
&lt;p&gt;​	（1）Dashboard：面板显示 Solr 的总体信息。&lt;/p&gt;
&lt;p&gt;​	（2）Logging：日志&lt;/p&gt;
&lt;p&gt;​	（3）Core Admin：Solr 的核心。类似于数据的 Database&lt;/p&gt;
&lt;p&gt;​	（4）Java Perperties：所有 Java 相关属性。&lt;/p&gt;
&lt;p&gt;​	（5）Thread Dump：线程相关信息。&lt;/p&gt;
&lt;p&gt;​	（6）如果有 Core，将显示在此处。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-03.JPG&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;五-新建核心&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-新建核心&#34;&gt;#&lt;/a&gt; 五、新建核心&lt;/h3&gt;
&lt;p&gt;​	Solr 安装完成后默认是没有核心的。需要手动配置。&lt;/p&gt;
&lt;p&gt;​	需要在 solr/server/solr 下新建文件夹，并给定配置文件，否则无法建立。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-04.JPG&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1新建目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1新建目录&#34;&gt;#&lt;/a&gt; 1. 新建目录&lt;/h4&gt;
&lt;p&gt;​	在 /usr/local/solr/server/solr 中新建自定义名称目录。此处示例名称为 testcore。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/server/solr
# mkdir testcore
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2复制配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2复制配置文件&#34;&gt;#&lt;/a&gt; 2. 复制配置文件&lt;/h4&gt;
&lt;p&gt;​	在 configsets 里面包含了_default 和 sample_techproducts_configs。里面都是配置文件示例。_default 属于默认配置，较纯净。sample_techproducts_configs 是带有了一些配置示例。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp -r configsets/_default/conf/ testcore/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3填写core信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3填写core信息&#34;&gt;#&lt;/a&gt; 3. 填写 Core 信息&lt;/h4&gt;
&lt;p&gt;​	在可视化管理界面中 Core Admin 中编写信息后点击 Add Core 后，短暂延迟后 testcore 就会创建成功。schema 处不用更改。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-05.JPG&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4出现testcore&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4出现testcore&#34;&gt;#&lt;/a&gt; 4. 出现 testcore&lt;/h4&gt;
&lt;p&gt;​	在客户端管理界面中，选择新建的 Core 后，就可以按照自己项目的需求进行操作了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-06.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;六-分词analysis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#六-分词analysis&#34;&gt;#&lt;/a&gt; 六、分词 Analysis&lt;/h3&gt;
&lt;p&gt;​	在 Solr 可视化管理界面中，Core 的管理菜单项中都会有 Analysis。表示根据 Scheme.xml (managed-schema) 中配置要求进行解析。&lt;/p&gt;
&lt;p&gt;​	对英文解析就比较简单了，只要按照空格把英文语句拆分成英文单词即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-07.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	但是如果条件是中文时，把一句话按照字进行拆分就不是很合理了。正确的方式是按照合理的词组进行拆分。&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-08.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;1配置步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1配置步骤&#34;&gt;#&lt;/a&gt; 1. 配置步骤&lt;/h4&gt;
&lt;p&gt;​	上传 ik-analyzer.jar 到 webapps 中。&lt;/p&gt;
&lt;p&gt;​	去 https://search.maven.org/search?q=com.github.magese 下载对应版本的 ik-analyzer。可以在资料中直接获取。&lt;/p&gt;
&lt;h5 id=&#34;11上传jar到指定目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11上传jar到指定目录&#34;&gt;#&lt;/a&gt; 1.1 上传 jar 到指定目录&lt;/h5&gt;
&lt;p&gt;​	上传 ik-analyzer-7.7.0.jar 到&lt;/p&gt;
&lt;p&gt;​	/usr/local/solr/server/solr-webapp/webapp/WEB-INF/lib 目录中&lt;/p&gt;
&lt;h5 id=&#34;12修改配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12修改配置文件&#34;&gt;#&lt;/a&gt; 1.2 修改配置文件&lt;/h5&gt;
&lt;p&gt;​	修改 /usr/local/solr/server/solr/testcore/conf/managed-schema&lt;/p&gt;
&lt;figure class=&#34;highlight sh&#34;&gt;&lt;figcaption data-lang=&#34;sh&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; /usr/local/solr/server/solr/testcore/conf/managed-schema&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​	添加下面内容。&lt;/p&gt;
&lt;p&gt;​	排版：Esc 退出编辑状态下：gg=G&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;field name=&amp;quot;myfield&amp;quot; type=&amp;quot;text_ik&amp;quot; indexed=&amp;quot;true&amp;quot; stored=&amp;quot;true&amp;quot; /&amp;gt;
    &amp;lt;fieldType name=&amp;quot;text_ik&amp;quot; class=&amp;quot;solr.TextField&amp;quot;&amp;gt;
            &amp;lt;analyzer type=&amp;quot;index&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;false&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
            &amp;lt;analyzer type=&amp;quot;query&amp;quot;&amp;gt;
                    &amp;lt;tokenizer class=&amp;quot;org.wltea.analyzer.lucene.IKTokenizerFactory&amp;quot; useSmart=&amp;quot;true&amp;quot; conf=&amp;quot;ik.conf&amp;quot;/&amp;gt;
                    &amp;lt;filter class=&amp;quot;solr.LowerCaseFilterFactory&amp;quot;/&amp;gt;
            &amp;lt;/analyzer&amp;gt;
    &amp;lt;/fieldType&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;13重启&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13重启&#34;&gt;#&lt;/a&gt; 1.3 重启&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/solr/bin
# ./solr stop -all
# ./solr start -force
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;14验证&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14验证&#34;&gt;#&lt;/a&gt; 1.4 验证&lt;/h5&gt;
&lt;p&gt;​	可以在可视化管理界面中找到 myfield 属性进行验证。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-09.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2managed-schema配置说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2managed-schema配置说明&#34;&gt;#&lt;/a&gt; 2.managed-schema 配置说明&lt;/h4&gt;
&lt;h5 id=&#34;21-fieldtype&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-fieldtype&#34;&gt;#&lt;/a&gt; 2.1&amp;lt; fieldType/&amp;gt;&lt;/h5&gt;
&lt;p&gt;​	表示定义一个属性类型。在 Solr 中属性类型都是自定义的。在上面配置中 name=”text_ik” 为自定义类型。当某个属性取值为 text_ik 时 IK Analyzer 才能生效。&lt;/p&gt;
&lt;h5 id=&#34;22-field&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-field&#34;&gt;#&lt;/a&gt; 2.2&amp;lt; field/&amp;gt;&lt;/h5&gt;
&lt;p&gt;​	表示向 Document 中添加一个属性。&lt;/p&gt;
&lt;p&gt;​	常用属性：&lt;/p&gt;
&lt;p&gt;​		name: 属性名&lt;/p&gt;
&lt;p&gt;​		type: 属性类型。所有类型都是 solr 使用 &amp;lt;fieldType&amp;gt; 配置的&lt;/p&gt;
&lt;p&gt;​		indexed: 是否建立索引&lt;/p&gt;
&lt;p&gt;​		stored: solr 是否把该属性值响应给搜索用户。&lt;/p&gt;
&lt;p&gt;​		required：该属性是否是必须的。默认 id 是必须的。&lt;/p&gt;
&lt;p&gt;​		multiValued：如果为 true，表示该属性为复合属性，此属性中包含了多个其他的属性。常用在多个列作为搜索条件时，把这些列定义定义成一个新的复合属性，通过搜索一个复合属性就可以实现搜索多个列。当设置为 true 时与 &amp;lt;copyField source=&amp;quot;&amp;quot;dest=&amp;quot;&amp;quot;/&amp;gt; 结合使用&lt;/p&gt;
&lt;h5 id=&#34;23-uniquekey&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-uniquekey&#34;&gt;#&lt;/a&gt; 2.3&amp;lt; uniqueKey&amp;gt;&lt;/h5&gt;
&lt;p&gt;​	唯一主键，Solr 中默认定义 id 属性为唯一主键。ID 的值是不允许重复的。&lt;/p&gt;
&lt;h5 id=&#34;24-dynamicfield&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-dynamicfield&#34;&gt;#&lt;/a&gt; 2.4&amp;lt; dynamicField&amp;gt;&lt;/h5&gt;
&lt;p&gt;​	名称中允许 * 进行通配。代表满足特定名称要求的一组属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;msb_java    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	msb_bigdata&lt;/p&gt;
&lt;p&gt;​	msb_UI&lt;/p&gt;
&lt;p&gt;​        msb_*&lt;/p&gt;
&lt;h3 id=&#34;七-dataimport&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#七-dataimport&#34;&gt;#&lt;/a&gt; 七、Dataimport&lt;/h3&gt;
&lt;p&gt;​	可以使用 Solr 自带的 Dataimport 功能把数据库中数据快速导入到 solr 中.&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;必须保证 managed-schema 和数据库中表的列对应。，添加配置&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;1修改配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1修改配置文件&#34;&gt;#&lt;/a&gt; 1. 修改配置文件&lt;/h4&gt;
&lt;p&gt;​	修改 solrconfig.xml，添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;!-- 配置数据导入的处理器 --&amp;gt;
  &amp;lt;requestHandler name=&amp;quot;/dataimport&amp;quot; class=&amp;quot;org.apache.solr.handler.dataimport.DataImportHandler&amp;quot;&amp;gt;
    &amp;lt;lst name=&amp;quot;defaults&amp;quot;&amp;gt;
	  &amp;lt;!--  加载data-config.xml  --&amp;gt;
      &amp;lt;str name=&amp;quot;config&amp;quot;&amp;gt;data-config.xml&amp;lt;/str&amp;gt;
     &amp;lt;/lst&amp;gt;
  &amp;lt;/requestHandler&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2新建data-configxml&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2新建data-configxml&#34;&gt;#&lt;/a&gt; 2. 新建 data-config.xml&lt;/h4&gt;
&lt;p&gt;​	和 solrconfig.xml 同一目录下新建 data-config.xml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;dataConfig&amp;gt;
        &amp;lt;dataSource type=&amp;quot;JdbcDataSource&amp;quot;   
                driver=&amp;quot;com.mysql.jdbc.Driver&amp;quot;   
                url=&amp;quot;jdbc:mysql://192.168.1.135:3306/mytest&amp;quot;   
                user=&amp;quot;root&amp;quot;   
                password=&amp;quot;root&amp;quot;/&amp;gt;
        &amp;lt;document&amp;gt;
            &amp;lt;entity name=&amp;quot;product&amp;quot; query=&amp;quot;SELECT id,name,price from t_product&amp;quot;&amp;gt;
                &amp;lt;!-- 
                 实现数据库的列和索引库的字段的映射
                 column 指定数据库的列表
                 name  指定索引库的字段名字，必须和schema.xml中定义的一样
                 --&amp;gt;
                 &amp;lt;field column=&amp;quot;id&amp;quot; name=&amp;quot;id&amp;quot;/&amp;gt;
                 &amp;lt;field column=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot;/&amp;gt;
				 &amp;lt;field column=&amp;quot;price&amp;quot; name=&amp;quot;price&amp;quot;/&amp;gt;
            &amp;lt;/entity&amp;gt;
         &amp;lt;/document&amp;gt;
&amp;lt;/dataConfig&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3添加jar&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3添加jar&#34;&gt;#&lt;/a&gt; 3. 添加 jar&lt;/h4&gt;
&lt;p&gt;​	向 solr-webapp 中添加三个 jar。在 dist 中两个还有一个数据库驱动。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/Distribution/Solr/solr-10.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4操作&#34;&gt;#&lt;/a&gt; 4. 操作&lt;/h4&gt;
&lt;p&gt;​	重启 solr 后，在可视化管理页面中进行数据导入。&lt;/p&gt;
&lt;p&gt;​	注意：&lt;/p&gt;
&lt;p&gt;​	点击导入按钮后，要记得点击刷新按钮。&lt;/p&gt;
&lt;h3 id=&#34;八-菜单项目documents使用办法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#八-菜单项目documents使用办法&#34;&gt;#&lt;/a&gt; 八、菜单项目 Documents 使用办法&lt;/h3&gt;
&lt;p&gt;​	以 XML 格式举例&lt;/p&gt;
&lt;h4 id=&#34;1新增修改&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1新增修改&#34;&gt;#&lt;/a&gt; 1. 新增 / 修改&lt;/h4&gt;
&lt;p&gt;​	当 id 不存在时新增，当 id 存在修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;doc&amp;gt;
&amp;lt;field name=&amp;quot;id&amp;quot;&amp;gt;8&amp;lt;/field&amp;gt;
&amp;lt;field name=&amp;quot;name&amp;quot;&amp;gt;明天更大卖&amp;lt;/field&amp;gt;
&amp;lt;field name=&amp;quot;price&amp;quot;&amp;gt;98&amp;lt;/field&amp;gt;
&amp;lt;/doc&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2删除&#34;&gt;#&lt;/a&gt; 2. 删除&lt;/h4&gt;
&lt;h5 id=&#34;21根据主键删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21根据主键删除&#34;&gt;#&lt;/a&gt; 2.1 根据主键删除&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;delete&amp;gt;
	&amp;lt;id&amp;gt;8&amp;lt;/id&amp;gt;
&amp;lt;/delete&amp;gt;
&amp;lt;commit/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;22根据条件删除&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22根据条件删除&#34;&gt;#&lt;/a&gt; 2.2 根据条件删除&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;delete&amp;gt;
	&amp;lt;query&amp;gt;*:*&amp;lt;/query&amp;gt;
&amp;lt;/delete&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3solr可视化界面使用query&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3solr可视化界面使用query&#34;&gt;#&lt;/a&gt; 3.solr 可视化界面使用（QUERY）&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645693120964.png&#34; alt=&#34;1645693120964&#34; /&gt;&lt;/p&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;​	**q：**query，等于。格式  ——&amp;gt; parameter/columns : value	&lt;strong&gt;具有分词时，相当于模糊查询 --like&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;fq：&lt;/strong&gt;【在 q 的情况下再加条件】（要有分词功能）注意这里的 keyword 是用来检索的字段，他包含 name、address、gender、expert_skill，这几个属性，所以我搜索 “海” 能够查询出来有海字的记录。&lt;/p&gt;
&lt;p&gt;​	**sort：** 排序 。 parameter/columns    desc 逆序 /asc&lt;/p&gt;
&lt;p&gt;​	**start,rows：** 从查询结果的 start 开始，显示到 rows 结束【下标】&lt;/p&gt;
&lt;p&gt;​	**fl：** 想显示的属性。&lt;/p&gt;
&lt;p&gt;​	**df：** 不想显示的属性。&lt;/p&gt;
&lt;p&gt;​	**wt：** 返回值类型&lt;/p&gt;
&lt;p&gt;​	**hl：** 高亮&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	*  hl.fl						 value
	*  hl.simple.pre        &amp;lt;font color=&#39;red&#39;&amp;gt;
	*  hl.simple.post     &amp;lt;/font&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id=&#34;九-使用solrj操作solr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#九-使用solrj操作solr&#34;&gt;#&lt;/a&gt; 九、使用 SolrJ 操作 Solr&lt;/h3&gt;
&lt;p&gt;​	SolrJ 是 Solr 提供的 Java 客户端 API。通过 SolrJ 可以实现 Java 程序对 Solr 中数据的操作。&lt;/p&gt;
&lt;p&gt;​	大前提：添加 SolrJ 依赖。依赖版本和 Solr 版本严格对应&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.solr&amp;lt;/groupId&amp;gt;
        	&amp;lt;artifactId&amp;gt;solr-solrj&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;7.7.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1新增修改实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1新增修改实现&#34;&gt;#&lt;/a&gt; 1. 新增 / 修改实现&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;String url = &amp;quot;http://192.168.93.10:8983/solr/testcore&amp;quot;;
HttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();
SolrInputDocument inputDocument = new SolrInputDocument();
inputDocument.addField(&amp;quot;id&amp;quot;,&amp;quot;3&amp;quot;);
inputDocument.addField(&amp;quot;myfield&amp;quot;,&amp;quot;myfield3&amp;quot;);
solrClient.add(inputDocument);
solrClient.commit();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;使用 solrj 进行索引的添加
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每个索引的添加必须要 ID&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;添加 key 值要和 schema.xml 文件内的 field 域保持一致&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;添加数据后一定要提交数据，不然是不存在数据的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接 Solr 的对象需要连接到项目名&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个 document 是一组 Json 数据对象&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2删除实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2删除实现&#34;&gt;#&lt;/a&gt; 2. 删除实现&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;String url = &amp;quot;http://192.168.93.10:8983/solr/testcore&amp;quot;;
HttpSolrClient solrClient =  new HttpSolrClient.Builder(url).build();
solrClient.deleteById(&amp;quot;3&amp;quot;);
solrClient.commit();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;删除支持两种删除方式
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1. 根据 ID&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;2. 执行查询删除
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查询删除的格式：查询的域：值&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3查询实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3查询实现&#34;&gt;#&lt;/a&gt; 3. 查询实现&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;public void testQuery()&amp;#123;
    try &amp;#123;
        String url = &amp;quot;http://192.168.93.10:8983/solr/testcore&amp;quot;;
        HttpSolrClient solrClient = new HttpSolrClient.Builder(url).build();

        //封装了所有查询条件
        SolrQuery params = new SolrQuery();
        params.setQuery(&amp;quot;name:丰富的&amp;quot;);
        //排序
        params.setSort(&amp;quot;price&amp;quot;, SolrQuery.ORDER.desc);
        //分页
        params.setStart(0);
 params.setRows(1);
        //高亮
        params.setHighlight(true);
        params.addHighlightField(&amp;quot;name&amp;quot;);
        params.setHighlightSimplePre(&amp;quot;&amp;lt;span&amp;gt;&amp;quot;);
        params.setHighlightSimplePost(&amp;quot;&amp;lt;/span&amp;gt;&amp;quot;);

        QueryResponse response = solrClient.query(params);
        SolrDocumentList list = response.getResults();
        System.out.println(&amp;quot;总条数：&amp;quot;+list.getNumFound());

        //高亮数据
        Map&amp;lt;String, Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&amp;gt; highlighting = response.getHighlighting();

        for(SolrDocument doc :list)&amp;#123;
            System.out.println(doc.get(&amp;quot;id&amp;quot;));
            Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt; map = highlighting.get(doc.get(&amp;quot;id&amp;quot;));
            List&amp;lt;String&amp;gt; HLList = map.get(&amp;quot;name&amp;quot;);
            if(HLList!=null&amp;amp;&amp;amp;HLList.size()&amp;gt;0)&amp;#123;//显示高亮数据
                System.out.println(HLList.get(0));
            &amp;#125;else&amp;#123;
                System.out.println(doc.get(&amp;quot;name&amp;quot;));
            &amp;#125;
            System.out.println(doc.get(&amp;quot;price&amp;quot;));
            System.out.println(&amp;quot;===================&amp;quot;);
        &amp;#125;
        solrClient.close();
    &amp;#125; catch (SolrServerException e) &amp;#123;
        e.printStackTrace();
    &amp;#125; catch (IOException e) &amp;#123;
        e.printStackTrace();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;使用到的对象&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.SolrQuery 查询对象
&lt;ul&gt;
&lt;li&gt;1.setQuery ()：设置查询的关键字&lt;br /&gt;
 2.set（）: 设置查询的域&lt;br /&gt;
 3.setStart (): 设置开始&lt;br /&gt;
 4.setRows（）：设置结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2.QueryResponse：响应结果集&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.getNumFound (): 返回查询到的数量&lt;br /&gt;
 2.getResults（）；返回封装的 list 集合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.SolrDocumentList：结果集合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.get (): 获取指定域的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;十-spring-data-for-apache-solr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十-spring-data-for-apache-solr&#34;&gt;#&lt;/a&gt; 十、Spring Data for Apache Solr&lt;/h3&gt;
&lt;h4 id=&#34;1spring-data简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1spring-data简介&#34;&gt;#&lt;/a&gt; 1.Spring Data 简介&lt;/h4&gt;
&lt;p&gt;​	Spring Data 是 Spring 的顶级项目。里面包含了 N 多个二级子项目，每个子项目对应一种技术或工具。其目的为了让数据访问更加简单，更加方便的和 Spring 进行整合。&lt;/p&gt;
&lt;p&gt;​	Spring Data 项目如果单独使用是还需要配置 XML 配置文件的，当和 Spring Boot 整合后使用起来非常方便。spring-boot-starter-data-xx 就是对应的启动器。&lt;/p&gt;
&lt;h4 id=&#34;2实现步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2实现步骤&#34;&gt;#&lt;/a&gt; 2. 实现步骤&lt;/h4&gt;
&lt;h5 id=&#34;21添加依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21添加依赖&#34;&gt;#&lt;/a&gt; 2.1 添加依赖&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-solr&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;22编写配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22编写配置文件&#34;&gt;#&lt;/a&gt; 2.2 编写配置文件&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;spring:
  data:
    solr:
      host: http://192.168.9.132:8080/solr
      # zk-host: 192.168.9.132:2181,192.168.9.132:2182,192.168.9.132:2183
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;23编写测试类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23编写测试类&#34;&gt;#&lt;/a&gt; 2.3 编写测试类&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;@RunWith(SpringJUnit4ClassRunner.class)
@SpringBootTest(classes = MyApplication.class)
public class MyTest &amp;#123;
    @Autowired
    private SolrTemplate solrTemplate;

    public void testInsert()&amp;#123;
        SolrInputDocument doc = new SolrInputDocument();
        doc.setField(&amp;quot;id&amp;quot;,&amp;quot;002&amp;quot;);
        doc.setField(&amp;quot;item_title&amp;quot;,&amp;quot;这是一个手机3&amp;quot;);
        UpdateResponse ur = solrTemplate.saveBean(&amp;quot;collection1&amp;quot;, doc);
        if(ur.getStatus()==0)&amp;#123;
            System.out.println(&amp;quot;成功&amp;quot;);
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;失败&amp;quot;);
        &amp;#125;
        solrTemplate.commit(&amp;quot;collection1&amp;quot;);
    &amp;#125;

    public void testDelete()&amp;#123;
        UpdateResponse ur = solrTemplate.deleteByIds(&amp;quot;collection1&amp;quot;, &amp;quot;change.me&amp;quot;);
        if(ur.getStatus()==0)&amp;#123;
            System.out.println(&amp;quot;成功&amp;quot;);
        &amp;#125;else&amp;#123;
            System.out.println(&amp;quot;失败&amp;quot;);
        &amp;#125;
        solrTemplate.commit(&amp;quot;collection1&amp;quot;);
    &amp;#125;


    public void query()&amp;#123;
        SimpleQuery query = new SimpleQuery();
        Criteria c = new Criteria(&amp;quot;item_keywords&amp;quot;);
        c.is(&amp;quot;手机&amp;quot;);
        query.addCriteria(c);
        query.setOffset(1L);
        query.setRows(1);
        ScoredPage&amp;lt;DemoPojo&amp;gt; sp = solrTemplate.queryForPage(&amp;quot;collection1&amp;quot;, query, DemoPojo.class);
        System.out.println(sp.getContent());
    &amp;#125;

    @Test
    public void queryHL()&amp;#123;

        List&amp;lt;DemoPojo&amp;gt; listResult = new ArrayList&amp;lt;&amp;gt;();
        SimpleHighlightQuery query = new SimpleHighlightQuery();
        //设置查询条件
        Criteria c = new Criteria(&amp;quot;item_keywords&amp;quot;);
        c.is(&amp;quot;手机&amp;quot;);
        query.addCriteria(c);
        //分页
        query.setOffset(0L);
        query.setRows(10);
        //排序
        Sort sort = new Sort(Sort.Direction.DESC,&amp;quot;id&amp;quot;);
        query.addSort(sort);
        //高亮设置
        HighlightOptions hlo = new HighlightOptions();
        hlo.addField(&amp;quot;item_title item_sell_point&amp;quot;);
        hlo.setSimplePrefix(&amp;quot;&amp;lt;span style=&#39;color:red;&#39;&amp;gt;&amp;quot;);
        hlo.setSimplePostfix(&amp;quot;&amp;lt;/span&amp;gt;&amp;quot;);
        query.setHighlightOptions(hlo);
        HighlightPage&amp;lt;DemoPojo&amp;gt; hl = solrTemplate.queryForHighlightPage(&amp;quot;collection1&amp;quot;, query, DemoPojo.class);
//        System.out.println(hl.getContent());
        List&amp;lt;HighlightEntry&amp;lt;DemoPojo&amp;gt;&amp;gt; highlighted = hl.getHighlighted();
        for(HighlightEntry&amp;lt;DemoPojo&amp;gt; hle : highlighted)&amp;#123;
            List&amp;lt;HighlightEntry.Highlight&amp;gt; list = hle.getHighlights();
            DemoPojo dp = hle.getEntity();
            for (HighlightEntry.Highlight h : list)&amp;#123;//一个对象里面可能多个属性是高亮属性
                if(h.getField().getName().equals(&amp;quot;item_title&amp;quot;))&amp;#123;
                    dp.setItem_title( h.getSnipplets().get(0));
                &amp;#125;
            &amp;#125;
            listResult.add(dp);
        &amp;#125;
        System.out.println(listResult);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十一-使用zookeepr管理solr集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十一-使用zookeepr管理solr集群&#34;&gt;#&lt;/a&gt; 十一。使用 zookeepr 管理 solr 集群&lt;/h3&gt;
&lt;p&gt;1. 上传压缩包到 /usr/local/tmp 下 并解压。&lt;/p&gt;
&lt;p&gt;2. 在 /usr/local 下新建文件夹 zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /usr/local/zookeeper
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3. 把解压的所有文件复制到 zookeeper 下， 并命名为 zk1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cp -r /usr/local/temp/zookeeper-3.4.8 /usr/local/zookeeper/zk1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4. 在 zk1 下新建文件夹 data&lt;/p&gt;
&lt;p&gt;5. 在 data 下新建文件 myid, 里面写上 1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# vim myid
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;6. 进入到 zk1/conf 下 把 zoo_sample.cfg 复制一份叫做 zoo.cfg&lt;/p&gt;
&lt;p&gt;7. 编辑 zoo.cfg 内容，设置 dataDIR 为 data 文件夹， 并在文件最下面添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server.1=192.168.93.10:2688:3888
server.2=192.168.93.10:2689:3889
server.3=192.168.93.10:2690:3890
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;7.1 server.1 中的 1 是 myid 的内容&lt;/p&gt;
&lt;p&gt;7.2 2688 2689 2690 是 zookeeper 内部端口&lt;/p&gt;
&lt;p&gt;7.3 3888 3889 3890 是 leader 端口&lt;/p&gt;
&lt;p&gt;8. 把 zk1 复制两份，分部叫做 zk2  zk3  并修改 myid 的值为 2，3 修改 zoo.cfg 中 dataDIR 和 clientPort&lt;/p&gt;
&lt;p&gt;9. 启动三个 zookeeper&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./zkServer.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;10. 查看状态&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ./zkServer.sh status
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;十一-使用zookeepr管理solr集群dokcer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十一-使用zookeepr管理solr集群dokcer&#34;&gt;#&lt;/a&gt; 十一。使用 zookeepr 管理 solr 集群 (Dokcer)&lt;/h3&gt;
&lt;h4 id=&#34;1-准备docker-composeyml文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-准备docker-composeyml文件&#34;&gt;#&lt;/a&gt; &lt;strong&gt;1、准备&lt;/strong&gt; docker-compose.yml&lt;strong&gt; 文件&lt;/strong&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;version: &lt;span class=&#34;token string&#34;&gt;&#39;2&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;services:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  zoo1:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    image: zookeeper:3.5&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    restart: always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    container_name: zoo1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ports:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      - &lt;span class=&#34;token string&#34;&gt;&#34;2181:2181&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    environment:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ZOO_MY_ID: &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ZOO_SERVERS: &lt;span class=&#34;token assign-left variable&#34;&gt;server.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;.0.0:2688:3888 &lt;span class=&#34;token assign-left variable&#34;&gt;server.2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;zoo2:2689:3888 &lt;span class=&#34;token assign-left variable&#34;&gt;server.3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;zoo3:2690:3888&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  zoo2:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    image: zookeeper:3.5&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    restart: always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    container_name: zoo2&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ports:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      - &lt;span class=&#34;token string&#34;&gt;&#34;2182:2181&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    environment:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ZOO_MY_ID: &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ZOO_SERVERS: &lt;span class=&#34;token assign-left variable&#34;&gt;server.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;zoo1:2688:3888 &lt;span class=&#34;token assign-left variable&#34;&gt;server.2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;.0.0:2689:3888 &lt;span class=&#34;token assign-left variable&#34;&gt;server.3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;zoo3:2690:3888&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  zoo3:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    image: zookeeper:3.5&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    restart: always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    container_name: zoo3&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ports:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      - &lt;span class=&#34;token string&#34;&gt;&#34;2183:2181&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    environment:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ZOO_MY_ID: &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      ZOO_SERVERS: &lt;span class=&#34;token assign-left variable&#34;&gt;server.1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;zoo1:2688:3888 &lt;span class=&#34;token assign-left variable&#34;&gt;server.2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;zoo2:2689:3888 &lt;span class=&#34;token assign-left variable&#34;&gt;server.3&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;.0.0:2690:3888&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;2-创建镜像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-创建镜像&#34;&gt;#&lt;/a&gt; &lt;strong&gt;2、创建镜像&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;要在创建的 docker-compose.yml 文件中使用命令&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; up &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;3-进入容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-进入容器&#34;&gt;#&lt;/a&gt; &lt;strong&gt;3、进入容器&lt;/strong&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; zoo1 /bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#查看 zoo1 的状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./zkServer.sh status&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;如果出现，以下情况：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;ZooKeeper JMX enabled by default
Using config: /conf/zoo.cfg
Client port not found in static config file. Looking in dynamic config file.
grep: : No such file or directory
Client port not found in the server configs
Client port not found. Looking for secureClientPort in the static config.
Unable to find either secure or unsecure client port in any configs. Terminating.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	通过阅读我们知道他在 conf 中的 zoo.cfg 文件中缺少 **clientPort ** 我们只需要自行添加即可&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#修改之前我们先装一下 vim&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; update&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;apt-get&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-y&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#修改 zoo.fcg 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;vim&lt;/span&gt; /conf/zoo.fcg&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token assign-left variable&#34;&gt;clientPort&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2181&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;完事之后&lt;strong&gt;重启&lt;/strong&gt; zoo1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1645780920291.png&#34; alt=&#34;1645780920291&#34; /&gt;&lt;/p&gt;
&lt;p&gt;成功！！&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;4-查看所有zookeeper的状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-查看所有zookeeper的状态&#34;&gt;#&lt;/a&gt; 4、查看所有 zookeeper 的状态&lt;/h4&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; zoo3 &lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt; ./bin/zkServer.sh status&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;5-进去客户端&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-进去客户端&#34;&gt;#&lt;/a&gt; 5、进去客户端&lt;/h4&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; zoo3 zkCli.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;十二-solrcloud&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十二-solrcloud&#34;&gt;#&lt;/a&gt; 十二、SolrCloud&lt;/h3&gt;
&lt;p&gt;​	Solr 可以搭建具备容错能力和高可用的 Solr 集群。集群中集群配置、自动负载均衡和查询故障转移、			Zookeeper 集群实现集群协调管理，这些全部功能统称为 SolrCloud。&lt;/p&gt;
&lt;p&gt;​	SolrCloud 是基于 Zookeeper 进行管理的。在 Solr 中已经内置了 Zookeeper 相关内容，当执行集群创建命令会自动创建 Zookeeper 相关内容。这个使用的是 Zookeeper 的集群管理功能实现的。&lt;/p&gt;
&lt;h4 id=&#34;1搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1搭建&#34;&gt;#&lt;/a&gt; 1. 搭建&lt;/h4&gt;
&lt;h5 id=&#34;11创建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11创建&#34;&gt;#&lt;/a&gt; 1.1 创建&lt;/h5&gt;
&lt;p&gt;​	SolrCloud 已经包含在了 Solr 中，可以直接启动 Solr 集群。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ./solr -e cloud -noprompt -force
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	此命令等同于# ./solr -e cloud -force 全部参数为默认值。&lt;/p&gt;
&lt;p&gt;​	运行成功后会在 example 文件夹多出 cloud 文件夹。&lt;/p&gt;
&lt;h5 id=&#34;12停止&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12停止&#34;&gt;#&lt;/a&gt; 1.2 停止&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt; ./solr stop -all
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;13重新运行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13重新运行&#34;&gt;#&lt;/a&gt; 1.3 重新运行&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt; ./solr start -c -p 8983 -s ../example/cloud/node1/solr/ -force
 ./solr start -c -p 7574 -z localhost:9983 -s ../example/cloud/node2/solr/ -force
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;bk-comment02&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/DataBase/Redis/Redis/</guid>
            <title>Redis基础</title>
            <link>http://example.com/2022/10/07/DataBase/Redis/Redis/</link>
            <category>分布式</category>
            <category>中间件</category>
            <category>Redis基础</category>
            <category>NoSQL数据库</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#redis&#34;&gt;#&lt;/a&gt; Redis&lt;/h1&gt;
&lt;h2 id=&#34;一redis简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一redis简介&#34;&gt;#&lt;/a&gt; 一.Redis 简介&lt;/h2&gt;
&lt;h3 id=&#34;1nosql简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1nosql简介&#34;&gt;#&lt;/a&gt; 1.NoSQL 简介&lt;/h3&gt;
&lt;p&gt;​	目前市场主流数据存储都是使用关系型数据库。每次操作关系型数据库时都是 I/O 操作，I/O 操作是主要影响程序执行性能原因之一，连接数据库关闭数据库都是消耗性能的过程。尽量减少对数据库的操作，能够明显的提升程序运行效率。&lt;/p&gt;
&lt;p&gt;​	针对上面的问题，市场上就出现了各种 NoSQL (Not Only SQL, 不仅仅可以使用关系型数据库) 数据库，它们的宣传口号：不是什么样的场景都必须使用关系型数据库，一些特定的场景使用 NoSQL 数据库更好。&lt;/p&gt;
&lt;p&gt;常见 NoSQL 数据库：&lt;/p&gt;
&lt;p&gt;​	memcached ：键值对，内存型数据库，所有数据都在内存中。&lt;/p&gt;
&lt;p&gt;​	Redis: 和 Memcached 类似，还具备持久化能力。&lt;/p&gt;
&lt;p&gt;​	HBase：以列作为存储。&lt;/p&gt;
&lt;p&gt;​	MongoDB：以 Document 做存储。&lt;/p&gt;
&lt;h3 id=&#34;2redis简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2redis简介&#34;&gt;#&lt;/a&gt; 2.&lt;strong&gt;Redis 简介&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	Redis 是以 Key-Value 形式进行存储的 NoSQL 数据库。&lt;/p&gt;
&lt;p&gt;​	Redis 是使用 C 语言进行编写的。&lt;/p&gt;
&lt;p&gt;​	平时操作的数据都在内存中，效率特高，读的效率 110000/s，写 81000/s，所以多把 Redis 当做缓存工具使用。&lt;/p&gt;
&lt;p&gt;​	Redis 以 solt（槽）作为数据存储单元，每个槽中可以存储 N 多个键值对。Redis 中固定具有 16384。理论上可以实现一个槽是一个 Redis。每个向 Redis 存储数据的 key 都会进行 crc16 算法得出一个值后对 16384 取余就是这个 key 存放的 solt 位置。&lt;/p&gt;
&lt;p&gt;​	同时通过 Redis Sentinel 提供高可用，通过 Redis Cluster 提供自动分区。&lt;/p&gt;
&lt;h2 id=&#34;二-redis单机版安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-redis单机版安装&#34;&gt;#&lt;/a&gt; 二. Redis 单机版安装&lt;/h2&gt;
&lt;p&gt;​	1. 安装依赖 C 语言依赖&lt;/p&gt;
&lt;p&gt;​	redis 使用 C 语言编写，所以需要安装 C 语言库&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-y&lt;/span&gt; gcc-c++ automake autoconf libtool &lt;span class=&#34;token function&#34;&gt;make&lt;/span&gt; tcl&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​	2. 上传并解压&lt;/p&gt;
&lt;p&gt;​	把 redis-5.0.5.tar.gz 上传到 /usr/local/tmp 中&lt;/p&gt;
&lt;p&gt;​	解压文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/tmp

# tar zxf redis-5.0.5.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	3. 编译并安装&lt;/p&gt;
&lt;p&gt;​	进入解压文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cd /usr/local/tmp/redis-5.0.5/

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	编译&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# make

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# make install PREFIX=/usr/local/redis

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	4. 开启守护进程&lt;/p&gt;
&lt;p&gt;​	复制 cd /usr/local/tmp/redis-5.0.5 / 中 redis.conf 配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cp redis.conf /usr/local/redis/bin/

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	修改配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/local/redis/bin/

# vim redis.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	把 daemonize 的值由 no 修改为 yes&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-01.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	5. 修改外部访问&lt;/p&gt;
&lt;p&gt;​	在 redis5 中需要修改配置文件 redis.conf 允许外部访问。需要修改两处。&lt;/p&gt;
&lt;p&gt;​	注释掉下面&lt;/p&gt;
&lt;p&gt;​	bind 127.0.0.1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#bind 127.0.0.1

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	protected-mode yes 改成 no&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-02.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	6. 启动并测试&lt;/p&gt;
&lt;p&gt;​	启动 redis&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./redis-server redis.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​	重启 redis&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./redis-cli shutdown

./redis-server redis.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	启动客户端工具&lt;/p&gt;
&lt;p&gt;​	在 redis5 中客户端工具对命令会有提供功能。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;./redis-cli&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;二-docker安装redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-docker安装redis&#34;&gt;#&lt;/a&gt; 二.、docker 安装 Redis&lt;/h2&gt;
&lt;p&gt;1、拉取镜像文件&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; pull redis&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;:&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;版本号&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;2、去 gitee 库中下载 redis 配置文件（docker 不自带配置文件）【也可不进行此步骤】&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议看完，先别操作，再看三，看完三之后再决定如何操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后按照文章内容进行，忽略下载。&lt;/p&gt;
&lt;p&gt;文章地址： &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yMDMyNzQuaHRt&#34;&gt;https://www.jb51.net/article/203274.htm&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;、&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;3、创建一个 redis 服务容器&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步进行了的&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;:6379 &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; myredis &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /usr/local/docker/redis.conf:/etc/redis/redis.conf &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /usr/local/docker/data:/data &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; redis redis-server /etc/redis/redis.conf &lt;span class=&#34;token parameter variable&#34;&gt;--appendonly&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;yes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;第二步没有进行的&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;:6379 &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; myredis &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /root/myredis/data:/data &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /root/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; redis redis-server /usr/local/etc/redis/redis.conf &lt;span class=&#34;token parameter variable&#34;&gt;--appendonly&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;yes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	其实也没有什么区别，只是映射的文件不同，也可以将第二步的文件直接创建到第二种创建服务容器的配置文件地址中去，这样也可使用第二个创建方式。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&#34;三redis常用的五大类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三redis常用的五大类型&#34;&gt;#&lt;/a&gt; 三.Redis 常用的五大类型&lt;/h2&gt;
&lt;p&gt;​	 Redis 不仅仅支持简单的 k/v 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储，它还支持数据的备份，即 master-slave 模式的数据备份，同样 Redis 支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。&lt;/p&gt;
&lt;p&gt;​        Redis 支持的五大数据类型包括 String（字符串  用法： 键  值），Hash（哈希 类似 Java 中的 map  用法： 键  键值对），List（列表  用法：键 集合 不可以重复），Set（集合 用法：键 集合 可以重复），Zset（sorted set 有序集合    用法： 键  值 值）&lt;/p&gt;
&lt;h3 id=&#34;string字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#string字符串&#34;&gt;#&lt;/a&gt; String（字符串）&lt;/h3&gt;
&lt;p&gt;​	string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如 jpg 图片或者序列化的对象。string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。&lt;/p&gt;
&lt;p&gt;应用场景：&lt;/p&gt;
&lt;p&gt;​	String 是最常用的一种数据类型，普通的 key/value 存储都可以归为此类，value 其实不仅是 String，&lt;/p&gt;
&lt;p&gt;也可以是数字：比如想知道什么时候封锁一个 IP 地址 (访问超过几次)。&lt;/p&gt;
&lt;h3 id=&#34;hash哈希&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hash哈希&#34;&gt;#&lt;/a&gt; Hash（哈希）&lt;/h3&gt;
&lt;p&gt;​	Redis hash 是一个键值 (key=&amp;gt;value) 对集合。&lt;/p&gt;
&lt;p&gt;​	Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。&lt;/p&gt;
&lt;p&gt;​	使用场景：存储、读取、修改用户属性&lt;/p&gt;
&lt;p&gt;​	我们简单举个实例来描述下 Hash 的应用场景，比如我们要存储一个用户信息对象数据，包含以下信息：    用户 ID，为查找的 key，&lt;/p&gt;
&lt;p&gt;​    	存储的 value 用户对象包含姓名 name，年龄 age，生日 birthday 等信息，  如果用普通的 key/value 结构来存储，主要有以下 2 种存储方式：&lt;/p&gt;
&lt;p&gt;​    	第一种方式将用户 ID 作为查找 key, 把其他信息封装成一个对象以序列化的方式存储，&lt;/p&gt;
&lt;p&gt;​           如：set u001 &amp;quot;李三，18,20010101&amp;quot;&lt;/p&gt;
&lt;p&gt;​     	这种方式的缺点是，增加了序列化 / 反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入 CAS 等复杂问题。&lt;/p&gt;
&lt;p&gt;​     	第二种方法是这个用户信息对象有多少成员就存成多少个 key-value 对儿，用用户 ID + 对应属性的名称作为唯一标识来取得对应属性的值，&lt;/p&gt;
&lt;p&gt;​       	如：mset user:001:name &amp;quot;李三&amp;quot;user:001:age18 user:001:birthday &amp;quot;20010101&amp;quot;  虽然省去了序列化开销和并发问题，但是用户 ID 为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。&lt;/p&gt;
&lt;p&gt;​    	那么 Redis 提供的 Hash 很好的解决了这个问题。&lt;/p&gt;
&lt;h3 id=&#34;list列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#list列表&#34;&gt;#&lt;/a&gt; List（列表）&lt;/h3&gt;
&lt;p&gt;​	Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。&lt;/p&gt;
&lt;p&gt;应用场景：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Redis list的应用场景非常多，也是Redis最重要的数据结构之一。  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​    	我们可以轻松地实现最新消息排行等功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#set集合&#34;&gt;#&lt;/a&gt; Set（集合）&lt;/h3&gt;
&lt;p&gt;​	Redis 的 Set 是 string 类型的无序集合。&lt;/p&gt;
&lt;p&gt;​	使用场景：1. 共同好友、二度好友&lt;/p&gt;
&lt;p&gt;​			   2. 利用唯一性，可以统计访问网站的所有独立 IP&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。  




 比如在微博应用中，每个人的好友存在一个集合（set）中，这样求两个人的共同好友的操作，可能就只需要用求交集命令即可。  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​    	Redis 还为集合提供了求交集、并集、差集等操作，可以非常方便的实&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;实现方式：  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​    	set 的内部实现是一个 value 永远为 null 的 HashMap，实际就是通过计算 hash 的方式来快速排重的，这也是 set 能提供判断一个成员是否在集合内的原因。&lt;/p&gt;
&lt;h3 id=&#34;zsetsorted-set有序集合&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#zsetsorted-set有序集合&#34;&gt;#&lt;/a&gt; zset (sorted set：有序集合)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用场景：1. 带有权重的元素，比如一个游戏的用户得分排行榜&lt;/p&gt;
&lt;p&gt;​		   2. 比较复杂的数据结构，一般用到的场景不算太多&lt;/p&gt;
&lt;h2 id=&#34;四-redis常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-redis常用命令&#34;&gt;#&lt;/a&gt; 四. Redis 常用命令&lt;/h2&gt;
&lt;p&gt;Redis 命令相关手册有很多，下面为其中比较好用的两个&lt;/p&gt;
&lt;p&gt;1.&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucmVkaXMubmV0LmNuL29yZGVyLw==&#34;&gt;https://www.redis.net.cn/order/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;2.&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2RvYy5yZWRpc2ZhbnMuY29tL3RleHQtaW4=&#34;&gt;http://doc.redisfans.com/text-in&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-key操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-key操作&#34;&gt;#&lt;/a&gt; 1. Key 操作&lt;/h3&gt;
&lt;h4 id=&#34;11-exists&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-exists&#34;&gt;#&lt;/a&gt; 1.1  exists&lt;/h4&gt;
&lt;p&gt;​	判断 key 是否存在。&lt;/p&gt;
&lt;p&gt;​	语法：exists key 名称&lt;/p&gt;
&lt;p&gt;​	返回值：存在返回数字，不存在返回 0&lt;/p&gt;
&lt;h4 id=&#34;12-expire&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-expire&#34;&gt;#&lt;/a&gt; 1.2 expire&lt;/h4&gt;
&lt;p&gt;​	设置 key 的过期时间，单位秒&lt;/p&gt;
&lt;p&gt;​	语法：expire key 秒数&lt;/p&gt;
&lt;p&gt;​	返回值：成功返回 1，失败返回 0&lt;/p&gt;
&lt;h4 id=&#34;13-ttl&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-ttl&#34;&gt;#&lt;/a&gt; 1.3 ttl&lt;/h4&gt;
&lt;p&gt;​	查看 key 的剩余过期时间&lt;/p&gt;
&lt;p&gt;​	语法：ttl key&lt;/p&gt;
&lt;p&gt;​	返回值：返回剩余时间，如果不过期返回 - 1&lt;/p&gt;
&lt;h4 id=&#34;14-del&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-del&#34;&gt;#&lt;/a&gt; 1.4 del&lt;/h4&gt;
&lt;p&gt;​	根据 key 删除键值对。&lt;/p&gt;
&lt;p&gt;​	语法：del key&lt;/p&gt;
&lt;p&gt;​	返回值：被删除 key 的数量&lt;/p&gt;
&lt;h3 id=&#34;2-字符串值string&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-字符串值string&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;字符串值 (String)&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;21-set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-set&#34;&gt;#&lt;/a&gt; 2.1 &lt;strong&gt;set&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	设置指定 key 的值&lt;/p&gt;
&lt;p&gt;​	语法：set key value&lt;/p&gt;
&lt;p&gt;​	返回值：成功 OK&lt;/p&gt;
&lt;h4 id=&#34;22-get&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-get&#34;&gt;#&lt;/a&gt; 2.2 &lt;strong&gt;get&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	获取指定 key 的值&lt;/p&gt;
&lt;p&gt;​	语法：get key&lt;/p&gt;
&lt;p&gt;​	返回值：key 的值。不存在返回 nil&lt;/p&gt;
&lt;h4 id=&#34;23-setnx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-setnx&#34;&gt;#&lt;/a&gt; 2.3 &lt;strong&gt;setnx&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	当且仅当 key 不存在时才新增。&lt;/p&gt;
&lt;p&gt;​	语法：setnx key value&lt;/p&gt;
&lt;p&gt;​	返回值：不存在时返回 1，存在返回 0&lt;/p&gt;
&lt;h4 id=&#34;24-setex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-setex&#34;&gt;#&lt;/a&gt; 2.4 &lt;strong&gt;setex&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	设置 key 的存活时间，无论是否存在指定 key 都能新增，如果存在 key 覆盖旧值。同时必须指定过期时间。&lt;/p&gt;
&lt;p&gt;​	语法：setex key seconds value&lt;/p&gt;
&lt;p&gt;​	返回值：OK&lt;/p&gt;
&lt;h3 id=&#34;3哈希表hash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3哈希表hash&#34;&gt;#&lt;/a&gt; 3.&lt;strong&gt; 哈希表 (Hash)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	Hash 类型的值中包含多组 field value。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-03.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;31-hset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-hset&#34;&gt;#&lt;/a&gt; 3.1 &lt;strong&gt;hset&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	给 key 中 field 设置值。&lt;/p&gt;
&lt;p&gt;​	语法：hset key field value&lt;/p&gt;
&lt;p&gt;​	返回值：成功 1，失败 0&lt;/p&gt;
&lt;h4 id=&#34;32-hget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#32-hget&#34;&gt;#&lt;/a&gt; 3.2 &lt;strong&gt;hget&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	获取 key 中某个 field 的值&lt;/p&gt;
&lt;p&gt;​	语法：hget key field&lt;/p&gt;
&lt;p&gt;​	返回值：返回 field 的内容&lt;/p&gt;
&lt;h4 id=&#34;33-hmset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-hmset&#34;&gt;#&lt;/a&gt; 3.3 &lt;strong&gt;hmset&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	给 key 中多个 filed 设置值&lt;/p&gt;
&lt;p&gt;​	语法：hmset key field value field value&lt;/p&gt;
&lt;p&gt;​	返回值：成功 OK&lt;/p&gt;
&lt;h4 id=&#34;34-hmget&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-hmget&#34;&gt;#&lt;/a&gt; 3.4 &lt;strong&gt;hmget&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	一次获取 key 中多个 field 的值&lt;/p&gt;
&lt;p&gt;​	语法：hmget key field field&lt;/p&gt;
&lt;p&gt;​	返回值：value 列表&lt;/p&gt;
&lt;h4 id=&#34;35-hvals&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-hvals&#34;&gt;#&lt;/a&gt; 3.5 &lt;strong&gt;hvals&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	获取 key 中所有 field 的值&lt;/p&gt;
&lt;p&gt;​	语法：hvals key&lt;/p&gt;
&lt;p&gt;​	返回值：value 列表&lt;/p&gt;
&lt;h4 id=&#34;36-hgetall&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#36-hgetall&#34;&gt;#&lt;/a&gt; 3.6 &lt;strong&gt;hgetall&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	获取所有 field 和 value&lt;/p&gt;
&lt;p&gt;​	语法：hgetall key&lt;/p&gt;
&lt;p&gt;​	返回值：field 和 value 交替显示列表&lt;/p&gt;
&lt;h4 id=&#34;37-hdel&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#37-hdel&#34;&gt;#&lt;/a&gt; 3.7 &lt;strong&gt;hdel&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	删除 key 中任意个 field&lt;/p&gt;
&lt;p&gt;​	语法：hdel key field field&lt;/p&gt;
&lt;p&gt;​	返回值：成功删除 field 的数量&lt;/p&gt;
&lt;h3 id=&#34;4-列表list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-列表list&#34;&gt;#&lt;/a&gt; 4. &lt;strong&gt;列表（List）&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;41-rpush&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-rpush&#34;&gt;#&lt;/a&gt; 4.1 &lt;strong&gt;Rpush&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	向列表末尾中插入一个或多个值&lt;/p&gt;
&lt;p&gt;​	语法；rpush key value value&lt;/p&gt;
&lt;p&gt;​	返回值：列表长度&lt;/p&gt;
&lt;h4 id=&#34;42-lrange&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-lrange&#34;&gt;#&lt;/a&gt; 4.2 &lt;strong&gt;lrange&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	返回列表中指定区间内的值。可以使用 - 1 代表列表末尾&lt;/p&gt;
&lt;p&gt;​	语法：lrange list 0 -1&lt;/p&gt;
&lt;p&gt;​	返回值：查询到的值&lt;/p&gt;
&lt;h4 id=&#34;43-lpush&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-lpush&#34;&gt;#&lt;/a&gt; 4.3 &lt;strong&gt;lpush&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	将一个或多个值插入到列表前面&lt;/p&gt;
&lt;p&gt;​	语法：lpush key value value&lt;/p&gt;
&lt;p&gt;​	返回值：列表长度&lt;/p&gt;
&lt;h4 id=&#34;44-llen&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44-llen&#34;&gt;#&lt;/a&gt; 4.4 &lt;strong&gt;llen&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	获取列表长度&lt;/p&gt;
&lt;p&gt;​	语法：llen key&lt;/p&gt;
&lt;p&gt;​	返回值：列表长度&lt;/p&gt;
&lt;h4 id=&#34;45-lrem&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#45-lrem&#34;&gt;#&lt;/a&gt; 4.5 &lt;strong&gt;lrem&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	删除列表中元素。count 为正数表示从左往右删除的数量。负数从右往左删除的数量。&lt;/p&gt;
&lt;p&gt;​	语法：lrem key count value&lt;/p&gt;
&lt;p&gt;​	返回值：删除数量。&lt;/p&gt;
&lt;h3 id=&#34;5-集合set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-集合set&#34;&gt;#&lt;/a&gt; 5 &lt;strong&gt;集合 (Set)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	set 和 java 中集合一样。&lt;/p&gt;
&lt;h4 id=&#34;51-sadd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#51-sadd&#34;&gt;#&lt;/a&gt; 5.1 &lt;strong&gt;sadd&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	向集合中添加内容。不允许重复。&lt;/p&gt;
&lt;p&gt;​	语法：sadd key value value value&lt;/p&gt;
&lt;p&gt;​	返回值：集合长度&lt;/p&gt;
&lt;h4 id=&#34;52-scard&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#52-scard&#34;&gt;#&lt;/a&gt; 5.2 &lt;strong&gt;scard&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	返回集合元素数量&lt;/p&gt;
&lt;p&gt;​	语法：scard key&lt;/p&gt;
&lt;p&gt;​	返回值：集合长度&lt;/p&gt;
&lt;h4 id=&#34;53-smembers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#53-smembers&#34;&gt;#&lt;/a&gt; 5.3 **smembers **&lt;/h4&gt;
&lt;p&gt;​	查看集合中元素内容&lt;/p&gt;
&lt;p&gt;​	语法：smembers key&lt;/p&gt;
&lt;p&gt;​	返回值：集合中元素&lt;/p&gt;
&lt;h3 id=&#34;6-有序集合sorted-set&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-有序集合sorted-set&#34;&gt;#&lt;/a&gt; 6 .&lt;strong&gt; 有序集合（Sorted Set）&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	有序集合中每个 value 都有一个分数（score），根据分数进行排序。&lt;/p&gt;
&lt;h4 id=&#34;61-zadd&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#61-zadd&#34;&gt;#&lt;/a&gt; 6.1 &lt;strong&gt;zadd&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	向有序集合中添加数据&lt;/p&gt;
&lt;p&gt;​	语法：zadd key score value score value&lt;/p&gt;
&lt;p&gt;​	返回值：长度&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h4 id=&#34;62-zrange&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#62-zrange&#34;&gt;#&lt;/a&gt; 6.2 &lt;strong&gt;zrange&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	返回区间内容想・，withscores 表示带有分数&lt;/p&gt;
&lt;p&gt;​	语法：zrange key 区间 [withscores]&lt;/p&gt;
&lt;p&gt;​	返回值：值列表&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&#34;五-redis持久化策略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-redis持久化策略&#34;&gt;#&lt;/a&gt; 五、 &lt;strong&gt;Redis 持久化策略&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​	Redis 不仅仅是一个内存型数据库，还具备持久化能力。&lt;/p&gt;
&lt;h3 id=&#34;1-rdb&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-rdb&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;RDB&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	rdb 模式是默认模式，可以在指定的时间间隔内生成数据快照（snapshot），默认保存到 dump.rdb 文件中。当 redis 重启后会自动加载 dump.rdb 文件中内容到内存中。&lt;/p&gt;
&lt;p&gt;​	用户可以使用 SAVE（同步）或 BGSAVE（异步）手动保存数据。&lt;/p&gt;
&lt;p&gt;​	可以设置服务器配置的 save 选项，让服务器每隔一段时间自动执行一次 BGSAVE 命令，可以通过 save 选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行 BGSAVE 命令。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;save 900 1&lt;/p&gt;
&lt;p&gt;save 300 10&lt;/p&gt;
&lt;p&gt;save 60 10000&lt;/p&gt;
&lt;p&gt;那么只要满足以下三个条件中的任意一个，BGSAVE 命令就会被执行&lt;/p&gt;
&lt;p&gt;服务器在 900 秒之内，对数据库进行了至少 1 次修改&lt;/p&gt;
&lt;p&gt;服务器在 300 秒之内，对数据库进行了至少 10 次修改&lt;/p&gt;
&lt;p&gt;服务器在 60 秒之内，对数据库进行了至少 10000 次修改&lt;/p&gt;
&lt;h4 id=&#34;11-优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-优点&#34;&gt;#&lt;/a&gt; 1.1 &lt;strong&gt;优点&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	rdb 文件是一个紧凑文件，直接使用 rdb 文件就可以还原数据。&lt;/p&gt;
&lt;p&gt;​	数据保存会由一个子进程进行保存，不影响父进程。&lt;/p&gt;
&lt;p&gt;​	恢复数据的效率要高于 aof&lt;/p&gt;
&lt;h4 id=&#34;12-缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-缺点&#34;&gt;#&lt;/a&gt; 1.2 &lt;strong&gt;缺点&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	每次保存点之间导致 redis 不可意料的关闭，可能会丢失数据。&lt;/p&gt;
&lt;p&gt;​	由于每次保存数据都需要 fork () 子进程，在数据量比较大时可能会比较耗费性能。&lt;/p&gt;
&lt;h3 id=&#34;2-aof&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-aof&#34;&gt;#&lt;/a&gt; 2 &lt;strong&gt;AOF&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	AOF 默认是关闭的，需要在配置文件中开启 AOF。Redis 支持 AOF 和 RDB 同时生效，如果同时存在，AOF 优先级高于 RDB（Redis 重新启动时会使用 AOF 进行数据恢复）&lt;/p&gt;
&lt;p&gt;​	监听执行的命令，如果发现执行了修改数据的操作，同时直接同步到数据库文件中。&lt;/p&gt;
&lt;h4 id=&#34;21-优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-优点&#34;&gt;#&lt;/a&gt; 2.1 &lt;strong&gt;优点&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	相对 RDB 数据更加安全。&lt;/p&gt;
&lt;h4 id=&#34;22-缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-缺点&#34;&gt;#&lt;/a&gt; 2.2 &lt;strong&gt;缺点&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	相同数据集 AOF 要大于 RDB。&lt;/p&gt;
&lt;p&gt;​	相对 RDB 可能会慢一些。&lt;/p&gt;
&lt;h4 id=&#34;23-开启办法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-开启办法&#34;&gt;#&lt;/a&gt; 2.3 &lt;strong&gt;开启办法&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	修改 redis.conf 中&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# 默认no

appendonly yes

# aof文件名

appendfilename &amp;quot;appendonly.aof&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;六-redis主从复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#六-redis主从复制&#34;&gt;#&lt;/a&gt; 六. &lt;strong&gt;Redis 主从复制&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​	Redis 支持集群功能。为了保证单一节点可用性，redis 支持主从复制功能。每个节点有 N 个复制品（replica），其中一个复制品是主（master），另外 N-1 个复制品是从（Slave），也就是说 Redis 支持一主多从。&lt;/p&gt;
&lt;p&gt;​	一个主可有多个从，而一个从又可以看成主，它还可以有多个从。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-04.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-主从优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-主从优点&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;主从优点&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	增加单一节点的健壮性，从而提升整个集群的稳定性。（Redis 中当超过 1/2 节点不可用时，整个集群不可用）&lt;/p&gt;
&lt;p&gt;​	从节点可以对主节点数据备份，提升容灾能力。&lt;/p&gt;
&lt;p&gt;​	读写分离。在 redis 主从中，主节点一般用作写（具备读的能力），从节点只能读，利用这个特性实现读写分离，写用主，读用从。&lt;/p&gt;
&lt;h4 id=&#34;11-一主多从搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#11-一主多从搭建&#34;&gt;#&lt;/a&gt; 1.1 &lt;strong&gt;一主多从搭建&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	在已经搭建的单机版 redis 基础上进行操作。&lt;/p&gt;
&lt;p&gt;​	并且关闭 redis 单机版&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
./redis-cli shutdown

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;12-新建目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#12-新建目录&#34;&gt;#&lt;/a&gt; 1.2 &lt;strong&gt;新建目录&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
# mkdir /usr/local/replica

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;13-复制目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#13-复制目录&#34;&gt;#&lt;/a&gt; 1.3 &lt;strong&gt;复制目录&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	把之前安装的 redis 单机版中 bin 目录复制三份，分别叫做：master、slave1、slave2&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cp -r /usr/local/redis/bin /usr/local/replica/master

# cp -r /usr/local/redis/bin /usr/local/replica/slave1

# cp -r /usr/local/redis/bin /usr/local/replica/slave2

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;14-修改从的配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#14-修改从的配置文件&#34;&gt;#&lt;/a&gt; 1.4 &lt;strong&gt;修改从的配置文件&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	修改 2 个从的 redis.conf，指定主节点 ip 和端口。并修改自身端口号防止和其他 redis 冲突。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# vim /usr/local/replica/slave1/redis.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	指定主节点 ip 和端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
replicaof 192.168.93.10 6379

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	修改自己端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
port 6380

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
# vim /usr/local/replica/slave2/redis.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	指定主节点 ip 和端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
replicaof 192.168.93.10 6379

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	修改自己端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
port 6381

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;15-启动三个redis实例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#15-启动三个redis实例&#34;&gt;#&lt;/a&gt; 1.5 &lt;strong&gt;启动三个 redis 实例&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	注意：一定要关闭单机的 redis，否则端口冲突。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cd /usr/local/replica

# vim startup.sh

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	在文件中添加下面内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
cd /usr/local/replica/master/

./redis-server redis.conf

  cd /usr/local/replica/slave1

./redis-server redis.conf

  cd /usr/local/replica/slave2

./redis-server redis.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;赋予权限
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
# chmod a+x startup.sh

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	开启&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# ./startup.sh

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;16-查看启动状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#16-查看启动状态&#34;&gt;#&lt;/a&gt; 1.6 &lt;strong&gt;查看启动状态&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
# ps aux|grep redis

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-05.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;17-测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#17-测试&#34;&gt;#&lt;/a&gt; 1.7 &lt;strong&gt;测试&lt;/strong&gt; *&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
# cd /usr/local/replica/master/

# ./redis-cli 

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-06.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	在客户端命令行模式下，添加一条数据：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-07.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​	进去 slave 查看数据是否同步。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cd /usr/local/replica/slave1

# ./redis-cli -p 6380

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-08.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-docker下操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-docker下操作&#34;&gt;#&lt;/a&gt; 2、docker 下操作&lt;/h3&gt;
&lt;p&gt;​	可以自定义&lt;strong&gt; redis.conf&lt;/strong&gt; 文件只写要修改的，不改的就别写，这里主要是要书写&lt;strong&gt;新的端口号&lt;/strong&gt;以及&lt;strong&gt;父节点&lt;/strong&gt;的&lt;strong&gt; ip 和端口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 注意：** 所有修改必须在容器外，容器内修改无效，在退出重启的那一刻就已经还原了&lt;/p&gt;
&lt;p&gt;我们通常使用  CP 来修改&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt;  &lt;span class=&#34;token function&#34;&gt;cp&lt;/span&gt;  本机文件路径   容器id: 容器内文件路径&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#所有路径是所在文件夹路径，并不是文件的路径，简单来说就是写到文件夹所在路径即可，不需要指定特定文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;1-修改端口号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-修改端口号&#34;&gt;#&lt;/a&gt; 1、修改端口号&lt;/h4&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;h4 id=&#34;2-指定父节点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-指定父节点&#34;&gt;#&lt;/a&gt; 2、指定父节点&lt;/h4&gt;
&lt;p&gt;同上&lt;/p&gt;
&lt;h4 id=&#34;3-重启&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-重启&#34;&gt;#&lt;/a&gt; 3、重启&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;（如果在启动前修改不需要，这里是指已经启动了的容器，在修改之后的操作）&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; restart 容器id&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h4 id=&#34;4-测试并查看&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-测试并查看&#34;&gt;#&lt;/a&gt; 4、测试并查看&lt;/h4&gt;
&lt;p&gt;・同上&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;role&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;或者&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;info replication&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;七-哨兵sentinel&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#七-哨兵sentinel&#34;&gt;#&lt;/a&gt; 七.  &lt;strong&gt;哨兵（Sentinel）&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​	在 redis 主从默认是只有主具备写的能力，而从只能读。如果主宕机，整个节点不具备写能力。但是如果这是让一个从变成主，整个节点就可以继续工作。即使之前的主恢复过来也当做这个节点的从即可。&lt;/p&gt;
&lt;p&gt;​	Redis 的哨兵就是帮助监控整个节点的，当节点主宕机等情况下，帮助重新选取主。&lt;/p&gt;
&lt;p&gt;​	Redis 中哨兵支持单哨兵和多哨兵。单哨兵是只要这个哨兵发现 master 宕机了，就直接选取另一个 master。而多哨兵是根据我们设定，达到一定数量哨兵认为 master 宕机后才会进行重新选取主。我们以多哨兵演示。&lt;/p&gt;
&lt;h3 id=&#34;1-没有哨兵下主从效果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-没有哨兵下主从效果&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;没有哨兵下主从效果&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	只要杀掉主，整个节点无法在写数据，从身份不会变化，主的信息还是以前的信息。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-09.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2搭建多哨兵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2搭建多哨兵&#34;&gt;#&lt;/a&gt; 2.&lt;strong&gt; 搭建多哨兵&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	前提：安装了单机的 redis&lt;/p&gt;
&lt;h4 id=&#34;21-新建目录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#21-新建目录&#34;&gt;#&lt;/a&gt; 2.1 &lt;strong&gt;新建目录&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
# mkdir /usr/local/sentinel

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;22-复制redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#22-复制redis&#34;&gt;#&lt;/a&gt; 2.2 &lt;strong&gt;复制 redis&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
# cp -r /usr/local/redis/bin/* /usr/local/sentinel

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;23-复制配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-复制配置文件&#34;&gt;#&lt;/a&gt; 2.3 &lt;strong&gt;复制配置文件&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	从 redis 解压目录中复制 sentinel 配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cd /usr/local/tmp/redis-5.0.5/

# cp sentinel.conf /usr/local/sentinel/

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;24-修改配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-修改配置文件&#34;&gt;#&lt;/a&gt; 2.4 &lt;strong&gt;修改配置文件&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
# cd /usr/local/sentinel

# vim sentinel.conf



port 26379

daemonize yes

#这个提示里面的/var/log/redis/redis.log日志文件指的是容器中的文件，千万别理解为宿主机中的路径，如果你在宿主机创建此文件并授权，最后结果也是一样的，理解这一点很重要。

logfile “/usr/local/sentinel/26379.log”



sentinel monitor mymaster 192.168.93.10 6379 2

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	复制 sentinel.conf，命名为 sentinel-26380.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cp sentinel.conf sentinel-26380.conf

# vim sentinel-26380.conf



port 26380

daemonize yes

logfile “/usr/local/sentinel/26380.log”

sentinel monitor mymaster 192.168.93.10 6379 2

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;复制 sentinel.conf，命名为 sentinel-26381.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cp sentinel.conf sentinel-26381.conf

# vim sentinel-26381.conf



port 26381

daemonize yes

logfile “/usr/local/sentinel/26381.log”

sentinel monitor mymaster 192.168.93.10 6379 2

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;25-启动主从&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-启动主从&#34;&gt;#&lt;/a&gt; 2.5 &lt;strong&gt;启动主从&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	如果已经启动状态，忽略下面命令。如果启动部分，全部 kill 后重新启动。&lt;/p&gt;
&lt;p&gt;​	使用 kill 杀死全部 redis&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# ps aux|grep redis

# kill -9 进程号

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	启动 redis 主从&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cd /usr/local/replica

# ./startup.sh

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;26-启动三个哨兵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-启动三个哨兵&#34;&gt;#&lt;/a&gt; 2.6 &lt;strong&gt;启动三个哨兵&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
# cd /usr/local/sentinel

# ./redis-sentinel sentinel.conf

# ./redis-sentinel sentinel-26380.conf

# ./redis-sentinel sentinel-26381.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;27-查看日志&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#27-查看日志&#34;&gt;#&lt;/a&gt; 2.7 &lt;strong&gt;查看日志&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
# cat 26379.log

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;28-测试宕机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#28-测试宕机&#34;&gt;#&lt;/a&gt; 2.8 &lt;strong&gt;测试宕机&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;​	查看 redis 进程号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# ps aux|grep redis

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	杀死主进程号&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# kill -9 进程号

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	查看日志，短暂延迟后会发现，出现新的主。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cat 26379.log

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;八-集群cluster-nt-have-doc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#八-集群cluster-nt-have-doc&#34;&gt;#&lt;/a&gt; 八。集群 (Cluster)--nt have doc&lt;/h2&gt;
&lt;p&gt;​	前提：已经安装好 redis 单机版。&lt;/p&gt;
&lt;p&gt;​	当集群中超过或等于 1/2 节点不可用时，整个集群不可用。为了搭建稳定集群，都采用奇数节点。&lt;/p&gt;
&lt;h3 id=&#34;1-复制redis配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-复制redis配置文件&#34;&gt;#&lt;/a&gt; 1 .&lt;strong&gt; 复制 redis 配置文件&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	从 /usr/local/redis/bin 下把 redis.conf 复制到当前目录中，命名为 redis-7001.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cp /usr/local/redis/bin/redis.conf /usr/local/redis/bin/redis-7001.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-修改redis-7001conf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-修改redis-7001conf&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;修改 redis-7001.conf&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
# cd /usr/local/redis/bin

# vim redis-7001.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	需要修改如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
port 7001

cluster-enabled yes

cluster-config-file nodes-7001.conf

cluster-node-timeout 15000

# appendonly yes 如果开启aof默认，需要修改为yes。如果使用rdb，此处不需要修改

daemonize yes

protected-mode no

pidfile /var/run/redis_7001.pid

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-复制配置文件并修改内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-复制配置文件并修改内容&#34;&gt;#&lt;/a&gt; 3 .&lt;strong&gt; 复制配置文件，并修改内容&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	把 redis-7001.conf 复制 5 份，分别叫做 redis-7002.conf、redis-7003.conf、redis-7004.conf、redis-7005.conf、redis-7006.conf&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# cp redis-7001.conf redis-7002.conf

# cp redis-7001.conf redis-7003.conf

# cp redis-7001.conf redis-7004.conf

# cp redis-7001.conf redis-7005.conf

# cp redis-7001.conf redis-7006.conf

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;新复制的5个配置文件都需要需改三处。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	例如 nodes-7002.conf 中需要把所有 7001 都换成 7002。&lt;/p&gt;
&lt;p&gt;​	可以使用 :% s/7001/7002/g 进行全局修改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
port 7002

cluster-config-file nodes-7002.conf

pidfile /var/run/redis_7002.pid

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-启动6个redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-启动6个redis&#34;&gt;#&lt;/a&gt; 4 .&lt;strong&gt; 启动 6 个 redis&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	可以使用 redis-server 结合 6 个配置文件进行启动 6 个实例。&lt;/p&gt;
&lt;p&gt;​	执行之前一定要先删除 dump.rdb&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# rm -f dump.rdb

# vim startup.sh



./redis-server redis-7001.conf

./redis-server redis-7002.conf

./redis-server redis-7003.conf

./redis-server redis-7004.conf

./redis-server redis-7005.conf

./redis-server redis-7006.conf





# chmod a+x startup.sh

# ./startup.sh

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5-查看启动状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-查看启动状态&#34;&gt;#&lt;/a&gt; 5. &lt;strong&gt;查看启动状态&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-10.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;6-建立集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-建立集群&#34;&gt;#&lt;/a&gt; 6. &lt;strong&gt;建立集群&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	在 redis3 的时候需要借助 ruby 脚本实现集群。在 redis5 中可以使用自带的 redis-cli 实现集群功能，比 redis3 的时候更加方便了。&lt;/p&gt;
&lt;p&gt;​	建议配置静态 ip，ip 改变集群失效&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
./redis-cli --cluster create 192.168.93.10:7001 192.168.93.10:7002 192.168.93.10:7003 192.168.93.10:7004 192.168.93.10:7005 192.168.93.10:7006 --cluster-replicas 1

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7-测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-测试&#34;&gt;#&lt;/a&gt; 7. &lt;strong&gt;测试&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;​	集群测试时，千万不要忘记最后一个 - c 参数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# ./redis-cli -p 7001 -c

# set age 18

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8-编写关闭脚本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#8-编写关闭脚本&#34;&gt;#&lt;/a&gt; 8 .&lt;strong&gt; 编写关闭脚本&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
# vim stop.sh

# chmod a+x stop.sh



./redis-cli -p 7001 shutdown

./redis-cli -p 7002 shutdown

./redis-cli -p 7003 shutdown

./redis-cli -p 7004 shutdown

./redis-cli -p 7005 shutdown

./redis-cli -p 7006 shutdown

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;八-集群cluster-pathdocker&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#八-集群cluster-pathdocker&#34;&gt;#&lt;/a&gt; 八。集群 (Cluster)-PATH:docker&lt;/h2&gt;
&lt;p&gt;​	&lt;strong&gt;注：&lt;strong&gt;1. 如果是配置修改之前&lt;/strong&gt;已经创建过的集群时&lt;/strong&gt;，要先进行第七步操作。&lt;/p&gt;
&lt;p&gt;​			2. 要是想重启集群可以省略第一步，但是得&lt;strong&gt;先删除已经创建的容器&lt;/strong&gt;，重新进行 2、3（合并也行）&lt;/p&gt;
&lt;h3 id=&#34;0-创建网络&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#0-创建网络&#34;&gt;#&lt;/a&gt; 0、创建网络&lt;/h3&gt;
&lt;p&gt;** 目的：** 让宿主机可以访问到自身&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; network create net-redis &lt;span class=&#34;token parameter variable&#34;&gt;--subnet&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;172.38&lt;/span&gt;.0.0/16&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;补充：关于虚拟机的三种网路连接方式区别&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlmZW5nbWlhb3podWFuL2FydGljbGUvZGV0YWlscy83OTg4NzY5Mj9zcG09MTAwMS4yMTAxLjMwMDEuNjY2MS4xJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnRfdDAubm9uZS10YXNrLWJsb2ctMg==&#34;&gt;http://blog.csdn.net/bifengmiaozhuan/article/details/79887692?spm=1001.2101.3001.6661.1&amp;amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2&lt;/span&gt;&lt;sub&gt;default&lt;/sub&gt;CTRLIST&lt;sub&gt;Rate-1.pc_relevant_default&amp;amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2&lt;/sub&gt;default&lt;sub&gt;CTRLIST&lt;/sub&gt;Rate-1.pc_relevant_default&amp;amp;utm_relevant_index=1&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-创建并修改配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-创建并修改配置文件&#34;&gt;#&lt;/a&gt; 1、创建并修改配置文件&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
In certain deployments, Redis Cluster nodes address discovery fails, because addresses are NAT-ted or because ports are forwarded (the typical case is Docker and other containers).



在某些部署中，Redis群集节点地址发现失败，因为地址是NAT，或者端口是转发的（典型情况是Docker和其他容器）。



In order to make Redis Cluster working in such environments, a static configuration where each node knows its public address is needed. The following two options are used for this scope, and are:



为了让Redis集群在这样的环境中工作，需要一种静态配置，其中每个节点都知道自己的公共地址。以下两个选项用于此范围，分别是：



cluster-announce-ip



cluster-announce-port

---------------------------------------------------------------------------------------

你的docker内网是172，你宿主的IP是192网段



根据redis的配置文件中的解释



要在你的配置文件上加上上面的2个配置

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** 方法一：** 参考上面的方法一样行。&lt;/p&gt;
&lt;p&gt;** 方法二：** 使用脚本&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#cat &amp;lt;&amp;lt;EOF EOF 在这里没有特殊的含义，你可以使用 FOE 或 000 等；&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#表示以 cat &amp;lt;&amp;lt;EOF 开始输入以 EOF 结束结束输入&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#cat &gt; 创建文件，并把标准输入输出到后面的 filename 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * cluster-announce-ip					&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.1.195	&lt;span class=&#34;token comment&#34;&gt;#* 群集 ip&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * cluster-announce-port				&lt;span class=&#34;token number&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;		&lt;span class=&#34;token comment&#34;&gt;#* 群集总线端口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; * cluster-announce-bus-port&lt;span class=&#34;token comment&#34;&gt;#* 群集 ip    1700$&amp;#123;port&amp;#125;	   #* 群集公布端口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 集群 ip 是固定 + 10000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 可以使用 :  % s/7001/7002/g     进行全局修改。 --- 将全局的 7001 修改成 7002&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token for-or-select variable&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;seq&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt;  &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt;  /root/myredis/conf700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;touch&lt;/span&gt;  /root/myredis/conf700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;/redis.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;TTT&lt;span class=&#34;token bash punctuation&#34;&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; /root/myredis/conf700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;/redis.conf port &lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;bind 0.0.0.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;port 700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cluster-enabled yes&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cluster-config-file nodes-700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;.conf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cluster-node-timeout 15000&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;protected-mode no&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pidfile /var/run/redis_ 700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;.pid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cluster-announce-ip  192.168.1.195 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cluster-announce-port  700$&amp;#123;port) &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cluster-announce-bus-port 1700$&amp;#123;port) &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;appendonly yes &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;TTT&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;2-创建容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-创建容器&#34;&gt;#&lt;/a&gt; 2、创建容器&lt;/h3&gt;
&lt;p&gt;** 方法一：** 手动创建容器，并启动&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7001&lt;/span&gt;:7001   &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;17001&lt;/span&gt;:17001  &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; redis7001  &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /root/myredis/conf7001/redis.conf:/etc/redis/redis.conf &lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /root/myredis/data7001:/data &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; redis redis-server /etc/redis/redis.conf &lt;span class=&#34;token parameter variable&#34;&gt;--appendonly&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;yes&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;​	7002 ~~~7006 同上，自行修改参数&lt;/p&gt;
&lt;p&gt;** 方法二：** 脚本一键启动，效果同上&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;其中要指定两个端口号 **-p 1700&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mn&gt;1700&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;{port}:1700&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.80952em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; {port}** 不要忘记，否则会在创建几群的时候出现  **Waiting for the cluster to join   ** 。【具体原因，我还没查出来，后面补充】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 docker 创建集群容器的时候，&lt;strong&gt;一定要&lt;/strong&gt; 指定  ip&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;补充：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;那肯定是你端口没有开启，不要质疑，这里的端口不是 7000-7005，而是 17000-17005，因为 redis 设置集群的端口号是”redis 端口 + 10000“，这个非常重要。并且 7001:7006 也是必须打开的。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token for-or-select variable&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;seq&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; run &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;700&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;:700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;   &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1700&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;:1700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;  &lt;span class=&#34;token parameter variable&#34;&gt;--name&lt;/span&gt; redis700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /root/redis/redis700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;.conf:/etc/redis/redis.conf &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-v&lt;/span&gt; /root/redis/data700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;:/data &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;--ip&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.1.195 redis redis-server /etc/redis/redis.conf &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;3-进入容器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-进入容器&#34;&gt;#&lt;/a&gt; 3、进入容器&lt;/h3&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;exec&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-it&lt;/span&gt; redis7001 /bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;4-创建集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-创建集群&#34;&gt;#&lt;/a&gt; 4、创建集群&lt;/h3&gt;
&lt;p&gt;​	** 注：** 有一步操作，要自行进行确认，一定要输入 &lt;strong&gt;yes&lt;/strong&gt; 而不是 &lt;strong&gt;y&lt;/strong&gt; 或者其他之类的，除了 yes 一律视为 &lt;strong&gt;no&lt;/strong&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis-cli &lt;span class=&#34;token parameter variable&#34;&gt;--cluster&lt;/span&gt; create &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.1.195:7001 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.1.195:7002 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.1.195:7003 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.1.195:7004 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.1.195:7005 &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.1.195:7006 --cluster-replicas &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;5-测试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-测试&#34;&gt;#&lt;/a&gt; 5、测试&lt;/h3&gt;
&lt;p&gt;​	集群测试时，千万不要忘记最后一个 - c 参数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shel&#34;&gt;
redis-cli -p 7001 -c

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6-关闭集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6-关闭集群&#34;&gt;#&lt;/a&gt; 6、关闭集群&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;方法一：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	自行手动一个一个停止，并且删除容器&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; stop redis7001 &lt;span class=&#34;token comment&#34;&gt;#7002 ~~~7006&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; redis7001&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;方法二：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	脚本程序，一劳永逸&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token for-or-select variable&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;seq&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; stop redis700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; redis700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;7-清空集群文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#7-清空集群文件&#34;&gt;#&lt;/a&gt; 7、清空集群文件&lt;/h3&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token for-or-select variable&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;seq&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;rm&lt;/span&gt;  &lt;span class=&#34;token parameter variable&#34;&gt;-rf&lt;/span&gt;  ./data700&lt;span class=&#34;token variable&#34;&gt;$&amp;#123;port&amp;#125;&lt;/span&gt;/* &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;九-jedis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#九-jedis&#34;&gt;#&lt;/a&gt; 九. &lt;strong&gt;Jedis&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​	Redis 给 Java 语言提供了客户端 API，称之为 Jedis。&lt;/p&gt;
&lt;p&gt;​	Jedis API 和 Redis 命令几乎是一样的。&lt;/p&gt;
&lt;p&gt;​	例如：Redis 对 String 值新增时 set 命令，Jedis 中也是 set 方法。所以本课程中没有重点把所有方法进行演示，重要演示 Jedis 如何使用。&lt;/p&gt;
&lt;p&gt;​	Jedis API 特别简单，基本上都是创建对象调用方法即可。&lt;/p&gt;
&lt;h3 id=&#34;1-单机版&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-单机版&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;单机版&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
public void testStandalone()&amp;#123;

    Jedis jedis = new Jedis(&amp;quot;192.168.93.10&amp;quot;,6379);

    jedis.set(&amp;quot;name&amp;quot;,&amp;quot;msb-standalone&amp;quot;);

    String value = jedis.get(&amp;quot;name&amp;quot;);

    System.out.println(value);

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-带有连接池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-带有连接池&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;带有连接池&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
public void testPool()&amp;#123;

    JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();

    jedisPoolConfig.setMaxTotal(20);

    jedisPoolConfig.setMaxIdle(5);

    jedisPoolConfig.setMinIdle(3);

    JedisPool jedisPool = new JedisPool(jedisPoolConfig,&amp;quot;192.168.93.10&amp;quot;,6379);

    Jedis jedis = jedisPool.getResource();

    jedis.set(&amp;quot;name&amp;quot;,&amp;quot;msb-pool&amp;quot;);

    String value = jedis.get(&amp;quot;name&amp;quot;);

    System.out.println(value);

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-集群&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-集群&#34;&gt;#&lt;/a&gt; 3. &lt;strong&gt;集群&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
public void testCluster()&amp;#123;

    Set&amp;lt;HostAndPort&amp;gt; set = new HashSet&amp;lt;&amp;gt;();

    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7001));

    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7002));

    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7003));

    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7004));

    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7005));

    set.add(new HostAndPort(&amp;quot;192.168.93.10&amp;quot;,7006));

    JedisCluster jedisCluster = new JedisCluster(set);

    jedisCluster.set(&amp;quot;name&amp;quot;,&amp;quot;bjmsb&amp;quot;);

    String value = jedisCluster.get(&amp;quot;name&amp;quot;);

    System.out.println(value);

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;十-使用springboot整合springdataredis操作redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十-使用springboot整合springdataredis操作redis&#34;&gt;#&lt;/a&gt; 十. &lt;strong&gt;使用 SpringBoot 整合 SpringDataRedis 操作 redis&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​	Spring Data 是 Spring 公司的顶级项目，里面包含了 N 多个二级子项目，这些子项目都是相对独立的项目。每个子项目是对不同 API 的封装。&lt;/p&gt;
&lt;p&gt;​	所有 Spring Boot 整合 Spring Data xxxx 的启动器都叫做 spring-boot-starter-data-xxxx&lt;/p&gt;
&lt;p&gt;​	Spring Data 好处很方便操作对象类型。&lt;/p&gt;
&lt;p&gt;​	把 Redis 不同值得类型放到一个 opsForXXX 方法中。&lt;/p&gt;
&lt;p&gt;​		opsForValue : String 值&lt;/p&gt;
&lt;p&gt;​		opsForList : 列表 List&lt;/p&gt;
&lt;p&gt;​		opsForHash: 哈希表 Hash&lt;/p&gt;
&lt;p&gt;​		opsForZSet: 有序集合 Sorted Set&lt;/p&gt;
&lt;p&gt;​		opsForSet : 集合&lt;/p&gt;
&lt;h3 id=&#34;1-添加依赖&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-添加依赖&#34;&gt;#&lt;/a&gt; 1. &lt;strong&gt;添加依赖&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
 	&amp;lt;parent&amp;gt;

        &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;

        &amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;

        &amp;lt;version&amp;gt;2.2.2.RELEASE&amp;lt;/version&amp;gt;

    &amp;lt;/parent&amp;gt;



    &amp;lt;dependencies&amp;gt;

        &amp;lt;dependency&amp;gt;

            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;

            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;

        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;

            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;

            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;

            &amp;lt;version&amp;gt;2.2.5.RELEASE&amp;lt;/version&amp;gt;

        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;

            &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;

            &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;

            &amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;

        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;

            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;

            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;

            &amp;lt;version&amp;gt;5.1.47&amp;lt;/version&amp;gt;

        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;

            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;

            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;

            &amp;lt;version&amp;gt;2.2.2.RELEASE&amp;lt;/version&amp;gt;

        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;

            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;

            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;

            &amp;lt;version&amp;gt;1.18.20&amp;lt;/version&amp;gt;

        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;

            &amp;lt;groupId&amp;gt;redis.clients&amp;lt;/groupId&amp;gt;

            &amp;lt;artifactId&amp;gt;jedis&amp;lt;/artifactId&amp;gt;

            &amp;lt;version&amp;gt;3.3.0&amp;lt;/version&amp;gt;

        &amp;lt;/dependency&amp;gt;

    &amp;lt;/dependencies&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-配置配置文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-配置配置文件&#34;&gt;#&lt;/a&gt; 2. &lt;strong&gt;配置配置文件&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;spring.redis.host=localhost 默认值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;spring.redis.port=6379 端口号默认值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;
mybatis:

  mapper-locations: classpath:mybatis/*

  type-aliases-package: com.msb.pojo

spring:

  datasource:

    url: jdbc:mysql://localhost:3306/mydb

    username: root

    password: root

    driver-class-name: com.mysql.jdbc.Driver

  redis:

    host: 192.168.1.195

    cluster:

      nodes: 192.168.1.195:7001,192.168.1.195:7002,192.168.1.195:7003,192.168.1.195:7004,192.168.1.195:7005,192.168.1.195:7006

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3编写配置类可直接复制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3编写配置类可直接复制&#34;&gt;#&lt;/a&gt; 3.&lt;strong&gt; 编写配置类&lt;/strong&gt;（可直接复制）&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;
@Configuration

public class RedisConfig &amp;#123;

    @Bean

    public RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate(RedisConnectionFactory 		  factory)&amp;#123;

        RedisTemplate&amp;lt;String,Object&amp;gt; redisTemplate = new RedisTemplate&amp;lt;&amp;gt;();

        redisTemplate.setConnectionFactory(factory);

        redisTemplate.setKeySerializer(new StringRedisSerializer());

        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&amp;lt;Object&amp;gt;(Object.class));

        return redisTemplate;

    &amp;#125;

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4-编写代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-编写代码&#34;&gt;#&lt;/a&gt; 4. &lt;strong&gt;编写代码&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&#34;41-编写对象新增&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#41-编写对象新增&#34;&gt;#&lt;/a&gt; 4.1 &lt;strong&gt;编写对象新增&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
@Autowired

private RedisTemplate&amp;lt;String, Object&amp;gt; redisTemplate;



@Test

public void testString() &amp;#123;

    People peo = new People(1, &amp;quot;张三&amp;quot;);

    redisTemplate.opsForValue().set(&amp;quot;peo1&amp;quot;, peo);

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;42-编写对象获取&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#42-编写对象获取&#34;&gt;#&lt;/a&gt; 4.2 &lt;strong&gt;编写对象获取&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;此处必须编写值序列化器。不指定时返回类型为 LinkedHashMap&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
@Test

public void testGetString() &amp;#123;

    redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&amp;lt;People&amp;gt;(People.class));

    People peo = (People) redisTemplate.opsForValue().get(&amp;quot;peo1&amp;quot;);

    System.out.println(peo);

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;43-编写list&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#43-编写list&#34;&gt;#&lt;/a&gt; 4.3 &lt;strong&gt;编写 List&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
@Test

public void testList() &amp;#123;

    List&amp;lt;People&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();

    list.add(new People(1, &amp;quot;张三&amp;quot;));

    list.add(new People(2, &amp;quot;李四&amp;quot;));

    redisTemplate.opsForValue().set(&amp;quot;list2&amp;quot;, list);

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;44-编写list取值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#44-编写list取值&#34;&gt;#&lt;/a&gt; 4.4 &lt;strong&gt;编写 List 取值&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;
@Test

public void testGetList()&amp;#123;

    redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&amp;lt;List&amp;gt;(List.class));

    List&amp;lt;People&amp;gt; list2 = (List&amp;lt;People&amp;gt;) redisTemplate.opsForValue().get(&amp;quot;list2&amp;quot;);

    System.out.println(list2);

&amp;#125;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;十一-使用redis效果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十一-使用redis效果&#34;&gt;#&lt;/a&gt; 十一. &lt;strong&gt;使用 Redis 效果&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;​	使用缓存流程&lt;/p&gt;
&lt;p&gt;​	1. 先判断缓存中是否存在。如果存在直接从缓存中取出数据。不执行 2，3 步骤&lt;/p&gt;
&lt;p&gt;​	2. 如果不存在，从 mysql 中获取数据&lt;/p&gt;
&lt;p&gt;​	3. 获取数据后，把数据缓存到 redis 中&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2022/10/07/DataBase/Redis/Redis/Redis-11.jpg&#34; class=&#34;&#34;&gt;&lt;/p&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;bk-comment02&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
    </channel>
</rss>
