{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"redis基础\" tag",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Redis/",
            "url": "http://example.com/2022/10/07/Redis/",
            "title": "Redis基础",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><h3 id=\"一-Redis简介\"><a href=\"#一-Redis简介\" class=\"headerlink\" title=\"一.Redis简介\"></a>一.Redis简介</h3><h4 id=\"1-NoSQL简介\"><a href=\"#1-NoSQL简介\" class=\"headerlink\" title=\"1.NoSQL简介\"></a>1.NoSQL简介</h4><p>​\t目前市场主流数据存储都是使用关系型数据库。每次操作关系型数据库时都是I&#x2F;O操作，I&#x2F;O操作是主要影响程序执行性能原因之一，连接数据库关闭数据库都是消耗性能的过程。尽量减少对数据库的操作，能够明显的提升程序运行效率。</p>\n<p>​\t针对上面的问题，市场上就出现了各种NoSQL(Not Only SQL,不仅仅可以使用关系型数据库)数据库，它们的宣传口号：不是什么样的场景都必须使用关系型数据库，一些特定的场景使用NoSQL数据库更好。</p>\n<p>常见NoSQL数据库：</p>\n<p>​\tmemcached ：键值对，内存型数据库，所有数据都在内存中。</p>\n<p>​\tRedis:和Memcached类似，还具备持久化能力。</p>\n<p>​\tHBase：以列作为存储。</p>\n<p>​\tMongoDB：以Document做存储。</p>\n<h4 id=\"2-Redis简介\"><a href=\"#2-Redis简介\" class=\"headerlink\" title=\"2.Redis简介\"></a>2.<strong>Redis简介</strong></h4><p>​\tRedis是以Key-Value形式进行存储的NoSQL数据库。</p>\n<p>​\tRedis是使用C语言进行编写的。</p>\n<p>​\t平时操作的数据都在内存中，效率特高，读的效率110000&#x2F;s，写81000&#x2F;s，所以多把Redis当做缓存工具使用。</p>\n<p>​\tRedis以solt（槽）作为数据存储单元，每个槽中可以存储N多个键值对。Redis中固定具有16384。理论上可以实现一个槽是一个Redis。每个向Redis存储数据的key都会进行crc16算法得出一个值后对16384取余就是这个key存放的solt位置。</p>\n<p>​\t同时通过Redis Sentinel提供高可用，通过Redis Cluster提供自动分区。</p>\n<h3 id=\"二-Redis单机版安装\"><a href=\"#二-Redis单机版安装\" class=\"headerlink\" title=\"二. Redis单机版安装\"></a>二. Redis单机版安装</h3><p>​\t1.安装依赖C语言依赖</p>\n<p>​\tredis使用C语言编写，所以需要安装C语言库</p>\n<pre><code># yum install -y gcc-c++ automake autoconf libtool make tcl \n</code></pre>\n<p>​\t</p>\n<p>​\t2.上传并解压</p>\n<p>​\t把redis-5.0.5.tar.gz上传到&#x2F;usr&#x2F;local&#x2F;tmp中</p>\n<p>​\t解压文件</p>\n<pre><code># cd /usr/local/tmp\n\n# tar zxf redis-5.0.5.tar.gz\n</code></pre>\n<p>​\t3.编译并安装</p>\n<p>​\t进入解压文件夹</p>\n<pre><code># cd /usr/local/tmp/redis-5.0.5/\n</code></pre>\n<p>​\t编译</p>\n<pre><code># make\n</code></pre>\n<p>​\t安装\t</p>\n<pre><code># make install PREFIX=/usr/local/redis\n</code></pre>\n<p>​\t4.开启守护进程</p>\n<p>​\t复制cd &#x2F;usr&#x2F;local&#x2F;tmp&#x2F;redis-5.0.5&#x2F;中redis.conf配置文件\t</p>\n<pre><code># cp redis.conf /usr/local/redis/bin/\n</code></pre>\n<p>​\t修改配置文件\t</p>\n<pre><code># cd /usr/local/redis/bin/\n\n# vim redis.conf\n</code></pre>\n<p>​\t把daemonize的值由no修改为yes</p>\n<img data-src=\"/2022/10/07/Redis/Redis-01.jpg\" class=\"\">\n\n<p>​\t5.修改外部访问</p>\n<p>​\t在redis5中需要修改配置文件redis.conf允许外部访问。需要修改两处。</p>\n<p>​\t注释掉下面</p>\n<p>​\tbind 127.0.0.1</p>\n<pre><code>#bind 127.0.0.1\n</code></pre>\n<p>​\tprotected-mode yes 改成 no</p>\n<img data-src=\"/2022/10/07/Redis/Redis-02.jpg\" class=\"\">\n\n<p>​\t6.启动并测试</p>\n<p>​\t启动redis</p>\n<pre><code class=\"shell\">./redis-server redis.conf\n</code></pre>\n<p>​\t重启redis</p>\n<pre><code>./redis-cli shutdown\n./redis-server redis.conf\n</code></pre>\n<p>​\t启动客户端工具</p>\n<p>​\t在redis5中客户端工具对命令会有提供功能。</p>\n<pre><code class=\"shell\">./redis-cli \n</code></pre>\n<h3 id=\"二-、docker安装Redis\"><a href=\"#二-、docker安装Redis\" class=\"headerlink\" title=\"二.、docker安装Redis\"></a>二.、docker安装Redis</h3><p>1、拉取镜像文件</p>\n<pre><code class=\"shell\">docker pull redis[:(版本号)]\n</code></pre>\n<p>2、去gitee库中下载redis配置文件（docker不自带配置文件）【也可不进行此步骤】</p>\n<p><strong>建议看完，先别操作，再看三，看完三之后再决定如何操作</strong></p>\n<p>然后按照文章内容进行，忽略下载。</p>\n<p>文章地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yMDMyNzQuaHRt\">https://www.jb51.net/article/203274.htm</span> </p>\n<p>、</p>\n<p><img data-src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\1645177895314.png\" alt=\"1645177895314\"></p>\n<p>3、创建一个redis 服务容器 </p>\n<p><strong>第二步进行了的</strong></p>\n<pre><code class=\"shell\">docker run -p 6379:6379 --name myredis -v /usr/local/docker/redis.conf:/etc/redis/redis.conf -v /usr/local/docker/data:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes\n</code></pre>\n<p><strong>第二步没有进行的</strong></p>\n<pre><code class=\"shell\">docker run -p 6379:6379 --name myredis -v /root/myredis/data:/data -v /root/myredis/conf/redis.conf:/usr/local/etc/redis/redis.conf -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes\n</code></pre>\n<p><strong>区别：</strong></p>\n<p>​\t其实也没有什么区别，只是映射的文件不同，也可以将第二步的文件直接创建到第二种创建服务容器的配置文件地址中去，这样也可使用第二个创建方式。</p>\n<p><img data-src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\1645177877202.png\" alt=\"1645177877202\"></p>\n<p><img data-src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\1645177918077.png\" alt=\"1645177918077\"></p>\n<h3 id=\"三-Redis常用的五大类型\"><a href=\"#三-Redis常用的五大类型\" class=\"headerlink\" title=\"三.Redis常用的五大类型\"></a>三.Redis常用的五大类型</h3><p>​\t Redis不仅仅支持简单的k&#x2F;v类型的数据，同时还提供list，set，zset，hash等数据结构的存储，它还支持数据的备份，即master-slave模式的数据备份，同样Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</p>\n<p>​        Redis支持的五大数据类型包括String（字符串  用法： 键  值），Hash（哈希 类似Java中的 map  用法： 键  键值对），List（列表  用法：键 集合 不可以重复），Set（集合 用法：键 集合 可以重复），Zset（sorted set 有序集合    用法： 键  值 值）</p>\n<h4 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h4><p>​\tstring 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p>\n<p>应用场景：  </p>\n<p>​\tString是最常用的一种数据类型，普通的key&#x2F;value存储都可以归为此类，value其实不仅是String，  </p>\n<p>也可以是数字：比如想知道什么时候封锁一个IP地址(访问超过几次)。</p>\n<h4 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h4><p>​\tRedis hash 是一个键值(key&#x3D;&gt;value)对集合。</p>\n<p>​\tRedis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>\n<p>​\t使用场景：存储、读取、修改用户属性</p>\n<p>​\t我们简单举个实例来描述下Hash的应用场景，比如我们要存储一个用户信息对象数据，包含以下信息：    用户ID，为查找的key，  </p>\n<p>​    \t存储的value用户对象包含姓名name，年龄age，生日birthday 等信息，  如果用普通的key&#x2F;value结构来存储，主要有以下2种存储方式：  </p>\n<p>​    \t第一种方式将用户ID作为查找key,把其他信息封装成一个对象以序列化的方式存储，  </p>\n<p>​           如：set u001 “李三,18,20010101”  </p>\n<p>​     \t这种方式的缺点是，增加了序列化&#x2F;反序列化的开销，并且在需要修改其中一项信息时，需要把整个对象取回，并且修改操作需要对并发进行保护，引入CAS等复杂问题。  </p>\n<p>​     \t第二种方法是这个用户信息对象有多少成员就存成多少个key-value对儿，用用户ID+对应属性的名称作为唯一标识来取得对应属性的值，  </p>\n<p>​       \t如：mset user:001:name “李三 “user:001:age18 user:001:birthday “20010101”  虽然省去了序列化开销和并发问题，但是用户ID为重复存储，如果存在大量这样的数据，内存浪费还是非常可观的。  </p>\n<p>​    \t那么Redis提供的Hash很好的解决了这个问题。</p>\n<h4 id=\"List（列表）\"><a href=\"#List（列表）\" class=\"headerlink\" title=\"List（列表）\"></a>List（列表）</h4><p>​\tRedis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p>\n<p>应用场景：  </p>\n<pre><code>    Redis list的应用场景非常多，也是Redis最重要的数据结构之一。  \n</code></pre>\n<p>​    \t我们可以轻松地实现最新消息排行等功能。  </p>\n<pre><code>   Lists的另一个应用就是消息队列，可以利用Lists的PUSH操作，将任务存在Lists中，然后工作线程再用POP操作将任务取出进行执行。  \n</code></pre>\n<h4 id=\"Set（集合）\"><a href=\"#Set（集合）\" class=\"headerlink\" title=\"Set（集合）\"></a>Set（集合）</h4><p>​\tRedis的Set是string类型的无序集合。</p>\n<p>​\t使用场景：1.共同好友、二度好友 </p>\n<p>​\t\t\t   2. 利用唯一性，可以统计访问网站的所有独立 IP </p>\n<pre><code>  Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以自动排重的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。  \n \n  比如在微博应用中，每个人的好友存在一个集合（set）中，这样求两个人的共同好友的操作，可能就只需要用求交集命令即可。  \n</code></pre>\n<p>​    \tRedis还为集合提供了求交集、并集、差集等操作，可以非常方便的实  </p>\n<pre><code>  实现方式：  \n</code></pre>\n<p>​    \tset 的内部实现是一个 value永远为null的HashMap，实际就是通过计算hash的方式来快速排重的，这也是set能提供判断一个成员是否在集合内的原因。 </p>\n<h4 id=\"zset-sorted-set：有序集合\"><a href=\"#zset-sorted-set：有序集合\" class=\"headerlink\" title=\"zset(sorted set：有序集合)\"></a>zset(sorted set：有序集合)</h4><pre><code> Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。\n</code></pre>\n<p>使用场景：1.带有权重的元素，比如一个游戏的用户得分排行榜 </p>\n<p>​\t\t   2.比较复杂的数据结构，一般用到的场景不算太多</p>\n<h3 id=\"四-Redis常用命令\"><a href=\"#四-Redis常用命令\" class=\"headerlink\" title=\"四. Redis常用命令\"></a>四. Redis常用命令</h3><p>Redis命令相关手册有很多，下面为其中比较好用的两个</p>\n<p>  1.<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmVkaXMubmV0LmNuL29yZGVyLw==\">https://www.redis.net.cn/order/</span></p>\n<p>  2.<span class=\"exturl\" data-url=\"aHR0cDovL2RvYy5yZWRpc2ZhbnMuY29tL3RleHQtaW4=\">http://doc.redisfans.com/text-in</span></p>\n<h4 id=\"1-Key操作\"><a href=\"#1-Key操作\" class=\"headerlink\" title=\"1. Key操作\"></a>1. Key操作</h4><h5 id=\"1-1-exists\"><a href=\"#1-1-exists\" class=\"headerlink\" title=\"1.1  exists\"></a>1.1  exists</h5><p>​\t判断key是否存在。</p>\n<p>​\t语法：exists key名称</p>\n<p>​\t返回值：存在返回数字，不存在返回0</p>\n<h5 id=\"1-2-expire\"><a href=\"#1-2-expire\" class=\"headerlink\" title=\"1.2 expire\"></a>1.2 expire</h5><p>​\t设置key的过期时间，单位秒</p>\n<p>​\t语法：expire key 秒数</p>\n<p>​\t返回值：成功返回1，失败返回0</p>\n<h5 id=\"1-3-ttl\"><a href=\"#1-3-ttl\" class=\"headerlink\" title=\"1.3 ttl\"></a>1.3 ttl</h5><p>​\t查看key的剩余过期时间</p>\n<p>​\t语法：ttl key</p>\n<p>​\t返回值：返回剩余时间，如果不过期返回-1</p>\n<h5 id=\"1-4-del\"><a href=\"#1-4-del\" class=\"headerlink\" title=\"1.4 del\"></a>1.4 del</h5><p>​\t根据key删除键值对。</p>\n<p>​\t语法：del key</p>\n<p>​\t返回值：被删除key的数量</p>\n<h4 id=\"2-字符串值-String\"><a href=\"#2-字符串值-String\" class=\"headerlink\" title=\"2. 字符串值(String)\"></a>2. <strong>字符串值(String)</strong></h4><h5 id=\"2-1-set\"><a href=\"#2-1-set\" class=\"headerlink\" title=\"2.1 set\"></a>2.1 <strong>set</strong></h5><p>​\t设置指定key的值</p>\n<p>​\t语法：set key value</p>\n<p>​\t返回值：成功OK</p>\n<h5 id=\"2-2-get\"><a href=\"#2-2-get\" class=\"headerlink\" title=\"2.2 get\"></a>2.2 <strong>get</strong></h5><p>​\t获取指定key的值</p>\n<p>​\t语法：get key</p>\n<p>​\t返回值：key的值。不存在返回nil</p>\n<h5 id=\"2-3-setnx\"><a href=\"#2-3-setnx\" class=\"headerlink\" title=\"2.3 setnx\"></a>2.3 <strong>setnx</strong></h5><p>​\t当且仅当key不存在时才新增。</p>\n<p>​\t语法：setnx key value</p>\n<p>​\t返回值：不存在时返回1，存在返回0</p>\n<h5 id=\"2-4-setex\"><a href=\"#2-4-setex\" class=\"headerlink\" title=\"2.4 setex\"></a>2.4 <strong>setex</strong></h5><p>​\t设置key的存活时间，无论是否存在指定key都能新增，如果存在key覆盖旧值。同时必须指定过期时间。</p>\n<p>​\t语法：setex key seconds value</p>\n<p>​\t返回值：OK</p>\n<h4 id=\"3-哈希表-Hash\"><a href=\"#3-哈希表-Hash\" class=\"headerlink\" title=\"3.哈希表(Hash)\"></a>3.<strong>哈希表(Hash)</strong></h4><p>​\tHash类型的值中包含多组field value。</p>\n<img data-src=\"/2022/10/07/Redis/Redis-03.jpg\" class=\"\">\n\n<h5 id=\"3-1-hset\"><a href=\"#3-1-hset\" class=\"headerlink\" title=\"3.1 hset\"></a>3.1 <strong>hset</strong></h5><p>​\t给key中field设置值。</p>\n<p>​\t语法：hset key field value</p>\n<p>​\t返回值：成功1，失败0</p>\n<h5 id=\"3-2-hget\"><a href=\"#3-2-hget\" class=\"headerlink\" title=\"3.2 hget\"></a>3.2 <strong>hget</strong></h5><p>​\t获取key中某个field的值</p>\n<p>​\t语法：hget key field </p>\n<p>​\t返回值：返回field的内容</p>\n<h5 id=\"3-3-hmset\"><a href=\"#3-3-hmset\" class=\"headerlink\" title=\"3.3 hmset\"></a>3.3 <strong>hmset</strong></h5><p>​\t给key中多个filed设置值</p>\n<p>​\t语法：hmset key field value field value</p>\n<p>​\t返回值：成功OK</p>\n<h5 id=\"3-4-hmget\"><a href=\"#3-4-hmget\" class=\"headerlink\" title=\"3.4 hmget\"></a>3.4 <strong>hmget</strong></h5><p>​\t一次获取key中多个field的值</p>\n<p>​\t语法：hmget key field field</p>\n<p>​\t返回值：value列表</p>\n<h5 id=\"3-5-hvals\"><a href=\"#3-5-hvals\" class=\"headerlink\" title=\"3.5 hvals\"></a>3.5 <strong>hvals</strong></h5><p>​\t获取key中所有field的值</p>\n<p>​\t语法：hvals key</p>\n<p>​\t返回值：value列表</p>\n<h5 id=\"3-6-hgetall\"><a href=\"#3-6-hgetall\" class=\"headerlink\" title=\"3.6 hgetall\"></a>3.6 <strong>hgetall</strong></h5><p>​\t获取所有field和value</p>\n<p>​\t语法：hgetall key</p>\n<p>​\t返回值：field和value交替显示列表</p>\n<h5 id=\"3-7-hdel\"><a href=\"#3-7-hdel\" class=\"headerlink\" title=\"3.7 hdel\"></a>3.7 <strong>hdel</strong></h5><p>​\t删除key中任意个field</p>\n<p>​\t语法：hdel key field field</p>\n<p>​\t返回值：成功删除field的数量</p>\n<h4 id=\"4-列表（List）\"><a href=\"#4-列表（List）\" class=\"headerlink\" title=\"4. 列表（List）\"></a>4. <strong>列表（List）</strong></h4><h5 id=\"4-1-Rpush\"><a href=\"#4-1-Rpush\" class=\"headerlink\" title=\"4.1 Rpush\"></a>4.1 <strong>Rpush</strong></h5><p>​\t向列表末尾中插入一个或多个值</p>\n<p>​\t语法；rpush key value value</p>\n<p>​\t返回值：列表长度</p>\n<h5 id=\"4-2-lrange\"><a href=\"#4-2-lrange\" class=\"headerlink\" title=\"4.2 lrange\"></a>4.2 <strong>lrange</strong></h5><p>​\t返回列表中指定区间内的值。可以使用-1代表列表末尾</p>\n<p>​\t语法：lrange list 0 -1</p>\n<p>​\t返回值：查询到的值</p>\n<h5 id=\"4-3-lpush\"><a href=\"#4-3-lpush\" class=\"headerlink\" title=\"4.3 lpush\"></a>4.3 <strong>lpush</strong></h5><p>​\t将一个或多个值插入到列表前面</p>\n<p>​\t语法：lpush key value value</p>\n<p>​\t返回值：列表长度</p>\n<h5 id=\"4-4-llen\"><a href=\"#4-4-llen\" class=\"headerlink\" title=\"4.4 llen\"></a>4.4 <strong>llen</strong></h5><p>​\t获取列表长度</p>\n<p>​\t语法：llen key</p>\n<p>​\t返回值：列表长度</p>\n<h5 id=\"4-5-lrem\"><a href=\"#4-5-lrem\" class=\"headerlink\" title=\"4.5 lrem\"></a>4.5 <strong>lrem</strong></h5><p>​\t删除列表中元素。count为正数表示从左往右删除的数量。负数从右往左删除的数量。</p>\n<p>​\t语法：lrem key count value</p>\n<p>​\t返回值：删除数量。</p>\n<h4 id=\"5-集合-Set\"><a href=\"#5-集合-Set\" class=\"headerlink\" title=\"5 集合(Set)\"></a>5 <strong>集合(Set)</strong></h4><p>​\tset和java中集合一样。</p>\n<h5 id=\"5-1-sadd\"><a href=\"#5-1-sadd\" class=\"headerlink\" title=\"5.1 sadd\"></a>5.1 <strong>sadd</strong></h5><p>​\t向集合中添加内容。不允许重复。</p>\n<p>​\t语法：sadd key value value value</p>\n<p>​\t返回值：集合长度</p>\n<h5 id=\"5-2-scard\"><a href=\"#5-2-scard\" class=\"headerlink\" title=\"5.2 scard\"></a>5.2 <strong>scard</strong></h5><p>​\t返回集合元素数量</p>\n<p>​\t语法：scard key</p>\n<p>​\t返回值：集合长度</p>\n<h5 id=\"5-3-smembers\"><a href=\"#5-3-smembers\" class=\"headerlink\" title=\"5.3 **smembers **\"></a>5.3 **smembers **</h5><p>​\t查看集合中元素内容</p>\n<p>​\t语法：smembers key</p>\n<p>​\t返回值：集合中元素</p>\n<h4 id=\"6-有序集合（Sorted-Set）\"><a href=\"#6-有序集合（Sorted-Set）\" class=\"headerlink\" title=\"6 .有序集合（Sorted Set）\"></a>6 .<strong>有序集合（Sorted Set）</strong></h4><p>​\t有序集合中每个value都有一个分数（score），根据分数进行排序。</p>\n<h5 id=\"6-1-zadd\"><a href=\"#6-1-zadd\" class=\"headerlink\" title=\"6.1 zadd\"></a>6.1 <strong>zadd</strong></h5><p>​\t向有序集合中添加数据</p>\n<p>​\t语法：zadd key score value score value</p>\n<p>​\t返回值：长度</p>\n<p><img data-src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\1645195960858.png\" alt=\"1645195960858\"></p>\n<h5 id=\"6-2-zrange\"><a href=\"#6-2-zrange\" class=\"headerlink\" title=\"6.2 zrange\"></a>6.2 <strong>zrange</strong></h5><p>​\t返回区间内容想·，withscores表示带有分数</p>\n<p>​\t语法：zrange key 区间 [withscores]</p>\n<p>​\t返回值：值列表</p>\n<p><img data-src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\1645195940696.png\" alt=\"1645195940696\"></p>\n<p><img data-src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\1645195926902.png\" alt=\"1645195926902\"></p>\n<h3 id=\"五、-Redis持久化策略\"><a href=\"#五、-Redis持久化策略\" class=\"headerlink\" title=\"五、 Redis持久化策略\"></a>五、 <strong>Redis持久化策略</strong></h3><p>​\tRedis不仅仅是一个内存型数据库，还具备持久化能力。</p>\n<h4 id=\"1-RDB\"><a href=\"#1-RDB\" class=\"headerlink\" title=\"1. RDB\"></a>1. <strong>RDB</strong></h4><p>​\trdb模式是默认模式，可以在指定的时间间隔内生成数据快照（snapshot），默认保存到dump.rdb文件中。当redis重启后会自动加载dump.rdb文件中内容到内存中。</p>\n<p>​\t用户可以使用SAVE（同步）或BGSAVE（异步）手动保存数据。</p>\n<p>​\t可以设置服务器配置的save选项，让服务器每隔一段时间自动执行一次BGSAVE命令，可以通过save选项设置多个保存条件，但只要其中任意一个条件被满足，服务器就会执行BGSAVE命令。<br>　　\t例如：<br>　　\tsave 900 1<br>　　\tsave 300 10<br>　　\tsave 60 10000<br>　　那么只要满足以下三个条件中的任意一个，BGSAVE命令就会被执行<br>　　服务器在900秒之内，对数据库进行了至少1次修改<br>　　服务器在300秒之内，对数据库进行了至少10次修改<br>　　服务器在60秒之内，对数据库进行了至少10000次修改</p>\n<h5 id=\"1-1-优点\"><a href=\"#1-1-优点\" class=\"headerlink\" title=\"1.1 优点\"></a>1.1 <strong>优点</strong></h5><p>​\trdb文件是一个紧凑文件，直接使用rdb文件就可以还原数据。</p>\n<p>​\t数据保存会由一个子进程进行保存，不影响父进程。</p>\n<p>​\t恢复数据的效率要高于aof</p>\n<h5 id=\"1-2-缺点\"><a href=\"#1-2-缺点\" class=\"headerlink\" title=\"1.2 缺点\"></a>1.2 <strong>缺点</strong></h5><p>​\t每次保存点之间导致redis不可意料的关闭，可能会丢失数据。</p>\n<p>​\t由于每次保存数据都需要fork()子进程，在数据量比较大时可能会比较耗费性能。</p>\n<h4 id=\"2-AOF\"><a href=\"#2-AOF\" class=\"headerlink\" title=\"2 AOF\"></a>2 <strong>AOF</strong></h4><p>​\tAOF默认是关闭的，需要在配置文件中开启AOF。Redis支持AOF和RDB同时生效，如果同时存在，AOF优先级高于RDB（Redis重新启动时会使用AOF进行数据恢复）</p>\n<p>​\t监听执行的命令，如果发现执行了修改数据的操作，同时直接同步到数据库文件中。</p>\n<h5 id=\"2-1-优点\"><a href=\"#2-1-优点\" class=\"headerlink\" title=\"2.1 优点\"></a>2.1 <strong>优点</strong></h5><p>​\t相对RDB数据更加安全。</p>\n<h5 id=\"2-2-缺点\"><a href=\"#2-2-缺点\" class=\"headerlink\" title=\"2.2 缺点\"></a>2.2 <strong>缺点</strong></h5><p>​\t相同数据集AOF要大于RDB。</p>\n<p>​\t相对RDB可能会慢一些。</p>\n<h5 id=\"2-3-开启办法\"><a href=\"#2-3-开启办法\" class=\"headerlink\" title=\"2.3 开启办法\"></a>2.3 <strong>开启办法</strong></h5><p>​\t修改redis.conf中</p>\n<pre><code># 默认no\nappendonly yes\n# aof文件名\nappendfilename &quot;appendonly.aof&quot;\n</code></pre>\n<h3 id=\"六-Redis主从复制\"><a href=\"#六-Redis主从复制\" class=\"headerlink\" title=\"六. Redis主从复制\"></a>六. <strong>Redis主从复制</strong></h3><p>​\tRedis支持集群功能。为了保证单一节点可用性，redis支持主从复制功能。每个节点有N个复制品（replica），其中一个复制品是主（master），另外N-1个复制品是从（Slave），也就是说Redis支持一主多从。</p>\n<p>​\t一个主可有多个从，而一个从又可以看成主，它还可以有多个从。</p>\n<img data-src=\"/2022/10/07/Redis/Redis-04.jpg\" class=\"\">\n\n<h4 id=\"1-主从优点\"><a href=\"#1-主从优点\" class=\"headerlink\" title=\"1. 主从优点\"></a>1. <strong>主从优点</strong></h4><p>​\t增加单一节点的健壮性，从而提升整个集群的稳定性。（Redis中当超过1&#x2F;2节点不可用时，整个集群不可用）</p>\n<p>​\t从节点可以对主节点数据备份，提升容灾能力。</p>\n<p>​\t读写分离。在redis主从中，主节点一般用作写（具备读的能力），从节点只能读，利用这个特性实现读写分离，写用主，读用从。</p>\n<h5 id=\"1-1-一主多从搭建\"><a href=\"#1-1-一主多从搭建\" class=\"headerlink\" title=\"1.1 一主多从搭建\"></a>1.1 <strong>一主多从搭建</strong></h5><p>​\t在已经搭建的单机版redis基础上进行操作。</p>\n<p>​\t并且关闭redis单机版</p>\n<pre><code>./redis-cli shutdown\n</code></pre>\n<h5 id=\"1-2-新建目录\"><a href=\"#1-2-新建目录\" class=\"headerlink\" title=\"1.2 新建目录\"></a>1.2 <strong>新建目录</strong></h5><pre><code># mkdir /usr/local/replica\n</code></pre>\n<h5 id=\"1-3-复制目录\"><a href=\"#1-3-复制目录\" class=\"headerlink\" title=\"1.3 复制目录\"></a>1.3 <strong>复制目录</strong></h5><p>​\t把之前安装的redis单机版中bin目录复制三份，分别叫做：master、slave1、slave2</p>\n<pre><code># cp -r /usr/local/redis/bin /usr/local/replica/master\n# cp -r /usr/local/redis/bin /usr/local/replica/slave1\n# cp -r /usr/local/redis/bin /usr/local/replica/slave2\n</code></pre>\n<h5 id=\"1-4-修改从的配置文件\"><a href=\"#1-4-修改从的配置文件\" class=\"headerlink\" title=\"1.4 修改从的配置文件\"></a>1.4 <strong>修改从的配置文件</strong></h5><p>​\t修改2个从的redis.conf，指定主节点ip和端口。并修改自身端口号防止和其他redis冲突。</p>\n<pre><code># vim /usr/local/replica/slave1/redis.conf\n</code></pre>\n<p>​\t指定主节点ip和端口</p>\n<pre><code>replicaof 192.168.93.10 6379\n</code></pre>\n<p>​\t修改自己端口</p>\n<pre><code>port 6380\n</code></pre>\n<pre><code># vim /usr/local/replica/slave2/redis.conf\n</code></pre>\n<p>​\t指定主节点ip和端口</p>\n<pre><code>replicaof 192.168.93.10 6379\n</code></pre>\n<p>​\t修改自己端口</p>\n<pre><code>port 6381\n</code></pre>\n<h5 id=\"1-5-启动三个redis实例\"><a href=\"#1-5-启动三个redis实例\" class=\"headerlink\" title=\"1.5 启动三个redis实例\"></a>1.5 <strong>启动三个redis实例</strong></h5><p>​\t注意：一定要关闭单机的redis，否则端口冲突。</p>\n<pre><code># cd /usr/local/replica\n# vim startup.sh\n</code></pre>\n<p>​\t在文件中添加下面内容</p>\n<pre><code>cd /usr/local/replica/master/\n./redis-server redis.conf\n  cd /usr/local/replica/slave1\n./redis-server redis.conf\n  cd /usr/local/replica/slave2\n./redis-server redis.conf\n</code></pre>\n<pre><code> 赋予权限\n</code></pre>\n<pre><code># chmod a+x startup.sh\n</code></pre>\n<p>​\t开启</p>\n<pre><code># ./startup.sh\n</code></pre>\n<h5 id=\"1-6-查看启动状态\"><a href=\"#1-6-查看启动状态\" class=\"headerlink\" title=\"1.6 查看启动状态\"></a>1.6 <strong>查看启动状态</strong></h5><pre><code># ps aux|grep redis\n</code></pre>\n<img data-src=\"/2022/10/07/Redis/Redis-05.jpg\" class=\"\">\n\n<h5 id=\"1-7-测试\"><a href=\"#1-7-测试\" class=\"headerlink\" title=\"1.7 测试*\"></a>1.7 <strong>测试</strong>*</h5><pre><code># cd /usr/local/replica/master/\n# ./redis-cli \n</code></pre>\n<img data-src=\"/2022/10/07/Redis/Redis-06.jpg\" class=\"\">\n\n<p>​\t在客户端命令行模式下，添加一条数据：</p>\n<img data-src=\"/2022/10/07/Redis/Redis-07.jpg\" class=\"\">\n\n<p>​\t进去slave查看数据是否同步。</p>\n<pre><code># cd /usr/local/replica/slave1\n# ./redis-cli -p 6380\n</code></pre>\n<img data-src=\"/2022/10/07/Redis/Redis-08.jpg\" class=\"\">\n\n<h4 id=\"2、docker下操作\"><a href=\"#2、docker下操作\" class=\"headerlink\" title=\"2、docker下操作\"></a>2、docker下操作</h4><p>​\t可以自定义<strong>redis.conf</strong>文件只写要修改的，不改的就别写，这里主要是要书写<strong>新的端口号</strong>以及<strong>父节点</strong>的<strong>ip和端口</strong></p>\n<p><strong>注意：</strong>所有修改必须在容器外，容器内修改无效，在退出重启的那一刻就已经还原了</p>\n<p>我们通常使用  CP 来修改</p>\n<pre><code class=\"shell\">docker  cp  本机文件路径   容器id: 容器内文件路径\n#所有路径是所在文件夹路径，并不是文件的路径，简单来说就是写到文件夹所在路径即可，不需要指定特定文件\n</code></pre>\n<h5 id=\"1、修改端口号\"><a href=\"#1、修改端口号\" class=\"headerlink\" title=\"1、修改端口号\"></a>1、修改端口号</h5><p>同上</p>\n<h5 id=\"2、指定父节点\"><a href=\"#2、指定父节点\" class=\"headerlink\" title=\"2、指定父节点\"></a>2、指定父节点</h5><p>同上</p>\n<h5 id=\"3、重启\"><a href=\"#3、重启\" class=\"headerlink\" title=\"3、重启\"></a>3、重启</h5><p><strong>（如果在启动前修改不需要，这里是指已经启动了的容器，在修改之后的操作）</strong></p>\n<pre><code class=\"shell\">docker restart 容器id\n</code></pre>\n<h5 id=\"4、测试并查看\"><a href=\"#4、测试并查看\" class=\"headerlink\" title=\"4、测试并查看\"></a>4、测试并查看</h5><p>·同上</p>\n<pre><code class=\"shell\">role\n\n或者\n\ninfo replication\n</code></pre>\n<h3 id=\"七-哨兵（Sentinel）\"><a href=\"#七-哨兵（Sentinel）\" class=\"headerlink\" title=\"七.  哨兵（Sentinel）\"></a>七.  <strong>哨兵（Sentinel）</strong></h3><p>​\t在redis主从默认是只有主具备写的能力，而从只能读。如果主宕机，整个节点不具备写能力。但是如果这是让一个从变成主，整个节点就可以继续工作。即使之前的主恢复过来也当做这个节点的从即可。</p>\n<p>​\tRedis的哨兵就是帮助监控整个节点的，当节点主宕机等情况下，帮助重新选取主。</p>\n<p>​\tRedis中哨兵支持单哨兵和多哨兵。单哨兵是只要这个哨兵发现master宕机了，就直接选取另一个master。而多哨兵是根据我们设定，达到一定数量哨兵认为master宕机后才会进行重新选取主。我们以多哨兵演示。</p>\n<h4 id=\"1-没有哨兵下主从效果\"><a href=\"#1-没有哨兵下主从效果\" class=\"headerlink\" title=\"1. 没有哨兵下主从效果\"></a>1. <strong>没有哨兵下主从效果</strong></h4><p>​\t只要杀掉主，整个节点无法在写数据，从身份不会变化，主的信息还是以前的信息。</p>\n<img data-src=\"/2022/10/07/Redis/Redis-09.jpg\" class=\"\">\n\n<h4 id=\"2-搭建多哨兵\"><a href=\"#2-搭建多哨兵\" class=\"headerlink\" title=\"2.搭建多哨兵\"></a>2.<strong>搭建多哨兵</strong></h4><p>​\t前提：安装了单机的redis</p>\n<h5 id=\"2-1-新建目录\"><a href=\"#2-1-新建目录\" class=\"headerlink\" title=\"2.1 新建目录\"></a>2.1 <strong>新建目录</strong></h5><pre><code># mkdir /usr/local/sentinel\n</code></pre>\n<h5 id=\"2-2-复制redis\"><a href=\"#2-2-复制redis\" class=\"headerlink\" title=\"2.2 复制redis\"></a>2.2 <strong>复制redis</strong></h5><pre><code># cp -r /usr/local/redis/bin/* /usr/local/sentinel\n</code></pre>\n<h5 id=\"2-3-复制配置文件\"><a href=\"#2-3-复制配置文件\" class=\"headerlink\" title=\"2.3 复制配置文件\"></a>2.3 <strong>复制配置文件</strong></h5><p>​\t从redis解压目录中复制sentinel配置文件</p>\n<pre><code># cd /usr/local/tmp/redis-5.0.5/\n# cp sentinel.conf /usr/local/sentinel/\n</code></pre>\n<h5 id=\"2-4-修改配置文件\"><a href=\"#2-4-修改配置文件\" class=\"headerlink\" title=\"2.4 修改配置文件\"></a>2.4 <strong>修改配置文件</strong></h5><pre><code># cd /usr/local/sentinel\n# vim sentinel.conf\n\nport 26379\ndaemonize yes\n#这个提示里面的/var/log/redis/redis.log日志文件指的是容器中的文件，千万别理解为宿主机中的路径，如果你在宿主机创建此文件并授权，最后结果也是一样的，理解这一点很重要。\nlogfile “/usr/local/sentinel/26379.log”\n\nsentinel monitor mymaster 192.168.93.10 6379 2\n</code></pre>\n<p>​\t复制sentinel.conf，命名为sentinel-26380.conf</p>\n<pre><code># cp sentinel.conf sentinel-26380.conf\n# vim sentinel-26380.conf\n\nport 26380\ndaemonize yes\nlogfile “/usr/local/sentinel/26380.log”\nsentinel monitor mymaster 192.168.93.10 6379 2\n</code></pre>\n<p>复制sentinel.conf，命名为sentinel-26381.conf</p>\n<pre><code># cp sentinel.conf sentinel-26381.conf\n# vim sentinel-26381.conf\n\nport 26381\ndaemonize yes\nlogfile “/usr/local/sentinel/26381.log”\nsentinel monitor mymaster 192.168.93.10 6379 2\n</code></pre>\n<h5 id=\"2-5-启动主从\"><a href=\"#2-5-启动主从\" class=\"headerlink\" title=\"2.5 启动主从\"></a>2.5 <strong>启动主从</strong></h5><p>​\t如果已经启动状态，忽略下面命令。如果启动部分，全部kill后重新启动。</p>\n<p>​\t使用kill杀死全部redis</p>\n<pre><code># ps aux|grep redis\n# kill -9 进程号\n</code></pre>\n<p>​\t启动redis主从</p>\n<pre><code># cd /usr/local/replica\n# ./startup.sh\n</code></pre>\n<h5 id=\"2-6-启动三个哨兵\"><a href=\"#2-6-启动三个哨兵\" class=\"headerlink\" title=\"2.6 启动三个哨兵\"></a>2.6 <strong>启动三个哨兵</strong></h5><pre><code># cd /usr/local/sentinel\n# ./redis-sentinel sentinel.conf\n# ./redis-sentinel sentinel-26380.conf\n# ./redis-sentinel sentinel-26381.conf\n</code></pre>\n<h5 id=\"2-7-查看日志\"><a href=\"#2-7-查看日志\" class=\"headerlink\" title=\"2.7 查看日志\"></a>2.7 <strong>查看日志</strong></h5><pre><code># cat 26379.log\n</code></pre>\n<h5 id=\"2-8-测试宕机\"><a href=\"#2-8-测试宕机\" class=\"headerlink\" title=\"2.8 测试宕机\"></a>2.8 <strong>测试宕机</strong></h5><p>​\t查看redis进程号</p>\n<pre><code># ps aux|grep redis\n</code></pre>\n<p>​\t杀死主进程号</p>\n<pre><code># kill -9 进程号\n</code></pre>\n<p>​\t查看日志，短暂延迟后会发现，出现新的主。</p>\n<pre><code># cat 26379.log\n</code></pre>\n<h3 id=\"八-集群-Cluster-–nt-have-doc\"><a href=\"#八-集群-Cluster-–nt-have-doc\" class=\"headerlink\" title=\"八. 集群(Cluster)–nt have doc\"></a>八. 集群(Cluster)–nt have doc</h3><p>​\t前提：已经安装好redis单机版。</p>\n<p>​\t当集群中超过或等于1&#x2F;2节点不可用时，整个集群不可用。为了搭建稳定集群，都采用奇数节点。</p>\n<h4 id=\"1-复制redis配置文件\"><a href=\"#1-复制redis配置文件\" class=\"headerlink\" title=\"1 .复制redis配置文件\"></a>1 .<strong>复制redis配置文件</strong></h4><p>​\t从&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin下把redis.conf复制到当前目录中，命名为redis-7001.conf</p>\n<pre><code># cp /usr/local/redis/bin/redis.conf /usr/local/redis/bin/redis-7001.conf\n</code></pre>\n<h4 id=\"2-修改redis-7001-conf\"><a href=\"#2-修改redis-7001-conf\" class=\"headerlink\" title=\"2. 修改redis-7001.conf\"></a>2. <strong>修改redis-7001.conf</strong></h4><pre><code># cd /usr/local/redis/bin\n# vim redis-7001.conf\n</code></pre>\n<p>​\t需要修改如下</p>\n<pre><code>port 7001\ncluster-enabled yes\ncluster-config-file nodes-7001.conf\ncluster-node-timeout 15000\n# appendonly yes 如果开启aof默认，需要修改为yes。如果使用rdb，此处不需要修改\ndaemonize yes\nprotected-mode no\npidfile /var/run/redis_7001.pid\n</code></pre>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h4 id=\"3-复制配置文件，并修改内容\"><a href=\"#3-复制配置文件，并修改内容\" class=\"headerlink\" title=\"3 .复制配置文件，并修改内容\"></a>3 .<strong>复制配置文件，并修改内容</strong></h4><p>​\t把redis-7001.conf 复制5份，分别叫做redis-7002.conf、redis-7003.conf、redis-7004.conf、redis-7005.conf、redis-7006.conf </p>\n<pre><code># cp redis-7001.conf redis-7002.conf\n# cp redis-7001.conf redis-7003.conf\n# cp redis-7001.conf redis-7004.conf\n# cp redis-7001.conf redis-7005.conf\n# cp redis-7001.conf redis-7006.conf\n</code></pre>\n<pre><code> 新复制的5个配置文件都需要需改三处。\n</code></pre>\n<p>​\t例如nodes-7002.conf中需要把所有7001都换成7002。</p>\n<p>​\t可以使用 :%s&#x2F;7001&#x2F;7002&#x2F;g 进行全局修改。 </p>\n<pre><code>port 7002\ncluster-config-file nodes-7002.conf\npidfile /var/run/redis_7002.pid\n</code></pre>\n<h4 id=\"4-启动6个redis\"><a href=\"#4-启动6个redis\" class=\"headerlink\" title=\"4 .启动6个redis\"></a>4 .<strong>启动6个redis</strong></h4><p>​\t可以使用redis-server结合6个配置文件进行启动6个实例。</p>\n<p>​\t执行之前一定要先删除dump.rdb</p>\n<pre><code># rm -f dump.rdb\n# vim startup.sh\n\n./redis-server redis-7001.conf\n./redis-server redis-7002.conf\n./redis-server redis-7003.conf\n./redis-server redis-7004.conf\n./redis-server redis-7005.conf\n./redis-server redis-7006.conf\n\n\n# chmod a+x startup.sh\n# ./startup.sh\n</code></pre>\n<h4 id=\"5-查看启动状态\"><a href=\"#5-查看启动状态\" class=\"headerlink\" title=\"5. 查看启动状态\"></a>5. <strong>查看启动状态</strong></h4><img data-src=\"/2022/10/07/Redis/Redis-10.jpg\" class=\"\">\n\n<h4 id=\"6-建立集群\"><a href=\"#6-建立集群\" class=\"headerlink\" title=\"6. 建立集群\"></a>6. <strong>建立集群</strong></h4><p>​\t在redis3的时候需要借助ruby脚本实现集群。在redis5中可以使用自带的redis-cli实现集群功能，比redis3的时候更加方便了。</p>\n<p>​\t建议配置静态ip，ip改变集群失效</p>\n<pre><code>./redis-cli --cluster create 192.168.93.10:7001 192.168.93.10:7002 192.168.93.10:7003 192.168.93.10:7004 192.168.93.10:7005 192.168.93.10:7006 --cluster-replicas 1\n</code></pre>\n<h4 id=\"7-测试\"><a href=\"#7-测试\" class=\"headerlink\" title=\"7. 测试\"></a>7. <strong>测试</strong></h4><p>​\t集群测试时，千万不要忘记最后一个-c参数。</p>\n<pre><code># ./redis-cli -p 7001 -c\n# set age 18\n</code></pre>\n<h4 id=\"8-编写关闭脚本\"><a href=\"#8-编写关闭脚本\" class=\"headerlink\" title=\"8 .编写关闭脚本\"></a>8 .<strong>编写关闭脚本</strong></h4><pre><code># vim stop.sh\n# chmod a+x stop.sh\n\n./redis-cli -p 7001 shutdown\n./redis-cli -p 7002 shutdown\n./redis-cli -p 7003 shutdown\n./redis-cli -p 7004 shutdown\n./redis-cli -p 7005 shutdown\n./redis-cli -p 7006 shutdown\n</code></pre>\n<h3 id=\"八-集群-Cluster-PATH-docker\"><a href=\"#八-集群-Cluster-PATH-docker\" class=\"headerlink\" title=\"八. 集群(Cluster)-PATH:docker\"></a>八. 集群(Cluster)-PATH:docker</h3><p>​\t<strong>注：</strong>1.如果是配置修改之前<strong>已经创建过的集群时</strong>，要先进行第七步操作。</p>\n<p>​\t\t\t2.要是想重启集群可以省略第一步，但是得<strong>先删除已经创建的容器</strong>，重新进行2、3（合并也行）</p>\n<h4 id=\"0、创建网络\"><a href=\"#0、创建网络\" class=\"headerlink\" title=\"0、创建网络\"></a>0、创建网络</h4><p><strong>目的：</strong>让宿主机可以访问到自身</p>\n<pre><code class=\"shell\">docker network create net-redis --subnet 172.38.0.0/16\n</code></pre>\n<p>补充：关于虚拟机的三种网路连接方式区别</p>\n<p> <span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmlmZW5nbWlhb3podWFuL2FydGljbGUvZGV0YWlscy83OTg4NzY5Mj9zcG09MTAwMS4yMTAxLjMwMDEuNjY2MS4xJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfcmVsZXZhbnRfdDAubm9uZS10YXNrLWJsb2ctMn5kZWZhdWx0fkNUUkxJU1R+UmF0ZS0xLnBjX3JlbGV2YW50X2RlZmF1bHQmYW1wO2RlcHRoXzEtdXRtX3NvdXJjZT1kaXN0cmlidXRlLnBjX3JlbGV2YW50X3QwLm5vbmUtdGFzay1ibG9nLTJ+ZGVmYXVsdH5DVFJMSVNUflJhdGUtMS5wY19yZWxldmFudF9kZWZhdWx0JmFtcDt1dG1fcmVsZXZhbnRfaW5kZXg9MQ==\">http://blog.csdn.net/bifengmiaozhuan/article/details/79887692?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=1</span> </p>\n<p><img data-src=\"C:\\Users\\Lenovo\\AppData\\Roaming\\Typora\\typora-user-images\\1645532994890.png\" alt=\"1645532994890\"></p>\n<h4 id=\"1、创建并修改配置文件\"><a href=\"#1、创建并修改配置文件\" class=\"headerlink\" title=\"1、创建并修改配置文件\"></a>1、创建并修改配置文件</h4><p><strong>注：</strong></p>\n<pre><code>In certain deployments, Redis Cluster nodes address discovery fails, because addresses are NAT-ted or because ports are forwarded (the typical case is Docker and other containers).\n\n在某些部署中，Redis群集节点地址发现失败，因为地址是NAT，或者端口是转发的（典型情况是Docker和其他容器）。\n\nIn order to make Redis Cluster working in such environments, a static configuration where each node knows its public address is needed. The following two options are used for this scope, and are:\n\n为了让Redis集群在这样的环境中工作，需要一种静态配置，其中每个节点都知道自己的公共地址。以下两个选项用于此范围，分别是：\n\ncluster-announce-ip\n\ncluster-announce-port\n---------------------------------------------------------------------------------------\n你的docker内网是172，你宿主的IP是192网段\n\n根据redis的配置文件中的解释\n\n要在你的配置文件上加上上面的2个配置\n</code></pre>\n<p><strong>方法一：</strong>参考上面的方法一样行。</p>\n<p><strong>方法二：</strong>使用脚本</p>\n<pre><code class=\"shell\">#cat &lt;&lt;EOF EOF在这里没有特殊的含义，你可以使用FOE或000等;\n#表示以cat &lt;&lt;EOF 开始输入以 EOF 结束结束输入\n#cat&gt;创建文件，并把标准输入输出到后面的filename文件\n\n\n# * cluster-announce-ip\t\t\t\t\t192.168.1.195\t#*群集ip\n# * cluster-announce-port\t\t\t\t700$&#123;port&#125;\t\t#*群集总线端口\n# * cluster-announce-bus-port#*群集ip    1700$&#123;port&#125;\t   #*群集公布端口\n# 集群 ip 是固定+10000\n\n# 可以使用 :  %s/7001/7002/g     进行全局修改。 ---将全局的7001修改成7002\n\nfor port in $(seq 1 6); \\ \ndo \\\nmkdir  -p  /root/myredis/conf700$&#123;port&#125;\ntouch  /root/myredis/conf700$&#123;port&#125;/redis.conf\ncat &lt;&lt;TTT &gt; /root/myredis/conf700$&#123;port&#125;/redis.conf port 6379\nbind 0.0.0.0\nport 700$&#123;port&#125;\ncluster-enabled yes\ncluster-config-file nodes-700$&#123;port&#125;.conf\ncluster-node-timeout 15000\nprotected-mode no\npidfile /var/run/redis_ 700$&#123;port&#125;.pid\ncluster-announce-ip  192.168.1.195 \ncluster-announce-port  700$&#123;port) \ncluster-announce-bus-port 1700$&#123;port) \nappendonly yes \nTTT \ndone\n</code></pre>\n<h4 id=\"2、创建容器\"><a href=\"#2、创建容器\" class=\"headerlink\" title=\"2、创建容器\"></a>2、创建容器</h4><p><strong>方法一：</strong>手动创建容器，并启动</p>\n<pre><code class=\"shell\">docker run -p 7001:7001   -p 17001:17001  --name redis7001  -v /root/myredis/conf7001/redis.conf:/etc/redis/redis.conf -v /root/myredis/data7001:/data -d redis redis-server /etc/redis/redis.conf --appendonly yes\n</code></pre>\n<p>​\t7002 ~~~7006同上，自行修改参数</p>\n<p><strong>方法二：</strong>脚本一键启动，效果同上</p>\n<p>​\t<strong>注意：</strong></p>\n<ul>\n<li>其中要指定两个端口号**-p 1700${port}:1700${port}**不要忘记，否则会在创建几群的时候出现  **Waiting for the cluster to join   ** 。【具体原因，我还没查出来，后面补充】</li>\n<li>在docker创建集群容器的时候，<strong>一定要</strong> 指定  ip</li>\n</ul>\n<p><strong>补充：</strong></p>\n<ul>\n<li>那肯定是你端口没有开启，不要质疑，这里的端口不是7000-7005，而是17000-17005，因为redis设置集群的端口号是”redis端口+10000“，这个非常重要。并且7001:7006也是必须打开的。</li>\n</ul>\n<pre><code class=\"shell\">for port in $(seq 1 6);  \\\ndo \\\ndocker run -p 700$&#123;port&#125;:700$&#123;port&#125;   -p 1700$&#123;port&#125;:1700$&#123;port&#125;  --name redis700$&#123;port&#125;  \\\n-v /root/redis/redis700$&#123;port&#125;.conf:/etc/redis/redis.conf \\\n-v /root/redis/data700$&#123;port&#125;:/data \\\n-d --ip 192.168.1.195 redis redis-server /etc/redis/redis.conf \ndone\n</code></pre>\n<h4 id=\"3、进入容器\"><a href=\"#3、进入容器\" class=\"headerlink\" title=\"3、进入容器\"></a>3、进入容器</h4><pre><code class=\"shell\">docker exec -it redis7001 /bin/bash\n</code></pre>\n<h4 id=\"4、创建集群\"><a href=\"#4、创建集群\" class=\"headerlink\" title=\"4、创建集群\"></a>4、创建集群</h4><p>​\t<strong>注：</strong>有一步操作，要自行进行确认，一定要输入 <strong>yes</strong> 而不是 <strong>y</strong> 或者其他之类的，除了 yes一律视为 <strong>no</strong> 。</p>\n<pre><code class=\"shell\">redis-cli --cluster create 192.168.1.195:7001 192.168.1.195:7002 192.168.1.195:7003 192.168.1.195:7004 192.168.1.195:7005 192.168.1.195:7006 --cluster-replicas 1\n</code></pre>\n<h4 id=\"5、测试\"><a href=\"#5、测试\" class=\"headerlink\" title=\"5、测试\"></a>5、测试</h4><p>​\t集群测试时，千万不要忘记最后一个-c参数。</p>\n<pre><code class=\"shel\">redis-cli -p 7001 -c\n</code></pre>\n<h4 id=\"6、关闭集群\"><a href=\"#6、关闭集群\" class=\"headerlink\" title=\"6、关闭集群\"></a>6、关闭集群</h4><p><strong>方法一：</strong></p>\n<p>​\t自行手动一个一个停止，并且删除容器</p>\n<pre><code class=\"shell\">docker stop redis7001 #7002 ~~~7006\n\ndocker rm -f redis7001\n</code></pre>\n<p><strong>方法二：</strong></p>\n<p>​\t脚本程序，一劳永逸</p>\n<pre><code class=\"shell\">for port in $(seq 1 6);  \\\ndo \\\ndocker stop redis700$&#123;port&#125;\ndocker rm -f redis700$&#123;port&#125;\ndone\n</code></pre>\n<h4 id=\"7、清空集群文件\"><a href=\"#7、清空集群文件\" class=\"headerlink\" title=\"7、清空集群文件\"></a>7、清空集群文件</h4><pre><code class=\"shell\">for port in $(seq 1 6);  \\\ndo \\\nrm  -rf  ./data700$&#123;port&#125;/* \ndone\n</code></pre>\n<h3 id=\"九-Jedis\"><a href=\"#九-Jedis\" class=\"headerlink\" title=\"九. Jedis\"></a>九. <strong>Jedis</strong></h3><p>​\tRedis给Java语言提供了客户端API，称之为Jedis。</p>\n<p>​\tJedis API和Redis 命令几乎是一样的。</p>\n<p>​\t例如：Redis对String值新增时set命令，Jedis中也是set方法。所以本课程中没有重点把所有方法进行演示，重要演示Jedis如何使用。</p>\n<p>​\tJedis API特别简单，基本上都是创建对象调用方法即可。</p>\n<h4 id=\"1-单机版\"><a href=\"#1-单机版\" class=\"headerlink\" title=\"1. 单机版\"></a>1. <strong>单机版</strong></h4><pre><code>public void testStandalone()&#123;\n    Jedis jedis = new Jedis(&quot;192.168.93.10&quot;,6379);\n    jedis.set(&quot;name&quot;,&quot;msb-standalone&quot;);\n    String value = jedis.get(&quot;name&quot;);\n    System.out.println(value);\n&#125;\n</code></pre>\n<h4 id=\"2-带有连接池\"><a href=\"#2-带有连接池\" class=\"headerlink\" title=\"2. 带有连接池\"></a>2. <strong>带有连接池</strong></h4><pre><code>public void testPool()&#123;\n    JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();\n    jedisPoolConfig.setMaxTotal(20);\n    jedisPoolConfig.setMaxIdle(5);\n    jedisPoolConfig.setMinIdle(3);\n    JedisPool jedisPool = new JedisPool(jedisPoolConfig,&quot;192.168.93.10&quot;,6379);\n    Jedis jedis = jedisPool.getResource();\n    jedis.set(&quot;name&quot;,&quot;msb-pool&quot;);\n    String value = jedis.get(&quot;name&quot;);\n    System.out.println(value);\n&#125;\n</code></pre>\n<h4 id=\"3-集群\"><a href=\"#3-集群\" class=\"headerlink\" title=\"3. 集群\"></a>3. <strong>集群</strong></h4><pre><code>public void testCluster()&#123;\n    Set&lt;HostAndPort&gt; set = new HashSet&lt;&gt;();\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7001));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7002));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7003));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7004));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7005));\n    set.add(new HostAndPort(&quot;192.168.93.10&quot;,7006));\n    JedisCluster jedisCluster = new JedisCluster(set);\n    jedisCluster.set(&quot;name&quot;,&quot;bjmsb&quot;);\n    String value = jedisCluster.get(&quot;name&quot;);\n    System.out.println(value);\n&#125;\n</code></pre>\n<h3 id=\"十-使用SpringBoot整合SpringDataRedis操作redis\"><a href=\"#十-使用SpringBoot整合SpringDataRedis操作redis\" class=\"headerlink\" title=\"十. 使用SpringBoot整合SpringDataRedis操作redis\"></a>十. <strong>使用SpringBoot整合SpringDataRedis操作redis</strong></h3><p>​\tSpring Data是Spring公司的顶级项目，里面包含了N多个二级子项目，这些子项目都是相对独立的项目。每个子项目是对不同API的封装。</p>\n<p>​\t所有Spring Boot整合Spring Data xxxx的启动器都叫做spring-boot-starter-data-xxxx</p>\n<p>​\tSpring Data 好处很方便操作对象类型。</p>\n<p>​\t把Redis不同值得类型放到一个opsForXXX方法中。</p>\n<p>​\t\topsForValue : String值</p>\n<p>​\t\topsForList : 列表List</p>\n<p>​\t\topsForHash: 哈希表Hash</p>\n<p>​\t\topsForZSet: 有序集合Sorted Set</p>\n<p>​\t\topsForSet : 集合</p>\n<h4 id=\"1-添加依赖\"><a href=\"#1-添加依赖\" class=\"headerlink\" title=\"1. 添加依赖\"></a>1. <strong>添加依赖</strong></h4><pre><code>     &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;\n    &lt;/parent&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n            &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.47&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n            &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;version&gt;1.18.20&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;redis.clients&lt;/groupId&gt;\n            &lt;artifactId&gt;jedis&lt;/artifactId&gt;\n            &lt;version&gt;3.3.0&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre>\n<h4 id=\"2-配置配置文件\"><a href=\"#2-配置配置文件\" class=\"headerlink\" title=\"2. 配置配置文件\"></a>2. <strong>配置配置文件</strong></h4><p><strong>注：</strong></p>\n<ul>\n<li><p>spring.redis.host&#x3D;localhost 默认值</p>\n</li>\n<li><p>spring.redis.port&#x3D;6379 端口号默认值</p>\n</li>\n</ul>\n<pre><code>mybatis:\n  mapper-locations: classpath:mybatis/*\n  type-aliases-package: com.msb.pojo\nspring:\n  datasource:\n    url: jdbc:mysql://localhost:3306/mydb\n    username: root\n    password: root\n    driver-class-name: com.mysql.jdbc.Driver\n  redis:\n    host: 192.168.1.195\n    cluster:\n      nodes: 192.168.1.195:7001,192.168.1.195:7002,192.168.1.195:7003,192.168.1.195:7004,192.168.1.195:7005,192.168.1.195:7006\n</code></pre>\n<h4 id=\"3-编写配置类（可直接复制）\"><a href=\"#3-编写配置类（可直接复制）\" class=\"headerlink\" title=\"3.编写配置类（可直接复制）\"></a>3.<strong>编写配置类</strong>（可直接复制）</h4><pre><code>@Configuration\npublic class RedisConfig &#123;\n    @Bean\n    public RedisTemplate&lt;String,Object&gt; redisTemplate(RedisConnectionFactory \t\t  factory)&#123;\n        RedisTemplate&lt;String,Object&gt; redisTemplate = new RedisTemplate&lt;&gt;();\n        redisTemplate.setConnectionFactory(factory);\n        redisTemplate.setKeySerializer(new StringRedisSerializer());\n        redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class));\n        return redisTemplate;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"4-编写代码\"><a href=\"#4-编写代码\" class=\"headerlink\" title=\"4. 编写代码\"></a>4. <strong>编写代码</strong></h4><h5 id=\"4-1-编写对象新增\"><a href=\"#4-1-编写对象新增\" class=\"headerlink\" title=\"4.1 编写对象新增\"></a>4.1 <strong>编写对象新增</strong></h5><pre><code>@Autowired\nprivate RedisTemplate&lt;String, Object&gt; redisTemplate;\n\n@Test\npublic void testString() &#123;\n    People peo = new People(1, &quot;张三&quot;);\n    redisTemplate.opsForValue().set(&quot;peo1&quot;, peo);\n&#125;\n</code></pre>\n<h5 id=\"4-2-编写对象获取\"><a href=\"#4-2-编写对象获取\" class=\"headerlink\" title=\"4.2 编写对象获取\"></a>4.2 <strong>编写对象获取</strong></h5><p>此处必须编写值序列化器。不指定时返回类型为LinkedHashMap</p>\n<pre><code>@Test\npublic void testGetString() &#123;\n    redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;People&gt;(People.class));\n    People peo = (People) redisTemplate.opsForValue().get(&quot;peo1&quot;);\n    System.out.println(peo);\n&#125;\n</code></pre>\n<h5 id=\"4-3-编写List\"><a href=\"#4-3-编写List\" class=\"headerlink\" title=\"4.3 编写List\"></a>4.3 <strong>编写List</strong></h5><pre><code>@Test\npublic void testList() &#123;\n    List&lt;People&gt; list = new ArrayList&lt;&gt;();\n    list.add(new People(1, &quot;张三&quot;));\n    list.add(new People(2, &quot;李四&quot;));\n    redisTemplate.opsForValue().set(&quot;list2&quot;, list);\n&#125;\n</code></pre>\n<h5 id=\"4-4-编写List取值\"><a href=\"#4-4-编写List取值\" class=\"headerlink\" title=\"4.4 编写List取值\"></a>4.4 <strong>编写List取值</strong></h5><pre><code>@Test\npublic void testGetList()&#123;\n    redisTemplate.setValueSerializer(new Jackson2JsonRedisSerializer&lt;List&gt;(List.class));\n    List&lt;People&gt; list2 = (List&lt;People&gt;) redisTemplate.opsForValue().get(&quot;list2&quot;);\n    System.out.println(list2);\n&#125;\n</code></pre>\n<h3 id=\"十一-使用Redis效果\"><a href=\"#十一-使用Redis效果\" class=\"headerlink\" title=\"十一. 使用Redis效果\"></a>十一. <strong>使用Redis效果</strong></h3><p>​\t使用缓存流程</p>\n<p>​\t1. 先判断缓存中是否存在。如果存在直接从缓存中取出数据。不执行2，3步骤</p>\n<p>​\t2. 如果不存在，从mysql中获取数据</p>\n<p>​\t3. 获取数据后，把数据缓存到redis中</p>\n<img data-src=\"/2022/10/07/Redis/Redis-11.jpg\" class=\"\">",
            "tags": [
                "分布式",
                "中间件",
                "Redis基础",
                "NoSQL数据库"
            ]
        }
    ]
}