{
    "version": "https://jsonfeed.org/version/1",
    "title": "雾都博客 • All posts by \"springmvc\" tag",
    "description": "记录美食每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/SpringMVC/",
            "url": "http://example.com/2022/10/07/SpringMVC/",
            "title": "SpringMVC",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><img data-src=\"/2022/10/07/SpringMVC/image-20220716212203883.png\" class=\"\"></p>\n<p>M   model      模型层   DAO 封装        &gt;&gt;&gt; Mybatis<br />\nV    view         视图层   html css js  jsp<br />\nC    controller 控制层   Servlet 封装    &gt;&gt;&gt; springMVC</p>\n<p>SpringMVC 是 spring 为展现层提供的基于 MVC 设计理念的优秀 WEB 框架，是目前最主流的 MVC 框架之一<br />\n SpringMVC 通过一套注解，可以让普通的 JAVA 类成为 contrllor 控制器，无需继承 Servlet, 实现了控制层和 Servlet 之间的解耦<br />\n SpringMVC 支持 Rest 风格的 URL 写法<br />\n SpringMVC 采用了松耦合，可热插的主键结构，比其他的框架更具扩展性和灵活性</p>\n<h1 id=\"执行流程\"><a class=\"anchor\" href=\"#执行流程\">#</a> 执行流程</h1>\n<p><img data-src=\"/2022/10/07/SpringMVC/image-20220717190437596.png\" class=\"\"></p>\n<p><img data-src=\"/2022/10/07/SpringMVC/image-20220717190445738.png\" class=\"\"></p>\n<p>1DispatcherServlet：前端控制器<br />\n用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由 它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</p>\n<p><strong>2 HandlerMapping：处理器映射器</strong><br />\n HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p>\n<p>3 Handler：处理器 (自己定义的 Controller 处理单元)<br />\n 它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理。</p>\n<p><strong>4 HandlAdapter：处理器适配器</strong><br />\n通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行</p>\n<p>5 View Resolver：视图解析器<br />\n View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p>\n<p>6 View：视图<br />\n SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView 等。我们最常用的视图就是 jsp。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开 发具体的页面。</p>\n<p>7 <span class=\"exturl\" data-url=\"bXZjOmFubm90YXRpb24tZHJpdmVu\">mvc:annotation-driven</span> 说明<br />\n在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。<br />\n使 用 <span class=\"exturl\" data-url=\"bXZjOmFubm90YXRpb24tZHJpdmVu\">mvc:annotation-driven</span> 自动加载 RequestMappingHandlerMapping （处理映射器） 和 RequestMappingHandlerAdapter （ 处 理 适 配 器 ） ， 可 用 在 SpringMVC.xml 配 置 文 件 中 使 用 <span class=\"exturl\" data-url=\"bXZjOmFubm90YXRpb24tZHJpdmVu\">mvc:annotation-driven</span> 替代注解处理器和适配器的配置。</p>\n<p>HandlerMapping 的实现类的作用<br />\n实现类 RequestMappingHandlerMapping，它会处理 @RequestMapping 注解，并将其注册到请求映射表中。</p>\n<p>HandlerAdapter 的实现类的作用<br />\n实现类 RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。</p>\n<p>当配置了 mvc:annotation-driven / 后，Spring 就知道了我们启用注解驱动。然后 Spring 通过 context:component-scan / 标签的配置，会自动为我们将扫描到的 @Component，@Controller，@Service，@Repository 等注解标记的组件注册到工厂中，来处理我们的请求，这个时候接收返回 json 数据、参数验证、统一异常等功能。</p>\n<h1 id=\"重要注解\"><a class=\"anchor\" href=\"#重要注解\">#</a> 重要注解</h1>\n<h2 id=\"1-requestmapping\"><a class=\"anchor\" href=\"#1-requestmapping\">#</a> 1、RequestMapping</h2>\n<p>紧耦合方式 (了解)<br />\n DispatcherServlet 中的 service 方法直接将此次请求的 request 对象传递给调用的单元方法即可。同时在单元方法上声明形参 HttpServletRequest 来接收 request 实参即可。<br />\n<strong>解耦合方式 (熟练)</strong><br />\n DispatcherServlet 在其 service 方法中将请求数据根据需求从 request 对象中获取出来后，将数据直接传递给对应的单元方法使用。同时在单元方法上直接声明对应的形参接收请求数据即可。在单元方法上声明形参来接收请求数据时，形参名必须和请求数据的键名一致，DispatcherServlet 会将调用单元方法的形参名作为请求数据的键名获取请求数据，然后传递给单元方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RestController</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDataController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/* 紧耦合方式参数注入</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 使用传统的 HttpServletRequest 对象获取参数  javax.servlet</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    * */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/getParamByRequest.do\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getParam1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">String</span> password <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username:\"</span><span class=\"token operator\">+</span>username<span class=\"token operator\">+</span><span class=\"token string\">\"   password:\"</span><span class=\"token operator\">+</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"getParamSuccess\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/* 解耦合方式参数注入</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    * HttpServletRequest 对象获取参数 通过 SpringMVC 框架功能，自动转换参数</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    * 处理单元参数列表中参数名必须和请求中的参数名一致</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                        * 如不一致，可以通过 @RequestParma 注解进行转换</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    * */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/getParamByArgName.do\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getParam2</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> username<span class=\"token punctuation\">,</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pwd\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username:\"</span><span class=\"token operator\">+</span>username<span class=\"token operator\">+</span><span class=\"token string\">\"   password:\"</span><span class=\"token operator\">+</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"getParamSuccess\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"2-pathvariable注解和restful风格的支持\"><a class=\"anchor\" href=\"#2-pathvariable注解和restful风格的支持\">#</a> 2、PathVariable 注解和 RESTful 风格的支持</h2>\n<p><strong>普通形式的 url</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">/</span>contextPath<span class=\"token operator\">/</span>aaa<span class=\"token punctuation\">.</span><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">/</span>contextPath<span class=\"token operator\">/</span>aaa<span class=\"token punctuation\">.</span>jsp</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">/</span>contextPath<span class=\"token operator\">/</span>aaa<span class=\"token punctuation\">.</span>html</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">/</span>contextPath<span class=\"token operator\">/</span>css<span class=\"token operator\">/</span>aaa<span class=\"token punctuation\">.</span>css</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">/</span>contextPath<span class=\"token operator\">/</span>js<span class=\"token operator\">/</span>aaa<span class=\"token punctuation\">.</span>js</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">/</span>contextPath<span class=\"token operator\">/</span>aaa<span class=\"token punctuation\">.</span><span class=\"token keyword\">do</span><span class=\"token operator\">?</span>id<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token operator\">&amp;</span>username<span class=\"token operator\">=</span>root</pre></td></tr></table></figure><p><strong>restFul 风格的 url</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">/</span>contextPath<span class=\"token operator\">/</span>aaa<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token operator\">/</span>root</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">/</span>contextPath<span class=\"token operator\">/</span>aaa</pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Controller</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PathController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/testPathVariable/&#123;id&#125;/&#123;username&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testPathVariable</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id:\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username:\"</span><span class=\"token operator\">+</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"testPathVariable1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/10/07/SpringMVC/image-20220717191056216.png\" class=\"\"></p>\n<p><img data-src=\"/2022/10/07/SpringMVC/image-20220717191104583-1661419340091.png\" class=\"\"></p>\n<h1 id=\"响应处理\"><a class=\"anchor\" href=\"#响应处理\">#</a> 响应处理</h1>\n<p><img data-src=\"/2022/10/07/SpringMVC/image-20220717191212189-1661419342477.png\" class=\"\"></p>\n<p>1、单元方法返回值为 void</p>\n<p><img data-src=\"/2022/10/07/SpringMVC/image-20220717191318663-1661419344199.png\" class=\"\"></p>\n<blockquote>\n<p>在 SpringMVC 中如果对于当前的控制单元，没有写对应的返回值，这个时候<strong> SpringMVC 就会找和自己控制单元名称一致的页面展示</strong>，<strong>如果没有配置视图解析器的前缀和后缀是没有产生 404</strong>, 需要注意控制单元仍然可以进。</p>\n</blockquote>\n<p>2、转发和重定向 ServletAPI 实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo1\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testDemo1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 请求转发</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//request.getRequestDispatcher(\"/forward.jsp\").forward(request,response);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 响应重定向</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">sendRedirect</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"/redirect.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>单元方法的返回值类型设置 void。因为使用 response 对象在单元方法中直接对此次请求进行了响应，不再通过 DispatcherServlet 了，既然已经响应了，就不需要再给 DispatcherServlet 返回值了。在单元方法上声明 HttpServletResponse 形参，来接收此次请求的 response 对象。</p>\n</blockquote>\n<p>3、使用 forward 关键字完成响应</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    * 返回字符串告诉 DispatcherServlet 跳转的路径</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    * 在路径之前放上一个 forward: 关键字，就是请求转发</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    * 如果路径前的关键字是 forward, 那么可以省略不写</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    * */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo2\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testDemo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//return \"forward:/forwardPage.jsp\";</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"/forwardPage.jsp\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用通过单元方法的返回值来告诉 DispatcherServlet 请求转发指定的资源，如果是请求转发，<strong>forward 关键字可以<em>省略不写</em>的</strong></p>\n<p>4、使用 redirect 关键字完成响应</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 返回字符串告诉 DispatcherServlet 跳转的路径</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * 在路径之前放上一个 redirect: 关键字，就是重定向</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * 如果路径前的关键字是 redirect, 那么不可以省略</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * / 表示当前项目下。这里不需要项目的上下文路径</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     * */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo3\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">testDemo3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"redirect:/redirectPage.jsp\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用通过单元方法的返回值来告诉 DispatcherServlet 重定向指定的资源，注意这个<strong> redirect 关键字<em>不可以省去</em></strong></p>\n<p>5、使用 View 视图转发和重定向</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo4\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">View</span> <span class=\"token function\">testDemo4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">View</span>  view <span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 请求转发</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//view =new InternalResourceView(\"/forwardPage.jsp\");</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        view<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RedirectView</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"/redirectPage.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> view<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>RedirectView 中所做的操作，最终的实现是在 renderMergedOutputModel 中完成实现的，简单来说 RedirectView 实现了链接的重定向，并且将数据保存到 FlashMap 中，这样在跳转后的链接中可以获取一些数据.</p>\n</blockquote>\n<p>6、使用 ModelAndView 转发重定向</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo5\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">testDemo5</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ModelAndView</span> mv<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 请求转发</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">//mv.setViewName(\"forward:/forwardPage.jsp\");</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//mv.setView(new InternalResourceView(\"/forwardPage.jsp\"));</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">//mv.setViewName(\"redirect:/redirectPage.jsp\");</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        mv<span class=\"token punctuation\">.</span><span class=\"token function\">setView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RedirectView</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">getContextPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"/redirectPage.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> mv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\tModelAndView 中的 Model 代表模型，View 代表视图，这个名字就很好地解释了该类的作用。业务处理器调用模型层处理完用户请求后，把结果数据存储在该类的 model 属性中，把要返回的视图信息存储在该类的 view 属性中，然后让该 ModelAndView 返回该 Spring MVC 框架。</p>\n<h1 id=\"作用域传参\"><a class=\"anchor\" href=\"#作用域传参\">#</a> 作用域传参</h1>\n<p><img data-src=\"/2022/10/07/SpringMVC/image-20220717191751516-1661419352934.png\" class=\"\"></p>\n<blockquote>\n<p>PageContext 对象</p>\n</blockquote>\n<p>作用域范围：当前 jsp 页面内有效</p>\n<blockquote>\n<p>request 对象</p>\n</blockquote>\n<p>作用域范围：一次请求内。</p>\n<p>作用：解决了一次请求内的资源的数据共享问题</p>\n<blockquote>\n<p>session 对象</p>\n</blockquote>\n<p>作用域范围：一次会话内有效。</p>\n<p>说明：浏览器不关闭，并且后台的 session 不失效，在任意请求中都可以获取到同一个 session 对象。</p>\n<p>作用：解决了一个用户不同请求的数据共享问题。</p>\n<blockquote>\n<p>application (ServletContext) 对象</p>\n</blockquote>\n<p>作用域范围：整个项目内有效。</p>\n<p>特点：一个项目只有一个，在服务器启动的时候即完成初始化创建无论如何获取都是同一个项目。</p>\n<p>作用：解决了不同用户的数据共享问题。</p>\n<h1 id=\"拦截器\"><a class=\"anchor\" href=\"#拦截器\">#</a> 拦截器</h1>\n<h2 id=\"引入\"><a class=\"anchor\" href=\"#引入\">#</a> 引入</h2>\n<blockquote>\n<p><mark>过滤器的作用是保护请求的服务器资源，在请求资源被执行之前</mark>，如果请求地址符合拦截范围，则会先执行过滤器。<mark>过滤器的执行时机，是在 Servlet 之前执行的</mark>。但是在使用了 SpringMVC 后，Servlet 只有一个了，也就是 DisptcherServlet。那么，如果我们仍然使用过滤器来完成请求的拦截，因为过滤器是在 Servlet 之前执行的，就会造成，<mark>过滤器会拦截 DispatcherServlet 所有的请求</mark>。那么，如果我们有<mark>部分请求不想被拦截</mark>，怎么办？</p>\n</blockquote>\n<h2 id=\"拦截器使用\"><a class=\"anchor\" href=\"#拦截器使用\">#</a> 拦截器使用</h2>\n<p><img data-src=\"/2022/10/07/SpringMVC/image-20220717191927439-1661419356594.png\" class=\"\"></p>\n<p>Spring MVC 中的拦截器（Interceptor）类似于 Servlet 中的过滤器（Filter），它主要用于拦截用户请求并作相应的处理。例如通过拦截器可以进行权限验证、记录请求信息的日志、判断用户是否登录等。<br />\n要使用 Spring MVC 中的拦截器，就需要对拦截器类进行定义和配置。通常拦截器类可以通过两种方式来定义。<br />\n1. 通过实现 HandlerInterceptor 接口，或继承 HandlerInterceptor 接口的实现类（如 HandlerInterceptorAdapter）来定义。<br />\n2. 通过实现 WebRequestInterceptor 接口，或继承 WebRequestInterceptor 接口的实现类来定义。</p>\n<h2 id=\"拦截器和过滤器的区别\"><a class=\"anchor\" href=\"#拦截器和过滤器的区别\">#</a> 拦截器和过滤器的区别</h2>\n<ol>\n<li>\n<p>拦截器 SpringMVC 的，而过滤器是 servlet 的。</p>\n</li>\n<li>\n<p>拦截器不依赖与 servlet 容器，由 spring 容器初始化，过滤器依赖与 servlet 容器，由 servlet 容器初始化。.</p>\n</li>\n<li>\n<p>拦截器只能对 action 请求起作用，而过滤器则可以对几乎所有的请求起作用。</p>\n</li>\n<li>\n<p>拦截器可以访问 action 上下文、值栈里的对象，而过滤器不能访问。</p>\n</li>\n<li>\n<p>在 action 的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。</p>\n</li>\n<li>\n<p>拦截器可以获取 IOC 容器中的各个 bean，而过滤器就不太方便，这点很重要，在拦截器里注入一个 service，可以调用业务逻辑。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyInterceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerInterceptor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">preHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/* 在请求到达我们定义的 handler 之前工作的 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyInterceptor preHandle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">/* 返回的是 true, 代表放行，可以继续到达 handler*/</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postHandle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ModelAndView</span> modelAndView<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyInterceptor postHandle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/*handler 处理单元返回 ModelAndView 时候进行 拦截 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterCompletion</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        页面渲染完毕，但是还没有给浏览器响应数据的时候</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyInterceptor afterCompletion\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"多个拦截器执行顺序\"><a class=\"anchor\" href=\"#多个拦截器执行顺序\">#</a> 多个拦截器执行顺序</h2>\n<p>多个拦截器同时存在时，执行的顺序由配置顺序决定。先配置谁，谁就先执行。多个拦截器可以理解为拦截器栈，先进后出 (后进先出), 如图所示:</p>\n<p><img data-src=\"/2022/10/07/SpringMVC/image-20220717192103889-1661419360360.png\" class=\"\"></p>\n<h1 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h1>\n<h2 id=\"springmvc异常简介\"><a class=\"anchor\" href=\"#springmvc异常简介\">#</a> SpringMVC 异常简介</h2>\n<p>​\t系统中异常包括两类：预期异常 (检查型异常) 和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息， 后者主要通过规范代码开发、测试通过手段减少运行时异常的发生</p>\n<h2 id=\"具体实现\"><a class=\"anchor\" href=\"#具体实现\">#</a> 具体实现</h2>\n<h3 id=\"1使用exceptionhandler注解处理异常\"><a class=\"anchor\" href=\"#1使用exceptionhandler注解处理异常\">#</a> 1 使用 @ExceptionHandler 注解处理异常</h3>\n<p>缺点：只能处理当前 Controller 中的异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handelException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ModelAndView</span> mv <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        mv<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error1.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> mv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2使用controlleradviceexceptionhandler\"><a class=\"anchor\" href=\"#2使用controlleradviceexceptionhandler\">#</a> 2 使用：@ControllerAdvice+@ExceptionHandler</h3>\n<p>此处优先级低于局部异常处理器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ControllerAdvice</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GloableExceptionHandler1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">handelException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ModelAndView</span> mv <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        mv<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error1.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> mv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3使用simplemappingexceptionresolver\"><a class=\"anchor\" href=\"#3使用simplemappingexceptionresolver\">#</a> 3 使用：SimpleMappingExceptionResolver</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 全局异常</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GloableException2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SimpleMappingExceptionResolver</span> <span class=\"token function\">getSimpleMappingExceptionResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">SimpleMappingExceptionResolver</span> resolver <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleMappingExceptionResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Properties</span> prop <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        prop<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.NullPointerException\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error1.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        prop<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java.lang.ArithmeticException\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"error2.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        resolver<span class=\"token punctuation\">.</span><span class=\"token function\">setExceptionMappings</span><span class=\"token punctuation\">(</span>prop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> resolver<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4自定义的handlerexceptionresolver\"><a class=\"anchor\" href=\"#4自定义的handlerexceptionresolver\">#</a> 4 自定义的 HandlerExceptionResolver</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 全局异常</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * HandlerExceptionResolve</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GloableException3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HandlerExceptionResolver</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelAndView</span> <span class=\"token function\">resolveException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> httpServletRequest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> httpServletResponse<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ModelAndView</span> mv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelAndView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                mv<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                mv<span class=\"token punctuation\">.</span><span class=\"token function\">setViewName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        mv<span class=\"token punctuation\">.</span><span class=\"token function\">addObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> mv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"其他注解\"><a class=\"anchor\" href=\"#其他注解\">#</a> 其他注解</h1>\n<h2 id=\"requestbody\"><a class=\"anchor\" href=\"#requestbody\">#</a> @RequestBody</h2>\n<p>作用：</p>\n<p>​\t用于获取请求体 json 格式的字符串内容。直接使用得到是 key=value&amp;key=value... 结构的数据，get 请求方式不适用。</p>\n<p>属性：</p>\n<p>​\trequired：是否必须有请求体。默认值是:true。当取值为 true 时，get 请求方式会报错。如果取值 为 false，get 请求得到是 null。</p>\n<h2 id=\"crossorigin\"><a class=\"anchor\" href=\"#crossorigin\">#</a> @CrossOrigin</h2>\n<p>作用：</p>\n<p>​\t解决 ajax 请求之间的跨域问题</p>\n<p>属性:</p>\n<p>origins  ： 允许可访问的域列表 IP</p>\n<p>maxAge：准备响应前的缓存持续的最大时间（以秒为单位）。</p>\n",
            "tags": [
                "框架",
                "Spring",
                "SpringMVC"
            ]
        }
    ]
}