{
    "version": "https://jsonfeed.org/version/1",
    "title": "雾都博客 • All posts by \"springsecurity\" tag",
    "description": "记录美食每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/SpringSecurity/",
            "url": "http://example.com/2022/10/07/SpringSecurity/",
            "title": "SpringSecurity",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<hr/>\n<p style=\"font-size:70px; color:red;background-color:66FF66\">Spring Security</p><br/><hr/>\n\n<h1 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h1><p>​\t\t<strong>Spring Security</strong> 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架<strong>Shiro</strong>，它提供了更丰富的功能，社区资源也比Shiro丰富。</p>\n<p>​\t一般来说中大型的项目都是使用<strong>SpringSecurity</strong> 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。</p>\n<p>​\t 一般Web应用的需要进行<strong>认证</strong>和<strong>授权</strong>。</p>\n<p>​\t\t<strong>认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户</strong></p>\n<p>​\t\t<strong>授权：经过认证后判断当前用户是否有权限进行某个操作</strong></p>\n<p>​\t而<strong>认证</strong>和<strong>授权</strong>也是SpringSecurity作为安全框架的<strong>核心功能</strong>。</p>\n<h1 id=\"二、第一个Spring-Security项目\"><a href=\"#二、第一个Spring-Security项目\" class=\"headerlink\" title=\"二、第一个Spring Security项目\"></a>二、第一个Spring Security项目</h1><h2 id=\"1-导入依赖\"><a href=\"#1-导入依赖\" class=\"headerlink\" title=\"1.导入依赖\"></a>1.导入依赖</h2><p>​\tSpring Security已经被Spring boot进行集成，使用时直接引入启动器即可。</p>\n<pre><code class=\"xml\">    &lt;properties&gt;\n        &lt;java.version&gt;1.8&lt;/java.version&gt;\n        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;\n        &lt;spring-boot.version&gt;2.3.7.RELEASE&lt;/spring-boot.version&gt;\n    &lt;/properties&gt;\t\n\n    &lt;dependencies&gt;\n        &lt;!--thymeleaf--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!--druid--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;1.2.8&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--mysql--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!--mybatis-plus--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;3.4.2&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--redis依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!--fastjson依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;\n            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;\n            &lt;version&gt;1.2.33&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--jwt依赖--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;\n            &lt;artifactId&gt;jjwt&lt;/artifactId&gt;\n            &lt;version&gt;0.9.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;!--spring-security--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!--lombok--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n            &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n            &lt;optional&gt;true&lt;/optional&gt;\n        &lt;/dependency&gt;\n        &lt;!--spring-web--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;/dependency&gt;\n        &lt;!--Spring test--&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n            &lt;exclusions&gt;\n                &lt;exclusion&gt;\n                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;\n                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;\n                &lt;/exclusion&gt;\n            &lt;/exclusions&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n</code></pre>\n<h2 id=\"2-写一个控制器\"><a href=\"#2-写一个控制器\" class=\"headerlink\" title=\"2.写一个控制器\"></a>2.写一个控制器</h2><pre><code class=\"java\">\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\npublic class HelloController &#123;\n\n    @RequestMapping(&quot;/hello&quot;)\n    public String hello()&#123;\n        return &quot;hello&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"3-访问页面\"><a href=\"#3-访问页面\" class=\"headerlink\" title=\"3.访问页面\"></a>3.访问页面</h2><p>​\t导入spring-boot-starter-security启动器后，Spring Security已经生效，默认拦截全部请求，如果用户没有登录，跳转到内置登录页面。</p>\n<p>​\t在项目中新建login.html页面后</p>\n<p>​\t在浏览器输入：<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2xvZ2luLmh0bWwlRTUlOTAlOEUlRTQlQkMlOUElRTYlOTglQkUlRTclQTQlQkElRTQlQjglOEIlRTklOUQlQTIlRTklQTElQjUlRTklOUQlQTI=\">http://localhost:8080/login.html后会显示下面页面</span></p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-01.jpg\" class=\"\">\n\n\n<p>​\t默认的username为user，password打印在控制台中。当然了，每个人的显示的肯定和我的不一样。</p>\n<p>​\t\t在浏览器中输入账号和密码后会显示login.html页面内容。</p>\n<h1 id=\"三、用户认证\"><a href=\"#三、用户认证\" class=\"headerlink\" title=\"三、用户认证\"></a>三、用户认证</h1><h2 id=\"3-1-登陆校验流程\"><a href=\"#3-1-登陆校验流程\" class=\"headerlink\" title=\"3.1 登陆校验流程\"></a>3.1 登陆校验流程</h2><img data-src=\"/2022/10/07/SpringSecurity/image-20211215094003288.png\" class=\"\">\n\n\n<h2 id=\"3-2-原理初探\"><a href=\"#3-2-原理初探\" class=\"headerlink\" title=\"3.2 原理初探\"></a>3.2 原理初探</h2><p>​\t想要知道如何实现自己的登陆流程就必须要先知道入门案例中SpringSecurity的流程。</p>\n<h3 id=\"3-2-1-SpringSecurity完整流程\"><a href=\"#3-2-1-SpringSecurity完整流程\" class=\"headerlink\" title=\"3.2.1 SpringSecurity完整流程\"></a>3.2.1 SpringSecurity完整流程</h3><p>​\tSpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20211214144425527.png\" class=\"\">\n\n\n<p>​\t图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。</p>\n<p><strong>UsernamePasswordAuthenticationFilter</strong>:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p>\n<p><strong>ExceptionTranslationFilter：</strong>处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p>\n<p><strong>FilterSecurityInterceptor：</strong>负责权限校验的过滤器。</p>\n<p>​\t</p>\n<p>​\t我们可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20211214145824903.png\" class=\"\">\n\n\n\n\n<h3 id=\"3-2-2-认证流程详解\"><a href=\"#3-2-2-认证流程详解\" class=\"headerlink\" title=\"3.2.2 认证流程详解\"></a>3.2.2 认证流程详解</h3><img data-src=\"/2022/10/07/SpringSecurity/image-20211214151515385.png\" class=\"\">\n\n\n<p>概念速查:</p>\n<p>Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p>\n<p>AuthenticationManager接口：定义了认证Authentication的方法 </p>\n<p>UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</p>\n<p>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p>\n<h2 id=\"3-3-实现方式\"><a href=\"#3-3-实现方式\" class=\"headerlink\" title=\"3.3 实现方式\"></a>3.3 实现方式</h2><ul>\n<li>前后端不分离，登录页面由自己提供——3.1(不推荐)</li>\n<li>前后端分离，登录页面由前端提供     ——3.2(推荐，后序我们其他授权和别的操作，均以这个为主)</li>\n</ul>\n<p>在第二部分的基础上，进行操作</p>\n<h3 id=\"3-3-1-前后端不分离\"><a href=\"#3-3-1-前后端不分离\" class=\"headerlink\" title=\"3.3.1 前后端不分离\"></a>3.3.1 前后端不分离</h3><h4 id=\"1-准备工作\"><a href=\"#1-准备工作\" class=\"headerlink\" title=\"1 准备工作\"></a>1 准备工作</h4><h5 id=\"application-yml\"><a href=\"#application-yml\" class=\"headerlink\" title=\"application.yml\"></a>application.yml</h5><pre><code class=\"yaml\">spring:\n  application:\n    name: msb-spring-security\n  datasource:\n    druid:\n      url: jdbc:mysql://localhost:3306/mydb?characterEncoding=utf-8&amp;serverTimezone=UTC\n      username: root\n      password: root\n      driver-class-name: com.mysql.cj.jdbc.Driver\n\nmybatis-plus:\n  mapper-locations: classpath:mapper/*.xml\nlogging:\n  level:\n    com:\n      zjj:\n        mapper: debug\nserver:\n  port: 8081\n</code></pre>\n<h5 id=\"数据库准备\"><a href=\"#数据库准备\" class=\"headerlink\" title=\"数据库准备\"></a>数据库准备</h5><pre><code class=\"sql\">\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for sys_menu\n-- ----------------------------\nDROP TABLE IF EXISTS `sys_menu`;\nCREATE TABLE `sys_menu`  (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `menu_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &#39;NULL&#39; COMMENT &#39;菜单名&#39;,\n  `path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;路由地址&#39;,\n  `component` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;组件路径&#39;,\n  `visible` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &#39;0&#39; COMMENT &#39;菜单状态（0显示 1隐藏）&#39;,\n  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &#39;0&#39; COMMENT &#39;菜单状态（0正常 1停用）&#39;,\n  `perms` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;权限标识&#39;,\n  `icon` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &#39;#&#39; COMMENT &#39;菜单图标&#39;,\n  `create_by` bigint(20) NULL DEFAULT NULL,\n  `create_time` datetime NULL DEFAULT NULL,\n  `update_by` bigint(20) NULL DEFAULT NULL,\n  `update_time` datetime NULL DEFAULT NULL,\n  `del_flag` int(11) NULL DEFAULT 0 COMMENT &#39;是否删除（0未删除 1已删除）&#39;,\n  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;备注&#39;,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &#39;菜单表&#39; ROW_FORMAT = Dynamic;\n\nDROP TABLE IF EXISTS `sys_role`;\nCREATE TABLE `sys_role`  (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,\n  `role_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;角色权限字符串&#39;,\n  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &#39;0&#39; COMMENT &#39;角色状态（0正常 1停用）&#39;,\n  `del_flag` int(1) NULL DEFAULT 0 COMMENT &#39;del_flag&#39;,\n  `create_by` bigint(200) NULL DEFAULT NULL,\n  `create_time` datetime NULL DEFAULT NULL,\n  `update_by` bigint(200) NULL DEFAULT NULL,\n  `update_time` datetime NULL DEFAULT NULL,\n  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;备注&#39;,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &#39;角色表&#39; ROW_FORMAT = Dynamic;\n\nDROP TABLE IF EXISTS `sys_role_menu`;\nCREATE TABLE `sys_role_menu`  (\n  `role_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT &#39;角色ID&#39;,\n  `menu_id` bigint(200) NOT NULL DEFAULT 0 COMMENT &#39;菜单id&#39;,\n  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;\n\nDROP TABLE IF EXISTS `sys_user`;\nCREATE TABLE `sys_user`  (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,\n  `user_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &#39;NULL&#39; COMMENT &#39;用户名&#39;,\n  `nick_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &#39;NULL&#39; COMMENT &#39;昵称&#39;,\n  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &#39;NULL&#39; COMMENT &#39;密码&#39;,\n  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &#39;0&#39; COMMENT &#39;账号状态（0正常 1停用）&#39;,\n  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;邮箱&#39;,\n  `phonenumber` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;手机号&#39;,\n  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;用户性别（0男，1女，2未知）&#39;,\n  `avatar` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;头像&#39;,\n  `user_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &#39;1&#39; COMMENT &#39;用户类型（0管理员，1普通用户）&#39;,\n  `create_by` bigint(20) NULL DEFAULT NULL COMMENT &#39;创建人的用户id&#39;,\n  `create_time` datetime NULL DEFAULT NULL COMMENT &#39;创建时间&#39;,\n  `update_by` bigint(20) NULL DEFAULT NULL COMMENT &#39;更新人&#39;,\n  `update_time` datetime NULL DEFAULT NULL COMMENT &#39;更新时间&#39;,\n  `del_flag` int(11) NULL DEFAULT 0 COMMENT &#39;删除标志（0代表未删除，1代表已删除）&#39;,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &#39;用户表&#39; ROW_FORMAT = Dynamic;\n\n\nDROP TABLE IF EXISTS `sys_user_role`;\nCREATE TABLE `sys_user_role`  (\n  `user_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT &#39;用户id&#39;,\n  `role_id` bigint(200) NOT NULL DEFAULT 0 COMMENT &#39;角色id&#39;,\n  PRIMARY KEY (`user_id`, `role_id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;\n\n\n\nINSERT INTO `sys_menu` VALUES (2, &#39;demo:select&#39;, NULL, NULL, &#39;0&#39;, &#39;0&#39;, NULL, &#39;#&#39;, NULL, NULL, NULL, NULL, 0, NULL);\nINSERT INTO `sys_menu` VALUES (3, &#39;demo:update&#39;, NULL, NULL, &#39;0&#39;, &#39;0&#39;, NULL, &#39;#&#39;, NULL, NULL, NULL, NULL, 0, NULL);\nINSERT INTO `sys_menu` VALUES (4, &#39;demo:insert&#39;, NULL, NULL, &#39;0&#39;, &#39;0&#39;, NULL, &#39;#&#39;, NULL, NULL, NULL, NULL, 0, NULL);\nINSERT INTO `sys_menu` VALUES (5, &#39;demo:delete&#39;, NULL, NULL, &#39;0&#39;, &#39;0&#39;, NULL, &#39;#&#39;, NULL, NULL, NULL, NULL, 0, NULL);\n\nINSERT INTO `sys_role` VALUES (3, &#39;管理员&#39;, NULL, &#39;0&#39;, 0, NULL, NULL, NULL, NULL, NULL);\nINSERT INTO `sys_role` VALUES (4, &#39;员工&#39;, NULL, &#39;0&#39;, 0, NULL, NULL, NULL, NULL, NULL);\nINSERT INTO `sys_role` VALUES (5, &#39;普通用户&#39;, NULL, &#39;0&#39;, 0, NULL, NULL, NULL, NULL, NULL);\n\nINSERT INTO `sys_role_menu` VALUES (1, 1);\nINSERT INTO `sys_role_menu` VALUES (1, 2);\nINSERT INTO `sys_role_menu` VALUES (1, 3);\nINSERT INTO `sys_role_menu` VALUES (1, 4);\nINSERT INTO `sys_role_menu` VALUES (2, 1);\nINSERT INTO `sys_role_menu` VALUES (2, 4);\nINSERT INTO `sys_role_menu` VALUES (3, 1);\n\nINSERT INTO `sys_user` VALUES (1, &#39;zhangsan&#39;, &#39;zhangsan&#39;, &#39;$2a$10$CFr1dsdBA3XDNrNRtsfX3ezUj/pUVsEhkg6cpKa9QG0oraGBMOZ5u&#39;, &#39;0&#39;, &#39;12@qq.com&#39;, &#39;123&#39;, &#39;1&#39;, NULL, &#39;0&#39;, NULL, &#39;2022-08-03 08:51:48&#39;, NULL, &#39;2022-08-27 08:51:54&#39;, 0);\nINSERT INTO `sys_user` VALUES (2, &#39;lisi&#39;, &#39;lisi&#39;, &#39;$2a$10$GRjbaR73zd9c9tCnj0BnnexqGSbQzXCVrXTPVEiOJqaypwCijbe4O&#39;, &#39;0&#39;, &#39;65.@126.com&#39;, &#39;456&#39;, &#39;0&#39;, NULL, &#39;0&#39;, NULL, &#39;2022-08-19 08:51:51&#39;, NULL, &#39;2022-08-27 08:51:59&#39;, 0);\nINSERT INTO `sys_user` VALUES (3, &#39;wangwu&#39;, &#39;wangwu&#39;, &#39;$2a$10$PsFb4a4bn0A.5pf4Rq5kheKaOkrhJOaz6hlu2WmBnkE8H9wZOoNXS&#39;, &#39;0&#39;, NULL, NULL, NULL, NULL, &#39;1&#39;, NULL, NULL, NULL, NULL, 0);\n\nINSERT INTO `sys_user_role` VALUES (1, 1);\nINSERT INTO `sys_user_role` VALUES (2, 2);\nINSERT INTO `sys_user_role` VALUES (3, 3);\n</code></pre>\n<h5 id=\"实体类1\"><a href=\"#实体类1\" class=\"headerlink\" title=\"实体类1\"></a>实体类1</h5><p>​\t这里目前只提供了登录所需要的User对象，以及我们自己封装的 USerDetails 对象，其余对象自己后续生成。（easycode 、 mybatisX、….都行）</p>\n<pre><code class=\"java\">package com.zjj.pojo;\n\nimport java.util.Date;\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\nimport lombok.*;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport com.baomidou.mybatisplus.annotation.TableField;\n\n/**\n * 用户表(User)表实体类\n *\n * @author makejava\n * @since 2022-08-24 21:09:13\n */\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@ToString\n@TableName(value = &quot;sys_user&quot;)\npublic class User implements Serializable &#123;\n    /**\n    * 主键    \n    */ \n    @TableField(&quot;id&quot;)\n    private Long id;\n    \n    /**\n    * 用户名    \n    */ \n    @TableField(&quot;user_name&quot;)\n    private String username;\n    \n    /**\n    * 昵称    \n    */ \n    @TableField(&quot;nick_name&quot;)\n    private String nickName;\n    \n    /**\n    * 密码    \n    */ \n    @TableField(&quot;password&quot;)\n    private String password;\n    \n    /**\n    * 账号状态（0正常 1停用）    \n    */ \n    @TableField(&quot;status&quot;)\n    private String status;\n    \n    /**\n    * 邮箱    \n    */ \n    @TableField(&quot;email&quot;)\n    private String email;\n    \n    /**\n    * 手机号    \n    */ \n    @TableField(&quot;phonenumber&quot;)\n    private String phonenumber;\n    \n    /**\n    * 用户性别（0男，1女，2未知）    \n    */ \n    @TableField(&quot;sex&quot;)\n    private String sex;\n    \n    /**\n    * 头像    \n    */ \n    @TableField(&quot;avatar&quot;)\n    private String avatar;\n    \n    /**\n    * 用户类型（0管理员，1普通用户）    \n    */ \n    @TableField(&quot;user_type&quot;)\n    private String userType;\n    \n    /**\n    * 创建人的用户id    \n    */ \n    @TableField(&quot;create_by&quot;)\n    private Long createBy;\n    \n    /**\n    * 创建时间    \n    */ \n    @TableField(&quot;create_time&quot;)\n    private Date createTime;\n    \n    /**\n    * 更新人    \n    */ \n    @TableField(&quot;update_by&quot;)\n    private Long updateBy;\n    \n    /**\n    * 更新时间    \n    */ \n    @TableField(&quot;update_time&quot;)\n    private Date updateTime;\n    \n    /**\n    * 删除标志（0代表未删除，1代表已删除）    \n    */ \n    @TableField(&quot;del_flag&quot;)\n    private Integer delFlag;\n    \n\n&#125;\n</code></pre>\n<h5 id=\"实体类2\"><a href=\"#实体类2\" class=\"headerlink\" title=\"实体类2\"></a>实体类2</h5><pre><code class=\"java\">import com.alibaba.fastjson.annotation.JSONField;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.ToString;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@ToString\npublic class LoginUser implements UserDetails &#123;\n    private User user;\n\n    private List&lt;String&gt; permission;\n\n    public LoginUser(User user, List&lt;String&gt; permission) &#123;\n        this.user = user;\n        this.permission = permission;\n    &#125;\n\n    @JSONField(serialize = false) //redis存储的话会出现问题，不让他序列化，主要为了安全\n    List&lt;SimpleGrantedAuthority&gt; authorities ;\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;\n        // 把permission中的String类型的权限信息封装成 SimpleGrantedAuthority 对象\n        if (null != authorities) return authorities;//要是有信息就不用再授权了\n        authorities = permission.stream()\n                .map(SimpleGrantedAuthority::new)\n                .collect(Collectors.toList());\n        return authorities;\n    &#125;\n\n    @Override\n    public String getPassword() &#123;\n        return user.getPassword();\n    &#125;\n\n    @Override\n    public String getUsername() &#123;\n        return user.getUsername();\n    &#125;\n\n    @Override\n    public boolean isAccountNonExpired() &#123;\n        return true;\n    &#125;\n\n    @Override\n    public boolean isAccountNonLocked() &#123;\n        return true;\n    &#125;\n\n    @Override\n    public boolean isCredentialsNonExpired() &#123;\n        return true;\n    &#125;\n\n    @Override\n    public boolean isEnabled() &#123;\n        return true;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"2-重写一个登录服务-ServiceImpl\"><a href=\"#2-重写一个登录服务-ServiceImpl\" class=\"headerlink\" title=\"2 重写一个登录服务(ServiceImpl)\"></a>2 重写一个登录服务(ServiceImpl)</h4><p>​\t这里要实现一个实现 UserDetailsService ，重写loadUserByUsername，因为这里是我们认证的地方，在下一个章节我们会具体说明</p>\n<pre><code class=\"java\">package com.zjj.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport com.zjj.mapper.UserMapper;\nimport com.zjj.pojo.LoginUser;\nimport com.zjj.pojo.User;\nimport com.zjj.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\n/**\n * 用户表(User)表服务实现类\n * @author makejava\n * @since 2022-08-24 21:09:13\n */\n@Service(&quot;userService&quot;)\npublic class UserServiceImpl extends ServiceImpl&lt;UserMapper, User&gt;\n        implements UserService, UserDetailsService &#123;\n    @Autowired\n    private UserMapper userMapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;\n        LambdaQueryWrapper&lt;User&gt; qw = new LambdaQueryWrapper&lt;&gt;();\n        qw.eq(User::getUsername, username);\n        User user = userMapper.selectOne(qw);\n        if (Objects.isNull(user)) &#123;\n            throw new UsernameNotFoundException(&quot;没有该用户&quot;);\n        &#125;\n\n        // TODO 权限信息后序添加\n        List&lt;String&gt; menus = userMapper.findMenuByUserId(user.getId());\n        List&lt;String&gt; roles = userMapper.findRoleByUserId(user.getId());\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n\n        for (String menu : menus) &#123;\n            res.add(menu);\n        &#125;\n        for (String role : roles) &#123;\n            res.add(&quot;ROLE_&quot;+role);\n        &#125;\n        // 用户的权限和角色直接赋值 的话 要注意写法\n        /*\n        1、我们没有user对象直接往回 new UserDetails(username,password,Authorities) 对象时，\n            要注意Authorities手动String转化可以用 AuthorityUtils.commaSeparatedStringToAuthorityList(String str)\n                但是里面的 str里面包含了权限以及角色，每个要用 “,” 间隔，而且角色开头要要拼接 ROLE_\n\n        2、我们自定义了user 实现了 UserDetails 对象 我们重写了 getAuthorities属性，具体看这个类的注释\n            他在初始化值的时候我们传参传递的是一个list对象，这个时候我们不需要用 “，” 间隔，但是角色前要加 ROLE_\n         */\n        return new LoginUser(user,res);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"3-重写mapper层和对应的映射文件\"><a href=\"#3-重写mapper层和对应的映射文件\" class=\"headerlink\" title=\"3 重写mapper层和对应的映射文件\"></a>3 重写mapper层和对应的映射文件</h4><pre><code class=\"java\">import com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport com.zjj.pojo.User;\nimport org.apache.ibatis.annotations.Mapper;\n\nimport java.util.List;\n\n/**\n * 用户表(User)表数据库访问层\n *\n * @author makejava\n * @since 2022-08-24 21:09:13\n */\n\n@Mapper\npublic interface UserMapper extends BaseMapper&lt;User&gt; &#123;\n    public List&lt;String&gt; findMenuByUserId(Long id);\n    public List&lt;String&gt; findRoleByUserId(Long id);\n\n&#125;\n</code></pre>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;\n&lt;mapper namespace=&quot;com.zjj.mapper.UserMapper&quot;&gt;\n\n    &lt;sql id=&quot;AllUserColumn&quot;&gt;id , user_name , nick_name , password , status , email , phonenumber , sex , avatar , user_type , create_by , create_time , update_by , update_time , del_flag &lt;/sql&gt;   \n    &lt;resultMap type=&quot;com.zjj.pojo.User&quot; id=&quot;UserMap&quot;&gt;\n        &lt;result property=&quot;id&quot; column=&quot;id&quot; /&gt;\n        &lt;result property=&quot;userName&quot; column=&quot;user_name&quot; /&gt;\n        &lt;result property=&quot;nickName&quot; column=&quot;nick_name&quot; /&gt;\n        &lt;result property=&quot;password&quot; column=&quot;password&quot; /&gt;\n        &lt;result property=&quot;status&quot; column=&quot;status&quot; /&gt;\n        &lt;result property=&quot;email&quot; column=&quot;email&quot; /&gt;\n        &lt;result property=&quot;phonenumber&quot; column=&quot;phonenumber&quot; /&gt;\n        &lt;result property=&quot;sex&quot; column=&quot;sex&quot; /&gt;\n        &lt;result property=&quot;avatar&quot; column=&quot;avatar&quot; /&gt;\n        &lt;result property=&quot;userType&quot; column=&quot;user_type&quot; /&gt;\n        &lt;result property=&quot;createBy&quot; column=&quot;create_by&quot; /&gt;\n        &lt;result property=&quot;createTime&quot; column=&quot;create_time&quot; /&gt;\n        &lt;result property=&quot;updateBy&quot; column=&quot;update_by&quot; /&gt;\n        &lt;result property=&quot;updateTime&quot; column=&quot;update_time&quot; /&gt;\n        &lt;result property=&quot;delFlag&quot; column=&quot;del_flag&quot; /&gt;\n    &lt;/resultMap&gt;\n    &lt;select id=&quot;findMenuByUserId&quot; resultType=&quot;java.lang.String&quot;&gt;\n        SELECT\n            distinct(m.menu_name)\n        FROM\n            sys_user_role ur\n                LEFT JOIN sys_user u on u.id = ur.user_id\n                LEFT JOIN sys_role r ON ur.role_id = r.id\n                LEFT JOIN sys_role_menu rm ON ur.role_id = rm.role_id\n                LEFT JOIN sys_menu m ON m.id = rm.menu_id\n        WHERE\n            u.id = #&#123;args1&#125;\n          AND r.status = 0\n          AND m.status = 0\n    &lt;/select&gt;\n    &lt;select id=&quot;findRoleByUserId&quot; resultType=&quot;java.lang.String&quot;&gt;\n        SELECT\n            distinct(r.name)\n        FROM\n            sys_user_role ur\n                LEFT JOIN sys_user u on u.id = ur.user_id\n                LEFT JOIN sys_role r ON ur.role_id = r.id\n                LEFT JOIN sys_role_menu rm ON ur.role_id = rm.role_id\n                LEFT JOIN sys_menu m ON m.id = rm.menu_id\n        WHERE\n            u.id = #&#123;args1&#125;\n          AND r.status = 0\n          AND m.status = 0\n    &lt;/select&gt;\n    \n\n&lt;/mapper&gt;\n</code></pre>\n<h4 id=\"4-导入我们的登录页面\"><a href=\"#4-导入我们的登录页面\" class=\"headerlink\" title=\"4 导入我们的登录页面\"></a>4 导入我们的登录页面</h4><pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;title&gt;内容&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form action=&quot;/login&quot; method=&quot;post&quot;&gt;\n            username:&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;br/&gt;\n            password:&lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;&lt;br/&gt;\n            &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;\n        &lt;/form&gt;\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"5-提供登录接口\"><a href=\"#5-提供登录接口\" class=\"headerlink\" title=\"5 提供登录接口\"></a>5 提供登录接口</h4><p>​\t就是一个页面的跳转指定我们的登录页面(&#x3D;&#x3D;要配置的&#x3D;&#x3D;)</p>\n<pre><code class=\"java\">import com.zjj.pojo.User;\nimport com.zjj.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseBody;\n@Controller\npublic class LoginController &#123;\n    @Autowired\n    private UserService userService;\n\n    @RequestMapping(&quot;/demo&quot;)\n    @ResponseBody\n    public String demo() &#123;\n        return &quot;demo&quot;;\n    &#125;\n\n    // 登录页面\n    @RequestMapping(&quot;/showLogin&quot;)\n    public String logint() &#123;\n        System.out.println(&quot;logint invoked&quot;);\n        return &quot;login&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"6-修改配置类\"><a href=\"#6-修改配置类\" class=\"headerlink\" title=\"6 修改配置类\"></a>6 修改配置类</h4><p>​\t主要内容和细节，在formLogin里面，一定仔细查看注释，小细节很多</p>\n<pre><code class=\"java\">import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\n@Configuration\npublic class MySecurityCore extends WebSecurityConfigurerAdapter &#123;\n    @Bean\n    public PasswordEncoder getPasswordEncoder()&#123;\n        return new BCryptPasswordEncoder();\n    &#125;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n\n        // http.formLogin() 所有和表单有关系的\n        http.formLogin()\n                // 登录页面，走一个controller\n                // 注意要和，LoginProcessingUrl 配合使用，不然在表单中的action中 url 失效\n                // 因为只配置loginPage()， 会导致在初始化的时候将loginProcessingUrl的配置相同化，可以自己debug 在AbstractAuthenticationFilterConfigurer 的 updateAuthenticationDefaults 方法\n                // 也就是说loginPage(&quot;/login&quot;)  loginProcessingUrl(&quot;/login&quot;),导致提交信息失败最终导致认证失败\n                .loginPage(&quot;/showLogin&quot;)\n                // 当发现什么URL时，把请求转发给自定义登录逻辑\n                // 表单提交的地址 action ,他就会直接去认证进入到 UserDetailsServiceImpl\n                // 去这里进行用户的验证 和 用户权限信息的集体封装\n                .loginProcessingUrl(&quot;/login&quot;)\n                // 登录成功的操作\n                // 下面两种方法都可以，推荐第二种，两种同时写第一个直接失效\n                // 第一种写法，要注意在写映射的时候要注意请求的方法 get/post\n                .successForwardUrl(&quot;/showMain&quot;)\n                .successHandler((request, response, authentication) -&gt; &#123;\n                    System.out.println(&quot;successHandler invoked&quot;);\n                    // 我们在每次请求同一个页面尽量使用重定向，要是请求转发\n                    // 因为请求转发是浏览器的行为，每次都要请求服务器并且重复提交表单，不好\n                    // response.sendRedirect(&quot;/fail&quot;);\n                    LoginUser loginUser = (LoginUser) authentication.getPrincipal();\n                    for (String s : loginUser.getPermission()) &#123;\n                        System.out.println(s);\n                    &#125;\n                &#125;)\n                // 登录失败的操作\n                // 内容和上述情况相同，只是一个成功的一个失败的\n                .failureForwardUrl(&quot;/fail&quot;)\n                // 当前端表单传递过来的用户名参数、密码参数名和后端不对应，可以利用下列方法\n                // 指定前端传递过来的用户名参数名称，默认 username\n                //.usernameParameter(&quot;MyuserName&quot;)\n                // 指定前端传递过来的密码参数名称，默认 password\n                //.passwordParameter(&quot;MypassWord&quot;)\n        ;\n\n        // http.authorizeRequests() 所有和授权相关\n        http.authorizeRequests()\n                // 这里面支持 正则 和 ant表达式\n                .antMatchers(&quot;/showLogin&quot;).anonymous()\n                .antMatchers(&quot;/js/**&quot;).permitAll()\n                .anyRequest().authenticated();\n\n\n        // http.csrf\n        http.csrf().disable()\n                // 不通过Session获取SecurityContext\n                // 因为我们使用了前后端分离的思想，在session中不存在参数，要用让东西存在它里面，所以不让他生成\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"7-启动测试\"><a href=\"#7-启动测试\" class=\"headerlink\" title=\"7 启动测试\"></a>7 启动测试</h4><p>这个时候我们的用户名、密码都是我们在数据库中存储的（&#x3D;&#x3D;密码必须使我们提供的加密方式加密之后的&#x3D;&#x3D;）</p>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20220825114004014.png\" class=\"\">\n\n\n<p>登录是否成功，一方面看是否请求被阻拦</p>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20220825114855873.png\" class=\"\">\n\n\n<p>另一方面，我在配置中设置了认证成功之后的操作 successHandler(request,response.authentication) 我在里面将我们获得认证的用户权限信息全部打印在了控制台，如果错误了也可同样配置一些信息，具体配置将在后序章节详细总结我们的配置类中的配置，现在主要目的是理清逻辑即可</p>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20220825114558928.png\" class=\"\">\n\n\n<h4 id=\"8-补充——密码加密\"><a href=\"#8-补充——密码加密\" class=\"headerlink\" title=\"8 补充——密码加密\"></a>8 补充——密码加密</h4><p>实际项目中我们不会把密码明文存储在数据库中。</p>\n<p>​\t默认使用的PasswordEncoder要求数据库中的密码格式为：{id}password 。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换PasswordEncoder。</p>\n<p>​\t我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder。</p>\n<p>​\t我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。</p>\n<p>​\t我们可以定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。</p>\n<pre><code class=\"java\">@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n    \n    @Bean\n    public PasswordEncoder passwordEncoder()&#123;\n        return new BCryptPasswordEncoder();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"3-3-2-前后端分离\"><a href=\"#3-3-2-前后端分离\" class=\"headerlink\" title=\"3.3.2  前后端分离\"></a>3.3.2  前后端分离</h3><h4 id=\"1-准备工作-1\"><a href=\"#1-准备工作-1\" class=\"headerlink\" title=\"1 准备工作\"></a>1 准备工作</h4><p>数据库、实体类均和3.3.1中相同</p>\n<p>application.yml</p>\n<pre><code class=\"yaml\">spring:\n  application:\n    name: spring-security\n  datasource:\n    druid:\n      url: jdbc:mysql://localhost:3306/mydb?characterEncoding=utf-8&amp;serverTimezone=UTC\n      username: root\n      password: root\n      driver-class-name: com.mysql.cj.jdbc.Driver\n  redis:\n    host: localhost\n    port: 6379\nmybatis-plus:\n  mapper-locations: classpath:mapper/*.xml\nlogging:\n  level:\n    com:\n      zjj:\n        mapper: debug\n</code></pre>\n<p>统一返回类</p>\n<pre><code class=\"java\">package com.zjj.common;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class ResponseResult&lt;T&gt; &#123;\n    /**\n     * 状态码\n     */\n    private Integer code;\n    /**\n     * 提示信息，如果有错误时，前端可以获取该字段进行提示\n     */\n    private String msg;\n    /**\n     * 查询到的结果数据，\n     */\n    private T data;\n\n    public ResponseResult(Integer code, String msg) &#123;\n        this.code = code;\n        this.msg = msg;\n    &#125;\n\n    public ResponseResult(Integer code, T data) &#123;\n        this.code = code;\n        this.data = data;\n    &#125;\n\n    public Integer getCode() &#123;\n        return code;\n    &#125;\n\n    public void setCode(Integer code) &#123;\n        this.code = code;\n    &#125;\n\n    public String getMsg() &#123;\n        return msg;\n    &#125;\n\n    public void setMsg(String msg) &#123;\n        this.msg = msg;\n    &#125;\n\n    public T getData() &#123;\n        return data;\n    &#125;\n\n    public void setData(T data) &#123;\n        this.data = data;\n    &#125;\n\n    public ResponseResult(Integer code, String msg, T data) &#123;\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    &#125;\n&#125;\n</code></pre>\n<p>工具类</p>\n<pre><code class=\"java\">import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.serializer.SerializerFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport org.springframework.data.redis.serializer.RedisSerializer;\nimport org.springframework.data.redis.serializer.SerializationException;\nimport com.alibaba.fastjson.parser.ParserConfig;\nimport org.springframework.util.Assert;\nimport java.nio.charset.Charset;\n\n/**\n * Redis使用FastJson序列化\n * \n * @author sg\n */\npublic class FastJsonRedisSerializer&lt;T&gt; implements RedisSerializer&lt;T&gt;\n&#123;\n\n    public static final Charset DEFAULT_CHARSET = Charset.forName(&quot;UTF-8&quot;);\n\n    private Class&lt;T&gt; clazz;\n\n    static\n    &#123;\n        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);\n    &#125;\n\n    public FastJsonRedisSerializer(Class&lt;T&gt; clazz)\n    &#123;\n        super();\n        this.clazz = clazz;\n    &#125;\n\n    @Override\n    public byte[] serialize(T t) throws SerializationException\n    &#123;\n        if (t == null)\n        &#123;\n            return new byte[0];\n        &#125;\n        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);\n    &#125;\n\n    @Override\n    public T deserialize(byte[] bytes) throws SerializationException\n    &#123;\n        if (bytes == null || bytes.length &lt;= 0)\n        &#123;\n            return null;\n        &#125;\n        String str = new String(bytes, DEFAULT_CHARSET);\n\n        return JSON.parseObject(str, clazz);\n    &#125;\n\n\n    protected JavaType getJavaType(Class&lt;?&gt; clazz)\n    &#123;\n        return TypeFactory.defaultInstance().constructType(clazz);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">package com.zjj.util;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.JwtBuilder;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\n\nimport javax.crypto.SecretKey;\nimport javax.crypto.spec.SecretKeySpec;\nimport java.util.Base64;\nimport java.util.Date;\nimport java.util.UUID;\n\n/**\n * JWT工具类\n */\npublic class JwtUtil &#123;\n\n    //有效期为\n    public static final Long JWT_TTL = 60 * 60 *1000L;// 60 * 60 *1000  一个小时\n    //设置秘钥明文\n    public static final String JWT_KEY = &quot;sangeng&quot;;\n\n    public static String getUUID()&#123;\n        String token = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;);\n        return token;\n    &#125;\n    \n    /**\n     * 生成jtw\n     * @param subject token中要存放的数据（json格式）\n     * @return\n     */\n    public static String createJWT(String subject) &#123;\n        JwtBuilder builder = getJwtBuilder(subject, null, getUUID());// 设置过期时间\n        return builder.compact();\n    &#125;\n\n    /**\n     * 生成jtw\n     * @param subject token中要存放的数据（json格式）\n     * @param ttlMillis token超时时间\n     * @return\n     */\n    public static String createJWT(String subject, Long ttlMillis) &#123;\n        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, getUUID());// 设置过期时间\n        return builder.compact();\n    &#125;\n\n    private static JwtBuilder getJwtBuilder(String subject, Long ttlMillis, String uuid) &#123;\n        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;\n        SecretKey secretKey = generalKey();\n        long nowMillis = System.currentTimeMillis();\n        Date now = new Date(nowMillis);\n        if(ttlMillis==null)&#123;\n            ttlMillis=JwtUtil.JWT_TTL;\n        &#125;\n        long expMillis = nowMillis + ttlMillis;\n        Date expDate = new Date(expMillis);\n        return Jwts.builder()\n                .setId(uuid)              //唯一的ID\n                .setSubject(subject)   // 主题  可以是JSON数据\n                .setIssuer(&quot;sg&quot;)     // 签发者\n                .setIssuedAt(now)      // 签发时间\n                .signWith(signatureAlgorithm, secretKey) //使用HS256对称加密算法签名, 第二个参数为秘钥\n                .setExpiration(expDate);\n    &#125;\n\n    /**\n     * 创建token\n     * @param id\n     * @param subject\n     * @param ttlMillis\n     * @return\n     */\n    public static String createJWT(String id, String subject, Long ttlMillis) &#123;\n        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, id);// 设置过期时间\n        return builder.compact();\n    &#125;\n\n    public static void main(String[] args) throws Exception &#123;\n        String token = &quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg&quot;;\n        Claims claims = parseJWT(token);\n        System.out.println(claims);\n    &#125;\n\n    /**\n     * 生成加密后的秘钥 secretKey\n     * @return\n     */\n    public static SecretKey generalKey() &#123;\n        byte[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);\n        SecretKey key = new SecretKeySpec(encodedKey, 0, encodedKey.length, &quot;AES&quot;);\n        return key;\n    &#125;\n    \n    /**\n     * 解析\n     *\n     * @param jwt\n     * @return\n     * @throws Exception\n     */\n    public static Claims parseJWT(String jwt) throws Exception &#123;\n        SecretKey secretKey = generalKey();\n        return Jwts.parser()\n                .setSigningKey(secretKey)\n                .parseClaimsJws(jwt)\n                .getBody();\n    &#125;\n\n\n&#125;\n</code></pre>\n<pre><code class=\"java\">package com.zjj.util;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.redis.core.BoundSetOperations;\nimport org.springframework.data.redis.core.HashOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.core.ValueOperations;\nimport org.springframework.stereotype.Component;\n\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)\n@Component\npublic class RedisCache\n&#123;\n    @Autowired\n    public RedisTemplate redisTemplate;\n\n    /**\n     * 缓存基本的对象，Integer、String、实体类等\n     *\n     * @param key 缓存的键值\n     * @param value 缓存的值\n     */\n    public &lt;T&gt; void setCacheObject(final String key, final T value)\n    &#123;\n        redisTemplate.opsForValue().set(key, value);\n    &#125;\n\n    /**\n     * 缓存基本的对象，Integer、String、实体类等\n     *\n     * @param key 缓存的键值\n     * @param value 缓存的值\n     * @param timeout 时间\n     * @param timeUnit 时间颗粒度\n     */\n    public &lt;T&gt; void setCacheObject(final String key, final T value, final Integer timeout, final TimeUnit timeUnit)\n    &#123;\n        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);\n    &#125;\n\n    /**\n     * 设置有效时间\n     *\n     * @param key Redis键\n     * @param timeout 超时时间\n     * @return true=设置成功；false=设置失败\n     */\n    public boolean expire(final String key, final long timeout)\n    &#123;\n        return expire(key, timeout, TimeUnit.SECONDS);\n    &#125;\n\n    /**\n     * 设置有效时间\n     *\n     * @param key Redis键\n     * @param timeout 超时时间\n     * @param unit 时间单位\n     * @return true=设置成功；false=设置失败\n     */\n    public boolean expire(final String key, final long timeout, final TimeUnit unit)\n    &#123;\n        return redisTemplate.expire(key, timeout, unit);\n    &#125;\n\n    /**\n     * 获得缓存的基本对象。\n     *\n     * @param key 缓存键值\n     * @return 缓存键值对应的数据\n     */\n    public &lt;T&gt; T getCacheObject(final String key)\n    &#123;\n        ValueOperations&lt;String, T&gt; operation = redisTemplate.opsForValue();\n        return operation.get(key);\n    &#125;\n\n    /**\n     * 删除单个对象\n     *\n     * @param key\n     */\n    public boolean deleteObject(final String key)\n    &#123;\n        return redisTemplate.delete(key);\n    &#125;\n\n    /**\n     * 删除集合对象\n     *\n     * @param collection 多个对象\n     * @return\n     */\n    public long deleteObject(final Collection collection)\n    &#123;\n        return redisTemplate.delete(collection);\n    &#125;\n\n    /**\n     * 缓存List数据\n     *\n     * @param key 缓存的键值\n     * @param dataList 待缓存的List数据\n     * @return 缓存的对象\n     */\n    public &lt;T&gt; long setCacheList(final String key, final List&lt;T&gt; dataList)\n    &#123;\n        Long count = redisTemplate.opsForList().rightPushAll(key, dataList);\n        return count == null ? 0 : count;\n    &#125;\n\n    /**\n     * 获得缓存的list对象\n     *\n     * @param key 缓存的键值\n     * @return 缓存键值对应的数据\n     */\n    public &lt;T&gt; List&lt;T&gt; getCacheList(final String key)\n    &#123;\n        return redisTemplate.opsForList().range(key, 0, -1);\n    &#125;\n\n    /**\n     * 缓存Set\n     *\n     * @param key 缓存键值\n     * @param dataSet 缓存的数据\n     * @return 缓存数据的对象\n     */\n    public &lt;T&gt; BoundSetOperations&lt;String, T&gt; setCacheSet(final String key, final Set&lt;T&gt; dataSet)\n    &#123;\n        BoundSetOperations&lt;String, T&gt; setOperation = redisTemplate.boundSetOps(key);\n        Iterator&lt;T&gt; it = dataSet.iterator();\n        while (it.hasNext())\n        &#123;\n            setOperation.add(it.next());\n        &#125;\n        return setOperation;\n    &#125;\n\n    /**\n     * 获得缓存的set\n     *\n     * @param key\n     * @return\n     */\n    public &lt;T&gt; Set&lt;T&gt; getCacheSet(final String key)\n    &#123;\n        return redisTemplate.opsForSet().members(key);\n    &#125;\n\n    /**\n     * 缓存Map\n     *\n     * @param key\n     * @param dataMap\n     */\n    public &lt;T&gt; void setCacheMap(final String key, final Map&lt;String, T&gt; dataMap)\n    &#123;\n        if (dataMap != null) &#123;\n            redisTemplate.opsForHash().putAll(key, dataMap);\n        &#125;\n    &#125;\n\n    /**\n     * 获得缓存的Map\n     *\n     * @param key\n     * @return\n     */\n    public &lt;T&gt; Map&lt;String, T&gt; getCacheMap(final String key)\n    &#123;\n        return redisTemplate.opsForHash().entries(key);\n    &#125;\n\n    /**\n     * 往Hash中存入数据\n     *\n     * @param key Redis键\n     * @param hKey Hash键\n     * @param value 值\n     */\n    public &lt;T&gt; void setCacheMapValue(final String key, final String hKey, final T value)\n    &#123;\n        redisTemplate.opsForHash().put(key, hKey, value);\n    &#125;\n\n    /**\n     * 获取Hash中的数据\n     *\n     * @param key Redis键\n     * @param hKey Hash键\n     * @return Hash中的对象\n     */\n    public &lt;T&gt; T getCacheMapValue(final String key, final String hKey)\n    &#123;\n        HashOperations&lt;String, String, T&gt; opsForHash = redisTemplate.opsForHash();\n        return opsForHash.get(key, hKey);\n    &#125;\n\n    /**\n     * 删除Hash中的数据\n     * \n     * @param key\n     * @param hkey\n     */\n    public void delCacheMapValue(final String key, final String hkey)\n    &#123;\n        HashOperations hashOperations = redisTemplate.opsForHash();\n        hashOperations.delete(key, hkey);\n    &#125;\n\n    /**\n     * 获取多个Hash中的数据\n     *\n     * @param key Redis键\n     * @param hKeys Hash键集合\n     * @return Hash对象集合\n     */\n    public &lt;T&gt; List&lt;T&gt; getMultiCacheMapValue(final String key, final Collection&lt;Object&gt; hKeys)\n    &#123;\n        return redisTemplate.opsForHash().multiGet(key, hKeys);\n    &#125;\n\n    /**\n     * 获得缓存的基本对象列表\n     *\n     * @param pattern 字符串前缀\n     * @return 对象列表\n     */\n    public Collection&lt;String&gt; keys(final String pattern)\n    &#123;\n        return redisTemplate.keys(pattern);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">package com.zjj.util;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\npublic class WebUtils\n&#123;\n    /**\n     * 将字符串渲染到客户端\n     * \n     * @param response 渲染对象\n     * @param string 待渲染的字符串\n     * @return null\n     */\n    public static String renderString(HttpServletResponse response, String string) &#123;\n        try\n        &#123;\n            response.setStatus(200);\n            response.setContentType(&quot;application/json&quot;);\n            response.setCharacterEncoding(&quot;utf-8&quot;);\n            response.getWriter().print(string);\n        &#125;\n        catch (IOException e)\n        &#123;\n            e.printStackTrace();\n        &#125;\n        return null;\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">package com.zjj.config;\n\nimport com.zjj.util.FastJsonRedisSerializer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\n@Configuration\npublic class RedisConfig &#123;\n\n    @Bean\n    @SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)\n    public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory)\n    &#123;\n        RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;();\n        template.setConnectionFactory(connectionFactory);\n\n        FastJsonRedisSerializer serializer = new FastJsonRedisSerializer(Object.class);\n\n        // 使用StringRedisSerializer来序列化和反序列化redis的key值\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(serializer);\n\n        // Hash的key也采用StringRedisSerializer的序列化方式\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setHashValueSerializer(serializer);\n\n        template.afterPropertiesSet();\n        return template;\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"2-重写登录服务-ServiceImpl\"><a href=\"#2-重写登录服务-ServiceImpl\" class=\"headerlink\" title=\"2  重写登录服务(ServiceImpl)\"></a>2  重写登录服务(ServiceImpl)</h4><p>​\t这里我们需要写一个LoginService 、LoginServiceImpl 以及&#x3D;&#x3D;认证服务&#x3D;&#x3D;  UserDetailServiceImpl (后续会详细解释)</p>\n<pre><code class=\"java\">package com.zjj.service.impl;\n\nimport com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.zjj.mapper.UserMapper;\nimport com.zjj.pojo.LoginUser;\nimport com.zjj.pojo.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Objects;\n\n@Service\npublic class UserDetailServiceImpl implements UserDetailsService &#123;\n    @Autowired\n    private UserMapper userMapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;\n        LambdaQueryWrapper&lt;User&gt; qw = new LambdaQueryWrapper&lt;&gt;();\n        qw.eq(User::getUserName, username);\n        User user = userMapper.selectOne(qw);\n        if (Objects.isNull(user)) &#123;\n            throw new UsernameNotFoundException(&quot;没有该用户&quot;);\n        &#125;\n\n        // TODO 权限信息后序添加\n        List&lt;String&gt; menus = userMapper.findMenuByUserId(user.getId());\n        List&lt;String&gt; roles = userMapper.findRoleByUserId(user.getId());\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n\n        \n        for (String menu : menus) &#123;\n            res.add(menu);\n        &#125;\n        for (String role : roles) &#123;\n            res.add(&quot;ROLE_&quot;+role);\n        &#125;\n        // 用户的权限和角色直接赋值 的话 要注意写法\n        /*\n        1、我们没有user对象直接往回 new UserDetails(username,password,Authorities) 对象时，\n            要注意Authorities手动String转化可以用 AuthorityUtils.commaSeparatedStringToAuthorityList(String str)\n                但是里面的 str里面包含了权限以及角色，每个要用 “,” 间隔，而且角色开头要要拼接 ROLE_\n\n        2、我们自定义了user 实现了 UserDetails 对象 我们重写了 getAuthorities属性，具体看这个类的注释\n            他在初始化值的时候我们传参传递的是一个list对象，这个时候我们不需要用 “，” 间隔，但是角色前要加 ROLE_\n         */\n        return new LoginUser(user,res);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">public interface LoginService &#123;\n    public ResponseResult login(User user);\n\n    ResponseResult logout();\n&#125;\n</code></pre>\n<pre><code class=\"java\">import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;\nimport com.zjj.mapper.UserMapper;\nimport com.zjj.pojo.LoginUser;\nimport com.zjj.pojo.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Objects;\n\n@Service\npublic class UserDetailServiceImpl implements UserDetailsService &#123;\n    @Autowired\n    private UserMapper userMapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &#123;\n        LambdaQueryWrapper&lt;User&gt; qw = new LambdaQueryWrapper&lt;&gt;();\n        qw.eq(User::getUserName, username);\n        User user = userMapper.selectOne(qw);\n        if (Objects.isNull(user)) &#123;\n            throw new UsernameNotFoundException(&quot;没有该用户&quot;);\n        &#125;\n\n        // TODO 权限信息后序添加\n        List&lt;String&gt; menus = userMapper.findMenuByUserId(user.getId());\n        List&lt;String&gt; roles = userMapper.findRoleByUserId(user.getId());\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n\n        for (String menu : menus) &#123;\n            res.add(menu);\n        &#125;\n        for (String role : roles) &#123;\n            res.add(&quot;ROLE_&quot;+role);\n        &#125;\n        // 用户的权限和角色直接赋值 的话 要注意写法\n        /*\n        1、我们没有user对象直接往回 new UserDetails(username,password,Authorities) 对象时，\n            要注意Authorities手动String转化可以用 AuthorityUtils.commaSeparatedStringToAuthorityList(String str)\n                但是里面的 str里面包含了权限以及角色，每个要用 “,” 间隔，而且角色开头要要拼接 ROLE_\n\n        2、我们自定义了user 实现了 UserDetails 对象 我们重写了 getAuthorities属性，具体看这个类的注释\n            他在初始化值的时候我们传参传递的是一个list对象，这个时候我们不需要用 “，” 间隔，但是角色前要加 ROLE_\n         */\n        return new LoginUser(user,res);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"3-重写mapper层和对应的映射文件-1\"><a href=\"#3-重写mapper层和对应的映射文件-1\" class=\"headerlink\" title=\"3 重写mapper层和对应的映射文件\"></a>3 重写mapper层和对应的映射文件</h4><p>和3.3.1的准备相同</p>\n<h4 id=\"4-配置类配置\"><a href=\"#4-配置类配置\" class=\"headerlink\" title=\"4 配置类配置\"></a>4 配置类配置</h4><pre><code class=\"java\">@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n\n    @Bean\n    public PasswordEncoder passwordEncoder()&#123;\n        return new BCryptPasswordEncoder();\n    &#125;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers(&quot;/user/login&quot;).anonymous()\n                // 除上面外的所有请求全部需要鉴权认证\n                .anyRequest().authenticated();\n    &#125;\n\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception &#123;\n        return super.authenticationManagerBean();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"5-对接登录接口\"><a href=\"#5-对接登录接口\" class=\"headerlink\" title=\"5 对接登录接口\"></a>5 对接登录接口</h4><p>假定登录接口为\t“&#x2F;user&#x2F;login”</p>\n<pre><code class=\"java\">@Controller\npublic class LoginController &#123;\n\n    @Autowired\n    private LoginService loginService;\n\n    @RequestMapping(&quot;/user/login&quot;)\n    @ResponseBody\n    public ResponseResult login(@RequestBody User user)&#123;\n        return loginService.login(user);\n    &#125;\n    @RequestMapping(&quot;/user/logout&quot;)\n    @ResponseBody\n    public ResponseResult logout() &#123;\n        return loginService.logout();\n    &#125;\n&#125;\n</code></pre>\n<p>5 测试接口</p>\n<p>这里用接口测试工具即可，我们没有登录页面，页面是前端提供的，所以我们只需要确保接口测试正确即可</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL3VzZXIvbG9naW4=\">http://localhost:8080/user/login</span></p>\n<pre><code class=\"json\">&#123;\n    &quot;userName&quot;:&quot;zhangsan&quot;,\n    &quot;password&quot;:&quot;zhangsan&quot;\n    // &quot;userName&quot;:&quot;lisi&quot;,\n    // &quot;password&quot;:&quot;lisi&quot;\n    // &quot;userName&quot;:&quot;wangwu&quot;,\n    // &quot;password&quot;:&quot;wangwu&quot;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20220825120818298.png\" class=\"\">\n\n\n<h4 id=\"6-优化认证——引入Redis\"><a href=\"#6-优化认证——引入Redis\" class=\"headerlink\" title=\"6 优化认证——引入Redis\"></a>6 优化认证——引入Redis</h4><p>​\t我们在项目中，不可能每次这种常用数据都去数据库访问，这样会给数据库造成极大的负担，导致我们的数据库宕机。因此我们引入的NoSQL数据库、缓存数据库 Redis 用来存储我们短期常用数据。但是问题又来了。怎么存储呢？</p>\n<p>​\t引入 3.2.1SpringSecurity完整流程 </p>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20211214144425527.png\" class=\"\">\n\n\n<p>​\t我们每次的登录验证都需要经过 UsernamePasswordAuthenticationFilter ，在这个过滤器下我们必须得到一个认证的用户，所以我们在这里为了得到用户的认证信息我们老办法就是去数据库中查找，但是我们现在不想让他老去数据库中找，在他之前我们要是直接能得到这个认证过的用户岂不皆大欢喜，所以我们在他之前也加上一个过滤器用来查找每次请求是否有这个认证用户有的话我们就可以省略掉去数据库中查找他的信息的过程。</p>\n<p>​\t那么问题又来了我们如何存储一个用户的信息呢？</p>\n<p>这里我们可以利用JWT根据我们的用户ID生成一个Token，以他为键值存储到redis中</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA3MDE3NS9hcnRpY2xlL2RldGFpbHMvMTE4NTU5Mjcy\">JWT详解</span> ：除了讲解JWT，还很好的帮忙回顾了Token的优势</p>\n<pre><code class=\"java\">package com.zjj.filter;\n\nimport com.zjj.pojo.LoginUser;\nimport com.zjj.util.JwtUtil;\nimport com.zjj.util.RedisCache;\nimport io.jsonwebtoken.Claims;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Component;\nimport org.springframework.util.StringUtils;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Objects;\n\n@Component\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter &#123;\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &#123;\n        //获取token\n        String token = request.getHeader(&quot;token&quot;);\n        if (!StringUtils.hasText(token)) &#123;\n            //放行\n            /*\n            * 解释一下，为什么没有Token还放行，因为没有token可以但是可能他是登录请求\n            * 我们还是要放行的，不然所有人都登录不了，但是问题是如果不是为什么还要放行\n            * 这里不用担心，如果不是登录请求他就可能会存在User对象的账户和密码，就无法完成第一步的认证工作，跟别说后面的鉴权了，所以他会直接被挡住\n            * 其次我们倒数第二个过滤器就是为我们处理我们出现的问题的过滤器，出了问题让他解决就行了，这里的问题其实大多数都是token错误，需要重新认证\n            * */\n            filterChain.doFilter(request, response);\n            return;\n        &#125;\n        //解析token\n        String userid;\n        try &#123;\n            Claims claims = JwtUtil.parseJWT(token);\n            userid = claims.getSubject();\n        &#125; catch (Exception e) &#123;\n            e.printStackTrace();\n            throw new RuntimeException(&quot;token非法&quot;);\n        &#125;\n        //从redis中获取用户信息\n        String redisKey = &quot;login:&quot; + userid;\n        LoginUser loginUser = redisCache.getCacheObject(redisKey);\n        if(Objects.isNull(loginUser))&#123;\n            throw new RuntimeException(&quot;用户未登录&quot;);\n        &#125;\n        //存入SecurityContextHolder ——&gt; 认证成功的对象都在这\n        //TODO 获取权限信息封装到Authentication中\n        /*\n        * 三参构造可以获取该对象是否是以认证状态\n        *  */\n        UsernamePasswordAuthenticationToken authenticationToken =\n                new UsernamePasswordAuthenticationToken(loginUser,null,loginUser.getAuthorities());\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        //放行\n        filterChain.doFilter(request, response);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"7-修改配置类\"><a href=\"#7-修改配置类\" class=\"headerlink\" title=\"7 修改配置类\"></a>7 修改配置类</h4><pre><code class=\"java\">package com.zjj.config;\n\nimport com.zjj.filter.JwtAuthenticationTokenFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.AuthenticationEntryPoint;\nimport org.springframework.security.web.access.AccessDeniedHandler;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n\n@Configuration\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter &#123;\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n    @Autowired\n    private AuthenticationEntryPoint authenticationEntryPoint;\n    @Autowired\n    private AccessDeniedHandler accessDeniedHandler;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n\n        // 认证、授权错误处理\n        http.exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler);\n        // 认证过滤器添加\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n\n        // url拦截\n        http.authorizeRequests()\n                // anonymous 匿名 没有认证的才可以访问，permitALL 谁都能访问，不需要认证\n                .antMatchers(&quot;/user/login&quot;,&quot;/login&quot;,&quot;/loginPage&quot;).anonymous()\n                .antMatchers(&quot;/login.html&quot;,&quot;/fail.html&quot;).permitAll()\n                // authenticated 认证了才能访问\n                .anyRequest().authenticated();\n\n        //关闭CSRF\n        http.csrf().disable()\n                // 不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n        // Cors\n        http.cors();\n    &#125;\n\n    @Bean\n    @Override\n    public AuthenticationManager authenticationManagerBean() throws Exception &#123;\n        return super.authenticationManagerBean();\n    &#125;\n\n\n    @Bean\n    public PasswordEncoder getPasswordEncoder()&#123;\n        return new BCryptPasswordEncoder();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"8-测试\"><a href=\"#8-测试\" class=\"headerlink\" title=\"8 测试\"></a>8 测试</h4><p>这里要打开你的 redis服务端 ，如果不是本地的，你要去配置中添加配置</p>\n<p>最后根据 步骤5 再次测试，成功后你的redis 中会多出一组数据，这就是我们的Token，具体步骤不再演示！</p>\n<h1 id=\"四、UserDetailsService详解\"><a href=\"#四、UserDetailsService详解\" class=\"headerlink\" title=\"四、UserDetailsService详解\"></a>四、UserDetailsService详解</h1><p>​\t当什么也没有配置的时候，账号和密码是由Spring Security定义生成的。而在实际项目中账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制**&#x3D;&#x3D;认证逻辑&#x3D;&#x3D;**。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20211214151515385.png\" class=\"\">\n\n\n<p>​\t如果需要自定义逻辑时，只需要实现UserDetailsService接口即可。接口定义如下：</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-03.jpg\" class=\"\">\n\n\n<h2 id=\"1-返回值\"><a href=\"#1-返回值\" class=\"headerlink\" title=\"1.返回值\"></a>1.返回值</h2><p>​\t返回值UserDetails是一个接口，定义如下</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-04.jpg\" class=\"\">\n\n\n<p>​\t要想返回UserDetails的实例就只能返回接口的实现类。Spring Security中提供了如下的实例。对于我们只需要使用里面的User类即可。注意User的全限定路径是：</p>\n<p>​\torg.springframework.security.core.userdetails.User</p>\n<p>​\t此处经常和系统中自己开发的User类弄混。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-05.jpg\" class=\"\">\n\n\n<p>​\t在User类中提供了很多方法和属性。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-06.jpg\" class=\"\">\n\n\n<p>​\t其中构造方法有两个，调用其中任何一个都可以实例化UserDetails实现类User类的实例。而三个参数的构造方法实际上也是调用7个参数的构造方法。</p>\n<p>​\tusername:用户名</p>\n<p>​\tpassword:密码</p>\n<p>​\tauthorities：用户具有的权限。此处不允许为null</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-07.jpg\" class=\"\">\n\n\n<p>​\t此处的用户名应该是客户端传递过来的用户名。而密码应该是从数据库中查询出来的密码。Spring Security会根据User中的password和客户端传递过来的password进行比较。如果相同则表示认证通过，如果不相同表示认证失败。</p>\n<p>​\tauthorities里面的权限对于后面学习授权是很有必要的，包含的所有内容为此用户具有的权限，如有里面没有包含某个权限，而在做某个事情时必须包含某个权限则会出现403。&#x3D;&#x3D;通常都是通过AuthorityUtils.commaSeparatedStringToAuthorityList(“”)来创建authorities集合对象的&#x3D;&#x3D;。参数是一个字符串，&#x3D;&#x3D;多个权限使用逗号分隔，角色信息前要加<font color=blue>  ROLE_  </font>来标识不然会当成权限信息处理&#x3D;&#x3D;。</p>\n<p><strong>建议</strong></p>\n<blockquote>\n<p>​\t我们的项目中对于用户信息的表，肯定是不同的，我们可以利用这个类，对于用来认证的UserDetails对象进行进一步封装，自定义我们的认证对象。例如：</p>\n<pre><code class=\"java\">package com.zjj.pojo;\n\nimport com.alibaba.fastjson.annotation.JSONField;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.ToString;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@ToString\npublic class LoginUser implements UserDetails &#123;\n    private User user;\n\n    private List&lt;String&gt; permission;\n\n    public LoginUser(User user, List&lt;String&gt; permission) &#123;\n        this.user = user;\n        this.permission = permission;\n    &#125;\n\n    @JSONField(serialize = false) //redis存储的话会出现问题，不让他序列化，主要为了安全\n    List&lt;SimpleGrantedAuthority&gt; authorities ;\n    @Override\n    public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;\n        // 把permission中的String类型的权限信息封装成 SimpleGrantedAuthority 对象\n        if (null != authorities) return authorities;//要是有信息就不用再授权了\n        authorities = permission.stream()\n                .map(SimpleGrantedAuthority::new)\n                .collect(Collectors.toList());\n        return authorities;\n    &#125;\n\n    @Override\n    public String getPassword() &#123;\n        return user.getPassword();\n    &#125;\n\n    @Override\n    public String getUsername() &#123;\n        return user.getUsername();\n    &#125;\n\n    @Override\n    public boolean isAccountNonExpired() &#123;\n        return true;\n    &#125;\n\n    @Override\n    public boolean isAccountNonLocked() &#123;\n        return true;\n    &#125;\n\n    @Override\n    public boolean isCredentialsNonExpired() &#123;\n        return true;\n    &#125;\n\n    @Override\n    public boolean isEnabled() &#123;\n        return true;\n    &#125;\n&#125;\n</code></pre>\n<p>​\t这里只是一个例子，我重写了getAuthorities() ，其他的信息我们可以根据我们自己的数据库的User信息进行初始化，这里我为了测试方便其余都事 TRUE 打开了他们的权限</p>\n<p>​\t这里我自定义个 permission 用来存储我们查询到的权限信息，用它来对authorities来初始化 以及对getAuthorities() 的重写，authorities 是我们根据SpringSecurity 要求封装的权限集合 ，但是要注意，不要让他存储到redis中，redis存储的话会出现问题，不要让他序列化，主要为了安全。</p>\n<p>​\t这样我们每次认证的时候就直接可以利用这个认证对象，而我们的原生User还可以进行别的操作，这样做更加灵活。&#x3D;&#x3D;推荐********&#x3D;&#x3D;</p>\n</blockquote>\n<h2 id=\"2-方法参数\"><a href=\"#2-方法参数\" class=\"headerlink\" title=\"2.方法参数\"></a>2.方法参数</h2><p>​\t方法参数表示用户名。此值是客户端表单传递过来的数据。默认情况下必须叫username，否则无法接收。</p>\n<h2 id=\"3-异常\"><a href=\"#3-异常\" class=\"headerlink\" title=\"3.异常\"></a>3.异常</h2><p>​\tUsernameNotFoundException 用户名没有发现异常。在loadUserByUsername中是需要通过自己的逻辑从数据库中取值的。如果通过用户名没有查询到对应的数据，应该抛出UsernameNotFoundException，系统就知道用户名没有查询到。</p>\n<h1 id=\"五、配置类说明-1-—-认证配置\"><a href=\"#五、配置类说明-1-—-认证配置\" class=\"headerlink\" title=\"五、配置类说明 1 — 认证配置\"></a>五、配置类说明 1 — 认证配置</h1><h2 id=\"1-失败跳转\"><a href=\"#1-失败跳转\" class=\"headerlink\" title=\"1.失败跳转\"></a>1.失败跳转</h2><p>​\t表单处理中成功会跳转到一个地址，失败也可以跳转到一个地址中。</p>\n<h3 id=\"1-1编写页面\"><a href=\"#1-1编写页面\" class=\"headerlink\" title=\"1.1编写页面\"></a>1.1编写页面</h3><p>​\t在src&#x2F;main&#x2F;resources&#x2F;static下新建fail.html并编写如下内容</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n    &lt;head&gt;\n        &lt;meta charset=&quot;UTF-8&quot;&gt;\n        &lt;title&gt;Title&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        操作失败，请重新登录. &lt;a href=&quot;/login.html&quot;&gt;跳转&lt;/a&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<h3 id=\"1-2修改表单配置\"><a href=\"#1-2修改表单配置\" class=\"headerlink\" title=\"1.2修改表单配置\"></a>1.2修改表单配置</h3><p>​\t在配置方法中表单认证部分添加failureForwardUrl()方法，表示登录失败跳转的url。此处依然是POST请求，所以跳转到可以接收POST请求的控制器&#x2F;fail中。</p>\n<pre><code class=\"java\">// 表单认证\nhttp.formLogin()\n    .loginProcessingUrl(&quot;/login&quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl\n    .successForwardUrl(&quot;/toMain&quot;)   //此处是post请求\n    .failureForwardUrl(&quot;/fail&quot;)     //登录失败跳转地址\n    .loginPage(&quot;/login.html&quot;);\n</code></pre>\n<h3 id=\"1-3添加控制器方法\"><a href=\"#1-3添加控制器方法\" class=\"headerlink\" title=\"1.3添加控制器方法\"></a>1.3添加控制器方法</h3><p>​\t在控制器类中添加控制器方法，方法映射路径&#x2F;fail。此处要注意：由于是POST请求访问&#x2F;fail。所以如果返回值直接转发到fail.html中，及时有效果，控制台也会报警告，提示fail.html不支持POST访问方式。</p>\n<pre><code class=\"java\">@PostMapping(&quot;/fail&quot;)\npublic String fail()&#123;\n    return &quot;redirect:/fail.html&quot;;\n&#125;\n</code></pre>\n<h3 id=\"1-4设置fail-html不需要认证\"><a href=\"#1-4设置fail-html不需要认证\" class=\"headerlink\" title=\"1.4设置fail.html不需要认证\"></a>1.4设置fail.html不需要认证</h3><p>​\t认证失败跳转到fail.html页面中，所以必须配置fail.html不需要被认证。需要修改配置类中内容</p>\n<pre><code class=\"java\">// url 拦截\nhttp.authorizeRequests()\n        .antMatchers(&quot;/login.html&quot;).permitAll() //login.html不需要被认证\n        .antMatchers(&quot;/fail.html&quot;).permitAll()  //fail.html不需要被认证\n        .anyRequest().authenticated();//所有的请求都必须被认证。必须登录后才能访问。\n</code></pre>\n<h2 id=\"2-设置请求账户和密码的参数名\"><a href=\"#2-设置请求账户和密码的参数名\" class=\"headerlink\" title=\"2.设置请求账户和密码的参数名\"></a>2.设置请求账户和密码的参数名</h2><h3 id=\"2-1源码简介\"><a href=\"#2-1源码简介\" class=\"headerlink\" title=\"2.1源码简介\"></a>2.1源码简介</h3><p>​\t当进行登录时会执行UsernamePasswordAuthenticationFilter过滤器。</p>\n<p>​\tusernamePasrameter:账户参数名</p>\n<p>​\tpasswordParameter:密码参数名</p>\n<p>​\tpostOnly&#x3D;true:默认情况下只允许POST请求。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-10-1661413396371.jpg\" class=\"\">\n\n\n<h3 id=\"2-2修改配置\"><a href=\"#2-2修改配置\" class=\"headerlink\" title=\"2.2修改配置\"></a>2.2修改配置</h3><pre><code class=\"java\">// 表单认证\nhttp.formLogin()\n        .loginProcessingUrl(&quot;/login&quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl\n        .successForwardUrl(&quot;/toMain&quot;)   //此处是post请求\n        .failureForwardUrl(&quot;/fail&quot;)     //登录失败跳转地址\n        .loginPage(&quot;/login.html&quot;)\n        .usernameParameter(&quot;myusername&quot;)\n        .passwordParameter(&quot;mypassword&quot;);\n</code></pre>\n<h3 id=\"2-3修改页面\"><a href=\"#2-3修改页面\" class=\"headerlink\" title=\"2.3修改页面\"></a>2.3修改页面</h3><p>​\t修改login.html</p>\n<pre><code class=\"html\">&lt;form action = &quot;/login&quot; method=&quot;post&quot;&gt;\n    用户名：&lt;input type=&quot;text&quot; name=&quot;myusername&quot;/&gt;&lt;br/&gt;\n    密码:&lt;input type=&quot;password&quot; name=&quot;mypassword&quot;/&gt;&lt;br/&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;\n&lt;/form&gt;\n</code></pre>\n<h2 id=\"3-自定义登录成功处理器\"><a href=\"#3-自定义登录成功处理器\" class=\"headerlink\" title=\"3.自定义登录成功处理器\"></a>3.自定义登录成功处理器</h2><h3 id=\"3-1源码分析\"><a href=\"#3-1源码分析\" class=\"headerlink\" title=\"3.1源码分析\"></a>3.1源码分析</h3><p>​\t使用successForwardUrl()时表示成功后转发请求到地址。内部是通过successHandler（）方法进行控制成功后交给哪个类进行处理</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-11-1661413396370.jpg\" class=\"\">\n\n\n<p>​\tForwardAuthenticationSuccessHandler内部就是最简单的请求转发。由于是请求转发，当遇到需要跳转到站外或在前后端分离的项目中就无法使用了。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-12-1661413396371.jpg\" class=\"\">\n\n\n<p>​\t当需要控制登录成功后去做一些事情时，可以进行自定义认证成功控制器。</p>\n<h3 id=\"3-2代码实现\"><a href=\"#3-2代码实现\" class=\"headerlink\" title=\"3.2代码实现\"></a>3.2代码实现</h3><h4 id=\"3-2-1自定义类\"><a href=\"#3-2-1自定义类\" class=\"headerlink\" title=\"3.2.1自定义类\"></a>3.2.1自定义类</h4><p>​\t新建类MyAuthenticationSuccessHandler 实现 AuthenticationSuccessHandler ，编写如下：</p>\n<pre><code class=\"java\">public class MyAuthenticationSuccessHandler implements AuthenticationSuccessHandler &#123;\n    @Override\n    public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException &#123;\n        //Principal 主体，存放了登录用户的信息\n        User user = (User)authentication.getPrincipal();\n        System.out.println(user.getUsername());\n        System.out.println(user.getPassword());//密码输出为null\n        System.out.println(user.getAuthorities());\n        //重定向到百度。这只是一个示例，具体需要看项目业务需求\n        httpServletResponse.sendRedirect(&quot;http://www.baidu.com&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"3-2-2修改配置项\"><a href=\"#3-2-2修改配置项\" class=\"headerlink\" title=\"3.2.2修改配置项\"></a>3.2.2修改配置项</h4><p>使用successHandler()方法设置成功后交给哪个对象进行处理</p>\n<pre><code class=\"java\">// 表单认证\nhttp.formLogin()\n        .loginProcessingUrl(&quot;/login&quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl\n        .successHandler(new MyAuthenticationSuccessHandler())\n        //.successForwardUrl(&quot;/toMain&quot;)   //此处是post请求\n        .failureForwardUrl(&quot;/fail&quot;)     //登录失败跳转地址\n        .loginPage(&quot;/login.html&quot;);\n</code></pre>\n<h2 id=\"4-自定义登录失败处理器\"><a href=\"#4-自定义登录失败处理器\" class=\"headerlink\" title=\"4.自定义登录失败处理器\"></a>4.自定义登录失败处理器</h2><h3 id=\"4-1源码分析\"><a href=\"#4-1源码分析\" class=\"headerlink\" title=\"4.1源码分析\"></a>4.1源码分析</h3><p>​\tfailureForwardUrl()内部调用的是failureHandler()方法</p>\n<p>​\t<strong>ForwardAuthenticationFailureHandler</strong>中也是一个请求转发，并在request作用域中设置\t\t\t SPRING_SECURITY_LAST_EXCEPTION的key，内容为异常对象。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-14.jpg\" class=\"\">\n\n\n<h3 id=\"4-2代码实现\"><a href=\"#4-2代码实现\" class=\"headerlink\" title=\"4.2代码实现\"></a>4.2代码实现</h3><h4 id=\"4-2-1新建控制器\"><a href=\"#4-2-1新建控制器\" class=\"headerlink\" title=\"4.2.1新建控制器\"></a>4.2.1新建控制器</h4><p>​\t新建MyForwardAuthenticationFailureHandler实现 AuthenticationFailureHandler 。在方法中添加重定向语句</p>\n<pre><code class=\"java\">public class MyForwardAuthenticationFailureHandler implements AuthenticationFailureHandler &#123;\n    @Override\n    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException &#123;\n        httpServletResponse.sendRedirect(&quot;/fail.html&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"4-2-2修改配置类\"><a href=\"#4-2-2修改配置类\" class=\"headerlink\" title=\"4.2.2修改配置类\"></a>4.2.2修改配置类</h4><p>​\t修改配置类中表单登录部分。设置失败时交给失败处理器进行操作。failureForwardUrl和failureHandler不可共存。</p>\n<pre><code class=\"java\">        // 表单认证\n        http.formLogin()\n                .loginProcessingUrl(&quot;/login&quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl\n                .successHandler(new MyAuthenticationSuccessHandler())\n                //.successForwardUrl(&quot;/toMain&quot;)   //此处是post请求\n                .failureHandler(new MyForwardAuthenticationFailureHandler())\n//                .failureForwardUrl(&quot;/fail&quot;)     //登录失败跳转地址\n                .loginPage(&quot;/login.html&quot;);\n</code></pre>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5 总结\"></a>5 总结</h2><pre><code class=\"java\">        // http.formLogin() 所有和表单有关系的\n        http.formLogin()\n                // 登录页面，走一个controller\n                // 注意要和，LoginProcessingUrl 配合使用，不然在表单中的action中 url 失效\n                // 因为只配置loginPage()， 会导致在初始化的时候将loginProcessingUrl的配置相同化，可以自己debug 在AbstractAuthenticationFilterConfigurer 的 updateAuthenticationDefaults 方法\n                // 也就是说loginPage(&quot;/login&quot;)  loginProcessingUrl(&quot;/login&quot;),导致提交信息失败最终导致认证失败\n                .loginPage(&quot;/showLogin&quot;)\n                // 当发现什么URL时，把请求转发给自定义登录逻辑\n                // 表单提交的地址 action ,他就会直接去认证进入到 UserDetailsServiceImpl\n                // 去这里进行用户的验证 和 用户权限信息的集体封装\n                .loginProcessingUrl(&quot;/login&quot;)\n            \n                // 登录成功的操作\n                // 下面两种方法都可以，推荐第二种，两种同时写第一个直接失效\n                // 第一种写法，要注意在写映射的时候要注意请求的方法 get/post\n                .successForwardUrl(&quot;/showMain&quot;)\n                .successHandler((request, response, authentication) -&gt; &#123;\n                    System.out.println(&quot;successHandler invoked&quot;);\n                    // 我们在每次请求同一个页面尽量使用重定向，要是请求转发\n                    // 因为请求转发是浏览器的行为，每次都要请求服务器并且重复提交表单，不好\n                    // response.sendRedirect(&quot;/fail&quot;);\n                    LoginUser loginUser = (LoginUser) authentication.getPrincipal();\n                    for (String s : loginUser.getPermission()) &#123;\n                        System.out.println(s);\n                    &#125;\n                &#125;)\n                // 登录失败的操作\n                // 内容和上述情况相同，只是一个成功的一个失败的\n                .failureForwardUrl(&quot;/fail&quot;)\n                // 当前端表单传递过来的用户名参数、密码参数名和后端不对应，可以利用下列方法\n                // 指定前端传递过来的用户名参数名称\n                //.usernameParameter(&quot;MyuserName&quot;)\n                // 指定前端传递过来的密码参数名称\n                // .passwordParameter(&quot;MypassWord&quot;)\n        ;\n</code></pre>\n<h1 id=\"六、用户授权\"><a href=\"#六、用户授权\" class=\"headerlink\" title=\"六、用户授权\"></a>六、用户授权</h1><h2 id=\"1-权限系统的作用\"><a href=\"#1-权限系统的作用\" class=\"headerlink\" title=\"1 权限系统的作用\"></a>1 权限系统的作用</h2><p>​\t例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。</p>\n<p>​\t总结起来就是<a><strong>不同的用户可以使用不同的功能</strong></a>。这就是权限系统要去实现的效果。</p>\n<h2 id=\"2-授权基本流程\"><a href=\"#2-授权基本流程\" class=\"headerlink\" title=\"2 授权基本流程\"></a>2 授权基本流程</h2><p>​\t在SpringSecurity中，会使用默认的<strong>FilterSecurityInterceptor</strong>来进行权限校验。在 <strong>FilterSecurityInterceptor</strong>中会从<strong>SecurityContextHolder</strong>获取其<strong>Authentication</strong>，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。</p>\n<p>​\t<a>所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication。</a>然后设置我们的资源所需要的权限即可。</p>\n<h2 id=\"3-RBAC权限模型\"><a href=\"#3-RBAC权限模型\" class=\"headerlink\" title=\"3 RBAC权限模型\"></a>3 RBAC权限模型</h2><p>参考博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F6dzc1Mjg5MDkxMy9hcnRpY2xlL2RldGFpbHMvMTI0NDYxOTUy\">https://blog.csdn.net/qzw752890913/article/details/124461952</span></p>\n<p>​\tRBAC（Role Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联，而不是直接将权限赋予用户。</p>\n<p>​\t一个用户拥有若干个角色，每个角色拥有若干个权限，这样就构成了“用户-角色-权限”的授权模型。这种授权模型的好处在于，不必每次创建用户时都进行权限分配的操作，只要分配用户相应的角色即可，而且角色的权限变更比用户的权限变更要少得多，减少频繁设置。</p>\n<p>RBAC模型中，用户与角色之间、角色与权限之间，一般是多对多的关系。</p>\n<p>所谓“多对多”，就是双向的一对多。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20220825151716381.png\" class=\"\">\n\n\n<p>​\t</p>\n<h2 id=\"4-授权实现\"><a href=\"#4-授权实现\" class=\"headerlink\" title=\"4 授权实现\"></a>4 授权实现</h2><ul>\n<li>基于配置——在SpringSecurity的配置类中和登录页一样进行权限配置(<font color=red>不推荐，过程繁琐，开发麻烦</font>)</li>\n<li>基于注解——直接可以对我们次处理，也就是对我们的控制层进行权限的设置(<font color=red>强烈推荐</font>)</li>\n</ul>\n<h3 id=\"4-1-基于配置授权\"><a href=\"#4-1-基于配置授权\" class=\"headerlink\" title=\"4.1 基于配置授权\"></a>4.1 基于配置授权</h3><p>这里没什么好说的，从刚开始我们就开始写了权限的认证，就是我们重写的配置类</p>\n<pre><code class=\"java\">// http.authorizeRequests() 所有和授权相关\nhttp.authorizeRequests()\n    // 这里面支持 正则 和 ant表达式\t\n    // anonymous 匿名 没有认证的才可以访问，permitALL 谁都能访问，不需要认证\n    .antMatchers(&quot;/user/login&quot;,&quot;/login&quot;,&quot;/loginPage&quot;).anonymous()\n    .antMatchers(&quot;/js/**&quot;).permitAll()\n    // authenticated 认证了才能访问\n    .anyRequest().authenticated();\n</code></pre>\n<p>这样写，除了静态资源权限需要这么写，其余请求折磨写太麻烦，我们的业务众多，这样写极大的增加了业务开发的负担，再加上静态资源我们都已经前后端分离也就涉及不到他的权限问题，所以这种方式了解就好。主要重点放在注解学习上。</p>\n<h3 id=\"4-2-基于注解授权\"><a href=\"#4-2-基于注解授权\" class=\"headerlink\" title=\"4.2 基于注解授权\"></a>4.2 基于注解授权</h3><h4 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h4><p>​\tSpringSecurity为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。</p>\n<p>​\t&#x3D;&#x3D;但是要使用它我们需要先开启相关配置。&#x3D;&#x3D;，&#x3D;&#x3D;不打开直接用会 500&#x3D;&#x3D;</p>\n<pre><code class=\"java\">@EnableGlobalMethodSecurity(prePostEnabled = true)//启动类上添加注解\n</code></pre>\n<h4 id=\"找到对应的接口\"><a href=\"#找到对应的接口\" class=\"headerlink\" title=\"找到对应的接口\"></a>找到对应的接口</h4><p>这里我们找到需要授权的接口，对他们进行授权，主要有3个主要注解 </p>\n<ul>\n<li>@Secured</li>\n<li>@PerAuthorize() 、@PostAuthorize</li>\n</ul>\n<p>只要对我们的接口上添加相对应的注解即可，例如</p>\n<pre><code class=\"java\">@Controller\npublic class loginController&#123;\n    @Secured(&quot;ROLE_abc&quot;) //专门用于判断是否具有角色的。能写在方法或类上。参数要以ROLE_开头。\n    @RequestMapping(&quot;/toMain&quot;)\n    public String toMain()&#123;\n        return &quot;redirect:/main.html&quot;;\n    &#125;\n    \n    @RequestMapping(&quot;/hello3&quot;)\n    @ResponseBody\n    // 是方法或类级别注解。\n    @PreAuthorize(&quot;hasAnyAuthority(&#39;demo:delete&#39;)&quot;)\n    public String testThree()&#123;\n        return &quot;success!&quot;;\n    &#125;\n\n    @RequestMapping(&quot;/hello4&quot;)\n    @ResponseBody\n    //  是方法或类级别注解。\n    @PostAuthorize(&quot;hasAnyRole(&#39;ROLE_管理员&#39;)&quot;)\n    public String testFour()&#123;\n        return &quot;success!&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"七、配置类说明-2-—访问控制\"><a href=\"#七、配置类说明-2-—访问控制\" class=\"headerlink\" title=\"七、配置类说明 2 —访问控制\"></a>七、配置类说明 2 —访问控制</h1><p>在前面讲解了认证中所有常用配置，主要是对http.formLogin()进行操作。而在配置类中\t\thttp.authorizeRequests()主要是对url进行控制，也就是我们所说的授权（访问控制）。http.authorizeRequests()也支持连缀写法，总体公式为：</p>\n<p>​\turl匹配规则.权限控制方法</p>\n<p>通过上面的公式可以有很多url匹配规则和很多权限控制方法。这些内容进行各种组合就形成了Spring Security中的授权。</p>\n<p>​\t在所有匹配规则中取所有规则的交集。配置顺序影响了之后授权效果，越是具体的应该放在前面，越是笼统的应该放到后面。\t</p>\n<h2 id=\"1-anyRequest\"><a href=\"#1-anyRequest\" class=\"headerlink\" title=\"1.anyRequest()\"></a>1.anyRequest()</h2><p>​\t在之前认证过程中我们就已经使用过anyRequest()，表示匹配所有的请求。一般情况下此方法都会使用，设置全部内容都需要进行认证。</p>\n<p>​\t代码示例:</p>\n<pre><code class=\"java\">anyRequest().authenticated();\n</code></pre>\n<h2 id=\"2-antMatcher\"><a href=\"#2-antMatcher\" class=\"headerlink\" title=\"2.antMatcher()\"></a>2.antMatcher()</h2><p>​\t方法定义如下：</p>\n<pre><code class=\"java\">public C antMatchers(String... antPatterns)\n</code></pre>\n<p>​\t参数是不定向参数，每个参数是一个 正则&#x2F;ant表达式，用于匹配URL规则。</p>\n<p>​\t规则如下：</p>\n<p>​\t? 匹配一个字符</p>\n<p>​\t* 匹配0个或多个字符</p>\n<p>​\t** 匹配0个或多个目录</p>\n<p>​\t在实际项目中经常需要放行所有静态资源，下面演示放行js文件夹下所有脚本文件。</p>\n<pre><code class=\"java\">.antMatchers(&quot;/js/**&quot;).permitAll()\n</code></pre>\n<p>还有一种配置方式是只要是.js文件都放行</p>\n<pre><code class=\"java\">antMatchers(&quot;/**/*.js&quot;).permitAll()\n</code></pre>\n<h2 id=\"3-regexMatchers\"><a href=\"#3-regexMatchers\" class=\"headerlink\" title=\"3.regexMatchers()\"></a>3.regexMatchers()</h2><h3 id=\"3-1介绍\"><a href=\"#3-1介绍\" class=\"headerlink\" title=\"3.1介绍\"></a>3.1介绍</h3><p>使用正则表达式进行匹配。和antMatchers()主要的区别就是参数，antMatchers()参数是ant表达式，regexMatchers()参数是正则表达式。</p>\n<p>演示所有以.js结尾的文件都被放行。</p>\n<pre><code class=\"java\">.regexMatchers(&quot;.+[.]js&quot;).permitAll()\n</code></pre>\n<h3 id=\"3-2两个参数时使用方式\"><a href=\"#3-2两个参数时使用方式\" class=\"headerlink\" title=\"3.2两个参数时使用方式\"></a>3.2两个参数时使用方式</h3><p>无论是antMatchers()还是regexMatchers()都具有两个参数的方法，其中第一个参数都是HttpMethod，表示请求方式，当设置了HttpMethod后表示只有设定的特定的请求方式才执行对应的权限设置。</p>\n<p>枚举类型HttpMethod内置属性如下：</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-15.jpg\" class=\"\">\n\n\n<h2 id=\"4-内置访问控制方法介绍\"><a href=\"#4-内置访问控制方法介绍\" class=\"headerlink\" title=\"4 内置访问控制方法介绍\"></a>4 内置访问控制方法介绍</h2><p>​\tSpring Security匹配了URL后调用了permitAll()表示不需要认证，随意访问。在Spring Security中提供了多种内置控制。</p>\n<h3 id=\"1-permitAll\"><a href=\"#1-permitAll\" class=\"headerlink\" title=\"1.permitAll()\"></a>1.permitAll()</h3><p>​\t<strong>permitAll()表示所匹配的URL任何人都允许访问。</strong></p>\n<h3 id=\"2-authenticated\"><a href=\"#2-authenticated\" class=\"headerlink\" title=\"2.authenticated()\"></a>2.authenticated()</h3><p>​\t<strong>authenticated()表示所匹配的URL都需要被认证才能访问。</strong></p>\n<h3 id=\"3-anonymous\"><a href=\"#3-anonymous\" class=\"headerlink\" title=\"3.anonymous()\"></a>3.anonymous()</h3><p>​\t<strong>anonymous()表示可以匿名访问匹配的URL。和permitAll()效果类似，只是设置为anonymous()的url会执行filter 链中</strong></p>\n<p>​\t官方源码定义如下：</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-18.jpg\" class=\"\">\n\n\n<h3 id=\"4-denyAll\"><a href=\"#4-denyAll\" class=\"headerlink\" title=\"4.denyAll()\"></a>4.denyAll()</h3><p>​\t<strong>denyAll()表示所匹配的URL都不允许被访问。</strong></p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-19.jpg\" class=\"\">\n\n\n<h3 id=\"5-rememberMe\"><a href=\"#5-rememberMe\" class=\"headerlink\" title=\"5.rememberMe()\"></a>5.rememberMe()</h3><p>​\t<strong>被“remember me”的用户允许访问</strong></p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-20.jpg\" class=\"\">\n\n\n<h3 id=\"6-fullyAuthenticated\"><a href=\"#6-fullyAuthenticated\" class=\"headerlink\" title=\"6.fullyAuthenticated()\"></a>6.fullyAuthenticated()</h3><p>​\t<strong>如果用户不是被remember me的，才可以访问</strong>。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-21.jpg\" class=\"\">\n\n\n<h3 id=\"7-hasIpAddress-String\"><a href=\"#7-hasIpAddress-String\" class=\"headerlink\" title=\"7.hasIpAddress(String)\"></a>7.hasIpAddress(String)</h3><p>如果请求是指定的IP就运行访问。</p>\n<p>​\t可以通过request.getRemoteAddr()获取ip地址。</p>\n<p>​\t需要注意的是在本机进行测试时localhost和127.0.0.1输出的ip地址是不一样的。</p>\n<p>​\t当浏览器中通过localhost进行访问时控制台打印的内容：</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-25-1661415211434.jpg\" class=\"\">\n\n\n<p>​\t当浏览器中通过127.0.0.1访问时控制台打印的内容：</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-26-1661415211434.jpg\" class=\"\">\n\n\n<p>​\t当浏览器中通过具体ip进行访问时控制台打印内容：</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-27-1606734864126-1661415211434.jpg\" class=\"\">\n\n\n<p>​\t使用Spring Security时经常会看见403（无权限），默认情况下显示的效果如下：</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-28-1661415211434.jpg\" class=\"\">\n\n\n<p>​\t而在实际项目中可能都是一个异步请求，显示上述效果对于用户就不是特别友好了。Spring Security支持自定义权限受限。</p>\n<h4 id=\"1-新建类\"><a href=\"#1-新建类\" class=\"headerlink\" title=\"1.新建类\"></a>1.新建类</h4><p>​\t新建类实现<strong>AccessDeniedHandler</strong></p>\n<pre><code class=\"java\">@Component\npublic class MyAccessDeniedHandler implements AccessDeniedHandler &#123;\n    @Override\n    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e) throws IOException, ServletException &#123;\n        httpServletResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);\n        httpServletResponse.setHeader(&quot;Content-Type&quot;,&quot;application/json;charset=utf-8&quot;);\n        PrintWriter out = httpServletResponse.getWriter();\n        out.write(&quot;&#123;\\&quot;status\\&quot;:\\&quot;error\\&quot;,\\&quot;msg\\&quot;:\\&quot;权限不足，请联系管理员!\\&quot;&#125;&quot;);\n        out.flush();\n        out.close();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"2-修改配置类\"><a href=\"#2-修改配置类\" class=\"headerlink\" title=\"2.修改配置类\"></a>2.修改配置类</h4><p>​\t配置类中重点添加异常处理器。设置访问受限后交给哪个对象进行处理。</p>\n<p>​\tmyAccessDeniedHandler是在配置类中进行自动注入的。</p>\n<pre><code class=\"java\">//异常处理\nhttp.exceptionHandling()\n        .accessDeniedHandler(myAccessDeniedHandler);\n</code></pre>\n<h2 id=\"5-总结-1\"><a href=\"#5-总结-1\" class=\"headerlink\" title=\"5 总结\"></a>5 总结</h2><p>在选择特定请求时 2&#x2F;3 任选其一 效果相同，主要注意内置访问控制方法的选择</p>\n<h1 id=\"八、配置类说明-3-—基于表达式的访问控制\"><a href=\"#八、配置类说明-3-—基于表达式的访问控制\" class=\"headerlink\" title=\"八、配置类说明 3 —基于表达式的访问控制\"></a>八、配置类说明 3 —基于表达式的访问控制</h1><h2 id=\"1-access-方法使用\"><a href=\"#1-access-方法使用\" class=\"headerlink\" title=\"1.access()方法使用\"></a>1.access()方法使用</h2><p>​\t之前学习的登录用户权限判断实际上底层实现都是调用access(表达式)</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-29.jpg\" class=\"\">\n\n\n<p>​\t可以通过access()实现和之前学习的权限控制完成相同的功能。</p>\n<h3 id=\"1-1以hasRole和permitAll举例\"><a href=\"#1-1以hasRole和permitAll举例\" class=\"headerlink\" title=\"1.1以hasRole和permitAll举例\"></a>1.1以hasRole和permitAll举例</h3><p>​\t下面代码和直接使用permitAll()和hasRole()是等效的。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-30.jpg\" class=\"\">\n\n\n<h2 id=\"2-自定义权限验证方法\"><a href=\"#2-自定义权限验证方法\" class=\"headerlink\" title=\"2.自定义权限验证方法\"></a>2.自定义权限验证方法</h2><p>​\t虽然这里面已经包含了很多的表达式(方法)但是在实际项目中很有可能出现需要自己自定义逻辑的情况。</p>\n<p>​\t判断登录用户是否具有访问当前URL权限。</p>\n<h3 id=\"2-1新建接口及实现类\"><a href=\"#2-1新建接口及实现类\" class=\"headerlink\" title=\"2.1新建接口及实现类\"></a>2.1新建接口及实现类</h3><p>​\t新建接口com.msb.service.MyService后新建实现类。</p>\n<pre><code class=\"java\">public interface MyService &#123;\n    boolean hasPermission(HttpServletRequest request, Authentication authentication);\n&#125;\n</code></pre>\n<pre><code class=\"java\">@Component\npublic class MyServiceImpl implements MyService &#123;\n    @Override\n    public boolean hasPermission(HttpServletRequest request, Authentication authentication) &#123;\n        Object obj = authentication.getPrincipal();\n        if(obj instanceof UserDetails)&#123;\n            UserDetails user = (UserDetails) obj;\n            Collection&lt;? extends GrantedAuthority&gt; authorities = user.getAuthorities();\n            return authorities.contains(new SimpleGrantedAuthority(request.getRequestURI()));\n        &#125;\n        return false;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"2-2修改配置类\"><a href=\"#2-2修改配置类\" class=\"headerlink\" title=\"2.2修改配置类\"></a>2.2修改配置类</h3><p>​\t在access中通过@bean的id名.方法(参数)的形式进行调用</p>\n<p>​\t配置类中修改如下：</p>\n<pre><code class=\"java\"> // url 拦截 (授权)\nhttp.authorizeRequests()\n        .antMatchers(&quot;/login.html&quot;).access(&quot;permitAll&quot;)\n        .antMatchers(&quot;/fail.html&quot;).permitAll()\n        // @Bean的名字，表示引入某个Bean，我们的Bean在主动命名的情况下，都是以首字母小写命名\n        .anyRequest().access(&quot;@myServiceImpl.hasPermission(request,authentication)&quot;);\n</code></pre>\n<h1 id=\"九、基于注解的访问控制\"><a href=\"#九、基于注解的访问控制\" class=\"headerlink\" title=\"九、基于注解的访问控制\"></a>九、基于注解的访问控制</h1><p>​\t在Spring Security中提供了一些访问控制的注解。这些注解都是默认是都不可用的，需要通过@EnableGlobalMethodSecurity进行开启后使用。</p>\n<p>​\t&#x3D;&#x3D;如果设置的条件允许，程序正常执行。如果不允许会报500&#x3D;&#x3D;</p>\n<p>​\t这些注解可以写到Service接口或方法上上也可以写到Controller或Controller的方法上。通常情况下都是写在控制器方法上的，控制接口URL是否允许被访问。</p>\n<h2 id=\"1-Secured\"><a href=\"#1-Secured\" class=\"headerlink\" title=\"1.@Secured\"></a>1.@Secured</h2><p>​\t@Secured是&#x3D;&#x3D;专门用于判断是否具有角色的&#x3D;&#x3D;。能写在&#x3D;&#x3D;方法或类&#x3D;&#x3D;上。&#x3D;&#x3D;参数要以ROLE_开头&#x3D;&#x3D;。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-32-1661416083118.jpg\" class=\"\">\n\n\n<h3 id=\"1-1实现步骤\"><a href=\"#1-1实现步骤\" class=\"headerlink\" title=\"1.1实现步骤\"></a>1.1实现步骤</h3><h4 id=\"1-1-1-开启注解\"><a href=\"#1-1-1-开启注解\" class=\"headerlink\" title=\"1.1.1 开启注解\"></a>1.1.1 开启注解</h4><p>​\t在启动类(也可以在配置类等能够扫描的类上)上添加@EnableGlobalMethodSecurity(securedEnabled &#x3D; true)</p>\n<pre><code class=\"java\">@SpringBootApplication\n@EnableGlobalMethodSecurity(securedEnabled = true)\npublic class MyApp &#123;\n    public static void main(String [] args)&#123;\n        SpringApplication.run(MyApp.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"1-1-2在控制器方法上添加-Secured注解\"><a href=\"#1-1-2在控制器方法上添加-Secured注解\" class=\"headerlink\" title=\"1.1.2在控制器方法上添加@Secured注解\"></a>1.1.2在控制器方法上添加@Secured注解</h4><p>​\t在LoginController中方法上添加注解</p>\n<pre><code class=\"java\">@Secured(&quot;ROLE_abc&quot;)\n@RequestMapping(&quot;/toMain&quot;)\npublic String toMain()&#123;\n    return &quot;redirect:/main.html&quot;;\n&#125;\n</code></pre>\n<h4 id=\"1-1-3配置类\"><a href=\"#1-1-3配置类\" class=\"headerlink\" title=\"1.1.3配置类\"></a>1.1.3配置类</h4><p>​\t配置类中方法配置保留最基本的配置即可。</p>\n<pre><code class=\"java\">protected void configure(HttpSecurity http) throws Exception &#123;\n    // 表单认证\n    http.formLogin()\n            .loginProcessingUrl(&quot;/login&quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl\n            .successForwardUrl(&quot;/toMain&quot;)   //此处是post请求\n            .loginPage(&quot;/login.html&quot;);\n\n    // url 拦截\n    http.authorizeRequests()\n            .antMatchers(&quot;/login.html&quot;).permitAll() //login.html不需要被认证\n            .anyRequest().authenticated();//所有的请求都必须被认证。必须登录后才能访问。\n\n    //关闭csrf防护\n    http.csrf().disable();\n\n&#125;\n</code></pre>\n<h2 id=\"2-PreAuthorize-x2F-PostAuthorize\"><a href=\"#2-PreAuthorize-x2F-PostAuthorize\" class=\"headerlink\" title=\"2.@PreAuthorize&#x2F;@PostAuthorize\"></a>2.@PreAuthorize&#x2F;@PostAuthorize</h2><p>​\t@PreAuthorize和@PostAuthorize都是方法或类级别注解。</p>\n<p>​\t**@PreAuthorize ** 表示访问方法或类在&#x3D;&#x3D;执行之前先判断权限&#x3D;&#x3D;，大多情况下都是使用这个注解，注解的参数和access()方法参数取值相同，都是权限表达式。</p>\n<p>​\t@<strong>PostAuthorize</strong> 表示&#x3D;&#x3D;方法或类执行结束后判断权限&#x3D;&#x3D;，此注解很少被使用到。</p>\n<img data-src=\"/2022/10/07/SpringSecurity/image-20220825155542682.png\" class=\"\">\n\n\n<h3 id=\"2-1实现步骤\"><a href=\"#2-1实现步骤\" class=\"headerlink\" title=\"2.1实现步骤\"></a>2.1实现步骤</h3><h4 id=\"2-1-1开启注解\"><a href=\"#2-1-1开启注解\" class=\"headerlink\" title=\"2.1.1开启注解\"></a>2.1.1开启注解</h4><p>​\t在启动类中开启@PreAuthorize注解。</p>\n<pre><code class=\"java\">@SpringBootApplication\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class MyApp &#123;\n    public static void main(String [] args)&#123;\n        SpringApplication.run(MyApp.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"2-1-2添加-PreAuthorize\"><a href=\"#2-1-2添加-PreAuthorize\" class=\"headerlink\" title=\"2.1.2添加@PreAuthorize\"></a>2.1.2添加@PreAuthorize</h4><p>​\t在控制器方法上添加@PreAuthorize，参数可以是任何access()支持的表达式</p>\n<pre><code class=\"java\">@PreAuthorize(&quot;hasRole(&#39;abc&#39;)&quot;)\n@RequestMapping(&quot;/toMain&quot;)\npublic String toMain()&#123;\n    return &quot;redirect:/main.html&quot;;\n&#125;\n</code></pre>\n<h2 id=\"3-自定义权限校验方法-针对Pre注解\"><a href=\"#3-自定义权限校验方法-针对Pre注解\" class=\"headerlink\" title=\"3.自定义权限校验方法(针对Pre注解)\"></a>3.自定义权限校验方法(针对Pre注解)</h2><p>我们如果觉得单纯验证不合适，或者说不符合我们的业务我们也可以自定义方法</p>\n<h3 id=\"其它权限校验方法\"><a href=\"#其它权限校验方法\" class=\"headerlink\" title=\"其它权限校验方法\"></a>其它权限校验方法</h3><p>​\t我们前面都是使用@PreAuthorize注解，然后在在其中使用的是hasAuthority方法进行校验。SpringSecurity还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole等。</p>\n<p>​\t这里我们先不急着去介绍这些方法，我们先去理解hasAuthority的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。</p>\n<p>​\t<strong>hasAuthority</strong>方法实际是执行到了<strong>SecurityExpressionRoot</strong>的<strong>hasAuthority</strong>，大家只要断点调试既可知道它内部的校验原理。</p>\n<p>​\t它内部其实是调用<strong>authentication</strong>的<strong>getAuthorities</strong>方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。</p>\n<p>​\t<strong>hasAnyAuthority</strong>方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。</p>\n<pre><code class=\"java\">    @PreAuthorize(&quot;hasAnyAuthority(&#39;admin&#39;,&#39;test&#39;,&#39;system:dept:list&#39;)&quot;)\n    public String hello()&#123;\n        return &quot;hello&quot;;\n    &#125;\n</code></pre>\n<p>​\t<strong>hasRole</strong>要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p>\n<pre><code class=\"java\">    @PreAuthorize(&quot;hasRole(&#39;system:dept:list&#39;)&quot;)\n    public String hello()&#123;\n        return &quot;hello&quot;;\n    &#125;\n</code></pre>\n<p>​\t<strong>hasAnyRole</strong> 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 <strong>ROLE_</strong> 后再去比较。所以这种情况下要用用户对应的权限也要有 <strong>ROLE_</strong> 这个前缀才可以。</p>\n<pre><code class=\"java\">    @PreAuthorize(&quot;hasAnyRole(&#39;admin&#39;,&#39;system:dept:list&#39;)&quot;)\n    public String hello()&#123;\n        return &quot;hello&quot;;\n    &#125;\n</code></pre>\n<h3 id=\"自定义权限校验方法\"><a href=\"#自定义权限校验方法\" class=\"headerlink\" title=\"自定义权限校验方法\"></a>自定义权限校验方法</h3><p>​\t我们也可以定义自己的权限校验方法，在@PreAuthorize注解中使用我们的方法。</p>\n<pre><code class=\"java\">@Component(&quot;ex&quot;)\npublic class MyExpressionRoot &#123;\n    // 一定要返回一个Bool值\n    public boolean hasAuthority(String authority)&#123;\n        //获取当前用户的权限\n        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n        LoginUser loginUser = (LoginUser) authentication.getPrincipal();\n        List&lt;String&gt; permissions = loginUser.getPermissions();\n        //判断用户权限集合中是否存在authority\n        return permissions.contains(authority);\n    &#125;\n&#125;\n</code></pre>\n<p>​\t <strong>在SPEL表达式中使用 @ex相当于获取容器中bean的名字为ex的对象。然后再调用这个对象的hasAuthority方法</strong></p>\n<pre><code class=\"java\">    @RequestMapping(&quot;/hello&quot;)\n    @PreAuthorize(&quot;@ex.hasAuthority(&#39;system:dept:list&#39;)&quot;)\n    public String hello()&#123;\n        return &quot;hello&quot;;\n    &#125;\n</code></pre>\n<h1 id=\"十、自定义失败处理\"><a href=\"#十、自定义失败处理\" class=\"headerlink\" title=\"十、自定义失败处理\"></a>十、自定义失败处理</h1><p>​\t我们还希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道SpringSecurity的异常处理机制。</p>\n<p>​\t在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。</p>\n<p>​\t如果是&#x3D;&#x3D;认证过程中出现的异常&#x3D;&#x3D;会被封装成<strong>AuthenticationException</strong>然后调用<strong>AuthenticationEntryPoint</strong>对象的方法去进行异常处理。</p>\n<p>​\t如果是&#x3D;&#x3D;授权过程中出现的异常&#x3D;&#x3D;会被封装成<strong>AccessDeniedException</strong>然后调用<strong>AccessDeniedHandler</strong>对象的方法去进行异常处理。</p>\n<p>​\t所以如果我们&#x3D;&#x3D;需要自定义异常处理&#x3D;&#x3D;，我们只需要&#x3D;&#x3D;自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity即可&#x3D;&#x3D;。</p>\n<h2 id=\"①自定义实现类\"><a href=\"#①自定义实现类\" class=\"headerlink\" title=\"①自定义实现类\"></a>①自定义实现类</h2><pre><code class=\"java\">@Component\npublic class AccessDeniedHandlerImpl implements AccessDeniedHandler &#123;\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException &#123;\n        ResponseResult result = new ResponseResult(HttpStatus.FORBIDDEN.value(), &quot;权限不足&quot;);\n        String json = JSON.toJSONString(result);\n        WebUtils.renderString(response,json);\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"java\">@Component\npublic class AuthenticationEntryPointImpl implements AuthenticationEntryPoint &#123;\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException &#123;\n        ResponseResult result = new ResponseResult(HttpStatus.UNAUTHORIZED.value(), &quot;认证失败请重新登录&quot;);\n        String json = JSON.toJSONString(result);\n        WebUtils.renderString(response,json);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"②配置给SpringSecurity\"><a href=\"#②配置给SpringSecurity\" class=\"headerlink\" title=\"②配置给SpringSecurity\"></a>②配置给SpringSecurity</h2><p>​\t先注入对应的处理器</p>\n<pre><code class=\"java\">    @Autowired\n    private AuthenticationEntryPoint authenticationEntryPoint;\n\n    @Autowired\n    private AccessDeniedHandler accessDeniedHandler;\n</code></pre>\n<p>​\t然后我们可以使用HttpSecurity对象的方法去配置。</p>\n<pre><code class=\"java\">        http.exceptionHandling()\n            .authenticationEntryPoint(authenticationEntryPoint)\n            .accessDeniedHandler(accessDeniedHandler);\n</code></pre>\n<h1 id=\"十一、Remember-Me功能实现\"><a href=\"#十一、Remember-Me功能实现\" class=\"headerlink\" title=\"十一、Remember Me功能实现\"></a>十一、Remember Me功能实现</h1><p>​\tSpring Security 中Remember Me为“记住我”功能，用户只需要在登录时添加remember-me复选框，取值为true。Spring Security会自动把用户信息存储到数据源中，以后就可以不登录进行访问。</p>\n<h2 id=\"1-添加依赖\"><a href=\"#1-添加依赖\" class=\"headerlink\" title=\"1.添加依赖\"></a>1.添加依赖</h2><p>​\tSpring Security实现Remember Me 功能时底层实现依赖Spring-JDBC，所以需要导入Spring-JDBC。以后多使用MyBatis框架而很少直接导入spring-jdbc，所以此处导入mybatis启动器</p>\n<p>同时还需要添加MySQL驱动</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n    &lt;version&gt;2.1.1&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;mysql&lt;/groupId&gt;\n    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;version&gt;5.1.6&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h2 id=\"2-配置数据源\"><a href=\"#2-配置数据源\" class=\"headerlink\" title=\"2.配置数据源\"></a>2.配置数据源</h2><p>​\t在application.properties中配置数据源。请确保数据库中已经存在security数据库</p>\n<pre><code class=\"properties\">spring.datasource.driver-class-name=com.mysql.jdbc.Driver\nspring.datasource.url=jdbc:mysql://127.0.0.1:3306/mashibing\nspring.datasource.username=root\nspring.datasource.password=root\n</code></pre>\n<h2 id=\"3-编写配置\"><a href=\"#3-编写配置\" class=\"headerlink\" title=\"3.编写配置\"></a>3.编写配置</h2><p>​\t新建com.msb.config.RememberMeConfig类，并创建Bean对象</p>\n<pre><code class=\"java\">@Configuration\npublic class RememberMeConfig &#123;\n    @Autowired\n    private DataSource dataSource;\n    @Bean\n    public PersistentTokenRepository getPersistentTokenRepository() &#123;\n        JdbcTokenRepositoryImpl jdbcTokenRepositoryImpl=new JdbcTokenRepositoryImpl();\n        jdbcTokenRepositoryImpl.setDataSource(dataSource);\n        //自动建表，第一次启动时需要，第二次启动时注释掉\n//        jdbcTokenRepositoryImpl.setCreateTableOnStartup(true);\n        return jdbcTokenRepositoryImpl;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"4-修改SecurityConfig\"><a href=\"#4-修改SecurityConfig\" class=\"headerlink\" title=\"4.修改SecurityConfig\"></a>4.修改SecurityConfig</h2><p>​\t在SecurityConfig中添加RememberMeConfig和UserDetailsService实现类对象，并自动注入。</p>\n<p>​\t在configure中添加下面配置内容。</p>\n<pre><code class=\"java\">http.rememberMe()\n    .userDetailsService(userDetailsService) //登录逻辑交给哪个对象\n    .tokenRepository(repository);   //持久层对象\n</code></pre>\n<h2 id=\"5-在客户端页面中添加复选框\"><a href=\"#5-在客户端页面中添加复选框\" class=\"headerlink\" title=\"5.在客户端页面中添加复选框\"></a>5.在客户端页面中添加复选框</h2><p>​\t在客户端登录页面中添加remember-me的复选框，只要用户勾选了复选框下次就不需要进行登录了。</p>\n<pre><code class=\"html\">&lt;form action = &quot;/login&quot; method=&quot;post&quot;&gt;\n    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;br/&gt;\n    密码:&lt;input type=&quot;text&quot; name=&quot;password&quot;/&gt;&lt;br/&gt;\n    &lt;input type=&quot;checkbox&quot; name=&quot;remember-me&quot; value=&quot;true&quot;/&gt; &lt;br/&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;\n&lt;/form&gt;\n</code></pre>\n<h2 id=\"6-有效时间\"><a href=\"#6-有效时间\" class=\"headerlink\" title=\"6.有效时间\"></a>6.有效时间</h2><p>​\t默认情况下重启项目后登录状态失效了。但是可以通过设置状态有效时间，即使项目重新启动下次也可以正常登录。</p>\n<pre><code class=\"java\">//remember Me\nhttp.rememberMe()\n        .tokenValiditySeconds(120)//单位：秒\n        .tokenRepository(repository)\n        .userDetailsService(userDetailsServiceImpl);\n</code></pre>\n<h1 id=\"十二、Thymeleaf中Spring-Security的使用\"><a href=\"#十二、Thymeleaf中Spring-Security的使用\" class=\"headerlink\" title=\"十二、Thymeleaf中Spring Security的使用\"></a>十二、Thymeleaf中Spring Security的使用</h1><p>​\tSpring Security可以在一些视图技术中进行控制显示效果。例如：JSP或Thymeleaf。在非前后端分离且使用Spring Boot的项目中多使用Thymeleaf作为视图展示技术。</p>\n<p>​\tThymeleaf对Spring Security的支持都放在thymeleaf-extras-springsecurityX中，目前最新版本为5。所以需要在项目中添加此jar包的依赖和thymeleaf的依赖。</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;\n    &lt;artifactId&gt;thymeleaf-extras-springsecurity5&lt;/artifactId&gt;\n    &lt;version&gt;3.0.4.RELEASE&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>\n<p>​\t在html页面中引入thymeleaf命名空间和security命名空间</p>\n<pre><code class=\"html\">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;\n      xmlns:th=&quot;http://www.thymeleaf.org&quot;\nxmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;&gt;\n</code></pre>\n<h2 id=\"1-获取属性\"><a href=\"#1-获取属性\" class=\"headerlink\" title=\"1.获取属性\"></a>1.获取属性</h2><p>​\t可以在html页面中通过 sec:authentication&#x3D;””获取UsernamePasswordAuthenticationToken中所有getXXX的内容，包含父类中的getXXX的内容。</p>\n<p>​\t根据源码得出下面属性：</p>\n<p>​\tl name：登录账号名称</p>\n<p>​\tl principal：登录主体，在自定义登录逻辑中是UserDet ails</p>\n<p>​\tl credentials：凭证</p>\n<p>​\tl authorities：权限和角色</p>\n<p>​\tl details：实际上是WebAuthenticationDetails的实例。可以获取remoteAddress(客户端ip)和sessionId(当\t前sessionId)</p>\n<h3 id=\"1-1实现步骤：\"><a href=\"#1-1实现步骤：\" class=\"headerlink\" title=\"1.1实现步骤：\"></a>1.1实现步骤：</h3><h4 id=\"1-1-1新建demo-html\"><a href=\"#1-1-1新建demo-html\" class=\"headerlink\" title=\"1.1.1新建demo.html\"></a>1.1.1新建demo.html</h4><p>​\t在项目resources中新建templates文件夹，在templates中新建demo.html页面</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-34.jpg\" class=\"\">\n\n\n<h4 id=\"1-1-2编写demo-html\"><a href=\"#1-1-2编写demo-html\" class=\"headerlink\" title=\"1.1.2编写demo.html\"></a>1.1.2编写demo.html</h4><p>​\t在demo.html中编写下面内容，测试获取到的值</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;\n      xmlns:th=&quot;http://www.thymeleaf.org&quot;\n      xmlns:sec=&quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    登录账号:&lt;span sec:authentication=&quot;name&quot;&gt;&lt;/span&gt;&lt;br/&gt;\n    登录账号:&lt;span sec:authentication=&quot;principal.username&quot;&gt;&lt;/span&gt;&lt;br/&gt;\n    凭证：&lt;span sec:authentication=&quot;credentials&quot;&gt;&lt;/span&gt;&lt;br/&gt;\n    权限和角色：&lt;span sec:authentication=&quot;authorities&quot;&gt;&lt;/span&gt;&lt;br/&gt;\n    客户端地址：&lt;span sec:authentication=&quot;details.remoteAddress&quot;&gt;&lt;/span&gt;&lt;br/&gt;\n    sessionId：&lt;span sec:authentication=&quot;details.sessionId&quot;&gt;&lt;/span&gt;&lt;br/&gt;\n&lt;/body&gt;\n&lt;/html&gt;  \n</code></pre>\n<h4 id=\"1-1-3编写控制器\"><a href=\"#1-1-3编写控制器\" class=\"headerlink\" title=\"1.1.3编写控制器\"></a>1.1.3编写控制器</h4><p>​\tthymeleaf页面需要控制转发，在控制器类中编写下面方法</p>\n<pre><code class=\"java\">@RequestMapping(&quot;/demo&quot;)\npublic String demo()&#123;\n    return &quot;demo&quot;;\n&#125;\n</code></pre>\n<h2 id=\"2-权限判断\"><a href=\"#2-权限判断\" class=\"headerlink\" title=\"2.权限判断\"></a>2.权限判断</h2><p>​\t在html页面中可以使用sec:authorize&#x3D;”表达式”进行权限控制，判断是否显示某些内容。表达式的内容和access(表达式)的用法相同。如果用户具有指定的权限，则显示对应的内容；如果表达式不成立，则不显示对应的元素。</p>\n<h3 id=\"2-1不同权限的用户显示不同的按钮\"><a href=\"#2-1不同权限的用户显示不同的按钮\" class=\"headerlink\" title=\"2.1不同权限的用户显示不同的按钮\"></a>2.1不同权限的用户显示不同的按钮</h3><h4 id=\"2-1-1设置用户角色和权限\"><a href=\"#2-1-1设置用户角色和权限\" class=\"headerlink\" title=\"2.1.1设置用户角色和权限\"></a>2.1.1设置用户角色和权限</h4><p>​\t设定用户具有admin，&#x2F;insert，&#x2F;delete权限ROLE_abc角色。</p>\n<pre><code class=\"java\">return new User(username,password, \n                AuthorityUtils.commaSeparatedStringToAuthorityList(&quot;admin,ROLE_abc,/insert,/delete&quot;));\n</code></pre>\n<h4 id=\"2-1-2控制页面显示效果\"><a href=\"#2-1-2控制页面显示效果\" class=\"headerlink\" title=\"2.1.2控制页面显示效果\"></a>2.1.2控制页面显示效果</h4><p>在页面中根据用户权限和角色判断页面中显示的内容</p>\n<pre><code class=\"html\">通过权限判断：\n&lt;button sec:authorize=&quot;hasAuthority(&#39;/insert&#39;)&quot;&gt;新增&lt;/button&gt;\n&lt;button sec:authorize=&quot;hasAuthority(&#39;/delete&#39;)&quot;&gt;删除&lt;/button&gt;\n&lt;button sec:authorize=&quot;hasAuthority(&#39;/update&#39;)&quot;&gt;修改&lt;/button&gt;\n&lt;button sec:authorize=&quot;hasAuthority(&#39;/select&#39;)&quot;&gt;查看&lt;/button&gt;\n&lt;br/&gt;\n通过角色判断：\n&lt;button sec:authorize=&quot;hasRole(&#39;abc&#39;)&quot;&gt;新增&lt;/button&gt;\n&lt;button sec:authorize=&quot;hasRole(&#39;abc&#39;)&quot;&gt;删除&lt;/button&gt;\n&lt;button sec:authorize=&quot;hasRole(&#39;abc&#39;)&quot;&gt;修改&lt;/button&gt;\n&lt;button sec:authorize=&quot;hasRole(&#39;abc&#39;)&quot;&gt;查看&lt;/button&gt;\n</code></pre>\n<h1 id=\"十三、SpringSecurity-的”跨域”问题\"><a href=\"#十三、SpringSecurity-的”跨域”问题\" class=\"headerlink\" title=\"十三、SpringSecurity 的”跨域”问题\"></a>十三、SpringSecurity 的”跨域”问题</h1><p>​\t浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。 </p>\n<p>​\t前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。</p>\n<p>​\t所以我们就要处理一下，让前端能进行跨域请求。</p>\n<h2 id=\"①先对SpringBoot配置，运行跨域请求\"><a href=\"#①先对SpringBoot配置，运行跨域请求\" class=\"headerlink\" title=\"①先对SpringBoot配置，运行跨域请求\"></a>①先对SpringBoot配置，运行跨域请求</h2><p>这里的方式多种多想可以 配置类，也可以对跨域的请求直接加注解 ，自己视情况而定</p>\n<pre><code class=\"java\">@Configuration\npublic class CorsConfig implements WebMvcConfigurer &#123;\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) &#123;\n      // 设置允许跨域的路径\n        registry.addMapping(&quot;/**&quot;)\n                // 设置允许跨域请求的域名\n                .allowedOriginPatterns(&quot;*&quot;)\n                // 是否允许cookie\n                .allowCredentials(true)\n                // 设置允许的请求方式\n                .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;DELETE&quot;, &quot;PUT&quot;)\n                // 设置允许的header属性\n                .allowedHeaders(&quot;*&quot;)\n                // 跨域允许时间\n                .maxAge(3600);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"②开启SpringSecurity的跨域访问\"><a href=\"#②开启SpringSecurity的跨域访问\" class=\"headerlink\" title=\"②开启SpringSecurity的跨域访问\"></a>②开启SpringSecurity的跨域访问</h2><p>由于我们的资源都会收到SpringSecurity的保护，所以想要跨域访问还要让SpringSecurity运行跨域访问。</p>\n<pre><code class=\"java\">    @Override\n    protected void configure(HttpSecurity http) throws Exception &#123;\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers(&quot;/user/login&quot;).anonymous()\n                // 除上面外的所有请求全部需要鉴权认证\n                .anyRequest().authenticated();\n\n        //添加过滤器\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n\n        //配置异常处理器\n        http.exceptionHandling()\n                //配置认证失败处理器\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler);\n\n        //允许跨域\n        http.cors();\n    &#125;\n</code></pre>\n<h1 id=\"十三、退出登录\"><a href=\"#十三、退出登录\" class=\"headerlink\" title=\"十三、退出登录\"></a>十三、退出登录</h1><p>​\t用户只需要向Spring Security项目中发送&#x2F;logout退出请求即可。</p>\n<h2 id=\"1-退出实现\"><a href=\"#1-退出实现\" class=\"headerlink\" title=\"1.退出实现\"></a>1.退出实现</h2><p>实现退出非常简单，只要在页面中添加&#x2F;logout的超链接即可。</p>\n<pre><code class=\"html\">&lt;a href=&quot;/logout&quot;&gt;退出登录&lt;/a&gt;\n</code></pre>\n<p>​\t为了实现更好的效果，通常添加退出的配置。默认的退出url为&#x2F;logout，退出成功后跳转到&#x2F;login?logout</p>\n<p>​\t如果不希望使用默认值，可以通过下面的方法进行修改。</p>\n<pre><code class=\"java\">http.logout()     \n    .logoutUrl(**&quot;/logout&quot;**)     \n    .logoutSuccessUrl(**&quot;/login.html&quot;**);\n</code></pre>\n<h2 id=\"2-logout其他常用配置源码解读\"><a href=\"#2-logout其他常用配置源码解读\" class=\"headerlink\" title=\"2.logout其他常用配置源码解读\"></a>2.logout其他常用配置源码解读</h2><h3 id=\"2-1-addLogoutHandler-LogoutHandler\"><a href=\"#2-1-addLogoutHandler-LogoutHandler\" class=\"headerlink\" title=\"2.1.addLogoutHandler(LogoutHandler)\"></a>2.1.addLogoutHandler(LogoutHandler)</h3><p>​\t默认是contextLogoutHandler</p>\n<p>​\t默认实例内容</p>\n<img data-src=\"/2022/10/07/SpringSecurity/springSecurity-37.jpg\" class=\"\">\n\n\n<h3 id=\"2-2clearAuthentication-boolean\"><a href=\"#2-2clearAuthentication-boolean\" class=\"headerlink\" title=\"2.2clearAuthentication(boolean)\"></a>2.2clearAuthentication(boolean)</h3><p>​\t是否清除认证状态，默认为true</p>\n<h5 id=\"2-3invalidateHttpSession-boolean\"><a href=\"#2-3invalidateHttpSession-boolean\" class=\"headerlink\" title=\"2.3invalidateHttpSession(boolean)\"></a>2.3invalidateHttpSession(boolean)</h5><p>​\t是否销毁HttpSession对象，默认为true</p>\n<h3 id=\"2-4logoutSuccessHandler-LogoutSuccessHandler\"><a href=\"#2-4logoutSuccessHandler-LogoutSuccessHandler\" class=\"headerlink\" title=\"2.4logoutSuccessHandler(LogoutSuccessHandler)\"></a>2.4logoutSuccessHandler(LogoutSuccessHandler)</h3><p>​\t退出成功处理器。</p>\n<p>​\t也可以自己进行定义退出成功处理器。只要实现了LogoutSuccessHandler接口。与之前讲解的登录成功处理器和登录失败处理器极其类似。</p>\n<h1 id=\"十四、Spring-Security-中-CSRF\"><a href=\"#十四、Spring-Security-中-CSRF\" class=\"headerlink\" title=\"十四、Spring Security 中 CSRF\"></a>十四、Spring Security 中 CSRF</h1><p>​\t从刚开始学习Spring Security时，在配置类中一直存在这样一行代码：http.csrf().disable();如果没有这行代码导致用户无法被认证。这行代码的含义是：关闭csrf防护。</p>\n<h2 id=\"1-什么是CSRF\"><a href=\"#1-什么是CSRF\" class=\"headerlink\" title=\"1.什么是CSRF\"></a>1.什么是CSRF</h2><p>​\tCSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack” 或者Session Riding。通过伪造用户请求访问受信任站点的非法请求访问。</p>\n<p>​\t跨域：只要网络协议，ip地址，端口中任何一个不相同就是跨域请求。</p>\n<p>​\t客户端与服务进行交互时，由于http协议本身是无状态协议，所以引入了cookie进行记录客户端身份。在cookie中会存放session id用来识别客户端身份的。在跨域的情况下，session id可能被第三方恶意劫持，通过这个session id向服务端发起请求时，服务端会认为这个请求是合法的，可能发生很多意想不到的事情。</p>\n<h2 id=\"2-Spring-Security中CSRF\"><a href=\"#2-Spring-Security中CSRF\" class=\"headerlink\" title=\"2.Spring Security中CSRF\"></a>2.Spring Security中CSRF</h2><p>​\t从Spring Security4开始CSRF防护默认开启。默认会拦截请求。进行CSRF处理。CSRF为了保证不是其他第三方网站访问，要求访问时携带参数名为_csrf值为token(token在服务端产生)的内容，如果token和服务端的token匹配成功，则正常访问。 </p>\n<h3 id=\"2-1实现步骤-1\"><a href=\"#2-1实现步骤-1\" class=\"headerlink\" title=\"2.1实现步骤\"></a>2.1实现步骤</h3><h4 id=\"2-1-1-编写控制器方法\"><a href=\"#2-1-1-编写控制器方法\" class=\"headerlink\" title=\"2.1.1 编写控制器方法\"></a>2.1.1 编写控制器方法</h4><p>​\t编写控制器方法，跳转到templates中login.html页面。</p>\n<pre><code class=\"java\">@GetMapping(&quot;/showLogin&quot;)\npublic String showLogin() &#123;\n    return &quot;login&quot;;\n&#125;\n</code></pre>\n<h4 id=\"2-1-2新建login-html\"><a href=\"#2-1-2新建login-html\" class=\"headerlink\" title=\"2.1.2新建login.html\"></a>2.1.2新建login.html</h4><p>在项目resources下新建templates文件夹，并在文件夹中新建login.html页面。红色部分是必须存在的否则无法正常登录。</p>\n<pre><code class=\"html\">&lt;!DOCTYPE html&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;\n      xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action = &quot;/login&quot; method=&quot;post&quot;&gt;\n    &lt;input type=&quot;hidden&quot; th:value=&quot;$&#123;_csrf.token&#125;&quot; name=&quot;_csrf&quot; th:if=&quot;$&#123;_csrf&#125;&quot;/&gt;\n    用户名：&lt;input type=&quot;text&quot; name=&quot;username&quot;/&gt;&lt;br/&gt;\n    密码:&lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt;&lt;br/&gt;\n    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;     \n</code></pre>\n<h4 id=\"2-1-3修改配置类\"><a href=\"#2-1-3修改配置类\" class=\"headerlink\" title=\"2.1.3修改配置类\"></a>2.1.3修改配置类</h4><p>在配置类中注释掉CSRF防护失效</p>\n<pre><code class=\"java\">//关闭csrf防护\n//http.csrf().disable();\n</code></pre>\n",
            "tags": [
                "框架",
                "Spring",
                "SpringSecurity"
            ]
        }
    ]
}