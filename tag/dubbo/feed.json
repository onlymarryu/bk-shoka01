{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"dubbo\" tag",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Distribution/Dubbo/",
            "url": "http://example.com/2022/10/07/Distribution/Dubbo/",
            "title": "Dubbo",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"dubbo\"><a class=\"anchor\" href=\"#dubbo\">#</a> Dubbo</h1>\n<h3 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> 主要内容</h3>\n<ol>\n<li>Dubbo 简介</li>\n<li>Dubbo 架构讲解</li>\n<li>Dubbo 支持的协议</li>\n<li>Dubbo 支持的注册中心</li>\n<li>第一个 Dubbo 的 Provider</li>\n<li>Admin 管理界面搭建</li>\n<li>成 Dubbo 的 Consumer</li>\n<li>负载均衡</li>\n<li>完整 Dubbo 项目演示</li>\n</ol>\n<h3 id=\"学习目标\"><a class=\"anchor\" href=\"#学习目标\">#</a> 学习目标</h3>\n<table>\n<thead>\n<tr>\n<th>知识点</th>\n<th>要求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Dubbo 简介</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Dubbo 架构讲解</td>\n<td>精通</td>\n</tr>\n<tr>\n<td>Dubbo 支持的协议</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Dubbo 支持的注册中心</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>第一个 Dubbo 的 Provider</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>Admin 管理界面搭建</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>完成 Dubbo 的 Consumer</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>负载均衡</td>\n<td>掌握</td>\n</tr>\n<tr>\n<td>完整 Dubbo 项目演示</td>\n<td>掌握</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"一-dubbo简介\"><a class=\"anchor\" href=\"#一-dubbo简介\">#</a> 一、Dubbo 简介</h3>\n<h4 id=\"1官方说明\"><a class=\"anchor\" href=\"#1官方说明\">#</a> 1, 官方说明</h4>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-1.png\" class=\"\"></p>\n<p>​\tApache Dubbo 是一个高可用的，基于 Java 的开源 RPC 框架。</p>\n<p>​\tDubbo 框架不仅仅是具备 RPC 访问功能，还包含服务治理功能。</p>\n<h4 id=\"2发展历史\"><a class=\"anchor\" href=\"#2发展历史\">#</a> 2. 发展历史</h4>\n<p>​\tDubbo 是最开始是阿里巴巴内部使用的 RPC 框架。</p>\n<p>​\t2011 年对外提供。</p>\n<p>​\t2012 年停止更新。</p>\n<p>​\t2017 年开始继续更新。</p>\n<p>​\t2019 年捐献给 Apache，由 Apache 维护 2.7 以上版本。</p>\n<h4 id=\"3dubbo架构讲解\"><a class=\"anchor\" href=\"#3dubbo架构讲解\">#</a> 3.Dubbo 架构讲解</h4>\n<h5 id=\"31架构图\"><a class=\"anchor\" href=\"#31架构图\">#</a> 3.1 架构图</h5>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-2.png\" class=\"\"></p>\n<h4 id=\"32架构说明\"><a class=\"anchor\" href=\"#32架构说明\">#</a> 3.2 架构说明</h4>\n<h5 id=\"321虚线\"><a class=\"anchor\" href=\"#321虚线\">#</a> 3.2.1 虚线</h5>\n<p>​\t虚线表示异步，实线表示同步。异步不阻塞线程性能高，同步阻塞线程必须等待响应结果才能继续执行，相对性能低。</p>\n<h5 id=\"322provider\"><a class=\"anchor\" href=\"#322provider\">#</a> 3.2.2Provider</h5>\n<p>​\t提供者。编写持久层和事务代码。</p>\n<h5 id=\"323container\"><a class=\"anchor\" href=\"#323container\">#</a> 3.2.3Container</h5>\n<p>​\t容器（Spring 容器），Dubbo 完全基于 Spring 实现的。</p>\n<h5 id=\"324registry\"><a class=\"anchor\" href=\"#324registry\">#</a> 3.2.4Registry</h5>\n<p>​\t注册中心。放置所有 Provider 对外提供的信息。包含 Provider 的 IP，访问端口，访问遵守的协议，对外提供的接口，接口中有哪些方法等相关信息。</p>\n<h5 id=\"325consumer\"><a class=\"anchor\" href=\"#325consumer\">#</a> 3.2.5Consumer</h5>\n<p>​\t消费者（RPC 调用者，SOA 调用服务的项目）开发中也是一个项目，编写 service 和 controller（还可以报页面等）。调用 XXXXServiceImpl 中的方法。</p>\n<h5 id=\"326monitor\"><a class=\"anchor\" href=\"#326monitor\">#</a> 3.2.6Monitor</h5>\n<p>​\t监控中心。监控 Provider 的压力情况等。每隔 2 分钟 Consumer 和 Provider 会把调用次数发送给 Monitor，由 Monitor 进行统计。</p>\n<h4 id=\"4执行流程\"><a class=\"anchor\" href=\"#4执行流程\">#</a> 4. 执行流程</h4>\n<ol start=\"0\">\n<li>start：启动 Spring 容器时会把 Provider 启动。</li>\n<li>register：把 Provider 相关信息注册到 Registry 里</li>\n<li>subscribe：Consumer 从 Registry 中订阅 Provider 的信息</li>\n<li>notify：通知给 Consumer</li>\n<li>invoke：Consumer 根据 Registry 通知的信息进行调用 Provider 中方法。</li>\n<li>count:Consumer 和 Provider 把调用次数信息异步发送给 Monitor 进行统计。</li>\n</ol>\n<h3 id=\"二-dubbo支持的协议\"><a class=\"anchor\" href=\"#二-dubbo支持的协议\">#</a> 二、Dubbo 支持的协议</h3>\n<h4 id=\"1dubbo协议官方推荐协议\"><a class=\"anchor\" href=\"#1dubbo协议官方推荐协议\">#</a> 1.Dubbo 协议 (官方推荐协议)</h4>\n<p>​\t优点：</p>\n<p>​\t\t采用 NIO 复用单一长连接，并使用线程池并发处理请求，减少握手和加大并发效率，性能较好（推荐使用）</p>\n<p>​\t缺点：</p>\n<p>​\t\t大文件上传时，可能出现问题 (不使用 Dubbo 文件上传)</p>\n<h4 id=\"2rmiremote-method-invocation协议\"><a class=\"anchor\" href=\"#2rmiremote-method-invocation协议\">#</a> 2.RMI (Remote Method Invocation) 协议</h4>\n<p>​\t优点:</p>\n<p>​\t\tJDK 自带的能力。</p>\n<p>​\t缺点:</p>\n<p>​\t\t偶尔连接失败.</p>\n<h4 id=\"3hessian协议\"><a class=\"anchor\" href=\"#3hessian协议\">#</a> 3.Hessian 协议</h4>\n<p>​\t优点:</p>\n<p>​\t\t可与原生 Hessian 互操作，基于 HTTP 协议</p>\n<p>​\t缺点:</p>\n<p>​\t\t需 hessian.jar 支持，http 短连接的开销大</p>\n<h3 id=\"三-dubbo支持的注册中心\"><a class=\"anchor\" href=\"#三-dubbo支持的注册中心\">#</a> 三、Dubbo 支持的注册中心</h3>\n<h4 id=\"1zookeeper官方推荐\"><a class=\"anchor\" href=\"#1zookeeper官方推荐\">#</a> 1.Zookeeper (官方推荐)</h4>\n<p>​\t1) 优点:</p>\n<p>​\t\t支持分布式。很多周边产品.</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t受限于 Zookeeper 软件的稳定性.Zookeeper 专门分布式辅助软件，稳定较优</p>\n<h4 id=\"2multicast\"><a class=\"anchor\" href=\"#2multicast\">#</a> 2.Multicast</h4>\n<p>​\t1) 优点:</p>\n<p>​\t\t去中心化，不需要单独安装软件.</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t2.2.1 Provider 和 Consumer 和 Registry 不能跨机房 (路由)</p>\n<h4 id=\"3redis\"><a class=\"anchor\" href=\"#3redis\">#</a> 3.Redis</h4>\n<p>​\t1) 优点:</p>\n<p>​\t\t支持集群，性能高</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t要求服务器时间同步。否则可能出现集群失败问题.</p>\n<h4 id=\"4simple\"><a class=\"anchor\" href=\"#4simple\">#</a> 4.Simple</h4>\n<p>​\t1) 优点:</p>\n<p>​\t\t标准 RPC 服务。没有兼容问题</p>\n<p>​\t2) 缺点:</p>\n<p>​\t\t不支持集群.</p>\n<h3 id=\"四-第一个dubbo的provider\"><a class=\"anchor\" href=\"#四-第一个dubbo的provider\">#</a> 四、第一个 Dubbo 的 Provider</h3>\n<p>​\t新建父项目 Parent1。最终结构如下：</p>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-3.png\" class=\"\"></p>\n<p>​\t编写 pom.xml 继承 SpringBoot 父项目。</p>\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n&lt;/parent&gt; \n</code></pre>\n<h4 id=\"1新建api项目\"><a class=\"anchor\" href=\"#1新建api项目\">#</a> 1. 新建 api 项目</h4>\n<h5 id=\"11创建接口\"><a class=\"anchor\" href=\"#11创建接口\">#</a> 1.1 创建接口</h5>\n<p>​\t创建 com.msb.<strong>dubbo</strong>.service.Demo<strong>Dubbo</strong>Service 接口</p>\n<pre><code>public interface DemoDubboService &#123;\n    String demo();\n&#125;\n</code></pre>\n<h4 id=\"2新建provider项目\"><a class=\"anchor\" href=\"#2新建provider项目\">#</a> 2. 新建 provider 项目</h4>\n<h5 id=\"21编写pomxml\"><a class=\"anchor\" href=\"#21编写pomxml\">#</a> 2.1 编写 pom.xml</h5>\n<p>​\t注意：不需要依赖 web，如果依赖 spring-boot-start-web 还需要考虑端口问题。</p>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.7.3&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;   \n</code></pre>\n<h5 id=\"22编写配置文件\"><a class=\"anchor\" href=\"#22编写配置文件\">#</a> 2.2 编写配置文件</h5>\n<p>​\t新建 application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-provider\n  registry:\n    address: zookeeper://192.168.32.128:2181\n</code></pre>\n<h5 id=\"23新建实现类\"><a class=\"anchor\" href=\"#23新建实现类\">#</a> 2.3 新建实现类</h5>\n<p>​\t新建 com.msb.dubbo.service.impl.DemoDubboServiceImpl</p>\n<p>​\t注意：注解是 apache 的注解。</p>\n<pre><code>import com.msb.dubbo.service.DemoDubboService;\nimport org.apache.dubbo.config.annotation.Service;\n\n@Service\npublic class DemoDubboServiceImpl implements DemoDubboService &#123;\n    @Override\n    public String demo() &#123;\n        System.out.println(&quot;demo方法&quot;);\n        return &quot;123&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"24新建启动类\"><a class=\"anchor\" href=\"#24新建启动类\">#</a> 2.4 新建启动类</h5>\n<p>​\t新建 com.msb.ProviderApplication。</p>\n<p>​\t必须要有 @EnableDubbo 注解，否则 Dubbo 不生效。</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\npublic class ProviderApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ProviderApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"五-完成dubbo的consumer\"><a class=\"anchor\" href=\"#五-完成dubbo的consumer\">#</a> 五、完成 Dubbo 的 Consumer</h3>\n<p>​\t创建 consumer 项目</p>\n<h4 id=\"1编写pomxml\"><a class=\"anchor\" href=\"#1编写pomxml\">#</a> 1. 编写 pom.xml</h4>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n        &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n        &lt;version&gt;2.7.3&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n        &lt;version&gt;4.2.0&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;   \n</code></pre>\n<h4 id=\"2新建配置文件\"><a class=\"anchor\" href=\"#2新建配置文件\">#</a> 2. 新建配置文件</h4>\n<p>​\t新建 application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-consumer\n  registry:\n    address: zookeeper://192.168.32.128:2181\n</code></pre>\n<h4 id=\"3新建service及实现类\"><a class=\"anchor\" href=\"#3新建service及实现类\">#</a> 3. 新建 service 及实现类</h4>\n<p>​\t新建 com.msb.service.DemoService</p>\n<p>​\t新建 com.msb.service.impl.DemoServiceImpl</p>\n<p>​\t调用服务使用 @Reference 注解，不要倒错包了，有两个。</p>\n<pre><code>public interface DemoService &#123;\n    String consumerDemo();\n&#125;\n</code></pre>\n<pre><code>import com.msb.dubbo.service.DemoDubboService;\nimport com.msb.service.DemoService;\nimport org.apache.dubbo.config.annotation.Reference;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DemoServiceImpl implements DemoService &#123;\n\n    @Reference\n    private DemoDubboService demoDubboService;\n\n    @Override\n    public String consumerDemo() &#123;\n        return demoDubboService.demo();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"4新建控制器\"><a class=\"anchor\" href=\"#4新建控制器\">#</a> 4. 新建控制器</h4>\n<p>​\t新建控制器 com.msb.controller.DemoController</p>\n<pre><code>@Controller\npublic class DemoController &#123;\n    @Autowired\n    private DemoService demoService;\n\n    @RequestMapping(&quot;/demo&quot;)\n    @ResponseBody\n    public String demo()&#123;\n        return demoService.consumerDemo();\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"5新建启动器\"><a class=\"anchor\" href=\"#5新建启动器\">#</a> 5. 新建启动器</h4>\n<p>​\t新建 com.msb.ConsumerApplication</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\npublic class ConsumerApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ConsumerApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"六-admin管理界面搭建\"><a class=\"anchor\" href=\"#六-admin管理界面搭建\">#</a> 六、Admin 管理界面搭建</h3>\n<p>​\t资料中把 dubbo-admin-0.2.0.jar\\BOOT-INF\\classes 中 application.properties 里面注册中心的 ip 设置正确</p>\n<p>​\t使用 java -jar dubbo-admin-0.2.0.jar 运行即可。</p>\n<p>​\t注意：占用 8080 端口，不要冲突了。</p>\n<h3 id=\"七-负载均衡\"><a class=\"anchor\" href=\"#七-负载均衡\">#</a> 七、负载均衡</h3>\n<p>​\t集群：一个内容，部署多次，形成的整体称为集群。集群中每个个体应该部署到不同的服务器上。</p>\n<p>​\t伪集群：集群中内容部署到同一台服务器上，通过不同端口区分不同个体。</p>\n<p>​\t负载均衡是在集群前提下，当访问整个集群时，集群中每个节点被访问次数或频率的规则。</p>\n<p>​\tDubbo 内置了四个负载均衡策略。默认为 Random</p>\n<h4 id=\"1内置策略\"><a class=\"anchor\" href=\"#1内置策略\">#</a> 1. 内置策略</h4>\n<h5 id=\"11random\"><a class=\"anchor\" href=\"#11random\">#</a> 1.1Random</h5>\n<p>​\t随机。随机访问集群中节点。访问概率和权重有关。</p>\n<h5 id=\"12roundrobin\"><a class=\"anchor\" href=\"#12roundrobin\">#</a> 1.2RoundRobin</h5>\n<p>​\t轮询。访问频率和权重有关。</p>\n<p>​\t权重（weight）：占有比例。集群中每个项目部署的服务器的性能可能是不同，性能好的服务器权重应该高一些。</p>\n<h5 id=\"13leastactive\"><a class=\"anchor\" href=\"#13leastactive\">#</a> 1.3LeastActive</h5>\n<p>​\t活跃数相同的随机，不同的活跃数高的放前面。</p>\n<h5 id=\"14consistenthash\"><a class=\"anchor\" href=\"#14consistenthash\">#</a> 1.4ConsistentHash</h5>\n<p>​\t一致性 Hash。相同参数请求总是发到一个提供者。</p>\n<h4 id=\"2provider集群\"><a class=\"anchor\" href=\"#2provider集群\">#</a> 2.Provider 集群</h4>\n<p>​\t新建四个启动类。</p>\n<p>​\t每次启动启动类修改配置文件 dubbo.protocal.port</p>\n<h4 id=\"3设置负载均衡\"><a class=\"anchor\" href=\"#3设置负载均衡\">#</a> 3. 设置负载均衡</h4>\n<h5 id=\"31reference\"><a class=\"anchor\" href=\"#31reference\">#</a> 3.1@Reference</h5>\n<p>​\t调用的服务采用的负载均衡</p>\n<pre><code>@Reference(loadbalance = &quot;roundrobin&quot;)\nprivate DemoDubboService demoDubboService;\n</code></pre>\n<h5 id=\"32-service\"><a class=\"anchor\" href=\"#32-service\">#</a> 3.2 @Service</h5>\n<p>​\t当前服务采用的负载均衡算法</p>\n<pre><code>@Service(loadbalance = &quot;random&quot;)\npublic class DemoDubboServiceImpl implements DemoDubboService &#123;\n</code></pre>\n<p>​\t设置权重</p>\n<pre><code>@Service(weight = 4)\n</code></pre>\n<h5 id=\"33配置文件\"><a class=\"anchor\" href=\"#33配置文件\">#</a> 3.3 配置文件</h5>\n<p>​\t\t\t全局设置所有 provider 和 consumer 的负载均衡效果。</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-provider\n  registry:\n    address: zookeeper://192.168.32.128:2181\n  protocol:\n    port: 20884\n  provider:\n    loadbalance: random\n  consumer:\n    loadbalance: random\n</code></pre>\n<h3 id=\"八-完整dubbo项目演示\"><a class=\"anchor\" href=\"#八-完整dubbo项目演示\">#</a> 八、完整 Dubbo 项目演示</h3>\n<h4 id=\"1原型\"><a class=\"anchor\" href=\"#1原型\">#</a> 1. 原型</h4>\n<h5 id=\"11部门显示\"><a class=\"anchor\" href=\"#11部门显示\">#</a> 1.1 部门显示</h5>\n<p>​\t显示全部部门信息</p>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-4.png\" class=\"\"></p>\n<h5 id=\"12员工新增\"><a class=\"anchor\" href=\"#12员工新增\">#</a> 1.2 员工新增</h5>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-5.png\" class=\"\"></p>\n<h5 id=\"13查看部门员工\"><a class=\"anchor\" href=\"#13查看部门员工\">#</a> 1.3 查看部门员工</h5>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-6.png\" class=\"\"></p>\n<h4 id=\"2按照分布式架构进行设计项目\"><a class=\"anchor\" href=\"#2按照分布式架构进行设计项目\">#</a> 2. 按照分布式架构进行设计项目</h4>\n<p>​\t\t设定员工管理和部门管理不在同一个模块中，需要有一个员工管理项目和一个部门管理项目。</p>\n<p>​\t为了方便，不去每个项目使用一个窗口，而是使用聚合项目。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-7.png\" class=\"\"></p>\n<h4 id=\"3创建数据库表\"><a class=\"anchor\" href=\"#3创建数据库表\">#</a> 3. 创建数据库表</h4>\n<pre><code>create table dept(\nid int(11) primary key auto_increment,\nname varchar(20)\n);\n\ninsert into dept values(default,'开发部');\ninsert into dept values(default,'产品部');\n\ncreate table emp(\nid int(11) primary key auto_increment,\nname varchar(20),\nphoto varchar(200),\ndid int(11),\nCONSTRAINT fk_emp_dept FOREIGN key (did) REFERENCES dept(id)\n);\n</code></pre>\n<h4 id=\"4创建父项目\"><a class=\"anchor\" href=\"#4创建父项目\">#</a> 4. 创建父项目</h4>\n<p>​\t创建项目 parent。</p>\n<p><img data-src=\"/2022/10/07/Distribution/Dubbo/Dubbo-8.png\" class=\"\"></p>\n<p>编写 pom.xml</p>\n<pre><code>&lt;parent&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n    &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n&lt;/parent&gt;\n&lt;dependencyManagement&gt;\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n            &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n            &lt;version&gt;2.1.10.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n            &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.7.3&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n            &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n            &lt;version&gt;4.2.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n            &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n            &lt;version&gt;4.2.0&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n            &lt;version&gt;2.1.1&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;mysql&lt;/groupId&gt;\n            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n            &lt;version&gt;5.1.6&lt;/version&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;commons-io&lt;/groupId&gt;\n            &lt;artifactId&gt;commons-io&lt;/artifactId&gt;\n            &lt;version&gt;2.6&lt;/version&gt;\n        &lt;/dependency&gt;\n         &lt;dependency&gt;\n             &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;\n             &lt;artifactId&gt;lombok&lt;/artifactId&gt;\n             &lt;version&gt;1.18.12&lt;/version&gt;\n             &lt;scope&gt;provided&lt;/scope&gt;\n         &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/dependencyManagement&gt;\n</code></pre>\n<h4 id=\"5创建pojo项目\"><a class=\"anchor\" href=\"#5创建pojo项目\">#</a> 5. 创建 pojo 项目</h4>\n<h4 id=\"6创建mapper项目\"><a class=\"anchor\" href=\"#6创建mapper项目\">#</a> 6. 创建 mapper 项目</h4>\n<h5 id=\"61编写pomxml\"><a class=\"anchor\" href=\"#61编写pomxml\">#</a> 6.1 编写 pom.xml</h5>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;pojo&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;mysql&lt;/groupId&gt;\n        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;    \n</code></pre>\n<h5 id=\"62新建配置文件\"><a class=\"anchor\" href=\"#62新建配置文件\">#</a> 6.2 新建配置文件</h5>\n<p>​\t新建 application-mybatis.yml</p>\n<pre><code>spring:\n  datasource:\n    driver-class-name: com.mysql.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/maven\n    username: root\n    password: root\n\nmybatis:\n  mapper-locations: classpath:mybatis/*.xml\n  type-aliases-package: com.msb.pojo\n</code></pre>\n<h4 id=\"7新建api项目\"><a class=\"anchor\" href=\"#7新建api项目\">#</a> 7. 新建 api 项目</h4>\n<h5 id=\"71编写pomxml\"><a class=\"anchor\" href=\"#71编写pomxml\">#</a> 7.1 编写 pom.xml</h5>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;pojo&lt;/artifactId&gt;\n        &lt;groupId&gt;com.bjsxt&lt;/groupId&gt;\n        &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;    \n</code></pre>\n<h4 id=\"8新建provider\"><a class=\"anchor\" href=\"#8新建provider\">#</a> 8. 新建 provider</h4>\n<h5 id=\"81编写pomxml\"><a class=\"anchor\" href=\"#81编写pomxml\">#</a> 8.1 编写 pom.xml</h5>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;mapper&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>\n<h5 id=\"82新建配置文件\"><a class=\"anchor\" href=\"#82新建配置文件\">#</a> 8.2 新建配置文件</h5>\n<p>​\t新建 application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-provider\n  registry:\n    address: zookeeper://192.168.52.128:2181\n\n# 加载其他配置文件,加载其他application-*.yml文件，多个名称之间使用逗号分隔\nspring:\n  profiles:\n    active: mybatis\n</code></pre>\n<h5 id=\"83新建启动类\"><a class=\"anchor\" href=\"#83新建启动类\">#</a> 8.3 新建启动类</h5>\n<p>​\t新建 com.msb.ProviderApplication</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\n@MapperScan(&quot;com.msb.mapper&quot;)\npublic class ProviderApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(ProviderApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h4 id=\"9完成dept查询功能\"><a class=\"anchor\" href=\"#9完成dept查询功能\">#</a> 9. 完成 Dept 查询功能</h4>\n<h5 id=\"91在api中新建接口\"><a class=\"anchor\" href=\"#91在api中新建接口\">#</a> 9.1 在 api 中新建接口</h5>\n<p>​\tcom.msb.dubbo.service.DeptDubboService</p>\n<pre><code>public interface DeptDubboService &#123;\n    List&lt;Dept&gt; selectAll();\n&#125;\n</code></pre>\n<h5 id=\"92在provider中新建实现类\"><a class=\"anchor\" href=\"#92在provider中新建实现类\">#</a> 9.2 在 provider 中新建实现类</h5>\n<p>​\tcom.msb.dubbo.service.impl.DeptDubboServiceImpl</p>\n<pre><code>@Service\npublic class DeptDubboServiceImpl implements DeptDubboService &#123;\n    @Autowired\n    private DeptMapper deptMapper;\n    @Override\n    public List&lt;Dept&gt; selectAll() &#123;\n        return deptMapper.selectByExample(null);\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"93新建项目dept\"><a class=\"anchor\" href=\"#93新建项目dept\">#</a> 9.3 新建项目 dept</h5>\n<h6 id=\"931添加依赖\"><a class=\"anchor\" href=\"#931添加依赖\">#</a> 9.3.1 添加依赖</h6>\n<pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;artifactId&gt;api&lt;/artifactId&gt;\n        &lt;groupId&gt;com.msb&lt;/groupId&gt;\n        &lt;version&gt;1.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.dubbo&lt;/groupId&gt;\n        &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;\n        &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;   \n</code></pre>\n<h6 id=\"932编写配置文件\"><a class=\"anchor\" href=\"#932编写配置文件\">#</a> 9.3.2 编写配置文件</h6>\n<p>​\t新建 application.yml</p>\n<pre><code>dubbo:\n  application:\n    name: dubbo-dept-consumer\n  registry:\n    address: zookeeper://192.168.52.128:2181\n</code></pre>\n<h6 id=\"933新建启动类\"><a class=\"anchor\" href=\"#933新建启动类\">#</a> 9.3.3 新建启动类</h6>\n<p>​\tcom.msb.DeptApplication</p>\n<pre><code>@SpringBootApplication\n@EnableDubbo\npublic class DeptApplication &#123;\n    public static void main(String[] args) &#123;\n        SpringApplication.run(DeptApplication.class,args);\n    &#125;\n&#125;\n</code></pre>\n<h6 id=\"934新建接口及实现类\"><a class=\"anchor\" href=\"#934新建接口及实现类\">#</a> 9.3.4 新建接口及实现类</h6>\n<p>​\t接口：com.msb.service.DeptService</p>\n<p>​\t实现类：com.msb.service.impl.DeptServiceImpl</p>\n<pre><code>public interface DeptService &#123;\n    List&lt;Dept&gt; showAll();\n&#125;\n</code></pre>\n<pre><code>@Service\npublic class DeptServiceImpl implements DeptService &#123;\n    @Reference\n    private DeptDubboService deptDubboService;\n    @Override\n    public List&lt;Dept&gt; showAll() &#123;\n        return deptDubboService.selectAll();\n    &#125;\n&#125;\n</code></pre>\n<h6 id=\"935新建控制器\"><a class=\"anchor\" href=\"#935新建控制器\">#</a> 9.3.5 新建控制器</h6>\n<p>​\tcom.msb.controller.DeptController</p>\n<pre><code>@Controller\npublic class DeptController &#123;\n\n    @Autowired\n    private DeptService deptService;\n\n    @GetMapping(&quot;/dept&quot;)\n    public String shwoDept(Model model)&#123;\n        model.addAttribute(&quot;list&quot;,deptService.showAll());\n        return &quot;dept&quot;;\n    &#125;\n&#125;\n</code></pre>\n<h5 id=\"936-新建页面\"><a class=\"anchor\" href=\"#936-新建页面\">#</a> 9.3.6  新建页面</h5>\n<p>​\t在 resources /templates 新建 dept.html</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;table border=&quot;1&quot; width=&quot;500&quot;&gt;\n        &lt;tr&gt;\n            &lt;th&gt;编号&lt;/th&gt;\n            &lt;th&gt;部门名称&lt;/th&gt;\n            &lt;th&gt;查看&lt;/th&gt;\n        &lt;/tr&gt;\n        &lt;tr th:each=&quot;dept : $&#123;list&#125;&quot;&gt;\n            &lt;td th:text=&quot;$&#123;dept.id&#125;&quot;&gt;&lt;/td&gt;\n            &lt;td th:text=&quot;$&#123;dept.name&#125;&quot;&gt;&lt;/td&gt;\n            &lt;td&gt; &lt;a th:href=&quot;@&#123;/showEmp(did=$&#123;dept.id&#125;)&#125;&quot;&gt;查看&lt;/a&gt; &lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;             \n</code></pre>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"bk-comment02\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev/https://github.com/login/oauth/access_token\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "分布式",
                "Dubbo"
            ]
        }
    ]
}