{
    "version": "https://jsonfeed.org/version/1",
    "title": "记录“美食”每刻 • All posts by \"-javase\" tag",
    "description": "记录“美食”每刻",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "url": "http://example.com/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/",
            "title": "第4章_流程控制",
            "date_published": "2022-10-06T16:00:00.000Z",
            "content_html": "<h1 id=\"第4章-流程控制\"><a href=\"#第4章-流程控制\" class=\"headerlink\" title=\"第4章_流程控制\"></a>第4章_流程控制</h1><h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>【1】流程控制的作用：</p>\n<p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</p>\n<p>【2】控制语句的分类：</p>\n<p>控制语句分为三类：顺序、选择和循环。</p>\n<p>“顺序结构”代表“先执行a，再执行b”的逻辑。</p>\n<p>“条件判断结构”代表“如果…，则…”的逻辑。</p>\n<p>“循环结构”代表“如果…，则再继续…”的逻辑。</p>\n<p>三种流程控制语句就能表示所有的事情！不信，你可以试试拆分你遇到的各种事情。这三种基本逻辑结构是相互支撑的，它们共同构成了算法的基本结构，无论怎样复杂的逻辑结构，都可以通过它们来表达。所以任何一种高级语言都具备上述两种结构。</p>\n<p>本章是大家真正进入编程界的“门票”。</p>\n<p>【3】流程控制的流程：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0be7aaf463c4b8bcab05594f71875ce8.png\" class=\"\">\n\n\n<h1 id=\"分支结构-选择结构\"><a href=\"#分支结构-选择结构\" class=\"headerlink\" title=\"分支结构(选择结构)\"></a>分支结构(选择结构)</h1><h1 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h1><h3 id=\"单分支\"><a href=\"#单分支\" class=\"headerlink\" title=\"单分支\"></a>单分支</h3><p>【1】语法结构:</p>\n<table>\n<thead>\n<tr>\n<th>if(布尔表达式){   语句块  }</th>\n</tr>\n</thead>\n</table>\n<p>if语句对布尔表达式进行一次判定，若判定为真，则执行{}中的语句块，否则跳过该语句块。流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0931341f710ef8def2eeccb5d15e57c6.png\" class=\"\">\n\n\n<p>【2】代码：</p>\n<pre><code class=\"java\">public class TestIf01&#123;\n    public static void main(String[] args)&#123;\n        //实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品\n        //1.给出三个数：\n        int num1 = 6;\n        int num2 = 2;\n        int num3 = 3;\n        //2.求和\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        sum += num3;\n        System.out.println(&quot;和为：&quot;+sum);\n\n        //3.根据和判断奖品：\n        //如果和大于等于14，那么就是一等奖\n        if(sum\\&gt;=14)&#123;\n            System.out.println(&quot;一等奖&quot;);\n            System.out.println(&quot;恭喜你很幸运，中了一等奖&quot;);\n        &#125;\n\n        if(sum\\&gt;=10&amp;&amp;sum\\&lt;14)&#123;\n            System.out.println(&quot;二等奖&quot;);\n        &#125;\n\n        if(sum\\&gt;=6&amp;&amp;sum\\&lt;10)&#123;\n            System.out.println(&quot;三等奖&quot;);\n        &#125;\n\n        if(sum\\&lt;6)&#123;\n            System.out.println(&quot;四等奖&quot;);\n        &#125;\n\n        /\\*\n            if-单分支：\n                （1）结构：\n                if(条件表达式，这个表达式的结果是布尔值：要么是false，要么是true)&#123;\n                    //如果上面()中的表达式返回结果是true，那么执行&#123;&#125;中代码\n                    //如果上面()中的表达式返回结果是false ，那么不执行&#123;&#125;中代码\n                    //PS:&#123;&#125;中的代码是否执行，取决于()中表达式的返回结果\n                &#125;\n        （2）上面的代码中，我用四个单分支拼凑出四个选择，每个选择是独立的，依次判断执行的\n            （3）if后面的()中的条件，要按照自己需求尽量完善\n            （4）&#123;&#125;可以省略不写,但是一旦省略，这个if就只负责后面的一句话，所以我们不建议初学者省略\n            \\*/\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"多分支\"><a href=\"#多分支\" class=\"headerlink\" title=\"多分支\"></a>多分支</h3><p>【1】语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>if(布尔表达式1) {   语句块1;  } else if(布尔表达式2) {   语句块2;  }……  else if(布尔表达式n){   语句块n;  } else {   语句块n+1;  }</th>\n</tr>\n</thead>\n</table>\n<p>当布尔表达式1为真时，执行语句块1；否则，判断布尔表达式2，当布尔表达式2为真时，执行语句块2；否则，继续判断布尔表达式3······；如果1~n个布尔表达式均判定为假时，则执行语句块n+1，也就是else部分。流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/c88bacdaa34dd27e9d243e5982d3ed6f.png\" class=\"\">\n\n\n<p>【2】数轴分析：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/7dd5d0a3ce4defddad8b915dbd61c4fd.png\" class=\"\">\n\n\n<p>【3】代码：</p>\n<pre><code class=\"java\">public class TestIf02&#123;\n    public static void main(String[] args)&#123;\n        //实现一个功能：给出三个数（1-6），对三个数求和计算，根据和的大小来分配不同的奖品\n        //1.给出三个数：\n        int num1 = 6;\n        int num2 = 4;\n        int num3 = 2;\n        //2.求和\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        sum += num3;\n        System.out.println(&quot;和为：&quot;+sum);\n\n        //3.根据和判断奖品：\n        /\\*\n            利用一个多分支\n            【1】结构：\n            if()&#123;\n\n            &#125;else if()&#123;\n\n            &#125;else if()&#123;\n\n            &#125;...\n                else&#123;\n\n                &#125;\n        【2】else:隐藏了一个条件，跟上面分支条件表达式相反的功能 (详见数轴分析)\n            【3】多分支：好处：只要满足一个 分支以后，后面的分支就不需要判断了 --》效率高\n            【4】我们写代码的时候，尽量保证else的存在--》else分支相当于“兜底”“备胎”的作用，别的分支都不走，就会走这个分支了\n            \\*/\n            if(sum\\&gt;=14)&#123;\n                System.out.println(&quot;一等奖&quot;);\n            &#125;else if(sum\\&gt;=10)&#123;//隐藏了sum\\&lt;14\n                System.out.println(&quot;二等奖&quot;);\n            &#125;else if(sum\\&gt;=6)&#123;//隐藏了sum\\&lt;10\n                System.out.println(&quot;三等奖&quot;);\n            &#125;else&#123;//隐藏了sum\\&lt;6\n                System.out.println(&quot;四等奖&quot;);\n            &#125;\n\n\n\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"双分支\"><a href=\"#双分支\" class=\"headerlink\" title=\"双分支\"></a>双分支</h3><p>【1】语法结构:</p>\n<table>\n<thead>\n<tr>\n<th>if(布尔表达式){  语句块1  }else{   语句块2  }</th>\n</tr>\n</thead>\n</table>\n<p>当布尔表达式为真时，执行语句块1，否则，执行语句块2。也就是else部分。流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/27925a9f266f6f323822dfd891938abf.png\" class=\"\">\n\n\n<h3 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h3><p>随机数：这个数在生成之前我们不确定这个数是多少，不可知</p>\n<p>在java中依靠一个类：Math类帮助我们生成，这个类中有一个方法专门用来生成随机数：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/dc25d09059fb76e3d1c8468c2bc3b071.png\" class=\"\">\n\n\n<p>Math.random() ——-&gt; [0.0,1.0)</p>\n<p>Math.random()*6 —–&gt;[0.0,6.0)</p>\n<p>(int)(Math.random()*6) —–&gt;[0,5]</p>\n<p>(int)(Math.random()*6) +1 —–&gt;[1,6]</p>\n<p>应用到程序中：</p>\n<pre><code class=\"java\">int num1 = (int)(Math.random()\\*6) +1;\nint num2 = (int)(Math.random()\\*6) +1;\nint num3 = (int)(Math.random()\\*6) +1;\n</code></pre>\n<p>练习：</p>\n<p>[32,98] - [0,66]+32 - (int)(Math.random()*67) + 32</p>\n<h3 id=\"分支的嵌套使用\"><a href=\"#分支的嵌套使用\" class=\"headerlink\" title=\"分支的嵌套使用\"></a>分支的嵌套使用</h3><p>分支结构练习1</p>\n<p>练习：</p>\n<p>会员购物时，不同积分享受的折扣不同，规则如下：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/83f88cbff6a2d8323bd5195d7274fb6e.png\" class=\"\">\n\n\n<p>计算会员购物时获得的折扣，效果如下：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/84cd71a572646a9eb1d109050b80331c.png\" class=\"\">\n\n\n<p>本题主要考的是 程序的优化：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestIf04&#123;\n    public static void main(String[] args)&#123;\n        //1.给出积分：\n        Scanner sc = new Scanner(System.in);\n        System.out.print(&quot;请输入会员积分：&quot;);\n\n        //先判断键盘录入的数据是不是int类型的\n        if(sc.hasNextInt()==true)&#123;//是int类型数据：\n            //将这个int类型的数据接收：\n            int score = sc.nextInt();\n            //判断这个积分是否是正数：\n            if(score\\&gt;=0)&#123;\n                String discount = &quot;&quot;;\n                //2.根据积分判断折扣：\n                if(score\\&gt;=8000)&#123;\n                    discount = &quot;0.6&quot;;\n                &#125;else if(score\\&gt;=4000)&#123;\n                    discount = &quot;0.7&quot;;\n                &#125;else if(score\\&gt;=2000)&#123;\n                    discount = &quot;0.8&quot;;\n                &#125;else&#123;\n                    discount = &quot;0.9&quot;;\n                &#125;\n                System.out.println(&quot;该会员享受的折扣为：&quot;+discount);\n\n            &#125;else&#123;//score\\&lt;0\n                System.out.println(&quot;对不起，你录入的积分是负数！不符合需求！&quot;);\n            &#125;\n        &#125;else&#123;//不是int类型的数据\n            System.out.println(&quot;你录入的积分不是整数！&quot;);\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<p>分支结构练习2</p>\n<p>练习：</p>\n<p>小朋友搬桌子：</p>\n<p>年龄大于7岁，可以搬桌子；</p>\n<p>如果年龄大于5岁，性别是男，可以搬桌子；</p>\n<p>否则不可以搬动桌子，提示：你还太小了</p>\n<p>本题主要考的是：逻辑</p>\n<p>方式1：性别用0或者1接收：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestIf05&#123;\n    public static void main(String[] args)&#123;\n        //1.录入小朋友的年龄：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入小朋友的年龄：&quot;);\n        int age = sc.nextInt();\n\n        //2.根据年龄判断：\n        if(age\\&gt;=7)&#123;\n            System.out.println(&quot;yes&quot;);\n        &#125;else if(age\\&gt;=5)&#123;\n            //录入小朋友的性别；\n            System.out.println(&quot;请录入小朋友的性别：男：1 女 ：0&quot;);\n            int sex = sc.nextInt();\n            if(sex==1)&#123;//男生\n                System.out.println(&quot;yes&quot;);\n            &#125;else&#123;//女孩\n                System.out.println(&quot;no&quot;);\n            &#125;\n        &#125;else&#123;//age\\&lt;5\n            System.out.println(&quot;no&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>方式2：性别用男或者女接收：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestIf06&#123;\n    public static void main(String[] args)&#123;\n        //1.录入小朋友的年龄：\n        Scanner sc = new Scanner(System.in);\n        System.out.println(&quot;请录入小朋友的年龄：&quot;);\n        int age = sc.nextInt();\n\n        //2.根据年龄判断：\n        if(age\\&gt;=7)&#123;\n            System.out.println(&quot;yes&quot;);\n        &#125;else if(age\\&gt;=5)&#123;\n            //录入小朋友的性别；\n            System.out.println(&quot;请录入小朋友的性别：&quot;);\n            String str = sc.next();\n            char sex = str.charAt(0);\n            if(sex==&#39;男&#39;)&#123;\n                System.out.println(&quot;yes&quot;);\n            &#125;else&#123;\n                System.out.println(&quot;no&quot;);\n            &#125;\n        &#125;else&#123;//age\\&lt;5\n            System.out.println(&quot;no&quot;);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h2><p>【1】switch多分支结构(多值情况)</p>\n<p>语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>switch (表达式) {   case 值1:   语句序列1;   [break];   case 值2:   语句序列2;   [break];   … … … … …   [default:默认语句;]  }</th>\n</tr>\n</thead>\n</table>\n<p>switch语句会根据表达式的值从相匹配的case标签处开始执行，一直执行到break语句处或者是switch语句的末尾。如果表达式的值与任一case值不匹配，则进入default语句（如果存在default语句的情况）。根据表达式值的不同可以执行许多不同的操作。switch语句中case标签在JDK1.5之前必须是整数（long类型除外）或者枚举，不能是字符串，在JDK1.7之后允许使用字符串(String)。大家要注意，当布尔表达式是等值判断的情况，可以使用if-else if-else多分支结构或者switch结构，如果布尔表达式区间判断的情况，则只能使用if-else if-else多分支结构。switch多分支结构的流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2f1d12c7b2e144d52b36c7aace3d6024.png\" class=\"\">\n\n\n<p>【2】练习</p>\n<pre><code class=\"java\">public class TestSwitch&#123;\n    public static void main(String[] args)&#123;\n        /\\*\n            实现一个功能：\n            根据给出的学生分数，判断学生的等级：\n            \\&gt;=90 -----A\n            \\&gt;=80 -----B\n            \\&gt;=70 -----C\n            \\&gt;=60 -----D\n            \\&lt;60 -----E\n\n            用if分支：\n            if(score\\&gt;=90)&#123;\n\n            &#125;else if(score\\&gt;=80)&#123;\n\n            &#125;\n        \\*/\n            //1.给出学生的成绩：\n            int score = 167;\n        //2.根据成绩判断学生的等级：\n        switch(score/10)&#123;\n            case 10 :\n            case 9 : System.out.println(&quot;A级&quot;);break;\n            case 8 : System.out.println(&quot;B级&quot;);break;\n            case 7 : System.out.println(&quot;C级&quot;);break;\n            case 6 : System.out.println(&quot;D级&quot;);break;\n            default:System.out.println(&quot;成绩错误&quot;);break;\n            case 5 :\n            case 4 :\n            case 3 :\n            case 2 :\n            case 1 :\n            case 0 : System.out.println(&quot;E级&quot;);break;\n\n        &#125;\n        /\\*\n            【1】语法结构：\n            switch()&#123;\n                case \\* :\n                case \\* :\n                    .......\n            &#125;\n        【2】switch后面是一个()，()中表达式返回的结果是一个等值，这个等值的类型可以为：\n            int,byte,short,char,String,枚举类型\n            【3】这个()中的等值会依次跟case后面的值进行比较，如果匹配成功，就执行:后面的代码\n            【4】为了防止代码的“穿透”效果：在每个分支后面加上一个关键词break，遇到break这个分支就结束了\n            【5】类似else的“兜底”“备胎”的分支：default分支\n            【6】default分支可以写在任意的位置上，但是如果没有在最后一行，后面必须加上break关键字，\n            如果在最后一行的话，break可以省略\n            【7】相邻分支逻辑是一样的，那么就可以只保留最后一个分支，上面的都可以省去不写了\n            【8】switch分支和if分支区别：\n            表达式是等值判断的话--》if ，switch都可以\n            如果表达式是区间判断的情况---》if最好\n            【9】switch应用场合：就是等值判断，等值的情况比较少的情况下\n            \\*/\n    &#125;\n&#125;\n</code></pre>\n<h1 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h1><h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><p>【1】语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>while (布尔表达式) {   循环体;  }</th>\n</tr>\n</thead>\n</table>\n<p>在循环刚开始时，会计算一次“布尔表达式”的值，若条件为真，执行循环体。而对于后来每一次额外的循环，都会在开始前重新计算一次。</p>\n<p>语句中应有使循环趋向于结束的语句，否则会出现无限循环–––”死”循环。</p>\n<p>while循环结构流程图如图所示:</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/d9a799db990ed9073c404c284874e3c7.png\" class=\"\">\n\n\n<p>【2】练习：1+2+3+4+5</p>\n<pre><code class=\"java\">public class TestWhile&#123;\n    public static void main(String[] args)&#123;\n        //功能：1+2+3+4+5\n        //1.定义变量：\n        int num1 = 1;\n        int num2 = 2;\n        int num3 = 3;\n        int num4 = 4;\n        int num5 = 5;\n        //2.定义一个求和变量，用来接收和：\n        int sum = 0;\n        sum += num1;\n        sum += num2;\n        sum += num3;\n        sum += num4;\n        sum += num5;\n\n        //3.输出和\n        System.out.println(sum);\n    &#125;\n&#125;\n</code></pre>\n<p>上述代码缺点：变量的定义个数太多了</p>\n<p>解决：</p>\n<pre><code class=\"java\">public class TestWhile&#123;\n    public static void main(String[] args)&#123;\n        //功能：1+2+3+4+5\n        //1.定义变量：\n        int num = 1;\n        //2.定义一个求和变量，用来接收和：\n        int sum = 0;\n        sum += num;\n        num++;\n        sum += num;\n        num++;\n        sum += num;\n        num++;\n        sum += num;\n        num++;\n        sum += num;\n        num++;\n\n        //3.输出和\n        System.out.println(sum);\n    &#125;\n&#125;\n</code></pre>\n<p>上述代码缺点：重复写的代码太多了</p>\n<p>解决：—》引入java中循环结构：</p>\n<pre><code class=\"java\">public class TestWhile&#123;\n    public static void main(String[] args)&#123;\n        //功能：1+2+3+4+5\n        //1.定义变量：\n        int num = 1;**[1]条件初始化**\n            //2.定义一个求和变量，用来接收和：\n            int sum = 0;\n        while(num\\&lt;=5)&#123;**[2]条件判断**\n            sum += num;**[3]循环体**\n                num++;**[4]迭代**\n                      &#125;\n        //3.输出和\n        System.out.println(sum);\n    &#125;\n&#125;\n</code></pre>\n<p>总结：</p>\n<p>【1】循环作用：将部分代码重复执行。</p>\n<p>循环只是提高了程序员编写代码的效率，但是底层执行的时候依然是重复执行。</p>\n<p>【2】循环四要素：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/ca11475c2f0a778cad36886cf66366a1.png\" class=\"\">\n\n\n<p>初始化谁，就判断谁，判断谁，就迭代谁</p>\n<p>执行过程：[1][2][3][4] [2][3][4] [2][3][4]。。。。</p>\n<p>【3】循环的执行过程：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/2ff230667c913bd5e87743476c334561.png\" class=\"\">\n\n\n<p>【4】验证循环的执行过程：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/a5f3022962bd6c9af4a1e9a1e9da5f56.png\" class=\"\">\n\n\n<h3 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h3><p>【1】1+2+3+4+5+。。。。+100</p>\n<p>【2】2+4+6+8+。。。。+998+1000</p>\n<p>【3】5+10+15+20+。。。+100</p>\n<p>【4】99+97+95+。。5+3+1</p>\n<p>【5】1*3*5*7*9*11*13</p>\n<pre><code class=\"java\">public class TestWhile02&#123;\n    public static void main(String[] args)&#123;\n        /\\*\n            【1】1+2+3+4+5+。。。。+100\n            int i = 1;\n        int sum = 0;\n        while(i\\&lt;=100)&#123;\n            sum += i;\n            i++;\n        &#125;\n        System.out.println(sum);\n        【2】2+4+6+8+。。。。+998+1000\n            int i = 2;\n        int sum = 0;\n        while(i\\&lt;=1000)&#123;\n            sum += i;\n            i = i+2;\n        &#125;\n        System.out.println(sum);\n        【3】5+10+15+20+。。。+100\n            int i = 5;\n        int sum = 0;\n        while(i\\&lt;=100)&#123;\n            sum += i;\n            i = i+5;\n        &#125;\n        System.out.println(sum);\n\n        【4】99+97+95+。。5+3+1\n            int i = 99;\n        int sum = 0;\n        while(i\\&gt;=1)&#123;\n            sum += i;\n            i = i-2;\n        &#125;\n        System.out.println(sum);\n        【5】1\\*3\\*5\\*7\\*9\\*11\\*13\n\n            \\*/\n            int i = 1;\n        int result = 1;\n        while(i\\&lt;=13)&#123;\n            result \\*= i;\n            i = i+2;\n        &#125;\n        System.out.println(result);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"do-while\"><a href=\"#do-while\" class=\"headerlink\" title=\"do-while\"></a>do-while</h2><p>【1】语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>do {   循环体;   } while(布尔表达式) ;</th>\n</tr>\n</thead>\n</table>\n<p>do-while循环结构会先执行循环体，然后再判断布尔表达式的值，若条件为真，执行循环体，当条件为假时结束循环。do-while循环的循环体至少执行一次。do-while循环结构流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/0a5138cc1b27bf3150998a807c0084ff.png\" class=\"\">\n\n\n<p>【2】代码：</p>\n<pre><code class=\"java\">public class TestDoWhile&#123;\n    public static void main(String[] args)&#123;\n        //1+2+3+4+...100\n        //while方式:\n        /\\*\n            int i = 101;\n        int sum = 0;\n        while(i\\&lt;=100)&#123;\n            sum += i;\n            i++;\n        &#125;\n        System.out.println(i);//101\n        System.out.println(sum);//0\n        \\*/\n            //do-while方式：\n\n            int i = 101;\n        int sum = 0;\n        do&#123;\n            sum += i;\n            i++;\n        &#125;while(i\\&lt;=100);//一定要注意写这个分号，否则编译出错\n        System.out.println(i);//102\n        System.out.println(sum);//101\n        /\\*\n            【1】while和do-while的区别:\n        while:先判断，再执行\n            do-while:先执行，再判断---》至少被执行一次，从第二次开始才进行判断\n                【2】什么场合使用do-while:\n\n        while(考试是否通过)&#123;\n            考试；\n        &#125;\n        \\---》不合适\n            do&#123;\n                考试；\n            &#125;while(考试是否通过);\n        \\---》合适\n            \\*/\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h2><p>【1】语法结构：</p>\n<table>\n<thead>\n<tr>\n<th>for (初始表达式; 布尔表达式; 迭代因子) {   循环体;  }</th>\n</tr>\n</thead>\n</table>\n<p>for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。for循环在第一次反复之前要进行初始化，即执行初始表达式；随后，对布尔表达式进行判定，若判定结果为true，则执行循环体，否则，终止循环；最后在每一次反复的时候，进行某种形式的“步进”，即执行迭代因子。</p>\n<ol>\n<li>初始化部分设置循环变量的初值</li>\n<li>条件判断部分为任意布尔表达式</li>\n<li>迭代因子控制循环变量的增减</li>\n</ol>\n<p>for循环在执行条件判定后，先执行的循环体部分，再执行步进。</p>\n<p>for循环结构的流程图如图所示：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/e65934410d1164966962fc0ec10b942f.png\" class=\"\">\n\n\n<p>【2】代码：</p>\n<pre><code class=\"java\">public class TestFor01&#123;\n    public static void main(String[] args)&#123;\n        //1+2+3+..+100\n        //while:\n        /\\*int i = 1;\n        int sum = 0;\n        while(i\\&lt;=100)&#123;\n            sum += i;\n            i++;\n        &#125;\n        System.out.println(sum);\n        \\*/\n\n            //for:\n            int sum = 0;\n        int i;\n        for(i = 1;i\\&lt;=100;i++)&#123;\n            sum += i;\n        &#125;\n        System.out.println(sum);\n        System.out.println(i);\n\n        /\\*\n            【1】for的结构：\n            for(条件初始化;条件判断;迭代)&#123;\n                循环体；\n            &#125;\n\n        【2】i的作用域：作用范围：离变量最近&#123;&#125; ---\\&gt;可以自己去控制\n            【3】for循环格式特别灵活：格式虽然很灵活，但是我们自己写代码的时候不建议灵活着写。\n            for(;;)&#123;&#125; --\\&gt;死循环\n\n                int i = 1;\n        for(;i\\&lt;=100;)&#123;\n            sum += i;\n            i++;\n        &#125;\n\n        【4】死循环：\n            for(;;)&#123;&#125;\n\n        while(true)&#123;&#125;\n\n        do&#123;\n\n        &#125;while(true);\n\n        【5】循环分为两大类：\n            第一类：当型 while()&#123;&#125; for(;;)&#123;&#125;\n        第二类：直到型 do&#123;&#125;while();\n\n        【6】以后常用：for循环\n            【7】do-while,while,for循环谁的效率高？ 一样高\n                \\*/\n                &#125;\n&#125;\n</code></pre>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><p>在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，不执行循环中剩余的语句。</p>\n<p>continue 语句用在循环语句体中，用于终止某次循环过程，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。</p>\n<p>return的作用,结束当前所在方法的执行.</p>\n<h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>【1】通过练习感受break的作用：作用：停止循环：</p>\n<pre><code class=\"java\">public class TestFor02&#123;\n    public static void main(String[] args)&#123;\n        //功能：求1-100的和，当和第一次超过300的时候，停止程序\n        int sum = 0;\n        for(int i=1;i\\&lt;=100;i++)&#123;\n            sum += i;\n            if(sum\\&gt;300)&#123;//当和第一次超过300的时候\n                //停止循环\n                break;//停止循环\n            &#125;\n            System.out.println(sum);\n        &#125;\n\n    &#125;\n&#125;\n</code></pre>\n<p>【2】加深理解：</p>\n<pre><code class=\"java\">public class TestFor03&#123;\n    public static void main(String[] args)&#123;\n        //break的作用：停止最近的循环\n        /\\*\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                System.out.println(i);\n                if(i==36)&#123;\n                    break;//1-36\n                &#125;\n            &#125;\n        \\*/\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                System.out.println(i);\n                while(i==36)&#123;\n                    break; //1-100 ---》break停止的是while循环，而不是外面的for循环\n                &#125;\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【3】break带标签的使用：</p>\n<pre><code class=\"java\">public class TestFor04&#123;\n    public static void main(String[] args)&#123;\n        outer: ----》定义标签结束的位置\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                System.out.println(i);\n                while(i==36)&#123;\n                    break outer; ----》根据标签来结束循环\n                &#125;\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>多层循环也可以使用标签，按照自己的需求去设定即可：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/edd6160d15c42695164e614a174da464.png\" class=\"\">\n\n\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p>【1】通过案例感受continue的作用：结束本次循环，继续下一次循环</p>\n<pre><code class=\"java\">public class TestFor05&#123;\n    public static void main(String[] args)&#123;\n        //功能：输出1-100中被6整除的数：\n        //方式1：\n        /\\*\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                if(i%6==0)&#123;//被6整除\n                    System.out.println(i);\n                &#125;\n            &#125;\n        \\*/\n\n            //方式2：\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                if(i%6!=0)&#123;//不被6整除\n                    continue;//停止本次循环，继续下一次循环\n                &#125;\n                System.out.println(i);\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】加深理解：</p>\n<pre><code class=\"java\">public class TestFor06&#123;\n    public static void main(String[] args)&#123;\n        //continue:结束本次离它近的循环，继续下一次循环\n        /\\*\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                if(i==36)&#123;\n                    continue;//1-100中间没有36\n                &#125;\n                System.out.println(i);\n            &#125;\n        \\*/\n\n            for(int i=1;i\\&lt;=100;i++)&#123;\n                while(i==36)&#123;\n                    System.out.println(&quot;------&quot;);\n                    continue; //1-35+死循环\n                &#125;\n                System.out.println(i);\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【3】continue带标签的使用：</p>\n<pre><code class=\"java\">public class TestFor07&#123;\n    public static void main(String[] args)&#123;\n\n        outer:\n        for(int i=1;i\\&lt;=100;i++)&#123;\n            while(i==36)&#123;\n                continue outer; //1-100没有36\n            &#125;\n            System.out.println(i);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/fc2cc84a39aeaca59d8b618b6a71a46c.png\" class=\"\">\n\n\n<h3 id=\"return\"><a href=\"#return\" class=\"headerlink\" title=\"return\"></a>return</h3><p>return的作用：跟循环无关，就是程序中遇到return那么return所在的那个方法就停止执行了：</p>\n<pre><code class=\"java\">public class TestFor08&#123;\n    public static void main(String[] args)&#123;\n        //return:遇到return结束当前正在执行的方法\n        for(int i=1;i\\&lt;=100;i++)&#123;\n            while(i==36)&#123;\n                return;\n            &#125;\n            System.out.println(i);\n        &#125;\n\n        System.out.println(&quot;-----&quot;);\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"循环练习\"><a href=\"#循环练习\" class=\"headerlink\" title=\"循环练习\"></a>循环练习</h2><p>【1】练习1：</p>\n<pre><code class=\"java\">public class TestFor09&#123;\n    public static void main(String[] args)&#123;\n        /\\* 输出1-100中被5整除的数,每行输出6个\\*/\n            //引入一个计数器：\n            int count = 0;//初始值为0\n        for(int i=1;i\\&lt;=100;i++)&#123;\n            if(i%5==0)&#123;//被5整除的数\n                System.out.print(i+&quot;\\\\t&quot;);\n                count++;//每在控制台输出一个数，count就加1操作\n                if(count%6==0)&#123;\n                    System.out.println();//换行\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】练习2：</p>\n<pre><code class=\"java\">import java.util.Scanner;\npublic class TestFor10&#123;\n    public static void main(String[] args)&#123;\n        /\\*\n            实现一个功能：\n            【1】请录入10个整数，当输入的数是666的时候，退出程序。\n            【2】判断其中录入正数的个数并输出。\n            【3】判断系统的退出状态：是正常退出还是被迫退出。\n            \\*/\n            //引入一个计数器：\n            int count = 0;\n        //引入一个布尔类型的变量：\n        boolean flag = true; //---》理解为一个“开关”，默认情况下开关是开着的\n        Scanner sc = new Scanner(System.in);\n        for(int i=1;i\\&lt;=10;i++)&#123;//i:循环次数\n            System.out.println(&quot;请录入第&quot;+i+&quot;个数：&quot;);\n            int num = sc.nextInt();\n            if(num\\&gt;0)&#123;//录入的正数\n                count++;\n            &#125;\n            if(num==666)&#123;\n                flag = false;//当遇到666的时候，“开关”被关上了\n                //退出循环：\n                break;\n            &#125;\n\n        &#125;\n\n        System.out.println(&quot;你录入的正数的个数为：&quot;+count);\n\n\n        if(flag)&#123;//flag==true\n            System.out.println(&quot;正常退出！&quot;);\n        &#125;else&#123;//flag==false\n            System.out.println(&quot;被迫退出！&quot;);\n        &#125;\n\n\n\n    &#125;\n&#125;\n</code></pre>\n<h2 id=\"循环的嵌套使用\"><a href=\"#循环的嵌套使用\" class=\"headerlink\" title=\"循环的嵌套使用\"></a>循环的嵌套使用</h2><h3 id=\"双重循环\"><a href=\"#双重循环\" class=\"headerlink\" title=\"双重循环\"></a>双重循环</h3><p>乘法口诀</p>\n<p>乘法口诀：</p>\n<p>1*1&#x3D;1</p>\n<p>1*2&#x3D;2 2*2&#x3D;4</p>\n<p>1*3&#x3D;3 2*3&#x3D;6 3*3&#x3D;9</p>\n<p>1*4&#x3D;4 2*4&#x3D;8 3*4&#x3D;12 4*4&#x3D;16</p>\n<p>1*5&#x3D;5 2*5&#x3D;10 3*5&#x3D;15 4*5&#x3D;20 5*5&#x3D;25</p>\n<p>1*6&#x3D;6 2*6&#x3D;12 3*6&#x3D;18 4*6&#x3D;24 5*6&#x3D;30 6*6&#x3D;36</p>\n<p>1*7&#x3D;7 2*7&#x3D;14 3*7&#x3D;21 4*7&#x3D;28 5*7&#x3D;35 6*7&#x3D;42 7*7&#x3D;49</p>\n<p>1*8&#x3D;8 2*8&#x3D;16 3*8&#x3D;24 4*8&#x3D;32 5*8&#x3D;40 6*8&#x3D;48 7*8&#x3D;56 8*8&#x3D;64</p>\n<p>1*9&#x3D;9 2*9&#x3D;18 3*9&#x3D;27 4*9&#x3D;36 5*9&#x3D;45 6*9&#x3D;54 7*9&#x3D;63 8*9&#x3D;72 9*9&#x3D;81</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestFor11&#123;\n    public static void main(String[] args)&#123;\n        //1\\*6=6 2\\*6=12 3\\*6=18 4\\*6=24 5\\*6=30 6\\*6=36\n        /\\*\n            System.out.print(&quot;1\\*6=6&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;2\\*6=12&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;3\\*6=18&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;4\\*6=24&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;5\\*6=30&quot;+&quot;\\\\t&quot;);\n        System.out.print(&quot;6\\*6=36&quot;+&quot;\\\\t&quot;);\n\n        for(int i=1;i\\&lt;=6;i++)&#123;\n            System.out.print(i+&quot;\\*6=&quot;+i\\*6+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n\n        //1\\*7=7 2\\*7=14 3\\*7=21 4\\*7=28 5\\*7=35 6\\*7=42 7\\*7=49\n        for(int i=1;i\\&lt;=7;i++)&#123;\n            System.out.print(i+&quot;\\*7=&quot;+i\\*7+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n\n        //1\\*8=8 2\\*8=16 3\\*8=24 4\\*8=32 5\\*8=40 6\\*8=48 7\\*8=56 8\\*8=64\n        for(int i=1;i\\&lt;=8;i++)&#123;\n            System.out.print(i+&quot;\\*8=&quot;+i\\*8+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n        \\*/\n\n            for(int j=1;j\\&lt;=9;j++)&#123;\n                for(int i=1;i\\&lt;=j;i++)&#123;\n                    System.out.print(i+&quot;\\*&quot;+j+&quot;=&quot;+i\\*j+&quot;\\\\t&quot;);\n                &#125;\n                //换行\n                System.out.println();\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>1*9&#x3D;9 2*9&#x3D;18 3*9&#x3D;27 4*9&#x3D;36 5*9&#x3D;45 6*9&#x3D;54 7*9&#x3D;63 8*9&#x3D;72 9*9&#x3D;81</p>\n<p>1*8&#x3D;8 2*8&#x3D;16 3*8&#x3D;24 4*8&#x3D;32 5*8&#x3D;40 6*8&#x3D;48 7*8&#x3D;56 8*8&#x3D;64</p>\n<p>1*7&#x3D;7 2*7&#x3D;14 3*7&#x3D;21 4*7&#x3D;28 5*7&#x3D;35 6*7&#x3D;42 7*7&#x3D;49</p>\n<p>1*6&#x3D;6 2*6&#x3D;12 3*6&#x3D;18 4*6&#x3D;24 5*6&#x3D;30 6*6&#x3D;36</p>\n<p>1*5&#x3D;5 2*5&#x3D;10 3*5&#x3D;15 4*5&#x3D;20 5*5&#x3D;25</p>\n<p>1*4&#x3D;4 2*4&#x3D;8 3*4&#x3D;12 4*4&#x3D;16</p>\n<p>1*3&#x3D;3 2*3&#x3D;6 3*3&#x3D;9</p>\n<p>1*2&#x3D;2 2*2&#x3D;4</p>\n<p>1*1&#x3D;1</p>\n<p>代码：</p>\n<pre><code class=\"java\">public class TestFor12&#123;\n    public static void main(String[] args)&#123;\n\n        /\\*\n            //1\\*8=8 2\\*8=16 3\\*8=24 4\\*8=32 5\\*8=40 6\\*8=48 7\\*8=56 8\\*8=64\n            for(int i=1;i\\&lt;=8;i++)&#123;\n                System.out.print(i+&quot;\\*8=&quot;+i\\*8+&quot;\\\\t&quot;);\n            &#125;\n        //换行\n        System.out.println();\n\n\n        //1\\*7=7 2\\*7=14 3\\*7=21 4\\*7=28 5\\*7=35 6\\*7=42 7\\*7=49\n        for(int i=1;i\\&lt;=7;i++)&#123;\n            System.out.print(i+&quot;\\*7=&quot;+i\\*7+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n\n        //1\\*6=6 2\\*6=12 3\\*6=18 4\\*6=24 5\\*6=30 6\\*6=36\n        for(int i=1;i\\&lt;=6;i++)&#123;\n            System.out.print(i+&quot;\\*6=&quot;+i\\*6+&quot;\\\\t&quot;);\n        &#125;\n        //换行\n        System.out.println();\n\n\n\n\n        \\*/\n\n            for(int j=9;j\\&gt;=1;j--)&#123;\n                for(int i=1;i\\&lt;=j;i++)&#123;\n                    System.out.print(i+&quot;\\*&quot;+j+&quot;=&quot;+i\\*j+&quot;\\\\t&quot;);\n                &#125;\n                //换行\n                System.out.println();\n            &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>打印各种形状</p>\n<p>【1】长方形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/34a4f4344ea5d5ffd88f932d98827359.png\" class=\"\">\n\n\n<pre><code class=\"java\">for(int j=1;j\\&lt;=4;j++)&#123;//j:控制行数\n    //\\*\\*\\*\\*\\*\\*\\*\\*\\*\n    for(int i=1;i\\&lt;=9;i++)&#123;//i:控制\\*的个数\n        System.out.print(&quot;\\*&quot;);\n    &#125;\n    //换行：\n    System.out.println();\n&#125;\n</code></pre>\n<p>【2】距离前面有一定空隙的长方形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/53f97abfc48cab59034a76006c1c1c71.png\" class=\"\">\n\n\n<ol>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;5;i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;9;i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>【3】平行四边形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/67d40798af8ec1921f09d49c09d0137c.png\" class=\"\">\n\n\n<ol>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(9-j);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;9;i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>【4】三角形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/49555021efb328437055bea6119ae9f2.png\" class=\"\">\n\n\n<ol>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(9-j);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(2*j-1);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>【5】菱形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/d798118edc1454a1bb0e83bb70d60758.png\" class=\"\">\n\n\n<ol>\n<li>&#x2F;&#x2F;上面三角形：</li>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(9-j);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(2*j-1);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n<li></li>\n<li>&#x2F;&#x2F;下面三角形：</li>\n<li>for(int j&#x3D;1;j&lt;&#x3D;3;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(j+5);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(7-2*j);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>System.out.print(“*“);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>【6】空心菱形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/7df2cd3380e772f02c2dcbcc4d6a3438.png\" class=\"\">\n\n\n<ol>\n<li>&#x2F;&#x2F;上面三角形：</li>\n<li>for(int j&#x3D;1;j&lt;&#x3D;4;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(9-j);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(2*j-1);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>if(i&#x3D;&#x3D;1||i&#x3D;&#x3D;(2*j-1)){</li>\n<li>System.out.print(“*“);</li>\n<li>}else{</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n<li></li>\n<li>&#x2F;&#x2F;下面三角形：</li>\n<li>for(int j&#x3D;1;j&lt;&#x3D;3;j++){&#x2F;&#x2F;j:控制行数</li>\n<li>&#x2F;&#x2F;加入空格：</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(j+5);i++){&#x2F;&#x2F;i:控制空格的个数</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>&#x2F;&#x2F;*********</li>\n<li>for(int i&#x3D;1;i&lt;&#x3D;(7-2*j);i++){&#x2F;&#x2F;i:控制*的个数</li>\n<li>if(i&#x3D;&#x3D;1||i&#x3D;&#x3D;(7-2*j)){</li>\n<li>System.out.print(“*“);</li>\n<li>}else{</li>\n<li>System.out.print(“ “);</li>\n<li>}</li>\n<li>}</li>\n<li>&#x2F;&#x2F;换行：</li>\n<li>System.out.println();</li>\n<li>}</li>\n</ol>\n<p>扩展：菱形打印方式2</p>\n<p>【1】实心菱形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/745dd4be231e5197141fa4721b372fa9.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class TestFor14&#123;\n    public static void main(String[] args)&#123;\n        //先打印出一个正方形，然后某些位置上打印\\* 某些位置上打印空格：\n        int size = 17;\n        int startNum = size/2+1;//起始列号\n        int endNum = size/2+1;//结束列号\n        //引入一个布尔类型的变量---》理解为“开关”\n        boolean flag = true;\n        for(int j=1;j\\&lt;=size;j++)&#123;\n            //\\*\\*\\*\\*\\*\n            for(int i=1;i\\&lt;=size;i++)&#123;\n                if(i\\&gt;=startNum&amp;&amp;i\\&lt;=endNum)&#123;\n                    System.out.print(&quot;\\*&quot;);\n                &#125;else&#123;\n                    System.out.print(&quot; &quot;);\n                &#125;\n            &#125;\n            //换行\n            System.out.println();\n            if(endNum==size)&#123;\n                flag = false;\n            &#125;\n\n            if(flag)&#123;//flag是true相当于在菱形的上半侧 flag是false相当于在菱形的下半侧\n                startNum--;\n                endNum++;\n            &#125;else&#123;\n                startNum++;\n                endNum--;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】空心菱形：</p>\n<img data-src=\"/2022/10/07/Java/%E7%AC%AC4%E7%AB%A0_%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/8938fc30a4da55ff90c902646c105355.png\" class=\"\">\n\n\n<pre><code class=\"java\">public class TestFor14&#123;\n    public static void main(String[] args)&#123;\n        //先打印出一个正方形，然后某些位置上打印\\* 某些位置上打印空格：\n        int size = 17;\n        int startNum = size/2+1;//起始列号\n        int endNum = size/2+1;//结束列号\n        //引入一个布尔类型的变量---》理解为“开关”\n        boolean flag = true;\n        for(int j=1;j\\&lt;=size;j++)&#123;\n            //\\*\\*\\*\\*\\*\n            for(int i=1;i\\&lt;=size;i++)&#123;\n                if(i==startNum\\|\\|i==endNum)&#123;\n                    System.out.print(&quot;\\*&quot;);\n                &#125;else&#123;\n                    System.out.print(&quot; &quot;);\n                &#125;\n            &#125;\n            //换行\n            System.out.println();\n            if(endNum==size)&#123;\n                flag = false;\n            &#125;\n\n            if(flag)&#123;//flag是true相当于在菱形的上半侧 flag是false相当于在菱形的下半侧\n                startNum--;\n                endNum++;\n            &#125;else&#123;\n                startNum++;\n                endNum--;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"三重循环\"><a href=\"#三重循环\" class=\"headerlink\" title=\"三重循环\"></a>三重循环</h3><p>百钱买百鸡</p>\n<p>【1】二重循环可以帮我们解决：二元一次方程组的问题：</p>\n<pre><code class=\"java\">public   class   TestFor15 &#123;\n    public   static   void   main (String[] args)&#123;\n        for ( int  a=1;a\\&lt;=5;a++)&#123;\n            for ( int  b=3;b\\&lt;=6;b++)&#123;\n                if (a+b==7)&#123;\n                    System. out .println(a+&quot;----&quot;+b);\n                &#125;\n            &#125;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>【2】三重循环可以帮我们解决：三元一次方程组的问题：</p>\n\n<div id=\"gitalk-container\"></div>\n<script src=\"https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js\"></script><link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"><script src=\"https://unpkg.com/gitalk/dist/gitalk.min.js\"></script>\n\n\t\t<script>\n\t\tvar gitalkConfig = {\"clientID\":\"eda74f740080fa01d0b5\",\"clientSecret\":\"c994dd2162a1dadaefbf078fcab49361438a7aca\",\"repo\":\"comments001\",\"owner\":\"onlymarryu\",\"admin\":[\"onlymarryu\"],\"distractionFreeMode\":true,\"proxy\":\"https://winter-rain-5b30.wudu-bk.workers.dev\"};\n\t    gitalkConfig.id = md5(location.pathname);\n\t\tvar gitalk = new Gitalk(gitalkConfig);\n\t    gitalk.render(\"gitalk-container\");\n\t    </script>",
            "tags": [
                "-JavaSE"
            ]
        }
    ]
}