<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>记录“美食”每刻 • Posts by &#34;框架&#34; tag</title>
        <link>http://example.com</link>
        <description>记录“美食”每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
        <lastBuildDate>Fri, 07 Oct 2022 00:00:00 +0800</lastBuildDate>
        <category>分布式</category>
        <category>Dubbo</category>
        <category>FastDFS</category>
        <category>RPC</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>JavaSE</category>
        <category>-JavaSE</category>
        <category>框架</category>
        <category>ORM</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>SpringMVC</category>
        <category>博客</category>
        <category>环境搭建</category>
        <category>SpringSecurity</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/ORM/MybatisPlus/</guid>
            <title>MybatisPlus</title>
            <link>http://example.com/2022/10/07/ORM/MybatisPlus/</link>
            <category>框架</category>
            <category>ORM</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cw==&#34;&gt;MyBatis-Plus (opens new window)&lt;/span&gt;（简称 MP）是一个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubXliYXRpcy5vcmcvbXliYXRpcy0zLw==&#34;&gt;MyBatis (opens new window)&lt;/span&gt;的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;愿景&lt;/p&gt;
&lt;p&gt;我们的愿景是成为 MyBatis 最好的搭档，就像 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vaW1nL2NvbnRyYS5qcGc=&#34;&gt;魂斗罗&lt;/span&gt; 中的 1P、2P，基友搭配，效率翻倍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;特性&#34;&gt;&lt;a href=&#34;#特性&#34; class=&#34;headerlink&#34; title=&#34;特性&#34;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无侵入&lt;/strong&gt;：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;损耗小&lt;/strong&gt;：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强大的 CRUD 操作&lt;/strong&gt;：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 Lambda 形式调用&lt;/strong&gt;：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持主键自动生成&lt;/strong&gt;：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持 ActiveRecord 模式&lt;/strong&gt;：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;支持自定义全局通用操作&lt;/strong&gt;：支持全局通用方法注入（ Write once, use anywhere ）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置代码生成器&lt;/strong&gt;：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置分页插件&lt;/strong&gt;：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分页插件支持多种数据库&lt;/strong&gt;：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置性能分析插件&lt;/strong&gt;：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内置全局拦截插件&lt;/strong&gt;：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;支持数据库&#34;&gt;&lt;a href=&#34;#支持数据库&#34; class=&#34;headerlink&#34; title=&#34;支持数据库&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlOTQlQUYlRTYlOEMlODElRTYlOTUlQjAlRTYlOEQlQUUlRTUlQkElOTM=&#34;&gt;&lt;/span&gt;支持数据库&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;任何能使用 &lt;code&gt;MyBatis&lt;/code&gt; 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb&lt;/li&gt;
&lt;li&gt;达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;框架结构&#34;&gt;&lt;a href=&#34;#框架结构&#34; class=&#34;headerlink&#34; title=&#34;框架结构&#34;&gt;&lt;/a&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYW9taWRvdS5jb20vcGFnZXMvMjQxMTJmLyMlRTYlQTElODYlRTYlOUUlQjYlRTclQkIlOTMlRTYlOUUlODQ=&#34;&gt;&lt;/span&gt;框架结构&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/ORM/MybatisPlus/mybatis-plus-framework.jpg&#34; class=&#34;&#34; title=&#34;framework&#34;&gt;



&lt;h1 id=&#34;快速使用&#34;&gt;&lt;a href=&#34;#快速使用&#34; class=&#34;headerlink&#34; title=&#34;快速使用&#34;&gt;&lt;/a&gt;快速使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;使用的mybatis 3.5之前版本，也就是官方的旧版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;初始化工程&#34;&gt;&lt;a href=&#34;#初始化工程&#34; class=&#34;headerlink&#34; title=&#34;初始化工程&#34;&gt;&lt;/a&gt;初始化工程&lt;/h2&gt;&lt;p&gt;创建一个空的 Spring Boot 工程（工程将以 H2 作为默认数据库进行演示）&lt;/p&gt;
&lt;p&gt;提示&lt;/p&gt;
&lt;p&gt;可以使用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v&#34;&gt;Spring Initializer (opens new window)&lt;/span&gt;快速初始化一个 Spring Boot 工程&lt;/p&gt;
&lt;h2 id=&#34;pom-添加依赖&#34;&gt;&lt;a href=&#34;#pom-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;pom 添加依赖&#34;&gt;&lt;/a&gt;&lt;code&gt;pom&lt;/code&gt; 添加依赖&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;        &amp;lt;!--模板引擎,也可使用freemarker--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.velocity&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;velocity-engine-core&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!--代码生成器 --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-generator&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!--内嵌mybatis，不需要在添加--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.1&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;


        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.1.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.1.10&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.junit.vintage&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;junit-vintage-engine&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;逆向工程&#34;&gt;&lt;a href=&#34;#逆向工程&#34; class=&#34;headerlink&#34; title=&#34;逆向工程&#34;&gt;&lt;/a&gt;逆向工程&lt;/h2&gt;&lt;p&gt;测试用例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.baomidou.mybatisplus.core.toolkit.StringPool;
import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.InjectionConfig;
import com.baomidou.mybatisplus.generator.config.*;
import com.baomidou.mybatisplus.generator.config.po.TableInfo;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;


public class Generator &amp;#123;

    public static void main(String[] args) &amp;#123;
        //0自动生成
        AutoGenerator autoGenerator = new AutoGenerator();

        //1 数据源配置
        DataSourceConfig datasource = new DataSourceConfig();
        datasource.setUrl(&amp;quot;jdbc:mysql://127.0.0.1:3306/xhshixun?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai&amp;quot;);
        // dsc.setSchemaName(&amp;quot;public&amp;quot;);
        datasource.setDriverName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;);
        datasource.setUsername(&amp;quot;root&amp;quot;);
        datasource.setPassword(&amp;quot;root&amp;quot;);

        autoGenerator.setDataSource(datasource);

        // 2全局配置
        GlobalConfig gc = new GlobalConfig();
        /**
         * System.getProperty(key)
         * getProperty()这个方法是获取指定键指示的系统属性的。
         * 如果key不是系统属性本来系统自带的，需要用户自己设定采用。如果不设定，则为null
         */
        String projectPath = System.getProperty(&amp;quot;user.dir&amp;quot;);
        //与其等同  ||
        // String projectPath = &amp;quot;E:\\code\\java\\test&amp;quot;;

        //生成在那个目录下
        gc.setOutputDir(projectPath + &amp;quot;/src/main/java&amp;quot;);
        gc.setOpen(false);//生成之后打开目录？是在资源管理器中打开的
        gc.setAuthor(&amp;quot;zjj&amp;quot;);//作者
        gc.setFileOverride(true);//是否覆盖原来文件
        //gc.setMapperName(&amp;quot;%sDao&amp;quot;);//设置数据层接口名，%s指代模块名,默认是*Mapper
        gc.setMapperName(&amp;quot;%sMapper&amp;quot;);
        // ,,,其余自行探索
//        gc.setSwagger2(true);// 实体属性 Swagger2 注解
        autoGenerator.setGlobalConfig(gc);

        //3 包配置
        PackageConfig pc = new PackageConfig();
        //pc.setModuleName(null); //模块名
        pc.setParent(&amp;quot;com.aaa&amp;quot;);
        pc.setEntity(&amp;quot;pojo&amp;quot;);   //设置实体类包名
        pc.setMapper(&amp;quot;mapper&amp;quot;); //设置mapper层包名
        //,,,其余自行探索
        autoGenerator.setPackageInfo(pc);

        //4自定义配置
        // 如果模板引擎是 freemarker
        //String templatePath = &amp;quot;/templates/mapper.xml.ftl&amp;quot;;
        // 如果模板引擎是 velocity
        //String templatePath = &amp;quot;/templates/mapper.xml.vm&amp;quot;;
        String templatePath = &amp;quot;/templates/service.java.vm&amp;quot;;



        // 4自定义配置
        InjectionConfig cfg = new InjectionConfig() &amp;#123;
            @Override
            public void initMap() &amp;#123;
                // to do nothing
            &amp;#125;
        &amp;#125;;
        // 自定义输出配置
        List&amp;lt;FileOutConfig&amp;gt; focList = new ArrayList&amp;lt;&amp;gt;();
        // 自定义配置会被优先输出
        focList.add(new FileOutConfig(templatePath) &amp;#123;
            @Override
            public String outputFile(TableInfo tableInfo) &amp;#123;
                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！
                return projectPath + &amp;quot;/src/main/resources/mapper/&amp;quot; + pc.getModuleName()
                        + &amp;quot;/&amp;quot; + tableInfo.getEntityName() + &amp;quot;Mapper&amp;quot; + StringPool.DOT_XML;
            &amp;#125;
        &amp;#125;);
        cfg.setFileOutConfigList(focList);
        autoGenerator.setCfg(cfg);

        // 5配置模板
        TemplateConfig templateConfig = new TemplateConfig();

        // 配置自定义输出模板
        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别
        // templateConfig.setEntity(&amp;quot;templates/entity2.java&amp;quot;);
        // templateConfig.setService();
        // templateConfig.setController();

        templateConfig.setXml(null);
        autoGenerator.setTemplate(templateConfig);

        //提交配置
        autoGenerator.setPackageInfo(pc);


        //6策略设置
        StrategyConfig strategyConfig = new StrategyConfig();

        //strategyConfig.setInclude(&amp;quot;tbl_user&amp;quot;);//设置当前参与生成的表名，参数为可变参数
        strategyConfig.setTablePrefix(&amp;quot;tbl_&amp;quot;);//设置数据库表的前缀，模块名=数振库表名+前缀名

//        strategyConfig.setRestControllerStyle(true);//设置是否启用Rest风格
//        strategyConfig.setVersionFieldName(&amp;quot;version&amp;quot;);//设置乐观锁宁段名
//        strategyConfig.setLogicDelet  eFieldName(&amp;quot;deleted&amp;quot;);//设置逻辑删除字段将
//        strategyConfig.setEntityLombokModel(true);//设置是否启用Lombok
//        strategyConfig.setControllerMappingHyphenStyle(true); //url中驼峰转连字符

        autoGenerator.setStrategy(strategyConfig);

        //执行生成操作
        autoGenerator.execute();
    &amp;#125;

    @Test
    public void test()&amp;#123;
        //获取所有的属性
        Properties properties = System.getProperties();
        //为了看看系统的属性有几个，加了一个计数器
        int count = 0;
        //遍历所有的属性
        for (String key : properties.stringPropertyNames()) &amp;#123;
            System.out.println(key + &amp;quot;=&amp;quot; + properties.getProperty(key));
            count++;
            if (key.equalsIgnoreCase(&amp;quot;jdbc.drivers&amp;quot;))&amp;#123;
                System.out.println(&amp;quot;YES&amp;quot;);
                return ;
            &amp;#125;

        &amp;#125;
        System.out.println(count);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/ORM/Mybatis/</guid>
            <title>Mybatis</title>
            <link>http://example.com/2022/10/07/ORM/Mybatis/</link>
            <category>框架</category>
            <category>ORM</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-Mybatis入门&#34;&gt;&lt;a href=&#34;#1-Mybatis入门&#34; class=&#34;headerlink&#34; title=&#34;1 Mybatis入门&#34;&gt;&lt;/a&gt;1 Mybatis入门&lt;/h1&gt;&lt;p&gt;原生JDBC实现CURD的问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 编码繁琐&lt;br&gt;2 需要我们自己将结果集映射成对象&lt;br&gt;3 性能不太好  连接池 缓存&lt;br&gt;4 SQL语句和java代码的耦合度特别高&lt;br&gt;5 … …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MyBatis 本是Apache的一个开源项目iBatis, 2010年这个项目由Apache Software Foundation 迁移到了Google Code，且改名为MyBatis 。2013年11月迁移到GitHub。iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。&lt;br&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617191731748.png&#34; class=&#34;&#34; title=&#34;image-20220617191731748&#34;&gt;





&lt;h2 id=&#34;1-认识框架&#34;&gt;&lt;a href=&#34;#1-认识框架&#34; class=&#34;headerlink&#34; title=&#34;1 认识框架&#34;&gt;&lt;/a&gt;1 认识框架&lt;/h2&gt;&lt;p&gt;框架（Framework）是一个框子——指其约束性，也是一个架子——指其支撑性。是一个基本概念上的结构，用于去解决或者处理复杂的问题。框架这个广泛的定义使用的十分流行，尤其在软件概念。&lt;br&gt;框架( Framework )对于java来说,就是一系列为了解决特定问题而定义的一系列接口和实现类,在组织框架代码时,使用了一系列优秀的设计模式,使代码无论在性能上还是API操作上得到很大提升.框架可以看做是项目开发的半成品,基本的底层操作已经封装完毕,通过框架,程序员可以从底层代码中解脱出来,专注于业务逻辑的完成和性能的优化。框架规定了你的应用的体系结构。它定义了整体结构，类和对象的分割，各部分的主要责任，类和对象怎么协作，以及控制流程。框架预定义了这些设计参数，以便于应用设计者或实现者能集中精力于应用本身的特定细节。&lt;/p&gt;
&lt;p&gt;如果将开发完成的软件比作是一套已经装修完毕的新房，那框架就好比是一套已经修建好的毛坯房。用户直接购买毛坯房，建筑质量和户型合理有保证，还省去了自己建造房屋的时间，一举多得。&lt;br&gt;在开发过程是使用框架，同样可以保证减少开发时间、降低开发难度，并且还保证设计质量。好比和世界上最优秀的软件工程师是一个项目的，并且他们完成的还是基础、全局的工作。想想是不是很嗨的一件事情。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617191818381.png&#34; class=&#34;&#34; title=&#34;image-20220617191818381&#34;&gt;





&lt;p&gt;框架还有一个作用是约束。莎士比亚说,”一千个观众眼中有一千个哈姆雷特” 即仁者见仁,智者见智.说每个人都会对作品有不同的理解，每个人对待任何事物都有自己的看法，一千个人就有可能有一千种不同的看法1000人心中有1000个哈姆雷特。同样的技术解决同样的问题会产生不同流程和风格的解决方案，而采用一种框架其实就是限制用户必须使用其规定的方案来实现，&lt;strong&gt;可以降低程序员之间沟通以及日后维护的成本。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;常用的基于JavaEE的三大开源框架，已经从SSH、SSH2过渡到了SSM：SpringMVC、Spring、MyBatis &amp;gt;&amp;gt;&amp;gt; springBoot&lt;/p&gt;
&lt;p&gt;&lt;font face=&#34;微软雅黑&#34; size=6 color=#FF0000&gt;总之，框架是一个半成品，已经对基础的代码进行了封装并提供相应的API，开发者在使用框架是直接调用封装好的API可以省去很多代码编写，从而提高工作效率和开发速度。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-认识ORM&#34;&gt;&lt;a href=&#34;#2-认识ORM&#34; class=&#34;headerlink&#34; title=&#34;2 认识ORM&#34;&gt;&lt;/a&gt;2 认识ORM&lt;/h2&gt;&lt;p&gt;DBC的缺点：&lt;/p&gt;
&lt;p&gt;需要手动的完成面向对象的Java语言、面向关系的数据库之间数据的转换，代码繁琐无技术含量，影响了开发效率。&lt;/p&gt;
&lt;p&gt;如图所示，查询是需要手动的将结果集的列数据转换为Java对象的属性；而添加操作时需要手动将Java对象的属性转换为数据库表的列字段。&lt;/p&gt;
&lt;p&gt;关于面向对象的Java语言、面向关系的数据库之间数据的转换必须要做，问题在于这个转换是否可以不由开发者来做。可以的。ORM框架就是专门来做这个问题的，相当于在面向对象语言和关系数据库之间搭建一个桥梁。&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;ORM，Object-Relationl Mapping，对象关系映射，它的作用是在关系型数据库和对象之间作一个映射，这样我们在具体的操作数据库的时候，只要像平时操作对象一样操作它就可以了，ORM框架会根据映射完成对数据库的操作，就不需要再去和复杂的SQL语句打交道了&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192304044.png&#34; class=&#34;&#34; title=&#34;image-20220617192304044&#34;&gt;


&lt;p&gt;另外学习ORM必须知道两个概念：持久化、持久层&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是“持久化”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持久（Persistence），&lt;font color=#FF0000&gt;即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）&lt;/font&gt;。持久化的主要应用是将内存中的数据存储在关系型的数据库中，当然也可以存储在磁盘文件中、XML数据文件中等等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是 “持久层”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;持久层（Persistence Layer），即专注于实现数据持久化应用领域的某个特定系统的一个逻辑层面，将数据使用者和数据实体相关联。之前使用JDBC访问数据库的DAO层，后面采用MyBatis访问数据库的mapper层，就是持久层。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mybatis是一持久层的款半自动的ORM映射框架&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-认识MyBatis&#34;&gt;&lt;a href=&#34;#3-认识MyBatis&#34; class=&#34;headerlink&#34; title=&#34;3 认识MyBatis&#34;&gt;&lt;/a&gt;3 认识MyBatis&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatis 本是Apache的一个开源项目iBatis, 2010年这个项目由Apache Software Foundation 迁移到了Google Code，且改名为MyBatis 。2013年11月迁移到GitHub。iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Ordinary Java Object,普通的 Java对象)映射成数据库中的记录。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192446302.png&#34; class=&#34;&#34; title=&#34;image-20220617192446302&#34;&gt;

&lt;p&gt;精简解释：MyBatis是一个半自动ORM框架，其本质是对JDBC的封装。使用MyBatis重点需要程序员编写SQL命令，不需要写一行JDBC代码&lt;/p&gt;
&lt;h1 id=&#34;2-MyBatis初次使用&#34;&gt;&lt;a href=&#34;#2-MyBatis初次使用&#34; class=&#34;headerlink&#34; title=&#34;2 MyBatis初次使用&#34;&gt;&lt;/a&gt;2 MyBatis初次使用&lt;/h1&gt;&lt;h2 id=&#34;1-创建maven项目导入相关依赖&#34;&gt;&lt;a href=&#34;#1-创建maven项目导入相关依赖&#34; class=&#34;headerlink&#34; title=&#34;1 创建maven项目导入相关依赖&#34;&gt;&lt;/a&gt;1 创建maven项目导入相关依赖&lt;/h2&gt;&lt;p&gt;但凡是框架,使用都是分三步走&lt;/p&gt;
&lt;p&gt;1导入jar文件,maven&lt;/p&gt;
&lt;p&gt;2处理配置文件&lt;/p&gt;
&lt;p&gt;3开发业务代码&lt;/p&gt;
&lt;p&gt;先创建一个空项目,用于存放后面Mybatis相关项目模块&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192550409.png&#34; class=&#34;&#34; title=&#34;image-20220617192550409&#34;&gt;


&lt;p&gt;项目名为mybatisAll即可&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192555641.png&#34; class=&#34;&#34; title=&#34;image-20220617192555641&#34;&gt;




&lt;p&gt;这里不显示项目名 没关系,如果想看到项目名,可以close项目后,再次open即可&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192604832.png&#34; class=&#34;&#34; title=&#34;image-20220617192604832&#34;&gt;




&lt;p&gt;关闭项目&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192611548.png&#34; class=&#34;&#34; title=&#34;image-20220617192611548&#34;&gt;


&lt;p&gt;再次open&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192630884.png&#34; class=&#34;&#34; title=&#34;image-20220617192630884&#34;&gt;






&lt;p&gt;项目名就显示了&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192636190.png&#34; class=&#34;&#34; title=&#34;image-20220617192636190&#34;&gt;


&lt;p&gt;接下来设置maven为我们自己安装的,不用idea自带的(当然用自带的也行)&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192641520.png&#34; class=&#34;&#34; title=&#34;image-20220617192641520&#34;&gt;



&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192647200.png&#34; class=&#34;&#34; title=&#34;image-20220617192647200&#34;&gt;


&lt;p&gt;在当前项目中创建模块&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192652567.png&#34; class=&#34;&#34; title=&#34;image-20220617192652567&#34;&gt;


&lt;p&gt;选择maven项目 next&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192703265.png&#34; class=&#34;&#34; title=&#34;image-20220617192703265&#34;&gt;






&lt;p&gt;输入groupid和aitifactid  然后finish&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192713221.png&#34; class=&#34;&#34; title=&#34;image-20220617192713221&#34;&gt;


&lt;p&gt;检查项目目前在磁盘上的存放路径 然后next&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192719403.png&#34; class=&#34;&#34; title=&#34;image-20220617192719403&#34;&gt;




&lt;p&gt;检查项目目录结构是否有缺失&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192723928.png&#34; class=&#34;&#34; title=&#34;image-20220617192723928&#34;&gt;


&lt;p&gt;MyBatis官网说明文档   &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvaW5kZXguaHRtbA==&#34;&gt;https://mybatis.org/mybatis-3/zh/index.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;在pom.xml中导入MyBatis相关依赖jar文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot;
         xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt;
    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
    &amp;lt;groupId&amp;gt;com.msb&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatisTest01&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;
    &amp;lt;dependencies&amp;gt;
        &amp;lt;!--mysqlConnector--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;8.0.16&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--mybatis 核心jar包--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.5.3&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--junit--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;4.13.1&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--lombok --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.18.12&amp;lt;/version&amp;gt;
            &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装lombok插件后,重启idea&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192808470.png&#34; class=&#34;&#34; title=&#34;image-20220617192808470&#34;&gt;




&lt;p&gt;导入lombok依赖后,单独设置启用注解处理&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192814365.png&#34; class=&#34;&#34; title=&#34;image-20220617192814365&#34;&gt;



&lt;h2 id=&#34;2-准备数据库-包结构和实体类&#34;&gt;&lt;a href=&#34;#2-准备数据库-包结构和实体类&#34; class=&#34;headerlink&#34; title=&#34;2  准备数据库_包结构和实体类&#34;&gt;&lt;/a&gt;2  准备数据库_包结构和实体类&lt;/h2&gt;&lt;p&gt;数据库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../spring/img/image-20220617192857161.png&#34; alt=&#34;image-20220617192857161&#34;&gt;&lt;/p&gt;
&lt;p&gt;项目结构&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617192901785.png&#34; class=&#34;&#34; title=&#34;image-20220617192901785&#34;&gt;

&lt;p&gt; 实体类Dept&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; package com.msb.pojo;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.io.Serializable;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    @Data
    @AllArgsConstructor
    @NoArgsConstructor
    public class Dept implements Serializable &amp;#123;
    private Integer deptno;
    private String dname;
    private String loc;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-准备Mapper映射文件和核心配置文件&#34;&gt;&lt;a href=&#34;#3-准备Mapper映射文件和核心配置文件&#34; class=&#34;headerlink&#34; title=&#34;3 准备Mapper映射文件和核心配置文件&#34;&gt;&lt;/a&gt;3 准备Mapper映射文件和核心配置文件&lt;/h2&gt;&lt;p&gt;resources目录下 创建 com&amp;#x2F;msb&amp;#x2F;mapper目录,然后添加DeptMapper.xml映射文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617193030929.png&#34; class=&#34;&#34; title=&#34;image-20220617193030929&#34;&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;aaa&amp;quot;&amp;gt;
    &amp;lt;!--public List&amp;lt;Dept&amp;gt; findAll()&amp;#123;    &amp;#125;--&amp;gt;
    &amp;lt;select id=&amp;quot;findAll&amp;quot; resultType=&amp;quot;com.msb.pojo.Dept&amp;quot; &amp;gt;
        select * from dept
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;resources目录下准备sqlMapConfig.xml 核心配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE configuration
        PUBLIC &amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;environments default=&amp;quot;development&amp;quot;&amp;gt;
        &amp;lt;environment id=&amp;quot;development&amp;quot;&amp;gt;
            &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot;/&amp;gt;
            &amp;lt;dataSource type=&amp;quot;POOLED&amp;quot;&amp;gt;
                &amp;lt;property name=&amp;quot;driver&amp;quot; value=&amp;quot;com.mysql.cj.jdbc.Driver&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://127.0.0.1:3306/mydb?useSSL=false&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=UTF-8&amp;amp;amp;serverTimezone=Asia/Shanghai&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;root&amp;quot;/&amp;gt;
            &amp;lt;/dataSource&amp;gt;
        &amp;lt;/environment&amp;gt;
    &amp;lt;/environments&amp;gt;
    &amp;lt;!--加载mapper映射文件--&amp;gt;
    &amp;lt;mappers&amp;gt;
        &amp;lt;mapper resource=&amp;quot;com/msb/mapper/DeptMapper.xml&amp;quot;/&amp;gt;
    &amp;lt;/mappers&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-运行测试&#34;&gt;&lt;a href=&#34;#4-运行测试&#34; class=&#34;headerlink&#34; title=&#34;4 运行测试&#34;&gt;&lt;/a&gt;4 运行测试&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617193244713.png&#34; class=&#34;&#34; title=&#34;image-20220617193244713&#34;&gt;

&lt;p&gt;在test目录下开发测试代码并运行&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../spring/img/image-20220617193259351.png&#34; alt=&#34;image-20220617193259351&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; package com.msb.test;
import com.msb.pojo.Dept;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    public class Test1 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testFindAll()&amp;#123;
        // 调用SQL语句
        List&amp;lt;Dept&amp;gt; list = sqlSession.selectList(&amp;quot;findAll&amp;quot;);
        for (Dept dept : list) &amp;#123;
            System.out.println(dept);
        &amp;#125;
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3-MyBatis配置详解&#34;&gt;&lt;a href=&#34;#3-MyBatis配置详解&#34; class=&#34;headerlink&#34; title=&#34;3 MyBatis配置详解&#34;&gt;&lt;/a&gt;3 MyBatis配置详解&lt;/h1&gt;&lt;h3 id=&#34;1-log4j1和log4j2的简单配置&#34;&gt;&lt;a href=&#34;#1-log4j1和log4j2的简单配置&#34; class=&#34;headerlink&#34; title=&#34;1_log4j1和log4j2的简单配置&#34;&gt;&lt;/a&gt;1_log4j1和log4j2的简单配置&lt;/h3&gt;&lt;p&gt;项目中添加依赖&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!-- log4j2 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.apache.logging.log4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;log4j-core&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.12.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- log4j1 --&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.2.17&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;在mybatis.cfg.xml中配置MyBatis所使用的具体日志实现。如果不指定将自动搜索。可能会搜到log4j，但是如果优先搜到了其他的日志实现呢，所以还是设置为好。这一来log4j就跑不了了。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;log4j 1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;将log4j.properties文件负责到src下。另外在其中可以将全局的日志级别调高，避免大量debug信息的干扰。同时将对映射文件的操作调低，可以用来显示SQL语句的调试信息。开发阶段，建议启动控制的日志。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; #定义全局日志级别调试阶段推荐debug&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;properties&#34;&gt;log4j.rootLogger=debug,stdout 
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.err
log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout
log4j.appender.logfile=org.apache.log4j.FileAppender
log4j.appender.logfile.File=d:/msb.log
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d&amp;#123;yyyy-MM-dd HH:mm:ss&amp;#125; %l %F %p %m%n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在核心配置文件中可以选择的其他日志处理方式&lt;/p&gt;
&lt;p&gt;log4j 2&lt;/p&gt;
&lt;p&gt;将log4j2.xml文件负责到resources下。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;Configuration status=&amp;quot;DEBUG&amp;quot;&amp;gt;
    &amp;lt;Appenders&amp;gt;
        &amp;lt;Console name=&amp;quot;Console&amp;quot; target=&amp;quot;SYSTEM_ERR&amp;quot;&amp;gt;
            &amp;lt;PatternLayout pattern=&amp;quot;%d&amp;#123;YYYY-MM-dd HH:mm:ss&amp;#125; [%t] %-5p %c&amp;#123;1&amp;#125;:%L - %msg%n&amp;quot; /&amp;gt;
        &amp;lt;/Console&amp;gt;
        &amp;lt;RollingFile name=&amp;quot;RollingFile&amp;quot; filename=&amp;quot;log/test.log&amp;quot;
                     filepattern=&amp;quot;$&amp;#123;logPath&amp;#125;/%d&amp;#123;YYYYMMddHHmmss&amp;#125;-fargo.log&amp;quot;&amp;gt;
            &amp;lt;PatternLayout pattern=&amp;quot;%d&amp;#123;YYYY-MM-dd HH:mm:ss&amp;#125; [%t] %-5p %c&amp;#123;1&amp;#125;:%L - %msg%n&amp;quot; /&amp;gt;
            &amp;lt;Policies&amp;gt;
                &amp;lt;SizeBasedTriggeringPolicy size=&amp;quot;10 MB&amp;quot; /&amp;gt;
            &amp;lt;/Policies&amp;gt;
            &amp;lt;DefaultRolloverStrategy max=&amp;quot;20&amp;quot; /&amp;gt;
        &amp;lt;/RollingFile&amp;gt;
    &amp;lt;/Appenders&amp;gt;
    &amp;lt;Loggers&amp;gt;
        &amp;lt;Root level=&amp;quot;INFO&amp;quot;&amp;gt;
            &amp;lt;AppenderRef ref=&amp;quot;Console&amp;quot; /&amp;gt;
        &amp;lt;/Root&amp;gt;
    &amp;lt;/Loggers&amp;gt;
&amp;lt;/Configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;核心配置文件中可以指定日志打印方式&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617193736735.png&#34; class=&#34;&#34; title=&#34;image-20220617193736735&#34;&gt;



&lt;h2 id=&#34;2-关于事务配置&#34;&gt;&lt;a href=&#34;#2-关于事务配置&#34; class=&#34;headerlink&#34; title=&#34;2_关于事务配置&#34;&gt;&lt;/a&gt;2_关于事务配置&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617193831478.png&#34; class=&#34;&#34; title=&#34;image-20220617193831478&#34;&gt;

&lt;p&gt;在mybatis核心配置文件中 envirment中 通过transactionManager配置事务的处理策略&lt;/p&gt;
&lt;p&gt;&lt;font color=#FF000&gt;JDBC&lt;/font&gt; – 这个配置直接简单使用了 JDBC 的提交和回滚设置。它依赖于从数据源得到的连接来管理事务范围。&lt;/p&gt;
&lt;p&gt;&lt;font color=#FF000&gt;MANAGED &lt;/font&gt;– 这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期(比如 Spring 或 JEE 应用服务器的上下文) 默认情况下它会关闭连接。然而一些容器并不希望这样, 因此如果你需要从连接中停止它,将closeConnection 属性设置为 false. mybatis本身并不做事务的处理,交给其他框架去处理事务,如spring&lt;/p&gt;
&lt;h2 id=&#34;3-关于映射文件的加载方式&#34;&gt;&lt;a href=&#34;#3-关于映射文件的加载方式&#34; class=&#34;headerlink&#34; title=&#34;3_关于映射文件的加载方式&#34;&gt;&lt;/a&gt;3_关于映射文件的加载方式&lt;/h2&gt;&lt;p&gt;1.mapper映射文件的文件路径导入 使用的mapper标签的resource属性&lt;/p&gt;
&lt;p&gt;2.网络资源路径 使用的mapper标签的url属性&lt;/p&gt;
&lt;p&gt;3.接口的全限定名导入 使用的是mapper标签的class属性 (基于接口的代理模式开发)&lt;/p&gt;
&lt;p&gt;4.包扫描形式加载所有的mapper映射文件 使用的是 package标签&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617193946594.png&#34; class=&#34;&#34; title=&#34;image-20220617193946594&#34;&gt;

&lt;h2 id=&#34;4-关于实体类别名处理&#34;&gt;&lt;a href=&#34;#4-关于实体类别名处理&#34; class=&#34;headerlink&#34; title=&#34;4_关于实体类别名处理&#34;&gt;&lt;/a&gt;4_关于实体类别名处理&lt;/h2&gt;&lt;p&gt;在mybatis核心配置文件中使用别名处理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;!--设置实体类别名--&amp;gt;
&amp;lt;typeAliases&amp;gt;
    &amp;lt;!--
    通过包扫描给所有的实体类起别名
    给指定报名下的所有类起别名
    默认每个实体类的别名是首字母小写的类名
    Dept   dept
    Emp    emp
    --&amp;gt;
    &amp;lt;package name=&amp;quot;com.msb.pojo&amp;quot;/&amp;gt;
&amp;lt;/typeAliases&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在映射文件的resultType 返回值类型  和paramterType 上就可以使用别名了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;select id=&amp;quot;selectByEmpno&amp;quot;  resultType=&amp;quot;emp&amp;quot;&amp;gt;
    select * from emp where empno = 7566
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-关于外部属性配置文件存储数据库连接信息&#34;&gt;&lt;a href=&#34;#5-关于外部属性配置文件存储数据库连接信息&#34; class=&#34;headerlink&#34; title=&#34;5_关于外部属性配置文件存储数据库连接信息&#34;&gt;&lt;/a&gt;5_关于外部属性配置文件存储数据库连接信息&lt;/h2&gt;&lt;p&gt;在resources下准备jdbc.properties属性配置文件&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617194131042.png&#34; class=&#34;&#34; title=&#34;image-20220617194131042&#34;&gt;


&lt;p&gt;配置文件中的内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;properties&#34;&gt;jdbc_driver=com.mysql.cj.jdbc.Driver
jdbc_url=jdbc:mysql://127.0.0.1:3306/mydb?useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=Asia/Shanghai
jdbc_username=root
jdbc_password=root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在核心配置文件中引入db.properties属性文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!-- xml文档约束 约束xml文档中可以有哪些标签,哪些属性,以及标签的包含关系和顺序....
dtd 约束
schema 约束
--&amp;gt;

&amp;lt;!DOCTYPE configuration
        PUBLIC &amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;properties resource=&amp;quot;jdbc.properties&amp;quot;&amp;gt;&amp;lt;/properties&amp;gt;
    &amp;lt;settings&amp;gt;
        &amp;lt;!--设置日志处理方式--&amp;gt;
        &amp;lt;setting name=&amp;quot;logImpl&amp;quot; value=&amp;quot;LOG4J&amp;quot;/&amp;gt;
    &amp;lt;/settings&amp;gt;
    &amp;lt;!--设置实体类别名--&amp;gt;
    &amp;lt;typeAliases&amp;gt;
        &amp;lt;!--
        通过包扫描给所有的实体类起别名
        给指定报名下的所有类起别名
        默认每个实体类的别名是首字母小写的类名
        Dept   dept
        Emp    emp
        --&amp;gt;
        &amp;lt;package name=&amp;quot;com.msb.pojo&amp;quot;/&amp;gt;
    &amp;lt;/typeAliases&amp;gt;
    &amp;lt;!--配置数据库链接信息--&amp;gt;
    &amp;lt;environments default=&amp;quot;mysql&amp;quot;&amp;gt;
        &amp;lt;!--数据源1--&amp;gt;
        &amp;lt;environment id=&amp;quot;mysql&amp;quot;&amp;gt;
            &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot;/&amp;gt;
            &amp;lt;!--一个数据源--&amp;gt;
            &amp;lt;dataSource type=&amp;quot;POOLED&amp;quot;&amp;gt;
                &amp;lt;property name=&amp;quot;driver&amp;quot; value=&amp;quot;$&amp;#123;jdbc_driver&amp;#125;&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;$&amp;#123;jdbc_url&amp;#125;&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;$&amp;#123;jdbc_username&amp;#125;&amp;quot;/&amp;gt;
                &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;$&amp;#123;jdbc_password&amp;#125;&amp;quot;/&amp;gt;
            &amp;lt;/dataSource&amp;gt;
        &amp;lt;/environment&amp;gt;
    &amp;lt;/environments&amp;gt;
    &amp;lt;!--加载映射文件的--&amp;gt;
    &amp;lt;mappers&amp;gt;
        &amp;lt;mapper resource=&amp;quot;com/msb/mapper/DeptMapper.xml&amp;quot;/&amp;gt;
    &amp;lt;/mappers&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;4-MyBatis传统DAO模式开发&#34;&gt;&lt;a href=&#34;#4-MyBatis传统DAO模式开发&#34; class=&#34;headerlink&#34; title=&#34;4 MyBatis传统DAO模式开发&#34;&gt;&lt;/a&gt;4 MyBatis传统DAO模式开发&lt;/h1&gt;&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;普通模式,也称为传统DAO模式,就是在传统DAO模式下,定义接口和实现类,如 interface EmpDao  class EmpDaoImpl implements EmpDao.  在实现类中,用SQLSession对象调用select insert delete update 等方法实现.目前极为少见.在传统模式下,我们需要知道SqlSession对象 实现CURD和 参数传递的处理
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-sqlSession查询的三种方式&#34;&gt;&lt;a href=&#34;#1-sqlSession查询的三种方式&#34; class=&#34;headerlink&#34; title=&#34;1_sqlSession查询的三种方式&#34;&gt;&lt;/a&gt;1_sqlSession查询的三种方式&lt;/h2&gt;&lt;p&gt;SqlSession对象本身的API中就有三个查询方法,分别能够实现如下查询方式&lt;/p&gt;
&lt;p&gt;1返回单个对象 selectOne&lt;/p&gt;
&lt;p&gt;2返回对象List集合 selectList&lt;/p&gt;
&lt;p&gt;3返回对象Map集合 selectMap&lt;/p&gt;
&lt;p&gt;接下来我们就对这三个方法进行一个快速的学习&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617194257643.png&#34; class=&#34;&#34; title=&#34;image-20220617194257643&#34;&gt;


&lt;p&gt;创建Emp实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@AllArgsConstructor
@NoArgsConstructor
@Data
public class Emp implements Serializable &amp;#123;
    private Integer empno;
    private String ename;
    private String job;
    private Integer mgr;
    private Date hiredate;
    private Double sal;
    private Double comm;
    private Integer deptno;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;准备Mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--
    返回单个对象
    public Emp findOne();
    id 相当于方法名
    resultType 相当于返回值类型
        sql语句的查询结果用哪个类来进行封装 如果返回值类型是集合,这里写的也是集合中的元素对应的类,不是集合本身作为类型
    paramaterType 参数类型
    SQL语句就是具体的方法体的实现
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findOne&amp;quot; resultType=&amp;quot;emp&amp;quot; &amp;gt;
        select * from emp where empno = 7499
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    返回多个对象List集合
    查询全部的员工信息
    public List&amp;lt;Emp&amp;gt; findAll()
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findAll&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
        select * from emp
    &amp;lt;/select&amp;gt;
    &amp;lt;!--返回多个对象的Map集合
    把查询出来的数据中的某一列作为键,整条数据封装的对象作为值
    public Map&amp;lt;key,Emp&amp;gt; findEmpMap()
    &amp;lt;empno,Emp&amp;gt;
    &amp;lt;key,Emp&amp;gt;
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpMap&amp;quot; resultType=&amp;quot;map&amp;quot;&amp;gt;
        select * from emp
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sqlMapConfig中导入EmpMapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!--加载mapper映射文件--&amp;gt;
&amp;lt;mappers&amp;gt;
    &amp;lt;mapper resource=&amp;quot;com/msb/mapper/DeptMapper.xml&amp;quot;/&amp;gt;
    &amp;lt;mapper resource=&amp;quot;com/msb/mapper/EmpMapper.xml&amp;quot;/&amp;gt;
&amp;lt;/mappers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.pojo.Dept;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import java.util.Set;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    public class Test2 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testSelectOne()&amp;#123;
        // 查询单个对象
        System.out.println(&amp;quot;sqlSession查询单个对象&amp;quot;);
        Emp emp = sqlSession.selectOne(&amp;quot;findOne&amp;quot;);
        System.out.println(emp);
    &amp;#125;
    @Test
    public void testSelectList()&amp;#123;
        // 查询多个对象的List集合
        System.out.println(&amp;quot;sqlSession查询对象List集合&amp;quot;);
        List&amp;lt;Emp&amp;gt; emps = sqlSession.selectList(&amp;quot;EmpMapper.findAll&amp;quot;);
        emps.forEach(System.out::println);
    &amp;#125;
    @Test
    public void testSelectMap()&amp;#123;
        // 查询多个对象的Map集合
        System.out.println(&amp;quot;sqlSession查询对象Map集合&amp;quot;);
        Map&amp;lt;Integer, Emp&amp;gt; empMap = sqlSession.selectMap(&amp;quot;findEmpMap&amp;quot;, &amp;quot;EMPNO&amp;quot;);
        Set&amp;lt;Integer&amp;gt; empnos = empMap.keySet();
        for (Integer empno : empnos) &amp;#123;
            System.out.println(empno+&amp;quot; :&amp;quot; +empMap.get(empno));
        &amp;#125;
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-sqlSession传递参数的三种方式&#34;&gt;&lt;a href=&#34;#2-sqlSession传递参数的三种方式&#34; class=&#34;headerlink&#34; title=&#34;2_sqlSession传递参数的三种方式&#34;&gt;&lt;/a&gt;2_sqlSession传递参数的三种方式&lt;/h2&gt;&lt;p&gt;1 单个基础数据类型作为参数&lt;/p&gt;
&lt;p&gt;2 多个基础数据类型的map 集合作为参数&lt;/p&gt;
&lt;p&gt;3 引用类型作为参数&lt;/p&gt;
&lt;p&gt;Mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;EmpMapper2&amp;quot;&amp;gt;
    &amp;lt;!--
    参数为一个基本数据类型
    根据员工工号查询员工的全部信息,返回单个员工对象
    public Emp findByEmpno(int empno);
    parameterType 在有参数情况下也是可以省略不写  mybatis 可以根据实际情况自动判断
    如果要写parameterType 那么就要写对
    在SQL语句上可以使用$&amp;#123;&amp;#125;  #&amp;#123;&amp;#125; 代表参数的占位
    如果参数是单个基本数据类型,&amp;#123;&amp;#125;中名字可以随便写,见名知意
    $&amp;#123;&amp;#125; 代表mybatis底层使用Statment语句对象,参数是以字符串拼接的形式设置
    #&amp;#123;&amp;#125; 代表mybatis底层使用的preparedStatment语句对象,参数使用?作为占位符处理
    #&amp;#123;&amp;#125; 以后常用
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;int&amp;quot;&amp;gt;
        select  * from emp where empno = #&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    参数为map集合
    查询指定部门号和指定最低薪资的员工信息
    20 号部门 且工资在1500以上的员工信息
    public List&amp;lt;Emp&amp;gt; findEmpByDeptnoAndSal(int deptno,double sal);
    &amp;lt;  &amp;gt;  最好要进行转译处理,参照HTML转译  w3school在线文档中有转译符号对应规则
     Map&amp;lt;String,Object&amp;gt; args=new HashMap&amp;lt;&amp;gt;();
        args.put(&amp;quot;deptno&amp;quot;, 20);
        args.put(&amp;quot;sal&amp;quot;, 1500.0);
    #&amp;#123;&amp;#125;中写的是map集合中,参数的键
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpByDeptnoAndSal&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;map&amp;quot;&amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
   参数为对象
   emp &amp;gt;&amp;gt;&amp;gt;  deptno   sal
   参数是我们自定义的类型,那么 #&amp;#123;&amp;#125;中写的是参数的属性名
   --&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpByDeptnoAndSal2&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; package com.msb.test;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    public class Test3 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testSingleArg()&amp;#123;
        // 测试单个基本数据类型作为参数
        Emp emp = sqlSession.selectOne(&amp;quot;findByEmpno&amp;quot;, 7499);
        System.out.println(emp);
    &amp;#125;
    @Test
    public void testMapArg()&amp;#123;
        // 测试Map集合作为参数
        Map&amp;lt;String,Object&amp;gt; args=new HashMap&amp;lt;&amp;gt;();
        args.put(&amp;quot;deptno&amp;quot;, 20);
        args.put(&amp;quot;sal&amp;quot;, 3000.0);
        List&amp;lt;Emp&amp;gt; emps = sqlSession.selectList(&amp;quot;findEmpByDeptnoAndSal&amp;quot;, args);
        emps.forEach(System.out::println);
    &amp;#125;
    @Test
    public void testEmpArg()&amp;#123;
        // 测试Map集合作为参数
        Emp arg =new Emp();
        arg.setDeptno(10);
        arg.setSal(2000.0);
        List&amp;lt;Emp&amp;gt; emps = sqlSession.selectList(&amp;quot;findEmpByDeptnoAndSal2&amp;quot;, arg);
        emps.forEach(System.out::println);
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-sqlSession完成DML所有操作&#34;&gt;&lt;a href=&#34;#3-sqlSession完成DML所有操作&#34; class=&#34;headerlink&#34; title=&#34;3_sqlSession完成DML所有操作&#34;&gt;&lt;/a&gt;3_sqlSession完成DML所有操作&lt;/h2&gt;&lt;p&gt;Mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;EmpMapper3&amp;quot;&amp;gt;
    &amp;lt;!--
    增删方法的返回值类型都是int
    resultType就无需指定了
    insert update delete 标签中没有resultType
    但是仍然可以有paramaterType
    --&amp;gt;
    &amp;lt;!-- 增加方法
    public int addEmp(Emp emp);
    --&amp;gt;
    &amp;lt;insert id=&amp;quot;addEmp&amp;quot; parameterType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;/insert&amp;gt;
    &amp;lt;!--修改
    根据工号修改员工姓名
    public int updateEmp(Emp emp);
    --&amp;gt;
    &amp;lt;update id=&amp;quot;updateEmp&amp;quot; parameterType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;/update&amp;gt;
    &amp;lt;!-- 删除
    删除大于给定工号的员工信息
    public int deleteEmp(int empno)
    --&amp;gt;
    &amp;lt;delete id=&amp;quot;deleteEmp&amp;quot; parameterType=&amp;quot;int&amp;quot;&amp;gt;
        delete from emp where empno &amp;gt;= #&amp;#123;empno&amp;#125;
    &amp;lt;/delete&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public class Test4 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession(true);
    &amp;#125;
    @Test
    public void testInsert()&amp;#123;
        Emp emp =new Emp(null,&amp;quot;按住啦Baby&amp;quot;,&amp;quot;SALESMAN&amp;quot;,7839,new Date(),3100.0, 200.0,10 );
        int rows = sqlSession.insert(&amp;quot;addEmp&amp;quot;, emp);
        System.out.println(rows);
        // 手动提交事务
        //sqlSession.commit();
        /*增删改 要提交事务
        * sqlSession.commit();手动提交事务
        * sqlSession=factory.openSession(true); 设置事务自动提交
        * */
    &amp;#125;
    @Test
    public void testUpdate()&amp;#123;
        Emp emp =new Emp( );
        emp.setEname(&amp;quot;晓明&amp;quot;);
        emp.setEmpno(7937);
        int rows = sqlSession.update(&amp;quot;updateEmp&amp;quot;, emp);
        System.out.println(rows);
    &amp;#125;
    @Test
    public void testDelete()&amp;#123;
        int rows = sqlSession.delete(&amp;quot;deleteEmp&amp;quot;, 7936);
        System.out.println(rows);
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;5-MyBatis代理模式开发&#34;&gt;&lt;a href=&#34;#5-MyBatis代理模式开发&#34; class=&#34;headerlink&#34; title=&#34;5 MyBatis代理模式开发&#34;&gt;&lt;/a&gt;5 MyBatis代理模式开发&lt;/h1&gt;&lt;p&gt;前面已经使用MyBatis完成了对Emp表的CRUD操作，都是由SqlSession调用自身方法发送SQL命令并得到结果的，实现了MyBatis的入门。&lt;/p&gt;
&lt;p&gt;但是却存在如下缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不管是selectList()、selectOne()、selectMap()，都是通过SQLSession对象的API完成增删改查,都只能提供一个查询参数。如果要多个参数，需要封装到JavaBean或者Map中，并不一定永远是一个好办法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回值类型较固定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;只提供了映射文件，没有提供数据库操作的接口，不利于后期的维护扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在MyBatis中提供了另外一种成为&lt;strong&gt;Mapper代理（或称为接口绑定）&lt;/strong&gt;的操作方式。在实际开发中也使用该方式。下面我们就是要Mapper代理的方式来实现对Emp表的CRUD操作吧，还有完成多个参数传递、模糊查询、自增主键回填等更多的技能实现。搭建好的项目框架如图所示，相比而言，增加了接口EmployeeMapper。但是却会引起映射文件和测试类的变化。&lt;/p&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;p&gt;1有接口 模块之间有规范了&lt;/p&gt;
&lt;p&gt;2参数的处理多样了,接口中的方法参数列表由我们自己决定&lt;/p&gt;
&lt;p&gt;3通过代理模式由mybatis提供接口的实现类对象 我们不用写实现类了&lt;/p&gt;
&lt;p&gt;项目结构:注意文件路径和文件位置!!!&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617195010768.png&#34; class=&#34;&#34; title=&#34;image-20220617195010768&#34;&gt;


&lt;p&gt;准备接口和mapper映射文件&lt;/p&gt;
&lt;p&gt;EmpMapper接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.mapper;
import com.msb.pojo.Emp;
import java.util.List;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
public interface EmpMapper &amp;#123;
    /**
     * 该方法用于查询全部的员工信息
     * @return 全部员工信息封装的Emp对象的List集合
        */
    List&amp;lt;Emp&amp;gt; findAll();
 &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EmpMapper.xml映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--
    1 接口的名字和Mapper映射为文件名字必须保持一致(不包含拓展名)
    2 Mapper映射文件的namespace必须是接口的全路径名
    3 sql语句的id必须是对应方法的名
    4 DeptMapper映射文件应该和接口编译之后放在同一个目录下
    --&amp;gt;
    &amp;lt;!--List&amp;lt;Emp&amp;gt; findAll();--&amp;gt;
    &amp;lt;select id=&amp;quot;findAll&amp;quot; resultType=&amp;quot;emp&amp;quot; &amp;gt;
        select * from emp
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在sqlMapConfig.xml核心配置文件中使用包扫描形式加载所有的映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;!--加载mapper映射文件--&amp;gt;
&amp;lt;mappers&amp;gt;
    &amp;lt;!--通过类的全路径去找mapper映射文件--&amp;gt;
    &amp;lt;mapper class=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;/&amp;gt;
&amp;lt;/mappers&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.mapper.EmpMapper;
import com.msb.pojo.Dept;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
/**

 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
    */
    public class Test1 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testFindAll()&amp;#123;
        EmpMapper empMapper=sqlSession.getMapper(EmpMapper.class);
        List&amp;lt;Emp&amp;gt; emps = empMapper.findAll();
        emps.forEach(System.out::println);
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;代理模式浅析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;mybatis是如何通过代理模式实现查询的&lt;/p&gt;
&lt;p&gt;这条语句的底层使用了动态代理模式，动态创建一个EmployeeMapper的一个代理对象并赋给接口引用。所以在MyBatis中不需要显式提供Mapper接口的实现类，这也是简单的地方。&lt;/p&gt;
&lt;h1 id=&#34;6-代理模式下开发各种功能&#34;&gt;&lt;a href=&#34;#6-代理模式下开发各种功能&#34; class=&#34;headerlink&#34; title=&#34;6 代理模式下开发各种功能&#34;&gt;&lt;/a&gt;6 代理模式下开发各种功能&lt;/h1&gt;&lt;h2 id=&#34;1-多种参数传递问题&#34;&gt;&lt;a href=&#34;#1-多种参数传递问题&#34; class=&#34;headerlink&#34; title=&#34;1_多种参数传递问题&#34;&gt;&lt;/a&gt;1_多种参数传递问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;1单个基本数据类型&lt;/p&gt;
&lt;p&gt;2多个基本数据类型&lt;/p&gt;
&lt;p&gt;3单个引用数据类型&lt;/p&gt;
&lt;p&gt;4map集合数据类型&lt;/p&gt;
&lt;p&gt;5多个引用数据类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.mapper;
import com.msb.pojo.Emp;
import org.apache.ibatis.annotations.Param;
import java.util.List;
import java.util.Map;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public interface EmpMapper &amp;#123;
    /**
     * 该方法用于查询全部的员工信息
     * @return 全部员工信息封装的Emp对象的List集合
     */
    List&amp;lt;Emp&amp;gt; findAll();
    /**
     * 根据员工编号查询单个员工信息的方法
     * @param empno 员工编号
     * @return 如果找到了返回Emp对象,找不到返回null
     */
    Emp findByEmpno(int empno);
    /**
     * 根据员工编号和薪资下限去查询员工信息
     * @param empno 员工编号
     * @param sal 薪资下限
     * @return 多个Emp对象的List集合
     */
    List&amp;lt;Emp&amp;gt; findByDeptnoAndSal(@Param(&amp;quot;deptno&amp;quot;) int deptno,@Param(&amp;quot;sal&amp;quot;) double sal);
    List&amp;lt;Emp&amp;gt; findByDeptnoAndSal2(Map&amp;lt;String,Object&amp;gt; map);
    List&amp;lt;Emp&amp;gt; findByDeptnoAndSal3(Emp emp);
    List&amp;lt;Emp&amp;gt; findByDeptnoAndSal4(@Param(&amp;quot;empa&amp;quot;) Emp empa,@Param(&amp;quot;empb&amp;quot;) Emp empb);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--
    1 接口的名字和Mapper映射为文件名字必须保持一致(不包含拓展名)
    2 Mapper映射文件的namespace必须是接口的全路径名
    3 sql语句的id必须是对应方法的名
    4 DeptMapper映射文件应该和接口编译之后放在同一个目录下
    --&amp;gt;
    &amp;lt;!--List&amp;lt;Emp&amp;gt; findAll();--&amp;gt;
    &amp;lt;select id=&amp;quot;findAll&amp;quot; resultType=&amp;quot;emp&amp;quot; &amp;gt;
        select * from emp
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    单个基本数据类型作为方法参数
    #&amp;#123;&amp;#125;中可以随便写,遵循见名知意
    Emp findByEmpno(int empno);
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultType=&amp;quot;emp&amp;quot; &amp;gt;
        select * from emp where empno =#&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
     多个基本数据类型作为方法参数
     List&amp;lt;Emp&amp;gt; findByDeptnoAndSal(@Param(&amp;quot;detpno&amp;quot;) int deptno,@Param(&amp;quot;sal&amp;quot;) double sal);
     方式1 arg*     arg0 arg1 arg2 数字是索引,从0开始
     方式2 param*   param1 param2 param3 数字是编号,从1开始
     使用别名
     List&amp;lt;Emp&amp;gt; findByDeptnoAndSal(@Param(&amp;quot;detpno&amp;quot;) int deptno,@Param(&amp;quot;sal&amp;quot;) double sal);
     通过@Param注解使用别名之后,就不能再使用arg* 但是可以继续使用param*
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByDeptnoAndSal&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    参数是map,&amp;#123;&amp;#125;写键的名字
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByDeptnoAndSal2&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;map&amp;quot; &amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--单个引用类型,&amp;#123;&amp;#125;中写的使用对象的属性名--&amp;gt;
    &amp;lt;select id=&amp;quot;findByDeptnoAndSal3&amp;quot; resultType=&amp;quot;emp&amp;quot; parameterType=&amp;quot;emp&amp;quot; &amp;gt;
    &amp;lt;/select&amp;gt;
    &amp;lt;!--
    多个引用类型作为方法参数
     List&amp;lt;Emp&amp;gt; findByDeptnoAndSal4(@Param(&amp;quot;empa&amp;quot;) Emp empa,@Param(&amp;quot;empb&amp;quot;) Emp empb);
     如果用@Param定义了别名,那么就不能使用arg*.属性名,但是可以使用param*.属性名和别名.属性名
    --&amp;gt;
    &amp;lt;select id=&amp;quot;findByDeptnoAndSal4&amp;quot; resultType=&amp;quot;emp&amp;quot;  &amp;gt;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试 代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.testDemo;
import com.msb.mapper.EmpMapper;
import com.msb.pojo.Emp;
import com.msb.util.SqlSessionUtil;
import org.apache.ibatis.session.SqlSession;
import java.util.List;
public class Test1 &amp;#123;
    public static void main(String[] args) &amp;#123;
        SqlSession sqlSession = SqlSessionUtil.getSqlSession(true);
        /*
        * 帮助我们生成一个接口下的实现类对象的
        *
        * */
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        List&amp;lt;Emp&amp;gt; emps = mapper.getAllEmp();
        for(Emp emp:emps) &amp;#123;
            System.out.println(emp);
        &amp;#125;
        // 1单个基本数据类型作为方法参数
        Emp emp = mapper.getByEmpno(7902);
        System.out.println(emp);
        // 2多个基本数据类型作为方法参数
        List&amp;lt;Emp&amp;gt; emps2 = mapper.getByDeptnoAndSal(10, 1500);
        for(Emp em:emps2) &amp;#123;
            System.out.println(em);
        &amp;#125;
        // 3单个引用类型作为方法参数
        Emp condition=new Emp();
        condition.setDeptno(10);
        condition.setSal(1500.0);
        List&amp;lt;Emp&amp;gt; emps3 = mapper.getByDeptnoAndSal2(condition);
        for(Emp em:emps3) &amp;#123;
            System.out.println(em);
        &amp;#125;
        // 4多个引用类型作为方法参数
        Emp condition1=new Emp();
        condition1.setDeptno(10);
        Emp condition2=new Emp();
        condition2.setSal(1500.0);
        List&amp;lt;Emp&amp;gt; emps4 = mapper.getByDeptnoAndSal3(condition1,condition2);
        for(Emp em:emps4) &amp;#123;
            System.out.println(em);
        &amp;#125;
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-模糊查询功能&#34;&gt;&lt;a href=&#34;#2-模糊查询功能&#34; class=&#34;headerlink&#34; title=&#34;2 模糊查询功能&#34;&gt;&lt;/a&gt;2 模糊查询功能&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;在进行模糊查询时，在映射文件中可以使用concat()函数来连接参数和通配符。另外注意对于特殊字符，比如&amp;lt;，不能直接书写，应该使用字符实体替换。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 根据名字做模糊查询
 * @param name 模糊查询的文字
 * @return  Emp对象List集合
 */
List&amp;lt;Emp&amp;gt; findByEname( String name);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!--List&amp;lt;Emp&amp;gt; getByName(String name);--&amp;gt;
&amp;lt;select id=&amp;quot;findByEname&amp;quot;  resultType=&amp;quot;emp&amp;quot; &amp;gt;
    select * from emp where ename like concat(&amp;#39;%&amp;#39;,#&amp;#123;name&amp;#125;,&amp;#39;%&amp;#39;)
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-主键自增回填&#34;&gt;&lt;a href=&#34;#3-主键自增回填&#34; class=&#34;headerlink&#34; title=&#34;3_主键自增回填&#34;&gt;&lt;/a&gt;3_主键自增回填&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;MySQL支持主键自增。有时候完成添加后需要立刻获取刚刚自增的主键，由下一个操作来使用。比如结算构造车后，主订单的主键确定后，需要作为后续订单明细项的外键存在。如何拿到主键呢，MyBatis提供了支持，可以非常简单的获取。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface DeptMapper &amp;#123;
    int addDept(Dept dept);
    int addDept2(Dept dept);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mapper映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.DeptMapper&amp;quot;&amp;gt;
   &amp;lt;!-- int addDept(Dept dept);
   useGeneratedKeys=&amp;quot;true&amp;quot; 返回数据库帮我们生成的主键
   keyProperty=&amp;quot;deptno&amp;quot; 生成的主键值用我们dept对象那个属性存储
   --&amp;gt;
    &amp;lt;insert id=&amp;quot;addDept&amp;quot; parameterType=&amp;quot;dept&amp;quot; useGeneratedKeys=&amp;quot;true&amp;quot; keyProperty=&amp;quot;deptno&amp;quot;&amp;gt;
    &amp;lt;/insert&amp;gt;
    &amp;lt;insert id=&amp;quot;addDept2&amp;quot; parameterType=&amp;quot;dept&amp;quot;&amp;gt;
        &amp;lt;selectKey order=&amp;quot;AFTER&amp;quot; keyProperty=&amp;quot;deptno&amp;quot;  resultType=&amp;quot;int&amp;quot;&amp;gt;
            select @@identity
        &amp;lt;/selectKey&amp;gt;
    &amp;lt;/insert&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;SqlSession sqlSession = SqlSessionUtil.getSqlSession(true);
DeptMapper mapper = sqlSession.getMapper(DeptMapper.class);
Dept dept =new Dept(null,&amp;quot;AI学院&amp;quot;,&amp;quot;北京&amp;quot;);
int i = mapper.addDept2(dept);
System.out.println(i);
System.out.println(dept.getDeptno());
sqlSession.close();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;方式1&lt;/p&gt;
&lt;p&gt;useGeneratedKeys：表示要使用自增的主键&lt;/p&gt;
&lt;p&gt;keyProperty：表示把自增的主键赋给JavaBean的哪个成员变量。&lt;/p&gt;
&lt;p&gt;以添加Dept对象为例，添加前Dept对象的deptno是空的，添加完毕后可以通过getDeptno() 获取自增的主键。&lt;/p&gt;
&lt;p&gt;方式2&lt;/p&gt;
&lt;p&gt;order：取值AFTER|BEFORE，表示在新增之后|之前执行&lt;selectKey&gt;中的SQL命令&lt;/p&gt;
&lt;p&gt;keyProperty：执行select @@identity后结果填充到哪个属性中&lt;/p&gt;
&lt;p&gt;resultType：结果类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术扩展&lt;/strong&gt;&lt;br&gt;在很多应用场景中需要新增数据后获取到新增数据的主键值，针对这样的需求一般由三种解决方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主键自定义，用户通过UUID或时间戳等方式生成唯一主键，把这个值当做主键值。在分布式场景中应用较多。&lt;/li&gt;
&lt;li&gt;查询后通过select max(主键) from 表获取主键最大值。这种方式在多线程访问情况下可能出现问题。&lt;/li&gt;
&lt;li&gt;查询后通过select @@identity获取最新生成主键。要求这条SQL必须在insert操作之后，且数据库连接没有关闭。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-实现DML操作&#34;&gt;&lt;a href=&#34;#4-实现DML操作&#34; class=&#34;headerlink&#34; title=&#34;4_实现DML操作&#34;&gt;&lt;/a&gt;4_实现DML操作&lt;/h2&gt;&lt;p&gt;EmpMapper接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 增加员工信息
 * @param emp 存储新增员工信息的Emp对象
 * @return 对数据库数据产生影响的行数
 */
int addEmp(Emp emp);
/**
 * 根据员工编号修改员工姓名的方法
 * @param empno 要修改的员工编号
 * @param ename 修改之后的新的员工名字
 * @return 对数据库数据产生影响的行数
 */
int updateEnameByEmpno(@Param(&amp;quot;empno&amp;quot;) int empno,@Param(&amp;quot;ename&amp;quot;) String ename);
/**
 * 根据员工编号删除员工信息
 * @param empno 要删除的员工编号
 * @return 对数据库数据产生影响的行数
 */
int deleteByEmpno(int empno);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EmpMapper映射 文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!--int addEmp(Emp emp);--&amp;gt;
&amp;lt;insert id=&amp;quot;addEmp&amp;quot; &amp;gt;
&amp;lt;/insert&amp;gt;
&amp;lt;!--int updateEnameByEmpno(@Param(&amp;quot;empno&amp;quot;) int empno,@Param(&amp;quot;ename&amp;quot;) String ename);--&amp;gt;
&amp;lt;update id=&amp;quot;updateEnameByEmpno&amp;quot; &amp;gt;
&amp;lt;/update&amp;gt;
&amp;lt;!--int deleteByEmpno(int empno);--&amp;gt;
&amp;lt;update id=&amp;quot;deleteByEmpno&amp;quot; &amp;gt;
    delete from emp where empno =#&amp;#123;empno&amp;#125;
&amp;lt;/update&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.mapper.DeptMapper;
import com.msb.mapper.EmpMapper;
import com.msb.pojo.Dept;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
import java.util.Date;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public class Test3 &amp;#123;
    private SqlSession sqlSession;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
    &amp;#125;
    @Test
    public void testAddEmp()&amp;#123;
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        mapper.addEmp(new Emp(null, &amp;quot;TOM&amp;quot;, &amp;quot;SALESMAN&amp;quot;, 7521, new Date(), 2314.0, 100.0, 10));
        sqlSession.commit();
    &amp;#125;
    @Test
    public void testUpdateEnameByEmpno()&amp;#123;
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        mapper.updateEnameByEmpno(7938, &amp;quot;TOM&amp;quot;);
        sqlSession.commit();
    &amp;#125;
    @Test
    public void testDeletByEmpno()&amp;#123;
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        mapper.deleteByEmpno(7938);
        sqlSession.commit();
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;7-动态SQL&#34;&gt;&lt;a href=&#34;#7-动态SQL&#34; class=&#34;headerlink&#34; title=&#34;7 动态SQL&#34;&gt;&lt;/a&gt;7 动态SQL&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;经常遇到很多按照很多查询条件进行查询的情况，比如京东根据不同的条件筛选商品。其中经常出现很多条件不取值的情况，在后台应该如何完成最终的SQL语句呢？









如果采用JDBC进行处理，需要根据条件是否取值进行SQL语句的拼接，一般情况下是使用StringBuilder类及其append方法实现，还是有些繁琐的。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。

MyBatis在简化操作方法提出了动态SQL功能，将使用Java代码拼接SQL语句，改变为在XML映射文件中截止标签拼接SQL语句。相比而言，大大减少了代码量，更灵活、高度可配置、利于后期维护。

MyBatis中动态SQL是编写在mapper.xml中的，其语法和JSTL类似，但是却是基于强大的OGNL表达式实现的。

MyBatis也可以在注解中配置SQL，但是由于注解功能受限，尤其是对于复杂的SQL语句，可读性很差，所以较少使用。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-if标签&#34;&gt;&lt;a href=&#34;#1-if标签&#34; class=&#34;headerlink&#34; title=&#34;1_if标签&#34;&gt;&lt;/a&gt;1_if标签&lt;/h2&gt;&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface EmpMapper2 &amp;#123;
  List&amp;lt;Emp&amp;gt; findByCondition(Emp emp);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper2&amp;quot;&amp;gt;
&amp;lt;!--List&amp;lt;Emp&amp;gt; findByCondition(Emp emp);--&amp;gt;
    &amp;lt;select id=&amp;quot;findByCondition&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
        select * from emp where 1=1
        &amp;lt;if test=&amp;quot;empno != null&amp;quot;&amp;gt;
            and empno =#&amp;#123;empno&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and ename like concat(&amp;#39;%&amp;#39;,#&amp;#123;ename&amp;#125;,&amp;#39;%&amp;#39;)
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and job =#&amp;#123;job&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null&amp;quot;&amp;gt;
            and mgr =#&amp;#123;mgr&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null&amp;quot;&amp;gt;
            and hiredate =#&amp;#123;hiredate&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
            and sal =#&amp;#123;sal&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null&amp;quot;&amp;gt;
            and comm =#&amp;#123;comm&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null&amp;quot;&amp;gt;
            and deptno =#&amp;#123;deptno&amp;#125;
        &amp;lt;/if&amp;gt;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public static void main(String[] args) &amp;#123;
    SqlSession sqlSession = MyBatisUtil.getSqlSession(false);
    EmpMapper2 mapper = sqlSession.getMapper(EmpMapper2.class);
    Emp condition =new Emp();
   /* condition.setDeptno(20);*/
   /* condition.setSal(3000.0);*/
   /*condition.setHiredate(new java.sql.Date(81,1,22));*/
   condition.setComm(0.0);
   condition.setDeptno(20);
    List&amp;lt;Emp&amp;gt; emps = mapper.findEmpByCondition(condition);
    for (Emp e:emps
         ) &amp;#123;
        System.out.println(e);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-where标签&#34;&gt;&lt;a href=&#34;#2-where标签&#34; class=&#34;headerlink&#34; title=&#34;2_where标签&#34;&gt;&lt;/a&gt;2_where标签&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用于处理where关键字和and&lt;/p&gt;
&lt;p&gt;默认删除第一个and逻辑连接符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;select id=&amp;quot;findEmpByCondition&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
    select * from emp
    &amp;lt;where&amp;gt;
        &amp;lt;if test=&amp;quot;empno != null&amp;quot;&amp;gt;
            and empno= #&amp;#123;empno&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and ename= #&amp;#123;ename&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and job= #&amp;#123;job&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null &amp;quot;&amp;gt;
            and mgr= #&amp;#123;mgr&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null &amp;quot;&amp;gt;
            and hiredate= #&amp;#123;hiredate&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
            and sal= #&amp;#123;sal&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null &amp;quot;&amp;gt;
             and comm =#&amp;#123;comm&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null &amp;quot;&amp;gt;
            and deptno= #&amp;#123;deptno&amp;#125;
        &amp;lt;/if&amp;gt;
    &amp;lt;/where&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-choose标签&#34;&gt;&lt;a href=&#34;#3-choose标签&#34; class=&#34;headerlink&#34; title=&#34;3_choose标签&#34;&gt;&lt;/a&gt;3_choose标签&lt;/h2&gt;&lt;p&gt;前面的when条件成立 后面的 when就不再判断了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;select id=&amp;quot;findEmpByCondition2&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
    select * from emp
    &amp;lt;where&amp;gt;
        &amp;lt;choose&amp;gt;
            &amp;lt;when test=&amp;quot;empno != null&amp;quot;&amp;gt;
                and empno= #&amp;#123;empno&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
                and ename= #&amp;#123;ename&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
                and job= #&amp;#123;job&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;mgr != null &amp;quot;&amp;gt;
                and mgr= #&amp;#123;mgr&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;hiredate != null &amp;quot;&amp;gt;
                and hiredate= #&amp;#123;hiredate&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;sal != null&amp;quot;&amp;gt;
                and sal= #&amp;#123;sal&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;comm != null &amp;quot;&amp;gt;
                and comm =#&amp;#123;comm&amp;#125;
            &amp;lt;/when&amp;gt;
            &amp;lt;when test=&amp;quot;deptno != null &amp;quot;&amp;gt;
                and deptno= #&amp;#123;deptno&amp;#125;
            &amp;lt;/when&amp;gt;
        &amp;lt;/choose&amp;gt;
    &amp;lt;/where&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-set标签&#34;&gt;&lt;a href=&#34;#4-set标签&#34; class=&#34;headerlink&#34; title=&#34;4_set标签&#34;&gt;&lt;/a&gt;4_set标签&lt;/h2&gt;&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; int updateEmpByCondtion(Emp emp);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;!--int updateEmpByCondtion(Emp emp);--&amp;gt;
&amp;lt;update id=&amp;quot;updateEmpByCondtion&amp;quot; &amp;gt;
    update emp
    &amp;lt;set&amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39; &amp;quot;&amp;gt;
            , ename =#&amp;#123;ename&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and ename != &amp;#39;&amp;#39; &amp;quot;&amp;gt;
            , job =#&amp;#123;job&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null &amp;quot;&amp;gt;
            , mgr =#&amp;#123;mgr&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null &amp;quot;&amp;gt;
            , hiredate =#&amp;#123;hiredate&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null &amp;quot;&amp;gt;
            , sal =#&amp;#123;sal&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null &amp;quot;&amp;gt;
            , comm =#&amp;#123;comm&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null &amp;quot;&amp;gt;
            , deptno =#&amp;#123;deptno&amp;#125;
        &amp;lt;/if&amp;gt;
    &amp;lt;/set&amp;gt;
    where empno =#&amp;#123;empno&amp;#125;
&amp;lt;/update&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-trim标签&#34;&gt;&lt;a href=&#34;#5-trim标签&#34; class=&#34;headerlink&#34; title=&#34;5_trim标签&#34;&gt;&lt;/a&gt;5_trim标签&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Trim 标签处理 set  ，可以为他包裹起来的SQL语句前后 增加&amp;#x2F;删除 关键词&amp;#x2F;固定字符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;update id=&amp;quot;updateEmpByCondition2&amp;quot; &amp;gt;
    update emp
    &amp;lt;!--prefix 要增加什么前缀
    prefixOverrides 要去除什么前缀
    suffix 要增加什么后缀
    suffixOverrides 要去除什么后缀
    set 是trim的一种特殊情况
    --&amp;gt;
    &amp;lt;trim prefix=&amp;quot;set&amp;quot;  suffixOverrides=&amp;quot;,&amp;quot; &amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            ename= #&amp;#123;ename&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            job= #&amp;#123;job&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null &amp;quot;&amp;gt;
            mgr= #&amp;#123;mgr&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null &amp;quot;&amp;gt;
            hiredate= #&amp;#123;hiredate&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
            sal= #&amp;#123;sal&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null &amp;quot;&amp;gt;
            comm =#&amp;#123;comm&amp;#125;,
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null &amp;quot;&amp;gt;
            deptno= #&amp;#123;deptno&amp;#125;,
        &amp;lt;/if&amp;gt;
    &amp;lt;/trim&amp;gt;
    where  empno = #&amp;#123;empno&amp;#125;
&amp;lt;/update&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Trim标签  处理where&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;select id=&amp;quot;findByCondition&amp;quot; resultMap=&amp;quot;EmpMap&amp;quot;&amp;gt;
        select * from emp 
        &amp;lt;trim prefix=&amp;quot;where&amp;quot; prefixOverrides=&amp;quot;and&amp;quot;&amp;gt;
            &amp;lt;if test=&amp;quot;empno != null&amp;quot;&amp;gt;
                and empno =#&amp;#123;empno&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
                &amp;lt;bind name=&amp;quot;likePattern&amp;quot; value=&amp;quot;&amp;#39;%&amp;#39;+ename+&amp;#39;%&amp;#39;&amp;quot;/&amp;gt;
                and ename like #&amp;#123;likePattern&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
                and job =#&amp;#123;job&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;mgr != null&amp;quot;&amp;gt;
                and mgr =#&amp;#123;mgr&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;hiredate != null&amp;quot;&amp;gt;
                and hiredate =#&amp;#123;hiredate&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
                and sal =#&amp;#123;sal&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;comm != null&amp;quot;&amp;gt;
                and comm =#&amp;#123;comm&amp;#125;
            &amp;lt;/if&amp;gt;
            &amp;lt;if test=&amp;quot;deptno != null&amp;quot;&amp;gt;
                and deptno =#&amp;#123;deptno&amp;#125;
            &amp;lt;/if&amp;gt;
        &amp;lt;/trim&amp;gt;
    &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-bind标签&#34;&gt;&lt;a href=&#34;#6-bind标签&#34; class=&#34;headerlink&#34; title=&#34;6_bind标签&#34;&gt;&lt;/a&gt;6_bind标签&lt;/h2&gt;&lt;p&gt;一般用于处理模糊查询的模板&lt;/p&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617200421440.png&#34; class=&#34;&#34; title=&#34;image-20220617200421440&#34;&gt;


&lt;p&gt;SQL语句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!-- bind 写一个局部SQL模板，模糊 like 常用--&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpByEname&amp;quot; resultMap=&amp;quot;EmpMap&amp;quot;&amp;gt;
        &amp;lt;bind name=&amp;quot;likePatten&amp;quot; value=&amp;quot;&amp;#39;%&amp;#39;+param1+&amp;#39;%&amp;#39;&amp;quot;/&amp;gt;
        select * from emp where ename like #&amp;#123;likePatten&amp;#125;;
    &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-nclude&#34;&gt;&lt;a href=&#34;#7-nclude&#34; class=&#34;headerlink&#34; title=&#34;7_nclude&#34;&gt;&lt;/a&gt;7_nclude&lt;/h2&gt;&lt;p&gt;引用提前写好的 SQL 标签的SQL语句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;sql id=&amp;quot;empColumn&amp;quot;&amp;gt;empno,ename,job,mgr,hiredate,sal,comm,deptno&amp;lt;/sql&amp;gt;
    &amp;lt;sql id=&amp;quot;baseSelect&amp;quot;&amp;gt;
        select &amp;lt;include refid=&amp;quot;empColumn&amp;quot;&amp;gt;&amp;lt;/include&amp;gt; from emp
    &amp;lt;/sql&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;8-sql标签&#34;&gt;&lt;a href=&#34;#8-sql标签&#34; class=&#34;headerlink&#34; title=&#34;8_sql标签&#34;&gt;&lt;/a&gt;8_sql标签&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;sql id=&amp;quot;empColumn&amp;quot;&amp;gt;empno,ename,job,mgr,hiredate,sal,comm,deptno&amp;lt;/sql&amp;gt;
&amp;lt;sql id=&amp;quot;baseSelect&amp;quot;&amp;gt;select &amp;lt;include refid=&amp;quot;empColumn&amp;quot;&amp;gt;&amp;lt;/include&amp;gt; from emp&amp;lt;/sql&amp;gt;
&amp;lt;!--List&amp;lt;Emp&amp;gt; findByCondition(Emp emp);--&amp;gt;
&amp;lt;select id=&amp;quot;findByCondition&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
    &amp;lt;include refid=&amp;quot;baseSelect&amp;quot;&amp;gt;&amp;lt;/include&amp;gt;
    &amp;lt;trim prefix=&amp;quot;where&amp;quot; prefixOverrides=&amp;quot;and&amp;quot;&amp;gt;
        &amp;lt;if test=&amp;quot;empno != null&amp;quot;&amp;gt;
            and empno =#&amp;#123;empno&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;ename != null and ename != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            &amp;lt;bind name=&amp;quot;likePattern&amp;quot; value=&amp;quot;&amp;#39;%&amp;#39;+ename+&amp;#39;%&amp;#39;&amp;quot;/&amp;gt;
            and ename like #&amp;#123;likePattern&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;job != null and job != &amp;#39;&amp;#39;&amp;quot;&amp;gt;
            and job =#&amp;#123;job&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;mgr != null&amp;quot;&amp;gt;
            and mgr =#&amp;#123;mgr&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;hiredate != null&amp;quot;&amp;gt;
            and hiredate =#&amp;#123;hiredate&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;sal != null&amp;quot;&amp;gt;
            and sal =#&amp;#123;sal&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;comm != null&amp;quot;&amp;gt;
            and comm =#&amp;#123;comm&amp;#125;
        &amp;lt;/if&amp;gt;
        &amp;lt;if test=&amp;quot;deptno != null&amp;quot;&amp;gt;
            and deptno =#&amp;#123;deptno&amp;#125;
        &amp;lt;/if&amp;gt;
    &amp;lt;/trim&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9-foreach标签&#34;&gt;&lt;a href=&#34;#9-foreach标签&#34; class=&#34;headerlink&#34; title=&#34;9_foreach标签&#34;&gt;&lt;/a&gt;9_foreach标签&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;!--List&amp;lt;Emp&amp;gt; findByEmpnos1(int[] empnos);
 collection=&amp;quot;&amp;quot;  遍历的集合或者是数组
                 参数是数组,collection中名字指定为array
                 参数是List集合,collection中名字指定为list
 separator=&amp;quot;&amp;quot;   多个元素取出的时候 用什么文字分隔
 open=&amp;quot;&amp;quot;        以什么开头
 close=&amp;quot;&amp;quot;       以什么结尾
 item=&amp;quot;&amp;quot;        中间变量名
 for(Person per:PersonList)
 --&amp;gt;
 &amp;lt;select id=&amp;quot;findByEmpnos1&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
     select * from emp  where empno in
     &amp;lt;foreach collection=&amp;quot;array&amp;quot; separator=&amp;quot;,&amp;quot; open=&amp;quot;(&amp;quot; close=&amp;quot;)&amp;quot; item=&amp;quot;deptno&amp;quot;&amp;gt;
         #&amp;#123;deptno&amp;#125;
     &amp;lt;/foreach&amp;gt;
 &amp;lt;/select&amp;gt;
&amp;lt;!-- List&amp;lt;Emp&amp;gt; findByEmpnos2(List&amp;lt;Integer&amp;gt; empnos);--&amp;gt;
 &amp;lt;select id=&amp;quot;findByEmpnos2&amp;quot; resultType=&amp;quot;emp&amp;quot;&amp;gt;
     select * from emp  where empno in
     &amp;lt;foreach collection=&amp;quot;list&amp;quot; separator=&amp;quot;,&amp;quot; open=&amp;quot;(&amp;quot; close=&amp;quot;)&amp;quot; item=&amp;quot;deptno&amp;quot;&amp;gt;
         #&amp;#123;deptno&amp;#125;
     &amp;lt;/foreach&amp;gt;
 &amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;8-MyBatis实现多表查询&#34;&gt;&lt;a href=&#34;#8-MyBatis实现多表查询&#34; class=&#34;headerlink&#34; title=&#34;8 MyBatis实现多表查询&#34;&gt;&lt;/a&gt;8 MyBatis实现多表查询&lt;/h1&gt;&lt;p&gt;前面已经使用MyBatis完成了对Emp表的CRUD操作，不管是使用SqlSession直接操作，还是使用Mapper代理方式，都只是完成了对单个数据库表的操作。这肯定是远远不够的。&lt;/p&gt;
&lt;p&gt;在实际开发中，经常会将来自多张表的数据在一个位置显示。比如查询并显示的员工信息中会有来自部门表、岗位表的数据，而后台一般是定义一个方法&lt;/p&gt;
&lt;h2 id=&#34;1-关联查询&#34;&gt;&lt;a href=&#34;#1-关联查询&#34; class=&#34;headerlink&#34; title=&#34;1 关联查询&#34;&gt;&lt;/a&gt;1 关联查询&lt;/h2&gt;&lt;h3 id=&#34;1-手动处理映射关系&#34;&gt;&lt;a href=&#34;#1-手动处理映射关系&#34; class=&#34;headerlink&#34; title=&#34;1 手动处理映射关系&#34;&gt;&lt;/a&gt;1 手动处理映射关系&lt;/h3&gt;&lt;p&gt;实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Emp  implements Serializable &amp;#123;
    private Integer empno;
    private String name;
    private String job;
    private Integer mgr;
    private Date hiredate;
    private Double sal;
    private Double comm;
    private Integer deptno;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--手动处理数据库查询字段和封装实体类属性之间的映射关系
    1 主键一般使用id属性
    2 当属性名和查询出的数据表字段名相同 可以不写映射关系
    --&amp;gt;
    &amp;lt;resultMap id=&amp;quot;empMap&amp;quot; type=&amp;quot;emp&amp;quot;&amp;gt;
        &amp;lt;!--&amp;lt;id property=&amp;quot;empno&amp;quot; column=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;--&amp;gt;
        &amp;lt;result property=&amp;quot;name&amp;quot; column=&amp;quot;ename&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;!--&amp;lt;result property=&amp;quot;job&amp;quot; column=&amp;quot;job&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;sal&amp;quot; column=&amp;quot;sal&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;hiredate&amp;quot; column=&amp;quot;hiredate&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;mgr&amp;quot; column=&amp;quot;mgr&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;comm&amp;quot; column=&amp;quot;comm&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;deptno&amp;quot; column=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;--&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultMap=&amp;quot;empMap&amp;quot; &amp;gt;
        select * from emp where empno =#&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-一对一关联查询&#34;&gt;&lt;a href=&#34;#2-一对一关联查询&#34; class=&#34;headerlink&#34; title=&#34;2 一对一关联查询&#34;&gt;&lt;/a&gt;2 一对一关联查询&lt;/h3&gt;&lt;p&gt;数据准备: 创建项目表和项目记录表&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617200808312.png&#34; class=&#34;&#34; title=&#34;image-20220617200808312&#34;&gt;



&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE TABLE `projects`  (
  `pid` int(2) NOT NULL AUTO_INCREMENT,
  `pname` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `money` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`pid`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;
INSERT INTO `projects` VALUES (1, &amp;#39; ***大学OA&amp;#39;, 500000);
INSERT INTO `projects` VALUES (2, &amp;#39;学生选课系统&amp;#39;, 100000);
INSERT INTO `projects` VALUES (3, &amp;#39;讲师测评系统&amp;#39;, 20000);
INSERT INTO `projects` VALUES (4, &amp;#39;线上问答系统 &amp;#39;, 20000);
CREATE TABLE `projectrecord`  (
  `empno` int(4) NOT NULL,
  `pid` int(2) NOT NULL,
  PRIMARY KEY (`empno`, `pid`) USING BTREE,
  INDEX `fk_project_pro`(`pid`) USING BTREE,
  CONSTRAINT `fk_emp_pro` FOREIGN KEY (`empno`) REFERENCES `emp` (`EMPNO`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_project_pro` FOREIGN KEY (`pid`) REFERENCES `projects` (`pid`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;
INSERT INTO `projectrecord` VALUES (7369, 1);
INSERT INTO `projectrecord` VALUES (7521, 1);
INSERT INTO `projectrecord` VALUES (7369, 2);
INSERT INTO `projectrecord` VALUES (7499, 2);
INSERT INTO `projectrecord` VALUES (7521, 2);
INSERT INTO `projectrecord` VALUES (7369, 3);
INSERT INTO `projectrecord` VALUES (7499, 3);
INSERT INTO `projectrecord` VALUES (7521, 3);
INSERT INTO `projectrecord` VALUES (7369, 4);
INSERT INTO `projectrecord` VALUES (7499, 4);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需求:根据编号查询员工信息及所在的部门信息&lt;/p&gt;
&lt;p&gt;实体类添加一个部门作为属性&lt;/p&gt;
&lt;p&gt;实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@AllArgsConstructor
@NoArgsConstructor
@Data
public class Emp implements Serializable &amp;#123;
    private Integer empno;
    private String ename;
    private String job;
    private Integer mgr;
    private Date hiredate;
    private Double sal;
    private Double comm;
    private Integer deptno;
    // 组合一个Dept对象作为自己的属性
    private Dept dept;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface EmpMapper &amp;#123;
    /**
     * 根据员工编号查询员工的所有信息并携带所在的部门信息
     * @param empno 要查询的员工编号
     * @return Emp对象,组合了Dept对象作为属性,对部门信息进行存储
     */
    Emp findEmpJoinDeptByEmpno(int empno);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;!--Emp findEmpJoinDeptByEmpno(int empno);--&amp;gt;
    &amp;lt;resultMap id=&amp;quot;empJoinDept&amp;quot; type=&amp;quot;emp&amp;quot;&amp;gt;
        &amp;lt;!--设置emp本身的八个属性的映射关系--&amp;gt;
        &amp;lt;id property=&amp;quot;empno&amp;quot; column=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
        &amp;lt;result property=&amp;quot;ename&amp;quot; column=&amp;quot;ename&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;job&amp;quot; column=&amp;quot;job&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;sal&amp;quot; column=&amp;quot;sal&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;hiredate&amp;quot; column=&amp;quot;hiredate&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;mgr&amp;quot; column=&amp;quot;mgr&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;comm&amp;quot; column=&amp;quot;comm&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result property=&amp;quot;deptno&amp;quot; column=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;!--
        association 处理一对一
        封装一对一信息关系的标签
        property  emp类的属性名
        javaType  用哪个类的对象给属性赋值
        --&amp;gt;
        &amp;lt;association property=&amp;quot;dept&amp;quot; javaType=&amp;quot;dept&amp;quot;&amp;gt;
            &amp;lt;id column=&amp;quot;deptno&amp;quot; property=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
            &amp;lt;result column=&amp;quot;dname&amp;quot; property=&amp;quot;dname&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result column=&amp;quot;loc&amp;quot; property=&amp;quot;loc&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;/association&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findEmpJoinDeptByEmpno&amp;quot; resultMap=&amp;quot;empJoinDept&amp;quot; &amp;gt;
        select * from
        emp e
        left join dept  d
        on e.deptno =d.deptno
        where empno = #&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Test
public void testOneToOne() throws ParseException &amp;#123;
    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
    Emp emp = mapper.findEmpJoinDeptByEmpno(7499);
    System.out.println(emp);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3 一对多关联查询&lt;/p&gt;
&lt;p&gt;根据部门号查询部门信息及该部门的所有员工信息&lt;/p&gt;
&lt;p&gt;实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Data
@AllArgsConstructor
@NoArgsConstructor
public class Dept implements Serializable &amp;#123;
    private Integer deptno;
    private String dname;
    private String loc;
    // 组合一个Emp的List集合作为属性
    private List&amp;lt;Emp&amp;gt; empList;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.mapper;
import com.msb.pojo.Dept;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public interface DeptMapper &amp;#123;
    /**
     * 根据部门编号查询部门信息及该部分的所有员工信息
     * @param deptno 要查询的部门编号
     * @return Dept对象,内部组合了一个Emp的List属性用于封装部门的所有员工信息
     */
    Dept findDeptJoinEmpsByDeptno(int deptno);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.DeptMapper&amp;quot;&amp;gt;
    &amp;lt;!--Dept findDeptJoinEmpsByDeptno(int deptno);--&amp;gt;
    &amp;lt;resultMap id=&amp;quot;deptJoinEmps&amp;quot; type=&amp;quot;dept&amp;quot;&amp;gt;
        &amp;lt;id column=&amp;quot;deptno&amp;quot; property=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
        &amp;lt;result column=&amp;quot;dname&amp;quot; property=&amp;quot;dname&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result column=&amp;quot;loc&amp;quot; property=&amp;quot;loc&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;!--处理一对多关系的标签--&amp;gt;
        &amp;lt;collection property=&amp;quot;empList&amp;quot; ofType=&amp;quot;emp&amp;quot; &amp;gt;
            &amp;lt;!--设置emp本身的八个属性的映射关系--&amp;gt;
            &amp;lt;id property=&amp;quot;empno&amp;quot; column=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
            &amp;lt;result property=&amp;quot;ename&amp;quot; column=&amp;quot;ename&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;job&amp;quot; column=&amp;quot;job&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;sal&amp;quot; column=&amp;quot;sal&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;hiredate&amp;quot; column=&amp;quot;hiredate&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;mgr&amp;quot; column=&amp;quot;mgr&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;comm&amp;quot; column=&amp;quot;comm&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;result property=&amp;quot;deptno&amp;quot; column=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;/collection&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findDeptJoinEmpsByDeptno&amp;quot; resultMap=&amp;quot;deptJoinEmps&amp;quot;&amp;gt;
        select * from dept d left join emp e on d.deptno =e.deptno where d.deptno =#&amp;#123;deptno&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Test
public void testOneToMany() throws ParseException &amp;#123;
    DeptMapper mapper = sqlSession.getMapper(DeptMapper.class);
    Dept dept = mapper.findDeptJoinEmpsByDeptno(20);
    System.out.println(dept);
    System.out.println(&amp;quot;---------&amp;quot;);
    List&amp;lt;Emp&amp;gt; empList = dept.getEmpList();
    empList.forEach(System.out::println);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4 多对多关联查询&lt;/p&gt;
&lt;p&gt;根据项目编号查询项目信息,以及参与到该项目之中的所有的员工信息&lt;/p&gt;
&lt;p&gt;实体类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@NoArgsConstructor
@AllArgsConstructor
@Data
public class Project  implements Serializable &amp;#123;
    private Integer pid;
    private String pname;
    private Integer money;
    // 组合一个ProjectRecord对象集合作为属性
    private List&amp;lt;ProjectRecord&amp;gt; projectRecords;
&amp;#125;
@Data
@AllArgsConstructor
@NoArgsConstructor
public class ProjectRecord implements Serializable &amp;#123;
    private Integer empno;
    private Integer pid;
    // 组合一个Emp对象作为属性
    private Emp emp;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.mapper;
import com.msb.pojo.Emp;
import com.msb.pojo.Project;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public interface ProjectMapper &amp;#123;
    /**
     * 根据项目编号查询一个项目信息及参与该项目的所有员工信息
     * @param pid 项目编号
     * @return 所有信息封装的Project对象
     */
    Project findProjectJoinEmpsByPid(int pid);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!DOCTYPE mapper
        PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;
        &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.ProjectMapper&amp;quot;&amp;gt;
    &amp;lt;!--Project findProjectJoinEmpsByPid(int pid);--&amp;gt;
    &amp;lt;resultMap id=&amp;quot;projectJoinEmps&amp;quot; type=&amp;quot;project&amp;quot;&amp;gt;
        &amp;lt;id column=&amp;quot;pid&amp;quot; property=&amp;quot;pid&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
        &amp;lt;result column=&amp;quot;pname&amp;quot; property=&amp;quot;pname&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;result column=&amp;quot;money&amp;quot; property=&amp;quot;money&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
        &amp;lt;!--一对多 集合属性 collection--&amp;gt;
        &amp;lt;collection property=&amp;quot;projectRecords&amp;quot; ofType=&amp;quot;projectRecord&amp;quot;&amp;gt;
            &amp;lt;id column=&amp;quot;empno&amp;quot; property=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
            &amp;lt;id column=&amp;quot;pid&amp;quot; property=&amp;quot;pid&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
            &amp;lt;!--一对一 --&amp;gt;
            &amp;lt;association property=&amp;quot;emp&amp;quot; javaType=&amp;quot;emp&amp;quot;&amp;gt;
                &amp;lt;id property=&amp;quot;empno&amp;quot; column=&amp;quot;empno&amp;quot;&amp;gt;&amp;lt;/id&amp;gt;
                &amp;lt;result property=&amp;quot;ename&amp;quot; column=&amp;quot;ename&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;job&amp;quot; column=&amp;quot;job&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;sal&amp;quot; column=&amp;quot;sal&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;hiredate&amp;quot; column=&amp;quot;hiredate&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;mgr&amp;quot; column=&amp;quot;mgr&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;comm&amp;quot; column=&amp;quot;comm&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
                &amp;lt;result property=&amp;quot;deptno&amp;quot; column=&amp;quot;deptno&amp;quot;&amp;gt;&amp;lt;/result&amp;gt;
            &amp;lt;/association&amp;gt;
        &amp;lt;/collection&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findProjectJoinEmpsByPid&amp;quot;  resultMap=&amp;quot;projectJoinEmps&amp;quot;&amp;gt;
        select * from
        project p
        left join projectrecord pr
        on p.pid = pr.pid
        left join emp e
        on e.empno = pr.empno
        where p.pid= #&amp;#123;pid&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Test
public void testManyToMany() throws ParseException &amp;#123;
    ProjectMapper mapper = sqlSession.getMapper(ProjectMapper.class);
    Project project = mapper.findProjectJoinEmpsByPid(2);
    System.out.println(project.getPid());
    System.out.println(project.getPname());
    System.out.println(project.getMoney());
    List&amp;lt;ProjectRecord&amp;gt; projectRecords = project.getProjectRecords();
    for (ProjectRecord projectRecord : projectRecords) &amp;#123;
        Emp emp = projectRecord.getEmp();
        System.out.println(emp);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-级联查询&#34;&gt;&lt;a href=&#34;#2-级联查询&#34; class=&#34;headerlink&#34; title=&#34;2 级联查询&#34;&gt;&lt;/a&gt;2 级联查询&lt;/h2&gt;&lt;p&gt;级联查询，顾名思义，就是利于数据库表间的外键关联关系进行自动的级联查询操作。使用MyBatis实现级联查询，除了实体类增加关联属性外，还需要在映射文件中进行配置。&lt;/p&gt;
&lt;h3 id=&#34;1-立即加载&#34;&gt;&lt;a href=&#34;#1-立即加载&#34; class=&#34;headerlink&#34; title=&#34;1 立即加载&#34;&gt;&lt;/a&gt;1 立即加载&lt;/h3&gt;&lt;h3 id=&#34;2-延迟加载&#34;&gt;&lt;a href=&#34;#2-延迟加载&#34; class=&#34;headerlink&#34; title=&#34;2 延迟加载&#34;&gt;&lt;/a&gt;2 延迟加载&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;延迟加载，又称按需加载&lt;/strong&gt;。延迟加载的内容等到真正使用时才去进行加载（查询）。多用在关联对象或集合中。&lt;/p&gt;
&lt;p&gt;延迟加载的好处：先从单表查询、需要时再从关联表去关联查询，大大降低数据库在单位时间内的查询工作量,将工作在时间上的分配更加均匀，而且单表要比关联查询多张表速度要快。&lt;/p&gt;
&lt;p&gt;延迟加载的设置&lt;/p&gt;
&lt;p&gt;第一步：全局开关：在sqlMapConfig.xml中打开延迟加载的开关。配置完成后所有的association和collection元素都生效&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;  &amp;lt;settings&amp;gt;
      &amp;lt;setting name=&amp;quot;lazyLoadingEnabled&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
      &amp;lt;setting name=&amp;quot;aggressiveLazyLoading&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
  &amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;font color=#008000&gt;lazyLoadingEnabled&lt;/font&gt;:是否开启延迟加载。是Mybatis是否启用懒加载的全局开关。当开启时，所有关联对象都会延迟加载。特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态&lt;/p&gt;
&lt;p&gt;&lt;font color=#008000 &gt;aggressiveLazyLoading&lt;/font&gt;：当开启时，任何方法的调用都会懒加载对象的所有属性。否则，每个属性会按需加载,&lt;/p&gt;
&lt;p&gt;第二步：分开关：指定的association和collection元素中配置&lt;font color=#0000FF&gt;fetchType&lt;/font&gt;属性。eager：表示立刻加载；lazy：表示延迟加载。&lt;strong&gt;将覆盖全局延迟设置。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-总结&#34;&gt;&lt;a href=&#34;#3-总结&#34; class=&#34;headerlink&#34; title=&#34;3 总结&#34;&gt;&lt;/a&gt;3 总结&lt;/h2&gt;&lt;h4 id=&#34;resultMap中的常见属性&#34;&gt;&lt;a href=&#34;#resultMap中的常见属性&#34; class=&#34;headerlink&#34; title=&#34;resultMap中的常见属性&#34;&gt;&lt;/a&gt;resultMap中的常见属性&lt;/h4&gt;&lt;table style=&#34;text-align: center;&#34; cellpadding=&#34;30&#34; &gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;property&lt;/td&gt;
            &lt;td&gt;需要映射到JavaBean 的属性名称&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td &gt;javaType&lt;/td&gt;
            &lt;td&gt;property的类型，一个完整的类名，或者是一个类型别名。如果你匹配的是一个JavaBean，那MyBatis 通常会自行检测到&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;column&lt;/td&gt;
            &lt;td&gt;数据表的列名或者列别名&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;jdbcType&lt;/td&gt;
            &lt;td&gt;column在数据库表中的类型。这个属性只在insert,update   或delete 的时候针对允许空的列有用。JDBC 需要这项，但MyBatis 不需要&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;typeHandler&lt;/td&gt;
            &lt;td&gt;使用这个属性可以覆写类型处理器，实现javaType、jdbcType之间的相互转换。一般可以省略，会探测到使用的什么类型的typeHandler进行处理&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;fetchType&lt;/td&gt;
            &lt;td&gt;自动延迟加载&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;select&lt;/td&gt;
            &lt;td&gt;association、collection的属性，使用哪个查询查询属性的值，要求指定namespace+id的全名称&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;ofType&lt;/td&gt;
            &lt;td&gt;collection的属性，指明集合中元素的类型（即泛型类型）&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;




&lt;h4 id=&#34;级联查询和多表查询的比较及其选择&#34;&gt;&lt;a href=&#34;#级联查询和多表查询的比较及其选择&#34; class=&#34;headerlink&#34; title=&#34;级联查询和多表查询的比较及其选择&#34;&gt;&lt;/a&gt;级联查询和多表查询的比较及其选择&lt;/h4&gt;&lt;table style=&#34;text-align: center;&#34; cellpadding=&#34;30&#34; &gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;SQL语句数量&lt;/td&gt;
        &lt;td&gt;多条&lt;/td&gt;
        &lt;td&gt;一条&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td &gt;性能&lt;/td&gt;
        &lt;td&gt;性能低&lt;/td&gt;
        &lt;td&gt;性能高&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
        &lt;td&gt;延迟加载&lt;/td&gt;
        &lt;td&gt;立即加载、延迟加载&lt;/td&gt;
        &lt;td&gt;只有立即加载&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;灵活性&lt;/td&gt;
        &lt;td&gt;更灵活&lt;/td&gt;
        &lt;td&gt;不灵活&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
        &lt;td&gt;SQL难易度&lt;/td&gt;
        &lt;td&gt;简单&lt;/td&gt;
        &lt;td&gt;复杂&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;选择依据&lt;/td&gt;
        &lt;td&gt;简单、灵活&lt;/td&gt;
        &lt;td&gt;高性能&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;




&lt;p&gt;&lt;strong&gt;ResultType和ResultMap使用场景&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;如果你做的是单表的查询并且封装的实体和数据库的字段一一对应   resultType
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;如果实体封装的属性和数据库的字段不一致  resultMap
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; 使用N+1级联查询的时候  resultMap
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;使用的是多表的连接查询  resultMap
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;一对一关联映射的实现&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;实例：学生和学生证、雇员和工牌
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;数据库层次：主键关联或者外键关联（参看之前内容）
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; MyBatis层次：在映射文件的设置双方均使用association即可，用法相同
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;多对多映射的实现&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;实例：学生和课程、用户和角色
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; 数据库层次：引入一个中间表将一个多对多转为两个一对多
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; MyBatis层次
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法1：在映射文件的设置双方均使用collection即可，不用引入中间类&lt;/p&gt;
&lt;p&gt;方法2：引入中间类和中间类的映射文件，按照两个一对多处理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自关联映射&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;实例：Emp表中的员工和上级。一般是一对多关联
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;数据库层次：外键参考当前表的主键（比如mgr参考empno）
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MyBatis层次：按照一对多处理，但是增加的属性都写到一个实体类中，增加的映射也都写到一个映射文件中&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;9-MyBatis注解开发&#34;&gt;&lt;a href=&#34;#9-MyBatis注解开发&#34; class=&#34;headerlink&#34; title=&#34;9 MyBatis注解开发&#34;&gt;&lt;/a&gt;9 MyBatis注解开发&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface DeptMapper &amp;#123;
    Dept findDeptByDeptno(int deptno);
    @Select(&amp;quot;select * from dept where deptno =#&amp;#123;deptno&amp;#125;&amp;quot;)
    Dept findByDeptno(int deptno);
    int updateDept(Dept dept);
    int addDept(Dept dept);
    @Delete(&amp;quot;delete from dept where deptno =#&amp;#123;deptno&amp;#125;&amp;quot;)
    int removeDept(int deptno);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;1.使用注解没有实现Java代码和SQL语句的解耦&lt;/p&gt;
&lt;p&gt;2.无法实现SQL语句的动态拼接&lt;/p&gt;
&lt;p&gt;3.进行多表的查询时定制ResultMap比较麻烦&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注解和XML的优缺点&lt;/strong&gt;&lt;/p&gt;
&lt;table style=&#34;text-align: center;&#34; cellpadding=&#34;30&#34; &gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;优点&lt;/td&gt;
        &lt;td&gt;类和类之间的解耦&lt;/td&gt;
        &lt;td&gt;简化配置&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td &gt; &lt;/td&gt;
        &lt;td&gt;利于修改。直接修改XML文件，无需到源代码中修改。&lt;/td&gt;
        &lt;td&gt;使用起来直观且容易，提升开发效率&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;配置集中在XML中，对象间关系一目了然，利于快速了解项目和维护&lt;/td&gt;
        &lt;td&gt;类型安全，编译器进行校验，不用等到运行期才会发现错误&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;容易和其他系统进行数据交交换&lt;/td&gt;
        &lt;td&gt;注解的解析可以不依赖于第三方库，可以直接使用Java自带的反射&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;






&lt;h1 id=&#34;10-缓存&#34;&gt;&lt;a href=&#34;#10-缓存&#34; class=&#34;headerlink&#34; title=&#34;10 缓存&#34;&gt;&lt;/a&gt;10 缓存&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617211853352.png&#34; class=&#34;&#34; title=&#34;image-20220617211853352&#34;&gt;

&lt;blockquote&gt;
&lt;p&gt;​	是一种临时存储少量数据至内存或者是磁盘的一种技术.减少数据的加载次数,可以降低工作量,提高程序响应速度&lt;/p&gt;
&lt;p&gt;​	缓存的重要性是不言而喻的。mybatis的缓存将相同查询条件的SQL语句执行一遍后所得到的结果存在内存或者某种缓存介质当中，当下次遇到一模一样的查询SQL时候不在执行SQL与数据库交互，而是直接从缓存中获取结果，减少服务器的压力；尤其是在查询越多、缓存命中率越高的情况下，使用缓存对性能的提高更明显。&lt;/p&gt;
&lt;p&gt;​	MyBatis允许使用缓存，缓存一般放置在高速读&amp;#x2F;写的存储器上，比如服务器的内存，能够有效的提供系统性能。MyBatis分为&lt;font color=#FF0000&gt;一级缓存和二级缓存&lt;/font&gt;，同时也可配置关于缓存设置。&lt;/p&gt;
&lt;p&gt;​	一级存储是SqlSession上的缓存，二级缓存是在SqlSessionFactory(namespace)上的缓存。默认情况下，MyBatis开启一级缓存，没有开启二级缓存。当数据量大的时候可以借助一些第三方缓存框架或Redis缓存来协助保存Mybatis的二级缓存数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617211938471.png&#34; class=&#34;&#34; title=&#34;image-20220617211938471&#34;&gt;



&lt;h2 id=&#34;1-一级缓存&#34;&gt;&lt;a href=&#34;#1-一级缓存&#34; class=&#34;headerlink&#34; title=&#34;1 一级缓存&#34;&gt;&lt;/a&gt;1 一级缓存&lt;/h2&gt;&lt;p&gt;一级存储是SqlSession上的缓存，默认开启，是一种内存型缓存,不要求实体类对象实现Serializable接口。&lt;/p&gt;
&lt;p&gt;缓存中的数据使用键值对形式存储数据&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;namespace + sqlid + args + offset     &amp;gt;&amp;gt;&amp;gt;   hash 值作为键,查询出的结果作为值&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617212008075.png&#34; class=&#34;&#34; title=&#34;image-20220617212008075&#34;&gt;

&lt;p&gt;测试 代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Test
public void testFindDeptByDetpno()   &amp;#123;
    EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
    Emp emp = mapper.findByEmpno(7521);
    System.out.println(emp);
    // 中间发生了增删改或者是调用了SqlSession调用了commit,会自动清空缓存
    sqlSession.commit();// 增删改的时候调用
    EmpMapper mapper2 = sqlSession.getMapper(EmpMapper.class);
    Emp emp2 = mapper2.findByEmpno(7521);
    System.out.println(emp2); 
    
    System.out.println(emp==emp2);// 没有commit之前为True
    System.out.println(mapper==mapper2);// false 表示确实产生了两个代理对象
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-二级缓存&#34;&gt;&lt;a href=&#34;#2-二级缓存&#34; class=&#34;headerlink&#34; title=&#34;2 二级缓存&#34;&gt;&lt;/a&gt;2 二级缓存&lt;/h2&gt;&lt;p&gt;二级缓存是以namespace为标记的缓存，可以是由一个SqlSessionFactory创建的SqlSession之间共享缓存数据。默认并不开启。下面的代码中创建了两个SqlSession，执行相同的SQL语句，尝试让第二个SqlSession使用第一个SqlSession查询后缓存的数据。要求实体类必须实现序列化接口&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617212052512.png&#34; class=&#34;&#34; title=&#34;image-20220617212052512&#34;&gt;



&lt;p&gt;接口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface EmpMapper &amp;#123;
    Emp findByEmpno(int empno);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;映射文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmpMapper&amp;quot;&amp;gt;
    &amp;lt;cache/&amp;gt;
    &amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultType=&amp;quot;emp&amp;quot; useCache=&amp;quot;true&amp;quot; flushCache=&amp;quot;false&amp;quot;&amp;gt;
        select * from emp where empno =#&amp;#123;empno&amp;#125;
    &amp;lt;/select&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试 代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.test;
import com.msb.mapper.EmpMapper;
import com.msb.pojo.Emp;
import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;
import java.io.InputStream;
/**
 * @Author: Ma HaiYang
 * @Description: MircoMessage:Mark_7001
 */
public class Test3 &amp;#123;
    private SqlSession sqlSession;
    private SqlSession sqlSession2;
    @Before
    public void init()&amp;#123;
        SqlSessionFactoryBuilder ssfb =new SqlSessionFactoryBuilder();
        InputStream resourceAsStream = null;
        try &amp;#123;
            resourceAsStream = Resources.getResourceAsStream(&amp;quot;sqlMapConfig.xml&amp;quot;);
        &amp;#125; catch (IOException e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
        SqlSessionFactory factory=ssfb.build(resourceAsStream) ;
        sqlSession=factory.openSession();
        sqlSession2=factory.openSession();
    &amp;#125;
    @Test
    public void testFindDeptByDetpno()   &amp;#123;
        EmpMapper mapper = sqlSession.getMapper(EmpMapper.class);
        Emp emp = mapper.findByEmpno(7521);
        System.out.println(emp);
        // SqlSession提交之后,才会将查询的结果放入二级缓存
        sqlSession.commit();
        EmpMapper mapper2 = sqlSession2.getMapper(EmpMapper.class);
        Emp emp2 = mapper2.findByEmpno(7521);
        System.out.println(emp2);
    &amp;#125;
    @After
    public void release()&amp;#123;
        // 关闭SQLSession
        sqlSession.close();
        sqlSession2.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	其中的commit()，执行该命令后才会将该SqlSession的查询结果从一级缓存中放入二级缓存，供其他SqlSession使用。另外执行SqlSession的close()也会将该SqlSession的查询结果从一级缓存中放入二级缓存。两种方式区别在当前SqlSession是否关闭了。&lt;/p&gt;
&lt;p&gt;执行结果显示进行了两次对数据库的SQL查询，说明二级缓存并没有开启。需要进行如下步骤完成开启。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局开关：在sqlMapConfig.xml文件中的&lt;font color=blue&gt;&lt;settings&gt;&lt;/font&gt;标签配置开启二级缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;settings&amp;gt;
    &amp;lt;setting name=&amp;quot;cacheEnabled&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;cacheEnabled的默认值就是true，所以这步的设置可以省略。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;分开关：在要开启二级缓存的mapper文件中开启缓存：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;mapper namespace=&amp;quot;com.msb.mapper.EmployeeMapper&amp;quot;&amp;gt;
    &amp;lt;cache/&amp;gt;
&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;二级缓存未必完全使用内存,有可能占用硬盘存储,缓存中存储的JavaBean对象必须实现序列化接口,&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Emp implements  Serializable &amp;#123;  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;经过设置后，查询结果如图所示。发现第一个SqlSession会首先去二级缓存中查找，如果不存在，就查询数据库，&lt;font color=#FF0000&gt;在commit()或者close()的时候将数据放入到二级缓存&lt;/font&gt;。第二个SqlSession执行相同SQL语句查询时就直接从二级缓存中获取了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	1)    MyBatis的二级缓存的缓存介质有多种多样，而并不一定是在内存中，所以需要对JavaBean对象实现序列化接口。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;二级缓存是以 namespace 为单位的，不同 namespace 下的操作互不影响&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​	3)    加入Cache元素后，会对相应命名空间所有的select元素查询结果进行缓存，而其中的insert、update、delete在操作是会清空整个namespace的缓存。&lt;/p&gt;
&lt;p&gt;​	4)    cache 有一些可选的属性 type, eviction, flushInterval, size, readOnly, blocking。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;cache type=&amp;quot;&amp;quot; readOnly=&amp;quot;&amp;quot; eviction=&amp;quot;&amp;quot;flushInterval=&amp;quot;&amp;quot;size=&amp;quot;&amp;quot;blocking=&amp;quot;&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;cache type&amp;#x3D;”” readOnly&amp;#x3D;”” eviction&amp;#x3D;””flushInterval&amp;#x3D;””size&amp;#x3D;””blocking&amp;#x3D;””&amp;#x2F;&amp;gt;&lt;/p&gt;
&lt;table style=&#34;text-align: center;&#34; cellpadding=&#34;30&#34; &gt;
    &lt;style&gt;
        td {
            text-align:center;
        }
        p {
          text-align:center;
        }
    &lt;/style&gt;
    &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;type&lt;/td&gt;
         &lt;td&gt;&lt;p&gt;自定义缓存类，要求实现org.apache.ibatis.cache.Cache接口&lt;/p&gt;&lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;readOnly&lt;/td&gt;
            &lt;td &gt;&lt;p&gt;是否只读&lt;/p&gt;
                &lt;p&gt; true:给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。 &lt;/p&gt;
                &lt;span&gt; 这提供了很重要的性能优势。&lt;/span&gt;
                &lt;p&gt;false:会返回缓存对象的拷贝(通过序列化)。&lt;/p&gt;
                &lt;p&gt; 这会慢一些,但是安全&lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
            &lt;td&gt;eviction&lt;/td&gt;
            &lt;td&gt;	 
                &lt;p&gt;缓存策略&lt;br&gt;LRU（默认） – 最近最少使用：移除最长时间不被使用的对象。&lt;/p&gt;
                &lt;p&gt;FIFO – 先进先出：按对象进入缓存的顺序来移除它们。&lt;/p&gt;
                &lt;p&gt;SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。&lt;/p&gt;
                &lt;p&gt;WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。&lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;LRU&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;flushInterval&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;
                    刷新间隔，毫秒为单位。默认为null，也就是没有刷新间隔，
                &lt;/p&gt;
                &lt;p&gt;
                    只有执行update、insert、delete语句才会刷新
                &lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;null&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr style=&#34;background-color:#E2EFD9 ;&#34;&gt;
             &lt;td&gt;size&lt;/td&gt;
            &lt;td&gt;&lt;p&gt;缓存对象个数&lt;p&gt;&lt;/td&gt;
            &lt;td&gt;1024&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;blocking&lt;/td&gt;
            &lt;td&gt;
                &lt;p&gt;是否使用阻塞性缓存BlockingCache&lt;/p&gt;
                &lt;p&gt;true：在查询缓存时锁住对应的Key，如果缓存命中了则会释放对应的锁，&lt;/p&gt;
                &lt;span&gt;否则会在查询数据库以后再释放锁，&lt;/span&gt;
                &lt;p&gt;保证只有一个线程到数据库中查找指定key对应的数据&lt;/p&gt;
                &lt;p&gt;false：不使用阻塞性缓存，性能更好&lt;/p&gt;
            &lt;/td&gt;
            &lt;td&gt;false&lt;/td&gt;
        &lt;/tr&gt;
&lt;/table&gt;





&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;如果在加入Cache元素的前提下让个别select 元素不使用缓存，可以使用useCache属性，设置为false。useCache控制当前sql语句是否启用缓存  flushCache控制当前sql执行一次后是否刷新缓存&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;select id=&amp;quot;findByEmpno&amp;quot; resultType=&amp;quot;emp&amp;quot; useCache=&amp;quot;true&amp;quot; flushCache=&amp;quot;false&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-三方缓存&#34;&gt;&lt;a href=&#34;#3-三方缓存&#34; class=&#34;headerlink&#34; title=&#34;3 三方缓存&#34;&gt;&lt;/a&gt;3 三方缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;分布式缓存框架：我们系统为了提高系统并发和性能，一般对系统进行分布式部署（集群部署方式）不适用分布缓存， 缓存的数据在各个服务单独存储，不方便系统开发。所以要使用分布式缓存对缓存数据进行集中管理.ehcache,redis ,memcache缓存框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ehcache：是一种广泛使用的开源java分布式缓存。主要面向通用缓存，javaEE 和 轻量级容器。它具有内存和磁盘存储功能。被用于大型复杂分布式web application的&lt;/p&gt;
&lt;p&gt;这里的三方缓存是作为二级缓存使用的&lt;/p&gt;
&lt;p&gt;导入依赖的jar文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mybatis.caches&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatis-ehcache&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;net.sf.ehcache&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;ehcache&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.10.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;slf4j-nop&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.7.2&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;去各自的sql映射文件里,开启二级缓存,并把缓存类型指定为EhcacheCache&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt; &amp;lt;cache type=&amp;quot;org.mybatis.caches.ehcache.EhcacheCache&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在资源目录下放置一个缓存配置文件,文件名为: ehcache.xml 内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;ehcache xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
         xsi:noNamespaceSchemaLocation=&amp;quot;ehcache.xsd&amp;quot;
         updateCheck=&amp;quot;true&amp;quot; monitoring=&amp;quot;autodetect&amp;quot;
         dynamicConfig=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;diskStore path=&amp;quot;D:\msb\ehcache&amp;quot; /&amp;gt;
    &amp;lt;defaultCache
            maxElementsInMemory=&amp;quot;1000&amp;quot;
            maxElementsOnDisk=&amp;quot;10000000&amp;quot;
            eternal=&amp;quot;false&amp;quot;
            overflowToDisk=&amp;quot;true&amp;quot;
            timeToIdleSeconds=&amp;quot;120&amp;quot;
            timeToLiveSeconds=&amp;quot;120&amp;quot;
            diskExpiryThreadIntervalSeconds=&amp;quot;120&amp;quot;
            memoryStoreEvictionPolicy=&amp;quot;LRU&amp;quot;&amp;gt;
    &amp;lt;/defaultCache&amp;gt;
&amp;lt;/ehcache&amp;gt;
        &amp;lt;!--  Cache配置
        ·           name：Cache的唯一标识
        ·           maxElementsInMemory：内存中最大缓存对象数。
        ·           maxElementsOnDisk：磁盘中最大缓存对象数，若是0表示无穷大。
        ·           eternal：Element是否永久有效，一但设置了，timeout将不起作用。
        ·           overflowToDisk：配置此属性，当内存中Element数量达到maxElementsInMemory时，Ehcache将会Element写到磁盘中。
        ·           timeToIdleSeconds：设置Element在失效前的允许闲置时间。仅当element不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。
        ·           timeToLiveSeconds：设置Element在失效前允许存活时间。最大时间介于创建时间和失效时间之间。仅当element不是永久有效时使用，默认是0.，也就是element存活时间无穷大。
        ·           diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。
        ·           diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。
        ·           memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。     --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;11-逆向工程&#34;&gt;&lt;a href=&#34;#11-逆向工程&#34; class=&#34;headerlink&#34; title=&#34;11 逆向工程&#34;&gt;&lt;/a&gt;11 逆向工程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MyBatisPlus 内容，简略分析，可以参考后面具体内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MyBatis的一个主要的特点就是需要程序员自己编写SQL，那么如果表太多的话，难免会很麻烦，所以MyBatis官方提供了一个逆向工程，可以针对单表自动生成MyBatis执行所需要的代码（包括mapper.xml，mapper.java，pojo）。一般在开发中，常用的逆向工程方式是通过数据库的表生成代码。&lt;/p&gt;
&lt;p&gt;创建maven项目导入逆向工程依赖&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617221042957.png&#34; class=&#34;&#34; title=&#34;image-20220617221042957&#34;&gt;

&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependencies&amp;gt;
  
    &amp;lt;!-- mysql驱动包 --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;8.0.16&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!-- 日志包，方便查看执行信息--&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.6.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;!-- 代码生成工具jar --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mybatis.generator&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mybatis-generator-core&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;1.3.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置逆向工程配置文件 在resources目录下放置一个名为generatorConfig.xml的配置文件,文件内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE generatorConfiguration
  PUBLIC &amp;quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&amp;quot;
  &amp;quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&amp;quot;&amp;gt;
&amp;lt;generatorConfiguration&amp;gt;
   &amp;lt;context id=&amp;quot;testTables&amp;quot; targetRuntime=&amp;quot;MyBatis3&amp;quot;&amp;gt;
      &amp;lt;commentGenerator&amp;gt;
         &amp;lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&amp;gt;
         &amp;lt;property name=&amp;quot;suppressAllComments&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;/commentGenerator&amp;gt;
      &amp;lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&amp;gt;
      &amp;lt;!-- &amp;lt;jdbcConnection driverClass=&amp;quot;com.mysql.jdbc.Driver&amp;quot;
         connectionURL=&amp;quot;jdbc:mysql://localhost:3306/mybatis&amp;quot; userId=&amp;quot;root&amp;quot;
         password=&amp;quot;123&amp;quot;&amp;gt;
      &amp;lt;/jdbcConnection&amp;gt; --&amp;gt;
       &amp;lt;jdbcConnection driverClass=&amp;quot;com.mysql.cj.jdbc.Driver&amp;quot;
         connectionURL=&amp;quot;jdbc:mysql://127.0.0.1:3306/mydb?useSSL=false&amp;amp;amp;useUnicode=true&amp;amp;amp;characterEncoding=UTF-8&amp;amp;amp;serverTimezone=Asia/Shanghai&amp;amp;amp;allowPublicKeyRetrieval=true&amp;quot;
         userId=&amp;quot;root&amp;quot;
         password=&amp;quot;root&amp;quot;&amp;gt;
      &amp;lt;/jdbcConnection&amp;gt; 
      &amp;lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 
         NUMERIC 类型解析为java.math.BigDecimal --&amp;gt;
      &amp;lt;javaTypeResolver&amp;gt;
         &amp;lt;property name=&amp;quot;forceBigDecimals&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
      &amp;lt;/javaTypeResolver&amp;gt;
      &amp;lt;!-- targetProject:生成PO类的位置 --&amp;gt;
      &amp;lt;javaModelGenerator targetPackage=&amp;quot;com.msb.pojo&amp;quot;
         targetProject=&amp;quot;.\src&amp;quot;&amp;gt;
         &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
         &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
         &amp;lt;!-- 从数据库返回的值被清理前后的空格 --&amp;gt;
         &amp;lt;property name=&amp;quot;trimStrings&amp;quot; value=&amp;quot;true&amp;quot; /&amp;gt;
      &amp;lt;/javaModelGenerator&amp;gt;
        &amp;lt;!-- targetProject:mapper映射文件生成的位置 --&amp;gt;
      &amp;lt;sqlMapGenerator targetPackage=&amp;quot;com.msb.mapper&amp;quot;
         targetProject=&amp;quot;.\src&amp;quot;&amp;gt;
         &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
         &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
      &amp;lt;/sqlMapGenerator&amp;gt;
      &amp;lt;!-- targetPackage：mapper接口生成的位置 --&amp;gt;
      &amp;lt;javaClientGenerator type=&amp;quot;XMLMAPPER&amp;quot;
         targetPackage=&amp;quot;com.msb.mapper&amp;quot;
         targetProject=&amp;quot;.\src&amp;quot;&amp;gt;
         &amp;lt;!-- enableSubPackages:是否让schema作为包的后缀 --&amp;gt;
         &amp;lt;property name=&amp;quot;enableSubPackages&amp;quot; value=&amp;quot;false&amp;quot; /&amp;gt;
      &amp;lt;/javaClientGenerator&amp;gt;
      &amp;lt;!-- 指定数据库表 --&amp;gt;
      
      &amp;lt;table tableName=&amp;quot;dept&amp;quot; domainObjectName=&amp;quot;Dept&amp;quot;
       enableCountByExample=&amp;quot;false&amp;quot; enableUpdateByExample=&amp;quot;false&amp;quot; enableDeleteByExample=&amp;quot;false&amp;quot;    
               enableSelectByExample=&amp;quot;false&amp;quot; selectByExampleQueryId=&amp;quot;false&amp;quot; &amp;gt;
               &amp;lt;columnOverride column=&amp;quot;id&amp;quot; javaType=&amp;quot;Integer&amp;quot; /&amp;gt;
         &amp;lt;/table&amp;gt;
      
   &amp;lt;/context&amp;gt;
&amp;lt;/generatorConfiguration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在resources目录下放置一个名为log4j.properties的配置文件,文件内容如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;properties&#34;&gt;log4j.rootLogger=debug,stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.err
log4j.appender.stdout.layout=org.apache.log4j.SimpleLayout
log4j.appender.logfile=org.apache.log4j.FileAppender
log4j.appender.logfile.File=d:/msb.log
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=%d&amp;#123;yyyy-MM-dd HH:mm:ss&amp;#125; %l %F %p %m%n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行逆向工程代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.msb.gennerator;
import org.mybatis.generator.api.MyBatisGenerator;
import org.mybatis.generator.config.Configuration;
import org.mybatis.generator.config.xml.ConfigurationParser;
import org.mybatis.generator.internal.DefaultShellCallback;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
/**
 *
 */
public class GeneratorSqlmap &amp;#123;
    public void generator() throws Exception&amp;#123;
        List&amp;lt;String&amp;gt; warnings = new ArrayList&amp;lt;String&amp;gt;();
        boolean overwrite = true;
        File configFile = new File(&amp;quot;D:\\ideaProjects\\reverse\\target\\classes\\generatorConfig.xml&amp;quot;);
        ConfigurationParser cp = new ConfigurationParser(warnings);
        Configuration config = cp.parseConfiguration(configFile);
        DefaultShellCallback callback = new DefaultShellCallback(overwrite);
        MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config,
                callback, warnings);
        myBatisGenerator.generate(null);
    &amp;#125;
    public static void main(String[] args) throws Exception &amp;#123;
        try &amp;#123;
            GeneratorSqlmap generatorSqlmap = new GeneratorSqlmap();
            generatorSqlmap.generator();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成的实体类和Mapper接口和Mapper映射文件,包含了基本的CURD功能,哪里需要文件就放哪里&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/ORM/Mybatis/image-20220617221208040-1665157666426.png&#34; class=&#34;&#34; title=&#34;image-20220617221208040&#34;&gt;

&lt;h1 id=&#34;12-main目录下配置文件打包问题&#34;&gt;&lt;a href=&#34;#12-main目录下配置文件打包问题&#34; class=&#34;headerlink&#34; title=&#34;12 main目录下配置文件打包问题&#34;&gt;&lt;/a&gt;12 main目录下配置文件打包问题&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;build&amp;gt;
    &amp;lt;!--告诉maven将项目源码中的xml文件也进行编译，并放到编译目录中--&amp;gt;
    &amp;lt;resources&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/java&amp;lt;/directory&amp;gt;
            &amp;lt;includes&amp;gt;
                &amp;lt;include&amp;gt;**/*.xml&amp;lt;/include&amp;gt;
            &amp;lt;/includes&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;src/main/resources&amp;lt;/directory&amp;gt;
            &amp;lt;filtering&amp;gt;true&amp;lt;/filtering&amp;gt;
        &amp;lt;/resource&amp;gt;
    &amp;lt;/resources&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/Spring_Family/Spring/</guid>
            <title>Spring</title>
            <link>http://example.com/2022/10/07/Spring_Family/Spring/</link>
            <category>框架</category>
            <category>Spring</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;概念：&#34;&gt;&lt;a href=&#34;#概念：&#34; class=&#34;headerlink&#34; title=&#34;概念：&#34;&gt;&lt;/a&gt;概念：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Spring是**一个轻量级 **Java开发框架，目的是为了解决企业级应用开发的业务逻辑层和其他各层的耦合问题。它是一个分层的JavaSE&amp;#x2F;JavaEE full-stack（一站式）轻量级开源框架，为开发Java应用程序提供全面的基础架构支持。Spring负责基础架构，因此Java开发者可以专注于应用程序的开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring最根本的使命是&lt;strong&gt;解决企业级应用开发的复杂性，&lt;/strong&gt;即简化&lt;em&gt;Java&lt;/em&gt;开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Spring可以做很多事情，它为企业级开发提供给了丰富的功能，但是这些功能的底层都依赖于它的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个核心特性，也就是&lt;strong&gt;依赖注入（dependency injection，DI&lt;/strong&gt;）和&lt;strong&gt;面向切面编程&lt;/strong&gt;（&lt;strong&gt;aspect-&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;oriented programming，AOP）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了降低Java开发的复杂性，Spring采取了以下4种关键策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基于POJO的轻量级和最小侵入性编程；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过依赖注入和面向接口实现松耦合；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于切面和惯例进行声明式编程；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过切面和模板减少样板式代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Spring的俩大核心概念&#34;&gt;&lt;a href=&#34;#Spring的俩大核心概念&#34; class=&#34;headerlink&#34; title=&#34;Spring的俩大核心概念&#34;&gt;&lt;/a&gt;Spring的俩大核心概念&lt;/h1&gt;&lt;h2 id=&#34;IOC（控制翻转）：&#34;&gt;&lt;a href=&#34;#IOC（控制翻转）：&#34; class=&#34;headerlink&#34; title=&#34;IOC（控制翻转）：&#34;&gt;&lt;/a&gt;IOC（控制翻转）：&lt;/h2&gt;&lt;p&gt;控制翻转，也叫依赖注入，他就是不会直接创建对象，只是把对象声明出来，在代码 中不直&lt;/p&gt;
&lt;p&gt;接与对象和服务进行连接，但是在配置文件中描述了哪一项组件需要哪一项服 务，容器将他&lt;/p&gt;
&lt;p&gt;们组件起来。在一般的IOC场景中容器创建了所有的对象，并设置了必 要的属性将他们联系&lt;/p&gt;
&lt;p&gt;在一起，等到需要使用的时候才把他们声明出来，使用注解就跟 方便了，容器会自动根据注&lt;/p&gt;
&lt;p&gt;解把对象组合起来&lt;/p&gt;
&lt;h2 id=&#34;其中还有一个点DI-依赖注入&#34;&gt;&lt;a href=&#34;#其中还有一个点DI-依赖注入&#34; class=&#34;headerlink&#34; title=&#34;其中还有一个点DI(依赖注入)&#34;&gt;&lt;/a&gt;其中还有一个点DI(依赖注入)&lt;/h2&gt;&lt;h2 id=&#34;AOP（面对切面编程）&#34;&gt;&lt;a href=&#34;#AOP（面对切面编程）&#34; class=&#34;headerlink&#34; title=&#34;AOP（面对切面编程）&#34;&gt;&lt;/a&gt;AOP（面对切面编程）&lt;/h2&gt;&lt;p&gt;面对切面编程，这是一种编程模式，他允许程序员通过自定义的横切点进行模块 化，将那些&lt;/p&gt;
&lt;p&gt;影响多个类的行为封装到课重用的模块中。 例子：比如日志输出，不使用AOP的话就需要把&lt;/p&gt;
&lt;p&gt;日志的输出语句放在所有类中，方法 中，但是有了AOP就可以把日志输出语句封装一个可重&lt;/p&gt;
&lt;p&gt;用模块，在以声明的方式将他 们放在类中，每次使用类就自动完成了日志输出。&lt;/p&gt;
&lt;h1 id=&#34;Bean的生命周期&#34;&gt;&lt;a href=&#34;#Bean的生命周期&#34; class=&#34;headerlink&#34; title=&#34;Bean的生命周期&#34;&gt;&lt;/a&gt;Bean的生命周期&lt;/h1&gt;&lt;p&gt;1 通过构造器创建bean实例           执行构造器&lt;br&gt;2 为bean属性赋值                         执行set方法&lt;br&gt;3 初始化bean                                调用bean的初始化方法,需要配置指定调用的方法&lt;br&gt;4 bean的获取                                容器对象 getBean方法&lt;br&gt;5 容器关闭销毁bean                      调用销毁方法,需要配置指定调用的方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class User &amp;#123;
    private Integer userid;
    private String username;
    private String password;
    public void initUser()&amp;#123;
        System.out.println(&amp;quot;第三步:User初始化&amp;quot;);
    &amp;#125;
    public User() &amp;#123;
        System.out.println(&amp;quot;第一步:User构造&amp;quot;);
    &amp;#125;
    public void destoryUser()&amp;#123;
        System.out.println(&amp;quot;第五步:User销毁&amp;quot;);
    &amp;#125;
    @Override
    public String toString() &amp;#123;
        return &amp;quot;User&amp;#123;&amp;quot; +
                &amp;quot;userid=&amp;quot; + userid +
                &amp;quot;, username=&amp;#39;&amp;quot; + username + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;quot;, password=&amp;#39;&amp;quot; + password + &amp;#39;\&amp;#39;&amp;#39; +
                &amp;#39;&amp;#125;&amp;#39;;
    &amp;#125;
    public User(Integer userid, String username, String password) &amp;#123;
        this.userid = userid;
        this.username = username;
        this.password = password;
    &amp;#125;
    public void setUserid(Integer userid) &amp;#123;
        System.out.println(&amp;quot;setUserid&amp;quot;);
        this.userid = userid;
    &amp;#125;
    public void setUsername(String username) &amp;#123;
        System.out.println(&amp;quot;第二步:User属性赋值&amp;quot;);
        this.username = username;
    &amp;#125;
    public void setPassword(String password) &amp;#123;
        this.password = password;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置Bean&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
       xmlns:c=&amp;quot;http://www.springframework.org/schema/c&amp;quot;
       xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;
    &amp;lt;!--  --&amp;gt;
    &amp;lt;bean id=&amp;quot;user&amp;quot; class=&amp;quot;com.msb.bean.User&amp;quot; init-method=&amp;quot;initUser&amp;quot; destroy-method=&amp;quot;destoryUser&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;xiaoming&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据 Class、property 通过反射去找构造器创建实例，然后对property属性根据 set 方法注入依赖也叫赋值，&lt;/p&gt;
&lt;p&gt;通过指定 init-method(初始化方法) 来对我们的对象再次进行操作，第四步获取 Bean 对象，第五步项目结束Context销毁，调用销毁方法销毁Bean&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;以上我们是对一般的过程其实在这个基础上我们还可以再次增加两步，这个叫后置处理器，处理后的顺序：&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;1 通过构造器创建bean实例           执行构造器&lt;br&gt;2 为bean属性赋值                         执行set方法&lt;br&gt;&lt;font color=red&gt;3 把bean实例传递给bean的后置处理器的方法&lt;/font&gt;&lt;br&gt;4 初始化bean                                调用bean的初始化方法,需要配置指定调用的方法&lt;br&gt;&lt;font color=red&gt;5 把bean实例传递给bean的后置处理器的方法&lt;/font&gt;&lt;br&gt;6 bean的获取                                容器对象 getBean方法&lt;br&gt;7 容器关闭销毁bean                      调用销毁方法,需要配置指定调用的方法&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;添加后置处理器&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1 创建后置处理器 实现 BeanPostProcesser  重写两个方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanPostProcessor;
// 1 创建后置处理器 实现 BeanPostProcesser  重写两个方法
public class MyBeanProcesser implements BeanPostProcessor &amp;#123;
    @Override
    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException &amp;#123;
        //Object bean      实例化的bean
        //String beanName  bean的id
        System.out.println(&amp;quot;bean:初始化方法之前&amp;quot;);
        return bean;// 这里必须return bean
    &amp;#125;
    @Override
    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException &amp;#123;
        System.out.println(&amp;quot;bean:初始化方法之后&amp;quot;);
        return bean;// 这里必须returnbean
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2 配置后置处理器,对容器中的所有bean添加后置处理器的生命周期&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
       xmlns:c=&amp;quot;http://www.springframework.org/schema/c&amp;quot;
       xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;
    &amp;lt;bean id=&amp;quot;user&amp;quot; class=&amp;quot;com.msb.bean.User&amp;quot; init-method=&amp;quot;initUser&amp;quot; destroy-method=&amp;quot;destoryUser&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;xiaoming&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    
    &amp;lt;bean id=&amp;quot;myBeanProcesser&amp;quot; class=&amp;quot;com.msb.beanProcesser.MyBeanProcesser&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;BeanPostProcessor接口作用：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果我们想在Spring容器中完成bean实例化、配置以及其他初始化方法前后要添加一些自己逻辑处理。我们需要定义一个或多个BeanPostProcessor接口实现类，然后注册到Spring IoC容器中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、接口中的两个方法都要将传入的bean返回，而不能返回null，如果返回的是null那么我们通过getBean方法将得不到目标。&lt;br&gt;2、ApplicationContext会自动检测在配置文件中实现了BeanPostProcessor接口的所有bean，并把它们注册为后置处理器，然后在容器创建bean的适当时候调用它，因此部署一个后置处理器同部署其他的bean并没有什么区别。而使用BeanFactory实现的时候，bean 后置处理器必须通过代码显式地去注册，在IoC容器继承体系中的ConfigurableBeanFactory接口中定义了注册方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完整的过程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创建实例 –&amp;gt; set赋值 –&amp;gt; 再次初始化对象–&amp;gt; 获取Bean对象–&amp;gt; 销毁Bean对象&lt;/p&gt;
&lt;p&gt;创建实例 –&amp;gt; set赋值 –&amp;gt;把bean实例传递给bean的后置处理器的方法 –&amp;gt; 再次初始化对象 –&amp;gt; 把bean实例传递给bean的后置处理器的方法 —&amp;gt; 获取Bean对象–&amp;gt; 销毁Bean对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Bean自动装配&#34;&gt;&lt;a href=&#34;#Bean自动装配&#34; class=&#34;headerlink&#34; title=&#34;Bean自动装配&#34;&gt;&lt;/a&gt;Bean自动装配&lt;/h1&gt;&lt;p&gt;通过property标签可以手动指定给属性进行注入&lt;br&gt;我们也可以通过自动转配,完成&amp;#x3D;&amp;#x3D;属性的自动注入&amp;#x3D;&amp;#x3D;,就是自动装配,可以简化DI的配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
       xmlns:c=&amp;quot;http://www.springframework.org/schema/c&amp;quot;
       xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;
    &amp;lt;bean id=&amp;quot;dept&amp;quot; class=&amp;quot;com.msb.bean.Dept&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
    &amp;lt;!--
    autowire 属性控制自动将容器中的对象注入到当前对象的属性上
    byName 根据目标id值和属性值注入,要保证当前对象的属性值和目标对象的id值一致
    byType 根据类型注入,要保证相同类型的目标对象在容器中只有一个实例
    --&amp;gt;
    &amp;lt;bean id=&amp;quot;emp&amp;quot; class=&amp;quot;com.msb.bean.Emp&amp;quot; autowire=&amp;quot;byName&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;Spring注解管理Bean&#34;&gt;&lt;a href=&#34;#Spring注解管理Bean&#34; class=&#34;headerlink&#34; title=&#34;Spring注解管理Bean&#34;&gt;&lt;/a&gt;Spring注解管理Bean&lt;/h1&gt;&lt;h2 id=&#34;1注解方式创建对象IOC&#34;&gt;&lt;a href=&#34;#1注解方式创建对象IOC&#34; class=&#34;headerlink&#34; title=&#34;1注解方式创建对象IOC&#34;&gt;&lt;/a&gt;1注解方式创建对象IOC&lt;/h2&gt;&lt;p&gt;导入依赖 aop&lt;/p&gt;
&lt;p&gt;@Component    放在类上,用于标记,告诉spring当前类需要由容器实例化bean并放入容器中&lt;br&gt;  该注解有三个子注解&lt;br&gt;  @Controller   用于实例化controller层bean&lt;br&gt;        @Service        用于实例化service层bean&lt;br&gt;        @Repository  用于实例化持久层bean&lt;br&gt;  当不确定是哪一层,就用Component&lt;br&gt;这几个注解互相混用其实也可以,但是不推荐&lt;/p&gt;
&lt;h2 id=&#34;2注解方式依赖注入DI&#34;&gt;&lt;a href=&#34;#2注解方式依赖注入DI&#34; class=&#34;headerlink&#34; title=&#34;2注解方式依赖注入DI&#34;&gt;&lt;/a&gt;2注解方式依赖注入DI&lt;/h2&gt;&lt;p&gt;@Autowired   根据属性数据类型自动装配&lt;br&gt;@Qualifier      根据属性名称注入依赖&lt;br&gt;@Resources   可以根据类型,也可以根据名称注入&lt;br&gt;@Value           注入普通数据类型(8+String)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// 详解 
/*
    * @Autowired
    * 根据类型到容器中去寻找对应的对象,找到后给当前属性赋值
    * 不需要依赖 set方法
    * 属性类型可以是接口,会自动匹配对应的实现类对象
    * @Autowired配合 @Qualifier,可以通过名称指定注入的对象
    *
    * @Resource 如果不配置name 那么就是根据类型注入
    * @Resource(name=&amp;quot;userDaoImplB&amp;quot;) 配置name,就是根据名称注入
    *
    *
    * @Resource  是JDK中javax包的注解
    * @Autowired 和 @Qualifier 是spring中的注解
    *
    * @Value 可以个普通属性赋值
    * @Value 可以使用$&amp;#123;&amp;#125;这种表达式获取系统的变量值
    *        或者是.properties属性配置文件中的值
    *
    * */
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;代理&#34;&gt;&lt;a href=&#34;#代理&#34; class=&#34;headerlink&#34; title=&#34;代理&#34;&gt;&lt;/a&gt;代理&lt;/h1&gt;&lt;p&gt;&lt;em&gt;概念&lt;/em&gt;：在使用对象的时候，不直接使用用一个代理对象代理他，这样可以在目标&lt;strong&gt;对象基础上增强额外的功能&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;分类&lt;/em&gt;：静态代理，动态代理&lt;/p&gt;
&lt;h2 id=&#34;静态代理&#34;&gt;&lt;a href=&#34;#静态代理&#34; class=&#34;headerlink&#34; title=&#34;静态代理&#34;&gt;&lt;/a&gt;静态代理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;​	静态代理中&lt;strong&gt;代理类&lt;/strong&gt;与&lt;strong&gt;被代理类&lt;/strong&gt;都&lt;strong&gt;需要实现同一个接口&lt;/strong&gt;，这就说明我们的&lt;strong&gt;一个静态代理类只能代理一个类&lt;/strong&gt;，并且还要事先知道我们&lt;strong&gt;要代理哪个类才能写代理类&lt;/strong&gt;，如果我们&lt;strong&gt;有其他类还想使用代理那就必须再写一个代理类&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	然而在实际开发中我们是可能是有非常多的类是需要被代理的，并且事先我们可能并不知道我们要代理哪个类。所以如果继续使用静态代理反而会增加许多的工作量，并且&lt;strong&gt;效率低下&lt;/strong&gt;，&lt;strong&gt;代码复用率也不好&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class Test1 &amp;#123;
    public static void main(String[] args) &amp;#123;
        /**
        lawyer律师代替Person张三打官司，不用张三直接打，可以更加清楚
        */
        Person person =new Person(&amp;quot;张三&amp;quot;);
        Court court=new Lawyer(person);
        court.doCourt();
    &amp;#125;
&amp;#125;
// 接口
interface Court&amp;#123;
    void doCourt();
&amp;#125;
// 代理类
class Lawyer implements Court&amp;#123;
    private Person person;
    public Lawyer(Person person) &amp;#123;
        this.person = person;
    &amp;#125;
    @Override
    public void doCourt() &amp;#123;
        System.out.println(&amp;quot;律师取证:视频证明张三当时正在旅游,不在案发现场&amp;quot;);
        System.out.println(&amp;quot;律师总结:张三不可能去杀人&amp;quot;);
        person.doCourt();
    &amp;#125;
&amp;#125;
// 被代理的类
class Person implements Court&amp;#123;
    private String name;
    public Person(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    @Override
    public void doCourt() &amp;#123;
        System.out.println(name+&amp;quot;说:我没有杀人&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;动态代理&#34;&gt;&lt;a href=&#34;#动态代理&#34; class=&#34;headerlink&#34; title=&#34;动态代理&#34;&gt;&lt;/a&gt;动态代理&lt;/h2&gt;&lt;p&gt;&lt;em&gt;概念&lt;/em&gt;：动态代理可以&lt;strong&gt;针对&lt;/strong&gt;于一些&lt;strong&gt;不特定的类&lt;/strong&gt;或者一些&lt;strong&gt;不特定的方法&lt;/strong&gt;进行代理,我们可以在程序运行时动态的变化代理的规则，&lt;strong&gt;代理类在程序运行时才创建的代理模式成为动态代理&lt;/strong&gt;。这种情况下，代理类并不是在Java代码中定义好的，而是在程序运行时根据我们的在Java代码中的“指示”动态生成的&lt;/p&gt;
&lt;p&gt;实现方法：JDK自带的Proxy、CJlib&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Proxy&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;JDK动态代理&lt;/strong&gt;&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;strong&gt;面向接口&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;&lt;strong&gt;cglib&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;&lt;strong&gt;第三方动态代理&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;em&gt;&lt;strong&gt;面向父类&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;实现案例：&lt;/p&gt;
&lt;p&gt;Proxy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ProxyTest1 &amp;#123;

    public static void main(String[] args) &amp;#123;
        Dinner dinner = new Person(&amp;quot;张三&amp;quot;);
        ClassLoader loader = dinner.getClass().getClassLoader();
        Class&amp;lt;?&amp;gt;[] interfaces = dinner.getClass().getInterfaces();
        /*
           Object proxy, 代理对象
           Method method,被代理的方法
           Object[] args,被代理方法运行时的实参
         */
        /*InvocationHandler invocationHandler = (proxy,
                                              method,
                                              params)-&amp;gt;&amp;#123;
            System.out.println(&amp;quot;invoked 方法执行&amp;quot;);

            return null;
        &amp;#125;;*/
        InvocationHandler invocationHandler = new InvocationHandler() &amp;#123;
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &amp;#123;
                Object res = new Object();

                if (method.getName().equals(&amp;quot;eat&amp;quot;)) &amp;#123;
                    System.out.println(&amp;quot;饭前洗手&amp;quot;);
                    // 让原有的eat的方法去运行
                    res =method.invoke(dinner, args);
                    System.out.println(&amp;quot;饭后刷碗&amp;quot;);
                &amp;#125;
                else&amp;#123;
                    // 如果是其他方法,那么正常执行就可以了
                    res =method.invoke(dinner, args);
                &amp;#125;
                return res;
            &amp;#125;
        &amp;#125;;

        /**
         * 动态代理
         * 需要三次个参数 loader代理类，增强的对象，
         *              interfaces 实现的接口，
         *              增强方法 invoke()
         */
        Dinner dinner1 = (Dinner) Proxy.newProxyInstance(loader,interfaces,invocationHandler);
        dinner1.eat(&amp;quot;包子&amp;quot;);
    &amp;#125;
&amp;#125;
interface Dinner&amp;#123;
    void eat(String foodName);
    void drink();
&amp;#125;

class Person implements Dinner&amp;#123;
    private String name;
    public Person(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    @Override
    public void eat(String foodName) &amp;#123;
        System.out.println(name+&amp;quot;正在吃&amp;quot;+foodName);
    &amp;#125;
    @Override
    public void drink( ) &amp;#123;
        System.out.println(name+&amp;quot;正在喝茶&amp;quot;);
    &amp;#125;
&amp;#125;
class Student implements Dinner&amp;#123;
    private String name;
    public Student(String name) &amp;#123;
        this.name = name;
    &amp;#125;
    @Override
    public void eat(String foodName) &amp;#123;
        System.out.println(name+&amp;quot;正在食堂吃&amp;quot;+foodName);
    &amp;#125;
    @Override
    public void drink( ) &amp;#123;
        System.out.println(name+&amp;quot;正在喝可乐&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cglib&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class ProxyTest2 &amp;#123;

    public static void main(String[] args) &amp;#123;
        // 获取一个Person的代理对象
        Person person = new Person();
        // 1 获得一个Enhancer对象
        Enhancer enhancer = new Enhancer();
        // 2 设置父类字节码
        enhancer.setSuperclass(Person.class);
        // 3 获取MethodIntercepter对象 用于定义增强规则
        MethodInterceptor methodInterceptor = new MethodInterceptor() &amp;#123;
            /*
            * Object o 生成之后的代理对象 personProxy
            * Method method 父类中原本要执行的方法  Person&amp;gt;&amp;gt;&amp;gt; eat()要增强的方法（还没有被增强，父类方法）
            * Object[] objects 实际传入的参数
            * MethodProxy methodProxy 子类中重写父类的方法 personProxy &amp;gt;&amp;gt;&amp;gt; eat()代理对象增强的方法（增强的方法，子类对象）
            * */
            @Override
            public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable &amp;#123;
                Object res = null;

                if (method.getName().equals(&amp;quot;eat&amp;quot;)) &amp;#123;
                    System.out.println(&amp;quot;饭前洗手&amp;quot;);
                    res=methodProxy.invokeSuper(o,objects);
                    System.out.println(&amp;quot;饭后刷碗&amp;quot;);
                &amp;#125;else&amp;#123;
                    // 如果是其他方法 不增强运行
                    res=methodProxy.invokeSuper(o,objects); // 子类对象方法在执行,默认会调用父类对应被重写的方法
                &amp;#125;
                return res;
            &amp;#125;
        &amp;#125;;
        // 4 设置methodInterceptor
        enhancer.setCallback(methodInterceptor);
        // 5 获得代理对象
        Person personProxy = (Person)enhancer.create();
        // 6 使用代理对象完成功能
        personProxy.eat(&amp;quot;包子&amp;quot;);
    &amp;#125;
&amp;#125;

class Person  &amp;#123;
    public Person( ) &amp;#123;
    &amp;#125;
    public void eat(String foodName) &amp;#123;
        System.out.println(&amp;quot;张三正在吃&amp;quot;+foodName);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;总结&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;不修改原有代码&lt;/strong&gt;的 或者没有办法修改原有代码的情况下  &lt;strong&gt;增强对象功能&lt;/strong&gt;  &lt;strong&gt;使用代理对象&lt;/strong&gt; 代替原来的对象去完成功能进而达到拓展功能的目的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JDK Proxy 动态代理面向接口的动态代理&lt;/strong&gt;  一定&lt;strong&gt;要有接口&lt;/strong&gt;和&lt;strong&gt;实现类&lt;/strong&gt;的存在 代理对象&lt;strong&gt;增强的是实现类&lt;/strong&gt; 在实现接口的方法重写的方法   生成的代理对象只能转换成 接口的不能转换成 被代理类代理对象只能增强接口中定义的方法  &lt;strong&gt;实现类中其他和接口无关的方法是无法增强的代理对象只能读取到接口中方法上的注解 不能读取到实现类方法上的注解&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;AOP&#34;&gt;&lt;a href=&#34;#AOP&#34; class=&#34;headerlink&#34; title=&#34;AOP&#34;&gt;&lt;/a&gt;AOP&lt;/h1&gt;&lt;p&gt;全名：Aspect Oriented Programmings，面向切面编程，通过&lt;strong&gt;预编译&lt;/strong&gt;和&lt;strong&gt;运行时生成动态代理&lt;/strong&gt;实现程序功能的统一维护的一种技术。AOP是OOP的延续，是Spring框架的一个重要内容，是函数式编程的一种衍生范式。利用AOP可以对业务逻辑的各个部分进行隔离，从而使各个部分的耦合性降低，提高程序的可重用行，提高开发效率。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;AOP切面编程一般可以帮助我们在不修改现有代码的情况下,对程序的功能进行拓展,往往用于实现 日志处理,权限控制,性能检测,事务控制等&lt;br&gt;AOP实现的原理就是动态代理,在有接口的情况下,使用JDK动态代理,在没有接口的情况下使用cglib动态代理&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/Spring/image-20220716162550876.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;AOP中的术语辨析&lt;/p&gt;
&lt;p&gt;1 连接点 Joint point：类里面那些可以被增强的方法&lt;/p&gt;
&lt;p&gt;2 切入点 Pointcu：实际被增强的方法,称之为切入点&lt;/p&gt;
&lt;p&gt;3 通知 Advice:：实际增强的逻辑部分称为通知 (增加的功能)&lt;/p&gt;
&lt;p&gt;4 目标对象 Target：被增强功能的对象(被代理的对象)&lt;/p&gt;
&lt;p&gt;5 切面Aspect： 表现为功能相关的一些advice方法放在一起声明成的一个Java类&lt;/p&gt;
&lt;p&gt;6 织入 Weaving：创建代理对象并实现功能增强的声明并运行过程&lt;/p&gt;
&lt;p&gt;具体操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/*
事先准备 dao 以及他的实现类
我们直接编写 Aspect 层的代码
*/

@Component
@Aspect
public class DaoAspect &amp;#123;
    /*
    切入点表达式: 通过一个表达式来确定AOP要增强的是哪个或者那些方法
    语法结构:execution([权限修饰符][返回值类型][类的全路径名][方法名](参数 列表) )
    execution(* com.msb.dao.UserDaoImpl.add(..))   //指定切点为UserDaoImpl.add方法
    execution(* com.msb.dao.UserDaoImpl.*(..))     //指定切点为UserDaoImpl.所有的方法
    execution(* com.msb.dao.*.*(..))               //指定切点为dao包下所有的类中的所有的方法
    execution(* com.msb.dao.*.add(..))             // 指定切点为dao包下所有的类中的add的方法
    execution(* com.msb.dao.*.add*(..))            // 指定切点为dao包下所有的类中的add开头的方法
    *  */
    //定义公共切点
    @Pointcut(&amp;quot;execution( * com.zjj.aop.dao.*.add*(..) )&amp;quot;)
    public void addPointCut()&amp;#123;

    &amp;#125;

    /*
     * 前置通知: 切点方法执行之前先执行的功能
     * 参数列表可以用JoinPoint接收切点对象
     * 可以获取方法执行的参数
     * */
    @Before(&amp;quot;addPointCut()&amp;quot;) // 这里用了公共切点，不然又要写一次公共切点上的 @PointCut()
    public void methodBefore(JoinPoint joinPoint) &amp;#123;
        System.out.println(&amp;quot;Before invoked&amp;quot;);
    &amp;#125;


    /*
     * 后置通知:方法执行之后要增强的功能
     * 无论切点方法是否出现异常都会执行的方法
     * 参数列表可以用JoinPoint接收切点对象
     * */
    @After(&amp;quot;addPointCut()&amp;quot;)
    public void methodAfter(JoinPoint joinPoint)&amp;#123;
        System.out.println(&amp;quot;After invoked&amp;quot;);
    &amp;#125;

    /*
     * 返回通知:切点方法正常运行结束后增强的功能
     * 如果方法运行过程中出现异常,则该功能不运行
     * 参数列表可以用 JoinPoint joinPoint接收切点对象
     * 可以用Object res接收方法返回值,需要用returning指定返回值名称
     * */
    @AfterReturning( value = &amp;quot;addPointCut()&amp;quot;,returning = &amp;quot;res&amp;quot;)
    public void methodAfterReturning(JoinPoint joinPoint,Object res)&amp;#123;
        System.out.println(&amp;quot;AfterReturning invoked&amp;quot;);
    &amp;#125;
    /*
     * 异常通知:切点方法出现异常时运行的增强功能
     * 如果方法运行没有出现异常,则该功能不运行
     * 参数列表可以用Exception ex接收异常对象 需要通过throwing指定异常名称
     * */
    @AfterThrowing( value = &amp;quot;addPointCut()&amp;quot;,throwing = &amp;quot;ex&amp;quot;)
    public void methodAfterThrowing(Exception ex)&amp;#123;
        System.out.println(&amp;quot;AfterThrowing invoked&amp;quot;);
    &amp;#125;

    /*环绕通知:在切点方法之前和之后都进行功能的增强
     * 需要在通知中定义方法执行的位置,并在执行位置之前和之后自定义增强的功能
     * 方法列表可以通过ProceedingJoinPoint获取执行的切点
     * 通过proceedingJoinPoint.proceed()方法控制切点方法的执行位置
     * proceedingJoinPoint.proceed()方法会将切点方法的返回值获取到,并交给我们,可以做后续处理
     * 我们在环绕通知的最后需要将切点方法的返回值继续向上返回,否则切点方法在执行时接收不到返回值
     * */
    @Around(&amp;quot;addPointCut()&amp;quot;)
    public Object methodAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &amp;#123;
        System.out.println(&amp;quot;aroundA invoked&amp;quot;);
        Object proceed = proceedingJoinPoint.proceed();
        System.out.println(&amp;quot;aroundB invoked&amp;quot;);
        return proceed;
    &amp;#125;

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootTest(classes = MyAOPSpringApplication.class)
public class SpringAOPTests &amp;#123;
    @Resource
    ApplicationContext context;
    @Test
    public void t1() &amp;#123;
        UserService userService = context.getBean(UserService.class);
        userService.addUser(10, &amp;quot;小明&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;aroundA invoked&lt;/p&gt;
&lt;p&gt;Before invoked&lt;/p&gt;
&lt;p&gt;userDao add … …&lt;/p&gt;
&lt;p&gt;AfterReturning invoked&lt;/p&gt;
&lt;p&gt;After invoked&lt;/p&gt;
&lt;p&gt;aroundB invoked&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试题&lt;/p&gt;
&lt;p&gt;如果在不使用框架的前提下你要做权限的校验你会怎么做?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我会在要鉴权的方法加入环绕通知，在请求到方法前先进行一次查找，一般这些数据我们会在redis中也会存储一个，第一次查过来我们去redis中找，找到直接让他操作并且在之后提交事务，但是没找到的时候我们先让他去操作，但是不提交事务，同时去数据库中查找他的信息，找到后添加redis，提交事务，没找到就回滚事务即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;事务&#34;&gt;&lt;a href=&#34;#事务&#34; class=&#34;headerlink&#34; title=&#34;事务&#34;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;h2 id=&#34;事务的概念&#34;&gt;&lt;a href=&#34;#事务的概念&#34; class=&#34;headerlink&#34; title=&#34;事务的概念&#34;&gt;&lt;/a&gt;事务的概念&lt;/h2&gt;&lt;p&gt;事务（Transaction）指的是一个操作序列，该操作序列中的多个操作要么都做，要么都不做，是一个不可分割的工作单位，是数据库环境中的逻辑工作单位，由DBMS中的事务管理子系统负责事务的处理。&lt;/p&gt;
&lt;p&gt;目前常用的存储引擎有InnoDB（MySQL5.5以后默认的存储引擎）和MyISAM（MySQL5.5之前默认的存储引擎），其中InnoDB支持事务处理机制，而MyISAM不支持。&lt;/p&gt;
&lt;h2 id=&#34;事务的特性&#34;&gt;&lt;a href=&#34;#事务的特性&#34; class=&#34;headerlink&#34; title=&#34;事务的特性&#34;&gt;&lt;/a&gt;事务的特性&lt;/h2&gt;&lt;p&gt;事务处理可以确保除非事务性序列内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的序列，可以简化错误恢复并使应用程序更加可靠。&lt;/p&gt;
&lt;p&gt;但并不是所有的操作序列都可以称为事务，这是因为一个操作序列要成为事务，必须满足事务的原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）。这四个特性简称为ACID特性。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/Spring/image-20220716210341261.png&#34; class=&#34;&#34;&gt;


&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;原子性
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;原子是自然界最小的颗粒，具有不可再分的特性。事务中的所有操作可以看做一个原子，事务是应用中不可再分的最小的逻辑执行体。&lt;/p&gt;
&lt;p&gt;使用事务对数据进行修改的操作序列，要么全部执行，要么全不执行。通常，某个事务中的操作都具有共同的目标，并且是相互依赖的。如果数据库系统只执行这些操作中的一部分，则可能会破坏事务的总体目标，而原子性消除了系统只处理部分操作的可能性。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; 一致性
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一致性是指事务执行的结果必须使数据库从一个一致性状态，变到另一个一致性状态。当数据库中只包含事务成功提交的结果时，数据库处于一致性状态。一致性是通过原子性来保证的。&lt;/p&gt;
&lt;p&gt;例如：在转账时，只有保证转出和转入的金额一致才能构成事务。也就是说事务发生前和发生后，数据的总额依然匹配。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt; 隔离性
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;隔离性是指各个事务的执行互不干扰，任意一个事务的内部操作对其他并发的事务，都是隔离的。也就是说：并发执行的事务之间既不能看到对方的中间状态，也不能相互影响。&lt;/p&gt;
&lt;p&gt;例如：在转账时，只有当A账户中的转出和B账户中转入操作都执行成功后才能看到A账户中的金额减少以及B账户中的金额增多。并且其他的事务对于转账操作的事务是不能产生任何影响的。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;持久性
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;持久性指事务一旦提交，对数据所做的任何改变，都要记录到永久存储器中，通常是保存进物理数据库，即使数据库出现故障，提交的数据也应该能够恢复。但如果是由于外部原因导致的数据库故障，如硬盘被损坏，那么之前提交的数据则有可能会丢失。&lt;/p&gt;
&lt;h2 id=&#34;事务的并发问题&#34;&gt;&lt;a href=&#34;#事务的并发问题&#34; class=&#34;headerlink&#34; title=&#34;事务的并发问题&#34;&gt;&lt;/a&gt;事务的并发问题&lt;/h2&gt;&lt;p&gt;脏读（Dirty read）&lt;/p&gt;
&lt;p&gt;当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/Spring/image-20220716210633569.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;不可重复读&lt;/p&gt;
&lt;p&gt;（Unrepeatableread）: 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/Spring/image-20220716210640447.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;幻读&lt;/p&gt;
&lt;p&gt;（Phantom read）: 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/Spring/image-20220716210646452.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;strong&gt;不可重复度和幻读区别：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;不可重复读的重点是修改，幻读的重点在于新增或者删除。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;例1（同样的条件, 你读取过的数据, 再次读取出来发现值不一样了 ）：事务1中的A先生读取自己的工资为 1000的操作还没完成，事务2中的B先生就修改了A的工资为2000，导 致A再读自己的工资时工资变为 2000；这就是不可重复读。&lt;/p&gt;
&lt;p&gt;例2（同样的条件, 第1次和第2次读出来的记录数不一样 ）：假某工资单表中工资大于3000的有4人，事务1读取了所有工资大于3000的人，共查到4条记录，这时事务2又插入了一条工资大于3000的记录，事务1再次读取时查到的记录就变为了5条，这样就导致了幻读&lt;/p&gt;
&lt;h2 id=&#34;事务的隔离级别&#34;&gt;&lt;a href=&#34;#事务的隔离级别&#34; class=&#34;headerlink&#34; title=&#34;事务的隔离级别&#34;&gt;&lt;/a&gt;事务的隔离级别&lt;/h2&gt;&lt;p&gt;事务的隔离级别用于决定如何控制并发用户读写数据的操作。数据库是允许多用户并发访问的，如果多个用户同时开启事务并对同一数据进行读写操作的话，有可能会出现脏读、不可重复读和幻读问题，所以MySQL中提供了四种隔离级别来解决上述问题。&lt;/p&gt;
&lt;p&gt;事务的隔离级别从低到高依次为READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ以及SERIALIZABLE，隔离级别越低，越能支持高并发的数据库操作。&lt;/p&gt;
&lt;p&gt;​                                   &lt;/p&gt;
&lt;h2 id=&#34;spring中可以使用如下方式实现事务的控制&#34;&gt;&lt;a href=&#34;#spring中可以使用如下方式实现事务的控制&#34; class=&#34;headerlink&#34; title=&#34;spring中可以使用如下方式实现事务的控制&#34;&gt;&lt;/a&gt;spring中可以使用如下方式实现事务的控制&lt;/h2&gt;&lt;p&gt;1 编程式(不推荐)&lt;/p&gt;
&lt;p&gt;2 声明式(掌握)&lt;/p&gt;
&lt;p&gt;​	1) 注解(简单,必会)&lt;/p&gt;
&lt;p&gt;​	2) XML配置(繁琐,了解)&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;Spring声明式事务的实现方式,底层就是AOP,AOP的底层就是动态代理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spring事务管理相关的API&lt;/p&gt;
&lt;p&gt;事务管理器接口: PlatformTransactionManager  针对不同的框架,提供了不同的实现类&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/Spring/image-20220716210813110.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;注解方式实现事务控制&lt;br&gt;在applicationContext.xml配置事务相关的配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
       xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
       xmlns:p=&amp;quot;http://www.springframework.org/schema/p&amp;quot;
       xmlns:c=&amp;quot;http://www.springframework.org/schema/c&amp;quot;
       xmlns:util=&amp;quot;http://www.springframework.org/schema/util&amp;quot;
       xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
       xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot;
       xmlns:tx=&amp;quot;http://www.springframework.org/schema/tx&amp;quot;
       xsi:schemaLocation=&amp;quot;
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
&amp;quot;&amp;gt;
    &amp;lt;!--spring 注解扫描--&amp;gt;
    &amp;lt;context:component-scan base-package=&amp;quot;com.msb&amp;quot;/&amp;gt;
    &amp;lt;!--读取jdbc配置文件--&amp;gt;
    &amp;lt;context:property-placeholder location=&amp;quot;classpath:jdbc.properties&amp;quot;/&amp;gt;
    &amp;lt;!--配置德鲁伊连接池--&amp;gt;
    &amp;lt;bean id=&amp;quot;dataSource&amp;quot; class=&amp;quot;com.alibaba.druid.pool.DruidDataSource&amp;quot;&amp;gt;
        &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;$&amp;#123;jdbc_username&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;$&amp;#123;jdbc_password&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;$&amp;#123;jdbc_url&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
        &amp;lt;property name=&amp;quot;driverClassName&amp;quot; value=&amp;quot;$&amp;#123;jdbc_driver&amp;#125;&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--配置JDBCTemplate对象,并向里面注入DataSource--&amp;gt;
    &amp;lt;bean id=&amp;quot;jdbcTemplate&amp;quot; class=&amp;quot;org.springframework.jdbc.core.JdbcTemplate&amp;quot;&amp;gt;
        &amp;lt;!--通过set方法注入连接池--&amp;gt;
        &amp;lt;property name=&amp;quot;dataSource&amp;quot; ref=&amp;quot;dataSource&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--配置一个事务管理器--&amp;gt;
    &amp;lt;bean id=&amp;quot;transactionManager&amp;quot; class=&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&amp;gt;
        &amp;lt;!--将数据源注入事务管理器--&amp;gt;
        &amp;lt;property name=&amp;quot;dataSource&amp;quot;  ref=&amp;quot;dataSource&amp;quot;&amp;gt;&amp;lt;/property&amp;gt;
    &amp;lt;/bean&amp;gt;
    &amp;lt;!--开启事务注解--&amp;gt;
    &amp;lt;tx:annotation-driven transaction-manager=&amp;quot;transactionManager&amp;quot;/&amp;gt;
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Service
//@Transactional //加在类上,代表类中的所有方法都添加了事务控制
public class AccountServiceImpl implements AccountService &amp;#123;
    @Autowired
    private AccountDao accountDao;
    @Override
    @Transactional// 放在方法上,就是仅仅对当前方法增加了事务控制
    public int transMoney(int from, int to, int money) &amp;#123;
        int rows=0;
        rows+=accountDao.transMoney(from, 0 - money);
        int i =1/0;
        rows+=accountDao.transMoney(to, money);
        return rows;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次测试,就算是service方法运行出现异常,自动会回滚,如果没有,那么自动提交&lt;/p&gt;
&lt;p&gt;@Transactional 注解的一些参数和参数的含义&lt;br&gt;@Transactional(propagation &amp;#x3D; Propagation.REQUIRED,isolation &amp;#x3D; Isolation.READ_UNCOMMITTED,readOnly &amp;#x3D; true,rollbackFor &amp;#x3D; ClassCastException.class,noRollbackFor &amp;#x3D; NullPointerException.class,timeout &amp;#x3D; 10)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Target(&amp;#123;ElementType.TYPE, ElementType.METHOD&amp;#125;)
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Transactional &amp;#123;
    @AliasFor(&amp;quot;transactionManager&amp;quot;)
    String value() default &amp;quot;&amp;quot;;
    @AliasFor(&amp;quot;value&amp;quot;)
    String transactionManager() default &amp;quot;&amp;quot;;
    String[] label() default &amp;#123;&amp;#125;;
    Propagation propagation() default Propagation.REQUIRED;
    Isolation isolation() default Isolation.DEFAULT;
    int timeout() default -1;
    String timeoutString() default &amp;quot;&amp;quot;;
    boolean readOnly() default false;
    Class&amp;lt;? extends Throwable&amp;gt;[] rollbackFor() default &amp;#123;&amp;#125;;
    String[] rollbackForClassName() default &amp;#123;&amp;#125;;
    Class&amp;lt;? extends Throwable&amp;gt;[] noRollbackFor() default &amp;#123;&amp;#125;;
    String[] noRollbackForClassName() default &amp;#123;&amp;#125;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;propagation-事务的传播行为-面试&#34;&gt;&lt;a href=&#34;#propagation-事务的传播行为-面试&#34; class=&#34;headerlink&#34; title=&#34;propagation  事务的传播行为(面试)&#34;&gt;&lt;/a&gt;propagation  事务的传播行为(面试)&lt;/h2&gt;&lt;p&gt;多事务方法之间调用,事务是如何管理的&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;事务传播行为类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_REQUIRED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。这是最常见的选择(默认)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_SUPPORTS&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;支持当前事务，如果当前没有事务，就以非事务方式执行。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_MANDATORY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;使用当前的事务，如果当前没有事务，就抛出异常。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_REQUIRES_NEW&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;新建事务，如果当前存在事务，把当前事务挂起。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_NOT_SUPPORTED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_NEVER&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;以非事务方式执行，如果当前存在事务，则抛出异常。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PROPAGATION_NESTED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与PROPAGATION_REQUIRED类似的操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如果service层  add方法调用了 addDept和addEmp两个方法&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;em&gt;&lt;strong&gt;PROPAGATION_REQUIRED&lt;/strong&gt;&lt;/em&gt;&amp;#x3D;&amp;#x3D;&lt;br&gt;如果add方法有事务,那么addDept和addEmp就加入到add方法里的事务&lt;br&gt;如果add方法没有事务,那么就新建一个事务,将addDept和addEmp加入到这个新的事务中&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;em&gt;&lt;strong&gt;PROPAGATION_REQUIRES_NEW&lt;/strong&gt;&lt;/em&gt;&amp;#x3D;&amp;#x3D;&lt;br&gt;无论add是否有事务,都建立一个新的事务,所有的方法都加入到新的事务中,add原来的事务就不用了&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;isolation 事务的隔离级别&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;DEFAULT （默认）&lt;br&gt;这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别。另外四个与JDBC的隔离级别相对应。&lt;br&gt;MySQL默认REPEATABLE_READ&lt;br&gt;Oracle默认READ_COMMITTED&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;READ_UNCOMMITTED （读未提交）&lt;br&gt;这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;READ_COMMITTED （读已提交）&lt;br&gt;保证一个事务修改的数据提交后才能被另外一个事务读取，另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;REPEATABLE_READ （可重复读）&lt;br&gt;这种事务隔离级别可以防止脏读、不可重复读，但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了不可重复读。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SERIALIZABLE（串行化）&lt;br&gt;这是花费最高代价但是最可靠的事务隔离级别，事务被处理为顺序执行。除了防止脏读、不可重复读外，还避免了幻像读。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;timeout 超时时间&lt;/em&gt;&lt;br&gt;事务一定要在多长时间之内提交,如果不提交就会回滚&lt;/p&gt;
&lt;p&gt;&lt;em&gt;readOnly 只读事务&lt;/em&gt;&lt;br&gt;事务是否只能读取数据库的数据,如果为true,则不允许进行增删改&lt;/p&gt;
&lt;p&gt;&lt;em&gt;rollbackFor 指定发生回滚的异常&lt;/em&gt;&lt;br&gt;当方法发生哪些异常时才会回滚&lt;/p&gt;
&lt;p&gt;&lt;em&gt;noRollbackFor 指定不发生回滚的异常&lt;/em&gt;&lt;br&gt;当方法发生哪些异常时,不会回滚&lt;/p&gt;
&lt;h1 id=&#34;面试题&#34;&gt;&lt;a href=&#34;#面试题&#34; class=&#34;headerlink&#34; title=&#34;面试题&#34;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;h2 id=&#34;spring的循环依赖是什么？怎么解决&#34;&gt;&lt;a href=&#34;#spring的循环依赖是什么？怎么解决&#34; class=&#34;headerlink&#34; title=&#34;spring的循环依赖是什么？怎么解决?&#34;&gt;&lt;/a&gt;spring的循环依赖是什么？怎么解决?&lt;/h2&gt;&lt;p&gt;循环依赖：&lt;/p&gt;
&lt;p&gt;​	指循环引用，是两个或多个Bean之间相互持有对方的引用&lt;/p&gt;
&lt;p&gt;三种依赖方式：&lt;/p&gt;
&lt;p&gt;​	1、A依赖B ,B依赖A 	   					——&amp;gt; 直接依赖&lt;/p&gt;
&lt;p&gt;​	2、A依赖C，C依赖B，B依赖A	   ——&amp;gt; 间接依赖&lt;/p&gt;
&lt;p&gt;​	3、A依赖A 											——&amp;gt; 自我依赖&lt;/p&gt;
&lt;p&gt;为什么会产生这个问题呢？&lt;/p&gt;
&lt;p&gt;​	因为我们的 Spring 其中一大特点就是Spring IOC 、DI，Spring会自动帮我们创建对象和对对象赋值，而一旦产生循环依赖问题就会导致我们初始化的时候陷入阻塞状态，最终导致Spring容器都无法启动&lt;/p&gt;
&lt;p&gt;解决办法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	使用缓存，缓存就是将所有缓存好的Bean，全部放在一个容器中缓存起来，并且呢，将已经完全实例化，但是没有完成赋值的Bean标记起来。然后呢，再Bean第一次实例化完成后，在扫描一次容器将没有完成赋值的Bean的属性完成赋值就可以了。(@Autowriter的对象)&lt;/p&gt;
&lt;p&gt;目前循环依赖只在属性&amp;#x3D;&amp;#x3D;set注入&amp;#x3D;&amp;#x3D;且&amp;#x3D;&amp;#x3D;单例&amp;#x3D;&amp;#x3D;的情况下才能解决&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;解决循环依赖问题一定要使用二级缓存吗？&#34;&gt;&lt;a href=&#34;#解决循环依赖问题一定要使用二级缓存吗？&#34; class=&#34;headerlink&#34; title=&#34;解决循环依赖问题一定要使用二级缓存吗？&#34;&gt;&lt;/a&gt;解决循环依赖问题一定要使用二级缓存吗？&lt;/h2&gt;&lt;p&gt;不一定，但是为什么又要设计二级缓存？假设我们只有一个缓存容器，并且缓存是直接开放给用户可以调用的，未完成赋值的Bean和已完成赋值的Bean全部放入一个容器的话，调用者就有可能会拿到未赋值的Bean，这对于用户来说是没有意义的，可能会造成空指针异常。所以基于这样的考虑，Spring将能够直接提供给用户使用的Bean放在了一级缓存中，这样的Bean称之为终态Bean；将已经完成初始化，但还不能提供给用户使用的Bean放在了二级缓存，称之为临时Bean。&lt;/p&gt;
&lt;h2 id=&#34;为什么在二级缓存的基础上还要创建三级缓存&#34;&gt;&lt;a href=&#34;#为什么在二级缓存的基础上还要创建三级缓存&#34; class=&#34;headerlink&#34; title=&#34;为什么在二级缓存的基础上还要创建三级缓存&#34;&gt;&lt;/a&gt;为什么在二级缓存的基础上还要创建三级缓存&lt;/h2&gt;&lt;p&gt;Spring中的有很多的注入的Bean需要去创建代理的Bean，但是不是所有的Bean都需要去实例化之后就立马要创建代理Bean，是要等到Bean初始化之后，完成之后才能够去创建代理Bean，因此的循环依赖呢Spring又不得不去提前的创建代理Bean，如果不创建代理Bean，注入原始的Bean就会产生错误。所以Spring设计三级缓存专门存储这些代理Bean，但是每个代理Bean的Bean的创建规则他又不一样，因此呢，Spring的三级缓存中并不是直接去保存代理Bean的引用，而是保存了创建代理Bean的Factory&lt;/p&gt;
&lt;h2 id=&#34;什么是-Spring-三级缓存？&#34;&gt;&lt;a href=&#34;#什么是-Spring-三级缓存？&#34; class=&#34;headerlink&#34; title=&#34;什么是 Spring 三级缓存？&#34;&gt;&lt;/a&gt;什么是 Spring 三级缓存？&lt;/h2&gt;&lt;p&gt;singletonObjects   		 		&amp;lt;ConCurrentHashMap&amp;lt;&amp;gt; 	  ——&amp;gt;   	 一级缓存&lt;/p&gt;
&lt;p&gt;earlySingletonObjects	 	&amp;lt;HashMap&amp;lt;&amp;gt;				  			——&amp;gt;   	 二级缓存&lt;/p&gt;
&lt;p&gt;singletonFactories				&amp;lt;HashMap&amp;lt;&amp;gt;						 	 ——&amp;gt;   	 三级缓存&lt;/p&gt;
&lt;p&gt;一级缓存就是终态缓存；二级缓存就是临时缓存；三级缓存就是代理工厂的缓存&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/Spring/image-20220821162504894.png&#34; class=&#34;&#34;&gt;




&lt;h2 id=&#34;什么情况下循环依赖无法解决？&#34;&gt;&lt;a href=&#34;#什么情况下循环依赖无法解决？&#34; class=&#34;headerlink&#34; title=&#34;什么情况下循环依赖无法解决？&#34;&gt;&lt;/a&gt;什么情况下循环依赖无法解决？&lt;/h2&gt;&lt;p&gt;1、多实例Bean 通过 set注入无法解决&lt;/p&gt;
&lt;p&gt;2、构造器注入注入的Bean无法解决&lt;/p&gt;
&lt;p&gt;3、单里的代理Bean通过 set注入无法解决&lt;/p&gt;
&lt;p&gt;4、设置@DependsOn注解的Bean注入无法解决&lt;/p&gt;
&lt;h2 id=&#34;后序补充……&#34;&gt;&lt;a href=&#34;#后序补充……&#34; class=&#34;headerlink&#34; title=&#34;后序补充…….&#34;&gt;&lt;/a&gt;后序补充…….&lt;/h2&gt;
&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/Spring_Family/SpringBoot/</guid>
            <title>SpringBoot</title>
            <link>http://example.com/2022/10/07/Spring_Family/SpringBoot/</link>
            <category>框架</category>
            <category>Spring</category>
            <category>SpringBoot</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&#34;原有Spring优缺点分析&#34;&gt;&lt;a href=&#34;#原有Spring优缺点分析&#34; class=&#34;headerlink&#34; title=&#34;原有Spring优缺点分析&#34;&gt;&lt;/a&gt;原有Spring优缺点分析&lt;/h2&gt;&lt;p&gt;优点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring是Java企业版（JAVAEE)开发的一种相对简单的方法，通过依赖注入和面向切面编程，用简单 的Java对象实现了EJB&amp;#x3D;&amp;#x3D;(Enterprise Java Beans技术的简称, 又被称为企业Java Beans)&amp;#x3D;&amp;#x3D;的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;虽然Spring的组件&lt;strong&gt;代码是轻量级&lt;/strong&gt;的，但它的&lt;strong&gt;配置却是重量级&lt;/strong&gt;的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;依赖管理&lt;/strong&gt;也是一件耗时耗力的事情，会产生版本不兼容的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;SpringBoot概念简介&#34;&gt;&lt;a href=&#34;#SpringBoot概念简介&#34; class=&#34;headerlink&#34; title=&#34;SpringBoot概念简介&#34;&gt;&lt;/a&gt;SpringBoot概念简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Spring Boot是Spring公司的一个顶级项目，和Spring Framework是一个级别的。&lt;br&gt;Spring Boot实际上是利用Spring Framework 4 自动配置特性完成。编写项目时不需要编写xml文件。发展到现在，Spring Boot已经具有很很大的生态圈，各种主流技术已经都提供了Spring Boot的启动器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;什么是启动器&#34;&gt;&lt;a href=&#34;#什么是启动器&#34; class=&#34;headerlink&#34; title=&#34;什么是启动器&#34;&gt;&lt;/a&gt;什么是启动器&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Spring框架在项目中作用是Spring整合各种其他技术，让其他技术使用更加方便。Spring Boot的启动器&lt;strong&gt;实际上就是一个依赖&lt;/strong&gt;。这个依赖中包含了整个这个技术的相关jar包，还包含了这个技术的自动配置，以前绝大多数XML配置都不需要配置了。当然了，启动器中自动配置无法实现所有内容的自动配置，在使用Spring Boot时还需要进行少量的配置（这个配置不是在xml中了，而是在properties或yml中即可）。如果是&lt;strong&gt;Spring自己封装的启动器&lt;/strong&gt;的artifact id&lt;strong&gt;名字满足：spring-boot-starter-&lt;em&gt;xxxx&lt;/em&gt;&lt;/strong&gt;，如果是&lt;strong&gt;第三方公司提供的启动&lt;/strong&gt;满足：&lt;strong&gt;&lt;em&gt;xxxx&lt;/em&gt;-spring-boot-starter&lt;/strong&gt;。以后每次使用Spring Boot整合其他技术时首先需要考虑导入启动器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Spring-Boot优点&#34;&gt;&lt;a href=&#34;#Spring-Boot优点&#34; class=&#34;headerlink&#34; title=&#34;Spring Boot优点&#34;&gt;&lt;/a&gt;Spring Boot优点&lt;/h1&gt;&lt;p&gt;①　使用Spring Boot可以创建独立的Spring应用程序&lt;br&gt;②　在Spring Boot中&lt;strong&gt;直接嵌入了Tomcat&lt;/strong&gt;、Jetty、Undertow等Web  容器，在使用SpringBoot做Web开发时&lt;strong&gt;不需要部署WAR文件&lt;/strong&gt;&lt;br&gt;③　通过提供自己的启动器(Starter)依赖，简化项目构建配置&lt;br&gt;④　尽量的自动配置Spring和第三方库&lt;br&gt;⑤　绝对没有代码生成，也不需要XML配置文件&lt;/p&gt;
&lt;h1 id=&#34;Spring-Boot的核心&#34;&gt;&lt;a href=&#34;#Spring-Boot的核心&#34; class=&#34;headerlink&#34; title=&#34;Spring Boot的核心&#34;&gt;&lt;/a&gt;Spring Boot的核心&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;起步依赖&lt;/strong&gt;：起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。 简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自动配置&lt;/strong&gt; ：Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定 Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。&lt;/p&gt;
&lt;h1 id=&#34;启动原理分析&#34;&gt;&lt;a href=&#34;#启动原理分析&#34; class=&#34;headerlink&#34; title=&#34;启动原理分析&#34;&gt;&lt;/a&gt;启动原理分析&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringBoot/%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE.jpg&#34; class=&#34;&#34;&gt;




&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;static class Registrar implements ImportBeanDefinitionRegistrar, DeterminableImports &amp;#123;
    @Override
    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) &amp;#123;
        register(registry, new PackageImports(metadata).getPackageNames().toArray(new String[0]));
    &amp;#125;
    @Override
    public Set&amp;lt;Object&amp;gt; determineImports(AnnotationMetadata metadata) &amp;#123;
        return Collections.singleton(new PackageImports(metadata));
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将配置类@SpringBootApplication标注的类所在包及下面所有子包里的所有组件扫描到spring容器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;protected List&amp;lt;String&amp;gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) &amp;#123;
        List&amp;lt;String&amp;gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),
                getBeanClassLoader());
        Assert.notEmpty(configurations, &amp;quot;No auto configuration classes found in META-INF/spring.factories. If you &amp;quot;
                + &amp;quot;are using a custom packaging, make sure that file is correct.&amp;quot;);
        return configurations;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;通过 getCandidateConfigurations读取自带的配置文件，得到他们的全路径名，通过反射创建他们&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;异常处理和拦截器&#34;&gt;&lt;a href=&#34;#异常处理和拦截器&#34; class=&#34;headerlink&#34; title=&#34;异常处理和拦截器&#34;&gt;&lt;/a&gt;异常处理和拦截器&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;均与SpringMVC中处理一致&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;分页&#34;&gt;&lt;a href=&#34;#分页&#34; class=&#34;headerlink&#34; title=&#34;分页&#34;&gt;&lt;/a&gt;分页&lt;/h1&gt;&lt;p&gt;主要参数：&lt;/p&gt;
&lt;p&gt;当前页 、一页n个(每页的数量)、 总条数&lt;/p&gt;
&lt;h2 id=&#34;属性介绍&#34;&gt;&lt;a href=&#34;#属性介绍&#34; class=&#34;headerlink&#34; title=&#34;属性介绍&#34;&gt;&lt;/a&gt;属性介绍&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;属性名&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;默认值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;overflow&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;boolean&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;false&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;溢出总页数后是否进行处理&lt;br/&gt;(默认不处理,参见 &lt;code&gt;插件#continuePage&lt;/code&gt; 方法)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;maxLimit&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Long&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;单页分页条数限制&lt;br/&gt;(默认无限制,参见 &lt;code&gt;插件#handlerLimit&lt;/code&gt; 方法)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;dbType&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DbType&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;数据库类型&lt;br/&gt;(根据类型获取应使用的分页方言,参见 &lt;code&gt;插件#findIDialect&lt;/code&gt; 方法)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;dialect&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;IDialect&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;方言实现类&lt;br/&gt;(参见 &lt;code&gt;插件#findIDialect&lt;/code&gt; 方法)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;建议单一数据库类型的均设置 dbType&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @GetMapping(&amp;quot;/test&amp;quot;)
    public Response test()&amp;#123;
        Page&amp;lt;Produce&amp;gt; producePage = new Page&amp;lt;&amp;gt;(1,1);
        Page&amp;lt;Produce&amp;gt; page = produceService.page(producePage);
        System.out.println(producePage == page);
        List&amp;lt;Produce&amp;gt; records = page.getRecords();
        for (Produce record : records) &amp;#123;
            System.out.println(record);
        &amp;#125;
        return new Response&amp;lt;&amp;gt;(records, ResultEnum.SUCCESS);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringBoot/656c18aaaf9ed11fee9b9f1576cc840f.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;默认是会查询总条数，都有get、set方法，可以根据自己的需求设置（点开Page类看看）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringBoot/d0e0280ca8a9d46a4a41c4a1de89ab3c.png&#34; class=&#34;&#34;&gt;










&lt;h1 id=&#34;项目打包和部署&#34;&gt;&lt;a href=&#34;#项目打包和部署&#34; class=&#34;headerlink&#34; title=&#34;项目打包和部署&#34;&gt;&lt;/a&gt;项目打包和部署&lt;/h1&gt;&lt;h2 id=&#34;打包&#34;&gt;&lt;a href=&#34;#打包&#34; class=&#34;headerlink&#34; title=&#34;打包&#34;&gt;&lt;/a&gt;打包&lt;/h2&gt;&lt;p&gt;SpringBoot项目打包在linux服务器中运行:&lt;br&gt;    ①jar类型项目会打成jar包:&lt;br&gt;    jar类型项目使用SpringBoot打包插件打包时，会在打成的jar中内置一个tomcat的jar。所以我们可以使用jdk直接运行该jar项目可，jar项目中有一个功能，将功能代码放到其内置的tomcat中运行。我们直接使用浏览器访问即可。&lt;br&gt;    ②war类型项目会打成war包:&lt;br&gt;    在打包时需要将内置的tomcat插件排除，配置servlet的依赖。将war正常的放到tomcat服务器中运行即可。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringBoot/image-20220718170542347.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;部署&#34;&gt;&lt;a href=&#34;#部署&#34; class=&#34;headerlink&#34; title=&#34;部署&#34;&gt;&lt;/a&gt;部署&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;注：这里是部署到Tomcat（war），jar直接编译启动&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;第一步：&#34;&gt;&lt;a href=&#34;#第一步：&#34; class=&#34;headerlink&#34; title=&#34;第一步：&#34;&gt;&lt;/a&gt;第一步：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;在部署到Tomcat 之前我们要将我们项目中的Tomcat(==它在Web中==)去掉，但是我们在项目中又有可能要使用他提供的jar包 HttpServlet 之类的，所以我们还需要再将它手动导入，但是他不需要他打包。
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!--配置SpringBoot的web启动器--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
    &amp;lt;!--排除web启动中自动依赖的tomcat插件--&amp;gt;
    &amp;lt;exclusions&amp;gt;
        &amp;lt;exclusion&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
        &amp;lt;/exclusion&amp;gt;
    &amp;lt;/exclusions&amp;gt;
&amp;lt;/dependency&amp;gt;

&amp;lt;!--
    手动依赖tomcat插件，但是表明项目打包时该依赖不会被打进去，目的主要是保证开发阶段本地SpringBoot
    项目可以正常运行
--&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-tomcat&amp;lt;/artifactId&amp;gt;
    &amp;lt;!--打包的时候可以不用包进去，别的设施会提供。事实上该依赖理论上可以参与编译，测试，运行等周期。
        相当于compile，但是打包阶段做了exclude操作--&amp;gt;
    &amp;lt;scope&amp;gt;provided&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;第二步：&#34;&gt;&lt;a href=&#34;#第二步：&#34; class=&#34;headerlink&#34; title=&#34;第二步：&#34;&gt;&lt;/a&gt;第二步：&lt;/h3&gt;&lt;p&gt;SpringBoot的&lt;strong&gt;启动类继承SpringBootServletInitializer&lt;/strong&gt;，并&lt;strong&gt;重写configure&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
public class MyApplication extends SpringBootServletInitializer &amp;#123;
    //重写配置方法
    @Override
    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &amp;#123;
        return application.sources(MyApplication.class);
    &amp;#125;
    public static void main(String[] args) &amp;#123;
        //启动SpringBoot
        SpringApplication.run(MyApplication.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用package命令打包项目，并将war包放到tomcat下的webapps下，启动tomcat即可。&lt;/p&gt;
&lt;h3 id=&#34;注：&#34;&gt;&lt;a href=&#34;#注：&#34; class=&#34;headerlink&#34; title=&#34;注：&#34;&gt;&lt;/a&gt;注：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;部署到tomcat之后我们的URL就会变化，tomcat会自动编译war包，我们的&lt;strong&gt;项目名和war包同名&lt;/strong&gt;，所以不想改变提前修改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;端口号也是tomcat的端口号&lt;/strong&gt;（tomcat&amp;#x2F;conf&amp;#x2F;server.xml）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;面试题&#34;&gt;&lt;a href=&#34;#面试题&#34; class=&#34;headerlink&#34; title=&#34;面试题&#34;&gt;&lt;/a&gt;面试题&lt;/h1&gt;&lt;h2 id=&#34;SpringBoot约定大于配置理解&#34;&gt;&lt;a href=&#34;#SpringBoot约定大于配置理解&#34; class=&#34;headerlink&#34; title=&#34;SpringBoot约定大于配置理解&#34;&gt;&lt;/a&gt;SpringBoot约定大于配置理解&lt;/h2&gt;&lt;p&gt;约定大于配置是一种开发原则，就是减少人为的配置，直接用默认的配置就能获得我们想要的结果。&lt;br&gt;　　SpringBoot的约定大于配置，按我的理解是：对比SpringMVC，需要在web.xml里面配置前端控制器，还需要在核心配置文件（*-servlet.xml）中配置视图解析器啥的，更要配置第三方的Tomcat服务器。而SpringBoot就不需要我们配置这些，他内嵌了Tomcat服务器，我们只需要在Maven配置文件（Pom.xml）里面导入SpringMVC所需要的依赖就可以了。&lt;br&gt;　　这就是SpringBoot的优势，在传统所需要配置的地方，SpringBoot都进行了约定（配置好了），开发人员能配置得更少，更直接地开发项目，写业务逻辑代码。&lt;br&gt;spring boot和maven的约定大于配置体现 点：&lt;br&gt;　　1.maven的目录文件结构&lt;br&gt;　　1）默认有resources文件夹,存放资源配置文件。src-main-resources,src-main-java&lt;br&gt;默认的编译生成的类都在targetwen。&lt;br&gt;　　2）默认有target文件夹，将生成class文件盒编程生成的jar存放在target文件夹下&lt;/p&gt;
&lt;p&gt;2.spring boot默认的配置文件必须是，也只能是application.命名的yml文件或者properties文件，且唯一&lt;/p&gt;
&lt;p&gt;1）spring boot默认只会去src-main-resources文件夹下去找application配置文件&lt;/p&gt;
&lt;p&gt;这个问题呢，我从四个方面来回答。&lt;/p&gt;
&lt;p&gt;首先，约定优于配置是一种软件设计的范式，它的核心思想，是减少软件开发人员对于配置项的。从而让开发人员更加聚焦在业务逻辑上&lt;/p&gt;
&lt;p&gt;第二个呢，Spring boot就是约定优于配置这一理念下的产物，它类似于spring框架下的一个脚手架，通过spring boot，我们可以快速开发基于spring生态下的应用程序。基于传统的spring框架开发web应用的时候，我们需要做很多和业务无关，并且只需要做一次的配置项，比如&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;管理架包的依赖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;web.xml的维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;spring MVC中的一个叫 Dispatch-Servlet.x ml 配置项的一个维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;应用需要自己手动去部署到web容器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三方组件集成到spring IOC容器中，我们需要做配置项的维护&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;而在SpringBoot中，我们不再需要去做这些繁琐的配置，因为SpringBoot已经帮我们自动完成了，而完成这样一个动作的前提就是基于&amp;#x3D;&amp;#x3D;约定优于配置&amp;#x3D;&amp;#x3D;这样一个思想。&lt;/p&gt;
&lt;p&gt;最后呢，Spring boot约定优于配置的体现有很多，&lt;/p&gt;
&lt;p&gt;比如第一个spring boat start启动依赖，它能够帮助我们管理所有的jar包版本。&lt;/p&gt;
&lt;p&gt;第二个，如果当前的应用依赖了web这样一个 jar 包，那么spring boot会自动内置Tomcat，他们看着容器来去运行web应用，我们不再需要去单独进行应用部署。&lt;/p&gt;
&lt;p&gt;第三，Spring boot的自动装配机制的实现中，通过扫描约定路径下的spring.factory文件去进行识别配置类，从而去实现类的自动装载&lt;/p&gt;
&lt;p&gt;第四，Spring boot？默认会加载resource目录下的application.property文件。总的来说啊，约定优于配置呢，是一个比较常见的软件设计思想，它的核心本质都是为了去更加高效，以及更加便捷的去实现软件系统的开发和维护。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自我总结：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	约定大于配置，不是说我们要设定啥，原来规定的是什么就不能改变，不是这个意思。他真正的意思是说当我们配置某个选项时，springboot会自动帮我们加载可能会与其相关的配置，就好比我们应用依赖了 web，那么spring boot会自动内置Tomcat，他们看着容器来去运行web应用，我们不再需要去单独进行应用部署。&lt;/p&gt;
&lt;p&gt;​	总的来说啊，约定优于配置呢，是一个比较常见的软件设计思想，它的核心本质都是为了去更加高效，以及更加便捷的去实现软件系统的开发和维护。&lt;/p&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/Spring_Family/SpringMVC/</guid>
            <title>SpringMVC</title>
            <link>http://example.com/2022/10/07/Spring_Family/SpringMVC/</link>
            <category>框架</category>
            <category>Spring</category>
            <category>SpringMVC</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220716212203883.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;M   model      模型层   DAO封装        &amp;gt;&amp;gt;&amp;gt; Mybatis&lt;br&gt;V    view         视图层   html css js  jsp&lt;br&gt;C    controller 控制层   Servlet封装    &amp;gt;&amp;gt;&amp;gt; springMVC &lt;/p&gt;
&lt;p&gt;SpringMVC是spring为展现层提供的基于MVC设计理念的优秀WEB框架,是目前最主流的MVC框架之一&lt;br&gt;SpringMVC通过一套注解,可以让普通的JAVA类成为contrllor控制器,无需继承Servlet,实现了控制层和Servlet之间的解耦&lt;br&gt;SpringMVC支持Rest风格的URL写法&lt;br&gt;SpringMVC采用了松耦合,可热插的主键结构,比其他的框架更具扩展性和灵活性&lt;/p&gt;
&lt;h1 id=&#34;执行流程&#34;&gt;&lt;a href=&#34;#执行流程&#34; class=&#34;headerlink&#34; title=&#34;执行流程&#34;&gt;&lt;/a&gt;执行流程&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220717190437596.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220717190445738.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;1DispatcherServlet：前端控制器&lt;br&gt;用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由 它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2 HandlerMapping：处理器映射器&lt;/strong&gt;&lt;br&gt;HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的 映射方式，例如：配置文件方式，实现接口方式，注解方式等。&lt;/p&gt;
&lt;p&gt;3 Handler：处理器 (自己定义的Controller处理单元)&lt;br&gt;它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由 Handler 对具体的用户请求进行处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4 HandlAdapter：处理器适配器&lt;/strong&gt;&lt;br&gt;通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行&lt;/p&gt;
&lt;p&gt;5 View Resolver：视图解析器&lt;br&gt;View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名 即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。&lt;/p&gt;
&lt;p&gt;6 View：视图&lt;br&gt;SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开 发具体的页面。&lt;/p&gt;
&lt;p&gt;7 &lt;span class=&#34;exturl&#34; data-url=&#34;bXZjOmFubm90YXRpb24tZHJpdmVu&#34;&gt;mvc:annotation-driven&lt;/span&gt;说明&lt;br&gt;在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。&lt;br&gt;使 用 &lt;span class=&#34;exturl&#34; data-url=&#34;bXZjOmFubm90YXRpb24tZHJpdmVu&#34;&gt;mvc:annotation-driven&lt;/span&gt; 自动加载 RequestMappingHandlerMapping （处理映射器） 和 RequestMappingHandlerAdapter （ 处 理 适 配 器 ） ， 可 用 在 SpringMVC.xml 配 置 文 件 中 使 用 &lt;span class=&#34;exturl&#34; data-url=&#34;bXZjOmFubm90YXRpb24tZHJpdmVu&#34;&gt;mvc:annotation-driven&lt;/span&gt;替代注解处理器和适配器的配置。&lt;/p&gt;
&lt;p&gt;HandlerMapping的实现类的作用&lt;br&gt;实现类RequestMappingHandlerMapping，它会处理@RequestMapping 注解，并将其注册到请求映射表中。&lt;/p&gt;
&lt;p&gt;HandlerAdapter的实现类的作用&lt;br&gt;实现类RequestMappingHandlerAdapter，则是处理请求的适配器，确定调用哪个类的哪个方法，并且构造方法参数，返回值。&lt;/p&gt;
&lt;p&gt;当配置了mvc:annotation-driven&amp;#x2F;后，Spring就知道了我们启用注解驱动。然后Spring通过context:component-scan&amp;#x2F;标签的配置，会自动为我们将扫描到的@Component，@Controller，@Service，@Repository等注解标记的组件注册到工厂中，来处理我们的请求,这个时候接收返回json数据、参数验证、统一异常等功能。&lt;/p&gt;
&lt;h1 id=&#34;重要注解&#34;&gt;&lt;a href=&#34;#重要注解&#34; class=&#34;headerlink&#34; title=&#34;重要注解&#34;&gt;&lt;/a&gt;重要注解&lt;/h1&gt;&lt;h2 id=&#34;1、RequestMapping&#34;&gt;&lt;a href=&#34;#1、RequestMapping&#34; class=&#34;headerlink&#34; title=&#34;1、RequestMapping&#34;&gt;&lt;/a&gt;1、RequestMapping&lt;/h2&gt;&lt;p&gt;紧耦合方式(了解)&lt;br&gt;DispatcherServlet中的service方法直接将此次请求的request对象传递给调用的单元方法即可。同时在单元方法上声明形参HttpServletRequest来接收request实参即可。&lt;br&gt;&lt;strong&gt;解耦合方式(熟练)&lt;/strong&gt;&lt;br&gt;DispatcherServlet在其service方法中将请求数据根据需求从request对象中获取出来后，将数据直接传递给对应的单元方法使用。同时在单元方法上直接声明对应的形参接收请求数据即可。在单元方法上声明形参来接收请求数据时，形参名必须和请求数据的键名一致，DispatcherServlet会将调用单元方法的形参名作为请求数据的键名获取请求数据，然后传递给单元方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RestController
public class TestDataController &amp;#123;
    /*紧耦合方式参数注入
    * 使用传统的HttpServletRequest对象获取参数  javax.servlet
    * */
    @RequestMapping(&amp;quot;/getParamByRequest.do&amp;quot;)
    public String getParam1(HttpServletRequest req, HttpServletResponse resp)&amp;#123;
        String username = req.getParameter(&amp;quot;username&amp;quot;);
        String password = req.getParameter(&amp;quot;password&amp;quot;);
        System.out.println(&amp;quot;username:&amp;quot;+username+&amp;quot;   password:&amp;quot;+password);
        return &amp;quot;getParamSuccess&amp;quot;;
    &amp;#125;
    /*解耦合方式参数注入
    * HttpServletRequest对象获取参数 通过SpringMVC框架功能,自动转换参数
    * 处理单元参数列表中参数名必须和请求中的参数名一致
                                        * 如不一致,可以通过@RequestParma注解进行转换
    * */
    @RequestMapping(&amp;quot;/getParamByArgName.do&amp;quot;)
    public String getParam2(String username,@RequestParam(&amp;quot;pwd&amp;quot;) int password)&amp;#123;
        System.out.println(&amp;quot;username:&amp;quot;+username+&amp;quot;   password:&amp;quot;+password);
        return &amp;quot;getParamSuccess&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2、PathVariable注解和RESTful风格的支持&#34;&gt;&lt;a href=&#34;#2、PathVariable注解和RESTful风格的支持&#34; class=&#34;headerlink&#34; title=&#34;2、PathVariable注解和RESTful风格的支持&#34;&gt;&lt;/a&gt;2、PathVariable注解和RESTful风格的支持&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;普通形式的url&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;*/contextPath/aaa.do
*/contextPath/aaa.jsp
*/contextPath/aaa.html
*/contextPath/css/aaa.css
*/contextPath/js/aaa.js
*/contextPath/aaa.do?id=10&amp;amp;username=root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;restFul风格的url&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;*/contextPath/aaa/10/root
*/contextPath/aaa
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class PathController &amp;#123;
    @RequestMapping(&amp;quot;/testPathVariable/&amp;#123;id&amp;#125;/&amp;#123;username&amp;#125;&amp;quot;)
    public String testPathVariable(@PathVariable(&amp;quot;id&amp;quot;) Integer id, @PathVariable(&amp;quot;username&amp;quot;) String username)&amp;#123;
        System.out.println(&amp;quot;id:&amp;quot;+id);
        System.out.println(&amp;quot;username:&amp;quot;+username);
        System.out.println(&amp;quot;testPathVariable1&amp;quot;);
        return &amp;quot;success&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220717191056216.png&#34; class=&#34;&#34;&gt;


&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220717191104583-1661419340091.png&#34; class=&#34;&#34;&gt;






&lt;h1 id=&#34;响应处理&#34;&gt;&lt;a href=&#34;#响应处理&#34; class=&#34;headerlink&#34; title=&#34;响应处理&#34;&gt;&lt;/a&gt;响应处理&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220717191212189-1661419342477.png&#34; class=&#34;&#34;&gt;




&lt;p&gt;1、单元方法返回值为void&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220717191318663-1661419344199.png&#34; class=&#34;&#34;&gt;


&lt;blockquote&gt;
&lt;p&gt;在SpringMVC中如果对于当前的控制单元，没有写对应的返回值，这个时候&lt;strong&gt;SpringMVC就会找和自己控制单元名称一致的页面展示&lt;/strong&gt;，&lt;strong&gt;如果没有配置视图解析器的前缀和后缀是没有产生404&lt;/strong&gt;,需要注意控制单元仍然可以进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、转发和重定向ServletAPI 实现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;demo1&amp;quot;)
    public void testDemo1(HttpServletRequest request, HttpServletResponse response) throws Exception &amp;#123;
        // 请求转发
        //request.getRequestDispatcher(&amp;quot;/forward.jsp&amp;quot;).forward(request,response);
        // 响应重定向
        response.sendRedirect(request.getContextPath()+&amp;quot;/redirect.jsp&amp;quot;);
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;单元方法的返回值类型设置void。因为使用response对象在单元方法中直接对此次请求进行了响应，不再通过DispatcherServlet了，既然已经响应了，就不需要再给DispatcherServlet返回值了。在单元方法上声明HttpServletResponse形参，来接收此次请求的response对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、使用forward关键字完成响应&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; /*
    * 返回字符串告诉DispatcherServlet跳转的路径
    * 在路径之前放上一个forward: 关键字,就是请求转发
    * 如果路径前的关键字是forward,那么可以省略不写
    * */
    @RequestMapping(&amp;quot;demo2&amp;quot;)
    public String testDemo2() throws Exception &amp;#123;
        //return &amp;quot;forward:/forwardPage.jsp&amp;quot;;
        return &amp;quot;/forwardPage.jsp&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用通过单元方法的返回值来告诉DispatcherServlet请求转发指定的资源,如果是请求转发，&lt;strong&gt;forward关键字可以&lt;em&gt;省略不写&lt;/em&gt;的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、使用redirect关键字完成响应&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/*
     * 返回字符串告诉DispatcherServlet跳转的路径
     * 在路径之前放上一个redirect: 关键字,就是重定向
     * 如果路径前的关键字是redirect,那么不可以省略
     * /表示当前项目下.这里不需要项目的上下文路径
     * */
    @RequestMapping(&amp;quot;demo3&amp;quot;)
    public String testDemo3() throws Exception &amp;#123;
        return &amp;quot;redirect:/redirectPage.jsp&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用通过单元方法的返回值来告诉DispatcherServlet重定向指定的资源，注意这个&lt;strong&gt;redirect关键字&lt;em&gt;不可以省去&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5、使用View视图转发和重定向&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; @RequestMapping(&amp;quot;demo4&amp;quot;)
    public View testDemo4(HttpServletRequest req)   &amp;#123;
        View  view =null;
        // 请求转发
        //view =new InternalResourceView(&amp;quot;/forwardPage.jsp&amp;quot;);
        // 重定向
        view=new RedirectView(req.getContextPath()+&amp;quot;/redirectPage.jsp&amp;quot;);
        return view;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;RedirectView中所做的操作，最终的实现是在renderMergedOutputModel中完成实现的，简单来说RedirectView实现了链接的重定向，并且将数据保存到FlashMap中，这样在跳转后的链接中可以获取一些数据.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6、使用ModelAndView转发重定向&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;demo5&amp;quot;)
    public ModelAndView testDemo5(HttpServletRequest req)   &amp;#123;
        ModelAndView mv=new ModelAndView();
        // 请求转发
        //mv.setViewName(&amp;quot;forward:/forwardPage.jsp&amp;quot;);
        //mv.setView(new InternalResourceView(&amp;quot;/forwardPage.jsp&amp;quot;));
        // 重定向
        //mv.setViewName(&amp;quot;redirect:/redirectPage.jsp&amp;quot;);
        mv.setView(new RedirectView(req.getContextPath()+&amp;quot;/redirectPage.jsp&amp;quot;));
        return mv;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	ModelAndView中的Model代表模型，View代表视图，这个名字就很好地解释了该类的作用。业务处理器调用模型层处理完用户请求后，把结果数据存储在该类的model属性中，把要返回的视图信息存储在该类的view属性中，然后让该ModelAndView返回该Spring MVC框架。&lt;/p&gt;
&lt;h1 id=&#34;作用域传参&#34;&gt;&lt;a href=&#34;#作用域传参&#34; class=&#34;headerlink&#34; title=&#34;作用域传参&#34;&gt;&lt;/a&gt;作用域传参&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220717191751516-1661419352934.png&#34; class=&#34;&#34;&gt;


&lt;blockquote&gt;
&lt;p&gt;PageContext对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:当前jsp页面内有效&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;request对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:一次请求内。&lt;/p&gt;
&lt;p&gt;作用: 解决了一次请求内的资源的数据共享问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;session对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:一次会话内有效。&lt;/p&gt;
&lt;p&gt;说明:浏览器不关闭,并且后台的session不失效，在任意请求中都可以获取到同一个session对象。&lt;/p&gt;
&lt;p&gt;作用:解决了一个用户不同请求的数据共享问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;application(ServletContext)对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作用域范围:整个项目内有效。&lt;/p&gt;
&lt;p&gt;特点:一个项目只有一个，在服务器启动的时候即完成初始化创建无论如何获取都是同一个项目。&lt;/p&gt;
&lt;p&gt;作用:解决了不同用户的数据共享问题。&lt;/p&gt;
&lt;h1 id=&#34;拦截器&#34;&gt;&lt;a href=&#34;#拦截器&#34; class=&#34;headerlink&#34; title=&#34;拦截器&#34;&gt;&lt;/a&gt;拦截器&lt;/h1&gt;&lt;h2 id=&#34;引入&#34;&gt;&lt;a href=&#34;#引入&#34; class=&#34;headerlink&#34; title=&#34;引入&#34;&gt;&lt;/a&gt;引入&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;过滤器的作用是保护请求的服务器资源，在请求资源被执行之前&amp;#x3D;&amp;#x3D;，如果请求地址符合拦截范围，则会先执行过滤器。&amp;#x3D;&amp;#x3D;过滤器的执行时机，是在Servlet之前执行的&amp;#x3D;&amp;#x3D;。但是在使用了SpringMVC后，Servlet只有一个了，也就是DisptcherServlet。那么，如果我们仍然使用过滤器来完成请求的拦截，因为过滤器是在Servlet之前执行的，就会造成，&amp;#x3D;&amp;#x3D;过滤器会拦截DispatcherServlet所有的请求&amp;#x3D;&amp;#x3D;。那么，如果我们有&amp;#x3D;&amp;#x3D;部分请求不想被拦截&amp;#x3D;&amp;#x3D;，怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;拦截器使用&#34;&gt;&lt;a href=&#34;#拦截器使用&#34; class=&#34;headerlink&#34; title=&#34;拦截器使用&#34;&gt;&lt;/a&gt;拦截器使用&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220717191927439-1661419356594.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;Spring MVC中的拦截器（Interceptor）类似于Servlet中的过滤器（Filter），它主要用于拦截用户请求并作相应的处理。例如通过拦截器可以进行权限验证、记录请求信息的日志、判断用户是否登录等。&lt;br&gt;    要使用Spring MVC中的拦截器，就需要对拦截器类进行定义和配置。通常拦截器类可以通过两种方式来定义。&lt;br&gt;    1.通过实现HandlerInterceptor接口，或继承HandlerInterceptor接口的实现类（如HandlerInterceptorAdapter）来定义。&lt;br&gt;    2.通过实现WebRequestInterceptor接口，或继承WebRequestInterceptor接口的实现类来定义。&lt;/p&gt;
&lt;h2 id=&#34;拦截器和过滤器的区别&#34;&gt;&lt;a href=&#34;#拦截器和过滤器的区别&#34; class=&#34;headerlink&#34; title=&#34;拦截器和过滤器的区别&#34;&gt;&lt;/a&gt;拦截器和过滤器的区别&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;拦截器SpringMVC的，而过滤器是servlet的。	&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器不依赖与servlet容器,由spring容器初始化，过滤器依赖与servlet容器,由servlet容器初始化。. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;拦截器可以获取IOC容器中的各个bean，而过滤器就不太方便，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyInterceptor implements HandlerInterceptor &amp;#123;
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &amp;#123;
        /*在请求到达我们定义的handler之前工作的*/
        System.out.println(&amp;quot;MyInterceptor preHandle&amp;quot;);
        /*返回的是true,代表放行,可以继续到达handler*/
        return true;
    &amp;#125;
    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &amp;#123;
        System.out.println(&amp;quot;MyInterceptor postHandle&amp;quot;);
        /*handler 处理单元返回ModelAndView 时候进行 拦截*/
    &amp;#125;
    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &amp;#123;
        /*
        页面渲染完毕,但是还没有给浏览器响应数据的时候
         */
        System.out.println(&amp;quot;MyInterceptor afterCompletion&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;多个拦截器执行顺序&#34;&gt;&lt;a href=&#34;#多个拦截器执行顺序&#34; class=&#34;headerlink&#34; title=&#34;多个拦截器执行顺序&#34;&gt;&lt;/a&gt;多个拦截器执行顺序&lt;/h2&gt;&lt;p&gt;多个拦截器同时存在时,执行的顺序由配置顺序决定. 先配置谁, 谁就先执行.多个拦截器可以理解为拦截器栈, 先进后出(后进先出), 如图所示:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringMVC/image-20220717192103889-1661419360360.png&#34; class=&#34;&#34;&gt;




&lt;h1 id=&#34;异常处理&#34;&gt;&lt;a href=&#34;#异常处理&#34; class=&#34;headerlink&#34; title=&#34;异常处理&#34;&gt;&lt;/a&gt;异常处理&lt;/h1&gt;&lt;h2 id=&#34;SpringMVC异常简介&#34;&gt;&lt;a href=&#34;#SpringMVC异常简介&#34; class=&#34;headerlink&#34; title=&#34;SpringMVC异常简介&#34;&gt;&lt;/a&gt;SpringMVC异常简介&lt;/h2&gt;&lt;p&gt;​	系统中异常包括两类：预期异常(检查型异常)和运行时异常 RuntimeException，前者通过捕获异常从而获取异常信息， 后者主要通过规范代码开发、测试通过手段减少运行时异常的发生&lt;/p&gt;
&lt;h2 id=&#34;具体实现&#34;&gt;&lt;a href=&#34;#具体实现&#34; class=&#34;headerlink&#34; title=&#34;具体实现&#34;&gt;&lt;/a&gt;具体实现&lt;/h2&gt;&lt;h3 id=&#34;1使用-ExceptionHandler注解处理异常&#34;&gt;&lt;a href=&#34;#1使用-ExceptionHandler注解处理异常&#34; class=&#34;headerlink&#34; title=&#34;1使用@ExceptionHandler注解处理异常&#34;&gt;&lt;/a&gt;1使用@ExceptionHandler注解处理异常&lt;/h3&gt;&lt;p&gt;缺点：只能处理当前Controller中的异常。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; @ExceptionHandler(value =&amp;#123;ArithmeticException.class,NullPointerException.class&amp;#125; )
    public ModelAndView handelException()&amp;#123;
        ModelAndView mv =new ModelAndView();
        mv.setViewName(&amp;quot;error1.jsp&amp;quot;);
        return mv;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2使用：-ControllerAdvice-ExceptionHandler&#34;&gt;&lt;a href=&#34;#2使用：-ControllerAdvice-ExceptionHandler&#34; class=&#34;headerlink&#34; title=&#34;2使用：@ControllerAdvice+@ExceptionHandler&#34;&gt;&lt;/a&gt;2使用：@ControllerAdvice+@ExceptionHandler&lt;/h3&gt;&lt;p&gt;此处优先级低于局部异常处理器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@ControllerAdvice
public class GloableExceptionHandler1 &amp;#123;
    @ExceptionHandler(value =&amp;#123;ArithmeticException.class,NullPointerException.class&amp;#125; )
    public ModelAndView handelException()&amp;#123;
        ModelAndView mv =new ModelAndView();
        mv.setViewName(&amp;quot;error1.jsp&amp;quot;);
        return mv;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3使用：SimpleMappingExceptionResolver&#34;&gt;&lt;a href=&#34;#3使用：SimpleMappingExceptionResolver&#34; class=&#34;headerlink&#34; title=&#34;3使用：SimpleMappingExceptionResolver&#34;&gt;&lt;/a&gt;3使用：SimpleMappingExceptionResolver&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 全局异常
 */
  @Configuration
  public class GloableException2 &amp;#123;
    @Bean
    public SimpleMappingExceptionResolver getSimpleMappingExceptionResolver()&amp;#123;
        SimpleMappingExceptionResolver resolver = new SimpleMappingExceptionResolver();
        Properties prop = new Properties();
        prop.put(&amp;quot;java.lang.NullPointerException&amp;quot;,&amp;quot;error1.jsp&amp;quot;);
        prop.put(&amp;quot;java.lang.ArithmeticException&amp;quot;,&amp;quot;error2.jsp&amp;quot;);
        resolver.setExceptionMappings(prop);
        return resolver;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4自定义的HandlerExceptionResolver&#34;&gt;&lt;a href=&#34;#4自定义的HandlerExceptionResolver&#34; class=&#34;headerlink&#34; title=&#34;4自定义的HandlerExceptionResolver&#34;&gt;&lt;/a&gt;4自定义的HandlerExceptionResolver&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;/**
 * 全局异常
 * HandlerExceptionResolve
 */
  @Configuration
  public class GloableException3 implements HandlerExceptionResolver &amp;#123;
    @Override
    public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &amp;#123;
        ModelAndView mv = new ModelAndView();
        if(e instanceof NullPointerException)&amp;#123;
                mv.setViewName(&amp;quot;error1&amp;quot;);
        &amp;#125;
        if(e instanceof ArithmeticException)&amp;#123;
                mv.setViewName(&amp;quot;error2&amp;quot;);
        &amp;#125;
        mv.addObject(&amp;quot;msg&amp;quot;,e);
        return mv;
    &amp;#125;&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;其他注解&#34;&gt;&lt;a href=&#34;#其他注解&#34; class=&#34;headerlink&#34; title=&#34;其他注解&#34;&gt;&lt;/a&gt;其他注解&lt;/h1&gt;&lt;h2 id=&#34;RequestBody&#34;&gt;&lt;a href=&#34;#RequestBody&#34; class=&#34;headerlink&#34; title=&#34;@RequestBody&#34;&gt;&lt;/a&gt;@RequestBody&lt;/h2&gt;&lt;p&gt;作用：&lt;/p&gt;
&lt;p&gt;​	用于获取请求体json格式的字符串内容。直接使用得到是 key&amp;#x3D;value&amp;amp;key&amp;#x3D;value…结构的数据，get 请求方式不适用。&lt;/p&gt;
&lt;p&gt;属性：&lt;/p&gt;
&lt;p&gt;​	required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值 为 false，get 请求得到是null。&lt;/p&gt;
&lt;h2 id=&#34;CrossOrigin&#34;&gt;&lt;a href=&#34;#CrossOrigin&#34; class=&#34;headerlink&#34; title=&#34;@CrossOrigin&#34;&gt;&lt;/a&gt;@CrossOrigin&lt;/h2&gt;&lt;p&gt;作用：&lt;/p&gt;
&lt;p&gt;​	解决ajax请求之间的跨域问题&lt;/p&gt;
&lt;p&gt;属性:&lt;/p&gt;
&lt;p&gt;origins  ： 允许可访问的域列表IP&lt;/p&gt;
&lt;p&gt;maxAge：准备响应前的缓存持续的最大时间（以秒为单位）。&lt;/p&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/Spring_Family/SpringSecurity/</guid>
            <title>SpringSecurity</title>
            <link>http://example.com/2022/10/07/Spring_Family/SpringSecurity/</link>
            <category>框架</category>
            <category>Spring</category>
            <category>SpringSecurity</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;hr/&gt;
&lt;p style=&#34;font-size:70px; color:red;background-color:66FF66&#34;&gt;Spring Security&lt;/p&gt;&lt;br/&gt;&lt;hr/&gt;

&lt;h1 id=&#34;一、简介&#34;&gt;&lt;a href=&#34;#一、简介&#34; class=&#34;headerlink&#34; title=&#34;一、简介&#34;&gt;&lt;/a&gt;一、简介&lt;/h1&gt;&lt;p&gt;​		&lt;strong&gt;Spring Security&lt;/strong&gt; 是 Spring 家族中的一个安全管理框架。相比与另外一个安全框架&lt;strong&gt;Shiro&lt;/strong&gt;，它提供了更丰富的功能，社区资源也比Shiro丰富。&lt;/p&gt;
&lt;p&gt;​	一般来说中大型的项目都是使用&lt;strong&gt;SpringSecurity&lt;/strong&gt; 来做安全框架。小项目有Shiro的比较多，因为相比与SpringSecurity，Shiro的上手更加的简单。&lt;/p&gt;
&lt;p&gt;​	 一般Web应用的需要进行&lt;strong&gt;认证&lt;/strong&gt;和&lt;strong&gt;授权&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;认证：验证当前访问系统的是不是本系统的用户，并且要确认具体是哪个用户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;授权：经过认证后判断当前用户是否有权限进行某个操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	而&lt;strong&gt;认证&lt;/strong&gt;和&lt;strong&gt;授权&lt;/strong&gt;也是SpringSecurity作为安全框架的&lt;strong&gt;核心功能&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;二、第一个Spring-Security项目&#34;&gt;&lt;a href=&#34;#二、第一个Spring-Security项目&#34; class=&#34;headerlink&#34; title=&#34;二、第一个Spring Security项目&#34;&gt;&lt;/a&gt;二、第一个Spring Security项目&lt;/h1&gt;&lt;h2 id=&#34;1-导入依赖&#34;&gt;&lt;a href=&#34;#1-导入依赖&#34; class=&#34;headerlink&#34; title=&#34;1.导入依赖&#34;&gt;&lt;/a&gt;1.导入依赖&lt;/h2&gt;&lt;p&gt;​	Spring Security已经被Spring boot进行集成，使用时直接引入启动器即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;    &amp;lt;properties&amp;gt;
        &amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
        &amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
        &amp;lt;project.reporting.outputEncoding&amp;gt;UTF-8&amp;lt;/project.reporting.outputEncoding&amp;gt;
        &amp;lt;spring-boot.version&amp;gt;2.3.7.RELEASE&amp;lt;/spring-boot.version&amp;gt;
    &amp;lt;/properties&amp;gt;	

    &amp;lt;dependencies&amp;gt;
        &amp;lt;!--thymeleaf--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--druid--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.8&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--mysql--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--mybatis-plus--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.baomidou&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;mybatis-plus-boot-starter&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;3.4.2&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--redis依赖--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--fastjson依赖--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;1.2.33&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--jwt依赖--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;io.jsonwebtoken&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;jjwt&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;0.9.0&amp;lt;/version&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--spring-security--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--lombok--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
            &amp;lt;optional&amp;gt;true&amp;lt;/optional&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--spring-web--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
        &amp;lt;!--Spring test--&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
            &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
            &amp;lt;exclusions&amp;gt;
                &amp;lt;exclusion&amp;gt;
                    &amp;lt;groupId&amp;gt;org.junit.vintage&amp;lt;/groupId&amp;gt;
                    &amp;lt;artifactId&amp;gt;junit-vintage-engine&amp;lt;/artifactId&amp;gt;
                &amp;lt;/exclusion&amp;gt;
            &amp;lt;/exclusions&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-写一个控制器&#34;&gt;&lt;a href=&#34;#2-写一个控制器&#34; class=&#34;headerlink&#34; title=&#34;2.写一个控制器&#34;&gt;&lt;/a&gt;2.写一个控制器&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class HelloController &amp;#123;

    @RequestMapping(&amp;quot;/hello&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-访问页面&#34;&gt;&lt;a href=&#34;#3-访问页面&#34; class=&#34;headerlink&#34; title=&#34;3.访问页面&#34;&gt;&lt;/a&gt;3.访问页面&lt;/h2&gt;&lt;p&gt;​	导入spring-boot-starter-security启动器后，Spring Security已经生效，默认拦截全部请求，如果用户没有登录，跳转到内置登录页面。&lt;/p&gt;
&lt;p&gt;​	在项目中新建login.html页面后&lt;/p&gt;
&lt;p&gt;​	在浏览器输入：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwL2xvZ2luLmh0bWwlRTUlOTAlOEUlRTQlQkMlOUElRTYlOTglQkUlRTclQTQlQkElRTQlQjglOEIlRTklOUQlQTIlRTklQTElQjUlRTklOUQlQTI=&#34;&gt;http://localhost:8080/login.html后会显示下面页面&lt;/span&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-01.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	默认的username为user，password打印在控制台中。当然了，每个人的显示的肯定和我的不一样。&lt;/p&gt;
&lt;p&gt;​		在浏览器中输入账号和密码后会显示login.html页面内容。&lt;/p&gt;
&lt;h1 id=&#34;三、用户认证&#34;&gt;&lt;a href=&#34;#三、用户认证&#34; class=&#34;headerlink&#34; title=&#34;三、用户认证&#34;&gt;&lt;/a&gt;三、用户认证&lt;/h1&gt;&lt;h2 id=&#34;3-1-登陆校验流程&#34;&gt;&lt;a href=&#34;#3-1-登陆校验流程&#34; class=&#34;headerlink&#34; title=&#34;3.1 登陆校验流程&#34;&gt;&lt;/a&gt;3.1 登陆校验流程&lt;/h2&gt;&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20211215094003288.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;3-2-原理初探&#34;&gt;&lt;a href=&#34;#3-2-原理初探&#34; class=&#34;headerlink&#34; title=&#34;3.2 原理初探&#34;&gt;&lt;/a&gt;3.2 原理初探&lt;/h2&gt;&lt;p&gt;​	想要知道如何实现自己的登陆流程就必须要先知道入门案例中SpringSecurity的流程。&lt;/p&gt;
&lt;h3 id=&#34;3-2-1-SpringSecurity完整流程&#34;&gt;&lt;a href=&#34;#3-2-1-SpringSecurity完整流程&#34; class=&#34;headerlink&#34; title=&#34;3.2.1 SpringSecurity完整流程&#34;&gt;&lt;/a&gt;3.2.1 SpringSecurity完整流程&lt;/h3&gt;&lt;p&gt;​	SpringSecurity的原理其实就是一个过滤器链，内部包含了提供各种功能的过滤器。这里我们可以看看入门案例中的过滤器。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20211214144425527.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	图中只展示了核心过滤器，其它的非核心过滤器并没有在图中展示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UsernamePasswordAuthenticationFilter&lt;/strong&gt;:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ExceptionTranslationFilter：&lt;/strong&gt;处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;FilterSecurityInterceptor：&lt;/strong&gt;负责权限校验的过滤器。&lt;/p&gt;
&lt;p&gt;​	&lt;/p&gt;
&lt;p&gt;​	我们可以通过Debug查看当前系统中SpringSecurity过滤器链中有哪些过滤器及它们的顺序。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20211214145824903.png&#34; class=&#34;&#34;&gt;




&lt;h3 id=&#34;3-2-2-认证流程详解&#34;&gt;&lt;a href=&#34;#3-2-2-认证流程详解&#34; class=&#34;headerlink&#34; title=&#34;3.2.2 认证流程详解&#34;&gt;&lt;/a&gt;3.2.2 认证流程详解&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20211214151515385.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;概念速查:&lt;/p&gt;
&lt;p&gt;Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。&lt;/p&gt;
&lt;p&gt;AuthenticationManager接口：定义了认证Authentication的方法 &lt;/p&gt;
&lt;p&gt;UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。&lt;/p&gt;
&lt;p&gt;UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。&lt;/p&gt;
&lt;h2 id=&#34;3-3-实现方式&#34;&gt;&lt;a href=&#34;#3-3-实现方式&#34; class=&#34;headerlink&#34; title=&#34;3.3 实现方式&#34;&gt;&lt;/a&gt;3.3 实现方式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前后端不分离，登录页面由自己提供——3.1(不推荐)&lt;/li&gt;
&lt;li&gt;前后端分离，登录页面由前端提供     ——3.2(推荐，后序我们其他授权和别的操作，均以这个为主)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在第二部分的基础上，进行操作&lt;/p&gt;
&lt;h3 id=&#34;3-3-1-前后端不分离&#34;&gt;&lt;a href=&#34;#3-3-1-前后端不分离&#34; class=&#34;headerlink&#34; title=&#34;3.3.1 前后端不分离&#34;&gt;&lt;/a&gt;3.3.1 前后端不分离&lt;/h3&gt;&lt;h4 id=&#34;1-准备工作&#34;&gt;&lt;a href=&#34;#1-准备工作&#34; class=&#34;headerlink&#34; title=&#34;1 准备工作&#34;&gt;&lt;/a&gt;1 准备工作&lt;/h4&gt;&lt;h5 id=&#34;application-yml&#34;&gt;&lt;a href=&#34;#application-yml&#34; class=&#34;headerlink&#34; title=&#34;application.yml&#34;&gt;&lt;/a&gt;application.yml&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;spring:
  application:
    name: msb-spring-security
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/mydb?characterEncoding=utf-8&amp;amp;serverTimezone=UTC
      username: root
      password: root
      driver-class-name: com.mysql.cj.jdbc.Driver

mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
logging:
  level:
    com:
      zjj:
        mapper: debug
server:
  port: 8081
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;数据库准备&#34;&gt;&lt;a href=&#34;#数据库准备&#34; class=&#34;headerlink&#34; title=&#34;数据库准备&#34;&gt;&lt;/a&gt;数据库准备&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;
SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for sys_menu
-- ----------------------------
DROP TABLE IF EXISTS `sys_menu`;
CREATE TABLE `sys_menu`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `menu_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;NULL&amp;#39; COMMENT &amp;#39;菜单名&amp;#39;,
  `path` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;路由地址&amp;#39;,
  `component` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;组件路径&amp;#39;,
  `visible` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;菜单状态（0显示 1隐藏）&amp;#39;,
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;菜单状态（0正常 1停用）&amp;#39;,
  `perms` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;权限标识&amp;#39;,
  `icon` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;#&amp;#39; COMMENT &amp;#39;菜单图标&amp;#39;,
  `create_by` bigint(20) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(20) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `del_flag` int(11) NULL DEFAULT 0 COMMENT &amp;#39;是否删除（0未删除 1已删除）&amp;#39;,
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;备注&amp;#39;,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &amp;#39;菜单表&amp;#39; ROW_FORMAT = Dynamic;

DROP TABLE IF EXISTS `sys_role`;
CREATE TABLE `sys_role`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `role_key` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;角色权限字符串&amp;#39;,
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;角色状态（0正常 1停用）&amp;#39;,
  `del_flag` int(1) NULL DEFAULT 0 COMMENT &amp;#39;del_flag&amp;#39;,
  `create_by` bigint(200) NULL DEFAULT NULL,
  `create_time` datetime NULL DEFAULT NULL,
  `update_by` bigint(200) NULL DEFAULT NULL,
  `update_time` datetime NULL DEFAULT NULL,
  `remark` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;备注&amp;#39;,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 6 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &amp;#39;角色表&amp;#39; ROW_FORMAT = Dynamic;

DROP TABLE IF EXISTS `sys_role_menu`;
CREATE TABLE `sys_role_menu`  (
  `role_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;角色ID&amp;#39;,
  `menu_id` bigint(200) NOT NULL DEFAULT 0 COMMENT &amp;#39;菜单id&amp;#39;,
  PRIMARY KEY (`role_id`, `menu_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

DROP TABLE IF EXISTS `sys_user`;
CREATE TABLE `sys_user`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;主键&amp;#39;,
  `user_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;NULL&amp;#39; COMMENT &amp;#39;用户名&amp;#39;,
  `nick_name` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;NULL&amp;#39; COMMENT &amp;#39;昵称&amp;#39;,
  `password` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;NULL&amp;#39; COMMENT &amp;#39;密码&amp;#39;,
  `status` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT &amp;#39;0&amp;#39; COMMENT &amp;#39;账号状态（0正常 1停用）&amp;#39;,
  `email` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;邮箱&amp;#39;,
  `phonenumber` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;手机号&amp;#39;,
  `sex` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;用户性别（0男，1女，2未知）&amp;#39;,
  `avatar` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &amp;#39;头像&amp;#39;,
  `user_type` char(1) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT &amp;#39;1&amp;#39; COMMENT &amp;#39;用户类型（0管理员，1普通用户）&amp;#39;,
  `create_by` bigint(20) NULL DEFAULT NULL COMMENT &amp;#39;创建人的用户id&amp;#39;,
  `create_time` datetime NULL DEFAULT NULL COMMENT &amp;#39;创建时间&amp;#39;,
  `update_by` bigint(20) NULL DEFAULT NULL COMMENT &amp;#39;更新人&amp;#39;,
  `update_time` datetime NULL DEFAULT NULL COMMENT &amp;#39;更新时间&amp;#39;,
  `del_flag` int(11) NULL DEFAULT 0 COMMENT &amp;#39;删除标志（0代表未删除，1代表已删除）&amp;#39;,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &amp;#39;用户表&amp;#39; ROW_FORMAT = Dynamic;


DROP TABLE IF EXISTS `sys_user_role`;
CREATE TABLE `sys_user_role`  (
  `user_id` bigint(200) NOT NULL AUTO_INCREMENT COMMENT &amp;#39;用户id&amp;#39;,
  `role_id` bigint(200) NOT NULL DEFAULT 0 COMMENT &amp;#39;角色id&amp;#39;,
  PRIMARY KEY (`user_id`, `role_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 4 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;



INSERT INTO `sys_menu` VALUES (2, &amp;#39;demo:select&amp;#39;, NULL, NULL, &amp;#39;0&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;#&amp;#39;, NULL, NULL, NULL, NULL, 0, NULL);
INSERT INTO `sys_menu` VALUES (3, &amp;#39;demo:update&amp;#39;, NULL, NULL, &amp;#39;0&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;#&amp;#39;, NULL, NULL, NULL, NULL, 0, NULL);
INSERT INTO `sys_menu` VALUES (4, &amp;#39;demo:insert&amp;#39;, NULL, NULL, &amp;#39;0&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;#&amp;#39;, NULL, NULL, NULL, NULL, 0, NULL);
INSERT INTO `sys_menu` VALUES (5, &amp;#39;demo:delete&amp;#39;, NULL, NULL, &amp;#39;0&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;#&amp;#39;, NULL, NULL, NULL, NULL, 0, NULL);

INSERT INTO `sys_role` VALUES (3, &amp;#39;管理员&amp;#39;, NULL, &amp;#39;0&amp;#39;, 0, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role` VALUES (4, &amp;#39;员工&amp;#39;, NULL, &amp;#39;0&amp;#39;, 0, NULL, NULL, NULL, NULL, NULL);
INSERT INTO `sys_role` VALUES (5, &amp;#39;普通用户&amp;#39;, NULL, &amp;#39;0&amp;#39;, 0, NULL, NULL, NULL, NULL, NULL);

INSERT INTO `sys_role_menu` VALUES (1, 1);
INSERT INTO `sys_role_menu` VALUES (1, 2);
INSERT INTO `sys_role_menu` VALUES (1, 3);
INSERT INTO `sys_role_menu` VALUES (1, 4);
INSERT INTO `sys_role_menu` VALUES (2, 1);
INSERT INTO `sys_role_menu` VALUES (2, 4);
INSERT INTO `sys_role_menu` VALUES (3, 1);

INSERT INTO `sys_user` VALUES (1, &amp;#39;zhangsan&amp;#39;, &amp;#39;zhangsan&amp;#39;, &amp;#39;$2a$10$CFr1dsdBA3XDNrNRtsfX3ezUj/pUVsEhkg6cpKa9QG0oraGBMOZ5u&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;12@qq.com&amp;#39;, &amp;#39;123&amp;#39;, &amp;#39;1&amp;#39;, NULL, &amp;#39;0&amp;#39;, NULL, &amp;#39;2022-08-03 08:51:48&amp;#39;, NULL, &amp;#39;2022-08-27 08:51:54&amp;#39;, 0);
INSERT INTO `sys_user` VALUES (2, &amp;#39;lisi&amp;#39;, &amp;#39;lisi&amp;#39;, &amp;#39;$2a$10$GRjbaR73zd9c9tCnj0BnnexqGSbQzXCVrXTPVEiOJqaypwCijbe4O&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;65.@126.com&amp;#39;, &amp;#39;456&amp;#39;, &amp;#39;0&amp;#39;, NULL, &amp;#39;0&amp;#39;, NULL, &amp;#39;2022-08-19 08:51:51&amp;#39;, NULL, &amp;#39;2022-08-27 08:51:59&amp;#39;, 0);
INSERT INTO `sys_user` VALUES (3, &amp;#39;wangwu&amp;#39;, &amp;#39;wangwu&amp;#39;, &amp;#39;$2a$10$PsFb4a4bn0A.5pf4Rq5kheKaOkrhJOaz6hlu2WmBnkE8H9wZOoNXS&amp;#39;, &amp;#39;0&amp;#39;, NULL, NULL, NULL, NULL, &amp;#39;1&amp;#39;, NULL, NULL, NULL, NULL, 0);

INSERT INTO `sys_user_role` VALUES (1, 1);
INSERT INTO `sys_user_role` VALUES (2, 2);
INSERT INTO `sys_user_role` VALUES (3, 3);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;实体类1&#34;&gt;&lt;a href=&#34;#实体类1&#34; class=&#34;headerlink&#34; title=&#34;实体类1&#34;&gt;&lt;/a&gt;实体类1&lt;/h5&gt;&lt;p&gt;​	这里目前只提供了登录所需要的User对象，以及我们自己封装的 USerDetails 对象，其余对象自己后续生成。（easycode 、 mybatisX、….都行）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.pojo;

import java.util.Date;
import com.baomidou.mybatisplus.extension.activerecord.Model;
import java.io.Serializable;
import lombok.*;
import com.baomidou.mybatisplus.annotation.TableName;
import com.baomidou.mybatisplus.annotation.TableField;

/**
 * 用户表(User)表实体类
 *
 * @author makejava
 * @since 2022-08-24 21:09:13
 */

@AllArgsConstructor
@NoArgsConstructor
@Data
@ToString
@TableName(value = &amp;quot;sys_user&amp;quot;)
public class User implements Serializable &amp;#123;
    /**
    * 主键    
    */ 
    @TableField(&amp;quot;id&amp;quot;)
    private Long id;
    
    /**
    * 用户名    
    */ 
    @TableField(&amp;quot;user_name&amp;quot;)
    private String username;
    
    /**
    * 昵称    
    */ 
    @TableField(&amp;quot;nick_name&amp;quot;)
    private String nickName;
    
    /**
    * 密码    
    */ 
    @TableField(&amp;quot;password&amp;quot;)
    private String password;
    
    /**
    * 账号状态（0正常 1停用）    
    */ 
    @TableField(&amp;quot;status&amp;quot;)
    private String status;
    
    /**
    * 邮箱    
    */ 
    @TableField(&amp;quot;email&amp;quot;)
    private String email;
    
    /**
    * 手机号    
    */ 
    @TableField(&amp;quot;phonenumber&amp;quot;)
    private String phonenumber;
    
    /**
    * 用户性别（0男，1女，2未知）    
    */ 
    @TableField(&amp;quot;sex&amp;quot;)
    private String sex;
    
    /**
    * 头像    
    */ 
    @TableField(&amp;quot;avatar&amp;quot;)
    private String avatar;
    
    /**
    * 用户类型（0管理员，1普通用户）    
    */ 
    @TableField(&amp;quot;user_type&amp;quot;)
    private String userType;
    
    /**
    * 创建人的用户id    
    */ 
    @TableField(&amp;quot;create_by&amp;quot;)
    private Long createBy;
    
    /**
    * 创建时间    
    */ 
    @TableField(&amp;quot;create_time&amp;quot;)
    private Date createTime;
    
    /**
    * 更新人    
    */ 
    @TableField(&amp;quot;update_by&amp;quot;)
    private Long updateBy;
    
    /**
    * 更新时间    
    */ 
    @TableField(&amp;quot;update_time&amp;quot;)
    private Date updateTime;
    
    /**
    * 删除标志（0代表未删除，1代表已删除）    
    */ 
    @TableField(&amp;quot;del_flag&amp;quot;)
    private Integer delFlag;
    

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;实体类2&#34;&gt;&lt;a href=&#34;#实体类2&#34; class=&#34;headerlink&#34; title=&#34;实体类2&#34;&gt;&lt;/a&gt;实体类2&lt;/h5&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.alibaba.fastjson.annotation.JSONField;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@AllArgsConstructor
@NoArgsConstructor
@Data
@ToString
public class LoginUser implements UserDetails &amp;#123;
    private User user;

    private List&amp;lt;String&amp;gt; permission;

    public LoginUser(User user, List&amp;lt;String&amp;gt; permission) &amp;#123;
        this.user = user;
        this.permission = permission;
    &amp;#125;

    @JSONField(serialize = false) //redis存储的话会出现问题，不让他序列化，主要为了安全
    List&amp;lt;SimpleGrantedAuthority&amp;gt; authorities ;
    @Override
    public Collection&amp;lt;? extends GrantedAuthority&amp;gt; getAuthorities() &amp;#123;
        // 把permission中的String类型的权限信息封装成 SimpleGrantedAuthority 对象
        if (null != authorities) return authorities;//要是有信息就不用再授权了
        authorities = permission.stream()
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());
        return authorities;
    &amp;#125;

    @Override
    public String getPassword() &amp;#123;
        return user.getPassword();
    &amp;#125;

    @Override
    public String getUsername() &amp;#123;
        return user.getUsername();
    &amp;#125;

    @Override
    public boolean isAccountNonExpired() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isAccountNonLocked() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isCredentialsNonExpired() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isEnabled() &amp;#123;
        return true;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-重写一个登录服务-ServiceImpl&#34;&gt;&lt;a href=&#34;#2-重写一个登录服务-ServiceImpl&#34; class=&#34;headerlink&#34; title=&#34;2 重写一个登录服务(ServiceImpl)&#34;&gt;&lt;/a&gt;2 重写一个登录服务(ServiceImpl)&lt;/h4&gt;&lt;p&gt;​	这里要实现一个实现 UserDetailsService ，重写loadUserByUsername，因为这里是我们认证的地方，在下一个章节我们会具体说明&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import com.zjj.mapper.UserMapper;
import com.zjj.pojo.LoginUser;
import com.zjj.pojo.User;
import com.zjj.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * 用户表(User)表服务实现类
 * @author makejava
 * @since 2022-08-24 21:09:13
 */
@Service(&amp;quot;userService&amp;quot;)
public class UserServiceImpl extends ServiceImpl&amp;lt;UserMapper, User&amp;gt;
        implements UserService, UserDetailsService &amp;#123;
    @Autowired
    private UserMapper userMapper;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &amp;#123;
        LambdaQueryWrapper&amp;lt;User&amp;gt; qw = new LambdaQueryWrapper&amp;lt;&amp;gt;();
        qw.eq(User::getUsername, username);
        User user = userMapper.selectOne(qw);
        if (Objects.isNull(user)) &amp;#123;
            throw new UsernameNotFoundException(&amp;quot;没有该用户&amp;quot;);
        &amp;#125;

        // TODO 权限信息后序添加
        List&amp;lt;String&amp;gt; menus = userMapper.findMenuByUserId(user.getId());
        List&amp;lt;String&amp;gt; roles = userMapper.findRoleByUserId(user.getId());
        List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();

        for (String menu : menus) &amp;#123;
            res.add(menu);
        &amp;#125;
        for (String role : roles) &amp;#123;
            res.add(&amp;quot;ROLE_&amp;quot;+role);
        &amp;#125;
        // 用户的权限和角色直接赋值 的话 要注意写法
        /*
        1、我们没有user对象直接往回 new UserDetails(username,password,Authorities) 对象时，
            要注意Authorities手动String转化可以用 AuthorityUtils.commaSeparatedStringToAuthorityList(String str)
                但是里面的 str里面包含了权限以及角色，每个要用 “,” 间隔，而且角色开头要要拼接 ROLE_

        2、我们自定义了user 实现了 UserDetails 对象 我们重写了 getAuthorities属性，具体看这个类的注释
            他在初始化值的时候我们传参传递的是一个list对象，这个时候我们不需要用 “，” 间隔，但是角色前要加 ROLE_
         */
        return new LoginUser(user,res);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-重写mapper层和对应的映射文件&#34;&gt;&lt;a href=&#34;#3-重写mapper层和对应的映射文件&#34; class=&#34;headerlink&#34; title=&#34;3 重写mapper层和对应的映射文件&#34;&gt;&lt;/a&gt;3 重写mapper层和对应的映射文件&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.baomidou.mybatisplus.core.mapper.BaseMapper;
import com.zjj.pojo.User;
import org.apache.ibatis.annotations.Mapper;

import java.util.List;

/**
 * 用户表(User)表数据库访问层
 *
 * @author makejava
 * @since 2022-08-24 21:09:13
 */

@Mapper
public interface UserMapper extends BaseMapper&amp;lt;User&amp;gt; &amp;#123;
    public List&amp;lt;String&amp;gt; findMenuByUserId(Long id);
    public List&amp;lt;String&amp;gt; findRoleByUserId(Long id);

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE mapper PUBLIC &amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot; &amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&amp;gt;
&amp;lt;mapper namespace=&amp;quot;com.zjj.mapper.UserMapper&amp;quot;&amp;gt;

    &amp;lt;sql id=&amp;quot;AllUserColumn&amp;quot;&amp;gt;id , user_name , nick_name , password , status , email , phonenumber , sex , avatar , user_type , create_by , create_time , update_by , update_time , del_flag &amp;lt;/sql&amp;gt;   
    &amp;lt;resultMap type=&amp;quot;com.zjj.pojo.User&amp;quot; id=&amp;quot;UserMap&amp;quot;&amp;gt;
        &amp;lt;result property=&amp;quot;id&amp;quot; column=&amp;quot;id&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;userName&amp;quot; column=&amp;quot;user_name&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;nickName&amp;quot; column=&amp;quot;nick_name&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;password&amp;quot; column=&amp;quot;password&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;status&amp;quot; column=&amp;quot;status&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;email&amp;quot; column=&amp;quot;email&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;phonenumber&amp;quot; column=&amp;quot;phonenumber&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;sex&amp;quot; column=&amp;quot;sex&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;avatar&amp;quot; column=&amp;quot;avatar&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;userType&amp;quot; column=&amp;quot;user_type&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;createBy&amp;quot; column=&amp;quot;create_by&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;createTime&amp;quot; column=&amp;quot;create_time&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;updateBy&amp;quot; column=&amp;quot;update_by&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;updateTime&amp;quot; column=&amp;quot;update_time&amp;quot; /&amp;gt;
        &amp;lt;result property=&amp;quot;delFlag&amp;quot; column=&amp;quot;del_flag&amp;quot; /&amp;gt;
    &amp;lt;/resultMap&amp;gt;
    &amp;lt;select id=&amp;quot;findMenuByUserId&amp;quot; resultType=&amp;quot;java.lang.String&amp;quot;&amp;gt;
        SELECT
            distinct(m.menu_name)
        FROM
            sys_user_role ur
                LEFT JOIN sys_user u on u.id = ur.user_id
                LEFT JOIN sys_role r ON ur.role_id = r.id
                LEFT JOIN sys_role_menu rm ON ur.role_id = rm.role_id
                LEFT JOIN sys_menu m ON m.id = rm.menu_id
        WHERE
            u.id = #&amp;#123;args1&amp;#125;
          AND r.status = 0
          AND m.status = 0
    &amp;lt;/select&amp;gt;
    &amp;lt;select id=&amp;quot;findRoleByUserId&amp;quot; resultType=&amp;quot;java.lang.String&amp;quot;&amp;gt;
        SELECT
            distinct(r.name)
        FROM
            sys_user_role ur
                LEFT JOIN sys_user u on u.id = ur.user_id
                LEFT JOIN sys_role r ON ur.role_id = r.id
                LEFT JOIN sys_role_menu rm ON ur.role_id = rm.role_id
                LEFT JOIN sys_menu m ON m.id = rm.menu_id
        WHERE
            u.id = #&amp;#123;args1&amp;#125;
          AND r.status = 0
          AND m.status = 0
    &amp;lt;/select&amp;gt;
    

&amp;lt;/mapper&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-导入我们的登录页面&#34;&gt;&lt;a href=&#34;#4-导入我们的登录页面&#34; class=&#34;headerlink&#34; title=&#34;4 导入我们的登录页面&#34;&gt;&lt;/a&gt;4 导入我们的登录页面&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;内容&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;form action=&amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
            username:&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
            password:&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
            &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;提交&amp;quot;/&amp;gt;
        &amp;lt;/form&amp;gt;

    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-提供登录接口&#34;&gt;&lt;a href=&#34;#5-提供登录接口&#34; class=&#34;headerlink&#34; title=&#34;5 提供登录接口&#34;&gt;&lt;/a&gt;5 提供登录接口&lt;/h4&gt;&lt;p&gt;​	就是一个页面的跳转指定我们的登录页面(&amp;#x3D;&amp;#x3D;要配置的&amp;#x3D;&amp;#x3D;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.zjj.pojo.User;
import com.zjj.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
@Controller
public class LoginController &amp;#123;
    @Autowired
    private UserService userService;

    @RequestMapping(&amp;quot;/demo&amp;quot;)
    @ResponseBody
    public String demo() &amp;#123;
        return &amp;quot;demo&amp;quot;;
    &amp;#125;

    // 登录页面
    @RequestMapping(&amp;quot;/showLogin&amp;quot;)
    public String logint() &amp;#123;
        System.out.println(&amp;quot;logint invoked&amp;quot;);
        return &amp;quot;login&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;6-修改配置类&#34;&gt;&lt;a href=&#34;#6-修改配置类&#34; class=&#34;headerlink&#34; title=&#34;6 修改配置类&#34;&gt;&lt;/a&gt;6 修改配置类&lt;/h4&gt;&lt;p&gt;​	主要内容和细节，在formLogin里面，一定仔细查看注释，小细节很多&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class MySecurityCore extends WebSecurityConfigurerAdapter &amp;#123;
    @Bean
    public PasswordEncoder getPasswordEncoder()&amp;#123;
        return new BCryptPasswordEncoder();
    &amp;#125;

    @Override
    protected void configure(HttpSecurity http) throws Exception &amp;#123;

        // http.formLogin() 所有和表单有关系的
        http.formLogin()
                // 登录页面，走一个controller
                // 注意要和，LoginProcessingUrl 配合使用，不然在表单中的action中 url 失效
                // 因为只配置loginPage()， 会导致在初始化的时候将loginProcessingUrl的配置相同化，可以自己debug 在AbstractAuthenticationFilterConfigurer 的 updateAuthenticationDefaults 方法
                // 也就是说loginPage(&amp;quot;/login&amp;quot;)  loginProcessingUrl(&amp;quot;/login&amp;quot;),导致提交信息失败最终导致认证失败
                .loginPage(&amp;quot;/showLogin&amp;quot;)
                // 当发现什么URL时，把请求转发给自定义登录逻辑
                // 表单提交的地址 action ,他就会直接去认证进入到 UserDetailsServiceImpl
                // 去这里进行用户的验证 和 用户权限信息的集体封装
                .loginProcessingUrl(&amp;quot;/login&amp;quot;)
                // 登录成功的操作
                // 下面两种方法都可以，推荐第二种，两种同时写第一个直接失效
                // 第一种写法，要注意在写映射的时候要注意请求的方法 get/post
                .successForwardUrl(&amp;quot;/showMain&amp;quot;)
                .successHandler((request, response, authentication) -&amp;gt; &amp;#123;
                    System.out.println(&amp;quot;successHandler invoked&amp;quot;);
                    // 我们在每次请求同一个页面尽量使用重定向，要是请求转发
                    // 因为请求转发是浏览器的行为，每次都要请求服务器并且重复提交表单，不好
                    // response.sendRedirect(&amp;quot;/fail&amp;quot;);
                    LoginUser loginUser = (LoginUser) authentication.getPrincipal();
                    for (String s : loginUser.getPermission()) &amp;#123;
                        System.out.println(s);
                    &amp;#125;
                &amp;#125;)
                // 登录失败的操作
                // 内容和上述情况相同，只是一个成功的一个失败的
                .failureForwardUrl(&amp;quot;/fail&amp;quot;)
                // 当前端表单传递过来的用户名参数、密码参数名和后端不对应，可以利用下列方法
                // 指定前端传递过来的用户名参数名称，默认 username
                //.usernameParameter(&amp;quot;MyuserName&amp;quot;)
                // 指定前端传递过来的密码参数名称，默认 password
                //.passwordParameter(&amp;quot;MypassWord&amp;quot;)
        ;

        // http.authorizeRequests() 所有和授权相关
        http.authorizeRequests()
                // 这里面支持 正则 和 ant表达式
                .antMatchers(&amp;quot;/showLogin&amp;quot;).anonymous()
                .antMatchers(&amp;quot;/js/**&amp;quot;).permitAll()
                .anyRequest().authenticated();


        // http.csrf
        http.csrf().disable()
                // 不通过Session获取SecurityContext
                // 因为我们使用了前后端分离的思想，在session中不存在参数，要用让东西存在它里面，所以不让他生成
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);

    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-启动测试&#34;&gt;&lt;a href=&#34;#7-启动测试&#34; class=&#34;headerlink&#34; title=&#34;7 启动测试&#34;&gt;&lt;/a&gt;7 启动测试&lt;/h4&gt;&lt;p&gt;这个时候我们的用户名、密码都是我们在数据库中存储的（&amp;#x3D;&amp;#x3D;密码必须使我们提供的加密方式加密之后的&amp;#x3D;&amp;#x3D;）&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20220825114004014.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;登录是否成功，一方面看是否请求被阻拦&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20220825114855873.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;另一方面，我在配置中设置了认证成功之后的操作 successHandler(request,response.authentication) 我在里面将我们获得认证的用户权限信息全部打印在了控制台，如果错误了也可同样配置一些信息，具体配置将在后序章节详细总结我们的配置类中的配置，现在主要目的是理清逻辑即可&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20220825114558928.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;8-补充——密码加密&#34;&gt;&lt;a href=&#34;#8-补充——密码加密&#34; class=&#34;headerlink&#34; title=&#34;8 补充——密码加密&#34;&gt;&lt;/a&gt;8 补充——密码加密&lt;/h4&gt;&lt;p&gt;实际项目中我们不会把密码明文存储在数据库中。&lt;/p&gt;
&lt;p&gt;​	默认使用的PasswordEncoder要求数据库中的密码格式为：{id}password 。它会根据id去判断密码的加密方式。但是我们一般不会采用这种方式。所以就需要替换PasswordEncoder。&lt;/p&gt;
&lt;p&gt;​	我们一般使用SpringSecurity为我们提供的BCryptPasswordEncoder。&lt;/p&gt;
&lt;p&gt;​	我们只需要使用把BCryptPasswordEncoder对象注入Spring容器中，SpringSecurity就会使用该PasswordEncoder来进行密码校验。&lt;/p&gt;
&lt;p&gt;​	我们可以定义一个SpringSecurity的配置类，SpringSecurity要求这个配置类要继承WebSecurityConfigurerAdapter。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter &amp;#123;
    
    @Bean
    public PasswordEncoder passwordEncoder()&amp;#123;
        return new BCryptPasswordEncoder();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-3-2-前后端分离&#34;&gt;&lt;a href=&#34;#3-3-2-前后端分离&#34; class=&#34;headerlink&#34; title=&#34;3.3.2  前后端分离&#34;&gt;&lt;/a&gt;3.3.2  前后端分离&lt;/h3&gt;&lt;h4 id=&#34;1-准备工作-1&#34;&gt;&lt;a href=&#34;#1-准备工作-1&#34; class=&#34;headerlink&#34; title=&#34;1 准备工作&#34;&gt;&lt;/a&gt;1 准备工作&lt;/h4&gt;&lt;p&gt;数据库、实体类均和3.3.1中相同&lt;/p&gt;
&lt;p&gt;application.yml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;spring:
  application:
    name: spring-security
  datasource:
    druid:
      url: jdbc:mysql://localhost:3306/mydb?characterEncoding=utf-8&amp;amp;serverTimezone=UTC
      username: root
      password: root
      driver-class-name: com.mysql.cj.jdbc.Driver
  redis:
    host: localhost
    port: 6379
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
logging:
  level:
    com:
      zjj:
        mapper: debug
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;统一返回类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.common;

import com.fasterxml.jackson.annotation.JsonInclude;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class ResponseResult&amp;lt;T&amp;gt; &amp;#123;
    /**
     * 状态码
     */
    private Integer code;
    /**
     * 提示信息，如果有错误时，前端可以获取该字段进行提示
     */
    private String msg;
    /**
     * 查询到的结果数据，
     */
    private T data;

    public ResponseResult(Integer code, String msg) &amp;#123;
        this.code = code;
        this.msg = msg;
    &amp;#125;

    public ResponseResult(Integer code, T data) &amp;#123;
        this.code = code;
        this.data = data;
    &amp;#125;

    public Integer getCode() &amp;#123;
        return code;
    &amp;#125;

    public void setCode(Integer code) &amp;#123;
        this.code = code;
    &amp;#125;

    public String getMsg() &amp;#123;
        return msg;
    &amp;#125;

    public void setMsg(String msg) &amp;#123;
        this.msg = msg;
    &amp;#125;

    public T getData() &amp;#123;
        return data;
    &amp;#125;

    public void setData(T data) &amp;#123;
        this.data = data;
    &amp;#125;

    public ResponseResult(Integer code, String msg, T data) &amp;#123;
        this.code = code;
        this.msg = msg;
        this.data = data;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;工具类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.data.redis.serializer.SerializationException;
import com.alibaba.fastjson.parser.ParserConfig;
import org.springframework.util.Assert;
import java.nio.charset.Charset;

/**
 * Redis使用FastJson序列化
 * 
 * @author sg
 */
public class FastJsonRedisSerializer&amp;lt;T&amp;gt; implements RedisSerializer&amp;lt;T&amp;gt;
&amp;#123;

    public static final Charset DEFAULT_CHARSET = Charset.forName(&amp;quot;UTF-8&amp;quot;);

    private Class&amp;lt;T&amp;gt; clazz;

    static
    &amp;#123;
        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);
    &amp;#125;

    public FastJsonRedisSerializer(Class&amp;lt;T&amp;gt; clazz)
    &amp;#123;
        super();
        this.clazz = clazz;
    &amp;#125;

    @Override
    public byte[] serialize(T t) throws SerializationException
    &amp;#123;
        if (t == null)
        &amp;#123;
            return new byte[0];
        &amp;#125;
        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);
    &amp;#125;

    @Override
    public T deserialize(byte[] bytes) throws SerializationException
    &amp;#123;
        if (bytes == null || bytes.length &amp;lt;= 0)
        &amp;#123;
            return null;
        &amp;#125;
        String str = new String(bytes, DEFAULT_CHARSET);

        return JSON.parseObject(str, clazz);
    &amp;#125;


    protected JavaType getJavaType(Class&amp;lt;?&amp;gt; clazz)
    &amp;#123;
        return TypeFactory.defaultInstance().constructType(clazz);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.util;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.util.Base64;
import java.util.Date;
import java.util.UUID;

/**
 * JWT工具类
 */
public class JwtUtil &amp;#123;

    //有效期为
    public static final Long JWT_TTL = 60 * 60 *1000L;// 60 * 60 *1000  一个小时
    //设置秘钥明文
    public static final String JWT_KEY = &amp;quot;sangeng&amp;quot;;

    public static String getUUID()&amp;#123;
        String token = UUID.randomUUID().toString().replaceAll(&amp;quot;-&amp;quot;, &amp;quot;&amp;quot;);
        return token;
    &amp;#125;
    
    /**
     * 生成jtw
     * @param subject token中要存放的数据（json格式）
     * @return
     */
    public static String createJWT(String subject) &amp;#123;
        JwtBuilder builder = getJwtBuilder(subject, null, getUUID());// 设置过期时间
        return builder.compact();
    &amp;#125;

    /**
     * 生成jtw
     * @param subject token中要存放的数据（json格式）
     * @param ttlMillis token超时时间
     * @return
     */
    public static String createJWT(String subject, Long ttlMillis) &amp;#123;
        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, getUUID());// 设置过期时间
        return builder.compact();
    &amp;#125;

    private static JwtBuilder getJwtBuilder(String subject, Long ttlMillis, String uuid) &amp;#123;
        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;
        SecretKey secretKey = generalKey();
        long nowMillis = System.currentTimeMillis();
        Date now = new Date(nowMillis);
        if(ttlMillis==null)&amp;#123;
            ttlMillis=JwtUtil.JWT_TTL;
        &amp;#125;
        long expMillis = nowMillis + ttlMillis;
        Date expDate = new Date(expMillis);
        return Jwts.builder()
                .setId(uuid)              //唯一的ID
                .setSubject(subject)   // 主题  可以是JSON数据
                .setIssuer(&amp;quot;sg&amp;quot;)     // 签发者
                .setIssuedAt(now)      // 签发时间
                .signWith(signatureAlgorithm, secretKey) //使用HS256对称加密算法签名, 第二个参数为秘钥
                .setExpiration(expDate);
    &amp;#125;

    /**
     * 创建token
     * @param id
     * @param subject
     * @param ttlMillis
     * @return
     */
    public static String createJWT(String id, String subject, Long ttlMillis) &amp;#123;
        JwtBuilder builder = getJwtBuilder(subject, ttlMillis, id);// 设置过期时间
        return builder.compact();
    &amp;#125;

    public static void main(String[] args) throws Exception &amp;#123;
        String token = &amp;quot;eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJjYWM2ZDVhZi1mNjVlLTQ0MDAtYjcxMi0zYWEwOGIyOTIwYjQiLCJzdWIiOiJzZyIsImlzcyI6InNnIiwiaWF0IjoxNjM4MTA2NzEyLCJleHAiOjE2MzgxMTAzMTJ9.JVsSbkP94wuczb4QryQbAke3ysBDIL5ou8fWsbt_ebg&amp;quot;;
        Claims claims = parseJWT(token);
        System.out.println(claims);
    &amp;#125;

    /**
     * 生成加密后的秘钥 secretKey
     * @return
     */
    public static SecretKey generalKey() &amp;#123;
        byte[] encodedKey = Base64.getDecoder().decode(JwtUtil.JWT_KEY);
        SecretKey key = new SecretKeySpec(encodedKey, 0, encodedKey.length, &amp;quot;AES&amp;quot;);
        return key;
    &amp;#125;
    
    /**
     * 解析
     *
     * @param jwt
     * @return
     * @throws Exception
     */
    public static Claims parseJWT(String jwt) throws Exception &amp;#123;
        SecretKey secretKey = generalKey();
        return Jwts.parser()
                .setSigningKey(secretKey)
                .parseClaimsJws(jwt)
                .getBody();
    &amp;#125;


&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.util;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.BoundSetOperations;
import org.springframework.data.redis.core.HashOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Component;

import java.util.*;
import java.util.concurrent.TimeUnit;

@SuppressWarnings(value = &amp;#123; &amp;quot;unchecked&amp;quot;, &amp;quot;rawtypes&amp;quot; &amp;#125;)
@Component
public class RedisCache
&amp;#123;
    @Autowired
    public RedisTemplate redisTemplate;

    /**
     * 缓存基本的对象，Integer、String、实体类等
     *
     * @param key 缓存的键值
     * @param value 缓存的值
     */
    public &amp;lt;T&amp;gt; void setCacheObject(final String key, final T value)
    &amp;#123;
        redisTemplate.opsForValue().set(key, value);
    &amp;#125;

    /**
     * 缓存基本的对象，Integer、String、实体类等
     *
     * @param key 缓存的键值
     * @param value 缓存的值
     * @param timeout 时间
     * @param timeUnit 时间颗粒度
     */
    public &amp;lt;T&amp;gt; void setCacheObject(final String key, final T value, final Integer timeout, final TimeUnit timeUnit)
    &amp;#123;
        redisTemplate.opsForValue().set(key, value, timeout, timeUnit);
    &amp;#125;

    /**
     * 设置有效时间
     *
     * @param key Redis键
     * @param timeout 超时时间
     * @return true=设置成功；false=设置失败
     */
    public boolean expire(final String key, final long timeout)
    &amp;#123;
        return expire(key, timeout, TimeUnit.SECONDS);
    &amp;#125;

    /**
     * 设置有效时间
     *
     * @param key Redis键
     * @param timeout 超时时间
     * @param unit 时间单位
     * @return true=设置成功；false=设置失败
     */
    public boolean expire(final String key, final long timeout, final TimeUnit unit)
    &amp;#123;
        return redisTemplate.expire(key, timeout, unit);
    &amp;#125;

    /**
     * 获得缓存的基本对象。
     *
     * @param key 缓存键值
     * @return 缓存键值对应的数据
     */
    public &amp;lt;T&amp;gt; T getCacheObject(final String key)
    &amp;#123;
        ValueOperations&amp;lt;String, T&amp;gt; operation = redisTemplate.opsForValue();
        return operation.get(key);
    &amp;#125;

    /**
     * 删除单个对象
     *
     * @param key
     */
    public boolean deleteObject(final String key)
    &amp;#123;
        return redisTemplate.delete(key);
    &amp;#125;

    /**
     * 删除集合对象
     *
     * @param collection 多个对象
     * @return
     */
    public long deleteObject(final Collection collection)
    &amp;#123;
        return redisTemplate.delete(collection);
    &amp;#125;

    /**
     * 缓存List数据
     *
     * @param key 缓存的键值
     * @param dataList 待缓存的List数据
     * @return 缓存的对象
     */
    public &amp;lt;T&amp;gt; long setCacheList(final String key, final List&amp;lt;T&amp;gt; dataList)
    &amp;#123;
        Long count = redisTemplate.opsForList().rightPushAll(key, dataList);
        return count == null ? 0 : count;
    &amp;#125;

    /**
     * 获得缓存的list对象
     *
     * @param key 缓存的键值
     * @return 缓存键值对应的数据
     */
    public &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; getCacheList(final String key)
    &amp;#123;
        return redisTemplate.opsForList().range(key, 0, -1);
    &amp;#125;

    /**
     * 缓存Set
     *
     * @param key 缓存键值
     * @param dataSet 缓存的数据
     * @return 缓存数据的对象
     */
    public &amp;lt;T&amp;gt; BoundSetOperations&amp;lt;String, T&amp;gt; setCacheSet(final String key, final Set&amp;lt;T&amp;gt; dataSet)
    &amp;#123;
        BoundSetOperations&amp;lt;String, T&amp;gt; setOperation = redisTemplate.boundSetOps(key);
        Iterator&amp;lt;T&amp;gt; it = dataSet.iterator();
        while (it.hasNext())
        &amp;#123;
            setOperation.add(it.next());
        &amp;#125;
        return setOperation;
    &amp;#125;

    /**
     * 获得缓存的set
     *
     * @param key
     * @return
     */
    public &amp;lt;T&amp;gt; Set&amp;lt;T&amp;gt; getCacheSet(final String key)
    &amp;#123;
        return redisTemplate.opsForSet().members(key);
    &amp;#125;

    /**
     * 缓存Map
     *
     * @param key
     * @param dataMap
     */
    public &amp;lt;T&amp;gt; void setCacheMap(final String key, final Map&amp;lt;String, T&amp;gt; dataMap)
    &amp;#123;
        if (dataMap != null) &amp;#123;
            redisTemplate.opsForHash().putAll(key, dataMap);
        &amp;#125;
    &amp;#125;

    /**
     * 获得缓存的Map
     *
     * @param key
     * @return
     */
    public &amp;lt;T&amp;gt; Map&amp;lt;String, T&amp;gt; getCacheMap(final String key)
    &amp;#123;
        return redisTemplate.opsForHash().entries(key);
    &amp;#125;

    /**
     * 往Hash中存入数据
     *
     * @param key Redis键
     * @param hKey Hash键
     * @param value 值
     */
    public &amp;lt;T&amp;gt; void setCacheMapValue(final String key, final String hKey, final T value)
    &amp;#123;
        redisTemplate.opsForHash().put(key, hKey, value);
    &amp;#125;

    /**
     * 获取Hash中的数据
     *
     * @param key Redis键
     * @param hKey Hash键
     * @return Hash中的对象
     */
    public &amp;lt;T&amp;gt; T getCacheMapValue(final String key, final String hKey)
    &amp;#123;
        HashOperations&amp;lt;String, String, T&amp;gt; opsForHash = redisTemplate.opsForHash();
        return opsForHash.get(key, hKey);
    &amp;#125;

    /**
     * 删除Hash中的数据
     * 
     * @param key
     * @param hkey
     */
    public void delCacheMapValue(final String key, final String hkey)
    &amp;#123;
        HashOperations hashOperations = redisTemplate.opsForHash();
        hashOperations.delete(key, hkey);
    &amp;#125;

    /**
     * 获取多个Hash中的数据
     *
     * @param key Redis键
     * @param hKeys Hash键集合
     * @return Hash对象集合
     */
    public &amp;lt;T&amp;gt; List&amp;lt;T&amp;gt; getMultiCacheMapValue(final String key, final Collection&amp;lt;Object&amp;gt; hKeys)
    &amp;#123;
        return redisTemplate.opsForHash().multiGet(key, hKeys);
    &amp;#125;

    /**
     * 获得缓存的基本对象列表
     *
     * @param pattern 字符串前缀
     * @return 对象列表
     */
    public Collection&amp;lt;String&amp;gt; keys(final String pattern)
    &amp;#123;
        return redisTemplate.keys(pattern);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.util;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class WebUtils
&amp;#123;
    /**
     * 将字符串渲染到客户端
     * 
     * @param response 渲染对象
     * @param string 待渲染的字符串
     * @return null
     */
    public static String renderString(HttpServletResponse response, String string) &amp;#123;
        try
        &amp;#123;
            response.setStatus(200);
            response.setContentType(&amp;quot;application/json&amp;quot;);
            response.setCharacterEncoding(&amp;quot;utf-8&amp;quot;);
            response.getWriter().print(string);
        &amp;#125;
        catch (IOException e)
        &amp;#123;
            e.printStackTrace();
        &amp;#125;
        return null;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.config;

import com.zjj.util.FastJsonRedisSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
public class RedisConfig &amp;#123;

    @Bean
    @SuppressWarnings(value = &amp;#123; &amp;quot;unchecked&amp;quot;, &amp;quot;rawtypes&amp;quot; &amp;#125;)
    public RedisTemplate&amp;lt;Object, Object&amp;gt; redisTemplate(RedisConnectionFactory connectionFactory)
    &amp;#123;
        RedisTemplate&amp;lt;Object, Object&amp;gt; template = new RedisTemplate&amp;lt;&amp;gt;();
        template.setConnectionFactory(connectionFactory);

        FastJsonRedisSerializer serializer = new FastJsonRedisSerializer(Object.class);

        // 使用StringRedisSerializer来序列化和反序列化redis的key值
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(serializer);

        // Hash的key也采用StringRedisSerializer的序列化方式
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(serializer);

        template.afterPropertiesSet();
        return template;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-重写登录服务-ServiceImpl&#34;&gt;&lt;a href=&#34;#2-重写登录服务-ServiceImpl&#34; class=&#34;headerlink&#34; title=&#34;2  重写登录服务(ServiceImpl)&#34;&gt;&lt;/a&gt;2  重写登录服务(ServiceImpl)&lt;/h4&gt;&lt;p&gt;​	这里我们需要写一个LoginService 、LoginServiceImpl 以及&amp;#x3D;&amp;#x3D;认证服务&amp;#x3D;&amp;#x3D;  UserDetailServiceImpl (后续会详细解释)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.service.impl;

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.zjj.mapper.UserMapper;
import com.zjj.pojo.LoginUser;
import com.zjj.pojo.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

@Service
public class UserDetailServiceImpl implements UserDetailsService &amp;#123;
    @Autowired
    private UserMapper userMapper;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &amp;#123;
        LambdaQueryWrapper&amp;lt;User&amp;gt; qw = new LambdaQueryWrapper&amp;lt;&amp;gt;();
        qw.eq(User::getUserName, username);
        User user = userMapper.selectOne(qw);
        if (Objects.isNull(user)) &amp;#123;
            throw new UsernameNotFoundException(&amp;quot;没有该用户&amp;quot;);
        &amp;#125;

        // TODO 权限信息后序添加
        List&amp;lt;String&amp;gt; menus = userMapper.findMenuByUserId(user.getId());
        List&amp;lt;String&amp;gt; roles = userMapper.findRoleByUserId(user.getId());
        List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();

        
        for (String menu : menus) &amp;#123;
            res.add(menu);
        &amp;#125;
        for (String role : roles) &amp;#123;
            res.add(&amp;quot;ROLE_&amp;quot;+role);
        &amp;#125;
        // 用户的权限和角色直接赋值 的话 要注意写法
        /*
        1、我们没有user对象直接往回 new UserDetails(username,password,Authorities) 对象时，
            要注意Authorities手动String转化可以用 AuthorityUtils.commaSeparatedStringToAuthorityList(String str)
                但是里面的 str里面包含了权限以及角色，每个要用 “,” 间隔，而且角色开头要要拼接 ROLE_

        2、我们自定义了user 实现了 UserDetails 对象 我们重写了 getAuthorities属性，具体看这个类的注释
            他在初始化值的时候我们传参传递的是一个list对象，这个时候我们不需要用 “，” 间隔，但是角色前要加 ROLE_
         */
        return new LoginUser(user,res);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface LoginService &amp;#123;
    public ResponseResult login(User user);

    ResponseResult logout();
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.zjj.mapper.UserMapper;
import com.zjj.pojo.LoginUser;
import com.zjj.pojo.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@Service
public class UserDetailServiceImpl implements UserDetailsService &amp;#123;
    @Autowired
    private UserMapper userMapper;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException &amp;#123;
        LambdaQueryWrapper&amp;lt;User&amp;gt; qw = new LambdaQueryWrapper&amp;lt;&amp;gt;();
        qw.eq(User::getUserName, username);
        User user = userMapper.selectOne(qw);
        if (Objects.isNull(user)) &amp;#123;
            throw new UsernameNotFoundException(&amp;quot;没有该用户&amp;quot;);
        &amp;#125;

        // TODO 权限信息后序添加
        List&amp;lt;String&amp;gt; menus = userMapper.findMenuByUserId(user.getId());
        List&amp;lt;String&amp;gt; roles = userMapper.findRoleByUserId(user.getId());
        List&amp;lt;String&amp;gt; res = new ArrayList&amp;lt;&amp;gt;();

        for (String menu : menus) &amp;#123;
            res.add(menu);
        &amp;#125;
        for (String role : roles) &amp;#123;
            res.add(&amp;quot;ROLE_&amp;quot;+role);
        &amp;#125;
        // 用户的权限和角色直接赋值 的话 要注意写法
        /*
        1、我们没有user对象直接往回 new UserDetails(username,password,Authorities) 对象时，
            要注意Authorities手动String转化可以用 AuthorityUtils.commaSeparatedStringToAuthorityList(String str)
                但是里面的 str里面包含了权限以及角色，每个要用 “,” 间隔，而且角色开头要要拼接 ROLE_

        2、我们自定义了user 实现了 UserDetails 对象 我们重写了 getAuthorities属性，具体看这个类的注释
            他在初始化值的时候我们传参传递的是一个list对象，这个时候我们不需要用 “，” 间隔，但是角色前要加 ROLE_
         */
        return new LoginUser(user,res);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-重写mapper层和对应的映射文件-1&#34;&gt;&lt;a href=&#34;#3-重写mapper层和对应的映射文件-1&#34; class=&#34;headerlink&#34; title=&#34;3 重写mapper层和对应的映射文件&#34;&gt;&lt;/a&gt;3 重写mapper层和对应的映射文件&lt;/h4&gt;&lt;p&gt;和3.3.1的准备相同&lt;/p&gt;
&lt;h4 id=&#34;4-配置类配置&#34;&gt;&lt;a href=&#34;#4-配置类配置&#34; class=&#34;headerlink&#34; title=&#34;4 配置类配置&#34;&gt;&lt;/a&gt;4 配置类配置&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Configuration
public class SecurityConfig extends WebSecurityConfigurerAdapter &amp;#123;


    @Bean
    public PasswordEncoder passwordEncoder()&amp;#123;
        return new BCryptPasswordEncoder();
    &amp;#125;

    @Override
    protected void configure(HttpSecurity http) throws Exception &amp;#123;
        http
                //关闭csrf
                .csrf().disable()
                //不通过Session获取SecurityContext
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeRequests()
                // 对于登录接口 允许匿名访问
                .antMatchers(&amp;quot;/user/login&amp;quot;).anonymous()
                // 除上面外的所有请求全部需要鉴权认证
                .anyRequest().authenticated();
    &amp;#125;

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception &amp;#123;
        return super.authenticationManagerBean();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;5-对接登录接口&#34;&gt;&lt;a href=&#34;#5-对接登录接口&#34; class=&#34;headerlink&#34; title=&#34;5 对接登录接口&#34;&gt;&lt;/a&gt;5 对接登录接口&lt;/h4&gt;&lt;p&gt;假定登录接口为	“&amp;#x2F;user&amp;#x2F;login”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class LoginController &amp;#123;

    @Autowired
    private LoginService loginService;

    @RequestMapping(&amp;quot;/user/login&amp;quot;)
    @ResponseBody
    public ResponseResult login(@RequestBody User user)&amp;#123;
        return loginService.login(user);
    &amp;#125;
    @RequestMapping(&amp;quot;/user/logout&amp;quot;)
    @ResponseBody
    public ResponseResult logout() &amp;#123;
        return loginService.logout();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5 测试接口&lt;/p&gt;
&lt;p&gt;这里用接口测试工具即可，我们没有登录页面，页面是前端提供的，所以我们只需要确保接口测试正确即可&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo4MDgwL3VzZXIvbG9naW4=&#34;&gt;http://localhost:8080/user/login&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;#123;
    &amp;quot;userName&amp;quot;:&amp;quot;zhangsan&amp;quot;,
    &amp;quot;password&amp;quot;:&amp;quot;zhangsan&amp;quot;
    // &amp;quot;userName&amp;quot;:&amp;quot;lisi&amp;quot;,
    // &amp;quot;password&amp;quot;:&amp;quot;lisi&amp;quot;
    // &amp;quot;userName&amp;quot;:&amp;quot;wangwu&amp;quot;,
    // &amp;quot;password&amp;quot;:&amp;quot;wangwu&amp;quot;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20220825120818298.png&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;6-优化认证——引入Redis&#34;&gt;&lt;a href=&#34;#6-优化认证——引入Redis&#34; class=&#34;headerlink&#34; title=&#34;6 优化认证——引入Redis&#34;&gt;&lt;/a&gt;6 优化认证——引入Redis&lt;/h4&gt;&lt;p&gt;​	我们在项目中，不可能每次这种常用数据都去数据库访问，这样会给数据库造成极大的负担，导致我们的数据库宕机。因此我们引入的NoSQL数据库、缓存数据库 Redis 用来存储我们短期常用数据。但是问题又来了。怎么存储呢？&lt;/p&gt;
&lt;p&gt;​	引入 3.2.1SpringSecurity完整流程 &lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20211214144425527.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	我们每次的登录验证都需要经过 UsernamePasswordAuthenticationFilter ，在这个过滤器下我们必须得到一个认证的用户，所以我们在这里为了得到用户的认证信息我们老办法就是去数据库中查找，但是我们现在不想让他老去数据库中找，在他之前我们要是直接能得到这个认证过的用户岂不皆大欢喜，所以我们在他之前也加上一个过滤器用来查找每次请求是否有这个认证用户有的话我们就可以省略掉去数据库中查找他的信息的过程。&lt;/p&gt;
&lt;p&gt;​	那么问题又来了我们如何存储一个用户的信息呢？&lt;/p&gt;
&lt;p&gt;这里我们可以利用JWT根据我们的用户ID生成一个Token，以他为键值存储到redis中&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTA3MDE3NS9hcnRpY2xlL2RldGFpbHMvMTE4NTU5Mjcy&#34;&gt;JWT详解&lt;/span&gt; ：除了讲解JWT，还很好的帮忙回顾了Token的优势&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.filter;

import com.zjj.pojo.LoginUser;
import com.zjj.util.JwtUtil;
import com.zjj.util.RedisCache;
import io.jsonwebtoken.Claims;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Objects;

@Component
public class JwtAuthenticationTokenFilter extends OncePerRequestFilter &amp;#123;

    @Autowired
    private RedisCache redisCache;

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException &amp;#123;
        //获取token
        String token = request.getHeader(&amp;quot;token&amp;quot;);
        if (!StringUtils.hasText(token)) &amp;#123;
            //放行
            /*
            * 解释一下，为什么没有Token还放行，因为没有token可以但是可能他是登录请求
            * 我们还是要放行的，不然所有人都登录不了，但是问题是如果不是为什么还要放行
            * 这里不用担心，如果不是登录请求他就可能会存在User对象的账户和密码，就无法完成第一步的认证工作，跟别说后面的鉴权了，所以他会直接被挡住
            * 其次我们倒数第二个过滤器就是为我们处理我们出现的问题的过滤器，出了问题让他解决就行了，这里的问题其实大多数都是token错误，需要重新认证
            * */
            filterChain.doFilter(request, response);
            return;
        &amp;#125;
        //解析token
        String userid;
        try &amp;#123;
            Claims claims = JwtUtil.parseJWT(token);
            userid = claims.getSubject();
        &amp;#125; catch (Exception e) &amp;#123;
            e.printStackTrace();
            throw new RuntimeException(&amp;quot;token非法&amp;quot;);
        &amp;#125;
        //从redis中获取用户信息
        String redisKey = &amp;quot;login:&amp;quot; + userid;
        LoginUser loginUser = redisCache.getCacheObject(redisKey);
        if(Objects.isNull(loginUser))&amp;#123;
            throw new RuntimeException(&amp;quot;用户未登录&amp;quot;);
        &amp;#125;
        //存入SecurityContextHolder ——&amp;gt; 认证成功的对象都在这
        //TODO 获取权限信息封装到Authentication中
        /*
        * 三参构造可以获取该对象是否是以认证状态
        *  */
        UsernamePasswordAuthenticationToken authenticationToken =
                new UsernamePasswordAuthenticationToken(loginUser,null,loginUser.getAuthorities());
        SecurityContextHolder.getContext().setAuthentication(authenticationToken);
        //放行
        filterChain.doFilter(request, response);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;7-修改配置类&#34;&gt;&lt;a href=&#34;#7-修改配置类&#34; class=&#34;headerlink&#34; title=&#34;7 修改配置类&#34;&gt;&lt;/a&gt;7 修改配置类&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.config;

import com.zjj.filter.JwtAuthenticationTokenFilter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;


@Configuration
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter &amp;#123;

    @Autowired
    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;
    @Autowired
    private AuthenticationEntryPoint authenticationEntryPoint;
    @Autowired
    private AccessDeniedHandler accessDeniedHandler;

    @Override
    protected void configure(HttpSecurity http) throws Exception &amp;#123;

        // 认证、授权错误处理
        http.exceptionHandling()
                .authenticationEntryPoint(authenticationEntryPoint)
                .accessDeniedHandler(accessDeniedHandler);
        // 认证过滤器添加
        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);

        // url拦截
        http.authorizeRequests()
                // anonymous 匿名 没有认证的才可以访问，permitALL 谁都能访问，不需要认证
                .antMatchers(&amp;quot;/user/login&amp;quot;,&amp;quot;/login&amp;quot;,&amp;quot;/loginPage&amp;quot;).anonymous()
                .antMatchers(&amp;quot;/login.html&amp;quot;,&amp;quot;/fail.html&amp;quot;).permitAll()
                // authenticated 认证了才能访问
                .anyRequest().authenticated();

        //关闭CSRF
        http.csrf().disable()
                // 不通过Session获取SecurityContext
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
        // Cors
        http.cors();
    &amp;#125;

    @Bean
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception &amp;#123;
        return super.authenticationManagerBean();
    &amp;#125;


    @Bean
    public PasswordEncoder getPasswordEncoder()&amp;#123;
        return new BCryptPasswordEncoder();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;8-测试&#34;&gt;&lt;a href=&#34;#8-测试&#34; class=&#34;headerlink&#34; title=&#34;8 测试&#34;&gt;&lt;/a&gt;8 测试&lt;/h4&gt;&lt;p&gt;这里要打开你的 redis服务端 ，如果不是本地的，你要去配置中添加配置&lt;/p&gt;
&lt;p&gt;最后根据 步骤5 再次测试，成功后你的redis 中会多出一组数据，这就是我们的Token，具体步骤不再演示！&lt;/p&gt;
&lt;h1 id=&#34;四、UserDetailsService详解&#34;&gt;&lt;a href=&#34;#四、UserDetailsService详解&#34; class=&#34;headerlink&#34; title=&#34;四、UserDetailsService详解&#34;&gt;&lt;/a&gt;四、UserDetailsService详解&lt;/h1&gt;&lt;p&gt;​	当什么也没有配置的时候，账号和密码是由Spring Security定义生成的。而在实际项目中账号和密码都是从数据库中查询出来的。 所以我们要通过自定义逻辑控制**&amp;#x3D;&amp;#x3D;认证逻辑&amp;#x3D;&amp;#x3D;**。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20211214151515385.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	如果需要自定义逻辑时，只需要实现UserDetailsService接口即可。接口定义如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-03.jpg&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;1-返回值&#34;&gt;&lt;a href=&#34;#1-返回值&#34; class=&#34;headerlink&#34; title=&#34;1.返回值&#34;&gt;&lt;/a&gt;1.返回值&lt;/h2&gt;&lt;p&gt;​	返回值UserDetails是一个接口，定义如下&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-04.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	要想返回UserDetails的实例就只能返回接口的实现类。Spring Security中提供了如下的实例。对于我们只需要使用里面的User类即可。注意User的全限定路径是：&lt;/p&gt;
&lt;p&gt;​	org.springframework.security.core.userdetails.User&lt;/p&gt;
&lt;p&gt;​	此处经常和系统中自己开发的User类弄混。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-05.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	在User类中提供了很多方法和属性。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-06.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	其中构造方法有两个，调用其中任何一个都可以实例化UserDetails实现类User类的实例。而三个参数的构造方法实际上也是调用7个参数的构造方法。&lt;/p&gt;
&lt;p&gt;​	username:用户名&lt;/p&gt;
&lt;p&gt;​	password:密码&lt;/p&gt;
&lt;p&gt;​	authorities：用户具有的权限。此处不允许为null&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-07.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	此处的用户名应该是客户端传递过来的用户名。而密码应该是从数据库中查询出来的密码。Spring Security会根据User中的password和客户端传递过来的password进行比较。如果相同则表示认证通过，如果不相同表示认证失败。&lt;/p&gt;
&lt;p&gt;​	authorities里面的权限对于后面学习授权是很有必要的，包含的所有内容为此用户具有的权限，如有里面没有包含某个权限，而在做某个事情时必须包含某个权限则会出现403。&amp;#x3D;&amp;#x3D;通常都是通过AuthorityUtils.commaSeparatedStringToAuthorityList(“”)来创建authorities集合对象的&amp;#x3D;&amp;#x3D;。参数是一个字符串，&amp;#x3D;&amp;#x3D;多个权限使用逗号分隔，角色信息前要加&lt;font color=blue&gt;  ROLE_  &lt;/font&gt;来标识不然会当成权限信息处理&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	我们的项目中对于用户信息的表，肯定是不同的，我们可以利用这个类，对于用来认证的UserDetails对象进行进一步封装，自定义我们的认证对象。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;package com.zjj.pojo;

import com.alibaba.fastjson.annotation.JSONField;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@AllArgsConstructor
@NoArgsConstructor
@Data
@ToString
public class LoginUser implements UserDetails &amp;#123;
    private User user;

    private List&amp;lt;String&amp;gt; permission;

    public LoginUser(User user, List&amp;lt;String&amp;gt; permission) &amp;#123;
        this.user = user;
        this.permission = permission;
    &amp;#125;

    @JSONField(serialize = false) //redis存储的话会出现问题，不让他序列化，主要为了安全
    List&amp;lt;SimpleGrantedAuthority&amp;gt; authorities ;
    @Override
    public Collection&amp;lt;? extends GrantedAuthority&amp;gt; getAuthorities() &amp;#123;
        // 把permission中的String类型的权限信息封装成 SimpleGrantedAuthority 对象
        if (null != authorities) return authorities;//要是有信息就不用再授权了
        authorities = permission.stream()
                .map(SimpleGrantedAuthority::new)
                .collect(Collectors.toList());
        return authorities;
    &amp;#125;

    @Override
    public String getPassword() &amp;#123;
        return user.getPassword();
    &amp;#125;

    @Override
    public String getUsername() &amp;#123;
        return user.getUsername();
    &amp;#125;

    @Override
    public boolean isAccountNonExpired() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isAccountNonLocked() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isCredentialsNonExpired() &amp;#123;
        return true;
    &amp;#125;

    @Override
    public boolean isEnabled() &amp;#123;
        return true;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	这里只是一个例子，我重写了getAuthorities() ，其他的信息我们可以根据我们自己的数据库的User信息进行初始化，这里我为了测试方便其余都事 TRUE 打开了他们的权限&lt;/p&gt;
&lt;p&gt;​	这里我自定义个 permission 用来存储我们查询到的权限信息，用它来对authorities来初始化 以及对getAuthorities() 的重写，authorities 是我们根据SpringSecurity 要求封装的权限集合 ，但是要注意，不要让他存储到redis中，redis存储的话会出现问题，不要让他序列化，主要为了安全。&lt;/p&gt;
&lt;p&gt;​	这样我们每次认证的时候就直接可以利用这个认证对象，而我们的原生User还可以进行别的操作，这样做更加灵活。&amp;#x3D;&amp;#x3D;推荐********&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-方法参数&#34;&gt;&lt;a href=&#34;#2-方法参数&#34; class=&#34;headerlink&#34; title=&#34;2.方法参数&#34;&gt;&lt;/a&gt;2.方法参数&lt;/h2&gt;&lt;p&gt;​	方法参数表示用户名。此值是客户端表单传递过来的数据。默认情况下必须叫username，否则无法接收。&lt;/p&gt;
&lt;h2 id=&#34;3-异常&#34;&gt;&lt;a href=&#34;#3-异常&#34; class=&#34;headerlink&#34; title=&#34;3.异常&#34;&gt;&lt;/a&gt;3.异常&lt;/h2&gt;&lt;p&gt;​	UsernameNotFoundException 用户名没有发现异常。在loadUserByUsername中是需要通过自己的逻辑从数据库中取值的。如果通过用户名没有查询到对应的数据，应该抛出UsernameNotFoundException，系统就知道用户名没有查询到。&lt;/p&gt;
&lt;h1 id=&#34;五、配置类说明-1-—-认证配置&#34;&gt;&lt;a href=&#34;#五、配置类说明-1-—-认证配置&#34; class=&#34;headerlink&#34; title=&#34;五、配置类说明 1 — 认证配置&#34;&gt;&lt;/a&gt;五、配置类说明 1 — 认证配置&lt;/h1&gt;&lt;h2 id=&#34;1-失败跳转&#34;&gt;&lt;a href=&#34;#1-失败跳转&#34; class=&#34;headerlink&#34; title=&#34;1.失败跳转&#34;&gt;&lt;/a&gt;1.失败跳转&lt;/h2&gt;&lt;p&gt;​	表单处理中成功会跳转到一个地址，失败也可以跳转到一个地址中。&lt;/p&gt;
&lt;h3 id=&#34;1-1编写页面&#34;&gt;&lt;a href=&#34;#1-1编写页面&#34; class=&#34;headerlink&#34; title=&#34;1.1编写页面&#34;&gt;&lt;/a&gt;1.1编写页面&lt;/h3&gt;&lt;p&gt;​	在src&amp;#x2F;main&amp;#x2F;resources&amp;#x2F;static下新建fail.html并编写如下内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
        &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        操作失败，请重新登录. &amp;lt;a href=&amp;quot;/login.html&amp;quot;&amp;gt;跳转&amp;lt;/a&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-2修改表单配置&#34;&gt;&lt;a href=&#34;#1-2修改表单配置&#34; class=&#34;headerlink&#34; title=&#34;1.2修改表单配置&#34;&gt;&lt;/a&gt;1.2修改表单配置&lt;/h3&gt;&lt;p&gt;​	在配置方法中表单认证部分添加failureForwardUrl()方法，表示登录失败跳转的url。此处依然是POST请求，所以跳转到可以接收POST请求的控制器&amp;#x2F;fail中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// 表单认证
http.formLogin()
    .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
    .successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
    .failureForwardUrl(&amp;quot;/fail&amp;quot;)     //登录失败跳转地址
    .loginPage(&amp;quot;/login.html&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-3添加控制器方法&#34;&gt;&lt;a href=&#34;#1-3添加控制器方法&#34; class=&#34;headerlink&#34; title=&#34;1.3添加控制器方法&#34;&gt;&lt;/a&gt;1.3添加控制器方法&lt;/h3&gt;&lt;p&gt;​	在控制器类中添加控制器方法，方法映射路径&amp;#x2F;fail。此处要注意：由于是POST请求访问&amp;#x2F;fail。所以如果返回值直接转发到fail.html中，及时有效果，控制台也会报警告，提示fail.html不支持POST访问方式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@PostMapping(&amp;quot;/fail&amp;quot;)
public String fail()&amp;#123;
    return &amp;quot;redirect:/fail.html&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;1-4设置fail-html不需要认证&#34;&gt;&lt;a href=&#34;#1-4设置fail-html不需要认证&#34; class=&#34;headerlink&#34; title=&#34;1.4设置fail.html不需要认证&#34;&gt;&lt;/a&gt;1.4设置fail.html不需要认证&lt;/h3&gt;&lt;p&gt;​	认证失败跳转到fail.html页面中，所以必须配置fail.html不需要被认证。需要修改配置类中内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// url 拦截
http.authorizeRequests()
        .antMatchers(&amp;quot;/login.html&amp;quot;).permitAll() //login.html不需要被认证
        .antMatchers(&amp;quot;/fail.html&amp;quot;).permitAll()  //fail.html不需要被认证
        .anyRequest().authenticated();//所有的请求都必须被认证。必须登录后才能访问。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-设置请求账户和密码的参数名&#34;&gt;&lt;a href=&#34;#2-设置请求账户和密码的参数名&#34; class=&#34;headerlink&#34; title=&#34;2.设置请求账户和密码的参数名&#34;&gt;&lt;/a&gt;2.设置请求账户和密码的参数名&lt;/h2&gt;&lt;h3 id=&#34;2-1源码简介&#34;&gt;&lt;a href=&#34;#2-1源码简介&#34; class=&#34;headerlink&#34; title=&#34;2.1源码简介&#34;&gt;&lt;/a&gt;2.1源码简介&lt;/h3&gt;&lt;p&gt;​	当进行登录时会执行UsernamePasswordAuthenticationFilter过滤器。&lt;/p&gt;
&lt;p&gt;​	usernamePasrameter:账户参数名&lt;/p&gt;
&lt;p&gt;​	passwordParameter:密码参数名&lt;/p&gt;
&lt;p&gt;​	postOnly&amp;#x3D;true:默认情况下只允许POST请求。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-10-1661413396371.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;2-2修改配置&#34;&gt;&lt;a href=&#34;#2-2修改配置&#34; class=&#34;headerlink&#34; title=&#34;2.2修改配置&#34;&gt;&lt;/a&gt;2.2修改配置&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// 表单认证
http.formLogin()
        .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
        .successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
        .failureForwardUrl(&amp;quot;/fail&amp;quot;)     //登录失败跳转地址
        .loginPage(&amp;quot;/login.html&amp;quot;)
        .usernameParameter(&amp;quot;myusername&amp;quot;)
        .passwordParameter(&amp;quot;mypassword&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-3修改页面&#34;&gt;&lt;a href=&#34;#2-3修改页面&#34; class=&#34;headerlink&#34; title=&#34;2.3修改页面&#34;&gt;&lt;/a&gt;2.3修改页面&lt;/h3&gt;&lt;p&gt;​	修改login.html&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;form action = &amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    用户名：&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;myusername&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    密码:&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;mypassword&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;登录&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-自定义登录成功处理器&#34;&gt;&lt;a href=&#34;#3-自定义登录成功处理器&#34; class=&#34;headerlink&#34; title=&#34;3.自定义登录成功处理器&#34;&gt;&lt;/a&gt;3.自定义登录成功处理器&lt;/h2&gt;&lt;h3 id=&#34;3-1源码分析&#34;&gt;&lt;a href=&#34;#3-1源码分析&#34; class=&#34;headerlink&#34; title=&#34;3.1源码分析&#34;&gt;&lt;/a&gt;3.1源码分析&lt;/h3&gt;&lt;p&gt;​	使用successForwardUrl()时表示成功后转发请求到地址。内部是通过successHandler（）方法进行控制成功后交给哪个类进行处理&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-11-1661413396370.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	ForwardAuthenticationSuccessHandler内部就是最简单的请求转发。由于是请求转发，当遇到需要跳转到站外或在前后端分离的项目中就无法使用了。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-12-1661413396371.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	当需要控制登录成功后去做一些事情时，可以进行自定义认证成功控制器。&lt;/p&gt;
&lt;h3 id=&#34;3-2代码实现&#34;&gt;&lt;a href=&#34;#3-2代码实现&#34; class=&#34;headerlink&#34; title=&#34;3.2代码实现&#34;&gt;&lt;/a&gt;3.2代码实现&lt;/h3&gt;&lt;h4 id=&#34;3-2-1自定义类&#34;&gt;&lt;a href=&#34;#3-2-1自定义类&#34; class=&#34;headerlink&#34; title=&#34;3.2.1自定义类&#34;&gt;&lt;/a&gt;3.2.1自定义类&lt;/h4&gt;&lt;p&gt;​	新建类MyAuthenticationSuccessHandler 实现 AuthenticationSuccessHandler ，编写如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyAuthenticationSuccessHandler implements AuthenticationSuccessHandler &amp;#123;
    @Override
    public void onAuthenticationSuccess(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Authentication authentication) throws IOException, ServletException &amp;#123;
        //Principal 主体，存放了登录用户的信息
        User user = (User)authentication.getPrincipal();
        System.out.println(user.getUsername());
        System.out.println(user.getPassword());//密码输出为null
        System.out.println(user.getAuthorities());
        //重定向到百度。这只是一个示例，具体需要看项目业务需求
        httpServletResponse.sendRedirect(&amp;quot;http://www.baidu.com&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-2-2修改配置项&#34;&gt;&lt;a href=&#34;#3-2-2修改配置项&#34; class=&#34;headerlink&#34; title=&#34;3.2.2修改配置项&#34;&gt;&lt;/a&gt;3.2.2修改配置项&lt;/h4&gt;&lt;p&gt;使用successHandler()方法设置成功后交给哪个对象进行处理&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// 表单认证
http.formLogin()
        .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
        .successHandler(new MyAuthenticationSuccessHandler())
        //.successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
        .failureForwardUrl(&amp;quot;/fail&amp;quot;)     //登录失败跳转地址
        .loginPage(&amp;quot;/login.html&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-自定义登录失败处理器&#34;&gt;&lt;a href=&#34;#4-自定义登录失败处理器&#34; class=&#34;headerlink&#34; title=&#34;4.自定义登录失败处理器&#34;&gt;&lt;/a&gt;4.自定义登录失败处理器&lt;/h2&gt;&lt;h3 id=&#34;4-1源码分析&#34;&gt;&lt;a href=&#34;#4-1源码分析&#34; class=&#34;headerlink&#34; title=&#34;4.1源码分析&#34;&gt;&lt;/a&gt;4.1源码分析&lt;/h3&gt;&lt;p&gt;​	failureForwardUrl()内部调用的是failureHandler()方法&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;ForwardAuthenticationFailureHandler&lt;/strong&gt;中也是一个请求转发，并在request作用域中设置			 SPRING_SECURITY_LAST_EXCEPTION的key，内容为异常对象。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-14.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;4-2代码实现&#34;&gt;&lt;a href=&#34;#4-2代码实现&#34; class=&#34;headerlink&#34; title=&#34;4.2代码实现&#34;&gt;&lt;/a&gt;4.2代码实现&lt;/h3&gt;&lt;h4 id=&#34;4-2-1新建控制器&#34;&gt;&lt;a href=&#34;#4-2-1新建控制器&#34; class=&#34;headerlink&#34; title=&#34;4.2.1新建控制器&#34;&gt;&lt;/a&gt;4.2.1新建控制器&lt;/h4&gt;&lt;p&gt;​	新建MyForwardAuthenticationFailureHandler实现 AuthenticationFailureHandler 。在方法中添加重定向语句&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public class MyForwardAuthenticationFailureHandler implements AuthenticationFailureHandler &amp;#123;
    @Override
    public void onAuthenticationFailure(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AuthenticationException e) throws IOException, ServletException &amp;#123;
        httpServletResponse.sendRedirect(&amp;quot;/fail.html&amp;quot;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;4-2-2修改配置类&#34;&gt;&lt;a href=&#34;#4-2-2修改配置类&#34; class=&#34;headerlink&#34; title=&#34;4.2.2修改配置类&#34;&gt;&lt;/a&gt;4.2.2修改配置类&lt;/h4&gt;&lt;p&gt;​	修改配置类中表单登录部分。设置失败时交给失败处理器进行操作。failureForwardUrl和failureHandler不可共存。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;        // 表单认证
        http.formLogin()
                .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
                .successHandler(new MyAuthenticationSuccessHandler())
                //.successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
                .failureHandler(new MyForwardAuthenticationFailureHandler())
//                .failureForwardUrl(&amp;quot;/fail&amp;quot;)     //登录失败跳转地址
                .loginPage(&amp;quot;/login.html&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-总结&#34;&gt;&lt;a href=&#34;#5-总结&#34; class=&#34;headerlink&#34; title=&#34;5 总结&#34;&gt;&lt;/a&gt;5 总结&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;        // http.formLogin() 所有和表单有关系的
        http.formLogin()
                // 登录页面，走一个controller
                // 注意要和，LoginProcessingUrl 配合使用，不然在表单中的action中 url 失效
                // 因为只配置loginPage()， 会导致在初始化的时候将loginProcessingUrl的配置相同化，可以自己debug 在AbstractAuthenticationFilterConfigurer 的 updateAuthenticationDefaults 方法
                // 也就是说loginPage(&amp;quot;/login&amp;quot;)  loginProcessingUrl(&amp;quot;/login&amp;quot;),导致提交信息失败最终导致认证失败
                .loginPage(&amp;quot;/showLogin&amp;quot;)
                // 当发现什么URL时，把请求转发给自定义登录逻辑
                // 表单提交的地址 action ,他就会直接去认证进入到 UserDetailsServiceImpl
                // 去这里进行用户的验证 和 用户权限信息的集体封装
                .loginProcessingUrl(&amp;quot;/login&amp;quot;)
            
                // 登录成功的操作
                // 下面两种方法都可以，推荐第二种，两种同时写第一个直接失效
                // 第一种写法，要注意在写映射的时候要注意请求的方法 get/post
                .successForwardUrl(&amp;quot;/showMain&amp;quot;)
                .successHandler((request, response, authentication) -&amp;gt; &amp;#123;
                    System.out.println(&amp;quot;successHandler invoked&amp;quot;);
                    // 我们在每次请求同一个页面尽量使用重定向，要是请求转发
                    // 因为请求转发是浏览器的行为，每次都要请求服务器并且重复提交表单，不好
                    // response.sendRedirect(&amp;quot;/fail&amp;quot;);
                    LoginUser loginUser = (LoginUser) authentication.getPrincipal();
                    for (String s : loginUser.getPermission()) &amp;#123;
                        System.out.println(s);
                    &amp;#125;
                &amp;#125;)
                // 登录失败的操作
                // 内容和上述情况相同，只是一个成功的一个失败的
                .failureForwardUrl(&amp;quot;/fail&amp;quot;)
                // 当前端表单传递过来的用户名参数、密码参数名和后端不对应，可以利用下列方法
                // 指定前端传递过来的用户名参数名称
                //.usernameParameter(&amp;quot;MyuserName&amp;quot;)
                // 指定前端传递过来的密码参数名称
                // .passwordParameter(&amp;quot;MypassWord&amp;quot;)
        ;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;六、用户授权&#34;&gt;&lt;a href=&#34;#六、用户授权&#34; class=&#34;headerlink&#34; title=&#34;六、用户授权&#34;&gt;&lt;/a&gt;六、用户授权&lt;/h1&gt;&lt;h2 id=&#34;1-权限系统的作用&#34;&gt;&lt;a href=&#34;#1-权限系统的作用&#34; class=&#34;headerlink&#34; title=&#34;1 权限系统的作用&#34;&gt;&lt;/a&gt;1 权限系统的作用&lt;/h2&gt;&lt;p&gt;​	例如一个学校图书馆的管理系统，如果是普通学生登录就能看到借书还书相关的功能，不可能让他看到并且去使用添加书籍信息，删除书籍信息等功能。但是如果是一个图书馆管理员的账号登录了，应该就能看到并使用添加书籍信息，删除书籍信息等功能。&lt;/p&gt;
&lt;p&gt;​	总结起来就是&lt;a&gt;&lt;strong&gt;不同的用户可以使用不同的功能&lt;/strong&gt;&lt;/a&gt;。这就是权限系统要去实现的效果。&lt;/p&gt;
&lt;h2 id=&#34;2-授权基本流程&#34;&gt;&lt;a href=&#34;#2-授权基本流程&#34; class=&#34;headerlink&#34; title=&#34;2 授权基本流程&#34;&gt;&lt;/a&gt;2 授权基本流程&lt;/h2&gt;&lt;p&gt;​	在SpringSecurity中，会使用默认的&lt;strong&gt;FilterSecurityInterceptor&lt;/strong&gt;来进行权限校验。在 &lt;strong&gt;FilterSecurityInterceptor&lt;/strong&gt;中会从&lt;strong&gt;SecurityContextHolder&lt;/strong&gt;获取其&lt;strong&gt;Authentication&lt;/strong&gt;，然后获取其中的权限信息。当前用户是否拥有访问当前资源所需的权限。&lt;/p&gt;
&lt;p&gt;​	&lt;a&gt;所以我们在项目中只需要把当前登录用户的权限信息也存入Authentication。&lt;/a&gt;然后设置我们的资源所需要的权限即可。&lt;/p&gt;
&lt;h2 id=&#34;3-RBAC权限模型&#34;&gt;&lt;a href=&#34;#3-RBAC权限模型&#34; class=&#34;headerlink&#34; title=&#34;3 RBAC权限模型&#34;&gt;&lt;/a&gt;3 RBAC权限模型&lt;/h2&gt;&lt;p&gt;参考博客：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F6dzc1Mjg5MDkxMy9hcnRpY2xlL2RldGFpbHMvMTI0NDYxOTUy&#34;&gt;https://blog.csdn.net/qzw752890913/article/details/124461952&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;​	RBAC（Role Based Access Control，基于角色的访问控制），就是用户通过角色与权限进行关联，而不是直接将权限赋予用户。&lt;/p&gt;
&lt;p&gt;​	一个用户拥有若干个角色，每个角色拥有若干个权限，这样就构成了“用户-角色-权限”的授权模型。这种授权模型的好处在于，不必每次创建用户时都进行权限分配的操作，只要分配用户相应的角色即可，而且角色的权限变更比用户的权限变更要少得多，减少频繁设置。&lt;/p&gt;
&lt;p&gt;RBAC模型中，用户与角色之间、角色与权限之间，一般是多对多的关系。&lt;/p&gt;
&lt;p&gt;所谓“多对多”，就是双向的一对多。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20220825151716381.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	&lt;/p&gt;
&lt;h2 id=&#34;4-授权实现&#34;&gt;&lt;a href=&#34;#4-授权实现&#34; class=&#34;headerlink&#34; title=&#34;4 授权实现&#34;&gt;&lt;/a&gt;4 授权实现&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于配置——在SpringSecurity的配置类中和登录页一样进行权限配置(&lt;font color=red&gt;不推荐，过程繁琐，开发麻烦&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;基于注解——直接可以对我们次处理，也就是对我们的控制层进行权限的设置(&lt;font color=red&gt;强烈推荐&lt;/font&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-1-基于配置授权&#34;&gt;&lt;a href=&#34;#4-1-基于配置授权&#34; class=&#34;headerlink&#34; title=&#34;4.1 基于配置授权&#34;&gt;&lt;/a&gt;4.1 基于配置授权&lt;/h3&gt;&lt;p&gt;这里没什么好说的，从刚开始我们就开始写了权限的认证，就是我们重写的配置类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;// http.authorizeRequests() 所有和授权相关
http.authorizeRequests()
    // 这里面支持 正则 和 ant表达式	
    // anonymous 匿名 没有认证的才可以访问，permitALL 谁都能访问，不需要认证
    .antMatchers(&amp;quot;/user/login&amp;quot;,&amp;quot;/login&amp;quot;,&amp;quot;/loginPage&amp;quot;).anonymous()
    .antMatchers(&amp;quot;/js/**&amp;quot;).permitAll()
    // authenticated 认证了才能访问
    .anyRequest().authenticated();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样写，除了静态资源权限需要这么写，其余请求折磨写太麻烦，我们的业务众多，这样写极大的增加了业务开发的负担，再加上静态资源我们都已经前后端分离也就涉及不到他的权限问题，所以这种方式了解就好。主要重点放在注解学习上。&lt;/p&gt;
&lt;h3 id=&#34;4-2-基于注解授权&#34;&gt;&lt;a href=&#34;#4-2-基于注解授权&#34; class=&#34;headerlink&#34; title=&#34;4.2 基于注解授权&#34;&gt;&lt;/a&gt;4.2 基于注解授权&lt;/h3&gt;&lt;h4 id=&#34;准备阶段&#34;&gt;&lt;a href=&#34;#准备阶段&#34; class=&#34;headerlink&#34; title=&#34;准备阶段&#34;&gt;&lt;/a&gt;准备阶段&lt;/h4&gt;&lt;p&gt;​	SpringSecurity为我们提供了基于注解的权限控制方案，这也是我们项目中主要采用的方式。我们可以使用注解去指定访问对应的资源所需的权限。&lt;/p&gt;
&lt;p&gt;​	&amp;#x3D;&amp;#x3D;但是要使用它我们需要先开启相关配置。&amp;#x3D;&amp;#x3D;，&amp;#x3D;&amp;#x3D;不打开直接用会 500&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@EnableGlobalMethodSecurity(prePostEnabled = true)//启动类上添加注解
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;找到对应的接口&#34;&gt;&lt;a href=&#34;#找到对应的接口&#34; class=&#34;headerlink&#34; title=&#34;找到对应的接口&#34;&gt;&lt;/a&gt;找到对应的接口&lt;/h4&gt;&lt;p&gt;这里我们找到需要授权的接口，对他们进行授权，主要有3个主要注解 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@Secured&lt;/li&gt;
&lt;li&gt;@PerAuthorize() 、@PostAuthorize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要对我们的接口上添加相对应的注解即可，例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Controller
public class loginController&amp;#123;
    @Secured(&amp;quot;ROLE_abc&amp;quot;) //专门用于判断是否具有角色的。能写在方法或类上。参数要以ROLE_开头。
    @RequestMapping(&amp;quot;/toMain&amp;quot;)
    public String toMain()&amp;#123;
        return &amp;quot;redirect:/main.html&amp;quot;;
    &amp;#125;
    
    @RequestMapping(&amp;quot;/hello3&amp;quot;)
    @ResponseBody
    // 是方法或类级别注解。
    @PreAuthorize(&amp;quot;hasAnyAuthority(&amp;#39;demo:delete&amp;#39;)&amp;quot;)
    public String testThree()&amp;#123;
        return &amp;quot;success!&amp;quot;;
    &amp;#125;

    @RequestMapping(&amp;quot;/hello4&amp;quot;)
    @ResponseBody
    //  是方法或类级别注解。
    @PostAuthorize(&amp;quot;hasAnyRole(&amp;#39;ROLE_管理员&amp;#39;)&amp;quot;)
    public String testFour()&amp;#123;
        return &amp;quot;success!&amp;quot;;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;七、配置类说明-2-—访问控制&#34;&gt;&lt;a href=&#34;#七、配置类说明-2-—访问控制&#34; class=&#34;headerlink&#34; title=&#34;七、配置类说明 2 —访问控制&#34;&gt;&lt;/a&gt;七、配置类说明 2 —访问控制&lt;/h1&gt;&lt;p&gt;在前面讲解了认证中所有常用配置，主要是对http.formLogin()进行操作。而在配置类中		http.authorizeRequests()主要是对url进行控制，也就是我们所说的授权（访问控制）。http.authorizeRequests()也支持连缀写法，总体公式为：&lt;/p&gt;
&lt;p&gt;​	url匹配规则.权限控制方法&lt;/p&gt;
&lt;p&gt;通过上面的公式可以有很多url匹配规则和很多权限控制方法。这些内容进行各种组合就形成了Spring Security中的授权。&lt;/p&gt;
&lt;p&gt;​	在所有匹配规则中取所有规则的交集。配置顺序影响了之后授权效果，越是具体的应该放在前面，越是笼统的应该放到后面。	&lt;/p&gt;
&lt;h2 id=&#34;1-anyRequest&#34;&gt;&lt;a href=&#34;#1-anyRequest&#34; class=&#34;headerlink&#34; title=&#34;1.anyRequest()&#34;&gt;&lt;/a&gt;1.anyRequest()&lt;/h2&gt;&lt;p&gt;​	在之前认证过程中我们就已经使用过anyRequest()，表示匹配所有的请求。一般情况下此方法都会使用，设置全部内容都需要进行认证。&lt;/p&gt;
&lt;p&gt;​	代码示例:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;anyRequest().authenticated();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-antMatcher&#34;&gt;&lt;a href=&#34;#2-antMatcher&#34; class=&#34;headerlink&#34; title=&#34;2.antMatcher()&#34;&gt;&lt;/a&gt;2.antMatcher()&lt;/h2&gt;&lt;p&gt;​	方法定义如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public C antMatchers(String... antPatterns)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	参数是不定向参数，每个参数是一个 正则&amp;#x2F;ant表达式，用于匹配URL规则。&lt;/p&gt;
&lt;p&gt;​	规则如下：&lt;/p&gt;
&lt;p&gt;​	? 匹配一个字符&lt;/p&gt;
&lt;p&gt;​	* 匹配0个或多个字符&lt;/p&gt;
&lt;p&gt;​	** 匹配0个或多个目录&lt;/p&gt;
&lt;p&gt;​	在实际项目中经常需要放行所有静态资源，下面演示放行js文件夹下所有脚本文件。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;.antMatchers(&amp;quot;/js/**&amp;quot;).permitAll()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还有一种配置方式是只要是.js文件都放行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;antMatchers(&amp;quot;/**/*.js&amp;quot;).permitAll()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-regexMatchers&#34;&gt;&lt;a href=&#34;#3-regexMatchers&#34; class=&#34;headerlink&#34; title=&#34;3.regexMatchers()&#34;&gt;&lt;/a&gt;3.regexMatchers()&lt;/h2&gt;&lt;h3 id=&#34;3-1介绍&#34;&gt;&lt;a href=&#34;#3-1介绍&#34; class=&#34;headerlink&#34; title=&#34;3.1介绍&#34;&gt;&lt;/a&gt;3.1介绍&lt;/h3&gt;&lt;p&gt;使用正则表达式进行匹配。和antMatchers()主要的区别就是参数，antMatchers()参数是ant表达式，regexMatchers()参数是正则表达式。&lt;/p&gt;
&lt;p&gt;演示所有以.js结尾的文件都被放行。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;.regexMatchers(&amp;quot;.+[.]js&amp;quot;).permitAll()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3-2两个参数时使用方式&#34;&gt;&lt;a href=&#34;#3-2两个参数时使用方式&#34; class=&#34;headerlink&#34; title=&#34;3.2两个参数时使用方式&#34;&gt;&lt;/a&gt;3.2两个参数时使用方式&lt;/h3&gt;&lt;p&gt;无论是antMatchers()还是regexMatchers()都具有两个参数的方法，其中第一个参数都是HttpMethod，表示请求方式，当设置了HttpMethod后表示只有设定的特定的请求方式才执行对应的权限设置。&lt;/p&gt;
&lt;p&gt;枚举类型HttpMethod内置属性如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-15.jpg&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;4-内置访问控制方法介绍&#34;&gt;&lt;a href=&#34;#4-内置访问控制方法介绍&#34; class=&#34;headerlink&#34; title=&#34;4 内置访问控制方法介绍&#34;&gt;&lt;/a&gt;4 内置访问控制方法介绍&lt;/h2&gt;&lt;p&gt;​	Spring Security匹配了URL后调用了permitAll()表示不需要认证，随意访问。在Spring Security中提供了多种内置控制。&lt;/p&gt;
&lt;h3 id=&#34;1-permitAll&#34;&gt;&lt;a href=&#34;#1-permitAll&#34; class=&#34;headerlink&#34; title=&#34;1.permitAll()&#34;&gt;&lt;/a&gt;1.permitAll()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;permitAll()表示所匹配的URL任何人都允许访问。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-authenticated&#34;&gt;&lt;a href=&#34;#2-authenticated&#34; class=&#34;headerlink&#34; title=&#34;2.authenticated()&#34;&gt;&lt;/a&gt;2.authenticated()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;authenticated()表示所匹配的URL都需要被认证才能访问。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-anonymous&#34;&gt;&lt;a href=&#34;#3-anonymous&#34; class=&#34;headerlink&#34; title=&#34;3.anonymous()&#34;&gt;&lt;/a&gt;3.anonymous()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;anonymous()表示可以匿名访问匹配的URL。和permitAll()效果类似，只是设置为anonymous()的url会执行filter 链中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	官方源码定义如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-18.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;4-denyAll&#34;&gt;&lt;a href=&#34;#4-denyAll&#34; class=&#34;headerlink&#34; title=&#34;4.denyAll()&#34;&gt;&lt;/a&gt;4.denyAll()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;denyAll()表示所匹配的URL都不允许被访问。&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-19.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;5-rememberMe&#34;&gt;&lt;a href=&#34;#5-rememberMe&#34; class=&#34;headerlink&#34; title=&#34;5.rememberMe()&#34;&gt;&lt;/a&gt;5.rememberMe()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;被“remember me”的用户允许访问&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-20.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;6-fullyAuthenticated&#34;&gt;&lt;a href=&#34;#6-fullyAuthenticated&#34; class=&#34;headerlink&#34; title=&#34;6.fullyAuthenticated()&#34;&gt;&lt;/a&gt;6.fullyAuthenticated()&lt;/h3&gt;&lt;p&gt;​	&lt;strong&gt;如果用户不是被remember me的，才可以访问&lt;/strong&gt;。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-21.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;7-hasIpAddress-String&#34;&gt;&lt;a href=&#34;#7-hasIpAddress-String&#34; class=&#34;headerlink&#34; title=&#34;7.hasIpAddress(String)&#34;&gt;&lt;/a&gt;7.hasIpAddress(String)&lt;/h3&gt;&lt;p&gt;如果请求是指定的IP就运行访问。&lt;/p&gt;
&lt;p&gt;​	可以通过request.getRemoteAddr()获取ip地址。&lt;/p&gt;
&lt;p&gt;​	需要注意的是在本机进行测试时localhost和127.0.0.1输出的ip地址是不一样的。&lt;/p&gt;
&lt;p&gt;​	当浏览器中通过localhost进行访问时控制台打印的内容：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-25-1661415211434.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	当浏览器中通过127.0.0.1访问时控制台打印的内容：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-26-1661415211434.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	当浏览器中通过具体ip进行访问时控制台打印内容：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-27-1606734864126-1661415211434.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	使用Spring Security时经常会看见403（无权限），默认情况下显示的效果如下：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-28-1661415211434.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	而在实际项目中可能都是一个异步请求，显示上述效果对于用户就不是特别友好了。Spring Security支持自定义权限受限。&lt;/p&gt;
&lt;h4 id=&#34;1-新建类&#34;&gt;&lt;a href=&#34;#1-新建类&#34; class=&#34;headerlink&#34; title=&#34;1.新建类&#34;&gt;&lt;/a&gt;1.新建类&lt;/h4&gt;&lt;p&gt;​	新建类实现&lt;strong&gt;AccessDeniedHandler&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component
public class MyAccessDeniedHandler implements AccessDeniedHandler &amp;#123;
    @Override
    public void handle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, AccessDeniedException e) throws IOException, ServletException &amp;#123;
        httpServletResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);
        httpServletResponse.setHeader(&amp;quot;Content-Type&amp;quot;,&amp;quot;application/json;charset=utf-8&amp;quot;);
        PrintWriter out = httpServletResponse.getWriter();
        out.write(&amp;quot;&amp;#123;\&amp;quot;status\&amp;quot;:\&amp;quot;error\&amp;quot;,\&amp;quot;msg\&amp;quot;:\&amp;quot;权限不足，请联系管理员!\&amp;quot;&amp;#125;&amp;quot;);
        out.flush();
        out.close();
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-修改配置类&#34;&gt;&lt;a href=&#34;#2-修改配置类&#34; class=&#34;headerlink&#34; title=&#34;2.修改配置类&#34;&gt;&lt;/a&gt;2.修改配置类&lt;/h4&gt;&lt;p&gt;​	配置类中重点添加异常处理器。设置访问受限后交给哪个对象进行处理。&lt;/p&gt;
&lt;p&gt;​	myAccessDeniedHandler是在配置类中进行自动注入的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//异常处理
http.exceptionHandling()
        .accessDeniedHandler(myAccessDeniedHandler);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-总结-1&#34;&gt;&lt;a href=&#34;#5-总结-1&#34; class=&#34;headerlink&#34; title=&#34;5 总结&#34;&gt;&lt;/a&gt;5 总结&lt;/h2&gt;&lt;p&gt;在选择特定请求时 2&amp;#x2F;3 任选其一 效果相同，主要注意内置访问控制方法的选择&lt;/p&gt;
&lt;h1 id=&#34;八、配置类说明-3-—基于表达式的访问控制&#34;&gt;&lt;a href=&#34;#八、配置类说明-3-—基于表达式的访问控制&#34; class=&#34;headerlink&#34; title=&#34;八、配置类说明 3 —基于表达式的访问控制&#34;&gt;&lt;/a&gt;八、配置类说明 3 —基于表达式的访问控制&lt;/h1&gt;&lt;h2 id=&#34;1-access-方法使用&#34;&gt;&lt;a href=&#34;#1-access-方法使用&#34; class=&#34;headerlink&#34; title=&#34;1.access()方法使用&#34;&gt;&lt;/a&gt;1.access()方法使用&lt;/h2&gt;&lt;p&gt;​	之前学习的登录用户权限判断实际上底层实现都是调用access(表达式)&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-29.jpg&#34; class=&#34;&#34;&gt;


&lt;p&gt;​	可以通过access()实现和之前学习的权限控制完成相同的功能。&lt;/p&gt;
&lt;h3 id=&#34;1-1以hasRole和permitAll举例&#34;&gt;&lt;a href=&#34;#1-1以hasRole和permitAll举例&#34; class=&#34;headerlink&#34; title=&#34;1.1以hasRole和permitAll举例&#34;&gt;&lt;/a&gt;1.1以hasRole和permitAll举例&lt;/h3&gt;&lt;p&gt;​	下面代码和直接使用permitAll()和hasRole()是等效的。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-30.jpg&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;2-自定义权限验证方法&#34;&gt;&lt;a href=&#34;#2-自定义权限验证方法&#34; class=&#34;headerlink&#34; title=&#34;2.自定义权限验证方法&#34;&gt;&lt;/a&gt;2.自定义权限验证方法&lt;/h2&gt;&lt;p&gt;​	虽然这里面已经包含了很多的表达式(方法)但是在实际项目中很有可能出现需要自己自定义逻辑的情况。&lt;/p&gt;
&lt;p&gt;​	判断登录用户是否具有访问当前URL权限。&lt;/p&gt;
&lt;h3 id=&#34;2-1新建接口及实现类&#34;&gt;&lt;a href=&#34;#2-1新建接口及实现类&#34; class=&#34;headerlink&#34; title=&#34;2.1新建接口及实现类&#34;&gt;&lt;/a&gt;2.1新建接口及实现类&lt;/h3&gt;&lt;p&gt;​	新建接口com.msb.service.MyService后新建实现类。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;public interface MyService &amp;#123;
    boolean hasPermission(HttpServletRequest request, Authentication authentication);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component
public class MyServiceImpl implements MyService &amp;#123;
    @Override
    public boolean hasPermission(HttpServletRequest request, Authentication authentication) &amp;#123;
        Object obj = authentication.getPrincipal();
        if(obj instanceof UserDetails)&amp;#123;
            UserDetails user = (UserDetails) obj;
            Collection&amp;lt;? extends GrantedAuthority&amp;gt; authorities = user.getAuthorities();
            return authorities.contains(new SimpleGrantedAuthority(request.getRequestURI()));
        &amp;#125;
        return false;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-2修改配置类&#34;&gt;&lt;a href=&#34;#2-2修改配置类&#34; class=&#34;headerlink&#34; title=&#34;2.2修改配置类&#34;&gt;&lt;/a&gt;2.2修改配置类&lt;/h3&gt;&lt;p&gt;​	在access中通过@bean的id名.方法(参数)的形式进行调用&lt;/p&gt;
&lt;p&gt;​	配置类中修改如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt; // url 拦截 (授权)
http.authorizeRequests()
        .antMatchers(&amp;quot;/login.html&amp;quot;).access(&amp;quot;permitAll&amp;quot;)
        .antMatchers(&amp;quot;/fail.html&amp;quot;).permitAll()
        // @Bean的名字，表示引入某个Bean，我们的Bean在主动命名的情况下，都是以首字母小写命名
        .anyRequest().access(&amp;quot;@myServiceImpl.hasPermission(request,authentication)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;九、基于注解的访问控制&#34;&gt;&lt;a href=&#34;#九、基于注解的访问控制&#34; class=&#34;headerlink&#34; title=&#34;九、基于注解的访问控制&#34;&gt;&lt;/a&gt;九、基于注解的访问控制&lt;/h1&gt;&lt;p&gt;​	在Spring Security中提供了一些访问控制的注解。这些注解都是默认是都不可用的，需要通过@EnableGlobalMethodSecurity进行开启后使用。&lt;/p&gt;
&lt;p&gt;​	&amp;#x3D;&amp;#x3D;如果设置的条件允许，程序正常执行。如果不允许会报500&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;​	这些注解可以写到Service接口或方法上上也可以写到Controller或Controller的方法上。通常情况下都是写在控制器方法上的，控制接口URL是否允许被访问。&lt;/p&gt;
&lt;h2 id=&#34;1-Secured&#34;&gt;&lt;a href=&#34;#1-Secured&#34; class=&#34;headerlink&#34; title=&#34;1.@Secured&#34;&gt;&lt;/a&gt;1.@Secured&lt;/h2&gt;&lt;p&gt;​	@Secured是&amp;#x3D;&amp;#x3D;专门用于判断是否具有角色的&amp;#x3D;&amp;#x3D;。能写在&amp;#x3D;&amp;#x3D;方法或类&amp;#x3D;&amp;#x3D;上。&amp;#x3D;&amp;#x3D;参数要以ROLE_开头&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-32-1661416083118.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;1-1实现步骤&#34;&gt;&lt;a href=&#34;#1-1实现步骤&#34; class=&#34;headerlink&#34; title=&#34;1.1实现步骤&#34;&gt;&lt;/a&gt;1.1实现步骤&lt;/h3&gt;&lt;h4 id=&#34;1-1-1-开启注解&#34;&gt;&lt;a href=&#34;#1-1-1-开启注解&#34; class=&#34;headerlink&#34; title=&#34;1.1.1 开启注解&#34;&gt;&lt;/a&gt;1.1.1 开启注解&lt;/h4&gt;&lt;p&gt;​	在启动类(也可以在配置类等能够扫描的类上)上添加@EnableGlobalMethodSecurity(securedEnabled &amp;#x3D; true)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
@EnableGlobalMethodSecurity(securedEnabled = true)
public class MyApp &amp;#123;
    public static void main(String [] args)&amp;#123;
        SpringApplication.run(MyApp.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-1-2在控制器方法上添加-Secured注解&#34;&gt;&lt;a href=&#34;#1-1-2在控制器方法上添加-Secured注解&#34; class=&#34;headerlink&#34; title=&#34;1.1.2在控制器方法上添加@Secured注解&#34;&gt;&lt;/a&gt;1.1.2在控制器方法上添加@Secured注解&lt;/h4&gt;&lt;p&gt;​	在LoginController中方法上添加注解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Secured(&amp;quot;ROLE_abc&amp;quot;)
@RequestMapping(&amp;quot;/toMain&amp;quot;)
public String toMain()&amp;#123;
    return &amp;quot;redirect:/main.html&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-1-3配置类&#34;&gt;&lt;a href=&#34;#1-1-3配置类&#34; class=&#34;headerlink&#34; title=&#34;1.1.3配置类&#34;&gt;&lt;/a&gt;1.1.3配置类&lt;/h4&gt;&lt;p&gt;​	配置类中方法配置保留最基本的配置即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;protected void configure(HttpSecurity http) throws Exception &amp;#123;
    // 表单认证
    http.formLogin()
            .loginProcessingUrl(&amp;quot;/login&amp;quot;)   //当发现/login时认为是登录，需要执行UserDetailsServiceImpl
            .successForwardUrl(&amp;quot;/toMain&amp;quot;)   //此处是post请求
            .loginPage(&amp;quot;/login.html&amp;quot;);

    // url 拦截
    http.authorizeRequests()
            .antMatchers(&amp;quot;/login.html&amp;quot;).permitAll() //login.html不需要被认证
            .anyRequest().authenticated();//所有的请求都必须被认证。必须登录后才能访问。

    //关闭csrf防护
    http.csrf().disable();

&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-PreAuthorize-x2F-PostAuthorize&#34;&gt;&lt;a href=&#34;#2-PreAuthorize-x2F-PostAuthorize&#34; class=&#34;headerlink&#34; title=&#34;2.@PreAuthorize&amp;#x2F;@PostAuthorize&#34;&gt;&lt;/a&gt;2.@PreAuthorize&amp;#x2F;@PostAuthorize&lt;/h2&gt;&lt;p&gt;​	@PreAuthorize和@PostAuthorize都是方法或类级别注解。&lt;/p&gt;
&lt;p&gt;​	**@PreAuthorize ** 表示访问方法或类在&amp;#x3D;&amp;#x3D;执行之前先判断权限&amp;#x3D;&amp;#x3D;，大多情况下都是使用这个注解，注解的参数和access()方法参数取值相同，都是权限表达式。&lt;/p&gt;
&lt;p&gt;​	@&lt;strong&gt;PostAuthorize&lt;/strong&gt; 表示&amp;#x3D;&amp;#x3D;方法或类执行结束后判断权限&amp;#x3D;&amp;#x3D;，此注解很少被使用到。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/image-20220825155542682.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;2-1实现步骤&#34;&gt;&lt;a href=&#34;#2-1实现步骤&#34; class=&#34;headerlink&#34; title=&#34;2.1实现步骤&#34;&gt;&lt;/a&gt;2.1实现步骤&lt;/h3&gt;&lt;h4 id=&#34;2-1-1开启注解&#34;&gt;&lt;a href=&#34;#2-1-1开启注解&#34; class=&#34;headerlink&#34; title=&#34;2.1.1开启注解&#34;&gt;&lt;/a&gt;2.1.1开启注解&lt;/h4&gt;&lt;p&gt;​	在启动类中开启@PreAuthorize注解。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@SpringBootApplication
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class MyApp &amp;#123;
    public static void main(String [] args)&amp;#123;
        SpringApplication.run(MyApp.class,args);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-1-2添加-PreAuthorize&#34;&gt;&lt;a href=&#34;#2-1-2添加-PreAuthorize&#34; class=&#34;headerlink&#34; title=&#34;2.1.2添加@PreAuthorize&#34;&gt;&lt;/a&gt;2.1.2添加@PreAuthorize&lt;/h4&gt;&lt;p&gt;​	在控制器方法上添加@PreAuthorize，参数可以是任何access()支持的表达式&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@PreAuthorize(&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;)
@RequestMapping(&amp;quot;/toMain&amp;quot;)
public String toMain()&amp;#123;
    return &amp;quot;redirect:/main.html&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-自定义权限校验方法-针对Pre注解&#34;&gt;&lt;a href=&#34;#3-自定义权限校验方法-针对Pre注解&#34; class=&#34;headerlink&#34; title=&#34;3.自定义权限校验方法(针对Pre注解)&#34;&gt;&lt;/a&gt;3.自定义权限校验方法(针对Pre注解)&lt;/h2&gt;&lt;p&gt;我们如果觉得单纯验证不合适，或者说不符合我们的业务我们也可以自定义方法&lt;/p&gt;
&lt;h3 id=&#34;其它权限校验方法&#34;&gt;&lt;a href=&#34;#其它权限校验方法&#34; class=&#34;headerlink&#34; title=&#34;其它权限校验方法&#34;&gt;&lt;/a&gt;其它权限校验方法&lt;/h3&gt;&lt;p&gt;​	我们前面都是使用@PreAuthorize注解，然后在在其中使用的是hasAuthority方法进行校验。SpringSecurity还为我们提供了其它方法例如：hasAnyAuthority，hasRole，hasAnyRole等。&lt;/p&gt;
&lt;p&gt;​	这里我们先不急着去介绍这些方法，我们先去理解hasAuthority的原理，然后再去学习其他方法你就更容易理解，而不是死记硬背区别。并且我们也可以选择定义校验方法，实现我们自己的校验逻辑。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;hasAuthority&lt;/strong&gt;方法实际是执行到了&lt;strong&gt;SecurityExpressionRoot&lt;/strong&gt;的&lt;strong&gt;hasAuthority&lt;/strong&gt;，大家只要断点调试既可知道它内部的校验原理。&lt;/p&gt;
&lt;p&gt;​	它内部其实是调用&lt;strong&gt;authentication&lt;/strong&gt;的&lt;strong&gt;getAuthorities&lt;/strong&gt;方法获取用户的权限列表。然后判断我们存入的方法参数数据在权限列表中。&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;hasAnyAuthority&lt;/strong&gt;方法可以传入多个权限，只有用户有其中任意一个权限都可以访问对应资源。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @PreAuthorize(&amp;quot;hasAnyAuthority(&amp;#39;admin&amp;#39;,&amp;#39;test&amp;#39;,&amp;#39;system:dept:list&amp;#39;)&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;strong&gt;hasRole&lt;/strong&gt;要求有对应的角色才可以访问，但是它内部会把我们传入的参数拼接上 &lt;strong&gt;ROLE_&lt;/strong&gt; 后再去比较。所以这种情况下要用用户对应的权限也要有 &lt;strong&gt;ROLE_&lt;/strong&gt; 这个前缀才可以。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @PreAuthorize(&amp;quot;hasRole(&amp;#39;system:dept:list&amp;#39;)&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	&lt;strong&gt;hasAnyRole&lt;/strong&gt; 有任意的角色就可以访问。它内部也会把我们传入的参数拼接上 &lt;strong&gt;ROLE_&lt;/strong&gt; 后再去比较。所以这种情况下要用用户对应的权限也要有 &lt;strong&gt;ROLE_&lt;/strong&gt; 这个前缀才可以。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @PreAuthorize(&amp;quot;hasAnyRole(&amp;#39;admin&amp;#39;,&amp;#39;system:dept:list&amp;#39;)&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;自定义权限校验方法&#34;&gt;&lt;a href=&#34;#自定义权限校验方法&#34; class=&#34;headerlink&#34; title=&#34;自定义权限校验方法&#34;&gt;&lt;/a&gt;自定义权限校验方法&lt;/h3&gt;&lt;p&gt;​	我们也可以定义自己的权限校验方法，在@PreAuthorize注解中使用我们的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component(&amp;quot;ex&amp;quot;)
public class MyExpressionRoot &amp;#123;
    // 一定要返回一个Bool值
    public boolean hasAuthority(String authority)&amp;#123;
        //获取当前用户的权限
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        LoginUser loginUser = (LoginUser) authentication.getPrincipal();
        List&amp;lt;String&amp;gt; permissions = loginUser.getPermissions();
        //判断用户权限集合中是否存在authority
        return permissions.contains(authority);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	 &lt;strong&gt;在SPEL表达式中使用 @ex相当于获取容器中bean的名字为ex的对象。然后再调用这个对象的hasAuthority方法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @RequestMapping(&amp;quot;/hello&amp;quot;)
    @PreAuthorize(&amp;quot;@ex.hasAuthority(&amp;#39;system:dept:list&amp;#39;)&amp;quot;)
    public String hello()&amp;#123;
        return &amp;quot;hello&amp;quot;;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十、自定义失败处理&#34;&gt;&lt;a href=&#34;#十、自定义失败处理&#34; class=&#34;headerlink&#34; title=&#34;十、自定义失败处理&#34;&gt;&lt;/a&gt;十、自定义失败处理&lt;/h1&gt;&lt;p&gt;​	我们还希望在认证失败或者是授权失败的情况下也能和我们的接口一样返回相同结构的json，这样可以让前端能对响应进行统一的处理。要实现这个功能我们需要知道SpringSecurity的异常处理机制。&lt;/p&gt;
&lt;p&gt;​	在SpringSecurity中，如果我们在认证或者授权的过程中出现了异常会被ExceptionTranslationFilter捕获到。在ExceptionTranslationFilter中会去判断是认证失败还是授权失败出现的异常。&lt;/p&gt;
&lt;p&gt;​	如果是&amp;#x3D;&amp;#x3D;认证过程中出现的异常&amp;#x3D;&amp;#x3D;会被封装成&lt;strong&gt;AuthenticationException&lt;/strong&gt;然后调用&lt;strong&gt;AuthenticationEntryPoint&lt;/strong&gt;对象的方法去进行异常处理。&lt;/p&gt;
&lt;p&gt;​	如果是&amp;#x3D;&amp;#x3D;授权过程中出现的异常&amp;#x3D;&amp;#x3D;会被封装成&lt;strong&gt;AccessDeniedException&lt;/strong&gt;然后调用&lt;strong&gt;AccessDeniedHandler&lt;/strong&gt;对象的方法去进行异常处理。&lt;/p&gt;
&lt;p&gt;​	所以如果我们&amp;#x3D;&amp;#x3D;需要自定义异常处理&amp;#x3D;&amp;#x3D;，我们只需要&amp;#x3D;&amp;#x3D;自定义AuthenticationEntryPoint和AccessDeniedHandler然后配置给SpringSecurity即可&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;h2 id=&#34;①自定义实现类&#34;&gt;&lt;a href=&#34;#①自定义实现类&#34; class=&#34;headerlink&#34; title=&#34;①自定义实现类&#34;&gt;&lt;/a&gt;①自定义实现类&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component
public class AccessDeniedHandlerImpl implements AccessDeniedHandler &amp;#123;
    @Override
    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException &amp;#123;
        ResponseResult result = new ResponseResult(HttpStatus.FORBIDDEN.value(), &amp;quot;权限不足&amp;quot;);
        String json = JSON.toJSONString(result);
        WebUtils.renderString(response,json);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Component
public class AuthenticationEntryPointImpl implements AuthenticationEntryPoint &amp;#123;
    @Override
    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException &amp;#123;
        ResponseResult result = new ResponseResult(HttpStatus.UNAUTHORIZED.value(), &amp;quot;认证失败请重新登录&amp;quot;);
        String json = JSON.toJSONString(result);
        WebUtils.renderString(response,json);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;②配置给SpringSecurity&#34;&gt;&lt;a href=&#34;#②配置给SpringSecurity&#34; class=&#34;headerlink&#34; title=&#34;②配置给SpringSecurity&#34;&gt;&lt;/a&gt;②配置给SpringSecurity&lt;/h2&gt;&lt;p&gt;​	先注入对应的处理器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @Autowired
    private AuthenticationEntryPoint authenticationEntryPoint;

    @Autowired
    private AccessDeniedHandler accessDeniedHandler;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	然后我们可以使用HttpSecurity对象的方法去配置。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;        http.exceptionHandling()
            .authenticationEntryPoint(authenticationEntryPoint)
            .accessDeniedHandler(accessDeniedHandler);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十一、Remember-Me功能实现&#34;&gt;&lt;a href=&#34;#十一、Remember-Me功能实现&#34; class=&#34;headerlink&#34; title=&#34;十一、Remember Me功能实现&#34;&gt;&lt;/a&gt;十一、Remember Me功能实现&lt;/h1&gt;&lt;p&gt;​	Spring Security 中Remember Me为“记住我”功能，用户只需要在登录时添加remember-me复选框，取值为true。Spring Security会自动把用户信息存储到数据源中，以后就可以不登录进行访问。&lt;/p&gt;
&lt;h2 id=&#34;1-添加依赖&#34;&gt;&lt;a href=&#34;#1-添加依赖&#34; class=&#34;headerlink&#34; title=&#34;1.添加依赖&#34;&gt;&lt;/a&gt;1.添加依赖&lt;/h2&gt;&lt;p&gt;​	Spring Security实现Remember Me 功能时底层实现依赖Spring-JDBC，所以需要导入Spring-JDBC。以后多使用MyBatis框架而很少直接导入spring-jdbc，所以此处导入mybatis启动器&lt;/p&gt;
&lt;p&gt;同时还需要添加MySQL驱动&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.1&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;5.1.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-配置数据源&#34;&gt;&lt;a href=&#34;#2-配置数据源&#34; class=&#34;headerlink&#34; title=&#34;2.配置数据源&#34;&gt;&lt;/a&gt;2.配置数据源&lt;/h2&gt;&lt;p&gt;​	在application.properties中配置数据源。请确保数据库中已经存在security数据库&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;properties&#34;&gt;spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/mashibing
spring.datasource.username=root
spring.datasource.password=root
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-编写配置&#34;&gt;&lt;a href=&#34;#3-编写配置&#34; class=&#34;headerlink&#34; title=&#34;3.编写配置&#34;&gt;&lt;/a&gt;3.编写配置&lt;/h2&gt;&lt;p&gt;​	新建com.msb.config.RememberMeConfig类，并创建Bean对象&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Configuration
public class RememberMeConfig &amp;#123;
    @Autowired
    private DataSource dataSource;
    @Bean
    public PersistentTokenRepository getPersistentTokenRepository() &amp;#123;
        JdbcTokenRepositoryImpl jdbcTokenRepositoryImpl=new JdbcTokenRepositoryImpl();
        jdbcTokenRepositoryImpl.setDataSource(dataSource);
        //自动建表，第一次启动时需要，第二次启动时注释掉
//        jdbcTokenRepositoryImpl.setCreateTableOnStartup(true);
        return jdbcTokenRepositoryImpl;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-修改SecurityConfig&#34;&gt;&lt;a href=&#34;#4-修改SecurityConfig&#34; class=&#34;headerlink&#34; title=&#34;4.修改SecurityConfig&#34;&gt;&lt;/a&gt;4.修改SecurityConfig&lt;/h2&gt;&lt;p&gt;​	在SecurityConfig中添加RememberMeConfig和UserDetailsService实现类对象，并自动注入。&lt;/p&gt;
&lt;p&gt;​	在configure中添加下面配置内容。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;http.rememberMe()
    .userDetailsService(userDetailsService) //登录逻辑交给哪个对象
    .tokenRepository(repository);   //持久层对象
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-在客户端页面中添加复选框&#34;&gt;&lt;a href=&#34;#5-在客户端页面中添加复选框&#34; class=&#34;headerlink&#34; title=&#34;5.在客户端页面中添加复选框&#34;&gt;&lt;/a&gt;5.在客户端页面中添加复选框&lt;/h2&gt;&lt;p&gt;​	在客户端登录页面中添加remember-me的复选框，只要用户勾选了复选框下次就不需要进行登录了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;form action = &amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    用户名：&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    密码:&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;password&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    &amp;lt;input type=&amp;quot;checkbox&amp;quot; name=&amp;quot;remember-me&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;br/&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;登录&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;6-有效时间&#34;&gt;&lt;a href=&#34;#6-有效时间&#34; class=&#34;headerlink&#34; title=&#34;6.有效时间&#34;&gt;&lt;/a&gt;6.有效时间&lt;/h2&gt;&lt;p&gt;​	默认情况下重启项目后登录状态失效了。但是可以通过设置状态有效时间，即使项目重新启动下次也可以正常登录。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//remember Me
http.rememberMe()
        .tokenValiditySeconds(120)//单位：秒
        .tokenRepository(repository)
        .userDetailsService(userDetailsServiceImpl);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十二、Thymeleaf中Spring-Security的使用&#34;&gt;&lt;a href=&#34;#十二、Thymeleaf中Spring-Security的使用&#34; class=&#34;headerlink&#34; title=&#34;十二、Thymeleaf中Spring Security的使用&#34;&gt;&lt;/a&gt;十二、Thymeleaf中Spring Security的使用&lt;/h1&gt;&lt;p&gt;​	Spring Security可以在一些视图技术中进行控制显示效果。例如：JSP或Thymeleaf。在非前后端分离且使用Spring Boot的项目中多使用Thymeleaf作为视图展示技术。&lt;/p&gt;
&lt;p&gt;​	Thymeleaf对Spring Security的支持都放在thymeleaf-extras-springsecurityX中，目前最新版本为5。所以需要在项目中添加此jar包的依赖和thymeleaf的依赖。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.thymeleaf.extras&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;thymeleaf-extras-springsecurity5&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;3.0.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	在html页面中引入thymeleaf命名空间和security命名空间&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;
      xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;
xmlns:sec=&amp;quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-获取属性&#34;&gt;&lt;a href=&#34;#1-获取属性&#34; class=&#34;headerlink&#34; title=&#34;1.获取属性&#34;&gt;&lt;/a&gt;1.获取属性&lt;/h2&gt;&lt;p&gt;​	可以在html页面中通过 sec:authentication&amp;#x3D;””获取UsernamePasswordAuthenticationToken中所有getXXX的内容，包含父类中的getXXX的内容。&lt;/p&gt;
&lt;p&gt;​	根据源码得出下面属性：&lt;/p&gt;
&lt;p&gt;​	l name：登录账号名称&lt;/p&gt;
&lt;p&gt;​	l principal：登录主体，在自定义登录逻辑中是UserDet ails&lt;/p&gt;
&lt;p&gt;​	l credentials：凭证&lt;/p&gt;
&lt;p&gt;​	l authorities：权限和角色&lt;/p&gt;
&lt;p&gt;​	l details：实际上是WebAuthenticationDetails的实例。可以获取remoteAddress(客户端ip)和sessionId(当	前sessionId)&lt;/p&gt;
&lt;h3 id=&#34;1-1实现步骤：&#34;&gt;&lt;a href=&#34;#1-1实现步骤：&#34; class=&#34;headerlink&#34; title=&#34;1.1实现步骤：&#34;&gt;&lt;/a&gt;1.1实现步骤：&lt;/h3&gt;&lt;h4 id=&#34;1-1-1新建demo-html&#34;&gt;&lt;a href=&#34;#1-1-1新建demo-html&#34; class=&#34;headerlink&#34; title=&#34;1.1.1新建demo.html&#34;&gt;&lt;/a&gt;1.1.1新建demo.html&lt;/h4&gt;&lt;p&gt;​	在项目resources中新建templates文件夹，在templates中新建demo.html页面&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-34.jpg&#34; class=&#34;&#34;&gt;


&lt;h4 id=&#34;1-1-2编写demo-html&#34;&gt;&lt;a href=&#34;#1-1-2编写demo-html&#34; class=&#34;headerlink&#34; title=&#34;1.1.2编写demo.html&#34;&gt;&lt;/a&gt;1.1.2编写demo.html&lt;/h4&gt;&lt;p&gt;​	在demo.html中编写下面内容，测试获取到的值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;
      xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;
      xmlns:sec=&amp;quot;http://www.thymeleaf.org/thymeleaf-extras-springsecurity5&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    登录账号:&amp;lt;span sec:authentication=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    登录账号:&amp;lt;span sec:authentication=&amp;quot;principal.username&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    凭证：&amp;lt;span sec:authentication=&amp;quot;credentials&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    权限和角色：&amp;lt;span sec:authentication=&amp;quot;authorities&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    客户端地址：&amp;lt;span sec:authentication=&amp;quot;details.remoteAddress&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
    sessionId：&amp;lt;span sec:authentication=&amp;quot;details.sessionId&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;1-1-3编写控制器&#34;&gt;&lt;a href=&#34;#1-1-3编写控制器&#34; class=&#34;headerlink&#34; title=&#34;1.1.3编写控制器&#34;&gt;&lt;/a&gt;1.1.3编写控制器&lt;/h4&gt;&lt;p&gt;​	thymeleaf页面需要控制转发，在控制器类中编写下面方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@RequestMapping(&amp;quot;/demo&amp;quot;)
public String demo()&amp;#123;
    return &amp;quot;demo&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-权限判断&#34;&gt;&lt;a href=&#34;#2-权限判断&#34; class=&#34;headerlink&#34; title=&#34;2.权限判断&#34;&gt;&lt;/a&gt;2.权限判断&lt;/h2&gt;&lt;p&gt;​	在html页面中可以使用sec:authorize&amp;#x3D;”表达式”进行权限控制，判断是否显示某些内容。表达式的内容和access(表达式)的用法相同。如果用户具有指定的权限，则显示对应的内容；如果表达式不成立，则不显示对应的元素。&lt;/p&gt;
&lt;h3 id=&#34;2-1不同权限的用户显示不同的按钮&#34;&gt;&lt;a href=&#34;#2-1不同权限的用户显示不同的按钮&#34; class=&#34;headerlink&#34; title=&#34;2.1不同权限的用户显示不同的按钮&#34;&gt;&lt;/a&gt;2.1不同权限的用户显示不同的按钮&lt;/h3&gt;&lt;h4 id=&#34;2-1-1设置用户角色和权限&#34;&gt;&lt;a href=&#34;#2-1-1设置用户角色和权限&#34; class=&#34;headerlink&#34; title=&#34;2.1.1设置用户角色和权限&#34;&gt;&lt;/a&gt;2.1.1设置用户角色和权限&lt;/h4&gt;&lt;p&gt;​	设定用户具有admin，&amp;#x2F;insert，&amp;#x2F;delete权限ROLE_abc角色。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;return new User(username,password, 
                AuthorityUtils.commaSeparatedStringToAuthorityList(&amp;quot;admin,ROLE_abc,/insert,/delete&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-1-2控制页面显示效果&#34;&gt;&lt;a href=&#34;#2-1-2控制页面显示效果&#34; class=&#34;headerlink&#34; title=&#34;2.1.2控制页面显示效果&#34;&gt;&lt;/a&gt;2.1.2控制页面显示效果&lt;/h4&gt;&lt;p&gt;在页面中根据用户权限和角色判断页面中显示的内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;通过权限判断：
&amp;lt;button sec:authorize=&amp;quot;hasAuthority(&amp;#39;/insert&amp;#39;)&amp;quot;&amp;gt;新增&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasAuthority(&amp;#39;/delete&amp;#39;)&amp;quot;&amp;gt;删除&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasAuthority(&amp;#39;/update&amp;#39;)&amp;quot;&amp;gt;修改&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasAuthority(&amp;#39;/select&amp;#39;)&amp;quot;&amp;gt;查看&amp;lt;/button&amp;gt;
&amp;lt;br/&amp;gt;
通过角色判断：
&amp;lt;button sec:authorize=&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;&amp;gt;新增&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;&amp;gt;删除&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;&amp;gt;修改&amp;lt;/button&amp;gt;
&amp;lt;button sec:authorize=&amp;quot;hasRole(&amp;#39;abc&amp;#39;)&amp;quot;&amp;gt;查看&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十三、SpringSecurity-的”跨域”问题&#34;&gt;&lt;a href=&#34;#十三、SpringSecurity-的”跨域”问题&#34; class=&#34;headerlink&#34; title=&#34;十三、SpringSecurity 的”跨域”问题&#34;&gt;&lt;/a&gt;十三、SpringSecurity 的”跨域”问题&lt;/h1&gt;&lt;p&gt;​	浏览器出于安全的考虑，使用 XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。 同源策略要求源相同才能正常进行通信，即协议、域名、端口号都完全一致。 &lt;/p&gt;
&lt;p&gt;​	前后端分离项目，前端项目和后端项目一般都不是同源的，所以肯定会存在跨域请求的问题。&lt;/p&gt;
&lt;p&gt;​	所以我们就要处理一下，让前端能进行跨域请求。&lt;/p&gt;
&lt;h2 id=&#34;①先对SpringBoot配置，运行跨域请求&#34;&gt;&lt;a href=&#34;#①先对SpringBoot配置，运行跨域请求&#34; class=&#34;headerlink&#34; title=&#34;①先对SpringBoot配置，运行跨域请求&#34;&gt;&lt;/a&gt;①先对SpringBoot配置，运行跨域请求&lt;/h2&gt;&lt;p&gt;这里的方式多种多想可以 配置类，也可以对跨域的请求直接加注解 ，自己视情况而定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@Configuration
public class CorsConfig implements WebMvcConfigurer &amp;#123;

    @Override
    public void addCorsMappings(CorsRegistry registry) &amp;#123;
      // 设置允许跨域的路径
        registry.addMapping(&amp;quot;/**&amp;quot;)
                // 设置允许跨域请求的域名
                .allowedOriginPatterns(&amp;quot;*&amp;quot;)
                // 是否允许cookie
                .allowCredentials(true)
                // 设置允许的请求方式
                .allowedMethods(&amp;quot;GET&amp;quot;, &amp;quot;POST&amp;quot;, &amp;quot;DELETE&amp;quot;, &amp;quot;PUT&amp;quot;)
                // 设置允许的header属性
                .allowedHeaders(&amp;quot;*&amp;quot;)
                // 跨域允许时间
                .maxAge(3600);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;②开启SpringSecurity的跨域访问&#34;&gt;&lt;a href=&#34;#②开启SpringSecurity的跨域访问&#34; class=&#34;headerlink&#34; title=&#34;②开启SpringSecurity的跨域访问&#34;&gt;&lt;/a&gt;②开启SpringSecurity的跨域访问&lt;/h2&gt;&lt;p&gt;由于我们的资源都会收到SpringSecurity的保护，所以想要跨域访问还要让SpringSecurity运行跨域访问。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;    @Override
    protected void configure(HttpSecurity http) throws Exception &amp;#123;
        http
                //关闭csrf
                .csrf().disable()
                //不通过Session获取SecurityContext
                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .authorizeRequests()
                // 对于登录接口 允许匿名访问
                .antMatchers(&amp;quot;/user/login&amp;quot;).anonymous()
                // 除上面外的所有请求全部需要鉴权认证
                .anyRequest().authenticated();

        //添加过滤器
        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);

        //配置异常处理器
        http.exceptionHandling()
                //配置认证失败处理器
                .authenticationEntryPoint(authenticationEntryPoint)
                .accessDeniedHandler(accessDeniedHandler);

        //允许跨域
        http.cors();
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;十三、退出登录&#34;&gt;&lt;a href=&#34;#十三、退出登录&#34; class=&#34;headerlink&#34; title=&#34;十三、退出登录&#34;&gt;&lt;/a&gt;十三、退出登录&lt;/h1&gt;&lt;p&gt;​	用户只需要向Spring Security项目中发送&amp;#x2F;logout退出请求即可。&lt;/p&gt;
&lt;h2 id=&#34;1-退出实现&#34;&gt;&lt;a href=&#34;#1-退出实现&#34; class=&#34;headerlink&#34; title=&#34;1.退出实现&#34;&gt;&lt;/a&gt;1.退出实现&lt;/h2&gt;&lt;p&gt;实现退出非常简单，只要在页面中添加&amp;#x2F;logout的超链接即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;a href=&amp;quot;/logout&amp;quot;&amp;gt;退出登录&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	为了实现更好的效果，通常添加退出的配置。默认的退出url为&amp;#x2F;logout，退出成功后跳转到&amp;#x2F;login?logout&lt;/p&gt;
&lt;p&gt;​	如果不希望使用默认值，可以通过下面的方法进行修改。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;http.logout()     
    .logoutUrl(**&amp;quot;/logout&amp;quot;**)     
    .logoutSuccessUrl(**&amp;quot;/login.html&amp;quot;**);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-logout其他常用配置源码解读&#34;&gt;&lt;a href=&#34;#2-logout其他常用配置源码解读&#34; class=&#34;headerlink&#34; title=&#34;2.logout其他常用配置源码解读&#34;&gt;&lt;/a&gt;2.logout其他常用配置源码解读&lt;/h2&gt;&lt;h3 id=&#34;2-1-addLogoutHandler-LogoutHandler&#34;&gt;&lt;a href=&#34;#2-1-addLogoutHandler-LogoutHandler&#34; class=&#34;headerlink&#34; title=&#34;2.1.addLogoutHandler(LogoutHandler)&#34;&gt;&lt;/a&gt;2.1.addLogoutHandler(LogoutHandler)&lt;/h3&gt;&lt;p&gt;​	默认是contextLogoutHandler&lt;/p&gt;
&lt;p&gt;​	默认实例内容&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/Spring_Family/SpringSecurity/springSecurity-37.jpg&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;2-2clearAuthentication-boolean&#34;&gt;&lt;a href=&#34;#2-2clearAuthentication-boolean&#34; class=&#34;headerlink&#34; title=&#34;2.2clearAuthentication(boolean)&#34;&gt;&lt;/a&gt;2.2clearAuthentication(boolean)&lt;/h3&gt;&lt;p&gt;​	是否清除认证状态，默认为true&lt;/p&gt;
&lt;h5 id=&#34;2-3invalidateHttpSession-boolean&#34;&gt;&lt;a href=&#34;#2-3invalidateHttpSession-boolean&#34; class=&#34;headerlink&#34; title=&#34;2.3invalidateHttpSession(boolean)&#34;&gt;&lt;/a&gt;2.3invalidateHttpSession(boolean)&lt;/h5&gt;&lt;p&gt;​	是否销毁HttpSession对象，默认为true&lt;/p&gt;
&lt;h3 id=&#34;2-4logoutSuccessHandler-LogoutSuccessHandler&#34;&gt;&lt;a href=&#34;#2-4logoutSuccessHandler-LogoutSuccessHandler&#34; class=&#34;headerlink&#34; title=&#34;2.4logoutSuccessHandler(LogoutSuccessHandler)&#34;&gt;&lt;/a&gt;2.4logoutSuccessHandler(LogoutSuccessHandler)&lt;/h3&gt;&lt;p&gt;​	退出成功处理器。&lt;/p&gt;
&lt;p&gt;​	也可以自己进行定义退出成功处理器。只要实现了LogoutSuccessHandler接口。与之前讲解的登录成功处理器和登录失败处理器极其类似。&lt;/p&gt;
&lt;h1 id=&#34;十四、Spring-Security-中-CSRF&#34;&gt;&lt;a href=&#34;#十四、Spring-Security-中-CSRF&#34; class=&#34;headerlink&#34; title=&#34;十四、Spring Security 中 CSRF&#34;&gt;&lt;/a&gt;十四、Spring Security 中 CSRF&lt;/h1&gt;&lt;p&gt;​	从刚开始学习Spring Security时，在配置类中一直存在这样一行代码：http.csrf().disable();如果没有这行代码导致用户无法被认证。这行代码的含义是：关闭csrf防护。&lt;/p&gt;
&lt;h2 id=&#34;1-什么是CSRF&#34;&gt;&lt;a href=&#34;#1-什么是CSRF&#34; class=&#34;headerlink&#34; title=&#34;1.什么是CSRF&#34;&gt;&lt;/a&gt;1.什么是CSRF&lt;/h2&gt;&lt;p&gt;​	CSRF（Cross-site request forgery）跨站请求伪造，也被称为“One Click Attack” 或者Session Riding。通过伪造用户请求访问受信任站点的非法请求访问。&lt;/p&gt;
&lt;p&gt;​	跨域：只要网络协议，ip地址，端口中任何一个不相同就是跨域请求。&lt;/p&gt;
&lt;p&gt;​	客户端与服务进行交互时，由于http协议本身是无状态协议，所以引入了cookie进行记录客户端身份。在cookie中会存放session id用来识别客户端身份的。在跨域的情况下，session id可能被第三方恶意劫持，通过这个session id向服务端发起请求时，服务端会认为这个请求是合法的，可能发生很多意想不到的事情。&lt;/p&gt;
&lt;h2 id=&#34;2-Spring-Security中CSRF&#34;&gt;&lt;a href=&#34;#2-Spring-Security中CSRF&#34; class=&#34;headerlink&#34; title=&#34;2.Spring Security中CSRF&#34;&gt;&lt;/a&gt;2.Spring Security中CSRF&lt;/h2&gt;&lt;p&gt;​	从Spring Security4开始CSRF防护默认开启。默认会拦截请求。进行CSRF处理。CSRF为了保证不是其他第三方网站访问，要求访问时携带参数名为_csrf值为token(token在服务端产生)的内容，如果token和服务端的token匹配成功，则正常访问。 &lt;/p&gt;
&lt;h3 id=&#34;2-1实现步骤-1&#34;&gt;&lt;a href=&#34;#2-1实现步骤-1&#34; class=&#34;headerlink&#34; title=&#34;2.1实现步骤&#34;&gt;&lt;/a&gt;2.1实现步骤&lt;/h3&gt;&lt;h4 id=&#34;2-1-1-编写控制器方法&#34;&gt;&lt;a href=&#34;#2-1-1-编写控制器方法&#34; class=&#34;headerlink&#34; title=&#34;2.1.1 编写控制器方法&#34;&gt;&lt;/a&gt;2.1.1 编写控制器方法&lt;/h4&gt;&lt;p&gt;​	编写控制器方法，跳转到templates中login.html页面。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;@GetMapping(&amp;quot;/showLogin&amp;quot;)
public String showLogin() &amp;#123;
    return &amp;quot;login&amp;quot;;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-1-2新建login-html&#34;&gt;&lt;a href=&#34;#2-1-2新建login-html&#34; class=&#34;headerlink&#34; title=&#34;2.1.2新建login.html&#34;&gt;&lt;/a&gt;2.1.2新建login.html&lt;/h4&gt;&lt;p&gt;在项目resources下新建templates文件夹，并在文件夹中新建login.html页面。红色部分是必须存在的否则无法正常登录。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;
      xmlns:th=&amp;quot;http://www.thymeleaf.org&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;form action = &amp;quot;/login&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;hidden&amp;quot; th:value=&amp;quot;$&amp;#123;_csrf.token&amp;#125;&amp;quot; name=&amp;quot;_csrf&amp;quot; th:if=&amp;quot;$&amp;#123;_csrf&amp;#125;&amp;quot;/&amp;gt;
    用户名：&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;username&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    密码:&amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
    &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;登录&amp;quot;/&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;     
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-1-3修改配置类&#34;&gt;&lt;a href=&#34;#2-1-3修改配置类&#34; class=&#34;headerlink&#34; title=&#34;2.1.3修改配置类&#34;&gt;&lt;/a&gt;2.1.3修改配置类&lt;/h4&gt;&lt;p&gt;在配置类中注释掉CSRF防护失效&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;//关闭csrf防护
//http.csrf().disable();
&lt;/code&gt;&lt;/pre&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/06/bkBasic/hexo/</guid>
            <title>hexo</title>
            <link>http://example.com/2022/10/06/bkBasic/hexo/</link>
            <category>框架</category>
            <category>博客</category>
            <pubDate>Thu, 06 Oct 2022 14:50:57 +0800</pubDate>
            <description><![CDATA[ &lt;hr&gt;
&lt;p&gt;title: hexo&lt;br&gt;date: 2022-10-06 14:53:52&lt;br&gt;categories:&lt;br&gt;    - 基础使用&lt;br&gt;tags:&lt;br&gt;    - 环境搭建&lt;br&gt;    - 博客&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;介绍&#34;&gt;&lt;a href=&#34;#介绍&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;code&gt;hexo&lt;/code&gt;是一个基于nodejs的静态博客网站生成器，作者是来自台湾的&lt;code&gt;Tommy Chen&lt;/code&gt;，为许多技术博客的博主所青睐，主要有如下的一些优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;支持Markdown语法，编辑简单，排版优美；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;能够快速生成静态html文件；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署容易，接口简单； 兼容于各大主流操作系统；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;社区主题、插件很多，遇到问题的时候能查到的参考材料也很多。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hexo官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv&#34;&gt;https://hexo.io/zh-cn/docs/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Gitee Pages：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vaGVscC9hcnRpY2xlcy80MTM2I2FydGljbGUtaGVhZGVyMA==&#34;&gt;https://gitee.com/help/articles/4136#article-header0&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;环境配置&#34;&gt;&lt;a href=&#34;#环境配置&#34; class=&#34;headerlink&#34; title=&#34;环境配置&#34;&gt;&lt;/a&gt;环境配置&lt;/h1&gt;&lt;p&gt;搭建hexo首先需要有nodejs的环境，可以从官网直接下载。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/2xKvaPTDoyZcFbp.png&#34; class=&#34;&#34; title=&#34;nodejs&#34;&gt;

&lt;h1 id=&#34;生成博客&#34;&gt;&lt;a href=&#34;#生成博客&#34; class=&#34;headerlink&#34; title=&#34;生成博客&#34;&gt;&lt;/a&gt;生成博客&lt;/h1&gt;&lt;h2 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;有了npm包管理软件，安装hexo就很方便了，只需要一行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm install node # homebrew安装nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中-g参数表示全局安装，没有这个参数就只在当前目录下安装，建议全局安装。&lt;/p&gt;
&lt;h2 id=&#34;初始化&#34;&gt;&lt;a href=&#34;#初始化&#34; class=&#34;headerlink&#34; title=&#34;初始化&#34;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;p&gt;运行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;hexo init
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git
INFO  Install dependencies
# 一些可能的中间信息
INFO  Start blogging with Hexo!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后进入博客目录：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; cd “博客目录”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装博客需要的其他支持：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm install # 安装的依赖项在package.json文件的dependencies字段中可以看到
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;博客项目目录结构介绍&#34;&gt;&lt;a href=&#34;#博客项目目录结构介绍&#34; class=&#34;headerlink&#34; title=&#34;博客项目目录结构介绍&#34;&gt;&lt;/a&gt;博客项目目录结构介绍&lt;/h2&gt;&lt;p&gt;查看目录结构：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;tree -L 1 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.&lt;br&gt;├── _config.landscape.yml&lt;br&gt;├── _config.yml&lt;br&gt;├── node_modules&lt;br&gt;├── package-lock.json&lt;br&gt;├── package.json&lt;br&gt;├── scaffolds&lt;br&gt;├── source&lt;br&gt;└── themes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;各部分的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;`_config.yml &amp;#96;&lt;ul&gt;
&lt;li&gt;为全局配置文件，网站的很多信息都在这里配置，比如说网站名称，副标题，描述，作者，语言，主题等等。具体可以参考官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29uZmlndXJhdGlvbi5odG1sJUUzJTgwJTgy&#34;&gt;https://hexo.io/zh-cn/docs/configuration.html。&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_scaffolds&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;骨架文件，是生成新页面或者新博客的模版。可以根据需求编辑，当&lt;code&gt;hexo&lt;/code&gt;生成新博客的时候，会用这里面的模版进行初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_source&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;这个文件夹下面存放的是网站的&lt;code&gt;markdown&lt;/code&gt;源文件，里面有一个&lt;code&gt;_post&lt;/code&gt;文件夹，所有的&lt;code&gt;.md&lt;/code&gt;博客文件都会存放在这个文件夹下。现在，你应该能看到里面有一个&lt;code&gt;hello-world.md&lt;/code&gt;文件。_&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_themes&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;网站主题目录，&lt;code&gt;hexo&lt;/code&gt;有非常丰富的主题支持，主题目录会存放在这个目录下面。&lt;/li&gt;
&lt;li&gt;我们后续会以默认主题来演示，更多的主题参见：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=&#34;&gt;https://hexo.io/themes/&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;生成新文章&#34;&gt;&lt;a href=&#34;#生成新文章&#34; class=&#34;headerlink&#34; title=&#34;生成新文章&#34;&gt;&lt;/a&gt;生成新文章&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;hexo new post &amp;quot;test&amp;quot; # 会在 source/_posts/ 目录下生成文件 ‘test.md’，打开编辑
hexo generate        # 生成静态HTML文件到 /public 文件夹中
hexo server          # 本地运行server服务预览，打开 http://localhost:4000 即可预览你的博客
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;本地预览效果：&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221006120456734.png&#34; class=&#34;&#34; title=&#34;image-20221006120456734&#34;&gt;

&lt;p&gt;这是hexo的默认主题，更多的主题可以从官网下载。&lt;/p&gt;
&lt;p&gt;更详细的hexo命令可以查看文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29tbWFuZHM=&#34;&gt;https://hexo.io/zh-cn/docs/commands&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;Hexo配置并部署&#34;&gt;&lt;a href=&#34;#Hexo配置并部署&#34; class=&#34;headerlink&#34; title=&#34;Hexo配置并部署&#34;&gt;&lt;/a&gt;Hexo配置并部署&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;提前对要提交的仓库配置ssh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-安装部署工具&#34;&gt;&lt;a href=&#34;#1-安装部署工具&#34; class=&#34;headerlink&#34; title=&#34;1.安装部署工具&#34;&gt;&lt;/a&gt;1.安装部署工具&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm install hexo-deployer-git --save
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-配置部署信息&#34;&gt;&lt;a href=&#34;#2-配置部署信息&#34; class=&#34;headerlink&#34; title=&#34;2.配置部署信息&#34;&gt;&lt;/a&gt;2.配置部署信息&lt;/h2&gt;&lt;p&gt;站点配置文件_config.yml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;deploy:
  type: git
  repo: &amp;lt;repository url&amp;gt; # 输入你的仓库地址
  branch: [branch] # 输入分支
  token:   #token
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;deploy:&lt;/p&gt;
&lt;p&gt; type: git&lt;/p&gt;
&lt;p&gt; repo: &lt;span class=&#34;exturl&#34; data-url=&#34;bWFpbHRvOiYjeDY3OyYjMTA1OyYjMTE2OyYjeDQwOyYjMTAzOyYjMTA1OyYjeDc0OyYjeDY1OyYjMTAxOyYjNDY7JiN4NjM7JiMxMTE7JiMxMDk7&#34;&gt;&amp;#x67;&amp;#105;&amp;#116;&amp;#x40;&amp;#103;&amp;#105;&amp;#x74;&amp;#x65;&amp;#101;&amp;#46;&amp;#x63;&amp;#111;&amp;#109;&lt;/span&gt;:cysheng&amp;#x2F;cysheng.git # 输入你的仓库地址&lt;/p&gt;
&lt;p&gt; branch: master # 输入分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-部署&#34;&gt;&lt;a href=&#34;#3-部署&#34; class=&#34;headerlink&#34; title=&#34;3.部署&#34;&gt;&lt;/a&gt;3.部署&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt; hexo clean  
 hexo g  
 hexo d 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hexo clean&lt;/p&gt;
&lt;p&gt;清除缓存文件 (db.json) 和已生成的静态文件 (public)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo g&lt;/p&gt;
&lt;p&gt;hexo解析站点文件夹，生成一个public文件夹（只包含浏览器可以解析的html、css、js），也就是我们需要部署的文件夹。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;hexo d&lt;/p&gt;
&lt;p&gt;部署，即将我们的public文件夹推送到我们配置的仓库&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-开启Gitee-Pages服务&#34;&gt;&lt;a href=&#34;#4-开启Gitee-Pages服务&#34; class=&#34;headerlink&#34; title=&#34;4.开启Gitee Pages服务&#34;&gt;&lt;/a&gt;4.开启Gitee Pages服务&lt;/h2&gt;&lt;p&gt;找到新创建的仓库-&amp;gt;【服务】-&amp;gt;【Gitee Pages】  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221006120734926.png&#34; class=&#34;&#34; title=&#34;hexo&amp;#x2F;image-20221006120734926&#34;&gt;&lt;/p&gt;
&lt;p&gt;如图，选择部署分支，部署目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;部署分支，与本地hexo配置一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;部署目录，不填即整个仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;强制使用https&lt;/p&gt;
&lt;p&gt;一个是进行加密，还有一个是我在用next主题时使用http访问会有跨域问题导致图标显示不出来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击启动&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问给出的网站地址（以我的为例：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jeXNoZW5nLmdpdGVlLmlvKS8=&#34;&gt;https://cysheng.gitee.io）&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;hexo-框架常用的指令：&#34;&gt;&lt;a href=&#34;#hexo-框架常用的指令：&#34; class=&#34;headerlink&#34; title=&#34;hexo 框架常用的指令：&#34;&gt;&lt;/a&gt;hexo 框架常用的指令：&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;指令&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hexo clean &amp;amp;&amp;amp; hexo g&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;清除本地项目并重新生成 （重新部署时使用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;hexo g&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;重新生成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Hexo s&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;开启本地预览&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;Hexo d&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;推送到github&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;功能设置&#34;&gt;&lt;a href=&#34;#功能设置&#34; class=&#34;headerlink&#34; title=&#34;功能设置&#34;&gt;&lt;/a&gt;功能设置&lt;/h1&gt;&lt;h2 id=&#34;标题和分类&#34;&gt;&lt;a href=&#34;#标题和分类&#34; class=&#34;headerlink&#34; title=&#34;标题和分类&#34;&gt;&lt;/a&gt;标题和分类&lt;/h2&gt;&lt;p&gt;在文章开头我们可以设置 FontMatter，例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;---
title: jQuery对表单的操作及更多应用 # 标题
date: 2022-01-07 22:53:43 # 创建时间
categories: # 分类，级别递减
- web前端 # 一级分类
- web前端2 # 二级分类
tags: # 标签，没有级别
    - a1
    - a2
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​	为了简化我们的操作，所以我们可以以设置模板，在 &lt;code&gt;/scaffolds&lt;/code&gt; 下的 &lt;code&gt;draft.md&lt;/code&gt; 、&lt;code&gt;page.md&lt;/code&gt; 、 &lt;code&gt;post.md&lt;/code&gt;  我们用来设置模板，例如我们最常使用的&lt;code&gt;post&lt;/code&gt; 目录下的文件，所以我们配置一下&lt;code&gt;post.md&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;---
title: &amp;#123;&amp;#123; title &amp;#125;&amp;#125;
date: &amp;#123;&amp;#123; date &amp;#125;&amp;#125;
comments:
tags:
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果我们在没有找到 tags 、categories 、link 、about文件时，我们手动创建&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;hexo new page tags
hexo new page categories 
hexo new page link 
hexo new page about
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;成功后，提示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;INFO  Created: ~/Documents/blog/source/xxx/index.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;根据上面的路径，找到&lt;code&gt;index.md&lt;/code&gt;这个文件，打开后默认内容是这样的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;---
title: 文章分类
date: 2022-01-07 22:53:43
type: &amp;quot;categories&amp;quot; # 哪个文件就是那个类型
layout: &amp;quot;categories&amp;quot; # 哪个文件就是那个类型
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后清除缓存，重新启动就行了 &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;hexo cl &amp;amp;&amp;amp; hexo g &amp;amp;&amp;amp; hexo s
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;搜索&#34;&gt;&lt;a href=&#34;#搜索&#34; class=&#34;headerlink&#34; title=&#34;搜索&#34;&gt;&lt;/a&gt;搜索&lt;/h2&gt;&lt;h3 id=&#34;1、注册账号&#34;&gt;&lt;a href=&#34;#1、注册账号&#34; class=&#34;headerlink&#34; title=&#34;1、注册账号&#34;&gt;&lt;/a&gt;1、注册账号&lt;/h3&gt;&lt;p&gt;官网：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20vdXNlcnMvc2lnbl9pbg==&#34;&gt;https://www.algolia.com/users/sign_in&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;2、之后在左侧导航栏中找到Search&#34;&gt;&lt;a href=&#34;#2、之后在左侧导航栏中找到Search&#34; class=&#34;headerlink&#34; title=&#34;2、之后在左侧导航栏中找到Search&#34;&gt;&lt;/a&gt;2、之后在左侧导航栏中找到Search&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221007104401652.png&#34; class=&#34;&#34; title=&#34;image-20221007104401652&#34;&gt;

&lt;h3 id=&#34;3、创建Index&#34;&gt;&lt;a href=&#34;#3、创建Index&#34; class=&#34;headerlink&#34; title=&#34;3、创建Index&#34;&gt;&lt;/a&gt;3、创建Index&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221007104429043.png&#34; class=&#34;&#34; title=&#34;image-20221007104429043&#34;&gt;

&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221007104449209.png&#34; class=&#34;&#34; title=&#34;image-20221007104449209&#34;&gt;

&lt;p&gt;&lt;strong&gt;随便写&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;4、创建APPID&#34;&gt;&lt;a href=&#34;#4、创建APPID&#34; class=&#34;headerlink&#34; title=&#34;4、创建APPID&#34;&gt;&lt;/a&gt;4、创建APPID&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221007105625601.png&#34; class=&#34;&#34; title=&#34;image-20221007105625601&#34;&gt;

&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221007105704120.png&#34; class=&#34;&#34; title=&#34;image-20221007105704120&#34;&gt;

&lt;p&gt;这两个后面有用&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221007105750168.png&#34; class=&#34;&#34; title=&#34;image-20221007105750168&#34;&gt;

&lt;blockquote&gt;
&lt;p&gt;Indices 是我们上面创建 index &lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/20210516112405506.png&#34; class=&#34;&#34; title=&#34;在这里插入图片描述&#34;&gt;



&lt;h3 id=&#34;5、到博客根目录下安装hexo-algolia&#34;&gt;&lt;a href=&#34;#5、到博客根目录下安装hexo-algolia&#34; class=&#34;headerlink&#34; title=&#34;5、到博客根目录下安装hexo-algolia&#34;&gt;&lt;/a&gt;5、到博客根目录下安装hexo-algolia&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm install hexo-algolia --save
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6、前往站点根目录打开-config-yml添加以下代码&#34;&gt;&lt;a href=&#34;#6、前往站点根目录打开-config-yml添加以下代码&#34; class=&#34;headerlink&#34; title=&#34;6、前往站点根目录打开_config.yml添加以下代码&#34;&gt;&lt;/a&gt;6、前往站点根目录打开_config.yml添加以下代码&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这是对全局的配置，所以是根目录的配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;algolia:
  appId:  &amp;quot;***&amp;quot;  #上面的application ID
  apiKey:  &amp;quot;****&amp;quot;  # 上面的 Search-Only API Key
  adminApiKey:  &amp;quot;***&amp;quot;  #上面的 Admin API Keys
  chunkSize:  5000
  indexName:  &amp;quot;test001&amp;quot; # Indices的index
  fields: # 要搜索的词条范围
    - title #必须配置
    - path #必须配置
    - categories #推荐配置
    - content:strip:truncate,0,2000
    - tags
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;algolia:
  appId: &amp;quot;Z7A3XW4R2I&amp;quot;
  apiKey: &amp;quot;12db1ad54372045549ef465881c17e743&amp;quot;
  adminApiKey: &amp;quot;40321c7c207e7f73b63a19aa24c4761b&amp;quot;
  chunkSize: 5000
  indexName: &amp;quot;my-hexo-blog&amp;quot;
  fields:
    - content:strip:truncate,0,500
    - excerpt:strip
    - gallery
    - permalink
    - photos
    - slug
    - tags
    - title
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;7、设置HEXO-ALGOLIA-INDEXING-KEY&#34;&gt;&lt;a href=&#34;#7、设置HEXO-ALGOLIA-INDEXING-KEY&#34; class=&#34;headerlink&#34; title=&#34;7、设置HEXO_ALGOLIA_INDEXING_KEY&#34;&gt;&lt;/a&gt;7、设置HEXO_ALGOLIA_INDEXING_KEY&lt;/h3&gt;&lt;p&gt;在博客根目录右击git bash&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# export HEXO_ALGOLIA_INDEXING_KEY=&amp;quot;你刚才新创建的 APPKEY、appId、adminApiKey &amp;quot;一个试一下 
export HEXO_ALGOLIA_INDEXING_KEY=&amp;quot;******&amp;quot; 
# 将我们的信息上川岛algolia
hexo algolia
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;8、修改主题内的-config-yml&#34;&gt;&lt;a href=&#34;#8、修改主题内的-config-yml&#34; class=&#34;headerlink&#34; title=&#34;8、修改主题内的_config.yml&#34;&gt;&lt;/a&gt;8、修改主题内的_config.yml&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 这是是对主题的配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;#Algolia Search
algolia_search:
  enable: true
  hits:
    per_page: 6
  labels:
    input_placeholder: Search for Posts !
    hits_empty: &amp;#39;我们没有找到任何搜索结果：$&amp;#123;query&amp;#125;&amp;#39;
    hits_stats: &amp;#39;找到约$&amp;#123;hits&amp;#125;条结果 (用时$&amp;#123;time&amp;#125;ms)&amp;#39;

# local searach
local_sreach:
  enable : false
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;9、启动即可&#34;&gt;&lt;a href=&#34;#9、启动即可&#34; class=&#34;headerlink&#34; title=&#34;9、启动即可&#34;&gt;&lt;/a&gt;9、启动即可&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;hexo s
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;10、测试&#34;&gt;&lt;a href=&#34;#10、测试&#34; class=&#34;headerlink&#34; title=&#34;10、测试&#34;&gt;&lt;/a&gt;10、测试&lt;/h3&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221007123724497.png&#34; class=&#34;&#34; title=&#34;image-20221007123724497&#34;&gt;

&lt;p&gt;参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTczNDA0L2FydGljbGUvZGV0YWlscy8xMjI4NjEzMjE=&#34;&gt;https://blog.csdn.net/qq_45173404/article/details/122861321&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;&lt;a href=&#34;#目录&#34; class=&#34;headerlink&#34; title=&#34;目录&#34;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;toc 插件是：添加生成文章目录的一个插件&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;一、安装(这里是hexo的路径下，也就是博客根目录下)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm install hexo-toc --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;二、配置博客根目录下的_config.yml文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;toc:  
  maxdepth: 3 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在最后的空白处添加&lt;/p&gt;
&lt;p&gt;三、在markdown里使用&lt;/p&gt;
&lt;p&gt;在Markdown中需要显示文章目录的地方添加&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;&amp;lt;!-- toc --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后就会将他&amp;#x3D;&amp;#x3D;后面&amp;#x3D;&amp;#x3D;的内容按照标题级别分层&lt;/p&gt;
&lt;h2 id=&#34;图片显示&#34;&gt;&lt;a href=&#34;#图片显示&#34; class=&#34;headerlink&#34; title=&#34;图片显示&#34;&gt;&lt;/a&gt;图片显示&lt;/h2&gt;&lt;h3 id=&#34;方法一：&#34;&gt;&lt;a href=&#34;#方法一：&#34; class=&#34;headerlink&#34; title=&#34;方法一：&#34;&gt;&lt;/a&gt;方法一：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;typroa设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开typora，选择：偏好设置 - 图像 - 插入图片时，做如下更改：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复制到指定路径&lt;/p&gt;
&lt;p&gt;.&amp;#x2F;${filename}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当插入图片时，会生成一个和文件名相同的文件夹，并将图片存入这个文件夹内。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hexo 设置&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 &lt;code&gt;hexo-renderer-marked&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm install hexo-renderer-marked --save
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;之后更改 _config.yml 配置&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;post_asset_folder: true 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装插件&lt;code&gt;hexo-image-link &lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm install hexo-image-link --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时，在typora 文件中正常显示的图片，在hexo发布后依旧能正常显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果想用插件 &lt;code&gt;Hexo-renderer-markdown-it &lt;/code&gt;（推荐）代替 &lt;code&gt;Hexo-renderer-marked &lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;npm uninstall hexo-renderer-marker --save  #卸载 marked 

npm install hexo-renderer-markdown-it --save  #安装markdown-it
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;路径转换的解释&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设：&lt;br&gt;文件名: .&amp;#x2F;test.md&lt;/p&gt;
&lt;p&gt;图片路径: .&amp;#x2F;test&amp;#x2F;image.jpg&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当插入图片 image.jpg 到 test.md 中时，typora 的引用路径为
 &amp;#123;% asset_img image.jpg  %&amp;#125; 

Hexo 发布后的引用路径为
![](image.jpg) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因此，typora的md文件引入hexo时，应转换路径。即删掉图片路径中的 “test&amp;#x2F;“部分；（此时md文件已不能正常显示图片，而 hexo server 可正常显示）&lt;/p&gt;
&lt;p&gt;插件hexo-image-link帮助实现了这种路径转换。&lt;/p&gt;
&lt;p&gt;安装后，typora 文件中正常显示的图片，在hexo发布后依旧能正常显示。&lt;/p&gt;
&lt;h3 id=&#34;方法2：&#34;&gt;&lt;a href=&#34;#方法2：&#34; class=&#34;headerlink&#34; title=&#34;方法2：&#34;&gt;&lt;/a&gt;方法2：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;同样的思路，相对路径，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载插件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm install hexo-asset-img --save
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;文件要求：&lt;/p&gt;
&lt;p&gt;​	图片必须在 xx.md 同一级目录下的同名文件中存储，也就是在xx 文件夹下，所以md文档的图片路径就是	&amp;#x3D;&amp;#x3D;![图片注释](xx&amp;#x2F;图片名)&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;每篇文章的log设置&#34;&gt;&lt;a href=&#34;#每篇文章的log设置&#34; class=&#34;headerlink&#34; title=&#34;每篇文章的log设置&#34;&gt;&lt;/a&gt;每篇文章的log设置&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;---
***
cover: 图床链接/图片路径
---
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;主题&#34;&gt;&lt;a href=&#34;#主题&#34; class=&#34;headerlink&#34; title=&#34;主题&#34;&gt;&lt;/a&gt;主题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9hdXJvcmEudHJpZGlhbW9uZC50ZWNoL3poL2d1aWRlL2dldHRpbmctc3RhcnRlZC5odG1sIyVFNCVCRSU5RCVFOCVCNSU5NiVFNyU4RSVBRiVFNSVBMiU4Mw==&#34;&gt;aurora&lt;/span&gt;    	（最推荐）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy8=&#34;&gt;shoka&lt;/span&gt;        （好看，但是少东西，好多要自己配）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL25leHQtdGhlbWUvaGV4by10aGVtZS1uZXh0&#34;&gt;next&lt;/span&gt;           （中等，但是好多人用，配东西好查的一批）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2plcnJ5YzEyNy9oZXhvLXRoZW1lLWJ1dHRlcmZseQ==&#34;&gt;butterfly  &lt;/span&gt;（中等，要自己配一些）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;shoka&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;npm i  hexo-renderer-multi-markdown-it --save #markdown解析的
npm i  hexo-autoprefixer --save		#css\html文件压缩的
npm i  hexo-algoliasearch --save	#全文搜索的
npm i  hexo-symbols-count-time --save # 文字/时间统计
npm i  hexo-feed --save # 可选
npm un hexo-renderer-marked --save      #删除多余的库

git clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;_config.yml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yaml&#34;&gt;# markdown渲染
markdown:
  render: # 渲染器设置
    html: false # 过滤 HTML 标签
    xhtmlOut: true # 使用 &amp;#39;/&amp;#39; 来闭合单标签 （比如 &amp;lt;br /&amp;gt;）。
    breaks: true # 转换段落里的 &amp;#39;\n&amp;#39; 到 &amp;lt;br&amp;gt;。
    linkify: true # 将类似 URL 的文本自动转换为链接。
    typographer: 
    quotes: &amp;#39;“”‘’&amp;#39;
  plugins: # markdown-it 插件设置
    - plugin:
        name: markdown-it-toc-and-anchor
        enable: true
        options: # 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样
          tocClassName: &amp;#39;toc&amp;#39;
          anchorClassName: &amp;#39;anchor&amp;#39;
    - plugin:
        name: markdown-it-multimd-table
        enable: true
        options:
          multiline: true
          rowspan: true
          headerless: true
    - plugin:
        name: ./markdown-it-furigana
        enable: true
        options:
          fallbackParens: &amp;quot;()&amp;quot;
    - plugin:
        name: ./markdown-it-spoiler
        enable: true
        options:
          title: &amp;quot;你知道得太多了&amp;quot;

# 压缩CSS/hTML
minify:
  html:
    enable: true
    exclude: # 排除 hexo-feed 用到的模板文件
      - &amp;#39;**/json.ejs&amp;#39;
      - &amp;#39;**/atom.ejs&amp;#39;
      - &amp;#39;**/rss.ejs&amp;#39;
  css:
    enable: true
    exclude:
      - &amp;#39;**/*.min.css&amp;#39;
  js:
    enable: true
    mangle:
      toplevel: true
    output:
    compress:
    exclude:
      - &amp;#39;**/*.min.js&amp;#39;

#css文件后缀
autoprefixer:
  exclude:
    - &amp;#39;*.min.css&amp;#39;

# 全文搜索
algolia:
  appId: #Your appId
  apiKey: #Your apiKey
  adminApiKey: #Your adminApiKey
  chunkSize: 5000
  indexName: #&amp;quot;shoka&amp;quot;
  fields:
    - title #必须配置
    - path #必须配置
    - categories #推荐配置
    - content:strip:truncate,0,2000
    - gallery
    - photos
    - tags
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;未完成&#34;&gt;&lt;a href=&#34;#未完成&#34; class=&#34;headerlink&#34; title=&#34;未完成&#34;&gt;&lt;/a&gt;未完成&lt;/h2&gt;&lt;h1 id=&#34;Netlify部署&#34;&gt;&lt;a href=&#34;#Netlify部署&#34; class=&#34;headerlink&#34; title=&#34;Netlify部署&#34;&gt;&lt;/a&gt;Netlify部署&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前提&lt;/strong&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在github上建立一个仓库，权限无所谓
上传也只需要传编译后的public文件就行了
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubmV0bGlmeS5jb20v&#34;&gt;Netlify&lt;/span&gt; 账号注册&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加新的站点&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221013222215469.png&#34; class=&#34;&#34; title=&#34;image-20221013222215469&#34;&gt;

  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/oSa6BOtIQ8WkZX1.png&#34; class=&#34;&#34; title=&#34;connect-github&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选取一个仓库，作为我们的资源地址&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221013222447157.png&#34; class=&#34;&#34; title=&#34;image-20221013222447157&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一切默认，除了构建命令改成我们之前设置的&lt;code&gt;npm run netlify&lt;/code&gt; ，当然也可以不设置&lt;/p&gt;
&lt;p&gt;  前提要在&lt;code&gt;package.json&lt;/code&gt; 里面添加一个 &lt;code&gt;netlify&lt;/code&gt; 命令 ，例如我们的：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;json&#34;&gt;&amp;quot;scripts&amp;quot;: &amp;#123;
        &amp;quot;build&amp;quot;: &amp;quot;hexo generate&amp;quot;,
        &amp;quot;clean&amp;quot;: &amp;quot;hexo clean&amp;quot;,
        &amp;quot;deploy&amp;quot;: &amp;quot;hexo deploy&amp;quot;,
        &amp;quot;server&amp;quot;: &amp;quot;hexo server&amp;quot;,
        // 每次提交会清除内容，然后重新建立项目，不要在项目中写这个注释，报错
        &amp;quot;netlify&amp;quot;: &amp;quot;npm run clean &amp;amp;&amp;amp; npm run build&amp;quot; 
  &amp;#125;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;  还要有将你的全部文件上传到github，才可以使用&lt;code&gt;npm&lt;/code&gt;&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/p3P2NJaQzuIZnYs.png&#34; class=&#34;&#34; title=&#34;site-config&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里BaseDirectory为空表示项目目录是仓库目录的根目录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;构建完成后我们就能够看到一个URL，打开网址就是我们的个人博客了&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221013223348730.png&#34; class=&#34;&#34; title=&#34;image-20221013223348730&#34;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改地址前缀（&lt;strong&gt;因为后缀不能改&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;  网站设置—》常规—》更改站点名，完成后缀是固定的 &lt;code&gt; *.netlify.app&lt;/code&gt; ，要想改变就要买域名，然后配置域名的映射。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置域名映射&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/image-20221013223414819.png&#34; class=&#34;&#34; title=&#34;image-20221013223414819&#34;&gt;

&lt;ul&gt;
&lt;li&gt;配置域名的前提自然是要购买域名了，从任意域名服务商处购买一个域名。&lt;/li&gt;
&lt;/ul&gt;
  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/DFHYzywifpJTxqj.png&#34; class=&#34;&#34; title=&#34;domian-purchase&#34;&gt;

&lt;ul&gt;
&lt;li&gt;然后设置域名解析，类型为CNAME（DNS知识点参见计算机网络相关教程），内容为xxxxx.netlify.app，其中xxxxx为你自己设置的个性二级域名。&lt;/li&gt;
&lt;/ul&gt;
  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/5OVcw9ypvRKQePJ.png&#34; class=&#34;&#34; title=&#34;domain-resolve&#34;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;设置完毕之后需要等待一段时间，因为DNS服务器需要一段时间来进行同步。&lt;/p&gt;
&lt;p&gt;  然后，我们还需要回到netlify中配置一下自己的用户域名，这样的话可以在国外获得netlify本身的CDN支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在netlify设置用户域名。&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/MDjxbIcWBEoLURA.png&#34; class=&#34;&#34; title=&#34;set-custom-domain&#34;&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;进行相关的配置，由于我们的域名本身已经配置了解析，这里会显示出来，不用再额外添加记录，只需要一路默认即可。&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/cqwL9xF8Eov6yVa.png&#34; class=&#34;&#34; title=&#34;add-record&#34;&gt;

  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/RTLcjynQYXbW9vI.png&#34; class=&#34;&#34; title=&#34;activate-dns&#34;&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置一下netlify本身的对于国外CDN的支持。&lt;/p&gt;
  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/8v3ROjQc2WY9q7T.png&#34; class=&#34;&#34; title=&#34;netlify-cdn&#34;&gt;

&lt;p&gt;  之后，我们就可以通过自己配置的域名访问自己的个人博客。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里&lt;code&gt;https&lt;/code&gt;访问需要在&lt;code&gt;netlify&lt;/code&gt;中配置，否则应该只能&lt;code&gt;http&lt;/code&gt;访问。&lt;br&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/f3q8hPbG5vsImeY.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/f3q8hPbG5vsImeY.png&#34; class=&#34;&#34; title=&#34;https-config&#34;&gt;&lt;/a&gt;&lt;br&gt;需要注意一下的是，此刻的https配置过程中的dns验证已经可以通过，但是证书检查会失败，等到后面clouldflare加速配置完成之后，这个问题 就可以解决了。所以暂时应该只能http访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;  &lt;strong&gt;但是，此刻我们的博客访问依然需要科学上网，因为我们还没有国内的CDN的支持，下面，我们来解决这个问题。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ClouldFlare加速&#34;&gt;&lt;a href=&#34;#ClouldFlare加速&#34; class=&#34;headerlink&#34; title=&#34;ClouldFlare加速&#34;&gt;&lt;/a&gt;ClouldFlare加速&lt;/h1&gt;&lt;h2 id=&#34;介绍-1&#34;&gt;&lt;a href=&#34;#介绍-1&#34; class=&#34;headerlink&#34; title=&#34;介绍&#34;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Netlify 虽然已经提供了 CDN 加速，但在使用过程中发现国内访问还是比较慢，Cloudflare 相对于国内的七牛云、阿里云等云服务商的 CDN 速度会慢一些，但是它有免费版本，而且最重要的是域名不用备案。&lt;/p&gt;
&lt;h2 id=&#34;加速步骤&#34;&gt;&lt;a href=&#34;#加速步骤&#34; class=&#34;headerlink&#34; title=&#34;加速步骤&#34;&gt;&lt;/a&gt;加速步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;注册&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vemgtY24v&#34;&gt;Clouldflare&lt;/span&gt;并登陆&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加站点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/rqNObP5dzE6GY83.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/rqNObP5dzE6GY83.png&#34; class=&#34;&#34; title=&#34;add-site&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/Dk3Y4BrltQeCOHI.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/Dk3Y4BrltQeCOHI.png&#34; class=&#34;&#34; title=&#34;config-site&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选择免费套餐&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/SrhEAvmGZeqn8Co.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/SrhEAvmGZeqn8Co.png&#34; class=&#34;&#34; title=&#34;choose-project&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加 DNS 记录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一般情况下 Cloudflare 会检测出来几条 DNS 记录，类型大多数是A，或者AAAA，由于我们是转发，所以应该是 CNAME 类型才对。有必要的话可能得手动配置一下。&lt;/p&gt;
&lt;p&gt;  &lt;a href=&#34;https://s2.loli.net/2022/09/05/fSsAGV5JCeZuF1w.png&#34;&gt;&lt;br&gt;  &lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/fSsAGV5JCeZuF1w.png&#34; class=&#34;&#34; title=&#34;update-record&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更改名称服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个步骤Cloudflare会提供一个在线的教程，主要步骤是在你的域名服务商那里修改 dns 解析服务器为 cloudflare 提供的地址，修改完成后点击完成。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/vd2WxXGbJHmgAey.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/vd2WxXGbJHmgAey.png&#34; class=&#34;&#34; title=&#34;modify-server&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;以阿里云为例，设置的步骤如下:&lt;ol&gt;
&lt;li&gt;进入域名的配置界面&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/ZfLiNUejRsCyhG3.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/ZfLiNUejRsCyhG3.png&#34; class=&#34;&#34; title=&#34;dns-manage&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将域名服务器从阿里云的默认服务器改成clouldflare的服务器&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/juxWl7i9QaeLTGK.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/juxWl7i9QaeLTGK.png&#34; class=&#34;&#34; title=&#34;change-server&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;配置完成后，clouldflare会有邮件通知(一般不会等太久)&lt;br&gt;  &lt;a href=&#34;https://s2.loli.net/2022/09/05/JbBvp18Trne37kC.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/JbBvp18Trne37kC.png&#34; class=&#34;&#34; title=&#34;mail-notice&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;配置https&#34;&gt;&lt;a href=&#34;#配置https&#34; class=&#34;headerlink&#34; title=&#34;配置https&#34;&gt;&lt;/a&gt;配置https&lt;/h2&gt;&lt;p&gt; 在clouldflare配置完成之后，我们可以回到netlify去配置一下https访问。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先确认一下dns解析&lt;/li&gt;
&lt;li&gt;:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/r6iHKWLktnRap1j.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/r6iHKWLktnRap1j.png&#34; class=&#34;&#34; title=&#34;verify-dns&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;然后自动安装证书:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/KvDupBFh8b9CScN.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/KvDupBFh8b9CScN.png&#34; class=&#34;&#34; title=&#34;certify&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后看到如下的界面，就说明https配置完成了&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://s2.loli.net/2022/09/05/f3q8hPbG5vsImeY.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/f3q8hPbG5vsImeY.png&#34; class=&#34;&#34; title=&#34;https-config&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;测试站点&#34;&gt;&lt;a href=&#34;#测试站点&#34; class=&#34;headerlink&#34; title=&#34;测试站点&#34;&gt;&lt;/a&gt;测试站点&lt;/h1&gt;&lt;p&gt; 等待一段时间之后，我们可以试着用自己的浏览器去访问自己配置的域名地址，如果在不科学上网的情况下能够正常看到如下的默认页面，则我们的个人博客就配置成功了。&lt;/p&gt;
&lt;p&gt; &lt;a href=&#34;https://s2.loli.net/2022/09/05/HESMpeXbUFT3rsR.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/HESMpeXbUFT3rsR.png&#34; class=&#34;&#34; title=&#34;default-page&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 本机能够正常访问之后，我们可以用&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYm9jZS5jb20v&#34;&gt;拨测&lt;/span&gt;来检测一下域名解析与访问的速度。&lt;/p&gt;
&lt;p&gt; &lt;a href=&#34;https://s2.loli.net/2022/09/05/7C496Ruof1rBknM.png&#34;&gt;&lt;img data-src=&#34;/2022/10/06/bkBasic/hexo/7C496Ruof1rBknM.png&#34; class=&#34;&#34; title=&#34;speed&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; 到此为止，我们的个人博客就彻底搭建完成啦。后续我们只需要修改博客的配置文件和博客本身的markdown源文件，然后push到github上，netlify会自动帮我们运行当初配置的建站脚本，然后将生成在public文件夹中的静态网页部署出去。&lt;/p&gt;
&lt;p&gt; 关于hexo博客的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mvd3JpdGluZw==&#34;&gt;写作方法&lt;/span&gt;与各种好看的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=&#34;&gt;主题的配置&lt;/span&gt;可以查看官方的文档，多尝试多摸索，配置自己的个性页面吧。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div id=&#34;gitalk-container&#34;&gt;&lt;/div&gt;
&lt;script src=&#34;https://cdn.bootcss.com/blueimp-md5/2.12.0/js/md5.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/gitalk/dist/gitalk.css&#34;&gt;&lt;script src=&#34;https://unpkg.com/gitalk/dist/gitalk.min.js&#34;&gt;&lt;/script&gt;

		&lt;script&gt;
		var gitalkConfig = {&#34;clientID&#34;:&#34;eda74f740080fa01d0b5&#34;,&#34;clientSecret&#34;:&#34;c994dd2162a1dadaefbf078fcab49361438a7aca&#34;,&#34;repo&#34;:&#34;comments001&#34;,&#34;owner&#34;:&#34;onlymarryu&#34;,&#34;admin&#34;:[&#34;onlymarryu&#34;],&#34;distractionFreeMode&#34;:true,&#34;proxy&#34;:&#34;https://winter-rain-5b30.wudu-bk.workers.dev&#34;};
	    gitalkConfig.id = md5(location.pathname);
		var gitalk = new Gitalk(gitalkConfig);
	    gitalk.render(&#34;gitalk-container&#34;);
	    &lt;/script&gt; ]]></description>
        </item>
    </channel>
</rss>
