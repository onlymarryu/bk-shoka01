<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>雾都博客 • Posts by &#34;mysql&#34; tag</title>
        <link>http://example.com</link>
        <description>记录美食每刻</description>
        <language>zh-CN</language>
        <pubDate>Fri, 14 Oct 2022 17:50:50 +0800</pubDate>
        <lastBuildDate>Fri, 14 Oct 2022 17:50:50 +0800</lastBuildDate>
        <category>博客</category>
        <category>环境搭建</category>
        <category>分布式</category>
        <category>FastDFS</category>
        <category>Dubbo</category>
        <category>MySQL</category>
        <category>数据库基础</category>
        <category>数据库基本知识</category>
        <category>数据库</category>
        <category>框架</category>
        <category>ORM</category>
        <category>中间件</category>
        <category>RabbitMQ</category>
        <category>Redis基础</category>
        <category>NoSQL数据库</category>
        <category>RPC</category>
        <category>Spring</category>
        <category>SpringBoot</category>
        <category>Solr</category>
        <category>快速搜索</category>
        <category>SpringMVC</category>
        <category>JavaSE</category>
        <category>SpringSecurity</category>
        <category>-JavaSE</category>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/14/MySQL_Create/</guid>
            <title>MySQL基础</title>
            <link>http://example.com/2022/10/14/MySQL_Create/</link>
            <category>MySQL</category>
            <category>数据库基础</category>
            <category>数据库基本知识</category>
            <pubDate>Fri, 14 Oct 2022 17:50:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;MySQL安装&#34;&gt;&lt;a href=&#34;#MySQL安装&#34; class=&#34;headerlink&#34; title=&#34;MySQL安装&#34;&gt;&lt;/a&gt;MySQL安装&lt;/h1&gt;&lt;h2 id=&#34;1、卸载原来的版本&#34;&gt;&lt;a href=&#34;#1、卸载原来的版本&#34; class=&#34;headerlink&#34; title=&#34;1、卸载原来的版本&#34;&gt;&lt;/a&gt;1、卸载原来的版本&lt;/h2&gt;&lt;h3 id=&#34;1、查看mysql的安装情况&#34;&gt;&lt;a href=&#34;#1、查看mysql的安装情况&#34; class=&#34;headerlink&#34; title=&#34;1、查看mysql的安装情况&#34;&gt;&lt;/a&gt;1、查看mysql的安装情况&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rpm -qa | grep -i mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/1570605325400.png&#34; class=&#34;&#34; width=&#34;1570605325400&#34;&gt;

&lt;h3 id=&#34;2、删除上图安装的软件&#34;&gt;&lt;a href=&#34;#2、删除上图安装的软件&#34; class=&#34;headerlink&#34; title=&#34;2、删除上图安装的软件&#34;&gt;&lt;/a&gt;2、删除上图安装的软件&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rpm -ev --nodeps mysql57-community-release-el5-7.noarch
rpm -ev --nodeps mysql-community-server-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-client-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-libs-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-common-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-5.7.18-1.el5.x86_64
rpm -ev --nodeps mysql-community-libs-compat-5.7.18-1.el5.x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3、都删除成功之后，查找相关的mysql的文件&#34;&gt;&lt;a href=&#34;#3、都删除成功之后，查找相关的mysql的文件&#34; class=&#34;headerlink&#34; title=&#34;3、都删除成功之后，查找相关的mysql的文件&#34;&gt;&lt;/a&gt;3、都删除成功之后，查找相关的mysql的文件&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;find / -name mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/1570605553095.png&#34; class=&#34;&#34; width=&#34;1570605553095&#34;&gt;

&lt;h3 id=&#34;4、删除全部文件&#34;&gt;&lt;a href=&#34;#4、删除全部文件&#34; class=&#34;headerlink&#34; title=&#34;4、删除全部文件&#34;&gt;&lt;/a&gt;4、删除全部文件&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;rm -rf /etc/selinux/targeted/active/modules/100/mysql
rm -rf /root/mysql
rm -rf /root/mysql/data/mysql
rm -rf /var/lib/mysql
rm -rf /var/lib/mysql/mysql
rm -rf /usr/share/mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5、再次执行命令&#34;&gt;&lt;a href=&#34;#5、再次执行命令&#34; class=&#34;headerlink&#34; title=&#34;5、再次执行命令&#34;&gt;&lt;/a&gt;5、再次执行命令&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;rpm -qa | grep -i mysql
#如果没有显式则表示卸载完成
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2、删除mariadb-libs-不可省略&#34;&gt;&lt;a href=&#34;#2、删除mariadb-libs-不可省略&#34; class=&#34;headerlink&#34; title=&#34;2、删除mariadb-libs(不可省略)&#34;&gt;&lt;/a&gt;2、删除mariadb-libs(不可省略)&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 检查mariadb-libs
rpm -qa|grep mariadb
# 卸载mariadb-libs
yum remove -y mariadb-libs
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3、安装MySQL&#34;&gt;&lt;a href=&#34;#3、安装MySQL&#34; class=&#34;headerlink&#34; title=&#34;3、安装MySQL&#34;&gt;&lt;/a&gt;3、安装MySQL&lt;/h2&gt;&lt;h3 id=&#34;1，输入&#34;&gt;&lt;a href=&#34;#1，输入&#34; class=&#34;headerlink&#34; title=&#34;1，输入&#34;&gt;&lt;/a&gt;1，输入&lt;/h3&gt;&lt;p&gt;wegt &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2dldC9teXNxbCVFNyU4OSU4OCVFNiU5QyVBQyVFNSU4RiVCNy1jb21tdW5pdHktcmVsZWFzZS1lbCVFNSVBNCVBNyVFNyU4OSU4OCVFNiU5QyVBQy0lRTUlQjAlOEYlRTclODklODglRTYlOUMlQUMubm9hcmNoLnJwbQ==&#34;&gt;https://dev.mysql.com/get/mysql版本号-community-release-el大版本-小版本.noarch.rpm&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;wget https://dev.mysql.com/get/mysql57-community-release-el5-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2、安装数据源&#34;&gt;&lt;a href=&#34;#2、安装数据源&#34; class=&#34;headerlink&#34; title=&#34;2、安装数据源&#34;&gt;&lt;/a&gt;2、安装数据源&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install -y mysql57-community-release-el5-7.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;3、查看mysql源是否安装成功&#34;&gt;&lt;a href=&#34;#3、查看mysql源是否安装成功&#34; class=&#34;headerlink&#34; title=&#34;3、查看mysql源是否安装成功&#34;&gt;&lt;/a&gt;3、查看mysql源是否安装成功&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum repolist enabled | grep &amp;quot;mysql.*-community.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;4、安装数据库&#34;&gt;&lt;a href=&#34;#4、安装数据库&#34; class=&#34;headerlink&#34; title=&#34;4、安装数据库&#34;&gt;&lt;/a&gt;4、安装数据库&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;yum install -y  mysql-community-server



# 如果过期可以在运行安装程序之前导入密钥
rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;5、启动mysql&#34;&gt;&lt;a href=&#34;#5、启动mysql&#34; class=&#34;headerlink&#34; title=&#34;5、启动mysql&#34;&gt;&lt;/a&gt;5、启动mysql&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# centos7
systemctl restart mysqld
systemctl status mysqld


# centos6
service mysqld start
service mysqld status
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;6、显示mysql的随机密码&#34;&gt;&lt;a href=&#34;#6、显示mysql的随机密码&#34; class=&#34;headerlink&#34; title=&#34;6、显示mysql的随机密码&#34;&gt;&lt;/a&gt;6、显示mysql的随机密码&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;grep &amp;#39;temporary password&amp;#39; /var/log/mysqld.log
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/image-20220827193405451.png&#34; class=&#34;&#34; title=&#34;image-20220827193405451&#34;&gt;

&lt;h3 id=&#34;7、登录并修改mysql密码&#34;&gt;&lt;a href=&#34;#7、登录并修改mysql密码&#34; class=&#34;headerlink&#34; title=&#34;7、登录并修改mysql密码&#34;&gt;&lt;/a&gt;7、登录并修改mysql密码&lt;/h3&gt;&lt;p&gt;登录：mysql -u root -p     然后输入上面生成的密码&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;修改自定义密码，设置自己想要的密码&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;密码&amp;#39;;

ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;root&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;失败了的话就修改策略，将策略降低一下就可以了&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;查看密码策略：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHOW VARIABLES LIKE &amp;#39;%validate_password%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改密码策略&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 修改密码长度：（长度）
set global validate_password.length=1;
set global validate_password_length=1;
-- 修改密码等级：（等级）
set global validate_password.policy=0;
set global validate_password_policy=0;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4、其他配置&#34;&gt;&lt;a href=&#34;#4、其他配置&#34; class=&#34;headerlink&#34; title=&#34;4、其他配置&#34;&gt;&lt;/a&gt;4、其他配置&lt;/h2&gt;&lt;h3 id=&#34;1-开机自启&#34;&gt;&lt;a href=&#34;#1-开机自启&#34; class=&#34;headerlink&#34; title=&#34;1.开机自启&#34;&gt;&lt;/a&gt;1.开机自启&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 开机启动
systemctl enable mysql
# 关闭自动启动
systemctl disable mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;2-远程连接&#34;&gt;&lt;a href=&#34;#2-远程连接&#34; class=&#34;headerlink&#34; title=&#34;2.远程连接&#34;&gt;&lt;/a&gt;2.远程连接&lt;/h3&gt;&lt;h4 id=&#34;方法一、创建一个用户-支持远程连接&#34;&gt;&lt;a href=&#34;#方法一、创建一个用户-支持远程连接&#34; class=&#34;headerlink&#34; title=&#34;方法一、创建一个用户 支持远程连接&#34;&gt;&lt;/a&gt;方法一、创建一个用户 支持远程连接&lt;/h4&gt;&lt;p&gt;①登录 ：mysql -u root -p&lt;/p&gt;
&lt;p&gt;②创建用户： create user ‘aaa‘@’%’ identified by ‘123456’;&lt;/p&gt;
&lt;p&gt;③授权所有权限给user这个新用户 ：grant all on &lt;em&gt;.&lt;/em&gt; to ‘aaa‘@’%’;&lt;/p&gt;
&lt;p&gt;④退出mysql：quit;&lt;/p&gt;
&lt;h4 id=&#34;方法二、设置root用户支持远程连接&#34;&gt;&lt;a href=&#34;#方法二、设置root用户支持远程连接&#34; class=&#34;headerlink&#34; title=&#34;方法二、设置root用户支持远程连接&#34;&gt;&lt;/a&gt;方法二、设置root用户支持远程连接&lt;/h4&gt;&lt;p&gt;①登录：mysql -u root -p （ 注：系统提示输入数据库root用户的密码，输入完成后即进入mysql控制台，这个命令的第一个mysql是执行命令，第二个mysql是系统数据名称，不一样的。）&lt;/p&gt;
&lt;p&gt;②设置权限：&lt;/p&gt;
&lt;p&gt;赋予权限格式： grant 权限 on 数据库对象 to 用户@IP(或者相应正则)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 新建用户规则或者直接修改root用户的规则 ，2 选一
use mysql;

-- 这里表示赋予该用户所有数据库所有表（*.*表示所有表），%表示所有IP地址。
GRANT ALL PRIVILEGES ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;123456&amp;#39; WITH GRANT OPTION;
-- 使root能再任何host访问
update user set host = &amp;#39;%&amp;#39; where user = &amp;#39;root&amp;#39;;      

-- 刷新
FLUSH PRIVILEGES;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;③查看：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;use mysql;
SELECT HOST,USER FROM USER;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/920952e9041b4af1a8a49eb64e0f4430.jpeg&#34; class=&#34;&#34; title=&#34;img&#34;&gt;

&lt;p&gt; ④退出mysql：quit;&lt;/p&gt;
&lt;h2 id=&#34;其他安装方式&#34;&gt;&lt;a href=&#34;#其他安装方式&#34; class=&#34;headerlink&#34; title=&#34;其他安装方式&#34;&gt;&lt;/a&gt;其他安装方式&lt;/h2&gt;&lt;h3 id=&#34;docker&#34;&gt;&lt;a href=&#34;#docker&#34; class=&#34;headerlink&#34; title=&#34;docker&#34;&gt;&lt;/a&gt;docker&lt;/h3&gt;&lt;h4 id=&#34;1、查询镜像&#34;&gt;&lt;a href=&#34;#1、查询镜像&#34; class=&#34;headerlink&#34; title=&#34;1、查询镜像&#34;&gt;&lt;/a&gt;1、查询镜像&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker search mysql
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2、拉取镜像&#34;&gt;&lt;a href=&#34;#2、拉取镜像&#34; class=&#34;headerlink&#34; title=&#34;2、拉取镜像&#34;&gt;&lt;/a&gt;2、拉取镜像&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker pull mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3、构建容器&#34;&gt;&lt;a href=&#34;#3、构建容器&#34; class=&#34;headerlink&#34; title=&#34;3、构建容器&#34;&gt;&lt;/a&gt;3、构建容器&lt;/h4&gt;&lt;p&gt;先自己创建配置文件基础模板（&lt;strong&gt;要是后期要修改配置文件必须加入 模板中的两个元素，不然容器启动会出错&lt;/strong&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;mkdir -p /root/mysql/conf
vim  /root/mysql/conf/my.cnf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;模板内容：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mysql.conf.d/

[mysql]
default-character-set=utf8mb4
[mysqld]
character_set_server=utf8mb4
init_connect=&amp;#39;SET NAMES utf8&amp;#39;
lower_case_table_names = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;构建容器&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker run \
-p 3306:3306 \
-v /root/mysql/data:/var/lib/mysql \
-v /root/mysql/logs:/logs \
-v /root/mysql/conf/my.cnf:/etc/mysql/my.cnf \
-e MYSQL_ROOT_PASSWORD=root \
--name mysql \
--hostname node1 \
--restart=always \
-d mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：出错时将本地映射文件检查一下，要是不需要配置，只需映射直接删掉就可，以后再改配置文件&lt;/p&gt;
&lt;h4 id=&#34;4、进入容器&#34;&gt;&lt;a href=&#34;#4、进入容器&#34; class=&#34;headerlink&#34; title=&#34;4、进入容器&#34;&gt;&lt;/a&gt;4、进入容器&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;docker exec -it mysql /bin/bash
或者
docker exec -it mysql mysql -uroot -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;docker-compose&#34;&gt;&lt;a href=&#34;#docker-compose&#34; class=&#34;headerlink&#34; title=&#34;docker-compose&#34;&gt;&lt;/a&gt;docker-compose&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;前提安装了 docker-compose&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;配置-docker-comose-yml-文件&#34;&gt;&lt;a href=&#34;#配置-docker-comose-yml-文件&#34; class=&#34;headerlink&#34; title=&#34;配置  docker-comose.yml 文件&#34;&gt;&lt;/a&gt;配置  docker-comose.yml 文件&lt;/h4&gt;&lt;p&gt;5.7：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;version: &amp;quot;3.0&amp;quot;
services:
  mysql8:
    image: mysql:5.7.32
    container_name: my_db57
    restart: always
    volumes:
      - ./db:/var/lib/mysql
      - ./conf/my.cnf:/etc/my.cnf
      # 数据库初始化脚本，当Mysql容器首次启动时，会在 /docker-entrypoint-initdb.d目录下扫描 .sh，.sql，.sql.gz类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库；
      - ./init/:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      # 指定初始化sql文件的数据库，简单来书就是新建一个数据库
      - MYSQL_DATABASE=my_db
      - TZ=Asia/Shanghai
    ports:
      - 3311:3306
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.0&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;yml&#34;&gt;version: &amp;quot;3.0&amp;quot;
services:
  mysql8:
    image: mysql:8.0.25
    container_name: my_db8
    restart: always
    volumes:
      - ./db:/var/lib/mysql
      - ./conf/my.cnf:/etc/my.cnf
      # 数据库初始化脚本，当Mysql容器首次启动时，会在 /docker-entrypoint-initdb.d目录下扫描 .sh，.sql，.sql.gz类型的文件。如果这些类型的文件存在，将执行它们来初始化一个数据库；
      - ./init/:/docker-entrypoint-initdb.d/
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      # 指定初始化sql文件的数据库，简单来书就是新建一个数据库
      - MYSQL_DATABASE=my_db
      - TZ=Asia/Shanghai
    ports:
      - 3301:3306
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;配置文件-my-cnf&#34;&gt;&lt;a href=&#34;#配置文件-my-cnf&#34; class=&#34;headerlink&#34; title=&#34;配置文件 my.cnf&#34;&gt;&lt;/a&gt;配置文件 my.cnf&lt;/h4&gt;&lt;p&gt;5.7：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4

[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock

symbolic-links=0

log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8mb4

# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;8.0：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4
[mysqld]
# 允许最大连接数
max_connections=200

# 服务端使用的字符集默认为8比特编码的latin1字符集
character-set-server=utf8mb4

# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;问题&#34;&gt;&lt;a href=&#34;#问题&#34; class=&#34;headerlink&#34; title=&#34;问题&#34;&gt;&lt;/a&gt;问题&lt;/h4&gt;&lt;p&gt;1、Can’t create&amp;#x2F;write to file ‘&amp;#x2F;var&amp;#x2F;run&amp;#x2F;mysqld&amp;#x2F;mysqld.pid&lt;/p&gt;
&lt;p&gt;去配置文件中找到 errorlog的地址，查看错误日志&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/14/MySQL_Create/20190602012200812.png&#34; class=&#34;&#34; title=&#34;img&#34;&gt;

&lt;p&gt;错误原因为：&amp;#x2F;var&amp;#x2F;run&amp;#x2F;mysqld&amp;#x2F;目录的拥有者为root，mysql不能在其中创建文件&lt;/p&gt;
&lt;p&gt;使用如下命令修改目录使用者&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;shell&#34;&gt;# 先查看目录是否存在
ls -ld /var/run/mysqld/
# 权限
chown mysql.mysql /var/run/mysqld/
# 修改后重启mysql服务
/etc/init.d/mysqld start
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2022/10/07/MySQL_Super/</guid>
            <title>MySQL高级部分</title>
            <link>http://example.com/2022/10/07/MySQL_Super/</link>
            <category>MySQL</category>
            <category>数据库</category>
            <pubDate>Fri, 07 Oct 2022 00:00:00 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;MySQL性能调优&#34;&gt;&lt;a href=&#34;#MySQL性能调优&#34; class=&#34;headerlink&#34; title=&#34;MySQL性能调优&#34;&gt;&lt;/a&gt;MySQL性能调优&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;环境：CentOS7.5					 Version：MySQL57.39&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;主要内容&#34;&gt;&lt;a href=&#34;#主要内容&#34; class=&#34;headerlink&#34; title=&#34;主要内容&#34;&gt;&lt;/a&gt;主要内容&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;#MySQL%E7%9A%84%E6%9E%B6%E6%9E%84%E4%BB%8B%E7%BB%8D&#34;&gt;1、MySQL的架构介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E5%88%86%E6%9E%90&#34;&gt;2、索引优化分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#%E6%9F%A5%E8%AF%A2%E6%88%AA%E5%8F%96%E5%88%86%E6%9E%90&#34;&gt;3、查询截取分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#MySQL%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6&#34;&gt;4、MySQL的锁机制&lt;/a&gt;&lt;/p&gt;
&lt;div name=MySQL的架构介绍 &gt;


&lt;h1 id=&#34;MySQL文件目录结构&#34;&gt;&lt;a href=&#34;#MySQL文件目录结构&#34; class=&#34;headerlink&#34; title=&#34;MySQL文件目录结构&#34;&gt;&lt;/a&gt;MySQL文件目录结构&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;路径&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;解释&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;var&amp;#x2F;lib&amp;#x2F;mysql&amp;#x2F;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mysql数据库文件的存放路径&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;var&amp;#x2F;lib&amp;#x2F;mysql&amp;#x2F;atguidgu.cloud.pid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;usr&amp;#x2F;share&amp;#x2F;mysql&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;配置文件目录&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mysql.server命令及配置及文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;usr&amp;#x2F;bin&amp;#x2F;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;相关命令目录&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mysqladmin 、mysqldump等相关命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&amp;#x2F;ect&amp;#x2F;init.d&amp;#x2F;mysql&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;启停相关脚本&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;主要配置文件&#34;&gt;&lt;a href=&#34;#主要配置文件&#34; class=&#34;headerlink&#34; title=&#34;主要配置文件&#34;&gt;&lt;/a&gt;主要配置文件&lt;/h1&gt;&lt;p&gt;1、二进制日志 log-bin ：主从复制&lt;/p&gt;
&lt;p&gt;2、错误日志 log-error ：默认是关闭的，记录严重的警告和错误信息，每次启动和关闭的详细信息等&lt;/p&gt;
&lt;p&gt;3、查询日志 log ：默认关闭，记录查询的SQL语句，如果开启就会降低mysql的整体性能&lt;/p&gt;
&lt;p&gt;4、数据文件 : &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows：本地安装的目录下&amp;#x2F;data  目录下可以挑选很多库&lt;/li&gt;
&lt;li&gt;Windows：本地安装的目录下&amp;#x2F;data  目录下可以挑选很多库&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;frm文件： 存放表结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;myd文件：存放表数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;myi文件： 存放表索引&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;逻辑架构&#34;&gt;&lt;a href=&#34;#逻辑架构&#34; class=&#34;headerlink&#34; title=&#34;逻辑架构&#34;&gt;&lt;/a&gt;逻辑架构&lt;/h1&gt;&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220816182921842-1660960902142.png&#34; class=&#34;&#34;&gt;




&lt;h2 id=&#34;1-连接层&#34;&gt;&lt;a href=&#34;#1-连接层&#34; class=&#34;headerlink&#34; title=&#34;1.连接层&#34;&gt;&lt;/a&gt;1.连接层&lt;/h2&gt;&lt;p&gt;​	最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端&amp;#x2F;服务端工具实现的类似于tcplip的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。&lt;/p&gt;
&lt;h2 id=&#34;⒉服务层&#34;&gt;&lt;a href=&#34;#⒉服务层&#34; class=&#34;headerlink&#34; title=&#34;⒉服务层&#34;&gt;&lt;/a&gt;⒉服务层&lt;/h2&gt;&lt;p&gt;​	第二层架构主要完成大多少的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化及部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程、函数等。在该层，服务器会解析查询并创建相应的内部解析树，并对其完成相应的优化如确定查询表的顺序，是否利用索引等，最后生成相应的执行操作。如果是select语句，服务器还会查询内部的缓存。如果缓存空间足够大，这样在解决大量读操作的环境中能够很好的提升系统的性能。&lt;/p&gt;
&lt;h2 id=&#34;3-引擎层&#34;&gt;&lt;a href=&#34;#3-引擎层&#34; class=&#34;headerlink&#34; title=&#34;3.引擎层&#34;&gt;&lt;/a&gt;3.引擎层&lt;/h2&gt;&lt;p&gt;​	存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。后面介绍MylSAM和InnoDB&lt;/p&gt;
&lt;p&gt;常用的存储引擎：MyISAM、InnoDB(最常用)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;对比项&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;MylSAM&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;InnoDB&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;主外键&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不支持&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;事务&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不馳&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;行表锁&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;表锁，即使操作一条记录也会锁住整 个表，不适合高并发的操作&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;行锁,操作时只锁某一行，不对其它 行有影响， 适合高并发的操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;緩存&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;只緩存索引，不缓存真实数据&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;不仅缓存索引还要缓存真实数据，对 内存要求较高，而且内存大小对性能 有决定性的影响&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;表空间&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;小&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;关注点&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;性能&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;事务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;默认安装&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;4-存储层&#34;&gt;&lt;a href=&#34;#4-存储层&#34; class=&#34;headerlink&#34; title=&#34;4.存储层&#34;&gt;&lt;/a&gt;4.存储层&lt;/h2&gt;&lt;p&gt;​	数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220816181915861-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;h2 id=&#34;连接器&#34;&gt;&lt;a href=&#34;#连接器&#34; class=&#34;headerlink&#34; title=&#34;连接器&#34;&gt;&lt;/a&gt;连接器&lt;/h2&gt;&lt;p&gt;▪  连接器负责跟客户端建立连接，获取权限、维持和管理连接&lt;br&gt;– 用户名密码验证&lt;br&gt;– 查询权限信息，分配对应的权限&lt;br&gt;– 可以使用show processlist查看现在的连接&lt;br&gt;– 如果太长时间没有动静，  就会自动断开，通过wait_timeout控制，默认8小时&lt;br&gt;▪  连接可以分为两类：&lt;br&gt;– 长连接：推荐使用，但是要周期性的断开长连接&lt;/p&gt;
&lt;p&gt;– 短链接：&lt;/p&gt;
&lt;h2 id=&#34;查询缓存&#34;&gt;&lt;a href=&#34;#查询缓存&#34; class=&#34;headerlink&#34; title=&#34;查询缓存&#34;&gt;&lt;/a&gt;查询缓存&lt;/h2&gt;&lt;p&gt;▪  当执行查询语句的时候，会先去查询缓存中查看结果，之前执行 过的sql语句及其结果可能以key-value的形式存储在缓存中，如 果能找到则直接返回，如果找不到，就继续执行后续的阶段。&lt;br&gt;&amp;#x3D;&amp;#x3D;▪  但是，不推荐使用查询缓存：&amp;#x3D;&amp;#x3D;&lt;br&gt;– 1、查询缓存的失效比较频繁，只要表更新，缓存就会清空&lt;/p&gt;
&lt;p&gt;– 2、缓存对应新更新的数据命中率比较低&lt;/p&gt;
&lt;h2 id=&#34;分析器&#34;&gt;&lt;a href=&#34;#分析器&#34; class=&#34;headerlink&#34; title=&#34;分析器&#34;&gt;&lt;/a&gt;分析器&lt;/h2&gt;&lt;p&gt;▪  词法分析：  Mysql需要把输入的字符串进行识别每个部分代表什 么意思&lt;br&gt;– 把字符串 T 识别成 表名 T&lt;br&gt;– 把字符串 ID 识别成 列ID&lt;br&gt;▪  语法分析：&lt;/p&gt;
&lt;p&gt;▪  根据语法规则判断这个sql语句是否满足mysql的语法，如果不符 合就会报错“You have an error in your SQL synta”&lt;/p&gt;
&lt;h2 id=&#34;优化器&#34;&gt;&lt;a href=&#34;#优化器&#34; class=&#34;headerlink&#34; title=&#34;优化器&#34;&gt;&lt;/a&gt;优化器&lt;/h2&gt;&lt;p&gt;▪  在具体执行SQL语句之前，要先经过优化器的处理&lt;br&gt;– 当表中有多个索引的时候，决定用哪个索引&lt;br&gt;– 当sql语句需要做多表关联的时候，  决定表的连接顺序&lt;br&gt;– 等等&lt;br&gt;▪ 不同的执行方式对SQL语句的执行效率影响很大&lt;br&gt;– RBO:基于规则的优化&lt;/p&gt;
&lt;p&gt;– CBO:基于成本的优化&lt;/p&gt;
&lt;h1 id=&#34;SQL性能下降原因&#34;&gt;&lt;a href=&#34;#SQL性能下降原因&#34; class=&#34;headerlink&#34; title=&#34;SQL性能下降原因&#34;&gt;&lt;/a&gt;SQL性能下降原因&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;查询语句写的烂&lt;/li&gt;
&lt;li&gt;索引失效&lt;/li&gt;
&lt;li&gt;关联查询太多 join &lt;/li&gt;
&lt;li&gt;服务器调优及各个参数设置（缓冲、线程数）&lt;/li&gt;
&lt;li&gt;……….etc&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;SQL语句机读过程&#34;&gt;&lt;a href=&#34;#SQL语句机读过程&#34; class=&#34;headerlink&#34; title=&#34;SQL语句机读过程&#34;&gt;&lt;/a&gt;SQL语句机读过程&lt;/h1&gt;&lt;p&gt;人工：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;    SELECT DISTINCT
        &amp;lt;SELECT_list&amp;gt;
    FROM
        &amp;lt;left_table&amp;gt; &amp;lt;join_type&amp;gt;
    Join &amp;lt;right_table&amp;gt; on &amp;lt;join_condition&amp;gt;
    WHERE 
        &amp;lt;WHERE_Condition&amp;gt;
    GROUP BY
        &amp;lt;group_by_list&amp;gt;
    HAVING
        &amp;lt;having_condition&amp;gt;
    ORDER BY
        &amp;lt;order_by_condition&amp;gt;
    LIMIT &amp;lt;limit_num&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;机器：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220816200725202-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;注意第一步是 from –&amp;gt; on –&amp;gt; join –&amp;gt;where –&amp;gt;group by –&amp;gt;having –&amp;gt;select –&amp;gt;order by –&amp;gt;limit&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;    from &amp;lt;left table&amp;gt;
        on &amp;lt;on_condition&amp;gt;
    &amp;lt;join_type&amp;gt; join &amp;lt;join_table&amp;gt;
    where &amp;lt;where_condition&amp;gt;
    group by &amp;lt;group_by_list&amp;gt;
        &amp;lt;sum()avg()等聚合函数&amp;gt;
    having &amp;lt;having_condition&amp;gt;
    select &amp;lt;select_list&amp;gt;
    distinct
    order by &amp;lt;order_by_condition&amp;gt;
    limit &amp;lt;limit_number&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;on和where的区别？&#34;&gt;&lt;a href=&#34;#on和where的区别？&#34; class=&#34;headerlink&#34; title=&#34;on和where的区别？&#34;&gt;&lt;/a&gt;on和where的区别？&lt;/h2&gt;&lt;p&gt;​	简单地说，当有外关联表时，on主要是针对外关联表进行筛选，主表保留，当没有关联表时，二者作用相同。&lt;/p&gt;
&lt;p&gt;例如在左外连时，首先执行on，筛选掉外连表中不符合on表达式的数据，而where的筛选是对主表的筛选。&lt;/p&gt;
&lt;h1 id=&#34;MySql执行顺序理解&#34;&gt;&lt;a href=&#34;#MySql执行顺序理解&#34; class=&#34;headerlink&#34; title=&#34;MySql执行顺序理解&#34;&gt;&lt;/a&gt;MySql执行顺序理解&lt;/h1&gt;&lt;p&gt;第一步：加载from子句的前两个表计算笛卡尔积，生成虚拟表vt1；&lt;/p&gt;
&lt;p&gt;第二步：筛选关联表符合on表达式的数据，保留主表，生成虚拟表vt2；&lt;/p&gt;
&lt;p&gt;第三步：如果使用的是外连接，执行on的时候，会将主表中不符合on条件的数据也加载进来，做为外部行&lt;/p&gt;
&lt;p&gt;第四步：如果from子句中的表数量大于2，则重复第一步到第三步，直至所有的表都加载完毕，更新vt3；&lt;/p&gt;
&lt;p&gt;第五步：执行where表达式，筛选掉不符合条件的数据生成vt4；&lt;/p&gt;
&lt;p&gt;第六步：执行group by子句。group by 子句执行过后，会对子句组合成唯一值并且对每个唯一值只包含一行，生成vt5,。一旦执行group by，后面的所有步骤只能得到vt5中的列（group by的子句包含的列）和聚合函数。&lt;/p&gt;
&lt;p&gt;第七步：执行聚合函数，生成vt6；&lt;/p&gt;
&lt;p&gt;第八步：执行having表达式，筛选vt6中的数据。having是唯一一个在分组后的条件筛选，生成vt7;&lt;/p&gt;
&lt;p&gt;第九步：从vt7中筛选列，生成vt8；&lt;/p&gt;
&lt;p&gt;第十步：执行distinct，对vt8去重，生成vt9。其实执行过group by后就没必要再去执行distinct，因为分组后，每组只会有一条数据，并且每条数据都不相同。&lt;/p&gt;
&lt;p&gt;第十一步：对vt9进行排序，此处返回的不是一个虚拟表，而是一个游标，记录了数据的排序顺序，此处可以使用别名；&lt;/p&gt;
&lt;p&gt;第十二步：执行limit语句，将结果返回给客户端&lt;/p&gt;
&lt;div name=索引优化分析 &gt;


&lt;h1 id=&#34;索引&#34;&gt;&lt;a href=&#34;#索引&#34; class=&#34;headerlink&#34; title=&#34;索引&#34;&gt;&lt;/a&gt;索引&lt;/h1&gt;&lt;p&gt;​	MySQL官方对索引的定义为：索引(Index）是帮助MySQL高效获取数据的数据结构。可以得到索引的本质:&amp;#x3D;&amp;#x3D;索引是数据结构&amp;#x3D;&amp;#x3D;。&lt;/p&gt;
&lt;p&gt;&lt;font color=red &gt;可以简单理解为 “排好序的快速查找数据结构”&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储的磁盘上&lt;/p&gt;
&lt;p&gt;我们平常所说的&amp;#x3D;&amp;#x3D;索引，如果没有特别指明，都是指B树(多路搜索树，并不一定是二叉的)结构组织的索引&amp;#x3D;&amp;#x3D;。其中聚集索引，次要索引，复合索引，前缀索引，唯一索引默认都是使用B+树索引，统称索引。当然，除了B+树这种类型的索引之外还有哈稀索引(hash，index)等。&lt;/p&gt;
&lt;p&gt;简单来说&amp;#x3D;&amp;#x3D;最大的作用&amp;#x3D;&amp;#x3D;就是 &amp;#x3D;&amp;#x3D;排序&amp;#x3D;&amp;#x3D; 和 &amp;#x3D;&amp;#x3D;查询&amp;#x3D;&amp;#x3D; &lt;/p&gt;
&lt;h2 id=&#34;目的&#34;&gt;&lt;a href=&#34;#目的&#34; class=&#34;headerlink&#34; title=&#34;目的&#34;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;提高查询效率，可以类比字典，&lt;br&gt;如果要查“mysql”这个单询，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。&lt;br&gt;如果没有索引，那么你可能需要a—-z，如果我想找到Java开头的单词呢?或者Oracle开头的单词呢?&lt;br&gt;是不是觉得如果没有索引，这个事情根本无法完成?&lt;/p&gt;
&lt;h2 id=&#34;详解&#34;&gt;&lt;a href=&#34;#详解&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h2&gt;&lt;p&gt;​	在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查找算法。这种数据结构，就是索引。&lt;/p&gt;
&lt;p&gt;下图就是一种可能的索引方式示例:&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220816211711261-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;​				左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址&lt;/p&gt;
&lt;p&gt;​	为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找在一定的复杂度内获取到相应数据，从而快速的检索出符合条件的记录.&lt;/p&gt;
&lt;h2 id=&#34;优劣&#34;&gt;&lt;a href=&#34;#优劣&#34; class=&#34;headerlink&#34; title=&#34;优劣&#34;&gt;&lt;/a&gt;优劣&lt;/h2&gt;&lt;p&gt;优势：&lt;/p&gt;
&lt;p&gt;​	类似大学图书馆建书目索引，提高数据检索的效率，降低数据库的IO成本&lt;/p&gt;
&lt;p&gt;​	 通过索引列对数据进行排序，降低数据排序的成本，降低了CPU的消耗&lt;/p&gt;
&lt;p&gt;劣势：&lt;/p&gt;
&lt;p&gt;​	1、实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间&lt;/p&gt;
&lt;p&gt;​	2、虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，&lt;br&gt;都会调整因为更新所带来的键值变化后的索引信息&lt;br&gt;​	3、索引只是提高效率的一个因素，如果你的MySQL有大数据量的表，就需要花时间研究建立最优秀的索引&lt;/p&gt;
&lt;h2 id=&#34;分类&#34;&gt;&lt;a href=&#34;#分类&#34; class=&#34;headerlink&#34; title=&#34;分类&#34;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单值索引：即一个索引只包含单个列，一个表可以有多个单列索引&lt;/li&gt;
&lt;li&gt;唯一索引：索引列的值必须唯一，但允许有空值&lt;/li&gt;
&lt;li&gt;复合索引：即一个索引包含多个列&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基本语法&#34;&gt;&lt;a href=&#34;#基本语法&#34; class=&#34;headerlink&#34; title=&#34;基本语法&#34;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CREATE	 [UNIQUE ]INDEX  	indexName   	ON   	mytable(columnname(length));&lt;/li&gt;
&lt;li&gt;CREATE	 [UNIQUE ]INDEX      indexName   	ON   	mytable(columnname(length));&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;	&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DROP 	INDEX 	[indexName] 	ON 	mytable;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHOW 		INDEX 		FROM 		table_name\G&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用ALTER命令&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;MySQL索引结构&#34;&gt;&lt;a href=&#34;#MySQL索引结构&#34; class=&#34;headerlink&#34; title=&#34;MySQL索引结构&#34;&gt;&lt;/a&gt;MySQL索引结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;BTree索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hash索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full-Text全文索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R-Tree索引&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;哪些情况下需要创建索引&#34;&gt;&lt;a href=&#34;#哪些情况下需要创建索引&#34; class=&#34;headerlink&#34; title=&#34;哪些情况下需要创建索引&#34;&gt;&lt;/a&gt;哪些情况下需要创建索引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;主键自动建立唯一索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;频繁作为查询条件的字段应该创建索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询中与其它表关联的字段，外键关系建立索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;频繁更新的字段不适合创建索引or因为每次更新不单单是更新了记录还会更新索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Where条件里用不到的字段不创建索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单键&amp;#x2F;组合索引的选择问题，who?(在高并发下倾向创建组合索引)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询中统计或者分组字段&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;哪些情况不建索引&#34;&gt;&lt;a href=&#34;#哪些情况不建索引&#34; class=&#34;headerlink&#34; title=&#34;哪些情况不建索引&#34;&gt;&lt;/a&gt;哪些情况不建索引&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;表记录太少&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;经常增删改的表&lt;/p&gt;
&lt;p&gt; Why:提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据重复且分布平均的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。注意，如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;性能分析&#34;&gt;&lt;a href=&#34;#性能分析&#34; class=&#34;headerlink&#34; title=&#34;性能分析&#34;&gt;&lt;/a&gt;性能分析&lt;/h1&gt;&lt;h2 id=&#34;MySql-Query-Optimizer&#34;&gt;&lt;a href=&#34;#MySql-Query-Optimizer&#34; class=&#34;headerlink&#34; title=&#34;MySql Query Optimizer&#34;&gt;&lt;/a&gt;MySql Query Optimizer&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Mysql中有专门负责优化SELECT语句的优化器模块，主要功能:通过计算分析系统中收集到的统计信息，为客户端请求的Query提供他认为最优的执行计划（他认为最优的数据检索方式，但不见得是DBA认为是最优的，这部分最耗费时间)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当客户端向MySQL请求一条Query，命令解析器模块完成请求分类，区别出是SELECT并转发给MySQLQuery Optimizer时，MySQL Query Optimizer首先会对整条Query进行优化，处理掉一些常量表达式的预算，直接换算成常量值。并对Query中的查询条件进行简化和转换，如去掉一些无用或显而易见的条件、结构调整等。然后分析Query 中的Hint信息(如果有），看显示Hint信息是否可以完全确定该Query 的执行计划。如果没有Hint 或Hint 信息还不足以完全确定执行计划，则会读取所涉及对象的统计信息，根据Query进行写相应的计算分析，然后再得出最后的执行计划。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;MysQL常见瓶颈&#34;&gt;&lt;a href=&#34;#MysQL常见瓶颈&#34; class=&#34;headerlink&#34; title=&#34;MysQL常见瓶颈&#34;&gt;&lt;/a&gt;MysQL常见瓶颈&lt;/h2&gt;&lt;p&gt;CPU:CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候&lt;/p&gt;
&lt;p&gt;IO:磁盘I&amp;#x2F;O瓶颈发生在装入数据远大于内存容量的时候&lt;/p&gt;
&lt;p&gt;服务器硬件的性能瓶颈: top,free, iostat和vmstat来查看系统的性能状态&lt;/p&gt;
&lt;h2 id=&#34;Explain&#34;&gt;&lt;a href=&#34;#Explain&#34; class=&#34;headerlink&#34; title=&#34;Explain&#34;&gt;&lt;/a&gt;Explain&lt;/h2&gt;&lt;h3 id=&#34;作用&#34;&gt;&lt;a href=&#34;#作用&#34; class=&#34;headerlink&#34; title=&#34;作用&#34;&gt;&lt;/a&gt;作用&lt;/h3&gt;&lt;p&gt;​	查看执行计划&lt;/p&gt;
&lt;p&gt;​	使用EXPLAIN关键字可以模拟优化器执行sQL查询语句，从而知道MySQL是如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈&lt;/p&gt;
&lt;h3 id=&#34;作用范围&#34;&gt;&lt;a href=&#34;#作用范围&#34; class=&#34;headerlink&#34; title=&#34;作用范围&#34;&gt;&lt;/a&gt;作用范围&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;表的读取顺序   __ id__&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据读取操作的操作类型哪些索引可以使用  &lt;strong&gt;possible key&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;哪些索引被实际使用表之间的引用  &lt;strong&gt;key&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每张表有多少行被优化器查询    &lt;strong&gt;rows&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表之间的引用 &lt;strong&gt;table&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每张表有多少行被优化     &lt;strong&gt;rows&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用方法&#34;&gt;&lt;a href=&#34;#使用方法&#34; class=&#34;headerlink&#34; title=&#34;使用方法&#34;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;explain + SQL语句&lt;/p&gt;
&lt;h3 id=&#34;执行计划包含的信息&#34;&gt;&lt;a href=&#34;#执行计划包含的信息&#34; class=&#34;headerlink&#34; title=&#34;执行计划包含的信息&#34;&gt;&lt;/a&gt;执行计划包含的信息&lt;/h3&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2V4cGxhaW4tb3V0cHV0Lmh0bWwjZXhwbGFpbl9zZWxlY3RfdHlwZQ==&#34;&gt;MySQL ：： MySQL 5.7 参考手册 ：： 8.8.2 EXPLAIN 输出格式&lt;/span&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;列&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;JSON名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;select_id&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;标识符SELECT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;#select_type&#34;&gt;select type&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;类型SELECT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;table&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;table_name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;输出行的表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;partitions&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;partitions&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;匹配的分区&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vNS43L2VuL2V4cGxhaW4tb3V0cHV0Lmh0bWwjZXhwbGFpbi1qb2luLXR5cGVz&#34;&gt;type&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;access_type&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;联接頰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;possible keys&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;possible_keys&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;可供选择的可能索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;key&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;key&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;实际选择的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;key 丄en&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;key_length&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;所选密钥的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;与索引相比的列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;rows&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;rows&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;要检查的行的估计值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;filtered&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;filtered&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;符合某条件的记录数百分比。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Extra&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;None&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;附加信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;字段解释&#34;&gt;&lt;a href=&#34;#字段解释&#34; class=&#34;headerlink&#34; title=&#34;字段解释&#34;&gt;&lt;/a&gt;字段解释&lt;/h3&gt;&lt;h4 id=&#34;id&#34;&gt;&lt;a href=&#34;#id&#34; class=&#34;headerlink&#34; title=&#34;id&#34;&gt;&lt;/a&gt;id&lt;/h4&gt;&lt;p&gt;id相同，执行顺序由上至下&lt;/p&gt;
&lt;p&gt;id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行&lt;/p&gt;
&lt;p&gt;null 为结果集的整合&lt;/p&gt;
&lt;p&gt;总结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;id如果相同，可以认为是一组，从上往下顺序执行;&lt;/li&gt;
&lt;li&gt;id值越大，优先级越高，越先执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;select-type&#34;&gt;&lt;a href=&#34;#select-type&#34; class=&#34;headerlink&#34; title=&#34;select_type&#34;&gt;&lt;/a&gt;select_type&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;#select_type&#34;&gt;见下方附录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;type&#34;&gt;&lt;a href=&#34;#type&#34; class=&#34;headerlink&#34; title=&#34;type&#34;&gt;&lt;/a&gt;type&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;性能&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;system&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;表只有一行记录&amp;#x3D;&amp;#x3D;(等于系统表),这是const类型的特例，平时不会出现，可忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;const&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td&gt;表示该表最多有一个匹配行通过索引一次就找到了,const用于比较primary key或者&lt;br/&gt;unique索引。因为只匹配一行数据，所以很快如将主键置于where列表中&lt;br/&gt;MySQL就能将该查询转换为一个常量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;eq_ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;唯一性索引&amp;#x3D;&amp;#x3D;扫描，对于&amp;#x3D;&amp;#x3D;每个索引键，表中只有一条记录与之匹配&amp;#x3D;&amp;#x3D;。常见于主键或唯一索引扫描&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ref&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;非唯一性索引&amp;#x3D;&amp;#x3D;扫描，&amp;#x3D;&amp;#x3D;返回匹配某个单独值的所有行&amp;#x3D;&amp;#x3D;.&lt;br/&gt;本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而， &lt;br/&gt;它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;range&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td&gt;&amp;#x3D;&amp;#x3D;只检索给定范围的行,使用一个索引来选择行&amp;#x3D;&amp;#x3D;。key列显示使用了哪个索引，&lt;br/&gt;一般就是在你的where语句中出现了between、&amp;lt;、&amp;gt;、in等的查询  &lt;br/&gt;这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，&lt;br/&gt;而结束语另一点，不用扫描全部索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;index&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td&gt;联接类型与 &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/explain-output.html#jointype_all&#34;&gt;&lt;code&gt;ALL&lt;/code&gt;&lt;/a&gt; 相同，只是扫描了索引树。这以两种方式发生：&lt;code&gt;index&lt;/code&gt; &lt;br/&gt;Full Index Scan，index与ALL区别为index类型只遍历索引树。这通常比ALL快，&lt;br/&gt;因为索引文件通常比数据文件小。(也就是说虽然all和Index都是读全表，&lt;br/&gt;但index是从索引中读取的，而all是从硬盘中读的)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;all&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td&gt;将遍历全表以找到匹配的行&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;font color=red&gt;一般来说，得保证查询至少要达到 range 级别，最好能达到 ref &lt;/font&gt;&lt;/p&gt;
&lt;h4 id=&#34;possible-key&#34;&gt;&lt;a href=&#34;#possible-key&#34; class=&#34;headerlink&#34; title=&#34;possible_key&#34;&gt;&lt;/a&gt;possible_key&lt;/h4&gt;&lt;p&gt;显示可能应用在这张表中的索引，一个或多个&lt;/p&gt;
&lt;p&gt;查询涉及到的字段上若存在索引，则该索引将被列出，&lt;font color=red&gt;但不一定被查询实际使用&lt;/font&gt;。&lt;/p&gt;
&lt;h4 id=&#34;key&#34;&gt;&lt;a href=&#34;#key&#34; class=&#34;headerlink&#34; title=&#34;key&#34;&gt;&lt;/a&gt;key&lt;/h4&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;实际使用的索引。如果为NULL，则没有使用索引&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;查询中若使用了覆盖索引，则该索引仅出现在key列表中&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;引申：&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;覆盖索引：简单来说就是你查询到的字段数目和你建立索引所对应字段相同且数量相同&lt;/p&gt;
&lt;h4 id=&#34;key-len&#34;&gt;&lt;a href=&#34;#key-len&#34; class=&#34;headerlink&#34; title=&#34;key_len&#34;&gt;&lt;/a&gt;key_len&lt;/h4&gt;&lt;p&gt;​	表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，&amp;#x3D;&amp;#x3D;长度越短越好&amp;#x3D;&amp;#x3D;&lt;br&gt;​	key_len显示的值为索刳字段的最大可能长度，&lt;font color=red&gt;并非实际使用长度&lt;/font&gt;，即key_len是根据表定义计算而得，不是通过表内检索出的&lt;/p&gt;
&lt;h4 id=&#34;ref&#34;&gt;&lt;a href=&#34;#ref&#34; class=&#34;headerlink&#34; title=&#34;ref&#34;&gt;&lt;/a&gt;ref&lt;/h4&gt;&lt;p&gt;​	显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值&lt;/p&gt;
&lt;h4 id=&#34;rows&#34;&gt;&lt;a href=&#34;#rows&#34; class=&#34;headerlink&#34; title=&#34;rows&#34;&gt;&lt;/a&gt;rows&lt;/h4&gt;&lt;p&gt;​	根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数&lt;/p&gt;
&lt;h4 id=&#34;extra&#34;&gt;&lt;a href=&#34;#extra&#34; class=&#34;headerlink&#34; title=&#34;extra&#34;&gt;&lt;/a&gt;extra&lt;/h4&gt;&lt;p&gt;包含不适合在其他列中显示但十分重要的额外信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using filesort(&lt;font color=red&gt;索引本来就是排序和查找,这种等于只用了一半,而且排序本身就比较耗时&lt;/font&gt;)&lt;/p&gt;
&lt;p&gt;  说明mysq|会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。&lt;/p&gt;
&lt;p&gt;  MySQL中无法利用索引完成的排序操作称为“文件排序”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using temporay(&lt;font color=red&gt;严重影响性能&lt;/font&gt;)&lt;/p&gt;
&lt;p&gt;  使了用临时表保存中间结果,MySQL在对查询结果排序时使用临时表。&lt;/p&gt;
&lt;p&gt;  常见于排序orderby和分组查询groupby。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using  index&lt;/p&gt;
&lt;p&gt;  表示相应的select操作中使用了覆盖索引(Covering Index)，避免访问了表的数据行，效率不错!如果同时出现&lt;/p&gt;
&lt;p&gt;  using where，表明索引被用来执行索引键值的查找;&lt;/p&gt;
&lt;p&gt;  如果没有同时出现using where，表明索引用来读取数据而非执行查找动作。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;&amp;#x3D;&amp;#x3D;覆盖索引(Covering Index)&amp;#x3D;&amp;#x3D;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  理解方式：就是select的数据列只用从索引中就能够取得，不必读取数据行，MySQL可 以利用索引返回select列表中的字段，而不必根据索引再次读取数据文件,换句话说查询列要被所建的索引覆盖。&lt;/p&gt;
&lt;p&gt;  &amp;#x3D;&amp;#x3D;&lt;strong&gt;注意:&lt;/strong&gt;&amp;#x3D;&amp;#x3D;&lt;br&gt;  如果要使用覆盖索引，一-定 要注意select列表中只取出需要的列，不可   **&amp;#x3D;&amp;#x3D;Select   &lt;em&gt;&amp;#x3D;&amp;#x3D;&lt;/em&gt;*&lt;br&gt;  因为如果将所有字段一起做索引会导致索引文件过大，查询性能下降。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;索引优化&#34;&gt;&lt;a href=&#34;#索引优化&#34; class=&#34;headerlink&#34; title=&#34;索引优化&#34;&gt;&lt;/a&gt;索引优化&lt;/h1&gt;&lt;h2 id=&#34;单表优化&#34;&gt;&lt;a href=&#34;#单表优化&#34; class=&#34;headerlink&#34; title=&#34;单表优化&#34;&gt;&lt;/a&gt;单表优化&lt;/h2&gt;&lt;p&gt;准备&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE TABLE IF NOT EXISTS article (
id INT(10) UNSIGNED NOT NULL PRIMARY KEY auto_INCREMENT,
author_id INT(10) UNSIGNED NOT NULL,
category_id INT(10) UNSIGNED NOT NULL,
views INT(10) UNSIGNED NOT NULL,
comments INT(10) UNSIGNED NOT NULL,
title VARBINARY(255) NOT NULL,
content TEXT NOT NULL
);

INSERT INTO article ( author_id ,category_id ,views ,comments ,title,content ) VALUES
(1, 1, 1, 1,&amp;#39;1&amp;#39;,&amp;#39;1&amp;#39;),
(2,2, 2,2, &amp;#39;2&amp;#39;,&amp;#39;2&amp;#39;),
(1, 1,3,3, &amp;#39;3&amp;#39;,&amp;#39;3&amp;#39;);


-- ----------------------------------------------
-- 01
explain select id,author_id
from article 
where category_id =1 and comments &amp;gt;1 
order by views desc 
limit 1\G
-- 01-1
create index idx_id_article_ccv on article(category_id,comments,views);
drop index idx_id_article_ccv on article;
create index idx_id_article_cv on article(category_id,views);
drop index idx_id_article_cv on article;
-- 查看之后发现因为 &amp;gt; 1 的原因导致我们索引失效 我们直接放弃这个字段从三个改为两个字段的索引，性能更优
explain select id,author_id from article where category_id =1 and comments &amp;gt;1  order by views desc limit 1 ;
explain select id,author_id from article where category_id =1 and comments =1  order by views desc limit 1 ;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;双表优化&#34;&gt;&lt;a href=&#34;#双表优化&#34; class=&#34;headerlink&#34; title=&#34;双表优化&#34;&gt;&lt;/a&gt;双表优化&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE TABLE IF NOT EXISTS `class`(
`id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
`card`INT(10) UNSIGNED NOT NULL,
 PRIMARY KEY (id)
 );
create TABLE IF NOT EXISTS `book` (
`bookid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
`card`  INT(10) UNSIGNED NOT NULL,
 PRIMARY KEY (bookid)
);
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO class(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
INSERT INTO book(card) VALUES(FLOOR(1 + (rand() * 20)));
-- ----------------------------------------------
select * from book;
select * from class;

-- type=all
show index from book;
show index from class;

create index idx_card on  book(card);
create index idx_card on  class(card);
drop index idx_card on  book;
drop index idx_card on  class;

explain select * from  book left join class on class.card=book.card;

explain select * from  class left join book on class.card=book.card;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;左连接&lt;/strong&gt;&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818221306990-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;结果显示，在没有用索引的状况下我们的索引类型均为ALL。&lt;/p&gt;
&lt;p&gt;因为是&amp;#x3D;&amp;#x3D;左连接&amp;#x3D;&amp;#x3D;的缘故我们的&amp;#x3D;&amp;#x3D;左表是根据右表搜索行&amp;#x3D;&amp;#x3D;的，&amp;#x3D;&amp;#x3D;左边一定都有&amp;#x3D;&amp;#x3D;,所以&amp;#x3D;&amp;#x3D;右边是我们的关键点&amp;#x3D;&amp;#x3D;，一定需要建立索引。&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818221831192-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;可以看到第二行的type变为了ref，rows 也变成了优化比较明显。这是由左连接特性决定的。LEFT  JOIN条件用于确定如何从右表搜索行。所以右边是我们的关键点,-定需要建立索引。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;同理可证右连接&lt;/strong&gt;&lt;br&gt;因为RIGHTJOIN条件用于确定如何从左表搜索行，右边一定都有,所以左边是我们的关键点，一定需要建立索引。&lt;/p&gt;
&lt;h2 id=&#34;三表优化&#34;&gt;&lt;a href=&#34;#三表优化&#34; class=&#34;headerlink&#34; title=&#34;三表优化&#34;&gt;&lt;/a&gt;三表优化&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;CREATE TABLE IF NOT EXISTS phone(
    phoneid INT(10) UNSIGNED NOT null AUTO_INCREMENT,
    card INT(10) UNSIGNED NOT NULL,
    PRIMARY KEY (phoneid)
) ENGINE = INNODB;
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
INSERT INTO phone(card) VALUES(FLOOR(1 + (RAND() * 20)));
-- --------===============================================
select * from phone;

alter table class add index X (card); 
alter table phone add index Y (card); 
drop index X on class;
drop index Y on phone;

explain select * from class left join book on class.card = book.card join phone on book.card = phone.card;

show index from phone;
show index from book;
show index from class;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;初始结果&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818222159241-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;优化后&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818222905733-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;后2行的type都是ref且总rows优化很好效果不错。&lt;/p&gt;
&lt;p&gt;因此索引最好设置在需要经常查询的字段中&lt;/p&gt;
&lt;p&gt;解释：不论是class还是phone都是需要book.card来确定而且在第二个join中还需要全部扫描book所以尽管他是一个与class的左连接，理论上要给book建立一个索引，但是因为phone的关系我们倒不如给phone和class做索引，减少可以减少的，book反正要全表无所谓。&lt;/p&gt;
&lt;p&gt;总结就是&amp;#x3D;&amp;#x3D;小结果集推动大结果集&amp;#x3D;&amp;#x3D;就可以起到优化作用&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;&lt;a href=&#34;#结论&#34; class=&#34;headerlink&#34; title=&#34;[结论]&#34;&gt;&lt;/a&gt;[结论]&lt;/h2&gt;&lt;p&gt;Join语句的优化&lt;/p&gt;
&lt;p&gt;尽可能减少Join语句中的NestedL oop的循环总次数;“ 永远用小结果集驱动大的结果集”。&lt;/p&gt;
&lt;p&gt;优先优化Nested L oop的内层循环;&lt;/p&gt;
&lt;p&gt;保证Join语句中被驱动表上Join条件 字段已经被索引;&lt;/p&gt;
&lt;p&gt;当无法保证被驱动表的Join条件字段被索引且内存资源充足的前提下，不要太吝惜JoinBuffer的设置;&lt;/p&gt;
&lt;h1 id=&#34;索引失效&#34;&gt;&lt;a href=&#34;#索引失效&#34; class=&#34;headerlink&#34; title=&#34;索引失效&#34;&gt;&lt;/a&gt;索引失效&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;全值匹配我最爱&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;​	每个索引字段都存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;最佳左前缀法则(&amp;#x3D;&amp;#x3D;where条件&amp;#x3D;&amp;#x3D;)&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;​	如果索引了多列(&amp;#x3D;&amp;#x3D;3个及以上&amp;#x3D;&amp;#x3D;)，要遵守最左前缀法则。指的是查询&amp;#x3D;&amp;#x3D;从索引的最左前列开始&amp;#x3D;&amp;#x3D;并且&amp;#x3D;&amp;#x3D;不跳过索引中的列&amp;#x3D;&amp;#x3D;。&lt;br&gt;​	简单来说就是&amp;#x3D;&amp;#x3D;每个字段的带头大哥不能丢，中间兄弟不能断&amp;#x3D;&amp;#x3D; &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;drop table if exists tbl_user;
create table if not exists tbl_user(
id int(10) primary key auto_increment,
name varchar(20) not null,
age int(10),
    sex int(2) check( sex in (1,2)),
email varchar(20)
);
-- 添加测试数据
delete from  tbl_user;
insert into tbl_user(name,age,sex,email) values 
(&amp;#39;aa11aa&amp;#39;,12,1,&amp;#39;123@qq.com&amp;#39;),(&amp;#39;aa22aa&amp;#39;,22,2,&amp;#39;456@qq.com&amp;#39;),(&amp;#39;aa33aa&amp;#39;,32,2,&amp;#39;789@qq.com&amp;#39;);
(&amp;#39;aa11aa&amp;#39;,22,1,&amp;#39;123@qq.com&amp;#39;),(&amp;#39;aa22aa&amp;#39;,22,1,&amp;#39;456@qq.com&amp;#39;),(&amp;#39;aa33aa&amp;#39;,32,1,&amp;#39;789@qq.com&amp;#39;);
-- 走索引且key_len越来越长
explain select * from tbl_user where name = &amp;#39;aa11aa&amp;#39;;
explain select * from tbl_user where name = &amp;#39;aa11aa&amp;#39; and age = 11;
explain select * from tbl_user where name = &amp;#39;aa11aa&amp;#39; and age = 11 and sex = 1;

-- 走索引
explain select * from tbl_user where name = &amp;#39;aa11aa&amp;#39;  and sex = 1;
-- 不走索引带头大哥没了
explain select * from tbl_user where age = 11 and sex = 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;p&gt;不在索引列上做任何操作(计算、函数(自动or手动)类型转换)，会导致索引失效而转向全表扫描 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;存储引擎 &amp;#x3D;&amp;#x3D;不能使用索引中范围条件&amp;#x3D;&amp;#x3D;&lt;font color=red&gt;右边的列&lt;/font&gt; (&amp;#x3D;&amp;#x3D;自己是最后一个&amp;#x3D;&amp;#x3D;)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 范围条件
alter table tbl_user add index idx_tbl_user_age_sex_email (age,sex,email);
-- 全部走了索引
explain select age from tbl_user ;
explain select age,sex from tbl_user ;
explain select age,sex,email from tbl_user ;
-- 部分走了索引
explain select age from tbl_user where sex &amp;gt; 1;
explain select age,sex from tbl_user where sex &amp;gt; 1;
explain select age,sex,email from tbl_user where sex &amp;gt; 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;尽量使用覆盖索引&amp;#x3D;&amp;#x3D;(只访问索引的查询(索引列和查询列一致))， 减少 select  *&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mysql在&amp;#x3D;&amp;#x3D;使用不等于(!&amp;#x3D;或者&amp;lt;&amp;gt; )&amp;#x3D;&amp;#x3D;的时候&amp;#x3D;&amp;#x3D;无法使用索引&amp;#x3D;&amp;#x3D;会导致&amp;#x3D;&amp;#x3D;全表扫描团&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;is null ,is not null也无法使用索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;like&amp;#x3D;&amp;#x3D;以通配符开头(&amp;#x3D;&amp;#x3D;’%abc…)mysq|&amp;#x3D;&amp;#x3D;索引失效&amp;#x3D;&amp;#x3D;会变成全表扫描的操作。(&amp;#x3D;&amp;#x3D;放右边可以&amp;#x3D;&amp;#x3D;)&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;问题:解决like’%字符串%’时索引不被使用的方法??&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 建立索引
alter table tbl_user add index idx_tbl_user_name_age (name,age);

-- 测试
select * from tbl_user;
-- 走索引
explain select id from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select name from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select age from tbl_user where name like &amp;#39;%aa%&amp;#39;;
-- 走索引
explain select id,name from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select id,name,age from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select name,age from tbl_user where name like &amp;#39;%aa%&amp;#39;;
-- 不走索引
explain select * from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select id,name,email from tbl_user where name like &amp;#39;%aa%&amp;#39;;
explain select id,name,age,email from tbl_user where name like &amp;#39;%aa%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;字符串不加单引号索引失效&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;少用or，用它来连接时会索引失效&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;面试题&#34;&gt;&lt;a href=&#34;#面试题&#34; class=&#34;headerlink&#34; title=&#34;面试题&#34;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- indexc1234
select * from test03 where c1=&amp;#39;a1&amp;#39; and c2=&amp;#39;a2&amp;#39; and c5=&amp;#39;a5&amp;#39; order by c3,c2;
select * from test03 where c1=&amp;#39;a1&amp;#39; and c5=&amp;#39;a5&amp;#39; order by c3,c2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;这两种SQL的区别在哪？&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;都走了索引，但是在第2条SQL会产生文件的内排序，为什么呢？这是因为本来应该是自动的顺序排列，即c1,c2,c3…..默认，但是我们写了 order by 所以产生了内排。但是同样第1条SQL为什么没有呢？因为我们在where 条件中使用了他让他固定成了一个常量 constant ，即 c3虽然一直在动，但是c2已经固定没有了排序的过程所以不会产生内排的步骤&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;drop table if exists t1;
create table t1(
    id int(10) primary key auto_increment,
    c1 int(10),
    c2 int(10),
    c3 int(10),
    c4 int(10),
    c5 int(10)
);
insert into t1(c1,c2,c3,c4,c5) values
(1,1,1,1,1)
(2,2,2,2,2),
(3,3,3,3,3),
(4,4,4,4,4),
(5,5,5,5,5);

alter table t1 add index idx_c1234 (c1,c2,c3,c4); 
explain select * from t1 where c1 =1 and c2 = 1 and c4 = 1 ORDER BY c3,c2 desc;
explain select * from t1 where c1 =1 and c4 = 1 ORDER BY c3,c2 ;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818213253106-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;&lt;em&gt;&lt;strong&gt;同理论证gourp by&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分组之前比排序，可能会产生临时表的产生&lt;/li&gt;
&lt;/ul&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220818213434892-1660960902143.png&#34; class=&#34;&#34;&gt;




&lt;h2 id=&#34;建议&#34;&gt;&lt;a href=&#34;#建议&#34; class=&#34;headerlink&#34; title=&#34;建议&#34;&gt;&lt;/a&gt;建议&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对于单键索引，尽量选择针对当前query过滤性更好的索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在选择组合索引的时候，尽量选择可以能够包含当前query中的where字句中更多字段的索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽可能通过分析统计信息和调整query的写法来达到选择合适索引的目的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;口诀&#34;&gt;&lt;a href=&#34;#口诀&#34; class=&#34;headerlink&#34; title=&#34;口诀&#34;&gt;&lt;/a&gt;口诀&lt;/h2&gt;&lt;p&gt;全值匹配我最爱	，最左前缀要遵守;&lt;/p&gt;
&lt;p&gt;帶头大哥不能死	，中间兄弟不能断;&lt;/p&gt;
&lt;p&gt;索引列上少计算	，范围之后全失效;&lt;/p&gt;
&lt;p&gt;LIKE百分写最右	，覆盖索引不写星;&lt;/p&gt;
&lt;p&gt;不等空值还有or     ，索引失效要少用;&lt;/p&gt;
&lt;p&gt;VAR的引号不可丢，SQL高级也不难 !&lt;/p&gt;
&lt;div name=查询截取分析 &gt;


&lt;h1 id=&#34;查询截取分析&#34;&gt;&lt;a href=&#34;#查询截取分析&#34; class=&#34;headerlink&#34; title=&#34;查询截取分析&#34;&gt;&lt;/a&gt;查询截取分析&lt;/h1&gt;&lt;h2 id=&#34;内容：&#34;&gt;&lt;a href=&#34;#内容：&#34; class=&#34;headerlink&#34; title=&#34;内容：&#34;&gt;&lt;/a&gt;内容：&lt;/h2&gt;&lt;p&gt;​	查询优化&lt;/p&gt;
&lt;p&gt;​	慢查询日志&lt;/p&gt;
&lt;p&gt;​	批量数据脚本&lt;/p&gt;
&lt;p&gt;​	show profile&lt;/p&gt;
&lt;p&gt;​	全局查询日志&lt;/p&gt;
&lt;h2 id=&#34;工作一般流程-分析过程&#34;&gt;&lt;a href=&#34;#工作一般流程-分析过程&#34; class=&#34;headerlink&#34; title=&#34;工作一般流程(分析过程)&#34;&gt;&lt;/a&gt;工作一般流程(分析过程)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;观察，至少跑1天，看看生产的慢SQL情况。&lt;/li&gt;
&lt;li&gt;开启慢查询日志，设置阙值，比如超过5秒钟的就是慢SQL，并将它抓取出来。&lt;/li&gt;
&lt;li&gt;explain+慢SQL分析&lt;/li&gt;
&lt;li&gt;show profile&lt;/li&gt;
&lt;li&gt;运维经理or DBA，进行SQL数据库服务器的参数调优。。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;总结&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;慢查询的开启并捕获&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;explain+慢SQL分析&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;show profile查询SQL在Mysql服务器里面的执行细节和生命周期情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL数据库服务器的参数调优。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;查询优化&#34;&gt;&lt;a href=&#34;#查询优化&#34; class=&#34;headerlink&#34; title=&#34;查询优化&#34;&gt;&lt;/a&gt;查询优化&lt;/h2&gt;&lt;h3 id=&#34;永远小表驱动大表-即小的数据集驱动大的数据集&#34;&gt;&lt;a href=&#34;#永远小表驱动大表-即小的数据集驱动大的数据集&#34; class=&#34;headerlink&#34; title=&#34;永远小表驱动大表,即小的数据集驱动大的数据集&#34;&gt;&lt;/a&gt;永远小表驱动大表,即小的数据集驱动大的数据集&lt;/h3&gt;&lt;p&gt;小表驱动大表，类似嵌套循环 Nested Loop&lt;/p&gt;
&lt;h4 id=&#34;Case-1：&#34;&gt;&lt;a href=&#34;#Case-1：&#34; class=&#34;headerlink&#34; title=&#34;Case 1：&#34;&gt;&lt;/a&gt;Case 1：&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;java&#34;&gt;for(int i =5;;)&amp;#123;
    for(int j = 1000;;)&amp;#123;
        
    &amp;#125;
&amp;#125;
for(int i =1000;;)&amp;#123;
    for(int j = 5;;)&amp;#123;
        
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;两个简单的 for循环，但是在SQL中我们就应该选择 第一个循环而不是第二个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小的循环在外层,表连接需要5次&lt;/li&gt;
&lt;li&gt;大的循环在外层,表连接需要1000次,浪费数据库资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总结:&lt;/strong&gt; 小表驱动大表的主要目的是通过减少表连接创建的次数,加快查询速度.&lt;/p&gt;
&lt;h4 id=&#34;Case-2&#34;&gt;&lt;a href=&#34;#Case-2&#34; class=&#34;headerlink&#34; title=&#34;Case 2&#34;&gt;&lt;/a&gt;Case 2&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select * from A where  id in (select id from B)
-- 等价于
for select id from B
for select * from A where A.id = B.id
for（B)&amp;#123;
    for(A)&amp;#123;
        A.id=B.id
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当B表的数据集小于A表的数据集时，用in优于exists。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select * from A where exists (select 1 from B where B.id = A.id)
-- 等价于
for select* from A
for select * from B where B.id = A.id
for（A)&amp;#123;
    for(B)&amp;#123;
        A.id=B.id
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当A表的数据集小于B表的数据集时，用exists优于in。&lt;/p&gt;
&lt;p&gt;注意:A表与B表的ID字段应建立索引。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EXISTS&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：SELECT .….. FROM table WHERE EXISTS (subquery)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	该语法可以理解为。&amp;#x3D;&amp;#x3D;将主查询的数据，放到子查询中做条件验证，根据验证结果（TRUE或FALSE)来决定主查询的数据结果是否得以保留&amp;#x3D;&amp;#x3D;。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提示&lt;ol&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;EXSTS (stbuey)只返回TRUE或FALSE，因此子查询中的 SELECT *也可以是 SELECT  1或是 SELECT ‘X’。官方说法是：实际执行时会忽略SELECT清单，因此没有区别&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;EXSTS子查询的实际执行过程可能经过了优化而不是我们理解上的逐条对比，如果担忧效率问题，可进行实际检验以确定是否有效率问题。&lt;/li&gt;
&lt;li&gt;EXISTS子查询往往也可以用条件表达式、其他子查询或者JOIN来替代，&amp;#x3D;&amp;#x3D;何种最优需要具体问题具体分析&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为排序使用索引OrdeBy优化&#34;&gt;&lt;a href=&#34;#为排序使用索引OrdeBy优化&#34; class=&#34;headerlink&#34; title=&#34;为排序使用索引OrdeBy优化&#34;&gt;&lt;/a&gt;为排序使用索引OrdeBy优化&lt;/h3&gt;&lt;p&gt;MySQL支持&amp;#x3D;&amp;#x3D;二种方式的排序&amp;#x3D;&amp;#x3D;，&amp;#x3D;&amp;#x3D;FileSort&amp;#x3D;&amp;#x3D;和&amp;#x3D;&amp;#x3D;Index&amp;#x3D;&amp;#x3D;，&amp;#x3D;&amp;#x3D;Index效率高。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;它指MySQL扫描索引本身完成排序。FileSort方式效率较低。&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;ORDER BY满足两情况，会使用Index方式排序：&lt;/font&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ORDER BY语句使用索引最左前列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用where 字句与Order By字句条件列组合满足&amp;#x3D;&amp;#x3D;索引最左前列&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建议：&lt;/p&gt;
&lt;p&gt;​	尽量使用Index方式排序，避免使用FileSort方式排序尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;如果不在索引列上，filesort有两种算法：mysql就要启动双路排序和单路排序&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;em&gt;双路排序&lt;/em&gt;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MySQL 4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据，&lt;br&gt;读取行指针和orderby列，对他们进行排序，然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出&lt;/p&gt;
&lt;p&gt;从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段。&lt;/p&gt;
&lt;p&gt;取一批数据， 要对磁盘进行了两次扫描，众所周知，I\O是很耗时的，所以在mysql4.1之后，出现了第二种改进的算法，就是单路排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;em&gt;单路排序&lt;/em&gt;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序I0,但是它会使用更多的空间，因为它把每一行都保存在内存中了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结论：&lt;/p&gt;
&lt;p&gt;​	&lt;strong&gt;由于单路是后出的，总体而言好过双路!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;引申出来的问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	在sort_buffer中，方法B比方法A要多占用很多空间，因为方法B是把所有字段都取出,所以有可能取出的数据的总大小超出了sort_buffer的容量，导致每次只能取sort_buffer容量大小的数据，进行排序（创建tmp文件，多路合并〉，排完再取取 sort_buffer 容量大小，再排……从而多次I&amp;#x2F;O。本来想省一次I&amp;#x2F;O操作，反而导致了大量的I&amp;#x2F;O操作，反而得不偿失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;优化策略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增大sort_buffer_size参数的设置&lt;/li&gt;
&lt;li&gt;增大max_length_for_sort_data参数的设置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=red&gt;提高Order By的速度&lt;/font&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Order by时select是一个大忌只Query需要的字段，这点非常重要。在这里的影响是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当Query的字段共小总和小于max_length_for_sort_data而且排序字段不是TEXTIBLOB类型时，会用改进后的算法——单路排序，否则用老算法——多路排序。&lt;/li&gt;
&lt;li&gt;两种算法的数据都有可能超出sort_buffer的容量，超出之后，会创建tmp文件进行合并排序，导致多次IO，但是用单路排序算法的风险会更大一些,所以要提高sort_buffer_size.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尝试提高sort_buffer_size&lt;br&gt; 不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尝试提高max_length_for_sort_data&lt;br&gt; 提高这个参数，会增加用改进算法的概率。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，明显症状是高的磁盘I&amp;#x2F;O活动和低的处理器使用率.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Group-By&#34;&gt;&lt;a href=&#34;#Group-By&#34; class=&#34;headerlink&#34; title=&#34;Group By&#34;&gt;&lt;/a&gt;Group By&lt;/h3&gt;&lt;p&gt; group by实质是&amp;#x3D;&amp;#x3D;先排序&amp;#x3D;&amp;#x3D;后进行&amp;#x3D;&amp;#x3D;分组&amp;#x3D;&amp;#x3D;，&amp;#x3D;&amp;#x3D;遵照索引建的最佳左前缀&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;当无法使用索引列，增大max_length_for_sort_data参数的设置+增大sort_buffer_size参数的设置&lt;/p&gt;
&lt;p&gt;where高于having，能写在where限定的条件就不要去having限定了。&lt;/p&gt;
&lt;p&gt;其余均和Order by相同&lt;/p&gt;
&lt;h2 id=&#34;慢查询日志&#34;&gt;&lt;a href=&#34;#慢查询日志&#34; class=&#34;headerlink&#34; title=&#34;慢查询日志&#34;&gt;&lt;/a&gt;慢查询日志&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句, 具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10秒以上的语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由他来查看哪些SQL超出了我们的最大忍耐时间值，比如一条sql执行超过5秒钟，我们就算慢SQL，希望能收集超过5秒的sql，结合之前explain进行全面分析。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;操作说明&#34;&gt;&lt;a href=&#34;#操作说明&#34; class=&#34;headerlink&#34; title=&#34;操作说明&#34;&gt;&lt;/a&gt;操作说明&lt;/h3&gt;&lt;p&gt;&lt;font color=red&gt;默认情况下，MySQL数据库没有开启慢查询日志&lt;/font&gt;，需要我们手动来设置这个参数。&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;当然，如果不是调优需要的话，一般不建议启动该参数&lt;/font&gt;，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件&lt;/p&gt;
&lt;h3 id=&#34;查看是否开启及开启&#34;&gt;&lt;a href=&#34;#查看是否开启及开启&#34; class=&#34;headerlink&#34; title=&#34;查看是否开启及开启&#34;&gt;&lt;/a&gt;查看是否开启及开启&lt;/h3&gt;&lt;p&gt;默认：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show variables like &amp;#39;%slow_query_log%&amp;#39;; -- OFF关闭
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819170427373-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;开启&lt;/p&gt;
&lt;p&gt;开启了慢查询日志只对当前数据库生效，如果MySQL重启后则会失效。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;set global slow_query_log=1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要永久生效，就必须修改配置文件my.cnf（其它系统变量也是如此)&lt;/p&gt;
&lt;p&gt;修改my.cnf文件，[mysqld]下增加或修改参数&lt;br&gt;slow_query_log和slow_query_log_file后，然后重启MySQL服务器。也即将如下两行配置进my.cnf文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;slow_query_log =1
slow_query_log_file=/var/lib/mysqlslow-slow.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关于慢查询的参数slow_query_log_file，它指定慢查询日志文件的存放路径，&lt;font color=red&gt;系统默认会给一个缺省的文件host_name-slow.log&lt;/font&gt;(如果没有指定参数slow_query_log_file的话)&lt;/p&gt;
&lt;h3 id=&#34;那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢&#34;&gt;&lt;a href=&#34;#那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢&#34; class=&#34;headerlink&#34; title=&#34;那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢?&#34;&gt;&lt;/a&gt;那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢?&lt;/h3&gt;&lt;p&gt;这个是由参数long_query_time控制，默认情况下long_query_time的值为10秒，命令:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHoW VARIABLES LIKE &amp;#39;long_query_time%;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819171026557-1660960902143.png&#34; class=&#34;&#34;&gt;



&lt;p&gt;可以使用命令修改，也可以在my.cnf参数里面修改。&lt;/p&gt;
&lt;p&gt;假如运行时间正好等于long_query_time的情况，并不会被记录下来。也就是说，在mysql源码里是&lt;font color=red&gt;判断大于long_query_time，而非大于等于&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&#34;Case&#34;&gt;&lt;a href=&#34;#Case&#34; class=&#34;headerlink&#34; title=&#34;Case&#34;&gt;&lt;/a&gt;Case&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;查看当前多少秒算慢&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHOW VARIABLES LIKE &amp;#39;long_query_time%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;设置慢的阙值时间&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;set global long_query_time=3;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819171344450-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;为什么设置后看不出变化?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要&amp;#x3D;&amp;#x3D;重新连接或新开一个会话&amp;#x3D;&amp;#x3D;才能看到修改值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SHow VARIABLES LIKE &amp;#39;long _query_time%&amp;#39;;

show global variables like &amp;#39;long_query_time&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;记录慢SQL并后续分析R&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select sleep(4);-- 睡4s
-- 查看日志
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819171955968-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;查询当前系统中有多少条慢查询记录冒R&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show global status like &amp;#39;%Slow_queries%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819172043683-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;h3 id=&#34;配置版&#34;&gt;&lt;a href=&#34;#配置版&#34; class=&#34;headerlink&#34; title=&#34;配置版&#34;&gt;&lt;/a&gt;配置版&lt;/h3&gt;&lt;p&gt;【mysqld】下配置:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;# 开启查询日志
slow_query_log=1;
# 日志地址
slow_query_log_file=/var/lib/mysql/atguigu-slow.log
# 最大的查询时间，超过就算是慢查询
long_query_time=3;
# 日志输出
log_output=FILE
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;日志分析工具—mysqldumpslow&#34;&gt;&lt;a href=&#34;#日志分析工具—mysqldumpslow&#34; class=&#34;headerlink&#34; title=&#34;日志分析工具—mysqldumpslow&#34;&gt;&lt;/a&gt;日志分析工具—mysqldumpslow&lt;/h3&gt;&lt;p&gt;​	在生产环境中，如果要手工分析日志，查找、分析SQL，显然是个体力活，MySQL提供了日志分析工具mysqldumpslow &lt;/p&gt;
&lt;p&gt;查看mysqldumpslow的帮助信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;mysqldumpslow --help
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;常用参数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;注解&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;s&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是表示按照何种方式排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;c&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;访问次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;l&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;锁定时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;r&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;返回记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;t&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;查询时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;al&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均锁定时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ar&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均返回记录数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;at&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;平均查询时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;t&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;即为返回前面多少条的数据;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;g&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;后边搭配一个正则匹配模式，大小写不敏感的;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;得到返回记录集最多的10个SQL
mysqldumpslow -s r -t 10 /var/lib/mysql/atguigu-slow.log

得到访问次数最多的10个SQL
mysqldumpslow -s c -t 10 /var/lib/mysql/atguigu-slow.log

得到按照时间排序的前10条里面含有左连接的查询语句
mysqldumpslow -s t -t 10 -g &amp;quot;left join&amp;quot;lar/lib/mysql/atguigu-slow.log

另外建议在使用这些命令时结合|和more使用，否则有可能出现爆屏情况
mysqldumpslow -s r -t 10 /ar/lib/mysql/atguigu-slow.log | more
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;批量数据脚本&#34;&gt;&lt;a href=&#34;#批量数据脚本&#34; class=&#34;headerlink&#34; title=&#34;批量数据脚本&#34;&gt;&lt;/a&gt;批量数据脚本&lt;/h2&gt;&lt;p&gt;1.建表(dept,emp)&lt;/p&gt;
&lt;p&gt;2.设置参数log_bin_trust_function_creatorst&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 创建函数，假如报错:This function has none of DETERMINISTIC

-- 由于开启过慢查询日志，因为我们开启了bin-log,我们就必须为我们的function指定一个参数。
show variables like &amp;#39;log_bin_trust_function_creators&amp;#39;;
set global log_bin_trust_function_creators=1;
-- 这样添加了参数以后，如果mysqld重启，上述参数又会消失，永久方法:
I
windows下my.ini[mysqld]加上log_bin_trust_function_creators=1
linux下letc/my.cnf 下my.cnf[mysqld]加上log_bin_trust_function_creators=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.创建函数,保证每条数据都不同&lt;/p&gt;
&lt;p&gt;随机产生字符串&lt;/p&gt;
&lt;p&gt;随机产生部门编号&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;DELIMITER $$
CREATE FUNCTION rand_string(n lNT) RETURNS VARCHAR(255）
BEGIN
    DECLARE chars_str VARCHAR(100) DEFAULT &amp;#39;abcdefghijlklmnoparstuvwxyABCDEFJHIJKLMNOPQRSTUWWXYZ&amp;#39;;
    DECLARE return_str VARCHAR(255) DEFAULT &amp;#39;&amp;#39; ;
    DECLARE i INT DEFAULT 0;
    WHILE i &amp;lt; n DO
        SET return_str =CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1);
        SET i =i+ 1;
    END WHILE;
    RETURN return_str;
END
$$
DFLIMITER ;
                               
delimiter $$
CREATE FUNCTLON rand_num( )RETURNS INT(5)
BEGIN
    DECLARE i int default 0;
    SET i = FLOOR(100+RAND()*10);
    RETURN i;
END 
delimiter $$
DFLIMITER ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.创建存储过程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;创建往emp表中插入数据的存储过程
DELIMITER $$
CREATE PROCEDURE insert_emp(IN START INT(10),IN max_num INT(10))
BEGIN
    DECLARE i INT DEFAULT 0;
    #set autocomnit = 0 把autocommit设置成0
    SET autocommit =0;
    REPEAT
    SET i=i+ 1;
    INSERT INTo emp(empno，ename , job ,mgr ,hiredate ,sal ,comm ,deptno ) values((SEAR+i) ,rand_string(6), &amp;#39;sAESLsy&amp;#39;,0001,now(),1000,0,10);
    UNTIL i = max_num;
    END REPEAT;
    COMMIT;
END 
$$
DFLIMITER ;

创建往dept表中插入数据的存储过程
DFLIMITER $$
CREATE PROCEDURE insert_dept(IN START INT(10),IN max_num lNT(10))
BEGIN
    DECLARE i lNT DEFAULT 0;
    SET autocommit = 0;
    REPEAT
    SETi= i+1;
    INSERT INTO dept (deptno ,dname,loc ) VALUES((START+i) ,rand_string(10),rand_string(8);
    UNTIL i = max_num;
    END REPEAT;COMMIT;
END $$
DFLIMITER ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;5.调用存储过程&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;call insert_emp(10001,50000);
call inser_dept(100,10);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Show-profile&#34;&gt;&lt;a href=&#34;#Show-profile&#34; class=&#34;headerlink&#34; title=&#34;Show profile&#34;&gt;&lt;/a&gt;Show profile&lt;/h2&gt;&lt;p&gt;是什么:是mysql提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于SQL的调优的测量&lt;/p&gt;
&lt;p&gt;官网: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Rldi5teXNxbC5jb20vZG9jL3JlZm1hbi81LjUvZW4vc2hvdy1wcm9maWxlLmh0bWw=&#34;&gt;http://dev.mysql.com/doc/refman/5.5/en/show-profile.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;默认情况下，参数处于关闭状态，并保存最近15次的运行结果&lt;/p&gt;
&lt;p&gt;分析步骤&lt;/p&gt;
&lt;p&gt;1.是否支持，看看当前的mysql版本是否支持&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show variables like &amp;#39;profiling&amp;#39;;
-- 默认是关闭，使用前需要开启
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2.开启功能，默认是关闭，使用前需要开启&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;set profiling=on;
show variables like &amp;#39;profiling&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.运行SQL&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;select * from emp;

select * from emp e join dept d on e.deptno =d.deptno;

select * from emp group by id%10 limit 1500;

select * from emp group by id%20 order by 5;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.查看结果，show profiles;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show profiles;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819180736190-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;5.诊断SQL， &lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show profile cpu,block io for query 3;-- 最后数字是上一步前面的SQL的Id;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;常用参数&lt;/th&gt;
&lt;th&gt;注释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;ALL&lt;/td&gt;
&lt;td&gt;显示所有的开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;BLOCK IO&lt;/td&gt;
&lt;td&gt;显示块IO相关开销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CONTEXT SWITCHES&lt;/td&gt;
&lt;td&gt;上下文切换相关开销&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;CPU&lt;/td&gt;
&lt;td&gt;显示CPU相关开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;IPC&lt;/td&gt;
&lt;td&gt;显示发送和接收相关开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MEMORY&lt;/td&gt;
&lt;td&gt;显示内存相关开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PAGE FAULTS&lt;/td&gt;
&lt;td&gt;显示页面错误相关开销信息|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SOURCE&lt;/td&gt;
&lt;td&gt;显示和Source_function，Source_file，Source_line相关的开销信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SWAPS&lt;/td&gt;
&lt;td&gt;显示交换次数相关开销的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819182050124-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;6.日常开发需要注意的结论&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;converting HEAP to MyISAM     查询结果太大，内存都不够用了往磁盘上搬了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating tmp table       创建临时表&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拷贝数据到临时表&lt;/li&gt;
&lt;li&gt;用完再删除&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copying to tmp table on disk      把内存中临时表复制到磁盘，危险!! !&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;locked    (死锁)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;全局查询日志&#34;&gt;&lt;a href=&#34;#全局查询日志&#34; class=&#34;headerlink&#34; title=&#34;全局查询日志&#34;&gt;&lt;/a&gt;全局查询日志&lt;/h2&gt;&lt;p&gt;&lt;font color=red&gt;&lt;strong&gt;永远不要在生产环境开启这个功能&lt;/strong&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;配置启用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sh&#34;&gt;#在mysql的my.cnf中，设置如下:
#开启
general_log=1
#记录日志文件的路径
general_log_file=/path/logfile
#输出格式
log_output=FILE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编码启用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 命令
set global general_log=1;
set global log_output=&amp;#39;TABLE&amp;#39;;

-- 此后，你所编写的sql语句，将会记录到mysql库里的general_log表，可以用下面的命令查看
select * from mysql.general_lpg;
&lt;/code&gt;&lt;/pre&gt;
&lt;div name=MySQL的锁机制&gt;


&lt;h1 id=&#34;MySQL锁机制&#34;&gt;&lt;a href=&#34;#MySQL锁机制&#34; class=&#34;headerlink&#34; title=&#34;MySQL锁机制&#34;&gt;&lt;/a&gt;MySQL锁机制&lt;/h1&gt;&lt;p&gt;概述：锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源〈如CPU、RAM、V&amp;#x2F;O等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。[&lt;/p&gt;
&lt;p&gt;打个比方，我们到淘宝上买一件商品，商品只有一件库存，这个时候如果还有另一个人买，那么如何解决是你买到还是另一个人买到的问题?&lt;/p&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819183900802-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;这里肯定要用到事务，我们先从库存表中取出物品数量，然后插入订单，付款后插入付款表信息，然后更新商品数量。在这个过程中，使用锁可以对有限的资源进行保护，解决隔离和并发的矛盾。&lt;/p&gt;
&lt;h2 id=&#34;锁的分类&#34;&gt;&lt;a href=&#34;#锁的分类&#34; class=&#34;headerlink&#34; title=&#34;锁的分类&#34;&gt;&lt;/a&gt;锁的分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;从对数据操作的粒度分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表锁(偏读，解决幻读(一个事务中对数据添加、删除，并且多次查询，每次结果不都相同))&lt;/li&gt;
&lt;li&gt;行锁(偏写，解决重复读(一个事务中对一条数据多次修改，并且多次查询，每次结果不都相同))&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;从对数据操作的类型（读\写)分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;读锁(共享锁)&amp;#x3D;&amp;#x3D;：针对同一份数据，多个读操作可以同时进行而不会互相影响。&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;写锁(排它锁)&amp;#x3D;&amp;#x3D;：当前写操作没有完成前，它会阻断其他写锁和读锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;读锁-案例介绍&#34;&gt;&lt;a href=&#34;#读锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;读锁(案例介绍)&#34;&gt;&lt;/a&gt;读锁(案例介绍)&lt;/h2&gt;&lt;p&gt;准备：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create table mylock(
id int not null primary key auto_increment,
name varchar(20)
)engine myisam;

insert into mylock(name) values(&amp;#39;a&amp;#39;);
insert into mylock(name) values(&amp;#39;b&amp;#39;);
insert into mylock(name) values(&amp;#39;c&amp;#39;);
insert into mylock(name) values(&amp;#39;d&amp;#39;);
insert into mylock(name) values(&amp;#39;e&amp;#39;);
select * from mylock;

CREATE TABLE `book` ( 
    `bookid` int(10) unsigned NOT NULL AUTO_INCREMENT,
    `card` int(10) unsigned NOT NULL,
    PRIMARY KEY (`bookid`),
    KEY `idx_card` (`card`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
insert into book(card) values(1);
insert into book(card) values(2);
insert into book(card) values(3);
insert into book(card) values(4);
insert into book(card) values(5);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- 手动添加表锁
-- 语法：lock table Table_1_Name  read/write,Table_2_name read/write,..;
lock table mylock read ;

-- 查看锁
show open tables;

-- 释放锁
unlock tables;
    
select * from mylock;	
-- 读锁没有释放之前这个回话只能读取这个读锁表，其他回话可以查询或者更新未锁定的表
-- 其他回话插入或者更新表的时候会进入阻塞状态，直至锁的释放
update mylock set name = &amp;#39;aa&amp;#39; where id =1;
select * from book;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;写锁-案例介绍&#34;&gt;&lt;a href=&#34;#写锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;写锁(案例介绍)&#34;&gt;&lt;/a&gt;写锁(案例介绍)&lt;/h2&gt;&lt;p&gt;Session 1(产生锁)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;lock table mylock write;

select * from mylock; --ok

update mylock set name =&amp;#39;aa&amp;#39; where  id =1; -- ok

select * from book;
/*
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &amp;#39;uplock tables&amp;#39; at line 1
*/

unlock tables; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Session 2&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt; select * from mylock; -- block 阻塞住了 ,直至锁的释放才看到了
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;读写结论&#34;&gt;&lt;a href=&#34;#读写结论&#34; class=&#34;headerlink&#34; title=&#34;读写结论&#34;&gt;&lt;/a&gt;读写结论&lt;/h2&gt;&lt;p&gt;MyISAM在执行查询语句〈SELECT)前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。&lt;/p&gt;
&lt;p&gt;MySQL的表级锁有两种模式:&lt;/p&gt;
&lt;p&gt;​	表共享读锁(Table Read Lock)&lt;/p&gt;
&lt;p&gt;​	表独享读锁(Table Write Lock)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;lock_type&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;是否共享&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;读锁&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;写锁&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;读锁&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;写锁&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;是&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;否&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;结论:&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;结合上表，所以对MyISAM表进行操作，会有以下情况:&lt;/p&gt;
&lt;p&gt;1、对MyISAM表的读操作〈加读锁)，不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。&lt;/p&gt;
&lt;p&gt;2、对MyISAM表的写操作（加写锁)，会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;strong&gt;简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞&lt;/strong&gt;。&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;表锁-案例介绍&#34;&gt;&lt;a href=&#34;#表锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;表锁(案例介绍)&#34;&gt;&lt;/a&gt;表锁(案例介绍)&lt;/h2&gt;&lt;p&gt;【如何分析表锁定】&lt;br&gt;可以通过检查table_locks_waited和table_locks_immedlate状态变量来分析系统上的表锁定:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show status like &amp;#39;table%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819205444832-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;这里有两个状态变量记录MySQL内部表级锁定的情况，两个变量说明如下:&lt;/p&gt;
&lt;p&gt;&lt;font color=blue&gt;T&lt;strong&gt;able_locks_immediate:产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加1&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=blue&gt;&lt;strong&gt;Table_locks_waited:出现表级锁定争用而发生等待的次数(不能立即获取锁的次数，每等待一次锁值加1),&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;此值高则说明存在着较严重的表级锁争用情况;&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;&lt;strong&gt;此外，&lt;u&gt;&lt;em&gt;&lt;strong&gt;Myisam&lt;/strong&gt;&lt;/em&gt;&lt;/u&gt;的读写锁调度是写优先，这也是&lt;u&gt;&lt;em&gt;&lt;strong&gt;myisam&lt;/strong&gt;&lt;/em&gt;&lt;/u&gt;不适合做写为主表的引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h2 id=&#34;行锁-案例介绍&#34;&gt;&lt;a href=&#34;#行锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;行锁(案例介绍)&#34;&gt;&lt;/a&gt;行锁(案例介绍)&lt;/h2&gt;&lt;h3 id=&#34;特点&#34;&gt;&lt;a href=&#34;#特点&#34; class=&#34;headerlink&#34; title=&#34;特点&#34;&gt;&lt;/a&gt;特点&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;​	偏向InnoDB存储引擎，开销大，加锁慢;会出现死锁;锁定粒度最小，发生锁冲突的概率最低,并发度也最高。&lt;/p&gt;
&lt;p&gt;​	InnoDB与MyISAM的最大不同有两点:&lt;/p&gt;
&lt;p&gt;​	一、是支持事务（TRANSACTION);&lt;/p&gt;
&lt;p&gt;​	二、是采用了行级锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;事务知识复习&#34;&gt;&lt;a href=&#34;#事务知识复习&#34; class=&#34;headerlink&#34; title=&#34;事务知识复习&#34;&gt;&lt;/a&gt;事务知识复习&lt;/h3&gt;&lt;h4 id=&#34;四大特性&#34;&gt;&lt;a href=&#34;#四大特性&#34; class=&#34;headerlink&#34; title=&#34;四大特性&#34;&gt;&lt;/a&gt;四大特性&lt;/h4&gt;&lt;p&gt;事务是由一组SQL语句组成的逻辑处理单元，事务具有以下4个属性，通常简称为事务的ACID属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;原子性（Atomicity)&lt;/font&gt;﹔事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;一致性（Consistent)&lt;/font&gt;:在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性;事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;隔离性（lsolation)&lt;/font&gt;:数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=red&gt;持久性（Durable)&lt;/font&gt;:事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;并发带来的问题&#34;&gt;&lt;a href=&#34;#并发带来的问题&#34; class=&#34;headerlink&#34; title=&#34;并发带来的问题&#34;&gt;&lt;/a&gt;并发带来的问题&lt;/h4&gt;&lt;p&gt;更新丢失(Lost Update)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当两个或多个事务选择同一行，然后基于最初选定的值更新该行时，由于每个事务都不知道其他事务的存在，就会发生丢失更新问题――最后的更新覆盖了由其他事务所做的更新。&lt;br&gt;例如，两个程序员修改同一java文件。每程序员独立地更改其副本，然后保存更改后的副本，这样就覆盖了原始文档。最后保存其更改副本的编辑人员覆盖前一个程序员所做的更改。&lt;br&gt;如果在一个程序员完成并提交事务之前，另一个程序员不能访问同一文件，则可避免此问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;脏读(Dirty Reads)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说就是 读了未提交的，此时事务级别在最低，改善方法就是提高级别即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不可重复读(Non-Repeatable Reads)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说就是在一个事务中多次读取某些数据，数据的条数没有变，但是数据却变了。&lt;/p&gt;
&lt;p&gt;重在修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;幻读(Phantom Reads)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说就是在一个事务中多次读取某些数据，数据的条数变了&lt;/p&gt;
&lt;p&gt;重在添加、删除&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;事务的隔离级别&#34;&gt;&lt;a href=&#34;#事务的隔离级别&#34; class=&#34;headerlink&#34; title=&#34;事务的隔离级别&#34;&gt;&lt;/a&gt;事务的隔离级别&lt;/h4&gt;&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220819211429410-1660960902143.png&#34; class=&#34;&#34;&gt;




&lt;h4 id=&#34;面试题-1&#34;&gt;&lt;a href=&#34;#面试题-1&#34; class=&#34;headerlink&#34; title=&#34;面试题&#34;&gt;&lt;/a&gt;面试题&lt;/h4&gt;&lt;p&gt;不可重复读和幻读的区别？如何解决？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	他们都是在一个事务中对某些数据进行多次读取，但是不可重复读的问题重在多次读取的数据不都一致；幻读重在多次读取确得到不一样数据量的数据&lt;/p&gt;
&lt;p&gt;解决办法：&lt;/p&gt;
&lt;p&gt;​	重复读加行数&lt;/p&gt;
&lt;p&gt;​	幻读加表锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;案例分析&#34;&gt;&lt;a href=&#34;#案例分析&#34; class=&#34;headerlink&#34; title=&#34;案例分析&#34;&gt;&lt;/a&gt;案例分析&lt;/h3&gt;&lt;p&gt;准备&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;create table test_innodb_lock (
a int(11),
b varchar(16)
)engine=innodb;I

insert into test_innodb_lock values(1,&amp;#39;b2&amp;#39;);
insert into test_innodb_lock values(3,&amp;#39;3&amp;#39;);
insert into test_innodb_lock values(4,&amp;#39;4000&amp;#39;);
insert into test_innodb_lock values(5,&amp;#39;5000&amp;#39;);
insert into test_innodb_lock values(6,&amp;#39;6000&amp;#39;);
insert into test_innodb_lock values(7,&amp;#39;7000&amp;#39;);
insert into test_innodb_lock values(8,&amp;#39;80O0&amp;#39;);
insert into test_innodb_lock values(9,&amp;#39;9000&amp;#39;);
insert into test_innodb_lock values(10,&amp;#39;b1&amp;#39;);

create index test_innodb_a_ind  on test_innodb_lock(a);
create index test_innodb_b_ind  on test_innodb_lock(b);
-- 打开两个会话 并且都关闭自动提交
set autocommit=0;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;行锁演示&#34;&gt;&lt;a href=&#34;#行锁演示&#34; class=&#34;headerlink&#34; title=&#34;行锁演示&#34;&gt;&lt;/a&gt;行锁演示&lt;/h4&gt;&lt;table  border=&#34;1px solid red;&#34; &gt;
    &lt;tr &gt;
        &lt;th&gt;Session 1&lt;/th&gt;
        &lt;th&gt;Session 2&lt;/th&gt;
        &lt;th&gt;explain  &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;th style=&#34;text-align:center; &#34; colspan=&#39;3&#39;&gt;case 1&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819233537212.png&#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                关闭 Session 1 的自动提交
            &lt;/p&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819230937872.png&#34;/&gt;&lt;br/&gt;
            &lt;p&gt;
                关闭 Session 2 的自动提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
             &lt;p style=&#34;text-align:center; &#34;&gt;
                目的是:模拟高并发的情况下事务的处理情况，就好比一个SQL在修改但是没又被提交
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                在Innodb引擎作用下默认行锁，可以自动锁住我们当行数据保证数据的准确性
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; style=&#34;text-align:center;&#34;  &gt;case 2&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819234521630.png&#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 修改a=4的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819233807979.png &#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 无法查询到原有数据
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p&gt;
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34;  style=&#34;text-align:center;&#34; &gt;case 3&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819234824459.png&#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 提交事务
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819234803742.png &#34;/&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 提交事务()
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;&gt;
                Session 2 这里也可以当做是清除之前数据库累计事务
            &lt;/p&gt;
            &lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
               如果不提交，我们的Session 2 还是原来的数据
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; style=&#34;text-align:center;&#34; &gt;case 4&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235205871.png &#34;/&gt;
            &lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 修改a=4的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235132716.png&#34;/&gt;&lt;br/&gt;            
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 修改a=9的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                两个 Session 操作不同的数据，互补影响，充分的体现了行锁的作用
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; style=&#34;text-align:center;&#34; &gt;case 5&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820093552303.png &#34;/&gt;
            &lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 修改a=1的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820093614653.png&#34;/&gt;&lt;br/&gt;            
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 修改a=1的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                两个 Session 操作相同的数据，互相影响
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session2 在 Session1 没有提交之前，直接处于阻塞状态
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;3&#34; style=&#34;text-align:center;&#34; &gt;case 5&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235205871.png &#34;/&gt;
            &lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 1 修改a=4的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220819235132716.png&#34;/&gt;&lt;br/&gt;            
            &lt;p style=&#34;text-align:center; &#34;&gt;
                Session 2 修改a=9的数据，不提交
            &lt;/p&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;
                两个 Session 操作不同的数据，互补影响，充分的体现了行锁的作用
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;






&lt;h4 id=&#34;索引失效导致行锁变成表锁&#34;&gt;&lt;a href=&#34;#索引失效导致行锁变成表锁&#34; class=&#34;headerlink&#34; title=&#34;索引失效导致行锁变成表锁&#34;&gt;&lt;/a&gt;索引失效导致行锁变成表锁&lt;/h4&gt;&lt;table  border=&#34;1px solid red;&#34; &gt;
    &lt;tr &gt;
        &lt;th&gt;Session 1&lt;/th&gt;
        &lt;th&gt;Session 2&lt;/th&gt;
        &lt;th&gt;explain  &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000724418.png&#34;/&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000816926.png&#34;/&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                我们在最开始准备阶段，就创建了关于a ,b 的索引(单索引)
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                我们之前说过，在where上不要进行隐式转换，这样会导致索引失效
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                从这个例子中我们左边进行了隐式操作，导致索引失效，第二个 Session
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                直接进入到了阻塞状态，&lt;a font=&#34;color:&#39;red&#39;&#34;&gt;表明了我们的索引失效让行锁变成了表锁&lt;/a&gt;
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000801075.png&#34;/&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;img data-src= &#34;https://gitee.com/zjj3366/zjj3366/raw/master/docs/imgs/DataBase_MysqlSuper/image-20220820000837775.png&#34;/&gt;&lt;br/&gt;
        &lt;/td&gt;
        &lt;td&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
               上面的例子中直至Session 1 回话结束，这时候释放了锁
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
              我们的 Session 2 才接受到了锁，进入了表
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
               这个例子充分的表明了，我们在操作中一定要注意索引失效的问题
            &lt;/p&gt;&lt;br/&gt;
            &lt;p style=&#34;text-align:center; &#34;&gt;        
                他有可能会导致我们效率更低
            &lt;/p&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;





&lt;h4 id=&#34;间隙锁的危害&#34;&gt;&lt;a href=&#34;#间隙锁的危害&#34; class=&#34;headerlink&#34; title=&#34;间隙锁的危害&#34;&gt;&lt;/a&gt;间隙锁的危害&lt;/h4&gt;&lt;p&gt;【概念】&lt;/p&gt;
&lt;p&gt;​	当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据记录的索引项加锁;对于键值在条件范围内但并木存在的记录，叫做“间隙（GAP)”，&lt;/p&gt;
&lt;p&gt;InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。&lt;/p&gt;
&lt;p&gt;【危害】&lt;br&gt;因为Query执行过程中通过过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，&lt;br&gt;而造成在锁定的时候无&lt;br&gt;法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;-- session 1
update t1 set b=&amp;#39;12312&amp;#39; where a&amp;gt;1 and a&amp;lt;8;

-- session 2
insert into t1 values(5,&amp;#39;asda&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220820001444127-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;明显的看到在Session 1执行结束之后，执行Session 2 即使他们操作的不是同一行也会因为间隙锁的缘故锁定这一行，即使不存在也是如此，直到commit之后 Session 2才反应&lt;/p&gt;
&lt;h4 id=&#34;如何锁定一行&#34;&gt;&lt;a href=&#34;#如何锁定一行&#34; class=&#34;headerlink&#34; title=&#34;如何锁定一行&#34;&gt;&lt;/a&gt;如何锁定一行&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;/*
select xoo.... for update锁定某一行后，其它的操作会械阻塞，直到锁定行的会话提交commit
*/
begin;
select * from test_innodb_lock where a = 8 for update;
commit;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;案例结论&#34;&gt;&lt;a href=&#34;#案例结论&#34; class=&#34;headerlink&#34; title=&#34;案例结论&#34;&gt;&lt;/a&gt;案例结论&lt;/h3&gt;&lt;p&gt;​	Innodb存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定会要更高一些，但是在整体并发处理能力方面要远远优于MyISAM的表级锁定的。当系统并发量较高的时候，Innodb的整体性能和MyIlSAM相比就会有比较明显的优势了。&lt;/p&gt;
&lt;p&gt;​	但是，Innodb的行级锁定同样也有其脆弱的一面，当我们使用不当的时候，可能会让Innodb的整体性能表现不仅不能比MyISAM高，甚至可能会更差。(索引失效行锁变表锁)&lt;/p&gt;
&lt;h3 id=&#34;如何分析行锁定&#34;&gt;&lt;a href=&#34;#如何分析行锁定&#34; class=&#34;headerlink&#34; title=&#34;如何分析行锁定&#34;&gt;&lt;/a&gt;如何分析行锁定&lt;/h3&gt;&lt;p&gt;通过检查InnoDB_row_lock状态变量来分析系统上的行锁的争夺情况&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;show status like &amp;#39;innodb_row_lock%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;img data-src=&#34;/2022/10/07/MySQL_Super/image-20220820002244586-1660960902143.png&#34; class=&#34;&#34;&gt;


&lt;p&gt;对各个状态量的说明如下:&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_current_waits：当前正在等待锁定的数量;&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_time：队系统启动到现在锁定总时间长度;&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_time_avg：每次等待所花平均时间;&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_time_max：从系统启动到现在等待最常的一次所花的时间;&lt;/p&gt;
&lt;p&gt;Innodb_row_lock_waits：系统启动后到现在总共等待的次数;&lt;/p&gt;
&lt;p&gt;对于这5个状态变量，比较重要的主要是&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;Innodb_row_lock_time_avg（等待平均时长）&lt;/font&gt;，&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;Innodb_row_lock_waits（等待总次数)&lt;/font&gt; ，&lt;/p&gt;
&lt;p&gt;&lt;font color=red&gt;lnnodb_row_lock_time（等待总时长）这三项&lt;/font&gt;。&lt;/p&gt;
&lt;p&gt;尤其是当等踌次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待&lt;br&gt;然后根据分析结果着手指定优化计划。&lt;/p&gt;
&lt;h3 id=&#34;优化意见&#34;&gt;&lt;a href=&#34;#优化意见&#34; class=&#34;headerlink&#34; title=&#34;优化意见&#34;&gt;&lt;/a&gt;优化意见&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;尽可能让所有数据检索都通过索引来完成，避免无索引行锁升级为表锁。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;合理设计索引，尽量缩小锁的范围&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽可能较少检索条件，避免间隙锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽量控制事务大小，减少锁定资源量和时间长度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;尽可能低级别事务隔离&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;页锁-案例介绍&#34;&gt;&lt;a href=&#34;#页锁-案例介绍&#34; class=&#34;headerlink&#34; title=&#34;页锁(案例介绍)&#34;&gt;&lt;/a&gt;页锁(案例介绍)&lt;/h2&gt;&lt;p&gt;开销和加锁时间界于表锁和行锁之间;会出现死锁;锁定粒度界于表锁和行锁之间，并发度一般。&lt;/p&gt;
&lt;h1 id=&#34;附录&#34;&gt;&lt;a href=&#34;#附录&#34; class=&#34;headerlink&#34; title=&#34;附录&#34;&gt;&lt;/a&gt;附录&lt;/h1&gt;&lt;div name=select_type&gt;
    &lt;a style=&#34;color:red; &#34; &gt;Select_Type&lt;/a&gt;
&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;select_type价值&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;JSON名称&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SIMPLE&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;简单选择（不使用UNION或子查询）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;PRIMARY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;多层子查询中最外层选择&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UNION&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;联盟中的第二个或稍后的SELECT语句&lt;br/&gt;若第二个SELECT出现在UNION之后，则被标记为UNION;&lt;br/&gt;若UNION包含在FROM子句的子查询中,外层SELECT将被标记为:DERIVED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DEPENDENT UNION&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;dependent(true)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;UNION中的第二个或更高版本的SELECT语句，依赖于外部查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UNION RESULT&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;union_result&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;从UNION表获取结果的SELECT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;SUBQUERY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;子查询中的第一个SELECT&lt;br/&gt;在SELECT 或 WHERE列表中包含了子查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DEPENDENT SUBQUERY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;dependent(true)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;子查询中的第一个SELECT,依赖于外部查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;DERIVED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;没有&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;派生表&lt;br/&gt;在FROM列表中包含的子查询被标记为DERIVED(衍生)MySQL会递归执行这些子查询，把结果放在临时表里。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;MATERIALIZED&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;material!zed_from_subquery&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;实例化子查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UNCACHEABLE SU3QUERY&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;cacheable(false)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;无法缓存其结果并且必须为外部查询的每一行重新计算其结果的子查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;UNCACHEABLE UNION&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;cacheable(false)&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;在属于不可缓存子查询的UNION中的第二个或更高版本选择（请参见UNCACHEABLE SUBQUERY）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
 ]]></description>
        </item>
    </channel>
</rss>
